import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.3.54',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 交易日志
model LogEntry {
  // 交易发起方
  from: string(name='from', example='d3936015f0f4676a03a1bdea8b6fc24390f9f147853c5398e989dd30afae643b'),
  // log信息
  logData: string(name='log_data', example='82067b2254223a302c225622...//可通过蚂蚁提供的区块日志解析工具分析交易内容'),
  // 交易接受方
  to: string(name='to', example='f76abaaa47c23bd27d0e77bc625773df9776d2f273b569d1074d89643fb73feb'),
  // 交易topic
  topics: [ string ](name='topics', example='call_contract'),
}

// 交易扩展字段
model Extension {
  // key
  key: long(name='key', example='1'),
  // value
  value: string(name='value', example='value'),
}

// 用户价格
model UserPrice {
  // 具体价格
  price: string(name='price', example='10.0000'),
  // 相对比例
  ratio: string(name='ratio', example='1'),
  // 对租户价格(需要和当前生效价格匹配)
  snapshotTenantPrice: string(name='snapshot_tenant_price', example='10.0000'),
  // 价格类型(数值/比例)
  userPriceType: long(name='user_price_type', example='0 | 1'),
  // 租户用户价格包括费率
  userPriceWithCommission: string(name='user_price_with_commission', example='1.001'),
}

// 手续费分级
model CommissionLayer {
  // 阶梯起始值，无结束值
  startNum: string(name='start_num', example='2'),
  // 手续费费率
  deductRatio: string(name='deduct_ratio', example='0.0001'),
  // 固定的商品费率值
  deductToken: string(name='deduct_token', example='10'),
}

// 商品交易模式
model IPTradeMode {
  // 交易类型，0：销售抽拥；1:按件付费
  tradeType?: [ long ](name='trade_type', example='0'),
  // 佣金比例
  commissionWeight?: string(name='commission_weight', example='0.1'),
  // 保底商品销售金额
  guaranteeSaleNumber?: string(name='guarantee_sale_number', example='1000000'),
  // 单件单价
  unitPrice?: string(name='unit_price', example='12'),
  // 保底商品数量
  guaranteeGoodsNumber?: string(name='guarantee_goods_number', example='20000'),
}

// 交易
model BlockTransaction {
  // 交易信息
  data: string(name='data', example='05656e747279a2...'),
  // 交易扩展信息
  extension: [ Extension ](name='extension', example=''),
  // 交易发起方
  from: string(name='from', example='d3936015f0f4676a03a1bdea8b6fc24390f9f147853c5398e989dd30afae643b'),
  // 交易gas消耗
  gas: long(name='gas', example='1234'),
  // 分组id，暂时没用
  groupId: string(name='group_id', example='0000000000000000000000000000000000000000'),
  // 交易哈希
  hash: string(name='hash', example='7f73437ea59ff23cf1050d5511fe8d94ed5ec8eab8f9175f7f3ffcbb05b374ee'),
  // 交易随机数
  nonce: string(name='nonce', example='13945910133563405517'),
  // 交易时间
  period: long(name='period', example='1583989453107'),
  // 交易签名
  signature: [ string ](name='signature', example='c75f573981b3a1fcadea90cd530f5802e0...'),
  // 交易时间戳
  timestamp: long(name='timestamp', example='1583989453107'),
  // 交易接收方
  to: string(name='to', example='f76abaaa47c23bd27d0e77bc625773df9776d2f273b569d1074d89643fb73feb'),
  // 2
  type: long(name='type', example='11'),
  // 交易转账金额
  value: long(name='value', example='0'),
  // 2
  version: long(name='version', example='2'),
}

// 联系人详情
model DockingPeopleInfo {
  // 名字
  name: string(name='name', example='名字'),
  // 手机号
  mobilePhone: string(name='mobile_phone', example='13677548932'),
  // 职位
  position: string(name='position', example='职位'),
  // 邮箱
  email?: string(name='email', example='邮箱'),
  // 钉钉号
  dingDing?: string(name='ding_ding', example='钉钉号'),
  // 座机
  telePhone?: string(name='tele_phone', example='0571-88888888'),
}

// 交易收据
model BlockReceipt {
  // 使用的gas数量
  gasUsed: long(name='gas_used', example='9640671'),
  // 收据log信息
  logs: [ LogEntry ](name='logs', example=''),
  // 交易输出
  output: string(name='output', example='00'),
  // 交易结果，0为成功
  result: long(name='result', example='0'),
}

// 手续费子结构体
model SubCommissionRule {
  // deduct_token
  deductToken: string(name='deduct_token', example='deduct_token'),
  // deduct_ratio
  deductRatio: string(name='deduct_ratio', example='deduct_ratio'),
  // account_id
  accountId: string(name='account_id', example='account_id'),
}

// ip的sku信息
model IpSkuInfo {
  // ip的链上id
  ipId: string(name='ip_id', example='xxxx'),
  // ip的渠道名字
  channelName: string(name='channel_name', example='tianmao'),
  // 售卖的商品价格范围
  priceRange: string(name='price_range', example='100-200'),
  // ip售卖单价
  purchasePrice: string(name='purchase_price', example='1.1'),
  // 套餐中ip的数量
  saleNum: string(name='sale_num', example='10000'),
}

// 商品IP授权信息
model IPAuthorizationInfo {
  // 授权模式,0普通授权/1独家授权
  authorizationModel?: [ long ](name='authorization_model', example='0'),
  // 授权类型，衍生品授权，营销授权，商标授权，数字虚拟授权，其他
  authorizationType?: [ string ](name='authorization_type', example='衍生品授权'),
  // 授权范围
  authorizationScope?: string(name='authorization_scope', example='服装行业、电器行业'),
  // 授权要求
  authorizationRequirement?: string(name='authorization_requirement', example='合作商家必须拥有XX资质'),
}

// 商品规格
model ProductSpecification {
  // 规格名称
  specificationName: string(name='specification_name', example='尺寸'),
  // 规格值
  specificationValue: string(name='specification_value', example='400x400'),
}

// 正版码配置的商品信息
model IPCodeGoodsInfo {
  // 商品名称
  goodsName?: string(name='goods_name', example='商品名称'),
  // 商品链接
  goodsUrl?: string(name='goods_url', example='商品链接'),
  // 商品图片
  goodsImage?: string(name='goods_image', example='商品图片'),
  // 商品图片临时访问地址，可直接访问
  goodsImageTmp?: string(name='goods_image_tmp', example='http://xxx'),
  // 商品店铺名称/商品出品方
  goodsStore?: string(name='goods_store', example='商品店铺名称'),
  // 店铺logo图片链接
  goodsStoreLogo?: string(name='goods_store_logo', example='oss://myexchange/12566587671fc8f77d37...5dfb67fa1.jpeg'),
  // 店铺logo临时访问地址
  goodsStoreLogoTmp?: string(name='goods_store_logo_tmp', example='http://xxx'),
  // 商品描述
  goodsDescription?: string(name='goods_description', example='这是一段商品描述'),
  // 商品品牌
  goodsBrand?: string(name='goods_brand', example='小龙坎'),
  // 授权过期类型，0：长久有效，1：有效日期内有效
  authorizationExpiratedType?: string(name='authorization_expirated_type', example='0'),
  // 授权截止日期
  authorizationEndTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='authorization_end_time', example='2018-10-10T10:10:00Z'),
  // 发售渠道
  goodsSaleChannel?: string(name='goods_sale_channel', example='拼多多;淘宝'),
  // 商品规格
  goodsSpecifications?: [ ProductSpecification ](name='goods_specifications', example=''),
  // 是否展示批次数据
  isDisplayBatchdata?: boolean(name='is_display_batchdata', example='true, false'),
}

// 权益附属信息
model EquityExtInfo {
  // 指定兑换日限制已使用
  limitPerDayUsed: long(name='limit_per_day_used', example='10'),
  // 指定兑换月限制已使用
  limitPerMonthUsed: long(name='limit_per_month_used', example='100'),
  // 权益开放的租户ID
  openToTenantId: string(name='open_to_tenant_id', example='ID'),
  // 指定日期
  targetDate: string(name='target_date', example='12121212'),
  // 权益对租户价格
  tenantPrice: string(name='tenant_price', example='10.0000'),
  // 授权给租户用户的价格
  tenantUserPrice: UserPrice(name='tenant_user_price', example='10.00'),
  // 租户价格包括费率
  tenantPriceWithCommission: string(name='tenant_price_with_commission', example='10.001'),
  // 费率
  commission: string(name='commission', example='0.001'),
}

// 实际售卖的商品信息
model IPOrderGoods {
  // 订单ID
  ipOrderId?: string(name='ip_order_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 数据渠道类型：0 手动录入，1 淘宝开放平台
  dataType: long(name='data_type', example='0'),
  // ID类型
  idType: long(name='id_type', example='0'),
  // 商品ID
  goodsId: string(name='goods_id', example='goodsId'),
  // 商品名称
  goodsName: string(name='goods_name', example='goodsName'),
  // 商家昵称
  nick?: string(name='nick', example='小浣熊官方旗舰店店主'),
}

// Ip正版码信息中Ip相关信息
model IPCodeIpGoodInfo {
  // IP名称
  ipName: string(name='ip_name', example='飞天小女警'),
  // IP描述
  ipDescription: string(name='ip_description', example='飞天小女警是深受90后喜欢的一款Ip。'),
  // IP主图oss地址
  ipImgUrl: string(name='ip_img_url', example='OSS://9ff608718f98f7c52746a6a1eda180ab55b1d5d008ba796f98b3cf484f275a36.jpeg;'),
  // IP主图，非oss地址，可直接访问的图片地址
  ipImgUrlTmp?: string(name='ip_img_url_tmp', example='http://xxx'),
}

// 消费卡交易信息附加数据
model MetaDataDO {
  // key
  key: string(name='key', example='config'),
  // value
  value: string(name='value', example='true'),
}

// 余额钱包信息
model DebitWallet {
  // 钱包余额(单位:元, 精确到小数点后4位)
  balance: string(name='balance', example='100.0000'),
  // 开户名称
  bankAccountName: string(name='bank_account_name', example='张三'),
  // 开户地
  bankAddress: string(name='bank_address', example='杭州市西湖区***'),
  // 开户银行分支机构名称
  bankBranchName: string(name='bank_branch_name', example='招商银行高新支行'),
  // 开户卡号
  bankCardId: string(name='bank_card_id', example='53486234329475'),
  // 开户行名称
  bankName: string(name='bank_name', example='***银行'),
  // 其他信息（例举：联行号）
  extInfo: string(name='ext_info', example='扩展信息'),
  // 资金管理员
  fundManagerId: string(name='fund_manager_id', example='53487152345234132'),
  // 资金托管员
  trusteeId: string(name='trustee_id', example='52345213423742'),
  // 钱包类型（0:debit,1:credit）
  walletType: long(name='wallet_type', example='0'),
}

// sku的基础信息
model IpSkuEmphasisInfo {
  // 价格区间，不做校验
  priceRange: string(name='price_range', example='x x x x x'),
  // 单价
  purchasePrice: string(name='purchase_price', example='1.1'),
  // 套餐数量
  saleNum: string(name='sale_num', example='1111'),
}

// 信用钱包信息
model CreditWallet {
  // 最大授信额度(单位:元,精确到小数点后4位)
  maxBalance: string(name='max_balance', example='100.0000'),
  // 已经使用的授信额度(单位:元,精确到小数点后4位)
  usedBalance: string(name='used_balance', example='100.0000'),
  // 钱包类型（0:debit,1:credit）
  walletType: long(name='wallet_type', example='1'),
  // 资金管理员
  fundManagerId: string(name='fund_manager_id', example='53487152345234132'),
  // 资金托管员
  trusteeId: string(name='trustee_id', example='52345213423742'),
  // 其他信息（例举：联行号）
  extInfo: string(name='ext_info', example='扩展信息'),
}

// 权益详情
model EquityDetail {
  // 权益描述
  description: string(name='description', example='description'),
  // 权益描述图片OSS地址（分号;分隔）
  descImages: string(name='desc_images', example='OSS1;OSS2'),
  // 权益ID
  equityId: string(name='equity_id', example='7f1be9108651f97513b5b59030f5b059e58a59d263ab426cbf26337f91642caa'),
  // 权益名称
  equityName: string(name='equity_name', example='权益1'),
  // 权益类型
  equityType: string(name='equity_type', example='0200050002'),
  // 权益面值(元)
  equityValue: string(name='equity_value', example='20.00'),
  // 权益主图片OSS地址（分号;分隔）
  images: string(name='images', example='OSS1;OSS2'),
  // 对客价(元)
  price: string(name='price', example='20.00'),
  // 权益SKU
  skuId: string(name='sku_id', example='20200407050700000000404'),
}

// IP授权服务: ContactInfo
model IPContactInfo {
  // 联系人姓名
  name: string(name='name', example='张三'),
  // 联系人手机号码
  mobile?: string(name='mobile', example='1388888888'),
  // 联系人电话号码
  phone?: string(name='phone', example='0551-12345678'),
  // 联系人类型, 1-法人；2-实际控制人；3-代理人；4-其他
  type: long(name='type', example='1'),
  // 联系人身份证号
  certno?: string(name='certno', example='320000000000000000'),
}

// 区块头
model BlockHeader {
  // gas总消耗
  gasUsed: long(name='gas_used', example='12743895'),
  // 十六进制区块哈希值
  hash: string(name='hash', example='1344a095ae43e0dbb82e1986a5ab1357a5108d7bf9066f8e52f4b8bf1260a06f'),
  // log bloom
  logBloom: string(name='log_bloom', example='000000000000000400000...'),
  // 区块高度
  number: long(name='number', example='1920810'),
  // 十六进制区块父hash
  parentHash: string(name='parent_hash', example='daf5181a24e6e712988751bd9f808636bd5f291ec7cbef6193198b629d6452b0'),
  // 交易单据树根
  receiptRoot: string(name='receipt_root', example='ac7ec491ed17d6995ce0a919b7be65e431ba4dc9072d485496207e1f83ed5779'),
  // 状态树根
  stateRoot: string(name='state_root', example='ff0326e45d179e03cd0a077b8cc886935c69b60dde5d7b3961a84bbd4ce4e6be'),
  // 区块时间戳
  timestamp: long(name='timestamp', example='1583202479879'),
  // 十六进制交易merkle树根
  transactionRoot: string(name='transaction_root', example='12c7314185b21e13cd5c873043214a8b51879a82698bc563aa97cb9a36705713'),
  // 区块版本
  version: long(name='version', example='1125904201810178'),
}

// 交易token来源信息
model TokenInstructionDO {
  // token类型
  tokenType: long(name='token_type', example='1'),
  // token价格
  tokenPrice: string(name='token_price', example='1'),
  // token来源账户ID
  payAccountId: string(name='pay_account_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
}

// IP授权交易: AddressInfo
model IPAddressInfo {
  // 省份编码
  provinceCode: string(name='province_code', example='370000'),
  // 城市编码
  cityCode: string(name='city_code', example='370001'),
  // 区域编码
  districtCode: string(name='district_code', example='370002'),
  // 详细地址
  address: string(name='address', example='万塘路18号黄龙时代广场B座'),
}

// IP授权服务: CardInfo
model IPCardInfo {
  // 卡户名
  accountHolderName: string(name='account_holder_name', example='马老师'),
  // 卡号
  accountNo: string(name='account_no', example='6214855710610408'),
  // 银行名称
  accountInstName: string(name='account_inst_name', example='招商银行'),
  // 银行缩写
  accountInstId: string(name='account_inst_id', example='CMB'),
  // 联行号
  bankCode?: string(name='bank_code', example='103290003044'),
  // 开户行所在省份
  accountInstProvince: string(name='account_inst_province', example='浙江省'),
  // 开户行所在城市
  accountInstCity: string(name='account_inst_city', example='杭州市'),
  // 开户行支行名称
  accountBranchName: string(name='account_branch_name', example='招商银行杭州高新支行'),
}

// 增值服务信息
model ValueAddedServiceInfo {
  // 增值服务归属账户id
  accountId: string(name='account_id', example='x x x x x'),
  // 增值服务id
  serviceId: string(name='service_id', example='x x x x x'),
  // 增值服务名字
  serviceName: string(name='service_name', example='增值服务名字'),
  // 主图 链接地址
  images: string(name='images', example='oss://1;oss://2'),
  // 详情图
  imagesDetail: string(name='images_detail', example='oss://1;oss://2'),
  // 增值服务描述
  description?: string(name='description', example='描述'),
  // 联系人列表
  dockingPeople: [ DockingPeopleInfo ](name='docking_people', example=''),
  // 资质证明
  copyRight?: string(name='copy_right', example='x x x x x'),
  // 备注
  memo?: string(name='memo', example='备注'),
  // 服务状态（0:待审核 1:审核拒绝 2:上线【审核通过】 3: 下线）
  status: long(name='status', example=''),
}

// 正版码版权方信息
model IPCodeIpOwnerInfo {
  // 版权所有者名称
  ipOwnerName?: string(name='ip_owner_name', example='丹尼尔'),
  // 版权方头像oss地址
  ipOwnerImage?: string(name='ip_owner_image', example='OSS://BAASDT/YHNDSWOS/2021-07-16/kr6492x67fe68049/9ec4e7596f830ad9e1f297353e51ee0bf4b23a83c55126520a6b17b7ea95814e.jpg'),
  // 版权方头像，临时访问地址，可直接访问
  ipOwnerImageTmp?: string(name='ip_owner_image_tmp', example='http://xxx'),
  // ip描述
  ipDescription?: string(name='ip_description', example='这是一段ip描述'),
  // 默认为空或者0是版权信息；1是著作信息；2是创作信息；3是联名信息
  ipOwnerType?: long(name='ip_owner_type', example=''),
}

// 资产附属信息
model AssetExtInfo {
  // 发放账户余额
  dispenseBalance: string(name='dispense_balance', example='1000'),
  // 发放账户归属租户ID
  dispenseTenantId: string(name='dispense_tenant_id', example='tenantid'),
  // 用户账户余额
  userCreditBalance: string(name='user_credit_balance', example='100'),
  // 用户ID
  userId: string(name='user_id', example='user001'),
}

// 钱包的统计信息
model StatisticalInfo {
  // 可用于消费的信用Token等值金额(单位:元, 精确到小数点后12位)	
  creditTokenBalance: string(name='credit_token_balance', example='100.22'),
  // 可用于消费的Token等值金额(单位:元, 精确到小数点后12位)
  debitTokenBalance: string(name='debit_token_balance', example='10.01'),
  // 目前持有的他人Token的金额(单位:元, 精确到小数点后12位)
  otherTokenBalance: string(name='other_token_balance', example='100.00'),
  // 已消费的累积金额(单位:元, 精确到小数点后12位)
  usedTokenBalance: string(name='used_token_balance', example='100.00'),
}

// IP授权服务: SettleRule
model IPSettleRule {
  // 结算类型， 1-表示结算到银行卡；2-表示结算到支付宝账号
  settleType: long(name='settle_type', example='1'),
  // 结算目标 如果settle_type = 1, 这里填写银行卡卡号; 如果settle_type = 2, 这里填写支付宝账号登录号, 且要求与商户名称name同名
  settleTarget: string(name='settle_target', example='myalipay@alipay.com'),
}

// 申请授权合作的备注信息
model IPOrderApplyInfo {
  // 授权合作商品
  authGoods: string(name='auth_goods', example='授权合作商品'),
  // 销售规模数量
  salesAmount: long(name='sales_amount', example='10000'),
  // 销售规模金额
  salesNumber: string(name='sales_number', example='1000.00'),
}

// 区块体
model BlockBody {
  // 区块共识证明(HEX)
  consensusProof: string(name='consensus_proof', example='f8f2f8c9b841f8...'),
  // 区块中交易回执列表
  receiptList: [ BlockReceipt ](name='receipt_list', example=''),
  // 区块中交易列表
  transactionList: [ BlockTransaction ](name='transaction_list', example=''),
}

// 手续费周期
model CommissionPeriod {
  // 手续费费率
  deductRatio: string(name='deduct_ratio', example='0.0001'),
  // 手续费子结构
  subCommissionRules: [ SubCommissionRule ](name='sub_commission_rules', example=''),
  // 买家的历史统计做阶梯计费，最多50个
  merchantLayers: [ CommissionLayer ](name='merchant_layers', example=''),
  // 商品阶梯
  goodsLayers: [ CommissionLayer ](name='goods_layers', example=''),
  // 手续费开始时间（无结束时间）
  startTimeMills: long(name='start_time_mills', example=''),
  // 0: txcount（成功的交易）; 1: 累计交易金额; 2:累计手续费; 3：单笔金额, ...
  layerType: long(name='layer_type', example=''),
  // 分层的周期，（0是月，1是日，2是年（这期不用，需要设置一下）, 3是季度）
  counterTimeType: long(name='counter_time_type', example=''),
  // 商品固定费用
  deductToken: string(name='deduct_token', example='10'),
}

// 商户备付金账户
model Provision {
  // 授信上限
  creditMax: string(name='credit_max', example='99999999.0000'),
  // 授信已使用
  creditUsed: string(name='credit_used', example='0.0000'),
  // 币种
  currency: string(name='currency', example='CNY'),
  // 余额
  debit: string(name='debit', example='99999999.0000'),
}

// ip的基础信息字段
model IpBasicInfo {
  // ip名字
  ipName: string(name='ip_name', example='aaaa'),
  // ip的链上id
  ipId: string(name='ip_id', example='160'),
  // ip类型，多个用;隔开
  ipType: string(name='ip_type', example='ip类型'),
  // 受众群体，多个用;隔开
  audienceGroup: string(name='audience_group', example='受众群体'),
  // ip主图,存放oss图片链接;隔开
  image: string(name='image', example='oss://xxxx;oss://xxx2'),
  // 商品详情图 存放OSS图片链接 用;隔开
  imageDetail: string(name='image_detail', example='oss://1;oss://2'),
  // ip 描述
  description: string(name='description', example='aaaa'),
  // 对接人信息，json列表
  // [{
  // "name":"123", //联系人名字，必填
  // "mobilePhone":"123",// 联系人手机号,必填
  // "email":"456",// 联系人邮箱,选填
  // "dingDing":"999",// 联系人钉钉号,选填
  // "telePhone":"8888",// 联系人座机,选填
  // "position":"aaa"// 联系人职务,必填
  // }]
  dockingPeopleInfo: [ DockingPeopleInfo ](name='docking_people_info', example='[{"name":"123","mobilePhone":"123","email":"456","dingDing":"999","telePhone":"8888","position":"aaa"}]'),
  // 资质证书类型，0为自己上传的资质证书，1为区块链版权证书
  copyRightType: string(name='copy_right_type', example='0'),
  // 资质信息
  copyRight?: string(name='copy_right', example='aaaaa'),
  // 合作案例，图片存放oss链接，多张用,隔开
  cooperationCase?: string(name='cooperation_case', example='oss://1,oss://2'),
  // 合作事项
  cooperationNote?: string(name='cooperation_note', example='xxxx'),
  // 查询渠道
  channelName: string(name='channel_name', example='tianmao'),
  // ip的外部创建时间，毫秒时间戳
  ipCreateTime?: long(name='ip_create_time', example=''),
  // 未来大事件
  futureMilestones?: string(name='future_milestones', example='qwqq'),
  // 推广渠道
  promotionChannels?: string(name='promotion_channels', example='aaaa'),
  // 系统中创建时间
  systemCreateTime: long(name='system_create_time', example=''),
  // ip别名，多个用;隔开
  ipOtherName: string(name='ip_other_name', example='ip别名'),
  // ip的状态 0 待审批， 1 审批通过 2 审批拒绝
  approvalStatus?: long(name='approval_status', example='1'),
  // 审批意见
  approvalComments?: string(name='approval_comments', example='审批意见'),
  // 备注信息
  memo: string(name='memo', example='1111'),
  // 资质生效时间，毫秒时间戳
  copyRightBeginTime: long(name='copy_right_begin_time', example=''),
  // 创建ip的版权方的链上账户
  accountId: string(name='account_id', example='xxxxxx'),
  // 资质生效的结束时间
  copyRightEndTime: long(name='copy_right_end_time', example=''),
  // 账户名称-别名
  accountName?: string(name='account_name', example='xxxx'),
  // 授权信息
  authorizationInfo?: IPAuthorizationInfo(name='authorization_info', example=''),
  // 版权方名称
  externalUserName?: string(name='external_user_name', example='XXX有限公司'),
}

// 正版码配置资源位信息
model IPCodeAdvertisingInfo {
  // 资源位头图
  adImage?: string(name='ad_image', example='资源位头图'),
  // 资源位头图可直接访问的临时链接
  adImageTmp?: string(name='ad_image_tmp', example='http://xxx'),
  // 资源位链接
  adUrl?: string(name='ad_url', example='资源位链接'),
  // 资源商品名称
  adName?: string(name='ad_name', example='小龙坎火锅'),
  // 广告位类型，为空时代表是商品广告位，Resource时代表是资源位
  adType?: string(name='ad_type', example='Resource'),
  // 展示有效期开始时间
  adValidBeginTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='ad_valid_begin_time', example='2018-10-10T10:10:00Z'),
  // 展示有效期结束时间
  adValidEndTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='ad_valid_end_time', example='2018-10-10T10:10:00Z'),
}

// ip的渠道信息带上sku信息
model IpChannelWithSku {
  // 渠道名字
  channelName: string(name='channel_name', example='tianmao'),
  // 授权模式 商品授权 0普通授权/1独家授权 本期只有0
  // 
  authorizationMode: long(name='authorization_mode', example='0'),
  // 新授权模式，0普通授权，1独家授权，支持多选
  newAuthorizationModel?: [ long ](name='new_authorization_model', example='0'),
  // 计费模式 0:按量 1:按金额
  // 
  payMode: long(name='pay_mode', example='0'),
  // ip等级  0:经典IP/1:流量IP/2:设计IP
  ipLevel: long(name='ip_level', example='0'),
  // sku信息
  skuInfo: [ IpSkuInfo ](name='sku_info', example=''),
  // 商品状态（0:待上架，1:上架，2:下架）
  status: long(name='status', example='商品状态（0:待上架，1:上架，2:下架）'),
  // 交易是否需要确认
  tradeNeedConfirm?: boolean(name='trade_need_confirm', example='true, false'),
  // 授权类型
  authorizationType?: [ string ](name='authorization_type', example='衍生品授权'),
  // 保底金区间，0：0；1：10万以下；2:10-30万；3:30-50万；4:50万以上
  guaranteeRange?: long(name='guarantee_range', example=''),
  // 交易模式
  ipTradeMode?: IPTradeMode(name='ip_trade_mode', example=''),
}

// 卡密信息
model Card {
  // 计算理论上应该变为的状态
  calStatus: long(name='cal_status', example='0'),
  // 卡密ID
  cardId: string(name='card_id', example='JFB120041613102200071'),
  // 充值时间
  chargeTime: long(name='charge_time', example='1587014822623'),
  // 数量
  countOfMinUnit: long(name='count_of_min_unit', example='100'),
  // 卡密创建时间
  createTime: long(name='create_time', example='1587013822623'),
  // 创建卡密时的交易hash
  createTxHash: string(name='create_tx_hash', example='3dae198527e4303c2b187fe3946ec12017c15ae1e76614aaeeb30ad8c07c1c68'),
  // 脱敏手机信息
  desensitizedUid: string(name='desensitized_uid', example='149******92'),
  // 附加信息
  extInfo: string(name='ext_info', example='{"card_description":"AlipayPoints"}'),
  // 最小单位数量
  minUnit: long(name='min_unit', example='1'),
  // 公钥
  publicKey: string(name='public_key', example='04fe488725194810b28f7741f4df60af5bb1011b6282ce0efd7456fba41725391ac8ba4ce794c6a3171b14251ccffb0a8b1f0dbe5038993c27c747ecd4a11692a4'),
  // 状态
  status: long(name='status', example='1'),
  // 公钥信息
  uidPublicKey: string(name='uid_public_key', example='04f3bef4d273366bfb2182854707d2d8e71e059e2b6a7b5fc056a1e06b7f1ed673f7bfc6cbf22295e00dac35638379b5e4df39fc9d32acd2565144cc21b094de77'),
  // 卡密在该时间后有效
  validAfter: long(name='valid_after', example='1587013821641'),
  // 卡密在该时间前有效
  validBefore: long(name='valid_before', example='1602604799000'),
  // 有效天数
  validDays: long(name='valid_days', example='180'),
  // 价值
  value: long(name='value', example='100'),
  // 卡密版本
  version: long(name='version', example='0'),
}

// 商品详情
model SKUItem {
  // 集分宝销售费率
  rate: string(name='rate', example='0.006'),
  // 包含集分宝个数
  skuAmount: long(name='sku_amount', example='100'),
  // 商品ID
  skuId: string(name='sku_id', example='da0af02dea0918'),
  // 商品名称
  skuName: string(name='sku_name', example='区块链集分宝200'),
  // 商品面值（单位：元）
  skuPrice: string(name='sku_price', example='2.00'),
  // 商品状态：0可用，1冻结，2下线
  status: long(name='status', example='0'),
}

// 图片OSS URL，包含四个不同大小的图片
model MultiURL {
  // 上传的图片正常大小
  normal: string(name='normal', example='https://myexchange.oss-cn-hangzhou.aliyuncs.com/1259371fc8f77d3fa0.jpeg?Expires=1581625032&OSSAccessKeyId=&Signature=REH79oOsx5MK4%2BEGcFmaSXq6XsM%3D'),
  // style200
  style200: string(name='style_200', example='https://myexchange.oss-cn-hangzhou.aliyuncs.com/1259371fc8f77d3fa0.jpeg?Expires=1581625032&OSSAccessKeyId=&Signature=LoirSoaWnC5bhIP%2BWZT0OqLlSy4%3D&x-oss-process=style%2Fscale_image_200'),
  // style150
  style150: string(name='style_150', example='https://myexchange.oss-cn-hangzhou.aliyuncs.com/1259371fc8f77d3fa0.jpeg?Expires=1581625032&OSSAccessKeyId=&Signature=A1f%2FtKicryG8VOG%2BpAdSyUNLmCs%3D&x-oss-process=style%2Fscale_image_150'),
  // style70
  style70: string(name='style_70', example='https://myexchange.oss-cn-hangzhou.aliyuncs.com/1259371fc8f77d3fa0.jpeg?Expires=1581625032&OSSAccessKeyId=&Signature=QxDxjfSFlpjxB7nKdYr%2BISoMPCI%3D&x-oss-process=style%2Fscale_image_70'),
}

// 链上交易结构
model Transaction {
  // 交易数据，转换位十六进制
  data: string(name='data', example='05656e...5337d'),
  // 卡密管理员链上ID，64位十六进制。
  from: string(name='from', example='288ca9e665e93dc47fb424412eb4614695ab139b8866f32b45242363a1a16fb4'),
  // 交易hash，十六进制编码
  hash: string(name='hash', example='7f73437ea59ff23cf1050d5511fe8d94ed5ec8eab8f9175f7f3ffcbb05b374ee'),
  // 交易随机数
  nonce: long(name='nonce', example='11066299148144480681'),
  // 交易时间
  period: long(name='period', example='0'),
  // from账户对应的公钥，128位十六进制。
  publicKey: string(name='public_key', example='0447ef0595c9949df2abd487c2b989ef7a70...26643c8db78f447a7'),
  // 交易签名，十六进制编码
  signature: string(name='signature', example='c75f573981b3a1fcadea90cd530f5802e03276a8a9e9dd9b8eca8f00b83e398220a4ddbc530f37bcfd51d727394357807f3f7b70e525d9ce1a3aec59093e5ec801'),
  // 交易时间戳
  timestamp: long(name='timestamp', example='1583989453110'),
  // 交易目标地址，64位十六进制。
  to: string(name='to', example='471aa820085ecb3db37508fb0944590448522b5e3836c6abf39ad3540226aa62'),
}

// 租户的备付金列表
model DiscreteValue {
  // 序号
  sortId: long(name='sort_id', example='1'),
  // 文本信息
  text: string(name='text', example='测试链1-人民币账户'),
  // 文本值
  value: string(name='value', example='chainID1-CNY'),
}

// 用于sku config的查询
model SkuWithLevel {
}

// ip 基础信息带上是否更新，只在渠道查询审批中用到
model IpBasicInfoWithUpdate {
  // 基础信息
  ipBasicInfo: IpBasicInfo(name='ip_basic_info', example=''),
  // 是否有更新
  isUpdate: boolean(name='is_update', example='true, false'),
}

// 渠道对应的账户信息
model AccountSettlementInfo {
  // 账户id
  accountId: string(name='account_id', example='761055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 版权方名字
  accountName: string(name='account_name', example='小黄鸭'),
  // WAIT_CHECK:渠道已申请开通但未审核，SUCCESS，审核成功
  settledStatus: string(name='settled_status', example='WAIT_CHECK'),
  // 版权方联系人名字
  contactName?: string(name='contact_name', example='张三'),
  // 版权方联系人手机
  contactMobile?: string(name='contact_mobile', example='18818818888'),
  // 版权方联系人手机号
  contactPhone: string(name='contact_phone', example='(0513)88888888'),
  // 申请入驻时间
  applyTime: long(name='apply_time', example=''),
}

// 正版码配置信息生命周期
model IPCodeConfigTimeInfo {
  // 正版码申请时间，商家申请正版码第一批数量的时间
  codeApplyTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='code_apply_time', example='7238738297892'),
  // 正版码配置时间
  codeSetTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='code_set_time', example='3242342313242333'),
  // 正版码生效时间
  codeEffectTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='code_effect_time', example='323423432432432'),
}

// 可兑换商品列表
model ExchangeableEquityList {
  // 页面上数据在总数据中的结束位置（第几个数据）
  endRow: long(name='end_row', example='10'),
  // 权益信息列表
  equityList: [ EquityDetail ](name='equity_list', example=''),
  // 第一页页码
  firstPage: long(name='first_page', example='1'),
  // 是否有下一页
  hasNextPage: boolean(name='has_next_page', example='true, false'),
  // 是否有前一页
  hasPreviousPage: boolean(name='has_previous_page', example='true, false'),
  // 是否第一页
  isFirstPage: boolean(name='is_first_page', example='true, false'),
  // 是否最后一页
  isLastPage: boolean(name='is_last_page', example='true, false'),
  // 最后一页页码
  lastPage: long(name='last_page', example='2'),
  // 下一页页码
  nextPage: long(name='next_page', example='2'),
  // 排序规则
  orderBy: string(name='order_by', example='desc'),
  // 可兑换的权益总页数
  pages: long(name='pages', example='2'),
  // 当前页码
  pageNumber: long(name='page_number', example='1'),
  // 页面大小
  pageSize: long(name='page_size', example='10'),
  // 前一页页码
  prePage: long(name='pre_page', example='0'),
  // 页面中实际数量
  size: long(name='size', example='10'),
  // 页面上数据在总数据中的开始位置（第几个数据）
  startRow: long(name='start_row', example='1'),
  // 可兑换的权益总数
  total: long(name='total', example='15'),
}

// 手续费规则
model CommissionRule {
  // 一级分账方的账户ID
  accountId: string(name='account_id', example='3d95ea95740377c6b69678f0dab9de1cf09a3dc4a487374a402db8ee7b02a89f'),
  // 手续费规则
  commissionPeriod: CommissionPeriod(name='commission_period', example=''),
}

// 简要扫码信息
model IPSimpleScannedInfo {
  // 扫码人
  userName?: string(name='user_name', example='小王'),
  // 扫码时间
  scannedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='scanned_time', example='2018-10-10T10:10:00Z'),
  // 扫码地址
  gps?: string(name='gps', example='浙江省杭州市滨江区'),
}

// 设置过自定义价格的权益信息
model UserPriceEquity {
  // 权益提供商商户ID
  adminId: string(name='admin_id', example='288ca9e665e93dc47fb424412eb4614695ab139b8866f32b45242363a1a16fb4'),
  // 授权类型
  authType: long(name='auth_type', example='0'),
  // 币种
  currency: string(name='currency', example='USD'),
  // 默认价格
  defaultPrice: string(name='default_price', example='1.21'),
  // 权益描述
  description: string(name='description', example='description'),
  // 权益描述图片
  descImages: string(name='desc_images', example='oss004;oss005;oss006'),
  // 权益ID
  equityD: string(name='equity_d', example='000c7312bf8ba777ccbbfb0df8e965cd5fa67a72bb6f142136b96dc0b2364f19'),
  // 权益名称
  equityName: string(name='equity_name', example='卡券15837'),
  // 权益类型
  equityType: long(name='equity_type', example='1'),
  // 权益主图片
  images: string(name='images', example='oss001;oss002;oss003'),
  // 是否公开权益
  isPublic: boolean(name='is_public', example='true, false'),
  // 商户每日兑换上线
  limitPerMerchantAndDay: long(name='limit_per_merchant_and_day', example='999999999999'),
  // 商户每月兑换上线
  limitPerMerchantAndMonth: long(name='limit_per_merchant_and_month', example='9999999999999999'),
  // 用户每日兑换上线
  limitPerUserAndDay: long(name='limit_per_user_and_day', example='999999999'),
  // 用户每月兑换上限
  limitPerUserAndMonth: long(name='limit_per_user_and_month', example='999999999'),
  // 权益附言信息
  memo: string(name='memo', example='这是权益'),
  // 授权的租户ID
  openToTenantId: string(name='open_to_tenant_id', example='tenantid'),
  // 用户价格
  price: string(name='price', example='1.21'),
  // 用户价格比例
  ratio: string(name='ratio', example='1.1'),
  // 快照租户价格
  snapshotTenantPrice: string(name='snapshot_tenant_price', example='1.11'),
  // 权益状态
  status: long(name='status', example='0'),
  // 权益提供商租户ID
  tenantId: string(name='tenant_id', example='ABC'),
  // 权益库存
  totalCount: string(name='total_count', example='9999999999'),
  // 用户价格类型
  userPriceType: long(name='user_price_type', example='0'),
  // 可用右区间
  useValidNotAfter: long(name='use_valid_not_after', example='1612926693000'),
  // 可用左区间
  useValidNotBefore: long(name='use_valid_not_before', example='1581304293000'),
  // 有效右区间
  validNotAfter: long(name='valid_not_after', example='1612926693000'),
  // 有效左区间
  validNotBefore: long(name='valid_not_before', example='1581304293000'),
  // 价值
  value: string(name='value', example='1.21'),
}

// IP授权交易的账单信息
model IPBill {
  // 订单ID
  ipOrderId: string(name='ip_order_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 账单ID
  ipBillId: string(name='ip_bill_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16534523'),
  // 上传销售数据时的bizId
  bizId: string(name='biz_id', example='bizId0000001'),
  // 收款方
  sellerId: string(name='seller_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb165345237549274'),
  // 付款方
  buyerId: string(name='buyer_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb163472346869786987'),
  // 账单状态
  status: long(name='status', example='4'),
  // 账单创建时间，时间戳（毫秒）
  createTime: long(name='create_time', example='1694896477580'),
  // 备注信息
  memo: string(name='memo', example='备注信息'),
  // 交易类型：0套餐交易，1定向授权
  tradeType: long(name='trade_type', example='0'),
  // 支付链接
  payUrl: string(name='pay_url', example='https://....'),
  // 账单金额，支付金额
  billPayAmount: string(name='bill_pay_amount', example='100.11'),
  // 销售金额
  billSales: string(name='bill_sales', example='10011.00'),
  // 账单周期开始时间，时间戳（毫秒）
  cycleStartTime: long(name='cycle_start_time', example='1694896477580'),
  // 账单周期结束时间，时间戳（毫秒）
  cycleEndTime: long(name='cycle_end_time', example='1594896477580'),
}

// 正版码流转信息
model IPCodeFlowInfo {
  // 拥有用户名称，收藏人
  codeOwnerName?: string(name='code_owner_name', example='小王'),
  // 收藏时间
  codeCollectTime?: long(name='code_collect_time', example='56783872489327492'),
  // 收藏交易哈希
  codeTransHash?: string(name='code_trans_hash', example='dhjysgfhjdsgfhsjguyew7373yuetyudgysadg'),
}

// 电子券批次信息
model CouponCollection {
  // 批次ID
  collectionId: string(name='collection_id', example='COLLECTIONDID'),
  // 电子券批次名称
  name: string(name='name', example='电子券批次名称'),
  // 批次发行方
  issuer: string(name='issuer', example='批次发行方'),
  // 批次前缀
  couponNumberPrefix: string(name='coupon_number_prefix', example='CARD'),
  // 批次管理员链上ID
  couponAdminAccount: string(name='coupon_admin_account', example='f76ce9b19b4cf733e127e40061155d6356bc5cc05db591a1e6c7d4ee4366eb99'),
  // 批次管理员租户ID
  couponAdminTenantId: string(name='coupon_admin_tenant_id', example='OKIJUHYG'),
  // 批次过期观察员链上ID
  expireMonitorAccount: string(name='expire_monitor_account', example='f76ce9b19b4cf733e127e40061155d6356bc5cc05db591a1e6c7d4ee4366eb98'),
  // 批次过期观察员租户ID
  expireMonitorTenantId: string(name='expire_monitor_tenant_id', example='RDTFGUHK'),
  // 是否记名
  needRegistered: boolean(name='need_registered', example='true, false'),
  // 是否创建时记名
  needPreRegistered: boolean(name='need_pre_registered', example='true, false'),
}

// 电子券详细信息
model Coupon {
  // 绑定时间戳（毫秒）
  bindTime: long(name='bind_time', example='0'),
  // 绑定电子券的哈希
  bindTxHash: string(name='bind_tx_hash', example='d6349493c0e50eedba4cb40e893edfdc9deeccd81523e280f27b992d02ffb735'),
  // 电子券理论上应处于的状态（比如电子券已过期）
  calStatus: long(name='cal_status', example='4'),
  // 激活时间戳（毫秒）
  chargeTime: long(name='charge_time', example='0'),
  // 激活码
  couponCode: string(name='coupon_code', example='1234567890asdfghjkl'),
  // 激活码附加信息
  couponExtCode: string(name='coupon_ext_code', example='激活码附加信息'),
  // 电子券ID
  couponId: string(name='coupon_id', example='S20200707123456'),
  // 电子券名称
  couponName: string(name='coupon_name', example='区块链电子券'),
  // 创建时间戳（毫秒）
  createTime: long(name='create_time', example='1604889876156'),
  // 创建电子券的哈希
  createTxHash: string(name='create_tx_hash', example='d6349493c0e50eedba4cb40e893edfdc9deeccd81523e280f27b992d02ffb734'),
  // 脱敏用户ID
  desensitizedUid: string(name='desensitized_uid', example='user***1'),
  // 扩展信息
  extInfo: string(name='ext_info', example='电子券说明'),
  // 最后一次操作时间戳（毫秒）
  lastTime: long(name='last_time', example='1604905008121'),
  // 最后一次操作的交易哈希
  lastTxHash: string(name='last_tx_hash', example='d6349493c0e50eedba4cb40e893edfdc9deeccd81523e280f27b992d02ffb736'),
  // 电子券公钥。椭圆曲线密码学 Secp256k1曲线的公钥，长度64字节，十六进制128位。
  publicKey: string(name='public_key', example='387bcb4db010c177742ab5bd257c9827f...b8b46223505148309a31fe009fcd694'),
  // 调子券信息查询次数
  queryCount: long(name='query_count', example='10000001'),
  // 最后一次查询时间戳（毫秒）
  queryTime: long(name='query_time', example='1604905008121'),
  // 最近一次查询的交易哈希
  queryTxHash: string(name='query_tx_hash', example='d6349493c0e50eedba4cb40e893edfdc9deeccd81523e280f27b992d02ffb738'),
  // 风控状态：0 启用，1 禁用
  riskStatus: long(name='risk_status', example='1'),
  // 电子券状态：
  status: long(name='status', example='0'),
  // 用户公钥
  uidPublicKey: string(name='uid_public_key', example='387bcb4db010c177742ab5bd257c9827f90...'),
  // 有效开始时间（毫秒时间戳）
  validAfter: long(name='valid_after', example='1600000000000'),
  // 有效结束时间（毫秒时间戳）
  validBefore: long(name='valid_before', example='1604889934081'),
  // 价值
  value: string(name='value', example='100.01'),
  // 电子券版本
  version: long(name='version', example='0'),
  // 电子券激活交易哈希
  chargeTxHash: string(name='charge_tx_hash', example='c37bbc026414712669d907134920f8862d58de7e2714d0f0faacf92f147d4646'),
  // 记名电子券持有者账户
  holderUserAccount: string(name='holder_user_account', example='user001'),
}

// IP授权订单已按照周期汇总的销售数据
model IPSalesInfo {
  // 终端商品名称
  goodsName: string(name='goods_name', example='XXX联名牙膏'),
  // 终端商品图片
  goodsImage?: string(name='goods_image', example='oss://myexchange/1259371fc8f77d37...5dfb6d130facf32dd6d4257fa0.jpeg '),
  // 终端销售渠道
  salesChannel?: string(name='sales_channel', example='天猫'),
  // 终端商品链接
  goodsUrl?: string(name='goods_url', example='https://xxx.xxx.com'),
  // 零售价
  price?: string(name='price', example='65'),
  // 商品销售数量
  amount: long(name='amount', example='10000'),
  // 销售金额
  sales: string(name='sales', example='650000'),
  // 实付金额（授权交易）
  payment?: string(name='payment', example='65'),
  // 统计周期开始时间（毫秒时间戳）
  settlementBeginTime: long(name='settlement_begin_time', example=''),
  // 统计周期结束时间（毫秒时间戳）
  settlementEndTime: long(name='settlement_end_time', example=''),
  // 备注信息
  memo: string(name='memo', example='备注信息'),
  // 数据上传操作人
  operator: string(name='operator', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16647534587'),
  // 销售数据上传操作时间（毫秒时间戳）
  operateTime: long(name='operate_time', example=''),
  // 商品信息
  goodsInfo?: string(name='goods_info', example='XXX联名款'),
  // 商品ID
  goodsId?: string(name='goods_id', example='goods_id'),
  // 退款的销售金额，有退款时填写，默认0
  refundSales?: string(name='refund_sales', example='10.00'),
  // 订单信息json string: 用户ID/订单状态/订单创建时间戳ms/订单支付时间戳ms等
  salesExtInfo?: string(name='sales_ext_info', example='{订单信息}'),
  // 用户信息json string: 姓名/手机号/地址等结构化数据
  salesUserInfo?: string(name='sales_user_info', example='{用户信息}'),
}

// token信息
model TokenData {
  // 拥有的token数量
  tokenNumber: long(name='token_number', example='10000000000'),
  // 来源为debit的token数量
  debitToken: long(name='debit_token', example='10000000000'),
  // 来源为debit的token数量
  creditToken: long(name='credit_token', example='0'),
  // token发行者account
  accountId: string(name='account_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
}

// 监修报审表单内容
model SuperviseApprove {
  // 关联的订单id
  orderId: string(name='order_id', example='1111'),
  // 当前的阶段
  stage: long(name='stage', example='1'),
  // json组织，用于存储监修报审的具体信息
  extInfo: string(name='ext_info', example='[{"name":"123","mobilePhone":"123","email":"456","dingDing":"999","telePhone":"8888","position":"aaa"}]'),
  // 当前阶段的审批状态   0:待审批，1:审批通过 2:审批拒绝
  approvalStatus: long(name='approval_status', example='0'),
  // 审批备注
  approvalComments?: string(name='approval_comments', example='x x x x x x'),
  // 上链的交易hash
  txHash: string(name='tx_hash', example='xxxx'),
  // 关联的订单交易的ip id
  ipId: string(name='ip_id', example='cccc'),
  // 关联交易的卖家id
  sellerAccountId: string(name='seller_account_id', example='xxxx'),
  // 关联交易的买家id
  buyerAccountId: string(name='buyer_account_id', example='ccccc'),
  // 审批额外信息
  approvalExtInfo?: string(name='approval_ext_info', example='x x x x x'),
}

// 消费卡的单条交易记录数据
model BlockInstruction {
  // 商品兑换单/订单编号
  orderId: string(name='order_id', example='Afc982d96fAB65b3a49c'),
  // 交易类型
  instructionType: long(name='instruction_type', example='1'),
  // 买家的链上账户Id
  buyerAccountId: string(name='buyer_account_id', example='481055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 卖家的链上账户Id
  sellerAccountId: string(name='seller_account_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 平台机构ID
  platformId: string(name='platform_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 商品ID
  goodsId: string(name='goods_id', example='5Afc982d96fAB65b3'),
  // 商品名称
  displayName: string(name='display_name', example='9cAc8b878184Cb16'),
  // 实际售价(元)
  sellerPrice: string(name='seller_price', example='19.00'),
  // 商品面值(元)
  displayPrice: string(name='display_price', example='20.00'),
  // 备注信息
  memo: string(name='memo', example='备注信息'),
  // 附言
  remark: string(name='remark', example='附言'),
  // 兑换单状态
  status: long(name='status', example='1'),
  // 退款状态
  refundStatus: long(name='refund_status', example='0'),
  // 交易创建时间
  createTimestamp: long(name='create_timestamp', example='1594896477580'),
  // 支付时间
  payTimestamp: long(name='pay_timestamp', example='1596896477580'),
  // 交易附属信息
  extraData: [ MetaDataDO ](name='extra_data', example=''),
  // 交易token来源信息
  tokenInstructions: [ TokenInstructionDO ](name='token_instructions', example=''),
  // 关联交易ID
  relatedOrderId: string(name='related_order_id', example='20200707123456'),
  // 手续费token数量
  commissionToken: string(name='commission_token', example='10000000000'),
  // 卖家收到的token数量
  sellerReceiveToken: string(name='seller_receive_token', example='100000000000000'),
  // 支付类型：买家支付，卖家支付
  payCommissionType: long(name='pay_commission_type', example='0'),
  // 买家手机号
  buyerPhone: string(name='buyer_phone', example='12345678900'),
  // 买家名称
  buyerName: string(name='buyer_name', example='张**'),
  // 买家身份信息
  buyerIdNumber: string(name='buyer_id_number', example='3452375452476349760974263476203764'),
  // 买家身份信息类型
  buyerIdType: string(name='buyer_id_type', example='1'),
  // 买家IP
  buyeIp: string(name='buye_ip', example='10.10.10.10'),
  // 订单原始创建时间，外部传入
  originCreateTime: long(name='origin_create_time', example='1594896477580'),
  // 订单原始订单ID，外部传入
  originOrderId: string(name='origin_order_id', example='origin20200707123456'),
}

// ip的基础信息加上渠道信息
model IpBasicInfoWithChannelInfo {
  // ip的基础信息
  ipBasicInfo: IpBasicInfo(name='ip_basic_info', example=''),
  // ip的渠道信息和sku信息
  ipChannalInfos: [ IpChannelWithSku ](name='ip_channal_infos', example=''),
}

// 授权订单的逐条销售数据
model IPSalesEvery {
  // 电商系统订单编号
  outOrderId: string(name='out_order_id', example='outOrderId0001'),
  // 数据渠道类型：0 手动录入，1 淘宝开放平台
  dataType: long(name='data_type', example='0'),
  // 实际销售渠道
  salesChannel?: string(name='sales_channel', example='TM/TB'),
  // 订单创建时间
  orderCreateTime: long(name='order_create_time', example='1694896477580'),
  // 订单完成时间
  orderFinishTime: long(name='order_finish_time', example='1699896477580'),
  // 本订单销售金额，单位元
  sales: string(name='sales', example='10000.01'),
  // 本订单退款金额，单位元
  refundSales?: string(name='refund_sales', example='100.01'),
  // 店铺名称
  shopName: string(name='shop_name', example='XXX旗舰店'),
  // 商品ID/SKUID/商品编码
  goodsId: string(name='goods_id', example='goodsId001'),
  // 商品名称
  goodsName: string(name='goods_name', example='XXX联名牙刷'),
  // 商品规格
  goodsSpecification: string(name='goods_specification', example='商品规格信息'),
  // 本订单卖出的商品数量
  amount: long(name='amount', example='1'),
  // 备注信息
  memo?: string(name='memo', example='备注信息'),
}

// ip的所有信息，加上更新的flag信息
model IpAllInfo {
  // ip的基础信息
  ipBasicInfo: IpBasicInfo(name='ip_basic_info', example=''),
  // ip的渠道信息带上sku信息
  ipChannalInfo: [ IpChannelWithSku ](name='ip_channal_info', example=''),
  // 是否有更新数据
  isUpdate: boolean(name='is_update', example='true, false'),
}

// 权益
model Equity {
  // 权益管理员ID
  adminId: string(name='admin_id', example='ed7b3acb718eef475454e973b8bac06c5feb1b7ea62f91bc8fab6a5e7cc3c061'),
  // 权益授权类型
  authType: long(name='auth_type', example='0'),
  // 权益锚定币种
  currency: string(name='currency', example='CNY'),
  // 权益默认价格
  defaultPrice: string(name='default_price', example='10.0000'),
  // 权益描述
  description: string(name='description', example='FDCard'),
  // 权益描述图片OSS地址 分号分隔
  descImages: string(name='desc_images', example='oss1;oss2'),
  // 权益附属信息
  equityExtInfo: EquityExtInfo(name='equity_ext_info', example=''),
  // 权益ID
  equityId: string(name='equity_id', example='146bfee42fbc8d05f6c26eebf12f8306ea0df1e48d61bc29ba9b523ed0a6e628'),
  // 权益名称
  equityName: string(name='equity_name', example='FDCardtest'),
  // 商品类型，详见数字商品公约https://tech.antfin.com/docs/2/163896
  equityType: string(name='equity_type', example='0100020001'),
  // 权益主图片OSS地址 分号;分隔
  images: string(name='images', example='oss://myexchange/1259371fc8f77d37...5dfb6d130facf32dd6d4257fa0.jpeg'),
  // 是否为公开权益
  isPublic: boolean(name='is_public', example='true, false'),
  // 商户每日兑换上限
  limitPerMerchantAndDay: long(name='limit_per_merchant_and_day', example='100'),
  // 商户每月兑换上限
  limitPerMerchantAndMonth: long(name='limit_per_merchant_and_month', example='1000'),
  // 用户每日兑换上限
  limitPerUserAndDay: long(name='limit_per_user_and_day', example='10'),
  // 用户每月兑换上限
  limitPerUserAndMonth: long(name='limit_per_user_and_month', example='100'),
  // 附言
  memo: string(name='memo', example='memo'),
  // 权益状态
  status: long(name='status', example='0'),
  // 租户ID
  tenantId: string(name='tenant_id', example='ZEJEZKUA'),
  // 权益库存
  totalCount: string(name='total_count', example='1000000'),
  // 权益使用有效期右闭区间
  useValidNotAfter: long(name='use_valid_not_after', example='1612926693000'),
  // 权益使用有效期左闭区间
  useValidNotBefore: long(name='use_valid_not_before', example='1581304293000'),
  // 权益兑换有效期右闭区间
  validNotAfter: long(name='valid_not_after', example='1612926693000'),
  // 权益兑换有效期左闭区间
  validNotBefore: long(name='valid_not_before', example='1581304293000'),
  // 权益面值
  value: string(name='value', example='10.0000'),
  // 是否计算手续费（0: 更新手续费版本前不在合约计算手续费，1: 在合约计算手续费）
  commissionAccepted: long(name='commission_accepted', example='1'),
}

// 消费卡账户
model ConsumeCardAccount {
  // 授权函地址
  authorizationAddress: string(name='authorization_address', example='授权函地址'),
  // 认证方id
  certificationId: string(name='certification_id', example='213745827640'),
  // 描述
  description: string(name='description', example='描述'),
  // 分布式身份ID
  did: string(name='did', example='did:mychain:Chaos:2e151a8d096c824ab935ad6ef5d95a1ed53d4f81'),
  // 是否有权限采购商品
  authConsumer: boolean(name='auth_consumer', example='true, false'),
  // 是否有权限发行商品
  authProvider: boolean(name='auth_provider', example='true, false'),
  // 个人用户的身份证号码/机构的企业编号
  idNumber: string(name='id_number', example='26357645796897'),
  // 证件类型：0 身份证, 1 护照, 2 军官证, 3 回乡证, 4 港澳证件, 5 营业执照, 6 港澳居民来往内地通行证, 7 台湾居民来往内地通行证, 8 港澳居民居住证, 9 台湾居民居住证, 10事业单位登记证书, 11 社会团体登记证书, 12 民办非企业单位证书, 13 党政机关批准设计文件, 14 全国组织机构代码证书, 15 其他证件
  idType: long(name='id_type', example='0'),
  // 个人用户的手机号码/机构用户的联系电话或邮箱(必填)
  phoneNumber: string(name='phone_number', example='1231524313'),
  // 商户状态
  status: long(name='status', example='0'),
  // 是否可以发行资产
  tokenIssuer: boolean(name='token_issuer', example='true, false'),
  // 账户创建类型（0:用户，1:商户）
  type: long(name='type', example='1'),
  // 账户ID
  userId: string(name='user_id', example='userId0001'),
  // 账户名称
  userName: string(name='user_name', example='name'),
  // 提现银行卡
  withdrawBankCardId: string(name='withdraw_bank_card_id', example='213574517602398'),
  // 账户影响信息
  image: string(name='image', example='oss://1259371fc8f77d37...5dfb6d130facf32dd6d4257fa0.jpeg'),
  // 账户邮箱
  email: string(name='email', example='***@**.com'),
}

// 已授权给商户的权益信息
model OpenedEquity {
  // 商户管理员ID
  adminId: string(name='admin_id', example='288ca9e665e93dc47fb424412eb4614695ab139b8866f32b45242363a1a16fb4'),
  // 授权类型
  authType: string(name='auth_type', example='0'),
  // 币种
  currency: string(name='currency', example='RMB'),
  // 默认价格
  defaultPrice: string(name='default_price', example='21.21'),
  // 权益详情
  description: string(name='description', example='description'),
  // 权益详情图片
  descImages: string(name='desc_images', example='oss3;oss4'),
  // 权益ID
  equityD: string(name='equity_d', example='000c7312bf8ba777ccbbfb0df8e965cd5fa67a72bb6f142136b96dc0b2364f19'),
  // 权益名称
  equityName: string(name='equity_name', example='卡券158375105'),
  // 权益类型
  equityType: long(name='equity_type', example='1234'),
  // 权益主图片
  images: string(name='images', example='oss1;0ss2;0ss3'),
  // 是否是公开权益
  isPublic: boolean(name='is_public', example='true, false'),
  // 每日商户对换限制
  limitPerMerchantAndDay: long(name='limit_per_merchant_and_day', example='999999999'),
  // 每月商户对换限制
  limitPerMerchantAndMonth: long(name='limit_per_merchant_and_month', example='9999999999999'),
  // 每日用户对换限制
  limitPerUserAndDay: long(name='limit_per_user_and_day', example='999999999'),
  // 每月用户对换限制
  limitPerUserAndMonth: long(name='limit_per_user_and_month', example='99999'),
  // 权益附言
  memo: string(name='memo', example='新的权益'),
  // 被授权的租户ID
  openToTenantId: string(name='open_to_tenant_id', example='tenant'),
  // 权益状态
  status: long(name='status', example='0'),
  // 租户ID
  tenantId: string(name='tenant_id', example='BRS'),
  // 授权价格
  tenantPrice: string(name='tenant_price', example='21.21'),
  // 库存
  totalCount: string(name='total_count', example='9999'),
  // 可用右区间
  useValidNotAfter: long(name='use_valid_not_after', example='1612926693000'),
  // 可用左区间
  useValidNotBefore: long(name='use_valid_not_before', example='1581304293000'),
  // 有效右区间
  validNotAfter: long(name='valid_not_after', example='1612926693000'),
  // 有效左时间
  validNotBefore: long(name='valid_not_before', example='1581304293000'),
  // 价值
  value: string(name='value', example='21.21'),
}

// 资产
model Asset {
  // 资产管理员ID
  adminId: string(name='admin_id', example='f46857d8'),
  // 资产附属信息
  assetExtInfo: AssetExtInfo(name='asset_ext_info', example=''),
  // 资产ID
  assetId: string(name='asset_id', example='CT::Asset001'),
  // 资产名称
  assetName: string(name='asset_name', example='CTPoints'),
  // 资产汇率
  assetRate: string(name='asset_rate', example='1000.0000'),
  // 币种
  currency: string(name='currency', example='CNY'),
  // 发行账户余额
  issueAccountBalance: string(name='issue_account_balance', example='0.000'),
  // 过期回收账户余额
  overdueRecoveryAccountBalance: string(name='overdue_recovery_account_balance', example='0.000'),
  // 支付收款账户余额
  receivePaymentAccountBalance: string(name='receive_payment_account_balance', example='0.000'),
  // 中继账户余额
  relayAccountBalance: string(name='relay_account_balance', example='0.000'),
  // 资产状态
  status: long(name='status', example='0'),
  // 租户ID
  tenantId: string(name='tenant_id', example='ORE'),
  // 资产总发行量
  totalIssueBalance: string(name='total_issue_balance', example='11111111.0000'),
}

// 创建电子券的参数
model CouponCreate {
  // 电子券批次ID
  collectionId: string(name='collection_id', example='COLLECTIONID'),
  // 电子券价值
  value: string(name='value', example='100.01'),
  // 电子券名称
  couponName: string(name='coupon_name', example='电子券'),
  // 用户脱敏ID
  desensitizedUid?: string(name='desensitized_uid', example='user***1'),
  // 扩展信息
  extInfo: string(name='ext_info', example='电子券附加信息'),
  // 持有者ID
  holderUserAccount?: string(name='holder_user_account', example='user0001'),
  // 电子券公钥
  publicKey: string(name='public_key', example='387bcb4db010c177742ab5bd257c9827f90bd74806a388b5bc849e4b3867cf0b1cd694'),
  // 时区（暂时固定为GMT+8）
  timeZone: string(name='time_zone', example='GMT+8'),
  // 用户公钥
  uidPublicKey?: string(name='uid_public_key', example='505148309a36375648765972645762365027465071fe009fcd694...'),
  // 有效开始时间
  validAfter: long(name='valid_after', example='1600000000000'),
  // 有效结束时间
  validBefore: long(name='valid_before', example='1604889934081'),
}

// 统计数据
model CounterData {
  // 成交总额
  gmv: string(name='gmv', example='1000000.00'),
  // 公认标准收入
  gaap: string(name='gaap', example='10000.00'),
  // 笔数
  counter: string(name='counter', example='10000'),
}

// 消费卡商品信息
model GoodsResponse {
  // 商品归属的账户ID
  accountId: string(name='account_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb166486abcdf'),
  // 商品名称
  goodsName: string(name='goods_name', example='商品001'),
  // 商品类型
  goodsType: string(name='goods_type', example='0100020001'),
  // 商品描述信息
  description: string(name='description', example='商品描述信息'),
  // 商品库存
  totalCount: long(name='total_count', example='10000'),
  // 显示价格
  displayPrice: string(name='display_price', example='100.01'),
  // 默认价格
  defaultPrice: string(name='default_price', example='100.01'),
  // 是否公开商品
  ifPublic: boolean(name='if_public', example='true, false'),
  // 商品主图片URL
  images: string(name='images', example='image://***'),
  // 商品描述图片，每个图片URL用:隔开
  descImages: string(name='desc_images', example='image://0001:image://0002:image://0003'),
  // 商品状态 0可用，1下线
  status: long(name='status', example='0'),
  // 商品开始时间
  validNotBefore: long(name='valid_not_before', example='1594896477580'),
  // 商品结束时间
  validNotAfter: long(name='valid_not_after', example='1694896477580'),
  // 商品每日上限
  limitPerUserAndDay: long(name='limit_per_user_and_day', example='100'),
  // 商品每月上限
  limitPerUserAndMonth: long(name='limit_per_user_and_month', example='1000'),
  // 商品备注信息
  memo: string(name='memo', example='商品备注信息'),
  // 授权类型
  authType: long(name='auth_type', example='0'),
  // 商品类型
  categoryId: string(name='category_id', example='0100002000001'),
  // 商品ID
  goodsId: string(name='goods_id', example='1456483e1702bef7fd3cceb5e7154b9880ef637daa1fb651e95c20c9f0c929cc'),
}

// T+1日销售数据汇总
model SalesByDay {
  // 订单ID
  ipOrderId: string(name='ip_order_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 版权方ID
  sellerId: string(name='seller_id', example='ACBDEFCABCFE381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 商家ID
  buyerId: string(name='buyer_id', example='ACBDEFCABCFE381055Afc982d96fAB65b3a49cAc8b878184Cb16638783'),
  // 版权方名称
  sellerName: string(name='seller_name', example='版权方'),
  // 商家名称
  buyerName: string(name='buyer_name', example='商家名称'),
  // 日期
  date: string(name='date', example='20210721'),
  // 统计周期-开始时间
  statisticBeginPeriod: long(name='statistic_begin_period', example='1594896477580'),
  // 统计周期-结束时间
  statisticEndPeriod: long(name='statistic_end_period', example='1694896477580'),
  // 商品销售数量
  amount: long(name='amount', example='10000'),
  // 商品总销售额
  sales: string(name='sales', example='100000.00'),
  // 总回退销售额
  refundSales: string(name='refund_sales', example='100.00'),
  // 需支付给版权方的总费用
  payment: string(name='payment', example='1000.00'),
}

// 钱包信息
model WalletInfo {
  // 授信钱包信息
  creditWallet: CreditWallet(name='credit_wallet', example=''),
  // 余额钱包信息
  debitWallet: DebitWallet(name='debit_wallet', example=''),
  // 钱包统计信息
  statisticalInfo: StatisticalInfo(name='statistical_info', example=''),
}

// 正版码被扫描或领取的信息
model IPCodeScannedInfo {
  // 正版码ID
  ipCode: string(name='ip_code', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 正版码所在批次已申请的正版码总数
  batchUsedCount?: long(name='batch_used_count', example='1000'),
  // 用户的ID
  userId: string(name='user_id', example='2d96fAB65b3a49cAc8b878184Cb16'),
  // 用户的名称
  userName: string(name='user_name', example='张三'),
  // 用户头像地址
  avatar: string(name='avatar', example='用户头像地址'),
  // 用户的手机号
  phoneNumber?: string(name='phone_number', example='13291887615'),
  // 用户的位置信息
  gps?: string(name='gps', example='浙江省杭州市西湖区'),
  // 领取正版码的交易哈希
  hash?: string(name='hash', example='交易哈希'),
  // 领取正版码交易所在的区块高度
  blockNumber?: long(name='block_number', example='1234567'),
  // 处理时间(毫秒时间戳)
  timestamp: long(name='timestamp', example='713471745'),
  // IP ID
  ipId: string(name='ip_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb167354725347'),
  // 订单ID
  orderId: string(name='order_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb1653461535297423'),
  // 正版码商品信息配置列表
  goodsInfoList?: [ IPCodeGoodsInfo ](name='goods_info_list', example=''),
  // 正版码资源位配置信息列表
  adInfoList?: [ IPCodeAdvertisingInfo ](name='ad_info_list', example=''),
  // ip版权方信息
  ipownerInfo?: IPCodeIpOwnerInfo(name='ipowner_info', example=''),
  // 0:未配置, 1:配置成功可展示, 4:已经失效, 9:下架【本期不实现】
  ipCodeStatus?: long(name='ip_code_status', example=''),
  // 额外功能，包括是否允许收藏等
  features?: [ long ](name='features', example=''),
  // 核验次数，配置生效后的核验次数统计
  checkCounts?: long(name='check_counts', example='15'),
  // 正版码关联的I IP信息
  ipInfo?: IPCodeIpGoodInfo(name='ip_info', example=''),
  // UNI码
  uniCode?: string(name='uni_code', example='UNI23678678'),
  // 正版码配置附加信息，信息内容由调用方自定义
  extInfo?: string(name='ext_info', example='附加信息'),
  // 收藏时间(UNIX时间戳)0表示未被收藏
  receiveTime?: long(name='receive_time', example='14917547571'),
  // 同一批次存在失效UNI码的场景下,指示更新后的下标
  fixedIndex?: long(name='fixed_index', example='1'),
  // 同一批次存在失效UNI码的场景下,指示更新后的总量
  fixedCount?: long(name='fixed_count', example='99'),
  // 小龙坎有限公司
  accountExternalName?: string(name='account_external_name', example='商家名称'),
}

// IP淘宝店铺信息
model IPShopInfo {
  // 授权申请的内部编码
  itemCode: string(name='item_code', example='381055Afc982'),
  // 淘宝卖家的官方昵称
  sellerNick: string(name='seller_nick', example='卖家昵称1'),
  // 授权渠道名称
  channelName: string(name='channel_name', example='淘宝网'),
  // 数据授权方式
  authType: string(name='auth_type', example='淘宝开放平台'),
  // 授权启始时间戳(unix毫秒)
  authStart: long(name='auth_start', example='100100198'),
  // 授权终止时间戳(unix毫秒)
  authEnd: long(name='auth_end', example='100100198816'),
  // 授权状态(1: Init, 2: Success, 3: Expired)
  authStatus: long(name='auth_status', example='1'),
  // 授权链接
  authUrl: string(name='auth_url', example='https://oauth.taobao.com/authorize?response_type=code&client_id=%s&redirect_uri=%s&state=%s&view=web'),
}

// 区块链信息
model IPCodeChainInfo {
  // 交易哈希
  txHash?: string(name='tx_hash', example='dgdyuwegyuwy73huhuhjhj'),
  // 交易区块
  blockHeight?: long(name='block_height', example='23333333333'),
  // 交易时间
  txTime?: long(name='tx_time', example='63846728467826478264782'),
}

// 手续费规则结果
model CommissionRuleResponse {
  // 手续费到账方
  accountId: string(name='account_id', example='account_id'),
  // 手续费周期列表
  commissionPeriods: [ CommissionPeriod ](name='commission_periods', example=''),
}

// MCC信息(https://gw.alipayobjects.com/os/bmw-prod/05c9a32e-42d1-436b-ace7-13101d91f672.xlsx）
model IPMCC {
  // MCC编码
  mccCode: string(name='mcc_code', example='6073'),
  // 经营类目一级
  categoryLevel1: string(name='category_level1', example='商业及生活服务'),
  // 经营类目二级
  categoryLevel2: string(name='category_level2', example='直销'),
  // 经营类目三级
  categoryLevel3: string(name='category_level3', example='目录直销平台'),
}

// 账户入驻的渠道表
model AccountInChannels {
  // 天猫渠道
  channelName: string(name='channel_name', example='IPMart'),
  // 是否入驻
  isSettled: boolean(name='is_settled', example='true, false'),
  // WAIT_CHECK:渠道已申请开通但未审核，SUCCESS:渠道开通审核成功，渠道开通
  settledStatus?: string(name='settled_status', example='渠道开通状态'),
}

// IP商家的店铺宝贝详细数据
model IPShopItemInfo {
  // 商品数字id
  numId: long(name='num_id', example='1489161932'),
  // 商品标题,不能超过60字节
  title: string(name='title', example='Google test item'),
  // 卖家昵称
  nick: string(name='nick', example='tbtest561'),
  // 价格
  price: string(name='price', example='14.55'),
  // 商品类型(fixed:一口价;auction:拍卖)注：取消团购
  type?: string(name='type', example='fixed'),
  // 商品属性 格式：pid:vid;pid:vid
  props?: string(name='props', example='135255:344454'),
  // 用户自行输入的子属性名和属性值，结构:"父属性值;一级子属性名;一级子属性值;二级子属性名;自定义输入值,....",如：“耐克;耐克系列;科比系列;科比系列;2K5”，input_str需要与input_pids一一对应，注：通常一个类目下用户可输入的关键属性不超过1个。所有属性别名加起来不能超过 3999字节。
  inputStr?: string(name='input_str', example='耐克;耐克系列;科比系列;科比系列;2K5'),
  // 商品描述, 字数要大于5个字节，小于25000个字节
  desc?: string(name='desc', example='这是一个好商品'),
}

// 手续费信息
model Commission {
  // 要更新的手续费状态
  status: long(name='status', example='0'),
  // 手续费生效时间（时间戳 ms）
  beginTime?: long(name='begin_time', example='1588867200000'),
  // 手续费结束时间
  endTime?: long(name='end_time', example='1598867200000'),
  // 手续费
  commission: string(name='commission', example='0.01'),
}

// sku配置加上ip等级
model IpSkuConfigWithLevel {
  // 价格区间
  priceRange: string(name='price_range', example='1-100'),
  // 单价
  purchasePrice: string(name='purchase_price', example='111'),
  // 销售数量
  saleNum: long(name='sale_num', example='1111'),
  // ip等级
  ipLevel: long(name='ip_level', example=''),
}

// 消费卡数据
model BlockConsumeCardInfo {
  // 外部系统对该个人/机构用户的内部编号,用于唯一识别该用户
  userId: string(name='user_id', example='userId001'),
  // 用户的链上账户Id
  accountId: string(name='account_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 开户行名称
  bankName: string(name='bank_name', example='招商银行杭州高新支行'),
  // 消费卡开通绑定的银行卡卡号
  bankCardId: string(name='bank_card_id', example='6259093871597124'),
  // 开户名称
  accountName: string(name='account_name', example='张三'),
  // 账户余额(元)
  debitAmount: string(name='debit_amount', example='15.76'),
  // 信用余额(元)
  creditAmount: string(name='credit_amount', example='54.14'),
  // 资产的来源<来源账户ID_余额/信用额, 数量>, 例如: "accountId1_Debit": 11000表示这笔资产来源于accountId1,是accountId1这个账户通过Debit余额发行的资产。
  assetMap: string(name='asset_map', example='{"accountId1_Debit": 11000, "accountId2_Credit": 10000}'),
}

// 消费卡服务基础请求信息
model BaseRequest {
  // 用户的链上账户Id(长度不超过256个字符)
  accountId: string(name='account_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16...'),
  // 业务幂等Id,防止同一笔交易重复发送(长度不超过256个字符)
  bizId: string(name='biz_id', example='S20200707123456'),
  // 支持多链多合约,该参数为指明需要操作哪个智能合约环境(长度不超过50个字符)
  chainId: string(name='chain_id', example='antdao'),
  // 备注信息(不要超过500个字符)。
  // 部分接口要求memo必填，以接口返回信息为准。
  memo?: string(name='memo', example='备注信息'),
  // 场景码(入驻时申请)(长度不超过50个字符)
  productCode: string(name='product_code', example='CONSUMECARD'),
}

// 增值服务加sku信息
model ValueAddedServiceInfoWithSku {
  // 增值服务信息
  addValueInfo: ValueAddedServiceInfo(name='add_value_info', example=''),
  // sku信息
  skus: [ IpSkuEmphasisInfo ](name='skus', example=''),
}

// 消费卡服务OpenAPI基础返回值
model BaseResponseData {
  // 区块链交易执行的区块高度
  blockNumber: long(name='block_number', example='10213'),
  // 交易的业务幂等Id,与交易发起时外部传入的一致
  outBizId: string(name='out_biz_id', example='bizId001'),
  // 区块链交易执行的哈希
  txHash: string(name='tx_hash', example='ae855Afc982d96fAB65b3a49cAc8b878184Cb16'),
}

// IP图库记录
model IPGalleryInstruction {
  // 下载时间
  timestamp: long(name='timestamp', example='1694896477580'),
  // 授权订单ID
  ipOrderId: string(name='ip_order_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // IP链上ID
  ipId: string(name='ip_id', example='5387548364587381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 图库链接
  ipGalleryUrl: string(name='ip_gallery_url', example='oss://myexchange/1259371fc8f77d37...5dfb6d130facf32dd6d4257fa0.zip'),
  // 图库下载链接，默认过期时间2小时
  ipGalleryTemporaryUrl: string(name='ip_gallery_temporary_url', example='https:xxx...'),
  // 图库版本
  ipGalleryVersion: long(name='ip_gallery_version', example='2'),
  // IP当前图库状态：0 生效中，1 已失效
  ipGalleryStatus: long(name='ip_gallery_status', example='0'),
  // 备注信息
  extInfo?: string(name='ext_info', example='备注信息'),
}

// 区块
model Block {
  // 区块头
  header: BlockHeader(name='header', example=''),
  // 区块体
  body: BlockBody(name='body', example=''),
}

// IP授权服务基础请求信息
model BaseRequestInfo {
  // 业务幂等Id,防止同一笔交易重复发送(长度不超过256个字符)
  bizId: string(name='biz_id', example='S20200707123456'),
  // 支持多链多合约,该参数为指明需要操作哪个智能合约环境(长度不超过50个字符)
  chainId: string(name='chain_id', example='antdao'),
  // 场景码(入驻时申请)(长度不超过50个字符)
  productCode: string(name='product_code', example='IPTRADE'),
}

// 渠道统计结果
model ChannelCounter {
  // 渠道名字
  channelName: string(name='channel_name', example='x x x x x'),
  // 统计值
  counter: long(name='counter', example='1111'),
  // 月份。如果月份有具体值则数据为该月份数据，月份为空则为全部统计数据。
  month?: string(name='month', example='2021-04'),
  // 渠道交易金额
  totalPrice?: string(name='total_price', example='1000111.00'),
}

// 查询手续费结果信息
model CommissionResult {
  // 手续费生效时间
  beginTime: long(name='begin_time', example='1588867200000'),
  // 手续费
  commission: string(name='commission', example='0.01'),
  // 手续费信息ID
  commissionId: string(name='commission_id', example='40000'),
  // 手续费状态（0可用，1停用，2禁用）
  commissionStatus: long(name='commission_status', example='0'),
  // 手续费失效时间
  endTime: long(name='end_time', example='1588867200000'),
  // 商品类型
  equityType: long(name='equity_type', example='100020001'),
  // 租户ID
  tenantId: string(name='tenant_id', example='JNIUYGTR'),
  // 手续费信息ID
  commissionSubId: string(name='commission_sub_id', example='40000#0'),
}

// IP授权服务-商家进件信息
model IPMerchantApplyInfo {
  // 链上账户Id
  accountId: string(name='account_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 支付宝的登陆用户名(必须实名制)
  alipayLoginName: string(name='alipay_login_name', example='2088201963199815'),
  // 商户别名, 会展示在账单以及支付结果页中
  merchantAliasName: string(name='merchant_alias_name', example='支付宝中国'),
  // 商户类型(本期仅支持: 1:企业, 6:个人商户)
  merchantType: long(name='merchant_type', example='1'),
  // 商户证件类型(本期仅支持: 201: 营业执照, 100: 个人商户身份证) 如果merchant_type为企业, 需要传入201; 如果merchant_type为个人, 需要传入100
  merchantCertType: long(name='merchant_cert_type', example='201'),
  // 商户证件编号(企业提供营业执照),本期人工审核
  merchantCertNumber: string(name='merchant_cert_number', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 商户营业执照的图片地址,本期人工审核
  merchantCertImage: string(name='merchant_cert_image', example='oss://381055Afc982d96fAB65.jpg'),
  // 税务登记证明的图片,本期人工审核
  merchantSignImage: string(name='merchant_sign_image', example='oss://381055Afc982d96fAB65,jpg'),
  // 商户类别码mcc，参见https://gw.alipayobjects.com/os/bmw-prod/05c9a32e-42d1-436b-ace7-13101d91f672.xlsx
  mcc: string(name='mcc', example='8351'),
  // 商户法人名称, merchant_type = 01时必填
  // 
  legalName: string(name='legal_name', example='马老师 '),
  // 商户法人身份证号码, merchant_type = 1时必填
  // 
  legalCertNo: string(name='legal_cert_no', example='100100198811110001'),
  // 商户经营地址
  // 
  addressInfo: IPAddressInfo(name='address_info', example=''),
  // 默认结算规则
  // 
  settleRule: IPSettleRule(name='settle_rule', example=''),
  // 商户联系人信息
  // 
  contactInfo: IPContactInfo(name='contact_info', example=''),
  // 银行卡结算信息, 结算到银行卡时必填, 当前仅支持填入一张卡
  // 
  cardInfo: IPCardInfo(name='card_info', example=''),
}

// 联系人信息
model SimpleContactInfo {
  // 联系人名称
  contactName: string(name='contact_name', example='小王'),
  // 联系电话
  contactPhone: string(name='contact_phone', example='18888888888'),
}

// IP授权订单每次上传“已按照周期汇总的销售数据”的汇总信息
model IPSalesSummary {
  // 订单ID
  ipOrderId: string(name='ip_order_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 销售数据ID
  salesBizId: string(name='sales_biz_id', example='BizIdbcjvdshgcvashcxgvsdhcgvshdcg'),
  // 总销售量
  amount: long(name='amount', example='10000'),
  // 数量校正
  correctAmount: long(name='correct_amount', example='-100'),
  // 实际总销售量
  totalAmount: long(name='total_amount', example='9900'),
  // 总销售额
  sales: string(name='sales', example='100.00'),
  // 金额校正
  correctSales: string(name='correct_sales', example='-10.00'),
  // 实际总销售金额
  totalSales: string(name='total_sales', example='90.00'),
  // 最后操作时间
  operatorTime: long(name='operator_time', example='1694896477580'),
  // 销售数据状态：1初始化，2商户确认，3版权方确认，4账单生成，5商户已校正，6版权方拒绝
  status: long(name='status', example='1'),
  // 销售数据最终是否需要生成支付账单
  needToPay: boolean(name='need_to_pay', example='true, false'),
  // 备注信息
  memo: string(name='memo', example='备注信息'),
  // 统计周期开始时间（毫秒时间戳）
  settlementBeginTime: long(name='settlement_begin_time', example=''),
  // 统计周期结束时间（毫秒时间戳）
  settlementEndTime: long(name='settlement_end_time', example=''),
}

// IP授权交易的订单信息
model IPOrder {
  // 订单ID
  ipOrderId: string(name='ip_order_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 卖方
  sellerId: string(name='seller_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb165345237549274'),
  // 卖家名称
  sellerName: string(name='seller_name', example='卖家名称'),
  // 买方
  buyerId: string(name='buyer_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb163472346869786987'),
  // 买家名称
  buyerName: string(name='buyer_name', example='买家名称'),
  // 订单交易类型：0套餐交易，1授权交易
  type: long(name='type', example='0'),
  // ip id
  ipId: string(name='ip_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // IP名称
  ipName: string(name='ip_name', example='IP名称'),
  // 渠道信息
  channelId: string(name='channel_id', example='channel'),
  // 套餐总量
  totalAmount: long(name='total_amount', example='10000'),
  // 套餐已使用数量
  usedAmount: long(name='used_amount', example='6000'),
  // 终端商品价格范围
  priceRange: string(name='price_range', example='0-50'),
  // 套餐交易总费用
  totalPrice: string(name='total_price', example='30000'),
  // 授权佣金比例
  authRate: string(name='auth_rate', example='0.006'),
  // 授权合作开始时间（毫秒时间戳）
  authStartTime: long(name='auth_start_time', example=''),
  // 授权合作结束时间
  authEndTime: long(name='auth_end_time', example=''),
  // 合同信息
  contract: string(name='contract', example='oss://myexchange/1259371fc8f77d37...5dfb6d130facf32dd6d4257fa0.jpeg'),
  // 设计稿信息
  designDraft: string(name='design_draft', example='oss://myexchange/1259371fc8f77d37...5dfb6d130facf32dd6d4257fa1.jpeg'),
  // 操作人
  operator: string(name='operator', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 操作者名称
  operatorName: string(name='operator_name', example='操作者名称'),
  // 订单状态。TODO 补充枚举信息
  status: long(name='status', example='1'),
  // 订单创建时间，时间戳（毫秒）
  createTime: long(name='create_time', example='1684896477580'),
  // 订单最近更新时间
  updateTime: long(name='update_time', example='1604896477580'),
  // 收费模式：0 销售抽佣, 1 按量付费
  chargeType: long(name='charge_type', example='0'),
  // 按量付费的收费单价（按量付费模式必填）
  authPrice: string(name='auth_price', example='1.11'),
  // 是否有保底金
  guaranteed: boolean(name='guaranteed', example='true, false'),
  // 保底金金额
  guaranteedFund: string(name='guaranteed_fund', example='10000.00'),
  // 保底商品个数（按量付费）
  guaranteedGoodsAmount: long(name='guaranteed_goods_amount', example='1000'),
  // 已使用的保底商品个数（按量付费），订单销售数量超过保底部分需按量付费
  usedGuaranteedGoodsAmount: long(name='used_guaranteed_goods_amount', example='5000'),
  // 保底商品销售金额（销售抽佣）
  guaranteedSales: string(name='guaranteed_sales', example='10000.00'),
  // 已使用的保底商品销售金额（销售抽佣），订单销售额超过保底部分需按比例抽拥
  // 
  usedGuaranteedSales: string(name='used_guaranteed_sales', example='5000.00'),
  // 授权产品范围
  authProductScope: string(name='auth_product_scope', example='食品 | 家居百货'),
  // 授权地域范围
  authAreaScope: string(name='auth_area_scope', example='中国大陆'),
  // 商品销售渠道
  salesChannel: string(name='sales_channel', example='电商平台、社交电商、直播、线下实体、代理商'),
  // 0 IP交易，1 增值服务交易
  goodsType: long(name='goods_type', example='1'),
  // 增值服务交易绑定的ip授权交易订单
  relatedOrderId: string(name='related_order_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 是否已监修报审
  superviseApprove: boolean(name='supervise_approve', example='true, false'),
  // 订单图库信息，未确认则为空
  ipGalleryUrl?: string(name='ip_gallery_url', example='oss://myexchange/1259371fc8f77d37...5dfb6d130facf32dd6d4257fa0.zip'),
  // 图库版本
  ipGalleryVersion?: long(name='ip_gallery_version', example='1'),
  // 商家是否已下载过本订单的图库
  downloadIpGallery?: boolean(name='download_ip_gallery', example='true, false'),
  // 备注信息
  memo: string(name='memo', example='备注信息'),
  // 附加条款
  additionalClause?: string(name='additional_clause', example='附加条款'),
  // 合同文件列表
  contractFiles?: [ string ](name='contract_files', example=''),
  // 授权类型
  authType?: string(name='auth_type', example='衍生品授权'),
  // 授权模式，0普通授权，1独家授权，
  authorizationModel?: [ long ](name='authorization_model', example=''),
  // 绑定的商品信息列表
  goodsInfoList?: [ IPOrderGoods ](name='goods_info_list', example=''),
  // 绑定的商品ID列表
  goodsIdList?: [ string ](name='goods_id_list', example=''),
  // 订单功能选择，0 基础功能，1 领用收藏
  features?: [ long ](name='features', example=''),
  // 申请授权合作的备注信息
  applyInfo?: IPOrderApplyInfo(name='apply_info', example=''),
}

// 商品授权信息（一客一价信息）
model EquityAuthInfo {
  // 链ID
  chainId: string(name='chain_id', example='antdao'),
  // 商品ID
  equityId: string(name='equity_id', example='188d87015a17465e0d3f61b7afe9e66cd2c070ca7f3bca142f53a8c5238a848a'),
  // 授权租户
  openToTenantId: string(name='open_to_tenant_id', example='OREDKOCA'),
  // 租户价格（自定义价格）
  tenantPrice: string(name='tenant_price', example='10.09'),
  // 区块高度
  blockNumber: string(name='block_number', example='17337250'),
  // 交易hash
  txHash: string(name='tx_hash', example='cf4a96419ca8ed21c84b6ba428babb7b75009927f8225d44f2974453028812eb'),
  // 区块时间戳
  blockTime: long(name='block_time', example='1594896477580'),
}

// ip的渠道信息
model IpChannelInfo {
  // 渠道名字
  channelName: string(name='channel_name', example='tianmao'),
  // 授权模式 商品授权 0普通授权/1独家授权  本期只有0
  authorizationMode: long(name='authorization_mode', example='0'),
  // 计费模式 0:按量 1:按金额
  payMode: long(name='pay_mode', example='1'),
  // ip等级 （5位数字） 对应a，0:经典IP/1:流量IP/2:设计IP
  ipLevel: long(name='ip_level', example='1'),
  // 商品状态（0:待上架，1:上架，2:下架）
  status: long(name='status', example='0'),
  // 交易是否需要确认
  tradeNeedConfirm?: boolean(name='trade_need_confirm', example='true, false'),
  // 保底金区间，0：0；1：10万以下；2:10-30万；3:30-50万；4:50万以上
  guaranteeRange?: long(name='guarantee_range', example=''),
  // 交易模式
  ipTradeMode?: IPTradeMode(name='ip_trade_mode', example=''),
}

// 正版码流转信息
model CodeCirculation {
  // 正版码的编码
  code?: string(name='code', example='82d96fAB65b3a49cAc8b878184Cb16'),
  // 流转信息标题
  title: string(name='title', example='领取'),
  // 流转详细信息
  content?: string(name='content', example='流转详细信息'),
  // 哈希值
  hash?: string(name='hash', example='哈希值'),
  // 流转时间
  time?: long(name='time', example='1694896477580'),
}

// ip的重点信息
model IpEmphasisInfo {
  // ip的链上id
  ipId: string(name='ip_id', example='160'),
  // ip的描述信息
  description: string(name='description', example='aaaa'),
  // ip类型
  ipType: string(name='ip_type', example='111'),
  // 受众群体（6位数字） 对应c
  audienceGroup: string(name='audience_group', example='000001'),
  // 主图
  image: string(name='image', example='oss://1;oss:2'),
  // 上架状态
  status: long(name='status', example=''),
  // 归属的账户id
  accountId: string(name='account_id', example='归属的账户id'),
  // 创建日期
  createTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='create_time', example='2018-10-10T10:10:00Z'),
  // ip名字
  ipName: string(name='ip_name', example='aaaa'),
  // 商户名称
  accountName?: string(name='account_name', example='xxxx'),
  // 浏览量
  pv?: long(name='pv', example='x x x x x'),
  // 最近一次上下架时间
  lastStateChangeTime?: long(name='last_state_change_time', example=''),
  // ip的创建渠道，按照查询参数返回
  createrChannel?: string(name='creater_channel', example='IPMark'),
}

// 权益流水
model EInstruction {
  // 资产ID
  assetId: string(name='asset_id', example='assetID'),
  // 资产的汇率
  assetRate: string(name='asset_rate', example='1'),
  // 资产扣减数量(单位:个)
  deductAssetAmount: string(name='deduct_asset_amount', example='100'),
  // 扣减商户备付金授信额(单位:元)
  deductCreditAmount: string(name='deduct_credit_amount', example='100.0000'),
  // 扣减商户备付金余额(单位:元)
  deductDebitAmount: string(name='deduct_debit_amount', example='10.0000'),
  // 被扣减备付金的租户ID
  deductTenantId: string(name='deduct_tenant_id', example='id'),
  // 权益ID
  equityId: string(name='equity_id', example='equity'),
  // 权益名称
  equityName: string(name='equity_name', example='card01'),
  // 权益对用户价格(单位:元)
  equityPrice: string(name='equity_price', example='10.0000'),
  // 权益面值(单位:元)
  equityValue: string(name='equity_value', example='10.0000'),
  // 附言Deliver/Complete/OutOfStore/WriteOff)
  memo: string(name='memo', example='memo'),
  // 发起操作的租户ID
  optTenantId: string(name='opt_tenant_id', example='JHG'),
  // 业务交易ID
  outTxId: string(name='out_tx_id', example='1246354'),
  // 对换单流水状态：
  // 0        // 权益兑换单创建
  // 1        // 权益兑换单接单
  // 2        // 权益兑换单发货
  // 3        // 权益兑换单确认收货
  // 4        // 权益兑换单缺货
  // 5        // 权益兑换单核销
  status: long(name='status', example='1'),
  // 权益归属租户ID
  tenantId: string(name='tenant_id', example='id'),
  // 交易时间戳
  timeStamp: long(name='time_stamp', example='123456'),
  // 兑换类型(商户身份/用户身份)
  type: long(name='type', example='0'),
  // 用户身份兑换/商户兑换的受益用户
  userId: string(name='user_id', example='userid'),
  // 版本（之前版本为0，不收取手续费，之后版本为1，收取手续费）
  instructionVersion: long(name='instruction_version', example='1'),
  // 收取手续费的金融云租户ID
  commissionTenantId: string(name='commission_tenant_id', example='OKIJUHYG'),
  // 手续费(单位:元)
  instructionCommission: string(name='instruction_commission', example='0.006'),
  // 手续费扣减商户备付金余额(单位:元)
  deductDebitCommission: string(name='deduct_debit_commission', example='0.006'),
  // 手续费扣减商户备付金授信额(单位:元)
  deductCreditCommission: string(name='deduct_credit_commission', example='0'),
  // 资产手续费扣减数量(单位:个)
  deductAssetCommission: string(name='deduct_asset_commission', example='0.6'),
  // 手续费率
  commissionRate: string(name='commission_rate', example='0.001'),
  // 手续费id
  commissionId: string(name='commission_id', example='10002'),
  // 手续费子id
  commissionSubId: string(name='commission_sub_id', example='10002#0'),
  // 手续费状态（0:未提现，1:已提现）
  commissionStatus: long(name='commission_status', example='1'),
  // 是否收取手续费
  commissionCharged: long(name='commission_charged', example='1'),
}

// 接口白名单信息
model APIWhiteListInfo {
  // 租户ID
  tenantId: string(name='tenant_id', example='OKIJUHYG'),
  // 链ID
  chainId: string(name='chain_id', example='antdao'),
  // 权限级别，暂时不用
  level: long(name='level', example='0'),
  // 更新时间
  updateTime: string(name='update_time', example='20200425204555'),
  // 扩展字段
  extension: string(name='extension', example='extension'),
}

// 版权方申请
model IPApplyInfo {
  // 账户Id
  accountId: string(name='account_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 用户名
  loginName: string(name='login_name', example='wjy@alipay.com'),
  // 支付宝账户
  alipayLoginName: string(name='alipay_login_name', example='wjy@alipay.com'),
  // 联系人
  legalName: string(name='legal_name', example='马云'),
  // 联系方式
  phoneNumber: string(name='phone_number', example='13291887615'),
  // 角色(1: 版权方 2:商家)
  role: long(name='role', example='1'),
  // 状态
  status: long(name='status', example='1'),
  // 用户的外系统识别Id
  externalUserId: string(name='external_user_id', example='User001'),
  // 外部系统用户名
  externalUserName: string(name='external_user_name', example='用户名'),
  // 申请时间(毫秒时间戳)
  applyDate: long(name='apply_date', example='3810551857'),
}

// 代理授权关系信息
model DelegateRelationInfo {
  // 被授权的租户ID
  tenantId: string(name='tenant_id', example='OKIJUHYG'),
  // 被代理的租户ID
  delegatedTenantId: string(name='delegated_tenant_id', example='WAESRDTF'),
  // 更新时间
  updateTime: string(name='update_time', example='20200327153541'),
  // 状态
  status: boolean(name='status', example='true'),
  // 扩展字段
  extension: string(name='extension', example='extension'),
}

// 商户积分库和与预算库信息
model MerchantBudget {
  // 积分库代码
  pointLibCode: string(name='point_lib_code', example='1234546'),
  // 预算库代码
  budgetCode: string(name='budget_code', example='1234567'),
  // 预算库描述
  budgetDesc: string(name='budget_desc', example='budget'),
  // 预算库启用时间
  budgetStartTime: string(name='budget_start_time', example='2020-06-01-20:20:20'),
  // 预算库截止时间
  budgetEndTime: string(name='budget_end_time', example='2020-06-01-20:20:20'),
}

// 租户场景码信息
model ProductCodeInfo {
  // 链ID
  chainId: string(name='chain_id', example='chainId'),
  // 租户ID
  tenantId: string(name='tenant_id', example='OKIJUHYG'),
  // 场景码
  productCode: string(name='product_code', example='product_code'),
  // 租户映射链上账户名称
  accountName?: string(name='account_name', example='account_name'),
  // 租户映射账户链上账户ID
  accountId?: string(name='account_id', example='381055Afc982d96fAB65b3a49cAc8b878184Cb16'),
  // 备注信息
  memo?: string(name='memo', example='备注信息'),
}

// 商户
model Merchant {
  // 商户管理员ID
  adminId: string(name='admin_id', example='ed7b3acb718eef475454e973b8b'),
  // 商户描述
  description: string(name='description', example='商户描述'),
  // 商户分布式身份ID
  did: string(name='did', example='did:mychain:ct'),
  // 资金管理员ID
  fundManagerId: string(name='fund_manager_id', example='b7ecd55bde0481bfc8c972b7ef'),
  // 是否可以发行资产
  isAssetIssuer: boolean(name='is_asset_issuer', example='true, false'),
  // 是否可以采购权益
  isEquityConsumer: boolean(name='is_equity_consumer', example='true, false'),
  // 是否可以发行权益
  isEquityProvider: boolean(name='is_equity_provider', example='true, false'),
  // 备付金数据
  provision: Provision(name='provision', example=''),
  // 商户状态: 0可用, 1下线, 2冻结
  status: long(name='status', example='0 | 1 | 2'),
  // 租户ID
  tenantId: string(name='tenant_id', example='DBYG'),
  // 商户的损益账户
  profitLossBalance: string(name='profit_loss_balance', example='0.0050000000000000'),
}

// 用户
model User {
  // 用户分布式身份ID
  did: string(name='did', example='did'),
  // 用户的链外身份ID
  localId: string(name='local_id', example='user01'),
  // 用户公钥
  pk: string(name='pk', example='3280b948a7fa8525c0fbfd47d1df75d7a7ee9f3baedd6964565b42f461dd86732717c4bc4c8203ea2b9b1aeef7b148644babba3c0cd6927c4c0964919f590c6c'),
  // 租户ID
  tenantId: string(name='tenant_id', example='GIUGUIYF'),
  // 用户ID
  userId: string(name='user_id', example='331f9b0922f940f464d4b94b5628180408ac305b7fc72d3e40f5b7727d0702fb'),
  // 用户VC
  vc: string(name='vc', example='vc'),
}

// 键值对
model XNameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

model ExecCardCreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 交易信息
  tx: Transaction(name='tx'),
}

model ExecCardCreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 卡密ID
  cardId?: string(name='card_id'),
  // 创建卡密的交易hash
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 创建卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-创建卡密
 */
async function execCardCreate(request: ExecCardCreateRequest): ExecCardCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCardCreateEx(request, headers, runtime);
}

/**
 * Description: 创建卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-创建卡密
 */
async function execCardCreateEx(request: ExecCardCreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCardCreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.card.create.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCardQueryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 交易信息
  tx: Transaction(name='tx'),
}

model ExecCardQueryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 卡密信息对象
  card?: Card(name='card'),
}

/**
 * Description: 查询卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-查询卡密
 */
async function execCardQuery(request: ExecCardQueryRequest): ExecCardQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCardQueryEx(request, headers, runtime);
}

/**
 * Description: 查询卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-查询卡密
 */
async function execCardQueryEx(request: ExecCardQueryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCardQueryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.card.query.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCardBindnameRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 交易内容
  tx: Transaction(name='tx'),
}

model ExecCardBindnameResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 记名卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-记名卡发行
 */
async function execCardBindname(request: ExecCardBindnameRequest): ExecCardBindnameResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCardBindnameEx(request, headers, runtime);
}

/**
 * Description: 记名卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-记名卡发行
 */
async function execCardBindnameEx(request: ExecCardBindnameRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCardBindnameResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.card.bindname.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCardChargeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 交易信息
  tx: Transaction(name='tx'),
}

model ExecCardChargeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 充值卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-充值卡密
 */
async function execCardCharge(request: ExecCardChargeRequest): ExecCardChargeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCardChargeEx(request, headers, runtime);
}

/**
 * Description: 充值卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-充值卡密
 */
async function execCardChargeEx(request: ExecCardChargeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCardChargeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.card.charge.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCardWriteoffRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 交易信息
  tx: Transaction(name='tx'),
}

model ExecCardWriteoffResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 核销卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-核销卡密
 */
async function execCardWriteoff(request: ExecCardWriteoffRequest): ExecCardWriteoffResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCardWriteoffEx(request, headers, runtime);
}

/**
 * Description: 核销卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-核销卡密
 */
async function execCardWriteoffEx(request: ExecCardWriteoffRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCardWriteoffResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.card.writeoff.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCardExpiredRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 交易信息
  tx: Transaction(name='tx'),
}

model ExecCardExpiredResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 过期卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-过期卡密
 */
async function execCardExpired(request: ExecCardExpiredRequest): ExecCardExpiredResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCardExpiredEx(request, headers, runtime);
}

/**
 * Description: 过期卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-过期卡密
 */
async function execCardExpiredEx(request: ExecCardExpiredRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCardExpiredResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.card.expired.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCardForbiddenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 交易信息
  tx: Transaction(name='tx'),
}

model ExecCardForbiddenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 风控禁用卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-风控禁用
 */
async function execCardForbidden(request: ExecCardForbiddenRequest): ExecCardForbiddenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCardForbiddenEx(request, headers, runtime);
}

/**
 * Description: 风控禁用卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-风控禁用
 */
async function execCardForbiddenEx(request: ExecCardForbiddenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCardForbiddenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.card.forbidden.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCardChargeresetRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 交易信息
  tx: Transaction(name='tx'),
}

model ExecCardChargeresetResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 充值重置卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-充值重置
 */
async function execCardChargereset(request: ExecCardChargeresetRequest): ExecCardChargeresetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCardChargeresetEx(request, headers, runtime);
}

/**
 * Description: 充值重置卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-充值重置
 */
async function execCardChargeresetEx(request: ExecCardChargeresetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCardChargeresetResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.card.chargereset.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateConsumecardAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权函地址
  authorizationAddress?: string(name='authorization_address'),
  // 是否有采购/消费权限
  authConsumer: boolean(name='auth_consumer'),
  // 是否有供应权限
  authProvider: boolean(name='auth_provider'),
  // 业务系统幂等Id,防止同一笔交易重复发送(接入方传入)
  bizId: string(name='biz_id'),
  // 认证方id(如: 支付宝的用户Id)
  certificationId: string(name='certification_id'),
  // 支持多链多合约,该参数为指明需要操作哪个智能合约环境
  chainId: string(name='chain_id'),
  // 手机号国家编码
  countryCode: string(name='country_code'),
  // 账户描述
  description?: string(name='description'),
  // 个人用户的身份证号码/机构的企业编号
  idNumber: string(name='id_number'),
  // 证件类型：0 身份证, 1 护照, 2 军官证, 3 回乡证, 4 港澳证件, 5 营业执照, 6 港澳居民来往内地通行证, 7 台湾居民来往内地通行证, 8 港澳居民居住证, 9 台湾居民居住证, 10事业单位登记证书, 11 社会团体登记证书, 12 民办非企业单位证书, 13 党政机关批准设计文件, 14 全国组织机构代码证书, 15 其他证件
  idType: long(name='id_type'),
  // 开户影像信息（BASE64格式传入）
  image: string(name='image'),
  // 外部系统传入的交易备注信息(必填)
  memo: string(name='memo'),
  // 邮箱地址(机构注册必传)
  email?: string(name='email'),
  // 个人用户的手机号码/机构用户的联系电话(必填)
  phoneNumber: string(name='phone_number'),
  // 场景码(需要申请)
  productCode: string(name='product_code'),
  // 平台归属机构的链上账户Id(账户可以归属在一个机构下)
  relegationAccountId?: string(name='relegation_account_id'),
  // 角色(1 机构, 2 个人)
  roleType: long(name='role_type'),
  // 外部系统对该个人用户/机构的内部编号,用于唯一识别该用户
  userId: string(name='user_id'),
  // 个人用户姓名/机构名称
  userName: string(name='user_name'),
  // 提现银行卡
  withdrawBankCardId?: string(name='withdraw_bank_card_id'),
}

model CreateConsumecardAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户/机构的链上账户Id
  accountId?: string(name='account_id'),
}

/**
 * Description: 个人或机构账户注册
 * Summary: 数字商品服务-消费卡服务-个人/机构注册
 */
async function createConsumecardAccount(request: CreateConsumecardAccountRequest): CreateConsumecardAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createConsumecardAccountEx(request, headers, runtime);
}

/**
 * Description: 个人或机构账户注册
 * Summary: 数字商品服务-消费卡服务-个人/机构注册
 */
async function createConsumecardAccountEx(request: CreateConsumecardAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConsumecardAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.account.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OfflineConsumecardAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 附言(长度不要超过500个字符)
  remark?: string(name='remark'),
}

model OfflineConsumecardAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 个人/机构账户注销
 * Summary: 数字商品服务-消费卡服务-个人/机构注销
 */
async function offlineConsumecardAccount(request: OfflineConsumecardAccountRequest): OfflineConsumecardAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return offlineConsumecardAccountEx(request, headers, runtime);
}

/**
 * Description: 个人/机构账户注销
 * Summary: 数字商品服务-消费卡服务-个人/机构注销
 */
async function offlineConsumecardAccountEx(request: OfflineConsumecardAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineConsumecardAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.account.offline', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReclaimConsumecardWalletRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 回退金额(元)
  amount: string(name='amount'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 角色(1 机构, 2 个人)
  roleType: long(name='role_type'),
}

model ReclaimConsumecardWalletResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 企业消费卡余额回退
 * Summary: 数字商品服务-消费卡服务-企业消费卡回退
 */
async function reclaimConsumecardWallet(request: ReclaimConsumecardWalletRequest): ReclaimConsumecardWalletResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reclaimConsumecardWalletEx(request, headers, runtime);
}

/**
 * Description: 企业消费卡余额回退
 * Summary: 数字商品服务-消费卡服务-企业消费卡回退
 */
async function reclaimConsumecardWalletEx(request: ReclaimConsumecardWalletRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReclaimConsumecardWalletResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.wallet.reclaim', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FreezeConsumecardAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 附言(长度不要超过500个字符)
  remark?: string(name='remark'),
}

model FreezeConsumecardAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 个人/机构账户禁用
 * Summary: 数字商品服务-消费卡服务-账户禁用
 */
async function freezeConsumecardAccount(request: FreezeConsumecardAccountRequest): FreezeConsumecardAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return freezeConsumecardAccountEx(request, headers, runtime);
}

/**
 * Description: 个人/机构账户禁用
 * Summary: 数字商品服务-消费卡服务-账户禁用
 */
async function freezeConsumecardAccountEx(request: FreezeConsumecardAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FreezeConsumecardAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.account.freeze', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnfreezeConsumecardAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 附言(长度不要超过500个字符)
  remark?: string(name='remark'),
}

model UnfreezeConsumecardAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 个人/机构账户解禁
 * Summary: 数字商品服务-消费卡服务-账户解禁
 */
async function unfreezeConsumecardAccount(request: UnfreezeConsumecardAccountRequest): UnfreezeConsumecardAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unfreezeConsumecardAccountEx(request, headers, runtime);
}

/**
 * Description: 个人/机构账户解禁
 * Summary: 数字商品服务-消费卡服务-账户解禁
 */
async function unfreezeConsumecardAccountEx(request: UnfreezeConsumecardAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnfreezeConsumecardAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.account.unfreeze', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateConsumecardRiskcontrolRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否加值(false为减)
  add: boolean(name='add'),
  // 调整金额(元)
  amount: string(name='amount'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
}

model UpdateConsumecardRiskcontrolResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 消费卡风控调整(特殊权限,暂不开放)
 * Summary: 数字商品服务-消费卡服务-消费卡风控调整
 */
async function updateConsumecardRiskcontrol(request: UpdateConsumecardRiskcontrolRequest): UpdateConsumecardRiskcontrolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateConsumecardRiskcontrolEx(request, headers, runtime);
}

/**
 * Description: 消费卡风控调整(特殊权限,暂不开放)
 * Summary: 数字商品服务-消费卡服务-消费卡风控调整
 */
async function updateConsumecardRiskcontrolEx(request: UpdateConsumecardRiskcontrolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateConsumecardRiskcontrolResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.riskcontrol.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardBillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 需要查询的交易单号
  orderId: string(name='order_id'),
}

model QueryConsumecardBillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 消费卡的单条交易记录数据
  blockInstruction?: BlockInstruction(name='block_instruction'),
}

/**
 * Description: 账单查询
 * Summary: 数字商品服务-消费卡服务-账单查询
 */
async function queryConsumecardBill(request: QueryConsumecardBillRequest): QueryConsumecardBillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardBillEx(request, headers, runtime);
}

/**
 * Description: 账单查询
 * Summary: 数字商品服务-消费卡服务-账单查询
 */
async function queryConsumecardBillEx(request: QueryConsumecardBillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.bill.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ChargeConsumecardWalletRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 充值金额(单位:元,精确到分)
  chargeAmount: string(name='charge_amount'),
}

model ChargeConsumecardWalletResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 企业消费卡充值冻结
 * Summary: 数字商品服务-消费卡服务-消费卡充值冻结
 */
async function chargeConsumecardWallet(request: ChargeConsumecardWalletRequest): ChargeConsumecardWalletResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return chargeConsumecardWalletEx(request, headers, runtime);
}

/**
 * Description: 企业消费卡充值冻结
 * Summary: 数字商品服务-消费卡服务-消费卡充值冻结
 */
async function chargeConsumecardWalletEx(request: ChargeConsumecardWalletRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ChargeConsumecardWalletResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.wallet.charge', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateConsumecardAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权函地址
  authorizationAddress?: string(name='authorization_address'),
  // 是否有采购/消费权限
  authConsumer: boolean(name='auth_consumer'),
  // 是否有供应权限
  authProvider: boolean(name='auth_provider'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 认证方id
  certificationId: string(name='certification_id'),
  // 商户描述
  description?: string(name='description'),
  // 个人用户的身份证号码/机构的企业编号
  idNumber: string(name='id_number'),
  // 证件类型：0 身份证, 1 护照, 2 军官证, 3 回乡证, 4 港澳证件, 5 营业执照, 6 港澳居民来往内地通行证, 7 台湾居民来往内地通行证, 8 港澳居民居住证, 9 台湾居民居住证, 10事业单位登记证书, 11 社会团体登记证书, 12 民办非企业单位证书, 13 党政机关批准设计文件, 14 全国组织机构代码证书, 15 其他证件
  idType: long(name='id_type'),
  // 账户映像资料
  image: string(name='image'),
  // 邮箱地址(机构注册必传)
  email?: string(name='email'),
  // 个人用户的手机号码/机构用户的联系电话(必填)
  phoneNumber: string(name='phone_number'),
  // 个人用户姓名/机构名称
  userName: string(name='user_name'),
  // 提现银行卡
  withdrawBankCardId?: string(name='withdraw_bank_card_id'),
}

model UpdateConsumecardAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更账户信息
 * Summary: 数字商品服务-消费卡服务-更新账户
 */
async function updateConsumecardAccount(request: UpdateConsumecardAccountRequest): UpdateConsumecardAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateConsumecardAccountEx(request, headers, runtime);
}

/**
 * Description: 更账户信息
 * Summary: 数字商品服务-消费卡服务-更新账户
 */
async function updateConsumecardAccountEx(request: UpdateConsumecardAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateConsumecardAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.account.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateConsumecardBillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 账单标价(单位:元,精确到分)
  billDisplayPrice: string(name='bill_display_price'),
  // 账单名称
  billName: string(name='bill_name'),
  // 账单实际支付金额(单位:元,精确到分)
  billTokenPrice: string(name='bill_token_price'),
  // 账单类型
  billType: string(name='bill_type'),
  // 交易发起方的链上账户Id
  buyerAccountId: string(name='buyer_account_id'),
  // 支付方证件号
  buyerIdNumber: string(name='buyer_id_number'),
  // 证件类型：0 身份证, 1 护照, 2 军官证, 3 回乡证, 4 港澳证件, 5 营业执照, 6 港澳居民来往内地通行证, 7 台湾居民来往内地通行证, 8 港澳居民居住证, 9 台湾居民居住证, 10事业单位登记证书, 11 社会团体登记证书, 12 民办非企业单位证书, 13 党政机关批准设计文件, 14 全国组织机构代码证书, 15 其他证件
  buyerIdType: long(name='buyer_id_type'),
  // 支付方发起ip
  buyerIp: string(name='buyer_ip'),
  // 支付方姓名
  buyerName: string(name='buyer_name'),
  // 支付方手机号
  buyerPhone: string(name='buyer_phone'),
  // 外部系统创建时间
  originCreateTime: long(name='origin_create_time'),
  // 外部系统订单号
  originOrderId: string(name='origin_order_id'),
  // 附言（不必填）
  remark?: string(name='remark'),
  // 交易接收方的链上账户Id
  sellerAccountId: string(name='seller_account_id'),
}

model CreateConsumecardBillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账单ID
  orderId?: string(name='order_id'),
}

/**
 * Description: 账单创建
 * Summary: 数字商品服务-消费卡服务-账单创建
 */
async function createConsumecardBill(request: CreateConsumecardBillRequest): CreateConsumecardBillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createConsumecardBillEx(request, headers, runtime);
}

/**
 * Description: 账单创建
 * Summary: 数字商品服务-消费卡服务-账单创建
 */
async function createConsumecardBillEx(request: CreateConsumecardBillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConsumecardBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.bill.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmConsumecardBillcreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 账单ID
  orderId: string(name='order_id'),
  // 附言(不要超过500个字符)
  remark?: string(name='remark'),
  // 账单创建是否确认成功。true为成功，false为失败
  success: boolean(name='success'),
}

model ConfirmConsumecardBillcreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 账单创建确认成功或失败
 * Summary: 数字商品服务-消费卡服务-账单创建确认
 */
async function confirmConsumecardBillcreate(request: ConfirmConsumecardBillcreateRequest): ConfirmConsumecardBillcreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmConsumecardBillcreateEx(request, headers, runtime);
}

/**
 * Description: 账单创建确认成功或失败
 * Summary: 数字商品服务-消费卡服务-账单创建确认
 */
async function confirmConsumecardBillcreateEx(request: ConfirmConsumecardBillcreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmConsumecardBillcreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.billcreate.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelConsumecardBillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 账单ID(长度不要超过256个字符)
  orderId: string(name='order_id'),
  // 附言(长度不要超过500个字符)
  remark?: string(name='remark'),
}

model CancelConsumecardBillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 账单取消
 * Summary: 数字商品服务-消费卡服务-取消账单
 */
async function cancelConsumecardBill(request: CancelConsumecardBillRequest): CancelConsumecardBillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelConsumecardBillEx(request, headers, runtime);
}

/**
 * Description: 账单取消
 * Summary: 数字商品服务-消费卡服务-取消账单
 */
async function cancelConsumecardBillEx(request: CancelConsumecardBillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelConsumecardBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.bill.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecConsumecardBillpayRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 账单ID 
  orderId: string(name='order_id'),
  // 需要支付的金额(单位:元,精确到分)
  payPrice: string(name='pay_price'),
  // 附言(不要超过500个字符)
  remark?: string(name='remark'),
}

model ExecConsumecardBillpayResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 账单支付
 * Summary: 数字商品服务-消费卡服务-账单支付
 */
async function execConsumecardBillpay(request: ExecConsumecardBillpayRequest): ExecConsumecardBillpayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execConsumecardBillpayEx(request, headers, runtime);
}

/**
 * Description: 账单支付
 * Summary: 数字商品服务-消费卡服务-账单支付
 */
async function execConsumecardBillpayEx(request: ExecConsumecardBillpayRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecConsumecardBillpayResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.billpay.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecConsumecardOrderwriteoffRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 交易类型(0: 商品兑换单, 1: 账单兑换单)
  instructionType: long(name='instruction_type'),
  // 账单ID
  orderId: string(name='order_id'),
  // 附言(长度不要超过500个字符)
  remark?: string(name='remark'),
}

model ExecConsumecardOrderwriteoffResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 区块高度
  blockNumber?: long(name='block_number'),
  // 交易哈希
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 账单核销和交易核销，传入交易类型和订单Id
 * Summary: 数字商品服务-消费卡服务-账单和交易核销
 */
async function execConsumecardOrderwriteoff(request: ExecConsumecardOrderwriteoffRequest): ExecConsumecardOrderwriteoffResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execConsumecardOrderwriteoffEx(request, headers, runtime);
}

/**
 * Description: 账单核销和交易核销，传入交易类型和订单Id
 * Summary: 数字商品服务-消费卡服务-账单和交易核销
 */
async function execConsumecardOrderwriteoffEx(request: ExecConsumecardOrderwriteoffRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecConsumecardOrderwriteoffResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.orderwriteoff.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmConsumecardBillrefundRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否接受退款申请，true同意退款，false拒绝退款
  accept: boolean(name='accept'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 账单ID
  orderId: string(name='order_id'),
  // 附言(不要超过500个字符)
  remark?: string(name='remark'),
}

model ConfirmConsumecardBillrefundResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 处理买家的退款申请，接受退款或者拒绝退款
 * Summary: 数字商品服务-消费卡服务-账单退款处理
 */
async function confirmConsumecardBillrefund(request: ConfirmConsumecardBillrefundRequest): ConfirmConsumecardBillrefundResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmConsumecardBillrefundEx(request, headers, runtime);
}

/**
 * Description: 处理买家的退款申请，接受退款或者拒绝退款
 * Summary: 数字商品服务-消费卡服务-账单退款处理
 */
async function confirmConsumecardBillrefundEx(request: ConfirmConsumecardBillrefundRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmConsumecardBillrefundResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.billrefund.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 附言(长度不要超过500个字符)
  remark?: string(name='remark'),
}

model QueryConsumecardAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账户信息
  account?: ConsumeCardAccount(name='account'),
}

/**
 * Description: 查询账户信息
 * Summary: 数字商品服务-消费卡服务-查询账户信息
 */
async function queryConsumecardAccount(request: QueryConsumecardAccountRequest): QueryConsumecardAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardAccountEx(request, headers, runtime);
}

/**
 * Description: 查询账户信息
 * Summary: 数字商品服务-消费卡服务-查询账户信息
 */
async function queryConsumecardAccountEx(request: QueryConsumecardAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.account.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OpenConsumecardWalletRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 操作类型(0 开通钱包)
  operateType: long(name='operate_type'),
  // 角色(1 机构, 2 个人)
  roleType: long(name='role_type'),
  // 钱包类型（0:余额账户）
  walletType: long(name='wallet_type'),
}

model OpenConsumecardWalletResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 开通钱包
 * Summary: 数字商品服务-消费卡服务-开通钱包
 */
async function openConsumecardWallet(request: OpenConsumecardWalletRequest): OpenConsumecardWalletResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openConsumecardWalletEx(request, headers, runtime);
}

/**
 * Description: 开通钱包
 * Summary: 数字商品服务-消费卡服务-开通钱包
 */
async function openConsumecardWalletEx(request: OpenConsumecardWalletRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenConsumecardWalletResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.wallet.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardWalletRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 附言(长度不要超过500个字符)
  remark?: string(name='remark'),
}

model QueryConsumecardWalletResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 钱包信息数据
  walletInfo?: WalletInfo(name='wallet_info'),
}

/**
 * Description: 查询钱包信息
 * Summary: 数字商品服务-消费卡服务-查询钱包
 */
async function queryConsumecardWallet(request: QueryConsumecardWalletRequest): QueryConsumecardWalletResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardWalletEx(request, headers, runtime);
}

/**
 * Description: 查询钱包信息
 * Summary: 数字商品服务-消费卡服务-查询钱包
 */
async function queryConsumecardWalletEx(request: QueryConsumecardWalletRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardWalletResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.wallet.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecConsumecardWalletchargetotokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 充值的金额(单位为:元,精确到小数点后2位)
  chargeAmount: string(name='charge_amount'),
}

model ExecConsumecardWalletchargetotokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 区块高度
  blockNumber?: long(name='block_number'),
  // 交易哈希
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 充值并兑换token,资金托管员权限,运营平台无权限。
 * Summary: 数字商品服务-消费卡服务-充值并兑换资产
 */
async function execConsumecardWalletchargetotoken(request: ExecConsumecardWalletchargetotokenRequest): ExecConsumecardWalletchargetotokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execConsumecardWalletchargetotokenEx(request, headers, runtime);
}

/**
 * Description: 充值并兑换token,资金托管员权限,运营平台无权限。
 * Summary: 数字商品服务-消费卡服务-充值并兑换资产
 */
async function execConsumecardWalletchargetotokenEx(request: ExecConsumecardWalletchargetotokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecConsumecardWalletchargetotokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.walletchargetotoken.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecConsumecardWalletredeemtokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 期望要回退的金额(单位:元,精确到分)
  redeemAmount?: string(name='redeem_amount'),
}

model ExecConsumecardWalletredeemtokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 区块高度
  blockNumber?: long(name='block_number'),
  // 交易哈希
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 湮灭自己发行的token并提现
 * Summary: 数字商品服务-消费卡服务-湮灭资产并提现
 */
async function execConsumecardWalletredeemtoken(request: ExecConsumecardWalletredeemtokenRequest): ExecConsumecardWalletredeemtokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execConsumecardWalletredeemtokenEx(request, headers, runtime);
}

/**
 * Description: 湮灭自己发行的token并提现
 * Summary: 数字商品服务-消费卡服务-湮灭资产并提现
 */
async function execConsumecardWalletredeemtokenEx(request: ExecConsumecardWalletredeemtokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecConsumecardWalletredeemtokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.walletredeemtoken.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartConsumecardPurchaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 支付方证件号
  buyerIdNumber: string(name='buyer_id_number'),
  // 证件类型：0 身份证, 1 护照, 2 军官证, 3 回乡证, 4 港澳证件, 5 营业执照, 6 港澳居民来往内地通行证, 7 台湾居民来往内地通行证, 8 港澳居民居住证, 9 台湾居民居住证, 10事业单位登记证书, 11 社会团体登记证书, 12 民办非企业单位证书, 13 党政机关批准设计文件, 14 全国组织机构代码证书, 15 其他证件
  buyerIdType: long(name='buyer_id_type'),
  // 支付方发起ip
  buyerIp: string(name='buyer_ip'),
  // 支付方姓名
  buyerName: string(name='buyer_name'),
  // 支付方手机号
  buyerPhone: string(name='buyer_phone'),
  // 商品ID
  goodsId: string(name='goods_id'),
  // 外部系统交易创建时间，毫秒时间戳
  originCreateTime: long(name='origin_create_time'),
  // 外部系统订单号
  originOrderId: string(name='origin_order_id'),
  // 附言
  remark: string(name='remark'),
  // 期望支付的商品价格(单位:元,精确到分)
  tokenPrice: string(name='token_price'),
}

model StartConsumecardPurchaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易ID
  orderId?: string(name='order_id'),
}

/**
 * Description: 买家发起交易
 * Summary: 数字商品服务-消费卡服务-买家发起交易
 */
async function startConsumecardPurchase(request: StartConsumecardPurchaseRequest): StartConsumecardPurchaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startConsumecardPurchaseEx(request, headers, runtime);
}

/**
 * Description: 买家发起交易
 * Summary: 数字商品服务-消费卡服务-买家发起交易
 */
async function startConsumecardPurchaseEx(request: StartConsumecardPurchaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartConsumecardPurchaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.purchase.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelConsumecardBuyerpurchaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 交易ID
  orderId: string(name='order_id'),
  // 附言
  remark?: string(name='remark'),
}

model CancelConsumecardBuyerpurchaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 取消交易，买家发起
 * Summary: 数字商品服务-消费卡服务-买家取消交易
 */
async function cancelConsumecardBuyerpurchase(request: CancelConsumecardBuyerpurchaseRequest): CancelConsumecardBuyerpurchaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelConsumecardBuyerpurchaseEx(request, headers, runtime);
}

/**
 * Description: 取消交易，买家发起
 * Summary: 数字商品服务-消费卡服务-买家取消交易
 */
async function cancelConsumecardBuyerpurchaseEx(request: CancelConsumecardBuyerpurchaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelConsumecardBuyerpurchaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.buyerpurchase.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyConsumecardPurchaserefundRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 交易ID
  orderId: string(name='order_id'),
  // 附言(退款原因)
  remark: string(name='remark'),
}

model ApplyConsumecardPurchaserefundResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 买家申请退款
 * Summary: 数字商品服务-消费卡服务-买家申请退款
 */
async function applyConsumecardPurchaserefund(request: ApplyConsumecardPurchaserefundRequest): ApplyConsumecardPurchaserefundResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyConsumecardPurchaserefundEx(request, headers, runtime);
}

/**
 * Description: 买家申请退款
 * Summary: 数字商品服务-消费卡服务-买家申请退款
 */
async function applyConsumecardPurchaserefundEx(request: ApplyConsumecardPurchaserefundRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyConsumecardPurchaserefundResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.purchaserefund.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyConsumecardPurchasereplaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 订单ID
  orderId: string(name='order_id'),
  // 附言
  remark?: string(name='remark'),
}

model ApplyConsumecardPurchasereplaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 买家申请售后
 * Summary: 数字商品服务-消费卡服务-买家申请售后
 */
async function applyConsumecardPurchasereplace(request: ApplyConsumecardPurchasereplaceRequest): ApplyConsumecardPurchasereplaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyConsumecardPurchasereplaceEx(request, headers, runtime);
}

/**
 * Description: 买家申请售后
 * Summary: 数字商品服务-消费卡服务-买家申请售后
 */
async function applyConsumecardPurchasereplaceEx(request: ApplyConsumecardPurchasereplaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyConsumecardPurchasereplaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.purchasereplace.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecConsumecardPurchasereceiveRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 订单ID
  orderId: string(name='order_id'),
  // 附言
  remark?: string(name='remark'),
}

model ExecConsumecardPurchasereceiveResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 买家确认收货
 * Summary: 数字商品服务-消费卡服务-买家确认收货
 */
async function execConsumecardPurchasereceive(request: ExecConsumecardPurchasereceiveRequest): ExecConsumecardPurchasereceiveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execConsumecardPurchasereceiveEx(request, headers, runtime);
}

/**
 * Description: 买家确认收货
 * Summary: 数字商品服务-消费卡服务-买家确认收货
 */
async function execConsumecardPurchasereceiveEx(request: ExecConsumecardPurchasereceiveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecConsumecardPurchasereceiveResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.purchasereceive.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RefuseConsumecardPurchaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 交易ID
  orderId: string(name='order_id'),
  // 附言
  remark?: string(name='remark'),
}

model RefuseConsumecardPurchaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 卖家拒绝交易
 * Summary: 数字商品服务-消费卡服务-卖家拒绝交易
 */
async function refuseConsumecardPurchase(request: RefuseConsumecardPurchaseRequest): RefuseConsumecardPurchaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return refuseConsumecardPurchaseEx(request, headers, runtime);
}

/**
 * Description: 卖家拒绝交易
 * Summary: 数字商品服务-消费卡服务-卖家拒绝交易
 */
async function refuseConsumecardPurchaseEx(request: RefuseConsumecardPurchaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RefuseConsumecardPurchaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.purchase.refuse', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetConsumecardPurchaserefundRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否同意退款。true同意，false拒绝。
  accept: boolean(name='accept'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 交易ID
  orderId: string(name='order_id'),
  // 附言
  remark?: string(name='remark'),
}

model SetConsumecardPurchaserefundResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 卖家退款操作。可以同意退款和拒绝退款。
 * Summary: 数字商品服务-消费卡服务-卖家退款操作
 */
async function setConsumecardPurchaserefund(request: SetConsumecardPurchaserefundRequest): SetConsumecardPurchaserefundResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setConsumecardPurchaserefundEx(request, headers, runtime);
}

/**
 * Description: 卖家退款操作。可以同意退款和拒绝退款。
 * Summary: 数字商品服务-消费卡服务-卖家退款操作
 */
async function setConsumecardPurchaserefundEx(request: SetConsumecardPurchaserefundRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetConsumecardPurchaserefundResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.purchaserefund.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetConsumecardPurchasereplaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否同意换货。true同意，false拒绝
  accept: boolean(name='accept'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 交易ID
  orderId: string(name='order_id'),
  // 附言
  remark?: string(name='remark'),
}

model SetConsumecardPurchasereplaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 卖家换货操作。可以同意换货，拒绝换货
 * Summary: 数字商品服务-消费卡服务-卖家换货操作
 */
async function setConsumecardPurchasereplace(request: SetConsumecardPurchasereplaceRequest): SetConsumecardPurchasereplaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setConsumecardPurchasereplaceEx(request, headers, runtime);
}

/**
 * Description: 卖家换货操作。可以同意换货，拒绝换货
 * Summary: 数字商品服务-消费卡服务-卖家换货操作
 */
async function setConsumecardPurchasereplaceEx(request: SetConsumecardPurchasereplaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetConsumecardPurchasereplaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.purchasereplace.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmConsumecardPurchaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 交易ID
  orderId: string(name='order_id'),
  // 附言
  remark?: string(name='remark'),
}

model ConfirmConsumecardPurchaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 卖家接单
 * Summary: 数字商品服务-消费卡服务-卖家接单
 */
async function confirmConsumecardPurchase(request: ConfirmConsumecardPurchaseRequest): ConfirmConsumecardPurchaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmConsumecardPurchaseEx(request, headers, runtime);
}

/**
 * Description: 卖家接单
 * Summary: 数字商品服务-消费卡服务-卖家接单
 */
async function confirmConsumecardPurchaseEx(request: ConfirmConsumecardPurchaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmConsumecardPurchaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.purchase.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendConsumecardPurchaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 交易ID
  orderId: string(name='order_id'),
  // 附言(发货信息)
  remark: string(name='remark'),
}

model SendConsumecardPurchaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 卖家发货
 * Summary: 数字商品服务-消费卡服务-卖家发货
 */
async function sendConsumecardPurchase(request: SendConsumecardPurchaseRequest): SendConsumecardPurchaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendConsumecardPurchaseEx(request, headers, runtime);
}

/**
 * Description: 卖家发货
 * Summary: 数字商品服务-消费卡服务-卖家发货
 */
async function sendConsumecardPurchaseEx(request: SendConsumecardPurchaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendConsumecardPurchaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.purchase.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReplaceConsumecardPurchaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 交易ID
  orderId: string(name='order_id'),
  // 附言(补发商品信息)
  remark: string(name='remark'),
}

model ReplaceConsumecardPurchaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 卖家售后补发货
 * Summary: 数字商品服务-消费卡服务-卖家售后补发货
 */
async function replaceConsumecardPurchase(request: ReplaceConsumecardPurchaseRequest): ReplaceConsumecardPurchaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return replaceConsumecardPurchaseEx(request, headers, runtime);
}

/**
 * Description: 卖家售后补发货
 * Summary: 数字商品服务-消费卡服务-卖家售后补发货
 */
async function replaceConsumecardPurchaseEx(request: ReplaceConsumecardPurchaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReplaceConsumecardPurchaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.purchase.replace', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateConsumecardGoodsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商品授权类型
  authType: long(name='auth_type'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 默认价格(单位:元,精确到分)
  defaultPrice: string(name='default_price'),
  // 代理操作的链上ID
  delegateAccountId: string(name='delegate_account_id'),
  // 商品描述
  description: string(name='description'),
  // 商品描述图片url，多个图片间用;隔开
  descImages: string(name='desc_images'),
  // 商品标价
  displayPrice: string(name='display_price'),
  // 商品名称
  goodsName: string(name='goods_name'),
  // 商品类型
  goodsType: string(name='goods_type'),
  // 是否公开
  ifPublic: boolean(name='if_public'),
  // 商品主图片url
  image: string(name='image'),
  // 商品每日上限
  limitPerUserAndDay: long(name='limit_per_user_and_day'),
  // 商品每月上限
  limitPerUserAndMonth: long(name='limit_per_user_and_month'),
  // 商品库存
  totalCount: long(name='total_count'),
  // 商品有效结束时间(UNIX毫秒时间戳)
  validNotAfter: long(name='valid_not_after'),
  // 商品有效开始时间(UNIX毫秒时间戳)
  validNotBefore: long(name='valid_not_before'),
  // 备注信息
  memo?: string(name='memo'),
}

model CreateConsumecardGoodsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 异步发布商品返回的查询ID。使用该ID查询发布结果。
  requestId?: string(name='request_id'),
}

/**
 * Description: 发布商品
 * Summary: 数字商品服务-消费卡服务-发布商品
 */
async function createConsumecardGoods(request: CreateConsumecardGoodsRequest): CreateConsumecardGoodsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createConsumecardGoodsEx(request, headers, runtime);
}

/**
 * Description: 发布商品
 * Summary: 数字商品服务-消费卡服务-发布商品
 */
async function createConsumecardGoodsEx(request: CreateConsumecardGoodsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConsumecardGoodsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.goods.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateConsumecardGoodsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 默认价格
  defaultPrice: string(name='default_price'),
  // 商品描述
  description: string(name='description'),
  // 描述图片url
  descImages: string(name='desc_images'),
  // 商品标价
  displayPrice: string(name='display_price'),
  // 商品ID
  goodsId: string(name='goods_id'),
  // 商品名称
  goodsName: string(name='goods_name'),
  // 主图片url
  images: string(name='images'),
  // 商品每日上限
  limitPerUserAndDay: long(name='limit_per_user_and_day'),
  // 商品每月上限
  limitPerUserAndMonth: long(name='limit_per_user_and_month'),
  // 商品库存
  totalCount: long(name='total_count'),
  // 商品有效结束时间(UNIX毫秒时间戳)
  validNotAfter: long(name='valid_not_after'),
  // 商品有效开始时间(UNIX毫秒时间戳)
  validNotBefore: long(name='valid_not_before'),
}

model UpdateConsumecardGoodsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 异步更新商品信息，根据该ID查询更新结果
  requestId?: string(name='request_id'),
}

/**
 * Description: 更新商品信息
 * Summary: 数字商品服务-消费卡服务-更新商品信息
 */
async function updateConsumecardGoods(request: UpdateConsumecardGoodsRequest): UpdateConsumecardGoodsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateConsumecardGoodsEx(request, headers, runtime);
}

/**
 * Description: 更新商品信息
 * Summary: 数字商品服务-消费卡服务-更新商品信息
 */
async function updateConsumecardGoodsEx(request: UpdateConsumecardGoodsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateConsumecardGoodsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.goods.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OpenConsumecardGoodstocustomRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 商品ID
  goodsId: string(name='goods_id'),
  // 开放权限的账户id
  openAccountId: string(name='open_account_id'),
  // true授权，false解除授权
  open: boolean(name='open'),
}

model OpenConsumecardGoodstocustomResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 商品开放购买权限给指定账户
 * Summary: 数字商品服务-消费卡服务-开放购买权限
 */
async function openConsumecardGoodstocustom(request: OpenConsumecardGoodstocustomRequest): OpenConsumecardGoodstocustomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openConsumecardGoodstocustomEx(request, headers, runtime);
}

/**
 * Description: 商品开放购买权限给指定账户
 * Summary: 数字商品服务-消费卡服务-开放购买权限
 */
async function openConsumecardGoodstocustomEx(request: OpenConsumecardGoodstocustomRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenConsumecardGoodstocustomResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.goodstocustom.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateConsumecardGoodscategoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 商品类别描述
  categoryDescription: string(name='category_description'),
  // 商品分类id（ffaaaaabbbbbbcccccc，如果存在返回失败）
  categoryId: string(name='category_id'),
  // 商品类别名称
  categoryName: string(name='category_name'),
}

model CreateConsumecardGoodscategoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增商品类别
 * Summary: 数字商品服务-消费卡服务-新增商品类别
 */
async function createConsumecardGoodscategory(request: CreateConsumecardGoodscategoryRequest): CreateConsumecardGoodscategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createConsumecardGoodscategoryEx(request, headers, runtime);
}

/**
 * Description: 新增商品类别
 * Summary: 数字商品服务-消费卡服务-新增商品类别
 */
async function createConsumecardGoodscategoryEx(request: CreateConsumecardGoodscategoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConsumecardGoodscategoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.goodscategory.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetConsumecardGoodscustompriceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 商品ID
  goodsId: string(name='goods_id'),
  // 设置一客一价的目标账户id
  openAccountId: string(name='open_account_id'),
  // 设置的价格(单位:元,精确到分)
  price: string(name='price'),
}

model SetConsumecardGoodscustompriceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设置商品一客一价
 * Summary: 数字商品服务-消费卡服务-设置一客一价
 */
async function setConsumecardGoodscustomprice(request: SetConsumecardGoodscustompriceRequest): SetConsumecardGoodscustompriceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setConsumecardGoodscustompriceEx(request, headers, runtime);
}

/**
 * Description: 设置商品一客一价
 * Summary: 数字商品服务-消费卡服务-设置一客一价
 */
async function setConsumecardGoodscustompriceEx(request: SetConsumecardGoodscustompriceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetConsumecardGoodscustompriceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.goodscustomprice.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadConsumecardGoodsimageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 图片MIME类型，目前仅支持 image/jpeg
  contentType: string(name='content_type'),
  // 图片信息（base64编码）列表
  image: [ string ](name='image'),
  // 场景码(入驻时申请)
  productCode: string(name='product_code'),
}

model UploadConsumecardGoodsimageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 临时可访问的url列表，过期时间2小时
  temporaryUrls?: [ string ](name='temporary_urls'),
  // 图片的不可访问url列表，发布商品时使用
  urls?: [ string ](name='urls'),
}

/**
 * Description: 上传图片获取URL
 * Summary: 数字商品服务-消费卡服务-上传图片
 */
async function uploadConsumecardGoodsimage(request: UploadConsumecardGoodsimageRequest): UploadConsumecardGoodsimageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadConsumecardGoodsimageEx(request, headers, runtime);
}

/**
 * Description: 上传图片获取URL
 * Summary: 数字商品服务-消费卡服务-上传图片
 */
async function uploadConsumecardGoodsimageEx(request: UploadConsumecardGoodsimageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadConsumecardGoodsimageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.goodsimage.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecConsumecardOrdertrywithdrawRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 需要提现的订单分布的区块结束高度
  endBlockNumber?: long(name='end_block_number'),
  // 需要提现的订单Id列表(不要超过100个Id)
  orderIdList?: [ string ](name='order_id_list'),
  // 需要提现的订单分布的区块起始高度
  startBlockNumber?: long(name='start_block_number'),
}

model ExecConsumecardOrdertrywithdrawResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 试算总提现金额(单位:元,精确到分)
  withdrawTotalAmount?: string(name='withdraw_total_amount'),
  // 试算提现订单总笔数
  withdrawTotalCount?: long(name='withdraw_total_count'),
}

/**
 * Description: 机构订单提现试算
 * Summary: 数字商品服务-消费卡服务-企业提现试算
 */
async function execConsumecardOrdertrywithdraw(request: ExecConsumecardOrdertrywithdrawRequest): ExecConsumecardOrdertrywithdrawResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execConsumecardOrdertrywithdrawEx(request, headers, runtime);
}

/**
 * Description: 机构订单提现试算
 * Summary: 数字商品服务-消费卡服务-企业提现试算
 */
async function execConsumecardOrdertrywithdrawEx(request: ExecConsumecardOrdertrywithdrawRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecConsumecardOrdertrywithdrawResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.ordertrywithdraw.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecConsumecardOrderwithdrawbyblocknumRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 需要提现的订单分布的区块结束高度
  endBlockNumber: long(name='end_block_number'),
  // 需要提现的订单分布的区块起始高度
  startBlockNumber: long(name='start_block_number'),
}

model ExecConsumecardOrderwithdrawbyblocknumResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 提现单编号(跟踪提现任务)
  withdrawBizId?: string(name='withdraw_biz_id'),
}

/**
 * Description: 机构订单提现(区块区间模式)，传入要提现的区块区间，提现该区间的交易
 * Summary: 数字商品服务-消费卡服务-根据区块提现
 */
async function execConsumecardOrderwithdrawbyblocknum(request: ExecConsumecardOrderwithdrawbyblocknumRequest): ExecConsumecardOrderwithdrawbyblocknumResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execConsumecardOrderwithdrawbyblocknumEx(request, headers, runtime);
}

/**
 * Description: 机构订单提现(区块区间模式)，传入要提现的区块区间，提现该区间的交易
 * Summary: 数字商品服务-消费卡服务-根据区块提现
 */
async function execConsumecardOrderwithdrawbyblocknumEx(request: ExecConsumecardOrderwithdrawbyblocknumRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecConsumecardOrderwithdrawbyblocknumResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.orderwithdrawbyblocknum.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecConsumecardOrderwithdrawbyidsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 订单列表(不要超过100个Id)
  orderIdList: [ string ](name='order_id_list'),
}

model ExecConsumecardOrderwithdrawbyidsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 提现单编号(跟踪提现任务)
  withdrawBizId?: string(name='withdraw_biz_id'),
}

/**
 * Description: 机构订单提现(订单列表模式)，传入要提现的订单ID列表
 * Summary: 数字商品服务-消费卡服务-根据订单表提现
 */
async function execConsumecardOrderwithdrawbyids(request: ExecConsumecardOrderwithdrawbyidsRequest): ExecConsumecardOrderwithdrawbyidsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execConsumecardOrderwithdrawbyidsEx(request, headers, runtime);
}

/**
 * Description: 机构订单提现(订单列表模式)，传入要提现的订单ID列表
 * Summary: 数字商品服务-消费卡服务-根据订单表提现
 */
async function execConsumecardOrderwithdrawbyidsEx(request: ExecConsumecardOrderwithdrawbyidsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecConsumecardOrderwithdrawbyidsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.orderwithdrawbyids.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetConsumecardOrderwithdrawresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 提现单编号
  withdrawBizId: string(name='withdraw_biz_id'),
}

model GetConsumecardOrderwithdrawresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 提现任务期望提现的金额(单位:元,精确到分)
  expectedWithdrawAmount?: string(name='expected_withdraw_amount'),
  // 状态
  status?: string(name='status'),
  // 需要审批后才能提现的交易订单数量
  withdrawApprovalOrderCount?: long(name='withdraw_approval_order_count'),
  // 提现单编号
  withdrawBizId?: string(name='withdraw_biz_id'),
  // 提现成功的总金额(单位:元,精确到分)
  withdrawTotalAmount?: string(name='withdraw_total_amount'),
  // 提现成功的总笔数
  withdrawTotalCount?: long(name='withdraw_total_count'),
}

/**
 * Description: 根据提现单号获取提现结果
 * Summary: 数字商品服务-消费卡服务-获取提现结果
 */
async function getConsumecardOrderwithdrawresult(request: GetConsumecardOrderwithdrawresultRequest): GetConsumecardOrderwithdrawresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getConsumecardOrderwithdrawresultEx(request, headers, runtime);
}

/**
 * Description: 根据提现单号获取提现结果
 * Summary: 数字商品服务-消费卡服务-获取提现结果
 */
async function getConsumecardOrderwithdrawresultEx(request: GetConsumecardOrderwithdrawresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetConsumecardOrderwithdrawresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.orderwithdrawresult.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardWalletredeemableRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 备注(长度不要超过500个字符)
  remark?: string(name='remark'),
}

model QueryConsumecardWalletredeemableResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可回退的金额
  redeemableAmount?: string(name='redeemable_amount'),
}

/**
 * Description: 注销前需要回退资金,查询账户可回退金额
 * Summary: 数字商品服务-消费卡服务-查询可回退金额
 */
async function queryConsumecardWalletredeemable(request: QueryConsumecardWalletredeemableRequest): QueryConsumecardWalletredeemableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardWalletredeemableEx(request, headers, runtime);
}

/**
 * Description: 注销前需要回退资金,查询账户可回退金额
 * Summary: 数字商品服务-消费卡服务-查询可回退金额
 */
async function queryConsumecardWalletredeemableEx(request: QueryConsumecardWalletredeemableRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardWalletredeemableResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.walletredeemable.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardGoodscreateresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 异步发布商品返回的查询ID。使用该ID查询发布结果。
  requestId: string(name='request_id'),
}

model QueryConsumecardGoodscreateresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商品ID
  goodsId?: string(name='goods_id'),
}

/**
 * Description: 发布商品是异步流程，根据requestId查询商品发布结果
 * Summary: 数字商品服务-消费卡服务-查询商品发布
 */
async function queryConsumecardGoodscreateresult(request: QueryConsumecardGoodscreateresultRequest): QueryConsumecardGoodscreateresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardGoodscreateresultEx(request, headers, runtime);
}

/**
 * Description: 发布商品是异步流程，根据requestId查询商品发布结果
 * Summary: 数字商品服务-消费卡服务-查询商品发布
 */
async function queryConsumecardGoodscreateresultEx(request: QueryConsumecardGoodscreateresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardGoodscreateresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.goodscreateresult.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardGoodsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 商品ID
  goodsId: string(name='goods_id'),
}

model QueryConsumecardGoodsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商品信息
  goods?: GoodsResponse(name='goods'),
}

/**
 * Description: 查询消费卡商品信息
 * Summary: 数字商品服务-消费卡服务-查询商品信息
 */
async function queryConsumecardGoods(request: QueryConsumecardGoodsRequest): QueryConsumecardGoodsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardGoodsEx(request, headers, runtime);
}

/**
 * Description: 查询消费卡商品信息
 * Summary: 数字商品服务-消费卡服务-查询商品信息
 */
async function queryConsumecardGoodsEx(request: QueryConsumecardGoodsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardGoodsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.goods.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyConsumecardBillrefundRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 账单ID
  orderId: string(name='order_id'),
  // 附言(不要超过500个字符)
  remark?: string(name='remark'),
}

model ApplyConsumecardBillrefundResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 账单退款申请
 * Summary: 数字商品服务-消费卡服务-账单退款申请
 */
async function applyConsumecardBillrefund(request: ApplyConsumecardBillrefundRequest): ApplyConsumecardBillrefundResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyConsumecardBillrefundEx(request, headers, runtime);
}

/**
 * Description: 账单退款申请
 * Summary: 数字商品服务-消费卡服务-账单退款申请
 */
async function applyConsumecardBillrefundEx(request: ApplyConsumecardBillrefundRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyConsumecardBillrefundResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.billrefund.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardPurchaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 交易ID
  orderId: string(name='order_id'),
}

model QueryConsumecardPurchaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易信息
  blockInstruction?: BlockInstruction(name='block_instruction'),
}

/**
 * Description: 查询交易信息
 * Summary: 数字商品服务-消费卡服务-交易查询
 */
async function queryConsumecardPurchase(request: QueryConsumecardPurchaseRequest): QueryConsumecardPurchaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardPurchaseEx(request, headers, runtime);
}

/**
 * Description: 查询交易信息
 * Summary: 数字商品服务-消费卡服务-交易查询
 */
async function queryConsumecardPurchaseEx(request: QueryConsumecardPurchaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardPurchaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.purchase.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardBlockRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块高度
  blockNumber: long(name='block_number'),
  // 链ID，指定要获取的
  chainId: string(name='chain_id'),
  // 代理查询区块信息，传入代理租户需有代理权限。接口会返回调用者和被代理租户能查看的所有交易信息。
  delegatedTenantIds?: [ string ](name='delegated_tenant_ids'),
}

model QueryConsumecardBlockResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 区块信息
  block?: Block(name='block'),
  // 区块高度
  blockNumber?: long(name='block_number'),
  // 链ID
  chainId?: string(name='chain_id'),
  // 过滤后的交易数量
  filteredTxCount?: long(name='filtered_tx_count'),
  // 区块中交易总数
  totalTxCount?: long(name='total_tx_count'),
}

/**
 * Description: 获取特定高度的区块信息
 * Summary: 数字商品服务-消费卡服务-获取区块
 */
async function queryConsumecardBlock(request: QueryConsumecardBlockRequest): QueryConsumecardBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardBlockEx(request, headers, runtime);
}

/**
 * Description: 获取特定高度的区块信息
 * Summary: 数字商品服务-消费卡服务-获取区块
 */
async function queryConsumecardBlockEx(request: QueryConsumecardBlockRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardBlockResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.block.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardLastblocknumberRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
}

model QueryConsumecardLastblocknumberResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 区块链最高区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 查询最新区块高度
 * Summary: 数字商品服务-消费卡服务-查最新区块高度
 */
async function queryConsumecardLastblocknumber(request: QueryConsumecardLastblocknumberRequest): QueryConsumecardLastblocknumberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardLastblocknumberEx(request, headers, runtime);
}

/**
 * Description: 查询最新区块高度
 * Summary: 数字商品服务-消费卡服务-查最新区块高度
 */
async function queryConsumecardLastblocknumberEx(request: QueryConsumecardLastblocknumberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardLastblocknumberResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.lastblocknumber.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardGoodsupdateresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 异步更新商品返回的查询ID。使用该ID查询更新结果。
  requestId: string(name='request_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
}

model QueryConsumecardGoodsupdateresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新商品信息是异步流程，根据requestId查询商品更新结果
 * Summary: 数字商品服务-消费卡服务-更新结果查询
 */
async function queryConsumecardGoodsupdateresult(request: QueryConsumecardGoodsupdateresultRequest): QueryConsumecardGoodsupdateresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardGoodsupdateresultEx(request, headers, runtime);
}

/**
 * Description: 更新商品信息是异步流程，根据requestId查询商品更新结果
 * Summary: 数字商品服务-消费卡服务-更新结果查询
 */
async function queryConsumecardGoodsupdateresultEx(request: QueryConsumecardGoodsupdateresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardGoodsupdateresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.goodsupdateresult.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelConsumecardSellerpurchaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 交易ID
  orderId: string(name='order_id'),
  // 附言
  remark?: string(name='remark'),
}

model CancelConsumecardSellerpurchaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 卖家取消交易
 * Summary: 数字商品服务--消费卡服务-卖家取消交易
 */
async function cancelConsumecardSellerpurchase(request: CancelConsumecardSellerpurchaseRequest): CancelConsumecardSellerpurchaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelConsumecardSellerpurchaseEx(request, headers, runtime);
}

/**
 * Description: 卖家取消交易
 * Summary: 数字商品服务--消费卡服务-卖家取消交易
 */
async function cancelConsumecardSellerpurchaseEx(request: CancelConsumecardSellerpurchaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelConsumecardSellerpurchaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.sellerpurchase.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetConsumecardCommissionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 分类id（ffaaaaabbbbbb）
  categoryId: string(name='category_id'),
  // 手续费类型（0:全局，1:商户）
  type: long(name='type'),
  // 手续费归属的账户id,如果type为0 ，则该字段必须为空
  accountId: string(name='account_id'),
  // 手续费支出方（0.卖家，1.买家，2.平台）
  payCommissionType: string(name='pay_commission_type'),
  // 手续费一级分账。最长为6条
  commissionRules: [ CommissionRule ](name='commission_rules'),
}

model SetConsumecardCommissionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 配置商品和账单的手续费信息
 * Summary: 数字商品服务-消费卡服务-配置手续费
 */
async function setConsumecardCommission(request: SetConsumecardCommissionRequest): SetConsumecardCommissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setConsumecardCommissionEx(request, headers, runtime);
}

/**
 * Description: 配置商品和账单的手续费信息
 * Summary: 数字商品服务-消费卡服务-配置手续费
 */
async function setConsumecardCommissionEx(request: SetConsumecardCommissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetConsumecardCommissionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.commission.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveConsumecardCommissionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 手续费类型（0:全局，1:商户）
  type: long(name='type'),
  // 分类id（ffaaaaabbbbbb）
  categoryId: string(name='category_id'),
  // 手续费归属的账户id,如果type为0 ，则该字段必须为空
  accountId: string(name='account_id'),
}

model RemoveConsumecardCommissionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除手续费配置
 * Summary: 数字商品服务-消费卡服务-删除手续费配置
 */
async function removeConsumecardCommission(request: RemoveConsumecardCommissionRequest): RemoveConsumecardCommissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeConsumecardCommissionEx(request, headers, runtime);
}

/**
 * Description: 删除手续费配置
 * Summary: 数字商品服务-消费卡服务-删除手续费配置
 */
async function removeConsumecardCommissionEx(request: RemoveConsumecardCommissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveConsumecardCommissionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.commission.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardCommissionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 分类id（ffaaaaabbbbbb）
  categoryId: string(name='category_id'),
  // 手续费类型（0:全局，1:商户）
  type: long(name='type'),
  // 手续费归属的账户id,如果type为0 ，则该字段必须为空
  accountId: string(name='account_id'),
}

model QueryConsumecardCommissionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 手续费规则结果
  commissionRules?: [ CommissionRuleResponse ](name='commission_rules'),
  // 分类id（ffaaaaabbbbbb，如果存在则直接更新）
  categoryId?: string(name='category_id'),
  // 手续费类型（0:全局，1:商户）
  type?: long(name='type'),
  // 手续费归属的账户id,如果type为0 ，则该字段必须为空
  accountId?: string(name='account_id'),
  // 手续费支出方（0.卖家，1.买家，2.平台）
  payCommissionType?: string(name='pay_commission_type'),
}

/**
 * Description: 查询手续费信息
 * Summary: 数字商品服务-消费卡服务-查询手续费信息
 */
async function queryConsumecardCommission(request: QueryConsumecardCommissionRequest): QueryConsumecardCommissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardCommissionEx(request, headers, runtime);
}

/**
 * Description: 查询手续费信息
 * Summary: 数字商品服务-消费卡服务-查询手续费信息
 */
async function queryConsumecardCommissionEx(request: QueryConsumecardCommissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardCommissionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.commission.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetConsumecardCommissionmanagerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 手续费管理员账户
  setAccountId?: string(name='set_account_id'),
}

model SetConsumecardCommissionmanagerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设置手续费管理员，手续费的增删改查需要由手续费管理员操作。平台管理员可以设置手续费管理员。
 * Summary: 数字商品服务-消费卡服务-设置手续费管理
 */
async function setConsumecardCommissionmanager(request: SetConsumecardCommissionmanagerRequest): SetConsumecardCommissionmanagerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setConsumecardCommissionmanagerEx(request, headers, runtime);
}

/**
 * Description: 设置手续费管理员，手续费的增删改查需要由手续费管理员操作。平台管理员可以设置手续费管理员。
 * Summary: 数字商品服务-消费卡服务-设置手续费管理
 */
async function setConsumecardCommissionmanagerEx(request: SetConsumecardCommissionmanagerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetConsumecardCommissionmanagerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.commissionmanager.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetConsumecardGoodsstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequest(name='base_request'),
  // 商品ID
  goodsId: string(name='goods_id'),
  // 商品状态：0上线，1下线
  status: long(name='status'),
}

model SetConsumecardGoodsstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设置商品状态，可以设置为上线或下线
 * Summary: 数字商品服务-消费卡服务-设置商品状态
 */
async function setConsumecardGoodsstatus(request: SetConsumecardGoodsstatusRequest): SetConsumecardGoodsstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setConsumecardGoodsstatusEx(request, headers, runtime);
}

/**
 * Description: 设置商品状态，可以设置为上线或下线
 * Summary: 数字商品服务-消费卡服务-设置商品状态
 */
async function setConsumecardGoodsstatusEx(request: SetConsumecardGoodsstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetConsumecardGoodsstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.goodsstatus.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateConsumecardReceiptcontractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求对象
  baseRequest: BaseRequest(name='base_request'),
  // 合同编号，纯数字
  contractNumber: string(name='contract_number'),
}

model CreateConsumecardReceiptcontractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 个人用户来账付款协议签约
 * Summary: 数字商品-消费卡服务-个人用户签约
 */
async function createConsumecardReceiptcontract(request: CreateConsumecardReceiptcontractRequest): CreateConsumecardReceiptcontractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createConsumecardReceiptcontractEx(request, headers, runtime);
}

/**
 * Description: 个人用户来账付款协议签约
 * Summary: 数字商品-消费卡服务-个人用户签约
 */
async function createConsumecardReceiptcontractEx(request: CreateConsumecardReceiptcontractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConsumecardReceiptcontractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.receiptcontract.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveConsumecardReceiptcontractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础信息对象
  baseRequest: BaseRequest(name='base_request'),
  // 合同编号，纯数字
  contractNumber: string(name='contract_number'),
}

model RemoveConsumecardReceiptcontractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 来账协议解约接口
 * Summary: 数字商品-消费卡服务-个人协议解约
 */
async function removeConsumecardReceiptcontract(request: RemoveConsumecardReceiptcontractRequest): RemoveConsumecardReceiptcontractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeConsumecardReceiptcontractEx(request, headers, runtime);
}

/**
 * Description: 来账协议解约接口
 * Summary: 数字商品-消费卡服务-个人协议解约
 */
async function removeConsumecardReceiptcontractEx(request: RemoveConsumecardReceiptcontractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveConsumecardReceiptcontractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.receiptcontract.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardReceiptcontractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求对象
  baseRequest: BaseRequest(name='base_request'),
  // 合同编号，纯数字
  contractNumber: string(name='contract_number'),
}

model QueryConsumecardReceiptcontractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签约ID= platform_tenant_id+product_code+certification_id+sales_plan(分库分表路由)
  uid?: string(name='uid'),
  // 平台租户ID
  platformTenantId?: string(name='platform_tenant_id'),
  // 场景码(需要申请)
  productCode?: string(name='product_code'),
  // 认证平台ID，本期支付宝用户ID（分库分表路由字段）
  certificationId?: string(name='certification_id'),
  // 合同编号
  contractNumber?: string(name='contract_number'),
  // 证件编号
  idNumber?: string(name='id_number'),
  // 证件类型
  idType?: long(name='id_type'),
  // 用户姓名/企业名称
  name?: string(name='name'),
  // 客户编号（链上账号）
  // 
  // 已经创建成功的链上账户
  accountId?: string(name='account_id'),
  // 客户编号（业务系统）
  // 
  // 平台业务系统IP
  userId?: string(name='user_id'),
  // 签约状态
  // 
  // 0：未签约 1：已签约 2：已解约（主动解约、过期解约）
  status?: long(name='status'),
  // 签约日期
  // 
  signDate?: string(name='sign_date'),
  // 解约日期
  // 
  // 
  cancelDate?: string(name='cancel_date'),
}

/**
 * Description: 来账协议查询接口
 * Summary: 数字商品-消费卡服务-个人协议查询
 */
async function queryConsumecardReceiptcontract(request: QueryConsumecardReceiptcontractRequest): QueryConsumecardReceiptcontractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardReceiptcontractEx(request, headers, runtime);
}

/**
 * Description: 来账协议查询接口
 * Summary: 数字商品-消费卡服务-个人协议查询
 */
async function queryConsumecardReceiptcontractEx(request: QueryConsumecardReceiptcontractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardReceiptcontractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.receiptcontract.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateConsumecardBillingcontractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求结构
  baseRequest: BaseRequest(name='base_request'),
  // 购买数字商品服务平台的租户ID
  platformTenantId: string(name='platform_tenant_id'),
  // 认证平台ID 本期支付宝用户ID
  certificationId: string(name='certification_id'),
  // 企业名称 企业营业执照名称
  companyName: string(name='company_name'),
  // 企业简称 默认企业营业执照名称，可自定义
  companyShortName: string(name='company_short_name'),
  // 身份信息 金融机构/非金融机构
  identity: string(name='identity'),
  // 统一信用社会代码
  usci: string(name='usci'),
  // 客户编号（业务系统） 平台业务系统IP
  userId: string(name='user_id'),
  // 营业执照地址
  address: string(name='address'),
  // 说明商家收款原因-字数中文500字以内（例如ETC服务,加油卡服务）
  serviceContent: string(name='service_content'),
}

model CreateConsumecardBillingcontractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 收单协议签约
 * Summary: 数字商品-消费卡服务-商家用户签约
 */
async function createConsumecardBillingcontract(request: CreateConsumecardBillingcontractRequest): CreateConsumecardBillingcontractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createConsumecardBillingcontractEx(request, headers, runtime);
}

/**
 * Description: 收单协议签约
 * Summary: 数字商品-消费卡服务-商家用户签约
 */
async function createConsumecardBillingcontractEx(request: CreateConsumecardBillingcontractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConsumecardBillingcontractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.billingcontract.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveConsumecardBillingcontractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求对象
  baseRequest: BaseRequest(name='base_request'),
  // 认证平台ID 本期支付宝用户ID
  certificationId: string(name='certification_id'),
}

model RemoveConsumecardBillingcontractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 收单协议解约
 * Summary: 数字商品-消费卡服务-商家协议解约
 */
async function removeConsumecardBillingcontract(request: RemoveConsumecardBillingcontractRequest): RemoveConsumecardBillingcontractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeConsumecardBillingcontractEx(request, headers, runtime);
}

/**
 * Description: 收单协议解约
 * Summary: 数字商品-消费卡服务-商家协议解约
 */
async function removeConsumecardBillingcontractEx(request: RemoveConsumecardBillingcontractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveConsumecardBillingcontractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.billingcontract.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardBillingcontractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求结构
  baseRequest: BaseRequest(name='base_request'),
  // 认证平台ID 本期支付宝用户ID
  certificationId: string(name='certification_id'),
}

model QueryConsumecardBillingcontractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 基础响应对象
  baseResponse?: BaseResponseData(name='base_response'),
  // 商家名称
  name?: string(name='name'),
  // 商家链上账户ID
  accountId?: string(name='account_id'),
  // 认证平台ID 例如：支付宝用户ID
  certificationId?: string(name='certification_id'),
  // 场景码(需要申请)
  productCode?: string(name='product_code'),
  // 签约时间
  signTime?: string(name='sign_time'),
  // 解约时间
  invalidTime?: string(name='invalid_time'),
  // 签约链接
  arrangementUrl?: string(name='arrangement_url'),
  // 签约状态
  status?: long(name='status'),
}

/**
 * Description: 收单协议签约查询
 * Summary: 数字商品-消费卡服务-商家协议查询
 */
async function queryConsumecardBillingcontract(request: QueryConsumecardBillingcontractRequest): QueryConsumecardBillingcontractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardBillingcontractEx(request, headers, runtime);
}

/**
 * Description: 收单协议签约查询
 * Summary: 数字商品-消费卡服务-商家协议查询
 */
async function queryConsumecardBillingcontractEx(request: QueryConsumecardBillingcontractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardBillingcontractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.billingcontract.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddConsumecardCommissionpartyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求对象
  baseRequest: BaseRequest(name='base_request'),
  // 收费规则归属方
  accountId: string(name='account_id'),
  // 手续费规则
  commissionRule: CommissionRule(name='commission_rule'),
  // 手续费类型（0:全局，1:商户）
  type: long(name='type'),
  // 分类id（ffaaaaabbbbbb）
  categoryId: string(name='category_id'),
}

model AddConsumecardCommissionpartyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 增加一级分账方
 * Summary: 数字商品服务-消费卡服务-增加一级分账方
 */
async function addConsumecardCommissionparty(request: AddConsumecardCommissionpartyRequest): AddConsumecardCommissionpartyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addConsumecardCommissionpartyEx(request, headers, runtime);
}

/**
 * Description: 增加一级分账方
 * Summary: 数字商品服务-消费卡服务-增加一级分账方
 */
async function addConsumecardCommissionpartyEx(request: AddConsumecardCommissionpartyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddConsumecardCommissionpartyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.commissionparty.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveConsumecardCommissionpartyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求结构
  baseRequest: BaseRequest(name='base_request'),
  // 分类id（ffaaaaabbbbbb）
  categoryId: string(name='category_id'),
  // 手续费类型（0:全局，1:商户）
  type: long(name='type'),
  // 一级分账方accountId
  ruleAccountId: string(name='rule_account_id'),
  // 手续费归属的账户id,如果type为0 ，则该字段必须为空
  accountId: string(name='account_id'),
}

model RemoveConsumecardCommissionpartyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除一级分账方
 * Summary: 数字商品服务-消费卡服务-删除一级分账方
 */
async function removeConsumecardCommissionparty(request: RemoveConsumecardCommissionpartyRequest): RemoveConsumecardCommissionpartyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeConsumecardCommissionpartyEx(request, headers, runtime);
}

/**
 * Description: 删除一级分账方
 * Summary: 数字商品服务-消费卡服务-删除一级分账方
 */
async function removeConsumecardCommissionpartyEx(request: RemoveConsumecardCommissionpartyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveConsumecardCommissionpartyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.commissionparty.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddConsumecardCommissionperiodRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础结构体
  baseRequest: BaseRequest(name='base_request'),
  // 分类id（ffaaaaabbbbbb）
  categoryId: string(name='category_id'),
  // 手续费类型（0:全局，1:商户）
  type: long(name='type'),
  // 手续费归属的账户id,如果type为0 ，则该字段必须为空
  accountId: string(name='account_id'),
  // 一级分账方
  ruleAccountId: string(name='rule_account_id'),
  // 手续费周期
  commissionPeriod: CommissionPeriod(name='commission_period'),
}

model AddConsumecardCommissionperiodResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 增加手续费周期
 * Summary: 数字商品服务-消费卡服务-增加手续费周期
 */
async function addConsumecardCommissionperiod(request: AddConsumecardCommissionperiodRequest): AddConsumecardCommissionperiodResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addConsumecardCommissionperiodEx(request, headers, runtime);
}

/**
 * Description: 增加手续费周期
 * Summary: 数字商品服务-消费卡服务-增加手续费周期
 */
async function addConsumecardCommissionperiodEx(request: AddConsumecardCommissionperiodRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddConsumecardCommissionperiodResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.commissionperiod.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveConsumecardCommissionperiodRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求对象
  baseRequest: BaseRequest(name='base_request'),
  // 商品分类id（ffaaaaabbbbbb）
  categoryId: string(name='category_id'),
  // 手续费归属的账户id,如果type为0 ，则该字段必须为空
  accountId: string(name='account_id'),
  // 一级分账方
  ruleAccountId: string(name='rule_account_id'),
  // 手续费类型（0:全局，1:商户）
  type: long(name='type'),
  // 手续费开始时间,用于查找去除的手续费（无结束时间）
  startTimeMills: long(name='start_time_mills'),
}

model RemoveConsumecardCommissionperiodResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除手续费周期
 * Summary: 数字商品服务-消费卡服务-删除手续费周期
 */
async function removeConsumecardCommissionperiod(request: RemoveConsumecardCommissionperiodRequest): RemoveConsumecardCommissionperiodResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeConsumecardCommissionperiodEx(request, headers, runtime);
}

/**
 * Description: 删除手续费周期
 * Summary: 数字商品服务-消费卡服务-删除手续费周期
 */
async function removeConsumecardCommissionperiodEx(request: RemoveConsumecardCommissionperiodRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveConsumecardCommissionperiodResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.commissionperiod.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardCounterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础结构体
  baseRequest: BaseRequest(name='base_request'),
  // 查询的类别（0 商家，1 商品）
  type: long(name='type'),
  // 查询的id（type：0 为accountId 1为goodsId）
  queryId: string(name='query_id'),
  // 查询的时间戳对应的counter
  queryTimeInMills: long(name='query_time_in_mills'),
}

model QueryConsumecardCounterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询的类别（0 商家，1 商品）
  type?: long(name='type'),
  // 查询的id（type：0 为accountId 1为goodsId）
  queryId?: string(name='query_id'),
  // 日统计数据
  dayCounter?: CounterData(name='day_counter'),
  // 月统计数据
  monthCounter?: CounterData(name='month_counter'),
  // 年统计数据
  yearCounter?: CounterData(name='year_counter'),
  // 季度统计数据
  quarterlyCounter?: CounterData(name='quarterly_counter'),
}

/**
 * Description: 查询统计信息
 * Summary: 数字商品服务-消费卡服务-查询统计信息
 */
async function queryConsumecardCounter(request: QueryConsumecardCounterRequest): QueryConsumecardCounterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardCounterEx(request, headers, runtime);
}

/**
 * Description: 查询统计信息
 * Summary: 数字商品服务-消费卡服务-查询统计信息
 */
async function queryConsumecardCounterEx(request: QueryConsumecardCounterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardCounterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.counter.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetConsumecardProductcodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 要配置的租户ID
  tenantId: string(name='tenant_id'),
  // 场景码
  productCode: string(name='product_code'),
  // 账户链上名称
  accountName: string(name='account_name'),
  // 账户链上ID
  accountId: string(name='account_id'),
  // 备注信息
  memo?: string(name='memo'),
}

model SetConsumecardProductcodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 管理接口：配置场景码权限信息
 * Summary: 数字商品服务-消费卡服务-场景码配置
 */
async function setConsumecardProductcode(request: SetConsumecardProductcodeRequest): SetConsumecardProductcodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setConsumecardProductcodeEx(request, headers, runtime);
}

/**
 * Description: 管理接口：配置场景码权限信息
 * Summary: 数字商品服务-消费卡服务-场景码配置
 */
async function setConsumecardProductcodeEx(request: SetConsumecardProductcodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetConsumecardProductcodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.productcode.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardProductcodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 要查询的租户信息，不传查全部信息
  tenantId?: string(name='tenant_id'),
}

model QueryConsumecardProductcodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 场景码配置信息列表
  productCodeInfos?: [ ProductCodeInfo ](name='product_code_infos'),
}

/**
 * Description: 查询已配置的场景码信息
 * Summary: 数字商品服务-消费卡服务-查询场景码配置
 */
async function queryConsumecardProductcode(request: QueryConsumecardProductcodeRequest): QueryConsumecardProductcodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardProductcodeEx(request, headers, runtime);
}

/**
 * Description: 查询已配置的场景码信息
 * Summary: 数字商品服务-消费卡服务-查询场景码配置
 */
async function queryConsumecardProductcodeEx(request: QueryConsumecardProductcodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardProductcodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.productcode.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveConsumecardProductcodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 要操作的租户ID
  tenantId: string(name='tenant_id'),
  // 	
  // 场景码
  productCode: string(name='product_code'),
}

model RemoveConsumecardProductcodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除场景码配置
 * Summary: 数字商品服务-消费卡服务-删除场景码配置
 */
async function removeConsumecardProductcode(request: RemoveConsumecardProductcodeRequest): RemoveConsumecardProductcodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeConsumecardProductcodeEx(request, headers, runtime);
}

/**
 * Description: 删除场景码配置
 * Summary: 数字商品服务-消费卡服务-删除场景码配置
 */
async function removeConsumecardProductcodeEx(request: RemoveConsumecardProductcodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveConsumecardProductcodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.productcode.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConsumecardGoodsimageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 场景码(入驻时申请)
  productCode: string(name='product_code'),
  // 要查询的图片不可访问url列表
  urls: [ string ](name='urls'),
}

model QueryConsumecardGoodsimageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 图片的临时可访问url列表，url过期时间2小时
  temporaryUrls?: [ string ](name='temporary_urls'),
}

/**
 * Description: 根据图片不可访问URl 获取可以访问的临时URL
 * Summary: 数字商品服务-消费卡服务-查询图片URL
 */
async function queryConsumecardGoodsimage(request: QueryConsumecardGoodsimageRequest): QueryConsumecardGoodsimageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConsumecardGoodsimageEx(request, headers, runtime);
}

/**
 * Description: 根据图片不可访问URl 获取可以访问的临时URL
 * Summary: 数字商品服务-消费卡服务-查询图片URL
 */
async function queryConsumecardGoodsimageEx(request: QueryConsumecardGoodsimageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConsumecardGoodsimageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.goodsimage.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadConsumecardFileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 场景码(入驻时申请)
  productCode: string(name='product_code'),
  // file_id
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
}

model UploadConsumecardFileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 图片的不可访问url，发布商品时使用
  url?: string(name='url'),
  // 临时可访问的url，过期时间2小时
  temporaryUrl?: string(name='temporary_url'),
}

/**
 * Description: 文件API，上传文件
 * Summary: 数字商品服务-文件服务-上传文件
 */
async function uploadConsumecardFile(request: UploadConsumecardFileRequest): UploadConsumecardFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadConsumecardFileEx(request, headers, runtime);
}

/**
 * Description: 文件API，上传文件
 * Summary: 数字商品服务-文件服务-上传文件
 */
async function uploadConsumecardFileEx(request: UploadConsumecardFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadConsumecardFileResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'baas.antdao.consumecard.file.upload',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var uploadConsumecardFileResponse = new UploadConsumecardFileResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return uploadConsumecardFileResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.consumecard.file.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCouponRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 批次ID
  collectionId: string(name='collection_id'),
  // 电子券ID
  couponId: string(name='coupon_id'),
  // 交易幂等ID，长度不大于128
  outTxId: string(name='out_tx_id'),
}

model QueryCouponResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 电子券详细信息
  coupon?: Coupon(name='coupon'),
  // 交易区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 查询电子券详细信息。只有批次管理员，过期观察员可以查看，其他商户没有查看权限。
 * Summary: 数字商品服务-电子券服务-查询电子券
 */
async function queryCoupon(request: QueryCouponRequest): QueryCouponResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCouponEx(request, headers, runtime);
}

/**
 * Description: 查询电子券详细信息。只有批次管理员，过期观察员可以查看，其他商户没有查看权限。
 * Summary: 数字商品服务-电子券服务-查询电子券
 */
async function queryCouponEx(request: QueryCouponRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCouponResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.coupon.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCouponRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 创建电子券的参数
  couponInfo: CouponCreate(name='coupon_info'),
  // 交易幂等ID
  outTxId: string(name='out_tx_id'),
}

model CreateCouponResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易块高
  blockNumber?: long(name='block_number'),
  // 电子券ID
  couponId?: string(name='coupon_id'),
}

/**
 * Description: 创建单个电子券接口
 * Summary: 数字商品服务-电子券服务-创建单个电子券
 */
async function createCoupon(request: CreateCouponRequest): CreateCouponResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCouponEx(request, headers, runtime);
}

/**
 * Description: 创建单个电子券接口
 * Summary: 数字商品服务-电子券服务-创建单个电子券
 */
async function createCouponEx(request: CreateCouponRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCouponResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.coupon.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCouponForbiddenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 批次ID
  collectionId: string(name='collection_id'),
  // 电子券ID
  couponId: string(name='coupon_id'),
  // 交易幂等ID，长度限制128
  outTxId: string(name='out_tx_id'),
}

model ExecCouponForbiddenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 将电子券更新为禁用状态，不能再进行其他状态更新
 * Summary: 数字商品服务-电子券服务-电子券风控禁用
 */
async function execCouponForbidden(request: ExecCouponForbiddenRequest): ExecCouponForbiddenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCouponForbiddenEx(request, headers, runtime);
}

/**
 * Description: 将电子券更新为禁用状态，不能再进行其他状态更新
 * Summary: 数字商品服务-电子券服务-电子券风控禁用
 */
async function execCouponForbiddenEx(request: ExecCouponForbiddenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCouponForbiddenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.coupon.forbidden.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCouponEnableRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 批次ID
  collectionId: string(name='collection_id'),
  // 电子券ID
  couponId: string(name='coupon_id'),
  // 交易幂等ID
  outTxId: string(name='out_tx_id'),
}

model ExecCouponEnableResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 将电子券更新为可用状态
 * Summary: 数字商品服务-电子券服务-电子券风控启用
 */
async function execCouponEnable(request: ExecCouponEnableRequest): ExecCouponEnableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCouponEnableEx(request, headers, runtime);
}

/**
 * Description: 将电子券更新为可用状态
 * Summary: 数字商品服务-电子券服务-电子券风控启用
 */
async function execCouponEnableEx(request: ExecCouponEnableRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCouponEnableResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.coupon.enable.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCouponExpireRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 批次ID
  collectionId: string(name='collection_id'),
  // 电子券ID
  couponId: string(name='coupon_id'),
  // 交易幂等ID
  outTxId: string(name='out_tx_id'),
}

model ExecCouponExpireResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 将电子券状态更新为过期
 * Summary: 数字商品服务-电子券服务-电子券过期
 */
async function execCouponExpire(request: ExecCouponExpireRequest): ExecCouponExpireResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCouponExpireEx(request, headers, runtime);
}

/**
 * Description: 将电子券状态更新为过期
 * Summary: 数字商品服务-电子券服务-电子券过期
 */
async function execCouponExpireEx(request: ExecCouponExpireRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCouponExpireResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.coupon.expire.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCouponWriteoffRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 批次ID
  collectionId: string(name='collection_id'),
  // 电子券ID
  couponId: string(name='coupon_id'),
  // 交易幂等ID
  outTxId: string(name='out_tx_id'),
}

model ExecCouponWriteoffResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 将电子券状态更新为核销
 * Summary: 数字商品服务-电子券服务-电子券核销
 */
async function execCouponWriteoff(request: ExecCouponWriteoffRequest): ExecCouponWriteoffResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCouponWriteoffEx(request, headers, runtime);
}

/**
 * Description: 将电子券状态更新为核销
 * Summary: 数字商品服务-电子券服务-电子券核销
 */
async function execCouponWriteoffEx(request: ExecCouponWriteoffRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCouponWriteoffResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.coupon.writeoff.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCouponTimeoutRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 批次ID
  collectionId: string(name='collection_id'),
  // 电子券ID
  couponId: string(name='coupon_id'),
  // 交易幂等ID
  outTxId: string(name='out_tx_id'),
}

model ExecCouponTimeoutResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 更新电子券的激活码状态为已超时
 * Summary: 数字商品服务-电子券服务-券激活码超时
 */
async function execCouponTimeout(request: ExecCouponTimeoutRequest): ExecCouponTimeoutResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCouponTimeoutEx(request, headers, runtime);
}

/**
 * Description: 更新电子券的激活码状态为已超时
 * Summary: 数字商品服务-电子券服务-券激活码超时
 */
async function execCouponTimeoutEx(request: ExecCouponTimeoutRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCouponTimeoutResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.coupon.timeout.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCouponActivateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 电子券批次ID
  collectionId: string(name='collection_id'),
  // 电子券激活码
  couponCode: string(name='coupon_code'),
  // 激活码附加信息
  couponExtCode?: string(name='coupon_ext_code'),
  // 电子券ID
  couponId: string(name='coupon_id'),
  // 交易幂等ID
  outTxId: string(name='out_tx_id'),
}

model ExecCouponActivateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 商户上传激活码，激活电子券
 * Summary: 数字商品服务-电子券服务-激活电子券
 */
async function execCouponActivate(request: ExecCouponActivateRequest): ExecCouponActivateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCouponActivateEx(request, headers, runtime);
}

/**
 * Description: 商户上传激活码，激活电子券
 * Summary: 数字商品服务-电子券服务-激活电子券
 */
async function execCouponActivateEx(request: ExecCouponActivateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCouponActivateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.coupon.activate.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCouponTransferRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 电子券批次ID
  collectionId: string(name='collection_id'),
  // 电子券ID
  couponId: string(name='coupon_id'),
  // 原始持有用户公钥对应的私钥，对outBizId的签名
  originUidPublicKeySign: string(name='origin_uid_public_key_sign'),
  // 交易幂等ID
  outTxId: string(name='out_tx_id'),
  // 要转让的目标用户脱敏ID
  transferDesensitizedUid: string(name='transfer_desensitized_uid'),
  // 要转让的目标用户公钥
  transferUidPublicKey: string(name='transfer_uid_public_key'),
}

model ExecCouponTransferResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 将电子券转让给其他用户
 * Summary: 数字商品服务-电子券服务-电子券转让
 */
async function execCouponTransfer(request: ExecCouponTransferRequest): ExecCouponTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCouponTransferEx(request, headers, runtime);
}

/**
 * Description: 将电子券转让给其他用户
 * Summary: 数字商品服务-电子券服务-电子券转让
 */
async function execCouponTransferEx(request: ExecCouponTransferRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCouponTransferResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.coupon.transfer.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCouponSignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 电子券批次ID
  collectionId: string(name='collection_id'),
  // 电子券ID
  couponId: string(name='coupon_id'),
  // 脱敏用户ID
  desensitizedUid: string(name='desensitized_uid'),
  // 交易幂等ID
  outTxId: string(name='out_tx_id'),
  // 用户公钥
  uidPublicKey: string(name='uid_public_key'),
}

model ExecCouponSignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 记名电子券创建时没有记录用户信息，可以调用本接口将用户信息更新到电子券上。记名电子券若没有用户信息，则无法进行绑定激活。
 * Summary: 数字商品服务-电子券服务-电子券记名
 */
async function execCouponSign(request: ExecCouponSignRequest): ExecCouponSignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCouponSignEx(request, headers, runtime);
}

/**
 * Description: 记名电子券创建时没有记录用户信息，可以调用本接口将用户信息更新到电子券上。记名电子券若没有用户信息，则无法进行绑定激活。
 * Summary: 数字商品服务-电子券服务-电子券记名
 */
async function execCouponSignEx(request: ExecCouponSignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCouponSignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.coupon.sign.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecCouponBindRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 电子券批次ID
  collectionId: string(name='collection_id'),
  // 电子券ID
  couponId: string(name='coupon_id'),
  // 用户脱敏ID
  desensitizedUid?: string(name='desensitized_uid'),
  // 绑定的持有者信息
  holderUserAccount?: string(name='holder_user_account'),
  // 交易幂等ID
  outTxId: string(name='out_tx_id'),
  // 电子券公钥对应的私钥，对 couponId||outTxId 的签名
  publicKeySign: string(name='public_key_sign'),
  // 用户公钥对应的私钥，对 outTxId 的签名
  uidPublicKeySign?: string(name='uid_public_key_sign'),
}

model ExecCouponBindResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 绑定电子券，更新为“绑定”状态
 * Summary: 数字商品服务-电子券服务-绑定电子券
 */
async function execCouponBind(request: ExecCouponBindRequest): ExecCouponBindResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execCouponBindEx(request, headers, runtime);
}

/**
 * Description: 绑定电子券，更新为“绑定”状态
 * Summary: 数字商品服务-电子券服务-绑定电子券
 */
async function execCouponBindEx(request: ExecCouponBindRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecCouponBindResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.coupon.bind.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateCouponRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 电子券创建参数
  couponInfo: CouponCreate(name='coupon_info'),
  // 一次性创建数量。最大每次创建100张
  createNumber: long(name='create_number'),
  // 交易幂等ID
  outTxId: string(name='out_tx_id'),
}

model BatchcreateCouponResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易块高
  blockNumber?: long(name='block_number'),
  // 电子券创建结果：电子券ID列表
  couponIdList?: [ string ](name='coupon_id_list'),
}

/**
 * Description: 传入数量一次性创建多张电子券，支持不记名电子券或同名电子券创建。每次最多创建100张电子券
 * Summary: 数字商品服务-电子券服务-电子券批量创建
 */
async function batchcreateCoupon(request: BatchcreateCouponRequest): BatchcreateCouponResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateCouponEx(request, headers, runtime);
}

/**
 * Description: 传入数量一次性创建多张电子券，支持不记名电子券或同名电子券创建。每次最多创建100张电子券
 * Summary: 数字商品服务-电子券服务-电子券批量创建
 */
async function batchcreateCouponEx(request: BatchcreateCouponRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateCouponResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.coupon.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCouponListRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 电子券创建参数列表
  coupons: [ CouponCreate ](name='coupons'),
  // 交易幂等ID
  outTxId: string(name='out_tx_id'),
}

model CreateCouponListResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 电子券创建结果：电子券ID列表
  couponIdList?: [ string ](name='coupon_id_list'),
  // 交易区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 电子券列表创建 支持传入不同的电子券信息列表，列表中每个电子券信息可以不相同
 * Summary: 数字商品服务-电子券服务-电子券列表创建
 */
async function createCouponList(request: CreateCouponListRequest): CreateCouponListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCouponListEx(request, headers, runtime);
}

/**
 * Description: 电子券列表创建 支持传入不同的电子券信息列表，列表中每个电子券信息可以不相同
 * Summary: 数字商品服务-电子券服务-电子券列表创建
 */
async function createCouponListEx(request: CreateCouponListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCouponListResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.coupon.list.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCouponCollectionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 批次ID
  collectionId: string(name='collection_id'),
  // 电子券前缀
  couponNumberPrefix: string(name='coupon_number_prefix'),
  // 批次创建者
  issuer: string(name='issuer'),
  // 批次名称
  name: string(name='name'),
  // 是否创建时就记名
  needPreRegistered: boolean(name='need_pre_registered'),
  // 是否记名电子券
  needRegistered: boolean(name='need_registered'),
  // 交易幂等ID
  outTxId: string(name='out_tx_id'),
}

model CreateCouponCollectionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 创建电子券批次，定义该批次的信息和是否记名，创建批次的商户自动成为批次管理员。
 * Summary: 数字商品服务-电子券服务-创建电子券批次
 */
async function createCouponCollection(request: CreateCouponCollectionRequest): CreateCouponCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCouponCollectionEx(request, headers, runtime);
}

/**
 * Description: 创建电子券批次，定义该批次的信息和是否记名，创建批次的商户自动成为批次管理员。
 * Summary: 数字商品服务-电子券服务-创建电子券批次
 */
async function createCouponCollectionEx(request: CreateCouponCollectionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCouponCollectionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.coupon.collection.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCouponCollectionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 批次ID
  collectionId: string(name='collection_id'),
}

model QueryCouponCollectionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 批次详情
  couponCollection?: CouponCollection(name='coupon_collection'),
  // 交易区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 输入批次ID，查询批次详情。只有批次管理员，过期观察员可以查看，其他商户没有查看权限。
 * Summary: 数字商品服务-电子券服务-电子券批次查询
 */
async function queryCouponCollection(request: QueryCouponCollectionRequest): QueryCouponCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCouponCollectionEx(request, headers, runtime);
}

/**
 * Description: 输入批次ID，查询批次详情。只有批次管理员，过期观察员可以查看，其他商户没有查看权限。
 * Summary: 数字商品服务-电子券服务-电子券批次查询
 */
async function queryCouponCollectionEx(request: QueryCouponCollectionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCouponCollectionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.coupon.collection.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMerchantUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 商户管理下的用户ID
  localId: string(name='local_id'),
}

model QueryMerchantUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户完整信息
  // {
  //             "tenant_id": "ZKUA",
  //             "user_id": "331f9b0922f940f464d4b94b5628180408ac305b7fc72d3e40f5b7727d0702fb",
  //             "local_id": "user01",
  //             "did": "",
  //             "vc": "",
  //             "pk": "3280b948a7fa8525c0fbfd47d1df75d7a7ee9f3baedd6964565b42f461dd86732717c4bc4c8203ea2b9b1aeef7b148644babba3c0cd6927c4c0964919f590c6c"
  //         }
  // 
  user?: User(name='user'),
}

/**
 * Description: 查询调用商户下的用户信息
 * Summary: 数字商品服务-商户管理-查询用户信息
 */
async function queryMerchantUser(request: QueryMerchantUserRequest): QueryMerchantUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMerchantUserEx(request, headers, runtime);
}

/**
 * Description: 查询调用商户下的用户信息
 * Summary: 数字商品服务-商户管理-查询用户信息
 */
async function queryMerchantUserEx(request: QueryMerchantUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMerchantUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.merchant.user.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateMerchantUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 用户的did信息
  did?: string(name='did'),
  // 用户名
  localId: string(name='local_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model CreateMerchantUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建商户管理下的用户
 * Summary: 数字商品服务-商户管理-商户创建用户
 */
async function createMerchantUser(request: CreateMerchantUserRequest): CreateMerchantUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createMerchantUserEx(request, headers, runtime);
}

/**
 * Description: 创建商户管理下的用户
 * Summary: 数字商品服务-商户管理-商户创建用户
 */
async function createMerchantUserEx(request: CreateMerchantUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMerchantUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.merchant.user.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMerchantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 币种
  currency?: string(name='currency'),
  // 要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
}

model QueryMerchantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商户完整信息
  // {
  //             "tenant_id": "Z",
  //             "did": "did:mychain:ct",
  //             "admin_id": "ed7b3acb718e2f91bc8fab6a5e7cc3c061",
  //             "fund_manager_id": "b7ecd55bde04827b3e611a741d",
  //             "description": "SK",
  //             "is_equity_provider": true,
  //             "is_equity_consumer": true,
  //             "is_asset_issuer": true,
  //             "status": 0,
  //             "provision": {
  //                 "currency": "CNY",
  //                 "debit": "99999999.0000",
  //                 "credit_max": "99999999.0000",
  //                 "credit_used": "0.0000"
  //             }
  //         }
  merchant?: Merchant(name='merchant'),
  // 查询商户信息时的区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 查询管理员创建的商户信息（可查询自身的商户信息）
 * Summary: 数字商品服务-商户管理-查询商户信息
 */
async function queryMerchant(request: QueryMerchantRequest): QueryMerchantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMerchantEx(request, headers, runtime);
}

/**
 * Description: 查询管理员创建的商户信息（可查询自身的商户信息）
 * Summary: 数字商品服务-商户管理-查询商户信息
 */
async function queryMerchantEx(request: QueryMerchantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMerchantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.merchant.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadImageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 图片MIME类型，目前仅支持 image/jpeg
  contentType: string(name='content_type'),
  // 要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 图片信息（base64编码）
  image: string(name='image'),
}

model UploadImageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 临时可访问的url，过期时间2小时
  temporaryUrl?: string(name='temporary_url'),
  // 图片的不可访问url，发布权益时使用
  url?: string(name='url'),
}

/**
 * Description: 上传图片到OSS，以备风控检查。仅权益发行方可使用，采购方不可使用。上传的图片单张不超过1M。
 * Summary: 数字商品服务-OSS服务-上传图片
 */
async function uploadImage(request: UploadImageRequest): UploadImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadImageEx(request, headers, runtime);
}

/**
 * Description: 上传图片到OSS，以备风控检查。仅权益发行方可使用，采购方不可使用。上传的图片单张不超过1M。
 * Summary: 数字商品服务-OSS服务-上传图片
 */
async function uploadImageEx(request: UploadImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadImageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.image.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetPkiPublickeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商户管理员/其用户的链上账户ID
  accountId: string(name='account_id'),
  // 商户管理员/其用户归属的租户ID
  optTenantId: string(name='opt_tenant_id'),
}

model GetPkiPublickeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 公钥字符串（base64）
  publicKey?: string(name='public_key'),
}

/**
 * Description: 获取kms中对应用户的公钥
 * Summary: 数字商品服务-密钥管理-获取用户公钥
 */
async function getPkiPublickey(request: GetPkiPublickeyRequest): GetPkiPublickeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getPkiPublickeyEx(request, headers, runtime);
}

/**
 * Description: 获取kms中对应用户的公钥
 * Summary: 数字商品服务-密钥管理-获取用户公钥
 */
async function getPkiPublickeyEx(request: GetPkiPublickeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPkiPublickeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.pki.publickey.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecPkiEncryptRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商户管理员/其用户的链上账户ID
  accountId: string(name='account_id'),
  // 明文（base64编码）
  content: string(name='content'),
  // 商户管理员/其用户归属的租户ID
  optTenantId: string(name='opt_tenant_id'),
}

model ExecPkiEncryptResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 密文 base64编码 
  encryptedContent?: string(name='encrypted_content'),
}

/**
 * Description: ECC公钥加密接口
 * Summary: 数字商品服务-密钥管理-公钥加密
 */
async function execPkiEncrypt(request: ExecPkiEncryptRequest): ExecPkiEncryptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execPkiEncryptEx(request, headers, runtime);
}

/**
 * Description: ECC公钥加密接口
 * Summary: 数字商品服务-密钥管理-公钥加密
 */
async function execPkiEncryptEx(request: ExecPkiEncryptRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecPkiEncryptResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.pki.encrypt.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecPkiDecryptRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商户管理员/其用户的链上账户ID
  accountId: string(name='account_id'),
  // 要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 密文（base64）
  encryptedContent: string(name='encrypted_content'),
}

model ExecPkiDecryptResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 明文
  content?: string(name='content'),
}

/**
 * Description: ECC解密算法接口
 * Summary: 数字商品服务-密钥管理-私钥解密
 */
async function execPkiDecrypt(request: ExecPkiDecryptRequest): ExecPkiDecryptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execPkiDecryptEx(request, headers, runtime);
}

/**
 * Description: ECC解密算法接口
 * Summary: 数字商品服务-密钥管理-私钥解密
 */
async function execPkiDecryptEx(request: ExecPkiDecryptRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecPkiDecryptResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.pki.decrypt.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMerchantFriendRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 友好商户租户ID
  friendTenantId: string(name='friend_tenant_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
  // 更新类型
  type: string(name='type'),
}

model UpdateMerchantFriendResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新商户的友商信息
 * Summary: 数字商品服务-商户管理-更新商户友商
 */
async function updateMerchantFriend(request: UpdateMerchantFriendRequest): UpdateMerchantFriendResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMerchantFriendEx(request, headers, runtime);
}

/**
 * Description: 更新商户的友商信息
 * Summary: 数字商品服务-商户管理-更新商户友商
 */
async function updateMerchantFriendEx(request: UpdateMerchantFriendRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMerchantFriendResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.merchant.friend.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateEquityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权类型 0 Auto，1Contract
  authType: long(name='auth_type'),
  // 链ID
  chainId: string(name='chain_id'),
  // 结算币种
  currency: string(name='currency'),
  // 权益价格（单位：元）
  defaultPrice: string(name='default_price'),
  // 代理操作专用，要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品详情信息
  description: string(name='description'),
  // 权益商品详情图。上传仅接受链接，请使用OSS存储服务上传图片(;分隔)
  descImages: string(name='desc_images'),
  // 权益商品名称
  equityName: string(name='equity_name'),
  // 权益商品类型：类型为整型（不大于：2147483647），需要进行细分，类型由三部分组成；aabbbbcccc。aa 为大类分类，bbbb 为细项分类（无细项分类时为0000），cccc 为数据格式分类（其中0000表示无格式要求）。请根据实际商品类型填写，具体类型和兑换时数据结构查看文档【https://tech.antfin.com/docs/2/163896】 。不可修改，如需修改需重新发布商品
  equityType: long(name='equity_type'),
  // 字段决定权益商品是否全量链上客户可见，当选择权益为false时，需要使用baas.antdao.equity.merchant.open接口增加权益商品可见客户
  ifPublic: boolean(name='if_public'),
  // 权益商品主图。上传仅接受链接，请使用OSS存储服务上传图片(;分隔)
  images: string(name='images'),
  // 商户每日兑换上限
  limitPerMerchantAndDay: long(name='limit_per_merchant_and_day'),
  // 商户每月兑换上限
  limitPerMerchantAndMonth: long(name='limit_per_merchant_and_month'),
  // 用户每日兑换上限
  limitPerUserAndDay: long(name='limit_per_user_and_day'),
  // 用户每月兑换上限
  limitPerUserAndMonth: long(name='limit_per_user_and_month'),
  // 若需要兑换方提供的特殊信息，可增加在备注字段，并要求兑换方是否传入（按照需求方自定义内容信息）
  // - 如必须传入证件号，手机号信息，则权益需要通过运营平台审核，非必须采集信息将拒绝上架
  memo?: string(name='memo'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
  // 权益商品库存数量
  totalCount: string(name='total_count'),
  // 权益商品使用有效期结束时间（毫秒）
  useValidNotAfter: long(name='use_valid_not_after'),
  // 权益商品使用有效期开始时间（毫秒）
  useValidNotBefore: long(name='use_valid_not_before'),
  // 权益商品兑换有效期结束时间（毫秒）
  validNotAfter: long(name='valid_not_after'),
  // 权益商品兑换有效期开始时间（毫秒）
  validNotBefore: long(name='valid_not_before'),
  // 权益商品面值（单位：元）
  value: string(name='value'),
}

model CreateEquityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求ID，用于查询异步发布权益结果
  createEquityRequestId?: string(name='create_equity_request_id'),
}

/**
 * Description: 商品供应商户发布一个商品
 * Summary: 数字商品服务-商品服务-创建商品
 */
async function createEquity(request: CreateEquityRequest): CreateEquityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createEquityEx(request, headers, runtime);
}

/**
 * Description: 商品供应商户发布一个商品
 * Summary: 数字商品服务-商品服务-创建商品
 */
async function createEquityEx(request: CreateEquityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateEquityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OfflineEquityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model OfflineEquityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.status.update
下线商品
 * Summary: 数字商品服务-商品服务-下线商品
 */
async function offlineEquity(request: OfflineEquityRequest): OfflineEquityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return offlineEquityEx(request, headers, runtime);
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.status.update
下线商品
 * Summary: 数字商品服务-商品服务-下线商品
 */
async function offlineEquityEx(request: OfflineEquityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineEquityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.offline', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FreezeEquityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model FreezeEquityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 该接口不使用，合并至baas.antdao.equity.status.update
冻结权益
 * Summary: 数字商品服务-商品服务-冻结商品
 */
async function freezeEquity(request: FreezeEquityRequest): FreezeEquityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return freezeEquityEx(request, headers, runtime);
}

/**
 * Description: 该接口不使用，合并至baas.antdao.equity.status.update
冻结权益
 * Summary: 数字商品服务-商品服务-冻结商品
 */
async function freezeEquityEx(request: FreezeEquityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FreezeEquityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.freeze', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OpenEquityMerchantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 代理操作专用，要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 被授权的租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 更新操作，添加或者删除
  optType: string(name='opt_type'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model OpenEquityMerchantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 授权兑换—非公开商品商户配置
 * Summary: 数字商品服务-商品服务-授权兑换
 */
async function openEquityMerchant(request: OpenEquityMerchantRequest): OpenEquityMerchantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openEquityMerchantEx(request, headers, runtime);
}

/**
 * Description: 授权兑换—非公开商品商户配置
 * Summary: 数字商品服务-商品服务-授权兑换
 */
async function openEquityMerchantEx(request: OpenEquityMerchantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenEquityMerchantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.merchant.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthEquityMerchantuserpriceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户兑换价格（单位：元）。价格和比例二选一，且只能填写一个。
  amount?: string(name='amount'),
  // 链ID
  chainId: string(name='chain_id'),
  // 代理操作专用，要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 操作用户
  optTenantId?: string(name='opt_tenant_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
  // 比例。价格和比例二选一，且只能填写一个。
  ratio?: string(name='ratio'),
}

model AuthEquityMerchantuserpriceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用户兑换价格设置
 * Summary: 数字商品服务-商品服务-用户兑换价格设置
 */
async function authEquityMerchantuserprice(request: AuthEquityMerchantuserpriceRequest): AuthEquityMerchantuserpriceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authEquityMerchantuserpriceEx(request, headers, runtime);
}

/**
 * Description: 用户兑换价格设置
 * Summary: 数字商品服务-商品服务-用户兑换价格设置
 */
async function authEquityMerchantuserpriceEx(request: AuthEquityMerchantuserpriceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthEquityMerchantuserpriceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.merchantuserprice.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateEquityDefaultpriceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 价格
  amount: string(name='amount'),
  // 链ID
  chainId: string(name='chain_id'),
  // 代理操作专用，要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model UpdateEquityDefaultpriceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update 
更新商品价格
 * Summary: 数字商品服务-商品服务-更新商品价格
 */
async function updateEquityDefaultprice(request: UpdateEquityDefaultpriceRequest): UpdateEquityDefaultpriceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateEquityDefaultpriceEx(request, headers, runtime);
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update 
更新商品价格
 * Summary: 数字商品服务-商品服务-更新商品价格
 */
async function updateEquityDefaultpriceEx(request: UpdateEquityDefaultpriceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateEquityDefaultpriceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.defaultprice.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateEquityTenantpriceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 价格（单位：元）
  amount: string(name='amount'),
  // 链ID
  chainId: string(name='chain_id'),
  // 要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 定向价格租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model UpdateEquityTenantpriceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新商品自定义定价
 * Summary: 数字商品服务-商品服务-更新自定义定价
 */
async function updateEquityTenantprice(request: UpdateEquityTenantpriceRequest): UpdateEquityTenantpriceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateEquityTenantpriceEx(request, headers, runtime);
}

/**
 * Description: 更新商品自定义定价
 * Summary: 数字商品服务-商品服务-更新自定义定价
 */
async function updateEquityTenantpriceEx(request: UpdateEquityTenantpriceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateEquityTenantpriceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.tenantprice.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddEquityCountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 权益库存数量
  amount: long(name='amount'),
  // 链ID
  chainId: string(name='chain_id'),
  // 代理操作专用，要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model AddEquityCountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update
增加权益库存
 * Summary: 数字商品服务-商品服务-增加权益库存
 */
async function addEquityCount(request: AddEquityCountRequest): AddEquityCountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addEquityCountEx(request, headers, runtime);
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update
增加权益库存
 * Summary: 数字商品服务-商品服务-增加权益库存
 */
async function addEquityCountEx(request: AddEquityCountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddEquityCountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.count.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateEquityExchangelimitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 代理操作专用，要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 商户每日兑换上限
  limitPerMerchantAndDay?: long(name='limit_per_merchant_and_day'),
  // 商户每月兑换上限
  limitPerMerchantAndMontn?: long(name='limit_per_merchant_and_montn'),
  // 用户每日兑换上限
  limitPerUserAndDay?: long(name='limit_per_user_and_day'),
  // 用户每月兑换上限
  limitPerUserAndMonth?: long(name='limit_per_user_and_month'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model UpdateEquityExchangelimitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update
更新兑换限制规则
 * Summary: 数字商品服务-商品服务-更新兑换限制规则
 */
async function updateEquityExchangelimit(request: UpdateEquityExchangelimitRequest): UpdateEquityExchangelimitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateEquityExchangelimitEx(request, headers, runtime);
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update
更新兑换限制规则
 * Summary: 数字商品服务-商品服务-更新兑换限制规则
 */
async function updateEquityExchangelimitEx(request: UpdateEquityExchangelimitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateEquityExchangelimitResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.exchangelimit.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateEquityValidtimeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 要代理的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
  // 权益商品使用有效期右闭区间
  useValidNotAfter?: string(name='use_valid_not_after'),
  // 权益商品使用有效期左闭区间
  useValidNotBefore?: string(name='use_valid_not_before'),
  // 权益商品兑换有效期右闭区间
  validNotAfter?: string(name='valid_not_after'),
  // 权益商品兑换有效期左闭区间
  validNotBefore?: string(name='valid_not_before'),
}

model UpdateEquityValidtimeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update
更新商品有效期
 * Summary: 数字商品服务-商品服务-更新有效期
 */
async function updateEquityValidtime(request: UpdateEquityValidtimeRequest): UpdateEquityValidtimeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateEquityValidtimeEx(request, headers, runtime);
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update
更新商品有效期
 * Summary: 数字商品服务-商品服务-更新有效期
 */
async function updateEquityValidtimeEx(request: UpdateEquityValidtimeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateEquityValidtimeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.validtime.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEquityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 被检索商户ID
  optTenantId?: string(name='opt_tenant_id'),
  // 交易限制日期(yyyyMMdd或yyyyMM)(可选)
  targetDate?: string(name='target_date'),
  // 被检索用户ID
  userId?: string(name='user_id'),
}

model QueryEquityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 权益商品完整信息: equityType 权益类型：0积分，1卡券，2实物。 status 权益状态：0可用状态，1下线，2冻结。 authType 权益授权类型：0自动，1合约。
  //  { "equity_id": "6041f851f4d", "tenant_id": "ZEJEZKUA", "admin_id": "ed7b3ac3c061", "equity_type": 1, "equity_name": "FDCardtest", "description": "FDCard", "total_count": "1000000", "status": 0, "auth_type": 0, "currency": "CNY", "value": "10.0000", "default_price": "1.0000", "images": "oss://myexchange/12593acf32dd6d4257fa0.jpeg", "desc_images": "", "memo": "", "is_public": true, "valid_not_before": 112692, "valid_not_after": 112654365244, "use_valid_not_before": 112612, "use_valid_not_after": 11265436524415235, "limit_per_user_and_day": 1000000, "limit_per_user_and_month": 100000, "limit_per_merchant_and_day": 1000000, "limit_per_merchant_and_month": 1000000, "equity_ext_info": { "open_to_tenant_id": "", "tenant_price": "", "tenant_user_price": { "snapshot_tenant_price": "", "user_price_type": 0, "price": "", "ratio": "" }, "target_date": "", "limit_per_day_used": 0, "limit_per_month_used": 0 } }
  equity?: Equity(name='equity'),
  // 权益图片的永久oss地址
  urls?: [ string ](name='urls'),
}

/**
 * Description: 查询商品信息
 * Summary: 数字商品服务-商品服务-查询商品信息
 */
async function queryEquity(request: QueryEquityRequest): QueryEquityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEquityEx(request, headers, runtime);
}

/**
 * Description: 查询商品信息
 * Summary: 数字商品服务-商品服务-查询商品信息
 */
async function queryEquityEx(request: QueryEquityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEquityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecExchangeByuserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资产ID
  assetId: string(name='asset_id'),
  // 资产发行方
  assetIssuer: string(name='asset_issuer'),
  // 期望资产汇率
  assetRate: string(name='asset_rate'),
  // 链ID
  chainId: string(name='chain_id'),
  // 代理操作专用，要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 权益商品提供方ID
  equityProvider: string(name='equity_provider'),
  // 期望权益汇率
  equityRate: string(name='equity_rate'),
  // 兑换时必要信息，敏感信息需加密。兑换时必要的信息，敏感信息需加密。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896
  memo?: string(name='memo'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
  // 用户ID
  userId: string(name='user_id'),
}

model ExecExchangeByuserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用户身份发起兑换
 * Summary: 数字商品服务-兑换服务-用户身份发起兑换
 */
async function execExchangeByuser(request: ExecExchangeByuserRequest): ExecExchangeByuserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execExchangeByuserEx(request, headers, runtime);
}

/**
 * Description: 用户身份发起兑换
 * Summary: 数字商品服务-兑换服务-用户身份发起兑换
 */
async function execExchangeByuserEx(request: ExecExchangeByuserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecExchangeByuserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.exchange.byuser.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecExchangeBymerchantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资产ID
  assetId: string(name='asset_id'),
  // 当前希望按照上述比例扣减用户资产
  assetRate: string(name='asset_rate'),
  // 链ID
  chainId: string(name='chain_id'),
  // 权益商品ID，例：7f1be9108651f97513b5b59030f5b059e58a59d263ab426cbf26337f91642caa
  equityId: string(name='equity_id'),
  // 用户兑换价格接口设置的价格（单位：元）
  equityPrice: string(name='equity_price'),
  // 兑换时必要的信息，敏感信息需加密。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896
  // 比如在兑换手机直充商品时，需要对{"countryCode": "86", "phone": "13900000000"} 使用供应商的公钥进行加密。
  memo?: string(name='memo'),
  // 权益商品兑换外部流水ID，调用方自定义流水ID
  outTxId: string(name='out_tx_id'),
  // 采购商如果绑定了附加的公私钥对。在兑换商品时需要对SHA256(out_tx_id+tenant_id+asset_id+equity_id+equity_price+asset_rate+user_id+memo)使用ECC K1私钥签名（算法ECDSAWithSHA256，曲线Secp256K1），并转换为Hex。
  txSig?: string(name='tx_sig'),
  // 受益用户名
  userId: string(name='user_id'),
}

model ExecExchangeBymerchantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 商户身份发起兑换
 * Summary: 数字商品服务-兑换服务-商户身份发起兑换
 */
async function execExchangeBymerchant(request: ExecExchangeBymerchantRequest): ExecExchangeBymerchantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execExchangeBymerchantEx(request, headers, runtime);
}

/**
 * Description: 商户身份发起兑换
 * Summary: 数字商品服务-兑换服务-商户身份发起兑换
 */
async function execExchangeBymerchantEx(request: ExecExchangeBymerchantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecExchangeBymerchantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.exchange.bymerchant.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmExchangeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 附言。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896
  memo?: string(name='memo'),
  // 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
  originTxId: string(name='origin_tx_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model ConfirmExchangeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 确认接单接口。注意：若确认接单则必须发货！如果不能确保发货则直接调用缺货接口。
 * Summary: 数字商品服务-兑换服务-确认接单
 */
async function confirmExchange(request: ConfirmExchangeRequest): ConfirmExchangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmExchangeEx(request, headers, runtime);
}

/**
 * Description: 确认接单接口。注意：若确认接单则必须发货！如果不能确保发货则直接调用缺货接口。
 * Summary: 数字商品服务-兑换服务-确认接单
 */
async function confirmExchangeEx(request: ConfirmExchangeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmExchangeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.exchange.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecExchangeOutofstoreRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 缺货时通知给采购方的信息，若敏感信息需加密。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896
  memo: string(name='memo'),
  // 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
  originTxId: string(name='origin_tx_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model ExecExchangeOutofstoreResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 拒绝发货。供应商可由于缺货，商品不满足发货条件，意外状态下使用。
 * Summary: 数字商品服务-兑换服务-拒绝发货
 */
async function execExchangeOutofstore(request: ExecExchangeOutofstoreRequest): ExecExchangeOutofstoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execExchangeOutofstoreEx(request, headers, runtime);
}

/**
 * Description: 拒绝发货。供应商可由于缺货，商品不满足发货条件，意外状态下使用。
 * Summary: 数字商品服务-兑换服务-拒绝发货
 */
async function execExchangeOutofstoreEx(request: ExecExchangeOutofstoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecExchangeOutofstoreResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.exchange.outofstore.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendExchangeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 发货商品的信息，敏感信息需加密，使用收货方公钥加密的权益信息。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896。比如在手机直充时可以返回 {  "voucher": "充值凭证，如有",  "memo": ""}信息。
  memo?: string(name='memo'),
  // 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
  originTxId: string(name='origin_tx_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model SendExchangeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 兑换发货
 * Summary: 数字商品服务-兑换服务-兑换发货
 */
async function sendExchange(request: SendExchangeRequest): SendExchangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendExchangeEx(request, headers, runtime);
}

/**
 * Description: 兑换发货
 * Summary: 数字商品服务-兑换服务-兑换发货
 */
async function sendExchangeEx(request: SendExchangeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendExchangeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.exchange.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecExchangeReceivebyuserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 收货时的信息，若敏感信息需加密。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896
  memo: string(name='memo'),
  // 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
  originTxId: string(name='origin_tx_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
  // 用户ID
  userId: string(name='user_id'),
}

model ExecExchangeReceivebyuserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用户身份确认收货
 * Summary: 数字商品服务-兑换服务-用户身份确认收货
 */
async function execExchangeReceivebyuser(request: ExecExchangeReceivebyuserRequest): ExecExchangeReceivebyuserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execExchangeReceivebyuserEx(request, headers, runtime);
}

/**
 * Description: 用户身份确认收货
 * Summary: 数字商品服务-兑换服务-用户身份确认收货
 */
async function execExchangeReceivebyuserEx(request: ExecExchangeReceivebyuserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecExchangeReceivebyuserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.exchange.receivebyuser.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecAssetExpireRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数量
  amount: long(name='amount'),
  // 资产ID
  assetId: string(name='asset_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 资产过期信息
  info?: string(name='info'),
  // 过期的交易ID
  originalTxId: string(name='original_tx_id'),
  // 外部交易ID，每个租户保证唯一
  outTxId: string(name='out_tx_id'),
  // 用户ID
  userId: string(name='user_id'),
}

model ExecAssetExpireResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 资产过期
 * Summary: 数字商品服务-资产服务-资产过期
 */
async function execAssetExpire(request: ExecAssetExpireRequest): ExecAssetExpireResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execAssetExpireEx(request, headers, runtime);
}

/**
 * Description: 资产过期
 * Summary: 数字商品服务-资产服务-资产过期
 */
async function execAssetExpireEx(request: ExecAssetExpireRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecAssetExpireResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.asset.expire.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAssetInstructionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 资产流水ID
  originTxId: string(name='origin_tx_id'),
}

model QueryAssetInstructionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 资产流水完整信息的json字符串。
  // direction 交易方向:：0正向交易，1反向交易。
  // type 交易类型：0 资产发行；1资产赎回；2资产发放；3资产发放回退；4资产风控调整；5资产过期；6资产支付；7资产支付退款。
  // status流水状态(Complete)；0完成
  instruction?: string(name='instruction'),
}

/**
 * Description: 检索资产流转流水
 * Summary: 数字商品服务-资产服务-查询资产流转流水
 */
async function queryAssetInstruction(request: QueryAssetInstructionRequest): QueryAssetInstructionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAssetInstructionEx(request, headers, runtime);
}

/**
 * Description: 检索资产流转流水
 * Summary: 数字商品服务-资产服务-查询资产流转流水
 */
async function queryAssetInstructionEx(request: QueryAssetInstructionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAssetInstructionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.asset.instruction.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryExchangeInstructionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 发起操作的租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
  originTxId: string(name='origin_tx_id'),
}

model QueryExchangeInstructionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 权益兑换流水完整信息
  instruction?: EInstruction(name='instruction'),
}

/**
 * Description: 该接口废弃不用！！！
查询商品兑换流水
 * Summary: 数字商品服务-兑换服务-查询商品兑换流水
 */
async function queryExchangeInstruction(request: QueryExchangeInstructionRequest): QueryExchangeInstructionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryExchangeInstructionEx(request, headers, runtime);
}

/**
 * Description: 该接口废弃不用！！！
查询商品兑换流水
 * Summary: 数字商品服务-兑换服务-查询商品兑换流水
 */
async function queryExchangeInstructionEx(request: QueryExchangeInstructionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryExchangeInstructionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.exchange.instruction.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecAssetIssueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 充值数量
  amount: long(name='amount'),
  // 资产ID
  assetId: string(name='asset_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 备注信息
  info: string(name='info'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
  // 充值租户ID
  optTenantId: string(name='opt_tenant_id'),
}

model ExecAssetIssueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 资产初始化发行
 * Summary: 数字商品服务-资产服务-资产初始化发行
 */
async function execAssetIssue(request: ExecAssetIssueRequest): ExecAssetIssueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execAssetIssueEx(request, headers, runtime);
}

/**
 * Description: 资产初始化发行
 * Summary: 数字商品服务-资产服务-资产初始化发行
 */
async function execAssetIssueEx(request: ExecAssetIssueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecAssetIssueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.asset.issue.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecAssetRedeemRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 赎回数量
  amount: long(name='amount'),
  // 资产ID
  assetId: string(name='asset_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 备注信息
  info: string(name='info'),
  // 要赎回的充值交易ID
  originTxId: string(name='origin_tx_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model ExecAssetRedeemResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 赎回资产
 * Summary: 数字商品服务-资产服务-赎回资产
 */
async function execAssetRedeem(request: ExecAssetRedeemRequest): ExecAssetRedeemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execAssetRedeemEx(request, headers, runtime);
}

/**
 * Description: 赎回资产
 * Summary: 数字商品服务-资产服务-赎回资产
 */
async function execAssetRedeemEx(request: ExecAssetRedeemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecAssetRedeemResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.asset.redeem.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecAssetGrantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数量
  amount: string(name='amount'),
  // 资产ID
  assetId: string(name='asset_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 资产发放信息
  info?: string(name='info'),
  // 商户ID
  merchantId: string(name='merchant_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
  // 用户ID
  userId: string(name='user_id'),
  // 有效时间
  validityTime: string(name='validity_time'),
}

model ExecAssetGrantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 发放资产
 * Summary: 数字商品服务-资产服务-发放资产
 */
async function execAssetGrant(request: ExecAssetGrantRequest): ExecAssetGrantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execAssetGrantEx(request, headers, runtime);
}

/**
 * Description: 发放资产
 * Summary: 数字商品服务-资产服务-发放资产
 */
async function execAssetGrantEx(request: ExecAssetGrantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecAssetGrantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.asset.grant.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecAssetGrantrefundRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数量
  amount: long(name='amount'),
  // 资产ID
  assetId: string(name='asset_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 备注信息
  info: string(name='info'),
  // 要回退的交易ID
  originTxId: string(name='origin_tx_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
  // 用户ID
  userId: string(name='user_id'),
}

model ExecAssetGrantrefundResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 发放回退资产
 * Summary: 数字商品服务-资产服务-发放回退资产
 */
async function execAssetGrantrefund(request: ExecAssetGrantrefundRequest): ExecAssetGrantrefundResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execAssetGrantrefundEx(request, headers, runtime);
}

/**
 * Description: 发放回退资产
 * Summary: 数字商品服务-资产服务-发放回退资产
 */
async function execAssetGrantrefundEx(request: ExecAssetGrantrefundRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecAssetGrantrefundResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.asset.grantrefund.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecAssetAdjustRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 风控调整数量
  amount: long(name='amount'),
  // 资产ID
  assetId: string(name='asset_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 风控调整信息
  info?: string(name='info'),
  // 外部交易ID，每个租户保证唯一
  outTxId: string(name='out_tx_id'),
  // 用户ID
  userId: string(name='user_id'),
}

model ExecAssetAdjustResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 风控调整资产
 * Summary: 数字商品服务-资产服务-风控调整资产
 */
async function execAssetAdjust(request: ExecAssetAdjustRequest): ExecAssetAdjustResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execAssetAdjustEx(request, headers, runtime);
}

/**
 * Description: 风控调整资产
 * Summary: 数字商品服务-资产服务-风控调整资产
 */
async function execAssetAdjustEx(request: ExecAssetAdjustRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecAssetAdjustResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.asset.adjust.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAssetRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资产ID
  assetId: string(name='asset_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 资产查询相关的租户ID
  optTenantId?: string(name='opt_tenant_id'),
  // 若要查询用户持有的资产数量，输入用户ID
  userId?: string(name='user_id'),
}

model QueryAssetResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 资产完整信息
  // {
  //             "asset_id": "CT::Asset001",
  //             "asset_name": "CTPoints",
  //             "tenant_id": "OREDKOCN",
  //             "admin_id": "f46857d8796fc2b829862e2752bda38f7eefeec5581ad41398002f50a3ad8ccd",
  //             "currency": "CNY",
  //             "asset_rate": "1000.0000",
  //             "total_issue_balance": "11111111.0000",
  //             "issue_account_balance": "0.0000",
  //             "relay_Account_balance": "0.0000",
  //             "receive_payment_account_balance": "0.0000",
  //             "overdue_recovery_account_balance": "",
  //             "status": 76,
  //             "asset_ext_info": {
  //                 "dispense_tenant_id": "",
  //                 "dispense_balance": "",
  //                 "user_id": "",
  //                 "user_credit_balance": ""
  //             }
  //         }
  asset?: Asset(name='asset'),
}

/**
 * Description: 资产查询
 * Summary: 数字商品服务-资产服务-资产查询
 */
async function queryAsset(request: QueryAssetRequest): QueryAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAssetEx(request, headers, runtime);
}

/**
 * Description: 资产查询
 * Summary: 数字商品服务-资产服务-资产查询
 */
async function queryAssetEx(request: QueryAssetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAssetResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.asset.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecExchangeReceivebymerchantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 收货时的信息，若敏感信息需加密。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896
  memo?: string(name='memo'),
  // 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
  originTxId: string(name='origin_tx_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model ExecExchangeReceivebymerchantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 商户身份确认收货
 * Summary: 数字商品服务-兑换服务-商户身份确认收货
 */
async function execExchangeReceivebymerchant(request: ExecExchangeReceivebymerchantRequest): ExecExchangeReceivebymerchantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execExchangeReceivebymerchantEx(request, headers, runtime);
}

/**
 * Description: 商户身份确认收货
 * Summary: 数字商品服务-兑换服务-商户身份确认收货
 */
async function execExchangeReceivebymerchantEx(request: ExecExchangeReceivebymerchantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecExchangeReceivebymerchantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.exchange.receivebymerchant.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBlockRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链高度
  blockNumber: long(name='block_number'),
  // 链ID
  chainId: string(name='chain_id'),
}

model QueryBlockResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 区块信息
  block?: Block(name='block'),
  // 区块高度
  blockNumber?: long(name='block_number'),
  // 链ID
  chainId?: string(name='chain_id'),
  // 过滤后的交易数量
  filteredTxCount?: long(name='filtered_tx_count'),
  // 区块中交易总数
  totalTxCount?: long(name='total_tx_count'),
}

/**
 * Description: 获取特定高度的区块信息
 * Summary: 数字商品服务-拉块服务-获取区块信息
 */
async function queryBlock(request: QueryBlockRequest): QueryBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBlockEx(request, headers, runtime);
}

/**
 * Description: 获取特定高度的区块信息
 * Summary: 数字商品服务-拉块服务-获取区块信息
 */
async function queryBlockEx(request: QueryBlockRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBlockResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.block.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBlockLastblocknumberRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
}

model QueryBlockLastblocknumberResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 最新区块高度
  lastBlockNumber?: long(name='last_block_number'),
}

/**
 * Description: 获取区块链最新区块高度
 * Summary: 数字商品服务-拉块服务-获取最新区块高度
 */
async function queryBlockLastblocknumber(request: QueryBlockLastblocknumberRequest): QueryBlockLastblocknumberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBlockLastblocknumberEx(request, headers, runtime);
}

/**
 * Description: 获取区块链最新区块高度
 * Summary: 数字商品服务-拉块服务-获取最新区块高度
 */
async function queryBlockLastblocknumberEx(request: QueryBlockLastblocknumberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBlockLastblocknumberResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.block.lastblocknumber.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateEquityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权类型：0 Auto，1 Contract。不可修改，如需修改需重新发布商品
  authType: long(name='auth_type'),
  // 链ID
  chainId: string(name='chain_id'),
  // 货币类型。不可修改，如需修改需重新发布商品。
  currency: string(name='currency'),
  // 默认价格（单位：元）
  defaultPrice: string(name='default_price'),
  // 要代理的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品详细描述信息
  description: string(name='description'),
  // 描述图片信息(;分隔)
  descImages: string(name='desc_images'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 权益商品名称
  equityName: string(name='equity_name'),
  // 权益商品类型：类型为整型（不大于：2147483647），需要进行细分，类型由三部分组成；aabbbbcccc。aa 为大类分类，bbbb 为细项分类（无细项分类时为0000），cccc 为数据格式分类（其中0000表示无格式要求）。请根据实际商品类型填写，具体类型和兑换时数据结构查看文档【https://tech.antfin.com/docs/2/163896】。不可修改，如需修改需重新发布商品
  equityType: long(name='equity_type'),
  // 权益商品是否公开。不可修改，如需修改需重新发布商品
  ifPublic: boolean(name='if_public'),
  // 主图片信息(;分隔)
  images: string(name='images'),
  // 商户每日兑换上限
  limitPerMerchantAndDay: long(name='limit_per_merchant_and_day'),
  // 商户每月兑换上限
  limitPerMerchantAndMonth: long(name='limit_per_merchant_and_month'),
  // 用户每日兑换上限
  limitPerUserAndDay: long(name='limit_per_user_and_day'),
  // 用户每月兑换上限
  limitPerUserAndMonth: long(name='limit_per_user_and_month'),
  // 附言
  memo?: string(name='memo'),
  // 交易ID
  outTxId: string(name='out_tx_id'),
  // 库存
  totalCount: string(name='total_count'),
  // 权益商品使用有效期结束时间（毫秒）
  useValidNotAfter: long(name='use_valid_not_after'),
  // 权益商品使用有效期开始时间（毫秒）
  useValidNotBefore: long(name='use_valid_not_before'),
  // 权益商品兑换有效期结束时间（毫秒）
  validNotAfter: long(name='valid_not_after'),
  // 权益商品兑换有效期开始时间（毫秒）
  validNotBefore: long(name='valid_not_before'),
  // 面值（单位：元）。不可修改，如需修改需重新发布商品
  value: string(name='value'),
}

model UpdateEquityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新商品信息
 * Summary: 数字商品服务-商品服务-更新商品属性信息
 */
async function updateEquity(request: UpdateEquityRequest): UpdateEquityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateEquityEx(request, headers, runtime);
}

/**
 * Description: 更新商品信息
 * Summary: 数字商品服务-商品服务-更新商品属性信息
 */
async function updateEquityEx(request: UpdateEquityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateEquityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEquityCreateresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 创建商品接口返回的createEquityRequestId
  createEquityRequestId: string(name='create_equity_request_id'),
  // 要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
}

model QueryEquityCreateresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 权益商品创建成功，返回权益ID
  equityId?: string(name='equity_id'),
}

/**
 * Description: 配合异步发布权益接口，查询发布权益商品结果。如查询无结果，判断错误类型，用户需要轮询。
 * Summary: 数字商品服务-商品服务-发布商品结果查询
 */
async function queryEquityCreateresult(request: QueryEquityCreateresultRequest): QueryEquityCreateresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEquityCreateresultEx(request, headers, runtime);
}

/**
 * Description: 配合异步发布权益接口，查询发布权益商品结果。如查询无结果，判断错误类型，用户需要轮询。
 * Summary: 数字商品服务-商品服务-发布商品结果查询
 */
async function queryEquityCreateresultEx(request: QueryEquityCreateresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEquityCreateresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.createresult.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEquityInstructionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 代理该租户调用接口，会使用该租户发送交易链上查询信息
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 发起操作的租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 要查询的流水交易号
  originTxId: string(name='origin_tx_id'),
}

model QueryEquityInstructionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商品兑换流水信息
  instruction?: EInstruction(name='instruction'),
}

/**
 * Description: 根据商品兑换流水交易号查询商品兑换流水详情
 * Summary: 数字商品服务-商品服务-查询商品兑换流水
 */
async function queryEquityInstruction(request: QueryEquityInstructionRequest): QueryEquityInstructionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEquityInstructionEx(request, headers, runtime);
}

/**
 * Description: 根据商品兑换流水交易号查询商品兑换流水详情
 * Summary: 数字商品服务-商品服务-查询商品兑换流水
 */
async function queryEquityInstructionEx(request: QueryEquityInstructionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEquityInstructionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.instruction.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryImageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 要查询的图片数组，填入不可访问的url
  urls: [ string ](name='urls'),
}

model QueryImageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 临时可访问的oss图片链接，每张图片会返回四个url，对应原图和不同的比例缩小，每一张图片的四个url用;隔开。
  urls?: [ MultiURL ](name='urls'),
}

/**
 * Description: 传入图片的不可访问URL，获取图片的临时可访问URL（支持批量查询）
 * Summary: 数字商品服务-OSS服务-获取图片URL
 */
async function queryImage(request: QueryImageRequest): QueryImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryImageEx(request, headers, runtime);
}

/**
 * Description: 传入图片的不可访问URL，获取图片的临时可访问URL（支持批量查询）
 * Summary: 数字商品服务-OSS服务-获取图片URL
 */
async function queryImageEx(request: QueryImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryImageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.image.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateEquityStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
  // 权益状态：0可用，1下线，2冻结
  status: long(name='status'),
}

model UpdateEquityStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新商品状态（可用，冻结，下线）
 * Summary: 数字商品服务-商品服务-更新商品状态
 */
async function updateEquityStatus(request: UpdateEquityStatusRequest): UpdateEquityStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateEquityStatusEx(request, headers, runtime);
}

/**
 * Description: 更新商品状态（可用，冻结，下线）
 * Summary: 数字商品服务-商品服务-更新商品状态
 */
async function updateEquityStatusEx(request: UpdateEquityStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateEquityStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.status.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetMerchantProvisionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 新的授信上限（单位：元）
  creditMaxAmount?: string(name='credit_max_amount'),
  // 新的授信已使用数额（单位：元）
  creditUsedAmount?: string(name='credit_used_amount'),
  // 币种
  currency: string(name='currency'),
  // 新的备付金余额（单位：元）
  debitAmount?: string(name='debit_amount'),
  // 要设置备付金的商户租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 初始的授信上限（单位：元）
  originalCreditMaxAmount?: string(name='original_credit_max_amount'),
  // 初始的授信已使用数额（单位：元）
  originalCreditUsedAmount?: string(name='original_credit_used_amount'),
  // 初始的备付金余额（单位：元）
  originalDebitAmount?: string(name='original_debit_amount'),
  // 外部交易ID（确保幂等）
  outTxId: string(name='out_tx_id'),
}

model SetMerchantProvisionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设置备付金金额（CAS接口）
 * Summary: 数字商品服务-商户管理-设置备付金金额
 */
async function setMerchantProvision(request: SetMerchantProvisionRequest): SetMerchantProvisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setMerchantProvisionEx(request, headers, runtime);
}

/**
 * Description: 设置备付金金额（CAS接口）
 * Summary: 数字商品服务-商户管理-设置备付金金额
 */
async function setMerchantProvisionEx(request: SetMerchantProvisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetMerchantProvisionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.merchant.provision.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMerchantProvisionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 更新授信上限
  creditMaxAmount?: string(name='credit_max_amount'),
  // 更新授信已使用数额
  creditUsedAmount?: string(name='credit_used_amount'),
  // 币种
  currency: string(name='currency'),
  // 更新余额
  debitAmount?: string(name='debit_amount'),
  // 要设置备付金的商户租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 操作类型，ADD表示增加，SUB表示减少
  optType: string(name='opt_type'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model UpdateMerchantProvisionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新商户的备付金金额，由资金管理员操作
 * Summary: 数字商品服务-商户管理-更新备付金金额
 */
async function updateMerchantProvision(request: UpdateMerchantProvisionRequest): UpdateMerchantProvisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMerchantProvisionEx(request, headers, runtime);
}

/**
 * Description: 更新商户的备付金金额，由资金管理员操作
 * Summary: 数字商品服务-商户管理-更新备付金金额
 */
async function updateMerchantProvisionEx(request: UpdateMerchantProvisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMerchantProvisionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.merchant.provision.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecEquityInstructionwriteoffRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 权益商品ID
  equityId: string(name='equity_id'),
  // 附言
  memo?: string(name='memo'),
  // 兑换交易ID
  originTxId: string(name='origin_tx_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model ExecEquityInstructionwriteoffResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 核销商品兑换交易，由资金管理员操作
 * Summary: 数字商品服务-商品服务-核销商品兑换交易
 */
async function execEquityInstructionwriteoff(request: ExecEquityInstructionwriteoffRequest): ExecEquityInstructionwriteoffResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execEquityInstructionwriteoffEx(request, headers, runtime);
}

/**
 * Description: 核销商品兑换交易，由资金管理员操作
 * Summary: 数字商品服务-商品服务-核销商品兑换交易
 */
async function execEquityInstructionwriteoffEx(request: ExecEquityInstructionwriteoffRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecEquityInstructionwriteoffResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.equity.instructionwriteoff.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMerchantProvisionsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 行为
  businessAction: string(name='business_action'),
  // 要查询的租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 产品编码
  productCode: string(name='product_code'),
}

model QueryMerchantProvisionsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 租户的备付金列表信息
  discreteValues?: [ DiscreteValue ](name='discrete_values'),
}

/**
 * Description: 查询租户的备付金列表
 * Summary: 数字商品服务-商户管理-查租户备付金列表
 */
async function queryMerchantProvisions(request: QueryMerchantProvisionsRequest): QueryMerchantProvisionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMerchantProvisionsEx(request, headers, runtime);
}

/**
 * Description: 查询租户的备付金列表
 * Summary: 数字商品服务-商户管理-查租户备付金列表
 */
async function queryMerchantProvisionsEx(request: QueryMerchantProvisionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMerchantProvisionsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.merchant.provisions.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMerchantExchangeableequitylistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 页码
  pageNumber: string(name='page_number'),
  // 每页数量（不填默认返回50条数据）
  pageSize?: string(name='page_size'),
}

model QueryMerchantExchangeableequitylistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可兑换商品信息列表
  object?: ExchangeableEquityList(name='object'),
}

/**
 * Description: 只有特定的商户才能调用，代理到数字商品管理自营后台的商户才能查询到信息。查询商户可兑换商品列表
 * Summary: 数字商品服务-商户管理-查询可兑换商品
 */
async function queryMerchantExchangeableequitylist(request: QueryMerchantExchangeableequitylistRequest): QueryMerchantExchangeableequitylistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMerchantExchangeableequitylistEx(request, headers, runtime);
}

/**
 * Description: 只有特定的商户才能调用，代理到数字商品管理自营后台的商户才能查询到信息。查询商户可兑换商品列表
 * Summary: 数字商品服务-商户管理-查询可兑换商品
 */
async function queryMerchantExchangeableequitylistEx(request: QueryMerchantExchangeableequitylistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMerchantExchangeableequitylistResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.merchant.exchangeableequitylist.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMerchantExchangeableequitydetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 商品SKUID
  skuId: string(name='sku_id'),
}

model QueryMerchantExchangeableequitydetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可兑换的商品详情信息
  equity?: EquityDetail(name='equity'),
}

/**
 * Description: 只有特定的商户才能调用，代理到数字商品管理自营后台的商户才能查询到信息。查询商户可兑换的商品明细信息
 * Summary: 数字商品服务-商户管理-查询可兑商品明细
 */
async function queryMerchantExchangeableequitydetail(request: QueryMerchantExchangeableequitydetailRequest): QueryMerchantExchangeableequitydetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMerchantExchangeableequitydetailEx(request, headers, runtime);
}

/**
 * Description: 只有特定的商户才能调用，代理到数字商品管理自营后台的商户才能查询到信息。查询商户可兑换的商品明细信息
 * Summary: 数字商品服务-商户管理-查询可兑商品明细
 */
async function queryMerchantExchangeableequitydetailEx(request: QueryMerchantExchangeableequitydetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMerchantExchangeableequitydetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.merchant.exchangeableequitydetail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecAssetCreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资产ID
  assetId: string(name='asset_id'),
  // 资产名称
  assetName: string(name='asset_name'),
  // 链ID
  chainId: string(name='chain_id'),
  // 资产绑定币种
  currency: string(name='currency'),
  // 为该租户创建新资产
  optTenantId: string(name='opt_tenant_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
  // 资产汇率(等值一元钱的数量)
  rate: string(name='rate'),
}

model ExecAssetCreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建新资产
 * Summary: 数字商品服务-资产服务-创建资产
 */
async function execAssetCreate(request: ExecAssetCreateRequest): ExecAssetCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execAssetCreateEx(request, headers, runtime);
}

/**
 * Description: 创建新资产
 * Summary: 数字商品服务-资产服务-创建资产
 */
async function execAssetCreateEx(request: ExecAssetCreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecAssetCreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.asset.create.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecAssetGenerateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 铸币数量
  amount: string(name='amount'),
  // 资产ID
  assetId: string(name='asset_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model ExecAssetGenerateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 资产铸币(不扣减备付金)，合约管理员操作
 * Summary: 数字商品服务-资产服务-资产铸币
 */
async function execAssetGenerate(request: ExecAssetGenerateRequest): ExecAssetGenerateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execAssetGenerateEx(request, headers, runtime);
}

/**
 * Description: 资产铸币(不扣减备付金)，合约管理员操作
 * Summary: 数字商品服务-资产服务-资产铸币
 */
async function execAssetGenerateEx(request: ExecAssetGenerateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecAssetGenerateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.asset.generate.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateMerchantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 商户描述，不超过2048
  description?: string(name='description'),
  // 商户的资金管理员 归属的租户ID
  fundManagerTenantId: string(name='fund_manager_tenant_id'),
  // 商户角色，是否是资产发行商
  ifAssetIssuer: boolean(name='if_asset_issuer'),
  // 商户角色，是否是采购商
  ifEquityConsumer: boolean(name='if_equity_consumer'),
  // 商户角色，是否是供应商
  ifEquityProvider: boolean(name='if_equity_provider'),
  // 商户归属的租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 外部交易ID（确保幂等）
  outTxId: string(name='out_tx_id'),
}

model CreateMerchantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建商户（合约管理员权限）
 * Summary: 数字商品服务-商户管理-创建商户
 */
async function createMerchant(request: CreateMerchantRequest): CreateMerchantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createMerchantEx(request, headers, runtime);
}

/**
 * Description: 创建商户（合约管理员权限）
 * Summary: 数字商品服务-商户管理-创建商户
 */
async function createMerchantEx(request: CreateMerchantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMerchantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.merchant.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetMerchantFundmanagerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 要进行资金管理员设置的租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 资金管理员所属的租户ID
  fundManagerTenantId: string(name='fund_manager_tenant_id'),
}

model SetMerchantFundmanagerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设置商户的资金管理员，重要权限，谨慎操作！
 * Summary: 数字商品服务-商户管理-设置资金管理员
 */
async function setMerchantFundmanager(request: SetMerchantFundmanagerRequest): SetMerchantFundmanagerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setMerchantFundmanagerEx(request, headers, runtime);
}

/**
 * Description: 设置商户的资金管理员，重要权限，谨慎操作！
 * Summary: 数字商品服务-商户管理-设置资金管理员
 */
async function setMerchantFundmanagerEx(request: SetMerchantFundmanagerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetMerchantFundmanagerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.merchant.fundmanager.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateMerchantProvisionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部交易ID，确保幂等
  outTxId: string(name='out_tx_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 要创建备付金账户的租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 备付金账户币种
  currency: string(name='currency'),
}

model CreateMerchantProvisionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建备付金账户，合约管理员权限
 * Summary: 数字商品服务-商户管理-创建备付金账户
 */
async function createMerchantProvision(request: CreateMerchantProvisionRequest): CreateMerchantProvisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createMerchantProvisionEx(request, headers, runtime);
}

/**
 * Description: 创建备付金账户，合约管理员权限
 * Summary: 数字商品服务-商户管理-创建备付金账户
 */
async function createMerchantProvisionEx(request: CreateMerchantProvisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMerchantProvisionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.merchant.provision.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConfigDelegaterelationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被代理的租户ID
  delegatedTenantId: string(name='delegated_tenant_id'),
}

model QueryConfigDelegaterelationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 代理授权关系信息
  delegateRelationInfos?: [ DelegateRelationInfo ](name='delegate_relation_infos'),
}

/**
 * Description: 查询租户的授权代理权限
 * Summary: 数字商品服务-管理服务-代理权限查询
 */
async function queryConfigDelegaterelation(request: QueryConfigDelegaterelationRequest): QueryConfigDelegaterelationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConfigDelegaterelationEx(request, headers, runtime);
}

/**
 * Description: 查询租户的授权代理权限
 * Summary: 数字商品服务-管理服务-代理权限查询
 */
async function queryConfigDelegaterelationEx(request: QueryConfigDelegaterelationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConfigDelegaterelationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.config.delegaterelation.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateConfigDelegaterelationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被代理的租户ID
  delegatedTenantId: string(name='delegated_tenant_id'),
  // 代理租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 操作类型，ADD表示添加，SUB表示撤销
  optType: string(name='opt_type'),
}

model UpdateConfigDelegaterelationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设置租户的授权代理权限。赋予 opt_tenant_id 代理 delegated_tenant_id 调用接口的权限，见可代理的接口详情单。
 * Summary: 数字商品服务-管理服务-设置代理权限
 */
async function updateConfigDelegaterelation(request: UpdateConfigDelegaterelationRequest): UpdateConfigDelegaterelationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateConfigDelegaterelationEx(request, headers, runtime);
}

/**
 * Description: 设置租户的授权代理权限。赋予 opt_tenant_id 代理 delegated_tenant_id 调用接口的权限，见可代理的接口详情单。
 * Summary: 数字商品服务-管理服务-设置代理权限
 */
async function updateConfigDelegaterelationEx(request: UpdateConfigDelegaterelationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateConfigDelegaterelationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.config.delegaterelation.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConfigWhitelistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询链的白名单信息
  chainId?: string(name='chain_id'),
  // 查询该租户的白名单信息
  tenantId?: string(name='tenant_id'),
}

model QueryConfigWhitelistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 接口白名单信息
  whiteList?: [ APIWhiteListInfo ](name='white_list'),
}

/**
 * Description: 查询接口访问白名单信息
 * Summary: 数字商品服务-拉块服务-查询接口白名单
 */
async function queryConfigWhitelist(request: QueryConfigWhitelistRequest): QueryConfigWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConfigWhitelistEx(request, headers, runtime);
}

/**
 * Description: 查询接口访问白名单信息
 * Summary: 数字商品服务-拉块服务-查询接口白名单
 */
async function queryConfigWhitelistEx(request: QueryConfigWhitelistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConfigWhitelistResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.config.whitelist.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateConfigWhitelistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 操作类型
  optType: string(name='opt_type'),
}

model UpdateConfigWhitelistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设置接口访问白名单
 * Summary: 数字商品服务-管理服务-设置访问白名单
 */
async function updateConfigWhitelist(request: UpdateConfigWhitelistRequest): UpdateConfigWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateConfigWhitelistEx(request, headers, runtime);
}

/**
 * Description: 设置接口访问白名单
 * Summary: 数字商品服务-管理服务-设置访问白名单
 */
async function updateConfigWhitelistEx(request: UpdateConfigWhitelistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateConfigWhitelistResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.config.whitelist.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyExchangeAftersaleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  chainId: string(name='chain_id'),
  // 权益商品id
  equityId: string(name='equity_id'),
  // 额外信息 可选
  memo?: string(name='memo'),
  // 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
  originTxId: string(name='origin_tx_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model ApplyExchangeAftersaleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 兑换单申请售后（采购商）
 * Summary: 数字商品服务-兑换服务-申请售后(商家)
 */
async function applyExchangeAftersale(request: ApplyExchangeAftersaleRequest): ApplyExchangeAftersaleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyExchangeAftersaleEx(request, headers, runtime);
}

/**
 * Description: 兑换单申请售后（采购商）
 * Summary: 数字商品服务-兑换服务-申请售后(商家)
 */
async function applyExchangeAftersaleEx(request: ApplyExchangeAftersaleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyExchangeAftersaleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.exchange.aftersale.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecExchangeAgreeaftersaleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  chainId: string(name='chain_id'),
  // 要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 权益id
  equityId: string(name='equity_id'),
  // 额外信息
  memo?: string(name='memo'),
  // 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
  originTxId: string(name='origin_tx_id'),
  // 外部交易ID
  outTxId: string(name='out_tx_id'),
}

model ExecExchangeAgreeaftersaleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 同意售后（供应商）
 * Summary: 数字商品服务-兑换服务-同意售后
 */
async function execExchangeAgreeaftersale(request: ExecExchangeAgreeaftersaleRequest): ExecExchangeAgreeaftersaleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execExchangeAgreeaftersaleEx(request, headers, runtime);
}

/**
 * Description: 同意售后（供应商）
 * Summary: 数字商品服务-兑换服务-同意售后
 */
async function execExchangeAgreeaftersaleEx(request: ExecExchangeAgreeaftersaleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecExchangeAgreeaftersaleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.exchange.agreeaftersale.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RefuseExchangeAftersaleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // l链id
  chainId: string(name='chain_id'),
  // 要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 商品id
  equityId: string(name='equity_id'),
  // 额外信息
  memo?: string(name='memo'),
  // 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
  originTxId: string(name='origin_tx_id'),
  // 外部交易id
  outTxId: string(name='out_tx_id'),
}

model RefuseExchangeAftersaleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 拒绝售后（供应商）
 * Summary: 数字商品服务-兑换服务-拒绝售后
 */
async function refuseExchangeAftersale(request: RefuseExchangeAftersaleRequest): RefuseExchangeAftersaleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return refuseExchangeAftersaleEx(request, headers, runtime);
}

/**
 * Description: 拒绝售后（供应商）
 * Summary: 数字商品服务-兑换服务-拒绝售后
 */
async function refuseExchangeAftersaleEx(request: RefuseExchangeAftersaleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RefuseExchangeAftersaleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.exchange.aftersale.refuse', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendExchangeAftersaleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  chainId: string(name='chain_id'),
  // 要代理操作的租户ID
  delegatedTenantId?: string(name='delegated_tenant_id'),
  // 商品id
  equityId: string(name='equity_id'),
  // 发货商品的信息，敏感信息需加密，使用收货方公钥加密的权益信息。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896。比如在手机直充时可以返回 {  "voucher": "充值凭证，如有",  "memo": ""}信息。
  memo?: string(name='memo'),
  // 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
  originTxId: string(name='origin_tx_id'),
  // 外部交易id
  outTxId: string(name='out_tx_id'),
}

model SendExchangeAftersaleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 重新发货（供应商）
 * Summary: 数字商品服务-兑换服务-重新发货
 */
async function sendExchangeAftersale(request: SendExchangeAftersaleRequest): SendExchangeAftersaleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendExchangeAftersaleEx(request, headers, runtime);
}

/**
 * Description: 重新发货（供应商）
 * Summary: 数字商品服务-兑换服务-重新发货
 */
async function sendExchangeAftersaleEx(request: SendExchangeAftersaleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendExchangeAftersaleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.exchange.aftersale.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmExchangeAftersaleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  chainId: string(name='chain_id'),
  // 商品id
  equityId: string(name='equity_id'),
  // 收货时的信息，若敏感信息需加密。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896
  memo?: string(name='memo'),
  // 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
  originTxId: string(name='origin_tx_id'),
  // 外部交易id
  outTxId: string(name='out_tx_id'),
}

model ConfirmExchangeAftersaleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 商户确认售后（供应商）comfirmaftersale
 * Summary:  数字商品服务-兑换服务-商户确认售后
 */
async function confirmExchangeAftersale(request: ConfirmExchangeAftersaleRequest): ConfirmExchangeAftersaleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmExchangeAftersaleEx(request, headers, runtime);
}

/**
 * Description: 商户确认售后（供应商）comfirmaftersale
 * Summary:  数字商品服务-兑换服务-商户确认售后
 */
async function confirmExchangeAftersaleEx(request: ConfirmExchangeAftersaleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmExchangeAftersaleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.exchange.aftersale.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecDataDepositRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 交易信息
  tx: Transaction(name='tx'),
}

model ExecDataDepositResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证交易哈希
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 数字消费卡链上发布
 * Summary: 数字商品服务-存证服务-消费卡链上发布
 */
async function execDataDeposit(request: ExecDataDepositRequest): ExecDataDepositResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execDataDepositEx(request, headers, runtime);
}

/**
 * Description: 数字消费卡链上发布
 * Summary: 数字商品服务-存证服务-消费卡链上发布
 */
async function execDataDepositEx(request: ExecDataDepositRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecDataDepositResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.data.deposit.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetCommissionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 手续费列表，可传入多个
  commissions: [ Commission ](name='commissions'),
  // 商品类型。可按照如下文档查询商品对应的类型，及数据格式 https://tech.antfin.com/docs/2/163896
  equityType: long(name='equity_type'),
  // 是否设置全局手续费。若是false，需传入optTenantId
  ifGlobal?: boolean(name='if_global'),
  // 要设置手续费的租户对象，如果为空表示设置全局手续费（IfGlobal需设置为true）
  optTenantId?: string(name='opt_tenant_id'),
  // 交易幂等ID
  outTxId: string(name='out_tx_id'),
}

model SetCommissionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 手续费ID
  commissionId?: string(name='commission_id'),
}

/**
 * Description: 设置商品兑换手续费
 * Summary: 数字商品服务-商品服务-设置商品手续费
 */
async function setCommission(request: SetCommissionRequest): SetCommissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setCommissionEx(request, headers, runtime);
}

/**
 * Description: 设置商品兑换手续费
 * Summary: 数字商品服务-商品服务-设置商品手续费
 */
async function setCommissionEx(request: SetCommissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetCommissionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.commission.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCommissionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 商品类型。可按照如下文档查询商品对应的类型，及数据格式https://tech.antfin.com/docs/2/163896
  equityType: long(name='equity_type'),
  // 是否查询当前生效的手续费信息。如为false，则查询该商品的全部手续费信息
  ifCurrent: boolean(name='if_current'),
  // 是否查询全局的手续费信息
  ifGlobal: boolean(name='if_global'),
  // 查询该租户的手续费信息
  delegatedTenantId: string(name='delegated_tenant_id'),
}

model QueryCommissionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 手续费信息列表
  commissions?: [ CommissionResult ](name='commissions'),
}

/**
 * Description: 查询商品手续费（可查询 当前生效 和 全部 的手续费信息）
 * Summary: 数字商品服务-商品服务-查询商品手续费
 */
async function queryCommission(request: QueryCommissionRequest): QueryCommissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCommissionEx(request, headers, runtime);
}

/**
 * Description: 查询商品手续费（可查询 当前生效 和 全部 的手续费信息）
 * Summary: 数字商品服务-商品服务-查询商品手续费
 */
async function queryCommissionEx(request: QueryCommissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCommissionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.commission.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetCommissionMerchantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 收取手续费的商户对应的租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 交易幂等ID
  outTxId: string(name='out_tx_id'),
  // 链ID
  chainId: string(name='chain_id'),
}

model SetCommissionMerchantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设置收取手续费的商户信息（合约管理员权限）
 * Summary: 数字商品服务-商品服务-设置收手续费商户
 */
async function setCommissionMerchant(request: SetCommissionMerchantRequest): SetCommissionMerchantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setCommissionMerchantEx(request, headers, runtime);
}

/**
 * Description: 设置收取手续费的商户信息（合约管理员权限）
 * Summary: 数字商品服务-商品服务-设置收手续费商户
 */
async function setCommissionMerchantEx(request: SetCommissionMerchantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetCommissionMerchantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.commission.merchant.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCommissionMerchantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
}

model QueryCommissionMerchantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 收取手续费的商户 租户ID
  tenantId?: string(name='tenant_id'),
}

/**
 * Description: 查询收取手续费的商户信息
 * Summary: 数字商品服务-商品服务-查询收手续费商户
 */
async function queryCommissionMerchant(request: QueryCommissionMerchantRequest): QueryCommissionMerchantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCommissionMerchantEx(request, headers, runtime);
}

/**
 * Description: 查询收取手续费的商户信息
 * Summary: 数字商品服务-商品服务-查询收手续费商户
 */
async function queryCommissionMerchantEx(request: QueryCommissionMerchantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCommissionMerchantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.commission.merchant.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateConfigChainaccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 要创建的链上ID对应的租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 创建的角色，admin是商户管理员链上ID，fundmanager是资金管理员链上ID
  member: string(name='member'),
}

model CreateConfigChainaccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 租户ID
  tenantId?: string(name='tenant_id'),
  // 链上ID
  accountId?: string(name='account_id'),
  // 链上账户对应的账户公钥
  publicKey?: string(name='public_key'),
  // 分布式身份ID
  did?: string(name='did'),
}

/**
 * Description: 单独创建对应的链ID的链上账户
 * Summary: 数字商品服务-管理服务-创建链上账户
 */
async function createConfigChainaccount(request: CreateConfigChainaccountRequest): CreateConfigChainaccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createConfigChainaccountEx(request, headers, runtime);
}

/**
 * Description: 单独创建对应的链ID的链上账户
 * Summary: 数字商品服务-管理服务-创建链上账户
 */
async function createConfigChainaccountEx(request: CreateConfigChainaccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConfigChainaccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.config.chainaccount.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartIpPackagetradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 买方的链上账户Id
  accountId: string(name='account_id'),
  // IP授权交易时传入IP ID；增值服务交易时传入服务ID
  ipId: string(name='ip_id'),
  // true 只上链不走真实支付，false 上链并链下真实支付账单
  onlyCallBlockchain: boolean(name='only_call_blockchain'),
  // 终端商品价格区间
  priceRange: string(name='price_range'),
  // 套餐中包含终端商品数量
  amount: long(name='amount'),
  // 套餐交易应付金额，单位元，保留两位小数
  expectedTotalPrice: string(name='expected_total_price'),
  // 授权合作开始期限（毫秒时间戳）
  authBeginTime: long(name='auth_begin_time'),
  // 授权合作结束期限（毫秒时间戳）
  authEndTime: long(name='auth_end_time'),
  // 备注信息
  memo: string(name='memo'),
  // 附加条款
  additionalClause?: string(name='additional_clause'),
  // 授权产品范围
  authProductScope?: string(name='auth_product_scope'),
  // 授权地域范围
  authAreaScope?: string(name='auth_area_scope'),
  // 商品销售渠道
  salesChannel?: string(name='sales_channel'),
  // 0 IP交易，1 增值服务交易
  goodsType?: long(name='goods_type'),
  // 增值服务交易绑定的ip授权交易订单，增值服务交易必填
  relatedOrderId?: string(name='related_order_id'),
  // 支付完成后的回调地址。如果为空，默认跳转到https://ipforce.cloud.alipay.com/
  payReturnUrl?: string(name='pay_return_url'),
  // 授权类型
  authType?: string(name='auth_type'),
  // 授权模式，0普通授权，1独家授权
  authorizationModel?: [ long ](name='authorization_model'),
  // 订单功能选择，0 基础功能，1 领用收藏等
  features?: [ long ](name='features'),
}

model StartIpPackagetradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单ID
  ipOrderId?: string(name='ip_order_id'),
  // 支付信息
  payUrl?: string(name='pay_url'),
  // 账单ID
  ipBillId?: string(name='ip_bill_id'),
}

/**
 * Description: 买家发起套餐交易
 * Summary: 数字商品服务-IP授权服务-发起套餐交易
 */
async function startIpPackagetrade(request: StartIpPackagetradeRequest): StartIpPackagetradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startIpPackagetradeEx(request, headers, runtime);
}

/**
 * Description: 买家发起套餐交易
 * Summary: 数字商品服务-IP授权服务-发起套餐交易
 */
async function startIpPackagetradeEx(request: StartIpPackagetradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartIpPackagetradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.packagetrade.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelIpPackagetradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 订单ID
  ipOrderId: string(name='ip_order_id'),
  // IP交易发起方的链上账户ID
  accountId: string(name='account_id'),
  // 备注信息
  memo?: string(name='memo'),
}

model CancelIpPackagetradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 交易发起方取消交易，包括套餐交易和定向授权
 * Summary: 数字商品服务-IP授权服务-取消交易
 */
async function cancelIpPackagetrade(request: CancelIpPackagetradeRequest): CancelIpPackagetradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelIpPackagetradeEx(request, headers, runtime);
}

/**
 * Description: 交易发起方取消交易，包括套餐交易和定向授权
 * Summary: 数字商品服务-IP授权服务-取消交易
 */
async function cancelIpPackagetradeEx(request: CancelIpPackagetradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelIpPackagetradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.packagetrade.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadIpPackagetradesalesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 买方的链上账户Id
  accountId: string(name='account_id'),
  // 关联订单ID
  ipOrderId: string(name='ip_order_id'),
  // 销售数据列表
  ipSalesInfoList: [ IPSalesInfo ](name='ip_sales_info_list'),
}

model UploadIpPackagetradesalesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 上传套餐交易销售数据
 * Summary: 数字商品服务-IP授权服务-上传套餐数据
 */
async function uploadIpPackagetradesales(request: UploadIpPackagetradesalesRequest): UploadIpPackagetradesalesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadIpPackagetradesalesEx(request, headers, runtime);
}

/**
 * Description: 上传套餐交易销售数据
 * Summary: 数字商品服务-IP授权服务-上传套餐数据
 */
async function uploadIpPackagetradesalesEx(request: UploadIpPackagetradesalesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadIpPackagetradesalesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.packagetradesales.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartIpAuthtradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 采购者的链上账户Id
  accountId: string(name='account_id'),
  // IP授权交易时传入IP ID；增值服务交易时传入服务ID
  ipId: string(name='ip_id'),
  // 收费模式：0 销售抽佣, 1 按量付费
  chargeType?: long(name='charge_type'),
  // 授权计费比例
  authRate?: string(name='auth_rate'),
  // 按量付费的收费单价（按量付费模式必填）
  authPrice?: string(name='auth_price'),
  // 授权合作开始期限（毫秒时间戳）
  authBeginTime: long(name='auth_begin_time'),
  // 授权合作结束期限（毫秒时间戳）
  authEndTime: long(name='auth_end_time'),
  // 合同（文件URL）
  contract?: string(name='contract'),
  // 设计稿（文件URL）
  designDraft?: string(name='design_draft'),
  // 授权产品范围
  authProductScope?: string(name='auth_product_scope'),
  // 授权地域范围
  authAreaScope?: string(name='auth_area_scope'),
  // 商品销售渠道
  salesChannel?: string(name='sales_channel'),
  // 备注消息(不超过256个字符)
  memo: string(name='memo'),
  // 附加条款
  additionalClause?: string(name='additional_clause'),
  // 是否有保底金
  guaranteed: boolean(name='guaranteed'),
  // 支付的保底金金额
  guaranteedFund?: string(name='guaranteed_fund'),
  // 保底商品个数（按量付费），订单销售数量超过保底部分需按量付费
  guaranteedGoodsAmount?: long(name='guaranteed_goods_amount'),
  // 保底商品销售金额（销售抽佣），订单销售额超过保底部分需按比例抽拥
  guaranteedSales?: string(name='guaranteed_sales'),
  // 0 IP交易，1 增值服务交易
  goodsType?: long(name='goods_type'),
  // 增值服务交易绑定的ip授权交易订单，增值服务交易必填
  relatedOrderId?: string(name='related_order_id'),
  // 支付完成后的回调地址。如果为空，默认跳转到https://ipforce.cloud.alipay.com/
  payReturnUrl?: string(name='pay_return_url'),
  // 授权类型
  authType?: string(name='auth_type'),
  // 授权模式，0普通授权，1独家授权
  authorizationModel?: [ long ](name='authorization_model'),
  // 订单功能选择，0 基础功能，1 领用收藏等
  features?: [ long ](name='features'),
  // 合作申请时的订单ID，如没有前置的申请环节，则不填
  ipOrderId?: string(name='ip_order_id'),
}

model StartIpAuthtradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单ID
  ipOrderId?: string(name='ip_order_id'),
  // 保底金支付链接
  payUrl?: string(name='pay_url'),
  // 保底金账单ID
  ipBillId?: string(name='ip_bill_id'),
}

/**
 * Description: 发起授权交易
 * Summary: 数字商品服务-IP授权服务-发起授权交易
 */
async function startIpAuthtrade(request: StartIpAuthtradeRequest): StartIpAuthtradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startIpAuthtradeEx(request, headers, runtime);
}

/**
 * Description: 发起授权交易
 * Summary: 数字商品服务-IP授权服务-发起授权交易
 */
async function startIpAuthtradeEx(request: StartIpAuthtradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartIpAuthtradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.authtrade.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadIpAuthtradesalesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 上传记录的用户的链上账户Id
  accountId: string(name='account_id'),
  // 订单ID
  ipOrderId: string(name='ip_order_id'),
  // true 只上链不走真实支付，false 上链并链下真实支付账单
  onlyCallBlockchain: boolean(name='only_call_blockchain'),
  // 支付完成后的回调地址。如果为空，默认跳转到https://ipforce.cloud.alipay.com/
  payReturnUrl?: string(name='pay_return_url'),
  // 授权佣金比例
  authRate?: string(name='auth_rate'),
  // 定向授权按量付费单价
  authPrice?: string(name='auth_price'),
  // 本次结算周期开始时间
  settlementBeginTime: long(name='settlement_begin_time'),
  // 本次结算周期结束时间
  settlementEndTime: long(name='settlement_end_time'),
  // 零售价
  price?: string(name='price'),
  // 终端商品销售数量
  amount: long(name='amount'),
  // 销售金额
  sales: string(name='sales'),
  // 实付金额
  payment?: string(name='payment'),
  // 终端商品名称
  goodsName: string(name='goods_name'),
  // 终端商品图片
  goodsImage?: string(name='goods_image'),
  // 终端销售渠道
  salesChannel?: string(name='sales_channel'),
  // 终端商品链接
  goodsUrl?: string(name='goods_url'),
  // 商品信息
  goodsInfo: string(name='goods_info'),
  // 数据上传操作者
  operator: string(name='operator'),
  // 备注信息
  memo?: string(name='memo'),
  // 账单结算类型：即时计费0、按周计费1、按月计费2、按季度计费3。默认0
  billingType?: long(name='billing_type'),
  // 商品ID
  goodsId?: string(name='goods_id'),
  // 退款的销售金额，有退款时填写，默认0
  refundSales?: string(name='refund_sales'),
  // 订单信息json string: 用户ID/订单状态/订单创建时间戳ms/订单支付时间戳ms等
  salesExtInfo?: string(name='sales_ext_info'),
  // 用户信息json string: 姓名/手机号/地址等结构化数据
  salesUserInfo?: string(name='sales_user_info'),
}

model UploadIpAuthtradesalesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 支付信息
  payUrl?: string(name='pay_url'),
  // 账单ID
  ipBillId?: string(name='ip_bill_id'),
}

/**
 * Description: 上传授权模式交易的销售数据
 * Summary: 数字商品服务-IP授权服务-上传销售数据
 */
async function uploadIpAuthtradesales(request: UploadIpAuthtradesalesRequest): UploadIpAuthtradesalesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadIpAuthtradesalesEx(request, headers, runtime);
}

/**
 * Description: 上传授权模式交易的销售数据
 * Summary: 数字商品服务-IP授权服务-上传销售数据
 */
async function uploadIpAuthtradesalesEx(request: UploadIpAuthtradesalesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadIpAuthtradesalesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.authtradesales.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelIpAuthtradebillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 授权模式销售数据的账单ID
  ipBillId: string(name='ip_bill_id'),
  // 买家的链上账户Id
  accountId: string(name='account_id'),
  // 备注信息
  memo?: string(name='memo'),
}

model CancelIpAuthtradebillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 取消授权模式下销售数据账单
 * Summary: 数字商品服务-IP授权服务-取消授权账单
 */
async function cancelIpAuthtradebill(request: CancelIpAuthtradebillRequest): CancelIpAuthtradebillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelIpAuthtradebillEx(request, headers, runtime);
}

/**
 * Description: 取消授权模式下销售数据账单
 * Summary: 数字商品服务-IP授权服务-取消授权账单
 */
async function cancelIpAuthtradebillEx(request: CancelIpAuthtradebillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelIpAuthtradebillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.authtradebill.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpBillstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 账单ID
  ipBillId: string(name='ip_bill_id'),
}

model QueryIpBillstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易状态
  // (1: "交易创建,等待买家付款"),
  // (2: "未付款交易超时关闭,或支付完成后全额退款"),
  // (3: "交易支付成功"),
  status?: long(name='status'),
}

/**
 * Description: 查询账单支付状态
 * Summary: 数字商品服务-IP授权服务-查询账单状态
 */
async function queryIpBillstatus(request: QueryIpBillstatusRequest): QueryIpBillstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpBillstatusEx(request, headers, runtime);
}

/**
 * Description: 查询账单支付状态
 * Summary: 数字商品服务-IP授权服务-查询账单状态
 */
async function queryIpBillstatusEx(request: QueryIpBillstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpBillstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.billstatus.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpOrderlistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 买方ID
  buyerId?: string(name='buyer_id'),
  // 卖方ID
  sellerId?: string(name='seller_id'),
  // IP id
  ipId?: string(name='ip_id'),
  // 订单ID
  ipOrderId?: string(name='ip_order_id'),
  // 订单状态
  orderStatus?: long(name='order_status'),
  // 根据IP名称模糊查询
  ipName?: string(name='ip_name'),
  // 卖方名称，根据卖方名称模糊查询
  sellerName?: string(name='seller_name'),
  // 买方名称，根据卖方名称模糊查询
  buyerName?: string(name='buyer_name'),
  // 交易类型：1 套餐交易， 2 定向授权
  tradeType?: long(name='trade_type'),
  // 0 IP交易，1 增值服务交易
  goodsType?: long(name='goods_type'),
  // 收费模式：0 销售抽拥，1 按量计费
  chargeType?: long(name='charge_type'),
  // 查询订单授权开始时间
  authStartTime?: long(name='auth_start_time'),
  // 查询订单授权结束时间
  authEndTime?: long(name='auth_end_time'),
  // 订单创建时间开始范围
  createStartTime?: long(name='create_start_time'),
  // 订单创建时间结束范围
  createEndTime?: long(name='create_end_time'),
  // 排序字段
  orderBy: string(name='order_by'),
  // 数据排序顺序：正序还是倒序
  order: string(name='order'),
  // 页码
  pageNumber: long(name='page_number'),
  // 每页数据量大小
  pageSize: long(name='page_size'),
  // 渠道名称
  channelName?: string(name='channel_name'),
  // 是否查询0授权费率的订单，true则查0费率订单，false则查非0费率订单
  zeroAuthRate?: boolean(name='zero_auth_rate'),
}

model QueryIpOrderlistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 页码
  pageNumber?: long(name='page_number'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 订单总数
  totalOrderCount?: long(name='total_order_count'),
  // 总金额
  totalPaymentAmount?: string(name='total_payment_amount'),
  // 总客户数
  totalBuyerCount?: long(name='total_buyer_count'),
  // 订单列表
  orderList?: [ IPOrder ](name='order_list'),
  // 筛选条件下订单总数
  selectOrderCount?: long(name='select_order_count'),
}

/**
 * Description: 查询订单信息，模糊查询和分页查询
 * Summary: 数字商品服务-IP授权服务-查询订单列表
 */
async function queryIpOrderlist(request: QueryIpOrderlistRequest): QueryIpOrderlistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpOrderlistEx(request, headers, runtime);
}

/**
 * Description: 查询订单信息，模糊查询和分页查询
 * Summary: 数字商品服务-IP授权服务-查询订单列表
 */
async function queryIpOrderlistEx(request: QueryIpOrderlistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpOrderlistResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.orderlist.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateIpGoodsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // 版权方的链上账户Id
  accountId: string(name='account_id'),
  // ip的名字
  ipName: string(name='ip_name'),
  // 受众群体，多个用;隔开
  audienceGroup: string(name='audience_group'),
  // ip类型，多个用;隔开
  ipType: string(name='ip_type'),
  // ip主图,存放oss图片链接;隔开
  image: string(name='image'),
  // 商品详情图  存放OSS图片链接 用;隔开
  imageDetail: string(name='image_detail'),
  // ip描述
  description?: string(name='description'),
  // 对接人信息，json列表
  // [{
  // "name":"123", //联系人名字，必填
  // "mobilePhone":"123",// 联系人手机号,必填
  // "email":"456",// 联系人邮箱,选填
  // "dingDing":"999",// 联系人钉钉号,选填
  // "telePhone":"8888",// 联系人座机,选填
  // "position":"aaa"// 联系人职务,必填
  // }]
  dockingPeopleInfo: [ DockingPeopleInfo ](name='docking_people_info'),
  // 资质证书类型，0为用户上传，1申请
  copyRightType?: string(name='copy_right_type'),
  // 资质，copy_right_type为0的时候，copy_right不能为空，copy_right_type为1的时候，copy_right可以为空
  copyRight?: string(name='copy_right'),
  // 合作事项
  cooperationNote?: string(name='cooperation_note'),
  // 传入的渠道信息
  channelName: string(name='channel_name'),
  // 合作案例，图片存放oss链接，多张用,隔开
  cooperationCase?: string(name='cooperation_case'),
  // ip创建时间,毫秒时间戳
  ipCreateTime?: long(name='ip_create_time'),
  // 未来大事件
  futureMilestones?: string(name='future_milestones'),
  // 推广渠道
  promotionChannels?: string(name='promotion_channels'),
  // ip别称，多个用;隔开
  ipOtherName?: string(name='ip_other_name'),
  // 备注信息
  memo?: string(name='memo'),
  // 资质生效时间， 毫秒时间戳
  copyRightBeginTime: long(name='copy_right_begin_time'),
  // 资质生效的结束时间
  copyRightEndTime: long(name='copy_right_end_time'),
  // IP图库链接
  ipGalleryUrl?: string(name='ip_gallery_url'),
  // IP授权信息
  authorizationInfo?: IPAuthorizationInfo(name='authorization_info'),
}

model CreateIpGoodsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ip的链上id
  ipId?: string(name='ip_id'),
}

/**
 * Description: ip商品创建
 * Summary: 数字商品服务-IP授权服务-ip创建
 */
async function createIpGoods(request: CreateIpGoodsRequest): CreateIpGoodsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createIpGoodsEx(request, headers, runtime);
}

/**
 * Description: ip商品创建
 * Summary: 数字商品服务-IP授权服务-ip创建
 */
async function createIpGoodsEx(request: CreateIpGoodsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIpGoodsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.goods.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddIpChannelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // ip的链上id
  ipId: string(name='ip_id'),
  // 渠道信息
  channelName: string(name='channel_name'),
  // 商品授权 0普通授权/1独家授权,本期只支持0
  authorizationModel?: long(name='authorization_model'),
  // 新授权模式，0普通授权，1独家授权，支持多选
  newAuthorizationModel?: [ long ](name='new_authorization_model'),
  // 授权类型，衍生品授权；营销授权；商标授权；数字虚拟授权；其他
  authorizationType?: [ string ](name='authorization_type'),
  // 计费模式 0:按量 1:按金额
  payMode?: long(name='pay_mode'),
  // ip等级  0:经典IP/1:流量IP/2:设计IP
  ipLevel?: long(name='ip_level'),
  // 交易是否需要确认，默认不需要确认
  tradeNeedConfirm?: boolean(name='trade_need_confirm'),
  // 保底金区间，0：0；1：10万以下；2:10-30万；3:30-50万；4:50万以上
  guaranteeRange?: long(name='guarantee_range'),
  // 交易模式
  ipTradeMode?: IPTradeMode(name='ip_trade_mode'),
}

model AddIpChannelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: ip的渠道信息添加
 * Summary: 数字商品服务-IP授权服务-渠道信息添加
 */
async function addIpChannel(request: AddIpChannelRequest): AddIpChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addIpChannelEx(request, headers, runtime);
}

/**
 * Description: ip的渠道信息添加
 * Summary: 数字商品服务-IP授权服务-渠道信息添加
 */
async function addIpChannelEx(request: AddIpChannelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddIpChannelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.channel.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpOrderinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 订单ID
  ipOrderId: string(name='ip_order_id'),
}

model QueryIpOrderinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单信息
  ipOrder?: IPOrder(name='ip_order'),
  // IP授权销售数据
  ipSalesInfoList?: [ IPSalesInfo ](name='ip_sales_info_list'),
}

/**
 * Description: 查询订单详情，包含销售数据
 * Summary: 数字商品服务-IP授权服务-查询订单详情
 */
async function queryIpOrderinfo(request: QueryIpOrderinfoRequest): QueryIpOrderinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpOrderinfoEx(request, headers, runtime);
}

/**
 * Description: 查询订单详情，包含销售数据
 * Summary: 数字商品服务-IP授权服务-查询订单详情
 */
async function queryIpOrderinfoEx(request: QueryIpOrderinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpOrderinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.orderinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryIpGoodsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础信息
  baseRequest: BaseRequestInfo(name='base_request'),
  // 商品id
  ipId?: string(name='ip_id'),
  // ip名称，支持模糊匹配
  ipName?: string(name='ip_name'),
  // 商品状态（0:待上架，1:上架，2:下架）
  status?: long(name='status'),
  // ip的上架渠道
  channelName: string(name='channel_name'),
  // 分页大小
  pageSize: long(name='page_size'),
  // 分页索引
  pageIndex: long(name='page_index'),
  // ip商品归属方的链上id
  accountId?: string(name='account_id'),
  // Ip类型
  ipType?: string(name='ip_type'),
  // 受众人群
  audienceGroup?: string(name='audience_group'),
  // 上架日期开始时间
  createBeginTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='create_begin_time'),
  // 创建的结束日期
  createEndTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='create_end_time'),
  // 是否需要按照创建时间倒序排序
  isCreateTimeSortDesc: boolean(name='is_create_time_sort_desc'),
  // 是否需要按照pv排序（0:不需要，1:正序，2:倒序），默认按照pv倒序
  isSortByPv?: long(name='is_sort_by_pv'),
  // 是否需要按照最近上下架时间排序（0:不需要，1:正序，2:倒序），默认按照倒序
  isSortByStatusChange?: long(name='is_sort_by_status_change'),
  // 是否需要返回创建渠道，为空默认不返回
  queryCreaterChannel?: boolean(name='query_creater_channel'),
  // 保底金区间，0：0；1：10万以下；2:10-30万；3:30-50万；4:50万以上
  guaranteeRange?: long(name='guarantee_range'),
}

model BatchqueryIpGoodsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ip重要信息
  ipList?: [ IpEmphasisInfo ](name='ip_list'),
  // 结果总数，不是列表值，用于分页
  allCount?: long(name='all_count'),
}

/**
 * Description: 批量查询ip简略信息
 * Summary: 数字商品服务-IP授权服务-批量查询
 */
async function batchqueryIpGoods(request: BatchqueryIpGoodsRequest): BatchqueryIpGoodsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryIpGoodsEx(request, headers, runtime);
}

/**
 * Description: 批量查询ip简略信息
 * Summary: 数字商品服务-IP授权服务-批量查询
 */
async function batchqueryIpGoodsEx(request: BatchqueryIpGoodsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryIpGoodsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.goods.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpGoodsdetailwithchannelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础结构
  baseRequest: BaseRequestInfo(name='base_request'),
  // ip的链上id
  ipIds: [ string ](name='ip_ids'),
  // 查询的渠道名字
  channelName: string(name='channel_name'),
  // 是否要增加pv，默认不增加
  updatePv?: boolean(name='update_pv'),
}

model QueryIpGoodsdetailwithchannelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ip的信息详情
  ips?: [ IpBasicInfoWithChannelInfo ](name='ips'),
}

/**
 * Description: 根据渠道查询详细的信息
 * Summary: 数字商品服务-IP授权服务-查询渠道详细
 */
async function queryIpGoodsdetailwithchannel(request: QueryIpGoodsdetailwithchannelRequest): QueryIpGoodsdetailwithchannelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpGoodsdetailwithchannelEx(request, headers, runtime);
}

/**
 * Description: 根据渠道查询详细的信息
 * Summary: 数字商品服务-IP授权服务-查询渠道详细
 */
async function queryIpGoodsdetailwithchannelEx(request: QueryIpGoodsdetailwithchannelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpGoodsdetailwithchannelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.goodsdetailwithchannel.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpDetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // ip的链上id列表
  ipIds: [ string ](name='ip_ids'),
  // 查找不到的ip是否报错，默认false，会报错
  skipNotFoundIp?: boolean(name='skip_not_found_ip'),
}

model QueryIpDetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ip的信息列表
  ips?: [ IpBasicInfoWithChannelInfo ](name='ips'),
}

/**
 * Description: ip的所有信息 包括渠道和sku
 * Summary: 数字商品服务-IP授权服务-IP详情查询
 */
async function queryIpDetail(request: QueryIpDetailRequest): QueryIpDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpDetailEx(request, headers, runtime);
}

/**
 * Description: ip的所有信息 包括渠道和sku
 * Summary: 数字商品服务-IP授权服务-IP详情查询
 */
async function queryIpDetailEx(request: QueryIpDetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpDetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.detail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateIpGoodsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // ip的名字
  ipName: string(name='ip_name'),
  // ip类型，多个用;隔开
  ipType: string(name='ip_type'),
  // 受众人群，多个用;隔开
  audienceGroup: string(name='audience_group'),
  // ip链上id
  ipId: string(name='ip_id'),
  // ip主图,存放oss图片链接 多个用;隔开
  image: string(name='image'),
  // 商品详情图  存放OSS图片链接 多个用;隔开
  imageDetail: string(name='image_detail'),
  // ip描述
  description?: string(name='description'),
  // 对接人信息，json列表
  // [{
  // "name":"123", //联系人名字，必填
  // "mobilePhone":"123",// 联系人手机号,必填
  // "email":"456",// 联系人邮箱,选填
  // "dingDing":"999",// 联系人钉钉号,选填
  // "telePhone":"8888",// 联系人座机,选填
  // "position":"aaa"// 联系人职务,必填
  // }]
  dockingPeopleInfo: [ DockingPeopleInfo ](name='docking_people_info'),
  // 资质证书类型，0为用户上传，1申请
  copyRightType?: string(name='copy_right_type'),
  // 资质
  copyRight?: string(name='copy_right'),
  // 合作事项
  cooperationNote?: string(name='cooperation_note'),
  // 传入的渠道信息，不是更新项
  channelName: string(name='channel_name'),
  // 合作案例，图片存放oss链接，多张用;隔开
  cooperationCase?: string(name='cooperation_case'),
  // ip创建时间,毫秒时间戳
  ipCreateTime?: long(name='ip_create_time'),
  // 未来大事件
  futureMilestones?: string(name='future_milestones'),
  // 推广渠道
  promotionChannels?: string(name='promotion_channels'),
  // ip别名，多个通过;隔开
  ipOtherName?: string(name='ip_other_name'),
  // 备注信息
  memo?: string(name='memo'),
  // 资质生效时间 毫秒时间戳
  copyRightBeginTime: long(name='copy_right_begin_time'),
  // 资质生效的结束时间
  copyRightEndTime: long(name='copy_right_end_time'),
  // 如果商品是审批通过状态，是否需要审批，默认false。该字段提供给运营使用，慎用！！！
  needApproval?: boolean(name='need_approval'),
  // 授权信息
  authorizationInfo?: IPAuthorizationInfo(name='authorization_info'),
}

model UpdateIpGoodsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: ip商品创建
 * Summary: 数字商品服务-IP授权服务-ip更新
 */
async function updateIpGoods(request: UpdateIpGoodsRequest): UpdateIpGoodsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateIpGoodsEx(request, headers, runtime);
}

/**
 * Description: ip商品创建
 * Summary: 数字商品服务-IP授权服务-ip更新
 */
async function updateIpGoodsEx(request: UpdateIpGoodsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateIpGoodsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.goods.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateIpChannelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // ip的链上id
  ipId: string(name='ip_id'),
  // 渠道信息
  channelName: string(name='channel_name'),
  // 商品授权 0普通授权/1独家授权,本期只支持0
  authorizationModel?: long(name='authorization_model'),
  // 新授权模式，0普通授权，1独家授权，支持多选
  newAuthorizationModel?: [ long ](name='new_authorization_model'),
  // 授权类型，衍生品授权；营销授权；商标授权；数字虚拟授权；其他
  authorizationType?: [ string ](name='authorization_type'),
  // 计费模式 0:按量 1:按金额
  payMode?: long(name='pay_mode'),
  // ip等级  0:经典IP/1:流量IP/3:设计IP
  ipLevel?: long(name='ip_level'),
  // 交易是否需要确认，为空则不更新
  tradeNeedConfirm?: boolean(name='trade_need_confirm'),
  // 保底金区间，0：0；1：10万以下；2:10-30万；3:30-50万；4:50万以上
  guaranteeRange?: long(name='guarantee_range'),
  // 交易模式
  ipTradeMode?: IPTradeMode(name='ip_trade_mode'),
}

model UpdateIpChannelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: ip的渠道信息修改
 * Summary: 数字商品服务-IP授权服务-渠道信息更新
 */
async function updateIpChannel(request: UpdateIpChannelRequest): UpdateIpChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateIpChannelEx(request, headers, runtime);
}

/**
 * Description: ip的渠道信息修改
 * Summary: 数字商品服务-IP授权服务-渠道信息更新
 */
async function updateIpChannelEx(request: UpdateIpChannelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateIpChannelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.channel.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OnlineIpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // ip的链上id
  ipId: string(name='ip_id'),
  // 渠道
  channelName: string(name='channel_name'),
}

model OnlineIpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: ip上线
 * Summary: 数字商品服务-IP授权服务-上架
 */
async function onlineIp(request: OnlineIpRequest): OnlineIpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return onlineIpEx(request, headers, runtime);
}

/**
 * Description: ip上线
 * Summary: 数字商品服务-IP授权服务-上架
 */
async function onlineIpEx(request: OnlineIpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OnlineIpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.online', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OfflineIpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ip基础信息
  baseRequest: BaseRequestInfo(name='base_request'),
  // ip的链上id
  ipId: string(name='ip_id'),
  // 渠道1
  channelName: string(name='channel_name'),
}

model OfflineIpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: ip下线
 * Summary: 数字商品服务-IP授权服务-下架
 */
async function offlineIp(request: OfflineIpRequest): OfflineIpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return offlineIpEx(request, headers, runtime);
}

/**
 * Description: ip下线
 * Summary: 数字商品服务-IP授权服务-下架
 */
async function offlineIpEx(request: OfflineIpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineIpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.offline', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateIpAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 该用户的在外部系统的用户Id
  externalUserId: string(name='external_user_id'),
  // 该用户的在外部系统的用户名称
  externalUserName: string(name='external_user_name'),
  // 角色:  1:版权方 2: 版权采购商  
  role: long(name='role'),
  // 商户合作伙伴id，邀请商户入驻
  inviterId?: string(name='inviter_id'),
  // 商户合作伙伴返佣政策id
  policyId?: string(name='policy_id'),
}

model CreateIpAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建成功后, 为该用户生成的链上账户Id
  accountId?: string(name='account_id'),
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户注册, 采购商注册账户完成即可以参与IP授权交易服务, 版权方需要根据具体需要完成二级商户创建操作后再参与IP授权交易服务。
 * Summary: 数字商品服务-IP授权服务-账户创建
 */
async function createIpAccount(request: CreateIpAccountRequest): CreateIpAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createIpAccountEx(request, headers, runtime);
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户注册, 采购商注册账户完成即可以参与IP授权交易服务, 版权方需要根据具体需要完成二级商户创建操作后再参与IP授权交易服务。
 * Summary: 数字商品服务-IP授权服务-账户创建
 */
async function createIpAccountEx(request: CreateIpAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIpAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.account.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FreezeIpAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 用户的链上账户Id
  accountId: string(name='account_id'),
}

model FreezeIpAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户冻结, 账户冻结后无法参与IP授权交易活动。
 * Summary: 数字商品服务-IP授权服务-账户冻结
 */
async function freezeIpAccount(request: FreezeIpAccountRequest): FreezeIpAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return freezeIpAccountEx(request, headers, runtime);
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户冻结, 账户冻结后无法参与IP授权交易活动。
 * Summary: 数字商品服务-IP授权服务-账户冻结
 */
async function freezeIpAccountEx(request: FreezeIpAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FreezeIpAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.account.freeze', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnfreezeIpAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 用户的链上账户Id
  accountId: string(name='account_id'),
}

model UnfreezeIpAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户解冻, 对于已经被冻结的账户, 账户解冻后才可以参与IP授权交易活动。
 * Summary: 数字商品服务-IP授权服务-账户解冻
 */
async function unfreezeIpAccount(request: UnfreezeIpAccountRequest): UnfreezeIpAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unfreezeIpAccountEx(request, headers, runtime);
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户解冻, 对于已经被冻结的账户, 账户解冻后才可以参与IP授权交易活动。
 * Summary: 数字商品服务-IP授权服务-账户解冻
 */
async function unfreezeIpAccountEx(request: UnfreezeIpAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnfreezeIpAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.account.unfreeze', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 用户的链上账户Id
  accountId: string(name='account_id'),
}

model QueryIpAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 该用户的在外部系统的用户Id
  externalUserId?: string(name='external_user_id'),
  // 该用户的在外部系统的用户名称
  externalUserName?: string(name='external_user_name'),
  // 1:版权方 2: 版权采购商 
  role?: long(name='role'),
  // 用户状态(0:初始化, 1:申请流程中, 2:可用, 3:被冻结)
  // 买家: 链上账户注册成功即为可用状态。
  // 卖家: 链上账户注册成功为初始化状态, 申请期间涉及2层审核皆为审核流程中状态, 支付宝审核通过即为可用状态。
  status?: long(name='status'),
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户查询。
 * Summary: 数字商品服务-IP授权服务-账户查询
 */
async function queryIpAccount(request: QueryIpAccountRequest): QueryIpAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpAccountEx(request, headers, runtime);
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户查询。
 * Summary: 数字商品服务-IP授权服务-账户查询
 */
async function queryIpAccountEx(request: QueryIpAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.account.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyIpAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 版权方的链上账户Id
  accountId: string(name='account_id'),
  // 支付宝的登陆用户名(必须实名制)
  alipayLoginName: string(name='alipay_login_name'),
  // 商户别名, 会展示在账单以及支付结果页中
  merchantAliasName: string(name='merchant_alias_name'),
  // 商户类型(本期仅支持:  1:企业, 6:个人商户)
  merchantType: long(name='merchant_type'),
  // 商户证件类型(本期仅支持: 201: 营业执照, 100: 个人商户身份证)
  // 如果merchant_type为企业, 需要传入201; 如果merchant_type为个人, 需要传入100
  merchantCertType: long(name='merchant_cert_type'),
  // 商户证件编号(企业提供营业执照),本期人工审核
  merchantCertNumber?: string(name='merchant_cert_number'),
  // 商户营业执照的图片地址,本期人工审核
  merchantCertImage?: string(name='merchant_cert_image'),
  // 税务登记证明的图片,本期人工审核
  merchantSignImage?: string(name='merchant_sign_image'),
  // 商户类别码mcc，参见https://gw.alipayobjects.com/os/bmw-prod/05c9a32e-42d1-436b-ace7-13101d91f672.xlsx
  mcc: string(name='mcc'),
  // 商户法人名称, merchant_type = 01时必填	
  legalName?: string(name='legal_name'),
  // 商户法人身份证号码, merchant_type = 1时必填
  legalCertNo?: string(name='legal_cert_no'),
  // 商户经营地址
  addressInfo: IPAddressInfo(name='address_info'),
  // 商户联系人信息
  contactInfo: IPContactInfo(name='contact_info'),
  // 默认结算规则
  settleRule: IPSettleRule(name='settle_rule'),
  // 银行卡结算信息, 结算到银行卡时必填, 当前仅支持填入一张卡
  cardInfo?: IPCardInfo(name='card_info'),
  // 备注信息
  memo?: string(name='memo'),
}

model ApplyIpAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数字商品-IP授权交易服务-版权方申请: 版权方完成账户注册后需要完成版权方申请,异步流程需要查询申请结果。
 * Summary: 数字商品服务-IP授权服务-版权方申请
 */
async function applyIpAccount(request: ApplyIpAccountRequest): ApplyIpAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyIpAccountEx(request, headers, runtime);
}

/**
 * Description: 数字商品-IP授权交易服务-版权方申请: 版权方完成账户注册后需要完成版权方申请,异步流程需要查询申请结果。
 * Summary: 数字商品服务-IP授权服务-版权方申请
 */
async function applyIpAccountEx(request: ApplyIpAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyIpAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.account.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckIpAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 版权方的链上账户Id
  accountId: string(name='account_id'),
}

model CheckIpAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 申请状态(0:运营审核中, 1:运营审核失败, 2:进件审核中, 3:进件审核失败, 4:进件审核成功)
  status?: string(name='status'),
  // 运营审核失败原因
  rejectReason?: string(name='reject_reason'),
  // 是否需要支付宝签约(当为true,需要用户到支付宝进行签约) 签约引导说明: https://opendocs.alipay.com/open/00gfyb	
  needSign?: boolean(name='need_sign'),
}

/**
 * Description: 数字商品-IP授权交易-版权方申请进度查询: 版权方申请流程需要人工审核和支付宝审核。
 * Summary: 数字商品服务-IP授权服务-查申请进度
 */
async function checkIpAccount(request: CheckIpAccountRequest): CheckIpAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkIpAccountEx(request, headers, runtime);
}

/**
 * Description: 数字商品-IP授权交易-版权方申请进度查询: 版权方申请流程需要人工审核和支付宝审核。
 * Summary: 数字商品服务-IP授权服务-查申请进度
 */
async function checkIpAccountEx(request: CheckIpAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckIpAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.account.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmIpGoodsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础信息
  baseRequest: BaseRequestInfo(name='base_request'),
  // ip id
  ipId: string(name='ip_id'),
  // 是否审批通过
  isApproval: boolean(name='is_approval'),
  // 审批意见
  approvalComments: string(name='approval_comments'),
}

model ConfirmIpGoodsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: ip商品审批
 * Summary: 数字商品服务-IP授权服务-ip创建审批
 */
async function confirmIpGoods(request: ConfirmIpGoodsRequest): ConfirmIpGoodsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmIpGoodsEx(request, headers, runtime);
}

/**
 * Description: ip商品审批
 * Summary: 数字商品服务-IP授权服务-ip创建审批
 */
async function confirmIpGoodsEx(request: ConfirmIpGoodsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmIpGoodsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.goods.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryIpApprovalRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础信息
  baseRequest: BaseRequestInfo(name='base_request'),
  // ip名称，支持模糊匹配
  ipName?: string(name='ip_name'),
  // IP_id
  ipId?: string(name='ip_id'),
  // ip审批状态 0待审批，1 审批通过，2 审批拒绝
  approvalStatus?: long(name='approval_status'),
  // 分页
  pageSize: long(name='page_size'),
  // 分页
  pageIndex: long(name='page_index'),
  // ip类型
  ipType?: string(name='ip_type'),
  // 受众人群
  audienceGroup?: string(name='audience_group'),
  // 创建时间段起始
  createBeginTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='create_begin_time'),
  // 创建时间段结束
  createEndTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='create_end_time'),
  // 商品的链上租户id
  accountId?: string(name='account_id'),
  // 是否需要按照创建时间倒序排序
  isCreateTimeSortDesc: boolean(name='is_create_time_sort_desc'),
  // 渠道名称
  channelName?: string(name='channel_name'),
}

model BatchqueryIpApprovalResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ip信息
  ipList?: [ IpBasicInfo ](name='ip_list'),
  // 结果总数，不是列表值，用于分页
  allCount?: long(name='all_count'),
}

/**
 * Description: ip信息批量查询--给运营使用
查询审批信息
 * Summary: 数字商品服务-IP授权服务-审批信息查询
 */
async function batchqueryIpApproval(request: BatchqueryIpApprovalRequest): BatchqueryIpApprovalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryIpApprovalEx(request, headers, runtime);
}

/**
 * Description: ip信息批量查询--给运营使用
查询审批信息
 * Summary: 数字商品服务-IP授权服务-审批信息查询
 */
async function batchqueryIpApprovalEx(request: BatchqueryIpApprovalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryIpApprovalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.approval.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmIpAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 版权方的链上账户Id
  accountId: string(name='account_id'),
}

model ConfirmIpAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数字商品服务-IP授权服务-运营审核确认
 * Summary: 数字商品服务-IP授权服务-运营审核确认
 */
async function confirmIpAccount(request: ConfirmIpAccountRequest): ConfirmIpAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmIpAccountEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-运营审核确认
 * Summary: 数字商品服务-IP授权服务-运营审核确认
 */
async function confirmIpAccountEx(request: ConfirmIpAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmIpAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.account.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RefuseIpAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 版权方的链上账户Id
  accountId: string(name='account_id'),
  // 拒绝原因
  rejectReason: string(name='reject_reason'),
}

model RefuseIpAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数字商品服务-IP授权服务-运营审核拒绝
 * Summary: 数字商品服务-IP授权服务-运营审核拒绝
 */
async function refuseIpAccount(request: RefuseIpAccountRequest): RefuseIpAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return refuseIpAccountEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-运营审核拒绝
 * Summary: 数字商品服务-IP授权服务-运营审核拒绝
 */
async function refuseIpAccountEx(request: RefuseIpAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RefuseIpAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.account.refuse', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PullIpAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 版权方的链上账户Id
  accountId: string(name='account_id'),
}

model PullIpAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 支付宝的登陆用户名(必须实名制)
  alipayLoginName?: string(name='alipay_login_name'),
  // 商户别名, 会展示在账单以及支付结果页中
  merchantAliasName?: string(name='merchant_alias_name'),
  // 商户类型(本期仅支持: 1:企业, 6:个人商户)
  merchantType?: long(name='merchant_type'),
  // 商户证件类型(本期仅支持: 201: 营业执照, 100: 个人商户身份证) 如果merchant_type为企业, 需要传入201; 如果merchant_type为个人, 需要传入100
  merchantCertType?: long(name='merchant_cert_type'),
  // 商户证件编号(企业提供营业执照),本期人工审核
  merchantCertNumber?: string(name='merchant_cert_number'),
  // 商户营业执照的图片地址,本期人工审核
  merchantCertImage?: string(name='merchant_cert_image'),
  // 税务登记证明的图片,本期人工审核
  merchantSignImage?: string(name='merchant_sign_image'),
  // 商户类别码mcc，参见https://gw.alipayobjects.com/os/bmw-prod/05c9a32e-42d1-436b-ace7-13101d91f672.xlsx
  mcc?: string(name='mcc'),
  // 商户法人名称, merchant_type = 01时必填
  legalName?: string(name='legal_name'),
  // 商户法人身份证号码, merchant_type = 1时必填
  legalCertNo?: string(name='legal_cert_no'),
  // 商户经营地址
  addressInfo?: IPAddressInfo(name='address_info'),
  // 默认结算规则
  settleRule?: IPSettleRule(name='settle_rule'),
  // 商户联系人信息
  contactInfo?: IPContactInfo(name='contact_info'),
  // 银行卡结算信息, 结算到银行卡时必填, 当前仅支持填入一张卡
  cardInfo?: IPCardInfo(name='card_info'),
  // 店铺名称
  shopName?: string(name='shop_name'),
  // 更多联系方式，用于运营联系商家
  additionalContactInfo?: [ SimpleContactInfo ](name='additional_contact_info'),
  // 创建账户时间
  createTime?: long(name='create_time'),
}

/**
 * Description: 版权方进件信息的单个查询
 * Summary: 数字商品服务-IP授权服务-申请信息查询
 */
async function pullIpAccount(request: PullIpAccountRequest): PullIpAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pullIpAccountEx(request, headers, runtime);
}

/**
 * Description: 版权方进件信息的单个查询
 * Summary: 数字商品服务-IP授权服务-申请信息查询
 */
async function pullIpAccountEx(request: PullIpAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PullIpAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.account.pull', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpMccRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // 备注信息
  memo?: string(name='memo'),
}

model QueryIpMccResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // mcc类别列表
  mccList?: [ IPMCC ](name='mcc_list'),
}

/**
 * Description: 数字商品服务-IP授权服务-MCC列表查询
 * Summary: 数字商品服务-IP授权服务-MCC查询
 */
async function queryIpMcc(request: QueryIpMccRequest): QueryIpMccResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpMccEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-MCC列表查询
 * Summary: 数字商品服务-IP授权服务-MCC查询
 */
async function queryIpMccEx(request: QueryIpMccRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpMccResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.mcc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpTypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 备注信息
  memo?: string(name='memo'),
}

model QueryIpTypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ip的type列表
  type?: [ string ](name='type'),
  // ip的受众人群
  audienceGroup?: [ string ](name='audience_group'),
}

/**
 * Description: 查询ip type和受众人群
 * Summary: 数字商品服务-IP授权服务-IP标签查询
 */
async function queryIpType(request: QueryIpTypeRequest): QueryIpTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpTypeEx(request, headers, runtime);
}

/**
 * Description: 查询ip type和受众人群
 * Summary: 数字商品服务-IP授权服务-IP标签查询
 */
async function queryIpTypeEx(request: QueryIpTypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpTypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.type.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryIpApprovalandchannelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础信息
  baseRequest: BaseRequestInfo(name='base_request'),
  // ip的名字
  ipName?: string(name='ip_name'),
  // ip的id
  ipId?: string(name='ip_id'),
  // 审批状态
  approvalStatus?: long(name='approval_status'),
  // ip类型
  ipType?: string(name='ip_type'),
  // 受众人群
  audienceGroup?: string(name='audience_group'),
  // 归属账户
  accountId?: string(name='account_id'),
  // 版权方别名
  accountExternalName?: string(name='account_external_name'),
  // 是否需要按照创建时间倒序排序
  // 
  isCreateTimeSortDesc: boolean(name='is_create_time_sort_desc'),
  // 分页大小
  pageSize: long(name='page_size'),
  // 分页索引
  pageIndex: long(name='page_index'),
  // 开始时间 
  createBeginTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='create_begin_time'),
  // 结束时间
  createEndTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='create_end_time'),
  // 渠道名称
  channelName?: string(name='channel_name'),
  // 上架渠道，SelfEmployed为上架到自营的渠道，NONLINE为未上架任何渠道
  onlineChannel?: string(name='online_channel'),
}

model BatchqueryIpApprovalandchannelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ip信息
  ipList?: [ IpAllInfo ](name='ip_list'),
  // 总数
  allCount?: long(name='all_count'),
}

/**
 * Description: ip审批信息批量查询（带上渠道信息）
 * Summary: 数字商品服务-IP授权服务-审批批量查询
 */
async function batchqueryIpApprovalandchannel(request: BatchqueryIpApprovalandchannelRequest): BatchqueryIpApprovalandchannelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryIpApprovalandchannelEx(request, headers, runtime);
}

/**
 * Description: ip审批信息批量查询（带上渠道信息）
 * Summary: 数字商品服务-IP授权服务-审批批量查询
 */
async function batchqueryIpApprovalandchannelEx(request: BatchqueryIpApprovalandchannelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryIpApprovalandchannelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.approvalandchannel.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryIpAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  // 
  baseRequest: BaseRequestInfo(name='base_request'),
  // 账户Id列表(单次不能超过50个)
  accountIds: [ string ](name='account_ids'),
  // 渠道名称
  channelName?: string(name='channel_name'),
}

model BatchqueryIpAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 批量查询商家信息
  applyInfos?: [ IPMerchantApplyInfo ](name='apply_infos'),
}

/**
 * Description: 版权方进件信息的批量查询
 * Summary: 数字商品服务-IP授权服务-查询商家信息
 */
async function batchqueryIpAccount(request: BatchqueryIpAccountRequest): BatchqueryIpAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryIpAccountEx(request, headers, runtime);
}

/**
 * Description: 版权方进件信息的批量查询
 * Summary: 数字商品服务-IP授权服务-查询商家信息
 */
async function batchqueryIpAccountEx(request: BatchqueryIpAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryIpAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.account.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryIpSellerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础信息
  baseRequest: BaseRequestInfo(name='base_request'),
  // 不同的平台标识
  channelName: string(name='channel_name'),
  // 分页大小
  pageSize: long(name='page_size'),
  // 分页索引
  pageIndex: long(name='page_index'),
  // 账户链上ID
  accountId?: string(name='account_id'),
  // 1 版权方，2 商户
  role?: long(name='role'),
  // 联系人名称
  contactName?: string(name='contact_name'),
  // 联系人电话
  contactMobile?: string(name='contact_mobile'),
  // 账户状态列表
  statusList?: [ long ](name='status_list'),
  // 排序
  sortOrder?: string(name='sort_order'),
  // 筛选更新时间范围，开始区间
  createStartTime?: long(name='create_start_time'),
  // 筛选更新时间范围，结束区间
  createEndTime?: long(name='create_end_time'),
  // 版权方的用户名称
  externalUserName?: string(name='external_user_name'),
}

model BatchqueryIpSellerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果总数，不是列表值，用于分页
  // 
  allCount?: long(name='all_count'),
  // 版权方申请列表
  applyList?: [ IPApplyInfo ](name='apply_list'),
}

/**
 * Description: 账户列表查询
 * Summary: 数字商品服务-IP授权服务-查账户列表
 */
async function batchqueryIpSeller(request: BatchqueryIpSellerRequest): BatchqueryIpSellerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryIpSellerEx(request, headers, runtime);
}

/**
 * Description: 账户列表查询
 * Summary: 数字商品服务-IP授权服务-查账户列表
 */
async function batchqueryIpSellerEx(request: BatchqueryIpSellerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryIpSellerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.seller.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyIpCodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // IP商家的链上账户ID
  accountId: string(name='account_id'),
  // 套餐交易/授权交易的订单ID
  orderId: string(name='order_id'),
  // 申请数量
  count: long(name='count'),
}

model ApplyIpCodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 正版码的批次ID
  codeBatchId?: string(name='code_batch_id'),
  // 正版码左区间
  codeBatchStart?: long(name='code_batch_start'),
  // 正版码右区间
  codeBatchEnd?: long(name='code_batch_end'),
}

/**
 * Description: 数字商品服务-IP授权服务-正版码申请
 * Summary: 数字商品服务-IP授权服务-正版码申请
 */
async function applyIpCode(request: ApplyIpCodeRequest): ApplyIpCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyIpCodeEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-正版码申请
 * Summary: 数字商品服务-IP授权服务-正版码申请
 */
async function applyIpCodeEx(request: ApplyIpCodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyIpCodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.code.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryIpCodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 正版码批次编码
  codeBatchId: string(name='code_batch_id'),
  // 分页参数:页码
  pageIndex: long(name='page_index'),
  // 分页参数:每页条目数(请小于等于100)
  pageSize: long(name='page_size'),
}

model PagequeryIpCodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 正版码列表(小程序扫描不可跳转的码)
  // 注意: 这个接口查到的码为原始编码, 小程序扫描无法跳转, IPMart不适用!!!
  codeList?: [ string ](name='code_list'),
  // 展示码列表(和code_list一一对应)
  showCodeList?: [ string ](name='show_code_list'),
  // 交易订单ID
  orderId?: string(name='order_id'),
  // IP商家的链上账户ID
  buyerAccountId?: string(name='buyer_account_id'),
  // IP版权方的链上账户ID
  sellerAccountId?: string(name='seller_account_id'),
  // IPID
  ipId?: string(name='ip_id'),
  // IP名称
  ipName?: string(name='ip_name'),
  // IP主图的OSS地址
  ipImage?: string(name='ip_image'),
  // IP描述
  ipDesc?: string(name='ip_desc'),
  // 该批次正版码的过期时间戳(毫秒)
  expiredDate?: long(name='expired_date'),
  // 已经申请的总数量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 数字商品服务-IP授权服务-正版码分页查询: 小程序不可扫描的正版码分页查询。
注意: 这个接口查到的为小程序不可扫描的码, 是原始编码!!!
 * Summary: 数字商品服务-IP授权服务-正版码查询
 */
async function pagequeryIpCode(request: PagequeryIpCodeRequest): PagequeryIpCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryIpCodeEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-正版码分页查询: 小程序不可扫描的正版码分页查询。
注意: 这个接口查到的为小程序不可扫描的码, 是原始编码!!!
 * Summary: 数字商品服务-IP授权服务-正版码查询
 */
async function pagequeryIpCodeEx(request: PagequeryIpCodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryIpCodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.code.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckIpCodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 正版码的编码
  code: string(name='code'),
  // 扫码用户的ID
  userId: string(name='user_id'),
  // 扫码用户的名称
  userName: string(name='user_name'),
  // 扫码用户的手机号
  phoneNumber?: string(name='phone_number'),
  // 扫码用户的位置信息
  gps?: string(name='gps'),
  // 用户头像地址
  avatar: string(name='avatar'),
}

model CheckIpCodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 被扫描的次数(包含本次)
  scannedCount?: long(name='scanned_count'),
  // null，暂不使用该值//扫描历史列表(仅展示最近扫描的50次信息)
  scannedList?: [ IPCodeScannedInfo ](name='scanned_list'),
  // 正版码的详情，始终不为空，如果类型中的user_name为空，则正版码未领取，如果不为空，则正版码已领取
  codeDetail?: IPCodeScannedInfo(name='code_detail'),
  // 首次扫码信息
  firstScannedInfo?: IPSimpleScannedInfo(name='first_scanned_info'),
  // 扫码信息
  scannedInfoList?: [ IPSimpleScannedInfo ](name='scanned_info_list'),
}

/**
 * Description: 数字商品服务-IP授权服务-正版码校验
 * Summary: 数字商品服务-IP授权服务-正版码校验
 */
async function checkIpCode(request: CheckIpCodeRequest): CheckIpCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkIpCodeEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-正版码校验
 * Summary: 数字商品服务-IP授权服务-正版码校验
 */
async function checkIpCodeEx(request: CheckIpCodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckIpCodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.code.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmIpUpdateapprovalRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // ip的id
  ipId: string(name='ip_id'),
  // 是否审批通过
  isApproval: boolean(name='is_approval'),
  // 审批信息
  approvalComments?: string(name='approval_comments'),
}

model ConfirmIpUpdateapprovalResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 对商品的更新进行审核
 * Summary: 数字商品服务-IP授权服务-IP更新审核
 */
async function confirmIpUpdateapproval(request: ConfirmIpUpdateapprovalRequest): ConfirmIpUpdateapprovalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmIpUpdateapprovalEx(request, headers, runtime);
}

/**
 * Description: 对商品的更新进行审核
 * Summary: 数字商品服务-IP授权服务-IP更新审核
 */
async function confirmIpUpdateapprovalEx(request: ConfirmIpUpdateapprovalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmIpUpdateapprovalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.updateapproval.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetIpSkuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // ip的id
  ipId: string(name='ip_id'),
  // 渠道名字
  channelName: string(name='channel_name'),
  // sku数组
  skus: [ IpSkuEmphasisInfo ](name='skus'),
}

model SetIpSkuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: ip商品sku信息设置
 * Summary: 数字商品服务-IP授权服务-sku设置
 */
async function setIpSku(request: SetIpSkuRequest): SetIpSkuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setIpSkuEx(request, headers, runtime);
}

/**
 * Description: ip商品sku信息设置
 * Summary: 数字商品服务-IP授权服务-sku设置
 */
async function setIpSkuEx(request: SetIpSkuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetIpSkuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.sku.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpGoodsupdateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // ipid的列表，最多20个
  ipIds?: [ string ](name='ip_ids'),
  // 版权方账号id
  accountId?: string(name='account_id'),
}

model QueryIpGoodsupdateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ip的更新数据
  ipList?: [ IpBasicInfo ](name='ip_list'),
}

/**
 * Description: 查询商品基础信息的更新数据
 * Summary: 数字商品服务-IP授权服务-查询更新数据
 */
async function queryIpGoodsupdate(request: QueryIpGoodsupdateRequest): QueryIpGoodsupdateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpGoodsupdateEx(request, headers, runtime);
}

/**
 * Description: 查询商品基础信息的更新数据
 * Summary: 数字商品服务-IP授权服务-查询更新数据
 */
async function queryIpGoodsupdateEx(request: QueryIpGoodsupdateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpGoodsupdateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.goodsupdate.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryIpBillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 订单ID
  ipOrderId: string(name='ip_order_id'),
  // 账单状态，预留字段
  billStatus?: long(name='bill_status'),
  // 排序字段
  orderBy: string(name='order_by'),
  // 排序顺序：正序还是倒序
  order: string(name='order'),
  // 页码
  pageNumber: long(name='page_number'),
  // 每页数据量大小
  pageSize: long(name='page_size'),
}

model PagequeryIpBillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 页码
  pageNumber?: long(name='page_number'),
  // 页面数据量大小
  pageSize?: long(name='page_size'),
  // 筛选条件下账单总数
  selectBillCount?: long(name='select_bill_count'),
  // 账单信息列表
  billList?: [ IPBill ](name='bill_list'),
}

/**
 * Description: 查询账单信息，分页查询
 * Summary: 数字商品服务-IP授权服务-查询账单列表
 */
async function pagequeryIpBill(request: PagequeryIpBillRequest): PagequeryIpBillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryIpBillEx(request, headers, runtime);
}

/**
 * Description: 查询账单信息，分页查询
 * Summary: 数字商品服务-IP授权服务-查询账单列表
 */
async function pagequeryIpBillEx(request: PagequeryIpBillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryIpBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.bill.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpSkuconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // 渠道名称
  channelName: string(name='channel_name'),
}

model QueryIpSkuconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // sku信息
  skus?: [ IpSkuConfigWithLevel ](name='skus'),
}

/**
 * Description: ip商品某个渠道默认sku查询
 * Summary: 数字商品服务-IP授权服务-sku查询
 */
async function queryIpSkuconfig(request: QueryIpSkuconfigRequest): QueryIpSkuconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpSkuconfigEx(request, headers, runtime);
}

/**
 * Description: ip商品某个渠道默认sku查询
 * Summary: 数字商品服务-IP授权服务-sku查询
 */
async function queryIpSkuconfigEx(request: QueryIpSkuconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpSkuconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.skuconfig.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportIpAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础入参
  baseRequest: BaseRequestInfo(name='base_request'),
  // 支付宝的登陆用户名(必须实名制)
  alipayLoginName: string(name='alipay_login_name'),
  // 商户类型(本期仅支持: 1:企业, 6:个人商户)	
  merchantType: long(name='merchant_type'),
  // 商户别名, 会展示在账单以及支付结果页中
  merchantAliasName: string(name='merchant_alias_name'),
  // 商户法人名称, merchant_type = 1时必填	
  legalName?: string(name='legal_name'),
  // 商户法人身份证号码, merchant_type = 1时必填	
  legalCertNo?: string(name='legal_cert_no'),
  // 结算目标账户(银行卡/支付宝)
  settleTarget: string(name='settle_target'),
}

model ImportIpAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 导入后的新链上账户Id
  accountId?: string(name='account_id'),
}

/**
 * Description: 数字商品服务-IP授权交易-版权方导入: 一链多端版权方互通
 * Summary: 数字商品服务-IP授权服务-版权方导入
 */
async function importIpAccount(request: ImportIpAccountRequest): ImportIpAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importIpAccountEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权交易-版权方导入: 一链多端版权方互通
 * Summary: 数字商品服务-IP授权服务-版权方导入
 */
async function importIpAccountEx(request: ImportIpAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportIpAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.account.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveIpSkuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // IP id
  ipId: string(name='ip_id'),
  // 渠道名称
  channelName: string(name='channel_name'),
}

model RemoveIpSkuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 商品特定渠道的sku信息清空
 * Summary: 数字商品服务-IP授权服务-sku清空
 */
async function removeIpSku(request: RemoveIpSkuRequest): RemoveIpSkuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeIpSkuEx(request, headers, runtime);
}

/**
 * Description: 商品特定渠道的sku信息清空
 * Summary: 数字商品服务-IP授权服务-sku清空
 */
async function removeIpSkuEx(request: RemoveIpSkuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveIpSkuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.sku.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateIpSuperviseapproveRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // 订单id
  orderId: string(name='order_id'),
  // 监修报审内容，业务相关字段自行组织成json，统一存储
  extInfo: string(name='ext_info'),
}

model CreateIpSuperviseapproveResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建监修报审
 * Summary: 数字商品服务-IP授权服务-创建监修报审
 */
async function createIpSuperviseapprove(request: CreateIpSuperviseapproveRequest): CreateIpSuperviseapproveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createIpSuperviseapproveEx(request, headers, runtime);
}

/**
 * Description: 创建监修报审
 * Summary: 数字商品服务-IP授权服务-创建监修报审
 */
async function createIpSuperviseapproveEx(request: CreateIpSuperviseapproveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIpSuperviseapproveResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.superviseapprove.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmIpSuperviseapproveRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // 监修报审关联的订单id
  orderId: string(name='order_id'),
  // 当前期望的审批阶段（用于校验）
  stage: long(name='stage'),
  // 是否审批通过
  isApproval: boolean(name='is_approval'),
  // 审批备注
  approvalComments?: string(name='approval_comments'),
  // 审批额外信息
  approvalExtInfo?: string(name='approval_ext_info'),
}

model ConfirmIpSuperviseapproveResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 监修报审审批
 * Summary: 数字商品服务-IP授权服务-监修报审审批
 */
async function confirmIpSuperviseapprove(request: ConfirmIpSuperviseapproveRequest): ConfirmIpSuperviseapproveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmIpSuperviseapproveEx(request, headers, runtime);
}

/**
 * Description: 监修报审审批
 * Summary: 数字商品服务-IP授权服务-监修报审审批
 */
async function confirmIpSuperviseapproveEx(request: ConfirmIpSuperviseapproveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmIpSuperviseapproveResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.superviseapprove.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushIpSuperviseapproveRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // 关联的订单id
  orderId: string(name='order_id'),
  // 当前期望的阶段（用于校验，若是重新提交，则阶段值相等，若推进下一阶段，则阶段值+1）
  stage: long(name='stage'),
  // 监修报审的阶段具体内容，组织成json保存
  extInfo: string(name='ext_info'),
}

model PushIpSuperviseapproveResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 监修报审进度推进/重置
 * Summary: 数字商品服务-IP授权服务-推进监修报审
 */
async function pushIpSuperviseapprove(request: PushIpSuperviseapproveRequest): PushIpSuperviseapproveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushIpSuperviseapproveEx(request, headers, runtime);
}

/**
 * Description: 监修报审进度推进/重置
 * Summary: 数字商品服务-IP授权服务-推进监修报审
 */
async function pushIpSuperviseapproveEx(request: PushIpSuperviseapproveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushIpSuperviseapproveResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.superviseapprove.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpSuperviseapproveRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // 关联的订单id
  orderId: string(name='order_id'),
}

model QueryIpSuperviseapproveResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 监修报审最新阶段的详情
  superviseApprove?: SuperviseApprove(name='supervise_approve'),
}

/**
 * Description: 数字商品-IP授权交易-查询监修报审详情
 * Summary: 数字商品服务-IP授权服务-查询监修报审
 */
async function queryIpSuperviseapprove(request: QueryIpSuperviseapproveRequest): QueryIpSuperviseapproveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpSuperviseapproveEx(request, headers, runtime);
}

/**
 * Description: 数字商品-IP授权交易-查询监修报审详情
 * Summary: 数字商品服务-IP授权服务-查询监修报审
 */
async function queryIpSuperviseapproveEx(request: QueryIpSuperviseapproveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpSuperviseapproveResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.superviseapprove.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReceiveIpCodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 正版码的编码
  code: string(name='code'),
  // 领取用户的ID
  userId: string(name='user_id'),
  // 领取用户的名称
  userName: string(name='user_name'),
  // 领取用户的手机号
  phoneNumber?: string(name='phone_number'),
  // 领取用户的位置信息
  gps?: string(name='gps'),
  // 用户头像地址
  avatar: string(name='avatar'),
}

model ReceiveIpCodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 领取正版码，如已被领取则返回被领取人昵称信息
 * Summary: 数字商品服务-IP授权服务-正版码领取
 */
async function receiveIpCode(request: ReceiveIpCodeRequest): ReceiveIpCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return receiveIpCodeEx(request, headers, runtime);
}

/**
 * Description: 领取正版码，如已被领取则返回被领取人昵称信息
 * Summary: 数字商品服务-IP授权服务-正版码领取
 */
async function receiveIpCodeEx(request: ReceiveIpCodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReceiveIpCodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.code.receive', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryIpCodeinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 用户ID
  userId: string(name='user_id'),
  // 页码
  pageNumber: long(name='page_number'),
  // 每页数据量大小(请小于等于100)
  pageSize: long(name='page_size'),
  // 0 扫描过的正版码，1 领取过的正版码
  type: long(name='type'),
}

model PagequeryIpCodeinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 页码
  pageNumber?: long(name='page_number'),
  // 页面数据量大小
  pageSize?: long(name='page_size'),
  // 领取到的正版码总数
  codeCount?: long(name='code_count'),
  // 正版码列表信息
  codeList?: [ IPCodeScannedInfo ](name='code_list'),
}

/**
 * Description: 已领取或以扫描过的正版码列表，分页查询
 * Summary: 数字商品服务-IP授权服务-正版码列表
 */
async function pagequeryIpCodeinfo(request: PagequeryIpCodeinfoRequest): PagequeryIpCodeinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryIpCodeinfoEx(request, headers, runtime);
}

/**
 * Description: 已领取或以扫描过的正版码列表，分页查询
 * Summary: 数字商品服务-IP授权服务-正版码列表
 */
async function pagequeryIpCodeinfoEx(request: PagequeryIpCodeinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryIpCodeinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.codeinfo.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateIpValueaddRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // 创建增值服务的账户id
  accountId: string(name='account_id'),
  // 服务名字
  serviceName: string(name='service_name'),
  // 商品主图，存放OSS图片链接,多张用;隔开
  images: string(name='images'),
  // 商品详情图  存放OSS图片链接,多张用;隔开
  imagesDetail: string(name='images_detail'),
  // 商品描述
  description?: string(name='description'),
  // 联系人
  dockingPeople: [ DockingPeopleInfo ](name='docking_people'),
  // 资质证明
  copyRight?: string(name='copy_right'),
  // 备注
  memo?: string(name='memo'),
}

model CreateIpValueaddResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务id
  serviceId?: string(name='service_id'),
}

/**
 * Description: 创建增值服务
 * Summary: 数字商品服务-IP授权服务-创建增值服务
 */
async function createIpValueadd(request: CreateIpValueaddRequest): CreateIpValueaddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createIpValueaddEx(request, headers, runtime);
}

/**
 * Description: 创建增值服务
 * Summary: 数字商品服务-IP授权服务-创建增值服务
 */
async function createIpValueaddEx(request: CreateIpValueaddRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIpValueaddResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.valueadd.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateIpValueaddRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // 服务id
  serviceId: string(name='service_id'),
  // 增值服务名字
  serviceName: string(name='service_name'),
  // 主图。存放OSS图片链接,多张用;隔开
  image: string(name='image'),
  // 商品详情图  存放OSS图片链接.多张用;隔开
  imageDetail: string(name='image_detail'),
  // 描述
  description?: string(name='description'),
  // 联系人
  dockingPeople: [ DockingPeopleInfo ](name='docking_people'),
  // 资质证明
  copyRight?: string(name='copy_right'),
  // 备注
  memo?: string(name='memo'),
}

model UpdateIpValueaddResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数字商品服务-IP授权服务-更新增值服务
 * Summary: 数字商品服务-IP授权服务-更新增值服务
 */
async function updateIpValueadd(request: UpdateIpValueaddRequest): UpdateIpValueaddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateIpValueaddEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-更新增值服务
 * Summary: 数字商品服务-IP授权服务-更新增值服务
 */
async function updateIpValueaddEx(request: UpdateIpValueaddRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateIpValueaddResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.valueadd.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetIpValueaddskuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // 服务id
  serviceId: string(name='service_id'),
  // sku
  skus: [ IpSkuEmphasisInfo ](name='skus'),
}

model SetIpValueaddskuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数字商品-IP授权-设置增值服务sku
 * Summary: 数字商品服务-IP授权服务-设置增值服务
 */
async function setIpValueaddsku(request: SetIpValueaddskuRequest): SetIpValueaddskuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setIpValueaddskuEx(request, headers, runtime);
}

/**
 * Description: 数字商品-IP授权-设置增值服务sku
 * Summary: 数字商品服务-IP授权服务-设置增值服务
 */
async function setIpValueaddskuEx(request: SetIpValueaddskuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetIpValueaddskuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.valueaddsku.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OnlineIpValueaddRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // 服务id
  serviceId: string(name='service_id'),
  // 是否上线，否为下线
  isOnline: boolean(name='is_online'),
}

model OnlineIpValueaddResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数字商品服务-IP授权服务-增值服务上下架操作
 * Summary: 数字商品服务-IP授权服务-服务上下架
 */
async function onlineIpValueadd(request: OnlineIpValueaddRequest): OnlineIpValueaddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return onlineIpValueaddEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-增值服务上下架操作
 * Summary: 数字商品服务-IP授权服务-服务上下架
 */
async function onlineIpValueaddEx(request: OnlineIpValueaddRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OnlineIpValueaddResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.valueadd.online', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpValueaddRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // 查询服务id
  serviceId: string(name='service_id'),
}

model QueryIpValueaddResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 增值服务详情
  valueAddedInfo?: ValueAddedServiceInfoWithSku(name='value_added_info'),
}

/**
 * Description: 数字商品-IP授权交易-增值服务查询
 * Summary: 数字商品服务-IP授权服务-增值服务查询
 */
async function queryIpValueadd(request: QueryIpValueaddRequest): QueryIpValueaddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpValueaddEx(request, headers, runtime);
}

/**
 * Description: 数字商品-IP授权交易-增值服务查询
 * Summary: 数字商品服务-IP授权服务-增值服务查询
 */
async function queryIpValueaddEx(request: QueryIpValueaddRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpValueaddResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.valueadd.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryIpValueaddRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // 归属账户id
  accountId?: string(name='account_id'),
  // 服务名字，模糊匹配
  serviceName?: string(name='service_name'),
  // 服务状态（0:待审核 1:审核拒绝 2:上线【审核通过】 3: 下线）
  status?: long(name='status'),
  // 第几页
  pageIndex: long(name='page_index'),
  // 每页长度
  pageSize: long(name='page_size'),
  // 开始时间
  beginCreateTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='begin_create_time'),
  // 结束时间
  engCreateTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='eng_create_time'),
}

model PagequeryIpValueaddResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 增值服务列表
  data?: [ ValueAddedServiceInfo ](name='data'),
  // 总数
  allCount?: long(name='all_count'),
}

/**
 * Description: 增值服务批量查询
 * Summary: 数字商品服务-IP授权服务-增值服务查询
 */
async function pagequeryIpValueadd(request: PagequeryIpValueaddRequest): PagequeryIpValueaddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryIpValueaddEx(request, headers, runtime);
}

/**
 * Description: 增值服务批量查询
 * Summary: 数字商品服务-IP授权服务-增值服务查询
 */
async function pagequeryIpValueaddEx(request: PagequeryIpValueaddRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryIpValueaddResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.valueadd.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadIpTradesalesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 上传记录的用户的链上账户Id
  accountId: string(name='account_id'),
  // 订单ID
  ipOrderId: string(name='ip_order_id'),
  // true 只上链不走真实支付，false 上链并链下真实支付账单
  onlyCallBlockchain: boolean(name='only_call_blockchain'),
  // 账单结算类型：即时计费0、按周计费1、按月计费2、按季度计费3。默认0
  billingType?: long(name='billing_type'),
  // 支付完成后的回调地址。如果为空，默认跳转到https://ipforce.cloud.alipay.com/
  payReturnUrl?: string(name='pay_return_url'),
  // 授权佣金比例
  authRate?: string(name='auth_rate'),
  // 定向授权按量付费单价
  authPrice?: string(name='auth_price'),
  // 商品销售数量
  totalAmount: long(name='total_amount'),
  // 销售金额
  totalSales: string(name='total_sales'),
  // 总的退款金额。不填默认为0
  totalRefundSales?: string(name='total_refund_sales'),
  // 实付金额（授权交易）
  totalPayment: string(name='total_payment'),
  // 销售数据列表
  ipSalesInfoList: [ IPSalesInfo ](name='ip_sales_info_list'),
}

model UploadIpTradesalesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 支付链接
  payUrl?: string(name='pay_url'),
  // 账单ID
  ipBillId?: string(name='ip_bill_id'),
}

/**
 * Description: 批量上传授权交易的销售数据
 * Summary: 数字商品服务-IP授权服务-上传销售数据
 */
async function uploadIpTradesales(request: UploadIpTradesalesRequest): UploadIpTradesalesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadIpTradesalesEx(request, headers, runtime);
}

/**
 * Description: 批量上传授权交易的销售数据
 * Summary: 数字商品服务-IP授权服务-上传销售数据
 */
async function uploadIpTradesalesEx(request: UploadIpTradesalesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadIpTradesalesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.tradesales.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthIpUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 用户授权code
  authCode: string(name='auth_code'),
}

model AuthIpUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户ID
  userId?: string(name='user_id'),
}

/**
 * Description: C端用户授权信息
 * Summary: 数字商品服务-IP授权服务-C用户授权
 */
async function authIpUser(request: AuthIpUserRequest): AuthIpUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authIpUserEx(request, headers, runtime);
}

/**
 * Description: C端用户授权信息
 * Summary: 数字商品服务-IP授权服务-C用户授权
 */
async function authIpUserEx(request: AuthIpUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthIpUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.user.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveIpGoodsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // ip id
  ipId: string(name='ip_id'),
}

model RemoveIpGoodsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数字商品服务-IP授权服务-删除ip商品
 * Summary: 数字商品服务-IP授权服务-IP删除
 */
async function removeIpGoods(request: RemoveIpGoodsRequest): RemoveIpGoodsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeIpGoodsEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-删除ip商品
 * Summary: 数字商品服务-IP授权服务-IP删除
 */
async function removeIpGoodsEx(request: RemoveIpGoodsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveIpGoodsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.goods.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CountIpNumRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // 账户id，为空则查全局
  accountId?: string(name='account_id'),
  // 渠道名称
  channelName?: string(name='channel_name'),
}

model CountIpNumResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 各个渠道的统计
  counterDetail?: [ ChannelCounter ](name='counter_detail'),
  // 总计值
  allCount?: long(name='all_count'),
}

/**
 * Description: 数字商品服务-IP授权服务-ip数量统计
 * Summary: 数字商品服务-IP授权服务-ip数量统计
 */
async function countIpNum(request: CountIpNumRequest): CountIpNumResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return countIpNumEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-ip数量统计
 * Summary: 数字商品服务-IP授权服务-ip数量统计
 */
async function countIpNumEx(request: CountIpNumRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountIpNumResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.num.count', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CountIpPvRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // 账户id，为空则统计全局
  accountId?: string(name='account_id'),
  // 渠道名称
  channelName?: string(name='channel_name'),
}

model CountIpPvResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总计
  allCount?: long(name='all_count'),
  // 渠道统计值
  counterDetails?: [ ChannelCounter ](name='counter_details'),
}

/**
 * Description: 数字商品服务-IP授权服务-pv统计
 * Summary: 数字商品服务-IP授权服务-pv统计
 */
async function countIpPv(request: CountIpPvRequest): CountIpPvResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return countIpPvEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-pv统计
 * Summary: 数字商品服务-IP授权服务-pv统计
 */
async function countIpPvEx(request: CountIpPvRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountIpPvResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.pv.count', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpCodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 正版码的编码
  code: string(name='code'),
}

model QueryIpCodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 正版码信息
  codeInfo?: IPCodeScannedInfo(name='code_info'),
  // 首次扫码信息
  firstScannedInfo?: IPSimpleScannedInfo(name='first_scanned_info'),
  // 扫码信息
  scannedInfoList?: [ IPSimpleScannedInfo ](name='scanned_info_list'),
  // 扫码次数
  scannedCount?: long(name='scanned_count'),
}

/**
 * Description: 查询正版码详细信息
 * Summary: 数字商品服务-IP授权服务-查正版码详情
 */
async function queryIpCode(request: QueryIpCodeRequest): QueryIpCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpCodeEx(request, headers, runtime);
}

/**
 * Description: 查询正版码详细信息
 * Summary: 数字商品服务-IP授权服务-查正版码详情
 */
async function queryIpCodeEx(request: QueryIpCodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpCodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.code.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CountIpAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 支持多链多合约,该参数为指明需要操作哪个智能合约环境(长度不超过50个字符)
  chainId?: string(name='chain_id'),
  // 场景码(入驻时申请)(长度不超过50个字符)
  productCode?: string(name='product_code'),
  // null返回所有数据，非空返回对应渠道的数据
  channelName?: string(name='channel_name'),
}

model CountIpAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户数量
  userCount?: long(name='user_count'),
  // 版权方数量
  sellerCount?: long(name='seller_count'),
  // 版权方数量
  buyerCount?: long(name='buyer_count'),
}

/**
 * Description: 数字商品服务-IP授权服务-账户统计
 * Summary: 数字商品服务-IP授权服务-账户统计
 */
async function countIpAccount(request: CountIpAccountRequest): CountIpAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return countIpAccountEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-账户统计
 * Summary: 数字商品服务-IP授权服务-账户统计
 */
async function countIpAccountEx(request: CountIpAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountIpAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.account.count', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpOrderstatisticRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 卖方ID
  sellerId?: string(name='seller_id'),
  // IP id
  ipId?: string(name='ip_id'),
  // 渠道名称
  channelName?: string(name='channel_name'),
}

model QueryIpOrderstatisticResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单总数
  totalOrderCount?: long(name='total_order_count'),
  // 总金额
  totalPaymentAmount?: string(name='total_payment_amount'),
  // 总客户数
  totalBuyerCount?: long(name='total_buyer_count'),
  // 统计数据
  orderStaList?: [ ChannelCounter ](name='order_sta_list'),
}

/**
 * Description: 查询渠道订单统计值
 * Summary: 数字商品服务-IP授权服务-查询订单统计
 */
async function queryIpOrderstatistic(request: QueryIpOrderstatisticRequest): QueryIpOrderstatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpOrderstatisticEx(request, headers, runtime);
}

/**
 * Description: 查询渠道订单统计值
 * Summary: 数字商品服务-IP授权服务-查询订单统计
 */
async function queryIpOrderstatisticEx(request: QueryIpOrderstatisticRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpOrderstatisticResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.orderstatistic.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateIpGoodsgalleryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 版权方链上账户ID
  accountId: string(name='account_id'),
  // ip链上id
  ipId: string(name='ip_id'),
  // IP图库链接，一个压缩包
  ipGalleryUrl: string(name='ip_gallery_url'),
}

model UpdateIpGoodsgalleryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 版权方更新IP图库
 * Summary: 数字商品服务-IP授权服务-ip更新图库
 */
async function updateIpGoodsgallery(request: UpdateIpGoodsgalleryRequest): UpdateIpGoodsgalleryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateIpGoodsgalleryEx(request, headers, runtime);
}

/**
 * Description: 版权方更新IP图库
 * Summary: 数字商品服务-IP授权服务-ip更新图库
 */
async function updateIpGoodsgalleryEx(request: UpdateIpGoodsgalleryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateIpGoodsgalleryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.goodsgallery.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpGoodsgalleryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 账户链上ID
  accountId: string(name='account_id'),
  // IP链上ID，只有版权方可以根据IPID查询图库信息。如果传入IPID，优先根据IPID查询图库信息。
  ipId?: string(name='ip_id'),
  // IP授权订单ID，版权方和商家均可根据订单ID查询图库信息
  ipOrderId?: string(name='ip_order_id'),
}

model QueryIpGoodsgalleryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 图库链接
  ipGalleryUrl?: string(name='ip_gallery_url'),
  // 图库临时下载链接，过期时间2小时
  ipGalleryTemporaryUrl?: string(name='ip_gallery_temporary_url'),
}

/**
 * Description: 版权方根据IPID查询图库，商家根据订单ID查询图库
 * Summary: 数字商品服务-IP授权服务-查询ip图库
 */
async function queryIpGoodsgallery(request: QueryIpGoodsgalleryRequest): QueryIpGoodsgalleryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpGoodsgalleryEx(request, headers, runtime);
}

/**
 * Description: 版权方根据IPID查询图库，商家根据订单ID查询图库
 * Summary: 数字商品服务-IP授权服务-查询ip图库
 */
async function queryIpGoodsgalleryEx(request: QueryIpGoodsgalleryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpGoodsgalleryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.goodsgallery.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetIpCodeinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 正版码对应的订单上版权方的账户链上ID
  accountId: string(name='account_id'),
  // 订单ID
  orderId: string(name='order_id'),
  // 正版码商品信息配置列表
  goodsInfoList?: [ IPCodeGoodsInfo ](name='goods_info_list'),
  // 正版码资源位配置信息列表
  adInfoList?: [ IPCodeAdvertisingInfo ](name='ad_info_list'),
  // ip版权方信息
  ipownerInfo?: IPCodeIpOwnerInfo(name='ipowner_info'),
  // (商家)配置正版码时间
  codeSetTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='code_set_time'),
  // 正版码配置附加信息，信息内容由调用方自定义。可以从配置查询和正版码详情接口上获取。
  extInfo?: string(name='ext_info'),
  // 正版码前缀，本期暂不支持
  showCodePrefix?: string(name='show_code_prefix'),
}

model SetIpCodeinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 配置正版码的商品信息和资源位信息
 * Summary: 数字商品服务-IP授权服务-正版码配置
 */
async function setIpCodeinfo(request: SetIpCodeinfoRequest): SetIpCodeinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setIpCodeinfoEx(request, headers, runtime);
}

/**
 * Description: 配置正版码的商品信息和资源位信息
 * Summary: 数字商品服务-IP授权服务-正版码配置
 */
async function setIpCodeinfoEx(request: SetIpCodeinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetIpCodeinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.codeinfo.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryIpGalleryinstructionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 账户链上ID
  accountId: string(name='account_id'),
  // 授权订单ID
  ipOrderId: string(name='ip_order_id'),
  // 页码
  pageNumber: long(name='page_number'),
  // 每页数据量大小
  pageSize: long(name='page_size'),
  // 数据排序顺序：正序还是倒序。默认按照下载时间排序。
  order: string(name='order'),
}

model PagequeryIpGalleryinstructionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 页码
  pageNumber?: long(name='page_number'),
  // 每页数据量大小
  pageSize?: long(name='page_size'),
  // 符合条件的数据总数
  totalCount?: long(name='total_count'),
  // 图库系在记录信息
  galleryInstructionList?: [ IPGalleryInstruction ](name='gallery_instruction_list'),
}

/**
 * Description: 查询订单的图库下载记录
 * Summary: 数字商品服务-IP授权服务-查询图库记录
 */
async function pagequeryIpGalleryinstruction(request: PagequeryIpGalleryinstructionRequest): PagequeryIpGalleryinstructionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryIpGalleryinstructionEx(request, headers, runtime);
}

/**
 * Description: 查询订单的图库下载记录
 * Summary: 数字商品服务-IP授权服务-查询图库记录
 */
async function pagequeryIpGalleryinstructionEx(request: PagequeryIpGalleryinstructionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryIpGalleryinstructionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.galleryinstruction.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmIpOrdergalleryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 必须传入：IP 版权方账户链上ID
  accountId: string(name='account_id'),
  // 授权订单ID
  ipOrderId: string(name='ip_order_id'),
}

model ConfirmIpOrdergalleryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 版权方确认订单图库信息
 * Summary: 数字商品服务-IP授权服务-订单图库确认
 */
async function confirmIpOrdergallery(request: ConfirmIpOrdergalleryRequest): ConfirmIpOrdergalleryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmIpOrdergalleryEx(request, headers, runtime);
}

/**
 * Description: 版权方确认订单图库信息
 * Summary: 数字商品服务-IP授权服务-订单图库确认
 */
async function confirmIpOrdergalleryEx(request: ConfirmIpOrdergalleryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmIpOrdergalleryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.ordergallery.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmIpAuthtradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 审核账户ID
  accountId: string(name='account_id'),
  // 授权订单ID
  ipOrderId: string(name='ip_order_id'),
  // 是否同意授权
  confirmResult: boolean(name='confirm_result'),
  // 审批信息备注，通过或不通过原因
  memo?: string(name='memo'),
}

model ConfirmIpAuthtradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单ID
  ipOrderId?: string(name='ip_order_id'),
  // 保底金支付链接
  payUrl?: string(name='pay_url'),
  // 保底金账单ID
  ipBillId?: string(name='ip_bill_id'),
}

/**
 * Description: 审批IP定向授权交易。如果订单状态是“合作待确认”，则审批后状态为“合作拒绝”或者“合作通过”。如果订单状态是”订单待审核“，则审批后状态为“审核失败”或者“申请中”。
 * Summary: 数字商品服务-IP授权服务-审批定向授权
 */
async function confirmIpAuthtrade(request: ConfirmIpAuthtradeRequest): ConfirmIpAuthtradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmIpAuthtradeEx(request, headers, runtime);
}

/**
 * Description: 审批IP定向授权交易。如果订单状态是“合作待确认”，则审批后状态为“合作拒绝”或者“合作通过”。如果订单状态是”订单待审核“，则审批后状态为“审核失败”或者“申请中”。
 * Summary: 数字商品服务-IP授权服务-审批定向授权
 */
async function confirmIpAuthtradeEx(request: ConfirmIpAuthtradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmIpAuthtradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.authtrade.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmIpPackagetradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 审核账户ID
  accountId: string(name='account_id'),
  // 授权订单ID
  ipOrderId: string(name='ip_order_id'),
  // 是否同意授权
  // 
  confirmResult: boolean(name='confirm_result'),
}

model ConfirmIpPackagetradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单ID
  ipOrderId?: string(name='ip_order_id'),
  // 保底金支付链接
  payUrl?: string(name='pay_url'),
  // 保底金账单ID
  ipBillId?: string(name='ip_bill_id'),
}

/**
 * Description: 审核套餐授权申请
 * Summary: 数字商品服务-IP授权服务-审批套餐授权
 */
async function confirmIpPackagetrade(request: ConfirmIpPackagetradeRequest): ConfirmIpPackagetradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmIpPackagetradeEx(request, headers, runtime);
}

/**
 * Description: 审核套餐授权申请
 * Summary: 数字商品服务-IP授权服务-审批套餐授权
 */
async function confirmIpPackagetradeEx(request: ConfirmIpPackagetradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmIpPackagetradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.packagetrade.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyIpPackagetradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 买方的链上账户Id
  accountId: string(name='account_id'),
  // IP授权交易时传入IP ID；增值服务交易时传入服务ID
  ipId: string(name='ip_id'),
  // true 只上链不走真实支付，false 上链并链下真实支付账单
  onlyCallBlockchain: boolean(name='only_call_blockchain'),
  // 终端商品价格区间
  priceRange: string(name='price_range'),
  // 套餐中包含终端商品数量
  amount: long(name='amount'),
  // 套餐交易应付金额，单位元，保留两位小数
  expectedTotalPrice: string(name='expected_total_price'),
  // 授权合作开始期限（毫秒时间戳）
  authBeginTime: long(name='auth_begin_time'),
  // 授权合作结束期限（毫秒时间戳）
  authEndTime: long(name='auth_end_time'),
  // 备注信息
  memo: string(name='memo'),
  // 附加条款
  additionalClause?: string(name='additional_clause'),
  // 授权产品范围
  authProductScope?: string(name='auth_product_scope'),
  // 授权地域范围
  authAreaScope?: string(name='auth_area_scope'),
  // 商品销售渠道
  salesChannel?: string(name='sales_channel'),
  // 0 IP交易，1 增值服务交易
  goodsType?: long(name='goods_type'),
  // 增值服务交易绑定的ip授权交易订单，增值服务交易必填
  relatedOrderId?: string(name='related_order_id'),
  // 支付完成后的回调地址。如果为空，默认跳转到https://ipforce.cloud.alipay.com/
  payReturnUrl?: string(name='pay_return_url'),
  // 授权类型
  authType?: string(name='auth_type'),
  // 授权模式，0普通授权，1独家授权
  authorizationModel?: [ long ](name='authorization_model'),
  // 订单功能选择，0 基础功能，1 领用收藏等
  features?: [ long ](name='features'),
}

model ApplyIpPackagetradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单ID
  ipOrderId?: string(name='ip_order_id'),
  // 支付信息
  payUrl?: string(name='pay_url'),
  // 账单ID
  // 
  ipBillId?: string(name='ip_bill_id'),
}

/**
 * Description: 商家申请套餐交易
 * Summary: 数字商品服务-IP授权服务-申请套餐交易
 */
async function applyIpPackagetrade(request: ApplyIpPackagetradeRequest): ApplyIpPackagetradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyIpPackagetradeEx(request, headers, runtime);
}

/**
 * Description: 商家申请套餐交易
 * Summary: 数字商品服务-IP授权服务-申请套餐交易
 */
async function applyIpPackagetradeEx(request: ApplyIpPackagetradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyIpPackagetradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.packagetrade.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyIpAuthtradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 采购者的链上账户Id
  accountId: string(name='account_id'),
  // IP授权交易时传入IP ID；增值服务交易时传入服务ID
  ipId: string(name='ip_id'),
  // 收费模式：0 销售抽佣, 1 按量付费
  chargeType?: long(name='charge_type'),
  // 授权计费比例
  authRate?: string(name='auth_rate'),
  // 按量付费的收费单价（按量付费模式必填）
  authPrice?: string(name='auth_price'),
  // 授权合作开始期限（毫秒时间戳）
  authBeginTime: long(name='auth_begin_time'),
  // 授权合作结束期限（毫秒时间戳）
  authEndTime: long(name='auth_end_time'),
  // 合同（文件URL）
  contract?: string(name='contract'),
  // 设计稿（文件URL）
  designDraft?: string(name='design_draft'),
  // 授权产品范围
  authProductScope?: string(name='auth_product_scope'),
  // 授权地域范围
  authAreaScope?: string(name='auth_area_scope'),
  // 商品销售渠道
  salesChannel?: string(name='sales_channel'),
  // 备注消息(不超过256个字符)
  memo: string(name='memo'),
  // 附加条款
  additionalClause?: string(name='additional_clause'),
  // 是否有保底金
  guaranteed: boolean(name='guaranteed'),
  // 支付的保底金金额
  guaranteedFund?: string(name='guaranteed_fund'),
  // 保底商品个数（按量付费），订单销售数量超过保底部分需按量付费
  guaranteedGoodsAmount?: long(name='guaranteed_goods_amount'),
  // 保底商品销售金额（销售抽佣），订单销售额超过保底部分需按比例抽拥
  guaranteedSales?: string(name='guaranteed_sales'),
  // 0 IP交易，1 增值服务交易
  goodsType?: long(name='goods_type'),
  // 增值服务交易绑定的ip授权交易订单，增值服务交易必填
  relatedOrderId?: string(name='related_order_id'),
  // 支付完成后的回调地址。如果为空，默认跳转到https://ipforce.cloud.alipay.com/
  payReturnUrl?: string(name='pay_return_url'),
  // 授权类型
  authType?: string(name='auth_type'),
  // 授权模式，0普通授权，1独家授权
  authorizationModel?: [ long ](name='authorization_model'),
  // 订单功能选择，0 基础功能，1 领用收藏等
  features?: [ long ](name='features'),
  // 合作申请时的订单ID，如没有前置的申请环节，则不填
  ipOrderId?: string(name='ip_order_id'),
}

model ApplyIpAuthtradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单ID
  ipOrderId?: string(name='ip_order_id'),
}

/**
 * Description: 版权方申请授权交易
 * Summary: 数字商品服务-IP授权服务-申请授权交易
 */
async function applyIpAuthtrade(request: ApplyIpAuthtradeRequest): ApplyIpAuthtradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyIpAuthtradeEx(request, headers, runtime);
}

/**
 * Description: 版权方申请授权交易
 * Summary: 数字商品服务-IP授权服务-申请授权交易
 */
async function applyIpAuthtradeEx(request: ApplyIpAuthtradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyIpAuthtradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.authtrade.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpCodeinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 账户链上ID
  accountId: string(name='account_id'),
  // 订单ID
  orderId: string(name='order_id'),
}

model QueryIpCodeinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单ID
  orderId?: string(name='order_id'),
  // 额外功能，包括基础功能，是否允许收藏等
  features?: [ long ](name='features'),
  // 正版码商品信息配置列表
  goodsInfoList?: [ IPCodeGoodsInfo ](name='goods_info_list'),
  // 正版码资源位配置信息列表
  adInfoList?: [ IPCodeAdvertisingInfo ](name='ad_info_list'),
  // ip版权方信息
  ipownerInfo?: IPCodeIpOwnerInfo(name='ipowner_info'),
  // 0:未配置，1:配置成功可展示，9:下架【本期不实现】
  ipCodeStatus?: long(name='ip_code_status'),
  // 正版码前缀
  // 
  showCodePrefix?: string(name='show_code_prefix'),
  // 正版码配置附加信息，信息内容由调用方自定义。
  extInfo?: string(name='ext_info'),
}

/**
 * Description: 查询正版码的配置信息
 * Summary: 数字商品服务-IP授权服务-查正版码配置
 */
async function queryIpCodeinfo(request: QueryIpCodeinfoRequest): QueryIpCodeinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpCodeinfoEx(request, headers, runtime);
}

/**
 * Description: 查询正版码的配置信息
 * Summary: 数字商品服务-IP授权服务-查正版码配置
 */
async function queryIpCodeinfoEx(request: QueryIpCodeinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpCodeinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.codeinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryIpApprovalwithupdateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础字段
  baseRequest: BaseRequestInfo(name='base_request'),
  // ip名称
  ipName?: string(name='ip_name'),
  // ip的id
  ipId?: string(name='ip_id'),
  // ip审批状态 0待审批，1 审批通过，2 审批拒绝
  approvalStatus?: long(name='approval_status'),
  // 分页
  pageSize: long(name='page_size'),
  // 分页
  pageIndex: long(name='page_index'),
  // ip类型
  ipType?: string(name='ip_type'),
  // 受众人群
  audienceGroup?: string(name='audience_group'),
  // 开始时间
  createBeginTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='create_begin_time'),
  // 结束时间
  createEndTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='create_end_time'),
  // 商品的链上租户id	
  accountId?: string(name='account_id'),
  // 是否需要按照创建时间倒序排序
  // 
  isCreateTimeSortDesc: boolean(name='is_create_time_sort_desc'),
  // 渠道名称
  channelName?: string(name='channel_name'),
}

model BatchqueryIpApprovalwithupdateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 带上更新信息
  ipList?: [ IpBasicInfoWithUpdate ](name='ip_list'),
  // 总数
  allCount?: long(name='all_count'),
}

/**
 * Description: ip审批信息批量查询（带上更新信息，供天猫测使用）
 * Summary: ip审批信息批量查询（带上更新信息）
 */
async function batchqueryIpApprovalwithupdate(request: BatchqueryIpApprovalwithupdateRequest): BatchqueryIpApprovalwithupdateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryIpApprovalwithupdateEx(request, headers, runtime);
}

/**
 * Description: ip审批信息批量查询（带上更新信息，供天猫测使用）
 * Summary: ip审批信息批量查询（带上更新信息）
 */
async function batchqueryIpApprovalwithupdateEx(request: BatchqueryIpApprovalwithupdateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryIpApprovalwithupdateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.approvalwithupdate.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateIpAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 链上账户id
  accountId: string(name='account_id'),
  // 商户账户名称
  merchantAliasName: string(name='merchant_alias_name'),
  // 商户类型(本期仅支持: 1:企业, 6:个人商户)
  merchantType?: long(name='merchant_type'),
  // 商户证件类型，201--统一社会信用证--营业执照号；
  merchantCertType?: long(name='merchant_cert_type'),
  // 本期支持统一社会信用证代码
  merchantCertNumber?: string(name='merchant_cert_number'),
  // 联系人信息
  contactInfo?: IPContactInfo(name='contact_info'),
  // 商户经营地址
  contactAddress?: IPAddressInfo(name='contact_address'),
  // 备注信息
  memo?: string(name='memo'),
  // 店铺名称
  shopName?: string(name='shop_name'),
  // 更多联系信息，用于运营联系商家
  // 注：更新时如果为空，则联系人信息被覆盖为空，更新时为空相当于删除功能
  additionalContactInfo?: [ SimpleContactInfo ](name='additional_contact_info'),
}

model UpdateIpAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数字商品-IP授权交易服务-商家账户信息补充，版权方联系人修改，仅支持版权方联系人修改
 * Summary: 数字商品服务-IP授权服务-账户信息补充
 */
async function updateIpAccount(request: UpdateIpAccountRequest): UpdateIpAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateIpAccountEx(request, headers, runtime);
}

/**
 * Description: 数字商品-IP授权交易服务-商家账户信息补充，版权方联系人修改，仅支持版权方联系人修改
 * Summary: 数字商品服务-IP授权服务-账户信息补充
 */
async function updateIpAccountEx(request: UpdateIpAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateIpAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.account.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpAccountsettlementRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 版权方的链上id
  accountId: string(name='account_id'),
  // 为空，返回所有数据，true，返回入驻数据，false，返回未入驻数据
  isFiltered?: boolean(name='is_filtered'),
}

model QueryIpAccountsettlementResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账号id
  accountId?: string(name='account_id'),
  // 入驻的渠道列表
  channelList?: [ AccountInChannels ](name='channel_list'),
}

/**
 * Description: 数字商品服务-IP-查询账户已经入驻的渠道列表
 * Summary: 数字商品服务-IP-查询账户渠道列表
 */
async function queryIpAccountsettlement(request: QueryIpAccountsettlementRequest): QueryIpAccountsettlementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpAccountsettlementEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP-查询账户已经入驻的渠道列表
 * Summary: 数字商品服务-IP-查询账户渠道列表
 */
async function queryIpAccountsettlementEx(request: QueryIpAccountsettlementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpAccountsettlementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.accountsettlement.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddIpAccountsettlementRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 版权方id
  accountId: string(name='account_id'),
  // 要开通的渠道
  channelName: string(name='channel_name'),
}

model AddIpAccountsettlementResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数字商品-IP授权服务-版权方用户申请开通新渠道
 * Summary: 数字商品-IP授权服务-申请开通新渠道
 */
async function addIpAccountsettlement(request: AddIpAccountsettlementRequest): AddIpAccountsettlementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addIpAccountsettlementEx(request, headers, runtime);
}

/**
 * Description: 数字商品-IP授权服务-版权方用户申请开通新渠道
 * Summary: 数字商品-IP授权服务-申请开通新渠道
 */
async function addIpAccountsettlementEx(request: AddIpAccountsettlementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddIpAccountsettlementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.accountsettlement.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SignIpOrdercontractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 订单ID
  ipOrderId: string(name='ip_order_id'),
  // 订单合同文件OSS文件key
  contractFileUrl?: string(name='contract_file_url'),
  // 备注信息
  memo?: string(name='memo'),
}

model SignIpOrdercontractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签署完成的文件OSS key。只有在签署流程全部完成后才会返回该数据。
  signedContractFile?: string(name='signed_contract_file'),
  // 签署完成的文件下载链接。只有在签署流程全部完成后才会返回该数据。
  signedContractFileUrl?: string(name='signed_contract_file_url'),
}

/**
 * Description: 签署交易订单的区块链合同
 * Summary: 数字商品服务-IP授权服务-签署订单合同
 */
async function signIpOrdercontract(request: SignIpOrdercontractRequest): SignIpOrdercontractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return signIpOrdercontractEx(request, headers, runtime);
}

/**
 * Description: 签署交易订单的区块链合同
 * Summary: 数字商品服务-IP授权服务-签署订单合同
 */
async function signIpOrdercontractEx(request: SignIpOrdercontractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SignIpOrdercontractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.ordercontract.sign', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetIpOrdergoodsidsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 订单ID
  ipOrderId: string(name='ip_order_id'),
  // 商品ID列表
  goodsIdList: [ string ](name='goods_id_list'),
}

model SetIpOrdergoodsidsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 授权订单绑定商品ID，后续上传的销售数据需满足已绑定的商品ID
 * Summary: 数字商品服务-IP授权服务-绑定商品ID
 */
async function setIpOrdergoodsids(request: SetIpOrdergoodsidsRequest): SetIpOrdergoodsidsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setIpOrdergoodsidsEx(request, headers, runtime);
}

/**
 * Description: 授权订单绑定商品ID，后续上传的销售数据需满足已绑定的商品ID
 * Summary: 数字商品服务-IP授权服务-绑定商品ID
 */
async function setIpOrdergoodsidsEx(request: SetIpOrdergoodsidsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetIpOrdergoodsidsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.ordergoodsids.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryIpSalesbydayRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 页码
  pageNumber: long(name='page_number'),
  // 每页数据量大小
  pageSize: long(name='page_size'),
  // 订单ID筛选条件
  ipOrderId?: string(name='ip_order_id'),
  // 日期
  date?: string(name='date'),
}

model PagequeryIpSalesbydayResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 页码
  pageNumber?: long(name='page_number'),
  // 页面数据量大小
  pageSize?: long(name='page_size'),
  // 数据总数
  totalCount?: long(name='total_count'),
  // T+1日的销售数据统计数据列表
  salesBDayList?: [ SalesByDay ](name='sales_b_day_list'),
}

/**
 * Description: 分页查询商户和订单的T+1日销售数据汇总数据
 * Summary: 数字商品服务-IP授权服务-查日销售数据
 */
async function pagequeryIpSalesbyday(request: PagequeryIpSalesbydayRequest): PagequeryIpSalesbydayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryIpSalesbydayEx(request, headers, runtime);
}

/**
 * Description: 分页查询商户和订单的T+1日销售数据汇总数据
 * Summary: 数字商品服务-IP授权服务-查日销售数据
 */
async function pagequeryIpSalesbydayEx(request: PagequeryIpSalesbydayRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryIpSalesbydayResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.salesbyday.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateIpCopyrightRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 【暂不支持中文】文件名称
  fileName: string(name='file_name'),
  // 文件oss地址
  fileUrl: string(name='file_url'),
  // 文件类型，IMAGE：图片文件；TEXT：文本文件；VIDEO：视屏；AUDIO：音频；ZIP：压缩包；FILE：其他文件
  fileType: string(name='file_type'),
  // 【需要真实的】版权方法人证件名称
  certName: string(name='cert_name'),
  // 证件类型
  certType: string(name='cert_type'),
  // 【需要真实的】版权方法人证件号码
  certNo: string(name='cert_no'),
  // 是否创建证书，此时默认选true
  createCertificate: boolean(name='create_certificate'),
  // 证书类型，公证处证书，值为NotaryOffice
  certificateType?: string(name='certificate_type'),
  // 是否创建证据包，默认选否，如果没有创建公证书，不支持证据包
  certificatePackage?: boolean(name='certificate_package'),
  // 公证处ID，默认为LUJIANG，鹭江公证处
  orgId?: string(name='org_id'),
  // 电话号码，生成公证处证书需要，格式范例，(86-573)2651630或(86)13738258505
  phoneNum?: string(name='phone_num'),
  // 备注，最长不超过512字符
  memo?: string(name='memo'),
}

model CreateIpCopyrightResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 版权登记id
  copyrightRegisterId?: string(name='copyright_register_id'),
}

/**
 * Description: 联动雀凿，为文件生成区块链证书，实现文件的版权保护
 * Summary: 数字商品服务-IP授权服务-文件版权保护
 */
async function createIpCopyright(request: CreateIpCopyrightRequest): CreateIpCopyrightResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createIpCopyrightEx(request, headers, runtime);
}

/**
 * Description: 联动雀凿，为文件生成区块链证书，实现文件的版权保护
 * Summary: 数字商品服务-IP授权服务-文件版权保护
 */
async function createIpCopyrightEx(request: CreateIpCopyrightRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIpCopyrightResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.copyright.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpCopyrightRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 版权登记id
  copyrightRegisterId: string(name='copyright_register_id'),
}

model QueryIpCopyrightResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证状态，PROCESSING：存证中；SUCCESS：存证成功；FAIL：存证失败
  status?: string(name='status'),
  // 文件hash
  hash?: string(name='hash'),
  // 存证交易hash
  txHash?: string(name='tx_hash'),
  // 存证块高
  blockHeight?: long(name='block_height'),
  // 存证时间
  timestamp?: long(name='timestamp'),
  // 证书oss地址
  certificateOss?: string(name='certificate_oss'),
  // 证书下载链接
  certificateDownurl?: string(name='certificate_downurl'),
  // 公证处证书编号
  certificateNo?: string(name='certificate_no'),
}

/**
 * Description: 数字商品-IP授权服务-文件版权状态查询
 * Summary: 数字商品-IP授权服务-文件版权状态查询
 */
async function queryIpCopyright(request: QueryIpCopyrightRequest): QueryIpCopyrightResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpCopyrightEx(request, headers, runtime);
}

/**
 * Description: 数字商品-IP授权服务-文件版权状态查询
 * Summary: 数字商品-IP授权服务-文件版权状态查询
 */
async function queryIpCopyrightEx(request: QueryIpCopyrightRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpCopyrightResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.copyright.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetIpOrdermemoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 订单ID
  ipOrderId: string(name='ip_order_id'),
  // 备注信息
  memo: string(name='memo'),
}

model SetIpOrdermemoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 编辑订单备注
 * Summary: 数字商品服务-IP授权服务-编辑订单备注
 */
async function setIpOrdermemo(request: SetIpOrdermemoRequest): SetIpOrdermemoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setIpOrdermemoEx(request, headers, runtime);
}

/**
 * Description: 编辑订单备注
 * Summary: 数字商品服务-IP授权服务-编辑订单备注
 */
async function setIpOrdermemoEx(request: SetIpOrdermemoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetIpOrdermemoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.ordermemo.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmIpAccountsettlementRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 版权方的链上id
  accountId: string(name='account_id'),
  // 开通的渠道名称
  channelName: string(name='channel_name'),
  // 审批意见，refuse,不同意开通，agree，同意开通，默认为agree，本期暂不支持不同意开通
  approveComment: string(name='approve_comment'),
  // 备注信息
  memo?: string(name='memo'),
}

model ConfirmIpAccountsettlementResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数字商品服务-IP-确认开通版权方渠道
 * Summary: 数字商品服务-IP-开通版权方渠道
 */
async function confirmIpAccountsettlement(request: ConfirmIpAccountsettlementRequest): ConfirmIpAccountsettlementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmIpAccountsettlementEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP-确认开通版权方渠道
 * Summary: 数字商品服务-IP-开通版权方渠道
 */
async function confirmIpAccountsettlementEx(request: ConfirmIpAccountsettlementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmIpAccountsettlementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.accountsettlement.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryIpSalesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 订单ID。和账单ID 两个字段只能选填一个
  ipOrderId: string(name='ip_order_id'),
  // 销售数据ID
  salesBizId: string(name='sales_biz_id'),
  // 排序字段
  orderBy: string(name='order_by'),
  // 排序顺序：正序还是倒序
  order: string(name='order'),
  // 页码
  pageNumber: long(name='page_number'),
  // 每页数据量大小
  pageSize: long(name='page_size'),
}

model PagequeryIpSalesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单ID
  ipOrderId?: string(name='ip_order_id'),
  // 账单ID
  salesBizId?: string(name='sales_biz_id'),
  // IP授权销售数据
  ipSalesInfoList?: [ IPSalesInfo ](name='ip_sales_info_list'),
  // 页码
  pageNumber?: long(name='page_number'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 销售数据总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 分页查询订单的销售数据详情列表
 * Summary: 数字商品服务-IP授权服务-查询销售数据
 */
async function pagequeryIpSales(request: PagequeryIpSalesRequest): PagequeryIpSalesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryIpSalesEx(request, headers, runtime);
}

/**
 * Description: 分页查询订单的销售数据详情列表
 * Summary: 数字商品服务-IP授权服务-查询销售数据
 */
async function pagequeryIpSalesEx(request: PagequeryIpSalesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryIpSalesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.sales.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryIpAccountsettlementRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 渠道名称
  channelName: string(name='channel_name'),
  // 申请状态，0为全部，1为待审核，2为已审核
  applyStatus: string(name='apply_status'),
  // 分页大小
  pageSize: long(name='page_size'),
  // 分页索引
  pageIndex: long(name='page_index'),
  // 备注信息
  memo?: string(name='memo'),
}

model BatchqueryIpAccountsettlementResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 渠道对应的版权方信息
  accountInfo?: [ AccountSettlementInfo ](name='account_info'),
  // 结果总数，不是列表值，用于分页
  allCount?: long(name='all_count'),
}

/**
 * Description: 数字商品-IP授权服务-查询申请入驻该渠道的所有版权方列表
 * Summary: 数字商品-IP授权服务-查询版权方列表
 */
async function batchqueryIpAccountsettlement(request: BatchqueryIpAccountsettlementRequest): BatchqueryIpAccountsettlementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryIpAccountsettlementEx(request, headers, runtime);
}

/**
 * Description: 数字商品-IP授权服务-查询申请入驻该渠道的所有版权方列表
 * Summary: 数字商品-IP授权服务-查询版权方列表
 */
async function batchqueryIpAccountsettlementEx(request: BatchqueryIpAccountsettlementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryIpAccountsettlementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.accountsettlement.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PullIpCodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 正版码批次编码
  codeBatchId: string(name='code_batch_id'),
  // 分页参数:页码
  pageIndex: long(name='page_index'),
  // 分页参数:每页条目数(请小于等于100)
  pageSize: long(name='page_size'),
}

model PullIpCodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 正版码列表(小程序扫描可跳转)
  codeList?: [ string ](name='code_list'),
  // 展示码列表(和code_list一一对应)
  showCodeList?: [ string ](name='show_code_list'),
  // 交易订单ID
  orderId?: string(name='order_id'),
  // IP商家的链上账户ID
  buyerAccountId?: string(name='buyer_account_id'),
  // IP版权方的链上账户ID
  sellerAccountId?: string(name='seller_account_id'),
  // IPID
  ipId?: string(name='ip_id'),
  // IP名称
  ipName?: string(name='ip_name'),
  // IP主图的OSS地址
  ipImage?: string(name='ip_image'),
  // IP描述
  ipDesc?: string(name='ip_desc'),
  // 该批次正版码的过期时间戳(毫秒)
  expiredDate?: long(name='expired_date'),
  // 已经申请的总数量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 数字商品服务-IP授权服务-可跳转正版码分页查询: 小程序可扫描的正版码分页查询。
 * Summary: 数字商品服务-IP授权服务-天猫查正版码
 */
async function pullIpCode(request: PullIpCodeRequest): PullIpCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pullIpCodeEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-可跳转正版码分页查询: 小程序可扫描的正版码分页查询。
 * Summary: 数字商品服务-IP授权服务-天猫查正版码
 */
async function pullIpCodeEx(request: PullIpCodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PullIpCodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.code.pull', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryIpGoodsinterestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 商品id
  ipId?: string(name='ip_id'),
  // ip名称，支持模糊匹配
  ipName?: string(name='ip_name'),
  // ip的上架渠道
  channelName: string(name='channel_name'),
  // 分页大小
  pageSize: long(name='page_size'),
  // 分页索引
  pageIndex: long(name='page_index'),
  // ip等级
  ipLevel?: [ long ](name='ip_level'),
  // ip类型
  ipType: [ string ](name='ip_type'),
  // 受众人群
  audienceGroup: [ string ](name='audience_group'),
  // 是否需要按照创建时间倒序排序
  isCreateTimeSortDesc: boolean(name='is_create_time_sort_desc'),
  // 是否需要按照pv排序（0:不需要，1:正序，2:倒序），默认选1
  isSortByPv: long(name='is_sort_by_pv'),
  // 保底金区间，0：0；1：10万以下；2:10-30万；3:30-50万；4:50万以上
  guaranteeRange?: [ string ](name='guarantee_range'),
}

model BatchqueryIpGoodsinterestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ip重要信息
  ipList?: [ IpEmphasisInfo ](name='ip_list'),
  // 结果总数，不是列表值，用于分页
  allCount?: long(name='all_count'),
}

/**
 * Description: 数字商品服务-IP-猜你喜欢的商品
 * Summary: 数字商品服务-IP-查询用户感兴趣的商品
 */
async function batchqueryIpGoodsinterest(request: BatchqueryIpGoodsinterestRequest): BatchqueryIpGoodsinterestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryIpGoodsinterestEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP-猜你喜欢的商品
 * Summary: 数字商品服务-IP-查询用户感兴趣的商品
 */
async function batchqueryIpGoodsinterestEx(request: BatchqueryIpGoodsinterestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryIpGoodsinterestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.goodsinterest.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpTwcaccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 用户的链上账户Id
  accountId: string(name='account_id'),
}

model QueryIpTwcaccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 机构账号
  organizationId?: string(name='organization_id'),
  // 用户类型为个人时返回用户账号；用户类型为机构时返回经办人账号
  userId?: string(name='user_id'),
  // 是否签署了静默授权
  silentlySign?: boolean(name='silently_sign'),
  // 账户链上ID
  accountId?: string(name='account_id'),
}

/**
 * Description: 查询区块链合同账号信息
 * Summary: 数字商品服务-IP授权服务-合同账户查询
 */
async function queryIpTwcaccount(request: QueryIpTwcaccountRequest): QueryIpTwcaccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpTwcaccountEx(request, headers, runtime);
}

/**
 * Description: 查询区块链合同账号信息
 * Summary: 数字商品服务-IP授权服务-合同账户查询
 */
async function queryIpTwcaccountEx(request: QueryIpTwcaccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpTwcaccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.twcaccount.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindIpShopRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // IP商家的链上账户Id
  accountId: string(name='account_id'),
  // 淘宝卖家官方昵称
  sellerNick: string(name='seller_nick'),
  // 授权渠道名称(1: 淘宝网)
  channelType: long(name='channel_type'),
  // 数据授权方式(1: 淘宝开放平台)
  authType: long(name='auth_type'),
}

model BindIpShopResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 淘宝店铺数据授权跳转链接
  authUri?: string(name='auth_uri'),
  // 授权申请的内部编码
  itemCode?: string(name='item_code'),
}

/**
 * Description: 数字商品服务-IP授权服务-授权URI: 获取授权URI, 用于淘宝店铺授权数据给IPforce
 * Summary: 数字商品服务-IP授权服务-授权URI
 */
async function bindIpShop(request: BindIpShopRequest): BindIpShopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindIpShopEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-授权URI: 获取授权URI, 用于淘宝店铺授权数据给IPforce
 * Summary: 数字商品服务-IP授权服务-授权URI
 */
async function bindIpShopEx(request: BindIpShopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindIpShopResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.shop.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthIpShopRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 授权申请的内部编码
  itemCode: string(name='item_code'),
  // 淘宝开放平台回调的授权编码
  authCode: string(name='auth_code'),
}

model AuthIpShopResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数字商品服务-IP授权服务-店铺授权结果: 店铺登陆淘宝授权后的授权结果回调
 * Summary: 数字商品服务-IP授权服务-店铺授权结果
 */
async function authIpShop(request: AuthIpShopRequest): AuthIpShopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authIpShopEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-店铺授权结果: 店铺登陆淘宝授权后的授权结果回调
 * Summary: 数字商品服务-IP授权服务-店铺授权结果
 */
async function authIpShopEx(request: AuthIpShopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthIpShopResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.shop.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListIpShopRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // IP商家的链上账户Id
  accountId: string(name='account_id'),
  // 授权申请的内部编码
  itemCode?: string(name='item_code'),
  // 分页下标(从1开始)
  pageIndex: long(name='page_index'),
  // 一页的分页大小
  pageSize: long(name='page_size'),
}

model ListIpShopResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总数量
  totalCount?: long(name='total_count'),
  // 店铺详情列表
  shopList?: [ IPShopInfo ](name='shop_list'),
}

/**
 * Description: 数字商品服务-IP授权服务-商户授权列表: 商户获取其店铺授权历史列表
 * Summary: 数字商品服务-IP授权服务-商户授权列表
 */
async function listIpShop(request: ListIpShopRequest): ListIpShopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listIpShopEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-商户授权列表: 商户获取其店铺授权历史列表
 * Summary: 数字商品服务-IP授权服务-商户授权列表
 */
async function listIpShopEx(request: ListIpShopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListIpShopResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.shop.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpCodecollectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础信息
  baseRequest: BaseRequestInfo(name='base_request'),
  // 正版码ID
  ipCode: string(name='ip_code'),
}

model QueryIpCodecollectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 正版码商品信息配置列表,包含产品名和出品方
  goodsInfoList?: [ IPCodeGoodsInfo ](name='goods_info_list'),
  // 正版码流转信息
  codeFlowList?: [ IPCodeFlowInfo ](name='code_flow_list'),
  // 正版码生命周期
  codeLifeCircle?: IPCodeConfigTimeInfo(name='code_life_circle'),
  // 区块链信息
  chainInfo?: IPCodeChainInfo(name='chain_info'),
  // 版权信息
  ipownerInfo?: IPCodeIpOwnerInfo(name='ipowner_info'),
}

/**
 * Description: 查询正版码收藏证书详情，主要包括该正版码对应的ip商品，流转信息，区块信息等
 * Summary: 查询正版码收藏证书详情
 */
async function queryIpCodecollect(request: QueryIpCodecollectRequest): QueryIpCodecollectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpCodecollectEx(request, headers, runtime);
}

/**
 * Description: 查询正版码收藏证书详情，主要包括该正版码对应的ip商品，流转信息，区块信息等
 * Summary: 查询正版码收藏证书详情
 */
async function queryIpCodecollectEx(request: QueryIpCodecollectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpCodecollectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.codecollect.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetIpShopRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // IP商家的链上账户Id
  accountId: string(name='account_id'),
  // 宝贝Id(可以是ItemId, 也可以是SkuId或其他Id)
  goodId: string(name='good_id'),
  // 类型(1: ItemId)
  idType: long(name='id_type'),
  // 淘宝卖家的官方昵称
  sellerNick: string(name='seller_nick'),
}

model GetIpShopResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 店铺商品详情
  goodInfo?: IPShopItemInfo(name='good_info'),
}

/**
 * Description: 数字商品服务-IP授权服务-商品查询: 查询单个商品信息(淘宝开放平台数据)
 * Summary: 数字商品服务-IP授权服务-商品查询
 */
async function getIpShop(request: GetIpShopRequest): GetIpShopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getIpShopEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-商品查询: 查询单个商品信息(淘宝开放平台数据)
 * Summary: 数字商品服务-IP授权服务-商品查询
 */
async function getIpShopEx(request: GetIpShopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetIpShopResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.shop.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetIpOrdergoodsidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 订单ID
  ipOrderId: string(name='ip_order_id'),
  // 要绑定的商品信息
  goodsInfoList: [ IPOrderGoods ](name='goods_info_list'),
}

model SetIpOrdergoodsidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 授权订单绑定商品ID，后续上传的销售数据需满足已绑定的商品ID
 * Summary: 数字商品服务-IP授权服务-绑定商品ID
 */
async function setIpOrdergoodsid(request: SetIpOrdergoodsidRequest): SetIpOrdergoodsidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setIpOrdergoodsidEx(request, headers, runtime);
}

/**
 * Description: 授权订单绑定商品ID，后续上传的销售数据需满足已绑定的商品ID
 * Summary: 数字商品服务-IP授权服务-绑定商品ID
 */
async function setIpOrdergoodsidEx(request: SetIpOrdergoodsidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetIpOrdergoodsidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.ordergoodsid.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetIpSalescorrectionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求信息
  baseRequest: BaseRequestInfo(name='base_request'),
  // 订单ID
  ipOrderId: string(name='ip_order_id'),
  // 订单的数据ID，订单中每个数据ID唯一
  salesBizId: string(name='sales_biz_id'),
  // 数量校正，负数表示减少本次销售数量，但减少后宗销售数量不能小于0。不校正数量则填0.
  correctAmount: long(name='correct_amount'),
  // 销售金额校正，单位元，负数表示减少本次销售金额，但减少后销售金额不能小于0。不校正数量则填0.00。
  correctSales: string(name='correct_sales'),
}

model SetIpSalescorrectionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 商家校正授权订单的销售数据
 * Summary: 数字商品服务-IP授权服务-校正销售数据
 */
async function setIpSalescorrection(request: SetIpSalescorrectionRequest): SetIpSalescorrectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setIpSalescorrectionEx(request, headers, runtime);
}

/**
 * Description: 商家校正授权订单的销售数据
 * Summary: 数字商品服务-IP授权服务-校正销售数据
 */
async function setIpSalescorrectionEx(request: SetIpSalescorrectionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetIpSalescorrectionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.salescorrection.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmIpSalessummaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求信息
  baseRequest: BaseRequestInfo(name='base_request'),
  // 订单ID
  ipOrderId: string(name='ip_order_id'),
  // 订单的数据ID，订单中每个数据ID唯一
  salesBizId: string(name='sales_biz_id'),
  // 商户确认则传商户的链上ID；版权方确认或者拒绝则传版权方的链上ID
  accountId: string(name='account_id'),
  // 确认或者拒绝，true确认，false拒绝
  accept: boolean(name='accept'),
  // 备注信息
  memo?: string(name='memo'),
}

model ConfirmIpSalessummaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账单支付链接
  payUrl?: string(name='pay_url'),
  // 账单ID
  ipBillId?: string(name='ip_bill_id'),
}

/**
 * Description: 商户确认销售数据。版权方确认或者拒绝销售数据
 * Summary: 数字商品服务-IP授权服务-确认销售数据
 */
async function confirmIpSalessummary(request: ConfirmIpSalessummaryRequest): ConfirmIpSalessummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmIpSalessummaryEx(request, headers, runtime);
}

/**
 * Description: 商户确认销售数据。版权方确认或者拒绝销售数据
 * Summary: 数字商品服务-IP授权服务-确认销售数据
 */
async function confirmIpSalessummaryEx(request: ConfirmIpSalessummaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmIpSalessummaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.salessummary.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadIpSaleseverylistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 授权订单ID
  ipOrderId: string(name='ip_order_id'),
  // 逐条销售数据信息列表
  salesEveryList: [ IPSalesEvery ](name='sales_every_list'),
}

model UploadIpSaleseverylistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 上传授权订单的逐条销售数据
 * Summary: 数字商品服务-IP授权服务-销售数据上传
 */
async function uploadIpSaleseverylist(request: UploadIpSaleseverylistRequest): UploadIpSaleseverylistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadIpSaleseverylistEx(request, headers, runtime);
}

/**
 * Description: 上传授权订单的逐条销售数据
 * Summary: 数字商品服务-IP授权服务-销售数据上传
 */
async function uploadIpSaleseverylistEx(request: UploadIpSaleseverylistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadIpSaleseverylistResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.saleseverylist.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryIpSalessummaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 订单ID。订单ID和账单ID二选一传入。
  ipOrderId?: string(name='ip_order_id'),
  // 账单ID。订单ID和账单ID二选一传入。
  ipBillId?: string(name='ip_bill_id'),
  // 销售数据状态：1初始化，2商户确认，3版权方确认，4账单生成，5商户已校正，6版权方拒绝
  status?: long(name='status'),
  // 排序字段
  orderBy: string(name='order_by'),
  // 排序顺序：正序还是倒序
  order: string(name='order'),
  // 页码
  pageNumber: long(name='page_number'),
  // 每页数据量大小。不大于100。
  pageSize: long(name='page_size'),
}

model PagequeryIpSalessummaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单ID
  ipOrderId?: string(name='ip_order_id'),
  // 账单ID
  ipBillId?: string(name='ip_bill_id'),
  // 销售数据汇总信息列表
  ipSalesSummaryList?: [ IPSalesSummary ](name='ip_sales_summary_list'),
  // 页码
  pageNumber?: long(name='page_number'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 销售数据总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询订单或者账单的销售数据汇总信息列表
 * Summary: 数字商品服务-IP授权服务-查询销售数据
 */
async function pagequeryIpSalessummary(request: PagequeryIpSalessummaryRequest): PagequeryIpSalessummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryIpSalessummaryEx(request, headers, runtime);
}

/**
 * Description: 查询订单或者账单的销售数据汇总信息列表
 * Summary: 数字商品服务-IP授权服务-查询销售数据
 */
async function pagequeryIpSalessummaryEx(request: PagequeryIpSalessummaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryIpSalessummaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.salessummary.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReopenIpBillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 账单ID
  ipBillId: string(name='ip_bill_id'),
}

model ReopenIpBillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账单ID
  ipBillId?: string(name='ip_bill_id'),
  // 新的支付链接
  payUrl?: string(name='pay_url'),
}

/**
 * Description: 账单超时关闭的情况下，重新生成支付链接，变为待支付状态
 * Summary: 数字商品服务-IP授权服务-刷新账单状态
 */
async function reopenIpBill(request: ReopenIpBillRequest): ReopenIpBillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reopenIpBillEx(request, headers, runtime);
}

/**
 * Description: 账单超时关闭的情况下，重新生成支付链接，变为待支付状态
 * Summary: 数字商品服务-IP授权服务-刷新账单状态
 */
async function reopenIpBillEx(request: ReopenIpBillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReopenIpBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.bill.reopen', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitIpAuthtradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 采购者的链上账户Id
  accountId: string(name='account_id'),
  // IP授权交易时传入IP ID；增值服务交易时传入服务ID
  ipId: string(name='ip_id'),
  // 0 IP交易，1 增值服务交易
  goodsType?: long(name='goods_type'),
  // 申请授权合作的备注信息
  applyInfo: IPOrderApplyInfo(name='apply_info'),
}

model InitIpAuthtradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单ID
  ipOrderId?: string(name='ip_order_id'),
}

/**
 * Description: 下单问询，商家申请合作授权
 * Summary: 数字商品服务-IP授权服务-授权交易问询
 */
async function initIpAuthtrade(request: InitIpAuthtradeRequest): InitIpAuthtradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initIpAuthtradeEx(request, headers, runtime);
}

/**
 * Description: 下单问询，商家申请合作授权
 * Summary: 数字商品服务-IP授权服务-授权交易问询
 */
async function initIpAuthtradeEx(request: InitIpAuthtradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitIpAuthtradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.authtrade.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpOrderhistoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 订单ID
  ipOrderId: string(name='ip_order_id'),
}

model QueryIpOrderhistoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单列表
  orderList?: [ IPOrder ](name='order_list'),
}

/**
 * Description: 查询订单历史信息
 * Summary: 数字商品服务-IP授权服务-查询订单历史
 */
async function queryIpOrderhistory(request: QueryIpOrderhistoryRequest): QueryIpOrderhistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpOrderhistoryEx(request, headers, runtime);
}

/**
 * Description: 查询订单历史信息
 * Summary: 数字商品服务-IP授权服务-查询订单历史
 */
async function queryIpOrderhistoryEx(request: QueryIpOrderhistoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpOrderhistoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.orderhistory.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmIpBillpayRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 账单ID
  ipBillId: string(name='ip_bill_id'),
}

model ConfirmIpBillpayResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账单ID
  ipBillId?: string(name='ip_bill_id'),
  // 新的支付链接
  payUrl?: string(name='pay_url'),
}

/**
 * Description: 版权方确认线下回款，生成版权方需要支付的手续费账单和支付链接
 * Summary: 数字商品服务-IP授权服务-确认线下回款
 */
async function confirmIpBillpay(request: ConfirmIpBillpayRequest): ConfirmIpBillpayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmIpBillpayEx(request, headers, runtime);
}

/**
 * Description: 版权方确认线下回款，生成版权方需要支付的手续费账单和支付链接
 * Summary: 数字商品服务-IP授权服务-确认线下回款
 */
async function confirmIpBillpayEx(request: ConfirmIpBillpayRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmIpBillpayResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.billpay.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DisableIpCodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 发起失效请求的区块链账户ID
  accountId: string(name='account_id'),
  // 要被失效的UNI的完整编码
  uniCode: string(name='uni_code'),
}

model DisableIpCodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数字商品服务-IP授权服务-单码失效: 将UNI码失效,不可逆。
 * Summary: 数字商品服务-IP授权服务-单码失效
 */
async function disableIpCode(request: DisableIpCodeRequest): DisableIpCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return disableIpCodeEx(request, headers, runtime);
}

/**
 * Description: 数字商品服务-IP授权服务-单码失效: 将UNI码失效,不可逆。
 * Summary: 数字商品服务-IP授权服务-单码失效
 */
async function disableIpCodeEx(request: DisableIpCodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableIpCodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.code.disable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadIpCodecirculationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 		
  // 正版码的编码
  code: string(name='code'),
  // 正版码流转信息，每次最多10条信息。
  codeCirculationList: [ CodeCirculation ](name='code_circulation_list'),
}

model UploadIpCodecirculationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 上传正版码的流转信息
 * Summary: 数字商品服务-IP授权服务-上传流转信息
 */
async function uploadIpCodecirculation(request: UploadIpCodecirculationRequest): UploadIpCodecirculationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadIpCodecirculationEx(request, headers, runtime);
}

/**
 * Description: 上传正版码的流转信息
 * Summary: 数字商品服务-IP授权服务-上传流转信息
 */
async function uploadIpCodecirculationEx(request: UploadIpCodecirculationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadIpCodecirculationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.codecirculation.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryIpCodecirculationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基础请求参数
  baseRequest: BaseRequestInfo(name='base_request'),
  // 正版码的编码
  code: string(name='code'),
  // 页码
  pageNumber: long(name='page_number'),
  // 每页数据量大小(请小于等于100)
  pageSize: long(name='page_size'),
  // 根据流转时间 排序顺序：正序还是倒序
  order: string(name='order'),
}

model PagequeryIpCodecirculationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 正版码流转信息列表
  codeCirculationList?: [ CodeCirculation ](name='code_circulation_list'),
  // 正版码的流转信息总数
  totalCount?: long(name='total_count'),
  // 页码
  pageNumber?: long(name='page_number'),
  // 页面数据量大小
  pageSize?: long(name='page_size'),
}

/**
 * Description: 分页查询正版码的流转信息
 * Summary: 数字商品服务-IP授权服务-查询流转信息
 */
async function pagequeryIpCodecirculation(request: PagequeryIpCodecirculationRequest): PagequeryIpCodecirculationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryIpCodecirculationEx(request, headers, runtime);
}

/**
 * Description: 分页查询正版码的流转信息
 * Summary: 数字商品服务-IP授权服务-查询流转信息
 */
async function pagequeryIpCodecirculationEx(request: PagequeryIpCodecirculationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryIpCodecirculationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.ip.codecirculation.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBlockanalysisBlockRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块高度
  blockNumber: long(name='block_number'),
  // 链ID
  chainId: string(name='chain_id'),
  // 代理查询区块信息，传入代理租户需有代理权限。接口会返回调用者和被代理租户能查看的所有交易信息。
  delegatedTenantIds?: [ string ](name='delegated_tenant_ids'),
}

model QueryBlockanalysisBlockResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 区块信息
  block?: Block(name='block'),
  // 区块高度
  blockNumber?: long(name='block_number'),
  // 链ID
  chainId?: string(name='chain_id'),
  // 过滤后的交易数量
  filteredTxCount?: long(name='filtered_tx_count'),
  // 区块中交易总数
  totalTxCount?: long(name='total_tx_count'),
}

/**
 * Description: 获取特定高度的区块信息
 * Summary: 数字商品服务-拉块服务-获取区块信息
 */
async function queryBlockanalysisBlock(request: QueryBlockanalysisBlockRequest): QueryBlockanalysisBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBlockanalysisBlockEx(request, headers, runtime);
}

/**
 * Description: 获取特定高度的区块信息
 * Summary: 数字商品服务-拉块服务-获取区块信息
 */
async function queryBlockanalysisBlockEx(request: QueryBlockanalysisBlockRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBlockanalysisBlockResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.blockanalysis.block.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBlockanalysisLastblocknumberRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
}

model QueryBlockanalysisLastblocknumberResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 区块链最高区块高度
  blockNumber?: long(name='block_number'),
}

/**
 * Description: 获取最新区块高度
 * Summary: 数字商品服务-拉块服务-获取最新区块高度
 */
async function queryBlockanalysisLastblocknumber(request: QueryBlockanalysisLastblocknumberRequest): QueryBlockanalysisLastblocknumberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBlockanalysisLastblocknumberEx(request, headers, runtime);
}

/**
 * Description: 获取最新区块高度
 * Summary: 数字商品服务-拉块服务-获取最新区块高度
 */
async function queryBlockanalysisLastblocknumberEx(request: QueryBlockanalysisLastblocknumberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBlockanalysisLastblocknumberResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.blockanalysis.lastblocknumber.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBlockanalysisOpenedequitiesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 每页数据量
  count?: long(name='count'),
  // 页数
  page?: long(name='page'),
}

model QueryBlockanalysisOpenedequitiesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 权益商品信息详细信息list
  equities?: [ OpenedEquity ](name='equities'),
}

/**
 * Description: 获取公开的或者已授权的权益商品信息
 * Summary: 数字商品服务-拉块服务-获取已授权商品
 */
async function queryBlockanalysisOpenedequities(request: QueryBlockanalysisOpenedequitiesRequest): QueryBlockanalysisOpenedequitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBlockanalysisOpenedequitiesEx(request, headers, runtime);
}

/**
 * Description: 获取公开的或者已授权的权益商品信息
 * Summary: 数字商品服务-拉块服务-获取已授权商品
 */
async function queryBlockanalysisOpenedequitiesEx(request: QueryBlockanalysisOpenedequitiesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBlockanalysisOpenedequitiesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.blockanalysis.openedequities.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBlockanalysisUserpriceupdatedequitiesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 每页数量
  count?: long(name='count'),
  // 页码
  page?: long(name='page'),
}

model QueryBlockanalysisUserpriceupdatedequitiesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 权益商品信息详细信息list
  equities?: [ UserPriceEquity ](name='equities'),
}

/**
 * Description: 查询已设置过用户价格的有效权益商品信息
 * Summary: 数字商品服务-拉块服务-已设用户价格商品
 */
async function queryBlockanalysisUserpriceupdatedequities(request: QueryBlockanalysisUserpriceupdatedequitiesRequest): QueryBlockanalysisUserpriceupdatedequitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBlockanalysisUserpriceupdatedequitiesEx(request, headers, runtime);
}

/**
 * Description: 查询已设置过用户价格的有效权益商品信息
 * Summary: 数字商品服务-拉块服务-已设用户价格商品
 */
async function queryBlockanalysisUserpriceupdatedequitiesEx(request: QueryBlockanalysisUserpriceupdatedequitiesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBlockanalysisUserpriceupdatedequitiesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.blockanalysis.userpriceupdatedequities.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBlockanalysisUnwriteoffvalueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资产ID
  assetId: string(name='asset_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 要查询的租户ID
  optTenantId: string(name='opt_tenant_id'),
}

model QueryBlockanalysisUnwriteoffvalueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 资产ID
  assetId?: string(name='asset_id'),
  // 租户ID
  tenantId?: string(name='tenant_id'),
  // 未核销的资产总额（单位：元）
  totalValue?: string(name='total_value'),
}

/**
 * Description: 查询商户的可提现资产价值(单位:分)
 * Summary: 数字商品服务-拉块服务-查询可提现资产
 */
async function queryBlockanalysisUnwriteoffvalue(request: QueryBlockanalysisUnwriteoffvalueRequest): QueryBlockanalysisUnwriteoffvalueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBlockanalysisUnwriteoffvalueEx(request, headers, runtime);
}

/**
 * Description: 查询商户的可提现资产价值(单位:分)
 * Summary: 数字商品服务-拉块服务-查询可提现资产
 */
async function queryBlockanalysisUnwriteoffvalueEx(request: QueryBlockanalysisUnwriteoffvalueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBlockanalysisUnwriteoffvalueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.blockanalysis.unwriteoffvalue.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateBlockanalysisDelegaterelationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被代理的租户ID
  delegatedTenantId: string(name='delegated_tenant_id'),
  // 代理租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 操作类型，ADD表示添加，SUB表示撤销
  optType: string(name='opt_type'),
}

model UpdateBlockanalysisDelegaterelationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设置租户的授权代理权限。赋予 opt_tenant_id 代理 delegated_tenant_id 调用接口的权限，见可代理的接口详情单。
 * Summary: 数字商品服务-拉块服务-设置代理权限
 */
async function updateBlockanalysisDelegaterelation(request: UpdateBlockanalysisDelegaterelationRequest): UpdateBlockanalysisDelegaterelationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateBlockanalysisDelegaterelationEx(request, headers, runtime);
}

/**
 * Description: 设置租户的授权代理权限。赋予 opt_tenant_id 代理 delegated_tenant_id 调用接口的权限，见可代理的接口详情单。
 * Summary: 数字商品服务-拉块服务-设置代理权限
 */
async function updateBlockanalysisDelegaterelationEx(request: UpdateBlockanalysisDelegaterelationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateBlockanalysisDelegaterelationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.blockanalysis.delegaterelation.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateBlockanalysisWhitelistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 租户ID
  optTenantId: string(name='opt_tenant_id'),
  // 操作类型
  optType: string(name='opt_type'),
}

model UpdateBlockanalysisWhitelistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设置接口访问白名单。
 * Summary: 数字商品服务-拉块服务-设置访问白名单
 */
async function updateBlockanalysisWhitelist(request: UpdateBlockanalysisWhitelistRequest): UpdateBlockanalysisWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateBlockanalysisWhitelistEx(request, headers, runtime);
}

/**
 * Description: 设置接口访问白名单。
 * Summary: 数字商品服务-拉块服务-设置访问白名单
 */
async function updateBlockanalysisWhitelistEx(request: UpdateBlockanalysisWhitelistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateBlockanalysisWhitelistResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.blockanalysis.whitelist.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBlockanalysisDelegaterelationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被代理的租户ID
  delegatedTenantId: string(name='delegated_tenant_id'),
}

model QueryBlockanalysisDelegaterelationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 代理授权关系信息
  delegateRelationInfos?: [ DelegateRelationInfo ](name='delegate_relation_infos'),
}

/**
 * Description: 查询租户的授权代理权限
 * Summary: 数字商品服务-拉块服务-代理权限查询
 */
async function queryBlockanalysisDelegaterelation(request: QueryBlockanalysisDelegaterelationRequest): QueryBlockanalysisDelegaterelationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBlockanalysisDelegaterelationEx(request, headers, runtime);
}

/**
 * Description: 查询租户的授权代理权限
 * Summary: 数字商品服务-拉块服务-代理权限查询
 */
async function queryBlockanalysisDelegaterelationEx(request: QueryBlockanalysisDelegaterelationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBlockanalysisDelegaterelationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.blockanalysis.delegaterelation.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBlockanalysisWhitelistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询该租户的白名单信息
  tenantId?: string(name='tenant_id'),
  // 查询链的白名单信息
  chainId?: string(name='chain_id'),
}

model QueryBlockanalysisWhitelistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 接口白名单信息
  whiteList?: [ APIWhiteListInfo ](name='white_list'),
}

/**
 * Description: 查询接口访问白名单信息
 * Summary: 数字商品服务-拉块服务-查询接口白名单
 */
async function queryBlockanalysisWhitelist(request: QueryBlockanalysisWhitelistRequest): QueryBlockanalysisWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBlockanalysisWhitelistEx(request, headers, runtime);
}

/**
 * Description: 查询接口访问白名单信息
 * Summary: 数字商品服务-拉块服务-查询接口白名单
 */
async function queryBlockanalysisWhitelistEx(request: QueryBlockanalysisWhitelistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBlockanalysisWhitelistResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.blockanalysis.whitelist.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBlockanalysisTransactionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 交易hash
  txHash: string(name='tx_hash'),
}

model QueryBlockanalysisTransactionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 区块高度
  blockNumber?: long(name='block_number'),
  // 交易数据，hex格式
  data?: string(name='data'),
  // 交易发起方
  from?: string(name='from'),
  // 交易单据信息
  receipt?: BlockReceipt(name='receipt'),
  // 交易时间戳
  timestamp?: string(name='timestamp'),
  // 交易接收方
  to?: string(name='to'),
  // 交易hash
  txHash?: string(name='tx_hash'),
  // 交易类型
  txType?: long(name='tx_type'),
}

/**
 * Description: 根据交易hash获取交易信息
 * Summary: 数字商品服务-拉块服务-获取交易信息
 */
async function queryBlockanalysisTransaction(request: QueryBlockanalysisTransactionRequest): QueryBlockanalysisTransactionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBlockanalysisTransactionEx(request, headers, runtime);
}

/**
 * Description: 根据交易hash获取交易信息
 * Summary: 数字商品服务-拉块服务-获取交易信息
 */
async function queryBlockanalysisTransactionEx(request: QueryBlockanalysisTransactionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBlockanalysisTransactionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.blockanalysis.transaction.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBlockanalysisEquityauthlistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 分页查询每页数量
  count: long(name='count'),
  // 商品ID
  equityId: string(name='equity_id'),
  // 分页查询页码
  page: long(name='page'),
  // 代理租户ID
  delegatedTenantId: string(name='delegated_tenant_id'),
}

model QueryBlockanalysisEquityauthlistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商品授权信息（一客一价信息）列表
  equityAuthList?: [ EquityAuthInfo ](name='equity_auth_list'),
}

/**
 * Description: 获取商品的授权信息列表(一客一价信息)
 * Summary: 数字商品服务-拉块服务-获取商品授权信息
 */
async function queryBlockanalysisEquityauthlist(request: QueryBlockanalysisEquityauthlistRequest): QueryBlockanalysisEquityauthlistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBlockanalysisEquityauthlistEx(request, headers, runtime);
}

/**
 * Description: 获取商品的授权信息列表(一客一价信息)
 * Summary: 数字商品服务-拉块服务-获取商品授权信息
 */
async function queryBlockanalysisEquityauthlistEx(request: QueryBlockanalysisEquityauthlistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBlockanalysisEquityauthlistResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.blockanalysis.equityauthlist.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBlockanalysisNextblockRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块高度
  blockNumber: long(name='block_number'),
  // 链ID
  chainId: string(name='chain_id'),
  // 代理查询区块信息，传入代理租户需有代理权限。接口会返回调用者和被代理租户能查看的所有交易信息。
  delegatedTenantIds?: [ string ](name='delegated_tenant_ids'),
  // 查询区块超时时间，单位s，范围小于6s
  timeout: long(name='timeout'),
}

model QueryBlockanalysisNextblockResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 区块信息
  block?: Block(name='block'),
  // 区块高度
  blockNumber?: long(name='block_number'),
  // 链ID
  chainId?: string(name='chain_id'),
  // 过滤后的交易数量
  filteredTxCount?: long(name='filtered_tx_count'),
  // 区块中交易总数
  totalTxCount?: long(name='total_tx_count'),
  // 下一个需要检查的高度
  nextBlockNumber?: long(name='next_block_number'),
}

/**
 * Description: 获取下一个与用户有关联交易的区块。需要传入超时时间，如果已到超时时间，则返回当前过滤的最高区块信息。
 * Summary: 数字商品服务-拉块服务-获取下个相关区块
 */
async function queryBlockanalysisNextblock(request: QueryBlockanalysisNextblockRequest): QueryBlockanalysisNextblockResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBlockanalysisNextblockEx(request, headers, runtime);
}

/**
 * Description: 获取下一个与用户有关联交易的区块。需要传入超时时间，如果已到超时时间，则返回当前过滤的最高区块信息。
 * Summary: 数字商品服务-拉块服务-获取下个相关区块
 */
async function queryBlockanalysisNextblockEx(request: QueryBlockanalysisNextblockRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBlockanalysisNextblockResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.blockanalysis.nextblock.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMypointsSkuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链ID
  chainId: string(name='chain_id'),
  // 环境标识
  env: string(name='env'),
}

model QueryMypointsSkuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商品列表
  skus?: [ SKUItem ](name='skus'),
}

/**
 * Description: 可订购的SKU列表查询
 * Summary: 数字商品服务-商品服务-商品列表查询
 */
async function queryMypointsSku(request: QueryMypointsSkuRequest): QueryMypointsSkuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMypointsSkuEx(request, headers, runtime);
}

/**
 * Description: 可订购的SKU列表查询
 * Summary: 数字商品服务-商品服务-商品列表查询
 */
async function queryMypointsSkuEx(request: QueryMypointsSkuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMypointsSkuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.mypoints.sku.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMypointsMerchantbalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 环境标识
  env: string(name='env'),
}

model QueryMypointsMerchantbalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 积分库可用余额
  budgetAvailableBalance?: long(name='budget_available_balance'),
  // 预算库余额
  budgetBalance?: long(name='budget_balance'),
  // 预算库代码
  budgetCode?: string(name='budget_code'),
  // 商户的支付宝商家ID
  pid?: string(name='pid'),
  // 积分库余额
  pointLibBalance?: long(name='point_lib_balance'),
  // 积分库代码
  pointLibCode?: string(name='point_lib_code'),
  // 商户的金融云租户ID
  tenantId?: string(name='tenant_id'),
}

/**
 * Description: 查询商户的积分库和预算库
 * Summary: 数字商品服务-商品服务-积分预算库查询
 */
async function queryMypointsMerchantbalance(request: QueryMypointsMerchantbalanceRequest): QueryMypointsMerchantbalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMypointsMerchantbalanceEx(request, headers, runtime);
}

/**
 * Description: 查询商户的积分库和预算库
 * Summary: 数字商品服务-商品服务-积分预算库查询
 */
async function queryMypointsMerchantbalanceEx(request: QueryMypointsMerchantbalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMypointsMerchantbalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.mypoints.merchantbalance.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecMypointsPreorderskuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 预下单数量
  count: long(name='count'),
  // 环境标识
  env: string(name='env'),
  // 备注
  memo?: string(name='memo'),
  // 业务幂等号，商户需要保证每笔订单号唯一
  orderNo: string(name='order_no'),
  // 商品ID
  skuId: string(name='sku_id'),
  // 总花费花费(询价接口结果) 
  totalCost: string(name='total_cost'),
}

model ExecMypointsPreorderskuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数量
  count?: long(name='count'),
  // 业务幂等ID
  orderNo?: string(name='order_no'),
  // 预下单Id
  preOrderId?: string(name='pre_order_id'),
  // 商品ID
  skuId?: string(name='sku_id'),
  // 总集分宝数量(单位:个)
  totalAmount?: long(name='total_amount'),
  // 总费用
  totalCost?: string(name='total_cost'),
  // 是否需要重试
  needRetry?: boolean(name='need_retry'),
}

/**
 * Description: 预下单商品
 * Summary: 数字商品服务-商品服务-商品预下单
 */
async function execMypointsPreordersku(request: ExecMypointsPreorderskuRequest): ExecMypointsPreorderskuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execMypointsPreorderskuEx(request, headers, runtime);
}

/**
 * Description: 预下单商品
 * Summary: 数字商品服务-商品服务-商品预下单
 */
async function execMypointsPreorderskuEx(request: ExecMypointsPreorderskuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecMypointsPreorderskuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.mypoints.preordersku.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecMypointsOrderskuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 环境标识
  env: string(name='env'),
  // 业务幂等号
  orderNo: string(name='order_no'),
  // 手机号
  phoneNumber: string(name='phone_number'),
  // 预下单号
  preOrderId: string(name='pre_order_id'),
  // 商品ID
  skuId: string(name='sku_id'),
}

model ExecMypointsOrderskuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 卡密ID
  cardId?: string(name='card_id'),
  // 集分宝卡密的面值(单位:个)
  cardValue?: long(name='card_value'),
  // 是否需要重试
  needRetry?: boolean(name='need_retry'),
  // 业务幂等ID
  orderNo?: string(name='order_no'),
}

/**
 * Description: 商品下单
 * Summary: 数字商品服务-商品服务-商品下单
 */
async function execMypointsOrdersku(request: ExecMypointsOrderskuRequest): ExecMypointsOrderskuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execMypointsOrderskuEx(request, headers, runtime);
}

/**
 * Description: 商品下单
 * Summary: 数字商品服务-商品服务-商品下单
 */
async function execMypointsOrderskuEx(request: ExecMypointsOrderskuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecMypointsOrderskuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.mypoints.ordersku.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMypointsSkufeeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 预下单数量
  count: long(name='count'),
  // 环境标识(sandbox/prod)
  env: string(name='env'),
  // 备注信息
  memo?: string(name='memo'),
  // 业务幂等号
  orderNo: string(name='order_no'),
  // 商品ID
  skuId: string(name='sku_id'),
}

model QueryMypointsSkufeeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 预下单的数量
  count?: long(name='count'),
  // 费率
  rate?: string(name='rate'),
  // 商品ID
  skuId?: string(name='sku_id'),
  // 总集分宝数量（个）
  totalAmount?: long(name='total_amount'),
  // 总费用
  totalCost?: string(name='total_cost'),
}

/**
 * Description: 根据商品ID，查询批量购买的费率
 * Summary: 数字商品服务-商品服务-商品费率查询
 */
async function queryMypointsSkufee(request: QueryMypointsSkufeeRequest): QueryMypointsSkufeeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMypointsSkufeeEx(request, headers, runtime);
}

/**
 * Description: 根据商品ID，查询批量购买的费率
 * Summary: 数字商品服务-商品服务-商品费率查询
 */
async function queryMypointsSkufeeEx(request: QueryMypointsSkufeeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMypointsSkufeeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.mypoints.skufee.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMypointsPreorderinstructionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 环境标识
  env: string(name='env'),
  // 业务幂等ID
  orderNo: string(name='order_no'),
  // 商品ID
  skuId: string(name='sku_id'),
}

model QueryMypointsPreorderinstructionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务请求单号
  bizId?: string(name='biz_id'),
  // 商家的预算库代码
  budgetCode?: string(name='budget_code'),
  // 链ID
  chainId?: string(name='chain_id'),
  // 环境标识
  env?: string(name='env'),
  // 扩展信息
  extendInfo?: string(name='extend_info'),
  // 备注信息
  memo?: string(name='memo'),
  // 商家在支付宝域的标识
  pid?: string(name='pid'),
  // 集分宝产品码
  productCode?: string(name='product_code'),
  // 集分宝SKU预下单ID
  preOrderId?: string(name='pre_order_id'),
  // 订单中剩余的可下单商品数量
  remainCount?: long(name='remain_count'),
  // 包含集分宝数量(个)
  skuAmount?: long(name='sku_amount'),
  // 集分宝SKU的ID
  skuId?: string(name='sku_id'),
  // SKU面值
  skuValue?: string(name='sku_value'),
  // 流水状态(0初始状态, 1采购失败可重试, 2采购失败不可重试, 3采购成功, 4预算库创建失败可重试, 5预算库创建失败不可重试, 6预算库叉棍见成功, 7预算调拨失败可重试, 8预算库调拨失败不可重试, 9预算库调拨成功)
  status?: long(name='status'),
  // 商户在金融云的租户ID
  tenantId?: string(name='tenant_id'),
  // 总下单集分宝数量
  totalAmount?: long(name='total_amount'),
  // 集分宝SKU的预下单数量
  totalCount?: long(name='total_count'),
  // 总下单金额
  totalValue?: string(name='total_value'),
}

/**
 * Description: 查询集分宝SKU的预下单流水记录
 * Summary: 数字商品服务-商品服务-预下单流水查询
 */
async function queryMypointsPreorderinstruction(request: QueryMypointsPreorderinstructionRequest): QueryMypointsPreorderinstructionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMypointsPreorderinstructionEx(request, headers, runtime);
}

/**
 * Description: 查询集分宝SKU的预下单流水记录
 * Summary: 数字商品服务-商品服务-预下单流水查询
 */
async function queryMypointsPreorderinstructionEx(request: QueryMypointsPreorderinstructionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMypointsPreorderinstructionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.mypoints.preorderinstruction.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMypointsOrderinstructionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 环境标识
  env: string(name='env'),
  // 业务幂等号
  orderNo: string(name='order_no'),
  // SKU ID
  skuId: string(name='sku_id'),
}

model QueryMypointsOrderinstructionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务请求单号
  bizId?: string(name='biz_id'),
  // 链ID
  chainId?: string(name='chain_id'),
  // 环境标识
  env?: string(name='env'),
  // 扩展信息
  extendInfo?: string(name='extend_info'),
  // 订单ID(env+chain_id+tenant_id+sku_id+biz_id)
  orderId?: string(name='order_id'),
  // 预下单ID
  preOrderId?: string(name='pre_order_id'),
  // 包含集分宝数量(个)
  skuAmount?: long(name='sku_amount'),
  // SKU ID
  skuId?: string(name='sku_id'),
  // 面值
  skuValue?: string(name='sku_value'),
  // 状态(0:初始,1:失败可重试,2:失败不可重试,3:成功)
  status?: long(name='status'),
  // 商家在金融云的租户ID
  tenantId?: string(name='tenant_id'),
}

/**
 * Description: 查询下单流水信息
 * Summary: 数字商品服务-商品服务-商品下单流水查询
 */
async function queryMypointsOrderinstruction(request: QueryMypointsOrderinstructionRequest): QueryMypointsOrderinstructionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMypointsOrderinstructionEx(request, headers, runtime);
}

/**
 * Description: 查询下单流水信息
 * Summary: 数字商品服务-商品服务-商品下单流水查询
 */
async function queryMypointsOrderinstructionEx(request: QueryMypointsOrderinstructionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMypointsOrderinstructionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.antdao.mypoints.orderinstruction.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 上传文件作用的openapi method
  apiCode: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ XNameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntcloudGatewayxFileUploadEx(request, headers, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

