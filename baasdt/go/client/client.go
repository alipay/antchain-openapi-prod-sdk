// This file is auto-generated, don't edit it. Thanks.
package client

import (
	rpcutil "github.com/alibabacloud-go/tea-rpc-utils/service"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
	antchainutil "github.com/antchain-openapi-sdk-go/antchain-util/service"
	"io"
)

/**
 * Model for initing client
 */
type Config struct {
	// accesskey id
	AccessKeyId *string `json:"accessKeyId,omitempty" xml:"accessKeyId,omitempty"`
	// accesskey secret
	AccessKeySecret *string `json:"accessKeySecret,omitempty" xml:"accessKeySecret,omitempty"`
	// security token
	SecurityToken *string `json:"securityToken,omitempty" xml:"securityToken,omitempty"`
	// http protocol
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// read timeout
	ReadTimeout *int `json:"readTimeout,omitempty" xml:"readTimeout,omitempty"`
	// connect timeout
	ConnectTimeout *int `json:"connectTimeout,omitempty" xml:"connectTimeout,omitempty"`
	// http proxy
	HttpProxy *string `json:"httpProxy,omitempty" xml:"httpProxy,omitempty"`
	// https proxy
	HttpsProxy *string `json:"httpsProxy,omitempty" xml:"httpsProxy,omitempty"`
	// endpoint
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	// proxy white list
	NoProxy *string `json:"noProxy,omitempty" xml:"noProxy,omitempty"`
	// max idle conns
	MaxIdleConns *int `json:"maxIdleConns,omitempty" xml:"maxIdleConns,omitempty"`
	// user agent
	UserAgent *string `json:"userAgent,omitempty" xml:"userAgent,omitempty"`
	// socks5 proxy
	Socks5Proxy *string `json:"socks5Proxy,omitempty" xml:"socks5Proxy,omitempty"`
	// socks5 network
	Socks5NetWork *string `json:"socks5NetWork,omitempty" xml:"socks5NetWork,omitempty"`
	// 长链接最大空闲时长
	MaxIdleTimeMillis *int `json:"maxIdleTimeMillis,omitempty" xml:"maxIdleTimeMillis,omitempty"`
	// 长链接最大连接时长
	KeepAliveDurationMillis *int `json:"keepAliveDurationMillis,omitempty" xml:"keepAliveDurationMillis,omitempty"`
	// 最大连接数（长链接最大总数）
	MaxRequests *int `json:"maxRequests,omitempty" xml:"maxRequests,omitempty"`
	// 每个目标主机的最大连接数（分主机域名的长链接最大总数
	MaxRequestsPerHost *int `json:"maxRequestsPerHost,omitempty" xml:"maxRequestsPerHost,omitempty"`
}

func (s Config) String() string {
	return tea.Prettify(s)
}

func (s Config) GoString() string {
	return s.String()
}

func (s *Config) SetAccessKeyId(v string) *Config {
	s.AccessKeyId = &v
	return s
}

func (s *Config) SetAccessKeySecret(v string) *Config {
	s.AccessKeySecret = &v
	return s
}

func (s *Config) SetSecurityToken(v string) *Config {
	s.SecurityToken = &v
	return s
}

func (s *Config) SetProtocol(v string) *Config {
	s.Protocol = &v
	return s
}

func (s *Config) SetReadTimeout(v int) *Config {
	s.ReadTimeout = &v
	return s
}

func (s *Config) SetConnectTimeout(v int) *Config {
	s.ConnectTimeout = &v
	return s
}

func (s *Config) SetHttpProxy(v string) *Config {
	s.HttpProxy = &v
	return s
}

func (s *Config) SetHttpsProxy(v string) *Config {
	s.HttpsProxy = &v
	return s
}

func (s *Config) SetEndpoint(v string) *Config {
	s.Endpoint = &v
	return s
}

func (s *Config) SetNoProxy(v string) *Config {
	s.NoProxy = &v
	return s
}

func (s *Config) SetMaxIdleConns(v int) *Config {
	s.MaxIdleConns = &v
	return s
}

func (s *Config) SetUserAgent(v string) *Config {
	s.UserAgent = &v
	return s
}

func (s *Config) SetSocks5Proxy(v string) *Config {
	s.Socks5Proxy = &v
	return s
}

func (s *Config) SetSocks5NetWork(v string) *Config {
	s.Socks5NetWork = &v
	return s
}

func (s *Config) SetMaxIdleTimeMillis(v int) *Config {
	s.MaxIdleTimeMillis = &v
	return s
}

func (s *Config) SetKeepAliveDurationMillis(v int) *Config {
	s.KeepAliveDurationMillis = &v
	return s
}

func (s *Config) SetMaxRequests(v int) *Config {
	s.MaxRequests = &v
	return s
}

func (s *Config) SetMaxRequestsPerHost(v int) *Config {
	s.MaxRequestsPerHost = &v
	return s
}

// 交易扩展字段
type Extension struct {
	// key
	Key *int64 `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s Extension) String() string {
	return tea.Prettify(s)
}

func (s Extension) GoString() string {
	return s.String()
}

func (s *Extension) SetKey(v int64) *Extension {
	s.Key = &v
	return s
}

func (s *Extension) SetValue(v string) *Extension {
	s.Value = &v
	return s
}

// 交易日志
type LogEntry struct {
	// 交易发起方
	From *string `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// log信息
	LogData *string `json:"log_data,omitempty" xml:"log_data,omitempty" require:"true"`
	// 交易接受方
	To *string `json:"to,omitempty" xml:"to,omitempty" require:"true"`
	// 交易topic
	Topics []*string `json:"topics,omitempty" xml:"topics,omitempty" require:"true" type:"Repeated"`
}

func (s LogEntry) String() string {
	return tea.Prettify(s)
}

func (s LogEntry) GoString() string {
	return s.String()
}

func (s *LogEntry) SetFrom(v string) *LogEntry {
	s.From = &v
	return s
}

func (s *LogEntry) SetLogData(v string) *LogEntry {
	s.LogData = &v
	return s
}

func (s *LogEntry) SetTo(v string) *LogEntry {
	s.To = &v
	return s
}

func (s *LogEntry) SetTopics(v []*string) *LogEntry {
	s.Topics = v
	return s
}

// 销售抽用单独设置的授权品类和保底金信息
type IPCommissionSeparateSetInfo struct {
	// 授权品类
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// 佣金比例
	CommissionWeight *string `json:"commission_weight,omitempty" xml:"commission_weight,omitempty"`
	// 保底商品销售金额
	GuaranteeSaleNumber *string `json:"guarantee_sale_number,omitempty" xml:"guarantee_sale_number,omitempty"`
}

func (s IPCommissionSeparateSetInfo) String() string {
	return tea.Prettify(s)
}

func (s IPCommissionSeparateSetInfo) GoString() string {
	return s.String()
}

func (s *IPCommissionSeparateSetInfo) SetCategory(v string) *IPCommissionSeparateSetInfo {
	s.Category = &v
	return s
}

func (s *IPCommissionSeparateSetInfo) SetCommissionWeight(v string) *IPCommissionSeparateSetInfo {
	s.CommissionWeight = &v
	return s
}

func (s *IPCommissionSeparateSetInfo) SetGuaranteeSaleNumber(v string) *IPCommissionSeparateSetInfo {
	s.GuaranteeSaleNumber = &v
	return s
}

// 按件付费单独设置的品类和保底量信息
type IPPaytSeparateSetInfo struct {
	// 授权品类
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// 单件单价
	UnitPrice *string `json:"unit_price,omitempty" xml:"unit_price,omitempty"`
	// 保底商品数量
	GuaranteeGoodsNumber *string `json:"guarantee_goods_number,omitempty" xml:"guarantee_goods_number,omitempty"`
}

func (s IPPaytSeparateSetInfo) String() string {
	return tea.Prettify(s)
}

func (s IPPaytSeparateSetInfo) GoString() string {
	return s.String()
}

func (s *IPPaytSeparateSetInfo) SetCategory(v string) *IPPaytSeparateSetInfo {
	s.Category = &v
	return s
}

func (s *IPPaytSeparateSetInfo) SetUnitPrice(v string) *IPPaytSeparateSetInfo {
	s.UnitPrice = &v
	return s
}

func (s *IPPaytSeparateSetInfo) SetGuaranteeGoodsNumber(v string) *IPPaytSeparateSetInfo {
	s.GuaranteeGoodsNumber = &v
	return s
}

// ip的sku信息
type IpSkuInfo struct {
	// ip的链上id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// ip的渠道名字
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 售卖的商品价格范围
	PriceRange *string `json:"price_range,omitempty" xml:"price_range,omitempty" require:"true"`
	// ip售卖单价
	PurchasePrice *string `json:"purchase_price,omitempty" xml:"purchase_price,omitempty" require:"true"`
	// 套餐中ip的数量
	SaleNum *string `json:"sale_num,omitempty" xml:"sale_num,omitempty" require:"true"`
}

func (s IpSkuInfo) String() string {
	return tea.Prettify(s)
}

func (s IpSkuInfo) GoString() string {
	return s.String()
}

func (s *IpSkuInfo) SetIpId(v string) *IpSkuInfo {
	s.IpId = &v
	return s
}

func (s *IpSkuInfo) SetChannelName(v string) *IpSkuInfo {
	s.ChannelName = &v
	return s
}

func (s *IpSkuInfo) SetPriceRange(v string) *IpSkuInfo {
	s.PriceRange = &v
	return s
}

func (s *IpSkuInfo) SetPurchasePrice(v string) *IpSkuInfo {
	s.PurchasePrice = &v
	return s
}

func (s *IpSkuInfo) SetSaleNum(v string) *IpSkuInfo {
	s.SaleNum = &v
	return s
}

// 商品规格
type ProductSpecification struct {
	// 规格名称
	SpecificationName *string `json:"specification_name,omitempty" xml:"specification_name,omitempty" require:"true"`
	// 规格值
	SpecificationValue *string `json:"specification_value,omitempty" xml:"specification_value,omitempty" require:"true"`
}

func (s ProductSpecification) String() string {
	return tea.Prettify(s)
}

func (s ProductSpecification) GoString() string {
	return s.String()
}

func (s *ProductSpecification) SetSpecificationName(v string) *ProductSpecification {
	s.SpecificationName = &v
	return s
}

func (s *ProductSpecification) SetSpecificationValue(v string) *ProductSpecification {
	s.SpecificationValue = &v
	return s
}

// 手续费分级
type CommissionLayer struct {
	// 阶梯起始值，无结束值
	StartNum *string `json:"start_num,omitempty" xml:"start_num,omitempty" require:"true"`
	// 手续费费率
	DeductRatio *string `json:"deduct_ratio,omitempty" xml:"deduct_ratio,omitempty" require:"true"`
	// 固定的商品费率值
	DeductToken *string `json:"deduct_token,omitempty" xml:"deduct_token,omitempty" require:"true"`
}

func (s CommissionLayer) String() string {
	return tea.Prettify(s)
}

func (s CommissionLayer) GoString() string {
	return s.String()
}

func (s *CommissionLayer) SetStartNum(v string) *CommissionLayer {
	s.StartNum = &v
	return s
}

func (s *CommissionLayer) SetDeductRatio(v string) *CommissionLayer {
	s.DeductRatio = &v
	return s
}

func (s *CommissionLayer) SetDeductToken(v string) *CommissionLayer {
	s.DeductToken = &v
	return s
}

// 用户价格
type UserPrice struct {
	// 具体价格
	Price *string `json:"price,omitempty" xml:"price,omitempty" require:"true"`
	// 相对比例
	Ratio *string `json:"ratio,omitempty" xml:"ratio,omitempty" require:"true"`
	// 对租户价格(需要和当前生效价格匹配)
	SnapshotTenantPrice *string `json:"snapshot_tenant_price,omitempty" xml:"snapshot_tenant_price,omitempty" require:"true"`
	// 价格类型(数值/比例)
	UserPriceType *int64 `json:"user_price_type,omitempty" xml:"user_price_type,omitempty" require:"true"`
	// 租户用户价格包括费率
	UserPriceWithCommission *string `json:"user_price_with_commission,omitempty" xml:"user_price_with_commission,omitempty" require:"true"`
}

func (s UserPrice) String() string {
	return tea.Prettify(s)
}

func (s UserPrice) GoString() string {
	return s.String()
}

func (s *UserPrice) SetPrice(v string) *UserPrice {
	s.Price = &v
	return s
}

func (s *UserPrice) SetRatio(v string) *UserPrice {
	s.Ratio = &v
	return s
}

func (s *UserPrice) SetSnapshotTenantPrice(v string) *UserPrice {
	s.SnapshotTenantPrice = &v
	return s
}

func (s *UserPrice) SetUserPriceType(v int64) *UserPrice {
	s.UserPriceType = &v
	return s
}

func (s *UserPrice) SetUserPriceWithCommission(v string) *UserPrice {
	s.UserPriceWithCommission = &v
	return s
}

// 商品交易模式
type IPTradeMode struct {
	// 交易类型，0：销售抽拥；1:按件付费
	TradeType []*int64 `json:"trade_type,omitempty" xml:"trade_type,omitempty" type:"Repeated"`
	// 销售抽拥设置类型，0批量设置，1，单独设置
	CommissionSetType *string `json:"commission_set_type,omitempty" xml:"commission_set_type,omitempty"`
	// 佣金比例
	CommissionWeight *string `json:"commission_weight,omitempty" xml:"commission_weight,omitempty"`
	// 保底商品销售金额
	GuaranteeSaleNumber *string `json:"guarantee_sale_number,omitempty" xml:"guarantee_sale_number,omitempty"`
	// 销售抽佣单独设置信息
	CommissionSeparateSetInfo []*IPCommissionSeparateSetInfo `json:"commission_separate_set_info,omitempty" xml:"commission_separate_set_info,omitempty" type:"Repeated"`
	// 按件付费设置类型，0批量设置，1，单独设置
	PaytSetType *string `json:"payt_set_type,omitempty" xml:"payt_set_type,omitempty"`
	// 单件单价
	UnitPrice *string `json:"unit_price,omitempty" xml:"unit_price,omitempty"`
	// 保底商品数量
	GuaranteeGoodsNumber *string `json:"guarantee_goods_number,omitempty" xml:"guarantee_goods_number,omitempty"`
	// 按件付费单独设置信息
	PaytSeparateSetInfo []*IPPaytSeparateSetInfo `json:"payt_separate_set_info,omitempty" xml:"payt_separate_set_info,omitempty" type:"Repeated"`
}

func (s IPTradeMode) String() string {
	return tea.Prettify(s)
}

func (s IPTradeMode) GoString() string {
	return s.String()
}

func (s *IPTradeMode) SetTradeType(v []*int64) *IPTradeMode {
	s.TradeType = v
	return s
}

func (s *IPTradeMode) SetCommissionSetType(v string) *IPTradeMode {
	s.CommissionSetType = &v
	return s
}

func (s *IPTradeMode) SetCommissionWeight(v string) *IPTradeMode {
	s.CommissionWeight = &v
	return s
}

func (s *IPTradeMode) SetGuaranteeSaleNumber(v string) *IPTradeMode {
	s.GuaranteeSaleNumber = &v
	return s
}

func (s *IPTradeMode) SetCommissionSeparateSetInfo(v []*IPCommissionSeparateSetInfo) *IPTradeMode {
	s.CommissionSeparateSetInfo = v
	return s
}

func (s *IPTradeMode) SetPaytSetType(v string) *IPTradeMode {
	s.PaytSetType = &v
	return s
}

func (s *IPTradeMode) SetUnitPrice(v string) *IPTradeMode {
	s.UnitPrice = &v
	return s
}

func (s *IPTradeMode) SetGuaranteeGoodsNumber(v string) *IPTradeMode {
	s.GuaranteeGoodsNumber = &v
	return s
}

func (s *IPTradeMode) SetPaytSeparateSetInfo(v []*IPPaytSeparateSetInfo) *IPTradeMode {
	s.PaytSeparateSetInfo = v
	return s
}

// 联系人详情
type DockingPeopleInfo struct {
	// 名字
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 手机号
	MobilePhone *string `json:"mobile_phone,omitempty" xml:"mobile_phone,omitempty" require:"true"`
	// 职位
	Position *string `json:"position,omitempty" xml:"position,omitempty" require:"true"`
	// 邮箱
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 钉钉号
	DingDing *string `json:"ding_ding,omitempty" xml:"ding_ding,omitempty"`
	// 座机
	TelePhone *string `json:"tele_phone,omitempty" xml:"tele_phone,omitempty"`
}

func (s DockingPeopleInfo) String() string {
	return tea.Prettify(s)
}

func (s DockingPeopleInfo) GoString() string {
	return s.String()
}

func (s *DockingPeopleInfo) SetName(v string) *DockingPeopleInfo {
	s.Name = &v
	return s
}

func (s *DockingPeopleInfo) SetMobilePhone(v string) *DockingPeopleInfo {
	s.MobilePhone = &v
	return s
}

func (s *DockingPeopleInfo) SetPosition(v string) *DockingPeopleInfo {
	s.Position = &v
	return s
}

func (s *DockingPeopleInfo) SetEmail(v string) *DockingPeopleInfo {
	s.Email = &v
	return s
}

func (s *DockingPeopleInfo) SetDingDing(v string) *DockingPeopleInfo {
	s.DingDing = &v
	return s
}

func (s *DockingPeopleInfo) SetTelePhone(v string) *DockingPeopleInfo {
	s.TelePhone = &v
	return s
}

// 交易
type BlockTransaction struct {
	// 交易信息
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// 交易扩展信息
	Extension []*Extension `json:"extension,omitempty" xml:"extension,omitempty" require:"true" type:"Repeated"`
	// 交易发起方
	From *string `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// 交易gas消耗
	Gas *int64 `json:"gas,omitempty" xml:"gas,omitempty" require:"true"`
	// 分组id，暂时没用
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 交易哈希
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty" require:"true"`
	// 交易随机数
	Nonce *string `json:"nonce,omitempty" xml:"nonce,omitempty" require:"true"`
	// 交易时间
	Period *int64 `json:"period,omitempty" xml:"period,omitempty" require:"true"`
	// 交易签名
	Signature []*string `json:"signature,omitempty" xml:"signature,omitempty" require:"true" type:"Repeated"`
	// 交易时间戳
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// 交易接收方
	To *string `json:"to,omitempty" xml:"to,omitempty" require:"true"`
	// 2
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 交易转账金额
	Value *int64 `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// 2
	Version *int64 `json:"version,omitempty" xml:"version,omitempty" require:"true"`
}

func (s BlockTransaction) String() string {
	return tea.Prettify(s)
}

func (s BlockTransaction) GoString() string {
	return s.String()
}

func (s *BlockTransaction) SetData(v string) *BlockTransaction {
	s.Data = &v
	return s
}

func (s *BlockTransaction) SetExtension(v []*Extension) *BlockTransaction {
	s.Extension = v
	return s
}

func (s *BlockTransaction) SetFrom(v string) *BlockTransaction {
	s.From = &v
	return s
}

func (s *BlockTransaction) SetGas(v int64) *BlockTransaction {
	s.Gas = &v
	return s
}

func (s *BlockTransaction) SetGroupId(v string) *BlockTransaction {
	s.GroupId = &v
	return s
}

func (s *BlockTransaction) SetHash(v string) *BlockTransaction {
	s.Hash = &v
	return s
}

func (s *BlockTransaction) SetNonce(v string) *BlockTransaction {
	s.Nonce = &v
	return s
}

func (s *BlockTransaction) SetPeriod(v int64) *BlockTransaction {
	s.Period = &v
	return s
}

func (s *BlockTransaction) SetSignature(v []*string) *BlockTransaction {
	s.Signature = v
	return s
}

func (s *BlockTransaction) SetTimestamp(v int64) *BlockTransaction {
	s.Timestamp = &v
	return s
}

func (s *BlockTransaction) SetTo(v string) *BlockTransaction {
	s.To = &v
	return s
}

func (s *BlockTransaction) SetType(v int64) *BlockTransaction {
	s.Type = &v
	return s
}

func (s *BlockTransaction) SetValue(v int64) *BlockTransaction {
	s.Value = &v
	return s
}

func (s *BlockTransaction) SetVersion(v int64) *BlockTransaction {
	s.Version = &v
	return s
}

// 手续费子结构体
type SubCommissionRule struct {
	// deduct_token
	DeductToken *string `json:"deduct_token,omitempty" xml:"deduct_token,omitempty" require:"true"`
	// deduct_ratio
	DeductRatio *string `json:"deduct_ratio,omitempty" xml:"deduct_ratio,omitempty" require:"true"`
	// account_id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
}

func (s SubCommissionRule) String() string {
	return tea.Prettify(s)
}

func (s SubCommissionRule) GoString() string {
	return s.String()
}

func (s *SubCommissionRule) SetDeductToken(v string) *SubCommissionRule {
	s.DeductToken = &v
	return s
}

func (s *SubCommissionRule) SetDeductRatio(v string) *SubCommissionRule {
	s.DeductRatio = &v
	return s
}

func (s *SubCommissionRule) SetAccountId(v string) *SubCommissionRule {
	s.AccountId = &v
	return s
}

// 交易收据
type BlockReceipt struct {
	// 使用的gas数量
	GasUsed *int64 `json:"gas_used,omitempty" xml:"gas_used,omitempty" require:"true"`
	// 收据log信息
	Logs []*LogEntry `json:"logs,omitempty" xml:"logs,omitempty" require:"true" type:"Repeated"`
	// 交易输出
	Output *string `json:"output,omitempty" xml:"output,omitempty" require:"true"`
	// 交易结果，0为成功
	Result *int64 `json:"result,omitempty" xml:"result,omitempty" require:"true"`
}

func (s BlockReceipt) String() string {
	return tea.Prettify(s)
}

func (s BlockReceipt) GoString() string {
	return s.String()
}

func (s *BlockReceipt) SetGasUsed(v int64) *BlockReceipt {
	s.GasUsed = &v
	return s
}

func (s *BlockReceipt) SetLogs(v []*LogEntry) *BlockReceipt {
	s.Logs = v
	return s
}

func (s *BlockReceipt) SetOutput(v string) *BlockReceipt {
	s.Output = &v
	return s
}

func (s *BlockReceipt) SetResult(v int64) *BlockReceipt {
	s.Result = &v
	return s
}

// 商品IP授权信息
type IPAuthorizationInfo struct {
	// 授权模式,0普通授权/1独家授权
	AuthorizationModel []*int64 `json:"authorization_model,omitempty" xml:"authorization_model,omitempty" type:"Repeated"`
	// 授权类型，衍生品授权，营销授权，商标授权，数字虚拟授权，其他
	AuthorizationType []*string `json:"authorization_type,omitempty" xml:"authorization_type,omitempty" type:"Repeated"`
	// 授权范围
	AuthorizationScope *string `json:"authorization_scope,omitempty" xml:"authorization_scope,omitempty"`
	// 授权要求
	AuthorizationRequirement *string `json:"authorization_requirement,omitempty" xml:"authorization_requirement,omitempty"`
}

func (s IPAuthorizationInfo) String() string {
	return tea.Prettify(s)
}

func (s IPAuthorizationInfo) GoString() string {
	return s.String()
}

func (s *IPAuthorizationInfo) SetAuthorizationModel(v []*int64) *IPAuthorizationInfo {
	s.AuthorizationModel = v
	return s
}

func (s *IPAuthorizationInfo) SetAuthorizationType(v []*string) *IPAuthorizationInfo {
	s.AuthorizationType = v
	return s
}

func (s *IPAuthorizationInfo) SetAuthorizationScope(v string) *IPAuthorizationInfo {
	s.AuthorizationScope = &v
	return s
}

func (s *IPAuthorizationInfo) SetAuthorizationRequirement(v string) *IPAuthorizationInfo {
	s.AuthorizationRequirement = &v
	return s
}

// Ip正版码信息中Ip相关信息
type IPCodeIpGoodInfo struct {
	// IP名称
	IpName *string `json:"ip_name,omitempty" xml:"ip_name,omitempty" require:"true"`
	// IP描述
	IpDescription *string `json:"ip_description,omitempty" xml:"ip_description,omitempty" require:"true"`
	// IP主图oss地址
	IpImgUrl *string `json:"ip_img_url,omitempty" xml:"ip_img_url,omitempty" require:"true"`
	// IP主图，非oss地址，可直接访问的图片地址
	IpImgUrlTmp *string `json:"ip_img_url_tmp,omitempty" xml:"ip_img_url_tmp,omitempty"`
}

func (s IPCodeIpGoodInfo) String() string {
	return tea.Prettify(s)
}

func (s IPCodeIpGoodInfo) GoString() string {
	return s.String()
}

func (s *IPCodeIpGoodInfo) SetIpName(v string) *IPCodeIpGoodInfo {
	s.IpName = &v
	return s
}

func (s *IPCodeIpGoodInfo) SetIpDescription(v string) *IPCodeIpGoodInfo {
	s.IpDescription = &v
	return s
}

func (s *IPCodeIpGoodInfo) SetIpImgUrl(v string) *IPCodeIpGoodInfo {
	s.IpImgUrl = &v
	return s
}

func (s *IPCodeIpGoodInfo) SetIpImgUrlTmp(v string) *IPCodeIpGoodInfo {
	s.IpImgUrlTmp = &v
	return s
}

// 正版码版权方信息
type IPCodeIpOwnerInfo struct {
	// 版权所有者名称
	IpOwnerName *string `json:"ip_owner_name,omitempty" xml:"ip_owner_name,omitempty"`
	// 版权方头像oss地址
	IpOwnerImage *string `json:"ip_owner_image,omitempty" xml:"ip_owner_image,omitempty"`
	// 版权方头像，临时访问地址，可直接访问
	IpOwnerImageTmp *string `json:"ip_owner_image_tmp,omitempty" xml:"ip_owner_image_tmp,omitempty"`
	// ip描述
	IpDescription *string `json:"ip_description,omitempty" xml:"ip_description,omitempty"`
	// 默认为空或者0是版权信息；1是著作信息；2是创作信息；3是联名信息；4是自定义
	IpOwnerType *int64 `json:"ip_owner_type,omitempty" xml:"ip_owner_type,omitempty"`
	// 自定义资质信息类型
	IpOwnerCustom *string `json:"ip_owner_custom,omitempty" xml:"ip_owner_custom,omitempty"`
}

func (s IPCodeIpOwnerInfo) String() string {
	return tea.Prettify(s)
}

func (s IPCodeIpOwnerInfo) GoString() string {
	return s.String()
}

func (s *IPCodeIpOwnerInfo) SetIpOwnerName(v string) *IPCodeIpOwnerInfo {
	s.IpOwnerName = &v
	return s
}

func (s *IPCodeIpOwnerInfo) SetIpOwnerImage(v string) *IPCodeIpOwnerInfo {
	s.IpOwnerImage = &v
	return s
}

func (s *IPCodeIpOwnerInfo) SetIpOwnerImageTmp(v string) *IPCodeIpOwnerInfo {
	s.IpOwnerImageTmp = &v
	return s
}

func (s *IPCodeIpOwnerInfo) SetIpDescription(v string) *IPCodeIpOwnerInfo {
	s.IpDescription = &v
	return s
}

func (s *IPCodeIpOwnerInfo) SetIpOwnerType(v int64) *IPCodeIpOwnerInfo {
	s.IpOwnerType = &v
	return s
}

func (s *IPCodeIpOwnerInfo) SetIpOwnerCustom(v string) *IPCodeIpOwnerInfo {
	s.IpOwnerCustom = &v
	return s
}

// IP授权服务: ContactInfo
type IPContactInfo struct {
	// 联系人姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 联系人手机号码
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 联系人电话号码
	Phone *string `json:"phone,omitempty" xml:"phone,omitempty"`
	// 联系人类型, 1-法人；2-实际控制人；3-代理人；4-其他
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 联系人身份证号
	Certno *string `json:"certno,omitempty" xml:"certno,omitempty"`
	// 联系人证件类型
	CertType *string `json:"cert_type,omitempty" xml:"cert_type,omitempty"`
}

func (s IPContactInfo) String() string {
	return tea.Prettify(s)
}

func (s IPContactInfo) GoString() string {
	return s.String()
}

func (s *IPContactInfo) SetName(v string) *IPContactInfo {
	s.Name = &v
	return s
}

func (s *IPContactInfo) SetMobile(v string) *IPContactInfo {
	s.Mobile = &v
	return s
}

func (s *IPContactInfo) SetPhone(v string) *IPContactInfo {
	s.Phone = &v
	return s
}

func (s *IPContactInfo) SetType(v int64) *IPContactInfo {
	s.Type = &v
	return s
}

func (s *IPContactInfo) SetCertno(v string) *IPContactInfo {
	s.Certno = &v
	return s
}

func (s *IPContactInfo) SetCertType(v string) *IPContactInfo {
	s.CertType = &v
	return s
}

// ip的渠道信息带上sku信息
type IpChannelWithSku struct {
	// 渠道名字
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 授权模式 商品授权 0普通授权/1独家授权 本期只有0
	//
	AuthorizationMode *int64 `json:"authorization_mode,omitempty" xml:"authorization_mode,omitempty" require:"true"`
	// 新授权模式，0普通授权，1独家授权，支持多选
	NewAuthorizationModel []*int64 `json:"new_authorization_model,omitempty" xml:"new_authorization_model,omitempty" type:"Repeated"`
	// 计费模式 0:按量 1:按金额
	//
	PayMode *int64 `json:"pay_mode,omitempty" xml:"pay_mode,omitempty" require:"true"`
	// ip等级  0:经典IP/1:流量IP/2:设计IP
	IpLevel *int64 `json:"ip_level,omitempty" xml:"ip_level,omitempty" require:"true"`
	// sku信息
	SkuInfo []*IpSkuInfo `json:"sku_info,omitempty" xml:"sku_info,omitempty" require:"true" type:"Repeated"`
	// 商品状态（0:待上架，1:上架，2:下架）
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 交易是否需要确认
	TradeNeedConfirm *bool `json:"trade_need_confirm,omitempty" xml:"trade_need_confirm,omitempty"`
	// 授权类型
	AuthorizationType []*string `json:"authorization_type,omitempty" xml:"authorization_type,omitempty" type:"Repeated"`
	// 保底金区间，0：0；1：10万以下；2:10-30万；3:30-50万；4:50万以上
	GuaranteeRange *int64 `json:"guarantee_range,omitempty" xml:"guarantee_range,omitempty"`
	// 交易模式
	IpTradeMode *IPTradeMode `json:"ip_trade_mode,omitempty" xml:"ip_trade_mode,omitempty"`
	// 授权行业
	AuthorizationIndustry []*string `json:"authorization_industry,omitempty" xml:"authorization_industry,omitempty" type:"Repeated"`
}

func (s IpChannelWithSku) String() string {
	return tea.Prettify(s)
}

func (s IpChannelWithSku) GoString() string {
	return s.String()
}

func (s *IpChannelWithSku) SetChannelName(v string) *IpChannelWithSku {
	s.ChannelName = &v
	return s
}

func (s *IpChannelWithSku) SetAuthorizationMode(v int64) *IpChannelWithSku {
	s.AuthorizationMode = &v
	return s
}

func (s *IpChannelWithSku) SetNewAuthorizationModel(v []*int64) *IpChannelWithSku {
	s.NewAuthorizationModel = v
	return s
}

func (s *IpChannelWithSku) SetPayMode(v int64) *IpChannelWithSku {
	s.PayMode = &v
	return s
}

func (s *IpChannelWithSku) SetIpLevel(v int64) *IpChannelWithSku {
	s.IpLevel = &v
	return s
}

func (s *IpChannelWithSku) SetSkuInfo(v []*IpSkuInfo) *IpChannelWithSku {
	s.SkuInfo = v
	return s
}

func (s *IpChannelWithSku) SetStatus(v int64) *IpChannelWithSku {
	s.Status = &v
	return s
}

func (s *IpChannelWithSku) SetTradeNeedConfirm(v bool) *IpChannelWithSku {
	s.TradeNeedConfirm = &v
	return s
}

func (s *IpChannelWithSku) SetAuthorizationType(v []*string) *IpChannelWithSku {
	s.AuthorizationType = v
	return s
}

func (s *IpChannelWithSku) SetGuaranteeRange(v int64) *IpChannelWithSku {
	s.GuaranteeRange = &v
	return s
}

func (s *IpChannelWithSku) SetIpTradeMode(v *IPTradeMode) *IpChannelWithSku {
	s.IpTradeMode = v
	return s
}

func (s *IpChannelWithSku) SetAuthorizationIndustry(v []*string) *IpChannelWithSku {
	s.AuthorizationIndustry = v
	return s
}

// 权益附属信息
type EquityExtInfo struct {
	// 指定兑换日限制已使用
	LimitPerDayUsed *int64 `json:"limit_per_day_used,omitempty" xml:"limit_per_day_used,omitempty" require:"true"`
	// 指定兑换月限制已使用
	LimitPerMonthUsed *int64 `json:"limit_per_month_used,omitempty" xml:"limit_per_month_used,omitempty" require:"true"`
	// 权益开放的租户ID
	OpenToTenantId *string `json:"open_to_tenant_id,omitempty" xml:"open_to_tenant_id,omitempty" require:"true"`
	// 指定日期
	TargetDate *string `json:"target_date,omitempty" xml:"target_date,omitempty" require:"true"`
	// 权益对租户价格
	TenantPrice *string `json:"tenant_price,omitempty" xml:"tenant_price,omitempty" require:"true"`
	// 授权给租户用户的价格
	TenantUserPrice *UserPrice `json:"tenant_user_price,omitempty" xml:"tenant_user_price,omitempty" require:"true"`
	// 租户价格包括费率
	TenantPriceWithCommission *string `json:"tenant_price_with_commission,omitempty" xml:"tenant_price_with_commission,omitempty" require:"true"`
	// 费率
	Commission *string `json:"commission,omitempty" xml:"commission,omitempty" require:"true"`
}

func (s EquityExtInfo) String() string {
	return tea.Prettify(s)
}

func (s EquityExtInfo) GoString() string {
	return s.String()
}

func (s *EquityExtInfo) SetLimitPerDayUsed(v int64) *EquityExtInfo {
	s.LimitPerDayUsed = &v
	return s
}

func (s *EquityExtInfo) SetLimitPerMonthUsed(v int64) *EquityExtInfo {
	s.LimitPerMonthUsed = &v
	return s
}

func (s *EquityExtInfo) SetOpenToTenantId(v string) *EquityExtInfo {
	s.OpenToTenantId = &v
	return s
}

func (s *EquityExtInfo) SetTargetDate(v string) *EquityExtInfo {
	s.TargetDate = &v
	return s
}

func (s *EquityExtInfo) SetTenantPrice(v string) *EquityExtInfo {
	s.TenantPrice = &v
	return s
}

func (s *EquityExtInfo) SetTenantUserPrice(v *UserPrice) *EquityExtInfo {
	s.TenantUserPrice = v
	return s
}

func (s *EquityExtInfo) SetTenantPriceWithCommission(v string) *EquityExtInfo {
	s.TenantPriceWithCommission = &v
	return s
}

func (s *EquityExtInfo) SetCommission(v string) *EquityExtInfo {
	s.Commission = &v
	return s
}

// 正版码配置的商品信息
type IPCodeGoodsInfo struct {
	// 商品名称
	GoodsName *string `json:"goods_name,omitempty" xml:"goods_name,omitempty"`
	// 商品链接
	GoodsUrl *string `json:"goods_url,omitempty" xml:"goods_url,omitempty"`
	// 商品图片
	GoodsImage *string `json:"goods_image,omitempty" xml:"goods_image,omitempty"`
	// 商品图片临时访问地址，可直接访问
	GoodsImageTmp *string `json:"goods_image_tmp,omitempty" xml:"goods_image_tmp,omitempty"`
	// 商品店铺名称/商品出品方
	GoodsStore *string `json:"goods_store,omitempty" xml:"goods_store,omitempty"`
	// 店铺logo图片链接
	GoodsStoreLogo *string `json:"goods_store_logo,omitempty" xml:"goods_store_logo,omitempty"`
	// 店铺logo临时访问地址
	GoodsStoreLogoTmp *string `json:"goods_store_logo_tmp,omitempty" xml:"goods_store_logo_tmp,omitempty"`
	// 商品描述
	GoodsDescription *string `json:"goods_description,omitempty" xml:"goods_description,omitempty"`
	// 商品品牌
	GoodsBrand *string `json:"goods_brand,omitempty" xml:"goods_brand,omitempty"`
	// 授权过期类型，0：长久有效，1：有效日期内有效
	AuthorizationExpiratedType *string `json:"authorization_expirated_type,omitempty" xml:"authorization_expirated_type,omitempty"`
	// 授权截止日期
	AuthorizationEndTime *string `json:"authorization_end_time,omitempty" xml:"authorization_end_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 发售渠道
	GoodsSaleChannel *string `json:"goods_sale_channel,omitempty" xml:"goods_sale_channel,omitempty"`
	// 商品规格
	GoodsSpecifications []*ProductSpecification `json:"goods_specifications,omitempty" xml:"goods_specifications,omitempty" type:"Repeated"`
	// 是否展示批次数据
	IsDisplayBatchdata *bool `json:"is_display_batchdata,omitempty" xml:"is_display_batchdata,omitempty"`
	// 商品售价
	SellingPrice *string `json:"selling_price,omitempty" xml:"selling_price,omitempty"`
	// 背景氛围图
	BackgroundPicture *string `json:"background_picture,omitempty" xml:"background_picture,omitempty"`
}

func (s IPCodeGoodsInfo) String() string {
	return tea.Prettify(s)
}

func (s IPCodeGoodsInfo) GoString() string {
	return s.String()
}

func (s *IPCodeGoodsInfo) SetGoodsName(v string) *IPCodeGoodsInfo {
	s.GoodsName = &v
	return s
}

func (s *IPCodeGoodsInfo) SetGoodsUrl(v string) *IPCodeGoodsInfo {
	s.GoodsUrl = &v
	return s
}

func (s *IPCodeGoodsInfo) SetGoodsImage(v string) *IPCodeGoodsInfo {
	s.GoodsImage = &v
	return s
}

func (s *IPCodeGoodsInfo) SetGoodsImageTmp(v string) *IPCodeGoodsInfo {
	s.GoodsImageTmp = &v
	return s
}

func (s *IPCodeGoodsInfo) SetGoodsStore(v string) *IPCodeGoodsInfo {
	s.GoodsStore = &v
	return s
}

func (s *IPCodeGoodsInfo) SetGoodsStoreLogo(v string) *IPCodeGoodsInfo {
	s.GoodsStoreLogo = &v
	return s
}

func (s *IPCodeGoodsInfo) SetGoodsStoreLogoTmp(v string) *IPCodeGoodsInfo {
	s.GoodsStoreLogoTmp = &v
	return s
}

func (s *IPCodeGoodsInfo) SetGoodsDescription(v string) *IPCodeGoodsInfo {
	s.GoodsDescription = &v
	return s
}

func (s *IPCodeGoodsInfo) SetGoodsBrand(v string) *IPCodeGoodsInfo {
	s.GoodsBrand = &v
	return s
}

func (s *IPCodeGoodsInfo) SetAuthorizationExpiratedType(v string) *IPCodeGoodsInfo {
	s.AuthorizationExpiratedType = &v
	return s
}

func (s *IPCodeGoodsInfo) SetAuthorizationEndTime(v string) *IPCodeGoodsInfo {
	s.AuthorizationEndTime = &v
	return s
}

func (s *IPCodeGoodsInfo) SetGoodsSaleChannel(v string) *IPCodeGoodsInfo {
	s.GoodsSaleChannel = &v
	return s
}

func (s *IPCodeGoodsInfo) SetGoodsSpecifications(v []*ProductSpecification) *IPCodeGoodsInfo {
	s.GoodsSpecifications = v
	return s
}

func (s *IPCodeGoodsInfo) SetIsDisplayBatchdata(v bool) *IPCodeGoodsInfo {
	s.IsDisplayBatchdata = &v
	return s
}

func (s *IPCodeGoodsInfo) SetSellingPrice(v string) *IPCodeGoodsInfo {
	s.SellingPrice = &v
	return s
}

func (s *IPCodeGoodsInfo) SetBackgroundPicture(v string) *IPCodeGoodsInfo {
	s.BackgroundPicture = &v
	return s
}

// 区块头
type BlockHeader struct {
	// gas总消耗
	GasUsed *int64 `json:"gas_used,omitempty" xml:"gas_used,omitempty" require:"true"`
	// 十六进制区块哈希值
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty" require:"true"`
	// log bloom
	LogBloom *string `json:"log_bloom,omitempty" xml:"log_bloom,omitempty" require:"true"`
	// 区块高度
	Number *int64 `json:"number,omitempty" xml:"number,omitempty" require:"true"`
	// 十六进制区块父hash
	ParentHash *string `json:"parent_hash,omitempty" xml:"parent_hash,omitempty" require:"true"`
	// 交易单据树根
	ReceiptRoot *string `json:"receipt_root,omitempty" xml:"receipt_root,omitempty" require:"true"`
	// 状态树根
	StateRoot *string `json:"state_root,omitempty" xml:"state_root,omitempty" require:"true"`
	// 区块时间戳
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// 十六进制交易merkle树根
	TransactionRoot *string `json:"transaction_root,omitempty" xml:"transaction_root,omitempty" require:"true"`
	// 区块版本
	Version *int64 `json:"version,omitempty" xml:"version,omitempty" require:"true"`
}

func (s BlockHeader) String() string {
	return tea.Prettify(s)
}

func (s BlockHeader) GoString() string {
	return s.String()
}

func (s *BlockHeader) SetGasUsed(v int64) *BlockHeader {
	s.GasUsed = &v
	return s
}

func (s *BlockHeader) SetHash(v string) *BlockHeader {
	s.Hash = &v
	return s
}

func (s *BlockHeader) SetLogBloom(v string) *BlockHeader {
	s.LogBloom = &v
	return s
}

func (s *BlockHeader) SetNumber(v int64) *BlockHeader {
	s.Number = &v
	return s
}

func (s *BlockHeader) SetParentHash(v string) *BlockHeader {
	s.ParentHash = &v
	return s
}

func (s *BlockHeader) SetReceiptRoot(v string) *BlockHeader {
	s.ReceiptRoot = &v
	return s
}

func (s *BlockHeader) SetStateRoot(v string) *BlockHeader {
	s.StateRoot = &v
	return s
}

func (s *BlockHeader) SetTimestamp(v int64) *BlockHeader {
	s.Timestamp = &v
	return s
}

func (s *BlockHeader) SetTransactionRoot(v string) *BlockHeader {
	s.TransactionRoot = &v
	return s
}

func (s *BlockHeader) SetVersion(v int64) *BlockHeader {
	s.Version = &v
	return s
}

// 信用钱包信息
type CreditWallet struct {
	// 最大授信额度(单位:元,精确到小数点后4位)
	MaxBalance *string `json:"max_balance,omitempty" xml:"max_balance,omitempty" require:"true"`
	// 已经使用的授信额度(单位:元,精确到小数点后4位)
	UsedBalance *string `json:"used_balance,omitempty" xml:"used_balance,omitempty" require:"true"`
	// 钱包类型（0:debit,1:credit）
	WalletType *int64 `json:"wallet_type,omitempty" xml:"wallet_type,omitempty" require:"true"`
	// 资金管理员
	FundManagerId *string `json:"fund_manager_id,omitempty" xml:"fund_manager_id,omitempty" require:"true"`
	// 资金托管员
	TrusteeId *string `json:"trustee_id,omitempty" xml:"trustee_id,omitempty" require:"true"`
	// 其他信息（例举：联行号）
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty" require:"true"`
}

func (s CreditWallet) String() string {
	return tea.Prettify(s)
}

func (s CreditWallet) GoString() string {
	return s.String()
}

func (s *CreditWallet) SetMaxBalance(v string) *CreditWallet {
	s.MaxBalance = &v
	return s
}

func (s *CreditWallet) SetUsedBalance(v string) *CreditWallet {
	s.UsedBalance = &v
	return s
}

func (s *CreditWallet) SetWalletType(v int64) *CreditWallet {
	s.WalletType = &v
	return s
}

func (s *CreditWallet) SetFundManagerId(v string) *CreditWallet {
	s.FundManagerId = &v
	return s
}

func (s *CreditWallet) SetTrusteeId(v string) *CreditWallet {
	s.TrusteeId = &v
	return s
}

func (s *CreditWallet) SetExtInfo(v string) *CreditWallet {
	s.ExtInfo = &v
	return s
}

// 消费卡交易信息附加数据
type MetaDataDO struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s MetaDataDO) String() string {
	return tea.Prettify(s)
}

func (s MetaDataDO) GoString() string {
	return s.String()
}

func (s *MetaDataDO) SetKey(v string) *MetaDataDO {
	s.Key = &v
	return s
}

func (s *MetaDataDO) SetValue(v string) *MetaDataDO {
	s.Value = &v
	return s
}

// 区块体
type BlockBody struct {
	// 区块共识证明(HEX)
	ConsensusProof *string `json:"consensus_proof,omitempty" xml:"consensus_proof,omitempty" require:"true"`
	// 区块中交易回执列表
	ReceiptList []*BlockReceipt `json:"receipt_list,omitempty" xml:"receipt_list,omitempty" require:"true" type:"Repeated"`
	// 区块中交易列表
	TransactionList []*BlockTransaction `json:"transaction_list,omitempty" xml:"transaction_list,omitempty" require:"true" type:"Repeated"`
}

func (s BlockBody) String() string {
	return tea.Prettify(s)
}

func (s BlockBody) GoString() string {
	return s.String()
}

func (s *BlockBody) SetConsensusProof(v string) *BlockBody {
	s.ConsensusProof = &v
	return s
}

func (s *BlockBody) SetReceiptList(v []*BlockReceipt) *BlockBody {
	s.ReceiptList = v
	return s
}

func (s *BlockBody) SetTransactionList(v []*BlockTransaction) *BlockBody {
	s.TransactionList = v
	return s
}

// 权益详情
type EquityDetail struct {
	// 权益描述
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 权益描述图片OSS地址（分号;分隔）
	DescImages *string `json:"desc_images,omitempty" xml:"desc_images,omitempty" require:"true"`
	// 权益ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 权益名称
	EquityName *string `json:"equity_name,omitempty" xml:"equity_name,omitempty" require:"true"`
	// 权益类型
	EquityType *string `json:"equity_type,omitempty" xml:"equity_type,omitempty" require:"true"`
	// 权益面值(元)
	EquityValue *string `json:"equity_value,omitempty" xml:"equity_value,omitempty" require:"true"`
	// 权益主图片OSS地址（分号;分隔）
	Images *string `json:"images,omitempty" xml:"images,omitempty" require:"true"`
	// 对客价(元)
	Price *string `json:"price,omitempty" xml:"price,omitempty" require:"true"`
	// 权益SKU
	SkuId *string `json:"sku_id,omitempty" xml:"sku_id,omitempty" require:"true"`
}

func (s EquityDetail) String() string {
	return tea.Prettify(s)
}

func (s EquityDetail) GoString() string {
	return s.String()
}

func (s *EquityDetail) SetDescription(v string) *EquityDetail {
	s.Description = &v
	return s
}

func (s *EquityDetail) SetDescImages(v string) *EquityDetail {
	s.DescImages = &v
	return s
}

func (s *EquityDetail) SetEquityId(v string) *EquityDetail {
	s.EquityId = &v
	return s
}

func (s *EquityDetail) SetEquityName(v string) *EquityDetail {
	s.EquityName = &v
	return s
}

func (s *EquityDetail) SetEquityType(v string) *EquityDetail {
	s.EquityType = &v
	return s
}

func (s *EquityDetail) SetEquityValue(v string) *EquityDetail {
	s.EquityValue = &v
	return s
}

func (s *EquityDetail) SetImages(v string) *EquityDetail {
	s.Images = &v
	return s
}

func (s *EquityDetail) SetPrice(v string) *EquityDetail {
	s.Price = &v
	return s
}

func (s *EquityDetail) SetSkuId(v string) *EquityDetail {
	s.SkuId = &v
	return s
}

// 手续费周期
type CommissionPeriod struct {
	// 手续费费率
	DeductRatio *string `json:"deduct_ratio,omitempty" xml:"deduct_ratio,omitempty" require:"true"`
	// 手续费子结构
	SubCommissionRules []*SubCommissionRule `json:"sub_commission_rules,omitempty" xml:"sub_commission_rules,omitempty" require:"true" type:"Repeated"`
	// 买家的历史统计做阶梯计费，最多50个
	MerchantLayers []*CommissionLayer `json:"merchant_layers,omitempty" xml:"merchant_layers,omitempty" require:"true" type:"Repeated"`
	// 商品阶梯
	GoodsLayers []*CommissionLayer `json:"goods_layers,omitempty" xml:"goods_layers,omitempty" require:"true" type:"Repeated"`
	// 手续费开始时间（无结束时间）
	StartTimeMills *int64 `json:"start_time_mills,omitempty" xml:"start_time_mills,omitempty" require:"true"`
	// 0: txcount（成功的交易）; 1: 累计交易金额; 2:累计手续费; 3：单笔金额, ...
	LayerType *int64 `json:"layer_type,omitempty" xml:"layer_type,omitempty" require:"true"`
	// 分层的周期，（0是月，1是日，2是年（这期不用，需要设置一下）, 3是季度）
	CounterTimeType *int64 `json:"counter_time_type,omitempty" xml:"counter_time_type,omitempty" require:"true"`
	// 商品固定费用
	DeductToken *string `json:"deduct_token,omitempty" xml:"deduct_token,omitempty" require:"true"`
}

func (s CommissionPeriod) String() string {
	return tea.Prettify(s)
}

func (s CommissionPeriod) GoString() string {
	return s.String()
}

func (s *CommissionPeriod) SetDeductRatio(v string) *CommissionPeriod {
	s.DeductRatio = &v
	return s
}

func (s *CommissionPeriod) SetSubCommissionRules(v []*SubCommissionRule) *CommissionPeriod {
	s.SubCommissionRules = v
	return s
}

func (s *CommissionPeriod) SetMerchantLayers(v []*CommissionLayer) *CommissionPeriod {
	s.MerchantLayers = v
	return s
}

func (s *CommissionPeriod) SetGoodsLayers(v []*CommissionLayer) *CommissionPeriod {
	s.GoodsLayers = v
	return s
}

func (s *CommissionPeriod) SetStartTimeMills(v int64) *CommissionPeriod {
	s.StartTimeMills = &v
	return s
}

func (s *CommissionPeriod) SetLayerType(v int64) *CommissionPeriod {
	s.LayerType = &v
	return s
}

func (s *CommissionPeriod) SetCounterTimeType(v int64) *CommissionPeriod {
	s.CounterTimeType = &v
	return s
}

func (s *CommissionPeriod) SetDeductToken(v string) *CommissionPeriod {
	s.DeductToken = &v
	return s
}

// 实际售卖的商品信息
type IPOrderGoods struct {
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
	// 数据渠道类型：0 手动录入，1 淘宝开放平台
	DataType *int64 `json:"data_type,omitempty" xml:"data_type,omitempty" require:"true"`
	// ID类型
	IdType *int64 `json:"id_type,omitempty" xml:"id_type,omitempty" require:"true"`
	// 商品ID
	GoodsId *string `json:"goods_id,omitempty" xml:"goods_id,omitempty" require:"true"`
	// 商品名称
	GoodsName *string `json:"goods_name,omitempty" xml:"goods_name,omitempty" require:"true"`
	// 商家昵称
	Nick *string `json:"nick,omitempty" xml:"nick,omitempty"`
}

func (s IPOrderGoods) String() string {
	return tea.Prettify(s)
}

func (s IPOrderGoods) GoString() string {
	return s.String()
}

func (s *IPOrderGoods) SetIpOrderId(v string) *IPOrderGoods {
	s.IpOrderId = &v
	return s
}

func (s *IPOrderGoods) SetDataType(v int64) *IPOrderGoods {
	s.DataType = &v
	return s
}

func (s *IPOrderGoods) SetIdType(v int64) *IPOrderGoods {
	s.IdType = &v
	return s
}

func (s *IPOrderGoods) SetGoodsId(v string) *IPOrderGoods {
	s.GoodsId = &v
	return s
}

func (s *IPOrderGoods) SetGoodsName(v string) *IPOrderGoods {
	s.GoodsName = &v
	return s
}

func (s *IPOrderGoods) SetNick(v string) *IPOrderGoods {
	s.Nick = &v
	return s
}

// 正版码配置资源位信息
type IPCodeAdvertisingInfo struct {
	// 资源位头图
	AdImage *string `json:"ad_image,omitempty" xml:"ad_image,omitempty"`
	// 资源位头图可直接访问的临时链接
	AdImageTmp *string `json:"ad_image_tmp,omitempty" xml:"ad_image_tmp,omitempty"`
	// 资源位链接
	AdUrl *string `json:"ad_url,omitempty" xml:"ad_url,omitempty"`
	// 资源商品名称
	AdName *string `json:"ad_name,omitempty" xml:"ad_name,omitempty"`
	// 广告位类型，为空时代表是商品广告位，Resource时代表是资源位
	AdType *string `json:"ad_type,omitempty" xml:"ad_type,omitempty"`
	// 展示有效期开始时间
	AdValidBeginTime *string `json:"ad_valid_begin_time,omitempty" xml:"ad_valid_begin_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 展示有效期结束时间
	AdValidEndTime *string `json:"ad_valid_end_time,omitempty" xml:"ad_valid_end_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s IPCodeAdvertisingInfo) String() string {
	return tea.Prettify(s)
}

func (s IPCodeAdvertisingInfo) GoString() string {
	return s.String()
}

func (s *IPCodeAdvertisingInfo) SetAdImage(v string) *IPCodeAdvertisingInfo {
	s.AdImage = &v
	return s
}

func (s *IPCodeAdvertisingInfo) SetAdImageTmp(v string) *IPCodeAdvertisingInfo {
	s.AdImageTmp = &v
	return s
}

func (s *IPCodeAdvertisingInfo) SetAdUrl(v string) *IPCodeAdvertisingInfo {
	s.AdUrl = &v
	return s
}

func (s *IPCodeAdvertisingInfo) SetAdName(v string) *IPCodeAdvertisingInfo {
	s.AdName = &v
	return s
}

func (s *IPCodeAdvertisingInfo) SetAdType(v string) *IPCodeAdvertisingInfo {
	s.AdType = &v
	return s
}

func (s *IPCodeAdvertisingInfo) SetAdValidBeginTime(v string) *IPCodeAdvertisingInfo {
	s.AdValidBeginTime = &v
	return s
}

func (s *IPCodeAdvertisingInfo) SetAdValidEndTime(v string) *IPCodeAdvertisingInfo {
	s.AdValidEndTime = &v
	return s
}

// IP授权服务: CardInfo
type IPCardInfo struct {
	// 卡户名
	AccountHolderName *string `json:"account_holder_name,omitempty" xml:"account_holder_name,omitempty" require:"true"`
	// 卡号
	AccountNo *string `json:"account_no,omitempty" xml:"account_no,omitempty" require:"true"`
	// 银行名称
	AccountInstName *string `json:"account_inst_name,omitempty" xml:"account_inst_name,omitempty" require:"true"`
	// 银行缩写
	AccountInstId *string `json:"account_inst_id,omitempty" xml:"account_inst_id,omitempty" require:"true"`
	// 联行号
	BankCode *string `json:"bank_code,omitempty" xml:"bank_code,omitempty"`
	// 开户行所在省份
	AccountInstProvince *string `json:"account_inst_province,omitempty" xml:"account_inst_province,omitempty" require:"true"`
	// 开户行所在城市
	AccountInstCity *string `json:"account_inst_city,omitempty" xml:"account_inst_city,omitempty" require:"true"`
	// 开户行支行名称
	AccountBranchName *string `json:"account_branch_name,omitempty" xml:"account_branch_name,omitempty" require:"true"`
}

func (s IPCardInfo) String() string {
	return tea.Prettify(s)
}

func (s IPCardInfo) GoString() string {
	return s.String()
}

func (s *IPCardInfo) SetAccountHolderName(v string) *IPCardInfo {
	s.AccountHolderName = &v
	return s
}

func (s *IPCardInfo) SetAccountNo(v string) *IPCardInfo {
	s.AccountNo = &v
	return s
}

func (s *IPCardInfo) SetAccountInstName(v string) *IPCardInfo {
	s.AccountInstName = &v
	return s
}

func (s *IPCardInfo) SetAccountInstId(v string) *IPCardInfo {
	s.AccountInstId = &v
	return s
}

func (s *IPCardInfo) SetBankCode(v string) *IPCardInfo {
	s.BankCode = &v
	return s
}

func (s *IPCardInfo) SetAccountInstProvince(v string) *IPCardInfo {
	s.AccountInstProvince = &v
	return s
}

func (s *IPCardInfo) SetAccountInstCity(v string) *IPCardInfo {
	s.AccountInstCity = &v
	return s
}

func (s *IPCardInfo) SetAccountBranchName(v string) *IPCardInfo {
	s.AccountBranchName = &v
	return s
}

// 余额钱包信息
type DebitWallet struct {
	// 钱包余额(单位:元, 精确到小数点后4位)
	Balance *string `json:"balance,omitempty" xml:"balance,omitempty" require:"true"`
	// 开户名称
	BankAccountName *string `json:"bank_account_name,omitempty" xml:"bank_account_name,omitempty" require:"true"`
	// 开户地
	BankAddress *string `json:"bank_address,omitempty" xml:"bank_address,omitempty" require:"true"`
	// 开户银行分支机构名称
	BankBranchName *string `json:"bank_branch_name,omitempty" xml:"bank_branch_name,omitempty" require:"true"`
	// 开户卡号
	BankCardId *string `json:"bank_card_id,omitempty" xml:"bank_card_id,omitempty" require:"true"`
	// 开户行名称
	BankName *string `json:"bank_name,omitempty" xml:"bank_name,omitempty" require:"true"`
	// 其他信息（例举：联行号）
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty" require:"true"`
	// 资金管理员
	FundManagerId *string `json:"fund_manager_id,omitempty" xml:"fund_manager_id,omitempty" require:"true"`
	// 资金托管员
	TrusteeId *string `json:"trustee_id,omitempty" xml:"trustee_id,omitempty" require:"true"`
	// 钱包类型（0:debit,1:credit）
	WalletType *int64 `json:"wallet_type,omitempty" xml:"wallet_type,omitempty" require:"true"`
}

func (s DebitWallet) String() string {
	return tea.Prettify(s)
}

func (s DebitWallet) GoString() string {
	return s.String()
}

func (s *DebitWallet) SetBalance(v string) *DebitWallet {
	s.Balance = &v
	return s
}

func (s *DebitWallet) SetBankAccountName(v string) *DebitWallet {
	s.BankAccountName = &v
	return s
}

func (s *DebitWallet) SetBankAddress(v string) *DebitWallet {
	s.BankAddress = &v
	return s
}

func (s *DebitWallet) SetBankBranchName(v string) *DebitWallet {
	s.BankBranchName = &v
	return s
}

func (s *DebitWallet) SetBankCardId(v string) *DebitWallet {
	s.BankCardId = &v
	return s
}

func (s *DebitWallet) SetBankName(v string) *DebitWallet {
	s.BankName = &v
	return s
}

func (s *DebitWallet) SetExtInfo(v string) *DebitWallet {
	s.ExtInfo = &v
	return s
}

func (s *DebitWallet) SetFundManagerId(v string) *DebitWallet {
	s.FundManagerId = &v
	return s
}

func (s *DebitWallet) SetTrusteeId(v string) *DebitWallet {
	s.TrusteeId = &v
	return s
}

func (s *DebitWallet) SetWalletType(v int64) *DebitWallet {
	s.WalletType = &v
	return s
}

// 申请授权合作的备注信息
type IPOrderApplyInfo struct {
	// 授权合作商品
	AuthGoods *string `json:"auth_goods,omitempty" xml:"auth_goods,omitempty" require:"true"`
	// 销售规模数量
	SalesAmount *int64 `json:"sales_amount,omitempty" xml:"sales_amount,omitempty" require:"true"`
	// 销售规模金额
	SalesNumber *string `json:"sales_number,omitempty" xml:"sales_number,omitempty" require:"true"`
}

func (s IPOrderApplyInfo) String() string {
	return tea.Prettify(s)
}

func (s IPOrderApplyInfo) GoString() string {
	return s.String()
}

func (s *IPOrderApplyInfo) SetAuthGoods(v string) *IPOrderApplyInfo {
	s.AuthGoods = &v
	return s
}

func (s *IPOrderApplyInfo) SetSalesAmount(v int64) *IPOrderApplyInfo {
	s.SalesAmount = &v
	return s
}

func (s *IPOrderApplyInfo) SetSalesNumber(v string) *IPOrderApplyInfo {
	s.SalesNumber = &v
	return s
}

// 增值服务信息
type ValueAddedServiceInfo struct {
	// 增值服务归属账户id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 增值服务id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
	// 增值服务名字
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty" require:"true"`
	// 主图 链接地址
	Images *string `json:"images,omitempty" xml:"images,omitempty" require:"true"`
	// 详情图
	ImagesDetail *string `json:"images_detail,omitempty" xml:"images_detail,omitempty" require:"true"`
	// 增值服务描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 联系人列表
	DockingPeople []*DockingPeopleInfo `json:"docking_people,omitempty" xml:"docking_people,omitempty" require:"true" type:"Repeated"`
	// 资质证明
	CopyRight *string `json:"copy_right,omitempty" xml:"copy_right,omitempty"`
	// 备注
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 服务状态（0:待审核 1:审核拒绝 2:上线【审核通过】 3: 下线）
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s ValueAddedServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s ValueAddedServiceInfo) GoString() string {
	return s.String()
}

func (s *ValueAddedServiceInfo) SetAccountId(v string) *ValueAddedServiceInfo {
	s.AccountId = &v
	return s
}

func (s *ValueAddedServiceInfo) SetServiceId(v string) *ValueAddedServiceInfo {
	s.ServiceId = &v
	return s
}

func (s *ValueAddedServiceInfo) SetServiceName(v string) *ValueAddedServiceInfo {
	s.ServiceName = &v
	return s
}

func (s *ValueAddedServiceInfo) SetImages(v string) *ValueAddedServiceInfo {
	s.Images = &v
	return s
}

func (s *ValueAddedServiceInfo) SetImagesDetail(v string) *ValueAddedServiceInfo {
	s.ImagesDetail = &v
	return s
}

func (s *ValueAddedServiceInfo) SetDescription(v string) *ValueAddedServiceInfo {
	s.Description = &v
	return s
}

func (s *ValueAddedServiceInfo) SetDockingPeople(v []*DockingPeopleInfo) *ValueAddedServiceInfo {
	s.DockingPeople = v
	return s
}

func (s *ValueAddedServiceInfo) SetCopyRight(v string) *ValueAddedServiceInfo {
	s.CopyRight = &v
	return s
}

func (s *ValueAddedServiceInfo) SetMemo(v string) *ValueAddedServiceInfo {
	s.Memo = &v
	return s
}

func (s *ValueAddedServiceInfo) SetStatus(v int64) *ValueAddedServiceInfo {
	s.Status = &v
	return s
}

// 商户备付金账户
type Provision struct {
	// 授信上限
	CreditMax *string `json:"credit_max,omitempty" xml:"credit_max,omitempty" require:"true"`
	// 授信已使用
	CreditUsed *string `json:"credit_used,omitempty" xml:"credit_used,omitempty" require:"true"`
	// 币种
	Currency *string `json:"currency,omitempty" xml:"currency,omitempty" require:"true"`
	// 余额
	Debit *string `json:"debit,omitempty" xml:"debit,omitempty" require:"true"`
}

func (s Provision) String() string {
	return tea.Prettify(s)
}

func (s Provision) GoString() string {
	return s.String()
}

func (s *Provision) SetCreditMax(v string) *Provision {
	s.CreditMax = &v
	return s
}

func (s *Provision) SetCreditUsed(v string) *Provision {
	s.CreditUsed = &v
	return s
}

func (s *Provision) SetCurrency(v string) *Provision {
	s.Currency = &v
	return s
}

func (s *Provision) SetDebit(v string) *Provision {
	s.Debit = &v
	return s
}

// sku的基础信息
type IpSkuEmphasisInfo struct {
	// 价格区间，不做校验
	PriceRange *string `json:"price_range,omitempty" xml:"price_range,omitempty" require:"true"`
	// 单价
	PurchasePrice *string `json:"purchase_price,omitempty" xml:"purchase_price,omitempty" require:"true"`
	// 套餐数量
	SaleNum *string `json:"sale_num,omitempty" xml:"sale_num,omitempty" require:"true"`
}

func (s IpSkuEmphasisInfo) String() string {
	return tea.Prettify(s)
}

func (s IpSkuEmphasisInfo) GoString() string {
	return s.String()
}

func (s *IpSkuEmphasisInfo) SetPriceRange(v string) *IpSkuEmphasisInfo {
	s.PriceRange = &v
	return s
}

func (s *IpSkuEmphasisInfo) SetPurchasePrice(v string) *IpSkuEmphasisInfo {
	s.PurchasePrice = &v
	return s
}

func (s *IpSkuEmphasisInfo) SetSaleNum(v string) *IpSkuEmphasisInfo {
	s.SaleNum = &v
	return s
}

// 资产附属信息
type AssetExtInfo struct {
	// 发放账户余额
	DispenseBalance *string `json:"dispense_balance,omitempty" xml:"dispense_balance,omitempty" require:"true"`
	// 发放账户归属租户ID
	DispenseTenantId *string `json:"dispense_tenant_id,omitempty" xml:"dispense_tenant_id,omitempty" require:"true"`
	// 用户账户余额
	UserCreditBalance *string `json:"user_credit_balance,omitempty" xml:"user_credit_balance,omitempty" require:"true"`
	// 用户ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s AssetExtInfo) String() string {
	return tea.Prettify(s)
}

func (s AssetExtInfo) GoString() string {
	return s.String()
}

func (s *AssetExtInfo) SetDispenseBalance(v string) *AssetExtInfo {
	s.DispenseBalance = &v
	return s
}

func (s *AssetExtInfo) SetDispenseTenantId(v string) *AssetExtInfo {
	s.DispenseTenantId = &v
	return s
}

func (s *AssetExtInfo) SetUserCreditBalance(v string) *AssetExtInfo {
	s.UserCreditBalance = &v
	return s
}

func (s *AssetExtInfo) SetUserId(v string) *AssetExtInfo {
	s.UserId = &v
	return s
}

// 钱包的统计信息
type StatisticalInfo struct {
	// 可用于消费的信用Token等值金额(单位:元, 精确到小数点后12位)
	CreditTokenBalance *string `json:"credit_token_balance,omitempty" xml:"credit_token_balance,omitempty" require:"true"`
	// 可用于消费的Token等值金额(单位:元, 精确到小数点后12位)
	DebitTokenBalance *string `json:"debit_token_balance,omitempty" xml:"debit_token_balance,omitempty" require:"true"`
	// 目前持有的他人Token的金额(单位:元, 精确到小数点后12位)
	OtherTokenBalance *string `json:"other_token_balance,omitempty" xml:"other_token_balance,omitempty" require:"true"`
	// 已消费的累积金额(单位:元, 精确到小数点后12位)
	UsedTokenBalance *string `json:"used_token_balance,omitempty" xml:"used_token_balance,omitempty" require:"true"`
}

func (s StatisticalInfo) String() string {
	return tea.Prettify(s)
}

func (s StatisticalInfo) GoString() string {
	return s.String()
}

func (s *StatisticalInfo) SetCreditTokenBalance(v string) *StatisticalInfo {
	s.CreditTokenBalance = &v
	return s
}

func (s *StatisticalInfo) SetDebitTokenBalance(v string) *StatisticalInfo {
	s.DebitTokenBalance = &v
	return s
}

func (s *StatisticalInfo) SetOtherTokenBalance(v string) *StatisticalInfo {
	s.OtherTokenBalance = &v
	return s
}

func (s *StatisticalInfo) SetUsedTokenBalance(v string) *StatisticalInfo {
	s.UsedTokenBalance = &v
	return s
}

// IP授权交易: AddressInfo
type IPAddressInfo struct {
	// 省份编码
	ProvinceCode *string `json:"province_code,omitempty" xml:"province_code,omitempty" require:"true"`
	// 城市编码
	CityCode *string `json:"city_code,omitempty" xml:"city_code,omitempty" require:"true"`
	// 区域编码
	DistrictCode *string `json:"district_code,omitempty" xml:"district_code,omitempty" require:"true"`
	// 详细地址
	Address *string `json:"address,omitempty" xml:"address,omitempty" require:"true"`
}

func (s IPAddressInfo) String() string {
	return tea.Prettify(s)
}

func (s IPAddressInfo) GoString() string {
	return s.String()
}

func (s *IPAddressInfo) SetProvinceCode(v string) *IPAddressInfo {
	s.ProvinceCode = &v
	return s
}

func (s *IPAddressInfo) SetCityCode(v string) *IPAddressInfo {
	s.CityCode = &v
	return s
}

func (s *IPAddressInfo) SetDistrictCode(v string) *IPAddressInfo {
	s.DistrictCode = &v
	return s
}

func (s *IPAddressInfo) SetAddress(v string) *IPAddressInfo {
	s.Address = &v
	return s
}

// 交易token来源信息
type TokenInstructionDO struct {
	// token类型
	TokenType *int64 `json:"token_type,omitempty" xml:"token_type,omitempty" require:"true"`
	// token价格
	TokenPrice *string `json:"token_price,omitempty" xml:"token_price,omitempty" require:"true"`
	// token来源账户ID
	PayAccountId *string `json:"pay_account_id,omitempty" xml:"pay_account_id,omitempty" require:"true"`
}

func (s TokenInstructionDO) String() string {
	return tea.Prettify(s)
}

func (s TokenInstructionDO) GoString() string {
	return s.String()
}

func (s *TokenInstructionDO) SetTokenType(v int64) *TokenInstructionDO {
	s.TokenType = &v
	return s
}

func (s *TokenInstructionDO) SetTokenPrice(v string) *TokenInstructionDO {
	s.TokenPrice = &v
	return s
}

func (s *TokenInstructionDO) SetPayAccountId(v string) *TokenInstructionDO {
	s.PayAccountId = &v
	return s
}

// IP授权服务: SettleRule
type IPSettleRule struct {
	// 结算类型， 1-表示结算到银行卡；2-表示结算到支付宝账号
	SettleType *int64 `json:"settle_type,omitempty" xml:"settle_type,omitempty" require:"true"`
	// 结算目标 如果settle_type = 1, 这里填写银行卡卡号; 如果settle_type = 2, 这里填写支付宝账号登录号, 且要求与商户名称name同名
	SettleTarget *string `json:"settle_target,omitempty" xml:"settle_target,omitempty" require:"true"`
}

func (s IPSettleRule) String() string {
	return tea.Prettify(s)
}

func (s IPSettleRule) GoString() string {
	return s.String()
}

func (s *IPSettleRule) SetSettleType(v int64) *IPSettleRule {
	s.SettleType = &v
	return s
}

func (s *IPSettleRule) SetSettleTarget(v string) *IPSettleRule {
	s.SettleTarget = &v
	return s
}

// ip的基础信息字段
type IpBasicInfo struct {
	// ip名字
	IpName *string `json:"ip_name,omitempty" xml:"ip_name,omitempty" require:"true"`
	// ip的链上id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// ip类型，多个用;隔开
	IpType *string `json:"ip_type,omitempty" xml:"ip_type,omitempty" require:"true"`
	// 受众群体，多个用;隔开
	AudienceGroup *string `json:"audience_group,omitempty" xml:"audience_group,omitempty" require:"true"`
	// ip主图,存放oss图片链接;隔开
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// 商品详情图 存放OSS图片链接 用;隔开
	ImageDetail *string `json:"image_detail,omitempty" xml:"image_detail,omitempty" require:"true"`
	// ip 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 对接人信息，json列表
	// [{
	// "name":"123", //联系人名字，必填
	// "mobilePhone":"123",// 联系人手机号,必填
	// "email":"456",// 联系人邮箱,选填
	// "dingDing":"999",// 联系人钉钉号,选填
	// "telePhone":"8888",// 联系人座机,选填
	// "position":"aaa"// 联系人职务,必填
	// }]
	DockingPeopleInfo []*DockingPeopleInfo `json:"docking_people_info,omitempty" xml:"docking_people_info,omitempty" require:"true" type:"Repeated"`
	// 资质证书类型，0为自己上传的资质证书，1为区块链版权证书
	CopyRightType *string `json:"copy_right_type,omitempty" xml:"copy_right_type,omitempty" require:"true"`
	// 资质信息
	CopyRight *string `json:"copy_right,omitempty" xml:"copy_right,omitempty"`
	// 合作案例，图片存放oss链接，多张用,隔开
	CooperationCase *string `json:"cooperation_case,omitempty" xml:"cooperation_case,omitempty"`
	// 合作事项
	CooperationNote *string `json:"cooperation_note,omitempty" xml:"cooperation_note,omitempty"`
	// 查询渠道
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// ip的外部创建时间，毫秒时间戳
	IpCreateTime *int64 `json:"ip_create_time,omitempty" xml:"ip_create_time,omitempty"`
	// 未来大事件
	FutureMilestones *string `json:"future_milestones,omitempty" xml:"future_milestones,omitempty"`
	// 推广渠道
	PromotionChannels *string `json:"promotion_channels,omitempty" xml:"promotion_channels,omitempty"`
	// 系统中创建时间
	SystemCreateTime *int64 `json:"system_create_time,omitempty" xml:"system_create_time,omitempty" require:"true"`
	// ip别名，多个用;隔开
	IpOtherName *string `json:"ip_other_name,omitempty" xml:"ip_other_name,omitempty" require:"true"`
	// ip的状态 0 待审批， 1 审批通过 2 审批拒绝
	ApprovalStatus *int64 `json:"approval_status,omitempty" xml:"approval_status,omitempty"`
	// 审批意见
	ApprovalComments *string `json:"approval_comments,omitempty" xml:"approval_comments,omitempty"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 资质生效时间，毫秒时间戳
	CopyRightBeginTime *int64 `json:"copy_right_begin_time,omitempty" xml:"copy_right_begin_time,omitempty" require:"true"`
	// 创建ip的版权方的链上账户
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 资质生效的结束时间
	CopyRightEndTime *int64 `json:"copy_right_end_time,omitempty" xml:"copy_right_end_time,omitempty" require:"true"`
	// 账户名称-别名
	AccountName *string `json:"account_name,omitempty" xml:"account_name,omitempty"`
	// 授权信息
	AuthorizationInfo *IPAuthorizationInfo `json:"authorization_info,omitempty" xml:"authorization_info,omitempty"`
	// 版权方名称
	ExternalUserName *string `json:"external_user_name,omitempty" xml:"external_user_name,omitempty"`
}

func (s IpBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s IpBasicInfo) GoString() string {
	return s.String()
}

func (s *IpBasicInfo) SetIpName(v string) *IpBasicInfo {
	s.IpName = &v
	return s
}

func (s *IpBasicInfo) SetIpId(v string) *IpBasicInfo {
	s.IpId = &v
	return s
}

func (s *IpBasicInfo) SetIpType(v string) *IpBasicInfo {
	s.IpType = &v
	return s
}

func (s *IpBasicInfo) SetAudienceGroup(v string) *IpBasicInfo {
	s.AudienceGroup = &v
	return s
}

func (s *IpBasicInfo) SetImage(v string) *IpBasicInfo {
	s.Image = &v
	return s
}

func (s *IpBasicInfo) SetImageDetail(v string) *IpBasicInfo {
	s.ImageDetail = &v
	return s
}

func (s *IpBasicInfo) SetDescription(v string) *IpBasicInfo {
	s.Description = &v
	return s
}

func (s *IpBasicInfo) SetDockingPeopleInfo(v []*DockingPeopleInfo) *IpBasicInfo {
	s.DockingPeopleInfo = v
	return s
}

func (s *IpBasicInfo) SetCopyRightType(v string) *IpBasicInfo {
	s.CopyRightType = &v
	return s
}

func (s *IpBasicInfo) SetCopyRight(v string) *IpBasicInfo {
	s.CopyRight = &v
	return s
}

func (s *IpBasicInfo) SetCooperationCase(v string) *IpBasicInfo {
	s.CooperationCase = &v
	return s
}

func (s *IpBasicInfo) SetCooperationNote(v string) *IpBasicInfo {
	s.CooperationNote = &v
	return s
}

func (s *IpBasicInfo) SetChannelName(v string) *IpBasicInfo {
	s.ChannelName = &v
	return s
}

func (s *IpBasicInfo) SetIpCreateTime(v int64) *IpBasicInfo {
	s.IpCreateTime = &v
	return s
}

func (s *IpBasicInfo) SetFutureMilestones(v string) *IpBasicInfo {
	s.FutureMilestones = &v
	return s
}

func (s *IpBasicInfo) SetPromotionChannels(v string) *IpBasicInfo {
	s.PromotionChannels = &v
	return s
}

func (s *IpBasicInfo) SetSystemCreateTime(v int64) *IpBasicInfo {
	s.SystemCreateTime = &v
	return s
}

func (s *IpBasicInfo) SetIpOtherName(v string) *IpBasicInfo {
	s.IpOtherName = &v
	return s
}

func (s *IpBasicInfo) SetApprovalStatus(v int64) *IpBasicInfo {
	s.ApprovalStatus = &v
	return s
}

func (s *IpBasicInfo) SetApprovalComments(v string) *IpBasicInfo {
	s.ApprovalComments = &v
	return s
}

func (s *IpBasicInfo) SetMemo(v string) *IpBasicInfo {
	s.Memo = &v
	return s
}

func (s *IpBasicInfo) SetCopyRightBeginTime(v int64) *IpBasicInfo {
	s.CopyRightBeginTime = &v
	return s
}

func (s *IpBasicInfo) SetAccountId(v string) *IpBasicInfo {
	s.AccountId = &v
	return s
}

func (s *IpBasicInfo) SetCopyRightEndTime(v int64) *IpBasicInfo {
	s.CopyRightEndTime = &v
	return s
}

func (s *IpBasicInfo) SetAccountName(v string) *IpBasicInfo {
	s.AccountName = &v
	return s
}

func (s *IpBasicInfo) SetAuthorizationInfo(v *IPAuthorizationInfo) *IpBasicInfo {
	s.AuthorizationInfo = v
	return s
}

func (s *IpBasicInfo) SetExternalUserName(v string) *IpBasicInfo {
	s.ExternalUserName = &v
	return s
}

// 账户入驻的渠道表
type AccountInChannels struct {
	// 天猫渠道
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 是否入驻
	IsSettled *bool `json:"is_settled,omitempty" xml:"is_settled,omitempty" require:"true"`
	// WAIT_CHECK:渠道已申请开通但未审核，SUCCESS:渠道开通审核成功，渠道开通
	SettledStatus *string `json:"settled_status,omitempty" xml:"settled_status,omitempty"`
}

func (s AccountInChannels) String() string {
	return tea.Prettify(s)
}

func (s AccountInChannels) GoString() string {
	return s.String()
}

func (s *AccountInChannels) SetChannelName(v string) *AccountInChannels {
	s.ChannelName = &v
	return s
}

func (s *AccountInChannels) SetIsSettled(v bool) *AccountInChannels {
	s.IsSettled = &v
	return s
}

func (s *AccountInChannels) SetSettledStatus(v string) *AccountInChannels {
	s.SettledStatus = &v
	return s
}

// IP授权服务-商家进件信息
type IPMerchantApplyInfo struct {
	// 链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 支付宝的登陆用户名(必须实名制)
	AlipayLoginName *string `json:"alipay_login_name,omitempty" xml:"alipay_login_name,omitempty" require:"true"`
	// 商户别名, 会展示在账单以及支付结果页中
	MerchantAliasName *string `json:"merchant_alias_name,omitempty" xml:"merchant_alias_name,omitempty" require:"true"`
	// 商户类型(本期仅支持: 1:企业, 6:个人商户)
	MerchantType *int64 `json:"merchant_type,omitempty" xml:"merchant_type,omitempty" require:"true"`
	// 商户证件类型(本期仅支持: 201: 营业执照, 100: 个人商户身份证) 如果merchant_type为企业, 需要传入201; 如果merchant_type为个人, 需要传入100
	MerchantCertType *int64 `json:"merchant_cert_type,omitempty" xml:"merchant_cert_type,omitempty" require:"true"`
	// 商户证件编号(企业提供营业执照),本期人工审核
	MerchantCertNumber *string `json:"merchant_cert_number,omitempty" xml:"merchant_cert_number,omitempty" require:"true"`
	// 商户营业执照的图片地址,本期人工审核
	MerchantCertImage *string `json:"merchant_cert_image,omitempty" xml:"merchant_cert_image,omitempty" require:"true"`
	// 税务登记证明的图片,本期人工审核
	MerchantSignImage *string `json:"merchant_sign_image,omitempty" xml:"merchant_sign_image,omitempty" require:"true"`
	// 商户类别码mcc，参见https://gw.alipayobjects.com/os/bmw-prod/05c9a32e-42d1-436b-ace7-13101d91f672.xlsx
	Mcc *string `json:"mcc,omitempty" xml:"mcc,omitempty" require:"true"`
	// 商户法人名称, merchant_type = 01时必填
	//
	LegalName *string `json:"legal_name,omitempty" xml:"legal_name,omitempty" require:"true"`
	// 商户法人身份证号码, merchant_type = 1时必填
	//
	LegalCertNo *string `json:"legal_cert_no,omitempty" xml:"legal_cert_no,omitempty" require:"true"`
	// 商户经营地址
	//
	AddressInfo *IPAddressInfo `json:"address_info,omitempty" xml:"address_info,omitempty" require:"true"`
	// 默认结算规则
	//
	SettleRule *IPSettleRule `json:"settle_rule,omitempty" xml:"settle_rule,omitempty" require:"true"`
	// 商户联系人信息
	//
	ContactInfo *IPContactInfo `json:"contact_info,omitempty" xml:"contact_info,omitempty" require:"true"`
	// 银行卡结算信息, 结算到银行卡时必填, 当前仅支持填入一张卡
	//
	CardInfo *IPCardInfo `json:"card_info,omitempty" xml:"card_info,omitempty" require:"true"`
}

func (s IPMerchantApplyInfo) String() string {
	return tea.Prettify(s)
}

func (s IPMerchantApplyInfo) GoString() string {
	return s.String()
}

func (s *IPMerchantApplyInfo) SetAccountId(v string) *IPMerchantApplyInfo {
	s.AccountId = &v
	return s
}

func (s *IPMerchantApplyInfo) SetAlipayLoginName(v string) *IPMerchantApplyInfo {
	s.AlipayLoginName = &v
	return s
}

func (s *IPMerchantApplyInfo) SetMerchantAliasName(v string) *IPMerchantApplyInfo {
	s.MerchantAliasName = &v
	return s
}

func (s *IPMerchantApplyInfo) SetMerchantType(v int64) *IPMerchantApplyInfo {
	s.MerchantType = &v
	return s
}

func (s *IPMerchantApplyInfo) SetMerchantCertType(v int64) *IPMerchantApplyInfo {
	s.MerchantCertType = &v
	return s
}

func (s *IPMerchantApplyInfo) SetMerchantCertNumber(v string) *IPMerchantApplyInfo {
	s.MerchantCertNumber = &v
	return s
}

func (s *IPMerchantApplyInfo) SetMerchantCertImage(v string) *IPMerchantApplyInfo {
	s.MerchantCertImage = &v
	return s
}

func (s *IPMerchantApplyInfo) SetMerchantSignImage(v string) *IPMerchantApplyInfo {
	s.MerchantSignImage = &v
	return s
}

func (s *IPMerchantApplyInfo) SetMcc(v string) *IPMerchantApplyInfo {
	s.Mcc = &v
	return s
}

func (s *IPMerchantApplyInfo) SetLegalName(v string) *IPMerchantApplyInfo {
	s.LegalName = &v
	return s
}

func (s *IPMerchantApplyInfo) SetLegalCertNo(v string) *IPMerchantApplyInfo {
	s.LegalCertNo = &v
	return s
}

func (s *IPMerchantApplyInfo) SetAddressInfo(v *IPAddressInfo) *IPMerchantApplyInfo {
	s.AddressInfo = v
	return s
}

func (s *IPMerchantApplyInfo) SetSettleRule(v *IPSettleRule) *IPMerchantApplyInfo {
	s.SettleRule = v
	return s
}

func (s *IPMerchantApplyInfo) SetContactInfo(v *IPContactInfo) *IPMerchantApplyInfo {
	s.ContactInfo = v
	return s
}

func (s *IPMerchantApplyInfo) SetCardInfo(v *IPCardInfo) *IPMerchantApplyInfo {
	s.CardInfo = v
	return s
}

// 消费卡账户
type ConsumeCardAccount struct {
	// 授权函地址
	AuthorizationAddress *string `json:"authorization_address,omitempty" xml:"authorization_address,omitempty" require:"true"`
	// 认证方id
	CertificationId *string `json:"certification_id,omitempty" xml:"certification_id,omitempty" require:"true"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 分布式身份ID
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 是否有权限采购商品
	AuthConsumer *bool `json:"auth_consumer,omitempty" xml:"auth_consumer,omitempty" require:"true"`
	// 是否有权限发行商品
	AuthProvider *bool `json:"auth_provider,omitempty" xml:"auth_provider,omitempty" require:"true"`
	// 个人用户的身份证号码/机构的企业编号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty" require:"true"`
	// 证件类型：0 身份证, 1 护照, 2 军官证, 3 回乡证, 4 港澳证件, 5 营业执照, 6 港澳居民来往内地通行证, 7 台湾居民来往内地通行证, 8 港澳居民居住证, 9 台湾居民居住证, 10事业单位登记证书, 11 社会团体登记证书, 12 民办非企业单位证书, 13 党政机关批准设计文件, 14 全国组织机构代码证书, 15 其他证件
	IdType *int64 `json:"id_type,omitempty" xml:"id_type,omitempty" require:"true"`
	// 个人用户的手机号码/机构用户的联系电话或邮箱(必填)
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number,omitempty" require:"true"`
	// 商户状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 是否可以发行资产
	TokenIssuer *bool `json:"token_issuer,omitempty" xml:"token_issuer,omitempty" require:"true"`
	// 账户创建类型（0:用户，1:商户）
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 账户ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 账户名称
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
	// 提现银行卡
	WithdrawBankCardId *string `json:"withdraw_bank_card_id,omitempty" xml:"withdraw_bank_card_id,omitempty" require:"true"`
	// 账户影响信息
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// 账户邮箱
	Email *string `json:"email,omitempty" xml:"email,omitempty" require:"true"`
}

func (s ConsumeCardAccount) String() string {
	return tea.Prettify(s)
}

func (s ConsumeCardAccount) GoString() string {
	return s.String()
}

func (s *ConsumeCardAccount) SetAuthorizationAddress(v string) *ConsumeCardAccount {
	s.AuthorizationAddress = &v
	return s
}

func (s *ConsumeCardAccount) SetCertificationId(v string) *ConsumeCardAccount {
	s.CertificationId = &v
	return s
}

func (s *ConsumeCardAccount) SetDescription(v string) *ConsumeCardAccount {
	s.Description = &v
	return s
}

func (s *ConsumeCardAccount) SetDid(v string) *ConsumeCardAccount {
	s.Did = &v
	return s
}

func (s *ConsumeCardAccount) SetAuthConsumer(v bool) *ConsumeCardAccount {
	s.AuthConsumer = &v
	return s
}

func (s *ConsumeCardAccount) SetAuthProvider(v bool) *ConsumeCardAccount {
	s.AuthProvider = &v
	return s
}

func (s *ConsumeCardAccount) SetIdNumber(v string) *ConsumeCardAccount {
	s.IdNumber = &v
	return s
}

func (s *ConsumeCardAccount) SetIdType(v int64) *ConsumeCardAccount {
	s.IdType = &v
	return s
}

func (s *ConsumeCardAccount) SetPhoneNumber(v string) *ConsumeCardAccount {
	s.PhoneNumber = &v
	return s
}

func (s *ConsumeCardAccount) SetStatus(v int64) *ConsumeCardAccount {
	s.Status = &v
	return s
}

func (s *ConsumeCardAccount) SetTokenIssuer(v bool) *ConsumeCardAccount {
	s.TokenIssuer = &v
	return s
}

func (s *ConsumeCardAccount) SetType(v int64) *ConsumeCardAccount {
	s.Type = &v
	return s
}

func (s *ConsumeCardAccount) SetUserId(v string) *ConsumeCardAccount {
	s.UserId = &v
	return s
}

func (s *ConsumeCardAccount) SetUserName(v string) *ConsumeCardAccount {
	s.UserName = &v
	return s
}

func (s *ConsumeCardAccount) SetWithdrawBankCardId(v string) *ConsumeCardAccount {
	s.WithdrawBankCardId = &v
	return s
}

func (s *ConsumeCardAccount) SetImage(v string) *ConsumeCardAccount {
	s.Image = &v
	return s
}

func (s *ConsumeCardAccount) SetEmail(v string) *ConsumeCardAccount {
	s.Email = &v
	return s
}

// token信息
type TokenData struct {
	// 拥有的token数量
	TokenNumber *int64 `json:"token_number,omitempty" xml:"token_number,omitempty" require:"true"`
	// 来源为debit的token数量
	DebitToken *int64 `json:"debit_token,omitempty" xml:"debit_token,omitempty" require:"true"`
	// 来源为debit的token数量
	CreditToken *int64 `json:"credit_token,omitempty" xml:"credit_token,omitempty" require:"true"`
	// token发行者account
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
}

func (s TokenData) String() string {
	return tea.Prettify(s)
}

func (s TokenData) GoString() string {
	return s.String()
}

func (s *TokenData) SetTokenNumber(v int64) *TokenData {
	s.TokenNumber = &v
	return s
}

func (s *TokenData) SetDebitToken(v int64) *TokenData {
	s.DebitToken = &v
	return s
}

func (s *TokenData) SetCreditToken(v int64) *TokenData {
	s.CreditToken = &v
	return s
}

func (s *TokenData) SetAccountId(v string) *TokenData {
	s.AccountId = &v
	return s
}

// 区块链合同签署区信息
type SignField struct {
	// 签署操作人个人账号标识，即操作本次签署的个人
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 签署所在页码，必须是整数数字
	PosPage *string `json:"pos_page,omitempty" xml:"pos_page,omitempty" require:"true"`
	// x坐标，必须是数字
	PosX *string `json:"pos_x,omitempty" xml:"pos_x,omitempty" require:"true"`
	// y坐标，必须是数字
	PosY *string `json:"pos_y,omitempty" xml:"pos_y,omitempty" require:"true"`
}

func (s SignField) String() string {
	return tea.Prettify(s)
}

func (s SignField) GoString() string {
	return s.String()
}

func (s *SignField) SetAccountId(v string) *SignField {
	s.AccountId = &v
	return s
}

func (s *SignField) SetPosPage(v string) *SignField {
	s.PosPage = &v
	return s
}

func (s *SignField) SetPosX(v string) *SignField {
	s.PosX = &v
	return s
}

func (s *SignField) SetPosY(v string) *SignField {
	s.PosY = &v
	return s
}

// IP授权订单已按照周期汇总的销售数据
type IPSalesInfo struct {
	// 终端商品名称
	GoodsName *string `json:"goods_name,omitempty" xml:"goods_name,omitempty" require:"true"`
	// 终端商品图片
	GoodsImage *string `json:"goods_image,omitempty" xml:"goods_image,omitempty"`
	// 终端销售渠道
	SalesChannel *string `json:"sales_channel,omitempty" xml:"sales_channel,omitempty"`
	// 终端商品链接
	GoodsUrl *string `json:"goods_url,omitempty" xml:"goods_url,omitempty"`
	// 零售价
	Price *string `json:"price,omitempty" xml:"price,omitempty"`
	// 商品销售数量
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 销售金额
	Sales *string `json:"sales,omitempty" xml:"sales,omitempty" require:"true"`
	// 实付金额（授权交易）
	Payment *string `json:"payment,omitempty" xml:"payment,omitempty"`
	// 统计周期开始时间（毫秒时间戳）
	SettlementBeginTime *int64 `json:"settlement_begin_time,omitempty" xml:"settlement_begin_time,omitempty" require:"true"`
	// 统计周期结束时间（毫秒时间戳）
	SettlementEndTime *int64 `json:"settlement_end_time,omitempty" xml:"settlement_end_time,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 数据上传操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 销售数据上传操作时间（毫秒时间戳）
	OperateTime *int64 `json:"operate_time,omitempty" xml:"operate_time,omitempty" require:"true"`
	// 商品信息
	GoodsInfo *string `json:"goods_info,omitempty" xml:"goods_info,omitempty"`
	// 商品ID
	GoodsId *string `json:"goods_id,omitempty" xml:"goods_id,omitempty"`
	// 退款的销售金额，有退款时填写，默认0
	RefundSales *string `json:"refund_sales,omitempty" xml:"refund_sales,omitempty"`
	// 订单信息json string: 用户ID/订单状态/订单创建时间戳ms/订单支付时间戳ms等
	SalesExtInfo *string `json:"sales_ext_info,omitempty" xml:"sales_ext_info,omitempty"`
	// 用户信息json string: 姓名/手机号/地址等结构化数据
	SalesUserInfo *string `json:"sales_user_info,omitempty" xml:"sales_user_info,omitempty"`
}

func (s IPSalesInfo) String() string {
	return tea.Prettify(s)
}

func (s IPSalesInfo) GoString() string {
	return s.String()
}

func (s *IPSalesInfo) SetGoodsName(v string) *IPSalesInfo {
	s.GoodsName = &v
	return s
}

func (s *IPSalesInfo) SetGoodsImage(v string) *IPSalesInfo {
	s.GoodsImage = &v
	return s
}

func (s *IPSalesInfo) SetSalesChannel(v string) *IPSalesInfo {
	s.SalesChannel = &v
	return s
}

func (s *IPSalesInfo) SetGoodsUrl(v string) *IPSalesInfo {
	s.GoodsUrl = &v
	return s
}

func (s *IPSalesInfo) SetPrice(v string) *IPSalesInfo {
	s.Price = &v
	return s
}

func (s *IPSalesInfo) SetAmount(v int64) *IPSalesInfo {
	s.Amount = &v
	return s
}

func (s *IPSalesInfo) SetSales(v string) *IPSalesInfo {
	s.Sales = &v
	return s
}

func (s *IPSalesInfo) SetPayment(v string) *IPSalesInfo {
	s.Payment = &v
	return s
}

func (s *IPSalesInfo) SetSettlementBeginTime(v int64) *IPSalesInfo {
	s.SettlementBeginTime = &v
	return s
}

func (s *IPSalesInfo) SetSettlementEndTime(v int64) *IPSalesInfo {
	s.SettlementEndTime = &v
	return s
}

func (s *IPSalesInfo) SetMemo(v string) *IPSalesInfo {
	s.Memo = &v
	return s
}

func (s *IPSalesInfo) SetOperator(v string) *IPSalesInfo {
	s.Operator = &v
	return s
}

func (s *IPSalesInfo) SetOperateTime(v int64) *IPSalesInfo {
	s.OperateTime = &v
	return s
}

func (s *IPSalesInfo) SetGoodsInfo(v string) *IPSalesInfo {
	s.GoodsInfo = &v
	return s
}

func (s *IPSalesInfo) SetGoodsId(v string) *IPSalesInfo {
	s.GoodsId = &v
	return s
}

func (s *IPSalesInfo) SetRefundSales(v string) *IPSalesInfo {
	s.RefundSales = &v
	return s
}

func (s *IPSalesInfo) SetSalesExtInfo(v string) *IPSalesInfo {
	s.SalesExtInfo = &v
	return s
}

func (s *IPSalesInfo) SetSalesUserInfo(v string) *IPSalesInfo {
	s.SalesUserInfo = &v
	return s
}

// 代理授权关系信息
type DelegateRelationInfo struct {
	// 被授权的租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 被代理的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty" require:"true"`
	// 更新时间
	UpdateTime *string `json:"update_time,omitempty" xml:"update_time,omitempty" require:"true"`
	// 状态
	Status *bool `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 扩展字段
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty" require:"true"`
}

func (s DelegateRelationInfo) String() string {
	return tea.Prettify(s)
}

func (s DelegateRelationInfo) GoString() string {
	return s.String()
}

func (s *DelegateRelationInfo) SetTenantId(v string) *DelegateRelationInfo {
	s.TenantId = &v
	return s
}

func (s *DelegateRelationInfo) SetDelegatedTenantId(v string) *DelegateRelationInfo {
	s.DelegatedTenantId = &v
	return s
}

func (s *DelegateRelationInfo) SetUpdateTime(v string) *DelegateRelationInfo {
	s.UpdateTime = &v
	return s
}

func (s *DelegateRelationInfo) SetStatus(v bool) *DelegateRelationInfo {
	s.Status = &v
	return s
}

func (s *DelegateRelationInfo) SetExtension(v string) *DelegateRelationInfo {
	s.Extension = &v
	return s
}

// 手续费规则结果
type CommissionRuleResponse struct {
	// 手续费到账方
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 手续费周期列表
	CommissionPeriods []*CommissionPeriod `json:"commission_periods,omitempty" xml:"commission_periods,omitempty" require:"true" type:"Repeated"`
}

func (s CommissionRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CommissionRuleResponse) GoString() string {
	return s.String()
}

func (s *CommissionRuleResponse) SetAccountId(v string) *CommissionRuleResponse {
	s.AccountId = &v
	return s
}

func (s *CommissionRuleResponse) SetCommissionPeriods(v []*CommissionPeriod) *CommissionRuleResponse {
	s.CommissionPeriods = v
	return s
}

// IP图库记录
type IPGalleryInstruction struct {
	// 下载时间
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// 授权订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// IP链上ID
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// 图库链接
	IpGalleryUrl *string `json:"ip_gallery_url,omitempty" xml:"ip_gallery_url,omitempty" require:"true"`
	// 图库下载链接，默认过期时间2小时
	IpGalleryTemporaryUrl *string `json:"ip_gallery_temporary_url,omitempty" xml:"ip_gallery_temporary_url,omitempty" require:"true"`
	// 图库版本
	IpGalleryVersion *int64 `json:"ip_gallery_version,omitempty" xml:"ip_gallery_version,omitempty" require:"true"`
	// IP当前图库状态：0 生效中，1 已失效
	IpGalleryStatus *int64 `json:"ip_gallery_status,omitempty" xml:"ip_gallery_status,omitempty" require:"true"`
	// 备注信息
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty"`
}

func (s IPGalleryInstruction) String() string {
	return tea.Prettify(s)
}

func (s IPGalleryInstruction) GoString() string {
	return s.String()
}

func (s *IPGalleryInstruction) SetTimestamp(v int64) *IPGalleryInstruction {
	s.Timestamp = &v
	return s
}

func (s *IPGalleryInstruction) SetIpOrderId(v string) *IPGalleryInstruction {
	s.IpOrderId = &v
	return s
}

func (s *IPGalleryInstruction) SetIpId(v string) *IPGalleryInstruction {
	s.IpId = &v
	return s
}

func (s *IPGalleryInstruction) SetIpGalleryUrl(v string) *IPGalleryInstruction {
	s.IpGalleryUrl = &v
	return s
}

func (s *IPGalleryInstruction) SetIpGalleryTemporaryUrl(v string) *IPGalleryInstruction {
	s.IpGalleryTemporaryUrl = &v
	return s
}

func (s *IPGalleryInstruction) SetIpGalleryVersion(v int64) *IPGalleryInstruction {
	s.IpGalleryVersion = &v
	return s
}

func (s *IPGalleryInstruction) SetIpGalleryStatus(v int64) *IPGalleryInstruction {
	s.IpGalleryStatus = &v
	return s
}

func (s *IPGalleryInstruction) SetExtInfo(v string) *IPGalleryInstruction {
	s.ExtInfo = &v
	return s
}

// 电子券详细信息
type Coupon struct {
	// 绑定时间戳（毫秒）
	BindTime *int64 `json:"bind_time,omitempty" xml:"bind_time,omitempty" require:"true"`
	// 绑定电子券的哈希
	BindTxHash *string `json:"bind_tx_hash,omitempty" xml:"bind_tx_hash,omitempty" require:"true"`
	// 电子券理论上应处于的状态（比如电子券已过期）
	CalStatus *int64 `json:"cal_status,omitempty" xml:"cal_status,omitempty" require:"true"`
	// 激活时间戳（毫秒）
	ChargeTime *int64 `json:"charge_time,omitempty" xml:"charge_time,omitempty" require:"true"`
	// 激活码
	CouponCode *string `json:"coupon_code,omitempty" xml:"coupon_code,omitempty" require:"true"`
	// 激活码附加信息
	CouponExtCode *string `json:"coupon_ext_code,omitempty" xml:"coupon_ext_code,omitempty" require:"true"`
	// 电子券ID
	CouponId *string `json:"coupon_id,omitempty" xml:"coupon_id,omitempty" require:"true"`
	// 电子券名称
	CouponName *string `json:"coupon_name,omitempty" xml:"coupon_name,omitempty" require:"true"`
	// 创建时间戳（毫秒）
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true"`
	// 创建电子券的哈希
	CreateTxHash *string `json:"create_tx_hash,omitempty" xml:"create_tx_hash,omitempty" require:"true"`
	// 脱敏用户ID
	DesensitizedUid *string `json:"desensitized_uid,omitempty" xml:"desensitized_uid,omitempty" require:"true"`
	// 扩展信息
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty" require:"true"`
	// 最后一次操作时间戳（毫秒）
	LastTime *int64 `json:"last_time,omitempty" xml:"last_time,omitempty" require:"true"`
	// 最后一次操作的交易哈希
	LastTxHash *string `json:"last_tx_hash,omitempty" xml:"last_tx_hash,omitempty" require:"true"`
	// 电子券公钥。椭圆曲线密码学 Secp256k1曲线的公钥，长度64字节，十六进制128位。
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 调子券信息查询次数
	QueryCount *int64 `json:"query_count,omitempty" xml:"query_count,omitempty" require:"true"`
	// 最后一次查询时间戳（毫秒）
	QueryTime *int64 `json:"query_time,omitempty" xml:"query_time,omitempty" require:"true"`
	// 最近一次查询的交易哈希
	QueryTxHash *string `json:"query_tx_hash,omitempty" xml:"query_tx_hash,omitempty" require:"true"`
	// 风控状态：0 启用，1 禁用
	RiskStatus *int64 `json:"risk_status,omitempty" xml:"risk_status,omitempty" require:"true"`
	// 电子券状态：
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 用户公钥
	UidPublicKey *string `json:"uid_public_key,omitempty" xml:"uid_public_key,omitempty" require:"true"`
	// 有效开始时间（毫秒时间戳）
	ValidAfter *int64 `json:"valid_after,omitempty" xml:"valid_after,omitempty" require:"true"`
	// 有效结束时间（毫秒时间戳）
	ValidBefore *int64 `json:"valid_before,omitempty" xml:"valid_before,omitempty" require:"true"`
	// 价值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// 电子券版本
	Version *int64 `json:"version,omitempty" xml:"version,omitempty" require:"true"`
	// 电子券激活交易哈希
	ChargeTxHash *string `json:"charge_tx_hash,omitempty" xml:"charge_tx_hash,omitempty" require:"true"`
	// 记名电子券持有者账户
	HolderUserAccount *string `json:"holder_user_account,omitempty" xml:"holder_user_account,omitempty" require:"true"`
}

func (s Coupon) String() string {
	return tea.Prettify(s)
}

func (s Coupon) GoString() string {
	return s.String()
}

func (s *Coupon) SetBindTime(v int64) *Coupon {
	s.BindTime = &v
	return s
}

func (s *Coupon) SetBindTxHash(v string) *Coupon {
	s.BindTxHash = &v
	return s
}

func (s *Coupon) SetCalStatus(v int64) *Coupon {
	s.CalStatus = &v
	return s
}

func (s *Coupon) SetChargeTime(v int64) *Coupon {
	s.ChargeTime = &v
	return s
}

func (s *Coupon) SetCouponCode(v string) *Coupon {
	s.CouponCode = &v
	return s
}

func (s *Coupon) SetCouponExtCode(v string) *Coupon {
	s.CouponExtCode = &v
	return s
}

func (s *Coupon) SetCouponId(v string) *Coupon {
	s.CouponId = &v
	return s
}

func (s *Coupon) SetCouponName(v string) *Coupon {
	s.CouponName = &v
	return s
}

func (s *Coupon) SetCreateTime(v int64) *Coupon {
	s.CreateTime = &v
	return s
}

func (s *Coupon) SetCreateTxHash(v string) *Coupon {
	s.CreateTxHash = &v
	return s
}

func (s *Coupon) SetDesensitizedUid(v string) *Coupon {
	s.DesensitizedUid = &v
	return s
}

func (s *Coupon) SetExtInfo(v string) *Coupon {
	s.ExtInfo = &v
	return s
}

func (s *Coupon) SetLastTime(v int64) *Coupon {
	s.LastTime = &v
	return s
}

func (s *Coupon) SetLastTxHash(v string) *Coupon {
	s.LastTxHash = &v
	return s
}

func (s *Coupon) SetPublicKey(v string) *Coupon {
	s.PublicKey = &v
	return s
}

func (s *Coupon) SetQueryCount(v int64) *Coupon {
	s.QueryCount = &v
	return s
}

func (s *Coupon) SetQueryTime(v int64) *Coupon {
	s.QueryTime = &v
	return s
}

func (s *Coupon) SetQueryTxHash(v string) *Coupon {
	s.QueryTxHash = &v
	return s
}

func (s *Coupon) SetRiskStatus(v int64) *Coupon {
	s.RiskStatus = &v
	return s
}

func (s *Coupon) SetStatus(v int64) *Coupon {
	s.Status = &v
	return s
}

func (s *Coupon) SetUidPublicKey(v string) *Coupon {
	s.UidPublicKey = &v
	return s
}

func (s *Coupon) SetValidAfter(v int64) *Coupon {
	s.ValidAfter = &v
	return s
}

func (s *Coupon) SetValidBefore(v int64) *Coupon {
	s.ValidBefore = &v
	return s
}

func (s *Coupon) SetValue(v string) *Coupon {
	s.Value = &v
	return s
}

func (s *Coupon) SetVersion(v int64) *Coupon {
	s.Version = &v
	return s
}

func (s *Coupon) SetChargeTxHash(v string) *Coupon {
	s.ChargeTxHash = &v
	return s
}

func (s *Coupon) SetHolderUserAccount(v string) *Coupon {
	s.HolderUserAccount = &v
	return s
}

// IP授权交易的订单信息
type IPOrder struct {
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 卖方
	SellerId *string `json:"seller_id,omitempty" xml:"seller_id,omitempty" require:"true"`
	// 卖家名称
	SellerName *string `json:"seller_name,omitempty" xml:"seller_name,omitempty" require:"true"`
	// 买方
	BuyerId *string `json:"buyer_id,omitempty" xml:"buyer_id,omitempty" require:"true"`
	// 买家名称
	BuyerName *string `json:"buyer_name,omitempty" xml:"buyer_name,omitempty" require:"true"`
	// 订单交易类型：0套餐交易，1授权交易
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// ip id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// IP名称
	IpName *string `json:"ip_name,omitempty" xml:"ip_name,omitempty" require:"true"`
	// 渠道信息
	ChannelId *string `json:"channel_id,omitempty" xml:"channel_id,omitempty" require:"true"`
	// 套餐总量
	TotalAmount *int64 `json:"total_amount,omitempty" xml:"total_amount,omitempty" require:"true"`
	// 套餐已使用数量
	UsedAmount *int64 `json:"used_amount,omitempty" xml:"used_amount,omitempty" require:"true"`
	// 终端商品价格范围
	PriceRange *string `json:"price_range,omitempty" xml:"price_range,omitempty" require:"true"`
	// 套餐交易总费用
	TotalPrice *string `json:"total_price,omitempty" xml:"total_price,omitempty" require:"true"`
	// 授权佣金比例
	AuthRate *string `json:"auth_rate,omitempty" xml:"auth_rate,omitempty" require:"true"`
	// 授权合作开始时间（毫秒时间戳）
	AuthStartTime *int64 `json:"auth_start_time,omitempty" xml:"auth_start_time,omitempty" require:"true"`
	// 授权合作结束时间
	AuthEndTime *int64 `json:"auth_end_time,omitempty" xml:"auth_end_time,omitempty" require:"true"`
	// 合同信息
	Contract *string `json:"contract,omitempty" xml:"contract,omitempty" require:"true"`
	// 设计稿信息
	DesignDraft *string `json:"design_draft,omitempty" xml:"design_draft,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 操作者名称
	OperatorName *string `json:"operator_name,omitempty" xml:"operator_name,omitempty" require:"true"`
	// 订单状态。TODO 补充枚举信息
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 订单创建时间，时间戳（毫秒）
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true"`
	// 订单最近更新时间
	UpdateTime *int64 `json:"update_time,omitempty" xml:"update_time,omitempty" require:"true"`
	// 收费模式：0 销售抽佣, 1 按量付费
	ChargeType *int64 `json:"charge_type,omitempty" xml:"charge_type,omitempty" require:"true"`
	// 按量付费的收费单价（按量付费模式必填）
	AuthPrice *string `json:"auth_price,omitempty" xml:"auth_price,omitempty" require:"true"`
	// 是否有保底金
	Guaranteed *bool `json:"guaranteed,omitempty" xml:"guaranteed,omitempty" require:"true"`
	// 保底金金额
	GuaranteedFund *string `json:"guaranteed_fund,omitempty" xml:"guaranteed_fund,omitempty" require:"true"`
	// 保底商品个数（按量付费）
	GuaranteedGoodsAmount *int64 `json:"guaranteed_goods_amount,omitempty" xml:"guaranteed_goods_amount,omitempty" require:"true"`
	// 已使用的保底商品个数（按量付费），订单销售数量超过保底部分需按量付费
	UsedGuaranteedGoodsAmount *int64 `json:"used_guaranteed_goods_amount,omitempty" xml:"used_guaranteed_goods_amount,omitempty" require:"true"`
	// 保底商品销售金额（销售抽佣）
	GuaranteedSales *string `json:"guaranteed_sales,omitempty" xml:"guaranteed_sales,omitempty" require:"true"`
	// 已使用的保底商品销售金额（销售抽佣），订单销售额超过保底部分需按比例抽拥
	//
	UsedGuaranteedSales *string `json:"used_guaranteed_sales,omitempty" xml:"used_guaranteed_sales,omitempty" require:"true"`
	// 授权产品范围
	AuthProductScope *string `json:"auth_product_scope,omitempty" xml:"auth_product_scope,omitempty" require:"true"`
	// 授权地域范围
	AuthAreaScope *string `json:"auth_area_scope,omitempty" xml:"auth_area_scope,omitempty" require:"true"`
	// 商品销售渠道
	SalesChannel *string `json:"sales_channel,omitempty" xml:"sales_channel,omitempty" require:"true"`
	// 0 IP交易，1 增值服务交易
	GoodsType *int64 `json:"goods_type,omitempty" xml:"goods_type,omitempty" require:"true"`
	// 增值服务交易绑定的ip授权交易订单
	RelatedOrderId *string `json:"related_order_id,omitempty" xml:"related_order_id,omitempty" require:"true"`
	// 是否已监修报审
	SuperviseApprove *bool `json:"supervise_approve,omitempty" xml:"supervise_approve,omitempty" require:"true"`
	// 订单图库信息，未确认则为空
	IpGalleryUrl *string `json:"ip_gallery_url,omitempty" xml:"ip_gallery_url,omitempty"`
	// 图库版本
	IpGalleryVersion *int64 `json:"ip_gallery_version,omitempty" xml:"ip_gallery_version,omitempty"`
	// 商家是否已下载过本订单的图库
	DownloadIpGallery *bool `json:"download_ip_gallery,omitempty" xml:"download_ip_gallery,omitempty"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 附加条款
	AdditionalClause *string `json:"additional_clause,omitempty" xml:"additional_clause,omitempty"`
	// 合同文件列表
	ContractFiles []*string `json:"contract_files,omitempty" xml:"contract_files,omitempty" type:"Repeated"`
	// 授权类型
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty"`
	// 授权模式，0普通授权，1独家授权，
	AuthorizationModel []*int64 `json:"authorization_model,omitempty" xml:"authorization_model,omitempty" type:"Repeated"`
	// 绑定的商品信息列表
	GoodsInfoList []*IPOrderGoods `json:"goods_info_list,omitempty" xml:"goods_info_list,omitempty" type:"Repeated"`
	// 绑定的商品ID列表
	GoodsIdList []*string `json:"goods_id_list,omitempty" xml:"goods_id_list,omitempty" type:"Repeated"`
	// 订单功能选择，0 基础功能，1 领用收藏
	Features []*int64 `json:"features,omitempty" xml:"features,omitempty" type:"Repeated"`
	// 申请授权合作的备注信息
	ApplyInfo *IPOrderApplyInfo `json:"apply_info,omitempty" xml:"apply_info,omitempty"`
	// 是否允许商家下载图库
	AllowDownload *bool `json:"allow_download,omitempty" xml:"allow_download,omitempty"`
}

func (s IPOrder) String() string {
	return tea.Prettify(s)
}

func (s IPOrder) GoString() string {
	return s.String()
}

func (s *IPOrder) SetIpOrderId(v string) *IPOrder {
	s.IpOrderId = &v
	return s
}

func (s *IPOrder) SetSellerId(v string) *IPOrder {
	s.SellerId = &v
	return s
}

func (s *IPOrder) SetSellerName(v string) *IPOrder {
	s.SellerName = &v
	return s
}

func (s *IPOrder) SetBuyerId(v string) *IPOrder {
	s.BuyerId = &v
	return s
}

func (s *IPOrder) SetBuyerName(v string) *IPOrder {
	s.BuyerName = &v
	return s
}

func (s *IPOrder) SetType(v int64) *IPOrder {
	s.Type = &v
	return s
}

func (s *IPOrder) SetIpId(v string) *IPOrder {
	s.IpId = &v
	return s
}

func (s *IPOrder) SetIpName(v string) *IPOrder {
	s.IpName = &v
	return s
}

func (s *IPOrder) SetChannelId(v string) *IPOrder {
	s.ChannelId = &v
	return s
}

func (s *IPOrder) SetTotalAmount(v int64) *IPOrder {
	s.TotalAmount = &v
	return s
}

func (s *IPOrder) SetUsedAmount(v int64) *IPOrder {
	s.UsedAmount = &v
	return s
}

func (s *IPOrder) SetPriceRange(v string) *IPOrder {
	s.PriceRange = &v
	return s
}

func (s *IPOrder) SetTotalPrice(v string) *IPOrder {
	s.TotalPrice = &v
	return s
}

func (s *IPOrder) SetAuthRate(v string) *IPOrder {
	s.AuthRate = &v
	return s
}

func (s *IPOrder) SetAuthStartTime(v int64) *IPOrder {
	s.AuthStartTime = &v
	return s
}

func (s *IPOrder) SetAuthEndTime(v int64) *IPOrder {
	s.AuthEndTime = &v
	return s
}

func (s *IPOrder) SetContract(v string) *IPOrder {
	s.Contract = &v
	return s
}

func (s *IPOrder) SetDesignDraft(v string) *IPOrder {
	s.DesignDraft = &v
	return s
}

func (s *IPOrder) SetOperator(v string) *IPOrder {
	s.Operator = &v
	return s
}

func (s *IPOrder) SetOperatorName(v string) *IPOrder {
	s.OperatorName = &v
	return s
}

func (s *IPOrder) SetStatus(v int64) *IPOrder {
	s.Status = &v
	return s
}

func (s *IPOrder) SetCreateTime(v int64) *IPOrder {
	s.CreateTime = &v
	return s
}

func (s *IPOrder) SetUpdateTime(v int64) *IPOrder {
	s.UpdateTime = &v
	return s
}

func (s *IPOrder) SetChargeType(v int64) *IPOrder {
	s.ChargeType = &v
	return s
}

func (s *IPOrder) SetAuthPrice(v string) *IPOrder {
	s.AuthPrice = &v
	return s
}

func (s *IPOrder) SetGuaranteed(v bool) *IPOrder {
	s.Guaranteed = &v
	return s
}

func (s *IPOrder) SetGuaranteedFund(v string) *IPOrder {
	s.GuaranteedFund = &v
	return s
}

func (s *IPOrder) SetGuaranteedGoodsAmount(v int64) *IPOrder {
	s.GuaranteedGoodsAmount = &v
	return s
}

func (s *IPOrder) SetUsedGuaranteedGoodsAmount(v int64) *IPOrder {
	s.UsedGuaranteedGoodsAmount = &v
	return s
}

func (s *IPOrder) SetGuaranteedSales(v string) *IPOrder {
	s.GuaranteedSales = &v
	return s
}

func (s *IPOrder) SetUsedGuaranteedSales(v string) *IPOrder {
	s.UsedGuaranteedSales = &v
	return s
}

func (s *IPOrder) SetAuthProductScope(v string) *IPOrder {
	s.AuthProductScope = &v
	return s
}

func (s *IPOrder) SetAuthAreaScope(v string) *IPOrder {
	s.AuthAreaScope = &v
	return s
}

func (s *IPOrder) SetSalesChannel(v string) *IPOrder {
	s.SalesChannel = &v
	return s
}

func (s *IPOrder) SetGoodsType(v int64) *IPOrder {
	s.GoodsType = &v
	return s
}

func (s *IPOrder) SetRelatedOrderId(v string) *IPOrder {
	s.RelatedOrderId = &v
	return s
}

func (s *IPOrder) SetSuperviseApprove(v bool) *IPOrder {
	s.SuperviseApprove = &v
	return s
}

func (s *IPOrder) SetIpGalleryUrl(v string) *IPOrder {
	s.IpGalleryUrl = &v
	return s
}

func (s *IPOrder) SetIpGalleryVersion(v int64) *IPOrder {
	s.IpGalleryVersion = &v
	return s
}

func (s *IPOrder) SetDownloadIpGallery(v bool) *IPOrder {
	s.DownloadIpGallery = &v
	return s
}

func (s *IPOrder) SetMemo(v string) *IPOrder {
	s.Memo = &v
	return s
}

func (s *IPOrder) SetAdditionalClause(v string) *IPOrder {
	s.AdditionalClause = &v
	return s
}

func (s *IPOrder) SetContractFiles(v []*string) *IPOrder {
	s.ContractFiles = v
	return s
}

func (s *IPOrder) SetAuthType(v string) *IPOrder {
	s.AuthType = &v
	return s
}

func (s *IPOrder) SetAuthorizationModel(v []*int64) *IPOrder {
	s.AuthorizationModel = v
	return s
}

func (s *IPOrder) SetGoodsInfoList(v []*IPOrderGoods) *IPOrder {
	s.GoodsInfoList = v
	return s
}

func (s *IPOrder) SetGoodsIdList(v []*string) *IPOrder {
	s.GoodsIdList = v
	return s
}

func (s *IPOrder) SetFeatures(v []*int64) *IPOrder {
	s.Features = v
	return s
}

func (s *IPOrder) SetApplyInfo(v *IPOrderApplyInfo) *IPOrder {
	s.ApplyInfo = v
	return s
}

func (s *IPOrder) SetAllowDownload(v bool) *IPOrder {
	s.AllowDownload = &v
	return s
}

// 电子券批次信息
type CouponCollection struct {
	// 批次ID
	CollectionId *string `json:"collection_id,omitempty" xml:"collection_id,omitempty" require:"true"`
	// 电子券批次名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 批次发行方
	Issuer *string `json:"issuer,omitempty" xml:"issuer,omitempty" require:"true"`
	// 批次前缀
	CouponNumberPrefix *string `json:"coupon_number_prefix,omitempty" xml:"coupon_number_prefix,omitempty" require:"true"`
	// 批次管理员链上ID
	CouponAdminAccount *string `json:"coupon_admin_account,omitempty" xml:"coupon_admin_account,omitempty" require:"true"`
	// 批次管理员租户ID
	CouponAdminTenantId *string `json:"coupon_admin_tenant_id,omitempty" xml:"coupon_admin_tenant_id,omitempty" require:"true"`
	// 批次过期观察员链上ID
	ExpireMonitorAccount *string `json:"expire_monitor_account,omitempty" xml:"expire_monitor_account,omitempty" require:"true"`
	// 批次过期观察员租户ID
	ExpireMonitorTenantId *string `json:"expire_monitor_tenant_id,omitempty" xml:"expire_monitor_tenant_id,omitempty" require:"true"`
	// 是否记名
	NeedRegistered *bool `json:"need_registered,omitempty" xml:"need_registered,omitempty" require:"true"`
	// 是否创建时记名
	NeedPreRegistered *bool `json:"need_pre_registered,omitempty" xml:"need_pre_registered,omitempty" require:"true"`
}

func (s CouponCollection) String() string {
	return tea.Prettify(s)
}

func (s CouponCollection) GoString() string {
	return s.String()
}

func (s *CouponCollection) SetCollectionId(v string) *CouponCollection {
	s.CollectionId = &v
	return s
}

func (s *CouponCollection) SetName(v string) *CouponCollection {
	s.Name = &v
	return s
}

func (s *CouponCollection) SetIssuer(v string) *CouponCollection {
	s.Issuer = &v
	return s
}

func (s *CouponCollection) SetCouponNumberPrefix(v string) *CouponCollection {
	s.CouponNumberPrefix = &v
	return s
}

func (s *CouponCollection) SetCouponAdminAccount(v string) *CouponCollection {
	s.CouponAdminAccount = &v
	return s
}

func (s *CouponCollection) SetCouponAdminTenantId(v string) *CouponCollection {
	s.CouponAdminTenantId = &v
	return s
}

func (s *CouponCollection) SetExpireMonitorAccount(v string) *CouponCollection {
	s.ExpireMonitorAccount = &v
	return s
}

func (s *CouponCollection) SetExpireMonitorTenantId(v string) *CouponCollection {
	s.ExpireMonitorTenantId = &v
	return s
}

func (s *CouponCollection) SetNeedRegistered(v bool) *CouponCollection {
	s.NeedRegistered = &v
	return s
}

func (s *CouponCollection) SetNeedPreRegistered(v bool) *CouponCollection {
	s.NeedPreRegistered = &v
	return s
}

// IP授权交易的账单信息
type IPBill struct {
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 账单ID
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty" require:"true"`
	// 上传销售数据时的bizId
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 收款方
	SellerId *string `json:"seller_id,omitempty" xml:"seller_id,omitempty" require:"true"`
	// 付款方
	BuyerId *string `json:"buyer_id,omitempty" xml:"buyer_id,omitempty" require:"true"`
	// 账单状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 账单创建时间，时间戳（毫秒）
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 交易类型：0套餐交易，1定向授权
	TradeType *int64 `json:"trade_type,omitempty" xml:"trade_type,omitempty" require:"true"`
	// 支付链接
	PayUrl *string `json:"pay_url,omitempty" xml:"pay_url,omitempty" require:"true"`
	// 账单金额，支付金额
	BillPayAmount *string `json:"bill_pay_amount,omitempty" xml:"bill_pay_amount,omitempty" require:"true"`
	// 销售金额
	BillSales *string `json:"bill_sales,omitempty" xml:"bill_sales,omitempty" require:"true"`
	// 账单周期开始时间，时间戳（毫秒）
	CycleStartTime *int64 `json:"cycle_start_time,omitempty" xml:"cycle_start_time,omitempty" require:"true"`
	// 账单周期结束时间，时间戳（毫秒）
	CycleEndTime *int64 `json:"cycle_end_time,omitempty" xml:"cycle_end_time,omitempty" require:"true"`
	// 账单支付时间戳
	PayTime *int64 `json:"pay_time,omitempty" xml:"pay_time,omitempty"`
	// 支付宝交易号
	TradeNo *string `json:"trade_no,omitempty" xml:"trade_no,omitempty"`
}

func (s IPBill) String() string {
	return tea.Prettify(s)
}

func (s IPBill) GoString() string {
	return s.String()
}

func (s *IPBill) SetIpOrderId(v string) *IPBill {
	s.IpOrderId = &v
	return s
}

func (s *IPBill) SetIpBillId(v string) *IPBill {
	s.IpBillId = &v
	return s
}

func (s *IPBill) SetBizId(v string) *IPBill {
	s.BizId = &v
	return s
}

func (s *IPBill) SetSellerId(v string) *IPBill {
	s.SellerId = &v
	return s
}

func (s *IPBill) SetBuyerId(v string) *IPBill {
	s.BuyerId = &v
	return s
}

func (s *IPBill) SetStatus(v int64) *IPBill {
	s.Status = &v
	return s
}

func (s *IPBill) SetCreateTime(v int64) *IPBill {
	s.CreateTime = &v
	return s
}

func (s *IPBill) SetMemo(v string) *IPBill {
	s.Memo = &v
	return s
}

func (s *IPBill) SetTradeType(v int64) *IPBill {
	s.TradeType = &v
	return s
}

func (s *IPBill) SetPayUrl(v string) *IPBill {
	s.PayUrl = &v
	return s
}

func (s *IPBill) SetBillPayAmount(v string) *IPBill {
	s.BillPayAmount = &v
	return s
}

func (s *IPBill) SetBillSales(v string) *IPBill {
	s.BillSales = &v
	return s
}

func (s *IPBill) SetCycleStartTime(v int64) *IPBill {
	s.CycleStartTime = &v
	return s
}

func (s *IPBill) SetCycleEndTime(v int64) *IPBill {
	s.CycleEndTime = &v
	return s
}

func (s *IPBill) SetPayTime(v int64) *IPBill {
	s.PayTime = &v
	return s
}

func (s *IPBill) SetTradeNo(v string) *IPBill {
	s.TradeNo = &v
	return s
}

// IP授权订单每次上传“已按照周期汇总的销售数据”的汇总信息
type IPSalesSummary struct {
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 销售数据ID
	SalesBizId *string `json:"sales_biz_id,omitempty" xml:"sales_biz_id,omitempty" require:"true"`
	// 总销售量
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 数量校正
	CorrectAmount *int64 `json:"correct_amount,omitempty" xml:"correct_amount,omitempty" require:"true"`
	// 实际总销售量
	TotalAmount *int64 `json:"total_amount,omitempty" xml:"total_amount,omitempty" require:"true"`
	// 总销售额
	Sales *string `json:"sales,omitempty" xml:"sales,omitempty" require:"true"`
	// 金额校正
	CorrectSales *string `json:"correct_sales,omitempty" xml:"correct_sales,omitempty" require:"true"`
	// 实际总销售金额
	TotalSales *string `json:"total_sales,omitempty" xml:"total_sales,omitempty" require:"true"`
	// 最后操作时间
	OperatorTime *int64 `json:"operator_time,omitempty" xml:"operator_time,omitempty" require:"true"`
	// 销售数据状态：1初始化，2商户确认，3版权方确认，4账单生成，5商户已校正，6版权方拒绝
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 销售数据最终是否需要生成支付账单
	NeedToPay *bool `json:"need_to_pay,omitempty" xml:"need_to_pay,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 统计周期开始时间（毫秒时间戳）
	SettlementBeginTime *int64 `json:"settlement_begin_time,omitempty" xml:"settlement_begin_time,omitempty" require:"true"`
	// 统计周期结束时间（毫秒时间戳）
	SettlementEndTime *int64 `json:"settlement_end_time,omitempty" xml:"settlement_end_time,omitempty" require:"true"`
}

func (s IPSalesSummary) String() string {
	return tea.Prettify(s)
}

func (s IPSalesSummary) GoString() string {
	return s.String()
}

func (s *IPSalesSummary) SetIpOrderId(v string) *IPSalesSummary {
	s.IpOrderId = &v
	return s
}

func (s *IPSalesSummary) SetSalesBizId(v string) *IPSalesSummary {
	s.SalesBizId = &v
	return s
}

func (s *IPSalesSummary) SetAmount(v int64) *IPSalesSummary {
	s.Amount = &v
	return s
}

func (s *IPSalesSummary) SetCorrectAmount(v int64) *IPSalesSummary {
	s.CorrectAmount = &v
	return s
}

func (s *IPSalesSummary) SetTotalAmount(v int64) *IPSalesSummary {
	s.TotalAmount = &v
	return s
}

func (s *IPSalesSummary) SetSales(v string) *IPSalesSummary {
	s.Sales = &v
	return s
}

func (s *IPSalesSummary) SetCorrectSales(v string) *IPSalesSummary {
	s.CorrectSales = &v
	return s
}

func (s *IPSalesSummary) SetTotalSales(v string) *IPSalesSummary {
	s.TotalSales = &v
	return s
}

func (s *IPSalesSummary) SetOperatorTime(v int64) *IPSalesSummary {
	s.OperatorTime = &v
	return s
}

func (s *IPSalesSummary) SetStatus(v int64) *IPSalesSummary {
	s.Status = &v
	return s
}

func (s *IPSalesSummary) SetNeedToPay(v bool) *IPSalesSummary {
	s.NeedToPay = &v
	return s
}

func (s *IPSalesSummary) SetMemo(v string) *IPSalesSummary {
	s.Memo = &v
	return s
}

func (s *IPSalesSummary) SetSettlementBeginTime(v int64) *IPSalesSummary {
	s.SettlementBeginTime = &v
	return s
}

func (s *IPSalesSummary) SetSettlementEndTime(v int64) *IPSalesSummary {
	s.SettlementEndTime = &v
	return s
}

// MCC信息(https://gw.alipayobjects.com/os/bmw-prod/05c9a32e-42d1-436b-ace7-13101d91f672.xlsx）
type IPMCC struct {
	// MCC编码
	MccCode *string `json:"mcc_code,omitempty" xml:"mcc_code,omitempty" require:"true"`
	// 经营类目一级
	CategoryLevel1 *string `json:"category_level1,omitempty" xml:"category_level1,omitempty" require:"true"`
	// 经营类目二级
	CategoryLevel2 *string `json:"category_level2,omitempty" xml:"category_level2,omitempty" require:"true"`
	// 经营类目三级
	CategoryLevel3 *string `json:"category_level3,omitempty" xml:"category_level3,omitempty" require:"true"`
}

func (s IPMCC) String() string {
	return tea.Prettify(s)
}

func (s IPMCC) GoString() string {
	return s.String()
}

func (s *IPMCC) SetMccCode(v string) *IPMCC {
	s.MccCode = &v
	return s
}

func (s *IPMCC) SetCategoryLevel1(v string) *IPMCC {
	s.CategoryLevel1 = &v
	return s
}

func (s *IPMCC) SetCategoryLevel2(v string) *IPMCC {
	s.CategoryLevel2 = &v
	return s
}

func (s *IPMCC) SetCategoryLevel3(v string) *IPMCC {
	s.CategoryLevel3 = &v
	return s
}

// 权益
type Equity struct {
	// 权益管理员ID
	AdminId *string `json:"admin_id,omitempty" xml:"admin_id,omitempty" require:"true"`
	// 权益授权类型
	AuthType *int64 `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	// 权益锚定币种
	Currency *string `json:"currency,omitempty" xml:"currency,omitempty" require:"true"`
	// 权益默认价格
	DefaultPrice *string `json:"default_price,omitempty" xml:"default_price,omitempty" require:"true"`
	// 权益描述
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 权益描述图片OSS地址 分号分隔
	DescImages *string `json:"desc_images,omitempty" xml:"desc_images,omitempty" require:"true"`
	// 权益附属信息
	EquityExtInfo *EquityExtInfo `json:"equity_ext_info,omitempty" xml:"equity_ext_info,omitempty" require:"true"`
	// 权益ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 权益名称
	EquityName *string `json:"equity_name,omitempty" xml:"equity_name,omitempty" require:"true"`
	// 商品类型，详见数字商品公约https://tech.antfin.com/docs/2/163896
	EquityType *string `json:"equity_type,omitempty" xml:"equity_type,omitempty" require:"true"`
	// 权益主图片OSS地址 分号;分隔
	Images *string `json:"images,omitempty" xml:"images,omitempty" require:"true"`
	// 是否为公开权益
	IsPublic *bool `json:"is_public,omitempty" xml:"is_public,omitempty" require:"true"`
	// 商户每日兑换上限
	LimitPerMerchantAndDay *int64 `json:"limit_per_merchant_and_day,omitempty" xml:"limit_per_merchant_and_day,omitempty" require:"true"`
	// 商户每月兑换上限
	LimitPerMerchantAndMonth *int64 `json:"limit_per_merchant_and_month,omitempty" xml:"limit_per_merchant_and_month,omitempty" require:"true"`
	// 用户每日兑换上限
	LimitPerUserAndDay *int64 `json:"limit_per_user_and_day,omitempty" xml:"limit_per_user_and_day,omitempty" require:"true"`
	// 用户每月兑换上限
	LimitPerUserAndMonth *int64 `json:"limit_per_user_and_month,omitempty" xml:"limit_per_user_and_month,omitempty" require:"true"`
	// 附言
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 权益状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 权益库存
	TotalCount *string `json:"total_count,omitempty" xml:"total_count,omitempty" require:"true"`
	// 权益使用有效期右闭区间
	UseValidNotAfter *int64 `json:"use_valid_not_after,omitempty" xml:"use_valid_not_after,omitempty" require:"true"`
	// 权益使用有效期左闭区间
	UseValidNotBefore *int64 `json:"use_valid_not_before,omitempty" xml:"use_valid_not_before,omitempty" require:"true"`
	// 权益兑换有效期右闭区间
	ValidNotAfter *int64 `json:"valid_not_after,omitempty" xml:"valid_not_after,omitempty" require:"true"`
	// 权益兑换有效期左闭区间
	ValidNotBefore *int64 `json:"valid_not_before,omitempty" xml:"valid_not_before,omitempty" require:"true"`
	// 权益面值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// 是否计算手续费（0: 更新手续费版本前不在合约计算手续费，1: 在合约计算手续费）
	CommissionAccepted *int64 `json:"commission_accepted,omitempty" xml:"commission_accepted,omitempty" require:"true"`
}

func (s Equity) String() string {
	return tea.Prettify(s)
}

func (s Equity) GoString() string {
	return s.String()
}

func (s *Equity) SetAdminId(v string) *Equity {
	s.AdminId = &v
	return s
}

func (s *Equity) SetAuthType(v int64) *Equity {
	s.AuthType = &v
	return s
}

func (s *Equity) SetCurrency(v string) *Equity {
	s.Currency = &v
	return s
}

func (s *Equity) SetDefaultPrice(v string) *Equity {
	s.DefaultPrice = &v
	return s
}

func (s *Equity) SetDescription(v string) *Equity {
	s.Description = &v
	return s
}

func (s *Equity) SetDescImages(v string) *Equity {
	s.DescImages = &v
	return s
}

func (s *Equity) SetEquityExtInfo(v *EquityExtInfo) *Equity {
	s.EquityExtInfo = v
	return s
}

func (s *Equity) SetEquityId(v string) *Equity {
	s.EquityId = &v
	return s
}

func (s *Equity) SetEquityName(v string) *Equity {
	s.EquityName = &v
	return s
}

func (s *Equity) SetEquityType(v string) *Equity {
	s.EquityType = &v
	return s
}

func (s *Equity) SetImages(v string) *Equity {
	s.Images = &v
	return s
}

func (s *Equity) SetIsPublic(v bool) *Equity {
	s.IsPublic = &v
	return s
}

func (s *Equity) SetLimitPerMerchantAndDay(v int64) *Equity {
	s.LimitPerMerchantAndDay = &v
	return s
}

func (s *Equity) SetLimitPerMerchantAndMonth(v int64) *Equity {
	s.LimitPerMerchantAndMonth = &v
	return s
}

func (s *Equity) SetLimitPerUserAndDay(v int64) *Equity {
	s.LimitPerUserAndDay = &v
	return s
}

func (s *Equity) SetLimitPerUserAndMonth(v int64) *Equity {
	s.LimitPerUserAndMonth = &v
	return s
}

func (s *Equity) SetMemo(v string) *Equity {
	s.Memo = &v
	return s
}

func (s *Equity) SetStatus(v int64) *Equity {
	s.Status = &v
	return s
}

func (s *Equity) SetTenantId(v string) *Equity {
	s.TenantId = &v
	return s
}

func (s *Equity) SetTotalCount(v string) *Equity {
	s.TotalCount = &v
	return s
}

func (s *Equity) SetUseValidNotAfter(v int64) *Equity {
	s.UseValidNotAfter = &v
	return s
}

func (s *Equity) SetUseValidNotBefore(v int64) *Equity {
	s.UseValidNotBefore = &v
	return s
}

func (s *Equity) SetValidNotAfter(v int64) *Equity {
	s.ValidNotAfter = &v
	return s
}

func (s *Equity) SetValidNotBefore(v int64) *Equity {
	s.ValidNotBefore = &v
	return s
}

func (s *Equity) SetValue(v string) *Equity {
	s.Value = &v
	return s
}

func (s *Equity) SetCommissionAccepted(v int64) *Equity {
	s.CommissionAccepted = &v
	return s
}

// 区块链信息
type IPCodeChainInfo struct {
	// 交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 交易区块
	BlockHeight *int64 `json:"block_height,omitempty" xml:"block_height,omitempty"`
	// 交易时间
	TxTime *int64 `json:"tx_time,omitempty" xml:"tx_time,omitempty"`
}

func (s IPCodeChainInfo) String() string {
	return tea.Prettify(s)
}

func (s IPCodeChainInfo) GoString() string {
	return s.String()
}

func (s *IPCodeChainInfo) SetTxHash(v string) *IPCodeChainInfo {
	s.TxHash = &v
	return s
}

func (s *IPCodeChainInfo) SetBlockHeight(v int64) *IPCodeChainInfo {
	s.BlockHeight = &v
	return s
}

func (s *IPCodeChainInfo) SetTxTime(v int64) *IPCodeChainInfo {
	s.TxTime = &v
	return s
}

// ip的基础信息加上渠道信息
type IpBasicInfoWithChannelInfo struct {
	// ip的基础信息
	IpBasicInfo *IpBasicInfo `json:"ip_basic_info,omitempty" xml:"ip_basic_info,omitempty" require:"true"`
	// ip的渠道信息和sku信息
	IpChannalInfos []*IpChannelWithSku `json:"ip_channal_infos,omitempty" xml:"ip_channal_infos,omitempty" require:"true" type:"Repeated"`
}

func (s IpBasicInfoWithChannelInfo) String() string {
	return tea.Prettify(s)
}

func (s IpBasicInfoWithChannelInfo) GoString() string {
	return s.String()
}

func (s *IpBasicInfoWithChannelInfo) SetIpBasicInfo(v *IpBasicInfo) *IpBasicInfoWithChannelInfo {
	s.IpBasicInfo = v
	return s
}

func (s *IpBasicInfoWithChannelInfo) SetIpChannalInfos(v []*IpChannelWithSku) *IpBasicInfoWithChannelInfo {
	s.IpChannalInfos = v
	return s
}

// 用户
type User struct {
	// 用户分布式身份ID
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 用户的链外身份ID
	LocalId *string `json:"local_id,omitempty" xml:"local_id,omitempty" require:"true"`
	// 用户公钥
	Pk *string `json:"pk,omitempty" xml:"pk,omitempty" require:"true"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 用户ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 用户VC
	Vc *string `json:"vc,omitempty" xml:"vc,omitempty" require:"true"`
}

func (s User) String() string {
	return tea.Prettify(s)
}

func (s User) GoString() string {
	return s.String()
}

func (s *User) SetDid(v string) *User {
	s.Did = &v
	return s
}

func (s *User) SetLocalId(v string) *User {
	s.LocalId = &v
	return s
}

func (s *User) SetPk(v string) *User {
	s.Pk = &v
	return s
}

func (s *User) SetTenantId(v string) *User {
	s.TenantId = &v
	return s
}

func (s *User) SetUserId(v string) *User {
	s.UserId = &v
	return s
}

func (s *User) SetVc(v string) *User {
	s.Vc = &v
	return s
}

// 商品详情
type SKUItem struct {
	// 集分宝销售费率
	Rate *string `json:"rate,omitempty" xml:"rate,omitempty" require:"true"`
	// 包含集分宝个数
	SkuAmount *int64 `json:"sku_amount,omitempty" xml:"sku_amount,omitempty" require:"true"`
	// 商品ID
	SkuId *string `json:"sku_id,omitempty" xml:"sku_id,omitempty" require:"true"`
	// 商品名称
	SkuName *string `json:"sku_name,omitempty" xml:"sku_name,omitempty" require:"true"`
	// 商品面值（单位：元）
	SkuPrice *string `json:"sku_price,omitempty" xml:"sku_price,omitempty" require:"true"`
	// 商品状态：0可用，1冻结，2下线
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s SKUItem) String() string {
	return tea.Prettify(s)
}

func (s SKUItem) GoString() string {
	return s.String()
}

func (s *SKUItem) SetRate(v string) *SKUItem {
	s.Rate = &v
	return s
}

func (s *SKUItem) SetSkuAmount(v int64) *SKUItem {
	s.SkuAmount = &v
	return s
}

func (s *SKUItem) SetSkuId(v string) *SKUItem {
	s.SkuId = &v
	return s
}

func (s *SKUItem) SetSkuName(v string) *SKUItem {
	s.SkuName = &v
	return s
}

func (s *SKUItem) SetSkuPrice(v string) *SKUItem {
	s.SkuPrice = &v
	return s
}

func (s *SKUItem) SetStatus(v int64) *SKUItem {
	s.Status = &v
	return s
}

// 租户场景码信息
type ProductCodeInfo struct {
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 场景码
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 租户映射链上账户名称
	AccountName *string `json:"account_name,omitempty" xml:"account_name,omitempty"`
	// 租户映射账户链上账户ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s ProductCodeInfo) String() string {
	return tea.Prettify(s)
}

func (s ProductCodeInfo) GoString() string {
	return s.String()
}

func (s *ProductCodeInfo) SetChainId(v string) *ProductCodeInfo {
	s.ChainId = &v
	return s
}

func (s *ProductCodeInfo) SetTenantId(v string) *ProductCodeInfo {
	s.TenantId = &v
	return s
}

func (s *ProductCodeInfo) SetProductCode(v string) *ProductCodeInfo {
	s.ProductCode = &v
	return s
}

func (s *ProductCodeInfo) SetAccountName(v string) *ProductCodeInfo {
	s.AccountName = &v
	return s
}

func (s *ProductCodeInfo) SetAccountId(v string) *ProductCodeInfo {
	s.AccountId = &v
	return s
}

func (s *ProductCodeInfo) SetMemo(v string) *ProductCodeInfo {
	s.Memo = &v
	return s
}

// 区块
type Block struct {
	// 区块头
	Header *BlockHeader `json:"header,omitempty" xml:"header,omitempty" require:"true"`
	// 区块体
	Body *BlockBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s Block) String() string {
	return tea.Prettify(s)
}

func (s Block) GoString() string {
	return s.String()
}

func (s *Block) SetHeader(v *BlockHeader) *Block {
	s.Header = v
	return s
}

func (s *Block) SetBody(v *BlockBody) *Block {
	s.Body = v
	return s
}

// 消费卡服务基础请求信息
type BaseRequest struct {
	// 用户的链上账户Id(长度不超过256个字符)
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 业务幂等Id,防止同一笔交易重复发送(长度不超过256个字符)
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 支持多链多合约,该参数为指明需要操作哪个智能合约环境(长度不超过50个字符)
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 备注信息(不要超过500个字符)。
	// 部分接口要求memo必填，以接口返回信息为准。
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 场景码(入驻时申请)(长度不超过50个字符)
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
}

func (s BaseRequest) String() string {
	return tea.Prettify(s)
}

func (s BaseRequest) GoString() string {
	return s.String()
}

func (s *BaseRequest) SetAccountId(v string) *BaseRequest {
	s.AccountId = &v
	return s
}

func (s *BaseRequest) SetBizId(v string) *BaseRequest {
	s.BizId = &v
	return s
}

func (s *BaseRequest) SetChainId(v string) *BaseRequest {
	s.ChainId = &v
	return s
}

func (s *BaseRequest) SetMemo(v string) *BaseRequest {
	s.Memo = &v
	return s
}

func (s *BaseRequest) SetProductCode(v string) *BaseRequest {
	s.ProductCode = &v
	return s
}

// 链上交易结构
type Transaction struct {
	// 交易数据，转换位十六进制
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// 卡密管理员链上ID，64位十六进制。
	From *string `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// 交易hash，十六进制编码
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty" require:"true"`
	// 交易随机数
	Nonce *int64 `json:"nonce,omitempty" xml:"nonce,omitempty" require:"true"`
	// 交易时间
	Period *int64 `json:"period,omitempty" xml:"period,omitempty" require:"true"`
	// from账户对应的公钥，128位十六进制。
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 交易签名，十六进制编码
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
	// 交易时间戳
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// 交易目标地址，64位十六进制。
	To *string `json:"to,omitempty" xml:"to,omitempty" require:"true"`
}

func (s Transaction) String() string {
	return tea.Prettify(s)
}

func (s Transaction) GoString() string {
	return s.String()
}

func (s *Transaction) SetData(v string) *Transaction {
	s.Data = &v
	return s
}

func (s *Transaction) SetFrom(v string) *Transaction {
	s.From = &v
	return s
}

func (s *Transaction) SetHash(v string) *Transaction {
	s.Hash = &v
	return s
}

func (s *Transaction) SetNonce(v int64) *Transaction {
	s.Nonce = &v
	return s
}

func (s *Transaction) SetPeriod(v int64) *Transaction {
	s.Period = &v
	return s
}

func (s *Transaction) SetPublicKey(v string) *Transaction {
	s.PublicKey = &v
	return s
}

func (s *Transaction) SetSignature(v string) *Transaction {
	s.Signature = &v
	return s
}

func (s *Transaction) SetTimestamp(v int64) *Transaction {
	s.Timestamp = &v
	return s
}

func (s *Transaction) SetTo(v string) *Transaction {
	s.To = &v
	return s
}

// IP淘宝店铺信息
type IPShopInfo struct {
	// 授权申请的内部编码
	ItemCode *string `json:"item_code,omitempty" xml:"item_code,omitempty" require:"true"`
	// 淘宝卖家的官方昵称
	SellerNick *string `json:"seller_nick,omitempty" xml:"seller_nick,omitempty" require:"true"`
	// 授权渠道名称
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 数据授权方式
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	// 授权启始时间戳(unix毫秒)
	AuthStart *int64 `json:"auth_start,omitempty" xml:"auth_start,omitempty" require:"true"`
	// 授权终止时间戳(unix毫秒)
	AuthEnd *int64 `json:"auth_end,omitempty" xml:"auth_end,omitempty" require:"true"`
	// 授权状态(1: Init, 2: Success, 3: Expired)
	AuthStatus *int64 `json:"auth_status,omitempty" xml:"auth_status,omitempty" require:"true"`
	// 授权链接
	AuthUrl *string `json:"auth_url,omitempty" xml:"auth_url,omitempty" require:"true"`
}

func (s IPShopInfo) String() string {
	return tea.Prettify(s)
}

func (s IPShopInfo) GoString() string {
	return s.String()
}

func (s *IPShopInfo) SetItemCode(v string) *IPShopInfo {
	s.ItemCode = &v
	return s
}

func (s *IPShopInfo) SetSellerNick(v string) *IPShopInfo {
	s.SellerNick = &v
	return s
}

func (s *IPShopInfo) SetChannelName(v string) *IPShopInfo {
	s.ChannelName = &v
	return s
}

func (s *IPShopInfo) SetAuthType(v string) *IPShopInfo {
	s.AuthType = &v
	return s
}

func (s *IPShopInfo) SetAuthStart(v int64) *IPShopInfo {
	s.AuthStart = &v
	return s
}

func (s *IPShopInfo) SetAuthEnd(v int64) *IPShopInfo {
	s.AuthEnd = &v
	return s
}

func (s *IPShopInfo) SetAuthStatus(v int64) *IPShopInfo {
	s.AuthStatus = &v
	return s
}

func (s *IPShopInfo) SetAuthUrl(v string) *IPShopInfo {
	s.AuthUrl = &v
	return s
}

// 增值服务加sku信息
type ValueAddedServiceInfoWithSku struct {
	// 增值服务信息
	AddValueInfo *ValueAddedServiceInfo `json:"add_value_info,omitempty" xml:"add_value_info,omitempty" require:"true"`
	// sku信息
	Skus []*IpSkuEmphasisInfo `json:"skus,omitempty" xml:"skus,omitempty" require:"true" type:"Repeated"`
}

func (s ValueAddedServiceInfoWithSku) String() string {
	return tea.Prettify(s)
}

func (s ValueAddedServiceInfoWithSku) GoString() string {
	return s.String()
}

func (s *ValueAddedServiceInfoWithSku) SetAddValueInfo(v *ValueAddedServiceInfo) *ValueAddedServiceInfoWithSku {
	s.AddValueInfo = v
	return s
}

func (s *ValueAddedServiceInfoWithSku) SetSkus(v []*IpSkuEmphasisInfo) *ValueAddedServiceInfoWithSku {
	s.Skus = v
	return s
}

// 消费卡数据
type BlockConsumeCardInfo struct {
	// 外部系统对该个人/机构用户的内部编号,用于唯一识别该用户
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 用户的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 开户行名称
	BankName *string `json:"bank_name,omitempty" xml:"bank_name,omitempty" require:"true"`
	// 消费卡开通绑定的银行卡卡号
	BankCardId *string `json:"bank_card_id,omitempty" xml:"bank_card_id,omitempty" require:"true"`
	// 开户名称
	AccountName *string `json:"account_name,omitempty" xml:"account_name,omitempty" require:"true"`
	// 账户余额(元)
	DebitAmount *string `json:"debit_amount,omitempty" xml:"debit_amount,omitempty" require:"true"`
	// 信用余额(元)
	CreditAmount *string `json:"credit_amount,omitempty" xml:"credit_amount,omitempty" require:"true"`
	// 资产的来源<来源账户ID_余额/信用额, 数量>, 例如: "accountId1_Debit": 11000表示这笔资产来源于accountId1,是accountId1这个账户通过Debit余额发行的资产。
	AssetMap *string `json:"asset_map,omitempty" xml:"asset_map,omitempty" require:"true"`
}

func (s BlockConsumeCardInfo) String() string {
	return tea.Prettify(s)
}

func (s BlockConsumeCardInfo) GoString() string {
	return s.String()
}

func (s *BlockConsumeCardInfo) SetUserId(v string) *BlockConsumeCardInfo {
	s.UserId = &v
	return s
}

func (s *BlockConsumeCardInfo) SetAccountId(v string) *BlockConsumeCardInfo {
	s.AccountId = &v
	return s
}

func (s *BlockConsumeCardInfo) SetBankName(v string) *BlockConsumeCardInfo {
	s.BankName = &v
	return s
}

func (s *BlockConsumeCardInfo) SetBankCardId(v string) *BlockConsumeCardInfo {
	s.BankCardId = &v
	return s
}

func (s *BlockConsumeCardInfo) SetAccountName(v string) *BlockConsumeCardInfo {
	s.AccountName = &v
	return s
}

func (s *BlockConsumeCardInfo) SetDebitAmount(v string) *BlockConsumeCardInfo {
	s.DebitAmount = &v
	return s
}

func (s *BlockConsumeCardInfo) SetCreditAmount(v string) *BlockConsumeCardInfo {
	s.CreditAmount = &v
	return s
}

func (s *BlockConsumeCardInfo) SetAssetMap(v string) *BlockConsumeCardInfo {
	s.AssetMap = &v
	return s
}

// 已授权给商户的权益信息
type OpenedEquity struct {
	// 商户管理员ID
	AdminId *string `json:"admin_id,omitempty" xml:"admin_id,omitempty" require:"true"`
	// 授权类型
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	// 币种
	Currency *string `json:"currency,omitempty" xml:"currency,omitempty" require:"true"`
	// 默认价格
	DefaultPrice *string `json:"default_price,omitempty" xml:"default_price,omitempty" require:"true"`
	// 权益详情
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 权益详情图片
	DescImages *string `json:"desc_images,omitempty" xml:"desc_images,omitempty" require:"true"`
	// 权益ID
	EquityD *string `json:"equity_d,omitempty" xml:"equity_d,omitempty" require:"true"`
	// 权益名称
	EquityName *string `json:"equity_name,omitempty" xml:"equity_name,omitempty" require:"true"`
	// 权益类型
	EquityType *int64 `json:"equity_type,omitempty" xml:"equity_type,omitempty" require:"true"`
	// 权益主图片
	Images *string `json:"images,omitempty" xml:"images,omitempty" require:"true"`
	// 是否是公开权益
	IsPublic *bool `json:"is_public,omitempty" xml:"is_public,omitempty" require:"true"`
	// 每日商户对换限制
	LimitPerMerchantAndDay *int64 `json:"limit_per_merchant_and_day,omitempty" xml:"limit_per_merchant_and_day,omitempty" require:"true"`
	// 每月商户对换限制
	LimitPerMerchantAndMonth *int64 `json:"limit_per_merchant_and_month,omitempty" xml:"limit_per_merchant_and_month,omitempty" require:"true"`
	// 每日用户对换限制
	LimitPerUserAndDay *int64 `json:"limit_per_user_and_day,omitempty" xml:"limit_per_user_and_day,omitempty" require:"true"`
	// 每月用户对换限制
	LimitPerUserAndMonth *int64 `json:"limit_per_user_and_month,omitempty" xml:"limit_per_user_and_month,omitempty" require:"true"`
	// 权益附言
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 被授权的租户ID
	OpenToTenantId *string `json:"open_to_tenant_id,omitempty" xml:"open_to_tenant_id,omitempty" require:"true"`
	// 权益状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 授权价格
	TenantPrice *string `json:"tenant_price,omitempty" xml:"tenant_price,omitempty" require:"true"`
	// 库存
	TotalCount *string `json:"total_count,omitempty" xml:"total_count,omitempty" require:"true"`
	// 可用右区间
	UseValidNotAfter *int64 `json:"use_valid_not_after,omitempty" xml:"use_valid_not_after,omitempty" require:"true"`
	// 可用左区间
	UseValidNotBefore *int64 `json:"use_valid_not_before,omitempty" xml:"use_valid_not_before,omitempty" require:"true"`
	// 有效右区间
	ValidNotAfter *int64 `json:"valid_not_after,omitempty" xml:"valid_not_after,omitempty" require:"true"`
	// 有效左时间
	ValidNotBefore *int64 `json:"valid_not_before,omitempty" xml:"valid_not_before,omitempty" require:"true"`
	// 价值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s OpenedEquity) String() string {
	return tea.Prettify(s)
}

func (s OpenedEquity) GoString() string {
	return s.String()
}

func (s *OpenedEquity) SetAdminId(v string) *OpenedEquity {
	s.AdminId = &v
	return s
}

func (s *OpenedEquity) SetAuthType(v string) *OpenedEquity {
	s.AuthType = &v
	return s
}

func (s *OpenedEquity) SetCurrency(v string) *OpenedEquity {
	s.Currency = &v
	return s
}

func (s *OpenedEquity) SetDefaultPrice(v string) *OpenedEquity {
	s.DefaultPrice = &v
	return s
}

func (s *OpenedEquity) SetDescription(v string) *OpenedEquity {
	s.Description = &v
	return s
}

func (s *OpenedEquity) SetDescImages(v string) *OpenedEquity {
	s.DescImages = &v
	return s
}

func (s *OpenedEquity) SetEquityD(v string) *OpenedEquity {
	s.EquityD = &v
	return s
}

func (s *OpenedEquity) SetEquityName(v string) *OpenedEquity {
	s.EquityName = &v
	return s
}

func (s *OpenedEquity) SetEquityType(v int64) *OpenedEquity {
	s.EquityType = &v
	return s
}

func (s *OpenedEquity) SetImages(v string) *OpenedEquity {
	s.Images = &v
	return s
}

func (s *OpenedEquity) SetIsPublic(v bool) *OpenedEquity {
	s.IsPublic = &v
	return s
}

func (s *OpenedEquity) SetLimitPerMerchantAndDay(v int64) *OpenedEquity {
	s.LimitPerMerchantAndDay = &v
	return s
}

func (s *OpenedEquity) SetLimitPerMerchantAndMonth(v int64) *OpenedEquity {
	s.LimitPerMerchantAndMonth = &v
	return s
}

func (s *OpenedEquity) SetLimitPerUserAndDay(v int64) *OpenedEquity {
	s.LimitPerUserAndDay = &v
	return s
}

func (s *OpenedEquity) SetLimitPerUserAndMonth(v int64) *OpenedEquity {
	s.LimitPerUserAndMonth = &v
	return s
}

func (s *OpenedEquity) SetMemo(v string) *OpenedEquity {
	s.Memo = &v
	return s
}

func (s *OpenedEquity) SetOpenToTenantId(v string) *OpenedEquity {
	s.OpenToTenantId = &v
	return s
}

func (s *OpenedEquity) SetStatus(v int64) *OpenedEquity {
	s.Status = &v
	return s
}

func (s *OpenedEquity) SetTenantId(v string) *OpenedEquity {
	s.TenantId = &v
	return s
}

func (s *OpenedEquity) SetTenantPrice(v string) *OpenedEquity {
	s.TenantPrice = &v
	return s
}

func (s *OpenedEquity) SetTotalCount(v string) *OpenedEquity {
	s.TotalCount = &v
	return s
}

func (s *OpenedEquity) SetUseValidNotAfter(v int64) *OpenedEquity {
	s.UseValidNotAfter = &v
	return s
}

func (s *OpenedEquity) SetUseValidNotBefore(v int64) *OpenedEquity {
	s.UseValidNotBefore = &v
	return s
}

func (s *OpenedEquity) SetValidNotAfter(v int64) *OpenedEquity {
	s.ValidNotAfter = &v
	return s
}

func (s *OpenedEquity) SetValidNotBefore(v int64) *OpenedEquity {
	s.ValidNotBefore = &v
	return s
}

func (s *OpenedEquity) SetValue(v string) *OpenedEquity {
	s.Value = &v
	return s
}

// ip 基础信息带上是否更新，只在渠道查询审批中用到
type IpBasicInfoWithUpdate struct {
	// 基础信息
	IpBasicInfo *IpBasicInfo `json:"ip_basic_info,omitempty" xml:"ip_basic_info,omitempty" require:"true"`
	// 是否有更新
	IsUpdate *bool `json:"is_update,omitempty" xml:"is_update,omitempty" require:"true"`
}

func (s IpBasicInfoWithUpdate) String() string {
	return tea.Prettify(s)
}

func (s IpBasicInfoWithUpdate) GoString() string {
	return s.String()
}

func (s *IpBasicInfoWithUpdate) SetIpBasicInfo(v *IpBasicInfo) *IpBasicInfoWithUpdate {
	s.IpBasicInfo = v
	return s
}

func (s *IpBasicInfoWithUpdate) SetIsUpdate(v bool) *IpBasicInfoWithUpdate {
	s.IsUpdate = &v
	return s
}

// 正版码配置信息生命周期
type IPCodeConfigTimeInfo struct {
	// 正版码申请时间，商家申请正版码第一批数量的时间
	CodeApplyTime *string `json:"code_apply_time,omitempty" xml:"code_apply_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 正版码配置时间
	CodeSetTime *string `json:"code_set_time,omitempty" xml:"code_set_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 正版码生效时间
	CodeEffectTime *string `json:"code_effect_time,omitempty" xml:"code_effect_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s IPCodeConfigTimeInfo) String() string {
	return tea.Prettify(s)
}

func (s IPCodeConfigTimeInfo) GoString() string {
	return s.String()
}

func (s *IPCodeConfigTimeInfo) SetCodeApplyTime(v string) *IPCodeConfigTimeInfo {
	s.CodeApplyTime = &v
	return s
}

func (s *IPCodeConfigTimeInfo) SetCodeSetTime(v string) *IPCodeConfigTimeInfo {
	s.CodeSetTime = &v
	return s
}

func (s *IPCodeConfigTimeInfo) SetCodeEffectTime(v string) *IPCodeConfigTimeInfo {
	s.CodeEffectTime = &v
	return s
}

// T+1日销售数据汇总
type SalesByDay struct {
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 版权方ID
	SellerId *string `json:"seller_id,omitempty" xml:"seller_id,omitempty" require:"true"`
	// 商家ID
	BuyerId *string `json:"buyer_id,omitempty" xml:"buyer_id,omitempty" require:"true"`
	// 版权方名称
	SellerName *string `json:"seller_name,omitempty" xml:"seller_name,omitempty" require:"true"`
	// 商家名称
	BuyerName *string `json:"buyer_name,omitempty" xml:"buyer_name,omitempty" require:"true"`
	// 日期
	Date *string `json:"date,omitempty" xml:"date,omitempty" require:"true"`
	// 统计周期-开始时间
	StatisticBeginPeriod *int64 `json:"statistic_begin_period,omitempty" xml:"statistic_begin_period,omitempty" require:"true"`
	// 统计周期-结束时间
	StatisticEndPeriod *int64 `json:"statistic_end_period,omitempty" xml:"statistic_end_period,omitempty" require:"true"`
	// 商品销售数量
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 商品总销售额
	Sales *string `json:"sales,omitempty" xml:"sales,omitempty" require:"true"`
	// 总回退销售额
	RefundSales *string `json:"refund_sales,omitempty" xml:"refund_sales,omitempty" require:"true"`
	// 需支付给版权方的总费用
	Payment *string `json:"payment,omitempty" xml:"payment,omitempty" require:"true"`
}

func (s SalesByDay) String() string {
	return tea.Prettify(s)
}

func (s SalesByDay) GoString() string {
	return s.String()
}

func (s *SalesByDay) SetIpOrderId(v string) *SalesByDay {
	s.IpOrderId = &v
	return s
}

func (s *SalesByDay) SetSellerId(v string) *SalesByDay {
	s.SellerId = &v
	return s
}

func (s *SalesByDay) SetBuyerId(v string) *SalesByDay {
	s.BuyerId = &v
	return s
}

func (s *SalesByDay) SetSellerName(v string) *SalesByDay {
	s.SellerName = &v
	return s
}

func (s *SalesByDay) SetBuyerName(v string) *SalesByDay {
	s.BuyerName = &v
	return s
}

func (s *SalesByDay) SetDate(v string) *SalesByDay {
	s.Date = &v
	return s
}

func (s *SalesByDay) SetStatisticBeginPeriod(v int64) *SalesByDay {
	s.StatisticBeginPeriod = &v
	return s
}

func (s *SalesByDay) SetStatisticEndPeriod(v int64) *SalesByDay {
	s.StatisticEndPeriod = &v
	return s
}

func (s *SalesByDay) SetAmount(v int64) *SalesByDay {
	s.Amount = &v
	return s
}

func (s *SalesByDay) SetSales(v string) *SalesByDay {
	s.Sales = &v
	return s
}

func (s *SalesByDay) SetRefundSales(v string) *SalesByDay {
	s.RefundSales = &v
	return s
}

func (s *SalesByDay) SetPayment(v string) *SalesByDay {
	s.Payment = &v
	return s
}

// 手续费信息
type Commission struct {
	// 要更新的手续费状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 手续费生效时间（时间戳 ms）
	BeginTime *int64 `json:"begin_time,omitempty" xml:"begin_time,omitempty"`
	// 手续费结束时间
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty"`
	// 手续费
	Commission *string `json:"commission,omitempty" xml:"commission,omitempty" require:"true"`
}

func (s Commission) String() string {
	return tea.Prettify(s)
}

func (s Commission) GoString() string {
	return s.String()
}

func (s *Commission) SetStatus(v int64) *Commission {
	s.Status = &v
	return s
}

func (s *Commission) SetBeginTime(v int64) *Commission {
	s.BeginTime = &v
	return s
}

func (s *Commission) SetEndTime(v int64) *Commission {
	s.EndTime = &v
	return s
}

func (s *Commission) SetCommission(v string) *Commission {
	s.Commission = &v
	return s
}

// 可兑换商品列表
type ExchangeableEquityList struct {
	// 页面上数据在总数据中的结束位置（第几个数据）
	EndRow *int64 `json:"end_row,omitempty" xml:"end_row,omitempty" require:"true"`
	// 权益信息列表
	EquityList []*EquityDetail `json:"equity_list,omitempty" xml:"equity_list,omitempty" require:"true" type:"Repeated"`
	// 第一页页码
	FirstPage *int64 `json:"first_page,omitempty" xml:"first_page,omitempty" require:"true"`
	// 是否有下一页
	HasNextPage *bool `json:"has_next_page,omitempty" xml:"has_next_page,omitempty" require:"true"`
	// 是否有前一页
	HasPreviousPage *bool `json:"has_previous_page,omitempty" xml:"has_previous_page,omitempty" require:"true"`
	// 是否第一页
	IsFirstPage *bool `json:"is_first_page,omitempty" xml:"is_first_page,omitempty" require:"true"`
	// 是否最后一页
	IsLastPage *bool `json:"is_last_page,omitempty" xml:"is_last_page,omitempty" require:"true"`
	// 最后一页页码
	LastPage *int64 `json:"last_page,omitempty" xml:"last_page,omitempty" require:"true"`
	// 下一页页码
	NextPage *int64 `json:"next_page,omitempty" xml:"next_page,omitempty" require:"true"`
	// 排序规则
	OrderBy *string `json:"order_by,omitempty" xml:"order_by,omitempty" require:"true"`
	// 可兑换的权益总页数
	Pages *int64 `json:"pages,omitempty" xml:"pages,omitempty" require:"true"`
	// 当前页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty" require:"true"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 前一页页码
	PrePage *int64 `json:"pre_page,omitempty" xml:"pre_page,omitempty" require:"true"`
	// 页面中实际数量
	Size *int64 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// 页面上数据在总数据中的开始位置（第几个数据）
	StartRow *int64 `json:"start_row,omitempty" xml:"start_row,omitempty" require:"true"`
	// 可兑换的权益总数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
}

func (s ExchangeableEquityList) String() string {
	return tea.Prettify(s)
}

func (s ExchangeableEquityList) GoString() string {
	return s.String()
}

func (s *ExchangeableEquityList) SetEndRow(v int64) *ExchangeableEquityList {
	s.EndRow = &v
	return s
}

func (s *ExchangeableEquityList) SetEquityList(v []*EquityDetail) *ExchangeableEquityList {
	s.EquityList = v
	return s
}

func (s *ExchangeableEquityList) SetFirstPage(v int64) *ExchangeableEquityList {
	s.FirstPage = &v
	return s
}

func (s *ExchangeableEquityList) SetHasNextPage(v bool) *ExchangeableEquityList {
	s.HasNextPage = &v
	return s
}

func (s *ExchangeableEquityList) SetHasPreviousPage(v bool) *ExchangeableEquityList {
	s.HasPreviousPage = &v
	return s
}

func (s *ExchangeableEquityList) SetIsFirstPage(v bool) *ExchangeableEquityList {
	s.IsFirstPage = &v
	return s
}

func (s *ExchangeableEquityList) SetIsLastPage(v bool) *ExchangeableEquityList {
	s.IsLastPage = &v
	return s
}

func (s *ExchangeableEquityList) SetLastPage(v int64) *ExchangeableEquityList {
	s.LastPage = &v
	return s
}

func (s *ExchangeableEquityList) SetNextPage(v int64) *ExchangeableEquityList {
	s.NextPage = &v
	return s
}

func (s *ExchangeableEquityList) SetOrderBy(v string) *ExchangeableEquityList {
	s.OrderBy = &v
	return s
}

func (s *ExchangeableEquityList) SetPages(v int64) *ExchangeableEquityList {
	s.Pages = &v
	return s
}

func (s *ExchangeableEquityList) SetPageNumber(v int64) *ExchangeableEquityList {
	s.PageNumber = &v
	return s
}

func (s *ExchangeableEquityList) SetPageSize(v int64) *ExchangeableEquityList {
	s.PageSize = &v
	return s
}

func (s *ExchangeableEquityList) SetPrePage(v int64) *ExchangeableEquityList {
	s.PrePage = &v
	return s
}

func (s *ExchangeableEquityList) SetSize(v int64) *ExchangeableEquityList {
	s.Size = &v
	return s
}

func (s *ExchangeableEquityList) SetStartRow(v int64) *ExchangeableEquityList {
	s.StartRow = &v
	return s
}

func (s *ExchangeableEquityList) SetTotal(v int64) *ExchangeableEquityList {
	s.Total = &v
	return s
}

// 正版码流转信息
type IPCodeFlowInfo struct {
	// 拥有用户名称，收藏人
	CodeOwnerName *string `json:"code_owner_name,omitempty" xml:"code_owner_name,omitempty"`
	// 收藏时间
	CodeCollectTime *int64 `json:"code_collect_time,omitempty" xml:"code_collect_time,omitempty"`
	// 收藏交易哈希
	CodeTransHash *string `json:"code_trans_hash,omitempty" xml:"code_trans_hash,omitempty"`
	// 收藏交易块高
	CodeTransBlockNumber *int64 `json:"code_trans_block_number,omitempty" xml:"code_trans_block_number,omitempty"`
	// 流转信息jsonstring
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty"`
}

func (s IPCodeFlowInfo) String() string {
	return tea.Prettify(s)
}

func (s IPCodeFlowInfo) GoString() string {
	return s.String()
}

func (s *IPCodeFlowInfo) SetCodeOwnerName(v string) *IPCodeFlowInfo {
	s.CodeOwnerName = &v
	return s
}

func (s *IPCodeFlowInfo) SetCodeCollectTime(v int64) *IPCodeFlowInfo {
	s.CodeCollectTime = &v
	return s
}

func (s *IPCodeFlowInfo) SetCodeTransHash(v string) *IPCodeFlowInfo {
	s.CodeTransHash = &v
	return s
}

func (s *IPCodeFlowInfo) SetCodeTransBlockNumber(v int64) *IPCodeFlowInfo {
	s.CodeTransBlockNumber = &v
	return s
}

func (s *IPCodeFlowInfo) SetExtInfo(v string) *IPCodeFlowInfo {
	s.ExtInfo = &v
	return s
}

// 钱包信息
type WalletInfo struct {
	// 授信钱包信息
	CreditWallet *CreditWallet `json:"credit_wallet,omitempty" xml:"credit_wallet,omitempty" require:"true"`
	// 余额钱包信息
	DebitWallet *DebitWallet `json:"debit_wallet,omitempty" xml:"debit_wallet,omitempty" require:"true"`
	// 钱包统计信息
	StatisticalInfo *StatisticalInfo `json:"statistical_info,omitempty" xml:"statistical_info,omitempty" require:"true"`
}

func (s WalletInfo) String() string {
	return tea.Prettify(s)
}

func (s WalletInfo) GoString() string {
	return s.String()
}

func (s *WalletInfo) SetCreditWallet(v *CreditWallet) *WalletInfo {
	s.CreditWallet = v
	return s
}

func (s *WalletInfo) SetDebitWallet(v *DebitWallet) *WalletInfo {
	s.DebitWallet = v
	return s
}

func (s *WalletInfo) SetStatisticalInfo(v *StatisticalInfo) *WalletInfo {
	s.StatisticalInfo = v
	return s
}

// 消费卡服务OpenAPI基础返回值
type BaseResponseData struct {
	// 区块链交易执行的区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty" require:"true"`
	// 交易的业务幂等Id,与交易发起时外部传入的一致
	OutBizId *string `json:"out_biz_id,omitempty" xml:"out_biz_id,omitempty" require:"true"`
	// 区块链交易执行的哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s BaseResponseData) String() string {
	return tea.Prettify(s)
}

func (s BaseResponseData) GoString() string {
	return s.String()
}

func (s *BaseResponseData) SetBlockNumber(v int64) *BaseResponseData {
	s.BlockNumber = &v
	return s
}

func (s *BaseResponseData) SetOutBizId(v string) *BaseResponseData {
	s.OutBizId = &v
	return s
}

func (s *BaseResponseData) SetTxHash(v string) *BaseResponseData {
	s.TxHash = &v
	return s
}

// 查询手续费结果信息
type CommissionResult struct {
	// 手续费生效时间
	BeginTime *int64 `json:"begin_time,omitempty" xml:"begin_time,omitempty" require:"true"`
	// 手续费
	Commission *string `json:"commission,omitempty" xml:"commission,omitempty" require:"true"`
	// 手续费信息ID
	CommissionId *string `json:"commission_id,omitempty" xml:"commission_id,omitempty" require:"true"`
	// 手续费状态（0可用，1停用，2禁用）
	CommissionStatus *int64 `json:"commission_status,omitempty" xml:"commission_status,omitempty" require:"true"`
	// 手续费失效时间
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 商品类型
	EquityType *int64 `json:"equity_type,omitempty" xml:"equity_type,omitempty" require:"true"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 手续费信息ID
	CommissionSubId *string `json:"commission_sub_id,omitempty" xml:"commission_sub_id,omitempty" require:"true"`
}

func (s CommissionResult) String() string {
	return tea.Prettify(s)
}

func (s CommissionResult) GoString() string {
	return s.String()
}

func (s *CommissionResult) SetBeginTime(v int64) *CommissionResult {
	s.BeginTime = &v
	return s
}

func (s *CommissionResult) SetCommission(v string) *CommissionResult {
	s.Commission = &v
	return s
}

func (s *CommissionResult) SetCommissionId(v string) *CommissionResult {
	s.CommissionId = &v
	return s
}

func (s *CommissionResult) SetCommissionStatus(v int64) *CommissionResult {
	s.CommissionStatus = &v
	return s
}

func (s *CommissionResult) SetEndTime(v int64) *CommissionResult {
	s.EndTime = &v
	return s
}

func (s *CommissionResult) SetEquityType(v int64) *CommissionResult {
	s.EquityType = &v
	return s
}

func (s *CommissionResult) SetTenantId(v string) *CommissionResult {
	s.TenantId = &v
	return s
}

func (s *CommissionResult) SetCommissionSubId(v string) *CommissionResult {
	s.CommissionSubId = &v
	return s
}

// sku配置加上ip等级
type IpSkuConfigWithLevel struct {
	// 价格区间
	PriceRange *string `json:"price_range,omitempty" xml:"price_range,omitempty" require:"true"`
	// 单价
	PurchasePrice *string `json:"purchase_price,omitempty" xml:"purchase_price,omitempty" require:"true"`
	// 销售数量
	SaleNum *int64 `json:"sale_num,omitempty" xml:"sale_num,omitempty" require:"true"`
	// ip等级
	IpLevel *int64 `json:"ip_level,omitempty" xml:"ip_level,omitempty" require:"true"`
}

func (s IpSkuConfigWithLevel) String() string {
	return tea.Prettify(s)
}

func (s IpSkuConfigWithLevel) GoString() string {
	return s.String()
}

func (s *IpSkuConfigWithLevel) SetPriceRange(v string) *IpSkuConfigWithLevel {
	s.PriceRange = &v
	return s
}

func (s *IpSkuConfigWithLevel) SetPurchasePrice(v string) *IpSkuConfigWithLevel {
	s.PurchasePrice = &v
	return s
}

func (s *IpSkuConfigWithLevel) SetSaleNum(v int64) *IpSkuConfigWithLevel {
	s.SaleNum = &v
	return s
}

func (s *IpSkuConfigWithLevel) SetIpLevel(v int64) *IpSkuConfigWithLevel {
	s.IpLevel = &v
	return s
}

// 监修报审表单内容
type SuperviseApprove struct {
	// 关联的订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 当前的阶段
	Stage *int64 `json:"stage,omitempty" xml:"stage,omitempty" require:"true"`
	// json组织，用于存储监修报审的具体信息
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty" require:"true"`
	// 当前阶段的审批状态   0:待审批，1:审批通过 2:审批拒绝
	ApprovalStatus *int64 `json:"approval_status,omitempty" xml:"approval_status,omitempty" require:"true"`
	// 审批备注
	ApprovalComments *string `json:"approval_comments,omitempty" xml:"approval_comments,omitempty"`
	// 上链的交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 关联的订单交易的ip id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// 关联交易的卖家id
	SellerAccountId *string `json:"seller_account_id,omitempty" xml:"seller_account_id,omitempty" require:"true"`
	// 关联交易的买家id
	BuyerAccountId *string `json:"buyer_account_id,omitempty" xml:"buyer_account_id,omitempty" require:"true"`
	// 审批额外信息
	ApprovalExtInfo *string `json:"approval_ext_info,omitempty" xml:"approval_ext_info,omitempty"`
}

func (s SuperviseApprove) String() string {
	return tea.Prettify(s)
}

func (s SuperviseApprove) GoString() string {
	return s.String()
}

func (s *SuperviseApprove) SetOrderId(v string) *SuperviseApprove {
	s.OrderId = &v
	return s
}

func (s *SuperviseApprove) SetStage(v int64) *SuperviseApprove {
	s.Stage = &v
	return s
}

func (s *SuperviseApprove) SetExtInfo(v string) *SuperviseApprove {
	s.ExtInfo = &v
	return s
}

func (s *SuperviseApprove) SetApprovalStatus(v int64) *SuperviseApprove {
	s.ApprovalStatus = &v
	return s
}

func (s *SuperviseApprove) SetApprovalComments(v string) *SuperviseApprove {
	s.ApprovalComments = &v
	return s
}

func (s *SuperviseApprove) SetTxHash(v string) *SuperviseApprove {
	s.TxHash = &v
	return s
}

func (s *SuperviseApprove) SetIpId(v string) *SuperviseApprove {
	s.IpId = &v
	return s
}

func (s *SuperviseApprove) SetSellerAccountId(v string) *SuperviseApprove {
	s.SellerAccountId = &v
	return s
}

func (s *SuperviseApprove) SetBuyerAccountId(v string) *SuperviseApprove {
	s.BuyerAccountId = &v
	return s
}

func (s *SuperviseApprove) SetApprovalExtInfo(v string) *SuperviseApprove {
	s.ApprovalExtInfo = &v
	return s
}

// ip的所有信息，加上更新的flag信息
type IpAllInfo struct {
	// ip的基础信息
	IpBasicInfo *IpBasicInfo `json:"ip_basic_info,omitempty" xml:"ip_basic_info,omitempty" require:"true"`
	// ip的渠道信息带上sku信息
	IpChannalInfo []*IpChannelWithSku `json:"ip_channal_info,omitempty" xml:"ip_channal_info,omitempty" require:"true" type:"Repeated"`
	// 是否有更新数据
	IsUpdate *bool `json:"is_update,omitempty" xml:"is_update,omitempty" require:"true"`
}

func (s IpAllInfo) String() string {
	return tea.Prettify(s)
}

func (s IpAllInfo) GoString() string {
	return s.String()
}

func (s *IpAllInfo) SetIpBasicInfo(v *IpBasicInfo) *IpAllInfo {
	s.IpBasicInfo = v
	return s
}

func (s *IpAllInfo) SetIpChannalInfo(v []*IpChannelWithSku) *IpAllInfo {
	s.IpChannalInfo = v
	return s
}

func (s *IpAllInfo) SetIsUpdate(v bool) *IpAllInfo {
	s.IsUpdate = &v
	return s
}

// 接口白名单信息
type APIWhiteListInfo struct {
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 权限级别，暂时不用
	Level *int64 `json:"level,omitempty" xml:"level,omitempty" require:"true"`
	// 更新时间
	UpdateTime *string `json:"update_time,omitempty" xml:"update_time,omitempty" require:"true"`
	// 扩展字段
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty" require:"true"`
}

func (s APIWhiteListInfo) String() string {
	return tea.Prettify(s)
}

func (s APIWhiteListInfo) GoString() string {
	return s.String()
}

func (s *APIWhiteListInfo) SetTenantId(v string) *APIWhiteListInfo {
	s.TenantId = &v
	return s
}

func (s *APIWhiteListInfo) SetChainId(v string) *APIWhiteListInfo {
	s.ChainId = &v
	return s
}

func (s *APIWhiteListInfo) SetLevel(v int64) *APIWhiteListInfo {
	s.Level = &v
	return s
}

func (s *APIWhiteListInfo) SetUpdateTime(v string) *APIWhiteListInfo {
	s.UpdateTime = &v
	return s
}

func (s *APIWhiteListInfo) SetExtension(v string) *APIWhiteListInfo {
	s.Extension = &v
	return s
}

// 租户的备付金列表
type DiscreteValue struct {
	// 序号
	SortId *int64 `json:"sort_id,omitempty" xml:"sort_id,omitempty" require:"true"`
	// 文本信息
	Text *string `json:"text,omitempty" xml:"text,omitempty" require:"true"`
	// 文本值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s DiscreteValue) String() string {
	return tea.Prettify(s)
}

func (s DiscreteValue) GoString() string {
	return s.String()
}

func (s *DiscreteValue) SetSortId(v int64) *DiscreteValue {
	s.SortId = &v
	return s
}

func (s *DiscreteValue) SetText(v string) *DiscreteValue {
	s.Text = &v
	return s
}

func (s *DiscreteValue) SetValue(v string) *DiscreteValue {
	s.Value = &v
	return s
}

// 统计数据
type CounterData struct {
	// 成交总额
	Gmv *string `json:"gmv,omitempty" xml:"gmv,omitempty" require:"true"`
	// 公认标准收入
	Gaap *string `json:"gaap,omitempty" xml:"gaap,omitempty" require:"true"`
	// 笔数
	Counter *string `json:"counter,omitempty" xml:"counter,omitempty" require:"true"`
}

func (s CounterData) String() string {
	return tea.Prettify(s)
}

func (s CounterData) GoString() string {
	return s.String()
}

func (s *CounterData) SetGmv(v string) *CounterData {
	s.Gmv = &v
	return s
}

func (s *CounterData) SetGaap(v string) *CounterData {
	s.Gaap = &v
	return s
}

func (s *CounterData) SetCounter(v string) *CounterData {
	s.Counter = &v
	return s
}

// 用于sku config的查询
type SkuWithLevel struct {
}

func (s SkuWithLevel) String() string {
	return tea.Prettify(s)
}

func (s SkuWithLevel) GoString() string {
	return s.String()
}

// 正版码被扫描或领取的信息
type IPCodeScannedInfo struct {
	// 正版码ID
	IpCode *string `json:"ip_code,omitempty" xml:"ip_code,omitempty" require:"true"`
	// 正版码所在批次已申请的正版码总数
	BatchUsedCount *int64 `json:"batch_used_count,omitempty" xml:"batch_used_count,omitempty"`
	// 用户的ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 用户的名称
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
	// 用户头像地址
	Avatar *string `json:"avatar,omitempty" xml:"avatar,omitempty" require:"true"`
	// 用户的手机号
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// 用户的位置信息
	Gps *string `json:"gps,omitempty" xml:"gps,omitempty"`
	// 领取正版码的交易哈希
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
	// 领取正版码交易所在的区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
	// 处理时间(毫秒时间戳)
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// IP ID
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// 订单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 正版码商品信息配置列表
	GoodsInfoList []*IPCodeGoodsInfo `json:"goods_info_list,omitempty" xml:"goods_info_list,omitempty" type:"Repeated"`
	// 正版码资源位配置信息列表
	AdInfoList []*IPCodeAdvertisingInfo `json:"ad_info_list,omitempty" xml:"ad_info_list,omitempty" type:"Repeated"`
	// ip版权方信息
	IpownerInfo *IPCodeIpOwnerInfo `json:"ipowner_info,omitempty" xml:"ipowner_info,omitempty"`
	// 0:未配置, 1:配置成功可展示, 4:已经失效, 9:下架【本期不实现】
	IpCodeStatus *int64 `json:"ip_code_status,omitempty" xml:"ip_code_status,omitempty"`
	// 额外功能，包括是否允许收藏等
	Features []*int64 `json:"features,omitempty" xml:"features,omitempty" type:"Repeated"`
	// 核验次数，配置生效后的核验次数统计
	CheckCounts *int64 `json:"check_counts,omitempty" xml:"check_counts,omitempty"`
	// 正版码关联的I IP信息
	IpInfo *IPCodeIpGoodInfo `json:"ip_info,omitempty" xml:"ip_info,omitempty"`
	// UNI码
	UniCode *string `json:"uni_code,omitempty" xml:"uni_code,omitempty"`
	// 正版码配置附加信息，信息内容由调用方自定义
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty"`
	// 收藏时间(UNIX时间戳)0表示未被收藏
	ReceiveTime *int64 `json:"receive_time,omitempty" xml:"receive_time,omitempty"`
	// 同一批次存在失效UNI码的场景下,指示更新后的下标
	FixedIndex *int64 `json:"fixed_index,omitempty" xml:"fixed_index,omitempty"`
	// 同一批次存在失效UNI码的场景下,指示更新后的总量
	FixedCount *int64 `json:"fixed_count,omitempty" xml:"fixed_count,omitempty"`
	// 小龙坎有限公司
	AccountExternalName *string `json:"account_external_name,omitempty" xml:"account_external_name,omitempty"`
	// 码失效时间（毫秒时间戳）
	DisabledDate *int64 `json:"disabled_date,omitempty" xml:"disabled_date,omitempty"`
	// 核验记录清空时间戳
	CheckEmptyTime *int64 `json:"check_empty_time,omitempty" xml:"check_empty_time,omitempty"`
	// 同一批次已被领取的数量
	ReceiveCount *int64 `json:"receive_count,omitempty" xml:"receive_count,omitempty"`
}

func (s IPCodeScannedInfo) String() string {
	return tea.Prettify(s)
}

func (s IPCodeScannedInfo) GoString() string {
	return s.String()
}

func (s *IPCodeScannedInfo) SetIpCode(v string) *IPCodeScannedInfo {
	s.IpCode = &v
	return s
}

func (s *IPCodeScannedInfo) SetBatchUsedCount(v int64) *IPCodeScannedInfo {
	s.BatchUsedCount = &v
	return s
}

func (s *IPCodeScannedInfo) SetUserId(v string) *IPCodeScannedInfo {
	s.UserId = &v
	return s
}

func (s *IPCodeScannedInfo) SetUserName(v string) *IPCodeScannedInfo {
	s.UserName = &v
	return s
}

func (s *IPCodeScannedInfo) SetAvatar(v string) *IPCodeScannedInfo {
	s.Avatar = &v
	return s
}

func (s *IPCodeScannedInfo) SetPhoneNumber(v string) *IPCodeScannedInfo {
	s.PhoneNumber = &v
	return s
}

func (s *IPCodeScannedInfo) SetGps(v string) *IPCodeScannedInfo {
	s.Gps = &v
	return s
}

func (s *IPCodeScannedInfo) SetHash(v string) *IPCodeScannedInfo {
	s.Hash = &v
	return s
}

func (s *IPCodeScannedInfo) SetBlockNumber(v int64) *IPCodeScannedInfo {
	s.BlockNumber = &v
	return s
}

func (s *IPCodeScannedInfo) SetTimestamp(v int64) *IPCodeScannedInfo {
	s.Timestamp = &v
	return s
}

func (s *IPCodeScannedInfo) SetIpId(v string) *IPCodeScannedInfo {
	s.IpId = &v
	return s
}

func (s *IPCodeScannedInfo) SetOrderId(v string) *IPCodeScannedInfo {
	s.OrderId = &v
	return s
}

func (s *IPCodeScannedInfo) SetGoodsInfoList(v []*IPCodeGoodsInfo) *IPCodeScannedInfo {
	s.GoodsInfoList = v
	return s
}

func (s *IPCodeScannedInfo) SetAdInfoList(v []*IPCodeAdvertisingInfo) *IPCodeScannedInfo {
	s.AdInfoList = v
	return s
}

func (s *IPCodeScannedInfo) SetIpownerInfo(v *IPCodeIpOwnerInfo) *IPCodeScannedInfo {
	s.IpownerInfo = v
	return s
}

func (s *IPCodeScannedInfo) SetIpCodeStatus(v int64) *IPCodeScannedInfo {
	s.IpCodeStatus = &v
	return s
}

func (s *IPCodeScannedInfo) SetFeatures(v []*int64) *IPCodeScannedInfo {
	s.Features = v
	return s
}

func (s *IPCodeScannedInfo) SetCheckCounts(v int64) *IPCodeScannedInfo {
	s.CheckCounts = &v
	return s
}

func (s *IPCodeScannedInfo) SetIpInfo(v *IPCodeIpGoodInfo) *IPCodeScannedInfo {
	s.IpInfo = v
	return s
}

func (s *IPCodeScannedInfo) SetUniCode(v string) *IPCodeScannedInfo {
	s.UniCode = &v
	return s
}

func (s *IPCodeScannedInfo) SetExtInfo(v string) *IPCodeScannedInfo {
	s.ExtInfo = &v
	return s
}

func (s *IPCodeScannedInfo) SetReceiveTime(v int64) *IPCodeScannedInfo {
	s.ReceiveTime = &v
	return s
}

func (s *IPCodeScannedInfo) SetFixedIndex(v int64) *IPCodeScannedInfo {
	s.FixedIndex = &v
	return s
}

func (s *IPCodeScannedInfo) SetFixedCount(v int64) *IPCodeScannedInfo {
	s.FixedCount = &v
	return s
}

func (s *IPCodeScannedInfo) SetAccountExternalName(v string) *IPCodeScannedInfo {
	s.AccountExternalName = &v
	return s
}

func (s *IPCodeScannedInfo) SetDisabledDate(v int64) *IPCodeScannedInfo {
	s.DisabledDate = &v
	return s
}

func (s *IPCodeScannedInfo) SetCheckEmptyTime(v int64) *IPCodeScannedInfo {
	s.CheckEmptyTime = &v
	return s
}

func (s *IPCodeScannedInfo) SetReceiveCount(v int64) *IPCodeScannedInfo {
	s.ReceiveCount = &v
	return s
}

// 创建电子券的参数
type CouponCreate struct {
	// 电子券批次ID
	CollectionId *string `json:"collection_id,omitempty" xml:"collection_id,omitempty" require:"true"`
	// 电子券价值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// 电子券名称
	CouponName *string `json:"coupon_name,omitempty" xml:"coupon_name,omitempty" require:"true"`
	// 用户脱敏ID
	DesensitizedUid *string `json:"desensitized_uid,omitempty" xml:"desensitized_uid,omitempty"`
	// 扩展信息
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty" require:"true"`
	// 持有者ID
	HolderUserAccount *string `json:"holder_user_account,omitempty" xml:"holder_user_account,omitempty"`
	// 电子券公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 时区（暂时固定为GMT+8）
	TimeZone *string `json:"time_zone,omitempty" xml:"time_zone,omitempty" require:"true"`
	// 用户公钥
	UidPublicKey *string `json:"uid_public_key,omitempty" xml:"uid_public_key,omitempty"`
	// 有效开始时间
	ValidAfter *int64 `json:"valid_after,omitempty" xml:"valid_after,omitempty" require:"true"`
	// 有效结束时间
	ValidBefore *int64 `json:"valid_before,omitempty" xml:"valid_before,omitempty" require:"true"`
}

func (s CouponCreate) String() string {
	return tea.Prettify(s)
}

func (s CouponCreate) GoString() string {
	return s.String()
}

func (s *CouponCreate) SetCollectionId(v string) *CouponCreate {
	s.CollectionId = &v
	return s
}

func (s *CouponCreate) SetValue(v string) *CouponCreate {
	s.Value = &v
	return s
}

func (s *CouponCreate) SetCouponName(v string) *CouponCreate {
	s.CouponName = &v
	return s
}

func (s *CouponCreate) SetDesensitizedUid(v string) *CouponCreate {
	s.DesensitizedUid = &v
	return s
}

func (s *CouponCreate) SetExtInfo(v string) *CouponCreate {
	s.ExtInfo = &v
	return s
}

func (s *CouponCreate) SetHolderUserAccount(v string) *CouponCreate {
	s.HolderUserAccount = &v
	return s
}

func (s *CouponCreate) SetPublicKey(v string) *CouponCreate {
	s.PublicKey = &v
	return s
}

func (s *CouponCreate) SetTimeZone(v string) *CouponCreate {
	s.TimeZone = &v
	return s
}

func (s *CouponCreate) SetUidPublicKey(v string) *CouponCreate {
	s.UidPublicKey = &v
	return s
}

func (s *CouponCreate) SetValidAfter(v int64) *CouponCreate {
	s.ValidAfter = &v
	return s
}

func (s *CouponCreate) SetValidBefore(v int64) *CouponCreate {
	s.ValidBefore = &v
	return s
}

// ip的渠道信息
type IpChannelInfo struct {
	// 渠道名字
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 授权模式 商品授权 0普通授权/1独家授权  本期只有0
	AuthorizationMode *int64 `json:"authorization_mode,omitempty" xml:"authorization_mode,omitempty" require:"true"`
	// 计费模式 0:按量 1:按金额
	PayMode *int64 `json:"pay_mode,omitempty" xml:"pay_mode,omitempty" require:"true"`
	// ip等级 （5位数字） 对应a，0:经典IP/1:流量IP/2:设计IP
	IpLevel *int64 `json:"ip_level,omitempty" xml:"ip_level,omitempty" require:"true"`
	// 商品状态（0:待上架，1:上架，2:下架）
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 交易是否需要确认
	TradeNeedConfirm *bool `json:"trade_need_confirm,omitempty" xml:"trade_need_confirm,omitempty"`
	// 保底金区间，0：0；1：10万以下；2:10-30万；3:30-50万；4:50万以上
	GuaranteeRange *int64 `json:"guarantee_range,omitempty" xml:"guarantee_range,omitempty"`
	// 交易模式
	IpTradeMode *IPTradeMode `json:"ip_trade_mode,omitempty" xml:"ip_trade_mode,omitempty"`
	// 授权行业
	AuthorizationIndustry []*string `json:"authorization_industry,omitempty" xml:"authorization_industry,omitempty" type:"Repeated"`
}

func (s IpChannelInfo) String() string {
	return tea.Prettify(s)
}

func (s IpChannelInfo) GoString() string {
	return s.String()
}

func (s *IpChannelInfo) SetChannelName(v string) *IpChannelInfo {
	s.ChannelName = &v
	return s
}

func (s *IpChannelInfo) SetAuthorizationMode(v int64) *IpChannelInfo {
	s.AuthorizationMode = &v
	return s
}

func (s *IpChannelInfo) SetPayMode(v int64) *IpChannelInfo {
	s.PayMode = &v
	return s
}

func (s *IpChannelInfo) SetIpLevel(v int64) *IpChannelInfo {
	s.IpLevel = &v
	return s
}

func (s *IpChannelInfo) SetStatus(v int64) *IpChannelInfo {
	s.Status = &v
	return s
}

func (s *IpChannelInfo) SetTradeNeedConfirm(v bool) *IpChannelInfo {
	s.TradeNeedConfirm = &v
	return s
}

func (s *IpChannelInfo) SetGuaranteeRange(v int64) *IpChannelInfo {
	s.GuaranteeRange = &v
	return s
}

func (s *IpChannelInfo) SetIpTradeMode(v *IPTradeMode) *IpChannelInfo {
	s.IpTradeMode = v
	return s
}

func (s *IpChannelInfo) SetAuthorizationIndustry(v []*string) *IpChannelInfo {
	s.AuthorizationIndustry = v
	return s
}

// 手续费规则
type CommissionRule struct {
	// 一级分账方的账户ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 手续费规则
	CommissionPeriod *CommissionPeriod `json:"commission_period,omitempty" xml:"commission_period,omitempty" require:"true"`
}

func (s CommissionRule) String() string {
	return tea.Prettify(s)
}

func (s CommissionRule) GoString() string {
	return s.String()
}

func (s *CommissionRule) SetAccountId(v string) *CommissionRule {
	s.AccountId = &v
	return s
}

func (s *CommissionRule) SetCommissionPeriod(v *CommissionPeriod) *CommissionRule {
	s.CommissionPeriod = v
	return s
}

// 商户
type Merchant struct {
	// 商户管理员ID
	AdminId *string `json:"admin_id,omitempty" xml:"admin_id,omitempty" require:"true"`
	// 商户描述
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 商户分布式身份ID
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 资金管理员ID
	FundManagerId *string `json:"fund_manager_id,omitempty" xml:"fund_manager_id,omitempty" require:"true"`
	// 是否可以发行资产
	IsAssetIssuer *bool `json:"is_asset_issuer,omitempty" xml:"is_asset_issuer,omitempty" require:"true"`
	// 是否可以采购权益
	IsEquityConsumer *bool `json:"is_equity_consumer,omitempty" xml:"is_equity_consumer,omitempty" require:"true"`
	// 是否可以发行权益
	IsEquityProvider *bool `json:"is_equity_provider,omitempty" xml:"is_equity_provider,omitempty" require:"true"`
	// 备付金数据
	Provision *Provision `json:"provision,omitempty" xml:"provision,omitempty" require:"true"`
	// 商户状态: 0可用, 1下线, 2冻结
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 商户的损益账户
	ProfitLossBalance *string `json:"profit_loss_balance,omitempty" xml:"profit_loss_balance,omitempty" require:"true"`
}

func (s Merchant) String() string {
	return tea.Prettify(s)
}

func (s Merchant) GoString() string {
	return s.String()
}

func (s *Merchant) SetAdminId(v string) *Merchant {
	s.AdminId = &v
	return s
}

func (s *Merchant) SetDescription(v string) *Merchant {
	s.Description = &v
	return s
}

func (s *Merchant) SetDid(v string) *Merchant {
	s.Did = &v
	return s
}

func (s *Merchant) SetFundManagerId(v string) *Merchant {
	s.FundManagerId = &v
	return s
}

func (s *Merchant) SetIsAssetIssuer(v bool) *Merchant {
	s.IsAssetIssuer = &v
	return s
}

func (s *Merchant) SetIsEquityConsumer(v bool) *Merchant {
	s.IsEquityConsumer = &v
	return s
}

func (s *Merchant) SetIsEquityProvider(v bool) *Merchant {
	s.IsEquityProvider = &v
	return s
}

func (s *Merchant) SetProvision(v *Provision) *Merchant {
	s.Provision = v
	return s
}

func (s *Merchant) SetStatus(v int64) *Merchant {
	s.Status = &v
	return s
}

func (s *Merchant) SetTenantId(v string) *Merchant {
	s.TenantId = &v
	return s
}

func (s *Merchant) SetProfitLossBalance(v string) *Merchant {
	s.ProfitLossBalance = &v
	return s
}

// IP授权服务基础请求信息
type BaseRequestInfo struct {
	// 业务幂等Id,防止同一笔交易重复发送(长度不超过256个字符)
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 支持多链多合约,该参数为指明需要操作哪个智能合约环境(长度不超过50个字符)
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 场景码(入驻时申请)(长度不超过50个字符)
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
}

func (s BaseRequestInfo) String() string {
	return tea.Prettify(s)
}

func (s BaseRequestInfo) GoString() string {
	return s.String()
}

func (s *BaseRequestInfo) SetBizId(v string) *BaseRequestInfo {
	s.BizId = &v
	return s
}

func (s *BaseRequestInfo) SetChainId(v string) *BaseRequestInfo {
	s.ChainId = &v
	return s
}

func (s *BaseRequestInfo) SetProductCode(v string) *BaseRequestInfo {
	s.ProductCode = &v
	return s
}

// 简要扫码信息
type IPSimpleScannedInfo struct {
	// 扫码人
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	// 扫码时间
	ScannedTime *string `json:"scanned_time,omitempty" xml:"scanned_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 扫码地址
	Gps *string `json:"gps,omitempty" xml:"gps,omitempty"`
}

func (s IPSimpleScannedInfo) String() string {
	return tea.Prettify(s)
}

func (s IPSimpleScannedInfo) GoString() string {
	return s.String()
}

func (s *IPSimpleScannedInfo) SetUserName(v string) *IPSimpleScannedInfo {
	s.UserName = &v
	return s
}

func (s *IPSimpleScannedInfo) SetScannedTime(v string) *IPSimpleScannedInfo {
	s.ScannedTime = &v
	return s
}

func (s *IPSimpleScannedInfo) SetGps(v string) *IPSimpleScannedInfo {
	s.Gps = &v
	return s
}

// 权益流水
type EInstruction struct {
	// 资产ID
	AssetId *string `json:"asset_id,omitempty" xml:"asset_id,omitempty" require:"true"`
	// 资产的汇率
	AssetRate *string `json:"asset_rate,omitempty" xml:"asset_rate,omitempty" require:"true"`
	// 资产扣减数量(单位:个)
	DeductAssetAmount *string `json:"deduct_asset_amount,omitempty" xml:"deduct_asset_amount,omitempty" require:"true"`
	// 扣减商户备付金授信额(单位:元)
	DeductCreditAmount *string `json:"deduct_credit_amount,omitempty" xml:"deduct_credit_amount,omitempty" require:"true"`
	// 扣减商户备付金余额(单位:元)
	DeductDebitAmount *string `json:"deduct_debit_amount,omitempty" xml:"deduct_debit_amount,omitempty" require:"true"`
	// 被扣减备付金的租户ID
	DeductTenantId *string `json:"deduct_tenant_id,omitempty" xml:"deduct_tenant_id,omitempty" require:"true"`
	// 权益ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 权益名称
	EquityName *string `json:"equity_name,omitempty" xml:"equity_name,omitempty" require:"true"`
	// 权益对用户价格(单位:元)
	EquityPrice *string `json:"equity_price,omitempty" xml:"equity_price,omitempty" require:"true"`
	// 权益面值(单位:元)
	EquityValue *string `json:"equity_value,omitempty" xml:"equity_value,omitempty" require:"true"`
	// 附言Deliver/Complete/OutOfStore/WriteOff)
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 发起操作的租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 业务交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 对换单流水状态：
	// 0        // 权益兑换单创建
	// 1        // 权益兑换单接单
	// 2        // 权益兑换单发货
	// 3        // 权益兑换单确认收货
	// 4        // 权益兑换单缺货
	// 5        // 权益兑换单核销
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 权益归属租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 交易时间戳
	TimeStamp *int64 `json:"time_stamp,omitempty" xml:"time_stamp,omitempty" require:"true"`
	// 兑换类型(商户身份/用户身份)
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 用户身份兑换/商户兑换的受益用户
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 版本（之前版本为0，不收取手续费，之后版本为1，收取手续费）
	InstructionVersion *int64 `json:"instruction_version,omitempty" xml:"instruction_version,omitempty" require:"true"`
	// 收取手续费的金融云租户ID
	CommissionTenantId *string `json:"commission_tenant_id,omitempty" xml:"commission_tenant_id,omitempty" require:"true"`
	// 手续费(单位:元)
	InstructionCommission *string `json:"instruction_commission,omitempty" xml:"instruction_commission,omitempty" require:"true"`
	// 手续费扣减商户备付金余额(单位:元)
	DeductDebitCommission *string `json:"deduct_debit_commission,omitempty" xml:"deduct_debit_commission,omitempty" require:"true"`
	// 手续费扣减商户备付金授信额(单位:元)
	DeductCreditCommission *string `json:"deduct_credit_commission,omitempty" xml:"deduct_credit_commission,omitempty" require:"true"`
	// 资产手续费扣减数量(单位:个)
	DeductAssetCommission *string `json:"deduct_asset_commission,omitempty" xml:"deduct_asset_commission,omitempty" require:"true"`
	// 手续费率
	CommissionRate *string `json:"commission_rate,omitempty" xml:"commission_rate,omitempty" require:"true"`
	// 手续费id
	CommissionId *string `json:"commission_id,omitempty" xml:"commission_id,omitempty" require:"true"`
	// 手续费子id
	CommissionSubId *string `json:"commission_sub_id,omitempty" xml:"commission_sub_id,omitempty" require:"true"`
	// 手续费状态（0:未提现，1:已提现）
	CommissionStatus *int64 `json:"commission_status,omitempty" xml:"commission_status,omitempty" require:"true"`
	// 是否收取手续费
	CommissionCharged *int64 `json:"commission_charged,omitempty" xml:"commission_charged,omitempty" require:"true"`
}

func (s EInstruction) String() string {
	return tea.Prettify(s)
}

func (s EInstruction) GoString() string {
	return s.String()
}

func (s *EInstruction) SetAssetId(v string) *EInstruction {
	s.AssetId = &v
	return s
}

func (s *EInstruction) SetAssetRate(v string) *EInstruction {
	s.AssetRate = &v
	return s
}

func (s *EInstruction) SetDeductAssetAmount(v string) *EInstruction {
	s.DeductAssetAmount = &v
	return s
}

func (s *EInstruction) SetDeductCreditAmount(v string) *EInstruction {
	s.DeductCreditAmount = &v
	return s
}

func (s *EInstruction) SetDeductDebitAmount(v string) *EInstruction {
	s.DeductDebitAmount = &v
	return s
}

func (s *EInstruction) SetDeductTenantId(v string) *EInstruction {
	s.DeductTenantId = &v
	return s
}

func (s *EInstruction) SetEquityId(v string) *EInstruction {
	s.EquityId = &v
	return s
}

func (s *EInstruction) SetEquityName(v string) *EInstruction {
	s.EquityName = &v
	return s
}

func (s *EInstruction) SetEquityPrice(v string) *EInstruction {
	s.EquityPrice = &v
	return s
}

func (s *EInstruction) SetEquityValue(v string) *EInstruction {
	s.EquityValue = &v
	return s
}

func (s *EInstruction) SetMemo(v string) *EInstruction {
	s.Memo = &v
	return s
}

func (s *EInstruction) SetOptTenantId(v string) *EInstruction {
	s.OptTenantId = &v
	return s
}

func (s *EInstruction) SetOutTxId(v string) *EInstruction {
	s.OutTxId = &v
	return s
}

func (s *EInstruction) SetStatus(v int64) *EInstruction {
	s.Status = &v
	return s
}

func (s *EInstruction) SetTenantId(v string) *EInstruction {
	s.TenantId = &v
	return s
}

func (s *EInstruction) SetTimeStamp(v int64) *EInstruction {
	s.TimeStamp = &v
	return s
}

func (s *EInstruction) SetType(v int64) *EInstruction {
	s.Type = &v
	return s
}

func (s *EInstruction) SetUserId(v string) *EInstruction {
	s.UserId = &v
	return s
}

func (s *EInstruction) SetInstructionVersion(v int64) *EInstruction {
	s.InstructionVersion = &v
	return s
}

func (s *EInstruction) SetCommissionTenantId(v string) *EInstruction {
	s.CommissionTenantId = &v
	return s
}

func (s *EInstruction) SetInstructionCommission(v string) *EInstruction {
	s.InstructionCommission = &v
	return s
}

func (s *EInstruction) SetDeductDebitCommission(v string) *EInstruction {
	s.DeductDebitCommission = &v
	return s
}

func (s *EInstruction) SetDeductCreditCommission(v string) *EInstruction {
	s.DeductCreditCommission = &v
	return s
}

func (s *EInstruction) SetDeductAssetCommission(v string) *EInstruction {
	s.DeductAssetCommission = &v
	return s
}

func (s *EInstruction) SetCommissionRate(v string) *EInstruction {
	s.CommissionRate = &v
	return s
}

func (s *EInstruction) SetCommissionId(v string) *EInstruction {
	s.CommissionId = &v
	return s
}

func (s *EInstruction) SetCommissionSubId(v string) *EInstruction {
	s.CommissionSubId = &v
	return s
}

func (s *EInstruction) SetCommissionStatus(v int64) *EInstruction {
	s.CommissionStatus = &v
	return s
}

func (s *EInstruction) SetCommissionCharged(v int64) *EInstruction {
	s.CommissionCharged = &v
	return s
}

// 商户积分库和与预算库信息
type MerchantBudget struct {
	// 积分库代码
	PointLibCode *string `json:"point_lib_code,omitempty" xml:"point_lib_code,omitempty" require:"true"`
	// 预算库代码
	BudgetCode *string `json:"budget_code,omitempty" xml:"budget_code,omitempty" require:"true"`
	// 预算库描述
	BudgetDesc *string `json:"budget_desc,omitempty" xml:"budget_desc,omitempty" require:"true"`
	// 预算库启用时间
	BudgetStartTime *string `json:"budget_start_time,omitempty" xml:"budget_start_time,omitempty" require:"true"`
	// 预算库截止时间
	BudgetEndTime *string `json:"budget_end_time,omitempty" xml:"budget_end_time,omitempty" require:"true"`
}

func (s MerchantBudget) String() string {
	return tea.Prettify(s)
}

func (s MerchantBudget) GoString() string {
	return s.String()
}

func (s *MerchantBudget) SetPointLibCode(v string) *MerchantBudget {
	s.PointLibCode = &v
	return s
}

func (s *MerchantBudget) SetBudgetCode(v string) *MerchantBudget {
	s.BudgetCode = &v
	return s
}

func (s *MerchantBudget) SetBudgetDesc(v string) *MerchantBudget {
	s.BudgetDesc = &v
	return s
}

func (s *MerchantBudget) SetBudgetStartTime(v string) *MerchantBudget {
	s.BudgetStartTime = &v
	return s
}

func (s *MerchantBudget) SetBudgetEndTime(v string) *MerchantBudget {
	s.BudgetEndTime = &v
	return s
}

// 消费卡的单条交易记录数据
type BlockInstruction struct {
	// 商品兑换单/订单编号
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 交易类型
	InstructionType *int64 `json:"instruction_type,omitempty" xml:"instruction_type,omitempty" require:"true"`
	// 买家的链上账户Id
	BuyerAccountId *string `json:"buyer_account_id,omitempty" xml:"buyer_account_id,omitempty" require:"true"`
	// 卖家的链上账户Id
	SellerAccountId *string `json:"seller_account_id,omitempty" xml:"seller_account_id,omitempty" require:"true"`
	// 平台机构ID
	PlatformId *string `json:"platform_id,omitempty" xml:"platform_id,omitempty" require:"true"`
	// 商品ID
	GoodsId *string `json:"goods_id,omitempty" xml:"goods_id,omitempty" require:"true"`
	// 商品名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// 实际售价(元)
	SellerPrice *string `json:"seller_price,omitempty" xml:"seller_price,omitempty" require:"true"`
	// 商品面值(元)
	DisplayPrice *string `json:"display_price,omitempty" xml:"display_price,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 附言
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
	// 兑换单状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 退款状态
	RefundStatus *int64 `json:"refund_status,omitempty" xml:"refund_status,omitempty" require:"true"`
	// 交易创建时间
	CreateTimestamp *int64 `json:"create_timestamp,omitempty" xml:"create_timestamp,omitempty" require:"true"`
	// 支付时间
	PayTimestamp *int64 `json:"pay_timestamp,omitempty" xml:"pay_timestamp,omitempty" require:"true"`
	// 交易附属信息
	ExtraData []*MetaDataDO `json:"extra_data,omitempty" xml:"extra_data,omitempty" require:"true" type:"Repeated"`
	// 交易token来源信息
	TokenInstructions []*TokenInstructionDO `json:"token_instructions,omitempty" xml:"token_instructions,omitempty" require:"true" type:"Repeated"`
	// 关联交易ID
	RelatedOrderId *string `json:"related_order_id,omitempty" xml:"related_order_id,omitempty" require:"true"`
	// 手续费token数量
	CommissionToken *string `json:"commission_token,omitempty" xml:"commission_token,omitempty" require:"true"`
	// 卖家收到的token数量
	SellerReceiveToken *string `json:"seller_receive_token,omitempty" xml:"seller_receive_token,omitempty" require:"true"`
	// 支付类型：买家支付，卖家支付
	PayCommissionType *int64 `json:"pay_commission_type,omitempty" xml:"pay_commission_type,omitempty" require:"true"`
	// 买家手机号
	BuyerPhone *string `json:"buyer_phone,omitempty" xml:"buyer_phone,omitempty" require:"true"`
	// 买家名称
	BuyerName *string `json:"buyer_name,omitempty" xml:"buyer_name,omitempty" require:"true"`
	// 买家身份信息
	BuyerIdNumber *string `json:"buyer_id_number,omitempty" xml:"buyer_id_number,omitempty" require:"true"`
	// 买家身份信息类型
	BuyerIdType *string `json:"buyer_id_type,omitempty" xml:"buyer_id_type,omitempty" require:"true"`
	// 买家IP
	BuyeIp *string `json:"buye_ip,omitempty" xml:"buye_ip,omitempty" require:"true"`
	// 订单原始创建时间，外部传入
	OriginCreateTime *int64 `json:"origin_create_time,omitempty" xml:"origin_create_time,omitempty" require:"true"`
	// 订单原始订单ID，外部传入
	OriginOrderId *string `json:"origin_order_id,omitempty" xml:"origin_order_id,omitempty" require:"true"`
}

func (s BlockInstruction) String() string {
	return tea.Prettify(s)
}

func (s BlockInstruction) GoString() string {
	return s.String()
}

func (s *BlockInstruction) SetOrderId(v string) *BlockInstruction {
	s.OrderId = &v
	return s
}

func (s *BlockInstruction) SetInstructionType(v int64) *BlockInstruction {
	s.InstructionType = &v
	return s
}

func (s *BlockInstruction) SetBuyerAccountId(v string) *BlockInstruction {
	s.BuyerAccountId = &v
	return s
}

func (s *BlockInstruction) SetSellerAccountId(v string) *BlockInstruction {
	s.SellerAccountId = &v
	return s
}

func (s *BlockInstruction) SetPlatformId(v string) *BlockInstruction {
	s.PlatformId = &v
	return s
}

func (s *BlockInstruction) SetGoodsId(v string) *BlockInstruction {
	s.GoodsId = &v
	return s
}

func (s *BlockInstruction) SetDisplayName(v string) *BlockInstruction {
	s.DisplayName = &v
	return s
}

func (s *BlockInstruction) SetSellerPrice(v string) *BlockInstruction {
	s.SellerPrice = &v
	return s
}

func (s *BlockInstruction) SetDisplayPrice(v string) *BlockInstruction {
	s.DisplayPrice = &v
	return s
}

func (s *BlockInstruction) SetMemo(v string) *BlockInstruction {
	s.Memo = &v
	return s
}

func (s *BlockInstruction) SetRemark(v string) *BlockInstruction {
	s.Remark = &v
	return s
}

func (s *BlockInstruction) SetStatus(v int64) *BlockInstruction {
	s.Status = &v
	return s
}

func (s *BlockInstruction) SetRefundStatus(v int64) *BlockInstruction {
	s.RefundStatus = &v
	return s
}

func (s *BlockInstruction) SetCreateTimestamp(v int64) *BlockInstruction {
	s.CreateTimestamp = &v
	return s
}

func (s *BlockInstruction) SetPayTimestamp(v int64) *BlockInstruction {
	s.PayTimestamp = &v
	return s
}

func (s *BlockInstruction) SetExtraData(v []*MetaDataDO) *BlockInstruction {
	s.ExtraData = v
	return s
}

func (s *BlockInstruction) SetTokenInstructions(v []*TokenInstructionDO) *BlockInstruction {
	s.TokenInstructions = v
	return s
}

func (s *BlockInstruction) SetRelatedOrderId(v string) *BlockInstruction {
	s.RelatedOrderId = &v
	return s
}

func (s *BlockInstruction) SetCommissionToken(v string) *BlockInstruction {
	s.CommissionToken = &v
	return s
}

func (s *BlockInstruction) SetSellerReceiveToken(v string) *BlockInstruction {
	s.SellerReceiveToken = &v
	return s
}

func (s *BlockInstruction) SetPayCommissionType(v int64) *BlockInstruction {
	s.PayCommissionType = &v
	return s
}

func (s *BlockInstruction) SetBuyerPhone(v string) *BlockInstruction {
	s.BuyerPhone = &v
	return s
}

func (s *BlockInstruction) SetBuyerName(v string) *BlockInstruction {
	s.BuyerName = &v
	return s
}

func (s *BlockInstruction) SetBuyerIdNumber(v string) *BlockInstruction {
	s.BuyerIdNumber = &v
	return s
}

func (s *BlockInstruction) SetBuyerIdType(v string) *BlockInstruction {
	s.BuyerIdType = &v
	return s
}

func (s *BlockInstruction) SetBuyeIp(v string) *BlockInstruction {
	s.BuyeIp = &v
	return s
}

func (s *BlockInstruction) SetOriginCreateTime(v int64) *BlockInstruction {
	s.OriginCreateTime = &v
	return s
}

func (s *BlockInstruction) SetOriginOrderId(v string) *BlockInstruction {
	s.OriginOrderId = &v
	return s
}

// 图片OSS URL，包含四个不同大小的图片
type MultiURL struct {
	// 上传的图片正常大小
	Normal *string `json:"normal,omitempty" xml:"normal,omitempty" require:"true"`
	// style200
	Style200 *string `json:"style_200,omitempty" xml:"style_200,omitempty" require:"true"`
	// style150
	Style150 *string `json:"style_150,omitempty" xml:"style_150,omitempty" require:"true"`
	// style70
	Style70 *string `json:"style_70,omitempty" xml:"style_70,omitempty" require:"true"`
}

func (s MultiURL) String() string {
	return tea.Prettify(s)
}

func (s MultiURL) GoString() string {
	return s.String()
}

func (s *MultiURL) SetNormal(v string) *MultiURL {
	s.Normal = &v
	return s
}

func (s *MultiURL) SetStyle200(v string) *MultiURL {
	s.Style200 = &v
	return s
}

func (s *MultiURL) SetStyle150(v string) *MultiURL {
	s.Style150 = &v
	return s
}

func (s *MultiURL) SetStyle70(v string) *MultiURL {
	s.Style70 = &v
	return s
}

// IP商家的店铺宝贝详细数据
type IPShopItemInfo struct {
	// 商品数字id
	NumId *int64 `json:"num_id,omitempty" xml:"num_id,omitempty" require:"true"`
	// 商品标题,不能超过60字节
	Title *string `json:"title,omitempty" xml:"title,omitempty" require:"true"`
	// 卖家昵称
	Nick *string `json:"nick,omitempty" xml:"nick,omitempty" require:"true"`
	// 价格
	Price *string `json:"price,omitempty" xml:"price,omitempty" require:"true"`
	// 商品类型(fixed:一口价;auction:拍卖)注：取消团购
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 商品属性 格式：pid:vid;pid:vid
	Props *string `json:"props,omitempty" xml:"props,omitempty"`
	// 用户自行输入的子属性名和属性值，结构:"父属性值;一级子属性名;一级子属性值;二级子属性名;自定义输入值,....",如：“耐克;耐克系列;科比系列;科比系列;2K5”，input_str需要与input_pids一一对应，注：通常一个类目下用户可输入的关键属性不超过1个。所有属性别名加起来不能超过 3999字节。
	InputStr *string `json:"input_str,omitempty" xml:"input_str,omitempty"`
	// 商品描述, 字数要大于5个字节，小于25000个字节
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
}

func (s IPShopItemInfo) String() string {
	return tea.Prettify(s)
}

func (s IPShopItemInfo) GoString() string {
	return s.String()
}

func (s *IPShopItemInfo) SetNumId(v int64) *IPShopItemInfo {
	s.NumId = &v
	return s
}

func (s *IPShopItemInfo) SetTitle(v string) *IPShopItemInfo {
	s.Title = &v
	return s
}

func (s *IPShopItemInfo) SetNick(v string) *IPShopItemInfo {
	s.Nick = &v
	return s
}

func (s *IPShopItemInfo) SetPrice(v string) *IPShopItemInfo {
	s.Price = &v
	return s
}

func (s *IPShopItemInfo) SetType(v string) *IPShopItemInfo {
	s.Type = &v
	return s
}

func (s *IPShopItemInfo) SetProps(v string) *IPShopItemInfo {
	s.Props = &v
	return s
}

func (s *IPShopItemInfo) SetInputStr(v string) *IPShopItemInfo {
	s.InputStr = &v
	return s
}

func (s *IPShopItemInfo) SetDesc(v string) *IPShopItemInfo {
	s.Desc = &v
	return s
}

// 联系人信息
type SimpleContactInfo struct {
	// 联系人名称
	ContactName *string `json:"contact_name,omitempty" xml:"contact_name,omitempty" require:"true"`
	// 联系电话
	ContactPhone *string `json:"contact_phone,omitempty" xml:"contact_phone,omitempty" require:"true"`
}

func (s SimpleContactInfo) String() string {
	return tea.Prettify(s)
}

func (s SimpleContactInfo) GoString() string {
	return s.String()
}

func (s *SimpleContactInfo) SetContactName(v string) *SimpleContactInfo {
	s.ContactName = &v
	return s
}

func (s *SimpleContactInfo) SetContactPhone(v string) *SimpleContactInfo {
	s.ContactPhone = &v
	return s
}

// 卡密信息
type Card struct {
	// 计算理论上应该变为的状态
	CalStatus *int64 `json:"cal_status,omitempty" xml:"cal_status,omitempty" require:"true"`
	// 卡密ID
	CardId *string `json:"card_id,omitempty" xml:"card_id,omitempty" require:"true"`
	// 充值时间
	ChargeTime *int64 `json:"charge_time,omitempty" xml:"charge_time,omitempty" require:"true"`
	// 数量
	CountOfMinUnit *int64 `json:"count_of_min_unit,omitempty" xml:"count_of_min_unit,omitempty" require:"true"`
	// 卡密创建时间
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true"`
	// 创建卡密时的交易hash
	CreateTxHash *string `json:"create_tx_hash,omitempty" xml:"create_tx_hash,omitempty" require:"true"`
	// 脱敏手机信息
	DesensitizedUid *string `json:"desensitized_uid,omitempty" xml:"desensitized_uid,omitempty" require:"true"`
	// 附加信息
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty" require:"true"`
	// 最小单位数量
	MinUnit *int64 `json:"min_unit,omitempty" xml:"min_unit,omitempty" require:"true"`
	// 公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 公钥信息
	UidPublicKey *string `json:"uid_public_key,omitempty" xml:"uid_public_key,omitempty" require:"true"`
	// 卡密在该时间后有效
	ValidAfter *int64 `json:"valid_after,omitempty" xml:"valid_after,omitempty" require:"true"`
	// 卡密在该时间前有效
	ValidBefore *int64 `json:"valid_before,omitempty" xml:"valid_before,omitempty" require:"true"`
	// 有效天数
	ValidDays *int64 `json:"valid_days,omitempty" xml:"valid_days,omitempty" require:"true"`
	// 价值
	Value *int64 `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// 卡密版本
	Version *int64 `json:"version,omitempty" xml:"version,omitempty" require:"true"`
}

func (s Card) String() string {
	return tea.Prettify(s)
}

func (s Card) GoString() string {
	return s.String()
}

func (s *Card) SetCalStatus(v int64) *Card {
	s.CalStatus = &v
	return s
}

func (s *Card) SetCardId(v string) *Card {
	s.CardId = &v
	return s
}

func (s *Card) SetChargeTime(v int64) *Card {
	s.ChargeTime = &v
	return s
}

func (s *Card) SetCountOfMinUnit(v int64) *Card {
	s.CountOfMinUnit = &v
	return s
}

func (s *Card) SetCreateTime(v int64) *Card {
	s.CreateTime = &v
	return s
}

func (s *Card) SetCreateTxHash(v string) *Card {
	s.CreateTxHash = &v
	return s
}

func (s *Card) SetDesensitizedUid(v string) *Card {
	s.DesensitizedUid = &v
	return s
}

func (s *Card) SetExtInfo(v string) *Card {
	s.ExtInfo = &v
	return s
}

func (s *Card) SetMinUnit(v int64) *Card {
	s.MinUnit = &v
	return s
}

func (s *Card) SetPublicKey(v string) *Card {
	s.PublicKey = &v
	return s
}

func (s *Card) SetStatus(v int64) *Card {
	s.Status = &v
	return s
}

func (s *Card) SetUidPublicKey(v string) *Card {
	s.UidPublicKey = &v
	return s
}

func (s *Card) SetValidAfter(v int64) *Card {
	s.ValidAfter = &v
	return s
}

func (s *Card) SetValidBefore(v int64) *Card {
	s.ValidBefore = &v
	return s
}

func (s *Card) SetValidDays(v int64) *Card {
	s.ValidDays = &v
	return s
}

func (s *Card) SetValue(v int64) *Card {
	s.Value = &v
	return s
}

func (s *Card) SetVersion(v int64) *Card {
	s.Version = &v
	return s
}

// 渠道统计结果
type ChannelCounter struct {
	// 渠道名字
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 统计值
	Counter *int64 `json:"counter,omitempty" xml:"counter,omitempty" require:"true"`
	// 月份。如果月份有具体值则数据为该月份数据，月份为空则为全部统计数据。
	Month *string `json:"month,omitempty" xml:"month,omitempty"`
	// 渠道交易金额
	TotalPrice *string `json:"total_price,omitempty" xml:"total_price,omitempty"`
}

func (s ChannelCounter) String() string {
	return tea.Prettify(s)
}

func (s ChannelCounter) GoString() string {
	return s.String()
}

func (s *ChannelCounter) SetChannelName(v string) *ChannelCounter {
	s.ChannelName = &v
	return s
}

func (s *ChannelCounter) SetCounter(v int64) *ChannelCounter {
	s.Counter = &v
	return s
}

func (s *ChannelCounter) SetMonth(v string) *ChannelCounter {
	s.Month = &v
	return s
}

func (s *ChannelCounter) SetTotalPrice(v string) *ChannelCounter {
	s.TotalPrice = &v
	return s
}

// 设置过自定义价格的权益信息
type UserPriceEquity struct {
	// 权益提供商商户ID
	AdminId *string `json:"admin_id,omitempty" xml:"admin_id,omitempty" require:"true"`
	// 授权类型
	AuthType *int64 `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	// 币种
	Currency *string `json:"currency,omitempty" xml:"currency,omitempty" require:"true"`
	// 默认价格
	DefaultPrice *string `json:"default_price,omitempty" xml:"default_price,omitempty" require:"true"`
	// 权益描述
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 权益描述图片
	DescImages *string `json:"desc_images,omitempty" xml:"desc_images,omitempty" require:"true"`
	// 权益ID
	EquityD *string `json:"equity_d,omitempty" xml:"equity_d,omitempty" require:"true"`
	// 权益名称
	EquityName *string `json:"equity_name,omitempty" xml:"equity_name,omitempty" require:"true"`
	// 权益类型
	EquityType *int64 `json:"equity_type,omitempty" xml:"equity_type,omitempty" require:"true"`
	// 权益主图片
	Images *string `json:"images,omitempty" xml:"images,omitempty" require:"true"`
	// 是否公开权益
	IsPublic *bool `json:"is_public,omitempty" xml:"is_public,omitempty" require:"true"`
	// 商户每日兑换上线
	LimitPerMerchantAndDay *int64 `json:"limit_per_merchant_and_day,omitempty" xml:"limit_per_merchant_and_day,omitempty" require:"true"`
	// 商户每月兑换上线
	LimitPerMerchantAndMonth *int64 `json:"limit_per_merchant_and_month,omitempty" xml:"limit_per_merchant_and_month,omitempty" require:"true"`
	// 用户每日兑换上线
	LimitPerUserAndDay *int64 `json:"limit_per_user_and_day,omitempty" xml:"limit_per_user_and_day,omitempty" require:"true"`
	// 用户每月兑换上限
	LimitPerUserAndMonth *int64 `json:"limit_per_user_and_month,omitempty" xml:"limit_per_user_and_month,omitempty" require:"true"`
	// 权益附言信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 授权的租户ID
	OpenToTenantId *string `json:"open_to_tenant_id,omitempty" xml:"open_to_tenant_id,omitempty" require:"true"`
	// 用户价格
	Price *string `json:"price,omitempty" xml:"price,omitempty" require:"true"`
	// 用户价格比例
	Ratio *string `json:"ratio,omitempty" xml:"ratio,omitempty" require:"true"`
	// 快照租户价格
	SnapshotTenantPrice *string `json:"snapshot_tenant_price,omitempty" xml:"snapshot_tenant_price,omitempty" require:"true"`
	// 权益状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 权益提供商租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 权益库存
	TotalCount *string `json:"total_count,omitempty" xml:"total_count,omitempty" require:"true"`
	// 用户价格类型
	UserPriceType *int64 `json:"user_price_type,omitempty" xml:"user_price_type,omitempty" require:"true"`
	// 可用右区间
	UseValidNotAfter *int64 `json:"use_valid_not_after,omitempty" xml:"use_valid_not_after,omitempty" require:"true"`
	// 可用左区间
	UseValidNotBefore *int64 `json:"use_valid_not_before,omitempty" xml:"use_valid_not_before,omitempty" require:"true"`
	// 有效右区间
	ValidNotAfter *int64 `json:"valid_not_after,omitempty" xml:"valid_not_after,omitempty" require:"true"`
	// 有效左区间
	ValidNotBefore *int64 `json:"valid_not_before,omitempty" xml:"valid_not_before,omitempty" require:"true"`
	// 价值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s UserPriceEquity) String() string {
	return tea.Prettify(s)
}

func (s UserPriceEquity) GoString() string {
	return s.String()
}

func (s *UserPriceEquity) SetAdminId(v string) *UserPriceEquity {
	s.AdminId = &v
	return s
}

func (s *UserPriceEquity) SetAuthType(v int64) *UserPriceEquity {
	s.AuthType = &v
	return s
}

func (s *UserPriceEquity) SetCurrency(v string) *UserPriceEquity {
	s.Currency = &v
	return s
}

func (s *UserPriceEquity) SetDefaultPrice(v string) *UserPriceEquity {
	s.DefaultPrice = &v
	return s
}

func (s *UserPriceEquity) SetDescription(v string) *UserPriceEquity {
	s.Description = &v
	return s
}

func (s *UserPriceEquity) SetDescImages(v string) *UserPriceEquity {
	s.DescImages = &v
	return s
}

func (s *UserPriceEquity) SetEquityD(v string) *UserPriceEquity {
	s.EquityD = &v
	return s
}

func (s *UserPriceEquity) SetEquityName(v string) *UserPriceEquity {
	s.EquityName = &v
	return s
}

func (s *UserPriceEquity) SetEquityType(v int64) *UserPriceEquity {
	s.EquityType = &v
	return s
}

func (s *UserPriceEquity) SetImages(v string) *UserPriceEquity {
	s.Images = &v
	return s
}

func (s *UserPriceEquity) SetIsPublic(v bool) *UserPriceEquity {
	s.IsPublic = &v
	return s
}

func (s *UserPriceEquity) SetLimitPerMerchantAndDay(v int64) *UserPriceEquity {
	s.LimitPerMerchantAndDay = &v
	return s
}

func (s *UserPriceEquity) SetLimitPerMerchantAndMonth(v int64) *UserPriceEquity {
	s.LimitPerMerchantAndMonth = &v
	return s
}

func (s *UserPriceEquity) SetLimitPerUserAndDay(v int64) *UserPriceEquity {
	s.LimitPerUserAndDay = &v
	return s
}

func (s *UserPriceEquity) SetLimitPerUserAndMonth(v int64) *UserPriceEquity {
	s.LimitPerUserAndMonth = &v
	return s
}

func (s *UserPriceEquity) SetMemo(v string) *UserPriceEquity {
	s.Memo = &v
	return s
}

func (s *UserPriceEquity) SetOpenToTenantId(v string) *UserPriceEquity {
	s.OpenToTenantId = &v
	return s
}

func (s *UserPriceEquity) SetPrice(v string) *UserPriceEquity {
	s.Price = &v
	return s
}

func (s *UserPriceEquity) SetRatio(v string) *UserPriceEquity {
	s.Ratio = &v
	return s
}

func (s *UserPriceEquity) SetSnapshotTenantPrice(v string) *UserPriceEquity {
	s.SnapshotTenantPrice = &v
	return s
}

func (s *UserPriceEquity) SetStatus(v int64) *UserPriceEquity {
	s.Status = &v
	return s
}

func (s *UserPriceEquity) SetTenantId(v string) *UserPriceEquity {
	s.TenantId = &v
	return s
}

func (s *UserPriceEquity) SetTotalCount(v string) *UserPriceEquity {
	s.TotalCount = &v
	return s
}

func (s *UserPriceEquity) SetUserPriceType(v int64) *UserPriceEquity {
	s.UserPriceType = &v
	return s
}

func (s *UserPriceEquity) SetUseValidNotAfter(v int64) *UserPriceEquity {
	s.UseValidNotAfter = &v
	return s
}

func (s *UserPriceEquity) SetUseValidNotBefore(v int64) *UserPriceEquity {
	s.UseValidNotBefore = &v
	return s
}

func (s *UserPriceEquity) SetValidNotAfter(v int64) *UserPriceEquity {
	s.ValidNotAfter = &v
	return s
}

func (s *UserPriceEquity) SetValidNotBefore(v int64) *UserPriceEquity {
	s.ValidNotBefore = &v
	return s
}

func (s *UserPriceEquity) SetValue(v string) *UserPriceEquity {
	s.Value = &v
	return s
}

// 资产
type Asset struct {
	// 资产管理员ID
	AdminId *string `json:"admin_id,omitempty" xml:"admin_id,omitempty" require:"true"`
	// 资产附属信息
	AssetExtInfo *AssetExtInfo `json:"asset_ext_info,omitempty" xml:"asset_ext_info,omitempty" require:"true"`
	// 资产ID
	AssetId *string `json:"asset_id,omitempty" xml:"asset_id,omitempty" require:"true"`
	// 资产名称
	AssetName *string `json:"asset_name,omitempty" xml:"asset_name,omitempty" require:"true"`
	// 资产汇率
	AssetRate *string `json:"asset_rate,omitempty" xml:"asset_rate,omitempty" require:"true"`
	// 币种
	Currency *string `json:"currency,omitempty" xml:"currency,omitempty" require:"true"`
	// 发行账户余额
	IssueAccountBalance *string `json:"issue_account_balance,omitempty" xml:"issue_account_balance,omitempty" require:"true"`
	// 过期回收账户余额
	OverdueRecoveryAccountBalance *string `json:"overdue_recovery_account_balance,omitempty" xml:"overdue_recovery_account_balance,omitempty" require:"true"`
	// 支付收款账户余额
	ReceivePaymentAccountBalance *string `json:"receive_payment_account_balance,omitempty" xml:"receive_payment_account_balance,omitempty" require:"true"`
	// 中继账户余额
	RelayAccountBalance *string `json:"relay_account_balance,omitempty" xml:"relay_account_balance,omitempty" require:"true"`
	// 资产状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 资产总发行量
	TotalIssueBalance *string `json:"total_issue_balance,omitempty" xml:"total_issue_balance,omitempty" require:"true"`
}

func (s Asset) String() string {
	return tea.Prettify(s)
}

func (s Asset) GoString() string {
	return s.String()
}

func (s *Asset) SetAdminId(v string) *Asset {
	s.AdminId = &v
	return s
}

func (s *Asset) SetAssetExtInfo(v *AssetExtInfo) *Asset {
	s.AssetExtInfo = v
	return s
}

func (s *Asset) SetAssetId(v string) *Asset {
	s.AssetId = &v
	return s
}

func (s *Asset) SetAssetName(v string) *Asset {
	s.AssetName = &v
	return s
}

func (s *Asset) SetAssetRate(v string) *Asset {
	s.AssetRate = &v
	return s
}

func (s *Asset) SetCurrency(v string) *Asset {
	s.Currency = &v
	return s
}

func (s *Asset) SetIssueAccountBalance(v string) *Asset {
	s.IssueAccountBalance = &v
	return s
}

func (s *Asset) SetOverdueRecoveryAccountBalance(v string) *Asset {
	s.OverdueRecoveryAccountBalance = &v
	return s
}

func (s *Asset) SetReceivePaymentAccountBalance(v string) *Asset {
	s.ReceivePaymentAccountBalance = &v
	return s
}

func (s *Asset) SetRelayAccountBalance(v string) *Asset {
	s.RelayAccountBalance = &v
	return s
}

func (s *Asset) SetStatus(v int64) *Asset {
	s.Status = &v
	return s
}

func (s *Asset) SetTenantId(v string) *Asset {
	s.TenantId = &v
	return s
}

func (s *Asset) SetTotalIssueBalance(v string) *Asset {
	s.TotalIssueBalance = &v
	return s
}

// 渠道对应的账户信息
type AccountSettlementInfo struct {
	// 账户id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 版权方名字
	AccountName *string `json:"account_name,omitempty" xml:"account_name,omitempty" require:"true"`
	// WAIT_CHECK:渠道已申请开通但未审核，SUCCESS，审核成功
	SettledStatus *string `json:"settled_status,omitempty" xml:"settled_status,omitempty" require:"true"`
	// 版权方联系人名字
	ContactName *string `json:"contact_name,omitempty" xml:"contact_name,omitempty"`
	// 版权方联系人手机
	ContactMobile *string `json:"contact_mobile,omitempty" xml:"contact_mobile,omitempty"`
	// 版权方联系人手机号
	ContactPhone *string `json:"contact_phone,omitempty" xml:"contact_phone,omitempty" require:"true"`
	// 申请入驻时间
	ApplyTime *int64 `json:"apply_time,omitempty" xml:"apply_time,omitempty" require:"true"`
}

func (s AccountSettlementInfo) String() string {
	return tea.Prettify(s)
}

func (s AccountSettlementInfo) GoString() string {
	return s.String()
}

func (s *AccountSettlementInfo) SetAccountId(v string) *AccountSettlementInfo {
	s.AccountId = &v
	return s
}

func (s *AccountSettlementInfo) SetAccountName(v string) *AccountSettlementInfo {
	s.AccountName = &v
	return s
}

func (s *AccountSettlementInfo) SetSettledStatus(v string) *AccountSettlementInfo {
	s.SettledStatus = &v
	return s
}

func (s *AccountSettlementInfo) SetContactName(v string) *AccountSettlementInfo {
	s.ContactName = &v
	return s
}

func (s *AccountSettlementInfo) SetContactMobile(v string) *AccountSettlementInfo {
	s.ContactMobile = &v
	return s
}

func (s *AccountSettlementInfo) SetContactPhone(v string) *AccountSettlementInfo {
	s.ContactPhone = &v
	return s
}

func (s *AccountSettlementInfo) SetApplyTime(v int64) *AccountSettlementInfo {
	s.ApplyTime = &v
	return s
}

// ip的重点信息
type IpEmphasisInfo struct {
	// ip的链上id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// ip的描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// ip类型
	IpType *string `json:"ip_type,omitempty" xml:"ip_type,omitempty" require:"true"`
	// 受众群体（6位数字） 对应c
	AudienceGroup *string `json:"audience_group,omitempty" xml:"audience_group,omitempty" require:"true"`
	// 主图
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// 上架状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 归属的账户id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 创建日期
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// ip名字
	IpName *string `json:"ip_name,omitempty" xml:"ip_name,omitempty" require:"true"`
	// 商户名称
	AccountName *string `json:"account_name,omitempty" xml:"account_name,omitempty"`
	// 浏览量
	Pv *int64 `json:"pv,omitempty" xml:"pv,omitempty"`
	// 最近一次上下架时间
	LastStateChangeTime *int64 `json:"last_state_change_time,omitempty" xml:"last_state_change_time,omitempty"`
	// ip的创建渠道，按照查询参数返回
	CreaterChannel *string `json:"creater_channel,omitempty" xml:"creater_channel,omitempty"`
}

func (s IpEmphasisInfo) String() string {
	return tea.Prettify(s)
}

func (s IpEmphasisInfo) GoString() string {
	return s.String()
}

func (s *IpEmphasisInfo) SetIpId(v string) *IpEmphasisInfo {
	s.IpId = &v
	return s
}

func (s *IpEmphasisInfo) SetDescription(v string) *IpEmphasisInfo {
	s.Description = &v
	return s
}

func (s *IpEmphasisInfo) SetIpType(v string) *IpEmphasisInfo {
	s.IpType = &v
	return s
}

func (s *IpEmphasisInfo) SetAudienceGroup(v string) *IpEmphasisInfo {
	s.AudienceGroup = &v
	return s
}

func (s *IpEmphasisInfo) SetImage(v string) *IpEmphasisInfo {
	s.Image = &v
	return s
}

func (s *IpEmphasisInfo) SetStatus(v int64) *IpEmphasisInfo {
	s.Status = &v
	return s
}

func (s *IpEmphasisInfo) SetAccountId(v string) *IpEmphasisInfo {
	s.AccountId = &v
	return s
}

func (s *IpEmphasisInfo) SetCreateTime(v string) *IpEmphasisInfo {
	s.CreateTime = &v
	return s
}

func (s *IpEmphasisInfo) SetIpName(v string) *IpEmphasisInfo {
	s.IpName = &v
	return s
}

func (s *IpEmphasisInfo) SetAccountName(v string) *IpEmphasisInfo {
	s.AccountName = &v
	return s
}

func (s *IpEmphasisInfo) SetPv(v int64) *IpEmphasisInfo {
	s.Pv = &v
	return s
}

func (s *IpEmphasisInfo) SetLastStateChangeTime(v int64) *IpEmphasisInfo {
	s.LastStateChangeTime = &v
	return s
}

func (s *IpEmphasisInfo) SetCreaterChannel(v string) *IpEmphasisInfo {
	s.CreaterChannel = &v
	return s
}

// 商品授权信息（一客一价信息）
type EquityAuthInfo struct {
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 授权租户
	OpenToTenantId *string `json:"open_to_tenant_id,omitempty" xml:"open_to_tenant_id,omitempty" require:"true"`
	// 租户价格（自定义价格）
	TenantPrice *string `json:"tenant_price,omitempty" xml:"tenant_price,omitempty" require:"true"`
	// 区块高度
	BlockNumber *string `json:"block_number,omitempty" xml:"block_number,omitempty" require:"true"`
	// 交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 区块时间戳
	BlockTime *int64 `json:"block_time,omitempty" xml:"block_time,omitempty" require:"true"`
}

func (s EquityAuthInfo) String() string {
	return tea.Prettify(s)
}

func (s EquityAuthInfo) GoString() string {
	return s.String()
}

func (s *EquityAuthInfo) SetChainId(v string) *EquityAuthInfo {
	s.ChainId = &v
	return s
}

func (s *EquityAuthInfo) SetEquityId(v string) *EquityAuthInfo {
	s.EquityId = &v
	return s
}

func (s *EquityAuthInfo) SetOpenToTenantId(v string) *EquityAuthInfo {
	s.OpenToTenantId = &v
	return s
}

func (s *EquityAuthInfo) SetTenantPrice(v string) *EquityAuthInfo {
	s.TenantPrice = &v
	return s
}

func (s *EquityAuthInfo) SetBlockNumber(v string) *EquityAuthInfo {
	s.BlockNumber = &v
	return s
}

func (s *EquityAuthInfo) SetTxHash(v string) *EquityAuthInfo {
	s.TxHash = &v
	return s
}

func (s *EquityAuthInfo) SetBlockTime(v int64) *EquityAuthInfo {
	s.BlockTime = &v
	return s
}

// 消费卡商品信息
type GoodsResponse struct {
	// 商品归属的账户ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 商品名称
	GoodsName *string `json:"goods_name,omitempty" xml:"goods_name,omitempty" require:"true"`
	// 商品类型
	GoodsType *string `json:"goods_type,omitempty" xml:"goods_type,omitempty" require:"true"`
	// 商品描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 商品库存
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty" require:"true"`
	// 显示价格
	DisplayPrice *string `json:"display_price,omitempty" xml:"display_price,omitempty" require:"true"`
	// 默认价格
	DefaultPrice *string `json:"default_price,omitempty" xml:"default_price,omitempty" require:"true"`
	// 是否公开商品
	IfPublic *bool `json:"if_public,omitempty" xml:"if_public,omitempty" require:"true"`
	// 商品主图片URL
	Images *string `json:"images,omitempty" xml:"images,omitempty" require:"true"`
	// 商品描述图片，每个图片URL用:隔开
	DescImages *string `json:"desc_images,omitempty" xml:"desc_images,omitempty" require:"true"`
	// 商品状态 0可用，1下线
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 商品开始时间
	ValidNotBefore *int64 `json:"valid_not_before,omitempty" xml:"valid_not_before,omitempty" require:"true"`
	// 商品结束时间
	ValidNotAfter *int64 `json:"valid_not_after,omitempty" xml:"valid_not_after,omitempty" require:"true"`
	// 商品每日上限
	LimitPerUserAndDay *int64 `json:"limit_per_user_and_day,omitempty" xml:"limit_per_user_and_day,omitempty" require:"true"`
	// 商品每月上限
	LimitPerUserAndMonth *int64 `json:"limit_per_user_and_month,omitempty" xml:"limit_per_user_and_month,omitempty" require:"true"`
	// 商品备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 授权类型
	AuthType *int64 `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	// 商品类型
	CategoryId *string `json:"category_id,omitempty" xml:"category_id,omitempty" require:"true"`
	// 商品ID
	GoodsId *string `json:"goods_id,omitempty" xml:"goods_id,omitempty" require:"true"`
}

func (s GoodsResponse) String() string {
	return tea.Prettify(s)
}

func (s GoodsResponse) GoString() string {
	return s.String()
}

func (s *GoodsResponse) SetAccountId(v string) *GoodsResponse {
	s.AccountId = &v
	return s
}

func (s *GoodsResponse) SetGoodsName(v string) *GoodsResponse {
	s.GoodsName = &v
	return s
}

func (s *GoodsResponse) SetGoodsType(v string) *GoodsResponse {
	s.GoodsType = &v
	return s
}

func (s *GoodsResponse) SetDescription(v string) *GoodsResponse {
	s.Description = &v
	return s
}

func (s *GoodsResponse) SetTotalCount(v int64) *GoodsResponse {
	s.TotalCount = &v
	return s
}

func (s *GoodsResponse) SetDisplayPrice(v string) *GoodsResponse {
	s.DisplayPrice = &v
	return s
}

func (s *GoodsResponse) SetDefaultPrice(v string) *GoodsResponse {
	s.DefaultPrice = &v
	return s
}

func (s *GoodsResponse) SetIfPublic(v bool) *GoodsResponse {
	s.IfPublic = &v
	return s
}

func (s *GoodsResponse) SetImages(v string) *GoodsResponse {
	s.Images = &v
	return s
}

func (s *GoodsResponse) SetDescImages(v string) *GoodsResponse {
	s.DescImages = &v
	return s
}

func (s *GoodsResponse) SetStatus(v int64) *GoodsResponse {
	s.Status = &v
	return s
}

func (s *GoodsResponse) SetValidNotBefore(v int64) *GoodsResponse {
	s.ValidNotBefore = &v
	return s
}

func (s *GoodsResponse) SetValidNotAfter(v int64) *GoodsResponse {
	s.ValidNotAfter = &v
	return s
}

func (s *GoodsResponse) SetLimitPerUserAndDay(v int64) *GoodsResponse {
	s.LimitPerUserAndDay = &v
	return s
}

func (s *GoodsResponse) SetLimitPerUserAndMonth(v int64) *GoodsResponse {
	s.LimitPerUserAndMonth = &v
	return s
}

func (s *GoodsResponse) SetMemo(v string) *GoodsResponse {
	s.Memo = &v
	return s
}

func (s *GoodsResponse) SetAuthType(v int64) *GoodsResponse {
	s.AuthType = &v
	return s
}

func (s *GoodsResponse) SetCategoryId(v string) *GoodsResponse {
	s.CategoryId = &v
	return s
}

func (s *GoodsResponse) SetGoodsId(v string) *GoodsResponse {
	s.GoodsId = &v
	return s
}

// 正版码流转信息
type CodeCirculation struct {
	// 正版码的编码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 流转信息标题
	Title *string `json:"title,omitempty" xml:"title,omitempty" require:"true"`
	// 流转详细信息
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// 哈希值
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
	// 流转时间
	Time *int64 `json:"time,omitempty" xml:"time,omitempty"`
}

func (s CodeCirculation) String() string {
	return tea.Prettify(s)
}

func (s CodeCirculation) GoString() string {
	return s.String()
}

func (s *CodeCirculation) SetCode(v string) *CodeCirculation {
	s.Code = &v
	return s
}

func (s *CodeCirculation) SetTitle(v string) *CodeCirculation {
	s.Title = &v
	return s
}

func (s *CodeCirculation) SetContent(v string) *CodeCirculation {
	s.Content = &v
	return s
}

func (s *CodeCirculation) SetHash(v string) *CodeCirculation {
	s.Hash = &v
	return s
}

func (s *CodeCirculation) SetTime(v int64) *CodeCirculation {
	s.Time = &v
	return s
}

// 版权方申请
type IPApplyInfo struct {
	// 账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 用户名
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty" require:"true"`
	// 支付宝账户
	AlipayLoginName *string `json:"alipay_login_name,omitempty" xml:"alipay_login_name,omitempty" require:"true"`
	// 联系人
	LegalName *string `json:"legal_name,omitempty" xml:"legal_name,omitempty" require:"true"`
	// 联系方式
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number,omitempty" require:"true"`
	// 角色(1: 版权方 2:商家)
	Role *int64 `json:"role,omitempty" xml:"role,omitempty" require:"true"`
	// 状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 用户的外系统识别Id
	ExternalUserId *string `json:"external_user_id,omitempty" xml:"external_user_id,omitempty" require:"true"`
	// 外部系统用户名
	ExternalUserName *string `json:"external_user_name,omitempty" xml:"external_user_name,omitempty" require:"true"`
	// 申请时间(毫秒时间戳)
	ApplyDate *int64 `json:"apply_date,omitempty" xml:"apply_date,omitempty" require:"true"`
}

func (s IPApplyInfo) String() string {
	return tea.Prettify(s)
}

func (s IPApplyInfo) GoString() string {
	return s.String()
}

func (s *IPApplyInfo) SetAccountId(v string) *IPApplyInfo {
	s.AccountId = &v
	return s
}

func (s *IPApplyInfo) SetLoginName(v string) *IPApplyInfo {
	s.LoginName = &v
	return s
}

func (s *IPApplyInfo) SetAlipayLoginName(v string) *IPApplyInfo {
	s.AlipayLoginName = &v
	return s
}

func (s *IPApplyInfo) SetLegalName(v string) *IPApplyInfo {
	s.LegalName = &v
	return s
}

func (s *IPApplyInfo) SetPhoneNumber(v string) *IPApplyInfo {
	s.PhoneNumber = &v
	return s
}

func (s *IPApplyInfo) SetRole(v int64) *IPApplyInfo {
	s.Role = &v
	return s
}

func (s *IPApplyInfo) SetStatus(v int64) *IPApplyInfo {
	s.Status = &v
	return s
}

func (s *IPApplyInfo) SetExternalUserId(v string) *IPApplyInfo {
	s.ExternalUserId = &v
	return s
}

func (s *IPApplyInfo) SetExternalUserName(v string) *IPApplyInfo {
	s.ExternalUserName = &v
	return s
}

func (s *IPApplyInfo) SetApplyDate(v int64) *IPApplyInfo {
	s.ApplyDate = &v
	return s
}

// 授权订单的逐条销售数据
type IPSalesEvery struct {
	// 电商系统订单编号
	OutOrderId *string `json:"out_order_id,omitempty" xml:"out_order_id,omitempty" require:"true"`
	// 数据渠道类型：0 手动录入，1 淘宝开放平台
	DataType *int64 `json:"data_type,omitempty" xml:"data_type,omitempty" require:"true"`
	// 实际销售渠道
	SalesChannel *string `json:"sales_channel,omitempty" xml:"sales_channel,omitempty"`
	// 订单创建时间
	OrderCreateTime *int64 `json:"order_create_time,omitempty" xml:"order_create_time,omitempty" require:"true"`
	// 订单完成时间
	OrderFinishTime *int64 `json:"order_finish_time,omitempty" xml:"order_finish_time,omitempty" require:"true"`
	// 本订单销售金额，单位元
	Sales *string `json:"sales,omitempty" xml:"sales,omitempty" require:"true"`
	// 本订单退款金额，单位元
	RefundSales *string `json:"refund_sales,omitempty" xml:"refund_sales,omitempty"`
	// 店铺名称
	ShopName *string `json:"shop_name,omitempty" xml:"shop_name,omitempty" require:"true"`
	// 商品ID/SKUID/商品编码
	GoodsId *string `json:"goods_id,omitempty" xml:"goods_id,omitempty" require:"true"`
	// 商品名称
	GoodsName *string `json:"goods_name,omitempty" xml:"goods_name,omitempty" require:"true"`
	// 商品规格
	GoodsSpecification *string `json:"goods_specification,omitempty" xml:"goods_specification,omitempty" require:"true"`
	// 本订单卖出的商品数量
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s IPSalesEvery) String() string {
	return tea.Prettify(s)
}

func (s IPSalesEvery) GoString() string {
	return s.String()
}

func (s *IPSalesEvery) SetOutOrderId(v string) *IPSalesEvery {
	s.OutOrderId = &v
	return s
}

func (s *IPSalesEvery) SetDataType(v int64) *IPSalesEvery {
	s.DataType = &v
	return s
}

func (s *IPSalesEvery) SetSalesChannel(v string) *IPSalesEvery {
	s.SalesChannel = &v
	return s
}

func (s *IPSalesEvery) SetOrderCreateTime(v int64) *IPSalesEvery {
	s.OrderCreateTime = &v
	return s
}

func (s *IPSalesEvery) SetOrderFinishTime(v int64) *IPSalesEvery {
	s.OrderFinishTime = &v
	return s
}

func (s *IPSalesEvery) SetSales(v string) *IPSalesEvery {
	s.Sales = &v
	return s
}

func (s *IPSalesEvery) SetRefundSales(v string) *IPSalesEvery {
	s.RefundSales = &v
	return s
}

func (s *IPSalesEvery) SetShopName(v string) *IPSalesEvery {
	s.ShopName = &v
	return s
}

func (s *IPSalesEvery) SetGoodsId(v string) *IPSalesEvery {
	s.GoodsId = &v
	return s
}

func (s *IPSalesEvery) SetGoodsName(v string) *IPSalesEvery {
	s.GoodsName = &v
	return s
}

func (s *IPSalesEvery) SetGoodsSpecification(v string) *IPSalesEvery {
	s.GoodsSpecification = &v
	return s
}

func (s *IPSalesEvery) SetAmount(v int64) *IPSalesEvery {
	s.Amount = &v
	return s
}

func (s *IPSalesEvery) SetMemo(v string) *IPSalesEvery {
	s.Memo = &v
	return s
}

// 键值对
type XNameValuePair struct {
	// 键名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 键值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s XNameValuePair) String() string {
	return tea.Prettify(s)
}

func (s XNameValuePair) GoString() string {
	return s.String()
}

func (s *XNameValuePair) SetName(v string) *XNameValuePair {
	s.Name = &v
	return s
}

func (s *XNameValuePair) SetValue(v string) *XNameValuePair {
	s.Value = &v
	return s
}

type ExecCardCreateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 交易信息
	Tx *Transaction `json:"tx,omitempty" xml:"tx,omitempty" require:"true"`
}

func (s ExecCardCreateRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCardCreateRequest) GoString() string {
	return s.String()
}

func (s *ExecCardCreateRequest) SetAuthToken(v string) *ExecCardCreateRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCardCreateRequest) SetProductInstanceId(v string) *ExecCardCreateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCardCreateRequest) SetChainId(v string) *ExecCardCreateRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCardCreateRequest) SetTx(v *Transaction) *ExecCardCreateRequest {
	s.Tx = v
	return s
}

type ExecCardCreateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 卡密ID
	CardId *string `json:"card_id,omitempty" xml:"card_id,omitempty"`
	// 创建卡密的交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s ExecCardCreateResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCardCreateResponse) GoString() string {
	return s.String()
}

func (s *ExecCardCreateResponse) SetReqMsgId(v string) *ExecCardCreateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCardCreateResponse) SetResultCode(v string) *ExecCardCreateResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCardCreateResponse) SetResultMsg(v string) *ExecCardCreateResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecCardCreateResponse) SetCardId(v string) *ExecCardCreateResponse {
	s.CardId = &v
	return s
}

func (s *ExecCardCreateResponse) SetTxHash(v string) *ExecCardCreateResponse {
	s.TxHash = &v
	return s
}

type ExecCardQueryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 交易信息
	Tx *Transaction `json:"tx,omitempty" xml:"tx,omitempty" require:"true"`
}

func (s ExecCardQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCardQueryRequest) GoString() string {
	return s.String()
}

func (s *ExecCardQueryRequest) SetAuthToken(v string) *ExecCardQueryRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCardQueryRequest) SetProductInstanceId(v string) *ExecCardQueryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCardQueryRequest) SetChainId(v string) *ExecCardQueryRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCardQueryRequest) SetTx(v *Transaction) *ExecCardQueryRequest {
	s.Tx = v
	return s
}

type ExecCardQueryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 卡密信息对象
	Card *Card `json:"card,omitempty" xml:"card,omitempty"`
}

func (s ExecCardQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCardQueryResponse) GoString() string {
	return s.String()
}

func (s *ExecCardQueryResponse) SetReqMsgId(v string) *ExecCardQueryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCardQueryResponse) SetResultCode(v string) *ExecCardQueryResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCardQueryResponse) SetResultMsg(v string) *ExecCardQueryResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecCardQueryResponse) SetCard(v *Card) *ExecCardQueryResponse {
	s.Card = v
	return s
}

type ExecCardBindnameRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 交易内容
	Tx *Transaction `json:"tx,omitempty" xml:"tx,omitempty" require:"true"`
}

func (s ExecCardBindnameRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCardBindnameRequest) GoString() string {
	return s.String()
}

func (s *ExecCardBindnameRequest) SetAuthToken(v string) *ExecCardBindnameRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCardBindnameRequest) SetProductInstanceId(v string) *ExecCardBindnameRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCardBindnameRequest) SetChainId(v string) *ExecCardBindnameRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCardBindnameRequest) SetTx(v *Transaction) *ExecCardBindnameRequest {
	s.Tx = v
	return s
}

type ExecCardBindnameResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecCardBindnameResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCardBindnameResponse) GoString() string {
	return s.String()
}

func (s *ExecCardBindnameResponse) SetReqMsgId(v string) *ExecCardBindnameResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCardBindnameResponse) SetResultCode(v string) *ExecCardBindnameResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCardBindnameResponse) SetResultMsg(v string) *ExecCardBindnameResponse {
	s.ResultMsg = &v
	return s
}

type ExecCardChargeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 交易信息
	Tx *Transaction `json:"tx,omitempty" xml:"tx,omitempty" require:"true"`
}

func (s ExecCardChargeRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCardChargeRequest) GoString() string {
	return s.String()
}

func (s *ExecCardChargeRequest) SetAuthToken(v string) *ExecCardChargeRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCardChargeRequest) SetProductInstanceId(v string) *ExecCardChargeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCardChargeRequest) SetChainId(v string) *ExecCardChargeRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCardChargeRequest) SetTx(v *Transaction) *ExecCardChargeRequest {
	s.Tx = v
	return s
}

type ExecCardChargeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecCardChargeResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCardChargeResponse) GoString() string {
	return s.String()
}

func (s *ExecCardChargeResponse) SetReqMsgId(v string) *ExecCardChargeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCardChargeResponse) SetResultCode(v string) *ExecCardChargeResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCardChargeResponse) SetResultMsg(v string) *ExecCardChargeResponse {
	s.ResultMsg = &v
	return s
}

type ExecCardWriteoffRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 交易信息
	Tx *Transaction `json:"tx,omitempty" xml:"tx,omitempty" require:"true"`
}

func (s ExecCardWriteoffRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCardWriteoffRequest) GoString() string {
	return s.String()
}

func (s *ExecCardWriteoffRequest) SetAuthToken(v string) *ExecCardWriteoffRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCardWriteoffRequest) SetProductInstanceId(v string) *ExecCardWriteoffRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCardWriteoffRequest) SetChainId(v string) *ExecCardWriteoffRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCardWriteoffRequest) SetTx(v *Transaction) *ExecCardWriteoffRequest {
	s.Tx = v
	return s
}

type ExecCardWriteoffResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecCardWriteoffResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCardWriteoffResponse) GoString() string {
	return s.String()
}

func (s *ExecCardWriteoffResponse) SetReqMsgId(v string) *ExecCardWriteoffResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCardWriteoffResponse) SetResultCode(v string) *ExecCardWriteoffResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCardWriteoffResponse) SetResultMsg(v string) *ExecCardWriteoffResponse {
	s.ResultMsg = &v
	return s
}

type ExecCardExpiredRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 交易信息
	Tx *Transaction `json:"tx,omitempty" xml:"tx,omitempty" require:"true"`
}

func (s ExecCardExpiredRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCardExpiredRequest) GoString() string {
	return s.String()
}

func (s *ExecCardExpiredRequest) SetAuthToken(v string) *ExecCardExpiredRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCardExpiredRequest) SetProductInstanceId(v string) *ExecCardExpiredRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCardExpiredRequest) SetChainId(v string) *ExecCardExpiredRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCardExpiredRequest) SetTx(v *Transaction) *ExecCardExpiredRequest {
	s.Tx = v
	return s
}

type ExecCardExpiredResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecCardExpiredResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCardExpiredResponse) GoString() string {
	return s.String()
}

func (s *ExecCardExpiredResponse) SetReqMsgId(v string) *ExecCardExpiredResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCardExpiredResponse) SetResultCode(v string) *ExecCardExpiredResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCardExpiredResponse) SetResultMsg(v string) *ExecCardExpiredResponse {
	s.ResultMsg = &v
	return s
}

type ExecCardForbiddenRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 交易信息
	Tx *Transaction `json:"tx,omitempty" xml:"tx,omitempty" require:"true"`
}

func (s ExecCardForbiddenRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCardForbiddenRequest) GoString() string {
	return s.String()
}

func (s *ExecCardForbiddenRequest) SetAuthToken(v string) *ExecCardForbiddenRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCardForbiddenRequest) SetProductInstanceId(v string) *ExecCardForbiddenRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCardForbiddenRequest) SetChainId(v string) *ExecCardForbiddenRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCardForbiddenRequest) SetTx(v *Transaction) *ExecCardForbiddenRequest {
	s.Tx = v
	return s
}

type ExecCardForbiddenResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecCardForbiddenResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCardForbiddenResponse) GoString() string {
	return s.String()
}

func (s *ExecCardForbiddenResponse) SetReqMsgId(v string) *ExecCardForbiddenResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCardForbiddenResponse) SetResultCode(v string) *ExecCardForbiddenResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCardForbiddenResponse) SetResultMsg(v string) *ExecCardForbiddenResponse {
	s.ResultMsg = &v
	return s
}

type ExecCardChargeresetRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 交易信息
	Tx *Transaction `json:"tx,omitempty" xml:"tx,omitempty" require:"true"`
}

func (s ExecCardChargeresetRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCardChargeresetRequest) GoString() string {
	return s.String()
}

func (s *ExecCardChargeresetRequest) SetAuthToken(v string) *ExecCardChargeresetRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCardChargeresetRequest) SetProductInstanceId(v string) *ExecCardChargeresetRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCardChargeresetRequest) SetChainId(v string) *ExecCardChargeresetRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCardChargeresetRequest) SetTx(v *Transaction) *ExecCardChargeresetRequest {
	s.Tx = v
	return s
}

type ExecCardChargeresetResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecCardChargeresetResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCardChargeresetResponse) GoString() string {
	return s.String()
}

func (s *ExecCardChargeresetResponse) SetReqMsgId(v string) *ExecCardChargeresetResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCardChargeresetResponse) SetResultCode(v string) *ExecCardChargeresetResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCardChargeresetResponse) SetResultMsg(v string) *ExecCardChargeresetResponse {
	s.ResultMsg = &v
	return s
}

type CreateConsumecardAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 授权函地址
	AuthorizationAddress *string `json:"authorization_address,omitempty" xml:"authorization_address,omitempty"`
	// 是否有采购/消费权限
	AuthConsumer *bool `json:"auth_consumer,omitempty" xml:"auth_consumer,omitempty" require:"true"`
	// 是否有供应权限
	AuthProvider *bool `json:"auth_provider,omitempty" xml:"auth_provider,omitempty" require:"true"`
	// 业务系统幂等Id,防止同一笔交易重复发送(接入方传入)
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 认证方id(如: 支付宝的用户Id)
	CertificationId *string `json:"certification_id,omitempty" xml:"certification_id,omitempty" require:"true"`
	// 支持多链多合约,该参数为指明需要操作哪个智能合约环境
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 手机号国家编码
	CountryCode *string `json:"country_code,omitempty" xml:"country_code,omitempty" require:"true"`
	// 账户描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 个人用户的身份证号码/机构的企业编号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty" require:"true"`
	// 证件类型：0 身份证, 1 护照, 2 军官证, 3 回乡证, 4 港澳证件, 5 营业执照, 6 港澳居民来往内地通行证, 7 台湾居民来往内地通行证, 8 港澳居民居住证, 9 台湾居民居住证, 10事业单位登记证书, 11 社会团体登记证书, 12 民办非企业单位证书, 13 党政机关批准设计文件, 14 全国组织机构代码证书, 15 其他证件
	IdType *int64 `json:"id_type,omitempty" xml:"id_type,omitempty" require:"true"`
	// 开户影像信息（BASE64格式传入）
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// 外部系统传入的交易备注信息(必填)
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 邮箱地址(机构注册必传)
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 个人用户的手机号码/机构用户的联系电话(必填)
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number,omitempty" require:"true"`
	// 场景码(需要申请)
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 平台归属机构的链上账户Id(账户可以归属在一个机构下)
	RelegationAccountId *string `json:"relegation_account_id,omitempty" xml:"relegation_account_id,omitempty"`
	// 角色(1 机构, 2 个人)
	RoleType *int64 `json:"role_type,omitempty" xml:"role_type,omitempty" require:"true"`
	// 外部系统对该个人用户/机构的内部编号,用于唯一识别该用户
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 个人用户姓名/机构名称
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
	// 提现银行卡
	WithdrawBankCardId *string `json:"withdraw_bank_card_id,omitempty" xml:"withdraw_bank_card_id,omitempty"`
}

func (s CreateConsumecardAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumecardAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateConsumecardAccountRequest) SetAuthToken(v string) *CreateConsumecardAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetProductInstanceId(v string) *CreateConsumecardAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetAuthorizationAddress(v string) *CreateConsumecardAccountRequest {
	s.AuthorizationAddress = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetAuthConsumer(v bool) *CreateConsumecardAccountRequest {
	s.AuthConsumer = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetAuthProvider(v bool) *CreateConsumecardAccountRequest {
	s.AuthProvider = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetBizId(v string) *CreateConsumecardAccountRequest {
	s.BizId = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetCertificationId(v string) *CreateConsumecardAccountRequest {
	s.CertificationId = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetChainId(v string) *CreateConsumecardAccountRequest {
	s.ChainId = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetCountryCode(v string) *CreateConsumecardAccountRequest {
	s.CountryCode = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetDescription(v string) *CreateConsumecardAccountRequest {
	s.Description = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetIdNumber(v string) *CreateConsumecardAccountRequest {
	s.IdNumber = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetIdType(v int64) *CreateConsumecardAccountRequest {
	s.IdType = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetImage(v string) *CreateConsumecardAccountRequest {
	s.Image = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetMemo(v string) *CreateConsumecardAccountRequest {
	s.Memo = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetEmail(v string) *CreateConsumecardAccountRequest {
	s.Email = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetPhoneNumber(v string) *CreateConsumecardAccountRequest {
	s.PhoneNumber = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetProductCode(v string) *CreateConsumecardAccountRequest {
	s.ProductCode = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetRelegationAccountId(v string) *CreateConsumecardAccountRequest {
	s.RelegationAccountId = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetRoleType(v int64) *CreateConsumecardAccountRequest {
	s.RoleType = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetUserId(v string) *CreateConsumecardAccountRequest {
	s.UserId = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetUserName(v string) *CreateConsumecardAccountRequest {
	s.UserName = &v
	return s
}

func (s *CreateConsumecardAccountRequest) SetWithdrawBankCardId(v string) *CreateConsumecardAccountRequest {
	s.WithdrawBankCardId = &v
	return s
}

type CreateConsumecardAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户/机构的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
}

func (s CreateConsumecardAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumecardAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateConsumecardAccountResponse) SetReqMsgId(v string) *CreateConsumecardAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateConsumecardAccountResponse) SetResultCode(v string) *CreateConsumecardAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateConsumecardAccountResponse) SetResultMsg(v string) *CreateConsumecardAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateConsumecardAccountResponse) SetAccountId(v string) *CreateConsumecardAccountResponse {
	s.AccountId = &v
	return s
}

type OfflineConsumecardAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 附言(长度不要超过500个字符)
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s OfflineConsumecardAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s OfflineConsumecardAccountRequest) GoString() string {
	return s.String()
}

func (s *OfflineConsumecardAccountRequest) SetAuthToken(v string) *OfflineConsumecardAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *OfflineConsumecardAccountRequest) SetProductInstanceId(v string) *OfflineConsumecardAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OfflineConsumecardAccountRequest) SetBaseRequest(v *BaseRequest) *OfflineConsumecardAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *OfflineConsumecardAccountRequest) SetRemark(v string) *OfflineConsumecardAccountRequest {
	s.Remark = &v
	return s
}

type OfflineConsumecardAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s OfflineConsumecardAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s OfflineConsumecardAccountResponse) GoString() string {
	return s.String()
}

func (s *OfflineConsumecardAccountResponse) SetReqMsgId(v string) *OfflineConsumecardAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OfflineConsumecardAccountResponse) SetResultCode(v string) *OfflineConsumecardAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *OfflineConsumecardAccountResponse) SetResultMsg(v string) *OfflineConsumecardAccountResponse {
	s.ResultMsg = &v
	return s
}

type ReclaimConsumecardWalletRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 回退金额(元)
	Amount *string `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 角色(1 机构, 2 个人)
	RoleType *int64 `json:"role_type,omitempty" xml:"role_type,omitempty" require:"true"`
}

func (s ReclaimConsumecardWalletRequest) String() string {
	return tea.Prettify(s)
}

func (s ReclaimConsumecardWalletRequest) GoString() string {
	return s.String()
}

func (s *ReclaimConsumecardWalletRequest) SetAuthToken(v string) *ReclaimConsumecardWalletRequest {
	s.AuthToken = &v
	return s
}

func (s *ReclaimConsumecardWalletRequest) SetProductInstanceId(v string) *ReclaimConsumecardWalletRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ReclaimConsumecardWalletRequest) SetAmount(v string) *ReclaimConsumecardWalletRequest {
	s.Amount = &v
	return s
}

func (s *ReclaimConsumecardWalletRequest) SetBaseRequest(v *BaseRequest) *ReclaimConsumecardWalletRequest {
	s.BaseRequest = v
	return s
}

func (s *ReclaimConsumecardWalletRequest) SetRoleType(v int64) *ReclaimConsumecardWalletRequest {
	s.RoleType = &v
	return s
}

type ReclaimConsumecardWalletResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ReclaimConsumecardWalletResponse) String() string {
	return tea.Prettify(s)
}

func (s ReclaimConsumecardWalletResponse) GoString() string {
	return s.String()
}

func (s *ReclaimConsumecardWalletResponse) SetReqMsgId(v string) *ReclaimConsumecardWalletResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReclaimConsumecardWalletResponse) SetResultCode(v string) *ReclaimConsumecardWalletResponse {
	s.ResultCode = &v
	return s
}

func (s *ReclaimConsumecardWalletResponse) SetResultMsg(v string) *ReclaimConsumecardWalletResponse {
	s.ResultMsg = &v
	return s
}

type FreezeConsumecardAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 附言(长度不要超过500个字符)
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s FreezeConsumecardAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s FreezeConsumecardAccountRequest) GoString() string {
	return s.String()
}

func (s *FreezeConsumecardAccountRequest) SetAuthToken(v string) *FreezeConsumecardAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *FreezeConsumecardAccountRequest) SetProductInstanceId(v string) *FreezeConsumecardAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *FreezeConsumecardAccountRequest) SetBaseRequest(v *BaseRequest) *FreezeConsumecardAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *FreezeConsumecardAccountRequest) SetRemark(v string) *FreezeConsumecardAccountRequest {
	s.Remark = &v
	return s
}

type FreezeConsumecardAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s FreezeConsumecardAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s FreezeConsumecardAccountResponse) GoString() string {
	return s.String()
}

func (s *FreezeConsumecardAccountResponse) SetReqMsgId(v string) *FreezeConsumecardAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *FreezeConsumecardAccountResponse) SetResultCode(v string) *FreezeConsumecardAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *FreezeConsumecardAccountResponse) SetResultMsg(v string) *FreezeConsumecardAccountResponse {
	s.ResultMsg = &v
	return s
}

type UnfreezeConsumecardAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 附言(长度不要超过500个字符)
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s UnfreezeConsumecardAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s UnfreezeConsumecardAccountRequest) GoString() string {
	return s.String()
}

func (s *UnfreezeConsumecardAccountRequest) SetAuthToken(v string) *UnfreezeConsumecardAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *UnfreezeConsumecardAccountRequest) SetProductInstanceId(v string) *UnfreezeConsumecardAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UnfreezeConsumecardAccountRequest) SetBaseRequest(v *BaseRequest) *UnfreezeConsumecardAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *UnfreezeConsumecardAccountRequest) SetRemark(v string) *UnfreezeConsumecardAccountRequest {
	s.Remark = &v
	return s
}

type UnfreezeConsumecardAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UnfreezeConsumecardAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s UnfreezeConsumecardAccountResponse) GoString() string {
	return s.String()
}

func (s *UnfreezeConsumecardAccountResponse) SetReqMsgId(v string) *UnfreezeConsumecardAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UnfreezeConsumecardAccountResponse) SetResultCode(v string) *UnfreezeConsumecardAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *UnfreezeConsumecardAccountResponse) SetResultMsg(v string) *UnfreezeConsumecardAccountResponse {
	s.ResultMsg = &v
	return s
}

type UpdateConsumecardRiskcontrolRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 是否加值(false为减)
	Add *bool `json:"add,omitempty" xml:"add,omitempty" require:"true"`
	// 调整金额(元)
	Amount *string `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
}

func (s UpdateConsumecardRiskcontrolRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateConsumecardRiskcontrolRequest) GoString() string {
	return s.String()
}

func (s *UpdateConsumecardRiskcontrolRequest) SetAuthToken(v string) *UpdateConsumecardRiskcontrolRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateConsumecardRiskcontrolRequest) SetProductInstanceId(v string) *UpdateConsumecardRiskcontrolRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateConsumecardRiskcontrolRequest) SetAdd(v bool) *UpdateConsumecardRiskcontrolRequest {
	s.Add = &v
	return s
}

func (s *UpdateConsumecardRiskcontrolRequest) SetAmount(v string) *UpdateConsumecardRiskcontrolRequest {
	s.Amount = &v
	return s
}

func (s *UpdateConsumecardRiskcontrolRequest) SetBaseRequest(v *BaseRequest) *UpdateConsumecardRiskcontrolRequest {
	s.BaseRequest = v
	return s
}

type UpdateConsumecardRiskcontrolResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateConsumecardRiskcontrolResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateConsumecardRiskcontrolResponse) GoString() string {
	return s.String()
}

func (s *UpdateConsumecardRiskcontrolResponse) SetReqMsgId(v string) *UpdateConsumecardRiskcontrolResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateConsumecardRiskcontrolResponse) SetResultCode(v string) *UpdateConsumecardRiskcontrolResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateConsumecardRiskcontrolResponse) SetResultMsg(v string) *UpdateConsumecardRiskcontrolResponse {
	s.ResultMsg = &v
	return s
}

type QueryConsumecardBillRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 需要查询的交易单号
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
}

func (s QueryConsumecardBillRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardBillRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardBillRequest) SetAuthToken(v string) *QueryConsumecardBillRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardBillRequest) SetProductInstanceId(v string) *QueryConsumecardBillRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardBillRequest) SetBaseRequest(v *BaseRequest) *QueryConsumecardBillRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryConsumecardBillRequest) SetOrderId(v string) *QueryConsumecardBillRequest {
	s.OrderId = &v
	return s
}

type QueryConsumecardBillResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 消费卡的单条交易记录数据
	BlockInstruction *BlockInstruction `json:"block_instruction,omitempty" xml:"block_instruction,omitempty"`
}

func (s QueryConsumecardBillResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardBillResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardBillResponse) SetReqMsgId(v string) *QueryConsumecardBillResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardBillResponse) SetResultCode(v string) *QueryConsumecardBillResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardBillResponse) SetResultMsg(v string) *QueryConsumecardBillResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConsumecardBillResponse) SetBlockInstruction(v *BlockInstruction) *QueryConsumecardBillResponse {
	s.BlockInstruction = v
	return s
}

type ChargeConsumecardWalletRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 充值金额(单位:元,精确到分)
	ChargeAmount *string `json:"charge_amount,omitempty" xml:"charge_amount,omitempty" require:"true"`
}

func (s ChargeConsumecardWalletRequest) String() string {
	return tea.Prettify(s)
}

func (s ChargeConsumecardWalletRequest) GoString() string {
	return s.String()
}

func (s *ChargeConsumecardWalletRequest) SetAuthToken(v string) *ChargeConsumecardWalletRequest {
	s.AuthToken = &v
	return s
}

func (s *ChargeConsumecardWalletRequest) SetProductInstanceId(v string) *ChargeConsumecardWalletRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ChargeConsumecardWalletRequest) SetBaseRequest(v *BaseRequest) *ChargeConsumecardWalletRequest {
	s.BaseRequest = v
	return s
}

func (s *ChargeConsumecardWalletRequest) SetChargeAmount(v string) *ChargeConsumecardWalletRequest {
	s.ChargeAmount = &v
	return s
}

type ChargeConsumecardWalletResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ChargeConsumecardWalletResponse) String() string {
	return tea.Prettify(s)
}

func (s ChargeConsumecardWalletResponse) GoString() string {
	return s.String()
}

func (s *ChargeConsumecardWalletResponse) SetReqMsgId(v string) *ChargeConsumecardWalletResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ChargeConsumecardWalletResponse) SetResultCode(v string) *ChargeConsumecardWalletResponse {
	s.ResultCode = &v
	return s
}

func (s *ChargeConsumecardWalletResponse) SetResultMsg(v string) *ChargeConsumecardWalletResponse {
	s.ResultMsg = &v
	return s
}

type UpdateConsumecardAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 授权函地址
	AuthorizationAddress *string `json:"authorization_address,omitempty" xml:"authorization_address,omitempty"`
	// 是否有采购/消费权限
	AuthConsumer *bool `json:"auth_consumer,omitempty" xml:"auth_consumer,omitempty" require:"true"`
	// 是否有供应权限
	AuthProvider *bool `json:"auth_provider,omitempty" xml:"auth_provider,omitempty" require:"true"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 认证方id
	CertificationId *string `json:"certification_id,omitempty" xml:"certification_id,omitempty" require:"true"`
	// 商户描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 个人用户的身份证号码/机构的企业编号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty" require:"true"`
	// 证件类型：0 身份证, 1 护照, 2 军官证, 3 回乡证, 4 港澳证件, 5 营业执照, 6 港澳居民来往内地通行证, 7 台湾居民来往内地通行证, 8 港澳居民居住证, 9 台湾居民居住证, 10事业单位登记证书, 11 社会团体登记证书, 12 民办非企业单位证书, 13 党政机关批准设计文件, 14 全国组织机构代码证书, 15 其他证件
	IdType *int64 `json:"id_type,omitempty" xml:"id_type,omitempty" require:"true"`
	// 账户映像资料
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// 邮箱地址(机构注册必传)
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 个人用户的手机号码/机构用户的联系电话(必填)
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number,omitempty" require:"true"`
	// 个人用户姓名/机构名称
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
	// 提现银行卡
	WithdrawBankCardId *string `json:"withdraw_bank_card_id,omitempty" xml:"withdraw_bank_card_id,omitempty"`
}

func (s UpdateConsumecardAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateConsumecardAccountRequest) GoString() string {
	return s.String()
}

func (s *UpdateConsumecardAccountRequest) SetAuthToken(v string) *UpdateConsumecardAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateConsumecardAccountRequest) SetProductInstanceId(v string) *UpdateConsumecardAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateConsumecardAccountRequest) SetAuthorizationAddress(v string) *UpdateConsumecardAccountRequest {
	s.AuthorizationAddress = &v
	return s
}

func (s *UpdateConsumecardAccountRequest) SetAuthConsumer(v bool) *UpdateConsumecardAccountRequest {
	s.AuthConsumer = &v
	return s
}

func (s *UpdateConsumecardAccountRequest) SetAuthProvider(v bool) *UpdateConsumecardAccountRequest {
	s.AuthProvider = &v
	return s
}

func (s *UpdateConsumecardAccountRequest) SetBaseRequest(v *BaseRequest) *UpdateConsumecardAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *UpdateConsumecardAccountRequest) SetCertificationId(v string) *UpdateConsumecardAccountRequest {
	s.CertificationId = &v
	return s
}

func (s *UpdateConsumecardAccountRequest) SetDescription(v string) *UpdateConsumecardAccountRequest {
	s.Description = &v
	return s
}

func (s *UpdateConsumecardAccountRequest) SetIdNumber(v string) *UpdateConsumecardAccountRequest {
	s.IdNumber = &v
	return s
}

func (s *UpdateConsumecardAccountRequest) SetIdType(v int64) *UpdateConsumecardAccountRequest {
	s.IdType = &v
	return s
}

func (s *UpdateConsumecardAccountRequest) SetImage(v string) *UpdateConsumecardAccountRequest {
	s.Image = &v
	return s
}

func (s *UpdateConsumecardAccountRequest) SetEmail(v string) *UpdateConsumecardAccountRequest {
	s.Email = &v
	return s
}

func (s *UpdateConsumecardAccountRequest) SetPhoneNumber(v string) *UpdateConsumecardAccountRequest {
	s.PhoneNumber = &v
	return s
}

func (s *UpdateConsumecardAccountRequest) SetUserName(v string) *UpdateConsumecardAccountRequest {
	s.UserName = &v
	return s
}

func (s *UpdateConsumecardAccountRequest) SetWithdrawBankCardId(v string) *UpdateConsumecardAccountRequest {
	s.WithdrawBankCardId = &v
	return s
}

type UpdateConsumecardAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateConsumecardAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateConsumecardAccountResponse) GoString() string {
	return s.String()
}

func (s *UpdateConsumecardAccountResponse) SetReqMsgId(v string) *UpdateConsumecardAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateConsumecardAccountResponse) SetResultCode(v string) *UpdateConsumecardAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateConsumecardAccountResponse) SetResultMsg(v string) *UpdateConsumecardAccountResponse {
	s.ResultMsg = &v
	return s
}

type CreateConsumecardBillRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 账单标价(单位:元,精确到分)
	BillDisplayPrice *string `json:"bill_display_price,omitempty" xml:"bill_display_price,omitempty" require:"true"`
	// 账单名称
	BillName *string `json:"bill_name,omitempty" xml:"bill_name,omitempty" require:"true"`
	// 账单实际支付金额(单位:元,精确到分)
	BillTokenPrice *string `json:"bill_token_price,omitempty" xml:"bill_token_price,omitempty" require:"true"`
	// 账单类型
	BillType *string `json:"bill_type,omitempty" xml:"bill_type,omitempty" require:"true"`
	// 交易发起方的链上账户Id
	BuyerAccountId *string `json:"buyer_account_id,omitempty" xml:"buyer_account_id,omitempty" require:"true"`
	// 支付方证件号
	BuyerIdNumber *string `json:"buyer_id_number,omitempty" xml:"buyer_id_number,omitempty" require:"true"`
	// 证件类型：0 身份证, 1 护照, 2 军官证, 3 回乡证, 4 港澳证件, 5 营业执照, 6 港澳居民来往内地通行证, 7 台湾居民来往内地通行证, 8 港澳居民居住证, 9 台湾居民居住证, 10事业单位登记证书, 11 社会团体登记证书, 12 民办非企业单位证书, 13 党政机关批准设计文件, 14 全国组织机构代码证书, 15 其他证件
	BuyerIdType *int64 `json:"buyer_id_type,omitempty" xml:"buyer_id_type,omitempty" require:"true"`
	// 支付方发起ip
	BuyerIp *string `json:"buyer_ip,omitempty" xml:"buyer_ip,omitempty" require:"true"`
	// 支付方姓名
	BuyerName *string `json:"buyer_name,omitempty" xml:"buyer_name,omitempty" require:"true"`
	// 支付方手机号
	BuyerPhone *string `json:"buyer_phone,omitempty" xml:"buyer_phone,omitempty" require:"true"`
	// 外部系统创建时间
	OriginCreateTime *int64 `json:"origin_create_time,omitempty" xml:"origin_create_time,omitempty" require:"true"`
	// 外部系统订单号
	OriginOrderId *string `json:"origin_order_id,omitempty" xml:"origin_order_id,omitempty" require:"true"`
	// 附言（不必填）
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// 交易接收方的链上账户Id
	SellerAccountId *string `json:"seller_account_id,omitempty" xml:"seller_account_id,omitempty" require:"true"`
}

func (s CreateConsumecardBillRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumecardBillRequest) GoString() string {
	return s.String()
}

func (s *CreateConsumecardBillRequest) SetAuthToken(v string) *CreateConsumecardBillRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateConsumecardBillRequest) SetProductInstanceId(v string) *CreateConsumecardBillRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateConsumecardBillRequest) SetBaseRequest(v *BaseRequest) *CreateConsumecardBillRequest {
	s.BaseRequest = v
	return s
}

func (s *CreateConsumecardBillRequest) SetBillDisplayPrice(v string) *CreateConsumecardBillRequest {
	s.BillDisplayPrice = &v
	return s
}

func (s *CreateConsumecardBillRequest) SetBillName(v string) *CreateConsumecardBillRequest {
	s.BillName = &v
	return s
}

func (s *CreateConsumecardBillRequest) SetBillTokenPrice(v string) *CreateConsumecardBillRequest {
	s.BillTokenPrice = &v
	return s
}

func (s *CreateConsumecardBillRequest) SetBillType(v string) *CreateConsumecardBillRequest {
	s.BillType = &v
	return s
}

func (s *CreateConsumecardBillRequest) SetBuyerAccountId(v string) *CreateConsumecardBillRequest {
	s.BuyerAccountId = &v
	return s
}

func (s *CreateConsumecardBillRequest) SetBuyerIdNumber(v string) *CreateConsumecardBillRequest {
	s.BuyerIdNumber = &v
	return s
}

func (s *CreateConsumecardBillRequest) SetBuyerIdType(v int64) *CreateConsumecardBillRequest {
	s.BuyerIdType = &v
	return s
}

func (s *CreateConsumecardBillRequest) SetBuyerIp(v string) *CreateConsumecardBillRequest {
	s.BuyerIp = &v
	return s
}

func (s *CreateConsumecardBillRequest) SetBuyerName(v string) *CreateConsumecardBillRequest {
	s.BuyerName = &v
	return s
}

func (s *CreateConsumecardBillRequest) SetBuyerPhone(v string) *CreateConsumecardBillRequest {
	s.BuyerPhone = &v
	return s
}

func (s *CreateConsumecardBillRequest) SetOriginCreateTime(v int64) *CreateConsumecardBillRequest {
	s.OriginCreateTime = &v
	return s
}

func (s *CreateConsumecardBillRequest) SetOriginOrderId(v string) *CreateConsumecardBillRequest {
	s.OriginOrderId = &v
	return s
}

func (s *CreateConsumecardBillRequest) SetRemark(v string) *CreateConsumecardBillRequest {
	s.Remark = &v
	return s
}

func (s *CreateConsumecardBillRequest) SetSellerAccountId(v string) *CreateConsumecardBillRequest {
	s.SellerAccountId = &v
	return s
}

type CreateConsumecardBillResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 账单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
}

func (s CreateConsumecardBillResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumecardBillResponse) GoString() string {
	return s.String()
}

func (s *CreateConsumecardBillResponse) SetReqMsgId(v string) *CreateConsumecardBillResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateConsumecardBillResponse) SetResultCode(v string) *CreateConsumecardBillResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateConsumecardBillResponse) SetResultMsg(v string) *CreateConsumecardBillResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateConsumecardBillResponse) SetOrderId(v string) *CreateConsumecardBillResponse {
	s.OrderId = &v
	return s
}

type ConfirmConsumecardBillcreateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 账单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言(不要超过500个字符)
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// 账单创建是否确认成功。true为成功，false为失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty" require:"true"`
}

func (s ConfirmConsumecardBillcreateRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmConsumecardBillcreateRequest) GoString() string {
	return s.String()
}

func (s *ConfirmConsumecardBillcreateRequest) SetAuthToken(v string) *ConfirmConsumecardBillcreateRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmConsumecardBillcreateRequest) SetProductInstanceId(v string) *ConfirmConsumecardBillcreateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmConsumecardBillcreateRequest) SetBaseRequest(v *BaseRequest) *ConfirmConsumecardBillcreateRequest {
	s.BaseRequest = v
	return s
}

func (s *ConfirmConsumecardBillcreateRequest) SetOrderId(v string) *ConfirmConsumecardBillcreateRequest {
	s.OrderId = &v
	return s
}

func (s *ConfirmConsumecardBillcreateRequest) SetRemark(v string) *ConfirmConsumecardBillcreateRequest {
	s.Remark = &v
	return s
}

func (s *ConfirmConsumecardBillcreateRequest) SetSuccess(v bool) *ConfirmConsumecardBillcreateRequest {
	s.Success = &v
	return s
}

type ConfirmConsumecardBillcreateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ConfirmConsumecardBillcreateResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmConsumecardBillcreateResponse) GoString() string {
	return s.String()
}

func (s *ConfirmConsumecardBillcreateResponse) SetReqMsgId(v string) *ConfirmConsumecardBillcreateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmConsumecardBillcreateResponse) SetResultCode(v string) *ConfirmConsumecardBillcreateResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmConsumecardBillcreateResponse) SetResultMsg(v string) *ConfirmConsumecardBillcreateResponse {
	s.ResultMsg = &v
	return s
}

type CancelConsumecardBillRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 账单ID(长度不要超过256个字符)
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言(长度不要超过500个字符)
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s CancelConsumecardBillRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelConsumecardBillRequest) GoString() string {
	return s.String()
}

func (s *CancelConsumecardBillRequest) SetAuthToken(v string) *CancelConsumecardBillRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelConsumecardBillRequest) SetProductInstanceId(v string) *CancelConsumecardBillRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelConsumecardBillRequest) SetBaseRequest(v *BaseRequest) *CancelConsumecardBillRequest {
	s.BaseRequest = v
	return s
}

func (s *CancelConsumecardBillRequest) SetOrderId(v string) *CancelConsumecardBillRequest {
	s.OrderId = &v
	return s
}

func (s *CancelConsumecardBillRequest) SetRemark(v string) *CancelConsumecardBillRequest {
	s.Remark = &v
	return s
}

type CancelConsumecardBillResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CancelConsumecardBillResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelConsumecardBillResponse) GoString() string {
	return s.String()
}

func (s *CancelConsumecardBillResponse) SetReqMsgId(v string) *CancelConsumecardBillResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelConsumecardBillResponse) SetResultCode(v string) *CancelConsumecardBillResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelConsumecardBillResponse) SetResultMsg(v string) *CancelConsumecardBillResponse {
	s.ResultMsg = &v
	return s
}

type ExecConsumecardBillpayRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 账单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 需要支付的金额(单位:元,精确到分)
	PayPrice *string `json:"pay_price,omitempty" xml:"pay_price,omitempty" require:"true"`
	// 附言(不要超过500个字符)
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s ExecConsumecardBillpayRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardBillpayRequest) GoString() string {
	return s.String()
}

func (s *ExecConsumecardBillpayRequest) SetAuthToken(v string) *ExecConsumecardBillpayRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecConsumecardBillpayRequest) SetProductInstanceId(v string) *ExecConsumecardBillpayRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecConsumecardBillpayRequest) SetBaseRequest(v *BaseRequest) *ExecConsumecardBillpayRequest {
	s.BaseRequest = v
	return s
}

func (s *ExecConsumecardBillpayRequest) SetOrderId(v string) *ExecConsumecardBillpayRequest {
	s.OrderId = &v
	return s
}

func (s *ExecConsumecardBillpayRequest) SetPayPrice(v string) *ExecConsumecardBillpayRequest {
	s.PayPrice = &v
	return s
}

func (s *ExecConsumecardBillpayRequest) SetRemark(v string) *ExecConsumecardBillpayRequest {
	s.Remark = &v
	return s
}

type ExecConsumecardBillpayResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecConsumecardBillpayResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardBillpayResponse) GoString() string {
	return s.String()
}

func (s *ExecConsumecardBillpayResponse) SetReqMsgId(v string) *ExecConsumecardBillpayResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecConsumecardBillpayResponse) SetResultCode(v string) *ExecConsumecardBillpayResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecConsumecardBillpayResponse) SetResultMsg(v string) *ExecConsumecardBillpayResponse {
	s.ResultMsg = &v
	return s
}

type ExecConsumecardOrderwriteoffRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 交易类型(0: 商品兑换单, 1: 账单兑换单)
	InstructionType *int64 `json:"instruction_type,omitempty" xml:"instruction_type,omitempty" require:"true"`
	// 账单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言(长度不要超过500个字符)
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s ExecConsumecardOrderwriteoffRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardOrderwriteoffRequest) GoString() string {
	return s.String()
}

func (s *ExecConsumecardOrderwriteoffRequest) SetAuthToken(v string) *ExecConsumecardOrderwriteoffRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecConsumecardOrderwriteoffRequest) SetProductInstanceId(v string) *ExecConsumecardOrderwriteoffRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecConsumecardOrderwriteoffRequest) SetBaseRequest(v *BaseRequest) *ExecConsumecardOrderwriteoffRequest {
	s.BaseRequest = v
	return s
}

func (s *ExecConsumecardOrderwriteoffRequest) SetInstructionType(v int64) *ExecConsumecardOrderwriteoffRequest {
	s.InstructionType = &v
	return s
}

func (s *ExecConsumecardOrderwriteoffRequest) SetOrderId(v string) *ExecConsumecardOrderwriteoffRequest {
	s.OrderId = &v
	return s
}

func (s *ExecConsumecardOrderwriteoffRequest) SetRemark(v string) *ExecConsumecardOrderwriteoffRequest {
	s.Remark = &v
	return s
}

type ExecConsumecardOrderwriteoffResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
	// 交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s ExecConsumecardOrderwriteoffResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardOrderwriteoffResponse) GoString() string {
	return s.String()
}

func (s *ExecConsumecardOrderwriteoffResponse) SetReqMsgId(v string) *ExecConsumecardOrderwriteoffResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecConsumecardOrderwriteoffResponse) SetResultCode(v string) *ExecConsumecardOrderwriteoffResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecConsumecardOrderwriteoffResponse) SetResultMsg(v string) *ExecConsumecardOrderwriteoffResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecConsumecardOrderwriteoffResponse) SetBlockNumber(v int64) *ExecConsumecardOrderwriteoffResponse {
	s.BlockNumber = &v
	return s
}

func (s *ExecConsumecardOrderwriteoffResponse) SetTxHash(v string) *ExecConsumecardOrderwriteoffResponse {
	s.TxHash = &v
	return s
}

type ConfirmConsumecardBillrefundRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 是否接受退款申请，true同意退款，false拒绝退款
	Accept *bool `json:"accept,omitempty" xml:"accept,omitempty" require:"true"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 账单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言(不要超过500个字符)
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s ConfirmConsumecardBillrefundRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmConsumecardBillrefundRequest) GoString() string {
	return s.String()
}

func (s *ConfirmConsumecardBillrefundRequest) SetAuthToken(v string) *ConfirmConsumecardBillrefundRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmConsumecardBillrefundRequest) SetProductInstanceId(v string) *ConfirmConsumecardBillrefundRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmConsumecardBillrefundRequest) SetAccept(v bool) *ConfirmConsumecardBillrefundRequest {
	s.Accept = &v
	return s
}

func (s *ConfirmConsumecardBillrefundRequest) SetBaseRequest(v *BaseRequest) *ConfirmConsumecardBillrefundRequest {
	s.BaseRequest = v
	return s
}

func (s *ConfirmConsumecardBillrefundRequest) SetOrderId(v string) *ConfirmConsumecardBillrefundRequest {
	s.OrderId = &v
	return s
}

func (s *ConfirmConsumecardBillrefundRequest) SetRemark(v string) *ConfirmConsumecardBillrefundRequest {
	s.Remark = &v
	return s
}

type ConfirmConsumecardBillrefundResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ConfirmConsumecardBillrefundResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmConsumecardBillrefundResponse) GoString() string {
	return s.String()
}

func (s *ConfirmConsumecardBillrefundResponse) SetReqMsgId(v string) *ConfirmConsumecardBillrefundResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmConsumecardBillrefundResponse) SetResultCode(v string) *ConfirmConsumecardBillrefundResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmConsumecardBillrefundResponse) SetResultMsg(v string) *ConfirmConsumecardBillrefundResponse {
	s.ResultMsg = &v
	return s
}

type QueryConsumecardAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 附言(长度不要超过500个字符)
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s QueryConsumecardAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardAccountRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardAccountRequest) SetAuthToken(v string) *QueryConsumecardAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardAccountRequest) SetProductInstanceId(v string) *QueryConsumecardAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardAccountRequest) SetBaseRequest(v *BaseRequest) *QueryConsumecardAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryConsumecardAccountRequest) SetRemark(v string) *QueryConsumecardAccountRequest {
	s.Remark = &v
	return s
}

type QueryConsumecardAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 账户信息
	Account *ConsumeCardAccount `json:"account,omitempty" xml:"account,omitempty"`
}

func (s QueryConsumecardAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardAccountResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardAccountResponse) SetReqMsgId(v string) *QueryConsumecardAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardAccountResponse) SetResultCode(v string) *QueryConsumecardAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardAccountResponse) SetResultMsg(v string) *QueryConsumecardAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConsumecardAccountResponse) SetAccount(v *ConsumeCardAccount) *QueryConsumecardAccountResponse {
	s.Account = v
	return s
}

type OpenConsumecardWalletRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 操作类型(0 开通钱包)
	OperateType *int64 `json:"operate_type,omitempty" xml:"operate_type,omitempty" require:"true"`
	// 角色(1 机构, 2 个人)
	RoleType *int64 `json:"role_type,omitempty" xml:"role_type,omitempty" require:"true"`
	// 钱包类型（0:余额账户）
	WalletType *int64 `json:"wallet_type,omitempty" xml:"wallet_type,omitempty" require:"true"`
}

func (s OpenConsumecardWalletRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenConsumecardWalletRequest) GoString() string {
	return s.String()
}

func (s *OpenConsumecardWalletRequest) SetAuthToken(v string) *OpenConsumecardWalletRequest {
	s.AuthToken = &v
	return s
}

func (s *OpenConsumecardWalletRequest) SetProductInstanceId(v string) *OpenConsumecardWalletRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OpenConsumecardWalletRequest) SetBaseRequest(v *BaseRequest) *OpenConsumecardWalletRequest {
	s.BaseRequest = v
	return s
}

func (s *OpenConsumecardWalletRequest) SetOperateType(v int64) *OpenConsumecardWalletRequest {
	s.OperateType = &v
	return s
}

func (s *OpenConsumecardWalletRequest) SetRoleType(v int64) *OpenConsumecardWalletRequest {
	s.RoleType = &v
	return s
}

func (s *OpenConsumecardWalletRequest) SetWalletType(v int64) *OpenConsumecardWalletRequest {
	s.WalletType = &v
	return s
}

type OpenConsumecardWalletResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s OpenConsumecardWalletResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenConsumecardWalletResponse) GoString() string {
	return s.String()
}

func (s *OpenConsumecardWalletResponse) SetReqMsgId(v string) *OpenConsumecardWalletResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OpenConsumecardWalletResponse) SetResultCode(v string) *OpenConsumecardWalletResponse {
	s.ResultCode = &v
	return s
}

func (s *OpenConsumecardWalletResponse) SetResultMsg(v string) *OpenConsumecardWalletResponse {
	s.ResultMsg = &v
	return s
}

type QueryConsumecardWalletRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 附言(长度不要超过500个字符)
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s QueryConsumecardWalletRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardWalletRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardWalletRequest) SetAuthToken(v string) *QueryConsumecardWalletRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardWalletRequest) SetProductInstanceId(v string) *QueryConsumecardWalletRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardWalletRequest) SetBaseRequest(v *BaseRequest) *QueryConsumecardWalletRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryConsumecardWalletRequest) SetRemark(v string) *QueryConsumecardWalletRequest {
	s.Remark = &v
	return s
}

type QueryConsumecardWalletResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 钱包信息数据
	WalletInfo *WalletInfo `json:"wallet_info,omitempty" xml:"wallet_info,omitempty"`
}

func (s QueryConsumecardWalletResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardWalletResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardWalletResponse) SetReqMsgId(v string) *QueryConsumecardWalletResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardWalletResponse) SetResultCode(v string) *QueryConsumecardWalletResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardWalletResponse) SetResultMsg(v string) *QueryConsumecardWalletResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConsumecardWalletResponse) SetWalletInfo(v *WalletInfo) *QueryConsumecardWalletResponse {
	s.WalletInfo = v
	return s
}

type ExecConsumecardWalletchargetotokenRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 充值的金额(单位为:元,精确到小数点后2位)
	ChargeAmount *string `json:"charge_amount,omitempty" xml:"charge_amount,omitempty" require:"true"`
}

func (s ExecConsumecardWalletchargetotokenRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardWalletchargetotokenRequest) GoString() string {
	return s.String()
}

func (s *ExecConsumecardWalletchargetotokenRequest) SetAuthToken(v string) *ExecConsumecardWalletchargetotokenRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecConsumecardWalletchargetotokenRequest) SetProductInstanceId(v string) *ExecConsumecardWalletchargetotokenRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecConsumecardWalletchargetotokenRequest) SetBaseRequest(v *BaseRequest) *ExecConsumecardWalletchargetotokenRequest {
	s.BaseRequest = v
	return s
}

func (s *ExecConsumecardWalletchargetotokenRequest) SetChargeAmount(v string) *ExecConsumecardWalletchargetotokenRequest {
	s.ChargeAmount = &v
	return s
}

type ExecConsumecardWalletchargetotokenResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
	// 交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s ExecConsumecardWalletchargetotokenResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardWalletchargetotokenResponse) GoString() string {
	return s.String()
}

func (s *ExecConsumecardWalletchargetotokenResponse) SetReqMsgId(v string) *ExecConsumecardWalletchargetotokenResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecConsumecardWalletchargetotokenResponse) SetResultCode(v string) *ExecConsumecardWalletchargetotokenResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecConsumecardWalletchargetotokenResponse) SetResultMsg(v string) *ExecConsumecardWalletchargetotokenResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecConsumecardWalletchargetotokenResponse) SetBlockNumber(v int64) *ExecConsumecardWalletchargetotokenResponse {
	s.BlockNumber = &v
	return s
}

func (s *ExecConsumecardWalletchargetotokenResponse) SetTxHash(v string) *ExecConsumecardWalletchargetotokenResponse {
	s.TxHash = &v
	return s
}

type ExecConsumecardWalletredeemtokenRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 期望要回退的金额(单位:元,精确到分)
	RedeemAmount *string `json:"redeem_amount,omitempty" xml:"redeem_amount,omitempty"`
}

func (s ExecConsumecardWalletredeemtokenRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardWalletredeemtokenRequest) GoString() string {
	return s.String()
}

func (s *ExecConsumecardWalletredeemtokenRequest) SetAuthToken(v string) *ExecConsumecardWalletredeemtokenRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecConsumecardWalletredeemtokenRequest) SetProductInstanceId(v string) *ExecConsumecardWalletredeemtokenRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecConsumecardWalletredeemtokenRequest) SetBaseRequest(v *BaseRequest) *ExecConsumecardWalletredeemtokenRequest {
	s.BaseRequest = v
	return s
}

func (s *ExecConsumecardWalletredeemtokenRequest) SetRedeemAmount(v string) *ExecConsumecardWalletredeemtokenRequest {
	s.RedeemAmount = &v
	return s
}

type ExecConsumecardWalletredeemtokenResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
	// 交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s ExecConsumecardWalletredeemtokenResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardWalletredeemtokenResponse) GoString() string {
	return s.String()
}

func (s *ExecConsumecardWalletredeemtokenResponse) SetReqMsgId(v string) *ExecConsumecardWalletredeemtokenResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecConsumecardWalletredeemtokenResponse) SetResultCode(v string) *ExecConsumecardWalletredeemtokenResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecConsumecardWalletredeemtokenResponse) SetResultMsg(v string) *ExecConsumecardWalletredeemtokenResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecConsumecardWalletredeemtokenResponse) SetBlockNumber(v int64) *ExecConsumecardWalletredeemtokenResponse {
	s.BlockNumber = &v
	return s
}

func (s *ExecConsumecardWalletredeemtokenResponse) SetTxHash(v string) *ExecConsumecardWalletredeemtokenResponse {
	s.TxHash = &v
	return s
}

type StartConsumecardPurchaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 支付方证件号
	BuyerIdNumber *string `json:"buyer_id_number,omitempty" xml:"buyer_id_number,omitempty" require:"true"`
	// 证件类型：0 身份证, 1 护照, 2 军官证, 3 回乡证, 4 港澳证件, 5 营业执照, 6 港澳居民来往内地通行证, 7 台湾居民来往内地通行证, 8 港澳居民居住证, 9 台湾居民居住证, 10事业单位登记证书, 11 社会团体登记证书, 12 民办非企业单位证书, 13 党政机关批准设计文件, 14 全国组织机构代码证书, 15 其他证件
	BuyerIdType *int64 `json:"buyer_id_type,omitempty" xml:"buyer_id_type,omitempty" require:"true"`
	// 支付方发起ip
	BuyerIp *string `json:"buyer_ip,omitempty" xml:"buyer_ip,omitempty" require:"true"`
	// 支付方姓名
	BuyerName *string `json:"buyer_name,omitempty" xml:"buyer_name,omitempty" require:"true"`
	// 支付方手机号
	BuyerPhone *string `json:"buyer_phone,omitempty" xml:"buyer_phone,omitempty" require:"true"`
	// 商品ID
	GoodsId *string `json:"goods_id,omitempty" xml:"goods_id,omitempty" require:"true"`
	// 外部系统交易创建时间，毫秒时间戳
	OriginCreateTime *int64 `json:"origin_create_time,omitempty" xml:"origin_create_time,omitempty" require:"true"`
	// 外部系统订单号
	OriginOrderId *string `json:"origin_order_id,omitempty" xml:"origin_order_id,omitempty" require:"true"`
	// 附言
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
	// 期望支付的商品价格(单位:元,精确到分)
	TokenPrice *string `json:"token_price,omitempty" xml:"token_price,omitempty" require:"true"`
}

func (s StartConsumecardPurchaseRequest) String() string {
	return tea.Prettify(s)
}

func (s StartConsumecardPurchaseRequest) GoString() string {
	return s.String()
}

func (s *StartConsumecardPurchaseRequest) SetAuthToken(v string) *StartConsumecardPurchaseRequest {
	s.AuthToken = &v
	return s
}

func (s *StartConsumecardPurchaseRequest) SetProductInstanceId(v string) *StartConsumecardPurchaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartConsumecardPurchaseRequest) SetBaseRequest(v *BaseRequest) *StartConsumecardPurchaseRequest {
	s.BaseRequest = v
	return s
}

func (s *StartConsumecardPurchaseRequest) SetBuyerIdNumber(v string) *StartConsumecardPurchaseRequest {
	s.BuyerIdNumber = &v
	return s
}

func (s *StartConsumecardPurchaseRequest) SetBuyerIdType(v int64) *StartConsumecardPurchaseRequest {
	s.BuyerIdType = &v
	return s
}

func (s *StartConsumecardPurchaseRequest) SetBuyerIp(v string) *StartConsumecardPurchaseRequest {
	s.BuyerIp = &v
	return s
}

func (s *StartConsumecardPurchaseRequest) SetBuyerName(v string) *StartConsumecardPurchaseRequest {
	s.BuyerName = &v
	return s
}

func (s *StartConsumecardPurchaseRequest) SetBuyerPhone(v string) *StartConsumecardPurchaseRequest {
	s.BuyerPhone = &v
	return s
}

func (s *StartConsumecardPurchaseRequest) SetGoodsId(v string) *StartConsumecardPurchaseRequest {
	s.GoodsId = &v
	return s
}

func (s *StartConsumecardPurchaseRequest) SetOriginCreateTime(v int64) *StartConsumecardPurchaseRequest {
	s.OriginCreateTime = &v
	return s
}

func (s *StartConsumecardPurchaseRequest) SetOriginOrderId(v string) *StartConsumecardPurchaseRequest {
	s.OriginOrderId = &v
	return s
}

func (s *StartConsumecardPurchaseRequest) SetRemark(v string) *StartConsumecardPurchaseRequest {
	s.Remark = &v
	return s
}

func (s *StartConsumecardPurchaseRequest) SetTokenPrice(v string) *StartConsumecardPurchaseRequest {
	s.TokenPrice = &v
	return s
}

type StartConsumecardPurchaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
}

func (s StartConsumecardPurchaseResponse) String() string {
	return tea.Prettify(s)
}

func (s StartConsumecardPurchaseResponse) GoString() string {
	return s.String()
}

func (s *StartConsumecardPurchaseResponse) SetReqMsgId(v string) *StartConsumecardPurchaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartConsumecardPurchaseResponse) SetResultCode(v string) *StartConsumecardPurchaseResponse {
	s.ResultCode = &v
	return s
}

func (s *StartConsumecardPurchaseResponse) SetResultMsg(v string) *StartConsumecardPurchaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartConsumecardPurchaseResponse) SetOrderId(v string) *StartConsumecardPurchaseResponse {
	s.OrderId = &v
	return s
}

type CancelConsumecardBuyerpurchaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 交易ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s CancelConsumecardBuyerpurchaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelConsumecardBuyerpurchaseRequest) GoString() string {
	return s.String()
}

func (s *CancelConsumecardBuyerpurchaseRequest) SetAuthToken(v string) *CancelConsumecardBuyerpurchaseRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelConsumecardBuyerpurchaseRequest) SetProductInstanceId(v string) *CancelConsumecardBuyerpurchaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelConsumecardBuyerpurchaseRequest) SetBaseRequest(v *BaseRequest) *CancelConsumecardBuyerpurchaseRequest {
	s.BaseRequest = v
	return s
}

func (s *CancelConsumecardBuyerpurchaseRequest) SetOrderId(v string) *CancelConsumecardBuyerpurchaseRequest {
	s.OrderId = &v
	return s
}

func (s *CancelConsumecardBuyerpurchaseRequest) SetRemark(v string) *CancelConsumecardBuyerpurchaseRequest {
	s.Remark = &v
	return s
}

type CancelConsumecardBuyerpurchaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CancelConsumecardBuyerpurchaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelConsumecardBuyerpurchaseResponse) GoString() string {
	return s.String()
}

func (s *CancelConsumecardBuyerpurchaseResponse) SetReqMsgId(v string) *CancelConsumecardBuyerpurchaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelConsumecardBuyerpurchaseResponse) SetResultCode(v string) *CancelConsumecardBuyerpurchaseResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelConsumecardBuyerpurchaseResponse) SetResultMsg(v string) *CancelConsumecardBuyerpurchaseResponse {
	s.ResultMsg = &v
	return s
}

type ApplyConsumecardPurchaserefundRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 交易ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言(退款原因)
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
}

func (s ApplyConsumecardPurchaserefundRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyConsumecardPurchaserefundRequest) GoString() string {
	return s.String()
}

func (s *ApplyConsumecardPurchaserefundRequest) SetAuthToken(v string) *ApplyConsumecardPurchaserefundRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyConsumecardPurchaserefundRequest) SetProductInstanceId(v string) *ApplyConsumecardPurchaserefundRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyConsumecardPurchaserefundRequest) SetBaseRequest(v *BaseRequest) *ApplyConsumecardPurchaserefundRequest {
	s.BaseRequest = v
	return s
}

func (s *ApplyConsumecardPurchaserefundRequest) SetOrderId(v string) *ApplyConsumecardPurchaserefundRequest {
	s.OrderId = &v
	return s
}

func (s *ApplyConsumecardPurchaserefundRequest) SetRemark(v string) *ApplyConsumecardPurchaserefundRequest {
	s.Remark = &v
	return s
}

type ApplyConsumecardPurchaserefundResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ApplyConsumecardPurchaserefundResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyConsumecardPurchaserefundResponse) GoString() string {
	return s.String()
}

func (s *ApplyConsumecardPurchaserefundResponse) SetReqMsgId(v string) *ApplyConsumecardPurchaserefundResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyConsumecardPurchaserefundResponse) SetResultCode(v string) *ApplyConsumecardPurchaserefundResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyConsumecardPurchaserefundResponse) SetResultMsg(v string) *ApplyConsumecardPurchaserefundResponse {
	s.ResultMsg = &v
	return s
}

type ApplyConsumecardPurchasereplaceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s ApplyConsumecardPurchasereplaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyConsumecardPurchasereplaceRequest) GoString() string {
	return s.String()
}

func (s *ApplyConsumecardPurchasereplaceRequest) SetAuthToken(v string) *ApplyConsumecardPurchasereplaceRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyConsumecardPurchasereplaceRequest) SetProductInstanceId(v string) *ApplyConsumecardPurchasereplaceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyConsumecardPurchasereplaceRequest) SetBaseRequest(v *BaseRequest) *ApplyConsumecardPurchasereplaceRequest {
	s.BaseRequest = v
	return s
}

func (s *ApplyConsumecardPurchasereplaceRequest) SetOrderId(v string) *ApplyConsumecardPurchasereplaceRequest {
	s.OrderId = &v
	return s
}

func (s *ApplyConsumecardPurchasereplaceRequest) SetRemark(v string) *ApplyConsumecardPurchasereplaceRequest {
	s.Remark = &v
	return s
}

type ApplyConsumecardPurchasereplaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ApplyConsumecardPurchasereplaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyConsumecardPurchasereplaceResponse) GoString() string {
	return s.String()
}

func (s *ApplyConsumecardPurchasereplaceResponse) SetReqMsgId(v string) *ApplyConsumecardPurchasereplaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyConsumecardPurchasereplaceResponse) SetResultCode(v string) *ApplyConsumecardPurchasereplaceResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyConsumecardPurchasereplaceResponse) SetResultMsg(v string) *ApplyConsumecardPurchasereplaceResponse {
	s.ResultMsg = &v
	return s
}

type ExecConsumecardPurchasereceiveRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s ExecConsumecardPurchasereceiveRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardPurchasereceiveRequest) GoString() string {
	return s.String()
}

func (s *ExecConsumecardPurchasereceiveRequest) SetAuthToken(v string) *ExecConsumecardPurchasereceiveRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecConsumecardPurchasereceiveRequest) SetProductInstanceId(v string) *ExecConsumecardPurchasereceiveRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecConsumecardPurchasereceiveRequest) SetBaseRequest(v *BaseRequest) *ExecConsumecardPurchasereceiveRequest {
	s.BaseRequest = v
	return s
}

func (s *ExecConsumecardPurchasereceiveRequest) SetOrderId(v string) *ExecConsumecardPurchasereceiveRequest {
	s.OrderId = &v
	return s
}

func (s *ExecConsumecardPurchasereceiveRequest) SetRemark(v string) *ExecConsumecardPurchasereceiveRequest {
	s.Remark = &v
	return s
}

type ExecConsumecardPurchasereceiveResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecConsumecardPurchasereceiveResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardPurchasereceiveResponse) GoString() string {
	return s.String()
}

func (s *ExecConsumecardPurchasereceiveResponse) SetReqMsgId(v string) *ExecConsumecardPurchasereceiveResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecConsumecardPurchasereceiveResponse) SetResultCode(v string) *ExecConsumecardPurchasereceiveResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecConsumecardPurchasereceiveResponse) SetResultMsg(v string) *ExecConsumecardPurchasereceiveResponse {
	s.ResultMsg = &v
	return s
}

type RefuseConsumecardPurchaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 交易ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s RefuseConsumecardPurchaseRequest) String() string {
	return tea.Prettify(s)
}

func (s RefuseConsumecardPurchaseRequest) GoString() string {
	return s.String()
}

func (s *RefuseConsumecardPurchaseRequest) SetAuthToken(v string) *RefuseConsumecardPurchaseRequest {
	s.AuthToken = &v
	return s
}

func (s *RefuseConsumecardPurchaseRequest) SetProductInstanceId(v string) *RefuseConsumecardPurchaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RefuseConsumecardPurchaseRequest) SetBaseRequest(v *BaseRequest) *RefuseConsumecardPurchaseRequest {
	s.BaseRequest = v
	return s
}

func (s *RefuseConsumecardPurchaseRequest) SetOrderId(v string) *RefuseConsumecardPurchaseRequest {
	s.OrderId = &v
	return s
}

func (s *RefuseConsumecardPurchaseRequest) SetRemark(v string) *RefuseConsumecardPurchaseRequest {
	s.Remark = &v
	return s
}

type RefuseConsumecardPurchaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RefuseConsumecardPurchaseResponse) String() string {
	return tea.Prettify(s)
}

func (s RefuseConsumecardPurchaseResponse) GoString() string {
	return s.String()
}

func (s *RefuseConsumecardPurchaseResponse) SetReqMsgId(v string) *RefuseConsumecardPurchaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RefuseConsumecardPurchaseResponse) SetResultCode(v string) *RefuseConsumecardPurchaseResponse {
	s.ResultCode = &v
	return s
}

func (s *RefuseConsumecardPurchaseResponse) SetResultMsg(v string) *RefuseConsumecardPurchaseResponse {
	s.ResultMsg = &v
	return s
}

type SetConsumecardPurchaserefundRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 是否同意退款。true同意，false拒绝。
	Accept *bool `json:"accept,omitempty" xml:"accept,omitempty" require:"true"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 交易ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s SetConsumecardPurchaserefundRequest) String() string {
	return tea.Prettify(s)
}

func (s SetConsumecardPurchaserefundRequest) GoString() string {
	return s.String()
}

func (s *SetConsumecardPurchaserefundRequest) SetAuthToken(v string) *SetConsumecardPurchaserefundRequest {
	s.AuthToken = &v
	return s
}

func (s *SetConsumecardPurchaserefundRequest) SetProductInstanceId(v string) *SetConsumecardPurchaserefundRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetConsumecardPurchaserefundRequest) SetAccept(v bool) *SetConsumecardPurchaserefundRequest {
	s.Accept = &v
	return s
}

func (s *SetConsumecardPurchaserefundRequest) SetBaseRequest(v *BaseRequest) *SetConsumecardPurchaserefundRequest {
	s.BaseRequest = v
	return s
}

func (s *SetConsumecardPurchaserefundRequest) SetOrderId(v string) *SetConsumecardPurchaserefundRequest {
	s.OrderId = &v
	return s
}

func (s *SetConsumecardPurchaserefundRequest) SetRemark(v string) *SetConsumecardPurchaserefundRequest {
	s.Remark = &v
	return s
}

type SetConsumecardPurchaserefundResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetConsumecardPurchaserefundResponse) String() string {
	return tea.Prettify(s)
}

func (s SetConsumecardPurchaserefundResponse) GoString() string {
	return s.String()
}

func (s *SetConsumecardPurchaserefundResponse) SetReqMsgId(v string) *SetConsumecardPurchaserefundResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetConsumecardPurchaserefundResponse) SetResultCode(v string) *SetConsumecardPurchaserefundResponse {
	s.ResultCode = &v
	return s
}

func (s *SetConsumecardPurchaserefundResponse) SetResultMsg(v string) *SetConsumecardPurchaserefundResponse {
	s.ResultMsg = &v
	return s
}

type SetConsumecardPurchasereplaceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 是否同意换货。true同意，false拒绝
	Accept *bool `json:"accept,omitempty" xml:"accept,omitempty" require:"true"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 交易ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s SetConsumecardPurchasereplaceRequest) String() string {
	return tea.Prettify(s)
}

func (s SetConsumecardPurchasereplaceRequest) GoString() string {
	return s.String()
}

func (s *SetConsumecardPurchasereplaceRequest) SetAuthToken(v string) *SetConsumecardPurchasereplaceRequest {
	s.AuthToken = &v
	return s
}

func (s *SetConsumecardPurchasereplaceRequest) SetProductInstanceId(v string) *SetConsumecardPurchasereplaceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetConsumecardPurchasereplaceRequest) SetAccept(v bool) *SetConsumecardPurchasereplaceRequest {
	s.Accept = &v
	return s
}

func (s *SetConsumecardPurchasereplaceRequest) SetBaseRequest(v *BaseRequest) *SetConsumecardPurchasereplaceRequest {
	s.BaseRequest = v
	return s
}

func (s *SetConsumecardPurchasereplaceRequest) SetOrderId(v string) *SetConsumecardPurchasereplaceRequest {
	s.OrderId = &v
	return s
}

func (s *SetConsumecardPurchasereplaceRequest) SetRemark(v string) *SetConsumecardPurchasereplaceRequest {
	s.Remark = &v
	return s
}

type SetConsumecardPurchasereplaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetConsumecardPurchasereplaceResponse) String() string {
	return tea.Prettify(s)
}

func (s SetConsumecardPurchasereplaceResponse) GoString() string {
	return s.String()
}

func (s *SetConsumecardPurchasereplaceResponse) SetReqMsgId(v string) *SetConsumecardPurchasereplaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetConsumecardPurchasereplaceResponse) SetResultCode(v string) *SetConsumecardPurchasereplaceResponse {
	s.ResultCode = &v
	return s
}

func (s *SetConsumecardPurchasereplaceResponse) SetResultMsg(v string) *SetConsumecardPurchasereplaceResponse {
	s.ResultMsg = &v
	return s
}

type ConfirmConsumecardPurchaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 交易ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s ConfirmConsumecardPurchaseRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmConsumecardPurchaseRequest) GoString() string {
	return s.String()
}

func (s *ConfirmConsumecardPurchaseRequest) SetAuthToken(v string) *ConfirmConsumecardPurchaseRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmConsumecardPurchaseRequest) SetProductInstanceId(v string) *ConfirmConsumecardPurchaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmConsumecardPurchaseRequest) SetBaseRequest(v *BaseRequest) *ConfirmConsumecardPurchaseRequest {
	s.BaseRequest = v
	return s
}

func (s *ConfirmConsumecardPurchaseRequest) SetOrderId(v string) *ConfirmConsumecardPurchaseRequest {
	s.OrderId = &v
	return s
}

func (s *ConfirmConsumecardPurchaseRequest) SetRemark(v string) *ConfirmConsumecardPurchaseRequest {
	s.Remark = &v
	return s
}

type ConfirmConsumecardPurchaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ConfirmConsumecardPurchaseResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmConsumecardPurchaseResponse) GoString() string {
	return s.String()
}

func (s *ConfirmConsumecardPurchaseResponse) SetReqMsgId(v string) *ConfirmConsumecardPurchaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmConsumecardPurchaseResponse) SetResultCode(v string) *ConfirmConsumecardPurchaseResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmConsumecardPurchaseResponse) SetResultMsg(v string) *ConfirmConsumecardPurchaseResponse {
	s.ResultMsg = &v
	return s
}

type SendConsumecardPurchaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 交易ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言(发货信息)
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
}

func (s SendConsumecardPurchaseRequest) String() string {
	return tea.Prettify(s)
}

func (s SendConsumecardPurchaseRequest) GoString() string {
	return s.String()
}

func (s *SendConsumecardPurchaseRequest) SetAuthToken(v string) *SendConsumecardPurchaseRequest {
	s.AuthToken = &v
	return s
}

func (s *SendConsumecardPurchaseRequest) SetProductInstanceId(v string) *SendConsumecardPurchaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SendConsumecardPurchaseRequest) SetBaseRequest(v *BaseRequest) *SendConsumecardPurchaseRequest {
	s.BaseRequest = v
	return s
}

func (s *SendConsumecardPurchaseRequest) SetOrderId(v string) *SendConsumecardPurchaseRequest {
	s.OrderId = &v
	return s
}

func (s *SendConsumecardPurchaseRequest) SetRemark(v string) *SendConsumecardPurchaseRequest {
	s.Remark = &v
	return s
}

type SendConsumecardPurchaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SendConsumecardPurchaseResponse) String() string {
	return tea.Prettify(s)
}

func (s SendConsumecardPurchaseResponse) GoString() string {
	return s.String()
}

func (s *SendConsumecardPurchaseResponse) SetReqMsgId(v string) *SendConsumecardPurchaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SendConsumecardPurchaseResponse) SetResultCode(v string) *SendConsumecardPurchaseResponse {
	s.ResultCode = &v
	return s
}

func (s *SendConsumecardPurchaseResponse) SetResultMsg(v string) *SendConsumecardPurchaseResponse {
	s.ResultMsg = &v
	return s
}

type ReplaceConsumecardPurchaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 交易ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言(补发商品信息)
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
}

func (s ReplaceConsumecardPurchaseRequest) String() string {
	return tea.Prettify(s)
}

func (s ReplaceConsumecardPurchaseRequest) GoString() string {
	return s.String()
}

func (s *ReplaceConsumecardPurchaseRequest) SetAuthToken(v string) *ReplaceConsumecardPurchaseRequest {
	s.AuthToken = &v
	return s
}

func (s *ReplaceConsumecardPurchaseRequest) SetProductInstanceId(v string) *ReplaceConsumecardPurchaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ReplaceConsumecardPurchaseRequest) SetBaseRequest(v *BaseRequest) *ReplaceConsumecardPurchaseRequest {
	s.BaseRequest = v
	return s
}

func (s *ReplaceConsumecardPurchaseRequest) SetOrderId(v string) *ReplaceConsumecardPurchaseRequest {
	s.OrderId = &v
	return s
}

func (s *ReplaceConsumecardPurchaseRequest) SetRemark(v string) *ReplaceConsumecardPurchaseRequest {
	s.Remark = &v
	return s
}

type ReplaceConsumecardPurchaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ReplaceConsumecardPurchaseResponse) String() string {
	return tea.Prettify(s)
}

func (s ReplaceConsumecardPurchaseResponse) GoString() string {
	return s.String()
}

func (s *ReplaceConsumecardPurchaseResponse) SetReqMsgId(v string) *ReplaceConsumecardPurchaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReplaceConsumecardPurchaseResponse) SetResultCode(v string) *ReplaceConsumecardPurchaseResponse {
	s.ResultCode = &v
	return s
}

func (s *ReplaceConsumecardPurchaseResponse) SetResultMsg(v string) *ReplaceConsumecardPurchaseResponse {
	s.ResultMsg = &v
	return s
}

type CreateConsumecardGoodsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商品授权类型
	AuthType *int64 `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 默认价格(单位:元,精确到分)
	DefaultPrice *string `json:"default_price,omitempty" xml:"default_price,omitempty" require:"true"`
	// 代理操作的链上ID
	DelegateAccountId *string `json:"delegate_account_id,omitempty" xml:"delegate_account_id,omitempty" require:"true"`
	// 商品描述
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 商品描述图片url，多个图片间用;隔开
	DescImages *string `json:"desc_images,omitempty" xml:"desc_images,omitempty" require:"true"`
	// 商品标价
	DisplayPrice *string `json:"display_price,omitempty" xml:"display_price,omitempty" require:"true"`
	// 商品名称
	GoodsName *string `json:"goods_name,omitempty" xml:"goods_name,omitempty" require:"true"`
	// 商品类型
	GoodsType *string `json:"goods_type,omitempty" xml:"goods_type,omitempty" require:"true"`
	// 是否公开
	IfPublic *bool `json:"if_public,omitempty" xml:"if_public,omitempty" require:"true"`
	// 商品主图片url
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// 商品每日上限
	LimitPerUserAndDay *int64 `json:"limit_per_user_and_day,omitempty" xml:"limit_per_user_and_day,omitempty" require:"true"`
	// 商品每月上限
	LimitPerUserAndMonth *int64 `json:"limit_per_user_and_month,omitempty" xml:"limit_per_user_and_month,omitempty" require:"true"`
	// 商品库存
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty" require:"true"`
	// 商品有效结束时间(UNIX毫秒时间戳)
	ValidNotAfter *int64 `json:"valid_not_after,omitempty" xml:"valid_not_after,omitempty" require:"true"`
	// 商品有效开始时间(UNIX毫秒时间戳)
	ValidNotBefore *int64 `json:"valid_not_before,omitempty" xml:"valid_not_before,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s CreateConsumecardGoodsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumecardGoodsRequest) GoString() string {
	return s.String()
}

func (s *CreateConsumecardGoodsRequest) SetAuthToken(v string) *CreateConsumecardGoodsRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetProductInstanceId(v string) *CreateConsumecardGoodsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetAuthType(v int64) *CreateConsumecardGoodsRequest {
	s.AuthType = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetBaseRequest(v *BaseRequest) *CreateConsumecardGoodsRequest {
	s.BaseRequest = v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetDefaultPrice(v string) *CreateConsumecardGoodsRequest {
	s.DefaultPrice = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetDelegateAccountId(v string) *CreateConsumecardGoodsRequest {
	s.DelegateAccountId = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetDescription(v string) *CreateConsumecardGoodsRequest {
	s.Description = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetDescImages(v string) *CreateConsumecardGoodsRequest {
	s.DescImages = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetDisplayPrice(v string) *CreateConsumecardGoodsRequest {
	s.DisplayPrice = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetGoodsName(v string) *CreateConsumecardGoodsRequest {
	s.GoodsName = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetGoodsType(v string) *CreateConsumecardGoodsRequest {
	s.GoodsType = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetIfPublic(v bool) *CreateConsumecardGoodsRequest {
	s.IfPublic = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetImage(v string) *CreateConsumecardGoodsRequest {
	s.Image = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetLimitPerUserAndDay(v int64) *CreateConsumecardGoodsRequest {
	s.LimitPerUserAndDay = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetLimitPerUserAndMonth(v int64) *CreateConsumecardGoodsRequest {
	s.LimitPerUserAndMonth = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetTotalCount(v int64) *CreateConsumecardGoodsRequest {
	s.TotalCount = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetValidNotAfter(v int64) *CreateConsumecardGoodsRequest {
	s.ValidNotAfter = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetValidNotBefore(v int64) *CreateConsumecardGoodsRequest {
	s.ValidNotBefore = &v
	return s
}

func (s *CreateConsumecardGoodsRequest) SetMemo(v string) *CreateConsumecardGoodsRequest {
	s.Memo = &v
	return s
}

type CreateConsumecardGoodsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 异步发布商品返回的查询ID。使用该ID查询发布结果。
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
}

func (s CreateConsumecardGoodsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumecardGoodsResponse) GoString() string {
	return s.String()
}

func (s *CreateConsumecardGoodsResponse) SetReqMsgId(v string) *CreateConsumecardGoodsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateConsumecardGoodsResponse) SetResultCode(v string) *CreateConsumecardGoodsResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateConsumecardGoodsResponse) SetResultMsg(v string) *CreateConsumecardGoodsResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateConsumecardGoodsResponse) SetRequestId(v string) *CreateConsumecardGoodsResponse {
	s.RequestId = &v
	return s
}

type UpdateConsumecardGoodsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 默认价格
	DefaultPrice *string `json:"default_price,omitempty" xml:"default_price,omitempty" require:"true"`
	// 商品描述
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 描述图片url
	DescImages *string `json:"desc_images,omitempty" xml:"desc_images,omitempty" require:"true"`
	// 商品标价
	DisplayPrice *string `json:"display_price,omitempty" xml:"display_price,omitempty" require:"true"`
	// 商品ID
	GoodsId *string `json:"goods_id,omitempty" xml:"goods_id,omitempty" require:"true"`
	// 商品名称
	GoodsName *string `json:"goods_name,omitempty" xml:"goods_name,omitempty" require:"true"`
	// 主图片url
	Images *string `json:"images,omitempty" xml:"images,omitempty" require:"true"`
	// 商品每日上限
	LimitPerUserAndDay *int64 `json:"limit_per_user_and_day,omitempty" xml:"limit_per_user_and_day,omitempty" require:"true"`
	// 商品每月上限
	LimitPerUserAndMonth *int64 `json:"limit_per_user_and_month,omitempty" xml:"limit_per_user_and_month,omitempty" require:"true"`
	// 商品库存
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty" require:"true"`
	// 商品有效结束时间(UNIX毫秒时间戳)
	ValidNotAfter *int64 `json:"valid_not_after,omitempty" xml:"valid_not_after,omitempty" require:"true"`
	// 商品有效开始时间(UNIX毫秒时间戳)
	ValidNotBefore *int64 `json:"valid_not_before,omitempty" xml:"valid_not_before,omitempty" require:"true"`
}

func (s UpdateConsumecardGoodsRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateConsumecardGoodsRequest) GoString() string {
	return s.String()
}

func (s *UpdateConsumecardGoodsRequest) SetAuthToken(v string) *UpdateConsumecardGoodsRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateConsumecardGoodsRequest) SetProductInstanceId(v string) *UpdateConsumecardGoodsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateConsumecardGoodsRequest) SetBaseRequest(v *BaseRequest) *UpdateConsumecardGoodsRequest {
	s.BaseRequest = v
	return s
}

func (s *UpdateConsumecardGoodsRequest) SetDefaultPrice(v string) *UpdateConsumecardGoodsRequest {
	s.DefaultPrice = &v
	return s
}

func (s *UpdateConsumecardGoodsRequest) SetDescription(v string) *UpdateConsumecardGoodsRequest {
	s.Description = &v
	return s
}

func (s *UpdateConsumecardGoodsRequest) SetDescImages(v string) *UpdateConsumecardGoodsRequest {
	s.DescImages = &v
	return s
}

func (s *UpdateConsumecardGoodsRequest) SetDisplayPrice(v string) *UpdateConsumecardGoodsRequest {
	s.DisplayPrice = &v
	return s
}

func (s *UpdateConsumecardGoodsRequest) SetGoodsId(v string) *UpdateConsumecardGoodsRequest {
	s.GoodsId = &v
	return s
}

func (s *UpdateConsumecardGoodsRequest) SetGoodsName(v string) *UpdateConsumecardGoodsRequest {
	s.GoodsName = &v
	return s
}

func (s *UpdateConsumecardGoodsRequest) SetImages(v string) *UpdateConsumecardGoodsRequest {
	s.Images = &v
	return s
}

func (s *UpdateConsumecardGoodsRequest) SetLimitPerUserAndDay(v int64) *UpdateConsumecardGoodsRequest {
	s.LimitPerUserAndDay = &v
	return s
}

func (s *UpdateConsumecardGoodsRequest) SetLimitPerUserAndMonth(v int64) *UpdateConsumecardGoodsRequest {
	s.LimitPerUserAndMonth = &v
	return s
}

func (s *UpdateConsumecardGoodsRequest) SetTotalCount(v int64) *UpdateConsumecardGoodsRequest {
	s.TotalCount = &v
	return s
}

func (s *UpdateConsumecardGoodsRequest) SetValidNotAfter(v int64) *UpdateConsumecardGoodsRequest {
	s.ValidNotAfter = &v
	return s
}

func (s *UpdateConsumecardGoodsRequest) SetValidNotBefore(v int64) *UpdateConsumecardGoodsRequest {
	s.ValidNotBefore = &v
	return s
}

type UpdateConsumecardGoodsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 异步更新商品信息，根据该ID查询更新结果
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
}

func (s UpdateConsumecardGoodsResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateConsumecardGoodsResponse) GoString() string {
	return s.String()
}

func (s *UpdateConsumecardGoodsResponse) SetReqMsgId(v string) *UpdateConsumecardGoodsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateConsumecardGoodsResponse) SetResultCode(v string) *UpdateConsumecardGoodsResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateConsumecardGoodsResponse) SetResultMsg(v string) *UpdateConsumecardGoodsResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateConsumecardGoodsResponse) SetRequestId(v string) *UpdateConsumecardGoodsResponse {
	s.RequestId = &v
	return s
}

type OpenConsumecardGoodstocustomRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 商品ID
	GoodsId *string `json:"goods_id,omitempty" xml:"goods_id,omitempty" require:"true"`
	// 开放权限的账户id
	OpenAccountId *string `json:"open_account_id,omitempty" xml:"open_account_id,omitempty" require:"true"`
	// true授权，false解除授权
	Open *bool `json:"open,omitempty" xml:"open,omitempty" require:"true"`
}

func (s OpenConsumecardGoodstocustomRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenConsumecardGoodstocustomRequest) GoString() string {
	return s.String()
}

func (s *OpenConsumecardGoodstocustomRequest) SetAuthToken(v string) *OpenConsumecardGoodstocustomRequest {
	s.AuthToken = &v
	return s
}

func (s *OpenConsumecardGoodstocustomRequest) SetProductInstanceId(v string) *OpenConsumecardGoodstocustomRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OpenConsumecardGoodstocustomRequest) SetBaseRequest(v *BaseRequest) *OpenConsumecardGoodstocustomRequest {
	s.BaseRequest = v
	return s
}

func (s *OpenConsumecardGoodstocustomRequest) SetGoodsId(v string) *OpenConsumecardGoodstocustomRequest {
	s.GoodsId = &v
	return s
}

func (s *OpenConsumecardGoodstocustomRequest) SetOpenAccountId(v string) *OpenConsumecardGoodstocustomRequest {
	s.OpenAccountId = &v
	return s
}

func (s *OpenConsumecardGoodstocustomRequest) SetOpen(v bool) *OpenConsumecardGoodstocustomRequest {
	s.Open = &v
	return s
}

type OpenConsumecardGoodstocustomResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s OpenConsumecardGoodstocustomResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenConsumecardGoodstocustomResponse) GoString() string {
	return s.String()
}

func (s *OpenConsumecardGoodstocustomResponse) SetReqMsgId(v string) *OpenConsumecardGoodstocustomResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OpenConsumecardGoodstocustomResponse) SetResultCode(v string) *OpenConsumecardGoodstocustomResponse {
	s.ResultCode = &v
	return s
}

func (s *OpenConsumecardGoodstocustomResponse) SetResultMsg(v string) *OpenConsumecardGoodstocustomResponse {
	s.ResultMsg = &v
	return s
}

type CreateConsumecardGoodscategoryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 商品类别描述
	CategoryDescription *string `json:"category_description,omitempty" xml:"category_description,omitempty" require:"true"`
	// 商品分类id（ffaaaaabbbbbbcccccc，如果存在返回失败）
	CategoryId *string `json:"category_id,omitempty" xml:"category_id,omitempty" require:"true"`
	// 商品类别名称
	CategoryName *string `json:"category_name,omitempty" xml:"category_name,omitempty" require:"true"`
}

func (s CreateConsumecardGoodscategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumecardGoodscategoryRequest) GoString() string {
	return s.String()
}

func (s *CreateConsumecardGoodscategoryRequest) SetAuthToken(v string) *CreateConsumecardGoodscategoryRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateConsumecardGoodscategoryRequest) SetProductInstanceId(v string) *CreateConsumecardGoodscategoryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateConsumecardGoodscategoryRequest) SetBaseRequest(v *BaseRequest) *CreateConsumecardGoodscategoryRequest {
	s.BaseRequest = v
	return s
}

func (s *CreateConsumecardGoodscategoryRequest) SetCategoryDescription(v string) *CreateConsumecardGoodscategoryRequest {
	s.CategoryDescription = &v
	return s
}

func (s *CreateConsumecardGoodscategoryRequest) SetCategoryId(v string) *CreateConsumecardGoodscategoryRequest {
	s.CategoryId = &v
	return s
}

func (s *CreateConsumecardGoodscategoryRequest) SetCategoryName(v string) *CreateConsumecardGoodscategoryRequest {
	s.CategoryName = &v
	return s
}

type CreateConsumecardGoodscategoryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateConsumecardGoodscategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumecardGoodscategoryResponse) GoString() string {
	return s.String()
}

func (s *CreateConsumecardGoodscategoryResponse) SetReqMsgId(v string) *CreateConsumecardGoodscategoryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateConsumecardGoodscategoryResponse) SetResultCode(v string) *CreateConsumecardGoodscategoryResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateConsumecardGoodscategoryResponse) SetResultMsg(v string) *CreateConsumecardGoodscategoryResponse {
	s.ResultMsg = &v
	return s
}

type SetConsumecardGoodscustompriceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 商品ID
	GoodsId *string `json:"goods_id,omitempty" xml:"goods_id,omitempty" require:"true"`
	// 设置一客一价的目标账户id
	OpenAccountId *string `json:"open_account_id,omitempty" xml:"open_account_id,omitempty" require:"true"`
	// 设置的价格(单位:元,精确到分)
	Price *string `json:"price,omitempty" xml:"price,omitempty" require:"true"`
}

func (s SetConsumecardGoodscustompriceRequest) String() string {
	return tea.Prettify(s)
}

func (s SetConsumecardGoodscustompriceRequest) GoString() string {
	return s.String()
}

func (s *SetConsumecardGoodscustompriceRequest) SetAuthToken(v string) *SetConsumecardGoodscustompriceRequest {
	s.AuthToken = &v
	return s
}

func (s *SetConsumecardGoodscustompriceRequest) SetProductInstanceId(v string) *SetConsumecardGoodscustompriceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetConsumecardGoodscustompriceRequest) SetBaseRequest(v *BaseRequest) *SetConsumecardGoodscustompriceRequest {
	s.BaseRequest = v
	return s
}

func (s *SetConsumecardGoodscustompriceRequest) SetGoodsId(v string) *SetConsumecardGoodscustompriceRequest {
	s.GoodsId = &v
	return s
}

func (s *SetConsumecardGoodscustompriceRequest) SetOpenAccountId(v string) *SetConsumecardGoodscustompriceRequest {
	s.OpenAccountId = &v
	return s
}

func (s *SetConsumecardGoodscustompriceRequest) SetPrice(v string) *SetConsumecardGoodscustompriceRequest {
	s.Price = &v
	return s
}

type SetConsumecardGoodscustompriceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetConsumecardGoodscustompriceResponse) String() string {
	return tea.Prettify(s)
}

func (s SetConsumecardGoodscustompriceResponse) GoString() string {
	return s.String()
}

func (s *SetConsumecardGoodscustompriceResponse) SetReqMsgId(v string) *SetConsumecardGoodscustompriceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetConsumecardGoodscustompriceResponse) SetResultCode(v string) *SetConsumecardGoodscustompriceResponse {
	s.ResultCode = &v
	return s
}

func (s *SetConsumecardGoodscustompriceResponse) SetResultMsg(v string) *SetConsumecardGoodscustompriceResponse {
	s.ResultMsg = &v
	return s
}

type UploadConsumecardGoodsimageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 图片MIME类型，目前仅支持 image/jpeg
	ContentType *string `json:"content_type,omitempty" xml:"content_type,omitempty" require:"true"`
	// 图片信息（base64编码）列表
	Image []*string `json:"image,omitempty" xml:"image,omitempty" require:"true" type:"Repeated"`
	// 场景码(入驻时申请)
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
}

func (s UploadConsumecardGoodsimageRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadConsumecardGoodsimageRequest) GoString() string {
	return s.String()
}

func (s *UploadConsumecardGoodsimageRequest) SetAuthToken(v string) *UploadConsumecardGoodsimageRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadConsumecardGoodsimageRequest) SetProductInstanceId(v string) *UploadConsumecardGoodsimageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadConsumecardGoodsimageRequest) SetChainId(v string) *UploadConsumecardGoodsimageRequest {
	s.ChainId = &v
	return s
}

func (s *UploadConsumecardGoodsimageRequest) SetContentType(v string) *UploadConsumecardGoodsimageRequest {
	s.ContentType = &v
	return s
}

func (s *UploadConsumecardGoodsimageRequest) SetImage(v []*string) *UploadConsumecardGoodsimageRequest {
	s.Image = v
	return s
}

func (s *UploadConsumecardGoodsimageRequest) SetProductCode(v string) *UploadConsumecardGoodsimageRequest {
	s.ProductCode = &v
	return s
}

type UploadConsumecardGoodsimageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 临时可访问的url列表，过期时间2小时
	TemporaryUrls []*string `json:"temporary_urls,omitempty" xml:"temporary_urls,omitempty" type:"Repeated"`
	// 图片的不可访问url列表，发布商品时使用
	Urls []*string `json:"urls,omitempty" xml:"urls,omitempty" type:"Repeated"`
}

func (s UploadConsumecardGoodsimageResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadConsumecardGoodsimageResponse) GoString() string {
	return s.String()
}

func (s *UploadConsumecardGoodsimageResponse) SetReqMsgId(v string) *UploadConsumecardGoodsimageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadConsumecardGoodsimageResponse) SetResultCode(v string) *UploadConsumecardGoodsimageResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadConsumecardGoodsimageResponse) SetResultMsg(v string) *UploadConsumecardGoodsimageResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadConsumecardGoodsimageResponse) SetTemporaryUrls(v []*string) *UploadConsumecardGoodsimageResponse {
	s.TemporaryUrls = v
	return s
}

func (s *UploadConsumecardGoodsimageResponse) SetUrls(v []*string) *UploadConsumecardGoodsimageResponse {
	s.Urls = v
	return s
}

type ExecConsumecardOrdertrywithdrawRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 需要提现的订单分布的区块结束高度
	EndBlockNumber *int64 `json:"end_block_number,omitempty" xml:"end_block_number,omitempty"`
	// 需要提现的订单Id列表(不要超过100个Id)
	OrderIdList []*string `json:"order_id_list,omitempty" xml:"order_id_list,omitempty" type:"Repeated"`
	// 需要提现的订单分布的区块起始高度
	StartBlockNumber *int64 `json:"start_block_number,omitempty" xml:"start_block_number,omitempty"`
}

func (s ExecConsumecardOrdertrywithdrawRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardOrdertrywithdrawRequest) GoString() string {
	return s.String()
}

func (s *ExecConsumecardOrdertrywithdrawRequest) SetAuthToken(v string) *ExecConsumecardOrdertrywithdrawRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecConsumecardOrdertrywithdrawRequest) SetProductInstanceId(v string) *ExecConsumecardOrdertrywithdrawRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecConsumecardOrdertrywithdrawRequest) SetBaseRequest(v *BaseRequest) *ExecConsumecardOrdertrywithdrawRequest {
	s.BaseRequest = v
	return s
}

func (s *ExecConsumecardOrdertrywithdrawRequest) SetEndBlockNumber(v int64) *ExecConsumecardOrdertrywithdrawRequest {
	s.EndBlockNumber = &v
	return s
}

func (s *ExecConsumecardOrdertrywithdrawRequest) SetOrderIdList(v []*string) *ExecConsumecardOrdertrywithdrawRequest {
	s.OrderIdList = v
	return s
}

func (s *ExecConsumecardOrdertrywithdrawRequest) SetStartBlockNumber(v int64) *ExecConsumecardOrdertrywithdrawRequest {
	s.StartBlockNumber = &v
	return s
}

type ExecConsumecardOrdertrywithdrawResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 试算总提现金额(单位:元,精确到分)
	WithdrawTotalAmount *string `json:"withdraw_total_amount,omitempty" xml:"withdraw_total_amount,omitempty"`
	// 试算提现订单总笔数
	WithdrawTotalCount *int64 `json:"withdraw_total_count,omitempty" xml:"withdraw_total_count,omitempty"`
}

func (s ExecConsumecardOrdertrywithdrawResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardOrdertrywithdrawResponse) GoString() string {
	return s.String()
}

func (s *ExecConsumecardOrdertrywithdrawResponse) SetReqMsgId(v string) *ExecConsumecardOrdertrywithdrawResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecConsumecardOrdertrywithdrawResponse) SetResultCode(v string) *ExecConsumecardOrdertrywithdrawResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecConsumecardOrdertrywithdrawResponse) SetResultMsg(v string) *ExecConsumecardOrdertrywithdrawResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecConsumecardOrdertrywithdrawResponse) SetWithdrawTotalAmount(v string) *ExecConsumecardOrdertrywithdrawResponse {
	s.WithdrawTotalAmount = &v
	return s
}

func (s *ExecConsumecardOrdertrywithdrawResponse) SetWithdrawTotalCount(v int64) *ExecConsumecardOrdertrywithdrawResponse {
	s.WithdrawTotalCount = &v
	return s
}

type ExecConsumecardOrderwithdrawbyblocknumRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 需要提现的订单分布的区块结束高度
	EndBlockNumber *int64 `json:"end_block_number,omitempty" xml:"end_block_number,omitempty" require:"true"`
	// 需要提现的订单分布的区块起始高度
	StartBlockNumber *int64 `json:"start_block_number,omitempty" xml:"start_block_number,omitempty" require:"true"`
}

func (s ExecConsumecardOrderwithdrawbyblocknumRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardOrderwithdrawbyblocknumRequest) GoString() string {
	return s.String()
}

func (s *ExecConsumecardOrderwithdrawbyblocknumRequest) SetAuthToken(v string) *ExecConsumecardOrderwithdrawbyblocknumRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecConsumecardOrderwithdrawbyblocknumRequest) SetProductInstanceId(v string) *ExecConsumecardOrderwithdrawbyblocknumRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecConsumecardOrderwithdrawbyblocknumRequest) SetBaseRequest(v *BaseRequest) *ExecConsumecardOrderwithdrawbyblocknumRequest {
	s.BaseRequest = v
	return s
}

func (s *ExecConsumecardOrderwithdrawbyblocknumRequest) SetEndBlockNumber(v int64) *ExecConsumecardOrderwithdrawbyblocknumRequest {
	s.EndBlockNumber = &v
	return s
}

func (s *ExecConsumecardOrderwithdrawbyblocknumRequest) SetStartBlockNumber(v int64) *ExecConsumecardOrderwithdrawbyblocknumRequest {
	s.StartBlockNumber = &v
	return s
}

type ExecConsumecardOrderwithdrawbyblocknumResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 提现单编号(跟踪提现任务)
	WithdrawBizId *string `json:"withdraw_biz_id,omitempty" xml:"withdraw_biz_id,omitempty"`
}

func (s ExecConsumecardOrderwithdrawbyblocknumResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardOrderwithdrawbyblocknumResponse) GoString() string {
	return s.String()
}

func (s *ExecConsumecardOrderwithdrawbyblocknumResponse) SetReqMsgId(v string) *ExecConsumecardOrderwithdrawbyblocknumResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecConsumecardOrderwithdrawbyblocknumResponse) SetResultCode(v string) *ExecConsumecardOrderwithdrawbyblocknumResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecConsumecardOrderwithdrawbyblocknumResponse) SetResultMsg(v string) *ExecConsumecardOrderwithdrawbyblocknumResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecConsumecardOrderwithdrawbyblocknumResponse) SetWithdrawBizId(v string) *ExecConsumecardOrderwithdrawbyblocknumResponse {
	s.WithdrawBizId = &v
	return s
}

type ExecConsumecardOrderwithdrawbyidsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单列表(不要超过100个Id)
	OrderIdList []*string `json:"order_id_list,omitempty" xml:"order_id_list,omitempty" require:"true" type:"Repeated"`
}

func (s ExecConsumecardOrderwithdrawbyidsRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardOrderwithdrawbyidsRequest) GoString() string {
	return s.String()
}

func (s *ExecConsumecardOrderwithdrawbyidsRequest) SetAuthToken(v string) *ExecConsumecardOrderwithdrawbyidsRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecConsumecardOrderwithdrawbyidsRequest) SetProductInstanceId(v string) *ExecConsumecardOrderwithdrawbyidsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecConsumecardOrderwithdrawbyidsRequest) SetBaseRequest(v *BaseRequest) *ExecConsumecardOrderwithdrawbyidsRequest {
	s.BaseRequest = v
	return s
}

func (s *ExecConsumecardOrderwithdrawbyidsRequest) SetOrderIdList(v []*string) *ExecConsumecardOrderwithdrawbyidsRequest {
	s.OrderIdList = v
	return s
}

type ExecConsumecardOrderwithdrawbyidsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 提现单编号(跟踪提现任务)
	WithdrawBizId *string `json:"withdraw_biz_id,omitempty" xml:"withdraw_biz_id,omitempty"`
}

func (s ExecConsumecardOrderwithdrawbyidsResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecConsumecardOrderwithdrawbyidsResponse) GoString() string {
	return s.String()
}

func (s *ExecConsumecardOrderwithdrawbyidsResponse) SetReqMsgId(v string) *ExecConsumecardOrderwithdrawbyidsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecConsumecardOrderwithdrawbyidsResponse) SetResultCode(v string) *ExecConsumecardOrderwithdrawbyidsResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecConsumecardOrderwithdrawbyidsResponse) SetResultMsg(v string) *ExecConsumecardOrderwithdrawbyidsResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecConsumecardOrderwithdrawbyidsResponse) SetWithdrawBizId(v string) *ExecConsumecardOrderwithdrawbyidsResponse {
	s.WithdrawBizId = &v
	return s
}

type GetConsumecardOrderwithdrawresultRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 提现单编号
	WithdrawBizId *string `json:"withdraw_biz_id,omitempty" xml:"withdraw_biz_id,omitempty" require:"true"`
}

func (s GetConsumecardOrderwithdrawresultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConsumecardOrderwithdrawresultRequest) GoString() string {
	return s.String()
}

func (s *GetConsumecardOrderwithdrawresultRequest) SetAuthToken(v string) *GetConsumecardOrderwithdrawresultRequest {
	s.AuthToken = &v
	return s
}

func (s *GetConsumecardOrderwithdrawresultRequest) SetProductInstanceId(v string) *GetConsumecardOrderwithdrawresultRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetConsumecardOrderwithdrawresultRequest) SetBaseRequest(v *BaseRequest) *GetConsumecardOrderwithdrawresultRequest {
	s.BaseRequest = v
	return s
}

func (s *GetConsumecardOrderwithdrawresultRequest) SetWithdrawBizId(v string) *GetConsumecardOrderwithdrawresultRequest {
	s.WithdrawBizId = &v
	return s
}

type GetConsumecardOrderwithdrawresultResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 提现任务期望提现的金额(单位:元,精确到分)
	ExpectedWithdrawAmount *string `json:"expected_withdraw_amount,omitempty" xml:"expected_withdraw_amount,omitempty"`
	// 状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 需要审批后才能提现的交易订单数量
	WithdrawApprovalOrderCount *int64 `json:"withdraw_approval_order_count,omitempty" xml:"withdraw_approval_order_count,omitempty"`
	// 提现单编号
	WithdrawBizId *string `json:"withdraw_biz_id,omitempty" xml:"withdraw_biz_id,omitempty"`
	// 提现成功的总金额(单位:元,精确到分)
	WithdrawTotalAmount *string `json:"withdraw_total_amount,omitempty" xml:"withdraw_total_amount,omitempty"`
	// 提现成功的总笔数
	WithdrawTotalCount *int64 `json:"withdraw_total_count,omitempty" xml:"withdraw_total_count,omitempty"`
}

func (s GetConsumecardOrderwithdrawresultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConsumecardOrderwithdrawresultResponse) GoString() string {
	return s.String()
}

func (s *GetConsumecardOrderwithdrawresultResponse) SetReqMsgId(v string) *GetConsumecardOrderwithdrawresultResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetConsumecardOrderwithdrawresultResponse) SetResultCode(v string) *GetConsumecardOrderwithdrawresultResponse {
	s.ResultCode = &v
	return s
}

func (s *GetConsumecardOrderwithdrawresultResponse) SetResultMsg(v string) *GetConsumecardOrderwithdrawresultResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetConsumecardOrderwithdrawresultResponse) SetExpectedWithdrawAmount(v string) *GetConsumecardOrderwithdrawresultResponse {
	s.ExpectedWithdrawAmount = &v
	return s
}

func (s *GetConsumecardOrderwithdrawresultResponse) SetStatus(v string) *GetConsumecardOrderwithdrawresultResponse {
	s.Status = &v
	return s
}

func (s *GetConsumecardOrderwithdrawresultResponse) SetWithdrawApprovalOrderCount(v int64) *GetConsumecardOrderwithdrawresultResponse {
	s.WithdrawApprovalOrderCount = &v
	return s
}

func (s *GetConsumecardOrderwithdrawresultResponse) SetWithdrawBizId(v string) *GetConsumecardOrderwithdrawresultResponse {
	s.WithdrawBizId = &v
	return s
}

func (s *GetConsumecardOrderwithdrawresultResponse) SetWithdrawTotalAmount(v string) *GetConsumecardOrderwithdrawresultResponse {
	s.WithdrawTotalAmount = &v
	return s
}

func (s *GetConsumecardOrderwithdrawresultResponse) SetWithdrawTotalCount(v int64) *GetConsumecardOrderwithdrawresultResponse {
	s.WithdrawTotalCount = &v
	return s
}

type QueryConsumecardWalletredeemableRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 备注(长度不要超过500个字符)
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s QueryConsumecardWalletredeemableRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardWalletredeemableRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardWalletredeemableRequest) SetAuthToken(v string) *QueryConsumecardWalletredeemableRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardWalletredeemableRequest) SetProductInstanceId(v string) *QueryConsumecardWalletredeemableRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardWalletredeemableRequest) SetBaseRequest(v *BaseRequest) *QueryConsumecardWalletredeemableRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryConsumecardWalletredeemableRequest) SetRemark(v string) *QueryConsumecardWalletredeemableRequest {
	s.Remark = &v
	return s
}

type QueryConsumecardWalletredeemableResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可回退的金额
	RedeemableAmount *string `json:"redeemable_amount,omitempty" xml:"redeemable_amount,omitempty"`
}

func (s QueryConsumecardWalletredeemableResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardWalletredeemableResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardWalletredeemableResponse) SetReqMsgId(v string) *QueryConsumecardWalletredeemableResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardWalletredeemableResponse) SetResultCode(v string) *QueryConsumecardWalletredeemableResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardWalletredeemableResponse) SetResultMsg(v string) *QueryConsumecardWalletredeemableResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConsumecardWalletredeemableResponse) SetRedeemableAmount(v string) *QueryConsumecardWalletredeemableResponse {
	s.RedeemableAmount = &v
	return s
}

type QueryConsumecardGoodscreateresultRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 异步发布商品返回的查询ID。使用该ID查询发布结果。
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty" require:"true"`
}

func (s QueryConsumecardGoodscreateresultRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardGoodscreateresultRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardGoodscreateresultRequest) SetAuthToken(v string) *QueryConsumecardGoodscreateresultRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardGoodscreateresultRequest) SetProductInstanceId(v string) *QueryConsumecardGoodscreateresultRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardGoodscreateresultRequest) SetBaseRequest(v *BaseRequest) *QueryConsumecardGoodscreateresultRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryConsumecardGoodscreateresultRequest) SetRequestId(v string) *QueryConsumecardGoodscreateresultRequest {
	s.RequestId = &v
	return s
}

type QueryConsumecardGoodscreateresultResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 商品ID
	GoodsId *string `json:"goods_id,omitempty" xml:"goods_id,omitempty"`
}

func (s QueryConsumecardGoodscreateresultResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardGoodscreateresultResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardGoodscreateresultResponse) SetReqMsgId(v string) *QueryConsumecardGoodscreateresultResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardGoodscreateresultResponse) SetResultCode(v string) *QueryConsumecardGoodscreateresultResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardGoodscreateresultResponse) SetResultMsg(v string) *QueryConsumecardGoodscreateresultResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConsumecardGoodscreateresultResponse) SetGoodsId(v string) *QueryConsumecardGoodscreateresultResponse {
	s.GoodsId = &v
	return s
}

type QueryConsumecardGoodsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 商品ID
	GoodsId *string `json:"goods_id,omitempty" xml:"goods_id,omitempty" require:"true"`
}

func (s QueryConsumecardGoodsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardGoodsRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardGoodsRequest) SetAuthToken(v string) *QueryConsumecardGoodsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardGoodsRequest) SetProductInstanceId(v string) *QueryConsumecardGoodsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardGoodsRequest) SetBaseRequest(v *BaseRequest) *QueryConsumecardGoodsRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryConsumecardGoodsRequest) SetGoodsId(v string) *QueryConsumecardGoodsRequest {
	s.GoodsId = &v
	return s
}

type QueryConsumecardGoodsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 商品信息
	Goods *GoodsResponse `json:"goods,omitempty" xml:"goods,omitempty"`
}

func (s QueryConsumecardGoodsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardGoodsResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardGoodsResponse) SetReqMsgId(v string) *QueryConsumecardGoodsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardGoodsResponse) SetResultCode(v string) *QueryConsumecardGoodsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardGoodsResponse) SetResultMsg(v string) *QueryConsumecardGoodsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConsumecardGoodsResponse) SetGoods(v *GoodsResponse) *QueryConsumecardGoodsResponse {
	s.Goods = v
	return s
}

type ApplyConsumecardBillrefundRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 账单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言(不要超过500个字符)
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s ApplyConsumecardBillrefundRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyConsumecardBillrefundRequest) GoString() string {
	return s.String()
}

func (s *ApplyConsumecardBillrefundRequest) SetAuthToken(v string) *ApplyConsumecardBillrefundRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyConsumecardBillrefundRequest) SetProductInstanceId(v string) *ApplyConsumecardBillrefundRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyConsumecardBillrefundRequest) SetBaseRequest(v *BaseRequest) *ApplyConsumecardBillrefundRequest {
	s.BaseRequest = v
	return s
}

func (s *ApplyConsumecardBillrefundRequest) SetOrderId(v string) *ApplyConsumecardBillrefundRequest {
	s.OrderId = &v
	return s
}

func (s *ApplyConsumecardBillrefundRequest) SetRemark(v string) *ApplyConsumecardBillrefundRequest {
	s.Remark = &v
	return s
}

type ApplyConsumecardBillrefundResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ApplyConsumecardBillrefundResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyConsumecardBillrefundResponse) GoString() string {
	return s.String()
}

func (s *ApplyConsumecardBillrefundResponse) SetReqMsgId(v string) *ApplyConsumecardBillrefundResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyConsumecardBillrefundResponse) SetResultCode(v string) *ApplyConsumecardBillrefundResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyConsumecardBillrefundResponse) SetResultMsg(v string) *ApplyConsumecardBillrefundResponse {
	s.ResultMsg = &v
	return s
}

type QueryConsumecardPurchaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 交易ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
}

func (s QueryConsumecardPurchaseRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardPurchaseRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardPurchaseRequest) SetAuthToken(v string) *QueryConsumecardPurchaseRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardPurchaseRequest) SetProductInstanceId(v string) *QueryConsumecardPurchaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardPurchaseRequest) SetBaseRequest(v *BaseRequest) *QueryConsumecardPurchaseRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryConsumecardPurchaseRequest) SetOrderId(v string) *QueryConsumecardPurchaseRequest {
	s.OrderId = &v
	return s
}

type QueryConsumecardPurchaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易信息
	BlockInstruction *BlockInstruction `json:"block_instruction,omitempty" xml:"block_instruction,omitempty"`
}

func (s QueryConsumecardPurchaseResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardPurchaseResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardPurchaseResponse) SetReqMsgId(v string) *QueryConsumecardPurchaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardPurchaseResponse) SetResultCode(v string) *QueryConsumecardPurchaseResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardPurchaseResponse) SetResultMsg(v string) *QueryConsumecardPurchaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConsumecardPurchaseResponse) SetBlockInstruction(v *BlockInstruction) *QueryConsumecardPurchaseResponse {
	s.BlockInstruction = v
	return s
}

type QueryConsumecardBlockRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty" require:"true"`
	// 链ID，指定要获取的
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 代理查询区块信息，传入代理租户需有代理权限。接口会返回调用者和被代理租户能查看的所有交易信息。
	DelegatedTenantIds []*string `json:"delegated_tenant_ids,omitempty" xml:"delegated_tenant_ids,omitempty" type:"Repeated"`
}

func (s QueryConsumecardBlockRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardBlockRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardBlockRequest) SetAuthToken(v string) *QueryConsumecardBlockRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardBlockRequest) SetProductInstanceId(v string) *QueryConsumecardBlockRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardBlockRequest) SetBlockNumber(v int64) *QueryConsumecardBlockRequest {
	s.BlockNumber = &v
	return s
}

func (s *QueryConsumecardBlockRequest) SetChainId(v string) *QueryConsumecardBlockRequest {
	s.ChainId = &v
	return s
}

func (s *QueryConsumecardBlockRequest) SetDelegatedTenantIds(v []*string) *QueryConsumecardBlockRequest {
	s.DelegatedTenantIds = v
	return s
}

type QueryConsumecardBlockResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 区块信息
	Block *Block `json:"block,omitempty" xml:"block,omitempty"`
	// 区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty"`
	// 过滤后的交易数量
	FilteredTxCount *int64 `json:"filtered_tx_count,omitempty" xml:"filtered_tx_count,omitempty"`
	// 区块中交易总数
	TotalTxCount *int64 `json:"total_tx_count,omitempty" xml:"total_tx_count,omitempty"`
}

func (s QueryConsumecardBlockResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardBlockResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardBlockResponse) SetReqMsgId(v string) *QueryConsumecardBlockResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardBlockResponse) SetResultCode(v string) *QueryConsumecardBlockResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardBlockResponse) SetResultMsg(v string) *QueryConsumecardBlockResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConsumecardBlockResponse) SetBlock(v *Block) *QueryConsumecardBlockResponse {
	s.Block = v
	return s
}

func (s *QueryConsumecardBlockResponse) SetBlockNumber(v int64) *QueryConsumecardBlockResponse {
	s.BlockNumber = &v
	return s
}

func (s *QueryConsumecardBlockResponse) SetChainId(v string) *QueryConsumecardBlockResponse {
	s.ChainId = &v
	return s
}

func (s *QueryConsumecardBlockResponse) SetFilteredTxCount(v int64) *QueryConsumecardBlockResponse {
	s.FilteredTxCount = &v
	return s
}

func (s *QueryConsumecardBlockResponse) SetTotalTxCount(v int64) *QueryConsumecardBlockResponse {
	s.TotalTxCount = &v
	return s
}

type QueryConsumecardLastblocknumberRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
}

func (s QueryConsumecardLastblocknumberRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardLastblocknumberRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardLastblocknumberRequest) SetAuthToken(v string) *QueryConsumecardLastblocknumberRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardLastblocknumberRequest) SetProductInstanceId(v string) *QueryConsumecardLastblocknumberRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardLastblocknumberRequest) SetChainId(v string) *QueryConsumecardLastblocknumberRequest {
	s.ChainId = &v
	return s
}

type QueryConsumecardLastblocknumberResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 区块链最高区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s QueryConsumecardLastblocknumberResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardLastblocknumberResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardLastblocknumberResponse) SetReqMsgId(v string) *QueryConsumecardLastblocknumberResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardLastblocknumberResponse) SetResultCode(v string) *QueryConsumecardLastblocknumberResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardLastblocknumberResponse) SetResultMsg(v string) *QueryConsumecardLastblocknumberResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConsumecardLastblocknumberResponse) SetBlockNumber(v int64) *QueryConsumecardLastblocknumberResponse {
	s.BlockNumber = &v
	return s
}

type QueryConsumecardGoodsupdateresultRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 异步更新商品返回的查询ID。使用该ID查询更新结果。
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty" require:"true"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
}

func (s QueryConsumecardGoodsupdateresultRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardGoodsupdateresultRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardGoodsupdateresultRequest) SetAuthToken(v string) *QueryConsumecardGoodsupdateresultRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardGoodsupdateresultRequest) SetProductInstanceId(v string) *QueryConsumecardGoodsupdateresultRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardGoodsupdateresultRequest) SetRequestId(v string) *QueryConsumecardGoodsupdateresultRequest {
	s.RequestId = &v
	return s
}

func (s *QueryConsumecardGoodsupdateresultRequest) SetBaseRequest(v *BaseRequest) *QueryConsumecardGoodsupdateresultRequest {
	s.BaseRequest = v
	return s
}

type QueryConsumecardGoodsupdateresultResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s QueryConsumecardGoodsupdateresultResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardGoodsupdateresultResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardGoodsupdateresultResponse) SetReqMsgId(v string) *QueryConsumecardGoodsupdateresultResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardGoodsupdateresultResponse) SetResultCode(v string) *QueryConsumecardGoodsupdateresultResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardGoodsupdateresultResponse) SetResultMsg(v string) *QueryConsumecardGoodsupdateresultResponse {
	s.ResultMsg = &v
	return s
}

type CancelConsumecardSellerpurchaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 交易ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 附言
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s CancelConsumecardSellerpurchaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelConsumecardSellerpurchaseRequest) GoString() string {
	return s.String()
}

func (s *CancelConsumecardSellerpurchaseRequest) SetAuthToken(v string) *CancelConsumecardSellerpurchaseRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelConsumecardSellerpurchaseRequest) SetProductInstanceId(v string) *CancelConsumecardSellerpurchaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelConsumecardSellerpurchaseRequest) SetBaseRequest(v *BaseRequest) *CancelConsumecardSellerpurchaseRequest {
	s.BaseRequest = v
	return s
}

func (s *CancelConsumecardSellerpurchaseRequest) SetOrderId(v string) *CancelConsumecardSellerpurchaseRequest {
	s.OrderId = &v
	return s
}

func (s *CancelConsumecardSellerpurchaseRequest) SetRemark(v string) *CancelConsumecardSellerpurchaseRequest {
	s.Remark = &v
	return s
}

type CancelConsumecardSellerpurchaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CancelConsumecardSellerpurchaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelConsumecardSellerpurchaseResponse) GoString() string {
	return s.String()
}

func (s *CancelConsumecardSellerpurchaseResponse) SetReqMsgId(v string) *CancelConsumecardSellerpurchaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelConsumecardSellerpurchaseResponse) SetResultCode(v string) *CancelConsumecardSellerpurchaseResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelConsumecardSellerpurchaseResponse) SetResultMsg(v string) *CancelConsumecardSellerpurchaseResponse {
	s.ResultMsg = &v
	return s
}

type SetConsumecardCommissionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 分类id（ffaaaaabbbbbb）
	CategoryId *string `json:"category_id,omitempty" xml:"category_id,omitempty" require:"true"`
	// 手续费类型（0:全局，1:商户）
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 手续费归属的账户id,如果type为0 ，则该字段必须为空
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 手续费支出方（0.卖家，1.买家，2.平台）
	PayCommissionType *string `json:"pay_commission_type,omitempty" xml:"pay_commission_type,omitempty" require:"true"`
	// 手续费一级分账。最长为6条
	CommissionRules []*CommissionRule `json:"commission_rules,omitempty" xml:"commission_rules,omitempty" require:"true" type:"Repeated"`
}

func (s SetConsumecardCommissionRequest) String() string {
	return tea.Prettify(s)
}

func (s SetConsumecardCommissionRequest) GoString() string {
	return s.String()
}

func (s *SetConsumecardCommissionRequest) SetAuthToken(v string) *SetConsumecardCommissionRequest {
	s.AuthToken = &v
	return s
}

func (s *SetConsumecardCommissionRequest) SetProductInstanceId(v string) *SetConsumecardCommissionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetConsumecardCommissionRequest) SetBaseRequest(v *BaseRequest) *SetConsumecardCommissionRequest {
	s.BaseRequest = v
	return s
}

func (s *SetConsumecardCommissionRequest) SetCategoryId(v string) *SetConsumecardCommissionRequest {
	s.CategoryId = &v
	return s
}

func (s *SetConsumecardCommissionRequest) SetType(v int64) *SetConsumecardCommissionRequest {
	s.Type = &v
	return s
}

func (s *SetConsumecardCommissionRequest) SetAccountId(v string) *SetConsumecardCommissionRequest {
	s.AccountId = &v
	return s
}

func (s *SetConsumecardCommissionRequest) SetPayCommissionType(v string) *SetConsumecardCommissionRequest {
	s.PayCommissionType = &v
	return s
}

func (s *SetConsumecardCommissionRequest) SetCommissionRules(v []*CommissionRule) *SetConsumecardCommissionRequest {
	s.CommissionRules = v
	return s
}

type SetConsumecardCommissionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetConsumecardCommissionResponse) String() string {
	return tea.Prettify(s)
}

func (s SetConsumecardCommissionResponse) GoString() string {
	return s.String()
}

func (s *SetConsumecardCommissionResponse) SetReqMsgId(v string) *SetConsumecardCommissionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetConsumecardCommissionResponse) SetResultCode(v string) *SetConsumecardCommissionResponse {
	s.ResultCode = &v
	return s
}

func (s *SetConsumecardCommissionResponse) SetResultMsg(v string) *SetConsumecardCommissionResponse {
	s.ResultMsg = &v
	return s
}

type RemoveConsumecardCommissionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 手续费类型（0:全局，1:商户）
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 分类id（ffaaaaabbbbbb）
	CategoryId *string `json:"category_id,omitempty" xml:"category_id,omitempty" require:"true"`
	// 手续费归属的账户id,如果type为0 ，则该字段必须为空
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
}

func (s RemoveConsumecardCommissionRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveConsumecardCommissionRequest) GoString() string {
	return s.String()
}

func (s *RemoveConsumecardCommissionRequest) SetAuthToken(v string) *RemoveConsumecardCommissionRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveConsumecardCommissionRequest) SetProductInstanceId(v string) *RemoveConsumecardCommissionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RemoveConsumecardCommissionRequest) SetBaseRequest(v *BaseRequest) *RemoveConsumecardCommissionRequest {
	s.BaseRequest = v
	return s
}

func (s *RemoveConsumecardCommissionRequest) SetType(v int64) *RemoveConsumecardCommissionRequest {
	s.Type = &v
	return s
}

func (s *RemoveConsumecardCommissionRequest) SetCategoryId(v string) *RemoveConsumecardCommissionRequest {
	s.CategoryId = &v
	return s
}

func (s *RemoveConsumecardCommissionRequest) SetAccountId(v string) *RemoveConsumecardCommissionRequest {
	s.AccountId = &v
	return s
}

type RemoveConsumecardCommissionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RemoveConsumecardCommissionResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveConsumecardCommissionResponse) GoString() string {
	return s.String()
}

func (s *RemoveConsumecardCommissionResponse) SetReqMsgId(v string) *RemoveConsumecardCommissionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveConsumecardCommissionResponse) SetResultCode(v string) *RemoveConsumecardCommissionResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveConsumecardCommissionResponse) SetResultMsg(v string) *RemoveConsumecardCommissionResponse {
	s.ResultMsg = &v
	return s
}

type QueryConsumecardCommissionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 分类id（ffaaaaabbbbbb）
	CategoryId *string `json:"category_id,omitempty" xml:"category_id,omitempty" require:"true"`
	// 手续费类型（0:全局，1:商户）
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 手续费归属的账户id,如果type为0 ，则该字段必须为空
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
}

func (s QueryConsumecardCommissionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardCommissionRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardCommissionRequest) SetAuthToken(v string) *QueryConsumecardCommissionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardCommissionRequest) SetProductInstanceId(v string) *QueryConsumecardCommissionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardCommissionRequest) SetBaseRequest(v *BaseRequest) *QueryConsumecardCommissionRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryConsumecardCommissionRequest) SetCategoryId(v string) *QueryConsumecardCommissionRequest {
	s.CategoryId = &v
	return s
}

func (s *QueryConsumecardCommissionRequest) SetType(v int64) *QueryConsumecardCommissionRequest {
	s.Type = &v
	return s
}

func (s *QueryConsumecardCommissionRequest) SetAccountId(v string) *QueryConsumecardCommissionRequest {
	s.AccountId = &v
	return s
}

type QueryConsumecardCommissionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 手续费规则结果
	CommissionRules []*CommissionRuleResponse `json:"commission_rules,omitempty" xml:"commission_rules,omitempty" type:"Repeated"`
	// 分类id（ffaaaaabbbbbb，如果存在则直接更新）
	CategoryId *string `json:"category_id,omitempty" xml:"category_id,omitempty"`
	// 手续费类型（0:全局，1:商户）
	Type *int64 `json:"type,omitempty" xml:"type,omitempty"`
	// 手续费归属的账户id,如果type为0 ，则该字段必须为空
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 手续费支出方（0.卖家，1.买家，2.平台）
	PayCommissionType *string `json:"pay_commission_type,omitempty" xml:"pay_commission_type,omitempty"`
}

func (s QueryConsumecardCommissionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardCommissionResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardCommissionResponse) SetReqMsgId(v string) *QueryConsumecardCommissionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardCommissionResponse) SetResultCode(v string) *QueryConsumecardCommissionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardCommissionResponse) SetResultMsg(v string) *QueryConsumecardCommissionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConsumecardCommissionResponse) SetCommissionRules(v []*CommissionRuleResponse) *QueryConsumecardCommissionResponse {
	s.CommissionRules = v
	return s
}

func (s *QueryConsumecardCommissionResponse) SetCategoryId(v string) *QueryConsumecardCommissionResponse {
	s.CategoryId = &v
	return s
}

func (s *QueryConsumecardCommissionResponse) SetType(v int64) *QueryConsumecardCommissionResponse {
	s.Type = &v
	return s
}

func (s *QueryConsumecardCommissionResponse) SetAccountId(v string) *QueryConsumecardCommissionResponse {
	s.AccountId = &v
	return s
}

func (s *QueryConsumecardCommissionResponse) SetPayCommissionType(v string) *QueryConsumecardCommissionResponse {
	s.PayCommissionType = &v
	return s
}

type SetConsumecardCommissionmanagerRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 手续费管理员账户
	SetAccountId *string `json:"set_account_id,omitempty" xml:"set_account_id,omitempty"`
}

func (s SetConsumecardCommissionmanagerRequest) String() string {
	return tea.Prettify(s)
}

func (s SetConsumecardCommissionmanagerRequest) GoString() string {
	return s.String()
}

func (s *SetConsumecardCommissionmanagerRequest) SetAuthToken(v string) *SetConsumecardCommissionmanagerRequest {
	s.AuthToken = &v
	return s
}

func (s *SetConsumecardCommissionmanagerRequest) SetProductInstanceId(v string) *SetConsumecardCommissionmanagerRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetConsumecardCommissionmanagerRequest) SetBaseRequest(v *BaseRequest) *SetConsumecardCommissionmanagerRequest {
	s.BaseRequest = v
	return s
}

func (s *SetConsumecardCommissionmanagerRequest) SetSetAccountId(v string) *SetConsumecardCommissionmanagerRequest {
	s.SetAccountId = &v
	return s
}

type SetConsumecardCommissionmanagerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetConsumecardCommissionmanagerResponse) String() string {
	return tea.Prettify(s)
}

func (s SetConsumecardCommissionmanagerResponse) GoString() string {
	return s.String()
}

func (s *SetConsumecardCommissionmanagerResponse) SetReqMsgId(v string) *SetConsumecardCommissionmanagerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetConsumecardCommissionmanagerResponse) SetResultCode(v string) *SetConsumecardCommissionmanagerResponse {
	s.ResultCode = &v
	return s
}

func (s *SetConsumecardCommissionmanagerResponse) SetResultMsg(v string) *SetConsumecardCommissionmanagerResponse {
	s.ResultMsg = &v
	return s
}

type SetConsumecardGoodsstatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 商品ID
	GoodsId *string `json:"goods_id,omitempty" xml:"goods_id,omitempty" require:"true"`
	// 商品状态：0上线，1下线
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s SetConsumecardGoodsstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s SetConsumecardGoodsstatusRequest) GoString() string {
	return s.String()
}

func (s *SetConsumecardGoodsstatusRequest) SetAuthToken(v string) *SetConsumecardGoodsstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *SetConsumecardGoodsstatusRequest) SetProductInstanceId(v string) *SetConsumecardGoodsstatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetConsumecardGoodsstatusRequest) SetBaseRequest(v *BaseRequest) *SetConsumecardGoodsstatusRequest {
	s.BaseRequest = v
	return s
}

func (s *SetConsumecardGoodsstatusRequest) SetGoodsId(v string) *SetConsumecardGoodsstatusRequest {
	s.GoodsId = &v
	return s
}

func (s *SetConsumecardGoodsstatusRequest) SetStatus(v int64) *SetConsumecardGoodsstatusRequest {
	s.Status = &v
	return s
}

type SetConsumecardGoodsstatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetConsumecardGoodsstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s SetConsumecardGoodsstatusResponse) GoString() string {
	return s.String()
}

func (s *SetConsumecardGoodsstatusResponse) SetReqMsgId(v string) *SetConsumecardGoodsstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetConsumecardGoodsstatusResponse) SetResultCode(v string) *SetConsumecardGoodsstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *SetConsumecardGoodsstatusResponse) SetResultMsg(v string) *SetConsumecardGoodsstatusResponse {
	s.ResultMsg = &v
	return s
}

type CreateConsumecardReceiptcontractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求对象
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 合同编号，纯数字
	ContractNumber *string `json:"contract_number,omitempty" xml:"contract_number,omitempty" require:"true"`
}

func (s CreateConsumecardReceiptcontractRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumecardReceiptcontractRequest) GoString() string {
	return s.String()
}

func (s *CreateConsumecardReceiptcontractRequest) SetAuthToken(v string) *CreateConsumecardReceiptcontractRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateConsumecardReceiptcontractRequest) SetProductInstanceId(v string) *CreateConsumecardReceiptcontractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateConsumecardReceiptcontractRequest) SetBaseRequest(v *BaseRequest) *CreateConsumecardReceiptcontractRequest {
	s.BaseRequest = v
	return s
}

func (s *CreateConsumecardReceiptcontractRequest) SetContractNumber(v string) *CreateConsumecardReceiptcontractRequest {
	s.ContractNumber = &v
	return s
}

type CreateConsumecardReceiptcontractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateConsumecardReceiptcontractResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumecardReceiptcontractResponse) GoString() string {
	return s.String()
}

func (s *CreateConsumecardReceiptcontractResponse) SetReqMsgId(v string) *CreateConsumecardReceiptcontractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateConsumecardReceiptcontractResponse) SetResultCode(v string) *CreateConsumecardReceiptcontractResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateConsumecardReceiptcontractResponse) SetResultMsg(v string) *CreateConsumecardReceiptcontractResponse {
	s.ResultMsg = &v
	return s
}

type RemoveConsumecardReceiptcontractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础信息对象
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 合同编号，纯数字
	ContractNumber *string `json:"contract_number,omitempty" xml:"contract_number,omitempty" require:"true"`
}

func (s RemoveConsumecardReceiptcontractRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveConsumecardReceiptcontractRequest) GoString() string {
	return s.String()
}

func (s *RemoveConsumecardReceiptcontractRequest) SetAuthToken(v string) *RemoveConsumecardReceiptcontractRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveConsumecardReceiptcontractRequest) SetProductInstanceId(v string) *RemoveConsumecardReceiptcontractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RemoveConsumecardReceiptcontractRequest) SetBaseRequest(v *BaseRequest) *RemoveConsumecardReceiptcontractRequest {
	s.BaseRequest = v
	return s
}

func (s *RemoveConsumecardReceiptcontractRequest) SetContractNumber(v string) *RemoveConsumecardReceiptcontractRequest {
	s.ContractNumber = &v
	return s
}

type RemoveConsumecardReceiptcontractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RemoveConsumecardReceiptcontractResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveConsumecardReceiptcontractResponse) GoString() string {
	return s.String()
}

func (s *RemoveConsumecardReceiptcontractResponse) SetReqMsgId(v string) *RemoveConsumecardReceiptcontractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveConsumecardReceiptcontractResponse) SetResultCode(v string) *RemoveConsumecardReceiptcontractResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveConsumecardReceiptcontractResponse) SetResultMsg(v string) *RemoveConsumecardReceiptcontractResponse {
	s.ResultMsg = &v
	return s
}

type QueryConsumecardReceiptcontractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求对象
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 合同编号，纯数字
	ContractNumber *string `json:"contract_number,omitempty" xml:"contract_number,omitempty" require:"true"`
}

func (s QueryConsumecardReceiptcontractRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardReceiptcontractRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardReceiptcontractRequest) SetAuthToken(v string) *QueryConsumecardReceiptcontractRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardReceiptcontractRequest) SetProductInstanceId(v string) *QueryConsumecardReceiptcontractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardReceiptcontractRequest) SetBaseRequest(v *BaseRequest) *QueryConsumecardReceiptcontractRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryConsumecardReceiptcontractRequest) SetContractNumber(v string) *QueryConsumecardReceiptcontractRequest {
	s.ContractNumber = &v
	return s
}

type QueryConsumecardReceiptcontractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 签约ID= platform_tenant_id+product_code+certification_id+sales_plan(分库分表路由)
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty"`
	// 平台租户ID
	PlatformTenantId *string `json:"platform_tenant_id,omitempty" xml:"platform_tenant_id,omitempty"`
	// 场景码(需要申请)
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty"`
	// 认证平台ID，本期支付宝用户ID（分库分表路由字段）
	CertificationId *string `json:"certification_id,omitempty" xml:"certification_id,omitempty"`
	// 合同编号
	ContractNumber *string `json:"contract_number,omitempty" xml:"contract_number,omitempty"`
	// 证件编号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty"`
	// 证件类型
	IdType *int64 `json:"id_type,omitempty" xml:"id_type,omitempty"`
	// 用户姓名/企业名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 客户编号（链上账号）
	//
	// 已经创建成功的链上账户
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 客户编号（业务系统）
	//
	// 平台业务系统IP
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	// 签约状态
	//
	// 0：未签约 1：已签约 2：已解约（主动解约、过期解约）
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 签约日期
	//
	SignDate *string `json:"sign_date,omitempty" xml:"sign_date,omitempty"`
	// 解约日期
	//
	//
	CancelDate *string `json:"cancel_date,omitempty" xml:"cancel_date,omitempty"`
}

func (s QueryConsumecardReceiptcontractResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardReceiptcontractResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardReceiptcontractResponse) SetReqMsgId(v string) *QueryConsumecardReceiptcontractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardReceiptcontractResponse) SetResultCode(v string) *QueryConsumecardReceiptcontractResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardReceiptcontractResponse) SetResultMsg(v string) *QueryConsumecardReceiptcontractResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConsumecardReceiptcontractResponse) SetUid(v string) *QueryConsumecardReceiptcontractResponse {
	s.Uid = &v
	return s
}

func (s *QueryConsumecardReceiptcontractResponse) SetPlatformTenantId(v string) *QueryConsumecardReceiptcontractResponse {
	s.PlatformTenantId = &v
	return s
}

func (s *QueryConsumecardReceiptcontractResponse) SetProductCode(v string) *QueryConsumecardReceiptcontractResponse {
	s.ProductCode = &v
	return s
}

func (s *QueryConsumecardReceiptcontractResponse) SetCertificationId(v string) *QueryConsumecardReceiptcontractResponse {
	s.CertificationId = &v
	return s
}

func (s *QueryConsumecardReceiptcontractResponse) SetContractNumber(v string) *QueryConsumecardReceiptcontractResponse {
	s.ContractNumber = &v
	return s
}

func (s *QueryConsumecardReceiptcontractResponse) SetIdNumber(v string) *QueryConsumecardReceiptcontractResponse {
	s.IdNumber = &v
	return s
}

func (s *QueryConsumecardReceiptcontractResponse) SetIdType(v int64) *QueryConsumecardReceiptcontractResponse {
	s.IdType = &v
	return s
}

func (s *QueryConsumecardReceiptcontractResponse) SetName(v string) *QueryConsumecardReceiptcontractResponse {
	s.Name = &v
	return s
}

func (s *QueryConsumecardReceiptcontractResponse) SetAccountId(v string) *QueryConsumecardReceiptcontractResponse {
	s.AccountId = &v
	return s
}

func (s *QueryConsumecardReceiptcontractResponse) SetUserId(v string) *QueryConsumecardReceiptcontractResponse {
	s.UserId = &v
	return s
}

func (s *QueryConsumecardReceiptcontractResponse) SetStatus(v int64) *QueryConsumecardReceiptcontractResponse {
	s.Status = &v
	return s
}

func (s *QueryConsumecardReceiptcontractResponse) SetSignDate(v string) *QueryConsumecardReceiptcontractResponse {
	s.SignDate = &v
	return s
}

func (s *QueryConsumecardReceiptcontractResponse) SetCancelDate(v string) *QueryConsumecardReceiptcontractResponse {
	s.CancelDate = &v
	return s
}

type CreateConsumecardBillingcontractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求结构
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 购买数字商品服务平台的租户ID
	PlatformTenantId *string `json:"platform_tenant_id,omitempty" xml:"platform_tenant_id,omitempty" require:"true"`
	// 认证平台ID 本期支付宝用户ID
	CertificationId *string `json:"certification_id,omitempty" xml:"certification_id,omitempty" require:"true"`
	// 企业名称 企业营业执照名称
	CompanyName *string `json:"company_name,omitempty" xml:"company_name,omitempty" require:"true"`
	// 企业简称 默认企业营业执照名称，可自定义
	CompanyShortName *string `json:"company_short_name,omitempty" xml:"company_short_name,omitempty" require:"true"`
	// 身份信息 金融机构/非金融机构
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// 统一信用社会代码
	Usci *string `json:"usci,omitempty" xml:"usci,omitempty" require:"true"`
	// 客户编号（业务系统） 平台业务系统IP
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 营业执照地址
	Address *string `json:"address,omitempty" xml:"address,omitempty" require:"true"`
	// 说明商家收款原因-字数中文500字以内（例如ETC服务,加油卡服务）
	ServiceContent *string `json:"service_content,omitempty" xml:"service_content,omitempty" require:"true"`
}

func (s CreateConsumecardBillingcontractRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumecardBillingcontractRequest) GoString() string {
	return s.String()
}

func (s *CreateConsumecardBillingcontractRequest) SetAuthToken(v string) *CreateConsumecardBillingcontractRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateConsumecardBillingcontractRequest) SetProductInstanceId(v string) *CreateConsumecardBillingcontractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateConsumecardBillingcontractRequest) SetBaseRequest(v *BaseRequest) *CreateConsumecardBillingcontractRequest {
	s.BaseRequest = v
	return s
}

func (s *CreateConsumecardBillingcontractRequest) SetPlatformTenantId(v string) *CreateConsumecardBillingcontractRequest {
	s.PlatformTenantId = &v
	return s
}

func (s *CreateConsumecardBillingcontractRequest) SetCertificationId(v string) *CreateConsumecardBillingcontractRequest {
	s.CertificationId = &v
	return s
}

func (s *CreateConsumecardBillingcontractRequest) SetCompanyName(v string) *CreateConsumecardBillingcontractRequest {
	s.CompanyName = &v
	return s
}

func (s *CreateConsumecardBillingcontractRequest) SetCompanyShortName(v string) *CreateConsumecardBillingcontractRequest {
	s.CompanyShortName = &v
	return s
}

func (s *CreateConsumecardBillingcontractRequest) SetIdentity(v string) *CreateConsumecardBillingcontractRequest {
	s.Identity = &v
	return s
}

func (s *CreateConsumecardBillingcontractRequest) SetUsci(v string) *CreateConsumecardBillingcontractRequest {
	s.Usci = &v
	return s
}

func (s *CreateConsumecardBillingcontractRequest) SetUserId(v string) *CreateConsumecardBillingcontractRequest {
	s.UserId = &v
	return s
}

func (s *CreateConsumecardBillingcontractRequest) SetAddress(v string) *CreateConsumecardBillingcontractRequest {
	s.Address = &v
	return s
}

func (s *CreateConsumecardBillingcontractRequest) SetServiceContent(v string) *CreateConsumecardBillingcontractRequest {
	s.ServiceContent = &v
	return s
}

type CreateConsumecardBillingcontractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateConsumecardBillingcontractResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumecardBillingcontractResponse) GoString() string {
	return s.String()
}

func (s *CreateConsumecardBillingcontractResponse) SetReqMsgId(v string) *CreateConsumecardBillingcontractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateConsumecardBillingcontractResponse) SetResultCode(v string) *CreateConsumecardBillingcontractResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateConsumecardBillingcontractResponse) SetResultMsg(v string) *CreateConsumecardBillingcontractResponse {
	s.ResultMsg = &v
	return s
}

type RemoveConsumecardBillingcontractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求对象
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 认证平台ID 本期支付宝用户ID
	CertificationId *string `json:"certification_id,omitempty" xml:"certification_id,omitempty" require:"true"`
}

func (s RemoveConsumecardBillingcontractRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveConsumecardBillingcontractRequest) GoString() string {
	return s.String()
}

func (s *RemoveConsumecardBillingcontractRequest) SetAuthToken(v string) *RemoveConsumecardBillingcontractRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveConsumecardBillingcontractRequest) SetProductInstanceId(v string) *RemoveConsumecardBillingcontractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RemoveConsumecardBillingcontractRequest) SetBaseRequest(v *BaseRequest) *RemoveConsumecardBillingcontractRequest {
	s.BaseRequest = v
	return s
}

func (s *RemoveConsumecardBillingcontractRequest) SetCertificationId(v string) *RemoveConsumecardBillingcontractRequest {
	s.CertificationId = &v
	return s
}

type RemoveConsumecardBillingcontractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RemoveConsumecardBillingcontractResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveConsumecardBillingcontractResponse) GoString() string {
	return s.String()
}

func (s *RemoveConsumecardBillingcontractResponse) SetReqMsgId(v string) *RemoveConsumecardBillingcontractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveConsumecardBillingcontractResponse) SetResultCode(v string) *RemoveConsumecardBillingcontractResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveConsumecardBillingcontractResponse) SetResultMsg(v string) *RemoveConsumecardBillingcontractResponse {
	s.ResultMsg = &v
	return s
}

type QueryConsumecardBillingcontractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求结构
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 认证平台ID 本期支付宝用户ID
	CertificationId *string `json:"certification_id,omitempty" xml:"certification_id,omitempty" require:"true"`
}

func (s QueryConsumecardBillingcontractRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardBillingcontractRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardBillingcontractRequest) SetAuthToken(v string) *QueryConsumecardBillingcontractRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardBillingcontractRequest) SetProductInstanceId(v string) *QueryConsumecardBillingcontractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardBillingcontractRequest) SetBaseRequest(v *BaseRequest) *QueryConsumecardBillingcontractRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryConsumecardBillingcontractRequest) SetCertificationId(v string) *QueryConsumecardBillingcontractRequest {
	s.CertificationId = &v
	return s
}

type QueryConsumecardBillingcontractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 基础响应对象
	BaseResponse *BaseResponseData `json:"base_response,omitempty" xml:"base_response,omitempty"`
	// 商家名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 商家链上账户ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 认证平台ID 例如：支付宝用户ID
	CertificationId *string `json:"certification_id,omitempty" xml:"certification_id,omitempty"`
	// 场景码(需要申请)
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty"`
	// 签约时间
	SignTime *string `json:"sign_time,omitempty" xml:"sign_time,omitempty"`
	// 解约时间
	InvalidTime *string `json:"invalid_time,omitempty" xml:"invalid_time,omitempty"`
	// 签约链接
	ArrangementUrl *string `json:"arrangement_url,omitempty" xml:"arrangement_url,omitempty"`
	// 签约状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s QueryConsumecardBillingcontractResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardBillingcontractResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardBillingcontractResponse) SetReqMsgId(v string) *QueryConsumecardBillingcontractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardBillingcontractResponse) SetResultCode(v string) *QueryConsumecardBillingcontractResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardBillingcontractResponse) SetResultMsg(v string) *QueryConsumecardBillingcontractResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConsumecardBillingcontractResponse) SetBaseResponse(v *BaseResponseData) *QueryConsumecardBillingcontractResponse {
	s.BaseResponse = v
	return s
}

func (s *QueryConsumecardBillingcontractResponse) SetName(v string) *QueryConsumecardBillingcontractResponse {
	s.Name = &v
	return s
}

func (s *QueryConsumecardBillingcontractResponse) SetAccountId(v string) *QueryConsumecardBillingcontractResponse {
	s.AccountId = &v
	return s
}

func (s *QueryConsumecardBillingcontractResponse) SetCertificationId(v string) *QueryConsumecardBillingcontractResponse {
	s.CertificationId = &v
	return s
}

func (s *QueryConsumecardBillingcontractResponse) SetProductCode(v string) *QueryConsumecardBillingcontractResponse {
	s.ProductCode = &v
	return s
}

func (s *QueryConsumecardBillingcontractResponse) SetSignTime(v string) *QueryConsumecardBillingcontractResponse {
	s.SignTime = &v
	return s
}

func (s *QueryConsumecardBillingcontractResponse) SetInvalidTime(v string) *QueryConsumecardBillingcontractResponse {
	s.InvalidTime = &v
	return s
}

func (s *QueryConsumecardBillingcontractResponse) SetArrangementUrl(v string) *QueryConsumecardBillingcontractResponse {
	s.ArrangementUrl = &v
	return s
}

func (s *QueryConsumecardBillingcontractResponse) SetStatus(v int64) *QueryConsumecardBillingcontractResponse {
	s.Status = &v
	return s
}

type AddConsumecardCommissionpartyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求对象
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 收费规则归属方
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 手续费规则
	CommissionRule *CommissionRule `json:"commission_rule,omitempty" xml:"commission_rule,omitempty" require:"true"`
	// 手续费类型（0:全局，1:商户）
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 分类id（ffaaaaabbbbbb）
	CategoryId *string `json:"category_id,omitempty" xml:"category_id,omitempty" require:"true"`
}

func (s AddConsumecardCommissionpartyRequest) String() string {
	return tea.Prettify(s)
}

func (s AddConsumecardCommissionpartyRequest) GoString() string {
	return s.String()
}

func (s *AddConsumecardCommissionpartyRequest) SetAuthToken(v string) *AddConsumecardCommissionpartyRequest {
	s.AuthToken = &v
	return s
}

func (s *AddConsumecardCommissionpartyRequest) SetProductInstanceId(v string) *AddConsumecardCommissionpartyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddConsumecardCommissionpartyRequest) SetBaseRequest(v *BaseRequest) *AddConsumecardCommissionpartyRequest {
	s.BaseRequest = v
	return s
}

func (s *AddConsumecardCommissionpartyRequest) SetAccountId(v string) *AddConsumecardCommissionpartyRequest {
	s.AccountId = &v
	return s
}

func (s *AddConsumecardCommissionpartyRequest) SetCommissionRule(v *CommissionRule) *AddConsumecardCommissionpartyRequest {
	s.CommissionRule = v
	return s
}

func (s *AddConsumecardCommissionpartyRequest) SetType(v int64) *AddConsumecardCommissionpartyRequest {
	s.Type = &v
	return s
}

func (s *AddConsumecardCommissionpartyRequest) SetCategoryId(v string) *AddConsumecardCommissionpartyRequest {
	s.CategoryId = &v
	return s
}

type AddConsumecardCommissionpartyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddConsumecardCommissionpartyResponse) String() string {
	return tea.Prettify(s)
}

func (s AddConsumecardCommissionpartyResponse) GoString() string {
	return s.String()
}

func (s *AddConsumecardCommissionpartyResponse) SetReqMsgId(v string) *AddConsumecardCommissionpartyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddConsumecardCommissionpartyResponse) SetResultCode(v string) *AddConsumecardCommissionpartyResponse {
	s.ResultCode = &v
	return s
}

func (s *AddConsumecardCommissionpartyResponse) SetResultMsg(v string) *AddConsumecardCommissionpartyResponse {
	s.ResultMsg = &v
	return s
}

type RemoveConsumecardCommissionpartyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求结构
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 分类id（ffaaaaabbbbbb）
	CategoryId *string `json:"category_id,omitempty" xml:"category_id,omitempty" require:"true"`
	// 手续费类型（0:全局，1:商户）
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 一级分账方accountId
	RuleAccountId *string `json:"rule_account_id,omitempty" xml:"rule_account_id,omitempty" require:"true"`
	// 手续费归属的账户id,如果type为0 ，则该字段必须为空
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
}

func (s RemoveConsumecardCommissionpartyRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveConsumecardCommissionpartyRequest) GoString() string {
	return s.String()
}

func (s *RemoveConsumecardCommissionpartyRequest) SetAuthToken(v string) *RemoveConsumecardCommissionpartyRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveConsumecardCommissionpartyRequest) SetProductInstanceId(v string) *RemoveConsumecardCommissionpartyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RemoveConsumecardCommissionpartyRequest) SetBaseRequest(v *BaseRequest) *RemoveConsumecardCommissionpartyRequest {
	s.BaseRequest = v
	return s
}

func (s *RemoveConsumecardCommissionpartyRequest) SetCategoryId(v string) *RemoveConsumecardCommissionpartyRequest {
	s.CategoryId = &v
	return s
}

func (s *RemoveConsumecardCommissionpartyRequest) SetType(v int64) *RemoveConsumecardCommissionpartyRequest {
	s.Type = &v
	return s
}

func (s *RemoveConsumecardCommissionpartyRequest) SetRuleAccountId(v string) *RemoveConsumecardCommissionpartyRequest {
	s.RuleAccountId = &v
	return s
}

func (s *RemoveConsumecardCommissionpartyRequest) SetAccountId(v string) *RemoveConsumecardCommissionpartyRequest {
	s.AccountId = &v
	return s
}

type RemoveConsumecardCommissionpartyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RemoveConsumecardCommissionpartyResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveConsumecardCommissionpartyResponse) GoString() string {
	return s.String()
}

func (s *RemoveConsumecardCommissionpartyResponse) SetReqMsgId(v string) *RemoveConsumecardCommissionpartyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveConsumecardCommissionpartyResponse) SetResultCode(v string) *RemoveConsumecardCommissionpartyResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveConsumecardCommissionpartyResponse) SetResultMsg(v string) *RemoveConsumecardCommissionpartyResponse {
	s.ResultMsg = &v
	return s
}

type AddConsumecardCommissionperiodRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础结构体
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 分类id（ffaaaaabbbbbb）
	CategoryId *string `json:"category_id,omitempty" xml:"category_id,omitempty" require:"true"`
	// 手续费类型（0:全局，1:商户）
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 手续费归属的账户id,如果type为0 ，则该字段必须为空
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 一级分账方
	RuleAccountId *string `json:"rule_account_id,omitempty" xml:"rule_account_id,omitempty" require:"true"`
	// 手续费周期
	CommissionPeriod *CommissionPeriod `json:"commission_period,omitempty" xml:"commission_period,omitempty" require:"true"`
}

func (s AddConsumecardCommissionperiodRequest) String() string {
	return tea.Prettify(s)
}

func (s AddConsumecardCommissionperiodRequest) GoString() string {
	return s.String()
}

func (s *AddConsumecardCommissionperiodRequest) SetAuthToken(v string) *AddConsumecardCommissionperiodRequest {
	s.AuthToken = &v
	return s
}

func (s *AddConsumecardCommissionperiodRequest) SetProductInstanceId(v string) *AddConsumecardCommissionperiodRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddConsumecardCommissionperiodRequest) SetBaseRequest(v *BaseRequest) *AddConsumecardCommissionperiodRequest {
	s.BaseRequest = v
	return s
}

func (s *AddConsumecardCommissionperiodRequest) SetCategoryId(v string) *AddConsumecardCommissionperiodRequest {
	s.CategoryId = &v
	return s
}

func (s *AddConsumecardCommissionperiodRequest) SetType(v int64) *AddConsumecardCommissionperiodRequest {
	s.Type = &v
	return s
}

func (s *AddConsumecardCommissionperiodRequest) SetAccountId(v string) *AddConsumecardCommissionperiodRequest {
	s.AccountId = &v
	return s
}

func (s *AddConsumecardCommissionperiodRequest) SetRuleAccountId(v string) *AddConsumecardCommissionperiodRequest {
	s.RuleAccountId = &v
	return s
}

func (s *AddConsumecardCommissionperiodRequest) SetCommissionPeriod(v *CommissionPeriod) *AddConsumecardCommissionperiodRequest {
	s.CommissionPeriod = v
	return s
}

type AddConsumecardCommissionperiodResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddConsumecardCommissionperiodResponse) String() string {
	return tea.Prettify(s)
}

func (s AddConsumecardCommissionperiodResponse) GoString() string {
	return s.String()
}

func (s *AddConsumecardCommissionperiodResponse) SetReqMsgId(v string) *AddConsumecardCommissionperiodResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddConsumecardCommissionperiodResponse) SetResultCode(v string) *AddConsumecardCommissionperiodResponse {
	s.ResultCode = &v
	return s
}

func (s *AddConsumecardCommissionperiodResponse) SetResultMsg(v string) *AddConsumecardCommissionperiodResponse {
	s.ResultMsg = &v
	return s
}

type RemoveConsumecardCommissionperiodRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求对象
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 商品分类id（ffaaaaabbbbbb）
	CategoryId *string `json:"category_id,omitempty" xml:"category_id,omitempty" require:"true"`
	// 手续费归属的账户id,如果type为0 ，则该字段必须为空
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 一级分账方
	RuleAccountId *string `json:"rule_account_id,omitempty" xml:"rule_account_id,omitempty" require:"true"`
	// 手续费类型（0:全局，1:商户）
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 手续费开始时间,用于查找去除的手续费（无结束时间）
	StartTimeMills *int64 `json:"start_time_mills,omitempty" xml:"start_time_mills,omitempty" require:"true"`
}

func (s RemoveConsumecardCommissionperiodRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveConsumecardCommissionperiodRequest) GoString() string {
	return s.String()
}

func (s *RemoveConsumecardCommissionperiodRequest) SetAuthToken(v string) *RemoveConsumecardCommissionperiodRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveConsumecardCommissionperiodRequest) SetProductInstanceId(v string) *RemoveConsumecardCommissionperiodRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RemoveConsumecardCommissionperiodRequest) SetBaseRequest(v *BaseRequest) *RemoveConsumecardCommissionperiodRequest {
	s.BaseRequest = v
	return s
}

func (s *RemoveConsumecardCommissionperiodRequest) SetCategoryId(v string) *RemoveConsumecardCommissionperiodRequest {
	s.CategoryId = &v
	return s
}

func (s *RemoveConsumecardCommissionperiodRequest) SetAccountId(v string) *RemoveConsumecardCommissionperiodRequest {
	s.AccountId = &v
	return s
}

func (s *RemoveConsumecardCommissionperiodRequest) SetRuleAccountId(v string) *RemoveConsumecardCommissionperiodRequest {
	s.RuleAccountId = &v
	return s
}

func (s *RemoveConsumecardCommissionperiodRequest) SetType(v int64) *RemoveConsumecardCommissionperiodRequest {
	s.Type = &v
	return s
}

func (s *RemoveConsumecardCommissionperiodRequest) SetStartTimeMills(v int64) *RemoveConsumecardCommissionperiodRequest {
	s.StartTimeMills = &v
	return s
}

type RemoveConsumecardCommissionperiodResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RemoveConsumecardCommissionperiodResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveConsumecardCommissionperiodResponse) GoString() string {
	return s.String()
}

func (s *RemoveConsumecardCommissionperiodResponse) SetReqMsgId(v string) *RemoveConsumecardCommissionperiodResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveConsumecardCommissionperiodResponse) SetResultCode(v string) *RemoveConsumecardCommissionperiodResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveConsumecardCommissionperiodResponse) SetResultMsg(v string) *RemoveConsumecardCommissionperiodResponse {
	s.ResultMsg = &v
	return s
}

type QueryConsumecardCounterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础结构体
	BaseRequest *BaseRequest `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 查询的类别（0 商家，1 商品）
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 查询的id（type：0 为accountId 1为goodsId）
	QueryId *string `json:"query_id,omitempty" xml:"query_id,omitempty" require:"true"`
	// 查询的时间戳对应的counter
	QueryTimeInMills *int64 `json:"query_time_in_mills,omitempty" xml:"query_time_in_mills,omitempty" require:"true"`
}

func (s QueryConsumecardCounterRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardCounterRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardCounterRequest) SetAuthToken(v string) *QueryConsumecardCounterRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardCounterRequest) SetProductInstanceId(v string) *QueryConsumecardCounterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardCounterRequest) SetBaseRequest(v *BaseRequest) *QueryConsumecardCounterRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryConsumecardCounterRequest) SetType(v int64) *QueryConsumecardCounterRequest {
	s.Type = &v
	return s
}

func (s *QueryConsumecardCounterRequest) SetQueryId(v string) *QueryConsumecardCounterRequest {
	s.QueryId = &v
	return s
}

func (s *QueryConsumecardCounterRequest) SetQueryTimeInMills(v int64) *QueryConsumecardCounterRequest {
	s.QueryTimeInMills = &v
	return s
}

type QueryConsumecardCounterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询的类别（0 商家，1 商品）
	Type *int64 `json:"type,omitempty" xml:"type,omitempty"`
	// 查询的id（type：0 为accountId 1为goodsId）
	QueryId *string `json:"query_id,omitempty" xml:"query_id,omitempty"`
	// 日统计数据
	DayCounter *CounterData `json:"day_counter,omitempty" xml:"day_counter,omitempty"`
	// 月统计数据
	MonthCounter *CounterData `json:"month_counter,omitempty" xml:"month_counter,omitempty"`
	// 年统计数据
	YearCounter *CounterData `json:"year_counter,omitempty" xml:"year_counter,omitempty"`
	// 季度统计数据
	QuarterlyCounter *CounterData `json:"quarterly_counter,omitempty" xml:"quarterly_counter,omitempty"`
}

func (s QueryConsumecardCounterResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardCounterResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardCounterResponse) SetReqMsgId(v string) *QueryConsumecardCounterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardCounterResponse) SetResultCode(v string) *QueryConsumecardCounterResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardCounterResponse) SetResultMsg(v string) *QueryConsumecardCounterResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConsumecardCounterResponse) SetType(v int64) *QueryConsumecardCounterResponse {
	s.Type = &v
	return s
}

func (s *QueryConsumecardCounterResponse) SetQueryId(v string) *QueryConsumecardCounterResponse {
	s.QueryId = &v
	return s
}

func (s *QueryConsumecardCounterResponse) SetDayCounter(v *CounterData) *QueryConsumecardCounterResponse {
	s.DayCounter = v
	return s
}

func (s *QueryConsumecardCounterResponse) SetMonthCounter(v *CounterData) *QueryConsumecardCounterResponse {
	s.MonthCounter = v
	return s
}

func (s *QueryConsumecardCounterResponse) SetYearCounter(v *CounterData) *QueryConsumecardCounterResponse {
	s.YearCounter = v
	return s
}

func (s *QueryConsumecardCounterResponse) SetQuarterlyCounter(v *CounterData) *QueryConsumecardCounterResponse {
	s.QuarterlyCounter = v
	return s
}

type SetConsumecardProductcodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要配置的租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 场景码
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 账户链上名称
	AccountName *string `json:"account_name,omitempty" xml:"account_name,omitempty" require:"true"`
	// 账户链上ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s SetConsumecardProductcodeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetConsumecardProductcodeRequest) GoString() string {
	return s.String()
}

func (s *SetConsumecardProductcodeRequest) SetAuthToken(v string) *SetConsumecardProductcodeRequest {
	s.AuthToken = &v
	return s
}

func (s *SetConsumecardProductcodeRequest) SetProductInstanceId(v string) *SetConsumecardProductcodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetConsumecardProductcodeRequest) SetChainId(v string) *SetConsumecardProductcodeRequest {
	s.ChainId = &v
	return s
}

func (s *SetConsumecardProductcodeRequest) SetTenantId(v string) *SetConsumecardProductcodeRequest {
	s.TenantId = &v
	return s
}

func (s *SetConsumecardProductcodeRequest) SetProductCode(v string) *SetConsumecardProductcodeRequest {
	s.ProductCode = &v
	return s
}

func (s *SetConsumecardProductcodeRequest) SetAccountName(v string) *SetConsumecardProductcodeRequest {
	s.AccountName = &v
	return s
}

func (s *SetConsumecardProductcodeRequest) SetAccountId(v string) *SetConsumecardProductcodeRequest {
	s.AccountId = &v
	return s
}

func (s *SetConsumecardProductcodeRequest) SetMemo(v string) *SetConsumecardProductcodeRequest {
	s.Memo = &v
	return s
}

type SetConsumecardProductcodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetConsumecardProductcodeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetConsumecardProductcodeResponse) GoString() string {
	return s.String()
}

func (s *SetConsumecardProductcodeResponse) SetReqMsgId(v string) *SetConsumecardProductcodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetConsumecardProductcodeResponse) SetResultCode(v string) *SetConsumecardProductcodeResponse {
	s.ResultCode = &v
	return s
}

func (s *SetConsumecardProductcodeResponse) SetResultMsg(v string) *SetConsumecardProductcodeResponse {
	s.ResultMsg = &v
	return s
}

type QueryConsumecardProductcodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 要查询的租户信息，不传查全部信息
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s QueryConsumecardProductcodeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardProductcodeRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardProductcodeRequest) SetAuthToken(v string) *QueryConsumecardProductcodeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardProductcodeRequest) SetProductInstanceId(v string) *QueryConsumecardProductcodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardProductcodeRequest) SetTenantId(v string) *QueryConsumecardProductcodeRequest {
	s.TenantId = &v
	return s
}

type QueryConsumecardProductcodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 场景码配置信息列表
	ProductCodeInfos []*ProductCodeInfo `json:"product_code_infos,omitempty" xml:"product_code_infos,omitempty" type:"Repeated"`
}

func (s QueryConsumecardProductcodeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardProductcodeResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardProductcodeResponse) SetReqMsgId(v string) *QueryConsumecardProductcodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardProductcodeResponse) SetResultCode(v string) *QueryConsumecardProductcodeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardProductcodeResponse) SetResultMsg(v string) *QueryConsumecardProductcodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConsumecardProductcodeResponse) SetProductCodeInfos(v []*ProductCodeInfo) *QueryConsumecardProductcodeResponse {
	s.ProductCodeInfos = v
	return s
}

type RemoveConsumecardProductcodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要操作的租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	//
	// 场景码
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
}

func (s RemoveConsumecardProductcodeRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveConsumecardProductcodeRequest) GoString() string {
	return s.String()
}

func (s *RemoveConsumecardProductcodeRequest) SetAuthToken(v string) *RemoveConsumecardProductcodeRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveConsumecardProductcodeRequest) SetProductInstanceId(v string) *RemoveConsumecardProductcodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RemoveConsumecardProductcodeRequest) SetChainId(v string) *RemoveConsumecardProductcodeRequest {
	s.ChainId = &v
	return s
}

func (s *RemoveConsumecardProductcodeRequest) SetTenantId(v string) *RemoveConsumecardProductcodeRequest {
	s.TenantId = &v
	return s
}

func (s *RemoveConsumecardProductcodeRequest) SetProductCode(v string) *RemoveConsumecardProductcodeRequest {
	s.ProductCode = &v
	return s
}

type RemoveConsumecardProductcodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RemoveConsumecardProductcodeResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveConsumecardProductcodeResponse) GoString() string {
	return s.String()
}

func (s *RemoveConsumecardProductcodeResponse) SetReqMsgId(v string) *RemoveConsumecardProductcodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveConsumecardProductcodeResponse) SetResultCode(v string) *RemoveConsumecardProductcodeResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveConsumecardProductcodeResponse) SetResultMsg(v string) *RemoveConsumecardProductcodeResponse {
	s.ResultMsg = &v
	return s
}

type QueryConsumecardGoodsimageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 场景码(入驻时申请)
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 要查询的图片不可访问url列表
	Urls []*string `json:"urls,omitempty" xml:"urls,omitempty" require:"true" type:"Repeated"`
}

func (s QueryConsumecardGoodsimageRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardGoodsimageRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumecardGoodsimageRequest) SetAuthToken(v string) *QueryConsumecardGoodsimageRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConsumecardGoodsimageRequest) SetProductInstanceId(v string) *QueryConsumecardGoodsimageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConsumecardGoodsimageRequest) SetChainId(v string) *QueryConsumecardGoodsimageRequest {
	s.ChainId = &v
	return s
}

func (s *QueryConsumecardGoodsimageRequest) SetProductCode(v string) *QueryConsumecardGoodsimageRequest {
	s.ProductCode = &v
	return s
}

func (s *QueryConsumecardGoodsimageRequest) SetUrls(v []*string) *QueryConsumecardGoodsimageRequest {
	s.Urls = v
	return s
}

type QueryConsumecardGoodsimageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 图片的临时可访问url列表，url过期时间2小时
	TemporaryUrls []*string `json:"temporary_urls,omitempty" xml:"temporary_urls,omitempty" type:"Repeated"`
}

func (s QueryConsumecardGoodsimageResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumecardGoodsimageResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumecardGoodsimageResponse) SetReqMsgId(v string) *QueryConsumecardGoodsimageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConsumecardGoodsimageResponse) SetResultCode(v string) *QueryConsumecardGoodsimageResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConsumecardGoodsimageResponse) SetResultMsg(v string) *QueryConsumecardGoodsimageResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConsumecardGoodsimageResponse) SetTemporaryUrls(v []*string) *QueryConsumecardGoodsimageResponse {
	s.TemporaryUrls = v
	return s
}

type UploadConsumecardFileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 场景码(入驻时申请)
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// file_id
	// 待上传文件
	FileObject io.Reader `json:"fileObject,omitempty" xml:"fileObject,omitempty"`
	// 待上传文件名
	FileObjectName *string `json:"fileObjectName,omitempty" xml:"fileObjectName,omitempty"`
	FileId         *string `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
}

func (s UploadConsumecardFileRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadConsumecardFileRequest) GoString() string {
	return s.String()
}

func (s *UploadConsumecardFileRequest) SetAuthToken(v string) *UploadConsumecardFileRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadConsumecardFileRequest) SetProductInstanceId(v string) *UploadConsumecardFileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadConsumecardFileRequest) SetChainId(v string) *UploadConsumecardFileRequest {
	s.ChainId = &v
	return s
}

func (s *UploadConsumecardFileRequest) SetProductCode(v string) *UploadConsumecardFileRequest {
	s.ProductCode = &v
	return s
}

func (s *UploadConsumecardFileRequest) SetFileObject(v io.Reader) *UploadConsumecardFileRequest {
	s.FileObject = v
	return s
}

func (s *UploadConsumecardFileRequest) SetFileObjectName(v string) *UploadConsumecardFileRequest {
	s.FileObjectName = &v
	return s
}

func (s *UploadConsumecardFileRequest) SetFileId(v string) *UploadConsumecardFileRequest {
	s.FileId = &v
	return s
}

type UploadConsumecardFileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 图片的不可访问url，发布商品时使用
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// 临时可访问的url，过期时间2小时
	TemporaryUrl *string `json:"temporary_url,omitempty" xml:"temporary_url,omitempty"`
}

func (s UploadConsumecardFileResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadConsumecardFileResponse) GoString() string {
	return s.String()
}

func (s *UploadConsumecardFileResponse) SetReqMsgId(v string) *UploadConsumecardFileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadConsumecardFileResponse) SetResultCode(v string) *UploadConsumecardFileResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadConsumecardFileResponse) SetResultMsg(v string) *UploadConsumecardFileResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadConsumecardFileResponse) SetUrl(v string) *UploadConsumecardFileResponse {
	s.Url = &v
	return s
}

func (s *UploadConsumecardFileResponse) SetTemporaryUrl(v string) *UploadConsumecardFileResponse {
	s.TemporaryUrl = &v
	return s
}

type QueryCouponRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 批次ID
	CollectionId *string `json:"collection_id,omitempty" xml:"collection_id,omitempty" require:"true"`
	// 电子券ID
	CouponId *string `json:"coupon_id,omitempty" xml:"coupon_id,omitempty" require:"true"`
	// 交易幂等ID，长度不大于128
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s QueryCouponRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCouponRequest) GoString() string {
	return s.String()
}

func (s *QueryCouponRequest) SetAuthToken(v string) *QueryCouponRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCouponRequest) SetProductInstanceId(v string) *QueryCouponRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryCouponRequest) SetChainId(v string) *QueryCouponRequest {
	s.ChainId = &v
	return s
}

func (s *QueryCouponRequest) SetCollectionId(v string) *QueryCouponRequest {
	s.CollectionId = &v
	return s
}

func (s *QueryCouponRequest) SetCouponId(v string) *QueryCouponRequest {
	s.CouponId = &v
	return s
}

func (s *QueryCouponRequest) SetOutTxId(v string) *QueryCouponRequest {
	s.OutTxId = &v
	return s
}

type QueryCouponResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 电子券详细信息
	Coupon *Coupon `json:"coupon,omitempty" xml:"coupon,omitempty"`
	// 交易区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s QueryCouponResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCouponResponse) GoString() string {
	return s.String()
}

func (s *QueryCouponResponse) SetReqMsgId(v string) *QueryCouponResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCouponResponse) SetResultCode(v string) *QueryCouponResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCouponResponse) SetResultMsg(v string) *QueryCouponResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCouponResponse) SetCoupon(v *Coupon) *QueryCouponResponse {
	s.Coupon = v
	return s
}

func (s *QueryCouponResponse) SetBlockNumber(v int64) *QueryCouponResponse {
	s.BlockNumber = &v
	return s
}

type CreateCouponRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 创建电子券的参数
	CouponInfo *CouponCreate `json:"coupon_info,omitempty" xml:"coupon_info,omitempty" require:"true"`
	// 交易幂等ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s CreateCouponRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCouponRequest) GoString() string {
	return s.String()
}

func (s *CreateCouponRequest) SetAuthToken(v string) *CreateCouponRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateCouponRequest) SetProductInstanceId(v string) *CreateCouponRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateCouponRequest) SetChainId(v string) *CreateCouponRequest {
	s.ChainId = &v
	return s
}

func (s *CreateCouponRequest) SetCouponInfo(v *CouponCreate) *CreateCouponRequest {
	s.CouponInfo = v
	return s
}

func (s *CreateCouponRequest) SetOutTxId(v string) *CreateCouponRequest {
	s.OutTxId = &v
	return s
}

type CreateCouponResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易块高
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
	// 电子券ID
	CouponId *string `json:"coupon_id,omitempty" xml:"coupon_id,omitempty"`
}

func (s CreateCouponResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCouponResponse) GoString() string {
	return s.String()
}

func (s *CreateCouponResponse) SetReqMsgId(v string) *CreateCouponResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateCouponResponse) SetResultCode(v string) *CreateCouponResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateCouponResponse) SetResultMsg(v string) *CreateCouponResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateCouponResponse) SetBlockNumber(v int64) *CreateCouponResponse {
	s.BlockNumber = &v
	return s
}

func (s *CreateCouponResponse) SetCouponId(v string) *CreateCouponResponse {
	s.CouponId = &v
	return s
}

type ExecCouponForbiddenRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 批次ID
	CollectionId *string `json:"collection_id,omitempty" xml:"collection_id,omitempty" require:"true"`
	// 电子券ID
	CouponId *string `json:"coupon_id,omitempty" xml:"coupon_id,omitempty" require:"true"`
	// 交易幂等ID，长度限制128
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s ExecCouponForbiddenRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponForbiddenRequest) GoString() string {
	return s.String()
}

func (s *ExecCouponForbiddenRequest) SetAuthToken(v string) *ExecCouponForbiddenRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCouponForbiddenRequest) SetProductInstanceId(v string) *ExecCouponForbiddenRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCouponForbiddenRequest) SetChainId(v string) *ExecCouponForbiddenRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCouponForbiddenRequest) SetCollectionId(v string) *ExecCouponForbiddenRequest {
	s.CollectionId = &v
	return s
}

func (s *ExecCouponForbiddenRequest) SetCouponId(v string) *ExecCouponForbiddenRequest {
	s.CouponId = &v
	return s
}

func (s *ExecCouponForbiddenRequest) SetOutTxId(v string) *ExecCouponForbiddenRequest {
	s.OutTxId = &v
	return s
}

type ExecCouponForbiddenResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s ExecCouponForbiddenResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponForbiddenResponse) GoString() string {
	return s.String()
}

func (s *ExecCouponForbiddenResponse) SetReqMsgId(v string) *ExecCouponForbiddenResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCouponForbiddenResponse) SetResultCode(v string) *ExecCouponForbiddenResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCouponForbiddenResponse) SetResultMsg(v string) *ExecCouponForbiddenResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecCouponForbiddenResponse) SetBlockNumber(v int64) *ExecCouponForbiddenResponse {
	s.BlockNumber = &v
	return s
}

type ExecCouponEnableRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 批次ID
	CollectionId *string `json:"collection_id,omitempty" xml:"collection_id,omitempty" require:"true"`
	// 电子券ID
	CouponId *string `json:"coupon_id,omitempty" xml:"coupon_id,omitempty" require:"true"`
	// 交易幂等ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s ExecCouponEnableRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponEnableRequest) GoString() string {
	return s.String()
}

func (s *ExecCouponEnableRequest) SetAuthToken(v string) *ExecCouponEnableRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCouponEnableRequest) SetProductInstanceId(v string) *ExecCouponEnableRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCouponEnableRequest) SetChainId(v string) *ExecCouponEnableRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCouponEnableRequest) SetCollectionId(v string) *ExecCouponEnableRequest {
	s.CollectionId = &v
	return s
}

func (s *ExecCouponEnableRequest) SetCouponId(v string) *ExecCouponEnableRequest {
	s.CouponId = &v
	return s
}

func (s *ExecCouponEnableRequest) SetOutTxId(v string) *ExecCouponEnableRequest {
	s.OutTxId = &v
	return s
}

type ExecCouponEnableResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s ExecCouponEnableResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponEnableResponse) GoString() string {
	return s.String()
}

func (s *ExecCouponEnableResponse) SetReqMsgId(v string) *ExecCouponEnableResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCouponEnableResponse) SetResultCode(v string) *ExecCouponEnableResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCouponEnableResponse) SetResultMsg(v string) *ExecCouponEnableResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecCouponEnableResponse) SetBlockNumber(v int64) *ExecCouponEnableResponse {
	s.BlockNumber = &v
	return s
}

type ExecCouponExpireRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 批次ID
	CollectionId *string `json:"collection_id,omitempty" xml:"collection_id,omitempty" require:"true"`
	// 电子券ID
	CouponId *string `json:"coupon_id,omitempty" xml:"coupon_id,omitempty" require:"true"`
	// 交易幂等ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s ExecCouponExpireRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponExpireRequest) GoString() string {
	return s.String()
}

func (s *ExecCouponExpireRequest) SetAuthToken(v string) *ExecCouponExpireRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCouponExpireRequest) SetProductInstanceId(v string) *ExecCouponExpireRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCouponExpireRequest) SetChainId(v string) *ExecCouponExpireRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCouponExpireRequest) SetCollectionId(v string) *ExecCouponExpireRequest {
	s.CollectionId = &v
	return s
}

func (s *ExecCouponExpireRequest) SetCouponId(v string) *ExecCouponExpireRequest {
	s.CouponId = &v
	return s
}

func (s *ExecCouponExpireRequest) SetOutTxId(v string) *ExecCouponExpireRequest {
	s.OutTxId = &v
	return s
}

type ExecCouponExpireResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s ExecCouponExpireResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponExpireResponse) GoString() string {
	return s.String()
}

func (s *ExecCouponExpireResponse) SetReqMsgId(v string) *ExecCouponExpireResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCouponExpireResponse) SetResultCode(v string) *ExecCouponExpireResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCouponExpireResponse) SetResultMsg(v string) *ExecCouponExpireResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecCouponExpireResponse) SetBlockNumber(v int64) *ExecCouponExpireResponse {
	s.BlockNumber = &v
	return s
}

type ExecCouponWriteoffRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 批次ID
	CollectionId *string `json:"collection_id,omitempty" xml:"collection_id,omitempty" require:"true"`
	// 电子券ID
	CouponId *string `json:"coupon_id,omitempty" xml:"coupon_id,omitempty" require:"true"`
	// 交易幂等ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s ExecCouponWriteoffRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponWriteoffRequest) GoString() string {
	return s.String()
}

func (s *ExecCouponWriteoffRequest) SetAuthToken(v string) *ExecCouponWriteoffRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCouponWriteoffRequest) SetProductInstanceId(v string) *ExecCouponWriteoffRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCouponWriteoffRequest) SetChainId(v string) *ExecCouponWriteoffRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCouponWriteoffRequest) SetCollectionId(v string) *ExecCouponWriteoffRequest {
	s.CollectionId = &v
	return s
}

func (s *ExecCouponWriteoffRequest) SetCouponId(v string) *ExecCouponWriteoffRequest {
	s.CouponId = &v
	return s
}

func (s *ExecCouponWriteoffRequest) SetOutTxId(v string) *ExecCouponWriteoffRequest {
	s.OutTxId = &v
	return s
}

type ExecCouponWriteoffResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s ExecCouponWriteoffResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponWriteoffResponse) GoString() string {
	return s.String()
}

func (s *ExecCouponWriteoffResponse) SetReqMsgId(v string) *ExecCouponWriteoffResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCouponWriteoffResponse) SetResultCode(v string) *ExecCouponWriteoffResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCouponWriteoffResponse) SetResultMsg(v string) *ExecCouponWriteoffResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecCouponWriteoffResponse) SetBlockNumber(v int64) *ExecCouponWriteoffResponse {
	s.BlockNumber = &v
	return s
}

type ExecCouponTimeoutRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 批次ID
	CollectionId *string `json:"collection_id,omitempty" xml:"collection_id,omitempty" require:"true"`
	// 电子券ID
	CouponId *string `json:"coupon_id,omitempty" xml:"coupon_id,omitempty" require:"true"`
	// 交易幂等ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s ExecCouponTimeoutRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponTimeoutRequest) GoString() string {
	return s.String()
}

func (s *ExecCouponTimeoutRequest) SetAuthToken(v string) *ExecCouponTimeoutRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCouponTimeoutRequest) SetProductInstanceId(v string) *ExecCouponTimeoutRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCouponTimeoutRequest) SetChainId(v string) *ExecCouponTimeoutRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCouponTimeoutRequest) SetCollectionId(v string) *ExecCouponTimeoutRequest {
	s.CollectionId = &v
	return s
}

func (s *ExecCouponTimeoutRequest) SetCouponId(v string) *ExecCouponTimeoutRequest {
	s.CouponId = &v
	return s
}

func (s *ExecCouponTimeoutRequest) SetOutTxId(v string) *ExecCouponTimeoutRequest {
	s.OutTxId = &v
	return s
}

type ExecCouponTimeoutResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s ExecCouponTimeoutResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponTimeoutResponse) GoString() string {
	return s.String()
}

func (s *ExecCouponTimeoutResponse) SetReqMsgId(v string) *ExecCouponTimeoutResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCouponTimeoutResponse) SetResultCode(v string) *ExecCouponTimeoutResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCouponTimeoutResponse) SetResultMsg(v string) *ExecCouponTimeoutResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecCouponTimeoutResponse) SetBlockNumber(v int64) *ExecCouponTimeoutResponse {
	s.BlockNumber = &v
	return s
}

type ExecCouponActivateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 电子券批次ID
	CollectionId *string `json:"collection_id,omitempty" xml:"collection_id,omitempty" require:"true"`
	// 电子券激活码
	CouponCode *string `json:"coupon_code,omitempty" xml:"coupon_code,omitempty" require:"true"`
	// 激活码附加信息
	CouponExtCode *string `json:"coupon_ext_code,omitempty" xml:"coupon_ext_code,omitempty"`
	// 电子券ID
	CouponId *string `json:"coupon_id,omitempty" xml:"coupon_id,omitempty" require:"true"`
	// 交易幂等ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s ExecCouponActivateRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponActivateRequest) GoString() string {
	return s.String()
}

func (s *ExecCouponActivateRequest) SetAuthToken(v string) *ExecCouponActivateRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCouponActivateRequest) SetProductInstanceId(v string) *ExecCouponActivateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCouponActivateRequest) SetChainId(v string) *ExecCouponActivateRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCouponActivateRequest) SetCollectionId(v string) *ExecCouponActivateRequest {
	s.CollectionId = &v
	return s
}

func (s *ExecCouponActivateRequest) SetCouponCode(v string) *ExecCouponActivateRequest {
	s.CouponCode = &v
	return s
}

func (s *ExecCouponActivateRequest) SetCouponExtCode(v string) *ExecCouponActivateRequest {
	s.CouponExtCode = &v
	return s
}

func (s *ExecCouponActivateRequest) SetCouponId(v string) *ExecCouponActivateRequest {
	s.CouponId = &v
	return s
}

func (s *ExecCouponActivateRequest) SetOutTxId(v string) *ExecCouponActivateRequest {
	s.OutTxId = &v
	return s
}

type ExecCouponActivateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s ExecCouponActivateResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponActivateResponse) GoString() string {
	return s.String()
}

func (s *ExecCouponActivateResponse) SetReqMsgId(v string) *ExecCouponActivateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCouponActivateResponse) SetResultCode(v string) *ExecCouponActivateResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCouponActivateResponse) SetResultMsg(v string) *ExecCouponActivateResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecCouponActivateResponse) SetBlockNumber(v int64) *ExecCouponActivateResponse {
	s.BlockNumber = &v
	return s
}

type ExecCouponTransferRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 电子券批次ID
	CollectionId *string `json:"collection_id,omitempty" xml:"collection_id,omitempty" require:"true"`
	// 电子券ID
	CouponId *string `json:"coupon_id,omitempty" xml:"coupon_id,omitempty" require:"true"`
	// 原始持有用户公钥对应的私钥，对outBizId的签名
	OriginUidPublicKeySign *string `json:"origin_uid_public_key_sign,omitempty" xml:"origin_uid_public_key_sign,omitempty" require:"true"`
	// 交易幂等ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 要转让的目标用户脱敏ID
	TransferDesensitizedUid *string `json:"transfer_desensitized_uid,omitempty" xml:"transfer_desensitized_uid,omitempty" require:"true"`
	// 要转让的目标用户公钥
	TransferUidPublicKey *string `json:"transfer_uid_public_key,omitempty" xml:"transfer_uid_public_key,omitempty" require:"true"`
}

func (s ExecCouponTransferRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponTransferRequest) GoString() string {
	return s.String()
}

func (s *ExecCouponTransferRequest) SetAuthToken(v string) *ExecCouponTransferRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCouponTransferRequest) SetProductInstanceId(v string) *ExecCouponTransferRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCouponTransferRequest) SetChainId(v string) *ExecCouponTransferRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCouponTransferRequest) SetCollectionId(v string) *ExecCouponTransferRequest {
	s.CollectionId = &v
	return s
}

func (s *ExecCouponTransferRequest) SetCouponId(v string) *ExecCouponTransferRequest {
	s.CouponId = &v
	return s
}

func (s *ExecCouponTransferRequest) SetOriginUidPublicKeySign(v string) *ExecCouponTransferRequest {
	s.OriginUidPublicKeySign = &v
	return s
}

func (s *ExecCouponTransferRequest) SetOutTxId(v string) *ExecCouponTransferRequest {
	s.OutTxId = &v
	return s
}

func (s *ExecCouponTransferRequest) SetTransferDesensitizedUid(v string) *ExecCouponTransferRequest {
	s.TransferDesensitizedUid = &v
	return s
}

func (s *ExecCouponTransferRequest) SetTransferUidPublicKey(v string) *ExecCouponTransferRequest {
	s.TransferUidPublicKey = &v
	return s
}

type ExecCouponTransferResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s ExecCouponTransferResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponTransferResponse) GoString() string {
	return s.String()
}

func (s *ExecCouponTransferResponse) SetReqMsgId(v string) *ExecCouponTransferResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCouponTransferResponse) SetResultCode(v string) *ExecCouponTransferResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCouponTransferResponse) SetResultMsg(v string) *ExecCouponTransferResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecCouponTransferResponse) SetBlockNumber(v int64) *ExecCouponTransferResponse {
	s.BlockNumber = &v
	return s
}

type ExecCouponSignRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 电子券批次ID
	CollectionId *string `json:"collection_id,omitempty" xml:"collection_id,omitempty" require:"true"`
	// 电子券ID
	CouponId *string `json:"coupon_id,omitempty" xml:"coupon_id,omitempty" require:"true"`
	// 脱敏用户ID
	DesensitizedUid *string `json:"desensitized_uid,omitempty" xml:"desensitized_uid,omitempty" require:"true"`
	// 交易幂等ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 用户公钥
	UidPublicKey *string `json:"uid_public_key,omitempty" xml:"uid_public_key,omitempty" require:"true"`
}

func (s ExecCouponSignRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponSignRequest) GoString() string {
	return s.String()
}

func (s *ExecCouponSignRequest) SetAuthToken(v string) *ExecCouponSignRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCouponSignRequest) SetProductInstanceId(v string) *ExecCouponSignRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCouponSignRequest) SetChainId(v string) *ExecCouponSignRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCouponSignRequest) SetCollectionId(v string) *ExecCouponSignRequest {
	s.CollectionId = &v
	return s
}

func (s *ExecCouponSignRequest) SetCouponId(v string) *ExecCouponSignRequest {
	s.CouponId = &v
	return s
}

func (s *ExecCouponSignRequest) SetDesensitizedUid(v string) *ExecCouponSignRequest {
	s.DesensitizedUid = &v
	return s
}

func (s *ExecCouponSignRequest) SetOutTxId(v string) *ExecCouponSignRequest {
	s.OutTxId = &v
	return s
}

func (s *ExecCouponSignRequest) SetUidPublicKey(v string) *ExecCouponSignRequest {
	s.UidPublicKey = &v
	return s
}

type ExecCouponSignResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s ExecCouponSignResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponSignResponse) GoString() string {
	return s.String()
}

func (s *ExecCouponSignResponse) SetReqMsgId(v string) *ExecCouponSignResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCouponSignResponse) SetResultCode(v string) *ExecCouponSignResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCouponSignResponse) SetResultMsg(v string) *ExecCouponSignResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecCouponSignResponse) SetBlockNumber(v int64) *ExecCouponSignResponse {
	s.BlockNumber = &v
	return s
}

type ExecCouponBindRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 电子券批次ID
	CollectionId *string `json:"collection_id,omitempty" xml:"collection_id,omitempty" require:"true"`
	// 电子券ID
	CouponId *string `json:"coupon_id,omitempty" xml:"coupon_id,omitempty" require:"true"`
	// 用户脱敏ID
	DesensitizedUid *string `json:"desensitized_uid,omitempty" xml:"desensitized_uid,omitempty"`
	// 绑定的持有者信息
	HolderUserAccount *string `json:"holder_user_account,omitempty" xml:"holder_user_account,omitempty"`
	// 交易幂等ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 电子券公钥对应的私钥，对 couponId||outTxId 的签名
	PublicKeySign *string `json:"public_key_sign,omitempty" xml:"public_key_sign,omitempty" require:"true"`
	// 用户公钥对应的私钥，对 outTxId 的签名
	UidPublicKeySign *string `json:"uid_public_key_sign,omitempty" xml:"uid_public_key_sign,omitempty"`
}

func (s ExecCouponBindRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponBindRequest) GoString() string {
	return s.String()
}

func (s *ExecCouponBindRequest) SetAuthToken(v string) *ExecCouponBindRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecCouponBindRequest) SetProductInstanceId(v string) *ExecCouponBindRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecCouponBindRequest) SetChainId(v string) *ExecCouponBindRequest {
	s.ChainId = &v
	return s
}

func (s *ExecCouponBindRequest) SetCollectionId(v string) *ExecCouponBindRequest {
	s.CollectionId = &v
	return s
}

func (s *ExecCouponBindRequest) SetCouponId(v string) *ExecCouponBindRequest {
	s.CouponId = &v
	return s
}

func (s *ExecCouponBindRequest) SetDesensitizedUid(v string) *ExecCouponBindRequest {
	s.DesensitizedUid = &v
	return s
}

func (s *ExecCouponBindRequest) SetHolderUserAccount(v string) *ExecCouponBindRequest {
	s.HolderUserAccount = &v
	return s
}

func (s *ExecCouponBindRequest) SetOutTxId(v string) *ExecCouponBindRequest {
	s.OutTxId = &v
	return s
}

func (s *ExecCouponBindRequest) SetPublicKeySign(v string) *ExecCouponBindRequest {
	s.PublicKeySign = &v
	return s
}

func (s *ExecCouponBindRequest) SetUidPublicKeySign(v string) *ExecCouponBindRequest {
	s.UidPublicKeySign = &v
	return s
}

type ExecCouponBindResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s ExecCouponBindResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecCouponBindResponse) GoString() string {
	return s.String()
}

func (s *ExecCouponBindResponse) SetReqMsgId(v string) *ExecCouponBindResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecCouponBindResponse) SetResultCode(v string) *ExecCouponBindResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecCouponBindResponse) SetResultMsg(v string) *ExecCouponBindResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecCouponBindResponse) SetBlockNumber(v int64) *ExecCouponBindResponse {
	s.BlockNumber = &v
	return s
}

type BatchcreateCouponRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 电子券创建参数
	CouponInfo *CouponCreate `json:"coupon_info,omitempty" xml:"coupon_info,omitempty" require:"true"`
	// 一次性创建数量。最大每次创建100张
	CreateNumber *int64 `json:"create_number,omitempty" xml:"create_number,omitempty" require:"true"`
	// 交易幂等ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s BatchcreateCouponRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateCouponRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateCouponRequest) SetAuthToken(v string) *BatchcreateCouponRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateCouponRequest) SetProductInstanceId(v string) *BatchcreateCouponRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchcreateCouponRequest) SetChainId(v string) *BatchcreateCouponRequest {
	s.ChainId = &v
	return s
}

func (s *BatchcreateCouponRequest) SetCouponInfo(v *CouponCreate) *BatchcreateCouponRequest {
	s.CouponInfo = v
	return s
}

func (s *BatchcreateCouponRequest) SetCreateNumber(v int64) *BatchcreateCouponRequest {
	s.CreateNumber = &v
	return s
}

func (s *BatchcreateCouponRequest) SetOutTxId(v string) *BatchcreateCouponRequest {
	s.OutTxId = &v
	return s
}

type BatchcreateCouponResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易块高
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
	// 电子券创建结果：电子券ID列表
	CouponIdList []*string `json:"coupon_id_list,omitempty" xml:"coupon_id_list,omitempty" type:"Repeated"`
}

func (s BatchcreateCouponResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateCouponResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateCouponResponse) SetReqMsgId(v string) *BatchcreateCouponResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateCouponResponse) SetResultCode(v string) *BatchcreateCouponResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateCouponResponse) SetResultMsg(v string) *BatchcreateCouponResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateCouponResponse) SetBlockNumber(v int64) *BatchcreateCouponResponse {
	s.BlockNumber = &v
	return s
}

func (s *BatchcreateCouponResponse) SetCouponIdList(v []*string) *BatchcreateCouponResponse {
	s.CouponIdList = v
	return s
}

type CreateCouponListRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 电子券创建参数列表
	Coupons []*CouponCreate `json:"coupons,omitempty" xml:"coupons,omitempty" require:"true" type:"Repeated"`
	// 交易幂等ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s CreateCouponListRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCouponListRequest) GoString() string {
	return s.String()
}

func (s *CreateCouponListRequest) SetAuthToken(v string) *CreateCouponListRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateCouponListRequest) SetProductInstanceId(v string) *CreateCouponListRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateCouponListRequest) SetChainId(v string) *CreateCouponListRequest {
	s.ChainId = &v
	return s
}

func (s *CreateCouponListRequest) SetCoupons(v []*CouponCreate) *CreateCouponListRequest {
	s.Coupons = v
	return s
}

func (s *CreateCouponListRequest) SetOutTxId(v string) *CreateCouponListRequest {
	s.OutTxId = &v
	return s
}

type CreateCouponListResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 电子券创建结果：电子券ID列表
	CouponIdList []*string `json:"coupon_id_list,omitempty" xml:"coupon_id_list,omitempty" type:"Repeated"`
	// 交易区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s CreateCouponListResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCouponListResponse) GoString() string {
	return s.String()
}

func (s *CreateCouponListResponse) SetReqMsgId(v string) *CreateCouponListResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateCouponListResponse) SetResultCode(v string) *CreateCouponListResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateCouponListResponse) SetResultMsg(v string) *CreateCouponListResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateCouponListResponse) SetCouponIdList(v []*string) *CreateCouponListResponse {
	s.CouponIdList = v
	return s
}

func (s *CreateCouponListResponse) SetBlockNumber(v int64) *CreateCouponListResponse {
	s.BlockNumber = &v
	return s
}

type CreateCouponCollectionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 批次ID
	CollectionId *string `json:"collection_id,omitempty" xml:"collection_id,omitempty" require:"true"`
	// 电子券前缀
	CouponNumberPrefix *string `json:"coupon_number_prefix,omitempty" xml:"coupon_number_prefix,omitempty" require:"true"`
	// 批次创建者
	Issuer *string `json:"issuer,omitempty" xml:"issuer,omitempty" require:"true"`
	// 批次名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 是否创建时就记名
	NeedPreRegistered *bool `json:"need_pre_registered,omitempty" xml:"need_pre_registered,omitempty" require:"true"`
	// 是否记名电子券
	NeedRegistered *bool `json:"need_registered,omitempty" xml:"need_registered,omitempty" require:"true"`
	// 交易幂等ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s CreateCouponCollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCouponCollectionRequest) GoString() string {
	return s.String()
}

func (s *CreateCouponCollectionRequest) SetAuthToken(v string) *CreateCouponCollectionRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateCouponCollectionRequest) SetProductInstanceId(v string) *CreateCouponCollectionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateCouponCollectionRequest) SetChainId(v string) *CreateCouponCollectionRequest {
	s.ChainId = &v
	return s
}

func (s *CreateCouponCollectionRequest) SetCollectionId(v string) *CreateCouponCollectionRequest {
	s.CollectionId = &v
	return s
}

func (s *CreateCouponCollectionRequest) SetCouponNumberPrefix(v string) *CreateCouponCollectionRequest {
	s.CouponNumberPrefix = &v
	return s
}

func (s *CreateCouponCollectionRequest) SetIssuer(v string) *CreateCouponCollectionRequest {
	s.Issuer = &v
	return s
}

func (s *CreateCouponCollectionRequest) SetName(v string) *CreateCouponCollectionRequest {
	s.Name = &v
	return s
}

func (s *CreateCouponCollectionRequest) SetNeedPreRegistered(v bool) *CreateCouponCollectionRequest {
	s.NeedPreRegistered = &v
	return s
}

func (s *CreateCouponCollectionRequest) SetNeedRegistered(v bool) *CreateCouponCollectionRequest {
	s.NeedRegistered = &v
	return s
}

func (s *CreateCouponCollectionRequest) SetOutTxId(v string) *CreateCouponCollectionRequest {
	s.OutTxId = &v
	return s
}

type CreateCouponCollectionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s CreateCouponCollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCouponCollectionResponse) GoString() string {
	return s.String()
}

func (s *CreateCouponCollectionResponse) SetReqMsgId(v string) *CreateCouponCollectionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateCouponCollectionResponse) SetResultCode(v string) *CreateCouponCollectionResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateCouponCollectionResponse) SetResultMsg(v string) *CreateCouponCollectionResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateCouponCollectionResponse) SetBlockNumber(v int64) *CreateCouponCollectionResponse {
	s.BlockNumber = &v
	return s
}

type QueryCouponCollectionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 批次ID
	CollectionId *string `json:"collection_id,omitempty" xml:"collection_id,omitempty" require:"true"`
}

func (s QueryCouponCollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCouponCollectionRequest) GoString() string {
	return s.String()
}

func (s *QueryCouponCollectionRequest) SetAuthToken(v string) *QueryCouponCollectionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCouponCollectionRequest) SetProductInstanceId(v string) *QueryCouponCollectionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryCouponCollectionRequest) SetChainId(v string) *QueryCouponCollectionRequest {
	s.ChainId = &v
	return s
}

func (s *QueryCouponCollectionRequest) SetCollectionId(v string) *QueryCouponCollectionRequest {
	s.CollectionId = &v
	return s
}

type QueryCouponCollectionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 批次详情
	CouponCollection *CouponCollection `json:"coupon_collection,omitempty" xml:"coupon_collection,omitempty"`
	// 交易区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s QueryCouponCollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCouponCollectionResponse) GoString() string {
	return s.String()
}

func (s *QueryCouponCollectionResponse) SetReqMsgId(v string) *QueryCouponCollectionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCouponCollectionResponse) SetResultCode(v string) *QueryCouponCollectionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCouponCollectionResponse) SetResultMsg(v string) *QueryCouponCollectionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCouponCollectionResponse) SetCouponCollection(v *CouponCollection) *QueryCouponCollectionResponse {
	s.CouponCollection = v
	return s
}

func (s *QueryCouponCollectionResponse) SetBlockNumber(v int64) *QueryCouponCollectionResponse {
	s.BlockNumber = &v
	return s
}

type QueryMerchantUserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 商户管理下的用户ID
	LocalId *string `json:"local_id,omitempty" xml:"local_id,omitempty" require:"true"`
}

func (s QueryMerchantUserRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMerchantUserRequest) GoString() string {
	return s.String()
}

func (s *QueryMerchantUserRequest) SetAuthToken(v string) *QueryMerchantUserRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMerchantUserRequest) SetProductInstanceId(v string) *QueryMerchantUserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMerchantUserRequest) SetChainId(v string) *QueryMerchantUserRequest {
	s.ChainId = &v
	return s
}

func (s *QueryMerchantUserRequest) SetLocalId(v string) *QueryMerchantUserRequest {
	s.LocalId = &v
	return s
}

type QueryMerchantUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户完整信息
	// {
	//             "tenant_id": "ZKUA",
	//             "user_id": "331f9b0922f940f464d4b94b5628180408ac305b7fc72d3e40f5b7727d0702fb",
	//             "local_id": "user01",
	//             "did": "",
	//             "vc": "",
	//             "pk": "3280b948a7fa8525c0fbfd47d1df75d7a7ee9f3baedd6964565b42f461dd86732717c4bc4c8203ea2b9b1aeef7b148644babba3c0cd6927c4c0964919f590c6c"
	//         }
	//
	User *User `json:"user,omitempty" xml:"user,omitempty"`
}

func (s QueryMerchantUserResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMerchantUserResponse) GoString() string {
	return s.String()
}

func (s *QueryMerchantUserResponse) SetReqMsgId(v string) *QueryMerchantUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMerchantUserResponse) SetResultCode(v string) *QueryMerchantUserResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMerchantUserResponse) SetResultMsg(v string) *QueryMerchantUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMerchantUserResponse) SetUser(v *User) *QueryMerchantUserResponse {
	s.User = v
	return s
}

type CreateMerchantUserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 用户的did信息
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 用户名
	LocalId *string `json:"local_id,omitempty" xml:"local_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s CreateMerchantUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMerchantUserRequest) GoString() string {
	return s.String()
}

func (s *CreateMerchantUserRequest) SetAuthToken(v string) *CreateMerchantUserRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateMerchantUserRequest) SetProductInstanceId(v string) *CreateMerchantUserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateMerchantUserRequest) SetChainId(v string) *CreateMerchantUserRequest {
	s.ChainId = &v
	return s
}

func (s *CreateMerchantUserRequest) SetDid(v string) *CreateMerchantUserRequest {
	s.Did = &v
	return s
}

func (s *CreateMerchantUserRequest) SetLocalId(v string) *CreateMerchantUserRequest {
	s.LocalId = &v
	return s
}

func (s *CreateMerchantUserRequest) SetOutTxId(v string) *CreateMerchantUserRequest {
	s.OutTxId = &v
	return s
}

type CreateMerchantUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateMerchantUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMerchantUserResponse) GoString() string {
	return s.String()
}

func (s *CreateMerchantUserResponse) SetReqMsgId(v string) *CreateMerchantUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateMerchantUserResponse) SetResultCode(v string) *CreateMerchantUserResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateMerchantUserResponse) SetResultMsg(v string) *CreateMerchantUserResponse {
	s.ResultMsg = &v
	return s
}

type QueryMerchantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 币种
	Currency *string `json:"currency,omitempty" xml:"currency,omitempty"`
	// 要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
}

func (s QueryMerchantRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMerchantRequest) GoString() string {
	return s.String()
}

func (s *QueryMerchantRequest) SetAuthToken(v string) *QueryMerchantRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMerchantRequest) SetProductInstanceId(v string) *QueryMerchantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMerchantRequest) SetChainId(v string) *QueryMerchantRequest {
	s.ChainId = &v
	return s
}

func (s *QueryMerchantRequest) SetCurrency(v string) *QueryMerchantRequest {
	s.Currency = &v
	return s
}

func (s *QueryMerchantRequest) SetDelegatedTenantId(v string) *QueryMerchantRequest {
	s.DelegatedTenantId = &v
	return s
}

type QueryMerchantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 商户完整信息
	// {
	//             "tenant_id": "Z",
	//             "did": "did:mychain:ct",
	//             "admin_id": "ed7b3acb718e2f91bc8fab6a5e7cc3c061",
	//             "fund_manager_id": "b7ecd55bde04827b3e611a741d",
	//             "description": "SK",
	//             "is_equity_provider": true,
	//             "is_equity_consumer": true,
	//             "is_asset_issuer": true,
	//             "status": 0,
	//             "provision": {
	//                 "currency": "CNY",
	//                 "debit": "99999999.0000",
	//                 "credit_max": "99999999.0000",
	//                 "credit_used": "0.0000"
	//             }
	//         }
	Merchant *Merchant `json:"merchant,omitempty" xml:"merchant,omitempty"`
	// 查询商户信息时的区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s QueryMerchantResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMerchantResponse) GoString() string {
	return s.String()
}

func (s *QueryMerchantResponse) SetReqMsgId(v string) *QueryMerchantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMerchantResponse) SetResultCode(v string) *QueryMerchantResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMerchantResponse) SetResultMsg(v string) *QueryMerchantResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMerchantResponse) SetMerchant(v *Merchant) *QueryMerchantResponse {
	s.Merchant = v
	return s
}

func (s *QueryMerchantResponse) SetBlockNumber(v int64) *QueryMerchantResponse {
	s.BlockNumber = &v
	return s
}

type UploadImageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 图片MIME类型，目前仅支持 image/jpeg
	ContentType *string `json:"content_type,omitempty" xml:"content_type,omitempty" require:"true"`
	// 要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 图片信息（base64编码）
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
}

func (s UploadImageRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadImageRequest) GoString() string {
	return s.String()
}

func (s *UploadImageRequest) SetAuthToken(v string) *UploadImageRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadImageRequest) SetProductInstanceId(v string) *UploadImageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadImageRequest) SetChainId(v string) *UploadImageRequest {
	s.ChainId = &v
	return s
}

func (s *UploadImageRequest) SetContentType(v string) *UploadImageRequest {
	s.ContentType = &v
	return s
}

func (s *UploadImageRequest) SetDelegatedTenantId(v string) *UploadImageRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *UploadImageRequest) SetImage(v string) *UploadImageRequest {
	s.Image = &v
	return s
}

type UploadImageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 临时可访问的url，过期时间2小时
	TemporaryUrl *string `json:"temporary_url,omitempty" xml:"temporary_url,omitempty"`
	// 图片的不可访问url，发布权益时使用
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s UploadImageResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadImageResponse) GoString() string {
	return s.String()
}

func (s *UploadImageResponse) SetReqMsgId(v string) *UploadImageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadImageResponse) SetResultCode(v string) *UploadImageResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadImageResponse) SetResultMsg(v string) *UploadImageResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadImageResponse) SetTemporaryUrl(v string) *UploadImageResponse {
	s.TemporaryUrl = &v
	return s
}

func (s *UploadImageResponse) SetUrl(v string) *UploadImageResponse {
	s.Url = &v
	return s
}

type GetPkiPublickeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商户管理员/其用户的链上账户ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 商户管理员/其用户归属的租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
}

func (s GetPkiPublickeyRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPkiPublickeyRequest) GoString() string {
	return s.String()
}

func (s *GetPkiPublickeyRequest) SetAuthToken(v string) *GetPkiPublickeyRequest {
	s.AuthToken = &v
	return s
}

func (s *GetPkiPublickeyRequest) SetProductInstanceId(v string) *GetPkiPublickeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetPkiPublickeyRequest) SetAccountId(v string) *GetPkiPublickeyRequest {
	s.AccountId = &v
	return s
}

func (s *GetPkiPublickeyRequest) SetOptTenantId(v string) *GetPkiPublickeyRequest {
	s.OptTenantId = &v
	return s
}

type GetPkiPublickeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 公钥字符串（base64）
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty"`
}

func (s GetPkiPublickeyResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPkiPublickeyResponse) GoString() string {
	return s.String()
}

func (s *GetPkiPublickeyResponse) SetReqMsgId(v string) *GetPkiPublickeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetPkiPublickeyResponse) SetResultCode(v string) *GetPkiPublickeyResponse {
	s.ResultCode = &v
	return s
}

func (s *GetPkiPublickeyResponse) SetResultMsg(v string) *GetPkiPublickeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetPkiPublickeyResponse) SetPublicKey(v string) *GetPkiPublickeyResponse {
	s.PublicKey = &v
	return s
}

type ExecPkiEncryptRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商户管理员/其用户的链上账户ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 明文（base64编码）
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 商户管理员/其用户归属的租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
}

func (s ExecPkiEncryptRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecPkiEncryptRequest) GoString() string {
	return s.String()
}

func (s *ExecPkiEncryptRequest) SetAuthToken(v string) *ExecPkiEncryptRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecPkiEncryptRequest) SetProductInstanceId(v string) *ExecPkiEncryptRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecPkiEncryptRequest) SetAccountId(v string) *ExecPkiEncryptRequest {
	s.AccountId = &v
	return s
}

func (s *ExecPkiEncryptRequest) SetContent(v string) *ExecPkiEncryptRequest {
	s.Content = &v
	return s
}

func (s *ExecPkiEncryptRequest) SetOptTenantId(v string) *ExecPkiEncryptRequest {
	s.OptTenantId = &v
	return s
}

type ExecPkiEncryptResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 密文 base64编码
	EncryptedContent *string `json:"encrypted_content,omitempty" xml:"encrypted_content,omitempty"`
}

func (s ExecPkiEncryptResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecPkiEncryptResponse) GoString() string {
	return s.String()
}

func (s *ExecPkiEncryptResponse) SetReqMsgId(v string) *ExecPkiEncryptResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecPkiEncryptResponse) SetResultCode(v string) *ExecPkiEncryptResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecPkiEncryptResponse) SetResultMsg(v string) *ExecPkiEncryptResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecPkiEncryptResponse) SetEncryptedContent(v string) *ExecPkiEncryptResponse {
	s.EncryptedContent = &v
	return s
}

type ExecPkiDecryptRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商户管理员/其用户的链上账户ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 密文（base64）
	EncryptedContent *string `json:"encrypted_content,omitempty" xml:"encrypted_content,omitempty" require:"true"`
}

func (s ExecPkiDecryptRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecPkiDecryptRequest) GoString() string {
	return s.String()
}

func (s *ExecPkiDecryptRequest) SetAuthToken(v string) *ExecPkiDecryptRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecPkiDecryptRequest) SetProductInstanceId(v string) *ExecPkiDecryptRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecPkiDecryptRequest) SetAccountId(v string) *ExecPkiDecryptRequest {
	s.AccountId = &v
	return s
}

func (s *ExecPkiDecryptRequest) SetDelegatedTenantId(v string) *ExecPkiDecryptRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *ExecPkiDecryptRequest) SetEncryptedContent(v string) *ExecPkiDecryptRequest {
	s.EncryptedContent = &v
	return s
}

type ExecPkiDecryptResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 明文
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
}

func (s ExecPkiDecryptResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecPkiDecryptResponse) GoString() string {
	return s.String()
}

func (s *ExecPkiDecryptResponse) SetReqMsgId(v string) *ExecPkiDecryptResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecPkiDecryptResponse) SetResultCode(v string) *ExecPkiDecryptResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecPkiDecryptResponse) SetResultMsg(v string) *ExecPkiDecryptResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecPkiDecryptResponse) SetContent(v string) *ExecPkiDecryptResponse {
	s.Content = &v
	return s
}

type UpdateMerchantFriendRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 友好商户租户ID
	FriendTenantId *string `json:"friend_tenant_id,omitempty" xml:"friend_tenant_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 更新类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s UpdateMerchantFriendRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMerchantFriendRequest) GoString() string {
	return s.String()
}

func (s *UpdateMerchantFriendRequest) SetAuthToken(v string) *UpdateMerchantFriendRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMerchantFriendRequest) SetProductInstanceId(v string) *UpdateMerchantFriendRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateMerchantFriendRequest) SetChainId(v string) *UpdateMerchantFriendRequest {
	s.ChainId = &v
	return s
}

func (s *UpdateMerchantFriendRequest) SetFriendTenantId(v string) *UpdateMerchantFriendRequest {
	s.FriendTenantId = &v
	return s
}

func (s *UpdateMerchantFriendRequest) SetOutTxId(v string) *UpdateMerchantFriendRequest {
	s.OutTxId = &v
	return s
}

func (s *UpdateMerchantFriendRequest) SetType(v string) *UpdateMerchantFriendRequest {
	s.Type = &v
	return s
}

type UpdateMerchantFriendResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateMerchantFriendResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMerchantFriendResponse) GoString() string {
	return s.String()
}

func (s *UpdateMerchantFriendResponse) SetReqMsgId(v string) *UpdateMerchantFriendResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMerchantFriendResponse) SetResultCode(v string) *UpdateMerchantFriendResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMerchantFriendResponse) SetResultMsg(v string) *UpdateMerchantFriendResponse {
	s.ResultMsg = &v
	return s
}

type CreateEquityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 授权类型 0 Auto，1Contract
	AuthType *int64 `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 结算币种
	Currency *string `json:"currency,omitempty" xml:"currency,omitempty" require:"true"`
	// 权益价格（单位：元）
	DefaultPrice *string `json:"default_price,omitempty" xml:"default_price,omitempty" require:"true"`
	// 代理操作专用，要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品详情信息
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 权益商品详情图。上传仅接受链接，请使用OSS存储服务上传图片(;分隔)
	DescImages *string `json:"desc_images,omitempty" xml:"desc_images,omitempty" require:"true"`
	// 权益商品名称
	EquityName *string `json:"equity_name,omitempty" xml:"equity_name,omitempty" require:"true"`
	// 权益商品类型：类型为整型（不大于：2147483647），需要进行细分，类型由三部分组成；aabbbbcccc。aa 为大类分类，bbbb 为细项分类（无细项分类时为0000），cccc 为数据格式分类（其中0000表示无格式要求）。请根据实际商品类型填写，具体类型和兑换时数据结构查看文档【https://tech.antfin.com/docs/2/163896】 。不可修改，如需修改需重新发布商品
	EquityType *int64 `json:"equity_type,omitempty" xml:"equity_type,omitempty" require:"true"`
	// 字段决定权益商品是否全量链上客户可见，当选择权益为false时，需要使用baas.antdao.equity.merchant.open接口增加权益商品可见客户
	IfPublic *bool `json:"if_public,omitempty" xml:"if_public,omitempty" require:"true"`
	// 权益商品主图。上传仅接受链接，请使用OSS存储服务上传图片(;分隔)
	Images *string `json:"images,omitempty" xml:"images,omitempty" require:"true"`
	// 商户每日兑换上限
	LimitPerMerchantAndDay *int64 `json:"limit_per_merchant_and_day,omitempty" xml:"limit_per_merchant_and_day,omitempty" require:"true"`
	// 商户每月兑换上限
	LimitPerMerchantAndMonth *int64 `json:"limit_per_merchant_and_month,omitempty" xml:"limit_per_merchant_and_month,omitempty" require:"true"`
	// 用户每日兑换上限
	LimitPerUserAndDay *int64 `json:"limit_per_user_and_day,omitempty" xml:"limit_per_user_and_day,omitempty" require:"true"`
	// 用户每月兑换上限
	LimitPerUserAndMonth *int64 `json:"limit_per_user_and_month,omitempty" xml:"limit_per_user_and_month,omitempty" require:"true"`
	// 若需要兑换方提供的特殊信息，可增加在备注字段，并要求兑换方是否传入（按照需求方自定义内容信息）
	// - 如必须传入证件号，手机号信息，则权益需要通过运营平台审核，非必须采集信息将拒绝上架
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 权益商品库存数量
	TotalCount *string `json:"total_count,omitempty" xml:"total_count,omitempty" require:"true"`
	// 权益商品使用有效期结束时间（毫秒）
	UseValidNotAfter *int64 `json:"use_valid_not_after,omitempty" xml:"use_valid_not_after,omitempty" require:"true"`
	// 权益商品使用有效期开始时间（毫秒）
	UseValidNotBefore *int64 `json:"use_valid_not_before,omitempty" xml:"use_valid_not_before,omitempty" require:"true"`
	// 权益商品兑换有效期结束时间（毫秒）
	ValidNotAfter *int64 `json:"valid_not_after,omitempty" xml:"valid_not_after,omitempty" require:"true"`
	// 权益商品兑换有效期开始时间（毫秒）
	ValidNotBefore *int64 `json:"valid_not_before,omitempty" xml:"valid_not_before,omitempty" require:"true"`
	// 权益商品面值（单位：元）
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s CreateEquityRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEquityRequest) GoString() string {
	return s.String()
}

func (s *CreateEquityRequest) SetAuthToken(v string) *CreateEquityRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateEquityRequest) SetProductInstanceId(v string) *CreateEquityRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateEquityRequest) SetAuthType(v int64) *CreateEquityRequest {
	s.AuthType = &v
	return s
}

func (s *CreateEquityRequest) SetChainId(v string) *CreateEquityRequest {
	s.ChainId = &v
	return s
}

func (s *CreateEquityRequest) SetCurrency(v string) *CreateEquityRequest {
	s.Currency = &v
	return s
}

func (s *CreateEquityRequest) SetDefaultPrice(v string) *CreateEquityRequest {
	s.DefaultPrice = &v
	return s
}

func (s *CreateEquityRequest) SetDelegatedTenantId(v string) *CreateEquityRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *CreateEquityRequest) SetDescription(v string) *CreateEquityRequest {
	s.Description = &v
	return s
}

func (s *CreateEquityRequest) SetDescImages(v string) *CreateEquityRequest {
	s.DescImages = &v
	return s
}

func (s *CreateEquityRequest) SetEquityName(v string) *CreateEquityRequest {
	s.EquityName = &v
	return s
}

func (s *CreateEquityRequest) SetEquityType(v int64) *CreateEquityRequest {
	s.EquityType = &v
	return s
}

func (s *CreateEquityRequest) SetIfPublic(v bool) *CreateEquityRequest {
	s.IfPublic = &v
	return s
}

func (s *CreateEquityRequest) SetImages(v string) *CreateEquityRequest {
	s.Images = &v
	return s
}

func (s *CreateEquityRequest) SetLimitPerMerchantAndDay(v int64) *CreateEquityRequest {
	s.LimitPerMerchantAndDay = &v
	return s
}

func (s *CreateEquityRequest) SetLimitPerMerchantAndMonth(v int64) *CreateEquityRequest {
	s.LimitPerMerchantAndMonth = &v
	return s
}

func (s *CreateEquityRequest) SetLimitPerUserAndDay(v int64) *CreateEquityRequest {
	s.LimitPerUserAndDay = &v
	return s
}

func (s *CreateEquityRequest) SetLimitPerUserAndMonth(v int64) *CreateEquityRequest {
	s.LimitPerUserAndMonth = &v
	return s
}

func (s *CreateEquityRequest) SetMemo(v string) *CreateEquityRequest {
	s.Memo = &v
	return s
}

func (s *CreateEquityRequest) SetOutTxId(v string) *CreateEquityRequest {
	s.OutTxId = &v
	return s
}

func (s *CreateEquityRequest) SetTotalCount(v string) *CreateEquityRequest {
	s.TotalCount = &v
	return s
}

func (s *CreateEquityRequest) SetUseValidNotAfter(v int64) *CreateEquityRequest {
	s.UseValidNotAfter = &v
	return s
}

func (s *CreateEquityRequest) SetUseValidNotBefore(v int64) *CreateEquityRequest {
	s.UseValidNotBefore = &v
	return s
}

func (s *CreateEquityRequest) SetValidNotAfter(v int64) *CreateEquityRequest {
	s.ValidNotAfter = &v
	return s
}

func (s *CreateEquityRequest) SetValidNotBefore(v int64) *CreateEquityRequest {
	s.ValidNotBefore = &v
	return s
}

func (s *CreateEquityRequest) SetValue(v string) *CreateEquityRequest {
	s.Value = &v
	return s
}

type CreateEquityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 请求ID，用于查询异步发布权益结果
	CreateEquityRequestId *string `json:"create_equity_request_id,omitempty" xml:"create_equity_request_id,omitempty"`
}

func (s CreateEquityResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEquityResponse) GoString() string {
	return s.String()
}

func (s *CreateEquityResponse) SetReqMsgId(v string) *CreateEquityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateEquityResponse) SetResultCode(v string) *CreateEquityResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateEquityResponse) SetResultMsg(v string) *CreateEquityResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateEquityResponse) SetCreateEquityRequestId(v string) *CreateEquityResponse {
	s.CreateEquityRequestId = &v
	return s
}

type OfflineEquityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s OfflineEquityRequest) String() string {
	return tea.Prettify(s)
}

func (s OfflineEquityRequest) GoString() string {
	return s.String()
}

func (s *OfflineEquityRequest) SetAuthToken(v string) *OfflineEquityRequest {
	s.AuthToken = &v
	return s
}

func (s *OfflineEquityRequest) SetProductInstanceId(v string) *OfflineEquityRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OfflineEquityRequest) SetChainId(v string) *OfflineEquityRequest {
	s.ChainId = &v
	return s
}

func (s *OfflineEquityRequest) SetEquityId(v string) *OfflineEquityRequest {
	s.EquityId = &v
	return s
}

func (s *OfflineEquityRequest) SetOutTxId(v string) *OfflineEquityRequest {
	s.OutTxId = &v
	return s
}

type OfflineEquityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s OfflineEquityResponse) String() string {
	return tea.Prettify(s)
}

func (s OfflineEquityResponse) GoString() string {
	return s.String()
}

func (s *OfflineEquityResponse) SetReqMsgId(v string) *OfflineEquityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OfflineEquityResponse) SetResultCode(v string) *OfflineEquityResponse {
	s.ResultCode = &v
	return s
}

func (s *OfflineEquityResponse) SetResultMsg(v string) *OfflineEquityResponse {
	s.ResultMsg = &v
	return s
}

type FreezeEquityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s FreezeEquityRequest) String() string {
	return tea.Prettify(s)
}

func (s FreezeEquityRequest) GoString() string {
	return s.String()
}

func (s *FreezeEquityRequest) SetAuthToken(v string) *FreezeEquityRequest {
	s.AuthToken = &v
	return s
}

func (s *FreezeEquityRequest) SetProductInstanceId(v string) *FreezeEquityRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *FreezeEquityRequest) SetChainId(v string) *FreezeEquityRequest {
	s.ChainId = &v
	return s
}

func (s *FreezeEquityRequest) SetEquityId(v string) *FreezeEquityRequest {
	s.EquityId = &v
	return s
}

func (s *FreezeEquityRequest) SetOutTxId(v string) *FreezeEquityRequest {
	s.OutTxId = &v
	return s
}

type FreezeEquityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s FreezeEquityResponse) String() string {
	return tea.Prettify(s)
}

func (s FreezeEquityResponse) GoString() string {
	return s.String()
}

func (s *FreezeEquityResponse) SetReqMsgId(v string) *FreezeEquityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *FreezeEquityResponse) SetResultCode(v string) *FreezeEquityResponse {
	s.ResultCode = &v
	return s
}

func (s *FreezeEquityResponse) SetResultMsg(v string) *FreezeEquityResponse {
	s.ResultMsg = &v
	return s
}

type OpenEquityMerchantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 代理操作专用，要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 被授权的租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 更新操作，添加或者删除
	OptType *string `json:"opt_type,omitempty" xml:"opt_type,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s OpenEquityMerchantRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenEquityMerchantRequest) GoString() string {
	return s.String()
}

func (s *OpenEquityMerchantRequest) SetAuthToken(v string) *OpenEquityMerchantRequest {
	s.AuthToken = &v
	return s
}

func (s *OpenEquityMerchantRequest) SetProductInstanceId(v string) *OpenEquityMerchantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OpenEquityMerchantRequest) SetChainId(v string) *OpenEquityMerchantRequest {
	s.ChainId = &v
	return s
}

func (s *OpenEquityMerchantRequest) SetDelegatedTenantId(v string) *OpenEquityMerchantRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *OpenEquityMerchantRequest) SetEquityId(v string) *OpenEquityMerchantRequest {
	s.EquityId = &v
	return s
}

func (s *OpenEquityMerchantRequest) SetOptTenantId(v string) *OpenEquityMerchantRequest {
	s.OptTenantId = &v
	return s
}

func (s *OpenEquityMerchantRequest) SetOptType(v string) *OpenEquityMerchantRequest {
	s.OptType = &v
	return s
}

func (s *OpenEquityMerchantRequest) SetOutTxId(v string) *OpenEquityMerchantRequest {
	s.OutTxId = &v
	return s
}

type OpenEquityMerchantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s OpenEquityMerchantResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenEquityMerchantResponse) GoString() string {
	return s.String()
}

func (s *OpenEquityMerchantResponse) SetReqMsgId(v string) *OpenEquityMerchantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OpenEquityMerchantResponse) SetResultCode(v string) *OpenEquityMerchantResponse {
	s.ResultCode = &v
	return s
}

func (s *OpenEquityMerchantResponse) SetResultMsg(v string) *OpenEquityMerchantResponse {
	s.ResultMsg = &v
	return s
}

type AuthEquityMerchantuserpriceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户兑换价格（单位：元）。价格和比例二选一，且只能填写一个。
	Amount *string `json:"amount,omitempty" xml:"amount,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 代理操作专用，要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 操作用户
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 比例。价格和比例二选一，且只能填写一个。
	Ratio *string `json:"ratio,omitempty" xml:"ratio,omitempty"`
}

func (s AuthEquityMerchantuserpriceRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthEquityMerchantuserpriceRequest) GoString() string {
	return s.String()
}

func (s *AuthEquityMerchantuserpriceRequest) SetAuthToken(v string) *AuthEquityMerchantuserpriceRequest {
	s.AuthToken = &v
	return s
}

func (s *AuthEquityMerchantuserpriceRequest) SetProductInstanceId(v string) *AuthEquityMerchantuserpriceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AuthEquityMerchantuserpriceRequest) SetAmount(v string) *AuthEquityMerchantuserpriceRequest {
	s.Amount = &v
	return s
}

func (s *AuthEquityMerchantuserpriceRequest) SetChainId(v string) *AuthEquityMerchantuserpriceRequest {
	s.ChainId = &v
	return s
}

func (s *AuthEquityMerchantuserpriceRequest) SetDelegatedTenantId(v string) *AuthEquityMerchantuserpriceRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *AuthEquityMerchantuserpriceRequest) SetEquityId(v string) *AuthEquityMerchantuserpriceRequest {
	s.EquityId = &v
	return s
}

func (s *AuthEquityMerchantuserpriceRequest) SetOptTenantId(v string) *AuthEquityMerchantuserpriceRequest {
	s.OptTenantId = &v
	return s
}

func (s *AuthEquityMerchantuserpriceRequest) SetOutTxId(v string) *AuthEquityMerchantuserpriceRequest {
	s.OutTxId = &v
	return s
}

func (s *AuthEquityMerchantuserpriceRequest) SetRatio(v string) *AuthEquityMerchantuserpriceRequest {
	s.Ratio = &v
	return s
}

type AuthEquityMerchantuserpriceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AuthEquityMerchantuserpriceResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthEquityMerchantuserpriceResponse) GoString() string {
	return s.String()
}

func (s *AuthEquityMerchantuserpriceResponse) SetReqMsgId(v string) *AuthEquityMerchantuserpriceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AuthEquityMerchantuserpriceResponse) SetResultCode(v string) *AuthEquityMerchantuserpriceResponse {
	s.ResultCode = &v
	return s
}

func (s *AuthEquityMerchantuserpriceResponse) SetResultMsg(v string) *AuthEquityMerchantuserpriceResponse {
	s.ResultMsg = &v
	return s
}

type UpdateEquityDefaultpriceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 价格
	Amount *string `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 代理操作专用，要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s UpdateEquityDefaultpriceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEquityDefaultpriceRequest) GoString() string {
	return s.String()
}

func (s *UpdateEquityDefaultpriceRequest) SetAuthToken(v string) *UpdateEquityDefaultpriceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateEquityDefaultpriceRequest) SetProductInstanceId(v string) *UpdateEquityDefaultpriceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateEquityDefaultpriceRequest) SetAmount(v string) *UpdateEquityDefaultpriceRequest {
	s.Amount = &v
	return s
}

func (s *UpdateEquityDefaultpriceRequest) SetChainId(v string) *UpdateEquityDefaultpriceRequest {
	s.ChainId = &v
	return s
}

func (s *UpdateEquityDefaultpriceRequest) SetDelegatedTenantId(v string) *UpdateEquityDefaultpriceRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *UpdateEquityDefaultpriceRequest) SetEquityId(v string) *UpdateEquityDefaultpriceRequest {
	s.EquityId = &v
	return s
}

func (s *UpdateEquityDefaultpriceRequest) SetOutTxId(v string) *UpdateEquityDefaultpriceRequest {
	s.OutTxId = &v
	return s
}

type UpdateEquityDefaultpriceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateEquityDefaultpriceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEquityDefaultpriceResponse) GoString() string {
	return s.String()
}

func (s *UpdateEquityDefaultpriceResponse) SetReqMsgId(v string) *UpdateEquityDefaultpriceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateEquityDefaultpriceResponse) SetResultCode(v string) *UpdateEquityDefaultpriceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateEquityDefaultpriceResponse) SetResultMsg(v string) *UpdateEquityDefaultpriceResponse {
	s.ResultMsg = &v
	return s
}

type UpdateEquityTenantpriceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 价格（单位：元）
	Amount *string `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 定向价格租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s UpdateEquityTenantpriceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEquityTenantpriceRequest) GoString() string {
	return s.String()
}

func (s *UpdateEquityTenantpriceRequest) SetAuthToken(v string) *UpdateEquityTenantpriceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateEquityTenantpriceRequest) SetProductInstanceId(v string) *UpdateEquityTenantpriceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateEquityTenantpriceRequest) SetAmount(v string) *UpdateEquityTenantpriceRequest {
	s.Amount = &v
	return s
}

func (s *UpdateEquityTenantpriceRequest) SetChainId(v string) *UpdateEquityTenantpriceRequest {
	s.ChainId = &v
	return s
}

func (s *UpdateEquityTenantpriceRequest) SetDelegatedTenantId(v string) *UpdateEquityTenantpriceRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *UpdateEquityTenantpriceRequest) SetEquityId(v string) *UpdateEquityTenantpriceRequest {
	s.EquityId = &v
	return s
}

func (s *UpdateEquityTenantpriceRequest) SetOptTenantId(v string) *UpdateEquityTenantpriceRequest {
	s.OptTenantId = &v
	return s
}

func (s *UpdateEquityTenantpriceRequest) SetOutTxId(v string) *UpdateEquityTenantpriceRequest {
	s.OutTxId = &v
	return s
}

type UpdateEquityTenantpriceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateEquityTenantpriceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEquityTenantpriceResponse) GoString() string {
	return s.String()
}

func (s *UpdateEquityTenantpriceResponse) SetReqMsgId(v string) *UpdateEquityTenantpriceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateEquityTenantpriceResponse) SetResultCode(v string) *UpdateEquityTenantpriceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateEquityTenantpriceResponse) SetResultMsg(v string) *UpdateEquityTenantpriceResponse {
	s.ResultMsg = &v
	return s
}

type AddEquityCountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 权益库存数量
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 代理操作专用，要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s AddEquityCountRequest) String() string {
	return tea.Prettify(s)
}

func (s AddEquityCountRequest) GoString() string {
	return s.String()
}

func (s *AddEquityCountRequest) SetAuthToken(v string) *AddEquityCountRequest {
	s.AuthToken = &v
	return s
}

func (s *AddEquityCountRequest) SetProductInstanceId(v string) *AddEquityCountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddEquityCountRequest) SetAmount(v int64) *AddEquityCountRequest {
	s.Amount = &v
	return s
}

func (s *AddEquityCountRequest) SetChainId(v string) *AddEquityCountRequest {
	s.ChainId = &v
	return s
}

func (s *AddEquityCountRequest) SetDelegatedTenantId(v string) *AddEquityCountRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *AddEquityCountRequest) SetEquityId(v string) *AddEquityCountRequest {
	s.EquityId = &v
	return s
}

func (s *AddEquityCountRequest) SetOutTxId(v string) *AddEquityCountRequest {
	s.OutTxId = &v
	return s
}

type AddEquityCountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddEquityCountResponse) String() string {
	return tea.Prettify(s)
}

func (s AddEquityCountResponse) GoString() string {
	return s.String()
}

func (s *AddEquityCountResponse) SetReqMsgId(v string) *AddEquityCountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddEquityCountResponse) SetResultCode(v string) *AddEquityCountResponse {
	s.ResultCode = &v
	return s
}

func (s *AddEquityCountResponse) SetResultMsg(v string) *AddEquityCountResponse {
	s.ResultMsg = &v
	return s
}

type UpdateEquityExchangelimitRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 代理操作专用，要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 商户每日兑换上限
	LimitPerMerchantAndDay *int64 `json:"limit_per_merchant_and_day,omitempty" xml:"limit_per_merchant_and_day,omitempty"`
	// 商户每月兑换上限
	LimitPerMerchantAndMontn *int64 `json:"limit_per_merchant_and_montn,omitempty" xml:"limit_per_merchant_and_montn,omitempty"`
	// 用户每日兑换上限
	LimitPerUserAndDay *int64 `json:"limit_per_user_and_day,omitempty" xml:"limit_per_user_and_day,omitempty"`
	// 用户每月兑换上限
	LimitPerUserAndMonth *int64 `json:"limit_per_user_and_month,omitempty" xml:"limit_per_user_and_month,omitempty"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s UpdateEquityExchangelimitRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEquityExchangelimitRequest) GoString() string {
	return s.String()
}

func (s *UpdateEquityExchangelimitRequest) SetAuthToken(v string) *UpdateEquityExchangelimitRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateEquityExchangelimitRequest) SetProductInstanceId(v string) *UpdateEquityExchangelimitRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateEquityExchangelimitRequest) SetChainId(v string) *UpdateEquityExchangelimitRequest {
	s.ChainId = &v
	return s
}

func (s *UpdateEquityExchangelimitRequest) SetDelegatedTenantId(v string) *UpdateEquityExchangelimitRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *UpdateEquityExchangelimitRequest) SetEquityId(v string) *UpdateEquityExchangelimitRequest {
	s.EquityId = &v
	return s
}

func (s *UpdateEquityExchangelimitRequest) SetLimitPerMerchantAndDay(v int64) *UpdateEquityExchangelimitRequest {
	s.LimitPerMerchantAndDay = &v
	return s
}

func (s *UpdateEquityExchangelimitRequest) SetLimitPerMerchantAndMontn(v int64) *UpdateEquityExchangelimitRequest {
	s.LimitPerMerchantAndMontn = &v
	return s
}

func (s *UpdateEquityExchangelimitRequest) SetLimitPerUserAndDay(v int64) *UpdateEquityExchangelimitRequest {
	s.LimitPerUserAndDay = &v
	return s
}

func (s *UpdateEquityExchangelimitRequest) SetLimitPerUserAndMonth(v int64) *UpdateEquityExchangelimitRequest {
	s.LimitPerUserAndMonth = &v
	return s
}

func (s *UpdateEquityExchangelimitRequest) SetOutTxId(v string) *UpdateEquityExchangelimitRequest {
	s.OutTxId = &v
	return s
}

type UpdateEquityExchangelimitResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateEquityExchangelimitResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEquityExchangelimitResponse) GoString() string {
	return s.String()
}

func (s *UpdateEquityExchangelimitResponse) SetReqMsgId(v string) *UpdateEquityExchangelimitResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateEquityExchangelimitResponse) SetResultCode(v string) *UpdateEquityExchangelimitResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateEquityExchangelimitResponse) SetResultMsg(v string) *UpdateEquityExchangelimitResponse {
	s.ResultMsg = &v
	return s
}

type UpdateEquityValidtimeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要代理的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 权益商品使用有效期右闭区间
	UseValidNotAfter *string `json:"use_valid_not_after,omitempty" xml:"use_valid_not_after,omitempty"`
	// 权益商品使用有效期左闭区间
	UseValidNotBefore *string `json:"use_valid_not_before,omitempty" xml:"use_valid_not_before,omitempty"`
	// 权益商品兑换有效期右闭区间
	ValidNotAfter *string `json:"valid_not_after,omitempty" xml:"valid_not_after,omitempty"`
	// 权益商品兑换有效期左闭区间
	ValidNotBefore *string `json:"valid_not_before,omitempty" xml:"valid_not_before,omitempty"`
}

func (s UpdateEquityValidtimeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEquityValidtimeRequest) GoString() string {
	return s.String()
}

func (s *UpdateEquityValidtimeRequest) SetAuthToken(v string) *UpdateEquityValidtimeRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateEquityValidtimeRequest) SetProductInstanceId(v string) *UpdateEquityValidtimeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateEquityValidtimeRequest) SetChainId(v string) *UpdateEquityValidtimeRequest {
	s.ChainId = &v
	return s
}

func (s *UpdateEquityValidtimeRequest) SetDelegatedTenantId(v string) *UpdateEquityValidtimeRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *UpdateEquityValidtimeRequest) SetEquityId(v string) *UpdateEquityValidtimeRequest {
	s.EquityId = &v
	return s
}

func (s *UpdateEquityValidtimeRequest) SetOutTxId(v string) *UpdateEquityValidtimeRequest {
	s.OutTxId = &v
	return s
}

func (s *UpdateEquityValidtimeRequest) SetUseValidNotAfter(v string) *UpdateEquityValidtimeRequest {
	s.UseValidNotAfter = &v
	return s
}

func (s *UpdateEquityValidtimeRequest) SetUseValidNotBefore(v string) *UpdateEquityValidtimeRequest {
	s.UseValidNotBefore = &v
	return s
}

func (s *UpdateEquityValidtimeRequest) SetValidNotAfter(v string) *UpdateEquityValidtimeRequest {
	s.ValidNotAfter = &v
	return s
}

func (s *UpdateEquityValidtimeRequest) SetValidNotBefore(v string) *UpdateEquityValidtimeRequest {
	s.ValidNotBefore = &v
	return s
}

type UpdateEquityValidtimeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateEquityValidtimeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEquityValidtimeResponse) GoString() string {
	return s.String()
}

func (s *UpdateEquityValidtimeResponse) SetReqMsgId(v string) *UpdateEquityValidtimeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateEquityValidtimeResponse) SetResultCode(v string) *UpdateEquityValidtimeResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateEquityValidtimeResponse) SetResultMsg(v string) *UpdateEquityValidtimeResponse {
	s.ResultMsg = &v
	return s
}

type QueryEquityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 被检索商户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty"`
	// 交易限制日期(yyyyMMdd或yyyyMM)(可选)
	TargetDate *string `json:"target_date,omitempty" xml:"target_date,omitempty"`
	// 被检索用户ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s QueryEquityRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEquityRequest) GoString() string {
	return s.String()
}

func (s *QueryEquityRequest) SetAuthToken(v string) *QueryEquityRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryEquityRequest) SetProductInstanceId(v string) *QueryEquityRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryEquityRequest) SetChainId(v string) *QueryEquityRequest {
	s.ChainId = &v
	return s
}

func (s *QueryEquityRequest) SetDelegatedTenantId(v string) *QueryEquityRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *QueryEquityRequest) SetEquityId(v string) *QueryEquityRequest {
	s.EquityId = &v
	return s
}

func (s *QueryEquityRequest) SetOptTenantId(v string) *QueryEquityRequest {
	s.OptTenantId = &v
	return s
}

func (s *QueryEquityRequest) SetTargetDate(v string) *QueryEquityRequest {
	s.TargetDate = &v
	return s
}

func (s *QueryEquityRequest) SetUserId(v string) *QueryEquityRequest {
	s.UserId = &v
	return s
}

type QueryEquityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 权益商品完整信息: equityType 权益类型：0积分，1卡券，2实物。 status 权益状态：0可用状态，1下线，2冻结。 authType 权益授权类型：0自动，1合约。
	//  { "equity_id": "6041f851f4d", "tenant_id": "ZEJEZKUA", "admin_id": "ed7b3ac3c061", "equity_type": 1, "equity_name": "FDCardtest", "description": "FDCard", "total_count": "1000000", "status": 0, "auth_type": 0, "currency": "CNY", "value": "10.0000", "default_price": "1.0000", "images": "oss://myexchange/12593acf32dd6d4257fa0.jpeg", "desc_images": "", "memo": "", "is_public": true, "valid_not_before": 112692, "valid_not_after": 112654365244, "use_valid_not_before": 112612, "use_valid_not_after": 11265436524415235, "limit_per_user_and_day": 1000000, "limit_per_user_and_month": 100000, "limit_per_merchant_and_day": 1000000, "limit_per_merchant_and_month": 1000000, "equity_ext_info": { "open_to_tenant_id": "", "tenant_price": "", "tenant_user_price": { "snapshot_tenant_price": "", "user_price_type": 0, "price": "", "ratio": "" }, "target_date": "", "limit_per_day_used": 0, "limit_per_month_used": 0 } }
	Equity *Equity `json:"equity,omitempty" xml:"equity,omitempty"`
	// 权益图片的永久oss地址
	Urls []*string `json:"urls,omitempty" xml:"urls,omitempty" type:"Repeated"`
}

func (s QueryEquityResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEquityResponse) GoString() string {
	return s.String()
}

func (s *QueryEquityResponse) SetReqMsgId(v string) *QueryEquityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryEquityResponse) SetResultCode(v string) *QueryEquityResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryEquityResponse) SetResultMsg(v string) *QueryEquityResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryEquityResponse) SetEquity(v *Equity) *QueryEquityResponse {
	s.Equity = v
	return s
}

func (s *QueryEquityResponse) SetUrls(v []*string) *QueryEquityResponse {
	s.Urls = v
	return s
}

type ExecExchangeByuserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 资产ID
	AssetId *string `json:"asset_id,omitempty" xml:"asset_id,omitempty" require:"true"`
	// 资产发行方
	AssetIssuer *string `json:"asset_issuer,omitempty" xml:"asset_issuer,omitempty" require:"true"`
	// 期望资产汇率
	AssetRate *string `json:"asset_rate,omitempty" xml:"asset_rate,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 代理操作专用，要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 权益商品提供方ID
	EquityProvider *string `json:"equity_provider,omitempty" xml:"equity_provider,omitempty" require:"true"`
	// 期望权益汇率
	EquityRate *string `json:"equity_rate,omitempty" xml:"equity_rate,omitempty" require:"true"`
	// 兑换时必要信息，敏感信息需加密。兑换时必要的信息，敏感信息需加密。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 用户ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s ExecExchangeByuserRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecExchangeByuserRequest) GoString() string {
	return s.String()
}

func (s *ExecExchangeByuserRequest) SetAuthToken(v string) *ExecExchangeByuserRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecExchangeByuserRequest) SetProductInstanceId(v string) *ExecExchangeByuserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecExchangeByuserRequest) SetAssetId(v string) *ExecExchangeByuserRequest {
	s.AssetId = &v
	return s
}

func (s *ExecExchangeByuserRequest) SetAssetIssuer(v string) *ExecExchangeByuserRequest {
	s.AssetIssuer = &v
	return s
}

func (s *ExecExchangeByuserRequest) SetAssetRate(v string) *ExecExchangeByuserRequest {
	s.AssetRate = &v
	return s
}

func (s *ExecExchangeByuserRequest) SetChainId(v string) *ExecExchangeByuserRequest {
	s.ChainId = &v
	return s
}

func (s *ExecExchangeByuserRequest) SetDelegatedTenantId(v string) *ExecExchangeByuserRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *ExecExchangeByuserRequest) SetEquityId(v string) *ExecExchangeByuserRequest {
	s.EquityId = &v
	return s
}

func (s *ExecExchangeByuserRequest) SetEquityProvider(v string) *ExecExchangeByuserRequest {
	s.EquityProvider = &v
	return s
}

func (s *ExecExchangeByuserRequest) SetEquityRate(v string) *ExecExchangeByuserRequest {
	s.EquityRate = &v
	return s
}

func (s *ExecExchangeByuserRequest) SetMemo(v string) *ExecExchangeByuserRequest {
	s.Memo = &v
	return s
}

func (s *ExecExchangeByuserRequest) SetOutTxId(v string) *ExecExchangeByuserRequest {
	s.OutTxId = &v
	return s
}

func (s *ExecExchangeByuserRequest) SetUserId(v string) *ExecExchangeByuserRequest {
	s.UserId = &v
	return s
}

type ExecExchangeByuserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecExchangeByuserResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecExchangeByuserResponse) GoString() string {
	return s.String()
}

func (s *ExecExchangeByuserResponse) SetReqMsgId(v string) *ExecExchangeByuserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecExchangeByuserResponse) SetResultCode(v string) *ExecExchangeByuserResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecExchangeByuserResponse) SetResultMsg(v string) *ExecExchangeByuserResponse {
	s.ResultMsg = &v
	return s
}

type ExecExchangeBymerchantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 资产ID
	AssetId *string `json:"asset_id,omitempty" xml:"asset_id,omitempty" require:"true"`
	// 当前希望按照上述比例扣减用户资产
	AssetRate *string `json:"asset_rate,omitempty" xml:"asset_rate,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 权益商品ID，例：7f1be9108651f97513b5b59030f5b059e58a59d263ab426cbf26337f91642caa
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 用户兑换价格接口设置的价格（单位：元）
	EquityPrice *string `json:"equity_price,omitempty" xml:"equity_price,omitempty" require:"true"`
	// 兑换时必要的信息，敏感信息需加密。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896
	// 比如在兑换手机直充商品时，需要对{"countryCode": "86", "phone": "13900000000"} 使用供应商的公钥进行加密。
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 权益商品兑换外部流水ID，调用方自定义流水ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 采购商如果绑定了附加的公私钥对。在兑换商品时需要对SHA256(out_tx_id+tenant_id+asset_id+equity_id+equity_price+asset_rate+user_id+memo)使用ECC K1私钥签名（算法ECDSAWithSHA256，曲线Secp256K1），并转换为Hex。
	TxSig *string `json:"tx_sig,omitempty" xml:"tx_sig,omitempty"`
	// 受益用户名
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s ExecExchangeBymerchantRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecExchangeBymerchantRequest) GoString() string {
	return s.String()
}

func (s *ExecExchangeBymerchantRequest) SetAuthToken(v string) *ExecExchangeBymerchantRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecExchangeBymerchantRequest) SetProductInstanceId(v string) *ExecExchangeBymerchantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecExchangeBymerchantRequest) SetAssetId(v string) *ExecExchangeBymerchantRequest {
	s.AssetId = &v
	return s
}

func (s *ExecExchangeBymerchantRequest) SetAssetRate(v string) *ExecExchangeBymerchantRequest {
	s.AssetRate = &v
	return s
}

func (s *ExecExchangeBymerchantRequest) SetChainId(v string) *ExecExchangeBymerchantRequest {
	s.ChainId = &v
	return s
}

func (s *ExecExchangeBymerchantRequest) SetEquityId(v string) *ExecExchangeBymerchantRequest {
	s.EquityId = &v
	return s
}

func (s *ExecExchangeBymerchantRequest) SetEquityPrice(v string) *ExecExchangeBymerchantRequest {
	s.EquityPrice = &v
	return s
}

func (s *ExecExchangeBymerchantRequest) SetMemo(v string) *ExecExchangeBymerchantRequest {
	s.Memo = &v
	return s
}

func (s *ExecExchangeBymerchantRequest) SetOutTxId(v string) *ExecExchangeBymerchantRequest {
	s.OutTxId = &v
	return s
}

func (s *ExecExchangeBymerchantRequest) SetTxSig(v string) *ExecExchangeBymerchantRequest {
	s.TxSig = &v
	return s
}

func (s *ExecExchangeBymerchantRequest) SetUserId(v string) *ExecExchangeBymerchantRequest {
	s.UserId = &v
	return s
}

type ExecExchangeBymerchantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecExchangeBymerchantResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecExchangeBymerchantResponse) GoString() string {
	return s.String()
}

func (s *ExecExchangeBymerchantResponse) SetReqMsgId(v string) *ExecExchangeBymerchantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecExchangeBymerchantResponse) SetResultCode(v string) *ExecExchangeBymerchantResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecExchangeBymerchantResponse) SetResultMsg(v string) *ExecExchangeBymerchantResponse {
	s.ResultMsg = &v
	return s
}

type ConfirmExchangeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 附言。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s ConfirmExchangeRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmExchangeRequest) GoString() string {
	return s.String()
}

func (s *ConfirmExchangeRequest) SetAuthToken(v string) *ConfirmExchangeRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmExchangeRequest) SetProductInstanceId(v string) *ConfirmExchangeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmExchangeRequest) SetChainId(v string) *ConfirmExchangeRequest {
	s.ChainId = &v
	return s
}

func (s *ConfirmExchangeRequest) SetDelegatedTenantId(v string) *ConfirmExchangeRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *ConfirmExchangeRequest) SetEquityId(v string) *ConfirmExchangeRequest {
	s.EquityId = &v
	return s
}

func (s *ConfirmExchangeRequest) SetMemo(v string) *ConfirmExchangeRequest {
	s.Memo = &v
	return s
}

func (s *ConfirmExchangeRequest) SetOriginTxId(v string) *ConfirmExchangeRequest {
	s.OriginTxId = &v
	return s
}

func (s *ConfirmExchangeRequest) SetOutTxId(v string) *ConfirmExchangeRequest {
	s.OutTxId = &v
	return s
}

type ConfirmExchangeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ConfirmExchangeResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmExchangeResponse) GoString() string {
	return s.String()
}

func (s *ConfirmExchangeResponse) SetReqMsgId(v string) *ConfirmExchangeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmExchangeResponse) SetResultCode(v string) *ConfirmExchangeResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmExchangeResponse) SetResultMsg(v string) *ConfirmExchangeResponse {
	s.ResultMsg = &v
	return s
}

type ExecExchangeOutofstoreRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 缺货时通知给采购方的信息，若敏感信息需加密。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s ExecExchangeOutofstoreRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecExchangeOutofstoreRequest) GoString() string {
	return s.String()
}

func (s *ExecExchangeOutofstoreRequest) SetAuthToken(v string) *ExecExchangeOutofstoreRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecExchangeOutofstoreRequest) SetProductInstanceId(v string) *ExecExchangeOutofstoreRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecExchangeOutofstoreRequest) SetChainId(v string) *ExecExchangeOutofstoreRequest {
	s.ChainId = &v
	return s
}

func (s *ExecExchangeOutofstoreRequest) SetDelegatedTenantId(v string) *ExecExchangeOutofstoreRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *ExecExchangeOutofstoreRequest) SetEquityId(v string) *ExecExchangeOutofstoreRequest {
	s.EquityId = &v
	return s
}

func (s *ExecExchangeOutofstoreRequest) SetMemo(v string) *ExecExchangeOutofstoreRequest {
	s.Memo = &v
	return s
}

func (s *ExecExchangeOutofstoreRequest) SetOriginTxId(v string) *ExecExchangeOutofstoreRequest {
	s.OriginTxId = &v
	return s
}

func (s *ExecExchangeOutofstoreRequest) SetOutTxId(v string) *ExecExchangeOutofstoreRequest {
	s.OutTxId = &v
	return s
}

type ExecExchangeOutofstoreResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecExchangeOutofstoreResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecExchangeOutofstoreResponse) GoString() string {
	return s.String()
}

func (s *ExecExchangeOutofstoreResponse) SetReqMsgId(v string) *ExecExchangeOutofstoreResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecExchangeOutofstoreResponse) SetResultCode(v string) *ExecExchangeOutofstoreResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecExchangeOutofstoreResponse) SetResultMsg(v string) *ExecExchangeOutofstoreResponse {
	s.ResultMsg = &v
	return s
}

type SendExchangeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 发货商品的信息，敏感信息需加密，使用收货方公钥加密的权益信息。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896。比如在手机直充时可以返回 {  "voucher": "充值凭证，如有",  "memo": ""}信息。
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s SendExchangeRequest) String() string {
	return tea.Prettify(s)
}

func (s SendExchangeRequest) GoString() string {
	return s.String()
}

func (s *SendExchangeRequest) SetAuthToken(v string) *SendExchangeRequest {
	s.AuthToken = &v
	return s
}

func (s *SendExchangeRequest) SetProductInstanceId(v string) *SendExchangeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SendExchangeRequest) SetChainId(v string) *SendExchangeRequest {
	s.ChainId = &v
	return s
}

func (s *SendExchangeRequest) SetDelegatedTenantId(v string) *SendExchangeRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *SendExchangeRequest) SetEquityId(v string) *SendExchangeRequest {
	s.EquityId = &v
	return s
}

func (s *SendExchangeRequest) SetMemo(v string) *SendExchangeRequest {
	s.Memo = &v
	return s
}

func (s *SendExchangeRequest) SetOriginTxId(v string) *SendExchangeRequest {
	s.OriginTxId = &v
	return s
}

func (s *SendExchangeRequest) SetOutTxId(v string) *SendExchangeRequest {
	s.OutTxId = &v
	return s
}

type SendExchangeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SendExchangeResponse) String() string {
	return tea.Prettify(s)
}

func (s SendExchangeResponse) GoString() string {
	return s.String()
}

func (s *SendExchangeResponse) SetReqMsgId(v string) *SendExchangeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SendExchangeResponse) SetResultCode(v string) *SendExchangeResponse {
	s.ResultCode = &v
	return s
}

func (s *SendExchangeResponse) SetResultMsg(v string) *SendExchangeResponse {
	s.ResultMsg = &v
	return s
}

type ExecExchangeReceivebyuserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 收货时的信息，若敏感信息需加密。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 用户ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s ExecExchangeReceivebyuserRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecExchangeReceivebyuserRequest) GoString() string {
	return s.String()
}

func (s *ExecExchangeReceivebyuserRequest) SetAuthToken(v string) *ExecExchangeReceivebyuserRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecExchangeReceivebyuserRequest) SetProductInstanceId(v string) *ExecExchangeReceivebyuserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecExchangeReceivebyuserRequest) SetChainId(v string) *ExecExchangeReceivebyuserRequest {
	s.ChainId = &v
	return s
}

func (s *ExecExchangeReceivebyuserRequest) SetDelegatedTenantId(v string) *ExecExchangeReceivebyuserRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *ExecExchangeReceivebyuserRequest) SetMemo(v string) *ExecExchangeReceivebyuserRequest {
	s.Memo = &v
	return s
}

func (s *ExecExchangeReceivebyuserRequest) SetOriginTxId(v string) *ExecExchangeReceivebyuserRequest {
	s.OriginTxId = &v
	return s
}

func (s *ExecExchangeReceivebyuserRequest) SetOutTxId(v string) *ExecExchangeReceivebyuserRequest {
	s.OutTxId = &v
	return s
}

func (s *ExecExchangeReceivebyuserRequest) SetUserId(v string) *ExecExchangeReceivebyuserRequest {
	s.UserId = &v
	return s
}

type ExecExchangeReceivebyuserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecExchangeReceivebyuserResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecExchangeReceivebyuserResponse) GoString() string {
	return s.String()
}

func (s *ExecExchangeReceivebyuserResponse) SetReqMsgId(v string) *ExecExchangeReceivebyuserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecExchangeReceivebyuserResponse) SetResultCode(v string) *ExecExchangeReceivebyuserResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecExchangeReceivebyuserResponse) SetResultMsg(v string) *ExecExchangeReceivebyuserResponse {
	s.ResultMsg = &v
	return s
}

type ExecAssetExpireRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数量
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 资产ID
	AssetId *string `json:"asset_id,omitempty" xml:"asset_id,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 资产过期信息
	Info *string `json:"info,omitempty" xml:"info,omitempty"`
	// 过期的交易ID
	OriginalTxId *string `json:"original_tx_id,omitempty" xml:"original_tx_id,omitempty" require:"true"`
	// 外部交易ID，每个租户保证唯一
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 用户ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s ExecAssetExpireRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetExpireRequest) GoString() string {
	return s.String()
}

func (s *ExecAssetExpireRequest) SetAuthToken(v string) *ExecAssetExpireRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecAssetExpireRequest) SetProductInstanceId(v string) *ExecAssetExpireRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecAssetExpireRequest) SetAmount(v int64) *ExecAssetExpireRequest {
	s.Amount = &v
	return s
}

func (s *ExecAssetExpireRequest) SetAssetId(v string) *ExecAssetExpireRequest {
	s.AssetId = &v
	return s
}

func (s *ExecAssetExpireRequest) SetChainId(v string) *ExecAssetExpireRequest {
	s.ChainId = &v
	return s
}

func (s *ExecAssetExpireRequest) SetInfo(v string) *ExecAssetExpireRequest {
	s.Info = &v
	return s
}

func (s *ExecAssetExpireRequest) SetOriginalTxId(v string) *ExecAssetExpireRequest {
	s.OriginalTxId = &v
	return s
}

func (s *ExecAssetExpireRequest) SetOutTxId(v string) *ExecAssetExpireRequest {
	s.OutTxId = &v
	return s
}

func (s *ExecAssetExpireRequest) SetUserId(v string) *ExecAssetExpireRequest {
	s.UserId = &v
	return s
}

type ExecAssetExpireResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecAssetExpireResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetExpireResponse) GoString() string {
	return s.String()
}

func (s *ExecAssetExpireResponse) SetReqMsgId(v string) *ExecAssetExpireResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecAssetExpireResponse) SetResultCode(v string) *ExecAssetExpireResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecAssetExpireResponse) SetResultMsg(v string) *ExecAssetExpireResponse {
	s.ResultMsg = &v
	return s
}

type QueryAssetInstructionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 资产流水ID
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
}

func (s QueryAssetInstructionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAssetInstructionRequest) GoString() string {
	return s.String()
}

func (s *QueryAssetInstructionRequest) SetAuthToken(v string) *QueryAssetInstructionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAssetInstructionRequest) SetProductInstanceId(v string) *QueryAssetInstructionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAssetInstructionRequest) SetChainId(v string) *QueryAssetInstructionRequest {
	s.ChainId = &v
	return s
}

func (s *QueryAssetInstructionRequest) SetOriginTxId(v string) *QueryAssetInstructionRequest {
	s.OriginTxId = &v
	return s
}

type QueryAssetInstructionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 资产流水完整信息的json字符串。
	// direction 交易方向:：0正向交易，1反向交易。
	// type 交易类型：0 资产发行；1资产赎回；2资产发放；3资产发放回退；4资产风控调整；5资产过期；6资产支付；7资产支付退款。
	// status流水状态(Complete)；0完成
	Instruction *string `json:"instruction,omitempty" xml:"instruction,omitempty"`
}

func (s QueryAssetInstructionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAssetInstructionResponse) GoString() string {
	return s.String()
}

func (s *QueryAssetInstructionResponse) SetReqMsgId(v string) *QueryAssetInstructionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAssetInstructionResponse) SetResultCode(v string) *QueryAssetInstructionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAssetInstructionResponse) SetResultMsg(v string) *QueryAssetInstructionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAssetInstructionResponse) SetInstruction(v string) *QueryAssetInstructionResponse {
	s.Instruction = &v
	return s
}

type QueryExchangeInstructionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 发起操作的租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
}

func (s QueryExchangeInstructionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryExchangeInstructionRequest) GoString() string {
	return s.String()
}

func (s *QueryExchangeInstructionRequest) SetAuthToken(v string) *QueryExchangeInstructionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryExchangeInstructionRequest) SetProductInstanceId(v string) *QueryExchangeInstructionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryExchangeInstructionRequest) SetChainId(v string) *QueryExchangeInstructionRequest {
	s.ChainId = &v
	return s
}

func (s *QueryExchangeInstructionRequest) SetEquityId(v string) *QueryExchangeInstructionRequest {
	s.EquityId = &v
	return s
}

func (s *QueryExchangeInstructionRequest) SetOptTenantId(v string) *QueryExchangeInstructionRequest {
	s.OptTenantId = &v
	return s
}

func (s *QueryExchangeInstructionRequest) SetOriginTxId(v string) *QueryExchangeInstructionRequest {
	s.OriginTxId = &v
	return s
}

type QueryExchangeInstructionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 权益兑换流水完整信息
	Instruction *EInstruction `json:"instruction,omitempty" xml:"instruction,omitempty"`
}

func (s QueryExchangeInstructionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryExchangeInstructionResponse) GoString() string {
	return s.String()
}

func (s *QueryExchangeInstructionResponse) SetReqMsgId(v string) *QueryExchangeInstructionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryExchangeInstructionResponse) SetResultCode(v string) *QueryExchangeInstructionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryExchangeInstructionResponse) SetResultMsg(v string) *QueryExchangeInstructionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryExchangeInstructionResponse) SetInstruction(v *EInstruction) *QueryExchangeInstructionResponse {
	s.Instruction = v
	return s
}

type ExecAssetIssueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 充值数量
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 资产ID
	AssetId *string `json:"asset_id,omitempty" xml:"asset_id,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 备注信息
	Info *string `json:"info,omitempty" xml:"info,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 充值租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
}

func (s ExecAssetIssueRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetIssueRequest) GoString() string {
	return s.String()
}

func (s *ExecAssetIssueRequest) SetAuthToken(v string) *ExecAssetIssueRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecAssetIssueRequest) SetProductInstanceId(v string) *ExecAssetIssueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecAssetIssueRequest) SetAmount(v int64) *ExecAssetIssueRequest {
	s.Amount = &v
	return s
}

func (s *ExecAssetIssueRequest) SetAssetId(v string) *ExecAssetIssueRequest {
	s.AssetId = &v
	return s
}

func (s *ExecAssetIssueRequest) SetChainId(v string) *ExecAssetIssueRequest {
	s.ChainId = &v
	return s
}

func (s *ExecAssetIssueRequest) SetInfo(v string) *ExecAssetIssueRequest {
	s.Info = &v
	return s
}

func (s *ExecAssetIssueRequest) SetOutTxId(v string) *ExecAssetIssueRequest {
	s.OutTxId = &v
	return s
}

func (s *ExecAssetIssueRequest) SetOptTenantId(v string) *ExecAssetIssueRequest {
	s.OptTenantId = &v
	return s
}

type ExecAssetIssueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecAssetIssueResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetIssueResponse) GoString() string {
	return s.String()
}

func (s *ExecAssetIssueResponse) SetReqMsgId(v string) *ExecAssetIssueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecAssetIssueResponse) SetResultCode(v string) *ExecAssetIssueResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecAssetIssueResponse) SetResultMsg(v string) *ExecAssetIssueResponse {
	s.ResultMsg = &v
	return s
}

type ExecAssetRedeemRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 赎回数量
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 资产ID
	AssetId *string `json:"asset_id,omitempty" xml:"asset_id,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 备注信息
	Info *string `json:"info,omitempty" xml:"info,omitempty" require:"true"`
	// 要赎回的充值交易ID
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s ExecAssetRedeemRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetRedeemRequest) GoString() string {
	return s.String()
}

func (s *ExecAssetRedeemRequest) SetAuthToken(v string) *ExecAssetRedeemRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecAssetRedeemRequest) SetProductInstanceId(v string) *ExecAssetRedeemRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecAssetRedeemRequest) SetAmount(v int64) *ExecAssetRedeemRequest {
	s.Amount = &v
	return s
}

func (s *ExecAssetRedeemRequest) SetAssetId(v string) *ExecAssetRedeemRequest {
	s.AssetId = &v
	return s
}

func (s *ExecAssetRedeemRequest) SetChainId(v string) *ExecAssetRedeemRequest {
	s.ChainId = &v
	return s
}

func (s *ExecAssetRedeemRequest) SetInfo(v string) *ExecAssetRedeemRequest {
	s.Info = &v
	return s
}

func (s *ExecAssetRedeemRequest) SetOriginTxId(v string) *ExecAssetRedeemRequest {
	s.OriginTxId = &v
	return s
}

func (s *ExecAssetRedeemRequest) SetOutTxId(v string) *ExecAssetRedeemRequest {
	s.OutTxId = &v
	return s
}

type ExecAssetRedeemResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecAssetRedeemResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetRedeemResponse) GoString() string {
	return s.String()
}

func (s *ExecAssetRedeemResponse) SetReqMsgId(v string) *ExecAssetRedeemResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecAssetRedeemResponse) SetResultCode(v string) *ExecAssetRedeemResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecAssetRedeemResponse) SetResultMsg(v string) *ExecAssetRedeemResponse {
	s.ResultMsg = &v
	return s
}

type ExecAssetGrantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数量
	Amount *string `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 资产ID
	AssetId *string `json:"asset_id,omitempty" xml:"asset_id,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 资产发放信息
	Info *string `json:"info,omitempty" xml:"info,omitempty"`
	// 商户ID
	MerchantId *string `json:"merchant_id,omitempty" xml:"merchant_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 用户ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 有效时间
	ValidityTime *string `json:"validity_time,omitempty" xml:"validity_time,omitempty" require:"true"`
}

func (s ExecAssetGrantRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetGrantRequest) GoString() string {
	return s.String()
}

func (s *ExecAssetGrantRequest) SetAuthToken(v string) *ExecAssetGrantRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecAssetGrantRequest) SetProductInstanceId(v string) *ExecAssetGrantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecAssetGrantRequest) SetAmount(v string) *ExecAssetGrantRequest {
	s.Amount = &v
	return s
}

func (s *ExecAssetGrantRequest) SetAssetId(v string) *ExecAssetGrantRequest {
	s.AssetId = &v
	return s
}

func (s *ExecAssetGrantRequest) SetChainId(v string) *ExecAssetGrantRequest {
	s.ChainId = &v
	return s
}

func (s *ExecAssetGrantRequest) SetInfo(v string) *ExecAssetGrantRequest {
	s.Info = &v
	return s
}

func (s *ExecAssetGrantRequest) SetMerchantId(v string) *ExecAssetGrantRequest {
	s.MerchantId = &v
	return s
}

func (s *ExecAssetGrantRequest) SetOutTxId(v string) *ExecAssetGrantRequest {
	s.OutTxId = &v
	return s
}

func (s *ExecAssetGrantRequest) SetUserId(v string) *ExecAssetGrantRequest {
	s.UserId = &v
	return s
}

func (s *ExecAssetGrantRequest) SetValidityTime(v string) *ExecAssetGrantRequest {
	s.ValidityTime = &v
	return s
}

type ExecAssetGrantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecAssetGrantResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetGrantResponse) GoString() string {
	return s.String()
}

func (s *ExecAssetGrantResponse) SetReqMsgId(v string) *ExecAssetGrantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecAssetGrantResponse) SetResultCode(v string) *ExecAssetGrantResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecAssetGrantResponse) SetResultMsg(v string) *ExecAssetGrantResponse {
	s.ResultMsg = &v
	return s
}

type ExecAssetGrantrefundRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数量
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 资产ID
	AssetId *string `json:"asset_id,omitempty" xml:"asset_id,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 备注信息
	Info *string `json:"info,omitempty" xml:"info,omitempty" require:"true"`
	// 要回退的交易ID
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 用户ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s ExecAssetGrantrefundRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetGrantrefundRequest) GoString() string {
	return s.String()
}

func (s *ExecAssetGrantrefundRequest) SetAuthToken(v string) *ExecAssetGrantrefundRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecAssetGrantrefundRequest) SetProductInstanceId(v string) *ExecAssetGrantrefundRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecAssetGrantrefundRequest) SetAmount(v int64) *ExecAssetGrantrefundRequest {
	s.Amount = &v
	return s
}

func (s *ExecAssetGrantrefundRequest) SetAssetId(v string) *ExecAssetGrantrefundRequest {
	s.AssetId = &v
	return s
}

func (s *ExecAssetGrantrefundRequest) SetChainId(v string) *ExecAssetGrantrefundRequest {
	s.ChainId = &v
	return s
}

func (s *ExecAssetGrantrefundRequest) SetInfo(v string) *ExecAssetGrantrefundRequest {
	s.Info = &v
	return s
}

func (s *ExecAssetGrantrefundRequest) SetOriginTxId(v string) *ExecAssetGrantrefundRequest {
	s.OriginTxId = &v
	return s
}

func (s *ExecAssetGrantrefundRequest) SetOutTxId(v string) *ExecAssetGrantrefundRequest {
	s.OutTxId = &v
	return s
}

func (s *ExecAssetGrantrefundRequest) SetUserId(v string) *ExecAssetGrantrefundRequest {
	s.UserId = &v
	return s
}

type ExecAssetGrantrefundResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecAssetGrantrefundResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetGrantrefundResponse) GoString() string {
	return s.String()
}

func (s *ExecAssetGrantrefundResponse) SetReqMsgId(v string) *ExecAssetGrantrefundResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecAssetGrantrefundResponse) SetResultCode(v string) *ExecAssetGrantrefundResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecAssetGrantrefundResponse) SetResultMsg(v string) *ExecAssetGrantrefundResponse {
	s.ResultMsg = &v
	return s
}

type ExecAssetAdjustRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 风控调整数量
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 资产ID
	AssetId *string `json:"asset_id,omitempty" xml:"asset_id,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 风控调整信息
	Info *string `json:"info,omitempty" xml:"info,omitempty"`
	// 外部交易ID，每个租户保证唯一
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 用户ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s ExecAssetAdjustRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetAdjustRequest) GoString() string {
	return s.String()
}

func (s *ExecAssetAdjustRequest) SetAuthToken(v string) *ExecAssetAdjustRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecAssetAdjustRequest) SetProductInstanceId(v string) *ExecAssetAdjustRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecAssetAdjustRequest) SetAmount(v int64) *ExecAssetAdjustRequest {
	s.Amount = &v
	return s
}

func (s *ExecAssetAdjustRequest) SetAssetId(v string) *ExecAssetAdjustRequest {
	s.AssetId = &v
	return s
}

func (s *ExecAssetAdjustRequest) SetChainId(v string) *ExecAssetAdjustRequest {
	s.ChainId = &v
	return s
}

func (s *ExecAssetAdjustRequest) SetInfo(v string) *ExecAssetAdjustRequest {
	s.Info = &v
	return s
}

func (s *ExecAssetAdjustRequest) SetOutTxId(v string) *ExecAssetAdjustRequest {
	s.OutTxId = &v
	return s
}

func (s *ExecAssetAdjustRequest) SetUserId(v string) *ExecAssetAdjustRequest {
	s.UserId = &v
	return s
}

type ExecAssetAdjustResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecAssetAdjustResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetAdjustResponse) GoString() string {
	return s.String()
}

func (s *ExecAssetAdjustResponse) SetReqMsgId(v string) *ExecAssetAdjustResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecAssetAdjustResponse) SetResultCode(v string) *ExecAssetAdjustResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecAssetAdjustResponse) SetResultMsg(v string) *ExecAssetAdjustResponse {
	s.ResultMsg = &v
	return s
}

type QueryAssetRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 资产ID
	AssetId *string `json:"asset_id,omitempty" xml:"asset_id,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 资产查询相关的租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty"`
	// 若要查询用户持有的资产数量，输入用户ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s QueryAssetRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAssetRequest) GoString() string {
	return s.String()
}

func (s *QueryAssetRequest) SetAuthToken(v string) *QueryAssetRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAssetRequest) SetProductInstanceId(v string) *QueryAssetRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAssetRequest) SetAssetId(v string) *QueryAssetRequest {
	s.AssetId = &v
	return s
}

func (s *QueryAssetRequest) SetChainId(v string) *QueryAssetRequest {
	s.ChainId = &v
	return s
}

func (s *QueryAssetRequest) SetOptTenantId(v string) *QueryAssetRequest {
	s.OptTenantId = &v
	return s
}

func (s *QueryAssetRequest) SetUserId(v string) *QueryAssetRequest {
	s.UserId = &v
	return s
}

type QueryAssetResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 资产完整信息
	// {
	//             "asset_id": "CT::Asset001",
	//             "asset_name": "CTPoints",
	//             "tenant_id": "OREDKOCN",
	//             "admin_id": "f46857d8796fc2b829862e2752bda38f7eefeec5581ad41398002f50a3ad8ccd",
	//             "currency": "CNY",
	//             "asset_rate": "1000.0000",
	//             "total_issue_balance": "11111111.0000",
	//             "issue_account_balance": "0.0000",
	//             "relay_Account_balance": "0.0000",
	//             "receive_payment_account_balance": "0.0000",
	//             "overdue_recovery_account_balance": "",
	//             "status": 76,
	//             "asset_ext_info": {
	//                 "dispense_tenant_id": "",
	//                 "dispense_balance": "",
	//                 "user_id": "",
	//                 "user_credit_balance": ""
	//             }
	//         }
	Asset *Asset `json:"asset,omitempty" xml:"asset,omitempty"`
}

func (s QueryAssetResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAssetResponse) GoString() string {
	return s.String()
}

func (s *QueryAssetResponse) SetReqMsgId(v string) *QueryAssetResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAssetResponse) SetResultCode(v string) *QueryAssetResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAssetResponse) SetResultMsg(v string) *QueryAssetResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAssetResponse) SetAsset(v *Asset) *QueryAssetResponse {
	s.Asset = v
	return s
}

type ExecExchangeReceivebymerchantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 收货时的信息，若敏感信息需加密。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s ExecExchangeReceivebymerchantRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecExchangeReceivebymerchantRequest) GoString() string {
	return s.String()
}

func (s *ExecExchangeReceivebymerchantRequest) SetAuthToken(v string) *ExecExchangeReceivebymerchantRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecExchangeReceivebymerchantRequest) SetProductInstanceId(v string) *ExecExchangeReceivebymerchantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecExchangeReceivebymerchantRequest) SetChainId(v string) *ExecExchangeReceivebymerchantRequest {
	s.ChainId = &v
	return s
}

func (s *ExecExchangeReceivebymerchantRequest) SetEquityId(v string) *ExecExchangeReceivebymerchantRequest {
	s.EquityId = &v
	return s
}

func (s *ExecExchangeReceivebymerchantRequest) SetMemo(v string) *ExecExchangeReceivebymerchantRequest {
	s.Memo = &v
	return s
}

func (s *ExecExchangeReceivebymerchantRequest) SetOriginTxId(v string) *ExecExchangeReceivebymerchantRequest {
	s.OriginTxId = &v
	return s
}

func (s *ExecExchangeReceivebymerchantRequest) SetOutTxId(v string) *ExecExchangeReceivebymerchantRequest {
	s.OutTxId = &v
	return s
}

type ExecExchangeReceivebymerchantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecExchangeReceivebymerchantResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecExchangeReceivebymerchantResponse) GoString() string {
	return s.String()
}

func (s *ExecExchangeReceivebymerchantResponse) SetReqMsgId(v string) *ExecExchangeReceivebymerchantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecExchangeReceivebymerchantResponse) SetResultCode(v string) *ExecExchangeReceivebymerchantResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecExchangeReceivebymerchantResponse) SetResultMsg(v string) *ExecExchangeReceivebymerchantResponse {
	s.ResultMsg = &v
	return s
}

type QueryBlockRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
}

func (s QueryBlockRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockRequest) SetAuthToken(v string) *QueryBlockRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBlockRequest) SetProductInstanceId(v string) *QueryBlockRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBlockRequest) SetBlockNumber(v int64) *QueryBlockRequest {
	s.BlockNumber = &v
	return s
}

func (s *QueryBlockRequest) SetChainId(v string) *QueryBlockRequest {
	s.ChainId = &v
	return s
}

type QueryBlockResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 区块信息
	Block *Block `json:"block,omitempty" xml:"block,omitempty"`
	// 区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty"`
	// 过滤后的交易数量
	FilteredTxCount *int64 `json:"filtered_tx_count,omitempty" xml:"filtered_tx_count,omitempty"`
	// 区块中交易总数
	TotalTxCount *int64 `json:"total_tx_count,omitempty" xml:"total_tx_count,omitempty"`
}

func (s QueryBlockResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockResponse) SetReqMsgId(v string) *QueryBlockResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBlockResponse) SetResultCode(v string) *QueryBlockResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBlockResponse) SetResultMsg(v string) *QueryBlockResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBlockResponse) SetBlock(v *Block) *QueryBlockResponse {
	s.Block = v
	return s
}

func (s *QueryBlockResponse) SetBlockNumber(v int64) *QueryBlockResponse {
	s.BlockNumber = &v
	return s
}

func (s *QueryBlockResponse) SetChainId(v string) *QueryBlockResponse {
	s.ChainId = &v
	return s
}

func (s *QueryBlockResponse) SetFilteredTxCount(v int64) *QueryBlockResponse {
	s.FilteredTxCount = &v
	return s
}

func (s *QueryBlockResponse) SetTotalTxCount(v int64) *QueryBlockResponse {
	s.TotalTxCount = &v
	return s
}

type QueryBlockLastblocknumberRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
}

func (s QueryBlockLastblocknumberRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockLastblocknumberRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockLastblocknumberRequest) SetAuthToken(v string) *QueryBlockLastblocknumberRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBlockLastblocknumberRequest) SetProductInstanceId(v string) *QueryBlockLastblocknumberRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBlockLastblocknumberRequest) SetChainId(v string) *QueryBlockLastblocknumberRequest {
	s.ChainId = &v
	return s
}

type QueryBlockLastblocknumberResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 最新区块高度
	LastBlockNumber *int64 `json:"last_block_number,omitempty" xml:"last_block_number,omitempty"`
}

func (s QueryBlockLastblocknumberResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockLastblocknumberResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockLastblocknumberResponse) SetReqMsgId(v string) *QueryBlockLastblocknumberResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBlockLastblocknumberResponse) SetResultCode(v string) *QueryBlockLastblocknumberResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBlockLastblocknumberResponse) SetResultMsg(v string) *QueryBlockLastblocknumberResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBlockLastblocknumberResponse) SetLastBlockNumber(v int64) *QueryBlockLastblocknumberResponse {
	s.LastBlockNumber = &v
	return s
}

type UpdateEquityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 授权类型：0 Auto，1 Contract。不可修改，如需修改需重新发布商品
	AuthType *int64 `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 货币类型。不可修改，如需修改需重新发布商品。
	Currency *string `json:"currency,omitempty" xml:"currency,omitempty" require:"true"`
	// 默认价格（单位：元）
	DefaultPrice *string `json:"default_price,omitempty" xml:"default_price,omitempty" require:"true"`
	// 要代理的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品详细描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 描述图片信息(;分隔)
	DescImages *string `json:"desc_images,omitempty" xml:"desc_images,omitempty" require:"true"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 权益商品名称
	EquityName *string `json:"equity_name,omitempty" xml:"equity_name,omitempty" require:"true"`
	// 权益商品类型：类型为整型（不大于：2147483647），需要进行细分，类型由三部分组成；aabbbbcccc。aa 为大类分类，bbbb 为细项分类（无细项分类时为0000），cccc 为数据格式分类（其中0000表示无格式要求）。请根据实际商品类型填写，具体类型和兑换时数据结构查看文档【https://tech.antfin.com/docs/2/163896】。不可修改，如需修改需重新发布商品
	EquityType *int64 `json:"equity_type,omitempty" xml:"equity_type,omitempty" require:"true"`
	// 权益商品是否公开。不可修改，如需修改需重新发布商品
	IfPublic *bool `json:"if_public,omitempty" xml:"if_public,omitempty" require:"true"`
	// 主图片信息(;分隔)
	Images *string `json:"images,omitempty" xml:"images,omitempty" require:"true"`
	// 商户每日兑换上限
	LimitPerMerchantAndDay *int64 `json:"limit_per_merchant_and_day,omitempty" xml:"limit_per_merchant_and_day,omitempty" require:"true"`
	// 商户每月兑换上限
	LimitPerMerchantAndMonth *int64 `json:"limit_per_merchant_and_month,omitempty" xml:"limit_per_merchant_and_month,omitempty" require:"true"`
	// 用户每日兑换上限
	LimitPerUserAndDay *int64 `json:"limit_per_user_and_day,omitempty" xml:"limit_per_user_and_day,omitempty" require:"true"`
	// 用户每月兑换上限
	LimitPerUserAndMonth *int64 `json:"limit_per_user_and_month,omitempty" xml:"limit_per_user_and_month,omitempty" require:"true"`
	// 附言
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 库存
	TotalCount *string `json:"total_count,omitempty" xml:"total_count,omitempty" require:"true"`
	// 权益商品使用有效期结束时间（毫秒）
	UseValidNotAfter *int64 `json:"use_valid_not_after,omitempty" xml:"use_valid_not_after,omitempty" require:"true"`
	// 权益商品使用有效期开始时间（毫秒）
	UseValidNotBefore *int64 `json:"use_valid_not_before,omitempty" xml:"use_valid_not_before,omitempty" require:"true"`
	// 权益商品兑换有效期结束时间（毫秒）
	ValidNotAfter *int64 `json:"valid_not_after,omitempty" xml:"valid_not_after,omitempty" require:"true"`
	// 权益商品兑换有效期开始时间（毫秒）
	ValidNotBefore *int64 `json:"valid_not_before,omitempty" xml:"valid_not_before,omitempty" require:"true"`
	// 面值（单位：元）。不可修改，如需修改需重新发布商品
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s UpdateEquityRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEquityRequest) GoString() string {
	return s.String()
}

func (s *UpdateEquityRequest) SetAuthToken(v string) *UpdateEquityRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateEquityRequest) SetProductInstanceId(v string) *UpdateEquityRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateEquityRequest) SetAuthType(v int64) *UpdateEquityRequest {
	s.AuthType = &v
	return s
}

func (s *UpdateEquityRequest) SetChainId(v string) *UpdateEquityRequest {
	s.ChainId = &v
	return s
}

func (s *UpdateEquityRequest) SetCurrency(v string) *UpdateEquityRequest {
	s.Currency = &v
	return s
}

func (s *UpdateEquityRequest) SetDefaultPrice(v string) *UpdateEquityRequest {
	s.DefaultPrice = &v
	return s
}

func (s *UpdateEquityRequest) SetDelegatedTenantId(v string) *UpdateEquityRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *UpdateEquityRequest) SetDescription(v string) *UpdateEquityRequest {
	s.Description = &v
	return s
}

func (s *UpdateEquityRequest) SetDescImages(v string) *UpdateEquityRequest {
	s.DescImages = &v
	return s
}

func (s *UpdateEquityRequest) SetEquityId(v string) *UpdateEquityRequest {
	s.EquityId = &v
	return s
}

func (s *UpdateEquityRequest) SetEquityName(v string) *UpdateEquityRequest {
	s.EquityName = &v
	return s
}

func (s *UpdateEquityRequest) SetEquityType(v int64) *UpdateEquityRequest {
	s.EquityType = &v
	return s
}

func (s *UpdateEquityRequest) SetIfPublic(v bool) *UpdateEquityRequest {
	s.IfPublic = &v
	return s
}

func (s *UpdateEquityRequest) SetImages(v string) *UpdateEquityRequest {
	s.Images = &v
	return s
}

func (s *UpdateEquityRequest) SetLimitPerMerchantAndDay(v int64) *UpdateEquityRequest {
	s.LimitPerMerchantAndDay = &v
	return s
}

func (s *UpdateEquityRequest) SetLimitPerMerchantAndMonth(v int64) *UpdateEquityRequest {
	s.LimitPerMerchantAndMonth = &v
	return s
}

func (s *UpdateEquityRequest) SetLimitPerUserAndDay(v int64) *UpdateEquityRequest {
	s.LimitPerUserAndDay = &v
	return s
}

func (s *UpdateEquityRequest) SetLimitPerUserAndMonth(v int64) *UpdateEquityRequest {
	s.LimitPerUserAndMonth = &v
	return s
}

func (s *UpdateEquityRequest) SetMemo(v string) *UpdateEquityRequest {
	s.Memo = &v
	return s
}

func (s *UpdateEquityRequest) SetOutTxId(v string) *UpdateEquityRequest {
	s.OutTxId = &v
	return s
}

func (s *UpdateEquityRequest) SetTotalCount(v string) *UpdateEquityRequest {
	s.TotalCount = &v
	return s
}

func (s *UpdateEquityRequest) SetUseValidNotAfter(v int64) *UpdateEquityRequest {
	s.UseValidNotAfter = &v
	return s
}

func (s *UpdateEquityRequest) SetUseValidNotBefore(v int64) *UpdateEquityRequest {
	s.UseValidNotBefore = &v
	return s
}

func (s *UpdateEquityRequest) SetValidNotAfter(v int64) *UpdateEquityRequest {
	s.ValidNotAfter = &v
	return s
}

func (s *UpdateEquityRequest) SetValidNotBefore(v int64) *UpdateEquityRequest {
	s.ValidNotBefore = &v
	return s
}

func (s *UpdateEquityRequest) SetValue(v string) *UpdateEquityRequest {
	s.Value = &v
	return s
}

type UpdateEquityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateEquityResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEquityResponse) GoString() string {
	return s.String()
}

func (s *UpdateEquityResponse) SetReqMsgId(v string) *UpdateEquityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateEquityResponse) SetResultCode(v string) *UpdateEquityResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateEquityResponse) SetResultMsg(v string) *UpdateEquityResponse {
	s.ResultMsg = &v
	return s
}

type QueryEquityCreateresultRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 创建商品接口返回的createEquityRequestId
	CreateEquityRequestId *string `json:"create_equity_request_id,omitempty" xml:"create_equity_request_id,omitempty" require:"true"`
	// 要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
}

func (s QueryEquityCreateresultRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEquityCreateresultRequest) GoString() string {
	return s.String()
}

func (s *QueryEquityCreateresultRequest) SetAuthToken(v string) *QueryEquityCreateresultRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryEquityCreateresultRequest) SetProductInstanceId(v string) *QueryEquityCreateresultRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryEquityCreateresultRequest) SetChainId(v string) *QueryEquityCreateresultRequest {
	s.ChainId = &v
	return s
}

func (s *QueryEquityCreateresultRequest) SetCreateEquityRequestId(v string) *QueryEquityCreateresultRequest {
	s.CreateEquityRequestId = &v
	return s
}

func (s *QueryEquityCreateresultRequest) SetDelegatedTenantId(v string) *QueryEquityCreateresultRequest {
	s.DelegatedTenantId = &v
	return s
}

type QueryEquityCreateresultResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 权益商品创建成功，返回权益ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty"`
}

func (s QueryEquityCreateresultResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEquityCreateresultResponse) GoString() string {
	return s.String()
}

func (s *QueryEquityCreateresultResponse) SetReqMsgId(v string) *QueryEquityCreateresultResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryEquityCreateresultResponse) SetResultCode(v string) *QueryEquityCreateresultResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryEquityCreateresultResponse) SetResultMsg(v string) *QueryEquityCreateresultResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryEquityCreateresultResponse) SetEquityId(v string) *QueryEquityCreateresultResponse {
	s.EquityId = &v
	return s
}

type QueryEquityInstructionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 代理该租户调用接口，会使用该租户发送交易链上查询信息
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 发起操作的租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 要查询的流水交易号
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
}

func (s QueryEquityInstructionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEquityInstructionRequest) GoString() string {
	return s.String()
}

func (s *QueryEquityInstructionRequest) SetAuthToken(v string) *QueryEquityInstructionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryEquityInstructionRequest) SetProductInstanceId(v string) *QueryEquityInstructionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryEquityInstructionRequest) SetChainId(v string) *QueryEquityInstructionRequest {
	s.ChainId = &v
	return s
}

func (s *QueryEquityInstructionRequest) SetDelegatedTenantId(v string) *QueryEquityInstructionRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *QueryEquityInstructionRequest) SetEquityId(v string) *QueryEquityInstructionRequest {
	s.EquityId = &v
	return s
}

func (s *QueryEquityInstructionRequest) SetOptTenantId(v string) *QueryEquityInstructionRequest {
	s.OptTenantId = &v
	return s
}

func (s *QueryEquityInstructionRequest) SetOriginTxId(v string) *QueryEquityInstructionRequest {
	s.OriginTxId = &v
	return s
}

type QueryEquityInstructionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 商品兑换流水信息
	Instruction *EInstruction `json:"instruction,omitempty" xml:"instruction,omitempty"`
}

func (s QueryEquityInstructionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEquityInstructionResponse) GoString() string {
	return s.String()
}

func (s *QueryEquityInstructionResponse) SetReqMsgId(v string) *QueryEquityInstructionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryEquityInstructionResponse) SetResultCode(v string) *QueryEquityInstructionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryEquityInstructionResponse) SetResultMsg(v string) *QueryEquityInstructionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryEquityInstructionResponse) SetInstruction(v *EInstruction) *QueryEquityInstructionResponse {
	s.Instruction = v
	return s
}

type QueryImageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 要查询的图片数组，填入不可访问的url
	Urls []*string `json:"urls,omitempty" xml:"urls,omitempty" require:"true" type:"Repeated"`
}

func (s QueryImageRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryImageRequest) GoString() string {
	return s.String()
}

func (s *QueryImageRequest) SetAuthToken(v string) *QueryImageRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryImageRequest) SetProductInstanceId(v string) *QueryImageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryImageRequest) SetUrls(v []*string) *QueryImageRequest {
	s.Urls = v
	return s
}

type QueryImageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 临时可访问的oss图片链接，每张图片会返回四个url，对应原图和不同的比例缩小，每一张图片的四个url用;隔开。
	Urls []*MultiURL `json:"urls,omitempty" xml:"urls,omitempty" type:"Repeated"`
}

func (s QueryImageResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryImageResponse) GoString() string {
	return s.String()
}

func (s *QueryImageResponse) SetReqMsgId(v string) *QueryImageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryImageResponse) SetResultCode(v string) *QueryImageResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryImageResponse) SetResultMsg(v string) *QueryImageResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryImageResponse) SetUrls(v []*MultiURL) *QueryImageResponse {
	s.Urls = v
	return s
}

type UpdateEquityStatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 权益状态：0可用，1下线，2冻结
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s UpdateEquityStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEquityStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateEquityStatusRequest) SetAuthToken(v string) *UpdateEquityStatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateEquityStatusRequest) SetProductInstanceId(v string) *UpdateEquityStatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateEquityStatusRequest) SetChainId(v string) *UpdateEquityStatusRequest {
	s.ChainId = &v
	return s
}

func (s *UpdateEquityStatusRequest) SetDelegatedTenantId(v string) *UpdateEquityStatusRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *UpdateEquityStatusRequest) SetEquityId(v string) *UpdateEquityStatusRequest {
	s.EquityId = &v
	return s
}

func (s *UpdateEquityStatusRequest) SetOutTxId(v string) *UpdateEquityStatusRequest {
	s.OutTxId = &v
	return s
}

func (s *UpdateEquityStatusRequest) SetStatus(v int64) *UpdateEquityStatusRequest {
	s.Status = &v
	return s
}

type UpdateEquityStatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateEquityStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEquityStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateEquityStatusResponse) SetReqMsgId(v string) *UpdateEquityStatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateEquityStatusResponse) SetResultCode(v string) *UpdateEquityStatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateEquityStatusResponse) SetResultMsg(v string) *UpdateEquityStatusResponse {
	s.ResultMsg = &v
	return s
}

type SetMerchantProvisionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 新的授信上限（单位：元）
	CreditMaxAmount *string `json:"credit_max_amount,omitempty" xml:"credit_max_amount,omitempty"`
	// 新的授信已使用数额（单位：元）
	CreditUsedAmount *string `json:"credit_used_amount,omitempty" xml:"credit_used_amount,omitempty"`
	// 币种
	Currency *string `json:"currency,omitempty" xml:"currency,omitempty" require:"true"`
	// 新的备付金余额（单位：元）
	DebitAmount *string `json:"debit_amount,omitempty" xml:"debit_amount,omitempty"`
	// 要设置备付金的商户租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 初始的授信上限（单位：元）
	OriginalCreditMaxAmount *string `json:"original_credit_max_amount,omitempty" xml:"original_credit_max_amount,omitempty"`
	// 初始的授信已使用数额（单位：元）
	OriginalCreditUsedAmount *string `json:"original_credit_used_amount,omitempty" xml:"original_credit_used_amount,omitempty"`
	// 初始的备付金余额（单位：元）
	OriginalDebitAmount *string `json:"original_debit_amount,omitempty" xml:"original_debit_amount,omitempty"`
	// 外部交易ID（确保幂等）
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s SetMerchantProvisionRequest) String() string {
	return tea.Prettify(s)
}

func (s SetMerchantProvisionRequest) GoString() string {
	return s.String()
}

func (s *SetMerchantProvisionRequest) SetAuthToken(v string) *SetMerchantProvisionRequest {
	s.AuthToken = &v
	return s
}

func (s *SetMerchantProvisionRequest) SetProductInstanceId(v string) *SetMerchantProvisionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetMerchantProvisionRequest) SetChainId(v string) *SetMerchantProvisionRequest {
	s.ChainId = &v
	return s
}

func (s *SetMerchantProvisionRequest) SetCreditMaxAmount(v string) *SetMerchantProvisionRequest {
	s.CreditMaxAmount = &v
	return s
}

func (s *SetMerchantProvisionRequest) SetCreditUsedAmount(v string) *SetMerchantProvisionRequest {
	s.CreditUsedAmount = &v
	return s
}

func (s *SetMerchantProvisionRequest) SetCurrency(v string) *SetMerchantProvisionRequest {
	s.Currency = &v
	return s
}

func (s *SetMerchantProvisionRequest) SetDebitAmount(v string) *SetMerchantProvisionRequest {
	s.DebitAmount = &v
	return s
}

func (s *SetMerchantProvisionRequest) SetOptTenantId(v string) *SetMerchantProvisionRequest {
	s.OptTenantId = &v
	return s
}

func (s *SetMerchantProvisionRequest) SetOriginalCreditMaxAmount(v string) *SetMerchantProvisionRequest {
	s.OriginalCreditMaxAmount = &v
	return s
}

func (s *SetMerchantProvisionRequest) SetOriginalCreditUsedAmount(v string) *SetMerchantProvisionRequest {
	s.OriginalCreditUsedAmount = &v
	return s
}

func (s *SetMerchantProvisionRequest) SetOriginalDebitAmount(v string) *SetMerchantProvisionRequest {
	s.OriginalDebitAmount = &v
	return s
}

func (s *SetMerchantProvisionRequest) SetOutTxId(v string) *SetMerchantProvisionRequest {
	s.OutTxId = &v
	return s
}

type SetMerchantProvisionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetMerchantProvisionResponse) String() string {
	return tea.Prettify(s)
}

func (s SetMerchantProvisionResponse) GoString() string {
	return s.String()
}

func (s *SetMerchantProvisionResponse) SetReqMsgId(v string) *SetMerchantProvisionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetMerchantProvisionResponse) SetResultCode(v string) *SetMerchantProvisionResponse {
	s.ResultCode = &v
	return s
}

func (s *SetMerchantProvisionResponse) SetResultMsg(v string) *SetMerchantProvisionResponse {
	s.ResultMsg = &v
	return s
}

type UpdateMerchantProvisionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 更新授信上限
	CreditMaxAmount *string `json:"credit_max_amount,omitempty" xml:"credit_max_amount,omitempty"`
	// 更新授信已使用数额
	CreditUsedAmount *string `json:"credit_used_amount,omitempty" xml:"credit_used_amount,omitempty"`
	// 币种
	Currency *string `json:"currency,omitempty" xml:"currency,omitempty" require:"true"`
	// 更新余额
	DebitAmount *string `json:"debit_amount,omitempty" xml:"debit_amount,omitempty"`
	// 要设置备付金的商户租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 操作类型，ADD表示增加，SUB表示减少
	OptType *string `json:"opt_type,omitempty" xml:"opt_type,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s UpdateMerchantProvisionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMerchantProvisionRequest) GoString() string {
	return s.String()
}

func (s *UpdateMerchantProvisionRequest) SetAuthToken(v string) *UpdateMerchantProvisionRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMerchantProvisionRequest) SetProductInstanceId(v string) *UpdateMerchantProvisionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateMerchantProvisionRequest) SetChainId(v string) *UpdateMerchantProvisionRequest {
	s.ChainId = &v
	return s
}

func (s *UpdateMerchantProvisionRequest) SetCreditMaxAmount(v string) *UpdateMerchantProvisionRequest {
	s.CreditMaxAmount = &v
	return s
}

func (s *UpdateMerchantProvisionRequest) SetCreditUsedAmount(v string) *UpdateMerchantProvisionRequest {
	s.CreditUsedAmount = &v
	return s
}

func (s *UpdateMerchantProvisionRequest) SetCurrency(v string) *UpdateMerchantProvisionRequest {
	s.Currency = &v
	return s
}

func (s *UpdateMerchantProvisionRequest) SetDebitAmount(v string) *UpdateMerchantProvisionRequest {
	s.DebitAmount = &v
	return s
}

func (s *UpdateMerchantProvisionRequest) SetOptTenantId(v string) *UpdateMerchantProvisionRequest {
	s.OptTenantId = &v
	return s
}

func (s *UpdateMerchantProvisionRequest) SetOptType(v string) *UpdateMerchantProvisionRequest {
	s.OptType = &v
	return s
}

func (s *UpdateMerchantProvisionRequest) SetOutTxId(v string) *UpdateMerchantProvisionRequest {
	s.OutTxId = &v
	return s
}

type UpdateMerchantProvisionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateMerchantProvisionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMerchantProvisionResponse) GoString() string {
	return s.String()
}

func (s *UpdateMerchantProvisionResponse) SetReqMsgId(v string) *UpdateMerchantProvisionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMerchantProvisionResponse) SetResultCode(v string) *UpdateMerchantProvisionResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMerchantProvisionResponse) SetResultMsg(v string) *UpdateMerchantProvisionResponse {
	s.ResultMsg = &v
	return s
}

type ExecEquityInstructionwriteoffRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 权益商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 附言
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 兑换交易ID
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s ExecEquityInstructionwriteoffRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecEquityInstructionwriteoffRequest) GoString() string {
	return s.String()
}

func (s *ExecEquityInstructionwriteoffRequest) SetAuthToken(v string) *ExecEquityInstructionwriteoffRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecEquityInstructionwriteoffRequest) SetProductInstanceId(v string) *ExecEquityInstructionwriteoffRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecEquityInstructionwriteoffRequest) SetChainId(v string) *ExecEquityInstructionwriteoffRequest {
	s.ChainId = &v
	return s
}

func (s *ExecEquityInstructionwriteoffRequest) SetEquityId(v string) *ExecEquityInstructionwriteoffRequest {
	s.EquityId = &v
	return s
}

func (s *ExecEquityInstructionwriteoffRequest) SetMemo(v string) *ExecEquityInstructionwriteoffRequest {
	s.Memo = &v
	return s
}

func (s *ExecEquityInstructionwriteoffRequest) SetOriginTxId(v string) *ExecEquityInstructionwriteoffRequest {
	s.OriginTxId = &v
	return s
}

func (s *ExecEquityInstructionwriteoffRequest) SetOutTxId(v string) *ExecEquityInstructionwriteoffRequest {
	s.OutTxId = &v
	return s
}

type ExecEquityInstructionwriteoffResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecEquityInstructionwriteoffResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecEquityInstructionwriteoffResponse) GoString() string {
	return s.String()
}

func (s *ExecEquityInstructionwriteoffResponse) SetReqMsgId(v string) *ExecEquityInstructionwriteoffResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecEquityInstructionwriteoffResponse) SetResultCode(v string) *ExecEquityInstructionwriteoffResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecEquityInstructionwriteoffResponse) SetResultMsg(v string) *ExecEquityInstructionwriteoffResponse {
	s.ResultMsg = &v
	return s
}

type QueryMerchantProvisionsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 行为
	BusinessAction *string `json:"business_action,omitempty" xml:"business_action,omitempty" require:"true"`
	// 要查询的租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 产品编码
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
}

func (s QueryMerchantProvisionsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMerchantProvisionsRequest) GoString() string {
	return s.String()
}

func (s *QueryMerchantProvisionsRequest) SetAuthToken(v string) *QueryMerchantProvisionsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMerchantProvisionsRequest) SetProductInstanceId(v string) *QueryMerchantProvisionsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMerchantProvisionsRequest) SetBusinessAction(v string) *QueryMerchantProvisionsRequest {
	s.BusinessAction = &v
	return s
}

func (s *QueryMerchantProvisionsRequest) SetOptTenantId(v string) *QueryMerchantProvisionsRequest {
	s.OptTenantId = &v
	return s
}

func (s *QueryMerchantProvisionsRequest) SetProductCode(v string) *QueryMerchantProvisionsRequest {
	s.ProductCode = &v
	return s
}

type QueryMerchantProvisionsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 租户的备付金列表信息
	DiscreteValues []*DiscreteValue `json:"discrete_values,omitempty" xml:"discrete_values,omitempty" type:"Repeated"`
}

func (s QueryMerchantProvisionsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMerchantProvisionsResponse) GoString() string {
	return s.String()
}

func (s *QueryMerchantProvisionsResponse) SetReqMsgId(v string) *QueryMerchantProvisionsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMerchantProvisionsResponse) SetResultCode(v string) *QueryMerchantProvisionsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMerchantProvisionsResponse) SetResultMsg(v string) *QueryMerchantProvisionsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMerchantProvisionsResponse) SetDiscreteValues(v []*DiscreteValue) *QueryMerchantProvisionsResponse {
	s.DiscreteValues = v
	return s
}

type QueryMerchantExchangeableequitylistRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 页码
	PageNumber *string `json:"page_number,omitempty" xml:"page_number,omitempty" require:"true"`
	// 每页数量（不填默认返回50条数据）
	PageSize *string `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryMerchantExchangeableequitylistRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMerchantExchangeableequitylistRequest) GoString() string {
	return s.String()
}

func (s *QueryMerchantExchangeableequitylistRequest) SetAuthToken(v string) *QueryMerchantExchangeableequitylistRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMerchantExchangeableequitylistRequest) SetProductInstanceId(v string) *QueryMerchantExchangeableequitylistRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMerchantExchangeableequitylistRequest) SetChainId(v string) *QueryMerchantExchangeableequitylistRequest {
	s.ChainId = &v
	return s
}

func (s *QueryMerchantExchangeableequitylistRequest) SetPageNumber(v string) *QueryMerchantExchangeableequitylistRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryMerchantExchangeableequitylistRequest) SetPageSize(v string) *QueryMerchantExchangeableequitylistRequest {
	s.PageSize = &v
	return s
}

type QueryMerchantExchangeableequitylistResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可兑换商品信息列表
	Object *ExchangeableEquityList `json:"object,omitempty" xml:"object,omitempty"`
}

func (s QueryMerchantExchangeableequitylistResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMerchantExchangeableequitylistResponse) GoString() string {
	return s.String()
}

func (s *QueryMerchantExchangeableequitylistResponse) SetReqMsgId(v string) *QueryMerchantExchangeableequitylistResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMerchantExchangeableequitylistResponse) SetResultCode(v string) *QueryMerchantExchangeableequitylistResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMerchantExchangeableequitylistResponse) SetResultMsg(v string) *QueryMerchantExchangeableequitylistResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMerchantExchangeableequitylistResponse) SetObject(v *ExchangeableEquityList) *QueryMerchantExchangeableequitylistResponse {
	s.Object = v
	return s
}

type QueryMerchantExchangeableequitydetailRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 商品SKUID
	SkuId *string `json:"sku_id,omitempty" xml:"sku_id,omitempty" require:"true"`
}

func (s QueryMerchantExchangeableequitydetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMerchantExchangeableequitydetailRequest) GoString() string {
	return s.String()
}

func (s *QueryMerchantExchangeableequitydetailRequest) SetAuthToken(v string) *QueryMerchantExchangeableequitydetailRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMerchantExchangeableequitydetailRequest) SetProductInstanceId(v string) *QueryMerchantExchangeableequitydetailRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMerchantExchangeableequitydetailRequest) SetChainId(v string) *QueryMerchantExchangeableequitydetailRequest {
	s.ChainId = &v
	return s
}

func (s *QueryMerchantExchangeableequitydetailRequest) SetSkuId(v string) *QueryMerchantExchangeableequitydetailRequest {
	s.SkuId = &v
	return s
}

type QueryMerchantExchangeableequitydetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可兑换的商品详情信息
	Equity *EquityDetail `json:"equity,omitempty" xml:"equity,omitempty"`
}

func (s QueryMerchantExchangeableequitydetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMerchantExchangeableequitydetailResponse) GoString() string {
	return s.String()
}

func (s *QueryMerchantExchangeableequitydetailResponse) SetReqMsgId(v string) *QueryMerchantExchangeableequitydetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMerchantExchangeableequitydetailResponse) SetResultCode(v string) *QueryMerchantExchangeableequitydetailResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMerchantExchangeableequitydetailResponse) SetResultMsg(v string) *QueryMerchantExchangeableequitydetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMerchantExchangeableequitydetailResponse) SetEquity(v *EquityDetail) *QueryMerchantExchangeableequitydetailResponse {
	s.Equity = v
	return s
}

type ExecAssetCreateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 资产ID
	AssetId *string `json:"asset_id,omitempty" xml:"asset_id,omitempty" require:"true"`
	// 资产名称
	AssetName *string `json:"asset_name,omitempty" xml:"asset_name,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 资产绑定币种
	Currency *string `json:"currency,omitempty" xml:"currency,omitempty" require:"true"`
	// 为该租户创建新资产
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 资产汇率(等值一元钱的数量)
	Rate *string `json:"rate,omitempty" xml:"rate,omitempty" require:"true"`
}

func (s ExecAssetCreateRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetCreateRequest) GoString() string {
	return s.String()
}

func (s *ExecAssetCreateRequest) SetAuthToken(v string) *ExecAssetCreateRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecAssetCreateRequest) SetProductInstanceId(v string) *ExecAssetCreateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecAssetCreateRequest) SetAssetId(v string) *ExecAssetCreateRequest {
	s.AssetId = &v
	return s
}

func (s *ExecAssetCreateRequest) SetAssetName(v string) *ExecAssetCreateRequest {
	s.AssetName = &v
	return s
}

func (s *ExecAssetCreateRequest) SetChainId(v string) *ExecAssetCreateRequest {
	s.ChainId = &v
	return s
}

func (s *ExecAssetCreateRequest) SetCurrency(v string) *ExecAssetCreateRequest {
	s.Currency = &v
	return s
}

func (s *ExecAssetCreateRequest) SetOptTenantId(v string) *ExecAssetCreateRequest {
	s.OptTenantId = &v
	return s
}

func (s *ExecAssetCreateRequest) SetOutTxId(v string) *ExecAssetCreateRequest {
	s.OutTxId = &v
	return s
}

func (s *ExecAssetCreateRequest) SetRate(v string) *ExecAssetCreateRequest {
	s.Rate = &v
	return s
}

type ExecAssetCreateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecAssetCreateResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetCreateResponse) GoString() string {
	return s.String()
}

func (s *ExecAssetCreateResponse) SetReqMsgId(v string) *ExecAssetCreateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecAssetCreateResponse) SetResultCode(v string) *ExecAssetCreateResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecAssetCreateResponse) SetResultMsg(v string) *ExecAssetCreateResponse {
	s.ResultMsg = &v
	return s
}

type ExecAssetGenerateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 铸币数量
	Amount *string `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 资产ID
	AssetId *string `json:"asset_id,omitempty" xml:"asset_id,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s ExecAssetGenerateRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetGenerateRequest) GoString() string {
	return s.String()
}

func (s *ExecAssetGenerateRequest) SetAuthToken(v string) *ExecAssetGenerateRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecAssetGenerateRequest) SetProductInstanceId(v string) *ExecAssetGenerateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecAssetGenerateRequest) SetAmount(v string) *ExecAssetGenerateRequest {
	s.Amount = &v
	return s
}

func (s *ExecAssetGenerateRequest) SetAssetId(v string) *ExecAssetGenerateRequest {
	s.AssetId = &v
	return s
}

func (s *ExecAssetGenerateRequest) SetChainId(v string) *ExecAssetGenerateRequest {
	s.ChainId = &v
	return s
}

func (s *ExecAssetGenerateRequest) SetOutTxId(v string) *ExecAssetGenerateRequest {
	s.OutTxId = &v
	return s
}

type ExecAssetGenerateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecAssetGenerateResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecAssetGenerateResponse) GoString() string {
	return s.String()
}

func (s *ExecAssetGenerateResponse) SetReqMsgId(v string) *ExecAssetGenerateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecAssetGenerateResponse) SetResultCode(v string) *ExecAssetGenerateResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecAssetGenerateResponse) SetResultMsg(v string) *ExecAssetGenerateResponse {
	s.ResultMsg = &v
	return s
}

type CreateMerchantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 商户描述，不超过2048
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 商户的资金管理员 归属的租户ID
	FundManagerTenantId *string `json:"fund_manager_tenant_id,omitempty" xml:"fund_manager_tenant_id,omitempty" require:"true"`
	// 商户角色，是否是资产发行商
	IfAssetIssuer *bool `json:"if_asset_issuer,omitempty" xml:"if_asset_issuer,omitempty" require:"true"`
	// 商户角色，是否是采购商
	IfEquityConsumer *bool `json:"if_equity_consumer,omitempty" xml:"if_equity_consumer,omitempty" require:"true"`
	// 商户角色，是否是供应商
	IfEquityProvider *bool `json:"if_equity_provider,omitempty" xml:"if_equity_provider,omitempty" require:"true"`
	// 商户归属的租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 外部交易ID（确保幂等）
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s CreateMerchantRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMerchantRequest) GoString() string {
	return s.String()
}

func (s *CreateMerchantRequest) SetAuthToken(v string) *CreateMerchantRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateMerchantRequest) SetProductInstanceId(v string) *CreateMerchantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateMerchantRequest) SetChainId(v string) *CreateMerchantRequest {
	s.ChainId = &v
	return s
}

func (s *CreateMerchantRequest) SetDescription(v string) *CreateMerchantRequest {
	s.Description = &v
	return s
}

func (s *CreateMerchantRequest) SetFundManagerTenantId(v string) *CreateMerchantRequest {
	s.FundManagerTenantId = &v
	return s
}

func (s *CreateMerchantRequest) SetIfAssetIssuer(v bool) *CreateMerchantRequest {
	s.IfAssetIssuer = &v
	return s
}

func (s *CreateMerchantRequest) SetIfEquityConsumer(v bool) *CreateMerchantRequest {
	s.IfEquityConsumer = &v
	return s
}

func (s *CreateMerchantRequest) SetIfEquityProvider(v bool) *CreateMerchantRequest {
	s.IfEquityProvider = &v
	return s
}

func (s *CreateMerchantRequest) SetOptTenantId(v string) *CreateMerchantRequest {
	s.OptTenantId = &v
	return s
}

func (s *CreateMerchantRequest) SetOutTxId(v string) *CreateMerchantRequest {
	s.OutTxId = &v
	return s
}

type CreateMerchantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateMerchantResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMerchantResponse) GoString() string {
	return s.String()
}

func (s *CreateMerchantResponse) SetReqMsgId(v string) *CreateMerchantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateMerchantResponse) SetResultCode(v string) *CreateMerchantResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateMerchantResponse) SetResultMsg(v string) *CreateMerchantResponse {
	s.ResultMsg = &v
	return s
}

type SetMerchantFundmanagerRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要进行资金管理员设置的租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 资金管理员所属的租户ID
	FundManagerTenantId *string `json:"fund_manager_tenant_id,omitempty" xml:"fund_manager_tenant_id,omitempty" require:"true"`
}

func (s SetMerchantFundmanagerRequest) String() string {
	return tea.Prettify(s)
}

func (s SetMerchantFundmanagerRequest) GoString() string {
	return s.String()
}

func (s *SetMerchantFundmanagerRequest) SetAuthToken(v string) *SetMerchantFundmanagerRequest {
	s.AuthToken = &v
	return s
}

func (s *SetMerchantFundmanagerRequest) SetProductInstanceId(v string) *SetMerchantFundmanagerRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetMerchantFundmanagerRequest) SetOutTxId(v string) *SetMerchantFundmanagerRequest {
	s.OutTxId = &v
	return s
}

func (s *SetMerchantFundmanagerRequest) SetChainId(v string) *SetMerchantFundmanagerRequest {
	s.ChainId = &v
	return s
}

func (s *SetMerchantFundmanagerRequest) SetOptTenantId(v string) *SetMerchantFundmanagerRequest {
	s.OptTenantId = &v
	return s
}

func (s *SetMerchantFundmanagerRequest) SetFundManagerTenantId(v string) *SetMerchantFundmanagerRequest {
	s.FundManagerTenantId = &v
	return s
}

type SetMerchantFundmanagerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetMerchantFundmanagerResponse) String() string {
	return tea.Prettify(s)
}

func (s SetMerchantFundmanagerResponse) GoString() string {
	return s.String()
}

func (s *SetMerchantFundmanagerResponse) SetReqMsgId(v string) *SetMerchantFundmanagerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetMerchantFundmanagerResponse) SetResultCode(v string) *SetMerchantFundmanagerResponse {
	s.ResultCode = &v
	return s
}

func (s *SetMerchantFundmanagerResponse) SetResultMsg(v string) *SetMerchantFundmanagerResponse {
	s.ResultMsg = &v
	return s
}

type CreateMerchantProvisionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 外部交易ID，确保幂等
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要创建备付金账户的租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 备付金账户币种
	Currency *string `json:"currency,omitempty" xml:"currency,omitempty" require:"true"`
}

func (s CreateMerchantProvisionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMerchantProvisionRequest) GoString() string {
	return s.String()
}

func (s *CreateMerchantProvisionRequest) SetAuthToken(v string) *CreateMerchantProvisionRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateMerchantProvisionRequest) SetProductInstanceId(v string) *CreateMerchantProvisionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateMerchantProvisionRequest) SetOutTxId(v string) *CreateMerchantProvisionRequest {
	s.OutTxId = &v
	return s
}

func (s *CreateMerchantProvisionRequest) SetChainId(v string) *CreateMerchantProvisionRequest {
	s.ChainId = &v
	return s
}

func (s *CreateMerchantProvisionRequest) SetOptTenantId(v string) *CreateMerchantProvisionRequest {
	s.OptTenantId = &v
	return s
}

func (s *CreateMerchantProvisionRequest) SetCurrency(v string) *CreateMerchantProvisionRequest {
	s.Currency = &v
	return s
}

type CreateMerchantProvisionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateMerchantProvisionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMerchantProvisionResponse) GoString() string {
	return s.String()
}

func (s *CreateMerchantProvisionResponse) SetReqMsgId(v string) *CreateMerchantProvisionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateMerchantProvisionResponse) SetResultCode(v string) *CreateMerchantProvisionResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateMerchantProvisionResponse) SetResultMsg(v string) *CreateMerchantProvisionResponse {
	s.ResultMsg = &v
	return s
}

type QueryConfigDelegaterelationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被代理的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty" require:"true"`
}

func (s QueryConfigDelegaterelationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConfigDelegaterelationRequest) GoString() string {
	return s.String()
}

func (s *QueryConfigDelegaterelationRequest) SetAuthToken(v string) *QueryConfigDelegaterelationRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConfigDelegaterelationRequest) SetProductInstanceId(v string) *QueryConfigDelegaterelationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConfigDelegaterelationRequest) SetDelegatedTenantId(v string) *QueryConfigDelegaterelationRequest {
	s.DelegatedTenantId = &v
	return s
}

type QueryConfigDelegaterelationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 代理授权关系信息
	DelegateRelationInfos []*DelegateRelationInfo `json:"delegate_relation_infos,omitempty" xml:"delegate_relation_infos,omitempty" type:"Repeated"`
}

func (s QueryConfigDelegaterelationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConfigDelegaterelationResponse) GoString() string {
	return s.String()
}

func (s *QueryConfigDelegaterelationResponse) SetReqMsgId(v string) *QueryConfigDelegaterelationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConfigDelegaterelationResponse) SetResultCode(v string) *QueryConfigDelegaterelationResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConfigDelegaterelationResponse) SetResultMsg(v string) *QueryConfigDelegaterelationResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConfigDelegaterelationResponse) SetDelegateRelationInfos(v []*DelegateRelationInfo) *QueryConfigDelegaterelationResponse {
	s.DelegateRelationInfos = v
	return s
}

type UpdateConfigDelegaterelationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被代理的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty" require:"true"`
	// 代理租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 操作类型，ADD表示添加，SUB表示撤销
	OptType *string `json:"opt_type,omitempty" xml:"opt_type,omitempty" require:"true"`
}

func (s UpdateConfigDelegaterelationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigDelegaterelationRequest) GoString() string {
	return s.String()
}

func (s *UpdateConfigDelegaterelationRequest) SetAuthToken(v string) *UpdateConfigDelegaterelationRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateConfigDelegaterelationRequest) SetProductInstanceId(v string) *UpdateConfigDelegaterelationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateConfigDelegaterelationRequest) SetDelegatedTenantId(v string) *UpdateConfigDelegaterelationRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *UpdateConfigDelegaterelationRequest) SetOptTenantId(v string) *UpdateConfigDelegaterelationRequest {
	s.OptTenantId = &v
	return s
}

func (s *UpdateConfigDelegaterelationRequest) SetOptType(v string) *UpdateConfigDelegaterelationRequest {
	s.OptType = &v
	return s
}

type UpdateConfigDelegaterelationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateConfigDelegaterelationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigDelegaterelationResponse) GoString() string {
	return s.String()
}

func (s *UpdateConfigDelegaterelationResponse) SetReqMsgId(v string) *UpdateConfigDelegaterelationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateConfigDelegaterelationResponse) SetResultCode(v string) *UpdateConfigDelegaterelationResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateConfigDelegaterelationResponse) SetResultMsg(v string) *UpdateConfigDelegaterelationResponse {
	s.ResultMsg = &v
	return s
}

type QueryConfigWhitelistRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询链的白名单信息
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty"`
	// 查询该租户的白名单信息
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s QueryConfigWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConfigWhitelistRequest) GoString() string {
	return s.String()
}

func (s *QueryConfigWhitelistRequest) SetAuthToken(v string) *QueryConfigWhitelistRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConfigWhitelistRequest) SetProductInstanceId(v string) *QueryConfigWhitelistRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryConfigWhitelistRequest) SetChainId(v string) *QueryConfigWhitelistRequest {
	s.ChainId = &v
	return s
}

func (s *QueryConfigWhitelistRequest) SetTenantId(v string) *QueryConfigWhitelistRequest {
	s.TenantId = &v
	return s
}

type QueryConfigWhitelistResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 接口白名单信息
	WhiteList []*APIWhiteListInfo `json:"white_list,omitempty" xml:"white_list,omitempty" type:"Repeated"`
}

func (s QueryConfigWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConfigWhitelistResponse) GoString() string {
	return s.String()
}

func (s *QueryConfigWhitelistResponse) SetReqMsgId(v string) *QueryConfigWhitelistResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConfigWhitelistResponse) SetResultCode(v string) *QueryConfigWhitelistResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConfigWhitelistResponse) SetResultMsg(v string) *QueryConfigWhitelistResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConfigWhitelistResponse) SetWhiteList(v []*APIWhiteListInfo) *QueryConfigWhitelistResponse {
	s.WhiteList = v
	return s
}

type UpdateConfigWhitelistRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 操作类型
	OptType *string `json:"opt_type,omitempty" xml:"opt_type,omitempty" require:"true"`
}

func (s UpdateConfigWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigWhitelistRequest) GoString() string {
	return s.String()
}

func (s *UpdateConfigWhitelistRequest) SetAuthToken(v string) *UpdateConfigWhitelistRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateConfigWhitelistRequest) SetProductInstanceId(v string) *UpdateConfigWhitelistRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateConfigWhitelistRequest) SetChainId(v string) *UpdateConfigWhitelistRequest {
	s.ChainId = &v
	return s
}

func (s *UpdateConfigWhitelistRequest) SetOptTenantId(v string) *UpdateConfigWhitelistRequest {
	s.OptTenantId = &v
	return s
}

func (s *UpdateConfigWhitelistRequest) SetOptType(v string) *UpdateConfigWhitelistRequest {
	s.OptType = &v
	return s
}

type UpdateConfigWhitelistResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateConfigWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigWhitelistResponse) GoString() string {
	return s.String()
}

func (s *UpdateConfigWhitelistResponse) SetReqMsgId(v string) *UpdateConfigWhitelistResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateConfigWhitelistResponse) SetResultCode(v string) *UpdateConfigWhitelistResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateConfigWhitelistResponse) SetResultMsg(v string) *UpdateConfigWhitelistResponse {
	s.ResultMsg = &v
	return s
}

type ApplyExchangeAftersaleRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 权益商品id
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 额外信息 可选
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s ApplyExchangeAftersaleRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyExchangeAftersaleRequest) GoString() string {
	return s.String()
}

func (s *ApplyExchangeAftersaleRequest) SetAuthToken(v string) *ApplyExchangeAftersaleRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyExchangeAftersaleRequest) SetProductInstanceId(v string) *ApplyExchangeAftersaleRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyExchangeAftersaleRequest) SetChainId(v string) *ApplyExchangeAftersaleRequest {
	s.ChainId = &v
	return s
}

func (s *ApplyExchangeAftersaleRequest) SetEquityId(v string) *ApplyExchangeAftersaleRequest {
	s.EquityId = &v
	return s
}

func (s *ApplyExchangeAftersaleRequest) SetMemo(v string) *ApplyExchangeAftersaleRequest {
	s.Memo = &v
	return s
}

func (s *ApplyExchangeAftersaleRequest) SetOriginTxId(v string) *ApplyExchangeAftersaleRequest {
	s.OriginTxId = &v
	return s
}

func (s *ApplyExchangeAftersaleRequest) SetOutTxId(v string) *ApplyExchangeAftersaleRequest {
	s.OutTxId = &v
	return s
}

type ApplyExchangeAftersaleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ApplyExchangeAftersaleResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyExchangeAftersaleResponse) GoString() string {
	return s.String()
}

func (s *ApplyExchangeAftersaleResponse) SetReqMsgId(v string) *ApplyExchangeAftersaleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyExchangeAftersaleResponse) SetResultCode(v string) *ApplyExchangeAftersaleResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyExchangeAftersaleResponse) SetResultMsg(v string) *ApplyExchangeAftersaleResponse {
	s.ResultMsg = &v
	return s
}

type ExecExchangeAgreeaftersaleRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 权益id
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 额外信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
	// 外部交易ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s ExecExchangeAgreeaftersaleRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecExchangeAgreeaftersaleRequest) GoString() string {
	return s.String()
}

func (s *ExecExchangeAgreeaftersaleRequest) SetAuthToken(v string) *ExecExchangeAgreeaftersaleRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecExchangeAgreeaftersaleRequest) SetProductInstanceId(v string) *ExecExchangeAgreeaftersaleRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecExchangeAgreeaftersaleRequest) SetChainId(v string) *ExecExchangeAgreeaftersaleRequest {
	s.ChainId = &v
	return s
}

func (s *ExecExchangeAgreeaftersaleRequest) SetDelegatedTenantId(v string) *ExecExchangeAgreeaftersaleRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *ExecExchangeAgreeaftersaleRequest) SetEquityId(v string) *ExecExchangeAgreeaftersaleRequest {
	s.EquityId = &v
	return s
}

func (s *ExecExchangeAgreeaftersaleRequest) SetMemo(v string) *ExecExchangeAgreeaftersaleRequest {
	s.Memo = &v
	return s
}

func (s *ExecExchangeAgreeaftersaleRequest) SetOriginTxId(v string) *ExecExchangeAgreeaftersaleRequest {
	s.OriginTxId = &v
	return s
}

func (s *ExecExchangeAgreeaftersaleRequest) SetOutTxId(v string) *ExecExchangeAgreeaftersaleRequest {
	s.OutTxId = &v
	return s
}

type ExecExchangeAgreeaftersaleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecExchangeAgreeaftersaleResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecExchangeAgreeaftersaleResponse) GoString() string {
	return s.String()
}

func (s *ExecExchangeAgreeaftersaleResponse) SetReqMsgId(v string) *ExecExchangeAgreeaftersaleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecExchangeAgreeaftersaleResponse) SetResultCode(v string) *ExecExchangeAgreeaftersaleResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecExchangeAgreeaftersaleResponse) SetResultMsg(v string) *ExecExchangeAgreeaftersaleResponse {
	s.ResultMsg = &v
	return s
}

type RefuseExchangeAftersaleRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// l链id
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 商品id
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 额外信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
	// 外部交易id
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s RefuseExchangeAftersaleRequest) String() string {
	return tea.Prettify(s)
}

func (s RefuseExchangeAftersaleRequest) GoString() string {
	return s.String()
}

func (s *RefuseExchangeAftersaleRequest) SetAuthToken(v string) *RefuseExchangeAftersaleRequest {
	s.AuthToken = &v
	return s
}

func (s *RefuseExchangeAftersaleRequest) SetProductInstanceId(v string) *RefuseExchangeAftersaleRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RefuseExchangeAftersaleRequest) SetChainId(v string) *RefuseExchangeAftersaleRequest {
	s.ChainId = &v
	return s
}

func (s *RefuseExchangeAftersaleRequest) SetDelegatedTenantId(v string) *RefuseExchangeAftersaleRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *RefuseExchangeAftersaleRequest) SetEquityId(v string) *RefuseExchangeAftersaleRequest {
	s.EquityId = &v
	return s
}

func (s *RefuseExchangeAftersaleRequest) SetMemo(v string) *RefuseExchangeAftersaleRequest {
	s.Memo = &v
	return s
}

func (s *RefuseExchangeAftersaleRequest) SetOriginTxId(v string) *RefuseExchangeAftersaleRequest {
	s.OriginTxId = &v
	return s
}

func (s *RefuseExchangeAftersaleRequest) SetOutTxId(v string) *RefuseExchangeAftersaleRequest {
	s.OutTxId = &v
	return s
}

type RefuseExchangeAftersaleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RefuseExchangeAftersaleResponse) String() string {
	return tea.Prettify(s)
}

func (s RefuseExchangeAftersaleResponse) GoString() string {
	return s.String()
}

func (s *RefuseExchangeAftersaleResponse) SetReqMsgId(v string) *RefuseExchangeAftersaleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RefuseExchangeAftersaleResponse) SetResultCode(v string) *RefuseExchangeAftersaleResponse {
	s.ResultCode = &v
	return s
}

func (s *RefuseExchangeAftersaleResponse) SetResultMsg(v string) *RefuseExchangeAftersaleResponse {
	s.ResultMsg = &v
	return s
}

type SendExchangeAftersaleRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要代理操作的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty"`
	// 商品id
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 发货商品的信息，敏感信息需加密，使用收货方公钥加密的权益信息。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896。比如在手机直充时可以返回 {  "voucher": "充值凭证，如有",  "memo": ""}信息。
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
	// 外部交易id
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s SendExchangeAftersaleRequest) String() string {
	return tea.Prettify(s)
}

func (s SendExchangeAftersaleRequest) GoString() string {
	return s.String()
}

func (s *SendExchangeAftersaleRequest) SetAuthToken(v string) *SendExchangeAftersaleRequest {
	s.AuthToken = &v
	return s
}

func (s *SendExchangeAftersaleRequest) SetProductInstanceId(v string) *SendExchangeAftersaleRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SendExchangeAftersaleRequest) SetChainId(v string) *SendExchangeAftersaleRequest {
	s.ChainId = &v
	return s
}

func (s *SendExchangeAftersaleRequest) SetDelegatedTenantId(v string) *SendExchangeAftersaleRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *SendExchangeAftersaleRequest) SetEquityId(v string) *SendExchangeAftersaleRequest {
	s.EquityId = &v
	return s
}

func (s *SendExchangeAftersaleRequest) SetMemo(v string) *SendExchangeAftersaleRequest {
	s.Memo = &v
	return s
}

func (s *SendExchangeAftersaleRequest) SetOriginTxId(v string) *SendExchangeAftersaleRequest {
	s.OriginTxId = &v
	return s
}

func (s *SendExchangeAftersaleRequest) SetOutTxId(v string) *SendExchangeAftersaleRequest {
	s.OutTxId = &v
	return s
}

type SendExchangeAftersaleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SendExchangeAftersaleResponse) String() string {
	return tea.Prettify(s)
}

func (s SendExchangeAftersaleResponse) GoString() string {
	return s.String()
}

func (s *SendExchangeAftersaleResponse) SetReqMsgId(v string) *SendExchangeAftersaleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SendExchangeAftersaleResponse) SetResultCode(v string) *SendExchangeAftersaleResponse {
	s.ResultCode = &v
	return s
}

func (s *SendExchangeAftersaleResponse) SetResultMsg(v string) *SendExchangeAftersaleResponse {
	s.ResultMsg = &v
	return s
}

type ConfirmExchangeAftersaleRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 商品id
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 收货时的信息，若敏感信息需加密。实际数据结构根据商品类型和描述输入，可参考https://tech.antfin.com/docs/2/163896
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 原始订单交易ID。由采购商在创建对换单时传入，不可更新。
	OriginTxId *string `json:"origin_tx_id,omitempty" xml:"origin_tx_id,omitempty" require:"true"`
	// 外部交易id
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s ConfirmExchangeAftersaleRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmExchangeAftersaleRequest) GoString() string {
	return s.String()
}

func (s *ConfirmExchangeAftersaleRequest) SetAuthToken(v string) *ConfirmExchangeAftersaleRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmExchangeAftersaleRequest) SetProductInstanceId(v string) *ConfirmExchangeAftersaleRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmExchangeAftersaleRequest) SetChainId(v string) *ConfirmExchangeAftersaleRequest {
	s.ChainId = &v
	return s
}

func (s *ConfirmExchangeAftersaleRequest) SetEquityId(v string) *ConfirmExchangeAftersaleRequest {
	s.EquityId = &v
	return s
}

func (s *ConfirmExchangeAftersaleRequest) SetMemo(v string) *ConfirmExchangeAftersaleRequest {
	s.Memo = &v
	return s
}

func (s *ConfirmExchangeAftersaleRequest) SetOriginTxId(v string) *ConfirmExchangeAftersaleRequest {
	s.OriginTxId = &v
	return s
}

func (s *ConfirmExchangeAftersaleRequest) SetOutTxId(v string) *ConfirmExchangeAftersaleRequest {
	s.OutTxId = &v
	return s
}

type ConfirmExchangeAftersaleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ConfirmExchangeAftersaleResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmExchangeAftersaleResponse) GoString() string {
	return s.String()
}

func (s *ConfirmExchangeAftersaleResponse) SetReqMsgId(v string) *ConfirmExchangeAftersaleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmExchangeAftersaleResponse) SetResultCode(v string) *ConfirmExchangeAftersaleResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmExchangeAftersaleResponse) SetResultMsg(v string) *ConfirmExchangeAftersaleResponse {
	s.ResultMsg = &v
	return s
}

type ExecDataDepositRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 交易信息
	Tx *Transaction `json:"tx,omitempty" xml:"tx,omitempty" require:"true"`
}

func (s ExecDataDepositRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecDataDepositRequest) GoString() string {
	return s.String()
}

func (s *ExecDataDepositRequest) SetAuthToken(v string) *ExecDataDepositRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecDataDepositRequest) SetProductInstanceId(v string) *ExecDataDepositRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecDataDepositRequest) SetChainId(v string) *ExecDataDepositRequest {
	s.ChainId = &v
	return s
}

func (s *ExecDataDepositRequest) SetTx(v *Transaction) *ExecDataDepositRequest {
	s.Tx = v
	return s
}

type ExecDataDepositResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s ExecDataDepositResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecDataDepositResponse) GoString() string {
	return s.String()
}

func (s *ExecDataDepositResponse) SetReqMsgId(v string) *ExecDataDepositResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecDataDepositResponse) SetResultCode(v string) *ExecDataDepositResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecDataDepositResponse) SetResultMsg(v string) *ExecDataDepositResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecDataDepositResponse) SetTxHash(v string) *ExecDataDepositResponse {
	s.TxHash = &v
	return s
}

type SetCommissionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 手续费列表，可传入多个
	Commissions []*Commission `json:"commissions,omitempty" xml:"commissions,omitempty" require:"true" type:"Repeated"`
	// 商品类型。可按照如下文档查询商品对应的类型，及数据格式 https://tech.antfin.com/docs/2/163896
	EquityType *int64 `json:"equity_type,omitempty" xml:"equity_type,omitempty" require:"true"`
	// 是否设置全局手续费。若是false，需传入optTenantId
	IfGlobal *bool `json:"if_global,omitempty" xml:"if_global,omitempty"`
	// 要设置手续费的租户对象，如果为空表示设置全局手续费（IfGlobal需设置为true）
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty"`
	// 交易幂等ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
}

func (s SetCommissionRequest) String() string {
	return tea.Prettify(s)
}

func (s SetCommissionRequest) GoString() string {
	return s.String()
}

func (s *SetCommissionRequest) SetAuthToken(v string) *SetCommissionRequest {
	s.AuthToken = &v
	return s
}

func (s *SetCommissionRequest) SetProductInstanceId(v string) *SetCommissionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetCommissionRequest) SetChainId(v string) *SetCommissionRequest {
	s.ChainId = &v
	return s
}

func (s *SetCommissionRequest) SetCommissions(v []*Commission) *SetCommissionRequest {
	s.Commissions = v
	return s
}

func (s *SetCommissionRequest) SetEquityType(v int64) *SetCommissionRequest {
	s.EquityType = &v
	return s
}

func (s *SetCommissionRequest) SetIfGlobal(v bool) *SetCommissionRequest {
	s.IfGlobal = &v
	return s
}

func (s *SetCommissionRequest) SetOptTenantId(v string) *SetCommissionRequest {
	s.OptTenantId = &v
	return s
}

func (s *SetCommissionRequest) SetOutTxId(v string) *SetCommissionRequest {
	s.OutTxId = &v
	return s
}

type SetCommissionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 手续费ID
	CommissionId *string `json:"commission_id,omitempty" xml:"commission_id,omitempty"`
}

func (s SetCommissionResponse) String() string {
	return tea.Prettify(s)
}

func (s SetCommissionResponse) GoString() string {
	return s.String()
}

func (s *SetCommissionResponse) SetReqMsgId(v string) *SetCommissionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetCommissionResponse) SetResultCode(v string) *SetCommissionResponse {
	s.ResultCode = &v
	return s
}

func (s *SetCommissionResponse) SetResultMsg(v string) *SetCommissionResponse {
	s.ResultMsg = &v
	return s
}

func (s *SetCommissionResponse) SetCommissionId(v string) *SetCommissionResponse {
	s.CommissionId = &v
	return s
}

type QueryCommissionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 商品类型。可按照如下文档查询商品对应的类型，及数据格式https://tech.antfin.com/docs/2/163896
	EquityType *int64 `json:"equity_type,omitempty" xml:"equity_type,omitempty" require:"true"`
	// 是否查询当前生效的手续费信息。如为false，则查询该商品的全部手续费信息
	IfCurrent *bool `json:"if_current,omitempty" xml:"if_current,omitempty" require:"true"`
	// 是否查询全局的手续费信息
	IfGlobal *bool `json:"if_global,omitempty" xml:"if_global,omitempty" require:"true"`
	// 查询该租户的手续费信息
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty" require:"true"`
}

func (s QueryCommissionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCommissionRequest) GoString() string {
	return s.String()
}

func (s *QueryCommissionRequest) SetAuthToken(v string) *QueryCommissionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCommissionRequest) SetProductInstanceId(v string) *QueryCommissionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryCommissionRequest) SetChainId(v string) *QueryCommissionRequest {
	s.ChainId = &v
	return s
}

func (s *QueryCommissionRequest) SetEquityType(v int64) *QueryCommissionRequest {
	s.EquityType = &v
	return s
}

func (s *QueryCommissionRequest) SetIfCurrent(v bool) *QueryCommissionRequest {
	s.IfCurrent = &v
	return s
}

func (s *QueryCommissionRequest) SetIfGlobal(v bool) *QueryCommissionRequest {
	s.IfGlobal = &v
	return s
}

func (s *QueryCommissionRequest) SetDelegatedTenantId(v string) *QueryCommissionRequest {
	s.DelegatedTenantId = &v
	return s
}

type QueryCommissionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 手续费信息列表
	Commissions []*CommissionResult `json:"commissions,omitempty" xml:"commissions,omitempty" type:"Repeated"`
}

func (s QueryCommissionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCommissionResponse) GoString() string {
	return s.String()
}

func (s *QueryCommissionResponse) SetReqMsgId(v string) *QueryCommissionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCommissionResponse) SetResultCode(v string) *QueryCommissionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCommissionResponse) SetResultMsg(v string) *QueryCommissionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCommissionResponse) SetCommissions(v []*CommissionResult) *QueryCommissionResponse {
	s.Commissions = v
	return s
}

type SetCommissionMerchantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 收取手续费的商户对应的租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 交易幂等ID
	OutTxId *string `json:"out_tx_id,omitempty" xml:"out_tx_id,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
}

func (s SetCommissionMerchantRequest) String() string {
	return tea.Prettify(s)
}

func (s SetCommissionMerchantRequest) GoString() string {
	return s.String()
}

func (s *SetCommissionMerchantRequest) SetAuthToken(v string) *SetCommissionMerchantRequest {
	s.AuthToken = &v
	return s
}

func (s *SetCommissionMerchantRequest) SetProductInstanceId(v string) *SetCommissionMerchantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetCommissionMerchantRequest) SetOptTenantId(v string) *SetCommissionMerchantRequest {
	s.OptTenantId = &v
	return s
}

func (s *SetCommissionMerchantRequest) SetOutTxId(v string) *SetCommissionMerchantRequest {
	s.OutTxId = &v
	return s
}

func (s *SetCommissionMerchantRequest) SetChainId(v string) *SetCommissionMerchantRequest {
	s.ChainId = &v
	return s
}

type SetCommissionMerchantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetCommissionMerchantResponse) String() string {
	return tea.Prettify(s)
}

func (s SetCommissionMerchantResponse) GoString() string {
	return s.String()
}

func (s *SetCommissionMerchantResponse) SetReqMsgId(v string) *SetCommissionMerchantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetCommissionMerchantResponse) SetResultCode(v string) *SetCommissionMerchantResponse {
	s.ResultCode = &v
	return s
}

func (s *SetCommissionMerchantResponse) SetResultMsg(v string) *SetCommissionMerchantResponse {
	s.ResultMsg = &v
	return s
}

type QueryCommissionMerchantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
}

func (s QueryCommissionMerchantRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCommissionMerchantRequest) GoString() string {
	return s.String()
}

func (s *QueryCommissionMerchantRequest) SetAuthToken(v string) *QueryCommissionMerchantRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCommissionMerchantRequest) SetProductInstanceId(v string) *QueryCommissionMerchantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryCommissionMerchantRequest) SetChainId(v string) *QueryCommissionMerchantRequest {
	s.ChainId = &v
	return s
}

type QueryCommissionMerchantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 收取手续费的商户 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s QueryCommissionMerchantResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCommissionMerchantResponse) GoString() string {
	return s.String()
}

func (s *QueryCommissionMerchantResponse) SetReqMsgId(v string) *QueryCommissionMerchantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCommissionMerchantResponse) SetResultCode(v string) *QueryCommissionMerchantResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCommissionMerchantResponse) SetResultMsg(v string) *QueryCommissionMerchantResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCommissionMerchantResponse) SetTenantId(v string) *QueryCommissionMerchantResponse {
	s.TenantId = &v
	return s
}

type CreateConfigChainaccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要创建的链上ID对应的租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 创建的角色，admin是商户管理员链上ID，fundmanager是资金管理员链上ID
	Member *string `json:"member,omitempty" xml:"member,omitempty" require:"true"`
}

func (s CreateConfigChainaccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigChainaccountRequest) GoString() string {
	return s.String()
}

func (s *CreateConfigChainaccountRequest) SetAuthToken(v string) *CreateConfigChainaccountRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateConfigChainaccountRequest) SetProductInstanceId(v string) *CreateConfigChainaccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateConfigChainaccountRequest) SetChainId(v string) *CreateConfigChainaccountRequest {
	s.ChainId = &v
	return s
}

func (s *CreateConfigChainaccountRequest) SetOptTenantId(v string) *CreateConfigChainaccountRequest {
	s.OptTenantId = &v
	return s
}

func (s *CreateConfigChainaccountRequest) SetMember(v string) *CreateConfigChainaccountRequest {
	s.Member = &v
	return s
}

type CreateConfigChainaccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 链上ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 链上账户对应的账户公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty"`
	// 分布式身份ID
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s CreateConfigChainaccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigChainaccountResponse) GoString() string {
	return s.String()
}

func (s *CreateConfigChainaccountResponse) SetReqMsgId(v string) *CreateConfigChainaccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateConfigChainaccountResponse) SetResultCode(v string) *CreateConfigChainaccountResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateConfigChainaccountResponse) SetResultMsg(v string) *CreateConfigChainaccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateConfigChainaccountResponse) SetTenantId(v string) *CreateConfigChainaccountResponse {
	s.TenantId = &v
	return s
}

func (s *CreateConfigChainaccountResponse) SetAccountId(v string) *CreateConfigChainaccountResponse {
	s.AccountId = &v
	return s
}

func (s *CreateConfigChainaccountResponse) SetPublicKey(v string) *CreateConfigChainaccountResponse {
	s.PublicKey = &v
	return s
}

func (s *CreateConfigChainaccountResponse) SetDid(v string) *CreateConfigChainaccountResponse {
	s.Did = &v
	return s
}

type StartIpPackagetradeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 买方的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// IP授权交易时传入IP ID；增值服务交易时传入服务ID
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// true 只上链不走真实支付，false 上链并链下真实支付账单
	OnlyCallBlockchain *bool `json:"only_call_blockchain,omitempty" xml:"only_call_blockchain,omitempty" require:"true"`
	// 终端商品价格区间
	PriceRange *string `json:"price_range,omitempty" xml:"price_range,omitempty" require:"true"`
	// 套餐中包含终端商品数量
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 套餐交易应付金额，单位元，保留两位小数
	ExpectedTotalPrice *string `json:"expected_total_price,omitempty" xml:"expected_total_price,omitempty" require:"true"`
	// 授权合作开始期限（毫秒时间戳）
	AuthBeginTime *int64 `json:"auth_begin_time,omitempty" xml:"auth_begin_time,omitempty" require:"true"`
	// 授权合作结束期限（毫秒时间戳）
	AuthEndTime *int64 `json:"auth_end_time,omitempty" xml:"auth_end_time,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 附加条款
	AdditionalClause *string `json:"additional_clause,omitempty" xml:"additional_clause,omitempty"`
	// 授权产品范围
	AuthProductScope *string `json:"auth_product_scope,omitempty" xml:"auth_product_scope,omitempty"`
	// 授权地域范围
	AuthAreaScope *string `json:"auth_area_scope,omitempty" xml:"auth_area_scope,omitempty"`
	// 商品销售渠道
	SalesChannel *string `json:"sales_channel,omitempty" xml:"sales_channel,omitempty"`
	// 0 IP交易，1 增值服务交易
	GoodsType *int64 `json:"goods_type,omitempty" xml:"goods_type,omitempty"`
	// 增值服务交易绑定的ip授权交易订单，增值服务交易必填
	RelatedOrderId *string `json:"related_order_id,omitempty" xml:"related_order_id,omitempty"`
	// 支付完成后的回调地址。如果为空，默认跳转到https://ipforce.cloud.alipay.com/
	PayReturnUrl *string `json:"pay_return_url,omitempty" xml:"pay_return_url,omitempty"`
	// 授权类型
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty"`
	// 授权模式，0普通授权，1独家授权
	AuthorizationModel []*int64 `json:"authorization_model,omitempty" xml:"authorization_model,omitempty" type:"Repeated"`
	// 订单功能选择，0 基础功能，1 领用收藏等
	Features []*int64 `json:"features,omitempty" xml:"features,omitempty" type:"Repeated"`
}

func (s StartIpPackagetradeRequest) String() string {
	return tea.Prettify(s)
}

func (s StartIpPackagetradeRequest) GoString() string {
	return s.String()
}

func (s *StartIpPackagetradeRequest) SetAuthToken(v string) *StartIpPackagetradeRequest {
	s.AuthToken = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetProductInstanceId(v string) *StartIpPackagetradeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetBaseRequest(v *BaseRequestInfo) *StartIpPackagetradeRequest {
	s.BaseRequest = v
	return s
}

func (s *StartIpPackagetradeRequest) SetAccountId(v string) *StartIpPackagetradeRequest {
	s.AccountId = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetIpId(v string) *StartIpPackagetradeRequest {
	s.IpId = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetOnlyCallBlockchain(v bool) *StartIpPackagetradeRequest {
	s.OnlyCallBlockchain = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetPriceRange(v string) *StartIpPackagetradeRequest {
	s.PriceRange = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetAmount(v int64) *StartIpPackagetradeRequest {
	s.Amount = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetExpectedTotalPrice(v string) *StartIpPackagetradeRequest {
	s.ExpectedTotalPrice = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetAuthBeginTime(v int64) *StartIpPackagetradeRequest {
	s.AuthBeginTime = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetAuthEndTime(v int64) *StartIpPackagetradeRequest {
	s.AuthEndTime = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetMemo(v string) *StartIpPackagetradeRequest {
	s.Memo = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetAdditionalClause(v string) *StartIpPackagetradeRequest {
	s.AdditionalClause = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetAuthProductScope(v string) *StartIpPackagetradeRequest {
	s.AuthProductScope = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetAuthAreaScope(v string) *StartIpPackagetradeRequest {
	s.AuthAreaScope = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetSalesChannel(v string) *StartIpPackagetradeRequest {
	s.SalesChannel = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetGoodsType(v int64) *StartIpPackagetradeRequest {
	s.GoodsType = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetRelatedOrderId(v string) *StartIpPackagetradeRequest {
	s.RelatedOrderId = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetPayReturnUrl(v string) *StartIpPackagetradeRequest {
	s.PayReturnUrl = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetAuthType(v string) *StartIpPackagetradeRequest {
	s.AuthType = &v
	return s
}

func (s *StartIpPackagetradeRequest) SetAuthorizationModel(v []*int64) *StartIpPackagetradeRequest {
	s.AuthorizationModel = v
	return s
}

func (s *StartIpPackagetradeRequest) SetFeatures(v []*int64) *StartIpPackagetradeRequest {
	s.Features = v
	return s
}

type StartIpPackagetradeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
	// 支付信息
	PayUrl *string `json:"pay_url,omitempty" xml:"pay_url,omitempty"`
	// 账单ID
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty"`
}

func (s StartIpPackagetradeResponse) String() string {
	return tea.Prettify(s)
}

func (s StartIpPackagetradeResponse) GoString() string {
	return s.String()
}

func (s *StartIpPackagetradeResponse) SetReqMsgId(v string) *StartIpPackagetradeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartIpPackagetradeResponse) SetResultCode(v string) *StartIpPackagetradeResponse {
	s.ResultCode = &v
	return s
}

func (s *StartIpPackagetradeResponse) SetResultMsg(v string) *StartIpPackagetradeResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartIpPackagetradeResponse) SetIpOrderId(v string) *StartIpPackagetradeResponse {
	s.IpOrderId = &v
	return s
}

func (s *StartIpPackagetradeResponse) SetPayUrl(v string) *StartIpPackagetradeResponse {
	s.PayUrl = &v
	return s
}

func (s *StartIpPackagetradeResponse) SetIpBillId(v string) *StartIpPackagetradeResponse {
	s.IpBillId = &v
	return s
}

type CancelIpPackagetradeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// IP交易发起方的链上账户ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s CancelIpPackagetradeRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelIpPackagetradeRequest) GoString() string {
	return s.String()
}

func (s *CancelIpPackagetradeRequest) SetAuthToken(v string) *CancelIpPackagetradeRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelIpPackagetradeRequest) SetProductInstanceId(v string) *CancelIpPackagetradeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelIpPackagetradeRequest) SetBaseRequest(v *BaseRequestInfo) *CancelIpPackagetradeRequest {
	s.BaseRequest = v
	return s
}

func (s *CancelIpPackagetradeRequest) SetIpOrderId(v string) *CancelIpPackagetradeRequest {
	s.IpOrderId = &v
	return s
}

func (s *CancelIpPackagetradeRequest) SetAccountId(v string) *CancelIpPackagetradeRequest {
	s.AccountId = &v
	return s
}

func (s *CancelIpPackagetradeRequest) SetMemo(v string) *CancelIpPackagetradeRequest {
	s.Memo = &v
	return s
}

type CancelIpPackagetradeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CancelIpPackagetradeResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelIpPackagetradeResponse) GoString() string {
	return s.String()
}

func (s *CancelIpPackagetradeResponse) SetReqMsgId(v string) *CancelIpPackagetradeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelIpPackagetradeResponse) SetResultCode(v string) *CancelIpPackagetradeResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelIpPackagetradeResponse) SetResultMsg(v string) *CancelIpPackagetradeResponse {
	s.ResultMsg = &v
	return s
}

type UploadIpPackagetradesalesRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 买方的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 关联订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 销售数据列表
	IpSalesInfoList []*IPSalesInfo `json:"ip_sales_info_list,omitempty" xml:"ip_sales_info_list,omitempty" require:"true" type:"Repeated"`
}

func (s UploadIpPackagetradesalesRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadIpPackagetradesalesRequest) GoString() string {
	return s.String()
}

func (s *UploadIpPackagetradesalesRequest) SetAuthToken(v string) *UploadIpPackagetradesalesRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadIpPackagetradesalesRequest) SetProductInstanceId(v string) *UploadIpPackagetradesalesRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadIpPackagetradesalesRequest) SetBaseRequest(v *BaseRequestInfo) *UploadIpPackagetradesalesRequest {
	s.BaseRequest = v
	return s
}

func (s *UploadIpPackagetradesalesRequest) SetAccountId(v string) *UploadIpPackagetradesalesRequest {
	s.AccountId = &v
	return s
}

func (s *UploadIpPackagetradesalesRequest) SetIpOrderId(v string) *UploadIpPackagetradesalesRequest {
	s.IpOrderId = &v
	return s
}

func (s *UploadIpPackagetradesalesRequest) SetIpSalesInfoList(v []*IPSalesInfo) *UploadIpPackagetradesalesRequest {
	s.IpSalesInfoList = v
	return s
}

type UploadIpPackagetradesalesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UploadIpPackagetradesalesResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadIpPackagetradesalesResponse) GoString() string {
	return s.String()
}

func (s *UploadIpPackagetradesalesResponse) SetReqMsgId(v string) *UploadIpPackagetradesalesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadIpPackagetradesalesResponse) SetResultCode(v string) *UploadIpPackagetradesalesResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadIpPackagetradesalesResponse) SetResultMsg(v string) *UploadIpPackagetradesalesResponse {
	s.ResultMsg = &v
	return s
}

type StartIpAuthtradeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 采购者的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// IP授权交易时传入IP ID；增值服务交易时传入服务ID
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// 收费模式：0 销售抽佣, 1 按量付费
	ChargeType *int64 `json:"charge_type,omitempty" xml:"charge_type,omitempty"`
	// 授权计费比例
	AuthRate *string `json:"auth_rate,omitempty" xml:"auth_rate,omitempty"`
	// 按量付费的收费单价（按量付费模式必填）
	AuthPrice *string `json:"auth_price,omitempty" xml:"auth_price,omitempty"`
	// 授权合作开始期限（毫秒时间戳）
	AuthBeginTime *int64 `json:"auth_begin_time,omitempty" xml:"auth_begin_time,omitempty" require:"true"`
	// 授权合作结束期限（毫秒时间戳）
	AuthEndTime *int64 `json:"auth_end_time,omitempty" xml:"auth_end_time,omitempty" require:"true"`
	// 合同（文件URL）
	Contract *string `json:"contract,omitempty" xml:"contract,omitempty"`
	// 设计稿（文件URL）
	DesignDraft *string `json:"design_draft,omitempty" xml:"design_draft,omitempty"`
	// 授权产品范围
	AuthProductScope *string `json:"auth_product_scope,omitempty" xml:"auth_product_scope,omitempty"`
	// 授权地域范围
	AuthAreaScope *string `json:"auth_area_scope,omitempty" xml:"auth_area_scope,omitempty"`
	// 商品销售渠道
	SalesChannel *string `json:"sales_channel,omitempty" xml:"sales_channel,omitempty"`
	// 备注消息(不超过256个字符)
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 附加条款
	AdditionalClause *string `json:"additional_clause,omitempty" xml:"additional_clause,omitempty"`
	// 是否有保底金
	Guaranteed *bool `json:"guaranteed,omitempty" xml:"guaranteed,omitempty" require:"true"`
	// 支付的保底金金额
	GuaranteedFund *string `json:"guaranteed_fund,omitempty" xml:"guaranteed_fund,omitempty"`
	// 保底商品个数（按量付费），订单销售数量超过保底部分需按量付费
	GuaranteedGoodsAmount *int64 `json:"guaranteed_goods_amount,omitempty" xml:"guaranteed_goods_amount,omitempty"`
	// 保底商品销售金额（销售抽佣），订单销售额超过保底部分需按比例抽拥
	GuaranteedSales *string `json:"guaranteed_sales,omitempty" xml:"guaranteed_sales,omitempty"`
	// 0 IP交易，1 增值服务交易
	GoodsType *int64 `json:"goods_type,omitempty" xml:"goods_type,omitempty"`
	// 增值服务交易绑定的ip授权交易订单，增值服务交易必填
	RelatedOrderId *string `json:"related_order_id,omitempty" xml:"related_order_id,omitempty"`
	// 支付完成后的回调地址。如果为空，默认跳转到https://ipforce.cloud.alipay.com/
	PayReturnUrl *string `json:"pay_return_url,omitempty" xml:"pay_return_url,omitempty"`
	// 授权类型
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty"`
	// 授权模式，0普通授权，1独家授权
	AuthorizationModel []*int64 `json:"authorization_model,omitempty" xml:"authorization_model,omitempty" type:"Repeated"`
	// 订单功能选择，0 基础功能，1 领用收藏等
	Features []*int64 `json:"features,omitempty" xml:"features,omitempty" type:"Repeated"`
	// 合作申请时的订单ID，如没有前置的申请环节，则不填
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
	// true 不真实支付，false 需真实支付
	OnlyCallBlockchain *bool `json:"only_call_blockchain,omitempty" xml:"only_call_blockchain,omitempty"`
	// 1套餐交易 2授权交易 3正版订单 4预申请订单
	CodeOrderType *int64 `json:"code_order_type,omitempty" xml:"code_order_type,omitempty"`
	// 商家2088号
	PId *string `json:"p_id,omitempty" xml:"p_id,omitempty"`
}

func (s StartIpAuthtradeRequest) String() string {
	return tea.Prettify(s)
}

func (s StartIpAuthtradeRequest) GoString() string {
	return s.String()
}

func (s *StartIpAuthtradeRequest) SetAuthToken(v string) *StartIpAuthtradeRequest {
	s.AuthToken = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetProductInstanceId(v string) *StartIpAuthtradeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetBaseRequest(v *BaseRequestInfo) *StartIpAuthtradeRequest {
	s.BaseRequest = v
	return s
}

func (s *StartIpAuthtradeRequest) SetAccountId(v string) *StartIpAuthtradeRequest {
	s.AccountId = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetIpId(v string) *StartIpAuthtradeRequest {
	s.IpId = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetChargeType(v int64) *StartIpAuthtradeRequest {
	s.ChargeType = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetAuthRate(v string) *StartIpAuthtradeRequest {
	s.AuthRate = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetAuthPrice(v string) *StartIpAuthtradeRequest {
	s.AuthPrice = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetAuthBeginTime(v int64) *StartIpAuthtradeRequest {
	s.AuthBeginTime = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetAuthEndTime(v int64) *StartIpAuthtradeRequest {
	s.AuthEndTime = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetContract(v string) *StartIpAuthtradeRequest {
	s.Contract = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetDesignDraft(v string) *StartIpAuthtradeRequest {
	s.DesignDraft = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetAuthProductScope(v string) *StartIpAuthtradeRequest {
	s.AuthProductScope = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetAuthAreaScope(v string) *StartIpAuthtradeRequest {
	s.AuthAreaScope = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetSalesChannel(v string) *StartIpAuthtradeRequest {
	s.SalesChannel = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetMemo(v string) *StartIpAuthtradeRequest {
	s.Memo = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetAdditionalClause(v string) *StartIpAuthtradeRequest {
	s.AdditionalClause = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetGuaranteed(v bool) *StartIpAuthtradeRequest {
	s.Guaranteed = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetGuaranteedFund(v string) *StartIpAuthtradeRequest {
	s.GuaranteedFund = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetGuaranteedGoodsAmount(v int64) *StartIpAuthtradeRequest {
	s.GuaranteedGoodsAmount = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetGuaranteedSales(v string) *StartIpAuthtradeRequest {
	s.GuaranteedSales = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetGoodsType(v int64) *StartIpAuthtradeRequest {
	s.GoodsType = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetRelatedOrderId(v string) *StartIpAuthtradeRequest {
	s.RelatedOrderId = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetPayReturnUrl(v string) *StartIpAuthtradeRequest {
	s.PayReturnUrl = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetAuthType(v string) *StartIpAuthtradeRequest {
	s.AuthType = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetAuthorizationModel(v []*int64) *StartIpAuthtradeRequest {
	s.AuthorizationModel = v
	return s
}

func (s *StartIpAuthtradeRequest) SetFeatures(v []*int64) *StartIpAuthtradeRequest {
	s.Features = v
	return s
}

func (s *StartIpAuthtradeRequest) SetIpOrderId(v string) *StartIpAuthtradeRequest {
	s.IpOrderId = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetOnlyCallBlockchain(v bool) *StartIpAuthtradeRequest {
	s.OnlyCallBlockchain = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetCodeOrderType(v int64) *StartIpAuthtradeRequest {
	s.CodeOrderType = &v
	return s
}

func (s *StartIpAuthtradeRequest) SetPId(v string) *StartIpAuthtradeRequest {
	s.PId = &v
	return s
}

type StartIpAuthtradeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
	// 保底金支付链接
	PayUrl *string `json:"pay_url,omitempty" xml:"pay_url,omitempty"`
	// 保底金账单ID
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty"`
}

func (s StartIpAuthtradeResponse) String() string {
	return tea.Prettify(s)
}

func (s StartIpAuthtradeResponse) GoString() string {
	return s.String()
}

func (s *StartIpAuthtradeResponse) SetReqMsgId(v string) *StartIpAuthtradeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartIpAuthtradeResponse) SetResultCode(v string) *StartIpAuthtradeResponse {
	s.ResultCode = &v
	return s
}

func (s *StartIpAuthtradeResponse) SetResultMsg(v string) *StartIpAuthtradeResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartIpAuthtradeResponse) SetIpOrderId(v string) *StartIpAuthtradeResponse {
	s.IpOrderId = &v
	return s
}

func (s *StartIpAuthtradeResponse) SetPayUrl(v string) *StartIpAuthtradeResponse {
	s.PayUrl = &v
	return s
}

func (s *StartIpAuthtradeResponse) SetIpBillId(v string) *StartIpAuthtradeResponse {
	s.IpBillId = &v
	return s
}

type UploadIpAuthtradesalesRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 上传记录的用户的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// true 只上链不走真实支付，false 上链并链下真实支付账单
	OnlyCallBlockchain *bool `json:"only_call_blockchain,omitempty" xml:"only_call_blockchain,omitempty" require:"true"`
	// 支付完成后的回调地址。如果为空，默认跳转到https://ipforce.cloud.alipay.com/
	PayReturnUrl *string `json:"pay_return_url,omitempty" xml:"pay_return_url,omitempty"`
	// 授权佣金比例
	AuthRate *string `json:"auth_rate,omitempty" xml:"auth_rate,omitempty"`
	// 定向授权按量付费单价
	AuthPrice *string `json:"auth_price,omitempty" xml:"auth_price,omitempty"`
	// 本次结算周期开始时间
	SettlementBeginTime *int64 `json:"settlement_begin_time,omitempty" xml:"settlement_begin_time,omitempty" require:"true"`
	// 本次结算周期结束时间
	SettlementEndTime *int64 `json:"settlement_end_time,omitempty" xml:"settlement_end_time,omitempty" require:"true"`
	// 零售价
	Price *string `json:"price,omitempty" xml:"price,omitempty"`
	// 终端商品销售数量
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 销售金额
	Sales *string `json:"sales,omitempty" xml:"sales,omitempty" require:"true"`
	// 实付金额
	Payment *string `json:"payment,omitempty" xml:"payment,omitempty"`
	// 终端商品名称
	GoodsName *string `json:"goods_name,omitempty" xml:"goods_name,omitempty" require:"true"`
	// 终端商品图片
	GoodsImage *string `json:"goods_image,omitempty" xml:"goods_image,omitempty"`
	// 终端销售渠道
	SalesChannel *string `json:"sales_channel,omitempty" xml:"sales_channel,omitempty"`
	// 终端商品链接
	GoodsUrl *string `json:"goods_url,omitempty" xml:"goods_url,omitempty"`
	// 商品信息
	GoodsInfo *string `json:"goods_info,omitempty" xml:"goods_info,omitempty" require:"true"`
	// 数据上传操作者
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 账单结算类型：即时计费0、按周计费1、按月计费2、按季度计费3。默认0
	BillingType *int64 `json:"billing_type,omitempty" xml:"billing_type,omitempty"`
	// 商品ID
	GoodsId *string `json:"goods_id,omitempty" xml:"goods_id,omitempty"`
	// 退款的销售金额，有退款时填写，默认0
	RefundSales *string `json:"refund_sales,omitempty" xml:"refund_sales,omitempty"`
	// 订单信息json string: 用户ID/订单状态/订单创建时间戳ms/订单支付时间戳ms等
	SalesExtInfo *string `json:"sales_ext_info,omitempty" xml:"sales_ext_info,omitempty"`
	// 用户信息json string: 姓名/手机号/地址等结构化数据
	SalesUserInfo *string `json:"sales_user_info,omitempty" xml:"sales_user_info,omitempty"`
}

func (s UploadIpAuthtradesalesRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadIpAuthtradesalesRequest) GoString() string {
	return s.String()
}

func (s *UploadIpAuthtradesalesRequest) SetAuthToken(v string) *UploadIpAuthtradesalesRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetProductInstanceId(v string) *UploadIpAuthtradesalesRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetBaseRequest(v *BaseRequestInfo) *UploadIpAuthtradesalesRequest {
	s.BaseRequest = v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetAccountId(v string) *UploadIpAuthtradesalesRequest {
	s.AccountId = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetIpOrderId(v string) *UploadIpAuthtradesalesRequest {
	s.IpOrderId = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetOnlyCallBlockchain(v bool) *UploadIpAuthtradesalesRequest {
	s.OnlyCallBlockchain = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetPayReturnUrl(v string) *UploadIpAuthtradesalesRequest {
	s.PayReturnUrl = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetAuthRate(v string) *UploadIpAuthtradesalesRequest {
	s.AuthRate = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetAuthPrice(v string) *UploadIpAuthtradesalesRequest {
	s.AuthPrice = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetSettlementBeginTime(v int64) *UploadIpAuthtradesalesRequest {
	s.SettlementBeginTime = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetSettlementEndTime(v int64) *UploadIpAuthtradesalesRequest {
	s.SettlementEndTime = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetPrice(v string) *UploadIpAuthtradesalesRequest {
	s.Price = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetAmount(v int64) *UploadIpAuthtradesalesRequest {
	s.Amount = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetSales(v string) *UploadIpAuthtradesalesRequest {
	s.Sales = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetPayment(v string) *UploadIpAuthtradesalesRequest {
	s.Payment = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetGoodsName(v string) *UploadIpAuthtradesalesRequest {
	s.GoodsName = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetGoodsImage(v string) *UploadIpAuthtradesalesRequest {
	s.GoodsImage = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetSalesChannel(v string) *UploadIpAuthtradesalesRequest {
	s.SalesChannel = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetGoodsUrl(v string) *UploadIpAuthtradesalesRequest {
	s.GoodsUrl = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetGoodsInfo(v string) *UploadIpAuthtradesalesRequest {
	s.GoodsInfo = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetOperator(v string) *UploadIpAuthtradesalesRequest {
	s.Operator = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetMemo(v string) *UploadIpAuthtradesalesRequest {
	s.Memo = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetBillingType(v int64) *UploadIpAuthtradesalesRequest {
	s.BillingType = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetGoodsId(v string) *UploadIpAuthtradesalesRequest {
	s.GoodsId = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetRefundSales(v string) *UploadIpAuthtradesalesRequest {
	s.RefundSales = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetSalesExtInfo(v string) *UploadIpAuthtradesalesRequest {
	s.SalesExtInfo = &v
	return s
}

func (s *UploadIpAuthtradesalesRequest) SetSalesUserInfo(v string) *UploadIpAuthtradesalesRequest {
	s.SalesUserInfo = &v
	return s
}

type UploadIpAuthtradesalesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 支付信息
	PayUrl *string `json:"pay_url,omitempty" xml:"pay_url,omitempty"`
	// 账单ID
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty"`
}

func (s UploadIpAuthtradesalesResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadIpAuthtradesalesResponse) GoString() string {
	return s.String()
}

func (s *UploadIpAuthtradesalesResponse) SetReqMsgId(v string) *UploadIpAuthtradesalesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadIpAuthtradesalesResponse) SetResultCode(v string) *UploadIpAuthtradesalesResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadIpAuthtradesalesResponse) SetResultMsg(v string) *UploadIpAuthtradesalesResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadIpAuthtradesalesResponse) SetPayUrl(v string) *UploadIpAuthtradesalesResponse {
	s.PayUrl = &v
	return s
}

func (s *UploadIpAuthtradesalesResponse) SetIpBillId(v string) *UploadIpAuthtradesalesResponse {
	s.IpBillId = &v
	return s
}

type CancelIpAuthtradebillRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 授权模式销售数据的账单ID
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty" require:"true"`
	// 买家的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s CancelIpAuthtradebillRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelIpAuthtradebillRequest) GoString() string {
	return s.String()
}

func (s *CancelIpAuthtradebillRequest) SetAuthToken(v string) *CancelIpAuthtradebillRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelIpAuthtradebillRequest) SetProductInstanceId(v string) *CancelIpAuthtradebillRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelIpAuthtradebillRequest) SetBaseRequest(v *BaseRequestInfo) *CancelIpAuthtradebillRequest {
	s.BaseRequest = v
	return s
}

func (s *CancelIpAuthtradebillRequest) SetIpBillId(v string) *CancelIpAuthtradebillRequest {
	s.IpBillId = &v
	return s
}

func (s *CancelIpAuthtradebillRequest) SetAccountId(v string) *CancelIpAuthtradebillRequest {
	s.AccountId = &v
	return s
}

func (s *CancelIpAuthtradebillRequest) SetMemo(v string) *CancelIpAuthtradebillRequest {
	s.Memo = &v
	return s
}

type CancelIpAuthtradebillResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CancelIpAuthtradebillResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelIpAuthtradebillResponse) GoString() string {
	return s.String()
}

func (s *CancelIpAuthtradebillResponse) SetReqMsgId(v string) *CancelIpAuthtradebillResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelIpAuthtradebillResponse) SetResultCode(v string) *CancelIpAuthtradebillResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelIpAuthtradebillResponse) SetResultMsg(v string) *CancelIpAuthtradebillResponse {
	s.ResultMsg = &v
	return s
}

type QueryIpBillstatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 账单ID
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty" require:"true"`
}

func (s QueryIpBillstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpBillstatusRequest) GoString() string {
	return s.String()
}

func (s *QueryIpBillstatusRequest) SetAuthToken(v string) *QueryIpBillstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpBillstatusRequest) SetProductInstanceId(v string) *QueryIpBillstatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpBillstatusRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpBillstatusRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpBillstatusRequest) SetIpBillId(v string) *QueryIpBillstatusRequest {
	s.IpBillId = &v
	return s
}

type QueryIpBillstatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易状态
	// (1: "交易创建,等待买家付款"),
	// (2: "未付款交易超时关闭,或支付完成后全额退款"),
	// (3: "交易支付成功"),
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 支付时间
	PayTime *int64 `json:"pay_time,omitempty" xml:"pay_time,omitempty"`
	// 支付宝交易号
	TradeNo *string `json:"trade_no,omitempty" xml:"trade_no,omitempty"`
}

func (s QueryIpBillstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpBillstatusResponse) GoString() string {
	return s.String()
}

func (s *QueryIpBillstatusResponse) SetReqMsgId(v string) *QueryIpBillstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpBillstatusResponse) SetResultCode(v string) *QueryIpBillstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpBillstatusResponse) SetResultMsg(v string) *QueryIpBillstatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpBillstatusResponse) SetStatus(v int64) *QueryIpBillstatusResponse {
	s.Status = &v
	return s
}

func (s *QueryIpBillstatusResponse) SetPayTime(v int64) *QueryIpBillstatusResponse {
	s.PayTime = &v
	return s
}

func (s *QueryIpBillstatusResponse) SetTradeNo(v string) *QueryIpBillstatusResponse {
	s.TradeNo = &v
	return s
}

type QueryIpOrderlistRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 买方ID
	BuyerId *string `json:"buyer_id,omitempty" xml:"buyer_id,omitempty"`
	// 卖方ID
	SellerId *string `json:"seller_id,omitempty" xml:"seller_id,omitempty"`
	// IP id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
	// 订单状态
	OrderStatus *int64 `json:"order_status,omitempty" xml:"order_status,omitempty"`
	// 根据IP名称模糊查询
	IpName *string `json:"ip_name,omitempty" xml:"ip_name,omitempty"`
	// 卖方名称，根据卖方名称模糊查询
	SellerName *string `json:"seller_name,omitempty" xml:"seller_name,omitempty"`
	// 买方名称，根据卖方名称模糊查询
	BuyerName *string `json:"buyer_name,omitempty" xml:"buyer_name,omitempty"`
	// 交易类型：1 套餐交易， 2 定向授权
	TradeType *int64 `json:"trade_type,omitempty" xml:"trade_type,omitempty"`
	// 0 IP交易，1 增值服务交易
	GoodsType *int64 `json:"goods_type,omitempty" xml:"goods_type,omitempty"`
	// 收费模式：0 销售抽拥，1 按量计费
	ChargeType *int64 `json:"charge_type,omitempty" xml:"charge_type,omitempty"`
	// 查询订单授权开始时间
	AuthStartTime *int64 `json:"auth_start_time,omitempty" xml:"auth_start_time,omitempty"`
	// 查询订单授权结束时间
	AuthEndTime *int64 `json:"auth_end_time,omitempty" xml:"auth_end_time,omitempty"`
	// 订单创建时间开始范围
	CreateStartTime *int64 `json:"create_start_time,omitempty" xml:"create_start_time,omitempty"`
	// 订单创建时间结束范围
	CreateEndTime *int64 `json:"create_end_time,omitempty" xml:"create_end_time,omitempty"`
	// 排序字段
	OrderBy *string `json:"order_by,omitempty" xml:"order_by,omitempty" require:"true"`
	// 数据排序顺序：正序还是倒序
	Order *string `json:"order,omitempty" xml:"order,omitempty" require:"true"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty" require:"true"`
	// 每页数据量大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 渠道名称
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty"`
	// 是否查询0授权费率的订单，true则查0费率订单，false则查非0费率订单
	ZeroAuthRate *bool `json:"zero_auth_rate,omitempty" xml:"zero_auth_rate,omitempty"`
}

func (s QueryIpOrderlistRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpOrderlistRequest) GoString() string {
	return s.String()
}

func (s *QueryIpOrderlistRequest) SetAuthToken(v string) *QueryIpOrderlistRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetProductInstanceId(v string) *QueryIpOrderlistRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpOrderlistRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpOrderlistRequest) SetBuyerId(v string) *QueryIpOrderlistRequest {
	s.BuyerId = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetSellerId(v string) *QueryIpOrderlistRequest {
	s.SellerId = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetIpId(v string) *QueryIpOrderlistRequest {
	s.IpId = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetIpOrderId(v string) *QueryIpOrderlistRequest {
	s.IpOrderId = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetOrderStatus(v int64) *QueryIpOrderlistRequest {
	s.OrderStatus = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetIpName(v string) *QueryIpOrderlistRequest {
	s.IpName = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetSellerName(v string) *QueryIpOrderlistRequest {
	s.SellerName = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetBuyerName(v string) *QueryIpOrderlistRequest {
	s.BuyerName = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetTradeType(v int64) *QueryIpOrderlistRequest {
	s.TradeType = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetGoodsType(v int64) *QueryIpOrderlistRequest {
	s.GoodsType = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetChargeType(v int64) *QueryIpOrderlistRequest {
	s.ChargeType = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetAuthStartTime(v int64) *QueryIpOrderlistRequest {
	s.AuthStartTime = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetAuthEndTime(v int64) *QueryIpOrderlistRequest {
	s.AuthEndTime = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetCreateStartTime(v int64) *QueryIpOrderlistRequest {
	s.CreateStartTime = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetCreateEndTime(v int64) *QueryIpOrderlistRequest {
	s.CreateEndTime = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetOrderBy(v string) *QueryIpOrderlistRequest {
	s.OrderBy = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetOrder(v string) *QueryIpOrderlistRequest {
	s.Order = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetPageNumber(v int64) *QueryIpOrderlistRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetPageSize(v int64) *QueryIpOrderlistRequest {
	s.PageSize = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetChannelName(v string) *QueryIpOrderlistRequest {
	s.ChannelName = &v
	return s
}

func (s *QueryIpOrderlistRequest) SetZeroAuthRate(v bool) *QueryIpOrderlistRequest {
	s.ZeroAuthRate = &v
	return s
}

type QueryIpOrderlistResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 订单总数
	TotalOrderCount *int64 `json:"total_order_count,omitempty" xml:"total_order_count,omitempty"`
	// 总金额
	TotalPaymentAmount *string `json:"total_payment_amount,omitempty" xml:"total_payment_amount,omitempty"`
	// 总客户数
	TotalBuyerCount *int64 `json:"total_buyer_count,omitempty" xml:"total_buyer_count,omitempty"`
	// 订单列表
	OrderList []*IPOrder `json:"order_list,omitempty" xml:"order_list,omitempty" type:"Repeated"`
	// 筛选条件下订单总数
	SelectOrderCount *int64 `json:"select_order_count,omitempty" xml:"select_order_count,omitempty"`
}

func (s QueryIpOrderlistResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpOrderlistResponse) GoString() string {
	return s.String()
}

func (s *QueryIpOrderlistResponse) SetReqMsgId(v string) *QueryIpOrderlistResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpOrderlistResponse) SetResultCode(v string) *QueryIpOrderlistResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpOrderlistResponse) SetResultMsg(v string) *QueryIpOrderlistResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpOrderlistResponse) SetPageNumber(v int64) *QueryIpOrderlistResponse {
	s.PageNumber = &v
	return s
}

func (s *QueryIpOrderlistResponse) SetPageSize(v int64) *QueryIpOrderlistResponse {
	s.PageSize = &v
	return s
}

func (s *QueryIpOrderlistResponse) SetTotalOrderCount(v int64) *QueryIpOrderlistResponse {
	s.TotalOrderCount = &v
	return s
}

func (s *QueryIpOrderlistResponse) SetTotalPaymentAmount(v string) *QueryIpOrderlistResponse {
	s.TotalPaymentAmount = &v
	return s
}

func (s *QueryIpOrderlistResponse) SetTotalBuyerCount(v int64) *QueryIpOrderlistResponse {
	s.TotalBuyerCount = &v
	return s
}

func (s *QueryIpOrderlistResponse) SetOrderList(v []*IPOrder) *QueryIpOrderlistResponse {
	s.OrderList = v
	return s
}

func (s *QueryIpOrderlistResponse) SetSelectOrderCount(v int64) *QueryIpOrderlistResponse {
	s.SelectOrderCount = &v
	return s
}

type CreateIpGoodsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 版权方的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// ip的名字
	IpName *string `json:"ip_name,omitempty" xml:"ip_name,omitempty" require:"true"`
	// 受众群体，多个用;隔开
	AudienceGroup *string `json:"audience_group,omitempty" xml:"audience_group,omitempty" require:"true"`
	// ip类型，多个用;隔开
	IpType *string `json:"ip_type,omitempty" xml:"ip_type,omitempty" require:"true"`
	// ip主图,存放oss图片链接;隔开
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// 商品详情图  存放OSS图片链接 用;隔开
	ImageDetail *string `json:"image_detail,omitempty" xml:"image_detail,omitempty" require:"true"`
	// ip描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 对接人信息，json列表
	// [{
	// "name":"123", //联系人名字，必填
	// "mobilePhone":"123",// 联系人手机号,必填
	// "email":"456",// 联系人邮箱,选填
	// "dingDing":"999",// 联系人钉钉号,选填
	// "telePhone":"8888",// 联系人座机,选填
	// "position":"aaa"// 联系人职务,必填
	// }]
	DockingPeopleInfo []*DockingPeopleInfo `json:"docking_people_info,omitempty" xml:"docking_people_info,omitempty" require:"true" type:"Repeated"`
	// 资质证书类型，0为用户上传，1申请
	CopyRightType *string `json:"copy_right_type,omitempty" xml:"copy_right_type,omitempty"`
	// 资质，copy_right_type为0的时候，copy_right不能为空，copy_right_type为1的时候，copy_right可以为空
	CopyRight *string `json:"copy_right,omitempty" xml:"copy_right,omitempty"`
	// 合作事项
	CooperationNote *string `json:"cooperation_note,omitempty" xml:"cooperation_note,omitempty"`
	// 传入的渠道信息
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 合作案例，图片存放oss链接，多张用,隔开
	CooperationCase *string `json:"cooperation_case,omitempty" xml:"cooperation_case,omitempty"`
	// ip创建时间,毫秒时间戳
	IpCreateTime *int64 `json:"ip_create_time,omitempty" xml:"ip_create_time,omitempty"`
	// 未来大事件
	FutureMilestones *string `json:"future_milestones,omitempty" xml:"future_milestones,omitempty"`
	// 推广渠道
	PromotionChannels *string `json:"promotion_channels,omitempty" xml:"promotion_channels,omitempty"`
	// ip别称，多个用;隔开
	IpOtherName *string `json:"ip_other_name,omitempty" xml:"ip_other_name,omitempty"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 资质生效时间， 毫秒时间戳
	CopyRightBeginTime *int64 `json:"copy_right_begin_time,omitempty" xml:"copy_right_begin_time,omitempty" require:"true"`
	// 资质生效的结束时间
	CopyRightEndTime *int64 `json:"copy_right_end_time,omitempty" xml:"copy_right_end_time,omitempty" require:"true"`
	// IP图库链接
	IpGalleryUrl *string `json:"ip_gallery_url,omitempty" xml:"ip_gallery_url,omitempty"`
	// IP授权信息
	AuthorizationInfo *IPAuthorizationInfo `json:"authorization_info,omitempty" xml:"authorization_info,omitempty"`
	// 是否允许商家下载图库
	AllowDownload *bool `json:"allow_download,omitempty" xml:"allow_download,omitempty"`
}

func (s CreateIpGoodsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIpGoodsRequest) GoString() string {
	return s.String()
}

func (s *CreateIpGoodsRequest) SetAuthToken(v string) *CreateIpGoodsRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateIpGoodsRequest) SetProductInstanceId(v string) *CreateIpGoodsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateIpGoodsRequest) SetBaseRequest(v *BaseRequestInfo) *CreateIpGoodsRequest {
	s.BaseRequest = v
	return s
}

func (s *CreateIpGoodsRequest) SetAccountId(v string) *CreateIpGoodsRequest {
	s.AccountId = &v
	return s
}

func (s *CreateIpGoodsRequest) SetIpName(v string) *CreateIpGoodsRequest {
	s.IpName = &v
	return s
}

func (s *CreateIpGoodsRequest) SetAudienceGroup(v string) *CreateIpGoodsRequest {
	s.AudienceGroup = &v
	return s
}

func (s *CreateIpGoodsRequest) SetIpType(v string) *CreateIpGoodsRequest {
	s.IpType = &v
	return s
}

func (s *CreateIpGoodsRequest) SetImage(v string) *CreateIpGoodsRequest {
	s.Image = &v
	return s
}

func (s *CreateIpGoodsRequest) SetImageDetail(v string) *CreateIpGoodsRequest {
	s.ImageDetail = &v
	return s
}

func (s *CreateIpGoodsRequest) SetDescription(v string) *CreateIpGoodsRequest {
	s.Description = &v
	return s
}

func (s *CreateIpGoodsRequest) SetDockingPeopleInfo(v []*DockingPeopleInfo) *CreateIpGoodsRequest {
	s.DockingPeopleInfo = v
	return s
}

func (s *CreateIpGoodsRequest) SetCopyRightType(v string) *CreateIpGoodsRequest {
	s.CopyRightType = &v
	return s
}

func (s *CreateIpGoodsRequest) SetCopyRight(v string) *CreateIpGoodsRequest {
	s.CopyRight = &v
	return s
}

func (s *CreateIpGoodsRequest) SetCooperationNote(v string) *CreateIpGoodsRequest {
	s.CooperationNote = &v
	return s
}

func (s *CreateIpGoodsRequest) SetChannelName(v string) *CreateIpGoodsRequest {
	s.ChannelName = &v
	return s
}

func (s *CreateIpGoodsRequest) SetCooperationCase(v string) *CreateIpGoodsRequest {
	s.CooperationCase = &v
	return s
}

func (s *CreateIpGoodsRequest) SetIpCreateTime(v int64) *CreateIpGoodsRequest {
	s.IpCreateTime = &v
	return s
}

func (s *CreateIpGoodsRequest) SetFutureMilestones(v string) *CreateIpGoodsRequest {
	s.FutureMilestones = &v
	return s
}

func (s *CreateIpGoodsRequest) SetPromotionChannels(v string) *CreateIpGoodsRequest {
	s.PromotionChannels = &v
	return s
}

func (s *CreateIpGoodsRequest) SetIpOtherName(v string) *CreateIpGoodsRequest {
	s.IpOtherName = &v
	return s
}

func (s *CreateIpGoodsRequest) SetMemo(v string) *CreateIpGoodsRequest {
	s.Memo = &v
	return s
}

func (s *CreateIpGoodsRequest) SetCopyRightBeginTime(v int64) *CreateIpGoodsRequest {
	s.CopyRightBeginTime = &v
	return s
}

func (s *CreateIpGoodsRequest) SetCopyRightEndTime(v int64) *CreateIpGoodsRequest {
	s.CopyRightEndTime = &v
	return s
}

func (s *CreateIpGoodsRequest) SetIpGalleryUrl(v string) *CreateIpGoodsRequest {
	s.IpGalleryUrl = &v
	return s
}

func (s *CreateIpGoodsRequest) SetAuthorizationInfo(v *IPAuthorizationInfo) *CreateIpGoodsRequest {
	s.AuthorizationInfo = v
	return s
}

func (s *CreateIpGoodsRequest) SetAllowDownload(v bool) *CreateIpGoodsRequest {
	s.AllowDownload = &v
	return s
}

type CreateIpGoodsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ip的链上id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty"`
}

func (s CreateIpGoodsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIpGoodsResponse) GoString() string {
	return s.String()
}

func (s *CreateIpGoodsResponse) SetReqMsgId(v string) *CreateIpGoodsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateIpGoodsResponse) SetResultCode(v string) *CreateIpGoodsResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateIpGoodsResponse) SetResultMsg(v string) *CreateIpGoodsResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateIpGoodsResponse) SetIpId(v string) *CreateIpGoodsResponse {
	s.IpId = &v
	return s
}

type AddIpChannelRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// ip的链上id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// 渠道信息
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 商品授权 0普通授权/1独家授权,本期只支持0
	AuthorizationModel *int64 `json:"authorization_model,omitempty" xml:"authorization_model,omitempty"`
	// 新授权模式，0普通授权，1独家授权，支持多选
	NewAuthorizationModel []*int64 `json:"new_authorization_model,omitempty" xml:"new_authorization_model,omitempty" type:"Repeated"`
	// 授权类型，衍生品授权；营销授权；商标授权；数字虚拟授权；其他
	AuthorizationType []*string `json:"authorization_type,omitempty" xml:"authorization_type,omitempty" type:"Repeated"`
	// 计费模式 0:按量 1:按金额
	PayMode *int64 `json:"pay_mode,omitempty" xml:"pay_mode,omitempty"`
	// ip等级  0:经典IP/1:流量IP/2:设计IP
	IpLevel *int64 `json:"ip_level,omitempty" xml:"ip_level,omitempty"`
	// 交易是否需要确认，默认需要确认
	TradeNeedConfirm *bool `json:"trade_need_confirm,omitempty" xml:"trade_need_confirm,omitempty"`
	// 保底金区间，0：0；1：10万以下；2:10-30万；3:30-50万；4:50万以上
	GuaranteeRange *int64 `json:"guarantee_range,omitempty" xml:"guarantee_range,omitempty"`
	// 交易模式
	IpTradeMode *IPTradeMode `json:"ip_trade_mode,omitempty" xml:"ip_trade_mode,omitempty"`
	// 授权行业
	AuthorizationIndustry []*string `json:"authorization_industry,omitempty" xml:"authorization_industry,omitempty" type:"Repeated"`
}

func (s AddIpChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s AddIpChannelRequest) GoString() string {
	return s.String()
}

func (s *AddIpChannelRequest) SetAuthToken(v string) *AddIpChannelRequest {
	s.AuthToken = &v
	return s
}

func (s *AddIpChannelRequest) SetProductInstanceId(v string) *AddIpChannelRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddIpChannelRequest) SetBaseRequest(v *BaseRequestInfo) *AddIpChannelRequest {
	s.BaseRequest = v
	return s
}

func (s *AddIpChannelRequest) SetIpId(v string) *AddIpChannelRequest {
	s.IpId = &v
	return s
}

func (s *AddIpChannelRequest) SetChannelName(v string) *AddIpChannelRequest {
	s.ChannelName = &v
	return s
}

func (s *AddIpChannelRequest) SetAuthorizationModel(v int64) *AddIpChannelRequest {
	s.AuthorizationModel = &v
	return s
}

func (s *AddIpChannelRequest) SetNewAuthorizationModel(v []*int64) *AddIpChannelRequest {
	s.NewAuthorizationModel = v
	return s
}

func (s *AddIpChannelRequest) SetAuthorizationType(v []*string) *AddIpChannelRequest {
	s.AuthorizationType = v
	return s
}

func (s *AddIpChannelRequest) SetPayMode(v int64) *AddIpChannelRequest {
	s.PayMode = &v
	return s
}

func (s *AddIpChannelRequest) SetIpLevel(v int64) *AddIpChannelRequest {
	s.IpLevel = &v
	return s
}

func (s *AddIpChannelRequest) SetTradeNeedConfirm(v bool) *AddIpChannelRequest {
	s.TradeNeedConfirm = &v
	return s
}

func (s *AddIpChannelRequest) SetGuaranteeRange(v int64) *AddIpChannelRequest {
	s.GuaranteeRange = &v
	return s
}

func (s *AddIpChannelRequest) SetIpTradeMode(v *IPTradeMode) *AddIpChannelRequest {
	s.IpTradeMode = v
	return s
}

func (s *AddIpChannelRequest) SetAuthorizationIndustry(v []*string) *AddIpChannelRequest {
	s.AuthorizationIndustry = v
	return s
}

type AddIpChannelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddIpChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s AddIpChannelResponse) GoString() string {
	return s.String()
}

func (s *AddIpChannelResponse) SetReqMsgId(v string) *AddIpChannelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddIpChannelResponse) SetResultCode(v string) *AddIpChannelResponse {
	s.ResultCode = &v
	return s
}

func (s *AddIpChannelResponse) SetResultMsg(v string) *AddIpChannelResponse {
	s.ResultMsg = &v
	return s
}

type QueryIpOrderinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
}

func (s QueryIpOrderinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpOrderinfoRequest) GoString() string {
	return s.String()
}

func (s *QueryIpOrderinfoRequest) SetAuthToken(v string) *QueryIpOrderinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpOrderinfoRequest) SetProductInstanceId(v string) *QueryIpOrderinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpOrderinfoRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpOrderinfoRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpOrderinfoRequest) SetIpOrderId(v string) *QueryIpOrderinfoRequest {
	s.IpOrderId = &v
	return s
}

type QueryIpOrderinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单信息
	IpOrder *IPOrder `json:"ip_order,omitempty" xml:"ip_order,omitempty"`
	// IP授权销售数据
	IpSalesInfoList []*IPSalesInfo `json:"ip_sales_info_list,omitempty" xml:"ip_sales_info_list,omitempty" type:"Repeated"`
}

func (s QueryIpOrderinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpOrderinfoResponse) GoString() string {
	return s.String()
}

func (s *QueryIpOrderinfoResponse) SetReqMsgId(v string) *QueryIpOrderinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpOrderinfoResponse) SetResultCode(v string) *QueryIpOrderinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpOrderinfoResponse) SetResultMsg(v string) *QueryIpOrderinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpOrderinfoResponse) SetIpOrder(v *IPOrder) *QueryIpOrderinfoResponse {
	s.IpOrder = v
	return s
}

func (s *QueryIpOrderinfoResponse) SetIpSalesInfoList(v []*IPSalesInfo) *QueryIpOrderinfoResponse {
	s.IpSalesInfoList = v
	return s
}

type BatchqueryIpGoodsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础信息
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 商品id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty"`
	// ip名称，支持模糊匹配
	IpName *string `json:"ip_name,omitempty" xml:"ip_name,omitempty"`
	// 商品状态（0:待上架，1:上架，2:下架）
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// ip的上架渠道
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 分页索引
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// ip商品归属方的链上id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// Ip类型
	IpType *string `json:"ip_type,omitempty" xml:"ip_type,omitempty"`
	// 受众人群
	AudienceGroup *string `json:"audience_group,omitempty" xml:"audience_group,omitempty"`
	// 上架日期开始时间
	CreateBeginTime *string `json:"create_begin_time,omitempty" xml:"create_begin_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 创建的结束日期
	CreateEndTime *string `json:"create_end_time,omitempty" xml:"create_end_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 是否需要按照创建时间倒序排序
	IsCreateTimeSortDesc *bool `json:"is_create_time_sort_desc,omitempty" xml:"is_create_time_sort_desc,omitempty" require:"true"`
	// 是否需要按照pv排序（0:不需要，1:正序，2:倒序），默认按照pv倒序
	IsSortByPv *int64 `json:"is_sort_by_pv,omitempty" xml:"is_sort_by_pv,omitempty"`
	// 是否需要按照最近上下架时间排序（0:不需要，1:正序，2:倒序），默认按照倒序
	IsSortByStatusChange *int64 `json:"is_sort_by_status_change,omitempty" xml:"is_sort_by_status_change,omitempty"`
	// 是否需要返回创建渠道，为空默认不返回
	QueryCreaterChannel *bool `json:"query_creater_channel,omitempty" xml:"query_creater_channel,omitempty"`
	// 保底金区间，0：0；1：10万以下；2:10-30万；3:30-50万；4:50万以上
	GuaranteeRange *int64 `json:"guarantee_range,omitempty" xml:"guarantee_range,omitempty"`
}

func (s BatchqueryIpGoodsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpGoodsRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryIpGoodsRequest) SetAuthToken(v string) *BatchqueryIpGoodsRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetProductInstanceId(v string) *BatchqueryIpGoodsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetBaseRequest(v *BaseRequestInfo) *BatchqueryIpGoodsRequest {
	s.BaseRequest = v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetIpId(v string) *BatchqueryIpGoodsRequest {
	s.IpId = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetIpName(v string) *BatchqueryIpGoodsRequest {
	s.IpName = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetStatus(v int64) *BatchqueryIpGoodsRequest {
	s.Status = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetChannelName(v string) *BatchqueryIpGoodsRequest {
	s.ChannelName = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetPageSize(v int64) *BatchqueryIpGoodsRequest {
	s.PageSize = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetPageIndex(v int64) *BatchqueryIpGoodsRequest {
	s.PageIndex = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetAccountId(v string) *BatchqueryIpGoodsRequest {
	s.AccountId = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetIpType(v string) *BatchqueryIpGoodsRequest {
	s.IpType = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetAudienceGroup(v string) *BatchqueryIpGoodsRequest {
	s.AudienceGroup = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetCreateBeginTime(v string) *BatchqueryIpGoodsRequest {
	s.CreateBeginTime = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetCreateEndTime(v string) *BatchqueryIpGoodsRequest {
	s.CreateEndTime = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetIsCreateTimeSortDesc(v bool) *BatchqueryIpGoodsRequest {
	s.IsCreateTimeSortDesc = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetIsSortByPv(v int64) *BatchqueryIpGoodsRequest {
	s.IsSortByPv = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetIsSortByStatusChange(v int64) *BatchqueryIpGoodsRequest {
	s.IsSortByStatusChange = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetQueryCreaterChannel(v bool) *BatchqueryIpGoodsRequest {
	s.QueryCreaterChannel = &v
	return s
}

func (s *BatchqueryIpGoodsRequest) SetGuaranteeRange(v int64) *BatchqueryIpGoodsRequest {
	s.GuaranteeRange = &v
	return s
}

type BatchqueryIpGoodsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ip重要信息
	IpList []*IpEmphasisInfo `json:"ip_list,omitempty" xml:"ip_list,omitempty" type:"Repeated"`
	// 结果总数，不是列表值，用于分页
	AllCount *int64 `json:"all_count,omitempty" xml:"all_count,omitempty"`
}

func (s BatchqueryIpGoodsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpGoodsResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryIpGoodsResponse) SetReqMsgId(v string) *BatchqueryIpGoodsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryIpGoodsResponse) SetResultCode(v string) *BatchqueryIpGoodsResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryIpGoodsResponse) SetResultMsg(v string) *BatchqueryIpGoodsResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryIpGoodsResponse) SetIpList(v []*IpEmphasisInfo) *BatchqueryIpGoodsResponse {
	s.IpList = v
	return s
}

func (s *BatchqueryIpGoodsResponse) SetAllCount(v int64) *BatchqueryIpGoodsResponse {
	s.AllCount = &v
	return s
}

type QueryIpGoodsdetailwithchannelRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础结构
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// ip的链上id
	IpIds []*string `json:"ip_ids,omitempty" xml:"ip_ids,omitempty" require:"true" type:"Repeated"`
	// 查询的渠道名字
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 是否要增加pv，默认不增加
	UpdatePv *bool `json:"update_pv,omitempty" xml:"update_pv,omitempty"`
}

func (s QueryIpGoodsdetailwithchannelRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpGoodsdetailwithchannelRequest) GoString() string {
	return s.String()
}

func (s *QueryIpGoodsdetailwithchannelRequest) SetAuthToken(v string) *QueryIpGoodsdetailwithchannelRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpGoodsdetailwithchannelRequest) SetProductInstanceId(v string) *QueryIpGoodsdetailwithchannelRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpGoodsdetailwithchannelRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpGoodsdetailwithchannelRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpGoodsdetailwithchannelRequest) SetIpIds(v []*string) *QueryIpGoodsdetailwithchannelRequest {
	s.IpIds = v
	return s
}

func (s *QueryIpGoodsdetailwithchannelRequest) SetChannelName(v string) *QueryIpGoodsdetailwithchannelRequest {
	s.ChannelName = &v
	return s
}

func (s *QueryIpGoodsdetailwithchannelRequest) SetUpdatePv(v bool) *QueryIpGoodsdetailwithchannelRequest {
	s.UpdatePv = &v
	return s
}

type QueryIpGoodsdetailwithchannelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ip的信息详情
	Ips []*IpBasicInfoWithChannelInfo `json:"ips,omitempty" xml:"ips,omitempty" type:"Repeated"`
}

func (s QueryIpGoodsdetailwithchannelResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpGoodsdetailwithchannelResponse) GoString() string {
	return s.String()
}

func (s *QueryIpGoodsdetailwithchannelResponse) SetReqMsgId(v string) *QueryIpGoodsdetailwithchannelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpGoodsdetailwithchannelResponse) SetResultCode(v string) *QueryIpGoodsdetailwithchannelResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpGoodsdetailwithchannelResponse) SetResultMsg(v string) *QueryIpGoodsdetailwithchannelResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpGoodsdetailwithchannelResponse) SetIps(v []*IpBasicInfoWithChannelInfo) *QueryIpGoodsdetailwithchannelResponse {
	s.Ips = v
	return s
}

type QueryIpDetailRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// ip的链上id列表
	IpIds []*string `json:"ip_ids,omitempty" xml:"ip_ids,omitempty" require:"true" type:"Repeated"`
	// 查找不到的ip是否报错，默认false，会报错
	SkipNotFoundIp *bool `json:"skip_not_found_ip,omitempty" xml:"skip_not_found_ip,omitempty"`
}

func (s QueryIpDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryIpDetailRequest) SetAuthToken(v string) *QueryIpDetailRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpDetailRequest) SetProductInstanceId(v string) *QueryIpDetailRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpDetailRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpDetailRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpDetailRequest) SetIpIds(v []*string) *QueryIpDetailRequest {
	s.IpIds = v
	return s
}

func (s *QueryIpDetailRequest) SetSkipNotFoundIp(v bool) *QueryIpDetailRequest {
	s.SkipNotFoundIp = &v
	return s
}

type QueryIpDetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ip的信息列表
	Ips []*IpBasicInfoWithChannelInfo `json:"ips,omitempty" xml:"ips,omitempty" type:"Repeated"`
}

func (s QueryIpDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryIpDetailResponse) SetReqMsgId(v string) *QueryIpDetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpDetailResponse) SetResultCode(v string) *QueryIpDetailResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpDetailResponse) SetResultMsg(v string) *QueryIpDetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpDetailResponse) SetIps(v []*IpBasicInfoWithChannelInfo) *QueryIpDetailResponse {
	s.Ips = v
	return s
}

type UpdateIpGoodsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// ip的名字
	IpName *string `json:"ip_name,omitempty" xml:"ip_name,omitempty" require:"true"`
	// ip类型，多个用;隔开
	IpType *string `json:"ip_type,omitempty" xml:"ip_type,omitempty" require:"true"`
	// 受众人群，多个用;隔开
	AudienceGroup *string `json:"audience_group,omitempty" xml:"audience_group,omitempty" require:"true"`
	// ip链上id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// ip主图,存放oss图片链接 多个用;隔开
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// 商品详情图  存放OSS图片链接 多个用;隔开
	ImageDetail *string `json:"image_detail,omitempty" xml:"image_detail,omitempty" require:"true"`
	// ip描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 对接人信息，json列表
	// [{
	// "name":"123", //联系人名字，必填
	// "mobilePhone":"123",// 联系人手机号,必填
	// "email":"456",// 联系人邮箱,选填
	// "dingDing":"999",// 联系人钉钉号,选填
	// "telePhone":"8888",// 联系人座机,选填
	// "position":"aaa"// 联系人职务,必填
	// }]
	DockingPeopleInfo []*DockingPeopleInfo `json:"docking_people_info,omitempty" xml:"docking_people_info,omitempty" require:"true" type:"Repeated"`
	// 资质证书类型，0为用户上传，1申请
	CopyRightType *string `json:"copy_right_type,omitempty" xml:"copy_right_type,omitempty"`
	// 资质
	CopyRight *string `json:"copy_right,omitempty" xml:"copy_right,omitempty"`
	// 合作事项
	CooperationNote *string `json:"cooperation_note,omitempty" xml:"cooperation_note,omitempty"`
	// 传入的渠道信息，不是更新项
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 合作案例，图片存放oss链接，多张用;隔开
	CooperationCase *string `json:"cooperation_case,omitempty" xml:"cooperation_case,omitempty"`
	// ip创建时间,毫秒时间戳
	IpCreateTime *int64 `json:"ip_create_time,omitempty" xml:"ip_create_time,omitempty"`
	// 未来大事件
	FutureMilestones *string `json:"future_milestones,omitempty" xml:"future_milestones,omitempty"`
	// 推广渠道
	PromotionChannels *string `json:"promotion_channels,omitempty" xml:"promotion_channels,omitempty"`
	// ip别名，多个通过;隔开
	IpOtherName *string `json:"ip_other_name,omitempty" xml:"ip_other_name,omitempty"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 资质生效时间 毫秒时间戳
	CopyRightBeginTime *int64 `json:"copy_right_begin_time,omitempty" xml:"copy_right_begin_time,omitempty" require:"true"`
	// 资质生效的结束时间
	CopyRightEndTime *int64 `json:"copy_right_end_time,omitempty" xml:"copy_right_end_time,omitempty" require:"true"`
	// 如果商品是审批通过状态，是否需要审批，默认false。该字段提供给运营使用，慎用！！！
	NeedApproval *bool `json:"need_approval,omitempty" xml:"need_approval,omitempty"`
	// 授权信息
	AuthorizationInfo *IPAuthorizationInfo `json:"authorization_info,omitempty" xml:"authorization_info,omitempty"`
}

func (s UpdateIpGoodsRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateIpGoodsRequest) GoString() string {
	return s.String()
}

func (s *UpdateIpGoodsRequest) SetAuthToken(v string) *UpdateIpGoodsRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetProductInstanceId(v string) *UpdateIpGoodsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetBaseRequest(v *BaseRequestInfo) *UpdateIpGoodsRequest {
	s.BaseRequest = v
	return s
}

func (s *UpdateIpGoodsRequest) SetIpName(v string) *UpdateIpGoodsRequest {
	s.IpName = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetIpType(v string) *UpdateIpGoodsRequest {
	s.IpType = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetAudienceGroup(v string) *UpdateIpGoodsRequest {
	s.AudienceGroup = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetIpId(v string) *UpdateIpGoodsRequest {
	s.IpId = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetImage(v string) *UpdateIpGoodsRequest {
	s.Image = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetImageDetail(v string) *UpdateIpGoodsRequest {
	s.ImageDetail = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetDescription(v string) *UpdateIpGoodsRequest {
	s.Description = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetDockingPeopleInfo(v []*DockingPeopleInfo) *UpdateIpGoodsRequest {
	s.DockingPeopleInfo = v
	return s
}

func (s *UpdateIpGoodsRequest) SetCopyRightType(v string) *UpdateIpGoodsRequest {
	s.CopyRightType = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetCopyRight(v string) *UpdateIpGoodsRequest {
	s.CopyRight = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetCooperationNote(v string) *UpdateIpGoodsRequest {
	s.CooperationNote = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetChannelName(v string) *UpdateIpGoodsRequest {
	s.ChannelName = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetCooperationCase(v string) *UpdateIpGoodsRequest {
	s.CooperationCase = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetIpCreateTime(v int64) *UpdateIpGoodsRequest {
	s.IpCreateTime = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetFutureMilestones(v string) *UpdateIpGoodsRequest {
	s.FutureMilestones = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetPromotionChannels(v string) *UpdateIpGoodsRequest {
	s.PromotionChannels = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetIpOtherName(v string) *UpdateIpGoodsRequest {
	s.IpOtherName = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetMemo(v string) *UpdateIpGoodsRequest {
	s.Memo = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetCopyRightBeginTime(v int64) *UpdateIpGoodsRequest {
	s.CopyRightBeginTime = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetCopyRightEndTime(v int64) *UpdateIpGoodsRequest {
	s.CopyRightEndTime = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetNeedApproval(v bool) *UpdateIpGoodsRequest {
	s.NeedApproval = &v
	return s
}

func (s *UpdateIpGoodsRequest) SetAuthorizationInfo(v *IPAuthorizationInfo) *UpdateIpGoodsRequest {
	s.AuthorizationInfo = v
	return s
}

type UpdateIpGoodsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateIpGoodsResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateIpGoodsResponse) GoString() string {
	return s.String()
}

func (s *UpdateIpGoodsResponse) SetReqMsgId(v string) *UpdateIpGoodsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateIpGoodsResponse) SetResultCode(v string) *UpdateIpGoodsResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateIpGoodsResponse) SetResultMsg(v string) *UpdateIpGoodsResponse {
	s.ResultMsg = &v
	return s
}

type UpdateIpChannelRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// ip的链上id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// 渠道信息
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 商品授权 0普通授权/1独家授权,本期只支持0
	AuthorizationModel *int64 `json:"authorization_model,omitempty" xml:"authorization_model,omitempty"`
	// 新授权模式，0普通授权，1独家授权，支持多选
	NewAuthorizationModel []*int64 `json:"new_authorization_model,omitempty" xml:"new_authorization_model,omitempty" type:"Repeated"`
	// 授权类型，衍生品授权；营销授权；商标授权；数字虚拟授权；其他
	AuthorizationType []*string `json:"authorization_type,omitempty" xml:"authorization_type,omitempty" type:"Repeated"`
	// 计费模式 0:按量 1:按金额
	PayMode *int64 `json:"pay_mode,omitempty" xml:"pay_mode,omitempty"`
	// ip等级  0:经典IP/1:流量IP/3:设计IP
	IpLevel *int64 `json:"ip_level,omitempty" xml:"ip_level,omitempty"`
	// 交易是否需要确认，为空则不更新
	TradeNeedConfirm *bool `json:"trade_need_confirm,omitempty" xml:"trade_need_confirm,omitempty"`
	// 保底金区间，0：0；1：10万以下；2:10-30万；3:30-50万；4:50万以上
	GuaranteeRange *int64 `json:"guarantee_range,omitempty" xml:"guarantee_range,omitempty"`
	// 交易模式
	IpTradeMode *IPTradeMode `json:"ip_trade_mode,omitempty" xml:"ip_trade_mode,omitempty"`
	// 授权行业
	AuthorizationIndustry []*string `json:"authorization_industry,omitempty" xml:"authorization_industry,omitempty" type:"Repeated"`
}

func (s UpdateIpChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateIpChannelRequest) GoString() string {
	return s.String()
}

func (s *UpdateIpChannelRequest) SetAuthToken(v string) *UpdateIpChannelRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateIpChannelRequest) SetProductInstanceId(v string) *UpdateIpChannelRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateIpChannelRequest) SetBaseRequest(v *BaseRequestInfo) *UpdateIpChannelRequest {
	s.BaseRequest = v
	return s
}

func (s *UpdateIpChannelRequest) SetIpId(v string) *UpdateIpChannelRequest {
	s.IpId = &v
	return s
}

func (s *UpdateIpChannelRequest) SetChannelName(v string) *UpdateIpChannelRequest {
	s.ChannelName = &v
	return s
}

func (s *UpdateIpChannelRequest) SetAuthorizationModel(v int64) *UpdateIpChannelRequest {
	s.AuthorizationModel = &v
	return s
}

func (s *UpdateIpChannelRequest) SetNewAuthorizationModel(v []*int64) *UpdateIpChannelRequest {
	s.NewAuthorizationModel = v
	return s
}

func (s *UpdateIpChannelRequest) SetAuthorizationType(v []*string) *UpdateIpChannelRequest {
	s.AuthorizationType = v
	return s
}

func (s *UpdateIpChannelRequest) SetPayMode(v int64) *UpdateIpChannelRequest {
	s.PayMode = &v
	return s
}

func (s *UpdateIpChannelRequest) SetIpLevel(v int64) *UpdateIpChannelRequest {
	s.IpLevel = &v
	return s
}

func (s *UpdateIpChannelRequest) SetTradeNeedConfirm(v bool) *UpdateIpChannelRequest {
	s.TradeNeedConfirm = &v
	return s
}

func (s *UpdateIpChannelRequest) SetGuaranteeRange(v int64) *UpdateIpChannelRequest {
	s.GuaranteeRange = &v
	return s
}

func (s *UpdateIpChannelRequest) SetIpTradeMode(v *IPTradeMode) *UpdateIpChannelRequest {
	s.IpTradeMode = v
	return s
}

func (s *UpdateIpChannelRequest) SetAuthorizationIndustry(v []*string) *UpdateIpChannelRequest {
	s.AuthorizationIndustry = v
	return s
}

type UpdateIpChannelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateIpChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateIpChannelResponse) GoString() string {
	return s.String()
}

func (s *UpdateIpChannelResponse) SetReqMsgId(v string) *UpdateIpChannelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateIpChannelResponse) SetResultCode(v string) *UpdateIpChannelResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateIpChannelResponse) SetResultMsg(v string) *UpdateIpChannelResponse {
	s.ResultMsg = &v
	return s
}

type OnlineIpRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// ip的链上id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// 渠道
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
}

func (s OnlineIpRequest) String() string {
	return tea.Prettify(s)
}

func (s OnlineIpRequest) GoString() string {
	return s.String()
}

func (s *OnlineIpRequest) SetAuthToken(v string) *OnlineIpRequest {
	s.AuthToken = &v
	return s
}

func (s *OnlineIpRequest) SetProductInstanceId(v string) *OnlineIpRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OnlineIpRequest) SetBaseRequest(v *BaseRequestInfo) *OnlineIpRequest {
	s.BaseRequest = v
	return s
}

func (s *OnlineIpRequest) SetIpId(v string) *OnlineIpRequest {
	s.IpId = &v
	return s
}

func (s *OnlineIpRequest) SetChannelName(v string) *OnlineIpRequest {
	s.ChannelName = &v
	return s
}

type OnlineIpResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s OnlineIpResponse) String() string {
	return tea.Prettify(s)
}

func (s OnlineIpResponse) GoString() string {
	return s.String()
}

func (s *OnlineIpResponse) SetReqMsgId(v string) *OnlineIpResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OnlineIpResponse) SetResultCode(v string) *OnlineIpResponse {
	s.ResultCode = &v
	return s
}

func (s *OnlineIpResponse) SetResultMsg(v string) *OnlineIpResponse {
	s.ResultMsg = &v
	return s
}

type OfflineIpRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ip基础信息
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// ip的链上id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// 渠道1
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
}

func (s OfflineIpRequest) String() string {
	return tea.Prettify(s)
}

func (s OfflineIpRequest) GoString() string {
	return s.String()
}

func (s *OfflineIpRequest) SetAuthToken(v string) *OfflineIpRequest {
	s.AuthToken = &v
	return s
}

func (s *OfflineIpRequest) SetProductInstanceId(v string) *OfflineIpRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OfflineIpRequest) SetBaseRequest(v *BaseRequestInfo) *OfflineIpRequest {
	s.BaseRequest = v
	return s
}

func (s *OfflineIpRequest) SetIpId(v string) *OfflineIpRequest {
	s.IpId = &v
	return s
}

func (s *OfflineIpRequest) SetChannelName(v string) *OfflineIpRequest {
	s.ChannelName = &v
	return s
}

type OfflineIpResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s OfflineIpResponse) String() string {
	return tea.Prettify(s)
}

func (s OfflineIpResponse) GoString() string {
	return s.String()
}

func (s *OfflineIpResponse) SetReqMsgId(v string) *OfflineIpResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OfflineIpResponse) SetResultCode(v string) *OfflineIpResponse {
	s.ResultCode = &v
	return s
}

func (s *OfflineIpResponse) SetResultMsg(v string) *OfflineIpResponse {
	s.ResultMsg = &v
	return s
}

type CreateIpAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 该用户的在外部系统的用户Id
	ExternalUserId *string `json:"external_user_id,omitempty" xml:"external_user_id,omitempty" require:"true"`
	// 该用户的在外部系统的用户名称
	ExternalUserName *string `json:"external_user_name,omitempty" xml:"external_user_name,omitempty" require:"true"`
	// 角色:  1:版权方 2: 版权采购商
	Role *int64 `json:"role,omitempty" xml:"role,omitempty" require:"true"`
	// 商户合作伙伴id，邀请商户入驻
	InviterId *string `json:"inviter_id,omitempty" xml:"inviter_id,omitempty"`
	// 商户合作伙伴返佣政策id
	PolicyId *string `json:"policy_id,omitempty" xml:"policy_id,omitempty"`
}

func (s CreateIpAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIpAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateIpAccountRequest) SetAuthToken(v string) *CreateIpAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateIpAccountRequest) SetProductInstanceId(v string) *CreateIpAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateIpAccountRequest) SetBaseRequest(v *BaseRequestInfo) *CreateIpAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *CreateIpAccountRequest) SetExternalUserId(v string) *CreateIpAccountRequest {
	s.ExternalUserId = &v
	return s
}

func (s *CreateIpAccountRequest) SetExternalUserName(v string) *CreateIpAccountRequest {
	s.ExternalUserName = &v
	return s
}

func (s *CreateIpAccountRequest) SetRole(v int64) *CreateIpAccountRequest {
	s.Role = &v
	return s
}

func (s *CreateIpAccountRequest) SetInviterId(v string) *CreateIpAccountRequest {
	s.InviterId = &v
	return s
}

func (s *CreateIpAccountRequest) SetPolicyId(v string) *CreateIpAccountRequest {
	s.PolicyId = &v
	return s
}

type CreateIpAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建成功后, 为该用户生成的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
}

func (s CreateIpAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIpAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateIpAccountResponse) SetReqMsgId(v string) *CreateIpAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateIpAccountResponse) SetResultCode(v string) *CreateIpAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateIpAccountResponse) SetResultMsg(v string) *CreateIpAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateIpAccountResponse) SetAccountId(v string) *CreateIpAccountResponse {
	s.AccountId = &v
	return s
}

type FreezeIpAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 用户的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
}

func (s FreezeIpAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s FreezeIpAccountRequest) GoString() string {
	return s.String()
}

func (s *FreezeIpAccountRequest) SetAuthToken(v string) *FreezeIpAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *FreezeIpAccountRequest) SetProductInstanceId(v string) *FreezeIpAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *FreezeIpAccountRequest) SetBaseRequest(v *BaseRequestInfo) *FreezeIpAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *FreezeIpAccountRequest) SetAccountId(v string) *FreezeIpAccountRequest {
	s.AccountId = &v
	return s
}

type FreezeIpAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s FreezeIpAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s FreezeIpAccountResponse) GoString() string {
	return s.String()
}

func (s *FreezeIpAccountResponse) SetReqMsgId(v string) *FreezeIpAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *FreezeIpAccountResponse) SetResultCode(v string) *FreezeIpAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *FreezeIpAccountResponse) SetResultMsg(v string) *FreezeIpAccountResponse {
	s.ResultMsg = &v
	return s
}

type UnfreezeIpAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 用户的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
}

func (s UnfreezeIpAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s UnfreezeIpAccountRequest) GoString() string {
	return s.String()
}

func (s *UnfreezeIpAccountRequest) SetAuthToken(v string) *UnfreezeIpAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *UnfreezeIpAccountRequest) SetProductInstanceId(v string) *UnfreezeIpAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UnfreezeIpAccountRequest) SetBaseRequest(v *BaseRequestInfo) *UnfreezeIpAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *UnfreezeIpAccountRequest) SetAccountId(v string) *UnfreezeIpAccountRequest {
	s.AccountId = &v
	return s
}

type UnfreezeIpAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UnfreezeIpAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s UnfreezeIpAccountResponse) GoString() string {
	return s.String()
}

func (s *UnfreezeIpAccountResponse) SetReqMsgId(v string) *UnfreezeIpAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UnfreezeIpAccountResponse) SetResultCode(v string) *UnfreezeIpAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *UnfreezeIpAccountResponse) SetResultMsg(v string) *UnfreezeIpAccountResponse {
	s.ResultMsg = &v
	return s
}

type QueryIpAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 用户的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
}

func (s QueryIpAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpAccountRequest) GoString() string {
	return s.String()
}

func (s *QueryIpAccountRequest) SetAuthToken(v string) *QueryIpAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpAccountRequest) SetProductInstanceId(v string) *QueryIpAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpAccountRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpAccountRequest) SetAccountId(v string) *QueryIpAccountRequest {
	s.AccountId = &v
	return s
}

type QueryIpAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 该用户的在外部系统的用户Id
	ExternalUserId *string `json:"external_user_id,omitempty" xml:"external_user_id,omitempty"`
	// 该用户的在外部系统的用户名称
	ExternalUserName *string `json:"external_user_name,omitempty" xml:"external_user_name,omitempty"`
	// 1:版权方 2: 版权采购商
	Role *int64 `json:"role,omitempty" xml:"role,omitempty"`
	// 用户状态(0:初始化, 1:申请流程中, 2:可用, 3:被冻结)
	// 买家: 链上账户注册成功即为可用状态。
	// 卖家: 链上账户注册成功为初始化状态, 申请期间涉及2层审核皆为审核流程中状态, 支付宝审核通过即为可用状态。
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s QueryIpAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpAccountResponse) GoString() string {
	return s.String()
}

func (s *QueryIpAccountResponse) SetReqMsgId(v string) *QueryIpAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpAccountResponse) SetResultCode(v string) *QueryIpAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpAccountResponse) SetResultMsg(v string) *QueryIpAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpAccountResponse) SetExternalUserId(v string) *QueryIpAccountResponse {
	s.ExternalUserId = &v
	return s
}

func (s *QueryIpAccountResponse) SetExternalUserName(v string) *QueryIpAccountResponse {
	s.ExternalUserName = &v
	return s
}

func (s *QueryIpAccountResponse) SetRole(v int64) *QueryIpAccountResponse {
	s.Role = &v
	return s
}

func (s *QueryIpAccountResponse) SetStatus(v int64) *QueryIpAccountResponse {
	s.Status = &v
	return s
}

type ApplyIpAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 版权方的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 支付宝的登陆用户名(必须实名制)
	AlipayLoginName *string `json:"alipay_login_name,omitempty" xml:"alipay_login_name,omitempty" require:"true"`
	// 商户别名, 会展示在账单以及支付结果页中
	MerchantAliasName *string `json:"merchant_alias_name,omitempty" xml:"merchant_alias_name,omitempty" require:"true"`
	// 商户类型(本期仅支持:  1:企业, 6:个人商户)
	MerchantType *int64 `json:"merchant_type,omitempty" xml:"merchant_type,omitempty" require:"true"`
	// 商户证件类型(本期仅支持: 201: 营业执照, 100: 个人商户身份证)
	// 如果merchant_type为企业, 需要传入201; 如果merchant_type为个人, 需要传入100
	MerchantCertType *int64 `json:"merchant_cert_type,omitempty" xml:"merchant_cert_type,omitempty" require:"true"`
	// 商户证件编号(企业提供营业执照),本期人工审核
	MerchantCertNumber *string `json:"merchant_cert_number,omitempty" xml:"merchant_cert_number,omitempty"`
	// 商户营业执照的图片地址,本期人工审核
	MerchantCertImage *string `json:"merchant_cert_image,omitempty" xml:"merchant_cert_image,omitempty"`
	// 税务登记证明的图片,本期人工审核
	MerchantSignImage *string `json:"merchant_sign_image,omitempty" xml:"merchant_sign_image,omitempty"`
	// 商户类别码mcc，参见https://gw.alipayobjects.com/os/bmw-prod/05c9a32e-42d1-436b-ace7-13101d91f672.xlsx
	Mcc *string `json:"mcc,omitempty" xml:"mcc,omitempty" require:"true"`
	// 商户法人名称, merchant_type = 01时必填
	LegalName *string `json:"legal_name,omitempty" xml:"legal_name,omitempty"`
	// 商户法人身份证号码, merchant_type = 1时必填
	LegalCertNo *string `json:"legal_cert_no,omitempty" xml:"legal_cert_no,omitempty"`
	// 商户法人证件类型，默认大陆身份证：CRED_PSN_CH_IDCARD
	LegalCertType *string `json:"legal_cert_type,omitempty" xml:"legal_cert_type,omitempty"`
	// 商户经营地址
	AddressInfo *IPAddressInfo `json:"address_info,omitempty" xml:"address_info,omitempty" require:"true"`
	// 商户联系人信息
	ContactInfo *IPContactInfo `json:"contact_info,omitempty" xml:"contact_info,omitempty" require:"true"`
	// 默认结算规则
	SettleRule *IPSettleRule `json:"settle_rule,omitempty" xml:"settle_rule,omitempty" require:"true"`
	// 银行卡结算信息, 结算到银行卡时必填, 当前仅支持填入一张卡
	CardInfo *IPCardInfo `json:"card_info,omitempty" xml:"card_info,omitempty"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s ApplyIpAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyIpAccountRequest) GoString() string {
	return s.String()
}

func (s *ApplyIpAccountRequest) SetAuthToken(v string) *ApplyIpAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyIpAccountRequest) SetProductInstanceId(v string) *ApplyIpAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyIpAccountRequest) SetBaseRequest(v *BaseRequestInfo) *ApplyIpAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *ApplyIpAccountRequest) SetAccountId(v string) *ApplyIpAccountRequest {
	s.AccountId = &v
	return s
}

func (s *ApplyIpAccountRequest) SetAlipayLoginName(v string) *ApplyIpAccountRequest {
	s.AlipayLoginName = &v
	return s
}

func (s *ApplyIpAccountRequest) SetMerchantAliasName(v string) *ApplyIpAccountRequest {
	s.MerchantAliasName = &v
	return s
}

func (s *ApplyIpAccountRequest) SetMerchantType(v int64) *ApplyIpAccountRequest {
	s.MerchantType = &v
	return s
}

func (s *ApplyIpAccountRequest) SetMerchantCertType(v int64) *ApplyIpAccountRequest {
	s.MerchantCertType = &v
	return s
}

func (s *ApplyIpAccountRequest) SetMerchantCertNumber(v string) *ApplyIpAccountRequest {
	s.MerchantCertNumber = &v
	return s
}

func (s *ApplyIpAccountRequest) SetMerchantCertImage(v string) *ApplyIpAccountRequest {
	s.MerchantCertImage = &v
	return s
}

func (s *ApplyIpAccountRequest) SetMerchantSignImage(v string) *ApplyIpAccountRequest {
	s.MerchantSignImage = &v
	return s
}

func (s *ApplyIpAccountRequest) SetMcc(v string) *ApplyIpAccountRequest {
	s.Mcc = &v
	return s
}

func (s *ApplyIpAccountRequest) SetLegalName(v string) *ApplyIpAccountRequest {
	s.LegalName = &v
	return s
}

func (s *ApplyIpAccountRequest) SetLegalCertNo(v string) *ApplyIpAccountRequest {
	s.LegalCertNo = &v
	return s
}

func (s *ApplyIpAccountRequest) SetLegalCertType(v string) *ApplyIpAccountRequest {
	s.LegalCertType = &v
	return s
}

func (s *ApplyIpAccountRequest) SetAddressInfo(v *IPAddressInfo) *ApplyIpAccountRequest {
	s.AddressInfo = v
	return s
}

func (s *ApplyIpAccountRequest) SetContactInfo(v *IPContactInfo) *ApplyIpAccountRequest {
	s.ContactInfo = v
	return s
}

func (s *ApplyIpAccountRequest) SetSettleRule(v *IPSettleRule) *ApplyIpAccountRequest {
	s.SettleRule = v
	return s
}

func (s *ApplyIpAccountRequest) SetCardInfo(v *IPCardInfo) *ApplyIpAccountRequest {
	s.CardInfo = v
	return s
}

func (s *ApplyIpAccountRequest) SetMemo(v string) *ApplyIpAccountRequest {
	s.Memo = &v
	return s
}

type ApplyIpAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ApplyIpAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyIpAccountResponse) GoString() string {
	return s.String()
}

func (s *ApplyIpAccountResponse) SetReqMsgId(v string) *ApplyIpAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyIpAccountResponse) SetResultCode(v string) *ApplyIpAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyIpAccountResponse) SetResultMsg(v string) *ApplyIpAccountResponse {
	s.ResultMsg = &v
	return s
}

type CheckIpAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 版权方的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
}

func (s CheckIpAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckIpAccountRequest) GoString() string {
	return s.String()
}

func (s *CheckIpAccountRequest) SetAuthToken(v string) *CheckIpAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckIpAccountRequest) SetProductInstanceId(v string) *CheckIpAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckIpAccountRequest) SetBaseRequest(v *BaseRequestInfo) *CheckIpAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *CheckIpAccountRequest) SetAccountId(v string) *CheckIpAccountRequest {
	s.AccountId = &v
	return s
}

type CheckIpAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 申请状态(0:运营审核中, 1:运营审核失败, 2:进件审核中, 3:进件审核失败, 4:进件审核成功)
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 运营审核失败原因
	RejectReason *string `json:"reject_reason,omitempty" xml:"reject_reason,omitempty"`
	// 是否需要支付宝签约(当为true,需要用户到支付宝进行签约) 签约引导说明: https://opendocs.alipay.com/open/00gfyb
	NeedSign *bool `json:"need_sign,omitempty" xml:"need_sign,omitempty"`
}

func (s CheckIpAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckIpAccountResponse) GoString() string {
	return s.String()
}

func (s *CheckIpAccountResponse) SetReqMsgId(v string) *CheckIpAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckIpAccountResponse) SetResultCode(v string) *CheckIpAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckIpAccountResponse) SetResultMsg(v string) *CheckIpAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckIpAccountResponse) SetStatus(v string) *CheckIpAccountResponse {
	s.Status = &v
	return s
}

func (s *CheckIpAccountResponse) SetRejectReason(v string) *CheckIpAccountResponse {
	s.RejectReason = &v
	return s
}

func (s *CheckIpAccountResponse) SetNeedSign(v bool) *CheckIpAccountResponse {
	s.NeedSign = &v
	return s
}

type ConfirmIpGoodsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础信息
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// ip id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// 是否审批通过
	IsApproval *bool `json:"is_approval,omitempty" xml:"is_approval,omitempty" require:"true"`
	// 审批意见
	ApprovalComments *string `json:"approval_comments,omitempty" xml:"approval_comments,omitempty" require:"true"`
}

func (s ConfirmIpGoodsRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpGoodsRequest) GoString() string {
	return s.String()
}

func (s *ConfirmIpGoodsRequest) SetAuthToken(v string) *ConfirmIpGoodsRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmIpGoodsRequest) SetProductInstanceId(v string) *ConfirmIpGoodsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmIpGoodsRequest) SetBaseRequest(v *BaseRequestInfo) *ConfirmIpGoodsRequest {
	s.BaseRequest = v
	return s
}

func (s *ConfirmIpGoodsRequest) SetIpId(v string) *ConfirmIpGoodsRequest {
	s.IpId = &v
	return s
}

func (s *ConfirmIpGoodsRequest) SetIsApproval(v bool) *ConfirmIpGoodsRequest {
	s.IsApproval = &v
	return s
}

func (s *ConfirmIpGoodsRequest) SetApprovalComments(v string) *ConfirmIpGoodsRequest {
	s.ApprovalComments = &v
	return s
}

type ConfirmIpGoodsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ConfirmIpGoodsResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpGoodsResponse) GoString() string {
	return s.String()
}

func (s *ConfirmIpGoodsResponse) SetReqMsgId(v string) *ConfirmIpGoodsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmIpGoodsResponse) SetResultCode(v string) *ConfirmIpGoodsResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmIpGoodsResponse) SetResultMsg(v string) *ConfirmIpGoodsResponse {
	s.ResultMsg = &v
	return s
}

type BatchqueryIpApprovalRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础信息
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// ip名称，支持模糊匹配
	IpName *string `json:"ip_name,omitempty" xml:"ip_name,omitempty"`
	// IP_id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty"`
	// ip审批状态 0待审批，1 审批通过，2 审批拒绝
	ApprovalStatus *int64 `json:"approval_status,omitempty" xml:"approval_status,omitempty"`
	// 分页
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 分页
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// ip类型
	IpType *string `json:"ip_type,omitempty" xml:"ip_type,omitempty"`
	// 受众人群
	AudienceGroup *string `json:"audience_group,omitempty" xml:"audience_group,omitempty"`
	// 创建时间段起始
	CreateBeginTime *string `json:"create_begin_time,omitempty" xml:"create_begin_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 创建时间段结束
	CreateEndTime *string `json:"create_end_time,omitempty" xml:"create_end_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 商品的链上租户id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 是否需要按照创建时间倒序排序
	IsCreateTimeSortDesc *bool `json:"is_create_time_sort_desc,omitempty" xml:"is_create_time_sort_desc,omitempty" require:"true"`
	// 渠道名称
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty"`
}

func (s BatchqueryIpApprovalRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpApprovalRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryIpApprovalRequest) SetAuthToken(v string) *BatchqueryIpApprovalRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryIpApprovalRequest) SetProductInstanceId(v string) *BatchqueryIpApprovalRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchqueryIpApprovalRequest) SetBaseRequest(v *BaseRequestInfo) *BatchqueryIpApprovalRequest {
	s.BaseRequest = v
	return s
}

func (s *BatchqueryIpApprovalRequest) SetIpName(v string) *BatchqueryIpApprovalRequest {
	s.IpName = &v
	return s
}

func (s *BatchqueryIpApprovalRequest) SetIpId(v string) *BatchqueryIpApprovalRequest {
	s.IpId = &v
	return s
}

func (s *BatchqueryIpApprovalRequest) SetApprovalStatus(v int64) *BatchqueryIpApprovalRequest {
	s.ApprovalStatus = &v
	return s
}

func (s *BatchqueryIpApprovalRequest) SetPageSize(v int64) *BatchqueryIpApprovalRequest {
	s.PageSize = &v
	return s
}

func (s *BatchqueryIpApprovalRequest) SetPageIndex(v int64) *BatchqueryIpApprovalRequest {
	s.PageIndex = &v
	return s
}

func (s *BatchqueryIpApprovalRequest) SetIpType(v string) *BatchqueryIpApprovalRequest {
	s.IpType = &v
	return s
}

func (s *BatchqueryIpApprovalRequest) SetAudienceGroup(v string) *BatchqueryIpApprovalRequest {
	s.AudienceGroup = &v
	return s
}

func (s *BatchqueryIpApprovalRequest) SetCreateBeginTime(v string) *BatchqueryIpApprovalRequest {
	s.CreateBeginTime = &v
	return s
}

func (s *BatchqueryIpApprovalRequest) SetCreateEndTime(v string) *BatchqueryIpApprovalRequest {
	s.CreateEndTime = &v
	return s
}

func (s *BatchqueryIpApprovalRequest) SetAccountId(v string) *BatchqueryIpApprovalRequest {
	s.AccountId = &v
	return s
}

func (s *BatchqueryIpApprovalRequest) SetIsCreateTimeSortDesc(v bool) *BatchqueryIpApprovalRequest {
	s.IsCreateTimeSortDesc = &v
	return s
}

func (s *BatchqueryIpApprovalRequest) SetChannelName(v string) *BatchqueryIpApprovalRequest {
	s.ChannelName = &v
	return s
}

type BatchqueryIpApprovalResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ip信息
	IpList []*IpBasicInfo `json:"ip_list,omitempty" xml:"ip_list,omitempty" type:"Repeated"`
	// 结果总数，不是列表值，用于分页
	AllCount *int64 `json:"all_count,omitempty" xml:"all_count,omitempty"`
}

func (s BatchqueryIpApprovalResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpApprovalResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryIpApprovalResponse) SetReqMsgId(v string) *BatchqueryIpApprovalResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryIpApprovalResponse) SetResultCode(v string) *BatchqueryIpApprovalResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryIpApprovalResponse) SetResultMsg(v string) *BatchqueryIpApprovalResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryIpApprovalResponse) SetIpList(v []*IpBasicInfo) *BatchqueryIpApprovalResponse {
	s.IpList = v
	return s
}

func (s *BatchqueryIpApprovalResponse) SetAllCount(v int64) *BatchqueryIpApprovalResponse {
	s.AllCount = &v
	return s
}

type ConfirmIpAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 版权方的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
}

func (s ConfirmIpAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpAccountRequest) GoString() string {
	return s.String()
}

func (s *ConfirmIpAccountRequest) SetAuthToken(v string) *ConfirmIpAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmIpAccountRequest) SetProductInstanceId(v string) *ConfirmIpAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmIpAccountRequest) SetBaseRequest(v *BaseRequestInfo) *ConfirmIpAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *ConfirmIpAccountRequest) SetAccountId(v string) *ConfirmIpAccountRequest {
	s.AccountId = &v
	return s
}

type ConfirmIpAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ConfirmIpAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpAccountResponse) GoString() string {
	return s.String()
}

func (s *ConfirmIpAccountResponse) SetReqMsgId(v string) *ConfirmIpAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmIpAccountResponse) SetResultCode(v string) *ConfirmIpAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmIpAccountResponse) SetResultMsg(v string) *ConfirmIpAccountResponse {
	s.ResultMsg = &v
	return s
}

type RefuseIpAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 版权方的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 拒绝原因
	RejectReason *string `json:"reject_reason,omitempty" xml:"reject_reason,omitempty" require:"true"`
}

func (s RefuseIpAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s RefuseIpAccountRequest) GoString() string {
	return s.String()
}

func (s *RefuseIpAccountRequest) SetAuthToken(v string) *RefuseIpAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *RefuseIpAccountRequest) SetProductInstanceId(v string) *RefuseIpAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RefuseIpAccountRequest) SetBaseRequest(v *BaseRequestInfo) *RefuseIpAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *RefuseIpAccountRequest) SetAccountId(v string) *RefuseIpAccountRequest {
	s.AccountId = &v
	return s
}

func (s *RefuseIpAccountRequest) SetRejectReason(v string) *RefuseIpAccountRequest {
	s.RejectReason = &v
	return s
}

type RefuseIpAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RefuseIpAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s RefuseIpAccountResponse) GoString() string {
	return s.String()
}

func (s *RefuseIpAccountResponse) SetReqMsgId(v string) *RefuseIpAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RefuseIpAccountResponse) SetResultCode(v string) *RefuseIpAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *RefuseIpAccountResponse) SetResultMsg(v string) *RefuseIpAccountResponse {
	s.ResultMsg = &v
	return s
}

type PullIpAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 版权方的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
}

func (s PullIpAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s PullIpAccountRequest) GoString() string {
	return s.String()
}

func (s *PullIpAccountRequest) SetAuthToken(v string) *PullIpAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *PullIpAccountRequest) SetProductInstanceId(v string) *PullIpAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PullIpAccountRequest) SetBaseRequest(v *BaseRequestInfo) *PullIpAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *PullIpAccountRequest) SetAccountId(v string) *PullIpAccountRequest {
	s.AccountId = &v
	return s
}

type PullIpAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 支付宝的登陆用户名(必须实名制)
	AlipayLoginName *string `json:"alipay_login_name,omitempty" xml:"alipay_login_name,omitempty"`
	// 商户别名, 会展示在账单以及支付结果页中
	MerchantAliasName *string `json:"merchant_alias_name,omitempty" xml:"merchant_alias_name,omitempty"`
	// 商户类型(本期仅支持: 1:企业, 6:个人商户)
	MerchantType *int64 `json:"merchant_type,omitempty" xml:"merchant_type,omitempty"`
	// 商户证件类型(本期仅支持: 201: 营业执照, 100: 个人商户身份证) 如果merchant_type为企业, 需要传入201; 如果merchant_type为个人, 需要传入100
	MerchantCertType *int64 `json:"merchant_cert_type,omitempty" xml:"merchant_cert_type,omitempty"`
	// 商户证件编号(企业提供营业执照),本期人工审核
	MerchantCertNumber *string `json:"merchant_cert_number,omitempty" xml:"merchant_cert_number,omitempty"`
	// 商户营业执照的图片地址,本期人工审核
	MerchantCertImage *string `json:"merchant_cert_image,omitempty" xml:"merchant_cert_image,omitempty"`
	// 税务登记证明的图片,本期人工审核
	MerchantSignImage *string `json:"merchant_sign_image,omitempty" xml:"merchant_sign_image,omitempty"`
	// 商户类别码mcc，参见https://gw.alipayobjects.com/os/bmw-prod/05c9a32e-42d1-436b-ace7-13101d91f672.xlsx
	Mcc *string `json:"mcc,omitempty" xml:"mcc,omitempty"`
	// 商户法人名称, merchant_type = 01时必填
	LegalName *string `json:"legal_name,omitempty" xml:"legal_name,omitempty"`
	// 商户法人身份证号码, merchant_type = 1时必填
	LegalCertNo *string `json:"legal_cert_no,omitempty" xml:"legal_cert_no,omitempty"`
	// 商户经营地址
	AddressInfo *IPAddressInfo `json:"address_info,omitempty" xml:"address_info,omitempty"`
	// 默认结算规则
	SettleRule *IPSettleRule `json:"settle_rule,omitempty" xml:"settle_rule,omitempty"`
	// 商户联系人信息
	ContactInfo *IPContactInfo `json:"contact_info,omitempty" xml:"contact_info,omitempty"`
	// 银行卡结算信息, 结算到银行卡时必填, 当前仅支持填入一张卡
	CardInfo *IPCardInfo `json:"card_info,omitempty" xml:"card_info,omitempty"`
	// 店铺名称
	ShopName *string `json:"shop_name,omitempty" xml:"shop_name,omitempty"`
	// 更多联系方式，用于运营联系商家
	AdditionalContactInfo []*SimpleContactInfo `json:"additional_contact_info,omitempty" xml:"additional_contact_info,omitempty" type:"Repeated"`
	// 创建账户时间
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
}

func (s PullIpAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s PullIpAccountResponse) GoString() string {
	return s.String()
}

func (s *PullIpAccountResponse) SetReqMsgId(v string) *PullIpAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PullIpAccountResponse) SetResultCode(v string) *PullIpAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *PullIpAccountResponse) SetResultMsg(v string) *PullIpAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *PullIpAccountResponse) SetAlipayLoginName(v string) *PullIpAccountResponse {
	s.AlipayLoginName = &v
	return s
}

func (s *PullIpAccountResponse) SetMerchantAliasName(v string) *PullIpAccountResponse {
	s.MerchantAliasName = &v
	return s
}

func (s *PullIpAccountResponse) SetMerchantType(v int64) *PullIpAccountResponse {
	s.MerchantType = &v
	return s
}

func (s *PullIpAccountResponse) SetMerchantCertType(v int64) *PullIpAccountResponse {
	s.MerchantCertType = &v
	return s
}

func (s *PullIpAccountResponse) SetMerchantCertNumber(v string) *PullIpAccountResponse {
	s.MerchantCertNumber = &v
	return s
}

func (s *PullIpAccountResponse) SetMerchantCertImage(v string) *PullIpAccountResponse {
	s.MerchantCertImage = &v
	return s
}

func (s *PullIpAccountResponse) SetMerchantSignImage(v string) *PullIpAccountResponse {
	s.MerchantSignImage = &v
	return s
}

func (s *PullIpAccountResponse) SetMcc(v string) *PullIpAccountResponse {
	s.Mcc = &v
	return s
}

func (s *PullIpAccountResponse) SetLegalName(v string) *PullIpAccountResponse {
	s.LegalName = &v
	return s
}

func (s *PullIpAccountResponse) SetLegalCertNo(v string) *PullIpAccountResponse {
	s.LegalCertNo = &v
	return s
}

func (s *PullIpAccountResponse) SetAddressInfo(v *IPAddressInfo) *PullIpAccountResponse {
	s.AddressInfo = v
	return s
}

func (s *PullIpAccountResponse) SetSettleRule(v *IPSettleRule) *PullIpAccountResponse {
	s.SettleRule = v
	return s
}

func (s *PullIpAccountResponse) SetContactInfo(v *IPContactInfo) *PullIpAccountResponse {
	s.ContactInfo = v
	return s
}

func (s *PullIpAccountResponse) SetCardInfo(v *IPCardInfo) *PullIpAccountResponse {
	s.CardInfo = v
	return s
}

func (s *PullIpAccountResponse) SetShopName(v string) *PullIpAccountResponse {
	s.ShopName = &v
	return s
}

func (s *PullIpAccountResponse) SetAdditionalContactInfo(v []*SimpleContactInfo) *PullIpAccountResponse {
	s.AdditionalContactInfo = v
	return s
}

func (s *PullIpAccountResponse) SetCreateTime(v int64) *PullIpAccountResponse {
	s.CreateTime = &v
	return s
}

type QueryIpMccRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s QueryIpMccRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpMccRequest) GoString() string {
	return s.String()
}

func (s *QueryIpMccRequest) SetAuthToken(v string) *QueryIpMccRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpMccRequest) SetProductInstanceId(v string) *QueryIpMccRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpMccRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpMccRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpMccRequest) SetMemo(v string) *QueryIpMccRequest {
	s.Memo = &v
	return s
}

type QueryIpMccResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// mcc类别列表
	MccList []*IPMCC `json:"mcc_list,omitempty" xml:"mcc_list,omitempty" type:"Repeated"`
}

func (s QueryIpMccResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpMccResponse) GoString() string {
	return s.String()
}

func (s *QueryIpMccResponse) SetReqMsgId(v string) *QueryIpMccResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpMccResponse) SetResultCode(v string) *QueryIpMccResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpMccResponse) SetResultMsg(v string) *QueryIpMccResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpMccResponse) SetMccList(v []*IPMCC) *QueryIpMccResponse {
	s.MccList = v
	return s
}

type QueryIpTypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s QueryIpTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpTypeRequest) GoString() string {
	return s.String()
}

func (s *QueryIpTypeRequest) SetAuthToken(v string) *QueryIpTypeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpTypeRequest) SetProductInstanceId(v string) *QueryIpTypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpTypeRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpTypeRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpTypeRequest) SetMemo(v string) *QueryIpTypeRequest {
	s.Memo = &v
	return s
}

type QueryIpTypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ip的type列表
	Type []*string `json:"type,omitempty" xml:"type,omitempty" type:"Repeated"`
	// ip的受众人群
	AudienceGroup []*string `json:"audience_group,omitempty" xml:"audience_group,omitempty" type:"Repeated"`
}

func (s QueryIpTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpTypeResponse) GoString() string {
	return s.String()
}

func (s *QueryIpTypeResponse) SetReqMsgId(v string) *QueryIpTypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpTypeResponse) SetResultCode(v string) *QueryIpTypeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpTypeResponse) SetResultMsg(v string) *QueryIpTypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpTypeResponse) SetType(v []*string) *QueryIpTypeResponse {
	s.Type = v
	return s
}

func (s *QueryIpTypeResponse) SetAudienceGroup(v []*string) *QueryIpTypeResponse {
	s.AudienceGroup = v
	return s
}

type BatchqueryIpApprovalandchannelRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础信息
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// ip的名字
	IpName *string `json:"ip_name,omitempty" xml:"ip_name,omitempty"`
	// ip的id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty"`
	// 审批状态
	ApprovalStatus *int64 `json:"approval_status,omitempty" xml:"approval_status,omitempty"`
	// ip类型
	IpType *string `json:"ip_type,omitempty" xml:"ip_type,omitempty"`
	// 受众人群
	AudienceGroup *string `json:"audience_group,omitempty" xml:"audience_group,omitempty"`
	// 归属账户
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 版权方别名
	AccountExternalName *string `json:"account_external_name,omitempty" xml:"account_external_name,omitempty"`
	// 是否需要按照创建时间倒序排序
	//
	IsCreateTimeSortDesc *bool `json:"is_create_time_sort_desc,omitempty" xml:"is_create_time_sort_desc,omitempty" require:"true"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 分页索引
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// 开始时间
	CreateBeginTime *string `json:"create_begin_time,omitempty" xml:"create_begin_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 结束时间
	CreateEndTime *string `json:"create_end_time,omitempty" xml:"create_end_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 渠道名称
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty"`
	// 上架渠道，SelfEmployed为上架到自营的渠道，NONLINE为未上架任何渠道
	OnlineChannel *string `json:"online_channel,omitempty" xml:"online_channel,omitempty"`
}

func (s BatchqueryIpApprovalandchannelRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpApprovalandchannelRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryIpApprovalandchannelRequest) SetAuthToken(v string) *BatchqueryIpApprovalandchannelRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetProductInstanceId(v string) *BatchqueryIpApprovalandchannelRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetBaseRequest(v *BaseRequestInfo) *BatchqueryIpApprovalandchannelRequest {
	s.BaseRequest = v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetIpName(v string) *BatchqueryIpApprovalandchannelRequest {
	s.IpName = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetIpId(v string) *BatchqueryIpApprovalandchannelRequest {
	s.IpId = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetApprovalStatus(v int64) *BatchqueryIpApprovalandchannelRequest {
	s.ApprovalStatus = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetIpType(v string) *BatchqueryIpApprovalandchannelRequest {
	s.IpType = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetAudienceGroup(v string) *BatchqueryIpApprovalandchannelRequest {
	s.AudienceGroup = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetAccountId(v string) *BatchqueryIpApprovalandchannelRequest {
	s.AccountId = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetAccountExternalName(v string) *BatchqueryIpApprovalandchannelRequest {
	s.AccountExternalName = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetIsCreateTimeSortDesc(v bool) *BatchqueryIpApprovalandchannelRequest {
	s.IsCreateTimeSortDesc = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetPageSize(v int64) *BatchqueryIpApprovalandchannelRequest {
	s.PageSize = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetPageIndex(v int64) *BatchqueryIpApprovalandchannelRequest {
	s.PageIndex = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetCreateBeginTime(v string) *BatchqueryIpApprovalandchannelRequest {
	s.CreateBeginTime = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetCreateEndTime(v string) *BatchqueryIpApprovalandchannelRequest {
	s.CreateEndTime = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetChannelName(v string) *BatchqueryIpApprovalandchannelRequest {
	s.ChannelName = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelRequest) SetOnlineChannel(v string) *BatchqueryIpApprovalandchannelRequest {
	s.OnlineChannel = &v
	return s
}

type BatchqueryIpApprovalandchannelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ip信息
	IpList []*IpAllInfo `json:"ip_list,omitempty" xml:"ip_list,omitempty" type:"Repeated"`
	// 总数
	AllCount *int64 `json:"all_count,omitempty" xml:"all_count,omitempty"`
}

func (s BatchqueryIpApprovalandchannelResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpApprovalandchannelResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryIpApprovalandchannelResponse) SetReqMsgId(v string) *BatchqueryIpApprovalandchannelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelResponse) SetResultCode(v string) *BatchqueryIpApprovalandchannelResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelResponse) SetResultMsg(v string) *BatchqueryIpApprovalandchannelResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryIpApprovalandchannelResponse) SetIpList(v []*IpAllInfo) *BatchqueryIpApprovalandchannelResponse {
	s.IpList = v
	return s
}

func (s *BatchqueryIpApprovalandchannelResponse) SetAllCount(v int64) *BatchqueryIpApprovalandchannelResponse {
	s.AllCount = &v
	return s
}

type BatchqueryIpAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	//
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 账户Id列表(单次不能超过50个)
	AccountIds []*string `json:"account_ids,omitempty" xml:"account_ids,omitempty" require:"true" type:"Repeated"`
	// 渠道名称
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty"`
}

func (s BatchqueryIpAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpAccountRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryIpAccountRequest) SetAuthToken(v string) *BatchqueryIpAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryIpAccountRequest) SetProductInstanceId(v string) *BatchqueryIpAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchqueryIpAccountRequest) SetBaseRequest(v *BaseRequestInfo) *BatchqueryIpAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *BatchqueryIpAccountRequest) SetAccountIds(v []*string) *BatchqueryIpAccountRequest {
	s.AccountIds = v
	return s
}

func (s *BatchqueryIpAccountRequest) SetChannelName(v string) *BatchqueryIpAccountRequest {
	s.ChannelName = &v
	return s
}

type BatchqueryIpAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 批量查询商家信息
	ApplyInfos []*IPMerchantApplyInfo `json:"apply_infos,omitempty" xml:"apply_infos,omitempty" type:"Repeated"`
}

func (s BatchqueryIpAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpAccountResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryIpAccountResponse) SetReqMsgId(v string) *BatchqueryIpAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryIpAccountResponse) SetResultCode(v string) *BatchqueryIpAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryIpAccountResponse) SetResultMsg(v string) *BatchqueryIpAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryIpAccountResponse) SetApplyInfos(v []*IPMerchantApplyInfo) *BatchqueryIpAccountResponse {
	s.ApplyInfos = v
	return s
}

type BatchqueryIpSellerRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础信息
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 不同的平台标识
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 分页索引
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// 账户链上ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 1 版权方，2 商户
	Role *int64 `json:"role,omitempty" xml:"role,omitempty"`
	// 联系人名称
	ContactName *string `json:"contact_name,omitempty" xml:"contact_name,omitempty"`
	// 联系人电话
	ContactMobile *string `json:"contact_mobile,omitempty" xml:"contact_mobile,omitempty"`
	// 账户状态列表
	StatusList []*int64 `json:"status_list,omitempty" xml:"status_list,omitempty" type:"Repeated"`
	// 排序
	SortOrder *string `json:"sort_order,omitempty" xml:"sort_order,omitempty"`
	// 筛选更新时间范围，开始区间
	CreateStartTime *int64 `json:"create_start_time,omitempty" xml:"create_start_time,omitempty"`
	// 筛选更新时间范围，结束区间
	CreateEndTime *int64 `json:"create_end_time,omitempty" xml:"create_end_time,omitempty"`
	// 版权方的用户名称
	ExternalUserName *string `json:"external_user_name,omitempty" xml:"external_user_name,omitempty"`
}

func (s BatchqueryIpSellerRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpSellerRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryIpSellerRequest) SetAuthToken(v string) *BatchqueryIpSellerRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryIpSellerRequest) SetProductInstanceId(v string) *BatchqueryIpSellerRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchqueryIpSellerRequest) SetBaseRequest(v *BaseRequestInfo) *BatchqueryIpSellerRequest {
	s.BaseRequest = v
	return s
}

func (s *BatchqueryIpSellerRequest) SetChannelName(v string) *BatchqueryIpSellerRequest {
	s.ChannelName = &v
	return s
}

func (s *BatchqueryIpSellerRequest) SetPageSize(v int64) *BatchqueryIpSellerRequest {
	s.PageSize = &v
	return s
}

func (s *BatchqueryIpSellerRequest) SetPageIndex(v int64) *BatchqueryIpSellerRequest {
	s.PageIndex = &v
	return s
}

func (s *BatchqueryIpSellerRequest) SetAccountId(v string) *BatchqueryIpSellerRequest {
	s.AccountId = &v
	return s
}

func (s *BatchqueryIpSellerRequest) SetRole(v int64) *BatchqueryIpSellerRequest {
	s.Role = &v
	return s
}

func (s *BatchqueryIpSellerRequest) SetContactName(v string) *BatchqueryIpSellerRequest {
	s.ContactName = &v
	return s
}

func (s *BatchqueryIpSellerRequest) SetContactMobile(v string) *BatchqueryIpSellerRequest {
	s.ContactMobile = &v
	return s
}

func (s *BatchqueryIpSellerRequest) SetStatusList(v []*int64) *BatchqueryIpSellerRequest {
	s.StatusList = v
	return s
}

func (s *BatchqueryIpSellerRequest) SetSortOrder(v string) *BatchqueryIpSellerRequest {
	s.SortOrder = &v
	return s
}

func (s *BatchqueryIpSellerRequest) SetCreateStartTime(v int64) *BatchqueryIpSellerRequest {
	s.CreateStartTime = &v
	return s
}

func (s *BatchqueryIpSellerRequest) SetCreateEndTime(v int64) *BatchqueryIpSellerRequest {
	s.CreateEndTime = &v
	return s
}

func (s *BatchqueryIpSellerRequest) SetExternalUserName(v string) *BatchqueryIpSellerRequest {
	s.ExternalUserName = &v
	return s
}

type BatchqueryIpSellerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果总数，不是列表值，用于分页
	//
	AllCount *int64 `json:"all_count,omitempty" xml:"all_count,omitempty"`
	// 版权方申请列表
	ApplyList []*IPApplyInfo `json:"apply_list,omitempty" xml:"apply_list,omitempty" type:"Repeated"`
}

func (s BatchqueryIpSellerResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpSellerResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryIpSellerResponse) SetReqMsgId(v string) *BatchqueryIpSellerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryIpSellerResponse) SetResultCode(v string) *BatchqueryIpSellerResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryIpSellerResponse) SetResultMsg(v string) *BatchqueryIpSellerResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryIpSellerResponse) SetAllCount(v int64) *BatchqueryIpSellerResponse {
	s.AllCount = &v
	return s
}

func (s *BatchqueryIpSellerResponse) SetApplyList(v []*IPApplyInfo) *BatchqueryIpSellerResponse {
	s.ApplyList = v
	return s
}

type ApplyIpCodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// IP商家的链上账户ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 套餐交易/授权交易的订单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 申请数量
	Count *int64 `json:"count,omitempty" xml:"count,omitempty" require:"true"`
	// 占用预申请的起始编码--仅使用码池时有效
	StartIndex *int64 `json:"start_index,omitempty" xml:"start_index,omitempty"`
	// 占用预申请的截止编码--仅使用码池时有效
	EndIndex *int64 `json:"end_index,omitempty" xml:"end_index,omitempty"`
}

func (s ApplyIpCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyIpCodeRequest) GoString() string {
	return s.String()
}

func (s *ApplyIpCodeRequest) SetAuthToken(v string) *ApplyIpCodeRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyIpCodeRequest) SetProductInstanceId(v string) *ApplyIpCodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyIpCodeRequest) SetBaseRequest(v *BaseRequestInfo) *ApplyIpCodeRequest {
	s.BaseRequest = v
	return s
}

func (s *ApplyIpCodeRequest) SetAccountId(v string) *ApplyIpCodeRequest {
	s.AccountId = &v
	return s
}

func (s *ApplyIpCodeRequest) SetOrderId(v string) *ApplyIpCodeRequest {
	s.OrderId = &v
	return s
}

func (s *ApplyIpCodeRequest) SetCount(v int64) *ApplyIpCodeRequest {
	s.Count = &v
	return s
}

func (s *ApplyIpCodeRequest) SetStartIndex(v int64) *ApplyIpCodeRequest {
	s.StartIndex = &v
	return s
}

func (s *ApplyIpCodeRequest) SetEndIndex(v int64) *ApplyIpCodeRequest {
	s.EndIndex = &v
	return s
}

type ApplyIpCodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数字凭证的批次ID
	CodeBatchId *string `json:"code_batch_id,omitempty" xml:"code_batch_id,omitempty"`
	// 数字凭证左区间
	CodeBatchStart *int64 `json:"code_batch_start,omitempty" xml:"code_batch_start,omitempty"`
	// 数字凭证右区间
	CodeBatchEnd *int64 `json:"code_batch_end,omitempty" xml:"code_batch_end,omitempty"`
}

func (s ApplyIpCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyIpCodeResponse) GoString() string {
	return s.String()
}

func (s *ApplyIpCodeResponse) SetReqMsgId(v string) *ApplyIpCodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyIpCodeResponse) SetResultCode(v string) *ApplyIpCodeResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyIpCodeResponse) SetResultMsg(v string) *ApplyIpCodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyIpCodeResponse) SetCodeBatchId(v string) *ApplyIpCodeResponse {
	s.CodeBatchId = &v
	return s
}

func (s *ApplyIpCodeResponse) SetCodeBatchStart(v int64) *ApplyIpCodeResponse {
	s.CodeBatchStart = &v
	return s
}

func (s *ApplyIpCodeResponse) SetCodeBatchEnd(v int64) *ApplyIpCodeResponse {
	s.CodeBatchEnd = &v
	return s
}

type PagequeryIpCodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 数字凭证批次编码
	CodeBatchId *string `json:"code_batch_id,omitempty" xml:"code_batch_id,omitempty" require:"true"`
	// 分页参数:页码
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// 分页参数:每页条目数(请小于等于100)
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s PagequeryIpCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpCodeRequest) GoString() string {
	return s.String()
}

func (s *PagequeryIpCodeRequest) SetAuthToken(v string) *PagequeryIpCodeRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryIpCodeRequest) SetProductInstanceId(v string) *PagequeryIpCodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PagequeryIpCodeRequest) SetBaseRequest(v *BaseRequestInfo) *PagequeryIpCodeRequest {
	s.BaseRequest = v
	return s
}

func (s *PagequeryIpCodeRequest) SetCodeBatchId(v string) *PagequeryIpCodeRequest {
	s.CodeBatchId = &v
	return s
}

func (s *PagequeryIpCodeRequest) SetPageIndex(v int64) *PagequeryIpCodeRequest {
	s.PageIndex = &v
	return s
}

func (s *PagequeryIpCodeRequest) SetPageSize(v int64) *PagequeryIpCodeRequest {
	s.PageSize = &v
	return s
}

type PagequeryIpCodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数字凭证列表(小程序扫描不可跳转的码)
	// 注意: 这个接口查到的码为原始编码, 小程序扫描无法跳转, IPMart不适用!!!
	CodeList []*string `json:"code_list,omitempty" xml:"code_list,omitempty" type:"Repeated"`
	// 展示码列表(和code_list一一对应)
	ShowCodeList []*string `json:"show_code_list,omitempty" xml:"show_code_list,omitempty" type:"Repeated"`
	// 交易订单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// IP商家的链上账户ID
	BuyerAccountId *string `json:"buyer_account_id,omitempty" xml:"buyer_account_id,omitempty"`
	// IP版权方的链上账户ID
	SellerAccountId *string `json:"seller_account_id,omitempty" xml:"seller_account_id,omitempty"`
	// IPID
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty"`
	// IP名称
	IpName *string `json:"ip_name,omitempty" xml:"ip_name,omitempty"`
	// IP主图的OSS地址
	IpImage *string `json:"ip_image,omitempty" xml:"ip_image,omitempty"`
	// IP描述
	IpDesc *string `json:"ip_desc,omitempty" xml:"ip_desc,omitempty"`
	// 该批次数字凭证的过期时间戳(毫秒)
	ExpiredDate *int64 `json:"expired_date,omitempty" xml:"expired_date,omitempty"`
	// 已经申请的总数量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s PagequeryIpCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpCodeResponse) GoString() string {
	return s.String()
}

func (s *PagequeryIpCodeResponse) SetReqMsgId(v string) *PagequeryIpCodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryIpCodeResponse) SetResultCode(v string) *PagequeryIpCodeResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryIpCodeResponse) SetResultMsg(v string) *PagequeryIpCodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryIpCodeResponse) SetCodeList(v []*string) *PagequeryIpCodeResponse {
	s.CodeList = v
	return s
}

func (s *PagequeryIpCodeResponse) SetShowCodeList(v []*string) *PagequeryIpCodeResponse {
	s.ShowCodeList = v
	return s
}

func (s *PagequeryIpCodeResponse) SetOrderId(v string) *PagequeryIpCodeResponse {
	s.OrderId = &v
	return s
}

func (s *PagequeryIpCodeResponse) SetBuyerAccountId(v string) *PagequeryIpCodeResponse {
	s.BuyerAccountId = &v
	return s
}

func (s *PagequeryIpCodeResponse) SetSellerAccountId(v string) *PagequeryIpCodeResponse {
	s.SellerAccountId = &v
	return s
}

func (s *PagequeryIpCodeResponse) SetIpId(v string) *PagequeryIpCodeResponse {
	s.IpId = &v
	return s
}

func (s *PagequeryIpCodeResponse) SetIpName(v string) *PagequeryIpCodeResponse {
	s.IpName = &v
	return s
}

func (s *PagequeryIpCodeResponse) SetIpImage(v string) *PagequeryIpCodeResponse {
	s.IpImage = &v
	return s
}

func (s *PagequeryIpCodeResponse) SetIpDesc(v string) *PagequeryIpCodeResponse {
	s.IpDesc = &v
	return s
}

func (s *PagequeryIpCodeResponse) SetExpiredDate(v int64) *PagequeryIpCodeResponse {
	s.ExpiredDate = &v
	return s
}

func (s *PagequeryIpCodeResponse) SetTotalCount(v int64) *PagequeryIpCodeResponse {
	s.TotalCount = &v
	return s
}

type CheckIpCodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 数字凭证的编码
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// 扫码用户的ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 扫码用户的名称
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
	// 扫码用户的手机号
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// 扫码用户的位置信息
	Gps *string `json:"gps,omitempty" xml:"gps,omitempty"`
	// 用户头像地址
	Avatar *string `json:"avatar,omitempty" xml:"avatar,omitempty" require:"true"`
}

func (s CheckIpCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckIpCodeRequest) GoString() string {
	return s.String()
}

func (s *CheckIpCodeRequest) SetAuthToken(v string) *CheckIpCodeRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckIpCodeRequest) SetProductInstanceId(v string) *CheckIpCodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckIpCodeRequest) SetBaseRequest(v *BaseRequestInfo) *CheckIpCodeRequest {
	s.BaseRequest = v
	return s
}

func (s *CheckIpCodeRequest) SetCode(v string) *CheckIpCodeRequest {
	s.Code = &v
	return s
}

func (s *CheckIpCodeRequest) SetUserId(v string) *CheckIpCodeRequest {
	s.UserId = &v
	return s
}

func (s *CheckIpCodeRequest) SetUserName(v string) *CheckIpCodeRequest {
	s.UserName = &v
	return s
}

func (s *CheckIpCodeRequest) SetPhoneNumber(v string) *CheckIpCodeRequest {
	s.PhoneNumber = &v
	return s
}

func (s *CheckIpCodeRequest) SetGps(v string) *CheckIpCodeRequest {
	s.Gps = &v
	return s
}

func (s *CheckIpCodeRequest) SetAvatar(v string) *CheckIpCodeRequest {
	s.Avatar = &v
	return s
}

type CheckIpCodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 被扫描的次数(包含本次)
	ScannedCount *int64 `json:"scanned_count,omitempty" xml:"scanned_count,omitempty"`
	// null，暂不使用该值//扫描历史列表(仅展示最近扫描的50次信息)
	ScannedList []*IPCodeScannedInfo `json:"scanned_list,omitempty" xml:"scanned_list,omitempty" type:"Repeated"`
	// 数字凭证的详情，始终不为空，如果类型中的user_name为空，则数字凭证未领取，如果不为空，则数字凭证已领取
	CodeDetail *IPCodeScannedInfo `json:"code_detail,omitempty" xml:"code_detail,omitempty"`
	// 首次扫码信息
	FirstScannedInfo *IPSimpleScannedInfo `json:"first_scanned_info,omitempty" xml:"first_scanned_info,omitempty"`
	// 扫码信息
	ScannedInfoList []*IPSimpleScannedInfo `json:"scanned_info_list,omitempty" xml:"scanned_info_list,omitempty" type:"Repeated"`
}

func (s CheckIpCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckIpCodeResponse) GoString() string {
	return s.String()
}

func (s *CheckIpCodeResponse) SetReqMsgId(v string) *CheckIpCodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckIpCodeResponse) SetResultCode(v string) *CheckIpCodeResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckIpCodeResponse) SetResultMsg(v string) *CheckIpCodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckIpCodeResponse) SetScannedCount(v int64) *CheckIpCodeResponse {
	s.ScannedCount = &v
	return s
}

func (s *CheckIpCodeResponse) SetScannedList(v []*IPCodeScannedInfo) *CheckIpCodeResponse {
	s.ScannedList = v
	return s
}

func (s *CheckIpCodeResponse) SetCodeDetail(v *IPCodeScannedInfo) *CheckIpCodeResponse {
	s.CodeDetail = v
	return s
}

func (s *CheckIpCodeResponse) SetFirstScannedInfo(v *IPSimpleScannedInfo) *CheckIpCodeResponse {
	s.FirstScannedInfo = v
	return s
}

func (s *CheckIpCodeResponse) SetScannedInfoList(v []*IPSimpleScannedInfo) *CheckIpCodeResponse {
	s.ScannedInfoList = v
	return s
}

type ConfirmIpUpdateapprovalRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// ip的id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// 是否审批通过
	IsApproval *bool `json:"is_approval,omitempty" xml:"is_approval,omitempty" require:"true"`
	// 审批信息
	ApprovalComments *string `json:"approval_comments,omitempty" xml:"approval_comments,omitempty"`
}

func (s ConfirmIpUpdateapprovalRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpUpdateapprovalRequest) GoString() string {
	return s.String()
}

func (s *ConfirmIpUpdateapprovalRequest) SetAuthToken(v string) *ConfirmIpUpdateapprovalRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmIpUpdateapprovalRequest) SetProductInstanceId(v string) *ConfirmIpUpdateapprovalRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmIpUpdateapprovalRequest) SetBaseRequest(v *BaseRequestInfo) *ConfirmIpUpdateapprovalRequest {
	s.BaseRequest = v
	return s
}

func (s *ConfirmIpUpdateapprovalRequest) SetIpId(v string) *ConfirmIpUpdateapprovalRequest {
	s.IpId = &v
	return s
}

func (s *ConfirmIpUpdateapprovalRequest) SetIsApproval(v bool) *ConfirmIpUpdateapprovalRequest {
	s.IsApproval = &v
	return s
}

func (s *ConfirmIpUpdateapprovalRequest) SetApprovalComments(v string) *ConfirmIpUpdateapprovalRequest {
	s.ApprovalComments = &v
	return s
}

type ConfirmIpUpdateapprovalResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ConfirmIpUpdateapprovalResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpUpdateapprovalResponse) GoString() string {
	return s.String()
}

func (s *ConfirmIpUpdateapprovalResponse) SetReqMsgId(v string) *ConfirmIpUpdateapprovalResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmIpUpdateapprovalResponse) SetResultCode(v string) *ConfirmIpUpdateapprovalResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmIpUpdateapprovalResponse) SetResultMsg(v string) *ConfirmIpUpdateapprovalResponse {
	s.ResultMsg = &v
	return s
}

type SetIpSkuRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// ip的id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// 渠道名字
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// sku数组
	Skus []*IpSkuEmphasisInfo `json:"skus,omitempty" xml:"skus,omitempty" require:"true" type:"Repeated"`
}

func (s SetIpSkuRequest) String() string {
	return tea.Prettify(s)
}

func (s SetIpSkuRequest) GoString() string {
	return s.String()
}

func (s *SetIpSkuRequest) SetAuthToken(v string) *SetIpSkuRequest {
	s.AuthToken = &v
	return s
}

func (s *SetIpSkuRequest) SetProductInstanceId(v string) *SetIpSkuRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetIpSkuRequest) SetBaseRequest(v *BaseRequestInfo) *SetIpSkuRequest {
	s.BaseRequest = v
	return s
}

func (s *SetIpSkuRequest) SetIpId(v string) *SetIpSkuRequest {
	s.IpId = &v
	return s
}

func (s *SetIpSkuRequest) SetChannelName(v string) *SetIpSkuRequest {
	s.ChannelName = &v
	return s
}

func (s *SetIpSkuRequest) SetSkus(v []*IpSkuEmphasisInfo) *SetIpSkuRequest {
	s.Skus = v
	return s
}

type SetIpSkuResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetIpSkuResponse) String() string {
	return tea.Prettify(s)
}

func (s SetIpSkuResponse) GoString() string {
	return s.String()
}

func (s *SetIpSkuResponse) SetReqMsgId(v string) *SetIpSkuResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetIpSkuResponse) SetResultCode(v string) *SetIpSkuResponse {
	s.ResultCode = &v
	return s
}

func (s *SetIpSkuResponse) SetResultMsg(v string) *SetIpSkuResponse {
	s.ResultMsg = &v
	return s
}

type QueryIpGoodsupdateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// ipid的列表，最多20个
	IpIds []*string `json:"ip_ids,omitempty" xml:"ip_ids,omitempty" type:"Repeated"`
	// 版权方账号id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
}

func (s QueryIpGoodsupdateRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpGoodsupdateRequest) GoString() string {
	return s.String()
}

func (s *QueryIpGoodsupdateRequest) SetAuthToken(v string) *QueryIpGoodsupdateRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpGoodsupdateRequest) SetProductInstanceId(v string) *QueryIpGoodsupdateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpGoodsupdateRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpGoodsupdateRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpGoodsupdateRequest) SetIpIds(v []*string) *QueryIpGoodsupdateRequest {
	s.IpIds = v
	return s
}

func (s *QueryIpGoodsupdateRequest) SetAccountId(v string) *QueryIpGoodsupdateRequest {
	s.AccountId = &v
	return s
}

type QueryIpGoodsupdateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ip的更新数据
	IpList []*IpBasicInfo `json:"ip_list,omitempty" xml:"ip_list,omitempty" type:"Repeated"`
}

func (s QueryIpGoodsupdateResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpGoodsupdateResponse) GoString() string {
	return s.String()
}

func (s *QueryIpGoodsupdateResponse) SetReqMsgId(v string) *QueryIpGoodsupdateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpGoodsupdateResponse) SetResultCode(v string) *QueryIpGoodsupdateResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpGoodsupdateResponse) SetResultMsg(v string) *QueryIpGoodsupdateResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpGoodsupdateResponse) SetIpList(v []*IpBasicInfo) *QueryIpGoodsupdateResponse {
	s.IpList = v
	return s
}

type PagequeryIpBillRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 账单状态，预留字段
	BillStatus *int64 `json:"bill_status,omitempty" xml:"bill_status,omitempty"`
	// 排序字段
	OrderBy *string `json:"order_by,omitempty" xml:"order_by,omitempty" require:"true"`
	// 排序顺序：正序还是倒序
	Order *string `json:"order,omitempty" xml:"order,omitempty" require:"true"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty" require:"true"`
	// 每页数据量大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s PagequeryIpBillRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpBillRequest) GoString() string {
	return s.String()
}

func (s *PagequeryIpBillRequest) SetAuthToken(v string) *PagequeryIpBillRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryIpBillRequest) SetProductInstanceId(v string) *PagequeryIpBillRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PagequeryIpBillRequest) SetBaseRequest(v *BaseRequestInfo) *PagequeryIpBillRequest {
	s.BaseRequest = v
	return s
}

func (s *PagequeryIpBillRequest) SetIpOrderId(v string) *PagequeryIpBillRequest {
	s.IpOrderId = &v
	return s
}

func (s *PagequeryIpBillRequest) SetBillStatus(v int64) *PagequeryIpBillRequest {
	s.BillStatus = &v
	return s
}

func (s *PagequeryIpBillRequest) SetOrderBy(v string) *PagequeryIpBillRequest {
	s.OrderBy = &v
	return s
}

func (s *PagequeryIpBillRequest) SetOrder(v string) *PagequeryIpBillRequest {
	s.Order = &v
	return s
}

func (s *PagequeryIpBillRequest) SetPageNumber(v int64) *PagequeryIpBillRequest {
	s.PageNumber = &v
	return s
}

func (s *PagequeryIpBillRequest) SetPageSize(v int64) *PagequeryIpBillRequest {
	s.PageSize = &v
	return s
}

type PagequeryIpBillResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 页面数据量大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 筛选条件下账单总数
	SelectBillCount *int64 `json:"select_bill_count,omitempty" xml:"select_bill_count,omitempty"`
	// 账单信息列表
	BillList []*IPBill `json:"bill_list,omitempty" xml:"bill_list,omitempty" type:"Repeated"`
}

func (s PagequeryIpBillResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpBillResponse) GoString() string {
	return s.String()
}

func (s *PagequeryIpBillResponse) SetReqMsgId(v string) *PagequeryIpBillResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryIpBillResponse) SetResultCode(v string) *PagequeryIpBillResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryIpBillResponse) SetResultMsg(v string) *PagequeryIpBillResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryIpBillResponse) SetPageNumber(v int64) *PagequeryIpBillResponse {
	s.PageNumber = &v
	return s
}

func (s *PagequeryIpBillResponse) SetPageSize(v int64) *PagequeryIpBillResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryIpBillResponse) SetSelectBillCount(v int64) *PagequeryIpBillResponse {
	s.SelectBillCount = &v
	return s
}

func (s *PagequeryIpBillResponse) SetBillList(v []*IPBill) *PagequeryIpBillResponse {
	s.BillList = v
	return s
}

type QueryIpSkuconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 渠道名称
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
}

func (s QueryIpSkuconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpSkuconfigRequest) GoString() string {
	return s.String()
}

func (s *QueryIpSkuconfigRequest) SetAuthToken(v string) *QueryIpSkuconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpSkuconfigRequest) SetProductInstanceId(v string) *QueryIpSkuconfigRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpSkuconfigRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpSkuconfigRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpSkuconfigRequest) SetChannelName(v string) *QueryIpSkuconfigRequest {
	s.ChannelName = &v
	return s
}

type QueryIpSkuconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// sku信息
	Skus []*IpSkuConfigWithLevel `json:"skus,omitempty" xml:"skus,omitempty" type:"Repeated"`
}

func (s QueryIpSkuconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpSkuconfigResponse) GoString() string {
	return s.String()
}

func (s *QueryIpSkuconfigResponse) SetReqMsgId(v string) *QueryIpSkuconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpSkuconfigResponse) SetResultCode(v string) *QueryIpSkuconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpSkuconfigResponse) SetResultMsg(v string) *QueryIpSkuconfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpSkuconfigResponse) SetSkus(v []*IpSkuConfigWithLevel) *QueryIpSkuconfigResponse {
	s.Skus = v
	return s
}

type ImportIpAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础入参
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 支付宝的登陆用户名(必须实名制)
	AlipayLoginName *string `json:"alipay_login_name,omitempty" xml:"alipay_login_name,omitempty" require:"true"`
	// 商户类型(本期仅支持: 1:企业, 6:个人商户)
	MerchantType *int64 `json:"merchant_type,omitempty" xml:"merchant_type,omitempty" require:"true"`
	// 商户别名, 会展示在账单以及支付结果页中
	MerchantAliasName *string `json:"merchant_alias_name,omitempty" xml:"merchant_alias_name,omitempty" require:"true"`
	// 商户法人名称, merchant_type = 1时必填
	LegalName *string `json:"legal_name,omitempty" xml:"legal_name,omitempty"`
	// 商户法人身份证号码, merchant_type = 1时必填
	LegalCertNo *string `json:"legal_cert_no,omitempty" xml:"legal_cert_no,omitempty"`
	// 结算目标账户(银行卡/支付宝)
	SettleTarget *string `json:"settle_target,omitempty" xml:"settle_target,omitempty" require:"true"`
}

func (s ImportIpAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportIpAccountRequest) GoString() string {
	return s.String()
}

func (s *ImportIpAccountRequest) SetAuthToken(v string) *ImportIpAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportIpAccountRequest) SetProductInstanceId(v string) *ImportIpAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ImportIpAccountRequest) SetBaseRequest(v *BaseRequestInfo) *ImportIpAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *ImportIpAccountRequest) SetAlipayLoginName(v string) *ImportIpAccountRequest {
	s.AlipayLoginName = &v
	return s
}

func (s *ImportIpAccountRequest) SetMerchantType(v int64) *ImportIpAccountRequest {
	s.MerchantType = &v
	return s
}

func (s *ImportIpAccountRequest) SetMerchantAliasName(v string) *ImportIpAccountRequest {
	s.MerchantAliasName = &v
	return s
}

func (s *ImportIpAccountRequest) SetLegalName(v string) *ImportIpAccountRequest {
	s.LegalName = &v
	return s
}

func (s *ImportIpAccountRequest) SetLegalCertNo(v string) *ImportIpAccountRequest {
	s.LegalCertNo = &v
	return s
}

func (s *ImportIpAccountRequest) SetSettleTarget(v string) *ImportIpAccountRequest {
	s.SettleTarget = &v
	return s
}

type ImportIpAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 导入后的新链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
}

func (s ImportIpAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportIpAccountResponse) GoString() string {
	return s.String()
}

func (s *ImportIpAccountResponse) SetReqMsgId(v string) *ImportIpAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportIpAccountResponse) SetResultCode(v string) *ImportIpAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportIpAccountResponse) SetResultMsg(v string) *ImportIpAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *ImportIpAccountResponse) SetAccountId(v string) *ImportIpAccountResponse {
	s.AccountId = &v
	return s
}

type RemoveIpSkuRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// IP id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// 渠道名称
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
}

func (s RemoveIpSkuRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpSkuRequest) GoString() string {
	return s.String()
}

func (s *RemoveIpSkuRequest) SetAuthToken(v string) *RemoveIpSkuRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveIpSkuRequest) SetProductInstanceId(v string) *RemoveIpSkuRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RemoveIpSkuRequest) SetBaseRequest(v *BaseRequestInfo) *RemoveIpSkuRequest {
	s.BaseRequest = v
	return s
}

func (s *RemoveIpSkuRequest) SetIpId(v string) *RemoveIpSkuRequest {
	s.IpId = &v
	return s
}

func (s *RemoveIpSkuRequest) SetChannelName(v string) *RemoveIpSkuRequest {
	s.ChannelName = &v
	return s
}

type RemoveIpSkuResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RemoveIpSkuResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpSkuResponse) GoString() string {
	return s.String()
}

func (s *RemoveIpSkuResponse) SetReqMsgId(v string) *RemoveIpSkuResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveIpSkuResponse) SetResultCode(v string) *RemoveIpSkuResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveIpSkuResponse) SetResultMsg(v string) *RemoveIpSkuResponse {
	s.ResultMsg = &v
	return s
}

type CreateIpSuperviseapproveRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 监修报审内容，业务相关字段自行组织成json，统一存储
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty" require:"true"`
}

func (s CreateIpSuperviseapproveRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIpSuperviseapproveRequest) GoString() string {
	return s.String()
}

func (s *CreateIpSuperviseapproveRequest) SetAuthToken(v string) *CreateIpSuperviseapproveRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateIpSuperviseapproveRequest) SetProductInstanceId(v string) *CreateIpSuperviseapproveRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateIpSuperviseapproveRequest) SetBaseRequest(v *BaseRequestInfo) *CreateIpSuperviseapproveRequest {
	s.BaseRequest = v
	return s
}

func (s *CreateIpSuperviseapproveRequest) SetOrderId(v string) *CreateIpSuperviseapproveRequest {
	s.OrderId = &v
	return s
}

func (s *CreateIpSuperviseapproveRequest) SetExtInfo(v string) *CreateIpSuperviseapproveRequest {
	s.ExtInfo = &v
	return s
}

type CreateIpSuperviseapproveResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateIpSuperviseapproveResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIpSuperviseapproveResponse) GoString() string {
	return s.String()
}

func (s *CreateIpSuperviseapproveResponse) SetReqMsgId(v string) *CreateIpSuperviseapproveResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateIpSuperviseapproveResponse) SetResultCode(v string) *CreateIpSuperviseapproveResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateIpSuperviseapproveResponse) SetResultMsg(v string) *CreateIpSuperviseapproveResponse {
	s.ResultMsg = &v
	return s
}

type ConfirmIpSuperviseapproveRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 监修报审关联的订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 当前期望的审批阶段（用于校验）
	Stage *int64 `json:"stage,omitempty" xml:"stage,omitempty" require:"true"`
	// 是否审批通过
	IsApproval *bool `json:"is_approval,omitempty" xml:"is_approval,omitempty" require:"true"`
	// 审批备注
	ApprovalComments *string `json:"approval_comments,omitempty" xml:"approval_comments,omitempty"`
	// 审批额外信息
	ApprovalExtInfo *string `json:"approval_ext_info,omitempty" xml:"approval_ext_info,omitempty"`
}

func (s ConfirmIpSuperviseapproveRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpSuperviseapproveRequest) GoString() string {
	return s.String()
}

func (s *ConfirmIpSuperviseapproveRequest) SetAuthToken(v string) *ConfirmIpSuperviseapproveRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmIpSuperviseapproveRequest) SetProductInstanceId(v string) *ConfirmIpSuperviseapproveRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmIpSuperviseapproveRequest) SetBaseRequest(v *BaseRequestInfo) *ConfirmIpSuperviseapproveRequest {
	s.BaseRequest = v
	return s
}

func (s *ConfirmIpSuperviseapproveRequest) SetOrderId(v string) *ConfirmIpSuperviseapproveRequest {
	s.OrderId = &v
	return s
}

func (s *ConfirmIpSuperviseapproveRequest) SetStage(v int64) *ConfirmIpSuperviseapproveRequest {
	s.Stage = &v
	return s
}

func (s *ConfirmIpSuperviseapproveRequest) SetIsApproval(v bool) *ConfirmIpSuperviseapproveRequest {
	s.IsApproval = &v
	return s
}

func (s *ConfirmIpSuperviseapproveRequest) SetApprovalComments(v string) *ConfirmIpSuperviseapproveRequest {
	s.ApprovalComments = &v
	return s
}

func (s *ConfirmIpSuperviseapproveRequest) SetApprovalExtInfo(v string) *ConfirmIpSuperviseapproveRequest {
	s.ApprovalExtInfo = &v
	return s
}

type ConfirmIpSuperviseapproveResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ConfirmIpSuperviseapproveResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpSuperviseapproveResponse) GoString() string {
	return s.String()
}

func (s *ConfirmIpSuperviseapproveResponse) SetReqMsgId(v string) *ConfirmIpSuperviseapproveResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmIpSuperviseapproveResponse) SetResultCode(v string) *ConfirmIpSuperviseapproveResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmIpSuperviseapproveResponse) SetResultMsg(v string) *ConfirmIpSuperviseapproveResponse {
	s.ResultMsg = &v
	return s
}

type PushIpSuperviseapproveRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 关联的订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 当前期望的阶段（用于校验，若是重新提交，则阶段值相等，若推进下一阶段，则阶段值+1）
	Stage *int64 `json:"stage,omitempty" xml:"stage,omitempty" require:"true"`
	// 监修报审的阶段具体内容，组织成json保存
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty" require:"true"`
}

func (s PushIpSuperviseapproveRequest) String() string {
	return tea.Prettify(s)
}

func (s PushIpSuperviseapproveRequest) GoString() string {
	return s.String()
}

func (s *PushIpSuperviseapproveRequest) SetAuthToken(v string) *PushIpSuperviseapproveRequest {
	s.AuthToken = &v
	return s
}

func (s *PushIpSuperviseapproveRequest) SetProductInstanceId(v string) *PushIpSuperviseapproveRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PushIpSuperviseapproveRequest) SetBaseRequest(v *BaseRequestInfo) *PushIpSuperviseapproveRequest {
	s.BaseRequest = v
	return s
}

func (s *PushIpSuperviseapproveRequest) SetOrderId(v string) *PushIpSuperviseapproveRequest {
	s.OrderId = &v
	return s
}

func (s *PushIpSuperviseapproveRequest) SetStage(v int64) *PushIpSuperviseapproveRequest {
	s.Stage = &v
	return s
}

func (s *PushIpSuperviseapproveRequest) SetExtInfo(v string) *PushIpSuperviseapproveRequest {
	s.ExtInfo = &v
	return s
}

type PushIpSuperviseapproveResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s PushIpSuperviseapproveResponse) String() string {
	return tea.Prettify(s)
}

func (s PushIpSuperviseapproveResponse) GoString() string {
	return s.String()
}

func (s *PushIpSuperviseapproveResponse) SetReqMsgId(v string) *PushIpSuperviseapproveResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PushIpSuperviseapproveResponse) SetResultCode(v string) *PushIpSuperviseapproveResponse {
	s.ResultCode = &v
	return s
}

func (s *PushIpSuperviseapproveResponse) SetResultMsg(v string) *PushIpSuperviseapproveResponse {
	s.ResultMsg = &v
	return s
}

type QueryIpSuperviseapproveRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 关联的订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
}

func (s QueryIpSuperviseapproveRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpSuperviseapproveRequest) GoString() string {
	return s.String()
}

func (s *QueryIpSuperviseapproveRequest) SetAuthToken(v string) *QueryIpSuperviseapproveRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpSuperviseapproveRequest) SetProductInstanceId(v string) *QueryIpSuperviseapproveRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpSuperviseapproveRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpSuperviseapproveRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpSuperviseapproveRequest) SetOrderId(v string) *QueryIpSuperviseapproveRequest {
	s.OrderId = &v
	return s
}

type QueryIpSuperviseapproveResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 监修报审最新阶段的详情
	SuperviseApprove *SuperviseApprove `json:"supervise_approve,omitempty" xml:"supervise_approve,omitempty"`
}

func (s QueryIpSuperviseapproveResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpSuperviseapproveResponse) GoString() string {
	return s.String()
}

func (s *QueryIpSuperviseapproveResponse) SetReqMsgId(v string) *QueryIpSuperviseapproveResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpSuperviseapproveResponse) SetResultCode(v string) *QueryIpSuperviseapproveResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpSuperviseapproveResponse) SetResultMsg(v string) *QueryIpSuperviseapproveResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpSuperviseapproveResponse) SetSuperviseApprove(v *SuperviseApprove) *QueryIpSuperviseapproveResponse {
	s.SuperviseApprove = v
	return s
}

type ReceiveIpCodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 数字凭证的编码
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// 领取用户的ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 领取用户的名称
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
	// 领取用户的手机号
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// 领取用户的位置信息
	Gps *string `json:"gps,omitempty" xml:"gps,omitempty"`
	// 用户头像地址
	Avatar *string `json:"avatar,omitempty" xml:"avatar,omitempty" require:"true"`
	// true 发起流转，false 正常领取，默认false
	FlowEn *bool `json:"flow_en,omitempty" xml:"flow_en,omitempty"`
	// 交易单ID（流转订单）、支付宝交易号、交易金额、流转交易平台、平台logo、原持有人ID 等信息，由调用方构造
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty"`
}

func (s ReceiveIpCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s ReceiveIpCodeRequest) GoString() string {
	return s.String()
}

func (s *ReceiveIpCodeRequest) SetAuthToken(v string) *ReceiveIpCodeRequest {
	s.AuthToken = &v
	return s
}

func (s *ReceiveIpCodeRequest) SetProductInstanceId(v string) *ReceiveIpCodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ReceiveIpCodeRequest) SetBaseRequest(v *BaseRequestInfo) *ReceiveIpCodeRequest {
	s.BaseRequest = v
	return s
}

func (s *ReceiveIpCodeRequest) SetCode(v string) *ReceiveIpCodeRequest {
	s.Code = &v
	return s
}

func (s *ReceiveIpCodeRequest) SetUserId(v string) *ReceiveIpCodeRequest {
	s.UserId = &v
	return s
}

func (s *ReceiveIpCodeRequest) SetUserName(v string) *ReceiveIpCodeRequest {
	s.UserName = &v
	return s
}

func (s *ReceiveIpCodeRequest) SetPhoneNumber(v string) *ReceiveIpCodeRequest {
	s.PhoneNumber = &v
	return s
}

func (s *ReceiveIpCodeRequest) SetGps(v string) *ReceiveIpCodeRequest {
	s.Gps = &v
	return s
}

func (s *ReceiveIpCodeRequest) SetAvatar(v string) *ReceiveIpCodeRequest {
	s.Avatar = &v
	return s
}

func (s *ReceiveIpCodeRequest) SetFlowEn(v bool) *ReceiveIpCodeRequest {
	s.FlowEn = &v
	return s
}

func (s *ReceiveIpCodeRequest) SetExtInfo(v string) *ReceiveIpCodeRequest {
	s.ExtInfo = &v
	return s
}

type ReceiveIpCodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ReceiveIpCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s ReceiveIpCodeResponse) GoString() string {
	return s.String()
}

func (s *ReceiveIpCodeResponse) SetReqMsgId(v string) *ReceiveIpCodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReceiveIpCodeResponse) SetResultCode(v string) *ReceiveIpCodeResponse {
	s.ResultCode = &v
	return s
}

func (s *ReceiveIpCodeResponse) SetResultMsg(v string) *ReceiveIpCodeResponse {
	s.ResultMsg = &v
	return s
}

type PagequeryIpCodeinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 用户ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty" require:"true"`
	// 每页数据量大小(请小于等于100)
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 0 扫描过的数字凭证，1 领取过的数字凭证
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s PagequeryIpCodeinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpCodeinfoRequest) GoString() string {
	return s.String()
}

func (s *PagequeryIpCodeinfoRequest) SetAuthToken(v string) *PagequeryIpCodeinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryIpCodeinfoRequest) SetProductInstanceId(v string) *PagequeryIpCodeinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PagequeryIpCodeinfoRequest) SetBaseRequest(v *BaseRequestInfo) *PagequeryIpCodeinfoRequest {
	s.BaseRequest = v
	return s
}

func (s *PagequeryIpCodeinfoRequest) SetUserId(v string) *PagequeryIpCodeinfoRequest {
	s.UserId = &v
	return s
}

func (s *PagequeryIpCodeinfoRequest) SetPageNumber(v int64) *PagequeryIpCodeinfoRequest {
	s.PageNumber = &v
	return s
}

func (s *PagequeryIpCodeinfoRequest) SetPageSize(v int64) *PagequeryIpCodeinfoRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryIpCodeinfoRequest) SetType(v int64) *PagequeryIpCodeinfoRequest {
	s.Type = &v
	return s
}

type PagequeryIpCodeinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 页面数据量大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 领取到的数字凭证总数
	CodeCount *int64 `json:"code_count,omitempty" xml:"code_count,omitempty"`
	// 数字凭证列表信息
	CodeList []*IPCodeScannedInfo `json:"code_list,omitempty" xml:"code_list,omitempty" type:"Repeated"`
}

func (s PagequeryIpCodeinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpCodeinfoResponse) GoString() string {
	return s.String()
}

func (s *PagequeryIpCodeinfoResponse) SetReqMsgId(v string) *PagequeryIpCodeinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryIpCodeinfoResponse) SetResultCode(v string) *PagequeryIpCodeinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryIpCodeinfoResponse) SetResultMsg(v string) *PagequeryIpCodeinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryIpCodeinfoResponse) SetPageNumber(v int64) *PagequeryIpCodeinfoResponse {
	s.PageNumber = &v
	return s
}

func (s *PagequeryIpCodeinfoResponse) SetPageSize(v int64) *PagequeryIpCodeinfoResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryIpCodeinfoResponse) SetCodeCount(v int64) *PagequeryIpCodeinfoResponse {
	s.CodeCount = &v
	return s
}

func (s *PagequeryIpCodeinfoResponse) SetCodeList(v []*IPCodeScannedInfo) *PagequeryIpCodeinfoResponse {
	s.CodeList = v
	return s
}

type CreateIpValueaddRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 创建增值服务的账户id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 服务名字
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty" require:"true"`
	// 商品主图，存放OSS图片链接,多张用;隔开
	Images *string `json:"images,omitempty" xml:"images,omitempty" require:"true"`
	// 商品详情图  存放OSS图片链接,多张用;隔开
	ImagesDetail *string `json:"images_detail,omitempty" xml:"images_detail,omitempty" require:"true"`
	// 商品描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 联系人
	DockingPeople []*DockingPeopleInfo `json:"docking_people,omitempty" xml:"docking_people,omitempty" require:"true" type:"Repeated"`
	// 资质证明
	CopyRight *string `json:"copy_right,omitempty" xml:"copy_right,omitempty"`
	// 备注
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s CreateIpValueaddRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIpValueaddRequest) GoString() string {
	return s.String()
}

func (s *CreateIpValueaddRequest) SetAuthToken(v string) *CreateIpValueaddRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateIpValueaddRequest) SetProductInstanceId(v string) *CreateIpValueaddRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateIpValueaddRequest) SetBaseRequest(v *BaseRequestInfo) *CreateIpValueaddRequest {
	s.BaseRequest = v
	return s
}

func (s *CreateIpValueaddRequest) SetAccountId(v string) *CreateIpValueaddRequest {
	s.AccountId = &v
	return s
}

func (s *CreateIpValueaddRequest) SetServiceName(v string) *CreateIpValueaddRequest {
	s.ServiceName = &v
	return s
}

func (s *CreateIpValueaddRequest) SetImages(v string) *CreateIpValueaddRequest {
	s.Images = &v
	return s
}

func (s *CreateIpValueaddRequest) SetImagesDetail(v string) *CreateIpValueaddRequest {
	s.ImagesDetail = &v
	return s
}

func (s *CreateIpValueaddRequest) SetDescription(v string) *CreateIpValueaddRequest {
	s.Description = &v
	return s
}

func (s *CreateIpValueaddRequest) SetDockingPeople(v []*DockingPeopleInfo) *CreateIpValueaddRequest {
	s.DockingPeople = v
	return s
}

func (s *CreateIpValueaddRequest) SetCopyRight(v string) *CreateIpValueaddRequest {
	s.CopyRight = &v
	return s
}

func (s *CreateIpValueaddRequest) SetMemo(v string) *CreateIpValueaddRequest {
	s.Memo = &v
	return s
}

type CreateIpValueaddResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 服务id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
}

func (s CreateIpValueaddResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIpValueaddResponse) GoString() string {
	return s.String()
}

func (s *CreateIpValueaddResponse) SetReqMsgId(v string) *CreateIpValueaddResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateIpValueaddResponse) SetResultCode(v string) *CreateIpValueaddResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateIpValueaddResponse) SetResultMsg(v string) *CreateIpValueaddResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateIpValueaddResponse) SetServiceId(v string) *CreateIpValueaddResponse {
	s.ServiceId = &v
	return s
}

type UpdateIpValueaddRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 服务id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
	// 增值服务名字
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty" require:"true"`
	// 主图。存放OSS图片链接,多张用;隔开
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// 商品详情图  存放OSS图片链接.多张用;隔开
	ImageDetail *string `json:"image_detail,omitempty" xml:"image_detail,omitempty" require:"true"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 联系人
	DockingPeople []*DockingPeopleInfo `json:"docking_people,omitempty" xml:"docking_people,omitempty" require:"true" type:"Repeated"`
	// 资质证明
	CopyRight *string `json:"copy_right,omitempty" xml:"copy_right,omitempty"`
	// 备注
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s UpdateIpValueaddRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateIpValueaddRequest) GoString() string {
	return s.String()
}

func (s *UpdateIpValueaddRequest) SetAuthToken(v string) *UpdateIpValueaddRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateIpValueaddRequest) SetProductInstanceId(v string) *UpdateIpValueaddRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateIpValueaddRequest) SetBaseRequest(v *BaseRequestInfo) *UpdateIpValueaddRequest {
	s.BaseRequest = v
	return s
}

func (s *UpdateIpValueaddRequest) SetServiceId(v string) *UpdateIpValueaddRequest {
	s.ServiceId = &v
	return s
}

func (s *UpdateIpValueaddRequest) SetServiceName(v string) *UpdateIpValueaddRequest {
	s.ServiceName = &v
	return s
}

func (s *UpdateIpValueaddRequest) SetImage(v string) *UpdateIpValueaddRequest {
	s.Image = &v
	return s
}

func (s *UpdateIpValueaddRequest) SetImageDetail(v string) *UpdateIpValueaddRequest {
	s.ImageDetail = &v
	return s
}

func (s *UpdateIpValueaddRequest) SetDescription(v string) *UpdateIpValueaddRequest {
	s.Description = &v
	return s
}

func (s *UpdateIpValueaddRequest) SetDockingPeople(v []*DockingPeopleInfo) *UpdateIpValueaddRequest {
	s.DockingPeople = v
	return s
}

func (s *UpdateIpValueaddRequest) SetCopyRight(v string) *UpdateIpValueaddRequest {
	s.CopyRight = &v
	return s
}

func (s *UpdateIpValueaddRequest) SetMemo(v string) *UpdateIpValueaddRequest {
	s.Memo = &v
	return s
}

type UpdateIpValueaddResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateIpValueaddResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateIpValueaddResponse) GoString() string {
	return s.String()
}

func (s *UpdateIpValueaddResponse) SetReqMsgId(v string) *UpdateIpValueaddResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateIpValueaddResponse) SetResultCode(v string) *UpdateIpValueaddResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateIpValueaddResponse) SetResultMsg(v string) *UpdateIpValueaddResponse {
	s.ResultMsg = &v
	return s
}

type SetIpValueaddskuRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 服务id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
	// sku
	Skus []*IpSkuEmphasisInfo `json:"skus,omitempty" xml:"skus,omitempty" require:"true" type:"Repeated"`
}

func (s SetIpValueaddskuRequest) String() string {
	return tea.Prettify(s)
}

func (s SetIpValueaddskuRequest) GoString() string {
	return s.String()
}

func (s *SetIpValueaddskuRequest) SetAuthToken(v string) *SetIpValueaddskuRequest {
	s.AuthToken = &v
	return s
}

func (s *SetIpValueaddskuRequest) SetProductInstanceId(v string) *SetIpValueaddskuRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetIpValueaddskuRequest) SetBaseRequest(v *BaseRequestInfo) *SetIpValueaddskuRequest {
	s.BaseRequest = v
	return s
}

func (s *SetIpValueaddskuRequest) SetServiceId(v string) *SetIpValueaddskuRequest {
	s.ServiceId = &v
	return s
}

func (s *SetIpValueaddskuRequest) SetSkus(v []*IpSkuEmphasisInfo) *SetIpValueaddskuRequest {
	s.Skus = v
	return s
}

type SetIpValueaddskuResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetIpValueaddskuResponse) String() string {
	return tea.Prettify(s)
}

func (s SetIpValueaddskuResponse) GoString() string {
	return s.String()
}

func (s *SetIpValueaddskuResponse) SetReqMsgId(v string) *SetIpValueaddskuResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetIpValueaddskuResponse) SetResultCode(v string) *SetIpValueaddskuResponse {
	s.ResultCode = &v
	return s
}

func (s *SetIpValueaddskuResponse) SetResultMsg(v string) *SetIpValueaddskuResponse {
	s.ResultMsg = &v
	return s
}

type OnlineIpValueaddRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 服务id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
	// 是否上线，否为下线
	IsOnline *bool `json:"is_online,omitempty" xml:"is_online,omitempty" require:"true"`
}

func (s OnlineIpValueaddRequest) String() string {
	return tea.Prettify(s)
}

func (s OnlineIpValueaddRequest) GoString() string {
	return s.String()
}

func (s *OnlineIpValueaddRequest) SetAuthToken(v string) *OnlineIpValueaddRequest {
	s.AuthToken = &v
	return s
}

func (s *OnlineIpValueaddRequest) SetProductInstanceId(v string) *OnlineIpValueaddRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OnlineIpValueaddRequest) SetBaseRequest(v *BaseRequestInfo) *OnlineIpValueaddRequest {
	s.BaseRequest = v
	return s
}

func (s *OnlineIpValueaddRequest) SetServiceId(v string) *OnlineIpValueaddRequest {
	s.ServiceId = &v
	return s
}

func (s *OnlineIpValueaddRequest) SetIsOnline(v bool) *OnlineIpValueaddRequest {
	s.IsOnline = &v
	return s
}

type OnlineIpValueaddResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s OnlineIpValueaddResponse) String() string {
	return tea.Prettify(s)
}

func (s OnlineIpValueaddResponse) GoString() string {
	return s.String()
}

func (s *OnlineIpValueaddResponse) SetReqMsgId(v string) *OnlineIpValueaddResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OnlineIpValueaddResponse) SetResultCode(v string) *OnlineIpValueaddResponse {
	s.ResultCode = &v
	return s
}

func (s *OnlineIpValueaddResponse) SetResultMsg(v string) *OnlineIpValueaddResponse {
	s.ResultMsg = &v
	return s
}

type QueryIpValueaddRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 查询服务id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
}

func (s QueryIpValueaddRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpValueaddRequest) GoString() string {
	return s.String()
}

func (s *QueryIpValueaddRequest) SetAuthToken(v string) *QueryIpValueaddRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpValueaddRequest) SetProductInstanceId(v string) *QueryIpValueaddRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpValueaddRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpValueaddRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpValueaddRequest) SetServiceId(v string) *QueryIpValueaddRequest {
	s.ServiceId = &v
	return s
}

type QueryIpValueaddResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 增值服务详情
	ValueAddedInfo *ValueAddedServiceInfoWithSku `json:"value_added_info,omitempty" xml:"value_added_info,omitempty"`
}

func (s QueryIpValueaddResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpValueaddResponse) GoString() string {
	return s.String()
}

func (s *QueryIpValueaddResponse) SetReqMsgId(v string) *QueryIpValueaddResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpValueaddResponse) SetResultCode(v string) *QueryIpValueaddResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpValueaddResponse) SetResultMsg(v string) *QueryIpValueaddResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpValueaddResponse) SetValueAddedInfo(v *ValueAddedServiceInfoWithSku) *QueryIpValueaddResponse {
	s.ValueAddedInfo = v
	return s
}

type PagequeryIpValueaddRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 归属账户id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 服务名字，模糊匹配
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty"`
	// 服务状态（0:待审核 1:审核拒绝 2:上线【审核通过】 3: 下线）
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 第几页
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// 每页长度
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 开始时间
	BeginCreateTime *string `json:"begin_create_time,omitempty" xml:"begin_create_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 结束时间
	EngCreateTime *string `json:"eng_create_time,omitempty" xml:"eng_create_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s PagequeryIpValueaddRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpValueaddRequest) GoString() string {
	return s.String()
}

func (s *PagequeryIpValueaddRequest) SetAuthToken(v string) *PagequeryIpValueaddRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryIpValueaddRequest) SetProductInstanceId(v string) *PagequeryIpValueaddRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PagequeryIpValueaddRequest) SetBaseRequest(v *BaseRequestInfo) *PagequeryIpValueaddRequest {
	s.BaseRequest = v
	return s
}

func (s *PagequeryIpValueaddRequest) SetAccountId(v string) *PagequeryIpValueaddRequest {
	s.AccountId = &v
	return s
}

func (s *PagequeryIpValueaddRequest) SetServiceName(v string) *PagequeryIpValueaddRequest {
	s.ServiceName = &v
	return s
}

func (s *PagequeryIpValueaddRequest) SetStatus(v int64) *PagequeryIpValueaddRequest {
	s.Status = &v
	return s
}

func (s *PagequeryIpValueaddRequest) SetPageIndex(v int64) *PagequeryIpValueaddRequest {
	s.PageIndex = &v
	return s
}

func (s *PagequeryIpValueaddRequest) SetPageSize(v int64) *PagequeryIpValueaddRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryIpValueaddRequest) SetBeginCreateTime(v string) *PagequeryIpValueaddRequest {
	s.BeginCreateTime = &v
	return s
}

func (s *PagequeryIpValueaddRequest) SetEngCreateTime(v string) *PagequeryIpValueaddRequest {
	s.EngCreateTime = &v
	return s
}

type PagequeryIpValueaddResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 增值服务列表
	Data []*ValueAddedServiceInfo `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 总数
	AllCount *int64 `json:"all_count,omitempty" xml:"all_count,omitempty"`
}

func (s PagequeryIpValueaddResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpValueaddResponse) GoString() string {
	return s.String()
}

func (s *PagequeryIpValueaddResponse) SetReqMsgId(v string) *PagequeryIpValueaddResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryIpValueaddResponse) SetResultCode(v string) *PagequeryIpValueaddResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryIpValueaddResponse) SetResultMsg(v string) *PagequeryIpValueaddResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryIpValueaddResponse) SetData(v []*ValueAddedServiceInfo) *PagequeryIpValueaddResponse {
	s.Data = v
	return s
}

func (s *PagequeryIpValueaddResponse) SetAllCount(v int64) *PagequeryIpValueaddResponse {
	s.AllCount = &v
	return s
}

type UploadIpTradesalesRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 上传记录的用户的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// true 只上链不走真实支付，false 上链并链下真实支付账单
	OnlyCallBlockchain *bool `json:"only_call_blockchain,omitempty" xml:"only_call_blockchain,omitempty" require:"true"`
	// 账单结算类型：即时计费0、按周计费1、按月计费2、按季度计费3。默认0
	BillingType *int64 `json:"billing_type,omitempty" xml:"billing_type,omitempty"`
	// 支付完成后的回调地址。如果为空，默认跳转到https://ipforce.cloud.alipay.com/
	PayReturnUrl *string `json:"pay_return_url,omitempty" xml:"pay_return_url,omitempty"`
	// 授权佣金比例
	AuthRate *string `json:"auth_rate,omitempty" xml:"auth_rate,omitempty"`
	// 定向授权按量付费单价
	AuthPrice *string `json:"auth_price,omitempty" xml:"auth_price,omitempty"`
	// 商品销售数量
	TotalAmount *int64 `json:"total_amount,omitempty" xml:"total_amount,omitempty" require:"true"`
	// 销售金额
	TotalSales *string `json:"total_sales,omitempty" xml:"total_sales,omitempty" require:"true"`
	// 总的退款金额。不填默认为0
	TotalRefundSales *string `json:"total_refund_sales,omitempty" xml:"total_refund_sales,omitempty"`
	// 实付金额（授权交易）
	TotalPayment *string `json:"total_payment,omitempty" xml:"total_payment,omitempty" require:"true"`
	// 销售数据列表
	IpSalesInfoList []*IPSalesInfo `json:"ip_sales_info_list,omitempty" xml:"ip_sales_info_list,omitempty" require:"true" type:"Repeated"`
}

func (s UploadIpTradesalesRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadIpTradesalesRequest) GoString() string {
	return s.String()
}

func (s *UploadIpTradesalesRequest) SetAuthToken(v string) *UploadIpTradesalesRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadIpTradesalesRequest) SetProductInstanceId(v string) *UploadIpTradesalesRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadIpTradesalesRequest) SetBaseRequest(v *BaseRequestInfo) *UploadIpTradesalesRequest {
	s.BaseRequest = v
	return s
}

func (s *UploadIpTradesalesRequest) SetAccountId(v string) *UploadIpTradesalesRequest {
	s.AccountId = &v
	return s
}

func (s *UploadIpTradesalesRequest) SetIpOrderId(v string) *UploadIpTradesalesRequest {
	s.IpOrderId = &v
	return s
}

func (s *UploadIpTradesalesRequest) SetOnlyCallBlockchain(v bool) *UploadIpTradesalesRequest {
	s.OnlyCallBlockchain = &v
	return s
}

func (s *UploadIpTradesalesRequest) SetBillingType(v int64) *UploadIpTradesalesRequest {
	s.BillingType = &v
	return s
}

func (s *UploadIpTradesalesRequest) SetPayReturnUrl(v string) *UploadIpTradesalesRequest {
	s.PayReturnUrl = &v
	return s
}

func (s *UploadIpTradesalesRequest) SetAuthRate(v string) *UploadIpTradesalesRequest {
	s.AuthRate = &v
	return s
}

func (s *UploadIpTradesalesRequest) SetAuthPrice(v string) *UploadIpTradesalesRequest {
	s.AuthPrice = &v
	return s
}

func (s *UploadIpTradesalesRequest) SetTotalAmount(v int64) *UploadIpTradesalesRequest {
	s.TotalAmount = &v
	return s
}

func (s *UploadIpTradesalesRequest) SetTotalSales(v string) *UploadIpTradesalesRequest {
	s.TotalSales = &v
	return s
}

func (s *UploadIpTradesalesRequest) SetTotalRefundSales(v string) *UploadIpTradesalesRequest {
	s.TotalRefundSales = &v
	return s
}

func (s *UploadIpTradesalesRequest) SetTotalPayment(v string) *UploadIpTradesalesRequest {
	s.TotalPayment = &v
	return s
}

func (s *UploadIpTradesalesRequest) SetIpSalesInfoList(v []*IPSalesInfo) *UploadIpTradesalesRequest {
	s.IpSalesInfoList = v
	return s
}

type UploadIpTradesalesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 支付链接
	PayUrl *string `json:"pay_url,omitempty" xml:"pay_url,omitempty"`
	// 账单ID
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty"`
}

func (s UploadIpTradesalesResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadIpTradesalesResponse) GoString() string {
	return s.String()
}

func (s *UploadIpTradesalesResponse) SetReqMsgId(v string) *UploadIpTradesalesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadIpTradesalesResponse) SetResultCode(v string) *UploadIpTradesalesResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadIpTradesalesResponse) SetResultMsg(v string) *UploadIpTradesalesResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadIpTradesalesResponse) SetPayUrl(v string) *UploadIpTradesalesResponse {
	s.PayUrl = &v
	return s
}

func (s *UploadIpTradesalesResponse) SetIpBillId(v string) *UploadIpTradesalesResponse {
	s.IpBillId = &v
	return s
}

type AuthIpUserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 用户授权code
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty" require:"true"`
}

func (s AuthIpUserRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthIpUserRequest) GoString() string {
	return s.String()
}

func (s *AuthIpUserRequest) SetAuthToken(v string) *AuthIpUserRequest {
	s.AuthToken = &v
	return s
}

func (s *AuthIpUserRequest) SetProductInstanceId(v string) *AuthIpUserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AuthIpUserRequest) SetBaseRequest(v *BaseRequestInfo) *AuthIpUserRequest {
	s.BaseRequest = v
	return s
}

func (s *AuthIpUserRequest) SetAuthCode(v string) *AuthIpUserRequest {
	s.AuthCode = &v
	return s
}

type AuthIpUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s AuthIpUserResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthIpUserResponse) GoString() string {
	return s.String()
}

func (s *AuthIpUserResponse) SetReqMsgId(v string) *AuthIpUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AuthIpUserResponse) SetResultCode(v string) *AuthIpUserResponse {
	s.ResultCode = &v
	return s
}

func (s *AuthIpUserResponse) SetResultMsg(v string) *AuthIpUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *AuthIpUserResponse) SetUserId(v string) *AuthIpUserResponse {
	s.UserId = &v
	return s
}

type RemoveIpGoodsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// ip id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
}

func (s RemoveIpGoodsRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpGoodsRequest) GoString() string {
	return s.String()
}

func (s *RemoveIpGoodsRequest) SetAuthToken(v string) *RemoveIpGoodsRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveIpGoodsRequest) SetProductInstanceId(v string) *RemoveIpGoodsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RemoveIpGoodsRequest) SetBaseRequest(v *BaseRequestInfo) *RemoveIpGoodsRequest {
	s.BaseRequest = v
	return s
}

func (s *RemoveIpGoodsRequest) SetIpId(v string) *RemoveIpGoodsRequest {
	s.IpId = &v
	return s
}

type RemoveIpGoodsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RemoveIpGoodsResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpGoodsResponse) GoString() string {
	return s.String()
}

func (s *RemoveIpGoodsResponse) SetReqMsgId(v string) *RemoveIpGoodsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveIpGoodsResponse) SetResultCode(v string) *RemoveIpGoodsResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveIpGoodsResponse) SetResultMsg(v string) *RemoveIpGoodsResponse {
	s.ResultMsg = &v
	return s
}

type CountIpNumRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 账户id，为空则查全局
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 渠道名称
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty"`
}

func (s CountIpNumRequest) String() string {
	return tea.Prettify(s)
}

func (s CountIpNumRequest) GoString() string {
	return s.String()
}

func (s *CountIpNumRequest) SetAuthToken(v string) *CountIpNumRequest {
	s.AuthToken = &v
	return s
}

func (s *CountIpNumRequest) SetProductInstanceId(v string) *CountIpNumRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CountIpNumRequest) SetBaseRequest(v *BaseRequestInfo) *CountIpNumRequest {
	s.BaseRequest = v
	return s
}

func (s *CountIpNumRequest) SetAccountId(v string) *CountIpNumRequest {
	s.AccountId = &v
	return s
}

func (s *CountIpNumRequest) SetChannelName(v string) *CountIpNumRequest {
	s.ChannelName = &v
	return s
}

type CountIpNumResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 各个渠道的统计
	CounterDetail []*ChannelCounter `json:"counter_detail,omitempty" xml:"counter_detail,omitempty" type:"Repeated"`
	// 总计值
	AllCount *int64 `json:"all_count,omitempty" xml:"all_count,omitempty"`
}

func (s CountIpNumResponse) String() string {
	return tea.Prettify(s)
}

func (s CountIpNumResponse) GoString() string {
	return s.String()
}

func (s *CountIpNumResponse) SetReqMsgId(v string) *CountIpNumResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CountIpNumResponse) SetResultCode(v string) *CountIpNumResponse {
	s.ResultCode = &v
	return s
}

func (s *CountIpNumResponse) SetResultMsg(v string) *CountIpNumResponse {
	s.ResultMsg = &v
	return s
}

func (s *CountIpNumResponse) SetCounterDetail(v []*ChannelCounter) *CountIpNumResponse {
	s.CounterDetail = v
	return s
}

func (s *CountIpNumResponse) SetAllCount(v int64) *CountIpNumResponse {
	s.AllCount = &v
	return s
}

type CountIpPvRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 账户id，为空则统计全局
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 渠道名称
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty"`
}

func (s CountIpPvRequest) String() string {
	return tea.Prettify(s)
}

func (s CountIpPvRequest) GoString() string {
	return s.String()
}

func (s *CountIpPvRequest) SetAuthToken(v string) *CountIpPvRequest {
	s.AuthToken = &v
	return s
}

func (s *CountIpPvRequest) SetProductInstanceId(v string) *CountIpPvRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CountIpPvRequest) SetBaseRequest(v *BaseRequestInfo) *CountIpPvRequest {
	s.BaseRequest = v
	return s
}

func (s *CountIpPvRequest) SetAccountId(v string) *CountIpPvRequest {
	s.AccountId = &v
	return s
}

func (s *CountIpPvRequest) SetChannelName(v string) *CountIpPvRequest {
	s.ChannelName = &v
	return s
}

type CountIpPvResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 总计
	AllCount *int64 `json:"all_count,omitempty" xml:"all_count,omitempty"`
	// 渠道统计值
	CounterDetails []*ChannelCounter `json:"counter_details,omitempty" xml:"counter_details,omitempty" type:"Repeated"`
}

func (s CountIpPvResponse) String() string {
	return tea.Prettify(s)
}

func (s CountIpPvResponse) GoString() string {
	return s.String()
}

func (s *CountIpPvResponse) SetReqMsgId(v string) *CountIpPvResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CountIpPvResponse) SetResultCode(v string) *CountIpPvResponse {
	s.ResultCode = &v
	return s
}

func (s *CountIpPvResponse) SetResultMsg(v string) *CountIpPvResponse {
	s.ResultMsg = &v
	return s
}

func (s *CountIpPvResponse) SetAllCount(v int64) *CountIpPvResponse {
	s.AllCount = &v
	return s
}

func (s *CountIpPvResponse) SetCounterDetails(v []*ChannelCounter) *CountIpPvResponse {
	s.CounterDetails = v
	return s
}

type QueryIpCodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 数字凭证的编码
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
}

func (s QueryIpCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpCodeRequest) GoString() string {
	return s.String()
}

func (s *QueryIpCodeRequest) SetAuthToken(v string) *QueryIpCodeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpCodeRequest) SetProductInstanceId(v string) *QueryIpCodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpCodeRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpCodeRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpCodeRequest) SetCode(v string) *QueryIpCodeRequest {
	s.Code = &v
	return s
}

type QueryIpCodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数字凭证信息
	CodeInfo *IPCodeScannedInfo `json:"code_info,omitempty" xml:"code_info,omitempty"`
	// 首次扫码信息
	FirstScannedInfo *IPSimpleScannedInfo `json:"first_scanned_info,omitempty" xml:"first_scanned_info,omitempty"`
	// 扫码信息
	ScannedInfoList []*IPSimpleScannedInfo `json:"scanned_info_list,omitempty" xml:"scanned_info_list,omitempty" type:"Repeated"`
	// 扫码次数
	ScannedCount *int64 `json:"scanned_count,omitempty" xml:"scanned_count,omitempty"`
	// 小程序短链
	ShortenUrl *string `json:"shorten_url,omitempty" xml:"shorten_url,omitempty"`
}

func (s QueryIpCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpCodeResponse) GoString() string {
	return s.String()
}

func (s *QueryIpCodeResponse) SetReqMsgId(v string) *QueryIpCodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpCodeResponse) SetResultCode(v string) *QueryIpCodeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpCodeResponse) SetResultMsg(v string) *QueryIpCodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpCodeResponse) SetCodeInfo(v *IPCodeScannedInfo) *QueryIpCodeResponse {
	s.CodeInfo = v
	return s
}

func (s *QueryIpCodeResponse) SetFirstScannedInfo(v *IPSimpleScannedInfo) *QueryIpCodeResponse {
	s.FirstScannedInfo = v
	return s
}

func (s *QueryIpCodeResponse) SetScannedInfoList(v []*IPSimpleScannedInfo) *QueryIpCodeResponse {
	s.ScannedInfoList = v
	return s
}

func (s *QueryIpCodeResponse) SetScannedCount(v int64) *QueryIpCodeResponse {
	s.ScannedCount = &v
	return s
}

func (s *QueryIpCodeResponse) SetShortenUrl(v string) *QueryIpCodeResponse {
	s.ShortenUrl = &v
	return s
}

type CountIpAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 支持多链多合约,该参数为指明需要操作哪个智能合约环境(长度不超过50个字符)
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty"`
	// 场景码(入驻时申请)(长度不超过50个字符)
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty"`
	// null返回所有数据，非空返回对应渠道的数据
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty"`
}

func (s CountIpAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CountIpAccountRequest) GoString() string {
	return s.String()
}

func (s *CountIpAccountRequest) SetAuthToken(v string) *CountIpAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *CountIpAccountRequest) SetProductInstanceId(v string) *CountIpAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CountIpAccountRequest) SetBaseRequest(v *BaseRequestInfo) *CountIpAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *CountIpAccountRequest) SetChainId(v string) *CountIpAccountRequest {
	s.ChainId = &v
	return s
}

func (s *CountIpAccountRequest) SetProductCode(v string) *CountIpAccountRequest {
	s.ProductCode = &v
	return s
}

func (s *CountIpAccountRequest) SetChannelName(v string) *CountIpAccountRequest {
	s.ChannelName = &v
	return s
}

type CountIpAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户数量
	UserCount *int64 `json:"user_count,omitempty" xml:"user_count,omitempty"`
	// 版权方数量
	SellerCount *int64 `json:"seller_count,omitempty" xml:"seller_count,omitempty"`
	// 版权方数量
	BuyerCount *int64 `json:"buyer_count,omitempty" xml:"buyer_count,omitempty"`
}

func (s CountIpAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CountIpAccountResponse) GoString() string {
	return s.String()
}

func (s *CountIpAccountResponse) SetReqMsgId(v string) *CountIpAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CountIpAccountResponse) SetResultCode(v string) *CountIpAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *CountIpAccountResponse) SetResultMsg(v string) *CountIpAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *CountIpAccountResponse) SetUserCount(v int64) *CountIpAccountResponse {
	s.UserCount = &v
	return s
}

func (s *CountIpAccountResponse) SetSellerCount(v int64) *CountIpAccountResponse {
	s.SellerCount = &v
	return s
}

func (s *CountIpAccountResponse) SetBuyerCount(v int64) *CountIpAccountResponse {
	s.BuyerCount = &v
	return s
}

type QueryIpOrderstatisticRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 卖方ID
	SellerId *string `json:"seller_id,omitempty" xml:"seller_id,omitempty"`
	// IP id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty"`
	// 渠道名称
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty"`
}

func (s QueryIpOrderstatisticRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpOrderstatisticRequest) GoString() string {
	return s.String()
}

func (s *QueryIpOrderstatisticRequest) SetAuthToken(v string) *QueryIpOrderstatisticRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpOrderstatisticRequest) SetProductInstanceId(v string) *QueryIpOrderstatisticRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpOrderstatisticRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpOrderstatisticRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpOrderstatisticRequest) SetSellerId(v string) *QueryIpOrderstatisticRequest {
	s.SellerId = &v
	return s
}

func (s *QueryIpOrderstatisticRequest) SetIpId(v string) *QueryIpOrderstatisticRequest {
	s.IpId = &v
	return s
}

func (s *QueryIpOrderstatisticRequest) SetChannelName(v string) *QueryIpOrderstatisticRequest {
	s.ChannelName = &v
	return s
}

type QueryIpOrderstatisticResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单总数
	TotalOrderCount *int64 `json:"total_order_count,omitempty" xml:"total_order_count,omitempty"`
	// 总金额
	TotalPaymentAmount *string `json:"total_payment_amount,omitempty" xml:"total_payment_amount,omitempty"`
	// 总客户数
	TotalBuyerCount *int64 `json:"total_buyer_count,omitempty" xml:"total_buyer_count,omitempty"`
	// 统计数据
	OrderStaList []*ChannelCounter `json:"order_sta_list,omitempty" xml:"order_sta_list,omitempty" type:"Repeated"`
}

func (s QueryIpOrderstatisticResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpOrderstatisticResponse) GoString() string {
	return s.String()
}

func (s *QueryIpOrderstatisticResponse) SetReqMsgId(v string) *QueryIpOrderstatisticResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpOrderstatisticResponse) SetResultCode(v string) *QueryIpOrderstatisticResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpOrderstatisticResponse) SetResultMsg(v string) *QueryIpOrderstatisticResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpOrderstatisticResponse) SetTotalOrderCount(v int64) *QueryIpOrderstatisticResponse {
	s.TotalOrderCount = &v
	return s
}

func (s *QueryIpOrderstatisticResponse) SetTotalPaymentAmount(v string) *QueryIpOrderstatisticResponse {
	s.TotalPaymentAmount = &v
	return s
}

func (s *QueryIpOrderstatisticResponse) SetTotalBuyerCount(v int64) *QueryIpOrderstatisticResponse {
	s.TotalBuyerCount = &v
	return s
}

func (s *QueryIpOrderstatisticResponse) SetOrderStaList(v []*ChannelCounter) *QueryIpOrderstatisticResponse {
	s.OrderStaList = v
	return s
}

type UpdateIpGoodsgalleryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 版权方链上账户ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// ip链上id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// IP图库链接，一个压缩包
	IpGalleryUrl *string `json:"ip_gallery_url,omitempty" xml:"ip_gallery_url,omitempty" require:"true"`
	// 是否允许商家下载图库
	AllowDownload *bool `json:"allow_download,omitempty" xml:"allow_download,omitempty"`
}

func (s UpdateIpGoodsgalleryRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateIpGoodsgalleryRequest) GoString() string {
	return s.String()
}

func (s *UpdateIpGoodsgalleryRequest) SetAuthToken(v string) *UpdateIpGoodsgalleryRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateIpGoodsgalleryRequest) SetProductInstanceId(v string) *UpdateIpGoodsgalleryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateIpGoodsgalleryRequest) SetBaseRequest(v *BaseRequestInfo) *UpdateIpGoodsgalleryRequest {
	s.BaseRequest = v
	return s
}

func (s *UpdateIpGoodsgalleryRequest) SetAccountId(v string) *UpdateIpGoodsgalleryRequest {
	s.AccountId = &v
	return s
}

func (s *UpdateIpGoodsgalleryRequest) SetIpId(v string) *UpdateIpGoodsgalleryRequest {
	s.IpId = &v
	return s
}

func (s *UpdateIpGoodsgalleryRequest) SetIpGalleryUrl(v string) *UpdateIpGoodsgalleryRequest {
	s.IpGalleryUrl = &v
	return s
}

func (s *UpdateIpGoodsgalleryRequest) SetAllowDownload(v bool) *UpdateIpGoodsgalleryRequest {
	s.AllowDownload = &v
	return s
}

type UpdateIpGoodsgalleryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateIpGoodsgalleryResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateIpGoodsgalleryResponse) GoString() string {
	return s.String()
}

func (s *UpdateIpGoodsgalleryResponse) SetReqMsgId(v string) *UpdateIpGoodsgalleryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateIpGoodsgalleryResponse) SetResultCode(v string) *UpdateIpGoodsgalleryResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateIpGoodsgalleryResponse) SetResultMsg(v string) *UpdateIpGoodsgalleryResponse {
	s.ResultMsg = &v
	return s
}

type QueryIpGoodsgalleryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 账户链上ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// IP链上ID，只有版权方可以根据IPID查询图库信息。如果传入IPID，优先根据IPID查询图库信息。
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty"`
	// IP授权订单ID，版权方和商家均可根据订单ID查询图库信息
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
}

func (s QueryIpGoodsgalleryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpGoodsgalleryRequest) GoString() string {
	return s.String()
}

func (s *QueryIpGoodsgalleryRequest) SetAuthToken(v string) *QueryIpGoodsgalleryRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpGoodsgalleryRequest) SetProductInstanceId(v string) *QueryIpGoodsgalleryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpGoodsgalleryRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpGoodsgalleryRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpGoodsgalleryRequest) SetAccountId(v string) *QueryIpGoodsgalleryRequest {
	s.AccountId = &v
	return s
}

func (s *QueryIpGoodsgalleryRequest) SetIpId(v string) *QueryIpGoodsgalleryRequest {
	s.IpId = &v
	return s
}

func (s *QueryIpGoodsgalleryRequest) SetIpOrderId(v string) *QueryIpGoodsgalleryRequest {
	s.IpOrderId = &v
	return s
}

type QueryIpGoodsgalleryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 图库链接
	IpGalleryUrl *string `json:"ip_gallery_url,omitempty" xml:"ip_gallery_url,omitempty"`
	// 图库临时下载链接，过期时间2小时
	IpGalleryTemporaryUrl *string `json:"ip_gallery_temporary_url,omitempty" xml:"ip_gallery_temporary_url,omitempty"`
	// 是否允许商家下载图库
	AllowDownload *bool `json:"allow_download,omitempty" xml:"allow_download,omitempty"`
}

func (s QueryIpGoodsgalleryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpGoodsgalleryResponse) GoString() string {
	return s.String()
}

func (s *QueryIpGoodsgalleryResponse) SetReqMsgId(v string) *QueryIpGoodsgalleryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpGoodsgalleryResponse) SetResultCode(v string) *QueryIpGoodsgalleryResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpGoodsgalleryResponse) SetResultMsg(v string) *QueryIpGoodsgalleryResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpGoodsgalleryResponse) SetIpGalleryUrl(v string) *QueryIpGoodsgalleryResponse {
	s.IpGalleryUrl = &v
	return s
}

func (s *QueryIpGoodsgalleryResponse) SetIpGalleryTemporaryUrl(v string) *QueryIpGoodsgalleryResponse {
	s.IpGalleryTemporaryUrl = &v
	return s
}

func (s *QueryIpGoodsgalleryResponse) SetAllowDownload(v bool) *QueryIpGoodsgalleryResponse {
	s.AllowDownload = &v
	return s
}

type SetIpCodeinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 数字凭证对应的订单上版权方的账户链上ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 订单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 数字凭证商品信息配置列表
	GoodsInfoList []*IPCodeGoodsInfo `json:"goods_info_list,omitempty" xml:"goods_info_list,omitempty" type:"Repeated"`
	// 数字凭证资源位配置信息列表
	AdInfoList []*IPCodeAdvertisingInfo `json:"ad_info_list,omitempty" xml:"ad_info_list,omitempty" type:"Repeated"`
	// ip版权方信息
	IpownerInfo *IPCodeIpOwnerInfo `json:"ipowner_info,omitempty" xml:"ipowner_info,omitempty"`
	// (商家)配置数字凭证时间
	CodeSetTime *string `json:"code_set_time,omitempty" xml:"code_set_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 数字凭证配置附加信息，信息内容由调用方自定义。可以从配置查询和数字凭证详情接口上获取。
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty"`
	// 数字凭证前缀，本期暂不支持
	ShowCodePrefix *string `json:"show_code_prefix,omitempty" xml:"show_code_prefix,omitempty"`
}

func (s SetIpCodeinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s SetIpCodeinfoRequest) GoString() string {
	return s.String()
}

func (s *SetIpCodeinfoRequest) SetAuthToken(v string) *SetIpCodeinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *SetIpCodeinfoRequest) SetProductInstanceId(v string) *SetIpCodeinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetIpCodeinfoRequest) SetBaseRequest(v *BaseRequestInfo) *SetIpCodeinfoRequest {
	s.BaseRequest = v
	return s
}

func (s *SetIpCodeinfoRequest) SetAccountId(v string) *SetIpCodeinfoRequest {
	s.AccountId = &v
	return s
}

func (s *SetIpCodeinfoRequest) SetOrderId(v string) *SetIpCodeinfoRequest {
	s.OrderId = &v
	return s
}

func (s *SetIpCodeinfoRequest) SetGoodsInfoList(v []*IPCodeGoodsInfo) *SetIpCodeinfoRequest {
	s.GoodsInfoList = v
	return s
}

func (s *SetIpCodeinfoRequest) SetAdInfoList(v []*IPCodeAdvertisingInfo) *SetIpCodeinfoRequest {
	s.AdInfoList = v
	return s
}

func (s *SetIpCodeinfoRequest) SetIpownerInfo(v *IPCodeIpOwnerInfo) *SetIpCodeinfoRequest {
	s.IpownerInfo = v
	return s
}

func (s *SetIpCodeinfoRequest) SetCodeSetTime(v string) *SetIpCodeinfoRequest {
	s.CodeSetTime = &v
	return s
}

func (s *SetIpCodeinfoRequest) SetExtInfo(v string) *SetIpCodeinfoRequest {
	s.ExtInfo = &v
	return s
}

func (s *SetIpCodeinfoRequest) SetShowCodePrefix(v string) *SetIpCodeinfoRequest {
	s.ShowCodePrefix = &v
	return s
}

type SetIpCodeinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetIpCodeinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s SetIpCodeinfoResponse) GoString() string {
	return s.String()
}

func (s *SetIpCodeinfoResponse) SetReqMsgId(v string) *SetIpCodeinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetIpCodeinfoResponse) SetResultCode(v string) *SetIpCodeinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *SetIpCodeinfoResponse) SetResultMsg(v string) *SetIpCodeinfoResponse {
	s.ResultMsg = &v
	return s
}

type PagequeryIpGalleryinstructionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 账户链上ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 授权订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty" require:"true"`
	// 每页数据量大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 数据排序顺序：正序还是倒序。默认按照下载时间排序。
	Order *string `json:"order,omitempty" xml:"order,omitempty" require:"true"`
}

func (s PagequeryIpGalleryinstructionRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpGalleryinstructionRequest) GoString() string {
	return s.String()
}

func (s *PagequeryIpGalleryinstructionRequest) SetAuthToken(v string) *PagequeryIpGalleryinstructionRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryIpGalleryinstructionRequest) SetProductInstanceId(v string) *PagequeryIpGalleryinstructionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PagequeryIpGalleryinstructionRequest) SetBaseRequest(v *BaseRequestInfo) *PagequeryIpGalleryinstructionRequest {
	s.BaseRequest = v
	return s
}

func (s *PagequeryIpGalleryinstructionRequest) SetAccountId(v string) *PagequeryIpGalleryinstructionRequest {
	s.AccountId = &v
	return s
}

func (s *PagequeryIpGalleryinstructionRequest) SetIpOrderId(v string) *PagequeryIpGalleryinstructionRequest {
	s.IpOrderId = &v
	return s
}

func (s *PagequeryIpGalleryinstructionRequest) SetPageNumber(v int64) *PagequeryIpGalleryinstructionRequest {
	s.PageNumber = &v
	return s
}

func (s *PagequeryIpGalleryinstructionRequest) SetPageSize(v int64) *PagequeryIpGalleryinstructionRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryIpGalleryinstructionRequest) SetOrder(v string) *PagequeryIpGalleryinstructionRequest {
	s.Order = &v
	return s
}

type PagequeryIpGalleryinstructionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 每页数据量大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 符合条件的数据总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 图库系在记录信息
	GalleryInstructionList []*IPGalleryInstruction `json:"gallery_instruction_list,omitempty" xml:"gallery_instruction_list,omitempty" type:"Repeated"`
}

func (s PagequeryIpGalleryinstructionResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpGalleryinstructionResponse) GoString() string {
	return s.String()
}

func (s *PagequeryIpGalleryinstructionResponse) SetReqMsgId(v string) *PagequeryIpGalleryinstructionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryIpGalleryinstructionResponse) SetResultCode(v string) *PagequeryIpGalleryinstructionResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryIpGalleryinstructionResponse) SetResultMsg(v string) *PagequeryIpGalleryinstructionResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryIpGalleryinstructionResponse) SetPageNumber(v int64) *PagequeryIpGalleryinstructionResponse {
	s.PageNumber = &v
	return s
}

func (s *PagequeryIpGalleryinstructionResponse) SetPageSize(v int64) *PagequeryIpGalleryinstructionResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryIpGalleryinstructionResponse) SetTotalCount(v int64) *PagequeryIpGalleryinstructionResponse {
	s.TotalCount = &v
	return s
}

func (s *PagequeryIpGalleryinstructionResponse) SetGalleryInstructionList(v []*IPGalleryInstruction) *PagequeryIpGalleryinstructionResponse {
	s.GalleryInstructionList = v
	return s
}

type ConfirmIpOrdergalleryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 必须传入：IP 版权方账户链上ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 授权订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
}

func (s ConfirmIpOrdergalleryRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpOrdergalleryRequest) GoString() string {
	return s.String()
}

func (s *ConfirmIpOrdergalleryRequest) SetAuthToken(v string) *ConfirmIpOrdergalleryRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmIpOrdergalleryRequest) SetProductInstanceId(v string) *ConfirmIpOrdergalleryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmIpOrdergalleryRequest) SetBaseRequest(v *BaseRequestInfo) *ConfirmIpOrdergalleryRequest {
	s.BaseRequest = v
	return s
}

func (s *ConfirmIpOrdergalleryRequest) SetAccountId(v string) *ConfirmIpOrdergalleryRequest {
	s.AccountId = &v
	return s
}

func (s *ConfirmIpOrdergalleryRequest) SetIpOrderId(v string) *ConfirmIpOrdergalleryRequest {
	s.IpOrderId = &v
	return s
}

type ConfirmIpOrdergalleryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ConfirmIpOrdergalleryResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpOrdergalleryResponse) GoString() string {
	return s.String()
}

func (s *ConfirmIpOrdergalleryResponse) SetReqMsgId(v string) *ConfirmIpOrdergalleryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmIpOrdergalleryResponse) SetResultCode(v string) *ConfirmIpOrdergalleryResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmIpOrdergalleryResponse) SetResultMsg(v string) *ConfirmIpOrdergalleryResponse {
	s.ResultMsg = &v
	return s
}

type ConfirmIpAuthtradeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 审核账户ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 授权订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 是否同意授权
	ConfirmResult *bool `json:"confirm_result,omitempty" xml:"confirm_result,omitempty" require:"true"`
	// 审批信息备注，通过或不通过原因
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s ConfirmIpAuthtradeRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpAuthtradeRequest) GoString() string {
	return s.String()
}

func (s *ConfirmIpAuthtradeRequest) SetAuthToken(v string) *ConfirmIpAuthtradeRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmIpAuthtradeRequest) SetProductInstanceId(v string) *ConfirmIpAuthtradeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmIpAuthtradeRequest) SetBaseRequest(v *BaseRequestInfo) *ConfirmIpAuthtradeRequest {
	s.BaseRequest = v
	return s
}

func (s *ConfirmIpAuthtradeRequest) SetAccountId(v string) *ConfirmIpAuthtradeRequest {
	s.AccountId = &v
	return s
}

func (s *ConfirmIpAuthtradeRequest) SetIpOrderId(v string) *ConfirmIpAuthtradeRequest {
	s.IpOrderId = &v
	return s
}

func (s *ConfirmIpAuthtradeRequest) SetConfirmResult(v bool) *ConfirmIpAuthtradeRequest {
	s.ConfirmResult = &v
	return s
}

func (s *ConfirmIpAuthtradeRequest) SetMemo(v string) *ConfirmIpAuthtradeRequest {
	s.Memo = &v
	return s
}

type ConfirmIpAuthtradeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
	// 保底金支付链接
	PayUrl *string `json:"pay_url,omitempty" xml:"pay_url,omitempty"`
	// 保底金账单ID
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty"`
}

func (s ConfirmIpAuthtradeResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpAuthtradeResponse) GoString() string {
	return s.String()
}

func (s *ConfirmIpAuthtradeResponse) SetReqMsgId(v string) *ConfirmIpAuthtradeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmIpAuthtradeResponse) SetResultCode(v string) *ConfirmIpAuthtradeResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmIpAuthtradeResponse) SetResultMsg(v string) *ConfirmIpAuthtradeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmIpAuthtradeResponse) SetIpOrderId(v string) *ConfirmIpAuthtradeResponse {
	s.IpOrderId = &v
	return s
}

func (s *ConfirmIpAuthtradeResponse) SetPayUrl(v string) *ConfirmIpAuthtradeResponse {
	s.PayUrl = &v
	return s
}

func (s *ConfirmIpAuthtradeResponse) SetIpBillId(v string) *ConfirmIpAuthtradeResponse {
	s.IpBillId = &v
	return s
}

type ConfirmIpPackagetradeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 审核账户ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 授权订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 是否同意授权
	//
	ConfirmResult *bool `json:"confirm_result,omitempty" xml:"confirm_result,omitempty" require:"true"`
}

func (s ConfirmIpPackagetradeRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpPackagetradeRequest) GoString() string {
	return s.String()
}

func (s *ConfirmIpPackagetradeRequest) SetAuthToken(v string) *ConfirmIpPackagetradeRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmIpPackagetradeRequest) SetProductInstanceId(v string) *ConfirmIpPackagetradeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmIpPackagetradeRequest) SetBaseRequest(v *BaseRequestInfo) *ConfirmIpPackagetradeRequest {
	s.BaseRequest = v
	return s
}

func (s *ConfirmIpPackagetradeRequest) SetAccountId(v string) *ConfirmIpPackagetradeRequest {
	s.AccountId = &v
	return s
}

func (s *ConfirmIpPackagetradeRequest) SetIpOrderId(v string) *ConfirmIpPackagetradeRequest {
	s.IpOrderId = &v
	return s
}

func (s *ConfirmIpPackagetradeRequest) SetConfirmResult(v bool) *ConfirmIpPackagetradeRequest {
	s.ConfirmResult = &v
	return s
}

type ConfirmIpPackagetradeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
	// 保底金支付链接
	PayUrl *string `json:"pay_url,omitempty" xml:"pay_url,omitempty"`
	// 保底金账单ID
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty"`
}

func (s ConfirmIpPackagetradeResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpPackagetradeResponse) GoString() string {
	return s.String()
}

func (s *ConfirmIpPackagetradeResponse) SetReqMsgId(v string) *ConfirmIpPackagetradeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmIpPackagetradeResponse) SetResultCode(v string) *ConfirmIpPackagetradeResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmIpPackagetradeResponse) SetResultMsg(v string) *ConfirmIpPackagetradeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmIpPackagetradeResponse) SetIpOrderId(v string) *ConfirmIpPackagetradeResponse {
	s.IpOrderId = &v
	return s
}

func (s *ConfirmIpPackagetradeResponse) SetPayUrl(v string) *ConfirmIpPackagetradeResponse {
	s.PayUrl = &v
	return s
}

func (s *ConfirmIpPackagetradeResponse) SetIpBillId(v string) *ConfirmIpPackagetradeResponse {
	s.IpBillId = &v
	return s
}

type ApplyIpPackagetradeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 买方的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// IP授权交易时传入IP ID；增值服务交易时传入服务ID
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// true 只上链不走真实支付，false 上链并链下真实支付账单
	OnlyCallBlockchain *bool `json:"only_call_blockchain,omitempty" xml:"only_call_blockchain,omitempty" require:"true"`
	// 终端商品价格区间
	PriceRange *string `json:"price_range,omitempty" xml:"price_range,omitempty" require:"true"`
	// 套餐中包含终端商品数量
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 套餐交易应付金额，单位元，保留两位小数
	ExpectedTotalPrice *string `json:"expected_total_price,omitempty" xml:"expected_total_price,omitempty" require:"true"`
	// 授权合作开始期限（毫秒时间戳）
	AuthBeginTime *int64 `json:"auth_begin_time,omitempty" xml:"auth_begin_time,omitempty" require:"true"`
	// 授权合作结束期限（毫秒时间戳）
	AuthEndTime *int64 `json:"auth_end_time,omitempty" xml:"auth_end_time,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 附加条款
	AdditionalClause *string `json:"additional_clause,omitempty" xml:"additional_clause,omitempty"`
	// 授权产品范围
	AuthProductScope *string `json:"auth_product_scope,omitempty" xml:"auth_product_scope,omitempty"`
	// 授权地域范围
	AuthAreaScope *string `json:"auth_area_scope,omitempty" xml:"auth_area_scope,omitempty"`
	// 商品销售渠道
	SalesChannel *string `json:"sales_channel,omitempty" xml:"sales_channel,omitempty"`
	// 0 IP交易，1 增值服务交易
	GoodsType *int64 `json:"goods_type,omitempty" xml:"goods_type,omitempty"`
	// 增值服务交易绑定的ip授权交易订单，增值服务交易必填
	RelatedOrderId *string `json:"related_order_id,omitempty" xml:"related_order_id,omitempty"`
	// 支付完成后的回调地址。如果为空，默认跳转到https://ipforce.cloud.alipay.com/
	PayReturnUrl *string `json:"pay_return_url,omitempty" xml:"pay_return_url,omitempty"`
	// 授权类型
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty"`
	// 授权模式，0普通授权，1独家授权
	AuthorizationModel []*int64 `json:"authorization_model,omitempty" xml:"authorization_model,omitempty" type:"Repeated"`
	// 订单功能选择，0 基础功能，1 领用收藏等
	Features []*int64 `json:"features,omitempty" xml:"features,omitempty" type:"Repeated"`
}

func (s ApplyIpPackagetradeRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyIpPackagetradeRequest) GoString() string {
	return s.String()
}

func (s *ApplyIpPackagetradeRequest) SetAuthToken(v string) *ApplyIpPackagetradeRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetProductInstanceId(v string) *ApplyIpPackagetradeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetBaseRequest(v *BaseRequestInfo) *ApplyIpPackagetradeRequest {
	s.BaseRequest = v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetAccountId(v string) *ApplyIpPackagetradeRequest {
	s.AccountId = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetIpId(v string) *ApplyIpPackagetradeRequest {
	s.IpId = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetOnlyCallBlockchain(v bool) *ApplyIpPackagetradeRequest {
	s.OnlyCallBlockchain = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetPriceRange(v string) *ApplyIpPackagetradeRequest {
	s.PriceRange = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetAmount(v int64) *ApplyIpPackagetradeRequest {
	s.Amount = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetExpectedTotalPrice(v string) *ApplyIpPackagetradeRequest {
	s.ExpectedTotalPrice = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetAuthBeginTime(v int64) *ApplyIpPackagetradeRequest {
	s.AuthBeginTime = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetAuthEndTime(v int64) *ApplyIpPackagetradeRequest {
	s.AuthEndTime = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetMemo(v string) *ApplyIpPackagetradeRequest {
	s.Memo = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetAdditionalClause(v string) *ApplyIpPackagetradeRequest {
	s.AdditionalClause = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetAuthProductScope(v string) *ApplyIpPackagetradeRequest {
	s.AuthProductScope = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetAuthAreaScope(v string) *ApplyIpPackagetradeRequest {
	s.AuthAreaScope = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetSalesChannel(v string) *ApplyIpPackagetradeRequest {
	s.SalesChannel = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetGoodsType(v int64) *ApplyIpPackagetradeRequest {
	s.GoodsType = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetRelatedOrderId(v string) *ApplyIpPackagetradeRequest {
	s.RelatedOrderId = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetPayReturnUrl(v string) *ApplyIpPackagetradeRequest {
	s.PayReturnUrl = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetAuthType(v string) *ApplyIpPackagetradeRequest {
	s.AuthType = &v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetAuthorizationModel(v []*int64) *ApplyIpPackagetradeRequest {
	s.AuthorizationModel = v
	return s
}

func (s *ApplyIpPackagetradeRequest) SetFeatures(v []*int64) *ApplyIpPackagetradeRequest {
	s.Features = v
	return s
}

type ApplyIpPackagetradeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
	// 支付信息
	PayUrl *string `json:"pay_url,omitempty" xml:"pay_url,omitempty"`
	// 账单ID
	//
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty"`
}

func (s ApplyIpPackagetradeResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyIpPackagetradeResponse) GoString() string {
	return s.String()
}

func (s *ApplyIpPackagetradeResponse) SetReqMsgId(v string) *ApplyIpPackagetradeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyIpPackagetradeResponse) SetResultCode(v string) *ApplyIpPackagetradeResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyIpPackagetradeResponse) SetResultMsg(v string) *ApplyIpPackagetradeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyIpPackagetradeResponse) SetIpOrderId(v string) *ApplyIpPackagetradeResponse {
	s.IpOrderId = &v
	return s
}

func (s *ApplyIpPackagetradeResponse) SetPayUrl(v string) *ApplyIpPackagetradeResponse {
	s.PayUrl = &v
	return s
}

func (s *ApplyIpPackagetradeResponse) SetIpBillId(v string) *ApplyIpPackagetradeResponse {
	s.IpBillId = &v
	return s
}

type ApplyIpAuthtradeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 采购者的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// IP授权交易时传入IP ID；增值服务交易时传入服务ID
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// 收费模式：0 销售抽佣, 1 按量付费
	ChargeType *int64 `json:"charge_type,omitempty" xml:"charge_type,omitempty"`
	// 授权计费比例
	AuthRate *string `json:"auth_rate,omitempty" xml:"auth_rate,omitempty"`
	// 按量付费的收费单价（按量付费模式必填）
	AuthPrice *string `json:"auth_price,omitempty" xml:"auth_price,omitempty"`
	// 授权合作开始期限（毫秒时间戳）
	AuthBeginTime *int64 `json:"auth_begin_time,omitempty" xml:"auth_begin_time,omitempty" require:"true"`
	// 授权合作结束期限（毫秒时间戳）
	AuthEndTime *int64 `json:"auth_end_time,omitempty" xml:"auth_end_time,omitempty" require:"true"`
	// 合同（文件URL）
	Contract *string `json:"contract,omitempty" xml:"contract,omitempty"`
	// 设计稿（文件URL）
	DesignDraft *string `json:"design_draft,omitempty" xml:"design_draft,omitempty"`
	// 授权产品范围
	AuthProductScope *string `json:"auth_product_scope,omitempty" xml:"auth_product_scope,omitempty"`
	// 授权地域范围
	AuthAreaScope *string `json:"auth_area_scope,omitempty" xml:"auth_area_scope,omitempty"`
	// 商品销售渠道
	SalesChannel *string `json:"sales_channel,omitempty" xml:"sales_channel,omitempty"`
	// 备注消息(不超过256个字符)
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 附加条款
	AdditionalClause *string `json:"additional_clause,omitempty" xml:"additional_clause,omitempty"`
	// 是否有保底金
	Guaranteed *bool `json:"guaranteed,omitempty" xml:"guaranteed,omitempty" require:"true"`
	// 支付的保底金金额
	GuaranteedFund *string `json:"guaranteed_fund,omitempty" xml:"guaranteed_fund,omitempty"`
	// 保底商品个数（按量付费），订单销售数量超过保底部分需按量付费
	GuaranteedGoodsAmount *int64 `json:"guaranteed_goods_amount,omitempty" xml:"guaranteed_goods_amount,omitempty"`
	// 保底商品销售金额（销售抽佣），订单销售额超过保底部分需按比例抽拥
	GuaranteedSales *string `json:"guaranteed_sales,omitempty" xml:"guaranteed_sales,omitempty"`
	// 0 IP交易，1 增值服务交易
	GoodsType *int64 `json:"goods_type,omitempty" xml:"goods_type,omitempty"`
	// 增值服务交易绑定的ip授权交易订单，增值服务交易必填
	RelatedOrderId *string `json:"related_order_id,omitempty" xml:"related_order_id,omitempty"`
	// 支付完成后的回调地址。如果为空，默认跳转到https://ipforce.cloud.alipay.com/
	PayReturnUrl *string `json:"pay_return_url,omitempty" xml:"pay_return_url,omitempty"`
	// 授权类型
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty"`
	// 授权模式，0普通授权，1独家授权
	AuthorizationModel []*int64 `json:"authorization_model,omitempty" xml:"authorization_model,omitempty" type:"Repeated"`
	// 订单功能选择，0 基础功能，1 领用收藏等
	Features []*int64 `json:"features,omitempty" xml:"features,omitempty" type:"Repeated"`
	// 合作申请时的订单ID，如没有前置的申请环节，则不填
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
}

func (s ApplyIpAuthtradeRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyIpAuthtradeRequest) GoString() string {
	return s.String()
}

func (s *ApplyIpAuthtradeRequest) SetAuthToken(v string) *ApplyIpAuthtradeRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetProductInstanceId(v string) *ApplyIpAuthtradeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetBaseRequest(v *BaseRequestInfo) *ApplyIpAuthtradeRequest {
	s.BaseRequest = v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetAccountId(v string) *ApplyIpAuthtradeRequest {
	s.AccountId = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetIpId(v string) *ApplyIpAuthtradeRequest {
	s.IpId = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetChargeType(v int64) *ApplyIpAuthtradeRequest {
	s.ChargeType = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetAuthRate(v string) *ApplyIpAuthtradeRequest {
	s.AuthRate = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetAuthPrice(v string) *ApplyIpAuthtradeRequest {
	s.AuthPrice = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetAuthBeginTime(v int64) *ApplyIpAuthtradeRequest {
	s.AuthBeginTime = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetAuthEndTime(v int64) *ApplyIpAuthtradeRequest {
	s.AuthEndTime = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetContract(v string) *ApplyIpAuthtradeRequest {
	s.Contract = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetDesignDraft(v string) *ApplyIpAuthtradeRequest {
	s.DesignDraft = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetAuthProductScope(v string) *ApplyIpAuthtradeRequest {
	s.AuthProductScope = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetAuthAreaScope(v string) *ApplyIpAuthtradeRequest {
	s.AuthAreaScope = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetSalesChannel(v string) *ApplyIpAuthtradeRequest {
	s.SalesChannel = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetMemo(v string) *ApplyIpAuthtradeRequest {
	s.Memo = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetAdditionalClause(v string) *ApplyIpAuthtradeRequest {
	s.AdditionalClause = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetGuaranteed(v bool) *ApplyIpAuthtradeRequest {
	s.Guaranteed = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetGuaranteedFund(v string) *ApplyIpAuthtradeRequest {
	s.GuaranteedFund = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetGuaranteedGoodsAmount(v int64) *ApplyIpAuthtradeRequest {
	s.GuaranteedGoodsAmount = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetGuaranteedSales(v string) *ApplyIpAuthtradeRequest {
	s.GuaranteedSales = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetGoodsType(v int64) *ApplyIpAuthtradeRequest {
	s.GoodsType = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetRelatedOrderId(v string) *ApplyIpAuthtradeRequest {
	s.RelatedOrderId = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetPayReturnUrl(v string) *ApplyIpAuthtradeRequest {
	s.PayReturnUrl = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetAuthType(v string) *ApplyIpAuthtradeRequest {
	s.AuthType = &v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetAuthorizationModel(v []*int64) *ApplyIpAuthtradeRequest {
	s.AuthorizationModel = v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetFeatures(v []*int64) *ApplyIpAuthtradeRequest {
	s.Features = v
	return s
}

func (s *ApplyIpAuthtradeRequest) SetIpOrderId(v string) *ApplyIpAuthtradeRequest {
	s.IpOrderId = &v
	return s
}

type ApplyIpAuthtradeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
}

func (s ApplyIpAuthtradeResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyIpAuthtradeResponse) GoString() string {
	return s.String()
}

func (s *ApplyIpAuthtradeResponse) SetReqMsgId(v string) *ApplyIpAuthtradeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyIpAuthtradeResponse) SetResultCode(v string) *ApplyIpAuthtradeResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyIpAuthtradeResponse) SetResultMsg(v string) *ApplyIpAuthtradeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyIpAuthtradeResponse) SetIpOrderId(v string) *ApplyIpAuthtradeResponse {
	s.IpOrderId = &v
	return s
}

type QueryIpCodeinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 账户链上ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 订单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
}

func (s QueryIpCodeinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpCodeinfoRequest) GoString() string {
	return s.String()
}

func (s *QueryIpCodeinfoRequest) SetAuthToken(v string) *QueryIpCodeinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpCodeinfoRequest) SetProductInstanceId(v string) *QueryIpCodeinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpCodeinfoRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpCodeinfoRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpCodeinfoRequest) SetAccountId(v string) *QueryIpCodeinfoRequest {
	s.AccountId = &v
	return s
}

func (s *QueryIpCodeinfoRequest) SetOrderId(v string) *QueryIpCodeinfoRequest {
	s.OrderId = &v
	return s
}

type QueryIpCodeinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 额外功能，包括基础功能，是否允许收藏等
	Features []*int64 `json:"features,omitempty" xml:"features,omitempty" type:"Repeated"`
	// 数字凭证商品信息配置列表
	GoodsInfoList []*IPCodeGoodsInfo `json:"goods_info_list,omitempty" xml:"goods_info_list,omitempty" type:"Repeated"`
	// 数字凭证资源位配置信息列表
	AdInfoList []*IPCodeAdvertisingInfo `json:"ad_info_list,omitempty" xml:"ad_info_list,omitempty" type:"Repeated"`
	// ip版权方信息
	IpownerInfo *IPCodeIpOwnerInfo `json:"ipowner_info,omitempty" xml:"ipowner_info,omitempty"`
	// 0:未配置，1:配置成功可展示，9:下架【本期不实现】
	IpCodeStatus *int64 `json:"ip_code_status,omitempty" xml:"ip_code_status,omitempty"`
	// 数字凭证前缀
	//
	ShowCodePrefix *string `json:"show_code_prefix,omitempty" xml:"show_code_prefix,omitempty"`
	// 数字凭证配置附加信息，信息内容由调用方自定义。
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty"`
}

func (s QueryIpCodeinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpCodeinfoResponse) GoString() string {
	return s.String()
}

func (s *QueryIpCodeinfoResponse) SetReqMsgId(v string) *QueryIpCodeinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpCodeinfoResponse) SetResultCode(v string) *QueryIpCodeinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpCodeinfoResponse) SetResultMsg(v string) *QueryIpCodeinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpCodeinfoResponse) SetOrderId(v string) *QueryIpCodeinfoResponse {
	s.OrderId = &v
	return s
}

func (s *QueryIpCodeinfoResponse) SetFeatures(v []*int64) *QueryIpCodeinfoResponse {
	s.Features = v
	return s
}

func (s *QueryIpCodeinfoResponse) SetGoodsInfoList(v []*IPCodeGoodsInfo) *QueryIpCodeinfoResponse {
	s.GoodsInfoList = v
	return s
}

func (s *QueryIpCodeinfoResponse) SetAdInfoList(v []*IPCodeAdvertisingInfo) *QueryIpCodeinfoResponse {
	s.AdInfoList = v
	return s
}

func (s *QueryIpCodeinfoResponse) SetIpownerInfo(v *IPCodeIpOwnerInfo) *QueryIpCodeinfoResponse {
	s.IpownerInfo = v
	return s
}

func (s *QueryIpCodeinfoResponse) SetIpCodeStatus(v int64) *QueryIpCodeinfoResponse {
	s.IpCodeStatus = &v
	return s
}

func (s *QueryIpCodeinfoResponse) SetShowCodePrefix(v string) *QueryIpCodeinfoResponse {
	s.ShowCodePrefix = &v
	return s
}

func (s *QueryIpCodeinfoResponse) SetExtInfo(v string) *QueryIpCodeinfoResponse {
	s.ExtInfo = &v
	return s
}

type BatchqueryIpApprovalwithupdateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础字段
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// ip名称
	IpName *string `json:"ip_name,omitempty" xml:"ip_name,omitempty"`
	// ip的id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty"`
	// ip审批状态 0待审批，1 审批通过，2 审批拒绝
	ApprovalStatus *int64 `json:"approval_status,omitempty" xml:"approval_status,omitempty"`
	// 分页
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 分页
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// ip类型
	IpType *string `json:"ip_type,omitempty" xml:"ip_type,omitempty"`
	// 受众人群
	AudienceGroup *string `json:"audience_group,omitempty" xml:"audience_group,omitempty"`
	// 开始时间
	CreateBeginTime *string `json:"create_begin_time,omitempty" xml:"create_begin_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 结束时间
	CreateEndTime *string `json:"create_end_time,omitempty" xml:"create_end_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 商品的链上租户id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 是否需要按照创建时间倒序排序
	//
	IsCreateTimeSortDesc *bool `json:"is_create_time_sort_desc,omitempty" xml:"is_create_time_sort_desc,omitempty" require:"true"`
	// 渠道名称
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty"`
}

func (s BatchqueryIpApprovalwithupdateRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpApprovalwithupdateRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryIpApprovalwithupdateRequest) SetAuthToken(v string) *BatchqueryIpApprovalwithupdateRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateRequest) SetProductInstanceId(v string) *BatchqueryIpApprovalwithupdateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateRequest) SetBaseRequest(v *BaseRequestInfo) *BatchqueryIpApprovalwithupdateRequest {
	s.BaseRequest = v
	return s
}

func (s *BatchqueryIpApprovalwithupdateRequest) SetIpName(v string) *BatchqueryIpApprovalwithupdateRequest {
	s.IpName = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateRequest) SetIpId(v string) *BatchqueryIpApprovalwithupdateRequest {
	s.IpId = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateRequest) SetApprovalStatus(v int64) *BatchqueryIpApprovalwithupdateRequest {
	s.ApprovalStatus = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateRequest) SetPageSize(v int64) *BatchqueryIpApprovalwithupdateRequest {
	s.PageSize = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateRequest) SetPageIndex(v int64) *BatchqueryIpApprovalwithupdateRequest {
	s.PageIndex = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateRequest) SetIpType(v string) *BatchqueryIpApprovalwithupdateRequest {
	s.IpType = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateRequest) SetAudienceGroup(v string) *BatchqueryIpApprovalwithupdateRequest {
	s.AudienceGroup = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateRequest) SetCreateBeginTime(v string) *BatchqueryIpApprovalwithupdateRequest {
	s.CreateBeginTime = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateRequest) SetCreateEndTime(v string) *BatchqueryIpApprovalwithupdateRequest {
	s.CreateEndTime = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateRequest) SetAccountId(v string) *BatchqueryIpApprovalwithupdateRequest {
	s.AccountId = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateRequest) SetIsCreateTimeSortDesc(v bool) *BatchqueryIpApprovalwithupdateRequest {
	s.IsCreateTimeSortDesc = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateRequest) SetChannelName(v string) *BatchqueryIpApprovalwithupdateRequest {
	s.ChannelName = &v
	return s
}

type BatchqueryIpApprovalwithupdateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 带上更新信息
	IpList []*IpBasicInfoWithUpdate `json:"ip_list,omitempty" xml:"ip_list,omitempty" type:"Repeated"`
	// 总数
	AllCount *int64 `json:"all_count,omitempty" xml:"all_count,omitempty"`
}

func (s BatchqueryIpApprovalwithupdateResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpApprovalwithupdateResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryIpApprovalwithupdateResponse) SetReqMsgId(v string) *BatchqueryIpApprovalwithupdateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateResponse) SetResultCode(v string) *BatchqueryIpApprovalwithupdateResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateResponse) SetResultMsg(v string) *BatchqueryIpApprovalwithupdateResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryIpApprovalwithupdateResponse) SetIpList(v []*IpBasicInfoWithUpdate) *BatchqueryIpApprovalwithupdateResponse {
	s.IpList = v
	return s
}

func (s *BatchqueryIpApprovalwithupdateResponse) SetAllCount(v int64) *BatchqueryIpApprovalwithupdateResponse {
	s.AllCount = &v
	return s
}

type UpdateIpAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 链上账户id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 商户账户名称
	MerchantAliasName *string `json:"merchant_alias_name,omitempty" xml:"merchant_alias_name,omitempty"`
	// 商户类型(本期仅支持: 1:企业, 6:个人商户)
	MerchantType *int64 `json:"merchant_type,omitempty" xml:"merchant_type,omitempty"`
	// 商户证件类型，201--统一社会信用证--营业执照号；
	MerchantCertType *int64 `json:"merchant_cert_type,omitempty" xml:"merchant_cert_type,omitempty"`
	// 本期支持统一社会信用证代码
	MerchantCertNumber *string `json:"merchant_cert_number,omitempty" xml:"merchant_cert_number,omitempty"`
	// 联系人信息
	ContactInfo *IPContactInfo `json:"contact_info,omitempty" xml:"contact_info,omitempty"`
	// 商户经营地址
	ContactAddress *IPAddressInfo `json:"contact_address,omitempty" xml:"contact_address,omitempty"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 店铺名称
	ShopName *string `json:"shop_name,omitempty" xml:"shop_name,omitempty"`
	// 更多联系信息，用于运营联系商家
	// 注：更新时如果为空，则联系人信息被覆盖为空，更新时为空相当于删除功能
	AdditionalContactInfo []*SimpleContactInfo `json:"additional_contact_info,omitempty" xml:"additional_contact_info,omitempty" type:"Repeated"`
}

func (s UpdateIpAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateIpAccountRequest) GoString() string {
	return s.String()
}

func (s *UpdateIpAccountRequest) SetAuthToken(v string) *UpdateIpAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateIpAccountRequest) SetProductInstanceId(v string) *UpdateIpAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateIpAccountRequest) SetBaseRequest(v *BaseRequestInfo) *UpdateIpAccountRequest {
	s.BaseRequest = v
	return s
}

func (s *UpdateIpAccountRequest) SetAccountId(v string) *UpdateIpAccountRequest {
	s.AccountId = &v
	return s
}

func (s *UpdateIpAccountRequest) SetMerchantAliasName(v string) *UpdateIpAccountRequest {
	s.MerchantAliasName = &v
	return s
}

func (s *UpdateIpAccountRequest) SetMerchantType(v int64) *UpdateIpAccountRequest {
	s.MerchantType = &v
	return s
}

func (s *UpdateIpAccountRequest) SetMerchantCertType(v int64) *UpdateIpAccountRequest {
	s.MerchantCertType = &v
	return s
}

func (s *UpdateIpAccountRequest) SetMerchantCertNumber(v string) *UpdateIpAccountRequest {
	s.MerchantCertNumber = &v
	return s
}

func (s *UpdateIpAccountRequest) SetContactInfo(v *IPContactInfo) *UpdateIpAccountRequest {
	s.ContactInfo = v
	return s
}

func (s *UpdateIpAccountRequest) SetContactAddress(v *IPAddressInfo) *UpdateIpAccountRequest {
	s.ContactAddress = v
	return s
}

func (s *UpdateIpAccountRequest) SetMemo(v string) *UpdateIpAccountRequest {
	s.Memo = &v
	return s
}

func (s *UpdateIpAccountRequest) SetShopName(v string) *UpdateIpAccountRequest {
	s.ShopName = &v
	return s
}

func (s *UpdateIpAccountRequest) SetAdditionalContactInfo(v []*SimpleContactInfo) *UpdateIpAccountRequest {
	s.AdditionalContactInfo = v
	return s
}

type UpdateIpAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateIpAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateIpAccountResponse) GoString() string {
	return s.String()
}

func (s *UpdateIpAccountResponse) SetReqMsgId(v string) *UpdateIpAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateIpAccountResponse) SetResultCode(v string) *UpdateIpAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateIpAccountResponse) SetResultMsg(v string) *UpdateIpAccountResponse {
	s.ResultMsg = &v
	return s
}

type QueryIpAccountsettlementRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 版权方的链上id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 为空，返回所有数据，true，返回入驻数据，false，返回未入驻数据
	IsFiltered *bool `json:"is_filtered,omitempty" xml:"is_filtered,omitempty"`
}

func (s QueryIpAccountsettlementRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpAccountsettlementRequest) GoString() string {
	return s.String()
}

func (s *QueryIpAccountsettlementRequest) SetAuthToken(v string) *QueryIpAccountsettlementRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpAccountsettlementRequest) SetProductInstanceId(v string) *QueryIpAccountsettlementRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpAccountsettlementRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpAccountsettlementRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpAccountsettlementRequest) SetAccountId(v string) *QueryIpAccountsettlementRequest {
	s.AccountId = &v
	return s
}

func (s *QueryIpAccountsettlementRequest) SetIsFiltered(v bool) *QueryIpAccountsettlementRequest {
	s.IsFiltered = &v
	return s
}

type QueryIpAccountsettlementResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 账号id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 入驻的渠道列表
	ChannelList []*AccountInChannels `json:"channel_list,omitempty" xml:"channel_list,omitempty" type:"Repeated"`
}

func (s QueryIpAccountsettlementResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpAccountsettlementResponse) GoString() string {
	return s.String()
}

func (s *QueryIpAccountsettlementResponse) SetReqMsgId(v string) *QueryIpAccountsettlementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpAccountsettlementResponse) SetResultCode(v string) *QueryIpAccountsettlementResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpAccountsettlementResponse) SetResultMsg(v string) *QueryIpAccountsettlementResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpAccountsettlementResponse) SetAccountId(v string) *QueryIpAccountsettlementResponse {
	s.AccountId = &v
	return s
}

func (s *QueryIpAccountsettlementResponse) SetChannelList(v []*AccountInChannels) *QueryIpAccountsettlementResponse {
	s.ChannelList = v
	return s
}

type AddIpAccountsettlementRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 版权方id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 要开通的渠道
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
}

func (s AddIpAccountsettlementRequest) String() string {
	return tea.Prettify(s)
}

func (s AddIpAccountsettlementRequest) GoString() string {
	return s.String()
}

func (s *AddIpAccountsettlementRequest) SetAuthToken(v string) *AddIpAccountsettlementRequest {
	s.AuthToken = &v
	return s
}

func (s *AddIpAccountsettlementRequest) SetProductInstanceId(v string) *AddIpAccountsettlementRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddIpAccountsettlementRequest) SetBaseRequest(v *BaseRequestInfo) *AddIpAccountsettlementRequest {
	s.BaseRequest = v
	return s
}

func (s *AddIpAccountsettlementRequest) SetAccountId(v string) *AddIpAccountsettlementRequest {
	s.AccountId = &v
	return s
}

func (s *AddIpAccountsettlementRequest) SetChannelName(v string) *AddIpAccountsettlementRequest {
	s.ChannelName = &v
	return s
}

type AddIpAccountsettlementResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddIpAccountsettlementResponse) String() string {
	return tea.Prettify(s)
}

func (s AddIpAccountsettlementResponse) GoString() string {
	return s.String()
}

func (s *AddIpAccountsettlementResponse) SetReqMsgId(v string) *AddIpAccountsettlementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddIpAccountsettlementResponse) SetResultCode(v string) *AddIpAccountsettlementResponse {
	s.ResultCode = &v
	return s
}

func (s *AddIpAccountsettlementResponse) SetResultMsg(v string) *AddIpAccountsettlementResponse {
	s.ResultMsg = &v
	return s
}

type SignIpOrdercontractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 订单合同文件OSS文件key
	ContractFileUrl *string `json:"contract_file_url,omitempty" xml:"contract_file_url,omitempty"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s SignIpOrdercontractRequest) String() string {
	return tea.Prettify(s)
}

func (s SignIpOrdercontractRequest) GoString() string {
	return s.String()
}

func (s *SignIpOrdercontractRequest) SetAuthToken(v string) *SignIpOrdercontractRequest {
	s.AuthToken = &v
	return s
}

func (s *SignIpOrdercontractRequest) SetProductInstanceId(v string) *SignIpOrdercontractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SignIpOrdercontractRequest) SetBaseRequest(v *BaseRequestInfo) *SignIpOrdercontractRequest {
	s.BaseRequest = v
	return s
}

func (s *SignIpOrdercontractRequest) SetIpOrderId(v string) *SignIpOrdercontractRequest {
	s.IpOrderId = &v
	return s
}

func (s *SignIpOrdercontractRequest) SetContractFileUrl(v string) *SignIpOrdercontractRequest {
	s.ContractFileUrl = &v
	return s
}

func (s *SignIpOrdercontractRequest) SetMemo(v string) *SignIpOrdercontractRequest {
	s.Memo = &v
	return s
}

type SignIpOrdercontractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 签署完成的文件OSS key。只有在签署流程全部完成后才会返回该数据。
	SignedContractFile *string `json:"signed_contract_file,omitempty" xml:"signed_contract_file,omitempty"`
	// 签署完成的文件下载链接。只有在签署流程全部完成后才会返回该数据。
	SignedContractFileUrl *string `json:"signed_contract_file_url,omitempty" xml:"signed_contract_file_url,omitempty"`
}

func (s SignIpOrdercontractResponse) String() string {
	return tea.Prettify(s)
}

func (s SignIpOrdercontractResponse) GoString() string {
	return s.String()
}

func (s *SignIpOrdercontractResponse) SetReqMsgId(v string) *SignIpOrdercontractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SignIpOrdercontractResponse) SetResultCode(v string) *SignIpOrdercontractResponse {
	s.ResultCode = &v
	return s
}

func (s *SignIpOrdercontractResponse) SetResultMsg(v string) *SignIpOrdercontractResponse {
	s.ResultMsg = &v
	return s
}

func (s *SignIpOrdercontractResponse) SetSignedContractFile(v string) *SignIpOrdercontractResponse {
	s.SignedContractFile = &v
	return s
}

func (s *SignIpOrdercontractResponse) SetSignedContractFileUrl(v string) *SignIpOrdercontractResponse {
	s.SignedContractFileUrl = &v
	return s
}

type SetIpOrdergoodsidsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 商品ID列表
	GoodsIdList []*string `json:"goods_id_list,omitempty" xml:"goods_id_list,omitempty" require:"true" type:"Repeated"`
}

func (s SetIpOrdergoodsidsRequest) String() string {
	return tea.Prettify(s)
}

func (s SetIpOrdergoodsidsRequest) GoString() string {
	return s.String()
}

func (s *SetIpOrdergoodsidsRequest) SetAuthToken(v string) *SetIpOrdergoodsidsRequest {
	s.AuthToken = &v
	return s
}

func (s *SetIpOrdergoodsidsRequest) SetProductInstanceId(v string) *SetIpOrdergoodsidsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetIpOrdergoodsidsRequest) SetBaseRequest(v *BaseRequestInfo) *SetIpOrdergoodsidsRequest {
	s.BaseRequest = v
	return s
}

func (s *SetIpOrdergoodsidsRequest) SetIpOrderId(v string) *SetIpOrdergoodsidsRequest {
	s.IpOrderId = &v
	return s
}

func (s *SetIpOrdergoodsidsRequest) SetGoodsIdList(v []*string) *SetIpOrdergoodsidsRequest {
	s.GoodsIdList = v
	return s
}

type SetIpOrdergoodsidsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetIpOrdergoodsidsResponse) String() string {
	return tea.Prettify(s)
}

func (s SetIpOrdergoodsidsResponse) GoString() string {
	return s.String()
}

func (s *SetIpOrdergoodsidsResponse) SetReqMsgId(v string) *SetIpOrdergoodsidsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetIpOrdergoodsidsResponse) SetResultCode(v string) *SetIpOrdergoodsidsResponse {
	s.ResultCode = &v
	return s
}

func (s *SetIpOrdergoodsidsResponse) SetResultMsg(v string) *SetIpOrdergoodsidsResponse {
	s.ResultMsg = &v
	return s
}

type PagequeryIpSalesbydayRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty" require:"true"`
	// 每页数据量大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 订单ID筛选条件
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
	// 日期
	Date *string `json:"date,omitempty" xml:"date,omitempty"`
}

func (s PagequeryIpSalesbydayRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpSalesbydayRequest) GoString() string {
	return s.String()
}

func (s *PagequeryIpSalesbydayRequest) SetAuthToken(v string) *PagequeryIpSalesbydayRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryIpSalesbydayRequest) SetProductInstanceId(v string) *PagequeryIpSalesbydayRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PagequeryIpSalesbydayRequest) SetBaseRequest(v *BaseRequestInfo) *PagequeryIpSalesbydayRequest {
	s.BaseRequest = v
	return s
}

func (s *PagequeryIpSalesbydayRequest) SetPageNumber(v int64) *PagequeryIpSalesbydayRequest {
	s.PageNumber = &v
	return s
}

func (s *PagequeryIpSalesbydayRequest) SetPageSize(v int64) *PagequeryIpSalesbydayRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryIpSalesbydayRequest) SetIpOrderId(v string) *PagequeryIpSalesbydayRequest {
	s.IpOrderId = &v
	return s
}

func (s *PagequeryIpSalesbydayRequest) SetDate(v string) *PagequeryIpSalesbydayRequest {
	s.Date = &v
	return s
}

type PagequeryIpSalesbydayResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 页面数据量大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 数据总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// T+1日的销售数据统计数据列表
	SalesBDayList []*SalesByDay `json:"sales_b_day_list,omitempty" xml:"sales_b_day_list,omitempty" type:"Repeated"`
}

func (s PagequeryIpSalesbydayResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpSalesbydayResponse) GoString() string {
	return s.String()
}

func (s *PagequeryIpSalesbydayResponse) SetReqMsgId(v string) *PagequeryIpSalesbydayResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryIpSalesbydayResponse) SetResultCode(v string) *PagequeryIpSalesbydayResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryIpSalesbydayResponse) SetResultMsg(v string) *PagequeryIpSalesbydayResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryIpSalesbydayResponse) SetPageNumber(v int64) *PagequeryIpSalesbydayResponse {
	s.PageNumber = &v
	return s
}

func (s *PagequeryIpSalesbydayResponse) SetPageSize(v int64) *PagequeryIpSalesbydayResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryIpSalesbydayResponse) SetTotalCount(v int64) *PagequeryIpSalesbydayResponse {
	s.TotalCount = &v
	return s
}

func (s *PagequeryIpSalesbydayResponse) SetSalesBDayList(v []*SalesByDay) *PagequeryIpSalesbydayResponse {
	s.SalesBDayList = v
	return s
}

type CreateIpCopyrightRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 【暂不支持中文】文件名称
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true"`
	// 文件oss地址
	FileUrl *string `json:"file_url,omitempty" xml:"file_url,omitempty" require:"true"`
	// 文件类型，IMAGE：图片文件；TEXT：文本文件；VIDEO：视屏；AUDIO：音频；ZIP：压缩包；FILE：其他文件
	FileType *string `json:"file_type,omitempty" xml:"file_type,omitempty" require:"true"`
	// 【需要真实的】版权方法人证件名称
	CertName *string `json:"cert_name,omitempty" xml:"cert_name,omitempty" require:"true"`
	// 证件类型
	CertType *string `json:"cert_type,omitempty" xml:"cert_type,omitempty" require:"true"`
	// 【需要真实的】版权方法人证件号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 是否创建证书，此时默认选true
	CreateCertificate *bool `json:"create_certificate,omitempty" xml:"create_certificate,omitempty" require:"true"`
	// 证书类型，公证处证书，值为NotaryOffice
	CertificateType *string `json:"certificate_type,omitempty" xml:"certificate_type,omitempty"`
	// 是否创建证据包，默认选否，如果没有创建公证书，不支持证据包
	CertificatePackage *bool `json:"certificate_package,omitempty" xml:"certificate_package,omitempty"`
	// 公证处ID，默认为LUJIANG，鹭江公证处
	OrgId *string `json:"org_id,omitempty" xml:"org_id,omitempty"`
	// 电话号码，生成公证处证书需要，格式范例，(86-573)2651630或(86)13738258505
	PhoneNum *string `json:"phone_num,omitempty" xml:"phone_num,omitempty"`
	// 备注，最长不超过512字符
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s CreateIpCopyrightRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIpCopyrightRequest) GoString() string {
	return s.String()
}

func (s *CreateIpCopyrightRequest) SetAuthToken(v string) *CreateIpCopyrightRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateIpCopyrightRequest) SetProductInstanceId(v string) *CreateIpCopyrightRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateIpCopyrightRequest) SetBaseRequest(v *BaseRequestInfo) *CreateIpCopyrightRequest {
	s.BaseRequest = v
	return s
}

func (s *CreateIpCopyrightRequest) SetFileName(v string) *CreateIpCopyrightRequest {
	s.FileName = &v
	return s
}

func (s *CreateIpCopyrightRequest) SetFileUrl(v string) *CreateIpCopyrightRequest {
	s.FileUrl = &v
	return s
}

func (s *CreateIpCopyrightRequest) SetFileType(v string) *CreateIpCopyrightRequest {
	s.FileType = &v
	return s
}

func (s *CreateIpCopyrightRequest) SetCertName(v string) *CreateIpCopyrightRequest {
	s.CertName = &v
	return s
}

func (s *CreateIpCopyrightRequest) SetCertType(v string) *CreateIpCopyrightRequest {
	s.CertType = &v
	return s
}

func (s *CreateIpCopyrightRequest) SetCertNo(v string) *CreateIpCopyrightRequest {
	s.CertNo = &v
	return s
}

func (s *CreateIpCopyrightRequest) SetCreateCertificate(v bool) *CreateIpCopyrightRequest {
	s.CreateCertificate = &v
	return s
}

func (s *CreateIpCopyrightRequest) SetCertificateType(v string) *CreateIpCopyrightRequest {
	s.CertificateType = &v
	return s
}

func (s *CreateIpCopyrightRequest) SetCertificatePackage(v bool) *CreateIpCopyrightRequest {
	s.CertificatePackage = &v
	return s
}

func (s *CreateIpCopyrightRequest) SetOrgId(v string) *CreateIpCopyrightRequest {
	s.OrgId = &v
	return s
}

func (s *CreateIpCopyrightRequest) SetPhoneNum(v string) *CreateIpCopyrightRequest {
	s.PhoneNum = &v
	return s
}

func (s *CreateIpCopyrightRequest) SetMemo(v string) *CreateIpCopyrightRequest {
	s.Memo = &v
	return s
}

type CreateIpCopyrightResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 版权登记id
	CopyrightRegisterId *string `json:"copyright_register_id,omitempty" xml:"copyright_register_id,omitempty"`
}

func (s CreateIpCopyrightResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIpCopyrightResponse) GoString() string {
	return s.String()
}

func (s *CreateIpCopyrightResponse) SetReqMsgId(v string) *CreateIpCopyrightResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateIpCopyrightResponse) SetResultCode(v string) *CreateIpCopyrightResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateIpCopyrightResponse) SetResultMsg(v string) *CreateIpCopyrightResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateIpCopyrightResponse) SetCopyrightRegisterId(v string) *CreateIpCopyrightResponse {
	s.CopyrightRegisterId = &v
	return s
}

type QueryIpCopyrightRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 版权登记id
	CopyrightRegisterId *string `json:"copyright_register_id,omitempty" xml:"copyright_register_id,omitempty" require:"true"`
}

func (s QueryIpCopyrightRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpCopyrightRequest) GoString() string {
	return s.String()
}

func (s *QueryIpCopyrightRequest) SetAuthToken(v string) *QueryIpCopyrightRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpCopyrightRequest) SetProductInstanceId(v string) *QueryIpCopyrightRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpCopyrightRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpCopyrightRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpCopyrightRequest) SetCopyrightRegisterId(v string) *QueryIpCopyrightRequest {
	s.CopyrightRegisterId = &v
	return s
}

type QueryIpCopyrightResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证状态，PROCESSING：存证中；SUCCESS：存证成功；FAIL：存证失败
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 文件hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
	// 存证交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 存证块高
	BlockHeight *int64 `json:"block_height,omitempty" xml:"block_height,omitempty"`
	// 存证时间
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// 证书oss地址
	CertificateOss *string `json:"certificate_oss,omitempty" xml:"certificate_oss,omitempty"`
	// 证书下载链接
	CertificateDownurl *string `json:"certificate_downurl,omitempty" xml:"certificate_downurl,omitempty"`
	// 公证处证书编号
	CertificateNo *string `json:"certificate_no,omitempty" xml:"certificate_no,omitempty"`
}

func (s QueryIpCopyrightResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpCopyrightResponse) GoString() string {
	return s.String()
}

func (s *QueryIpCopyrightResponse) SetReqMsgId(v string) *QueryIpCopyrightResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpCopyrightResponse) SetResultCode(v string) *QueryIpCopyrightResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpCopyrightResponse) SetResultMsg(v string) *QueryIpCopyrightResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpCopyrightResponse) SetStatus(v string) *QueryIpCopyrightResponse {
	s.Status = &v
	return s
}

func (s *QueryIpCopyrightResponse) SetHash(v string) *QueryIpCopyrightResponse {
	s.Hash = &v
	return s
}

func (s *QueryIpCopyrightResponse) SetTxHash(v string) *QueryIpCopyrightResponse {
	s.TxHash = &v
	return s
}

func (s *QueryIpCopyrightResponse) SetBlockHeight(v int64) *QueryIpCopyrightResponse {
	s.BlockHeight = &v
	return s
}

func (s *QueryIpCopyrightResponse) SetTimestamp(v int64) *QueryIpCopyrightResponse {
	s.Timestamp = &v
	return s
}

func (s *QueryIpCopyrightResponse) SetCertificateOss(v string) *QueryIpCopyrightResponse {
	s.CertificateOss = &v
	return s
}

func (s *QueryIpCopyrightResponse) SetCertificateDownurl(v string) *QueryIpCopyrightResponse {
	s.CertificateDownurl = &v
	return s
}

func (s *QueryIpCopyrightResponse) SetCertificateNo(v string) *QueryIpCopyrightResponse {
	s.CertificateNo = &v
	return s
}

type SetIpOrdermemoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
	// 更新订单功能 0 基础功能，1 领用收藏，2持有流转等
	Features []*int64 `json:"features,omitempty" xml:"features,omitempty" type:"Repeated"`
	// 订单ID列表-更新订单功能使用
	OrderIds []*string `json:"order_ids,omitempty" xml:"order_ids,omitempty" type:"Repeated"`
}

func (s SetIpOrdermemoRequest) String() string {
	return tea.Prettify(s)
}

func (s SetIpOrdermemoRequest) GoString() string {
	return s.String()
}

func (s *SetIpOrdermemoRequest) SetAuthToken(v string) *SetIpOrdermemoRequest {
	s.AuthToken = &v
	return s
}

func (s *SetIpOrdermemoRequest) SetProductInstanceId(v string) *SetIpOrdermemoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetIpOrdermemoRequest) SetBaseRequest(v *BaseRequestInfo) *SetIpOrdermemoRequest {
	s.BaseRequest = v
	return s
}

func (s *SetIpOrdermemoRequest) SetIpOrderId(v string) *SetIpOrdermemoRequest {
	s.IpOrderId = &v
	return s
}

func (s *SetIpOrdermemoRequest) SetMemo(v string) *SetIpOrdermemoRequest {
	s.Memo = &v
	return s
}

func (s *SetIpOrdermemoRequest) SetFeatures(v []*int64) *SetIpOrdermemoRequest {
	s.Features = v
	return s
}

func (s *SetIpOrdermemoRequest) SetOrderIds(v []*string) *SetIpOrdermemoRequest {
	s.OrderIds = v
	return s
}

type SetIpOrdermemoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetIpOrdermemoResponse) String() string {
	return tea.Prettify(s)
}

func (s SetIpOrdermemoResponse) GoString() string {
	return s.String()
}

func (s *SetIpOrdermemoResponse) SetReqMsgId(v string) *SetIpOrdermemoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetIpOrdermemoResponse) SetResultCode(v string) *SetIpOrdermemoResponse {
	s.ResultCode = &v
	return s
}

func (s *SetIpOrdermemoResponse) SetResultMsg(v string) *SetIpOrdermemoResponse {
	s.ResultMsg = &v
	return s
}

type ConfirmIpAccountsettlementRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 版权方的链上id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 开通的渠道名称
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 审批意见，refuse,不同意开通，agree，同意开通，默认为agree，本期暂不支持不同意开通
	ApproveComment *string `json:"approve_comment,omitempty" xml:"approve_comment,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s ConfirmIpAccountsettlementRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpAccountsettlementRequest) GoString() string {
	return s.String()
}

func (s *ConfirmIpAccountsettlementRequest) SetAuthToken(v string) *ConfirmIpAccountsettlementRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmIpAccountsettlementRequest) SetProductInstanceId(v string) *ConfirmIpAccountsettlementRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmIpAccountsettlementRequest) SetBaseRequest(v *BaseRequestInfo) *ConfirmIpAccountsettlementRequest {
	s.BaseRequest = v
	return s
}

func (s *ConfirmIpAccountsettlementRequest) SetAccountId(v string) *ConfirmIpAccountsettlementRequest {
	s.AccountId = &v
	return s
}

func (s *ConfirmIpAccountsettlementRequest) SetChannelName(v string) *ConfirmIpAccountsettlementRequest {
	s.ChannelName = &v
	return s
}

func (s *ConfirmIpAccountsettlementRequest) SetApproveComment(v string) *ConfirmIpAccountsettlementRequest {
	s.ApproveComment = &v
	return s
}

func (s *ConfirmIpAccountsettlementRequest) SetMemo(v string) *ConfirmIpAccountsettlementRequest {
	s.Memo = &v
	return s
}

type ConfirmIpAccountsettlementResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ConfirmIpAccountsettlementResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpAccountsettlementResponse) GoString() string {
	return s.String()
}

func (s *ConfirmIpAccountsettlementResponse) SetReqMsgId(v string) *ConfirmIpAccountsettlementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmIpAccountsettlementResponse) SetResultCode(v string) *ConfirmIpAccountsettlementResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmIpAccountsettlementResponse) SetResultMsg(v string) *ConfirmIpAccountsettlementResponse {
	s.ResultMsg = &v
	return s
}

type PagequeryIpSalesRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单ID。和账单ID 两个字段只能选填一个
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 销售数据ID
	SalesBizId *string `json:"sales_biz_id,omitempty" xml:"sales_biz_id,omitempty" require:"true"`
	// 排序字段
	OrderBy *string `json:"order_by,omitempty" xml:"order_by,omitempty" require:"true"`
	// 排序顺序：正序还是倒序
	Order *string `json:"order,omitempty" xml:"order,omitempty" require:"true"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty" require:"true"`
	// 每页数据量大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s PagequeryIpSalesRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpSalesRequest) GoString() string {
	return s.String()
}

func (s *PagequeryIpSalesRequest) SetAuthToken(v string) *PagequeryIpSalesRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryIpSalesRequest) SetProductInstanceId(v string) *PagequeryIpSalesRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PagequeryIpSalesRequest) SetBaseRequest(v *BaseRequestInfo) *PagequeryIpSalesRequest {
	s.BaseRequest = v
	return s
}

func (s *PagequeryIpSalesRequest) SetIpOrderId(v string) *PagequeryIpSalesRequest {
	s.IpOrderId = &v
	return s
}

func (s *PagequeryIpSalesRequest) SetSalesBizId(v string) *PagequeryIpSalesRequest {
	s.SalesBizId = &v
	return s
}

func (s *PagequeryIpSalesRequest) SetOrderBy(v string) *PagequeryIpSalesRequest {
	s.OrderBy = &v
	return s
}

func (s *PagequeryIpSalesRequest) SetOrder(v string) *PagequeryIpSalesRequest {
	s.Order = &v
	return s
}

func (s *PagequeryIpSalesRequest) SetPageNumber(v int64) *PagequeryIpSalesRequest {
	s.PageNumber = &v
	return s
}

func (s *PagequeryIpSalesRequest) SetPageSize(v int64) *PagequeryIpSalesRequest {
	s.PageSize = &v
	return s
}

type PagequeryIpSalesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
	// 账单ID
	SalesBizId *string `json:"sales_biz_id,omitempty" xml:"sales_biz_id,omitempty"`
	// IP授权销售数据
	IpSalesInfoList []*IPSalesInfo `json:"ip_sales_info_list,omitempty" xml:"ip_sales_info_list,omitempty" type:"Repeated"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 销售数据总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s PagequeryIpSalesResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpSalesResponse) GoString() string {
	return s.String()
}

func (s *PagequeryIpSalesResponse) SetReqMsgId(v string) *PagequeryIpSalesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryIpSalesResponse) SetResultCode(v string) *PagequeryIpSalesResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryIpSalesResponse) SetResultMsg(v string) *PagequeryIpSalesResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryIpSalesResponse) SetIpOrderId(v string) *PagequeryIpSalesResponse {
	s.IpOrderId = &v
	return s
}

func (s *PagequeryIpSalesResponse) SetSalesBizId(v string) *PagequeryIpSalesResponse {
	s.SalesBizId = &v
	return s
}

func (s *PagequeryIpSalesResponse) SetIpSalesInfoList(v []*IPSalesInfo) *PagequeryIpSalesResponse {
	s.IpSalesInfoList = v
	return s
}

func (s *PagequeryIpSalesResponse) SetPageNumber(v int64) *PagequeryIpSalesResponse {
	s.PageNumber = &v
	return s
}

func (s *PagequeryIpSalesResponse) SetPageSize(v int64) *PagequeryIpSalesResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryIpSalesResponse) SetTotalCount(v int64) *PagequeryIpSalesResponse {
	s.TotalCount = &v
	return s
}

type BatchqueryIpAccountsettlementRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 渠道名称
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 申请状态，0为全部，1为待审核，2为已审核
	ApplyStatus *string `json:"apply_status,omitempty" xml:"apply_status,omitempty" require:"true"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 分页索引
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s BatchqueryIpAccountsettlementRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpAccountsettlementRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryIpAccountsettlementRequest) SetAuthToken(v string) *BatchqueryIpAccountsettlementRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryIpAccountsettlementRequest) SetProductInstanceId(v string) *BatchqueryIpAccountsettlementRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchqueryIpAccountsettlementRequest) SetBaseRequest(v *BaseRequestInfo) *BatchqueryIpAccountsettlementRequest {
	s.BaseRequest = v
	return s
}

func (s *BatchqueryIpAccountsettlementRequest) SetChannelName(v string) *BatchqueryIpAccountsettlementRequest {
	s.ChannelName = &v
	return s
}

func (s *BatchqueryIpAccountsettlementRequest) SetApplyStatus(v string) *BatchqueryIpAccountsettlementRequest {
	s.ApplyStatus = &v
	return s
}

func (s *BatchqueryIpAccountsettlementRequest) SetPageSize(v int64) *BatchqueryIpAccountsettlementRequest {
	s.PageSize = &v
	return s
}

func (s *BatchqueryIpAccountsettlementRequest) SetPageIndex(v int64) *BatchqueryIpAccountsettlementRequest {
	s.PageIndex = &v
	return s
}

func (s *BatchqueryIpAccountsettlementRequest) SetMemo(v string) *BatchqueryIpAccountsettlementRequest {
	s.Memo = &v
	return s
}

type BatchqueryIpAccountsettlementResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 渠道对应的版权方信息
	AccountInfo []*AccountSettlementInfo `json:"account_info,omitempty" xml:"account_info,omitempty" type:"Repeated"`
	// 结果总数，不是列表值，用于分页
	AllCount *int64 `json:"all_count,omitempty" xml:"all_count,omitempty"`
}

func (s BatchqueryIpAccountsettlementResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpAccountsettlementResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryIpAccountsettlementResponse) SetReqMsgId(v string) *BatchqueryIpAccountsettlementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryIpAccountsettlementResponse) SetResultCode(v string) *BatchqueryIpAccountsettlementResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryIpAccountsettlementResponse) SetResultMsg(v string) *BatchqueryIpAccountsettlementResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryIpAccountsettlementResponse) SetAccountInfo(v []*AccountSettlementInfo) *BatchqueryIpAccountsettlementResponse {
	s.AccountInfo = v
	return s
}

func (s *BatchqueryIpAccountsettlementResponse) SetAllCount(v int64) *BatchqueryIpAccountsettlementResponse {
	s.AllCount = &v
	return s
}

type PullIpCodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 数字凭证批次编码
	CodeBatchId *string `json:"code_batch_id,omitempty" xml:"code_batch_id,omitempty" require:"true"`
	// 分页参数:页码
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// 分页参数:每页条目数(请小于等于100)
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s PullIpCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s PullIpCodeRequest) GoString() string {
	return s.String()
}

func (s *PullIpCodeRequest) SetAuthToken(v string) *PullIpCodeRequest {
	s.AuthToken = &v
	return s
}

func (s *PullIpCodeRequest) SetProductInstanceId(v string) *PullIpCodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PullIpCodeRequest) SetBaseRequest(v *BaseRequestInfo) *PullIpCodeRequest {
	s.BaseRequest = v
	return s
}

func (s *PullIpCodeRequest) SetCodeBatchId(v string) *PullIpCodeRequest {
	s.CodeBatchId = &v
	return s
}

func (s *PullIpCodeRequest) SetPageIndex(v int64) *PullIpCodeRequest {
	s.PageIndex = &v
	return s
}

func (s *PullIpCodeRequest) SetPageSize(v int64) *PullIpCodeRequest {
	s.PageSize = &v
	return s
}

type PullIpCodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数字凭证列表(小程序扫描可跳转)
	CodeList []*string `json:"code_list,omitempty" xml:"code_list,omitempty" type:"Repeated"`
	// 展示码列表(和code_list一一对应)
	ShowCodeList []*string `json:"show_code_list,omitempty" xml:"show_code_list,omitempty" type:"Repeated"`
	// 交易订单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// IP商家的链上账户ID
	BuyerAccountId *string `json:"buyer_account_id,omitempty" xml:"buyer_account_id,omitempty"`
	// IP版权方的链上账户ID
	SellerAccountId *string `json:"seller_account_id,omitempty" xml:"seller_account_id,omitempty"`
	// IPID
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty"`
	// IP名称
	IpName *string `json:"ip_name,omitempty" xml:"ip_name,omitempty"`
	// IP主图的OSS地址
	IpImage *string `json:"ip_image,omitempty" xml:"ip_image,omitempty"`
	// IP描述
	IpDesc *string `json:"ip_desc,omitempty" xml:"ip_desc,omitempty"`
	// 该批次数字凭证的过期时间戳(毫秒)
	ExpiredDate *int64 `json:"expired_date,omitempty" xml:"expired_date,omitempty"`
	// 已经申请的总数量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s PullIpCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s PullIpCodeResponse) GoString() string {
	return s.String()
}

func (s *PullIpCodeResponse) SetReqMsgId(v string) *PullIpCodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PullIpCodeResponse) SetResultCode(v string) *PullIpCodeResponse {
	s.ResultCode = &v
	return s
}

func (s *PullIpCodeResponse) SetResultMsg(v string) *PullIpCodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *PullIpCodeResponse) SetCodeList(v []*string) *PullIpCodeResponse {
	s.CodeList = v
	return s
}

func (s *PullIpCodeResponse) SetShowCodeList(v []*string) *PullIpCodeResponse {
	s.ShowCodeList = v
	return s
}

func (s *PullIpCodeResponse) SetOrderId(v string) *PullIpCodeResponse {
	s.OrderId = &v
	return s
}

func (s *PullIpCodeResponse) SetBuyerAccountId(v string) *PullIpCodeResponse {
	s.BuyerAccountId = &v
	return s
}

func (s *PullIpCodeResponse) SetSellerAccountId(v string) *PullIpCodeResponse {
	s.SellerAccountId = &v
	return s
}

func (s *PullIpCodeResponse) SetIpId(v string) *PullIpCodeResponse {
	s.IpId = &v
	return s
}

func (s *PullIpCodeResponse) SetIpName(v string) *PullIpCodeResponse {
	s.IpName = &v
	return s
}

func (s *PullIpCodeResponse) SetIpImage(v string) *PullIpCodeResponse {
	s.IpImage = &v
	return s
}

func (s *PullIpCodeResponse) SetIpDesc(v string) *PullIpCodeResponse {
	s.IpDesc = &v
	return s
}

func (s *PullIpCodeResponse) SetExpiredDate(v int64) *PullIpCodeResponse {
	s.ExpiredDate = &v
	return s
}

func (s *PullIpCodeResponse) SetTotalCount(v int64) *PullIpCodeResponse {
	s.TotalCount = &v
	return s
}

type BatchqueryIpGoodsinterestRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 商品id
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty"`
	// ip名称，支持模糊匹配
	IpName *string `json:"ip_name,omitempty" xml:"ip_name,omitempty"`
	// ip的上架渠道
	ChannelName *string `json:"channel_name,omitempty" xml:"channel_name,omitempty" require:"true"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 分页索引
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// ip等级
	IpLevel []*int64 `json:"ip_level,omitempty" xml:"ip_level,omitempty" type:"Repeated"`
	// ip类型
	IpType []*string `json:"ip_type,omitempty" xml:"ip_type,omitempty" require:"true" type:"Repeated"`
	// 受众人群
	AudienceGroup []*string `json:"audience_group,omitempty" xml:"audience_group,omitempty" require:"true" type:"Repeated"`
	// 是否需要按照创建时间倒序排序
	IsCreateTimeSortDesc *bool `json:"is_create_time_sort_desc,omitempty" xml:"is_create_time_sort_desc,omitempty" require:"true"`
	// 是否需要按照pv排序（0:不需要，1:正序，2:倒序），默认选1
	IsSortByPv *int64 `json:"is_sort_by_pv,omitempty" xml:"is_sort_by_pv,omitempty" require:"true"`
	// 保底金区间，0：0；1：10万以下；2:10-30万；3:30-50万；4:50万以上
	GuaranteeRange []*string `json:"guarantee_range,omitempty" xml:"guarantee_range,omitempty" type:"Repeated"`
}

func (s BatchqueryIpGoodsinterestRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpGoodsinterestRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryIpGoodsinterestRequest) SetAuthToken(v string) *BatchqueryIpGoodsinterestRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryIpGoodsinterestRequest) SetProductInstanceId(v string) *BatchqueryIpGoodsinterestRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchqueryIpGoodsinterestRequest) SetBaseRequest(v *BaseRequestInfo) *BatchqueryIpGoodsinterestRequest {
	s.BaseRequest = v
	return s
}

func (s *BatchqueryIpGoodsinterestRequest) SetIpId(v string) *BatchqueryIpGoodsinterestRequest {
	s.IpId = &v
	return s
}

func (s *BatchqueryIpGoodsinterestRequest) SetIpName(v string) *BatchqueryIpGoodsinterestRequest {
	s.IpName = &v
	return s
}

func (s *BatchqueryIpGoodsinterestRequest) SetChannelName(v string) *BatchqueryIpGoodsinterestRequest {
	s.ChannelName = &v
	return s
}

func (s *BatchqueryIpGoodsinterestRequest) SetPageSize(v int64) *BatchqueryIpGoodsinterestRequest {
	s.PageSize = &v
	return s
}

func (s *BatchqueryIpGoodsinterestRequest) SetPageIndex(v int64) *BatchqueryIpGoodsinterestRequest {
	s.PageIndex = &v
	return s
}

func (s *BatchqueryIpGoodsinterestRequest) SetIpLevel(v []*int64) *BatchqueryIpGoodsinterestRequest {
	s.IpLevel = v
	return s
}

func (s *BatchqueryIpGoodsinterestRequest) SetIpType(v []*string) *BatchqueryIpGoodsinterestRequest {
	s.IpType = v
	return s
}

func (s *BatchqueryIpGoodsinterestRequest) SetAudienceGroup(v []*string) *BatchqueryIpGoodsinterestRequest {
	s.AudienceGroup = v
	return s
}

func (s *BatchqueryIpGoodsinterestRequest) SetIsCreateTimeSortDesc(v bool) *BatchqueryIpGoodsinterestRequest {
	s.IsCreateTimeSortDesc = &v
	return s
}

func (s *BatchqueryIpGoodsinterestRequest) SetIsSortByPv(v int64) *BatchqueryIpGoodsinterestRequest {
	s.IsSortByPv = &v
	return s
}

func (s *BatchqueryIpGoodsinterestRequest) SetGuaranteeRange(v []*string) *BatchqueryIpGoodsinterestRequest {
	s.GuaranteeRange = v
	return s
}

type BatchqueryIpGoodsinterestResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ip重要信息
	IpList []*IpEmphasisInfo `json:"ip_list,omitempty" xml:"ip_list,omitempty" type:"Repeated"`
	// 结果总数，不是列表值，用于分页
	AllCount *int64 `json:"all_count,omitempty" xml:"all_count,omitempty"`
}

func (s BatchqueryIpGoodsinterestResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryIpGoodsinterestResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryIpGoodsinterestResponse) SetReqMsgId(v string) *BatchqueryIpGoodsinterestResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryIpGoodsinterestResponse) SetResultCode(v string) *BatchqueryIpGoodsinterestResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryIpGoodsinterestResponse) SetResultMsg(v string) *BatchqueryIpGoodsinterestResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryIpGoodsinterestResponse) SetIpList(v []*IpEmphasisInfo) *BatchqueryIpGoodsinterestResponse {
	s.IpList = v
	return s
}

func (s *BatchqueryIpGoodsinterestResponse) SetAllCount(v int64) *BatchqueryIpGoodsinterestResponse {
	s.AllCount = &v
	return s
}

type QueryIpTwcaccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 用户的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
}

func (s QueryIpTwcaccountRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpTwcaccountRequest) GoString() string {
	return s.String()
}

func (s *QueryIpTwcaccountRequest) SetAuthToken(v string) *QueryIpTwcaccountRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpTwcaccountRequest) SetProductInstanceId(v string) *QueryIpTwcaccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpTwcaccountRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpTwcaccountRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpTwcaccountRequest) SetAccountId(v string) *QueryIpTwcaccountRequest {
	s.AccountId = &v
	return s
}

type QueryIpTwcaccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 机构账号
	OrganizationId *string `json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// 用户类型为个人时返回用户账号；用户类型为机构时返回经办人账号
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	// 是否签署了静默授权
	SilentlySign *bool `json:"silently_sign,omitempty" xml:"silently_sign,omitempty"`
	// 账户链上ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
}

func (s QueryIpTwcaccountResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpTwcaccountResponse) GoString() string {
	return s.String()
}

func (s *QueryIpTwcaccountResponse) SetReqMsgId(v string) *QueryIpTwcaccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpTwcaccountResponse) SetResultCode(v string) *QueryIpTwcaccountResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpTwcaccountResponse) SetResultMsg(v string) *QueryIpTwcaccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpTwcaccountResponse) SetOrganizationId(v string) *QueryIpTwcaccountResponse {
	s.OrganizationId = &v
	return s
}

func (s *QueryIpTwcaccountResponse) SetUserId(v string) *QueryIpTwcaccountResponse {
	s.UserId = &v
	return s
}

func (s *QueryIpTwcaccountResponse) SetSilentlySign(v bool) *QueryIpTwcaccountResponse {
	s.SilentlySign = &v
	return s
}

func (s *QueryIpTwcaccountResponse) SetAccountId(v string) *QueryIpTwcaccountResponse {
	s.AccountId = &v
	return s
}

type BindIpShopRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// IP商家的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 淘宝卖家官方昵称
	SellerNick *string `json:"seller_nick,omitempty" xml:"seller_nick,omitempty" require:"true"`
	// 授权渠道名称(1: 淘宝网)
	ChannelType *int64 `json:"channel_type,omitempty" xml:"channel_type,omitempty" require:"true"`
	// 数据授权方式(1: 淘宝开放平台)
	AuthType *int64 `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
}

func (s BindIpShopRequest) String() string {
	return tea.Prettify(s)
}

func (s BindIpShopRequest) GoString() string {
	return s.String()
}

func (s *BindIpShopRequest) SetAuthToken(v string) *BindIpShopRequest {
	s.AuthToken = &v
	return s
}

func (s *BindIpShopRequest) SetProductInstanceId(v string) *BindIpShopRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BindIpShopRequest) SetBaseRequest(v *BaseRequestInfo) *BindIpShopRequest {
	s.BaseRequest = v
	return s
}

func (s *BindIpShopRequest) SetAccountId(v string) *BindIpShopRequest {
	s.AccountId = &v
	return s
}

func (s *BindIpShopRequest) SetSellerNick(v string) *BindIpShopRequest {
	s.SellerNick = &v
	return s
}

func (s *BindIpShopRequest) SetChannelType(v int64) *BindIpShopRequest {
	s.ChannelType = &v
	return s
}

func (s *BindIpShopRequest) SetAuthType(v int64) *BindIpShopRequest {
	s.AuthType = &v
	return s
}

type BindIpShopResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 淘宝店铺数据授权跳转链接
	AuthUri *string `json:"auth_uri,omitempty" xml:"auth_uri,omitempty"`
	// 授权申请的内部编码
	ItemCode *string `json:"item_code,omitempty" xml:"item_code,omitempty"`
}

func (s BindIpShopResponse) String() string {
	return tea.Prettify(s)
}

func (s BindIpShopResponse) GoString() string {
	return s.String()
}

func (s *BindIpShopResponse) SetReqMsgId(v string) *BindIpShopResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BindIpShopResponse) SetResultCode(v string) *BindIpShopResponse {
	s.ResultCode = &v
	return s
}

func (s *BindIpShopResponse) SetResultMsg(v string) *BindIpShopResponse {
	s.ResultMsg = &v
	return s
}

func (s *BindIpShopResponse) SetAuthUri(v string) *BindIpShopResponse {
	s.AuthUri = &v
	return s
}

func (s *BindIpShopResponse) SetItemCode(v string) *BindIpShopResponse {
	s.ItemCode = &v
	return s
}

type AuthIpShopRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 授权申请的内部编码
	ItemCode *string `json:"item_code,omitempty" xml:"item_code,omitempty" require:"true"`
	// 淘宝开放平台回调的授权编码
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty" require:"true"`
}

func (s AuthIpShopRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthIpShopRequest) GoString() string {
	return s.String()
}

func (s *AuthIpShopRequest) SetAuthToken(v string) *AuthIpShopRequest {
	s.AuthToken = &v
	return s
}

func (s *AuthIpShopRequest) SetProductInstanceId(v string) *AuthIpShopRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AuthIpShopRequest) SetBaseRequest(v *BaseRequestInfo) *AuthIpShopRequest {
	s.BaseRequest = v
	return s
}

func (s *AuthIpShopRequest) SetItemCode(v string) *AuthIpShopRequest {
	s.ItemCode = &v
	return s
}

func (s *AuthIpShopRequest) SetAuthCode(v string) *AuthIpShopRequest {
	s.AuthCode = &v
	return s
}

type AuthIpShopResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AuthIpShopResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthIpShopResponse) GoString() string {
	return s.String()
}

func (s *AuthIpShopResponse) SetReqMsgId(v string) *AuthIpShopResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AuthIpShopResponse) SetResultCode(v string) *AuthIpShopResponse {
	s.ResultCode = &v
	return s
}

func (s *AuthIpShopResponse) SetResultMsg(v string) *AuthIpShopResponse {
	s.ResultMsg = &v
	return s
}

type ListIpShopRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// IP商家的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 授权申请的内部编码
	ItemCode *string `json:"item_code,omitempty" xml:"item_code,omitempty"`
	// 分页下标(从1开始)
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// 一页的分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s ListIpShopRequest) String() string {
	return tea.Prettify(s)
}

func (s ListIpShopRequest) GoString() string {
	return s.String()
}

func (s *ListIpShopRequest) SetAuthToken(v string) *ListIpShopRequest {
	s.AuthToken = &v
	return s
}

func (s *ListIpShopRequest) SetProductInstanceId(v string) *ListIpShopRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListIpShopRequest) SetBaseRequest(v *BaseRequestInfo) *ListIpShopRequest {
	s.BaseRequest = v
	return s
}

func (s *ListIpShopRequest) SetAccountId(v string) *ListIpShopRequest {
	s.AccountId = &v
	return s
}

func (s *ListIpShopRequest) SetItemCode(v string) *ListIpShopRequest {
	s.ItemCode = &v
	return s
}

func (s *ListIpShopRequest) SetPageIndex(v int64) *ListIpShopRequest {
	s.PageIndex = &v
	return s
}

func (s *ListIpShopRequest) SetPageSize(v int64) *ListIpShopRequest {
	s.PageSize = &v
	return s
}

type ListIpShopResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 总数量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 店铺详情列表
	ShopList []*IPShopInfo `json:"shop_list,omitempty" xml:"shop_list,omitempty" type:"Repeated"`
}

func (s ListIpShopResponse) String() string {
	return tea.Prettify(s)
}

func (s ListIpShopResponse) GoString() string {
	return s.String()
}

func (s *ListIpShopResponse) SetReqMsgId(v string) *ListIpShopResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListIpShopResponse) SetResultCode(v string) *ListIpShopResponse {
	s.ResultCode = &v
	return s
}

func (s *ListIpShopResponse) SetResultMsg(v string) *ListIpShopResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListIpShopResponse) SetTotalCount(v int64) *ListIpShopResponse {
	s.TotalCount = &v
	return s
}

func (s *ListIpShopResponse) SetShopList(v []*IPShopInfo) *ListIpShopResponse {
	s.ShopList = v
	return s
}

type QueryIpCodecollectRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础信息
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 数字凭证ID
	IpCode *string `json:"ip_code,omitempty" xml:"ip_code,omitempty" require:"true"`
}

func (s QueryIpCodecollectRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpCodecollectRequest) GoString() string {
	return s.String()
}

func (s *QueryIpCodecollectRequest) SetAuthToken(v string) *QueryIpCodecollectRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpCodecollectRequest) SetProductInstanceId(v string) *QueryIpCodecollectRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpCodecollectRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpCodecollectRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpCodecollectRequest) SetIpCode(v string) *QueryIpCodecollectRequest {
	s.IpCode = &v
	return s
}

type QueryIpCodecollectResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数字凭证商品信息配置列表,包含产品名和出品方
	GoodsInfoList []*IPCodeGoodsInfo `json:"goods_info_list,omitempty" xml:"goods_info_list,omitempty" type:"Repeated"`
	// 数字凭证流转信息
	CodeFlowList []*IPCodeFlowInfo `json:"code_flow_list,omitempty" xml:"code_flow_list,omitempty" type:"Repeated"`
	// 数字凭证生命周期
	CodeLifeCircle *IPCodeConfigTimeInfo `json:"code_life_circle,omitempty" xml:"code_life_circle,omitempty"`
	// 区块链信息
	ChainInfo *IPCodeChainInfo `json:"chain_info,omitempty" xml:"chain_info,omitempty"`
	// 版权信息
	IpownerInfo *IPCodeIpOwnerInfo `json:"ipowner_info,omitempty" xml:"ipowner_info,omitempty"`
}

func (s QueryIpCodecollectResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpCodecollectResponse) GoString() string {
	return s.String()
}

func (s *QueryIpCodecollectResponse) SetReqMsgId(v string) *QueryIpCodecollectResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpCodecollectResponse) SetResultCode(v string) *QueryIpCodecollectResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpCodecollectResponse) SetResultMsg(v string) *QueryIpCodecollectResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpCodecollectResponse) SetGoodsInfoList(v []*IPCodeGoodsInfo) *QueryIpCodecollectResponse {
	s.GoodsInfoList = v
	return s
}

func (s *QueryIpCodecollectResponse) SetCodeFlowList(v []*IPCodeFlowInfo) *QueryIpCodecollectResponse {
	s.CodeFlowList = v
	return s
}

func (s *QueryIpCodecollectResponse) SetCodeLifeCircle(v *IPCodeConfigTimeInfo) *QueryIpCodecollectResponse {
	s.CodeLifeCircle = v
	return s
}

func (s *QueryIpCodecollectResponse) SetChainInfo(v *IPCodeChainInfo) *QueryIpCodecollectResponse {
	s.ChainInfo = v
	return s
}

func (s *QueryIpCodecollectResponse) SetIpownerInfo(v *IPCodeIpOwnerInfo) *QueryIpCodecollectResponse {
	s.IpownerInfo = v
	return s
}

type GetIpShopRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// IP商家的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 宝贝Id(可以是ItemId, 也可以是SkuId或其他Id)
	GoodId *string `json:"good_id,omitempty" xml:"good_id,omitempty" require:"true"`
	// 类型(1: ItemId)
	IdType *int64 `json:"id_type,omitempty" xml:"id_type,omitempty" require:"true"`
	// 淘宝卖家的官方昵称
	SellerNick *string `json:"seller_nick,omitempty" xml:"seller_nick,omitempty" require:"true"`
}

func (s GetIpShopRequest) String() string {
	return tea.Prettify(s)
}

func (s GetIpShopRequest) GoString() string {
	return s.String()
}

func (s *GetIpShopRequest) SetAuthToken(v string) *GetIpShopRequest {
	s.AuthToken = &v
	return s
}

func (s *GetIpShopRequest) SetProductInstanceId(v string) *GetIpShopRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetIpShopRequest) SetBaseRequest(v *BaseRequestInfo) *GetIpShopRequest {
	s.BaseRequest = v
	return s
}

func (s *GetIpShopRequest) SetAccountId(v string) *GetIpShopRequest {
	s.AccountId = &v
	return s
}

func (s *GetIpShopRequest) SetGoodId(v string) *GetIpShopRequest {
	s.GoodId = &v
	return s
}

func (s *GetIpShopRequest) SetIdType(v int64) *GetIpShopRequest {
	s.IdType = &v
	return s
}

func (s *GetIpShopRequest) SetSellerNick(v string) *GetIpShopRequest {
	s.SellerNick = &v
	return s
}

type GetIpShopResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 店铺商品详情
	GoodInfo *IPShopItemInfo `json:"good_info,omitempty" xml:"good_info,omitempty"`
}

func (s GetIpShopResponse) String() string {
	return tea.Prettify(s)
}

func (s GetIpShopResponse) GoString() string {
	return s.String()
}

func (s *GetIpShopResponse) SetReqMsgId(v string) *GetIpShopResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetIpShopResponse) SetResultCode(v string) *GetIpShopResponse {
	s.ResultCode = &v
	return s
}

func (s *GetIpShopResponse) SetResultMsg(v string) *GetIpShopResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetIpShopResponse) SetGoodInfo(v *IPShopItemInfo) *GetIpShopResponse {
	s.GoodInfo = v
	return s
}

type SetIpOrdergoodsidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 要绑定的商品信息
	GoodsInfoList []*IPOrderGoods `json:"goods_info_list,omitempty" xml:"goods_info_list,omitempty" require:"true" type:"Repeated"`
}

func (s SetIpOrdergoodsidRequest) String() string {
	return tea.Prettify(s)
}

func (s SetIpOrdergoodsidRequest) GoString() string {
	return s.String()
}

func (s *SetIpOrdergoodsidRequest) SetAuthToken(v string) *SetIpOrdergoodsidRequest {
	s.AuthToken = &v
	return s
}

func (s *SetIpOrdergoodsidRequest) SetProductInstanceId(v string) *SetIpOrdergoodsidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetIpOrdergoodsidRequest) SetBaseRequest(v *BaseRequestInfo) *SetIpOrdergoodsidRequest {
	s.BaseRequest = v
	return s
}

func (s *SetIpOrdergoodsidRequest) SetIpOrderId(v string) *SetIpOrdergoodsidRequest {
	s.IpOrderId = &v
	return s
}

func (s *SetIpOrdergoodsidRequest) SetGoodsInfoList(v []*IPOrderGoods) *SetIpOrdergoodsidRequest {
	s.GoodsInfoList = v
	return s
}

type SetIpOrdergoodsidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetIpOrdergoodsidResponse) String() string {
	return tea.Prettify(s)
}

func (s SetIpOrdergoodsidResponse) GoString() string {
	return s.String()
}

func (s *SetIpOrdergoodsidResponse) SetReqMsgId(v string) *SetIpOrdergoodsidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetIpOrdergoodsidResponse) SetResultCode(v string) *SetIpOrdergoodsidResponse {
	s.ResultCode = &v
	return s
}

func (s *SetIpOrdergoodsidResponse) SetResultMsg(v string) *SetIpOrdergoodsidResponse {
	s.ResultMsg = &v
	return s
}

type SetIpSalescorrectionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求信息
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 订单的数据ID，订单中每个数据ID唯一
	SalesBizId *string `json:"sales_biz_id,omitempty" xml:"sales_biz_id,omitempty" require:"true"`
	// 数量校正，负数表示减少本次销售数量，但减少后宗销售数量不能小于0。不校正数量则填0.
	CorrectAmount *int64 `json:"correct_amount,omitempty" xml:"correct_amount,omitempty" require:"true"`
	// 销售金额校正，单位元，负数表示减少本次销售金额，但减少后销售金额不能小于0。不校正数量则填0.00。
	CorrectSales *string `json:"correct_sales,omitempty" xml:"correct_sales,omitempty" require:"true"`
}

func (s SetIpSalescorrectionRequest) String() string {
	return tea.Prettify(s)
}

func (s SetIpSalescorrectionRequest) GoString() string {
	return s.String()
}

func (s *SetIpSalescorrectionRequest) SetAuthToken(v string) *SetIpSalescorrectionRequest {
	s.AuthToken = &v
	return s
}

func (s *SetIpSalescorrectionRequest) SetProductInstanceId(v string) *SetIpSalescorrectionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetIpSalescorrectionRequest) SetBaseRequest(v *BaseRequestInfo) *SetIpSalescorrectionRequest {
	s.BaseRequest = v
	return s
}

func (s *SetIpSalescorrectionRequest) SetIpOrderId(v string) *SetIpSalescorrectionRequest {
	s.IpOrderId = &v
	return s
}

func (s *SetIpSalescorrectionRequest) SetSalesBizId(v string) *SetIpSalescorrectionRequest {
	s.SalesBizId = &v
	return s
}

func (s *SetIpSalescorrectionRequest) SetCorrectAmount(v int64) *SetIpSalescorrectionRequest {
	s.CorrectAmount = &v
	return s
}

func (s *SetIpSalescorrectionRequest) SetCorrectSales(v string) *SetIpSalescorrectionRequest {
	s.CorrectSales = &v
	return s
}

type SetIpSalescorrectionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetIpSalescorrectionResponse) String() string {
	return tea.Prettify(s)
}

func (s SetIpSalescorrectionResponse) GoString() string {
	return s.String()
}

func (s *SetIpSalescorrectionResponse) SetReqMsgId(v string) *SetIpSalescorrectionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetIpSalescorrectionResponse) SetResultCode(v string) *SetIpSalescorrectionResponse {
	s.ResultCode = &v
	return s
}

func (s *SetIpSalescorrectionResponse) SetResultMsg(v string) *SetIpSalescorrectionResponse {
	s.ResultMsg = &v
	return s
}

type ConfirmIpSalessummaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求信息
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 订单的数据ID，订单中每个数据ID唯一
	SalesBizId *string `json:"sales_biz_id,omitempty" xml:"sales_biz_id,omitempty" require:"true"`
	// 商户确认则传商户的链上ID；版权方确认或者拒绝则传版权方的链上ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 确认或者拒绝，true确认，false拒绝
	Accept *bool `json:"accept,omitempty" xml:"accept,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
}

func (s ConfirmIpSalessummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpSalessummaryRequest) GoString() string {
	return s.String()
}

func (s *ConfirmIpSalessummaryRequest) SetAuthToken(v string) *ConfirmIpSalessummaryRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmIpSalessummaryRequest) SetProductInstanceId(v string) *ConfirmIpSalessummaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmIpSalessummaryRequest) SetBaseRequest(v *BaseRequestInfo) *ConfirmIpSalessummaryRequest {
	s.BaseRequest = v
	return s
}

func (s *ConfirmIpSalessummaryRequest) SetIpOrderId(v string) *ConfirmIpSalessummaryRequest {
	s.IpOrderId = &v
	return s
}

func (s *ConfirmIpSalessummaryRequest) SetSalesBizId(v string) *ConfirmIpSalessummaryRequest {
	s.SalesBizId = &v
	return s
}

func (s *ConfirmIpSalessummaryRequest) SetAccountId(v string) *ConfirmIpSalessummaryRequest {
	s.AccountId = &v
	return s
}

func (s *ConfirmIpSalessummaryRequest) SetAccept(v bool) *ConfirmIpSalessummaryRequest {
	s.Accept = &v
	return s
}

func (s *ConfirmIpSalessummaryRequest) SetMemo(v string) *ConfirmIpSalessummaryRequest {
	s.Memo = &v
	return s
}

type ConfirmIpSalessummaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 账单支付链接
	PayUrl *string `json:"pay_url,omitempty" xml:"pay_url,omitempty"`
	// 账单ID
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty"`
}

func (s ConfirmIpSalessummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpSalessummaryResponse) GoString() string {
	return s.String()
}

func (s *ConfirmIpSalessummaryResponse) SetReqMsgId(v string) *ConfirmIpSalessummaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmIpSalessummaryResponse) SetResultCode(v string) *ConfirmIpSalessummaryResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmIpSalessummaryResponse) SetResultMsg(v string) *ConfirmIpSalessummaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmIpSalessummaryResponse) SetPayUrl(v string) *ConfirmIpSalessummaryResponse {
	s.PayUrl = &v
	return s
}

func (s *ConfirmIpSalessummaryResponse) SetIpBillId(v string) *ConfirmIpSalessummaryResponse {
	s.IpBillId = &v
	return s
}

type UploadIpSaleseverylistRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 授权订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
	// 逐条销售数据信息列表
	SalesEveryList []*IPSalesEvery `json:"sales_every_list,omitempty" xml:"sales_every_list,omitempty" require:"true" type:"Repeated"`
}

func (s UploadIpSaleseverylistRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadIpSaleseverylistRequest) GoString() string {
	return s.String()
}

func (s *UploadIpSaleseverylistRequest) SetAuthToken(v string) *UploadIpSaleseverylistRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadIpSaleseverylistRequest) SetProductInstanceId(v string) *UploadIpSaleseverylistRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadIpSaleseverylistRequest) SetBaseRequest(v *BaseRequestInfo) *UploadIpSaleseverylistRequest {
	s.BaseRequest = v
	return s
}

func (s *UploadIpSaleseverylistRequest) SetIpOrderId(v string) *UploadIpSaleseverylistRequest {
	s.IpOrderId = &v
	return s
}

func (s *UploadIpSaleseverylistRequest) SetSalesEveryList(v []*IPSalesEvery) *UploadIpSaleseverylistRequest {
	s.SalesEveryList = v
	return s
}

type UploadIpSaleseverylistResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UploadIpSaleseverylistResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadIpSaleseverylistResponse) GoString() string {
	return s.String()
}

func (s *UploadIpSaleseverylistResponse) SetReqMsgId(v string) *UploadIpSaleseverylistResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadIpSaleseverylistResponse) SetResultCode(v string) *UploadIpSaleseverylistResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadIpSaleseverylistResponse) SetResultMsg(v string) *UploadIpSaleseverylistResponse {
	s.ResultMsg = &v
	return s
}

type PagequeryIpSalessummaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单ID。订单ID和账单ID二选一传入。
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
	// 账单ID。订单ID和账单ID二选一传入。
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty"`
	// 销售数据状态：1初始化，2商户确认，3版权方确认，4账单生成，5商户已校正，6版权方拒绝
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 排序字段
	OrderBy *string `json:"order_by,omitempty" xml:"order_by,omitempty" require:"true"`
	// 排序顺序：正序还是倒序
	Order *string `json:"order,omitempty" xml:"order,omitempty" require:"true"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty" require:"true"`
	// 每页数据量大小。不大于100。
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s PagequeryIpSalessummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpSalessummaryRequest) GoString() string {
	return s.String()
}

func (s *PagequeryIpSalessummaryRequest) SetAuthToken(v string) *PagequeryIpSalessummaryRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryIpSalessummaryRequest) SetProductInstanceId(v string) *PagequeryIpSalessummaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PagequeryIpSalessummaryRequest) SetBaseRequest(v *BaseRequestInfo) *PagequeryIpSalessummaryRequest {
	s.BaseRequest = v
	return s
}

func (s *PagequeryIpSalessummaryRequest) SetIpOrderId(v string) *PagequeryIpSalessummaryRequest {
	s.IpOrderId = &v
	return s
}

func (s *PagequeryIpSalessummaryRequest) SetIpBillId(v string) *PagequeryIpSalessummaryRequest {
	s.IpBillId = &v
	return s
}

func (s *PagequeryIpSalessummaryRequest) SetStatus(v int64) *PagequeryIpSalessummaryRequest {
	s.Status = &v
	return s
}

func (s *PagequeryIpSalessummaryRequest) SetOrderBy(v string) *PagequeryIpSalessummaryRequest {
	s.OrderBy = &v
	return s
}

func (s *PagequeryIpSalessummaryRequest) SetOrder(v string) *PagequeryIpSalessummaryRequest {
	s.Order = &v
	return s
}

func (s *PagequeryIpSalessummaryRequest) SetPageNumber(v int64) *PagequeryIpSalessummaryRequest {
	s.PageNumber = &v
	return s
}

func (s *PagequeryIpSalessummaryRequest) SetPageSize(v int64) *PagequeryIpSalessummaryRequest {
	s.PageSize = &v
	return s
}

type PagequeryIpSalessummaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
	// 账单ID
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty"`
	// 销售数据汇总信息列表
	IpSalesSummaryList []*IPSalesSummary `json:"ip_sales_summary_list,omitempty" xml:"ip_sales_summary_list,omitempty" type:"Repeated"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 销售数据总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s PagequeryIpSalessummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpSalessummaryResponse) GoString() string {
	return s.String()
}

func (s *PagequeryIpSalessummaryResponse) SetReqMsgId(v string) *PagequeryIpSalessummaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryIpSalessummaryResponse) SetResultCode(v string) *PagequeryIpSalessummaryResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryIpSalessummaryResponse) SetResultMsg(v string) *PagequeryIpSalessummaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryIpSalessummaryResponse) SetIpOrderId(v string) *PagequeryIpSalessummaryResponse {
	s.IpOrderId = &v
	return s
}

func (s *PagequeryIpSalessummaryResponse) SetIpBillId(v string) *PagequeryIpSalessummaryResponse {
	s.IpBillId = &v
	return s
}

func (s *PagequeryIpSalessummaryResponse) SetIpSalesSummaryList(v []*IPSalesSummary) *PagequeryIpSalessummaryResponse {
	s.IpSalesSummaryList = v
	return s
}

func (s *PagequeryIpSalessummaryResponse) SetPageNumber(v int64) *PagequeryIpSalessummaryResponse {
	s.PageNumber = &v
	return s
}

func (s *PagequeryIpSalessummaryResponse) SetPageSize(v int64) *PagequeryIpSalessummaryResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryIpSalessummaryResponse) SetTotalCount(v int64) *PagequeryIpSalessummaryResponse {
	s.TotalCount = &v
	return s
}

type ReopenIpBillRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 账单ID
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty" require:"true"`
}

func (s ReopenIpBillRequest) String() string {
	return tea.Prettify(s)
}

func (s ReopenIpBillRequest) GoString() string {
	return s.String()
}

func (s *ReopenIpBillRequest) SetAuthToken(v string) *ReopenIpBillRequest {
	s.AuthToken = &v
	return s
}

func (s *ReopenIpBillRequest) SetProductInstanceId(v string) *ReopenIpBillRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ReopenIpBillRequest) SetBaseRequest(v *BaseRequestInfo) *ReopenIpBillRequest {
	s.BaseRequest = v
	return s
}

func (s *ReopenIpBillRequest) SetIpBillId(v string) *ReopenIpBillRequest {
	s.IpBillId = &v
	return s
}

type ReopenIpBillResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 账单ID
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty"`
	// 新的支付链接
	PayUrl *string `json:"pay_url,omitempty" xml:"pay_url,omitempty"`
}

func (s ReopenIpBillResponse) String() string {
	return tea.Prettify(s)
}

func (s ReopenIpBillResponse) GoString() string {
	return s.String()
}

func (s *ReopenIpBillResponse) SetReqMsgId(v string) *ReopenIpBillResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReopenIpBillResponse) SetResultCode(v string) *ReopenIpBillResponse {
	s.ResultCode = &v
	return s
}

func (s *ReopenIpBillResponse) SetResultMsg(v string) *ReopenIpBillResponse {
	s.ResultMsg = &v
	return s
}

func (s *ReopenIpBillResponse) SetIpBillId(v string) *ReopenIpBillResponse {
	s.IpBillId = &v
	return s
}

func (s *ReopenIpBillResponse) SetPayUrl(v string) *ReopenIpBillResponse {
	s.PayUrl = &v
	return s
}

type InitIpAuthtradeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 采购者的链上账户Id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// IP授权交易时传入IP ID；增值服务交易时传入服务ID
	IpId *string `json:"ip_id,omitempty" xml:"ip_id,omitempty" require:"true"`
	// 0 IP交易，1 增值服务交易
	GoodsType *int64 `json:"goods_type,omitempty" xml:"goods_type,omitempty"`
	// 申请授权合作的备注信息
	ApplyInfo *IPOrderApplyInfo `json:"apply_info,omitempty" xml:"apply_info,omitempty" require:"true"`
}

func (s InitIpAuthtradeRequest) String() string {
	return tea.Prettify(s)
}

func (s InitIpAuthtradeRequest) GoString() string {
	return s.String()
}

func (s *InitIpAuthtradeRequest) SetAuthToken(v string) *InitIpAuthtradeRequest {
	s.AuthToken = &v
	return s
}

func (s *InitIpAuthtradeRequest) SetProductInstanceId(v string) *InitIpAuthtradeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitIpAuthtradeRequest) SetBaseRequest(v *BaseRequestInfo) *InitIpAuthtradeRequest {
	s.BaseRequest = v
	return s
}

func (s *InitIpAuthtradeRequest) SetAccountId(v string) *InitIpAuthtradeRequest {
	s.AccountId = &v
	return s
}

func (s *InitIpAuthtradeRequest) SetIpId(v string) *InitIpAuthtradeRequest {
	s.IpId = &v
	return s
}

func (s *InitIpAuthtradeRequest) SetGoodsType(v int64) *InitIpAuthtradeRequest {
	s.GoodsType = &v
	return s
}

func (s *InitIpAuthtradeRequest) SetApplyInfo(v *IPOrderApplyInfo) *InitIpAuthtradeRequest {
	s.ApplyInfo = v
	return s
}

type InitIpAuthtradeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty"`
}

func (s InitIpAuthtradeResponse) String() string {
	return tea.Prettify(s)
}

func (s InitIpAuthtradeResponse) GoString() string {
	return s.String()
}

func (s *InitIpAuthtradeResponse) SetReqMsgId(v string) *InitIpAuthtradeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitIpAuthtradeResponse) SetResultCode(v string) *InitIpAuthtradeResponse {
	s.ResultCode = &v
	return s
}

func (s *InitIpAuthtradeResponse) SetResultMsg(v string) *InitIpAuthtradeResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitIpAuthtradeResponse) SetIpOrderId(v string) *InitIpAuthtradeResponse {
	s.IpOrderId = &v
	return s
}

type QueryIpOrderhistoryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单ID
	IpOrderId *string `json:"ip_order_id,omitempty" xml:"ip_order_id,omitempty" require:"true"`
}

func (s QueryIpOrderhistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIpOrderhistoryRequest) GoString() string {
	return s.String()
}

func (s *QueryIpOrderhistoryRequest) SetAuthToken(v string) *QueryIpOrderhistoryRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIpOrderhistoryRequest) SetProductInstanceId(v string) *QueryIpOrderhistoryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIpOrderhistoryRequest) SetBaseRequest(v *BaseRequestInfo) *QueryIpOrderhistoryRequest {
	s.BaseRequest = v
	return s
}

func (s *QueryIpOrderhistoryRequest) SetIpOrderId(v string) *QueryIpOrderhistoryRequest {
	s.IpOrderId = &v
	return s
}

type QueryIpOrderhistoryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单列表
	OrderList []*IPOrder `json:"order_list,omitempty" xml:"order_list,omitempty" type:"Repeated"`
}

func (s QueryIpOrderhistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIpOrderhistoryResponse) GoString() string {
	return s.String()
}

func (s *QueryIpOrderhistoryResponse) SetReqMsgId(v string) *QueryIpOrderhistoryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIpOrderhistoryResponse) SetResultCode(v string) *QueryIpOrderhistoryResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIpOrderhistoryResponse) SetResultMsg(v string) *QueryIpOrderhistoryResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIpOrderhistoryResponse) SetOrderList(v []*IPOrder) *QueryIpOrderhistoryResponse {
	s.OrderList = v
	return s
}

type ConfirmIpBillpayRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 账单ID
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty" require:"true"`
}

func (s ConfirmIpBillpayRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpBillpayRequest) GoString() string {
	return s.String()
}

func (s *ConfirmIpBillpayRequest) SetAuthToken(v string) *ConfirmIpBillpayRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmIpBillpayRequest) SetProductInstanceId(v string) *ConfirmIpBillpayRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmIpBillpayRequest) SetBaseRequest(v *BaseRequestInfo) *ConfirmIpBillpayRequest {
	s.BaseRequest = v
	return s
}

func (s *ConfirmIpBillpayRequest) SetIpBillId(v string) *ConfirmIpBillpayRequest {
	s.IpBillId = &v
	return s
}

type ConfirmIpBillpayResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 账单ID
	IpBillId *string `json:"ip_bill_id,omitempty" xml:"ip_bill_id,omitempty"`
	// 新的支付链接
	PayUrl *string `json:"pay_url,omitempty" xml:"pay_url,omitempty"`
}

func (s ConfirmIpBillpayResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmIpBillpayResponse) GoString() string {
	return s.String()
}

func (s *ConfirmIpBillpayResponse) SetReqMsgId(v string) *ConfirmIpBillpayResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmIpBillpayResponse) SetResultCode(v string) *ConfirmIpBillpayResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmIpBillpayResponse) SetResultMsg(v string) *ConfirmIpBillpayResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmIpBillpayResponse) SetIpBillId(v string) *ConfirmIpBillpayResponse {
	s.IpBillId = &v
	return s
}

func (s *ConfirmIpBillpayResponse) SetPayUrl(v string) *ConfirmIpBillpayResponse {
	s.PayUrl = &v
	return s
}

type DisableIpCodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 发起失效请求的区块链账户ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 要被失效的UNI的完整编码
	UniCode *string `json:"uni_code,omitempty" xml:"uni_code,omitempty" require:"true"`
	// 是否为清空核验记录操作，默认否
	CodeInstructionEmpty *bool `json:"code_instruction_empty,omitempty" xml:"code_instruction_empty,omitempty"`
}

func (s DisableIpCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableIpCodeRequest) GoString() string {
	return s.String()
}

func (s *DisableIpCodeRequest) SetAuthToken(v string) *DisableIpCodeRequest {
	s.AuthToken = &v
	return s
}

func (s *DisableIpCodeRequest) SetProductInstanceId(v string) *DisableIpCodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DisableIpCodeRequest) SetBaseRequest(v *BaseRequestInfo) *DisableIpCodeRequest {
	s.BaseRequest = v
	return s
}

func (s *DisableIpCodeRequest) SetAccountId(v string) *DisableIpCodeRequest {
	s.AccountId = &v
	return s
}

func (s *DisableIpCodeRequest) SetUniCode(v string) *DisableIpCodeRequest {
	s.UniCode = &v
	return s
}

func (s *DisableIpCodeRequest) SetCodeInstructionEmpty(v bool) *DisableIpCodeRequest {
	s.CodeInstructionEmpty = &v
	return s
}

type DisableIpCodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DisableIpCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableIpCodeResponse) GoString() string {
	return s.String()
}

func (s *DisableIpCodeResponse) SetReqMsgId(v string) *DisableIpCodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DisableIpCodeResponse) SetResultCode(v string) *DisableIpCodeResponse {
	s.ResultCode = &v
	return s
}

func (s *DisableIpCodeResponse) SetResultMsg(v string) *DisableIpCodeResponse {
	s.ResultMsg = &v
	return s
}

type UploadIpCodecirculationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 数字凭证的编码
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// 数字凭证流转信息，每次最多10条信息。
	CodeCirculationList []*CodeCirculation `json:"code_circulation_list,omitempty" xml:"code_circulation_list,omitempty" require:"true" type:"Repeated"`
}

func (s UploadIpCodecirculationRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadIpCodecirculationRequest) GoString() string {
	return s.String()
}

func (s *UploadIpCodecirculationRequest) SetAuthToken(v string) *UploadIpCodecirculationRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadIpCodecirculationRequest) SetProductInstanceId(v string) *UploadIpCodecirculationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadIpCodecirculationRequest) SetBaseRequest(v *BaseRequestInfo) *UploadIpCodecirculationRequest {
	s.BaseRequest = v
	return s
}

func (s *UploadIpCodecirculationRequest) SetCode(v string) *UploadIpCodecirculationRequest {
	s.Code = &v
	return s
}

func (s *UploadIpCodecirculationRequest) SetCodeCirculationList(v []*CodeCirculation) *UploadIpCodecirculationRequest {
	s.CodeCirculationList = v
	return s
}

type UploadIpCodecirculationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UploadIpCodecirculationResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadIpCodecirculationResponse) GoString() string {
	return s.String()
}

func (s *UploadIpCodecirculationResponse) SetReqMsgId(v string) *UploadIpCodecirculationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadIpCodecirculationResponse) SetResultCode(v string) *UploadIpCodecirculationResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadIpCodecirculationResponse) SetResultMsg(v string) *UploadIpCodecirculationResponse {
	s.ResultMsg = &v
	return s
}

type PagequeryIpCodecirculationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 数字凭证的编码
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty" require:"true"`
	// 每页数据量大小(请小于等于100)
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 根据流转时间 排序顺序：正序还是倒序
	Order *string `json:"order,omitempty" xml:"order,omitempty" require:"true"`
}

func (s PagequeryIpCodecirculationRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpCodecirculationRequest) GoString() string {
	return s.String()
}

func (s *PagequeryIpCodecirculationRequest) SetAuthToken(v string) *PagequeryIpCodecirculationRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryIpCodecirculationRequest) SetProductInstanceId(v string) *PagequeryIpCodecirculationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PagequeryIpCodecirculationRequest) SetBaseRequest(v *BaseRequestInfo) *PagequeryIpCodecirculationRequest {
	s.BaseRequest = v
	return s
}

func (s *PagequeryIpCodecirculationRequest) SetCode(v string) *PagequeryIpCodecirculationRequest {
	s.Code = &v
	return s
}

func (s *PagequeryIpCodecirculationRequest) SetPageNumber(v int64) *PagequeryIpCodecirculationRequest {
	s.PageNumber = &v
	return s
}

func (s *PagequeryIpCodecirculationRequest) SetPageSize(v int64) *PagequeryIpCodecirculationRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryIpCodecirculationRequest) SetOrder(v string) *PagequeryIpCodecirculationRequest {
	s.Order = &v
	return s
}

type PagequeryIpCodecirculationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数字凭证流转信息列表
	CodeCirculationList []*CodeCirculation `json:"code_circulation_list,omitempty" xml:"code_circulation_list,omitempty" type:"Repeated"`
	// 数字凭证的流转信息总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 页面数据量大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s PagequeryIpCodecirculationResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryIpCodecirculationResponse) GoString() string {
	return s.String()
}

func (s *PagequeryIpCodecirculationResponse) SetReqMsgId(v string) *PagequeryIpCodecirculationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryIpCodecirculationResponse) SetResultCode(v string) *PagequeryIpCodecirculationResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryIpCodecirculationResponse) SetResultMsg(v string) *PagequeryIpCodecirculationResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryIpCodecirculationResponse) SetCodeCirculationList(v []*CodeCirculation) *PagequeryIpCodecirculationResponse {
	s.CodeCirculationList = v
	return s
}

func (s *PagequeryIpCodecirculationResponse) SetTotalCount(v int64) *PagequeryIpCodecirculationResponse {
	s.TotalCount = &v
	return s
}

func (s *PagequeryIpCodecirculationResponse) SetPageNumber(v int64) *PagequeryIpCodecirculationResponse {
	s.PageNumber = &v
	return s
}

func (s *PagequeryIpCodecirculationResponse) SetPageSize(v int64) *PagequeryIpCodecirculationResponse {
	s.PageSize = &v
	return s
}

type SignIpContractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 基础请求参数
	BaseRequest *BaseRequestInfo `json:"base_request,omitempty" xml:"base_request,omitempty" require:"true"`
	// 订单合同文件OSS文件key
	ContractFileUrl *string `json:"contract_file_url,omitempty" xml:"contract_file_url,omitempty" require:"true"`
	// 签署区信息
	SignFields []*SignField `json:"sign_fields,omitempty" xml:"sign_fields,omitempty" require:"true" type:"Repeated"`
}

func (s SignIpContractRequest) String() string {
	return tea.Prettify(s)
}

func (s SignIpContractRequest) GoString() string {
	return s.String()
}

func (s *SignIpContractRequest) SetAuthToken(v string) *SignIpContractRequest {
	s.AuthToken = &v
	return s
}

func (s *SignIpContractRequest) SetProductInstanceId(v string) *SignIpContractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SignIpContractRequest) SetBaseRequest(v *BaseRequestInfo) *SignIpContractRequest {
	s.BaseRequest = v
	return s
}

func (s *SignIpContractRequest) SetContractFileUrl(v string) *SignIpContractRequest {
	s.ContractFileUrl = &v
	return s
}

func (s *SignIpContractRequest) SetSignFields(v []*SignField) *SignIpContractRequest {
	s.SignFields = v
	return s
}

type SignIpContractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 签署完成的文件OSS key。只有在签署流程全部完成后才会返回该数据。
	SignedContractFile *string `json:"signed_contract_file,omitempty" xml:"signed_contract_file,omitempty"`
	// 签署完成的文件下载链接。只有在签署流程全部完成后才会返回该数据。
	SignedContractFileUrl *string `json:"signed_contract_file_url,omitempty" xml:"signed_contract_file_url,omitempty"`
}

func (s SignIpContractResponse) String() string {
	return tea.Prettify(s)
}

func (s SignIpContractResponse) GoString() string {
	return s.String()
}

func (s *SignIpContractResponse) SetReqMsgId(v string) *SignIpContractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SignIpContractResponse) SetResultCode(v string) *SignIpContractResponse {
	s.ResultCode = &v
	return s
}

func (s *SignIpContractResponse) SetResultMsg(v string) *SignIpContractResponse {
	s.ResultMsg = &v
	return s
}

func (s *SignIpContractResponse) SetSignedContractFile(v string) *SignIpContractResponse {
	s.SignedContractFile = &v
	return s
}

func (s *SignIpContractResponse) SetSignedContractFileUrl(v string) *SignIpContractResponse {
	s.SignedContractFileUrl = &v
	return s
}

type QueryBlockanalysisBlockRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 代理查询区块信息，传入代理租户需有代理权限。接口会返回调用者和被代理租户能查看的所有交易信息。
	DelegatedTenantIds []*string `json:"delegated_tenant_ids,omitempty" xml:"delegated_tenant_ids,omitempty" type:"Repeated"`
}

func (s QueryBlockanalysisBlockRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisBlockRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisBlockRequest) SetAuthToken(v string) *QueryBlockanalysisBlockRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBlockanalysisBlockRequest) SetProductInstanceId(v string) *QueryBlockanalysisBlockRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBlockanalysisBlockRequest) SetBlockNumber(v int64) *QueryBlockanalysisBlockRequest {
	s.BlockNumber = &v
	return s
}

func (s *QueryBlockanalysisBlockRequest) SetChainId(v string) *QueryBlockanalysisBlockRequest {
	s.ChainId = &v
	return s
}

func (s *QueryBlockanalysisBlockRequest) SetDelegatedTenantIds(v []*string) *QueryBlockanalysisBlockRequest {
	s.DelegatedTenantIds = v
	return s
}

type QueryBlockanalysisBlockResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 区块信息
	Block *Block `json:"block,omitempty" xml:"block,omitempty"`
	// 区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty"`
	// 过滤后的交易数量
	FilteredTxCount *int64 `json:"filtered_tx_count,omitempty" xml:"filtered_tx_count,omitempty"`
	// 区块中交易总数
	TotalTxCount *int64 `json:"total_tx_count,omitempty" xml:"total_tx_count,omitempty"`
}

func (s QueryBlockanalysisBlockResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisBlockResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisBlockResponse) SetReqMsgId(v string) *QueryBlockanalysisBlockResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBlockanalysisBlockResponse) SetResultCode(v string) *QueryBlockanalysisBlockResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBlockanalysisBlockResponse) SetResultMsg(v string) *QueryBlockanalysisBlockResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBlockanalysisBlockResponse) SetBlock(v *Block) *QueryBlockanalysisBlockResponse {
	s.Block = v
	return s
}

func (s *QueryBlockanalysisBlockResponse) SetBlockNumber(v int64) *QueryBlockanalysisBlockResponse {
	s.BlockNumber = &v
	return s
}

func (s *QueryBlockanalysisBlockResponse) SetChainId(v string) *QueryBlockanalysisBlockResponse {
	s.ChainId = &v
	return s
}

func (s *QueryBlockanalysisBlockResponse) SetFilteredTxCount(v int64) *QueryBlockanalysisBlockResponse {
	s.FilteredTxCount = &v
	return s
}

func (s *QueryBlockanalysisBlockResponse) SetTotalTxCount(v int64) *QueryBlockanalysisBlockResponse {
	s.TotalTxCount = &v
	return s
}

type QueryBlockanalysisLastblocknumberRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
}

func (s QueryBlockanalysisLastblocknumberRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisLastblocknumberRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisLastblocknumberRequest) SetAuthToken(v string) *QueryBlockanalysisLastblocknumberRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBlockanalysisLastblocknumberRequest) SetProductInstanceId(v string) *QueryBlockanalysisLastblocknumberRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBlockanalysisLastblocknumberRequest) SetChainId(v string) *QueryBlockanalysisLastblocknumberRequest {
	s.ChainId = &v
	return s
}

type QueryBlockanalysisLastblocknumberResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 区块链最高区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
}

func (s QueryBlockanalysisLastblocknumberResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisLastblocknumberResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisLastblocknumberResponse) SetReqMsgId(v string) *QueryBlockanalysisLastblocknumberResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBlockanalysisLastblocknumberResponse) SetResultCode(v string) *QueryBlockanalysisLastblocknumberResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBlockanalysisLastblocknumberResponse) SetResultMsg(v string) *QueryBlockanalysisLastblocknumberResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBlockanalysisLastblocknumberResponse) SetBlockNumber(v int64) *QueryBlockanalysisLastblocknumberResponse {
	s.BlockNumber = &v
	return s
}

type QueryBlockanalysisOpenedequitiesRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 每页数据量
	Count *int64 `json:"count,omitempty" xml:"count,omitempty"`
	// 页数
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
}

func (s QueryBlockanalysisOpenedequitiesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisOpenedequitiesRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisOpenedequitiesRequest) SetAuthToken(v string) *QueryBlockanalysisOpenedequitiesRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBlockanalysisOpenedequitiesRequest) SetProductInstanceId(v string) *QueryBlockanalysisOpenedequitiesRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBlockanalysisOpenedequitiesRequest) SetChainId(v string) *QueryBlockanalysisOpenedequitiesRequest {
	s.ChainId = &v
	return s
}

func (s *QueryBlockanalysisOpenedequitiesRequest) SetCount(v int64) *QueryBlockanalysisOpenedequitiesRequest {
	s.Count = &v
	return s
}

func (s *QueryBlockanalysisOpenedequitiesRequest) SetPage(v int64) *QueryBlockanalysisOpenedequitiesRequest {
	s.Page = &v
	return s
}

type QueryBlockanalysisOpenedequitiesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 权益商品信息详细信息list
	Equities []*OpenedEquity `json:"equities,omitempty" xml:"equities,omitempty" type:"Repeated"`
}

func (s QueryBlockanalysisOpenedequitiesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisOpenedequitiesResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisOpenedequitiesResponse) SetReqMsgId(v string) *QueryBlockanalysisOpenedequitiesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBlockanalysisOpenedequitiesResponse) SetResultCode(v string) *QueryBlockanalysisOpenedequitiesResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBlockanalysisOpenedequitiesResponse) SetResultMsg(v string) *QueryBlockanalysisOpenedequitiesResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBlockanalysisOpenedequitiesResponse) SetEquities(v []*OpenedEquity) *QueryBlockanalysisOpenedequitiesResponse {
	s.Equities = v
	return s
}

type QueryBlockanalysisUserpriceupdatedequitiesRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 每页数量
	Count *int64 `json:"count,omitempty" xml:"count,omitempty"`
	// 页码
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
}

func (s QueryBlockanalysisUserpriceupdatedequitiesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisUserpriceupdatedequitiesRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisUserpriceupdatedequitiesRequest) SetAuthToken(v string) *QueryBlockanalysisUserpriceupdatedequitiesRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBlockanalysisUserpriceupdatedequitiesRequest) SetProductInstanceId(v string) *QueryBlockanalysisUserpriceupdatedequitiesRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBlockanalysisUserpriceupdatedequitiesRequest) SetChainId(v string) *QueryBlockanalysisUserpriceupdatedequitiesRequest {
	s.ChainId = &v
	return s
}

func (s *QueryBlockanalysisUserpriceupdatedequitiesRequest) SetCount(v int64) *QueryBlockanalysisUserpriceupdatedequitiesRequest {
	s.Count = &v
	return s
}

func (s *QueryBlockanalysisUserpriceupdatedequitiesRequest) SetPage(v int64) *QueryBlockanalysisUserpriceupdatedequitiesRequest {
	s.Page = &v
	return s
}

type QueryBlockanalysisUserpriceupdatedequitiesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 权益商品信息详细信息list
	Equities []*UserPriceEquity `json:"equities,omitempty" xml:"equities,omitempty" type:"Repeated"`
}

func (s QueryBlockanalysisUserpriceupdatedequitiesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisUserpriceupdatedequitiesResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisUserpriceupdatedequitiesResponse) SetReqMsgId(v string) *QueryBlockanalysisUserpriceupdatedequitiesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBlockanalysisUserpriceupdatedequitiesResponse) SetResultCode(v string) *QueryBlockanalysisUserpriceupdatedequitiesResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBlockanalysisUserpriceupdatedequitiesResponse) SetResultMsg(v string) *QueryBlockanalysisUserpriceupdatedequitiesResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBlockanalysisUserpriceupdatedequitiesResponse) SetEquities(v []*UserPriceEquity) *QueryBlockanalysisUserpriceupdatedequitiesResponse {
	s.Equities = v
	return s
}

type QueryBlockanalysisUnwriteoffvalueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 资产ID
	AssetId *string `json:"asset_id,omitempty" xml:"asset_id,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 要查询的租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
}

func (s QueryBlockanalysisUnwriteoffvalueRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisUnwriteoffvalueRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisUnwriteoffvalueRequest) SetAuthToken(v string) *QueryBlockanalysisUnwriteoffvalueRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBlockanalysisUnwriteoffvalueRequest) SetProductInstanceId(v string) *QueryBlockanalysisUnwriteoffvalueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBlockanalysisUnwriteoffvalueRequest) SetAssetId(v string) *QueryBlockanalysisUnwriteoffvalueRequest {
	s.AssetId = &v
	return s
}

func (s *QueryBlockanalysisUnwriteoffvalueRequest) SetChainId(v string) *QueryBlockanalysisUnwriteoffvalueRequest {
	s.ChainId = &v
	return s
}

func (s *QueryBlockanalysisUnwriteoffvalueRequest) SetOptTenantId(v string) *QueryBlockanalysisUnwriteoffvalueRequest {
	s.OptTenantId = &v
	return s
}

type QueryBlockanalysisUnwriteoffvalueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 资产ID
	AssetId *string `json:"asset_id,omitempty" xml:"asset_id,omitempty"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 未核销的资产总额（单位：元）
	TotalValue *string `json:"total_value,omitempty" xml:"total_value,omitempty"`
}

func (s QueryBlockanalysisUnwriteoffvalueResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisUnwriteoffvalueResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisUnwriteoffvalueResponse) SetReqMsgId(v string) *QueryBlockanalysisUnwriteoffvalueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBlockanalysisUnwriteoffvalueResponse) SetResultCode(v string) *QueryBlockanalysisUnwriteoffvalueResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBlockanalysisUnwriteoffvalueResponse) SetResultMsg(v string) *QueryBlockanalysisUnwriteoffvalueResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBlockanalysisUnwriteoffvalueResponse) SetAssetId(v string) *QueryBlockanalysisUnwriteoffvalueResponse {
	s.AssetId = &v
	return s
}

func (s *QueryBlockanalysisUnwriteoffvalueResponse) SetTenantId(v string) *QueryBlockanalysisUnwriteoffvalueResponse {
	s.TenantId = &v
	return s
}

func (s *QueryBlockanalysisUnwriteoffvalueResponse) SetTotalValue(v string) *QueryBlockanalysisUnwriteoffvalueResponse {
	s.TotalValue = &v
	return s
}

type UpdateBlockanalysisDelegaterelationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被代理的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty" require:"true"`
	// 代理租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 操作类型，ADD表示添加，SUB表示撤销
	OptType *string `json:"opt_type,omitempty" xml:"opt_type,omitempty" require:"true"`
}

func (s UpdateBlockanalysisDelegaterelationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockanalysisDelegaterelationRequest) GoString() string {
	return s.String()
}

func (s *UpdateBlockanalysisDelegaterelationRequest) SetAuthToken(v string) *UpdateBlockanalysisDelegaterelationRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateBlockanalysisDelegaterelationRequest) SetProductInstanceId(v string) *UpdateBlockanalysisDelegaterelationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateBlockanalysisDelegaterelationRequest) SetDelegatedTenantId(v string) *UpdateBlockanalysisDelegaterelationRequest {
	s.DelegatedTenantId = &v
	return s
}

func (s *UpdateBlockanalysisDelegaterelationRequest) SetOptTenantId(v string) *UpdateBlockanalysisDelegaterelationRequest {
	s.OptTenantId = &v
	return s
}

func (s *UpdateBlockanalysisDelegaterelationRequest) SetOptType(v string) *UpdateBlockanalysisDelegaterelationRequest {
	s.OptType = &v
	return s
}

type UpdateBlockanalysisDelegaterelationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateBlockanalysisDelegaterelationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockanalysisDelegaterelationResponse) GoString() string {
	return s.String()
}

func (s *UpdateBlockanalysisDelegaterelationResponse) SetReqMsgId(v string) *UpdateBlockanalysisDelegaterelationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateBlockanalysisDelegaterelationResponse) SetResultCode(v string) *UpdateBlockanalysisDelegaterelationResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateBlockanalysisDelegaterelationResponse) SetResultMsg(v string) *UpdateBlockanalysisDelegaterelationResponse {
	s.ResultMsg = &v
	return s
}

type UpdateBlockanalysisWhitelistRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 租户ID
	OptTenantId *string `json:"opt_tenant_id,omitempty" xml:"opt_tenant_id,omitempty" require:"true"`
	// 操作类型
	OptType *string `json:"opt_type,omitempty" xml:"opt_type,omitempty" require:"true"`
}

func (s UpdateBlockanalysisWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockanalysisWhitelistRequest) GoString() string {
	return s.String()
}

func (s *UpdateBlockanalysisWhitelistRequest) SetAuthToken(v string) *UpdateBlockanalysisWhitelistRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateBlockanalysisWhitelistRequest) SetProductInstanceId(v string) *UpdateBlockanalysisWhitelistRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateBlockanalysisWhitelistRequest) SetChainId(v string) *UpdateBlockanalysisWhitelistRequest {
	s.ChainId = &v
	return s
}

func (s *UpdateBlockanalysisWhitelistRequest) SetOptTenantId(v string) *UpdateBlockanalysisWhitelistRequest {
	s.OptTenantId = &v
	return s
}

func (s *UpdateBlockanalysisWhitelistRequest) SetOptType(v string) *UpdateBlockanalysisWhitelistRequest {
	s.OptType = &v
	return s
}

type UpdateBlockanalysisWhitelistResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateBlockanalysisWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockanalysisWhitelistResponse) GoString() string {
	return s.String()
}

func (s *UpdateBlockanalysisWhitelistResponse) SetReqMsgId(v string) *UpdateBlockanalysisWhitelistResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateBlockanalysisWhitelistResponse) SetResultCode(v string) *UpdateBlockanalysisWhitelistResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateBlockanalysisWhitelistResponse) SetResultMsg(v string) *UpdateBlockanalysisWhitelistResponse {
	s.ResultMsg = &v
	return s
}

type QueryBlockanalysisDelegaterelationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被代理的租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty" require:"true"`
}

func (s QueryBlockanalysisDelegaterelationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisDelegaterelationRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisDelegaterelationRequest) SetAuthToken(v string) *QueryBlockanalysisDelegaterelationRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBlockanalysisDelegaterelationRequest) SetProductInstanceId(v string) *QueryBlockanalysisDelegaterelationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBlockanalysisDelegaterelationRequest) SetDelegatedTenantId(v string) *QueryBlockanalysisDelegaterelationRequest {
	s.DelegatedTenantId = &v
	return s
}

type QueryBlockanalysisDelegaterelationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 代理授权关系信息
	DelegateRelationInfos []*DelegateRelationInfo `json:"delegate_relation_infos,omitempty" xml:"delegate_relation_infos,omitempty" type:"Repeated"`
}

func (s QueryBlockanalysisDelegaterelationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisDelegaterelationResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisDelegaterelationResponse) SetReqMsgId(v string) *QueryBlockanalysisDelegaterelationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBlockanalysisDelegaterelationResponse) SetResultCode(v string) *QueryBlockanalysisDelegaterelationResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBlockanalysisDelegaterelationResponse) SetResultMsg(v string) *QueryBlockanalysisDelegaterelationResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBlockanalysisDelegaterelationResponse) SetDelegateRelationInfos(v []*DelegateRelationInfo) *QueryBlockanalysisDelegaterelationResponse {
	s.DelegateRelationInfos = v
	return s
}

type QueryBlockanalysisWhitelistRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询该租户的白名单信息
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 查询链的白名单信息
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty"`
}

func (s QueryBlockanalysisWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisWhitelistRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisWhitelistRequest) SetAuthToken(v string) *QueryBlockanalysisWhitelistRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBlockanalysisWhitelistRequest) SetProductInstanceId(v string) *QueryBlockanalysisWhitelistRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBlockanalysisWhitelistRequest) SetTenantId(v string) *QueryBlockanalysisWhitelistRequest {
	s.TenantId = &v
	return s
}

func (s *QueryBlockanalysisWhitelistRequest) SetChainId(v string) *QueryBlockanalysisWhitelistRequest {
	s.ChainId = &v
	return s
}

type QueryBlockanalysisWhitelistResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 接口白名单信息
	WhiteList []*APIWhiteListInfo `json:"white_list,omitempty" xml:"white_list,omitempty" type:"Repeated"`
}

func (s QueryBlockanalysisWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisWhitelistResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisWhitelistResponse) SetReqMsgId(v string) *QueryBlockanalysisWhitelistResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBlockanalysisWhitelistResponse) SetResultCode(v string) *QueryBlockanalysisWhitelistResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBlockanalysisWhitelistResponse) SetResultMsg(v string) *QueryBlockanalysisWhitelistResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBlockanalysisWhitelistResponse) SetWhiteList(v []*APIWhiteListInfo) *QueryBlockanalysisWhitelistResponse {
	s.WhiteList = v
	return s
}

type QueryBlockanalysisTransactionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s QueryBlockanalysisTransactionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisTransactionRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisTransactionRequest) SetAuthToken(v string) *QueryBlockanalysisTransactionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBlockanalysisTransactionRequest) SetProductInstanceId(v string) *QueryBlockanalysisTransactionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBlockanalysisTransactionRequest) SetChainId(v string) *QueryBlockanalysisTransactionRequest {
	s.ChainId = &v
	return s
}

func (s *QueryBlockanalysisTransactionRequest) SetTxHash(v string) *QueryBlockanalysisTransactionRequest {
	s.TxHash = &v
	return s
}

type QueryBlockanalysisTransactionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
	// 交易数据，hex格式
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 交易发起方
	From *string `json:"from,omitempty" xml:"from,omitempty"`
	// 交易单据信息
	Receipt *BlockReceipt `json:"receipt,omitempty" xml:"receipt,omitempty"`
	// 交易时间戳
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// 交易接收方
	To *string `json:"to,omitempty" xml:"to,omitempty"`
	// 交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 交易类型
	TxType *int64 `json:"tx_type,omitempty" xml:"tx_type,omitempty"`
}

func (s QueryBlockanalysisTransactionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisTransactionResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisTransactionResponse) SetReqMsgId(v string) *QueryBlockanalysisTransactionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBlockanalysisTransactionResponse) SetResultCode(v string) *QueryBlockanalysisTransactionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBlockanalysisTransactionResponse) SetResultMsg(v string) *QueryBlockanalysisTransactionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBlockanalysisTransactionResponse) SetBlockNumber(v int64) *QueryBlockanalysisTransactionResponse {
	s.BlockNumber = &v
	return s
}

func (s *QueryBlockanalysisTransactionResponse) SetData(v string) *QueryBlockanalysisTransactionResponse {
	s.Data = &v
	return s
}

func (s *QueryBlockanalysisTransactionResponse) SetFrom(v string) *QueryBlockanalysisTransactionResponse {
	s.From = &v
	return s
}

func (s *QueryBlockanalysisTransactionResponse) SetReceipt(v *BlockReceipt) *QueryBlockanalysisTransactionResponse {
	s.Receipt = v
	return s
}

func (s *QueryBlockanalysisTransactionResponse) SetTimestamp(v string) *QueryBlockanalysisTransactionResponse {
	s.Timestamp = &v
	return s
}

func (s *QueryBlockanalysisTransactionResponse) SetTo(v string) *QueryBlockanalysisTransactionResponse {
	s.To = &v
	return s
}

func (s *QueryBlockanalysisTransactionResponse) SetTxHash(v string) *QueryBlockanalysisTransactionResponse {
	s.TxHash = &v
	return s
}

func (s *QueryBlockanalysisTransactionResponse) SetTxType(v int64) *QueryBlockanalysisTransactionResponse {
	s.TxType = &v
	return s
}

type QueryBlockanalysisEquityauthlistRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 分页查询每页数量
	Count *int64 `json:"count,omitempty" xml:"count,omitempty" require:"true"`
	// 商品ID
	EquityId *string `json:"equity_id,omitempty" xml:"equity_id,omitempty" require:"true"`
	// 分页查询页码
	Page *int64 `json:"page,omitempty" xml:"page,omitempty" require:"true"`
	// 代理租户ID
	DelegatedTenantId *string `json:"delegated_tenant_id,omitempty" xml:"delegated_tenant_id,omitempty" require:"true"`
}

func (s QueryBlockanalysisEquityauthlistRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisEquityauthlistRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisEquityauthlistRequest) SetAuthToken(v string) *QueryBlockanalysisEquityauthlistRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBlockanalysisEquityauthlistRequest) SetProductInstanceId(v string) *QueryBlockanalysisEquityauthlistRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBlockanalysisEquityauthlistRequest) SetChainId(v string) *QueryBlockanalysisEquityauthlistRequest {
	s.ChainId = &v
	return s
}

func (s *QueryBlockanalysisEquityauthlistRequest) SetCount(v int64) *QueryBlockanalysisEquityauthlistRequest {
	s.Count = &v
	return s
}

func (s *QueryBlockanalysisEquityauthlistRequest) SetEquityId(v string) *QueryBlockanalysisEquityauthlistRequest {
	s.EquityId = &v
	return s
}

func (s *QueryBlockanalysisEquityauthlistRequest) SetPage(v int64) *QueryBlockanalysisEquityauthlistRequest {
	s.Page = &v
	return s
}

func (s *QueryBlockanalysisEquityauthlistRequest) SetDelegatedTenantId(v string) *QueryBlockanalysisEquityauthlistRequest {
	s.DelegatedTenantId = &v
	return s
}

type QueryBlockanalysisEquityauthlistResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 商品授权信息（一客一价信息）列表
	EquityAuthList []*EquityAuthInfo `json:"equity_auth_list,omitempty" xml:"equity_auth_list,omitempty" type:"Repeated"`
}

func (s QueryBlockanalysisEquityauthlistResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisEquityauthlistResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisEquityauthlistResponse) SetReqMsgId(v string) *QueryBlockanalysisEquityauthlistResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBlockanalysisEquityauthlistResponse) SetResultCode(v string) *QueryBlockanalysisEquityauthlistResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBlockanalysisEquityauthlistResponse) SetResultMsg(v string) *QueryBlockanalysisEquityauthlistResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBlockanalysisEquityauthlistResponse) SetEquityAuthList(v []*EquityAuthInfo) *QueryBlockanalysisEquityauthlistResponse {
	s.EquityAuthList = v
	return s
}

type QueryBlockanalysisNextblockRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 代理查询区块信息，传入代理租户需有代理权限。接口会返回调用者和被代理租户能查看的所有交易信息。
	DelegatedTenantIds []*string `json:"delegated_tenant_ids,omitempty" xml:"delegated_tenant_ids,omitempty" type:"Repeated"`
	// 查询区块超时时间，单位s，范围小于6s
	Timeout *int64 `json:"timeout,omitempty" xml:"timeout,omitempty" require:"true"`
}

func (s QueryBlockanalysisNextblockRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisNextblockRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisNextblockRequest) SetAuthToken(v string) *QueryBlockanalysisNextblockRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBlockanalysisNextblockRequest) SetProductInstanceId(v string) *QueryBlockanalysisNextblockRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBlockanalysisNextblockRequest) SetBlockNumber(v int64) *QueryBlockanalysisNextblockRequest {
	s.BlockNumber = &v
	return s
}

func (s *QueryBlockanalysisNextblockRequest) SetChainId(v string) *QueryBlockanalysisNextblockRequest {
	s.ChainId = &v
	return s
}

func (s *QueryBlockanalysisNextblockRequest) SetDelegatedTenantIds(v []*string) *QueryBlockanalysisNextblockRequest {
	s.DelegatedTenantIds = v
	return s
}

func (s *QueryBlockanalysisNextblockRequest) SetTimeout(v int64) *QueryBlockanalysisNextblockRequest {
	s.Timeout = &v
	return s
}

type QueryBlockanalysisNextblockResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 区块信息
	Block *Block `json:"block,omitempty" xml:"block,omitempty"`
	// 区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty"`
	// 过滤后的交易数量
	FilteredTxCount *int64 `json:"filtered_tx_count,omitempty" xml:"filtered_tx_count,omitempty"`
	// 区块中交易总数
	TotalTxCount *int64 `json:"total_tx_count,omitempty" xml:"total_tx_count,omitempty"`
	// 下一个需要检查的高度
	NextBlockNumber *int64 `json:"next_block_number,omitempty" xml:"next_block_number,omitempty"`
}

func (s QueryBlockanalysisNextblockResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockanalysisNextblockResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockanalysisNextblockResponse) SetReqMsgId(v string) *QueryBlockanalysisNextblockResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBlockanalysisNextblockResponse) SetResultCode(v string) *QueryBlockanalysisNextblockResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBlockanalysisNextblockResponse) SetResultMsg(v string) *QueryBlockanalysisNextblockResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBlockanalysisNextblockResponse) SetBlock(v *Block) *QueryBlockanalysisNextblockResponse {
	s.Block = v
	return s
}

func (s *QueryBlockanalysisNextblockResponse) SetBlockNumber(v int64) *QueryBlockanalysisNextblockResponse {
	s.BlockNumber = &v
	return s
}

func (s *QueryBlockanalysisNextblockResponse) SetChainId(v string) *QueryBlockanalysisNextblockResponse {
	s.ChainId = &v
	return s
}

func (s *QueryBlockanalysisNextblockResponse) SetFilteredTxCount(v int64) *QueryBlockanalysisNextblockResponse {
	s.FilteredTxCount = &v
	return s
}

func (s *QueryBlockanalysisNextblockResponse) SetTotalTxCount(v int64) *QueryBlockanalysisNextblockResponse {
	s.TotalTxCount = &v
	return s
}

func (s *QueryBlockanalysisNextblockResponse) SetNextBlockNumber(v int64) *QueryBlockanalysisNextblockResponse {
	s.NextBlockNumber = &v
	return s
}

type QueryMypointsSkuRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 环境标识
	Env *string `json:"env,omitempty" xml:"env,omitempty" require:"true"`
}

func (s QueryMypointsSkuRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMypointsSkuRequest) GoString() string {
	return s.String()
}

func (s *QueryMypointsSkuRequest) SetAuthToken(v string) *QueryMypointsSkuRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMypointsSkuRequest) SetProductInstanceId(v string) *QueryMypointsSkuRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMypointsSkuRequest) SetChainId(v string) *QueryMypointsSkuRequest {
	s.ChainId = &v
	return s
}

func (s *QueryMypointsSkuRequest) SetEnv(v string) *QueryMypointsSkuRequest {
	s.Env = &v
	return s
}

type QueryMypointsSkuResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 商品列表
	Skus []*SKUItem `json:"skus,omitempty" xml:"skus,omitempty" type:"Repeated"`
}

func (s QueryMypointsSkuResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMypointsSkuResponse) GoString() string {
	return s.String()
}

func (s *QueryMypointsSkuResponse) SetReqMsgId(v string) *QueryMypointsSkuResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMypointsSkuResponse) SetResultCode(v string) *QueryMypointsSkuResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMypointsSkuResponse) SetResultMsg(v string) *QueryMypointsSkuResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMypointsSkuResponse) SetSkus(v []*SKUItem) *QueryMypointsSkuResponse {
	s.Skus = v
	return s
}

type QueryMypointsMerchantbalanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 环境标识
	Env *string `json:"env,omitempty" xml:"env,omitempty" require:"true"`
}

func (s QueryMypointsMerchantbalanceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMypointsMerchantbalanceRequest) GoString() string {
	return s.String()
}

func (s *QueryMypointsMerchantbalanceRequest) SetAuthToken(v string) *QueryMypointsMerchantbalanceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMypointsMerchantbalanceRequest) SetProductInstanceId(v string) *QueryMypointsMerchantbalanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMypointsMerchantbalanceRequest) SetChainId(v string) *QueryMypointsMerchantbalanceRequest {
	s.ChainId = &v
	return s
}

func (s *QueryMypointsMerchantbalanceRequest) SetEnv(v string) *QueryMypointsMerchantbalanceRequest {
	s.Env = &v
	return s
}

type QueryMypointsMerchantbalanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 积分库可用余额
	BudgetAvailableBalance *int64 `json:"budget_available_balance,omitempty" xml:"budget_available_balance,omitempty"`
	// 预算库余额
	BudgetBalance *int64 `json:"budget_balance,omitempty" xml:"budget_balance,omitempty"`
	// 预算库代码
	BudgetCode *string `json:"budget_code,omitempty" xml:"budget_code,omitempty"`
	// 商户的支付宝商家ID
	Pid *string `json:"pid,omitempty" xml:"pid,omitempty"`
	// 积分库余额
	PointLibBalance *int64 `json:"point_lib_balance,omitempty" xml:"point_lib_balance,omitempty"`
	// 积分库代码
	PointLibCode *string `json:"point_lib_code,omitempty" xml:"point_lib_code,omitempty"`
	// 商户的金融云租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s QueryMypointsMerchantbalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMypointsMerchantbalanceResponse) GoString() string {
	return s.String()
}

func (s *QueryMypointsMerchantbalanceResponse) SetReqMsgId(v string) *QueryMypointsMerchantbalanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMypointsMerchantbalanceResponse) SetResultCode(v string) *QueryMypointsMerchantbalanceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMypointsMerchantbalanceResponse) SetResultMsg(v string) *QueryMypointsMerchantbalanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMypointsMerchantbalanceResponse) SetBudgetAvailableBalance(v int64) *QueryMypointsMerchantbalanceResponse {
	s.BudgetAvailableBalance = &v
	return s
}

func (s *QueryMypointsMerchantbalanceResponse) SetBudgetBalance(v int64) *QueryMypointsMerchantbalanceResponse {
	s.BudgetBalance = &v
	return s
}

func (s *QueryMypointsMerchantbalanceResponse) SetBudgetCode(v string) *QueryMypointsMerchantbalanceResponse {
	s.BudgetCode = &v
	return s
}

func (s *QueryMypointsMerchantbalanceResponse) SetPid(v string) *QueryMypointsMerchantbalanceResponse {
	s.Pid = &v
	return s
}

func (s *QueryMypointsMerchantbalanceResponse) SetPointLibBalance(v int64) *QueryMypointsMerchantbalanceResponse {
	s.PointLibBalance = &v
	return s
}

func (s *QueryMypointsMerchantbalanceResponse) SetPointLibCode(v string) *QueryMypointsMerchantbalanceResponse {
	s.PointLibCode = &v
	return s
}

func (s *QueryMypointsMerchantbalanceResponse) SetTenantId(v string) *QueryMypointsMerchantbalanceResponse {
	s.TenantId = &v
	return s
}

type ExecMypointsPreorderskuRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 预下单数量
	Count *int64 `json:"count,omitempty" xml:"count,omitempty" require:"true"`
	// 环境标识
	Env *string `json:"env,omitempty" xml:"env,omitempty" require:"true"`
	// 备注
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 业务幂等号，商户需要保证每笔订单号唯一
	OrderNo *string `json:"order_no,omitempty" xml:"order_no,omitempty" require:"true"`
	// 商品ID
	SkuId *string `json:"sku_id,omitempty" xml:"sku_id,omitempty" require:"true"`
	// 总花费花费(询价接口结果)
	TotalCost *string `json:"total_cost,omitempty" xml:"total_cost,omitempty" require:"true"`
}

func (s ExecMypointsPreorderskuRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecMypointsPreorderskuRequest) GoString() string {
	return s.String()
}

func (s *ExecMypointsPreorderskuRequest) SetAuthToken(v string) *ExecMypointsPreorderskuRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecMypointsPreorderskuRequest) SetProductInstanceId(v string) *ExecMypointsPreorderskuRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecMypointsPreorderskuRequest) SetChainId(v string) *ExecMypointsPreorderskuRequest {
	s.ChainId = &v
	return s
}

func (s *ExecMypointsPreorderskuRequest) SetCount(v int64) *ExecMypointsPreorderskuRequest {
	s.Count = &v
	return s
}

func (s *ExecMypointsPreorderskuRequest) SetEnv(v string) *ExecMypointsPreorderskuRequest {
	s.Env = &v
	return s
}

func (s *ExecMypointsPreorderskuRequest) SetMemo(v string) *ExecMypointsPreorderskuRequest {
	s.Memo = &v
	return s
}

func (s *ExecMypointsPreorderskuRequest) SetOrderNo(v string) *ExecMypointsPreorderskuRequest {
	s.OrderNo = &v
	return s
}

func (s *ExecMypointsPreorderskuRequest) SetSkuId(v string) *ExecMypointsPreorderskuRequest {
	s.SkuId = &v
	return s
}

func (s *ExecMypointsPreorderskuRequest) SetTotalCost(v string) *ExecMypointsPreorderskuRequest {
	s.TotalCost = &v
	return s
}

type ExecMypointsPreorderskuResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数量
	Count *int64 `json:"count,omitempty" xml:"count,omitempty"`
	// 业务幂等ID
	OrderNo *string `json:"order_no,omitempty" xml:"order_no,omitempty"`
	// 预下单Id
	PreOrderId *string `json:"pre_order_id,omitempty" xml:"pre_order_id,omitempty"`
	// 商品ID
	SkuId *string `json:"sku_id,omitempty" xml:"sku_id,omitempty"`
	// 总集分宝数量(单位:个)
	TotalAmount *int64 `json:"total_amount,omitempty" xml:"total_amount,omitempty"`
	// 总费用
	TotalCost *string `json:"total_cost,omitempty" xml:"total_cost,omitempty"`
	// 是否需要重试
	NeedRetry *bool `json:"need_retry,omitempty" xml:"need_retry,omitempty"`
}

func (s ExecMypointsPreorderskuResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecMypointsPreorderskuResponse) GoString() string {
	return s.String()
}

func (s *ExecMypointsPreorderskuResponse) SetReqMsgId(v string) *ExecMypointsPreorderskuResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecMypointsPreorderskuResponse) SetResultCode(v string) *ExecMypointsPreorderskuResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecMypointsPreorderskuResponse) SetResultMsg(v string) *ExecMypointsPreorderskuResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecMypointsPreorderskuResponse) SetCount(v int64) *ExecMypointsPreorderskuResponse {
	s.Count = &v
	return s
}

func (s *ExecMypointsPreorderskuResponse) SetOrderNo(v string) *ExecMypointsPreorderskuResponse {
	s.OrderNo = &v
	return s
}

func (s *ExecMypointsPreorderskuResponse) SetPreOrderId(v string) *ExecMypointsPreorderskuResponse {
	s.PreOrderId = &v
	return s
}

func (s *ExecMypointsPreorderskuResponse) SetSkuId(v string) *ExecMypointsPreorderskuResponse {
	s.SkuId = &v
	return s
}

func (s *ExecMypointsPreorderskuResponse) SetTotalAmount(v int64) *ExecMypointsPreorderskuResponse {
	s.TotalAmount = &v
	return s
}

func (s *ExecMypointsPreorderskuResponse) SetTotalCost(v string) *ExecMypointsPreorderskuResponse {
	s.TotalCost = &v
	return s
}

func (s *ExecMypointsPreorderskuResponse) SetNeedRetry(v bool) *ExecMypointsPreorderskuResponse {
	s.NeedRetry = &v
	return s
}

type ExecMypointsOrderskuRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 环境标识
	Env *string `json:"env,omitempty" xml:"env,omitempty" require:"true"`
	// 业务幂等号
	OrderNo *string `json:"order_no,omitempty" xml:"order_no,omitempty" require:"true"`
	// 手机号
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number,omitempty" require:"true"`
	// 预下单号
	PreOrderId *string `json:"pre_order_id,omitempty" xml:"pre_order_id,omitempty" require:"true"`
	// 商品ID
	SkuId *string `json:"sku_id,omitempty" xml:"sku_id,omitempty" require:"true"`
}

func (s ExecMypointsOrderskuRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecMypointsOrderskuRequest) GoString() string {
	return s.String()
}

func (s *ExecMypointsOrderskuRequest) SetAuthToken(v string) *ExecMypointsOrderskuRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecMypointsOrderskuRequest) SetProductInstanceId(v string) *ExecMypointsOrderskuRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecMypointsOrderskuRequest) SetChainId(v string) *ExecMypointsOrderskuRequest {
	s.ChainId = &v
	return s
}

func (s *ExecMypointsOrderskuRequest) SetEnv(v string) *ExecMypointsOrderskuRequest {
	s.Env = &v
	return s
}

func (s *ExecMypointsOrderskuRequest) SetOrderNo(v string) *ExecMypointsOrderskuRequest {
	s.OrderNo = &v
	return s
}

func (s *ExecMypointsOrderskuRequest) SetPhoneNumber(v string) *ExecMypointsOrderskuRequest {
	s.PhoneNumber = &v
	return s
}

func (s *ExecMypointsOrderskuRequest) SetPreOrderId(v string) *ExecMypointsOrderskuRequest {
	s.PreOrderId = &v
	return s
}

func (s *ExecMypointsOrderskuRequest) SetSkuId(v string) *ExecMypointsOrderskuRequest {
	s.SkuId = &v
	return s
}

type ExecMypointsOrderskuResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 卡密ID
	CardId *string `json:"card_id,omitempty" xml:"card_id,omitempty"`
	// 集分宝卡密的面值(单位:个)
	CardValue *int64 `json:"card_value,omitempty" xml:"card_value,omitempty"`
	// 是否需要重试
	NeedRetry *bool `json:"need_retry,omitempty" xml:"need_retry,omitempty"`
	// 业务幂等ID
	OrderNo *string `json:"order_no,omitempty" xml:"order_no,omitempty"`
}

func (s ExecMypointsOrderskuResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecMypointsOrderskuResponse) GoString() string {
	return s.String()
}

func (s *ExecMypointsOrderskuResponse) SetReqMsgId(v string) *ExecMypointsOrderskuResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecMypointsOrderskuResponse) SetResultCode(v string) *ExecMypointsOrderskuResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecMypointsOrderskuResponse) SetResultMsg(v string) *ExecMypointsOrderskuResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecMypointsOrderskuResponse) SetCardId(v string) *ExecMypointsOrderskuResponse {
	s.CardId = &v
	return s
}

func (s *ExecMypointsOrderskuResponse) SetCardValue(v int64) *ExecMypointsOrderskuResponse {
	s.CardValue = &v
	return s
}

func (s *ExecMypointsOrderskuResponse) SetNeedRetry(v bool) *ExecMypointsOrderskuResponse {
	s.NeedRetry = &v
	return s
}

func (s *ExecMypointsOrderskuResponse) SetOrderNo(v string) *ExecMypointsOrderskuResponse {
	s.OrderNo = &v
	return s
}

type QueryMypointsSkufeeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 预下单数量
	Count *int64 `json:"count,omitempty" xml:"count,omitempty" require:"true"`
	// 环境标识(sandbox/prod)
	Env *string `json:"env,omitempty" xml:"env,omitempty" require:"true"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 业务幂等号
	OrderNo *string `json:"order_no,omitempty" xml:"order_no,omitempty" require:"true"`
	// 商品ID
	SkuId *string `json:"sku_id,omitempty" xml:"sku_id,omitempty" require:"true"`
}

func (s QueryMypointsSkufeeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMypointsSkufeeRequest) GoString() string {
	return s.String()
}

func (s *QueryMypointsSkufeeRequest) SetAuthToken(v string) *QueryMypointsSkufeeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMypointsSkufeeRequest) SetProductInstanceId(v string) *QueryMypointsSkufeeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMypointsSkufeeRequest) SetChainId(v string) *QueryMypointsSkufeeRequest {
	s.ChainId = &v
	return s
}

func (s *QueryMypointsSkufeeRequest) SetCount(v int64) *QueryMypointsSkufeeRequest {
	s.Count = &v
	return s
}

func (s *QueryMypointsSkufeeRequest) SetEnv(v string) *QueryMypointsSkufeeRequest {
	s.Env = &v
	return s
}

func (s *QueryMypointsSkufeeRequest) SetMemo(v string) *QueryMypointsSkufeeRequest {
	s.Memo = &v
	return s
}

func (s *QueryMypointsSkufeeRequest) SetOrderNo(v string) *QueryMypointsSkufeeRequest {
	s.OrderNo = &v
	return s
}

func (s *QueryMypointsSkufeeRequest) SetSkuId(v string) *QueryMypointsSkufeeRequest {
	s.SkuId = &v
	return s
}

type QueryMypointsSkufeeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 预下单的数量
	Count *int64 `json:"count,omitempty" xml:"count,omitempty"`
	// 费率
	Rate *string `json:"rate,omitempty" xml:"rate,omitempty"`
	// 商品ID
	SkuId *string `json:"sku_id,omitempty" xml:"sku_id,omitempty"`
	// 总集分宝数量（个）
	TotalAmount *int64 `json:"total_amount,omitempty" xml:"total_amount,omitempty"`
	// 总费用
	TotalCost *string `json:"total_cost,omitempty" xml:"total_cost,omitempty"`
}

func (s QueryMypointsSkufeeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMypointsSkufeeResponse) GoString() string {
	return s.String()
}

func (s *QueryMypointsSkufeeResponse) SetReqMsgId(v string) *QueryMypointsSkufeeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMypointsSkufeeResponse) SetResultCode(v string) *QueryMypointsSkufeeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMypointsSkufeeResponse) SetResultMsg(v string) *QueryMypointsSkufeeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMypointsSkufeeResponse) SetCount(v int64) *QueryMypointsSkufeeResponse {
	s.Count = &v
	return s
}

func (s *QueryMypointsSkufeeResponse) SetRate(v string) *QueryMypointsSkufeeResponse {
	s.Rate = &v
	return s
}

func (s *QueryMypointsSkufeeResponse) SetSkuId(v string) *QueryMypointsSkufeeResponse {
	s.SkuId = &v
	return s
}

func (s *QueryMypointsSkufeeResponse) SetTotalAmount(v int64) *QueryMypointsSkufeeResponse {
	s.TotalAmount = &v
	return s
}

func (s *QueryMypointsSkufeeResponse) SetTotalCost(v string) *QueryMypointsSkufeeResponse {
	s.TotalCost = &v
	return s
}

type QueryMypointsPreorderinstructionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 环境标识
	Env *string `json:"env,omitempty" xml:"env,omitempty" require:"true"`
	// 业务幂等ID
	OrderNo *string `json:"order_no,omitempty" xml:"order_no,omitempty" require:"true"`
	// 商品ID
	SkuId *string `json:"sku_id,omitempty" xml:"sku_id,omitempty" require:"true"`
}

func (s QueryMypointsPreorderinstructionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMypointsPreorderinstructionRequest) GoString() string {
	return s.String()
}

func (s *QueryMypointsPreorderinstructionRequest) SetAuthToken(v string) *QueryMypointsPreorderinstructionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMypointsPreorderinstructionRequest) SetProductInstanceId(v string) *QueryMypointsPreorderinstructionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMypointsPreorderinstructionRequest) SetChainId(v string) *QueryMypointsPreorderinstructionRequest {
	s.ChainId = &v
	return s
}

func (s *QueryMypointsPreorderinstructionRequest) SetEnv(v string) *QueryMypointsPreorderinstructionRequest {
	s.Env = &v
	return s
}

func (s *QueryMypointsPreorderinstructionRequest) SetOrderNo(v string) *QueryMypointsPreorderinstructionRequest {
	s.OrderNo = &v
	return s
}

func (s *QueryMypointsPreorderinstructionRequest) SetSkuId(v string) *QueryMypointsPreorderinstructionRequest {
	s.SkuId = &v
	return s
}

type QueryMypointsPreorderinstructionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务请求单号
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 商家的预算库代码
	BudgetCode *string `json:"budget_code,omitempty" xml:"budget_code,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty"`
	// 环境标识
	Env *string `json:"env,omitempty" xml:"env,omitempty"`
	// 扩展信息
	ExtendInfo *string `json:"extend_info,omitempty" xml:"extend_info,omitempty"`
	// 备注信息
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 商家在支付宝域的标识
	Pid *string `json:"pid,omitempty" xml:"pid,omitempty"`
	// 集分宝产品码
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty"`
	// 集分宝SKU预下单ID
	PreOrderId *string `json:"pre_order_id,omitempty" xml:"pre_order_id,omitempty"`
	// 订单中剩余的可下单商品数量
	RemainCount *int64 `json:"remain_count,omitempty" xml:"remain_count,omitempty"`
	// 包含集分宝数量(个)
	SkuAmount *int64 `json:"sku_amount,omitempty" xml:"sku_amount,omitempty"`
	// 集分宝SKU的ID
	SkuId *string `json:"sku_id,omitempty" xml:"sku_id,omitempty"`
	// SKU面值
	SkuValue *string `json:"sku_value,omitempty" xml:"sku_value,omitempty"`
	// 流水状态(0初始状态, 1采购失败可重试, 2采购失败不可重试, 3采购成功, 4预算库创建失败可重试, 5预算库创建失败不可重试, 6预算库叉棍见成功, 7预算调拨失败可重试, 8预算库调拨失败不可重试, 9预算库调拨成功)
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 商户在金融云的租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 总下单集分宝数量
	TotalAmount *int64 `json:"total_amount,omitempty" xml:"total_amount,omitempty"`
	// 集分宝SKU的预下单数量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 总下单金额
	TotalValue *string `json:"total_value,omitempty" xml:"total_value,omitempty"`
}

func (s QueryMypointsPreorderinstructionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMypointsPreorderinstructionResponse) GoString() string {
	return s.String()
}

func (s *QueryMypointsPreorderinstructionResponse) SetReqMsgId(v string) *QueryMypointsPreorderinstructionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetResultCode(v string) *QueryMypointsPreorderinstructionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetResultMsg(v string) *QueryMypointsPreorderinstructionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetBizId(v string) *QueryMypointsPreorderinstructionResponse {
	s.BizId = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetBudgetCode(v string) *QueryMypointsPreorderinstructionResponse {
	s.BudgetCode = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetChainId(v string) *QueryMypointsPreorderinstructionResponse {
	s.ChainId = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetEnv(v string) *QueryMypointsPreorderinstructionResponse {
	s.Env = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetExtendInfo(v string) *QueryMypointsPreorderinstructionResponse {
	s.ExtendInfo = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetMemo(v string) *QueryMypointsPreorderinstructionResponse {
	s.Memo = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetPid(v string) *QueryMypointsPreorderinstructionResponse {
	s.Pid = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetProductCode(v string) *QueryMypointsPreorderinstructionResponse {
	s.ProductCode = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetPreOrderId(v string) *QueryMypointsPreorderinstructionResponse {
	s.PreOrderId = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetRemainCount(v int64) *QueryMypointsPreorderinstructionResponse {
	s.RemainCount = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetSkuAmount(v int64) *QueryMypointsPreorderinstructionResponse {
	s.SkuAmount = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetSkuId(v string) *QueryMypointsPreorderinstructionResponse {
	s.SkuId = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetSkuValue(v string) *QueryMypointsPreorderinstructionResponse {
	s.SkuValue = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetStatus(v int64) *QueryMypointsPreorderinstructionResponse {
	s.Status = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetTenantId(v string) *QueryMypointsPreorderinstructionResponse {
	s.TenantId = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetTotalAmount(v int64) *QueryMypointsPreorderinstructionResponse {
	s.TotalAmount = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetTotalCount(v int64) *QueryMypointsPreorderinstructionResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryMypointsPreorderinstructionResponse) SetTotalValue(v string) *QueryMypointsPreorderinstructionResponse {
	s.TotalValue = &v
	return s
}

type QueryMypointsOrderinstructionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 环境标识
	Env *string `json:"env,omitempty" xml:"env,omitempty" require:"true"`
	// 业务幂等号
	OrderNo *string `json:"order_no,omitempty" xml:"order_no,omitempty" require:"true"`
	// SKU ID
	SkuId *string `json:"sku_id,omitempty" xml:"sku_id,omitempty" require:"true"`
}

func (s QueryMypointsOrderinstructionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMypointsOrderinstructionRequest) GoString() string {
	return s.String()
}

func (s *QueryMypointsOrderinstructionRequest) SetAuthToken(v string) *QueryMypointsOrderinstructionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMypointsOrderinstructionRequest) SetProductInstanceId(v string) *QueryMypointsOrderinstructionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMypointsOrderinstructionRequest) SetChainId(v string) *QueryMypointsOrderinstructionRequest {
	s.ChainId = &v
	return s
}

func (s *QueryMypointsOrderinstructionRequest) SetEnv(v string) *QueryMypointsOrderinstructionRequest {
	s.Env = &v
	return s
}

func (s *QueryMypointsOrderinstructionRequest) SetOrderNo(v string) *QueryMypointsOrderinstructionRequest {
	s.OrderNo = &v
	return s
}

func (s *QueryMypointsOrderinstructionRequest) SetSkuId(v string) *QueryMypointsOrderinstructionRequest {
	s.SkuId = &v
	return s
}

type QueryMypointsOrderinstructionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务请求单号
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty"`
	// 环境标识
	Env *string `json:"env,omitempty" xml:"env,omitempty"`
	// 扩展信息
	ExtendInfo *string `json:"extend_info,omitempty" xml:"extend_info,omitempty"`
	// 订单ID(env+chain_id+tenant_id+sku_id+biz_id)
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 预下单ID
	PreOrderId *string `json:"pre_order_id,omitempty" xml:"pre_order_id,omitempty"`
	// 包含集分宝数量(个)
	SkuAmount *int64 `json:"sku_amount,omitempty" xml:"sku_amount,omitempty"`
	// SKU ID
	SkuId *string `json:"sku_id,omitempty" xml:"sku_id,omitempty"`
	// 面值
	SkuValue *string `json:"sku_value,omitempty" xml:"sku_value,omitempty"`
	// 状态(0:初始,1:失败可重试,2:失败不可重试,3:成功)
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 商家在金融云的租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s QueryMypointsOrderinstructionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMypointsOrderinstructionResponse) GoString() string {
	return s.String()
}

func (s *QueryMypointsOrderinstructionResponse) SetReqMsgId(v string) *QueryMypointsOrderinstructionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMypointsOrderinstructionResponse) SetResultCode(v string) *QueryMypointsOrderinstructionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMypointsOrderinstructionResponse) SetResultMsg(v string) *QueryMypointsOrderinstructionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMypointsOrderinstructionResponse) SetBizId(v string) *QueryMypointsOrderinstructionResponse {
	s.BizId = &v
	return s
}

func (s *QueryMypointsOrderinstructionResponse) SetChainId(v string) *QueryMypointsOrderinstructionResponse {
	s.ChainId = &v
	return s
}

func (s *QueryMypointsOrderinstructionResponse) SetEnv(v string) *QueryMypointsOrderinstructionResponse {
	s.Env = &v
	return s
}

func (s *QueryMypointsOrderinstructionResponse) SetExtendInfo(v string) *QueryMypointsOrderinstructionResponse {
	s.ExtendInfo = &v
	return s
}

func (s *QueryMypointsOrderinstructionResponse) SetOrderId(v string) *QueryMypointsOrderinstructionResponse {
	s.OrderId = &v
	return s
}

func (s *QueryMypointsOrderinstructionResponse) SetPreOrderId(v string) *QueryMypointsOrderinstructionResponse {
	s.PreOrderId = &v
	return s
}

func (s *QueryMypointsOrderinstructionResponse) SetSkuAmount(v int64) *QueryMypointsOrderinstructionResponse {
	s.SkuAmount = &v
	return s
}

func (s *QueryMypointsOrderinstructionResponse) SetSkuId(v string) *QueryMypointsOrderinstructionResponse {
	s.SkuId = &v
	return s
}

func (s *QueryMypointsOrderinstructionResponse) SetSkuValue(v string) *QueryMypointsOrderinstructionResponse {
	s.SkuValue = &v
	return s
}

func (s *QueryMypointsOrderinstructionResponse) SetStatus(v int64) *QueryMypointsOrderinstructionResponse {
	s.Status = &v
	return s
}

func (s *QueryMypointsOrderinstructionResponse) SetTenantId(v string) *QueryMypointsOrderinstructionResponse {
	s.TenantId = &v
	return s
}

type CreateAntcloudGatewayxFileUploadRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 上传文件作用的openapi method
	ApiCode *string `json:"api_code,omitempty" xml:"api_code,omitempty" require:"true"`
	// 文件标签，多个标签;分割
	FileLabel *string `json:"file_label,omitempty" xml:"file_label,omitempty" maxLength:"100"`
	// 自定义的文件元数据
	FileMetadata *string `json:"file_metadata,omitempty" xml:"file_metadata,omitempty" maxLength:"1000"`
	// 文件名，不传则随机生成文件名
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" maxLength:"100"`
	// 文件的多媒体类型
	MimeType *string `json:"mime_type,omitempty" xml:"mime_type,omitempty"`
	// 产品方的api归属集群，即productInstanceId
	ApiCluster *string `json:"api_cluster,omitempty" xml:"api_cluster,omitempty"`
}

func (s CreateAntcloudGatewayxFileUploadRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAntcloudGatewayxFileUploadRequest) GoString() string {
	return s.String()
}

func (s *CreateAntcloudGatewayxFileUploadRequest) SetAuthToken(v string) *CreateAntcloudGatewayxFileUploadRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadRequest) SetApiCode(v string) *CreateAntcloudGatewayxFileUploadRequest {
	s.ApiCode = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadRequest) SetFileLabel(v string) *CreateAntcloudGatewayxFileUploadRequest {
	s.FileLabel = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadRequest) SetFileMetadata(v string) *CreateAntcloudGatewayxFileUploadRequest {
	s.FileMetadata = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadRequest) SetFileName(v string) *CreateAntcloudGatewayxFileUploadRequest {
	s.FileName = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadRequest) SetMimeType(v string) *CreateAntcloudGatewayxFileUploadRequest {
	s.MimeType = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadRequest) SetApiCluster(v string) *CreateAntcloudGatewayxFileUploadRequest {
	s.ApiCluster = &v
	return s
}

type CreateAntcloudGatewayxFileUploadResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 上传有效期
	ExpiredTime *string `json:"expired_time,omitempty" xml:"expired_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 32位文件唯一id
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty"`
	// 放入http请求头里
	UploadHeaders []*XNameValuePair `json:"upload_headers,omitempty" xml:"upload_headers,omitempty" type:"Repeated"`
	// 文件上传地址
	UploadUrl *string `json:"upload_url,omitempty" xml:"upload_url,omitempty"`
}

func (s CreateAntcloudGatewayxFileUploadResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAntcloudGatewayxFileUploadResponse) GoString() string {
	return s.String()
}

func (s *CreateAntcloudGatewayxFileUploadResponse) SetReqMsgId(v string) *CreateAntcloudGatewayxFileUploadResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadResponse) SetResultCode(v string) *CreateAntcloudGatewayxFileUploadResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadResponse) SetResultMsg(v string) *CreateAntcloudGatewayxFileUploadResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadResponse) SetExpiredTime(v string) *CreateAntcloudGatewayxFileUploadResponse {
	s.ExpiredTime = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadResponse) SetFileId(v string) *CreateAntcloudGatewayxFileUploadResponse {
	s.FileId = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadResponse) SetUploadHeaders(v []*XNameValuePair) *CreateAntcloudGatewayxFileUploadResponse {
	s.UploadHeaders = v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadResponse) SetUploadUrl(v string) *CreateAntcloudGatewayxFileUploadResponse {
	s.UploadUrl = &v
	return s
}

type Client struct {
	Endpoint                *string
	RegionId                *string
	AccessKeyId             *string
	AccessKeySecret         *string
	Protocol                *string
	UserAgent               *string
	ReadTimeout             *int
	ConnectTimeout          *int
	HttpProxy               *string
	HttpsProxy              *string
	Socks5Proxy             *string
	Socks5NetWork           *string
	NoProxy                 *string
	MaxIdleConns            *int
	SecurityToken           *string
	MaxIdleTimeMillis       *int
	KeepAliveDurationMillis *int
	MaxRequests             *int
	MaxRequestsPerHost      *int
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
func NewClient(config *Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *Config) (_err error) {
	if tea.BoolValue(util.IsUnset(tea.ToMap(config))) {
		_err = tea.NewSDKError(map[string]interface{}{
			"code":    "ParameterMissing",
			"message": "'config' can not be unset",
		})
		return _err
	}

	client.AccessKeyId = config.AccessKeyId
	client.AccessKeySecret = config.AccessKeySecret
	client.SecurityToken = config.SecurityToken
	client.Endpoint = config.Endpoint
	client.Protocol = config.Protocol
	client.UserAgent = config.UserAgent
	client.ReadTimeout = util.DefaultNumber(config.ReadTimeout, tea.Int(20000))
	client.ConnectTimeout = util.DefaultNumber(config.ConnectTimeout, tea.Int(20000))
	client.HttpProxy = config.HttpProxy
	client.HttpsProxy = config.HttpsProxy
	client.NoProxy = config.NoProxy
	client.Socks5Proxy = config.Socks5Proxy
	client.Socks5NetWork = config.Socks5NetWork
	client.MaxIdleConns = util.DefaultNumber(config.MaxIdleConns, tea.Int(60000))
	client.MaxIdleTimeMillis = util.DefaultNumber(config.MaxIdleTimeMillis, tea.Int(5))
	client.KeepAliveDurationMillis = util.DefaultNumber(config.KeepAliveDurationMillis, tea.Int(5000))
	client.MaxRequests = util.DefaultNumber(config.MaxRequests, tea.Int(100))
	client.MaxRequestsPerHost = util.DefaultNumber(config.MaxRequestsPerHost, tea.Int(100))
	return nil
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
func (client *Client) DoRequest(version *string, action *string, protocol *string, method *string, pathname *string, request map[string]interface{}, headers map[string]*string, runtime *util.RuntimeOptions) (_result map[string]interface{}, _err error) {
	_err = tea.Validate(runtime)
	if _err != nil {
		return _result, _err
	}
	_runtime := map[string]interface{}{
		"timeouted":               "retry",
		"readTimeout":             tea.IntValue(util.DefaultNumber(runtime.ReadTimeout, client.ReadTimeout)),
		"connectTimeout":          tea.IntValue(util.DefaultNumber(runtime.ConnectTimeout, client.ConnectTimeout)),
		"httpProxy":               tea.StringValue(util.DefaultString(runtime.HttpProxy, client.HttpProxy)),
		"httpsProxy":              tea.StringValue(util.DefaultString(runtime.HttpsProxy, client.HttpsProxy)),
		"noProxy":                 tea.StringValue(util.DefaultString(runtime.NoProxy, client.NoProxy)),
		"maxIdleConns":            tea.IntValue(util.DefaultNumber(runtime.MaxIdleConns, client.MaxIdleConns)),
		"maxIdleTimeMillis":       tea.IntValue(client.MaxIdleTimeMillis),
		"keepAliveDurationMillis": tea.IntValue(client.KeepAliveDurationMillis),
		"maxRequests":             tea.IntValue(client.MaxRequests),
		"maxRequestsPerHost":      tea.IntValue(client.MaxRequestsPerHost),
		"retry": map[string]interface{}{
			"retryable":   tea.BoolValue(runtime.Autoretry),
			"maxAttempts": tea.IntValue(util.DefaultNumber(runtime.MaxAttempts, tea.Int(3))),
		},
		"backoff": map[string]interface{}{
			"policy": tea.StringValue(util.DefaultString(runtime.BackoffPolicy, tea.String("no"))),
			"period": tea.IntValue(util.DefaultNumber(runtime.BackoffPeriod, tea.Int(1))),
		},
		"ignoreSSL": tea.BoolValue(runtime.IgnoreSSL),
	}

	_resp := make(map[string]interface{})
	for _retryTimes := 0; tea.BoolValue(tea.AllowRetry(_runtime["retry"], tea.Int(_retryTimes))); _retryTimes++ {
		if _retryTimes > 0 {
			_backoffTime := tea.GetBackoffTime(_runtime["backoff"], tea.Int(_retryTimes))
			if tea.IntValue(_backoffTime) > 0 {
				tea.Sleep(_backoffTime)
			}
		}

		_resp, _err = func() (map[string]interface{}, error) {
			request_ := tea.NewRequest()
			request_.Protocol = util.DefaultString(client.Protocol, protocol)
			request_.Method = method
			request_.Pathname = pathname
			request_.Query = map[string]*string{
				"method":           action,
				"version":          version,
				"sign_type":        tea.String("HmacSHA1"),
				"req_time":         antchainutil.GetTimestamp(),
				"req_msg_id":       antchainutil.GetNonce(),
				"access_key":       client.AccessKeyId,
				"base_sdk_version": tea.String("TeaSDK-2.0"),
				"sdk_version":      tea.String("1.3.73"),
			}
			if !tea.BoolValue(util.Empty(client.SecurityToken)) {
				request_.Query["security_token"] = client.SecurityToken
			}

			request_.Headers = tea.Merge(map[string]*string{
				"host":       util.DefaultString(client.Endpoint, tea.String("openapi.antchain.antgroup.com")),
				"user-agent": util.GetUserAgent(client.UserAgent),
			}, headers)
			tmp := util.AnyifyMapValue(rpcutil.Query(request))
			request_.Body = tea.ToReader(util.ToFormString(tmp))
			request_.Headers["content-type"] = tea.String("application/x-www-form-urlencoded")
			signedParam := tea.Merge(request_.Query,
				rpcutil.Query(request))
			request_.Query["sign"] = antchainutil.GetSignature(signedParam, client.AccessKeySecret)
			response_, _err := tea.DoRequest(request_, _runtime)
			if _err != nil {
				return _result, _err
			}
			raw, _err := util.ReadAsString(response_.Body)
			if _err != nil {
				return _result, _err
			}

			obj := util.ParseJSON(raw)
			res := util.AssertAsMap(obj)
			resp := util.AssertAsMap(res["response"])
			if tea.BoolValue(antchainutil.HasError(raw, client.AccessKeySecret)) {
				_err = tea.NewSDKError(map[string]interface{}{
					"message": resp["result_msg"],
					"data":    resp,
					"code":    resp["result_code"],
				})
				return _result, _err
			}

			_result = resp
			return _result, _err
		}()
		if !tea.BoolValue(tea.Retryable(_err)) {
			break
		}
	}

	return _resp, _err
}

/**
 * Description: 创建卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-创建卡密
 */
func (client *Client) ExecCardCreate(request *ExecCardCreateRequest) (_result *ExecCardCreateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCardCreateResponse{}
	_body, _err := client.ExecCardCreateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-创建卡密
 */
func (client *Client) ExecCardCreateEx(request *ExecCardCreateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCardCreateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCardCreateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.card.create.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-查询卡密
 */
func (client *Client) ExecCardQuery(request *ExecCardQueryRequest) (_result *ExecCardQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCardQueryResponse{}
	_body, _err := client.ExecCardQueryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-查询卡密
 */
func (client *Client) ExecCardQueryEx(request *ExecCardQueryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCardQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCardQueryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.card.query.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 记名卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-记名卡发行
 */
func (client *Client) ExecCardBindname(request *ExecCardBindnameRequest) (_result *ExecCardBindnameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCardBindnameResponse{}
	_body, _err := client.ExecCardBindnameEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 记名卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-记名卡发行
 */
func (client *Client) ExecCardBindnameEx(request *ExecCardBindnameRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCardBindnameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCardBindnameResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.card.bindname.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 充值卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-充值卡密
 */
func (client *Client) ExecCardCharge(request *ExecCardChargeRequest) (_result *ExecCardChargeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCardChargeResponse{}
	_body, _err := client.ExecCardChargeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 充值卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-充值卡密
 */
func (client *Client) ExecCardChargeEx(request *ExecCardChargeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCardChargeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCardChargeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.card.charge.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 核销卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-核销卡密
 */
func (client *Client) ExecCardWriteoff(request *ExecCardWriteoffRequest) (_result *ExecCardWriteoffResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCardWriteoffResponse{}
	_body, _err := client.ExecCardWriteoffEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 核销卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-核销卡密
 */
func (client *Client) ExecCardWriteoffEx(request *ExecCardWriteoffRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCardWriteoffResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCardWriteoffResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.card.writeoff.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 过期卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-过期卡密
 */
func (client *Client) ExecCardExpired(request *ExecCardExpiredRequest) (_result *ExecCardExpiredResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCardExpiredResponse{}
	_body, _err := client.ExecCardExpiredEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 过期卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-过期卡密
 */
func (client *Client) ExecCardExpiredEx(request *ExecCardExpiredRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCardExpiredResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCardExpiredResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.card.expired.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 风控禁用卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-风控禁用
 */
func (client *Client) ExecCardForbidden(request *ExecCardForbiddenRequest) (_result *ExecCardForbiddenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCardForbiddenResponse{}
	_body, _err := client.ExecCardForbiddenEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 风控禁用卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-风控禁用
 */
func (client *Client) ExecCardForbiddenEx(request *ExecCardForbiddenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCardForbiddenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCardForbiddenResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.card.forbidden.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 充值重置卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-充值重置
 */
func (client *Client) ExecCardChargereset(request *ExecCardChargeresetRequest) (_result *ExecCardChargeresetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCardChargeresetResponse{}
	_body, _err := client.ExecCardChargeresetEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 充值重置卡密，卡密托管服务调用，需要传入交易的签名
 * Summary: 数字商品服务-电子券卡密服务-充值重置
 */
func (client *Client) ExecCardChargeresetEx(request *ExecCardChargeresetRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCardChargeresetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCardChargeresetResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.card.chargereset.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 个人或机构账户注册
 * Summary: 数字商品服务-消费卡服务-个人/机构注册
 */
func (client *Client) CreateConsumecardAccount(request *CreateConsumecardAccountRequest) (_result *CreateConsumecardAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateConsumecardAccountResponse{}
	_body, _err := client.CreateConsumecardAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 个人或机构账户注册
 * Summary: 数字商品服务-消费卡服务-个人/机构注册
 */
func (client *Client) CreateConsumecardAccountEx(request *CreateConsumecardAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateConsumecardAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateConsumecardAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.account.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 个人/机构账户注销
 * Summary: 数字商品服务-消费卡服务-个人/机构注销
 */
func (client *Client) OfflineConsumecardAccount(request *OfflineConsumecardAccountRequest) (_result *OfflineConsumecardAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OfflineConsumecardAccountResponse{}
	_body, _err := client.OfflineConsumecardAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 个人/机构账户注销
 * Summary: 数字商品服务-消费卡服务-个人/机构注销
 */
func (client *Client) OfflineConsumecardAccountEx(request *OfflineConsumecardAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OfflineConsumecardAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OfflineConsumecardAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.account.offline"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 企业消费卡余额回退
 * Summary: 数字商品服务-消费卡服务-企业消费卡回退
 */
func (client *Client) ReclaimConsumecardWallet(request *ReclaimConsumecardWalletRequest) (_result *ReclaimConsumecardWalletResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReclaimConsumecardWalletResponse{}
	_body, _err := client.ReclaimConsumecardWalletEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 企业消费卡余额回退
 * Summary: 数字商品服务-消费卡服务-企业消费卡回退
 */
func (client *Client) ReclaimConsumecardWalletEx(request *ReclaimConsumecardWalletRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReclaimConsumecardWalletResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReclaimConsumecardWalletResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.wallet.reclaim"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 个人/机构账户禁用
 * Summary: 数字商品服务-消费卡服务-账户禁用
 */
func (client *Client) FreezeConsumecardAccount(request *FreezeConsumecardAccountRequest) (_result *FreezeConsumecardAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &FreezeConsumecardAccountResponse{}
	_body, _err := client.FreezeConsumecardAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 个人/机构账户禁用
 * Summary: 数字商品服务-消费卡服务-账户禁用
 */
func (client *Client) FreezeConsumecardAccountEx(request *FreezeConsumecardAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *FreezeConsumecardAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &FreezeConsumecardAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.account.freeze"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 个人/机构账户解禁
 * Summary: 数字商品服务-消费卡服务-账户解禁
 */
func (client *Client) UnfreezeConsumecardAccount(request *UnfreezeConsumecardAccountRequest) (_result *UnfreezeConsumecardAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UnfreezeConsumecardAccountResponse{}
	_body, _err := client.UnfreezeConsumecardAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 个人/机构账户解禁
 * Summary: 数字商品服务-消费卡服务-账户解禁
 */
func (client *Client) UnfreezeConsumecardAccountEx(request *UnfreezeConsumecardAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UnfreezeConsumecardAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnfreezeConsumecardAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.account.unfreeze"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 消费卡风控调整(特殊权限,暂不开放)
 * Summary: 数字商品服务-消费卡服务-消费卡风控调整
 */
func (client *Client) UpdateConsumecardRiskcontrol(request *UpdateConsumecardRiskcontrolRequest) (_result *UpdateConsumecardRiskcontrolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateConsumecardRiskcontrolResponse{}
	_body, _err := client.UpdateConsumecardRiskcontrolEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 消费卡风控调整(特殊权限,暂不开放)
 * Summary: 数字商品服务-消费卡服务-消费卡风控调整
 */
func (client *Client) UpdateConsumecardRiskcontrolEx(request *UpdateConsumecardRiskcontrolRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateConsumecardRiskcontrolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateConsumecardRiskcontrolResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.riskcontrol.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 账单查询
 * Summary: 数字商品服务-消费卡服务-账单查询
 */
func (client *Client) QueryConsumecardBill(request *QueryConsumecardBillRequest) (_result *QueryConsumecardBillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardBillResponse{}
	_body, _err := client.QueryConsumecardBillEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 账单查询
 * Summary: 数字商品服务-消费卡服务-账单查询
 */
func (client *Client) QueryConsumecardBillEx(request *QueryConsumecardBillRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardBillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardBillResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.bill.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 企业消费卡充值冻结
 * Summary: 数字商品服务-消费卡服务-消费卡充值冻结
 */
func (client *Client) ChargeConsumecardWallet(request *ChargeConsumecardWalletRequest) (_result *ChargeConsumecardWalletResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ChargeConsumecardWalletResponse{}
	_body, _err := client.ChargeConsumecardWalletEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 企业消费卡充值冻结
 * Summary: 数字商品服务-消费卡服务-消费卡充值冻结
 */
func (client *Client) ChargeConsumecardWalletEx(request *ChargeConsumecardWalletRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ChargeConsumecardWalletResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ChargeConsumecardWalletResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.wallet.charge"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更账户信息
 * Summary: 数字商品服务-消费卡服务-更新账户
 */
func (client *Client) UpdateConsumecardAccount(request *UpdateConsumecardAccountRequest) (_result *UpdateConsumecardAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateConsumecardAccountResponse{}
	_body, _err := client.UpdateConsumecardAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更账户信息
 * Summary: 数字商品服务-消费卡服务-更新账户
 */
func (client *Client) UpdateConsumecardAccountEx(request *UpdateConsumecardAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateConsumecardAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateConsumecardAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.account.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 账单创建
 * Summary: 数字商品服务-消费卡服务-账单创建
 */
func (client *Client) CreateConsumecardBill(request *CreateConsumecardBillRequest) (_result *CreateConsumecardBillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateConsumecardBillResponse{}
	_body, _err := client.CreateConsumecardBillEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 账单创建
 * Summary: 数字商品服务-消费卡服务-账单创建
 */
func (client *Client) CreateConsumecardBillEx(request *CreateConsumecardBillRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateConsumecardBillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateConsumecardBillResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.bill.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 账单创建确认成功或失败
 * Summary: 数字商品服务-消费卡服务-账单创建确认
 */
func (client *Client) ConfirmConsumecardBillcreate(request *ConfirmConsumecardBillcreateRequest) (_result *ConfirmConsumecardBillcreateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmConsumecardBillcreateResponse{}
	_body, _err := client.ConfirmConsumecardBillcreateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 账单创建确认成功或失败
 * Summary: 数字商品服务-消费卡服务-账单创建确认
 */
func (client *Client) ConfirmConsumecardBillcreateEx(request *ConfirmConsumecardBillcreateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmConsumecardBillcreateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmConsumecardBillcreateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.billcreate.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 账单取消
 * Summary: 数字商品服务-消费卡服务-取消账单
 */
func (client *Client) CancelConsumecardBill(request *CancelConsumecardBillRequest) (_result *CancelConsumecardBillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelConsumecardBillResponse{}
	_body, _err := client.CancelConsumecardBillEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 账单取消
 * Summary: 数字商品服务-消费卡服务-取消账单
 */
func (client *Client) CancelConsumecardBillEx(request *CancelConsumecardBillRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelConsumecardBillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelConsumecardBillResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.bill.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 账单支付
 * Summary: 数字商品服务-消费卡服务-账单支付
 */
func (client *Client) ExecConsumecardBillpay(request *ExecConsumecardBillpayRequest) (_result *ExecConsumecardBillpayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecConsumecardBillpayResponse{}
	_body, _err := client.ExecConsumecardBillpayEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 账单支付
 * Summary: 数字商品服务-消费卡服务-账单支付
 */
func (client *Client) ExecConsumecardBillpayEx(request *ExecConsumecardBillpayRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecConsumecardBillpayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecConsumecardBillpayResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.billpay.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 账单核销和交易核销，传入交易类型和订单Id
 * Summary: 数字商品服务-消费卡服务-账单和交易核销
 */
func (client *Client) ExecConsumecardOrderwriteoff(request *ExecConsumecardOrderwriteoffRequest) (_result *ExecConsumecardOrderwriteoffResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecConsumecardOrderwriteoffResponse{}
	_body, _err := client.ExecConsumecardOrderwriteoffEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 账单核销和交易核销，传入交易类型和订单Id
 * Summary: 数字商品服务-消费卡服务-账单和交易核销
 */
func (client *Client) ExecConsumecardOrderwriteoffEx(request *ExecConsumecardOrderwriteoffRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecConsumecardOrderwriteoffResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecConsumecardOrderwriteoffResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.orderwriteoff.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 处理买家的退款申请，接受退款或者拒绝退款
 * Summary: 数字商品服务-消费卡服务-账单退款处理
 */
func (client *Client) ConfirmConsumecardBillrefund(request *ConfirmConsumecardBillrefundRequest) (_result *ConfirmConsumecardBillrefundResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmConsumecardBillrefundResponse{}
	_body, _err := client.ConfirmConsumecardBillrefundEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 处理买家的退款申请，接受退款或者拒绝退款
 * Summary: 数字商品服务-消费卡服务-账单退款处理
 */
func (client *Client) ConfirmConsumecardBillrefundEx(request *ConfirmConsumecardBillrefundRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmConsumecardBillrefundResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmConsumecardBillrefundResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.billrefund.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询账户信息
 * Summary: 数字商品服务-消费卡服务-查询账户信息
 */
func (client *Client) QueryConsumecardAccount(request *QueryConsumecardAccountRequest) (_result *QueryConsumecardAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardAccountResponse{}
	_body, _err := client.QueryConsumecardAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询账户信息
 * Summary: 数字商品服务-消费卡服务-查询账户信息
 */
func (client *Client) QueryConsumecardAccountEx(request *QueryConsumecardAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.account.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开通钱包
 * Summary: 数字商品服务-消费卡服务-开通钱包
 */
func (client *Client) OpenConsumecardWallet(request *OpenConsumecardWalletRequest) (_result *OpenConsumecardWalletResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OpenConsumecardWalletResponse{}
	_body, _err := client.OpenConsumecardWalletEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开通钱包
 * Summary: 数字商品服务-消费卡服务-开通钱包
 */
func (client *Client) OpenConsumecardWalletEx(request *OpenConsumecardWalletRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OpenConsumecardWalletResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OpenConsumecardWalletResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.wallet.open"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询钱包信息
 * Summary: 数字商品服务-消费卡服务-查询钱包
 */
func (client *Client) QueryConsumecardWallet(request *QueryConsumecardWalletRequest) (_result *QueryConsumecardWalletResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardWalletResponse{}
	_body, _err := client.QueryConsumecardWalletEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询钱包信息
 * Summary: 数字商品服务-消费卡服务-查询钱包
 */
func (client *Client) QueryConsumecardWalletEx(request *QueryConsumecardWalletRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardWalletResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardWalletResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.wallet.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 充值并兑换token,资金托管员权限,运营平台无权限。
 * Summary: 数字商品服务-消费卡服务-充值并兑换资产
 */
func (client *Client) ExecConsumecardWalletchargetotoken(request *ExecConsumecardWalletchargetotokenRequest) (_result *ExecConsumecardWalletchargetotokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecConsumecardWalletchargetotokenResponse{}
	_body, _err := client.ExecConsumecardWalletchargetotokenEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 充值并兑换token,资金托管员权限,运营平台无权限。
 * Summary: 数字商品服务-消费卡服务-充值并兑换资产
 */
func (client *Client) ExecConsumecardWalletchargetotokenEx(request *ExecConsumecardWalletchargetotokenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecConsumecardWalletchargetotokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecConsumecardWalletchargetotokenResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.walletchargetotoken.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 湮灭自己发行的token并提现
 * Summary: 数字商品服务-消费卡服务-湮灭资产并提现
 */
func (client *Client) ExecConsumecardWalletredeemtoken(request *ExecConsumecardWalletredeemtokenRequest) (_result *ExecConsumecardWalletredeemtokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecConsumecardWalletredeemtokenResponse{}
	_body, _err := client.ExecConsumecardWalletredeemtokenEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 湮灭自己发行的token并提现
 * Summary: 数字商品服务-消费卡服务-湮灭资产并提现
 */
func (client *Client) ExecConsumecardWalletredeemtokenEx(request *ExecConsumecardWalletredeemtokenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecConsumecardWalletredeemtokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecConsumecardWalletredeemtokenResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.walletredeemtoken.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 买家发起交易
 * Summary: 数字商品服务-消费卡服务-买家发起交易
 */
func (client *Client) StartConsumecardPurchase(request *StartConsumecardPurchaseRequest) (_result *StartConsumecardPurchaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartConsumecardPurchaseResponse{}
	_body, _err := client.StartConsumecardPurchaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 买家发起交易
 * Summary: 数字商品服务-消费卡服务-买家发起交易
 */
func (client *Client) StartConsumecardPurchaseEx(request *StartConsumecardPurchaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartConsumecardPurchaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartConsumecardPurchaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.purchase.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消交易，买家发起
 * Summary: 数字商品服务-消费卡服务-买家取消交易
 */
func (client *Client) CancelConsumecardBuyerpurchase(request *CancelConsumecardBuyerpurchaseRequest) (_result *CancelConsumecardBuyerpurchaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelConsumecardBuyerpurchaseResponse{}
	_body, _err := client.CancelConsumecardBuyerpurchaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消交易，买家发起
 * Summary: 数字商品服务-消费卡服务-买家取消交易
 */
func (client *Client) CancelConsumecardBuyerpurchaseEx(request *CancelConsumecardBuyerpurchaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelConsumecardBuyerpurchaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelConsumecardBuyerpurchaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.buyerpurchase.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 买家申请退款
 * Summary: 数字商品服务-消费卡服务-买家申请退款
 */
func (client *Client) ApplyConsumecardPurchaserefund(request *ApplyConsumecardPurchaserefundRequest) (_result *ApplyConsumecardPurchaserefundResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyConsumecardPurchaserefundResponse{}
	_body, _err := client.ApplyConsumecardPurchaserefundEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 买家申请退款
 * Summary: 数字商品服务-消费卡服务-买家申请退款
 */
func (client *Client) ApplyConsumecardPurchaserefundEx(request *ApplyConsumecardPurchaserefundRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyConsumecardPurchaserefundResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyConsumecardPurchaserefundResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.purchaserefund.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 买家申请售后
 * Summary: 数字商品服务-消费卡服务-买家申请售后
 */
func (client *Client) ApplyConsumecardPurchasereplace(request *ApplyConsumecardPurchasereplaceRequest) (_result *ApplyConsumecardPurchasereplaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyConsumecardPurchasereplaceResponse{}
	_body, _err := client.ApplyConsumecardPurchasereplaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 买家申请售后
 * Summary: 数字商品服务-消费卡服务-买家申请售后
 */
func (client *Client) ApplyConsumecardPurchasereplaceEx(request *ApplyConsumecardPurchasereplaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyConsumecardPurchasereplaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyConsumecardPurchasereplaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.purchasereplace.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 买家确认收货
 * Summary: 数字商品服务-消费卡服务-买家确认收货
 */
func (client *Client) ExecConsumecardPurchasereceive(request *ExecConsumecardPurchasereceiveRequest) (_result *ExecConsumecardPurchasereceiveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecConsumecardPurchasereceiveResponse{}
	_body, _err := client.ExecConsumecardPurchasereceiveEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 买家确认收货
 * Summary: 数字商品服务-消费卡服务-买家确认收货
 */
func (client *Client) ExecConsumecardPurchasereceiveEx(request *ExecConsumecardPurchasereceiveRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecConsumecardPurchasereceiveResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecConsumecardPurchasereceiveResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.purchasereceive.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 卖家拒绝交易
 * Summary: 数字商品服务-消费卡服务-卖家拒绝交易
 */
func (client *Client) RefuseConsumecardPurchase(request *RefuseConsumecardPurchaseRequest) (_result *RefuseConsumecardPurchaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RefuseConsumecardPurchaseResponse{}
	_body, _err := client.RefuseConsumecardPurchaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 卖家拒绝交易
 * Summary: 数字商品服务-消费卡服务-卖家拒绝交易
 */
func (client *Client) RefuseConsumecardPurchaseEx(request *RefuseConsumecardPurchaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RefuseConsumecardPurchaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RefuseConsumecardPurchaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.purchase.refuse"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 卖家退款操作。可以同意退款和拒绝退款。
 * Summary: 数字商品服务-消费卡服务-卖家退款操作
 */
func (client *Client) SetConsumecardPurchaserefund(request *SetConsumecardPurchaserefundRequest) (_result *SetConsumecardPurchaserefundResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetConsumecardPurchaserefundResponse{}
	_body, _err := client.SetConsumecardPurchaserefundEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 卖家退款操作。可以同意退款和拒绝退款。
 * Summary: 数字商品服务-消费卡服务-卖家退款操作
 */
func (client *Client) SetConsumecardPurchaserefundEx(request *SetConsumecardPurchaserefundRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetConsumecardPurchaserefundResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetConsumecardPurchaserefundResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.purchaserefund.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 卖家换货操作。可以同意换货，拒绝换货
 * Summary: 数字商品服务-消费卡服务-卖家换货操作
 */
func (client *Client) SetConsumecardPurchasereplace(request *SetConsumecardPurchasereplaceRequest) (_result *SetConsumecardPurchasereplaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetConsumecardPurchasereplaceResponse{}
	_body, _err := client.SetConsumecardPurchasereplaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 卖家换货操作。可以同意换货，拒绝换货
 * Summary: 数字商品服务-消费卡服务-卖家换货操作
 */
func (client *Client) SetConsumecardPurchasereplaceEx(request *SetConsumecardPurchasereplaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetConsumecardPurchasereplaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetConsumecardPurchasereplaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.purchasereplace.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 卖家接单
 * Summary: 数字商品服务-消费卡服务-卖家接单
 */
func (client *Client) ConfirmConsumecardPurchase(request *ConfirmConsumecardPurchaseRequest) (_result *ConfirmConsumecardPurchaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmConsumecardPurchaseResponse{}
	_body, _err := client.ConfirmConsumecardPurchaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 卖家接单
 * Summary: 数字商品服务-消费卡服务-卖家接单
 */
func (client *Client) ConfirmConsumecardPurchaseEx(request *ConfirmConsumecardPurchaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmConsumecardPurchaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmConsumecardPurchaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.purchase.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 卖家发货
 * Summary: 数字商品服务-消费卡服务-卖家发货
 */
func (client *Client) SendConsumecardPurchase(request *SendConsumecardPurchaseRequest) (_result *SendConsumecardPurchaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SendConsumecardPurchaseResponse{}
	_body, _err := client.SendConsumecardPurchaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 卖家发货
 * Summary: 数字商品服务-消费卡服务-卖家发货
 */
func (client *Client) SendConsumecardPurchaseEx(request *SendConsumecardPurchaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SendConsumecardPurchaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SendConsumecardPurchaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.purchase.send"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 卖家售后补发货
 * Summary: 数字商品服务-消费卡服务-卖家售后补发货
 */
func (client *Client) ReplaceConsumecardPurchase(request *ReplaceConsumecardPurchaseRequest) (_result *ReplaceConsumecardPurchaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReplaceConsumecardPurchaseResponse{}
	_body, _err := client.ReplaceConsumecardPurchaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 卖家售后补发货
 * Summary: 数字商品服务-消费卡服务-卖家售后补发货
 */
func (client *Client) ReplaceConsumecardPurchaseEx(request *ReplaceConsumecardPurchaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReplaceConsumecardPurchaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReplaceConsumecardPurchaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.purchase.replace"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发布商品
 * Summary: 数字商品服务-消费卡服务-发布商品
 */
func (client *Client) CreateConsumecardGoods(request *CreateConsumecardGoodsRequest) (_result *CreateConsumecardGoodsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateConsumecardGoodsResponse{}
	_body, _err := client.CreateConsumecardGoodsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发布商品
 * Summary: 数字商品服务-消费卡服务-发布商品
 */
func (client *Client) CreateConsumecardGoodsEx(request *CreateConsumecardGoodsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateConsumecardGoodsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateConsumecardGoodsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.goods.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新商品信息
 * Summary: 数字商品服务-消费卡服务-更新商品信息
 */
func (client *Client) UpdateConsumecardGoods(request *UpdateConsumecardGoodsRequest) (_result *UpdateConsumecardGoodsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateConsumecardGoodsResponse{}
	_body, _err := client.UpdateConsumecardGoodsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新商品信息
 * Summary: 数字商品服务-消费卡服务-更新商品信息
 */
func (client *Client) UpdateConsumecardGoodsEx(request *UpdateConsumecardGoodsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateConsumecardGoodsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateConsumecardGoodsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.goods.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商品开放购买权限给指定账户
 * Summary: 数字商品服务-消费卡服务-开放购买权限
 */
func (client *Client) OpenConsumecardGoodstocustom(request *OpenConsumecardGoodstocustomRequest) (_result *OpenConsumecardGoodstocustomResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OpenConsumecardGoodstocustomResponse{}
	_body, _err := client.OpenConsumecardGoodstocustomEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商品开放购买权限给指定账户
 * Summary: 数字商品服务-消费卡服务-开放购买权限
 */
func (client *Client) OpenConsumecardGoodstocustomEx(request *OpenConsumecardGoodstocustomRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OpenConsumecardGoodstocustomResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OpenConsumecardGoodstocustomResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.goodstocustom.open"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 新增商品类别
 * Summary: 数字商品服务-消费卡服务-新增商品类别
 */
func (client *Client) CreateConsumecardGoodscategory(request *CreateConsumecardGoodscategoryRequest) (_result *CreateConsumecardGoodscategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateConsumecardGoodscategoryResponse{}
	_body, _err := client.CreateConsumecardGoodscategoryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 新增商品类别
 * Summary: 数字商品服务-消费卡服务-新增商品类别
 */
func (client *Client) CreateConsumecardGoodscategoryEx(request *CreateConsumecardGoodscategoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateConsumecardGoodscategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateConsumecardGoodscategoryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.goodscategory.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 设置商品一客一价
 * Summary: 数字商品服务-消费卡服务-设置一客一价
 */
func (client *Client) SetConsumecardGoodscustomprice(request *SetConsumecardGoodscustompriceRequest) (_result *SetConsumecardGoodscustompriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetConsumecardGoodscustompriceResponse{}
	_body, _err := client.SetConsumecardGoodscustompriceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 设置商品一客一价
 * Summary: 数字商品服务-消费卡服务-设置一客一价
 */
func (client *Client) SetConsumecardGoodscustompriceEx(request *SetConsumecardGoodscustompriceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetConsumecardGoodscustompriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetConsumecardGoodscustompriceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.goodscustomprice.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 上传图片获取URL
 * Summary: 数字商品服务-消费卡服务-上传图片
 */
func (client *Client) UploadConsumecardGoodsimage(request *UploadConsumecardGoodsimageRequest) (_result *UploadConsumecardGoodsimageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadConsumecardGoodsimageResponse{}
	_body, _err := client.UploadConsumecardGoodsimageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 上传图片获取URL
 * Summary: 数字商品服务-消费卡服务-上传图片
 */
func (client *Client) UploadConsumecardGoodsimageEx(request *UploadConsumecardGoodsimageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadConsumecardGoodsimageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadConsumecardGoodsimageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.goodsimage.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 机构订单提现试算
 * Summary: 数字商品服务-消费卡服务-企业提现试算
 */
func (client *Client) ExecConsumecardOrdertrywithdraw(request *ExecConsumecardOrdertrywithdrawRequest) (_result *ExecConsumecardOrdertrywithdrawResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecConsumecardOrdertrywithdrawResponse{}
	_body, _err := client.ExecConsumecardOrdertrywithdrawEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 机构订单提现试算
 * Summary: 数字商品服务-消费卡服务-企业提现试算
 */
func (client *Client) ExecConsumecardOrdertrywithdrawEx(request *ExecConsumecardOrdertrywithdrawRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecConsumecardOrdertrywithdrawResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecConsumecardOrdertrywithdrawResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.ordertrywithdraw.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 机构订单提现(区块区间模式)，传入要提现的区块区间，提现该区间的交易
 * Summary: 数字商品服务-消费卡服务-根据区块提现
 */
func (client *Client) ExecConsumecardOrderwithdrawbyblocknum(request *ExecConsumecardOrderwithdrawbyblocknumRequest) (_result *ExecConsumecardOrderwithdrawbyblocknumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecConsumecardOrderwithdrawbyblocknumResponse{}
	_body, _err := client.ExecConsumecardOrderwithdrawbyblocknumEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 机构订单提现(区块区间模式)，传入要提现的区块区间，提现该区间的交易
 * Summary: 数字商品服务-消费卡服务-根据区块提现
 */
func (client *Client) ExecConsumecardOrderwithdrawbyblocknumEx(request *ExecConsumecardOrderwithdrawbyblocknumRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecConsumecardOrderwithdrawbyblocknumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecConsumecardOrderwithdrawbyblocknumResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.orderwithdrawbyblocknum.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 机构订单提现(订单列表模式)，传入要提现的订单ID列表
 * Summary: 数字商品服务-消费卡服务-根据订单表提现
 */
func (client *Client) ExecConsumecardOrderwithdrawbyids(request *ExecConsumecardOrderwithdrawbyidsRequest) (_result *ExecConsumecardOrderwithdrawbyidsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecConsumecardOrderwithdrawbyidsResponse{}
	_body, _err := client.ExecConsumecardOrderwithdrawbyidsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 机构订单提现(订单列表模式)，传入要提现的订单ID列表
 * Summary: 数字商品服务-消费卡服务-根据订单表提现
 */
func (client *Client) ExecConsumecardOrderwithdrawbyidsEx(request *ExecConsumecardOrderwithdrawbyidsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecConsumecardOrderwithdrawbyidsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecConsumecardOrderwithdrawbyidsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.orderwithdrawbyids.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据提现单号获取提现结果
 * Summary: 数字商品服务-消费卡服务-获取提现结果
 */
func (client *Client) GetConsumecardOrderwithdrawresult(request *GetConsumecardOrderwithdrawresultRequest) (_result *GetConsumecardOrderwithdrawresultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetConsumecardOrderwithdrawresultResponse{}
	_body, _err := client.GetConsumecardOrderwithdrawresultEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据提现单号获取提现结果
 * Summary: 数字商品服务-消费卡服务-获取提现结果
 */
func (client *Client) GetConsumecardOrderwithdrawresultEx(request *GetConsumecardOrderwithdrawresultRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetConsumecardOrderwithdrawresultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetConsumecardOrderwithdrawresultResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.orderwithdrawresult.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 注销前需要回退资金,查询账户可回退金额
 * Summary: 数字商品服务-消费卡服务-查询可回退金额
 */
func (client *Client) QueryConsumecardWalletredeemable(request *QueryConsumecardWalletredeemableRequest) (_result *QueryConsumecardWalletredeemableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardWalletredeemableResponse{}
	_body, _err := client.QueryConsumecardWalletredeemableEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 注销前需要回退资金,查询账户可回退金额
 * Summary: 数字商品服务-消费卡服务-查询可回退金额
 */
func (client *Client) QueryConsumecardWalletredeemableEx(request *QueryConsumecardWalletredeemableRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardWalletredeemableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardWalletredeemableResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.walletredeemable.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发布商品是异步流程，根据requestId查询商品发布结果
 * Summary: 数字商品服务-消费卡服务-查询商品发布
 */
func (client *Client) QueryConsumecardGoodscreateresult(request *QueryConsumecardGoodscreateresultRequest) (_result *QueryConsumecardGoodscreateresultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardGoodscreateresultResponse{}
	_body, _err := client.QueryConsumecardGoodscreateresultEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发布商品是异步流程，根据requestId查询商品发布结果
 * Summary: 数字商品服务-消费卡服务-查询商品发布
 */
func (client *Client) QueryConsumecardGoodscreateresultEx(request *QueryConsumecardGoodscreateresultRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardGoodscreateresultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardGoodscreateresultResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.goodscreateresult.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询消费卡商品信息
 * Summary: 数字商品服务-消费卡服务-查询商品信息
 */
func (client *Client) QueryConsumecardGoods(request *QueryConsumecardGoodsRequest) (_result *QueryConsumecardGoodsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardGoodsResponse{}
	_body, _err := client.QueryConsumecardGoodsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询消费卡商品信息
 * Summary: 数字商品服务-消费卡服务-查询商品信息
 */
func (client *Client) QueryConsumecardGoodsEx(request *QueryConsumecardGoodsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardGoodsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardGoodsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.goods.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 账单退款申请
 * Summary: 数字商品服务-消费卡服务-账单退款申请
 */
func (client *Client) ApplyConsumecardBillrefund(request *ApplyConsumecardBillrefundRequest) (_result *ApplyConsumecardBillrefundResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyConsumecardBillrefundResponse{}
	_body, _err := client.ApplyConsumecardBillrefundEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 账单退款申请
 * Summary: 数字商品服务-消费卡服务-账单退款申请
 */
func (client *Client) ApplyConsumecardBillrefundEx(request *ApplyConsumecardBillrefundRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyConsumecardBillrefundResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyConsumecardBillrefundResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.billrefund.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询交易信息
 * Summary: 数字商品服务-消费卡服务-交易查询
 */
func (client *Client) QueryConsumecardPurchase(request *QueryConsumecardPurchaseRequest) (_result *QueryConsumecardPurchaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardPurchaseResponse{}
	_body, _err := client.QueryConsumecardPurchaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询交易信息
 * Summary: 数字商品服务-消费卡服务-交易查询
 */
func (client *Client) QueryConsumecardPurchaseEx(request *QueryConsumecardPurchaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardPurchaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardPurchaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.purchase.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取特定高度的区块信息
 * Summary: 数字商品服务-消费卡服务-获取区块
 */
func (client *Client) QueryConsumecardBlock(request *QueryConsumecardBlockRequest) (_result *QueryConsumecardBlockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardBlockResponse{}
	_body, _err := client.QueryConsumecardBlockEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取特定高度的区块信息
 * Summary: 数字商品服务-消费卡服务-获取区块
 */
func (client *Client) QueryConsumecardBlockEx(request *QueryConsumecardBlockRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardBlockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardBlockResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.block.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询最新区块高度
 * Summary: 数字商品服务-消费卡服务-查最新区块高度
 */
func (client *Client) QueryConsumecardLastblocknumber(request *QueryConsumecardLastblocknumberRequest) (_result *QueryConsumecardLastblocknumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardLastblocknumberResponse{}
	_body, _err := client.QueryConsumecardLastblocknumberEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询最新区块高度
 * Summary: 数字商品服务-消费卡服务-查最新区块高度
 */
func (client *Client) QueryConsumecardLastblocknumberEx(request *QueryConsumecardLastblocknumberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardLastblocknumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardLastblocknumberResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.lastblocknumber.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新商品信息是异步流程，根据requestId查询商品更新结果
 * Summary: 数字商品服务-消费卡服务-更新结果查询
 */
func (client *Client) QueryConsumecardGoodsupdateresult(request *QueryConsumecardGoodsupdateresultRequest) (_result *QueryConsumecardGoodsupdateresultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardGoodsupdateresultResponse{}
	_body, _err := client.QueryConsumecardGoodsupdateresultEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新商品信息是异步流程，根据requestId查询商品更新结果
 * Summary: 数字商品服务-消费卡服务-更新结果查询
 */
func (client *Client) QueryConsumecardGoodsupdateresultEx(request *QueryConsumecardGoodsupdateresultRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardGoodsupdateresultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardGoodsupdateresultResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.goodsupdateresult.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 卖家取消交易
 * Summary: 数字商品服务--消费卡服务-卖家取消交易
 */
func (client *Client) CancelConsumecardSellerpurchase(request *CancelConsumecardSellerpurchaseRequest) (_result *CancelConsumecardSellerpurchaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelConsumecardSellerpurchaseResponse{}
	_body, _err := client.CancelConsumecardSellerpurchaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 卖家取消交易
 * Summary: 数字商品服务--消费卡服务-卖家取消交易
 */
func (client *Client) CancelConsumecardSellerpurchaseEx(request *CancelConsumecardSellerpurchaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelConsumecardSellerpurchaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelConsumecardSellerpurchaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.sellerpurchase.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 配置商品和账单的手续费信息
 * Summary: 数字商品服务-消费卡服务-配置手续费
 */
func (client *Client) SetConsumecardCommission(request *SetConsumecardCommissionRequest) (_result *SetConsumecardCommissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetConsumecardCommissionResponse{}
	_body, _err := client.SetConsumecardCommissionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 配置商品和账单的手续费信息
 * Summary: 数字商品服务-消费卡服务-配置手续费
 */
func (client *Client) SetConsumecardCommissionEx(request *SetConsumecardCommissionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetConsumecardCommissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetConsumecardCommissionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.commission.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除手续费配置
 * Summary: 数字商品服务-消费卡服务-删除手续费配置
 */
func (client *Client) RemoveConsumecardCommission(request *RemoveConsumecardCommissionRequest) (_result *RemoveConsumecardCommissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveConsumecardCommissionResponse{}
	_body, _err := client.RemoveConsumecardCommissionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除手续费配置
 * Summary: 数字商品服务-消费卡服务-删除手续费配置
 */
func (client *Client) RemoveConsumecardCommissionEx(request *RemoveConsumecardCommissionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveConsumecardCommissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveConsumecardCommissionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.commission.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询手续费信息
 * Summary: 数字商品服务-消费卡服务-查询手续费信息
 */
func (client *Client) QueryConsumecardCommission(request *QueryConsumecardCommissionRequest) (_result *QueryConsumecardCommissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardCommissionResponse{}
	_body, _err := client.QueryConsumecardCommissionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询手续费信息
 * Summary: 数字商品服务-消费卡服务-查询手续费信息
 */
func (client *Client) QueryConsumecardCommissionEx(request *QueryConsumecardCommissionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardCommissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardCommissionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.commission.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 设置手续费管理员，手续费的增删改查需要由手续费管理员操作。平台管理员可以设置手续费管理员。
 * Summary: 数字商品服务-消费卡服务-设置手续费管理
 */
func (client *Client) SetConsumecardCommissionmanager(request *SetConsumecardCommissionmanagerRequest) (_result *SetConsumecardCommissionmanagerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetConsumecardCommissionmanagerResponse{}
	_body, _err := client.SetConsumecardCommissionmanagerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 设置手续费管理员，手续费的增删改查需要由手续费管理员操作。平台管理员可以设置手续费管理员。
 * Summary: 数字商品服务-消费卡服务-设置手续费管理
 */
func (client *Client) SetConsumecardCommissionmanagerEx(request *SetConsumecardCommissionmanagerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetConsumecardCommissionmanagerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetConsumecardCommissionmanagerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.commissionmanager.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 设置商品状态，可以设置为上线或下线
 * Summary: 数字商品服务-消费卡服务-设置商品状态
 */
func (client *Client) SetConsumecardGoodsstatus(request *SetConsumecardGoodsstatusRequest) (_result *SetConsumecardGoodsstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetConsumecardGoodsstatusResponse{}
	_body, _err := client.SetConsumecardGoodsstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 设置商品状态，可以设置为上线或下线
 * Summary: 数字商品服务-消费卡服务-设置商品状态
 */
func (client *Client) SetConsumecardGoodsstatusEx(request *SetConsumecardGoodsstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetConsumecardGoodsstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetConsumecardGoodsstatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.goodsstatus.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 个人用户来账付款协议签约
 * Summary: 数字商品-消费卡服务-个人用户签约
 */
func (client *Client) CreateConsumecardReceiptcontract(request *CreateConsumecardReceiptcontractRequest) (_result *CreateConsumecardReceiptcontractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateConsumecardReceiptcontractResponse{}
	_body, _err := client.CreateConsumecardReceiptcontractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 个人用户来账付款协议签约
 * Summary: 数字商品-消费卡服务-个人用户签约
 */
func (client *Client) CreateConsumecardReceiptcontractEx(request *CreateConsumecardReceiptcontractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateConsumecardReceiptcontractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateConsumecardReceiptcontractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.receiptcontract.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 来账协议解约接口
 * Summary: 数字商品-消费卡服务-个人协议解约
 */
func (client *Client) RemoveConsumecardReceiptcontract(request *RemoveConsumecardReceiptcontractRequest) (_result *RemoveConsumecardReceiptcontractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveConsumecardReceiptcontractResponse{}
	_body, _err := client.RemoveConsumecardReceiptcontractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 来账协议解约接口
 * Summary: 数字商品-消费卡服务-个人协议解约
 */
func (client *Client) RemoveConsumecardReceiptcontractEx(request *RemoveConsumecardReceiptcontractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveConsumecardReceiptcontractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveConsumecardReceiptcontractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.receiptcontract.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 来账协议查询接口
 * Summary: 数字商品-消费卡服务-个人协议查询
 */
func (client *Client) QueryConsumecardReceiptcontract(request *QueryConsumecardReceiptcontractRequest) (_result *QueryConsumecardReceiptcontractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardReceiptcontractResponse{}
	_body, _err := client.QueryConsumecardReceiptcontractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 来账协议查询接口
 * Summary: 数字商品-消费卡服务-个人协议查询
 */
func (client *Client) QueryConsumecardReceiptcontractEx(request *QueryConsumecardReceiptcontractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardReceiptcontractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardReceiptcontractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.receiptcontract.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 收单协议签约
 * Summary: 数字商品-消费卡服务-商家用户签约
 */
func (client *Client) CreateConsumecardBillingcontract(request *CreateConsumecardBillingcontractRequest) (_result *CreateConsumecardBillingcontractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateConsumecardBillingcontractResponse{}
	_body, _err := client.CreateConsumecardBillingcontractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 收单协议签约
 * Summary: 数字商品-消费卡服务-商家用户签约
 */
func (client *Client) CreateConsumecardBillingcontractEx(request *CreateConsumecardBillingcontractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateConsumecardBillingcontractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateConsumecardBillingcontractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.billingcontract.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 收单协议解约
 * Summary: 数字商品-消费卡服务-商家协议解约
 */
func (client *Client) RemoveConsumecardBillingcontract(request *RemoveConsumecardBillingcontractRequest) (_result *RemoveConsumecardBillingcontractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveConsumecardBillingcontractResponse{}
	_body, _err := client.RemoveConsumecardBillingcontractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 收单协议解约
 * Summary: 数字商品-消费卡服务-商家协议解约
 */
func (client *Client) RemoveConsumecardBillingcontractEx(request *RemoveConsumecardBillingcontractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveConsumecardBillingcontractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveConsumecardBillingcontractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.billingcontract.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 收单协议签约查询
 * Summary: 数字商品-消费卡服务-商家协议查询
 */
func (client *Client) QueryConsumecardBillingcontract(request *QueryConsumecardBillingcontractRequest) (_result *QueryConsumecardBillingcontractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardBillingcontractResponse{}
	_body, _err := client.QueryConsumecardBillingcontractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 收单协议签约查询
 * Summary: 数字商品-消费卡服务-商家协议查询
 */
func (client *Client) QueryConsumecardBillingcontractEx(request *QueryConsumecardBillingcontractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardBillingcontractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardBillingcontractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.billingcontract.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 增加一级分账方
 * Summary: 数字商品服务-消费卡服务-增加一级分账方
 */
func (client *Client) AddConsumecardCommissionparty(request *AddConsumecardCommissionpartyRequest) (_result *AddConsumecardCommissionpartyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddConsumecardCommissionpartyResponse{}
	_body, _err := client.AddConsumecardCommissionpartyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 增加一级分账方
 * Summary: 数字商品服务-消费卡服务-增加一级分账方
 */
func (client *Client) AddConsumecardCommissionpartyEx(request *AddConsumecardCommissionpartyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddConsumecardCommissionpartyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddConsumecardCommissionpartyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.commissionparty.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除一级分账方
 * Summary: 数字商品服务-消费卡服务-删除一级分账方
 */
func (client *Client) RemoveConsumecardCommissionparty(request *RemoveConsumecardCommissionpartyRequest) (_result *RemoveConsumecardCommissionpartyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveConsumecardCommissionpartyResponse{}
	_body, _err := client.RemoveConsumecardCommissionpartyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除一级分账方
 * Summary: 数字商品服务-消费卡服务-删除一级分账方
 */
func (client *Client) RemoveConsumecardCommissionpartyEx(request *RemoveConsumecardCommissionpartyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveConsumecardCommissionpartyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveConsumecardCommissionpartyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.commissionparty.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 增加手续费周期
 * Summary: 数字商品服务-消费卡服务-增加手续费周期
 */
func (client *Client) AddConsumecardCommissionperiod(request *AddConsumecardCommissionperiodRequest) (_result *AddConsumecardCommissionperiodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddConsumecardCommissionperiodResponse{}
	_body, _err := client.AddConsumecardCommissionperiodEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 增加手续费周期
 * Summary: 数字商品服务-消费卡服务-增加手续费周期
 */
func (client *Client) AddConsumecardCommissionperiodEx(request *AddConsumecardCommissionperiodRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddConsumecardCommissionperiodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddConsumecardCommissionperiodResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.commissionperiod.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除手续费周期
 * Summary: 数字商品服务-消费卡服务-删除手续费周期
 */
func (client *Client) RemoveConsumecardCommissionperiod(request *RemoveConsumecardCommissionperiodRequest) (_result *RemoveConsumecardCommissionperiodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveConsumecardCommissionperiodResponse{}
	_body, _err := client.RemoveConsumecardCommissionperiodEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除手续费周期
 * Summary: 数字商品服务-消费卡服务-删除手续费周期
 */
func (client *Client) RemoveConsumecardCommissionperiodEx(request *RemoveConsumecardCommissionperiodRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveConsumecardCommissionperiodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveConsumecardCommissionperiodResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.commissionperiod.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询统计信息
 * Summary: 数字商品服务-消费卡服务-查询统计信息
 */
func (client *Client) QueryConsumecardCounter(request *QueryConsumecardCounterRequest) (_result *QueryConsumecardCounterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardCounterResponse{}
	_body, _err := client.QueryConsumecardCounterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询统计信息
 * Summary: 数字商品服务-消费卡服务-查询统计信息
 */
func (client *Client) QueryConsumecardCounterEx(request *QueryConsumecardCounterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardCounterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardCounterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.counter.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 管理接口：配置场景码权限信息
 * Summary: 数字商品服务-消费卡服务-场景码配置
 */
func (client *Client) SetConsumecardProductcode(request *SetConsumecardProductcodeRequest) (_result *SetConsumecardProductcodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetConsumecardProductcodeResponse{}
	_body, _err := client.SetConsumecardProductcodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 管理接口：配置场景码权限信息
 * Summary: 数字商品服务-消费卡服务-场景码配置
 */
func (client *Client) SetConsumecardProductcodeEx(request *SetConsumecardProductcodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetConsumecardProductcodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetConsumecardProductcodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.productcode.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询已配置的场景码信息
 * Summary: 数字商品服务-消费卡服务-查询场景码配置
 */
func (client *Client) QueryConsumecardProductcode(request *QueryConsumecardProductcodeRequest) (_result *QueryConsumecardProductcodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardProductcodeResponse{}
	_body, _err := client.QueryConsumecardProductcodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询已配置的场景码信息
 * Summary: 数字商品服务-消费卡服务-查询场景码配置
 */
func (client *Client) QueryConsumecardProductcodeEx(request *QueryConsumecardProductcodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardProductcodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardProductcodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.productcode.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除场景码配置
 * Summary: 数字商品服务-消费卡服务-删除场景码配置
 */
func (client *Client) RemoveConsumecardProductcode(request *RemoveConsumecardProductcodeRequest) (_result *RemoveConsumecardProductcodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveConsumecardProductcodeResponse{}
	_body, _err := client.RemoveConsumecardProductcodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除场景码配置
 * Summary: 数字商品服务-消费卡服务-删除场景码配置
 */
func (client *Client) RemoveConsumecardProductcodeEx(request *RemoveConsumecardProductcodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveConsumecardProductcodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveConsumecardProductcodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.productcode.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据图片不可访问URl 获取可以访问的临时URL
 * Summary: 数字商品服务-消费卡服务-查询图片URL
 */
func (client *Client) QueryConsumecardGoodsimage(request *QueryConsumecardGoodsimageRequest) (_result *QueryConsumecardGoodsimageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConsumecardGoodsimageResponse{}
	_body, _err := client.QueryConsumecardGoodsimageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据图片不可访问URl 获取可以访问的临时URL
 * Summary: 数字商品服务-消费卡服务-查询图片URL
 */
func (client *Client) QueryConsumecardGoodsimageEx(request *QueryConsumecardGoodsimageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConsumecardGoodsimageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumecardGoodsimageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.goodsimage.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 文件API，上传文件
 * Summary: 数字商品服务-文件服务-上传文件
 */
func (client *Client) UploadConsumecardFile(request *UploadConsumecardFileRequest) (_result *UploadConsumecardFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadConsumecardFileResponse{}
	_body, _err := client.UploadConsumecardFileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 文件API，上传文件
 * Summary: 数字商品服务-文件服务-上传文件
 */
func (client *Client) UploadConsumecardFileEx(request *UploadConsumecardFileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadConsumecardFileResponse, _err error) {
	if !tea.BoolValue(util.IsUnset(request.FileObject)) {
		uploadReq := &CreateAntcloudGatewayxFileUploadRequest{
			AuthToken: request.AuthToken,
			ApiCode:   tea.String("baas.antdao.consumecard.file.upload"),
			FileName:  request.FileObjectName,
		}
		uploadResp, _err := client.CreateAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime)
		if _err != nil {
			return _result, _err
		}

		if !tea.BoolValue(antchainutil.IsSuccess(uploadResp.ResultCode, tea.String("ok"))) {
			uploadConsumecardFileResponse := &UploadConsumecardFileResponse{
				ReqMsgId:   uploadResp.ReqMsgId,
				ResultCode: uploadResp.ResultCode,
				ResultMsg:  uploadResp.ResultMsg,
			}
			_result = uploadConsumecardFileResponse
			return _result, _err
		}

		uploadHeaders := antchainutil.ParseUploadHeaders(uploadResp.UploadHeaders)
		_err = antchainutil.PutObject(request.FileObject, uploadHeaders, uploadResp.UploadUrl)
		if _err != nil {
			return _result, _err
		}
		request.FileId = uploadResp.FileId
	}

	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadConsumecardFileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.consumecard.file.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询电子券详细信息。只有批次管理员，过期观察员可以查看，其他商户没有查看权限。
 * Summary: 数字商品服务-电子券服务-查询电子券
 */
func (client *Client) QueryCoupon(request *QueryCouponRequest) (_result *QueryCouponResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCouponResponse{}
	_body, _err := client.QueryCouponEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询电子券详细信息。只有批次管理员，过期观察员可以查看，其他商户没有查看权限。
 * Summary: 数字商品服务-电子券服务-查询电子券
 */
func (client *Client) QueryCouponEx(request *QueryCouponRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCouponResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCouponResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.coupon.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建单个电子券接口
 * Summary: 数字商品服务-电子券服务-创建单个电子券
 */
func (client *Client) CreateCoupon(request *CreateCouponRequest) (_result *CreateCouponResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCouponResponse{}
	_body, _err := client.CreateCouponEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建单个电子券接口
 * Summary: 数字商品服务-电子券服务-创建单个电子券
 */
func (client *Client) CreateCouponEx(request *CreateCouponRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCouponResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateCouponResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.coupon.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 将电子券更新为禁用状态，不能再进行其他状态更新
 * Summary: 数字商品服务-电子券服务-电子券风控禁用
 */
func (client *Client) ExecCouponForbidden(request *ExecCouponForbiddenRequest) (_result *ExecCouponForbiddenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCouponForbiddenResponse{}
	_body, _err := client.ExecCouponForbiddenEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 将电子券更新为禁用状态，不能再进行其他状态更新
 * Summary: 数字商品服务-电子券服务-电子券风控禁用
 */
func (client *Client) ExecCouponForbiddenEx(request *ExecCouponForbiddenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCouponForbiddenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCouponForbiddenResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.coupon.forbidden.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 将电子券更新为可用状态
 * Summary: 数字商品服务-电子券服务-电子券风控启用
 */
func (client *Client) ExecCouponEnable(request *ExecCouponEnableRequest) (_result *ExecCouponEnableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCouponEnableResponse{}
	_body, _err := client.ExecCouponEnableEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 将电子券更新为可用状态
 * Summary: 数字商品服务-电子券服务-电子券风控启用
 */
func (client *Client) ExecCouponEnableEx(request *ExecCouponEnableRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCouponEnableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCouponEnableResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.coupon.enable.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 将电子券状态更新为过期
 * Summary: 数字商品服务-电子券服务-电子券过期
 */
func (client *Client) ExecCouponExpire(request *ExecCouponExpireRequest) (_result *ExecCouponExpireResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCouponExpireResponse{}
	_body, _err := client.ExecCouponExpireEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 将电子券状态更新为过期
 * Summary: 数字商品服务-电子券服务-电子券过期
 */
func (client *Client) ExecCouponExpireEx(request *ExecCouponExpireRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCouponExpireResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCouponExpireResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.coupon.expire.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 将电子券状态更新为核销
 * Summary: 数字商品服务-电子券服务-电子券核销
 */
func (client *Client) ExecCouponWriteoff(request *ExecCouponWriteoffRequest) (_result *ExecCouponWriteoffResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCouponWriteoffResponse{}
	_body, _err := client.ExecCouponWriteoffEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 将电子券状态更新为核销
 * Summary: 数字商品服务-电子券服务-电子券核销
 */
func (client *Client) ExecCouponWriteoffEx(request *ExecCouponWriteoffRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCouponWriteoffResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCouponWriteoffResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.coupon.writeoff.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新电子券的激活码状态为已超时
 * Summary: 数字商品服务-电子券服务-券激活码超时
 */
func (client *Client) ExecCouponTimeout(request *ExecCouponTimeoutRequest) (_result *ExecCouponTimeoutResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCouponTimeoutResponse{}
	_body, _err := client.ExecCouponTimeoutEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新电子券的激活码状态为已超时
 * Summary: 数字商品服务-电子券服务-券激活码超时
 */
func (client *Client) ExecCouponTimeoutEx(request *ExecCouponTimeoutRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCouponTimeoutResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCouponTimeoutResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.coupon.timeout.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商户上传激活码，激活电子券
 * Summary: 数字商品服务-电子券服务-激活电子券
 */
func (client *Client) ExecCouponActivate(request *ExecCouponActivateRequest) (_result *ExecCouponActivateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCouponActivateResponse{}
	_body, _err := client.ExecCouponActivateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商户上传激活码，激活电子券
 * Summary: 数字商品服务-电子券服务-激活电子券
 */
func (client *Client) ExecCouponActivateEx(request *ExecCouponActivateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCouponActivateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCouponActivateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.coupon.activate.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 将电子券转让给其他用户
 * Summary: 数字商品服务-电子券服务-电子券转让
 */
func (client *Client) ExecCouponTransfer(request *ExecCouponTransferRequest) (_result *ExecCouponTransferResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCouponTransferResponse{}
	_body, _err := client.ExecCouponTransferEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 将电子券转让给其他用户
 * Summary: 数字商品服务-电子券服务-电子券转让
 */
func (client *Client) ExecCouponTransferEx(request *ExecCouponTransferRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCouponTransferResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCouponTransferResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.coupon.transfer.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 记名电子券创建时没有记录用户信息，可以调用本接口将用户信息更新到电子券上。记名电子券若没有用户信息，则无法进行绑定激活。
 * Summary: 数字商品服务-电子券服务-电子券记名
 */
func (client *Client) ExecCouponSign(request *ExecCouponSignRequest) (_result *ExecCouponSignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCouponSignResponse{}
	_body, _err := client.ExecCouponSignEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 记名电子券创建时没有记录用户信息，可以调用本接口将用户信息更新到电子券上。记名电子券若没有用户信息，则无法进行绑定激活。
 * Summary: 数字商品服务-电子券服务-电子券记名
 */
func (client *Client) ExecCouponSignEx(request *ExecCouponSignRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCouponSignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCouponSignResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.coupon.sign.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 绑定电子券，更新为“绑定”状态
 * Summary: 数字商品服务-电子券服务-绑定电子券
 */
func (client *Client) ExecCouponBind(request *ExecCouponBindRequest) (_result *ExecCouponBindResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecCouponBindResponse{}
	_body, _err := client.ExecCouponBindEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 绑定电子券，更新为“绑定”状态
 * Summary: 数字商品服务-电子券服务-绑定电子券
 */
func (client *Client) ExecCouponBindEx(request *ExecCouponBindRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecCouponBindResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecCouponBindResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.coupon.bind.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 传入数量一次性创建多张电子券，支持不记名电子券或同名电子券创建。每次最多创建100张电子券
 * Summary: 数字商品服务-电子券服务-电子券批量创建
 */
func (client *Client) BatchcreateCoupon(request *BatchcreateCouponRequest) (_result *BatchcreateCouponResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateCouponResponse{}
	_body, _err := client.BatchcreateCouponEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 传入数量一次性创建多张电子券，支持不记名电子券或同名电子券创建。每次最多创建100张电子券
 * Summary: 数字商品服务-电子券服务-电子券批量创建
 */
func (client *Client) BatchcreateCouponEx(request *BatchcreateCouponRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateCouponResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateCouponResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.coupon.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 电子券列表创建 支持传入不同的电子券信息列表，列表中每个电子券信息可以不相同
 * Summary: 数字商品服务-电子券服务-电子券列表创建
 */
func (client *Client) CreateCouponList(request *CreateCouponListRequest) (_result *CreateCouponListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCouponListResponse{}
	_body, _err := client.CreateCouponListEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 电子券列表创建 支持传入不同的电子券信息列表，列表中每个电子券信息可以不相同
 * Summary: 数字商品服务-电子券服务-电子券列表创建
 */
func (client *Client) CreateCouponListEx(request *CreateCouponListRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCouponListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateCouponListResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.coupon.list.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建电子券批次，定义该批次的信息和是否记名，创建批次的商户自动成为批次管理员。
 * Summary: 数字商品服务-电子券服务-创建电子券批次
 */
func (client *Client) CreateCouponCollection(request *CreateCouponCollectionRequest) (_result *CreateCouponCollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCouponCollectionResponse{}
	_body, _err := client.CreateCouponCollectionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建电子券批次，定义该批次的信息和是否记名，创建批次的商户自动成为批次管理员。
 * Summary: 数字商品服务-电子券服务-创建电子券批次
 */
func (client *Client) CreateCouponCollectionEx(request *CreateCouponCollectionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCouponCollectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateCouponCollectionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.coupon.collection.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 输入批次ID，查询批次详情。只有批次管理员，过期观察员可以查看，其他商户没有查看权限。
 * Summary: 数字商品服务-电子券服务-电子券批次查询
 */
func (client *Client) QueryCouponCollection(request *QueryCouponCollectionRequest) (_result *QueryCouponCollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCouponCollectionResponse{}
	_body, _err := client.QueryCouponCollectionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 输入批次ID，查询批次详情。只有批次管理员，过期观察员可以查看，其他商户没有查看权限。
 * Summary: 数字商品服务-电子券服务-电子券批次查询
 */
func (client *Client) QueryCouponCollectionEx(request *QueryCouponCollectionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCouponCollectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCouponCollectionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.coupon.collection.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询调用商户下的用户信息
 * Summary: 数字商品服务-商户管理-查询用户信息
 */
func (client *Client) QueryMerchantUser(request *QueryMerchantUserRequest) (_result *QueryMerchantUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMerchantUserResponse{}
	_body, _err := client.QueryMerchantUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询调用商户下的用户信息
 * Summary: 数字商品服务-商户管理-查询用户信息
 */
func (client *Client) QueryMerchantUserEx(request *QueryMerchantUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMerchantUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMerchantUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.merchant.user.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建商户管理下的用户
 * Summary: 数字商品服务-商户管理-商户创建用户
 */
func (client *Client) CreateMerchantUser(request *CreateMerchantUserRequest) (_result *CreateMerchantUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateMerchantUserResponse{}
	_body, _err := client.CreateMerchantUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建商户管理下的用户
 * Summary: 数字商品服务-商户管理-商户创建用户
 */
func (client *Client) CreateMerchantUserEx(request *CreateMerchantUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateMerchantUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateMerchantUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.merchant.user.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询管理员创建的商户信息（可查询自身的商户信息）
 * Summary: 数字商品服务-商户管理-查询商户信息
 */
func (client *Client) QueryMerchant(request *QueryMerchantRequest) (_result *QueryMerchantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMerchantResponse{}
	_body, _err := client.QueryMerchantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询管理员创建的商户信息（可查询自身的商户信息）
 * Summary: 数字商品服务-商户管理-查询商户信息
 */
func (client *Client) QueryMerchantEx(request *QueryMerchantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMerchantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMerchantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.merchant.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 上传图片到OSS，以备风控检查。仅权益发行方可使用，采购方不可使用。上传的图片单张不超过1M。
 * Summary: 数字商品服务-OSS服务-上传图片
 */
func (client *Client) UploadImage(request *UploadImageRequest) (_result *UploadImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadImageResponse{}
	_body, _err := client.UploadImageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 上传图片到OSS，以备风控检查。仅权益发行方可使用，采购方不可使用。上传的图片单张不超过1M。
 * Summary: 数字商品服务-OSS服务-上传图片
 */
func (client *Client) UploadImageEx(request *UploadImageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadImageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.image.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取kms中对应用户的公钥
 * Summary: 数字商品服务-密钥管理-获取用户公钥
 */
func (client *Client) GetPkiPublickey(request *GetPkiPublickeyRequest) (_result *GetPkiPublickeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetPkiPublickeyResponse{}
	_body, _err := client.GetPkiPublickeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取kms中对应用户的公钥
 * Summary: 数字商品服务-密钥管理-获取用户公钥
 */
func (client *Client) GetPkiPublickeyEx(request *GetPkiPublickeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetPkiPublickeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetPkiPublickeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.pki.publickey.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ECC公钥加密接口
 * Summary: 数字商品服务-密钥管理-公钥加密
 */
func (client *Client) ExecPkiEncrypt(request *ExecPkiEncryptRequest) (_result *ExecPkiEncryptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecPkiEncryptResponse{}
	_body, _err := client.ExecPkiEncryptEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ECC公钥加密接口
 * Summary: 数字商品服务-密钥管理-公钥加密
 */
func (client *Client) ExecPkiEncryptEx(request *ExecPkiEncryptRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecPkiEncryptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecPkiEncryptResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.pki.encrypt.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ECC解密算法接口
 * Summary: 数字商品服务-密钥管理-私钥解密
 */
func (client *Client) ExecPkiDecrypt(request *ExecPkiDecryptRequest) (_result *ExecPkiDecryptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecPkiDecryptResponse{}
	_body, _err := client.ExecPkiDecryptEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ECC解密算法接口
 * Summary: 数字商品服务-密钥管理-私钥解密
 */
func (client *Client) ExecPkiDecryptEx(request *ExecPkiDecryptRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecPkiDecryptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecPkiDecryptResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.pki.decrypt.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新商户的友商信息
 * Summary: 数字商品服务-商户管理-更新商户友商
 */
func (client *Client) UpdateMerchantFriend(request *UpdateMerchantFriendRequest) (_result *UpdateMerchantFriendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMerchantFriendResponse{}
	_body, _err := client.UpdateMerchantFriendEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新商户的友商信息
 * Summary: 数字商品服务-商户管理-更新商户友商
 */
func (client *Client) UpdateMerchantFriendEx(request *UpdateMerchantFriendRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMerchantFriendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMerchantFriendResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.merchant.friend.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商品供应商户发布一个商品
 * Summary: 数字商品服务-商品服务-创建商品
 */
func (client *Client) CreateEquity(request *CreateEquityRequest) (_result *CreateEquityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateEquityResponse{}
	_body, _err := client.CreateEquityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商品供应商户发布一个商品
 * Summary: 数字商品服务-商品服务-创建商品
 */
func (client *Client) CreateEquityEx(request *CreateEquityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateEquityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateEquityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.status.update
下线商品
 * Summary: 数字商品服务-商品服务-下线商品
*/
func (client *Client) OfflineEquity(request *OfflineEquityRequest) (_result *OfflineEquityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OfflineEquityResponse{}
	_body, _err := client.OfflineEquityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.status.update
下线商品
 * Summary: 数字商品服务-商品服务-下线商品
*/
func (client *Client) OfflineEquityEx(request *OfflineEquityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OfflineEquityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OfflineEquityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.offline"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 该接口不使用，合并至baas.antdao.equity.status.update
冻结权益
 * Summary: 数字商品服务-商品服务-冻结商品
*/
func (client *Client) FreezeEquity(request *FreezeEquityRequest) (_result *FreezeEquityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &FreezeEquityResponse{}
	_body, _err := client.FreezeEquityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 该接口不使用，合并至baas.antdao.equity.status.update
冻结权益
 * Summary: 数字商品服务-商品服务-冻结商品
*/
func (client *Client) FreezeEquityEx(request *FreezeEquityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *FreezeEquityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &FreezeEquityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.freeze"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 授权兑换—非公开商品商户配置
 * Summary: 数字商品服务-商品服务-授权兑换
 */
func (client *Client) OpenEquityMerchant(request *OpenEquityMerchantRequest) (_result *OpenEquityMerchantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OpenEquityMerchantResponse{}
	_body, _err := client.OpenEquityMerchantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 授权兑换—非公开商品商户配置
 * Summary: 数字商品服务-商品服务-授权兑换
 */
func (client *Client) OpenEquityMerchantEx(request *OpenEquityMerchantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OpenEquityMerchantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OpenEquityMerchantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.merchant.open"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户兑换价格设置
 * Summary: 数字商品服务-商品服务-用户兑换价格设置
 */
func (client *Client) AuthEquityMerchantuserprice(request *AuthEquityMerchantuserpriceRequest) (_result *AuthEquityMerchantuserpriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AuthEquityMerchantuserpriceResponse{}
	_body, _err := client.AuthEquityMerchantuserpriceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户兑换价格设置
 * Summary: 数字商品服务-商品服务-用户兑换价格设置
 */
func (client *Client) AuthEquityMerchantuserpriceEx(request *AuthEquityMerchantuserpriceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AuthEquityMerchantuserpriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthEquityMerchantuserpriceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.merchantuserprice.auth"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update
更新商品价格
 * Summary: 数字商品服务-商品服务-更新商品价格
*/
func (client *Client) UpdateEquityDefaultprice(request *UpdateEquityDefaultpriceRequest) (_result *UpdateEquityDefaultpriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateEquityDefaultpriceResponse{}
	_body, _err := client.UpdateEquityDefaultpriceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update
更新商品价格
 * Summary: 数字商品服务-商品服务-更新商品价格
*/
func (client *Client) UpdateEquityDefaultpriceEx(request *UpdateEquityDefaultpriceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateEquityDefaultpriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateEquityDefaultpriceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.defaultprice.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新商品自定义定价
 * Summary: 数字商品服务-商品服务-更新自定义定价
 */
func (client *Client) UpdateEquityTenantprice(request *UpdateEquityTenantpriceRequest) (_result *UpdateEquityTenantpriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateEquityTenantpriceResponse{}
	_body, _err := client.UpdateEquityTenantpriceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新商品自定义定价
 * Summary: 数字商品服务-商品服务-更新自定义定价
 */
func (client *Client) UpdateEquityTenantpriceEx(request *UpdateEquityTenantpriceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateEquityTenantpriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateEquityTenantpriceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.tenantprice.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update
增加权益库存
 * Summary: 数字商品服务-商品服务-增加权益库存
*/
func (client *Client) AddEquityCount(request *AddEquityCountRequest) (_result *AddEquityCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddEquityCountResponse{}
	_body, _err := client.AddEquityCountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update
增加权益库存
 * Summary: 数字商品服务-商品服务-增加权益库存
*/
func (client *Client) AddEquityCountEx(request *AddEquityCountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddEquityCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddEquityCountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.count.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update
更新兑换限制规则
 * Summary: 数字商品服务-商品服务-更新兑换限制规则
*/
func (client *Client) UpdateEquityExchangelimit(request *UpdateEquityExchangelimitRequest) (_result *UpdateEquityExchangelimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateEquityExchangelimitResponse{}
	_body, _err := client.UpdateEquityExchangelimitEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update
更新兑换限制规则
 * Summary: 数字商品服务-商品服务-更新兑换限制规则
*/
func (client *Client) UpdateEquityExchangelimitEx(request *UpdateEquityExchangelimitRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateEquityExchangelimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateEquityExchangelimitResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.exchangelimit.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update
更新商品有效期
 * Summary: 数字商品服务-商品服务-更新有效期
*/
func (client *Client) UpdateEquityValidtime(request *UpdateEquityValidtimeRequest) (_result *UpdateEquityValidtimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateEquityValidtimeResponse{}
	_body, _err := client.UpdateEquityValidtimeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 该接口不使用，合并至 baas.antdao.equity.update
更新商品有效期
 * Summary: 数字商品服务-商品服务-更新有效期
*/
func (client *Client) UpdateEquityValidtimeEx(request *UpdateEquityValidtimeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateEquityValidtimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateEquityValidtimeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.validtime.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询商品信息
 * Summary: 数字商品服务-商品服务-查询商品信息
 */
func (client *Client) QueryEquity(request *QueryEquityRequest) (_result *QueryEquityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryEquityResponse{}
	_body, _err := client.QueryEquityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询商品信息
 * Summary: 数字商品服务-商品服务-查询商品信息
 */
func (client *Client) QueryEquityEx(request *QueryEquityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryEquityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryEquityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户身份发起兑换
 * Summary: 数字商品服务-兑换服务-用户身份发起兑换
 */
func (client *Client) ExecExchangeByuser(request *ExecExchangeByuserRequest) (_result *ExecExchangeByuserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecExchangeByuserResponse{}
	_body, _err := client.ExecExchangeByuserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户身份发起兑换
 * Summary: 数字商品服务-兑换服务-用户身份发起兑换
 */
func (client *Client) ExecExchangeByuserEx(request *ExecExchangeByuserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecExchangeByuserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecExchangeByuserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.exchange.byuser.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商户身份发起兑换
 * Summary: 数字商品服务-兑换服务-商户身份发起兑换
 */
func (client *Client) ExecExchangeBymerchant(request *ExecExchangeBymerchantRequest) (_result *ExecExchangeBymerchantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecExchangeBymerchantResponse{}
	_body, _err := client.ExecExchangeBymerchantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商户身份发起兑换
 * Summary: 数字商品服务-兑换服务-商户身份发起兑换
 */
func (client *Client) ExecExchangeBymerchantEx(request *ExecExchangeBymerchantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecExchangeBymerchantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecExchangeBymerchantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.exchange.bymerchant.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 确认接单接口。注意：若确认接单则必须发货！如果不能确保发货则直接调用缺货接口。
 * Summary: 数字商品服务-兑换服务-确认接单
 */
func (client *Client) ConfirmExchange(request *ConfirmExchangeRequest) (_result *ConfirmExchangeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmExchangeResponse{}
	_body, _err := client.ConfirmExchangeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 确认接单接口。注意：若确认接单则必须发货！如果不能确保发货则直接调用缺货接口。
 * Summary: 数字商品服务-兑换服务-确认接单
 */
func (client *Client) ConfirmExchangeEx(request *ConfirmExchangeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmExchangeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmExchangeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.exchange.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 拒绝发货。供应商可由于缺货，商品不满足发货条件，意外状态下使用。
 * Summary: 数字商品服务-兑换服务-拒绝发货
 */
func (client *Client) ExecExchangeOutofstore(request *ExecExchangeOutofstoreRequest) (_result *ExecExchangeOutofstoreResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecExchangeOutofstoreResponse{}
	_body, _err := client.ExecExchangeOutofstoreEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 拒绝发货。供应商可由于缺货，商品不满足发货条件，意外状态下使用。
 * Summary: 数字商品服务-兑换服务-拒绝发货
 */
func (client *Client) ExecExchangeOutofstoreEx(request *ExecExchangeOutofstoreRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecExchangeOutofstoreResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecExchangeOutofstoreResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.exchange.outofstore.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 兑换发货
 * Summary: 数字商品服务-兑换服务-兑换发货
 */
func (client *Client) SendExchange(request *SendExchangeRequest) (_result *SendExchangeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SendExchangeResponse{}
	_body, _err := client.SendExchangeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 兑换发货
 * Summary: 数字商品服务-兑换服务-兑换发货
 */
func (client *Client) SendExchangeEx(request *SendExchangeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SendExchangeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SendExchangeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.exchange.send"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户身份确认收货
 * Summary: 数字商品服务-兑换服务-用户身份确认收货
 */
func (client *Client) ExecExchangeReceivebyuser(request *ExecExchangeReceivebyuserRequest) (_result *ExecExchangeReceivebyuserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecExchangeReceivebyuserResponse{}
	_body, _err := client.ExecExchangeReceivebyuserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户身份确认收货
 * Summary: 数字商品服务-兑换服务-用户身份确认收货
 */
func (client *Client) ExecExchangeReceivebyuserEx(request *ExecExchangeReceivebyuserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecExchangeReceivebyuserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecExchangeReceivebyuserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.exchange.receivebyuser.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资产过期
 * Summary: 数字商品服务-资产服务-资产过期
 */
func (client *Client) ExecAssetExpire(request *ExecAssetExpireRequest) (_result *ExecAssetExpireResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecAssetExpireResponse{}
	_body, _err := client.ExecAssetExpireEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资产过期
 * Summary: 数字商品服务-资产服务-资产过期
 */
func (client *Client) ExecAssetExpireEx(request *ExecAssetExpireRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecAssetExpireResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecAssetExpireResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.asset.expire.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 检索资产流转流水
 * Summary: 数字商品服务-资产服务-查询资产流转流水
 */
func (client *Client) QueryAssetInstruction(request *QueryAssetInstructionRequest) (_result *QueryAssetInstructionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAssetInstructionResponse{}
	_body, _err := client.QueryAssetInstructionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 检索资产流转流水
 * Summary: 数字商品服务-资产服务-查询资产流转流水
 */
func (client *Client) QueryAssetInstructionEx(request *QueryAssetInstructionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAssetInstructionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAssetInstructionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.asset.instruction.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 该接口废弃不用！！！
查询商品兑换流水
 * Summary: 数字商品服务-兑换服务-查询商品兑换流水
*/
func (client *Client) QueryExchangeInstruction(request *QueryExchangeInstructionRequest) (_result *QueryExchangeInstructionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryExchangeInstructionResponse{}
	_body, _err := client.QueryExchangeInstructionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 该接口废弃不用！！！
查询商品兑换流水
 * Summary: 数字商品服务-兑换服务-查询商品兑换流水
*/
func (client *Client) QueryExchangeInstructionEx(request *QueryExchangeInstructionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryExchangeInstructionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryExchangeInstructionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.exchange.instruction.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资产初始化发行
 * Summary: 数字商品服务-资产服务-资产初始化发行
 */
func (client *Client) ExecAssetIssue(request *ExecAssetIssueRequest) (_result *ExecAssetIssueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecAssetIssueResponse{}
	_body, _err := client.ExecAssetIssueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资产初始化发行
 * Summary: 数字商品服务-资产服务-资产初始化发行
 */
func (client *Client) ExecAssetIssueEx(request *ExecAssetIssueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecAssetIssueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecAssetIssueResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.asset.issue.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 赎回资产
 * Summary: 数字商品服务-资产服务-赎回资产
 */
func (client *Client) ExecAssetRedeem(request *ExecAssetRedeemRequest) (_result *ExecAssetRedeemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecAssetRedeemResponse{}
	_body, _err := client.ExecAssetRedeemEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 赎回资产
 * Summary: 数字商品服务-资产服务-赎回资产
 */
func (client *Client) ExecAssetRedeemEx(request *ExecAssetRedeemRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecAssetRedeemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecAssetRedeemResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.asset.redeem.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发放资产
 * Summary: 数字商品服务-资产服务-发放资产
 */
func (client *Client) ExecAssetGrant(request *ExecAssetGrantRequest) (_result *ExecAssetGrantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecAssetGrantResponse{}
	_body, _err := client.ExecAssetGrantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发放资产
 * Summary: 数字商品服务-资产服务-发放资产
 */
func (client *Client) ExecAssetGrantEx(request *ExecAssetGrantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecAssetGrantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecAssetGrantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.asset.grant.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发放回退资产
 * Summary: 数字商品服务-资产服务-发放回退资产
 */
func (client *Client) ExecAssetGrantrefund(request *ExecAssetGrantrefundRequest) (_result *ExecAssetGrantrefundResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecAssetGrantrefundResponse{}
	_body, _err := client.ExecAssetGrantrefundEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发放回退资产
 * Summary: 数字商品服务-资产服务-发放回退资产
 */
func (client *Client) ExecAssetGrantrefundEx(request *ExecAssetGrantrefundRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecAssetGrantrefundResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecAssetGrantrefundResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.asset.grantrefund.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 风控调整资产
 * Summary: 数字商品服务-资产服务-风控调整资产
 */
func (client *Client) ExecAssetAdjust(request *ExecAssetAdjustRequest) (_result *ExecAssetAdjustResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecAssetAdjustResponse{}
	_body, _err := client.ExecAssetAdjustEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 风控调整资产
 * Summary: 数字商品服务-资产服务-风控调整资产
 */
func (client *Client) ExecAssetAdjustEx(request *ExecAssetAdjustRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecAssetAdjustResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecAssetAdjustResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.asset.adjust.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资产查询
 * Summary: 数字商品服务-资产服务-资产查询
 */
func (client *Client) QueryAsset(request *QueryAssetRequest) (_result *QueryAssetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAssetResponse{}
	_body, _err := client.QueryAssetEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资产查询
 * Summary: 数字商品服务-资产服务-资产查询
 */
func (client *Client) QueryAssetEx(request *QueryAssetRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAssetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAssetResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.asset.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商户身份确认收货
 * Summary: 数字商品服务-兑换服务-商户身份确认收货
 */
func (client *Client) ExecExchangeReceivebymerchant(request *ExecExchangeReceivebymerchantRequest) (_result *ExecExchangeReceivebymerchantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecExchangeReceivebymerchantResponse{}
	_body, _err := client.ExecExchangeReceivebymerchantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商户身份确认收货
 * Summary: 数字商品服务-兑换服务-商户身份确认收货
 */
func (client *Client) ExecExchangeReceivebymerchantEx(request *ExecExchangeReceivebymerchantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecExchangeReceivebymerchantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecExchangeReceivebymerchantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.exchange.receivebymerchant.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取特定高度的区块信息
 * Summary: 数字商品服务-拉块服务-获取区块信息
 */
func (client *Client) QueryBlock(request *QueryBlockRequest) (_result *QueryBlockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBlockResponse{}
	_body, _err := client.QueryBlockEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取特定高度的区块信息
 * Summary: 数字商品服务-拉块服务-获取区块信息
 */
func (client *Client) QueryBlockEx(request *QueryBlockRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBlockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBlockResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.block.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取区块链最新区块高度
 * Summary: 数字商品服务-拉块服务-获取最新区块高度
 */
func (client *Client) QueryBlockLastblocknumber(request *QueryBlockLastblocknumberRequest) (_result *QueryBlockLastblocknumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBlockLastblocknumberResponse{}
	_body, _err := client.QueryBlockLastblocknumberEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取区块链最新区块高度
 * Summary: 数字商品服务-拉块服务-获取最新区块高度
 */
func (client *Client) QueryBlockLastblocknumberEx(request *QueryBlockLastblocknumberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBlockLastblocknumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBlockLastblocknumberResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.block.lastblocknumber.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新商品信息
 * Summary: 数字商品服务-商品服务-更新商品属性信息
 */
func (client *Client) UpdateEquity(request *UpdateEquityRequest) (_result *UpdateEquityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateEquityResponse{}
	_body, _err := client.UpdateEquityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新商品信息
 * Summary: 数字商品服务-商品服务-更新商品属性信息
 */
func (client *Client) UpdateEquityEx(request *UpdateEquityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateEquityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateEquityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 配合异步发布权益接口，查询发布权益商品结果。如查询无结果，判断错误类型，用户需要轮询。
 * Summary: 数字商品服务-商品服务-发布商品结果查询
 */
func (client *Client) QueryEquityCreateresult(request *QueryEquityCreateresultRequest) (_result *QueryEquityCreateresultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryEquityCreateresultResponse{}
	_body, _err := client.QueryEquityCreateresultEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 配合异步发布权益接口，查询发布权益商品结果。如查询无结果，判断错误类型，用户需要轮询。
 * Summary: 数字商品服务-商品服务-发布商品结果查询
 */
func (client *Client) QueryEquityCreateresultEx(request *QueryEquityCreateresultRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryEquityCreateresultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryEquityCreateresultResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.createresult.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据商品兑换流水交易号查询商品兑换流水详情
 * Summary: 数字商品服务-商品服务-查询商品兑换流水
 */
func (client *Client) QueryEquityInstruction(request *QueryEquityInstructionRequest) (_result *QueryEquityInstructionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryEquityInstructionResponse{}
	_body, _err := client.QueryEquityInstructionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据商品兑换流水交易号查询商品兑换流水详情
 * Summary: 数字商品服务-商品服务-查询商品兑换流水
 */
func (client *Client) QueryEquityInstructionEx(request *QueryEquityInstructionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryEquityInstructionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryEquityInstructionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.instruction.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 传入图片的不可访问URL，获取图片的临时可访问URL（支持批量查询）
 * Summary: 数字商品服务-OSS服务-获取图片URL
 */
func (client *Client) QueryImage(request *QueryImageRequest) (_result *QueryImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryImageResponse{}
	_body, _err := client.QueryImageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 传入图片的不可访问URL，获取图片的临时可访问URL（支持批量查询）
 * Summary: 数字商品服务-OSS服务-获取图片URL
 */
func (client *Client) QueryImageEx(request *QueryImageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryImageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.image.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新商品状态（可用，冻结，下线）
 * Summary: 数字商品服务-商品服务-更新商品状态
 */
func (client *Client) UpdateEquityStatus(request *UpdateEquityStatusRequest) (_result *UpdateEquityStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateEquityStatusResponse{}
	_body, _err := client.UpdateEquityStatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新商品状态（可用，冻结，下线）
 * Summary: 数字商品服务-商品服务-更新商品状态
 */
func (client *Client) UpdateEquityStatusEx(request *UpdateEquityStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateEquityStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateEquityStatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.status.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 设置备付金金额（CAS接口）
 * Summary: 数字商品服务-商户管理-设置备付金金额
 */
func (client *Client) SetMerchantProvision(request *SetMerchantProvisionRequest) (_result *SetMerchantProvisionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetMerchantProvisionResponse{}
	_body, _err := client.SetMerchantProvisionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 设置备付金金额（CAS接口）
 * Summary: 数字商品服务-商户管理-设置备付金金额
 */
func (client *Client) SetMerchantProvisionEx(request *SetMerchantProvisionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetMerchantProvisionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetMerchantProvisionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.merchant.provision.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新商户的备付金金额，由资金管理员操作
 * Summary: 数字商品服务-商户管理-更新备付金金额
 */
func (client *Client) UpdateMerchantProvision(request *UpdateMerchantProvisionRequest) (_result *UpdateMerchantProvisionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMerchantProvisionResponse{}
	_body, _err := client.UpdateMerchantProvisionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新商户的备付金金额，由资金管理员操作
 * Summary: 数字商品服务-商户管理-更新备付金金额
 */
func (client *Client) UpdateMerchantProvisionEx(request *UpdateMerchantProvisionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMerchantProvisionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMerchantProvisionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.merchant.provision.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 核销商品兑换交易，由资金管理员操作
 * Summary: 数字商品服务-商品服务-核销商品兑换交易
 */
func (client *Client) ExecEquityInstructionwriteoff(request *ExecEquityInstructionwriteoffRequest) (_result *ExecEquityInstructionwriteoffResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecEquityInstructionwriteoffResponse{}
	_body, _err := client.ExecEquityInstructionwriteoffEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 核销商品兑换交易，由资金管理员操作
 * Summary: 数字商品服务-商品服务-核销商品兑换交易
 */
func (client *Client) ExecEquityInstructionwriteoffEx(request *ExecEquityInstructionwriteoffRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecEquityInstructionwriteoffResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecEquityInstructionwriteoffResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.equity.instructionwriteoff.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询租户的备付金列表
 * Summary: 数字商品服务-商户管理-查租户备付金列表
 */
func (client *Client) QueryMerchantProvisions(request *QueryMerchantProvisionsRequest) (_result *QueryMerchantProvisionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMerchantProvisionsResponse{}
	_body, _err := client.QueryMerchantProvisionsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询租户的备付金列表
 * Summary: 数字商品服务-商户管理-查租户备付金列表
 */
func (client *Client) QueryMerchantProvisionsEx(request *QueryMerchantProvisionsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMerchantProvisionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMerchantProvisionsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.merchant.provisions.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 只有特定的商户才能调用，代理到数字商品管理自营后台的商户才能查询到信息。查询商户可兑换商品列表
 * Summary: 数字商品服务-商户管理-查询可兑换商品
 */
func (client *Client) QueryMerchantExchangeableequitylist(request *QueryMerchantExchangeableequitylistRequest) (_result *QueryMerchantExchangeableequitylistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMerchantExchangeableequitylistResponse{}
	_body, _err := client.QueryMerchantExchangeableequitylistEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 只有特定的商户才能调用，代理到数字商品管理自营后台的商户才能查询到信息。查询商户可兑换商品列表
 * Summary: 数字商品服务-商户管理-查询可兑换商品
 */
func (client *Client) QueryMerchantExchangeableequitylistEx(request *QueryMerchantExchangeableequitylistRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMerchantExchangeableequitylistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMerchantExchangeableequitylistResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.merchant.exchangeableequitylist.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 只有特定的商户才能调用，代理到数字商品管理自营后台的商户才能查询到信息。查询商户可兑换的商品明细信息
 * Summary: 数字商品服务-商户管理-查询可兑商品明细
 */
func (client *Client) QueryMerchantExchangeableequitydetail(request *QueryMerchantExchangeableequitydetailRequest) (_result *QueryMerchantExchangeableequitydetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMerchantExchangeableequitydetailResponse{}
	_body, _err := client.QueryMerchantExchangeableequitydetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 只有特定的商户才能调用，代理到数字商品管理自营后台的商户才能查询到信息。查询商户可兑换的商品明细信息
 * Summary: 数字商品服务-商户管理-查询可兑商品明细
 */
func (client *Client) QueryMerchantExchangeableequitydetailEx(request *QueryMerchantExchangeableequitydetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMerchantExchangeableequitydetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMerchantExchangeableequitydetailResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.merchant.exchangeableequitydetail.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建新资产
 * Summary: 数字商品服务-资产服务-创建资产
 */
func (client *Client) ExecAssetCreate(request *ExecAssetCreateRequest) (_result *ExecAssetCreateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecAssetCreateResponse{}
	_body, _err := client.ExecAssetCreateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建新资产
 * Summary: 数字商品服务-资产服务-创建资产
 */
func (client *Client) ExecAssetCreateEx(request *ExecAssetCreateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecAssetCreateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecAssetCreateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.asset.create.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资产铸币(不扣减备付金)，合约管理员操作
 * Summary: 数字商品服务-资产服务-资产铸币
 */
func (client *Client) ExecAssetGenerate(request *ExecAssetGenerateRequest) (_result *ExecAssetGenerateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecAssetGenerateResponse{}
	_body, _err := client.ExecAssetGenerateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资产铸币(不扣减备付金)，合约管理员操作
 * Summary: 数字商品服务-资产服务-资产铸币
 */
func (client *Client) ExecAssetGenerateEx(request *ExecAssetGenerateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecAssetGenerateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecAssetGenerateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.asset.generate.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建商户（合约管理员权限）
 * Summary: 数字商品服务-商户管理-创建商户
 */
func (client *Client) CreateMerchant(request *CreateMerchantRequest) (_result *CreateMerchantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateMerchantResponse{}
	_body, _err := client.CreateMerchantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建商户（合约管理员权限）
 * Summary: 数字商品服务-商户管理-创建商户
 */
func (client *Client) CreateMerchantEx(request *CreateMerchantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateMerchantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateMerchantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.merchant.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 设置商户的资金管理员，重要权限，谨慎操作！
 * Summary: 数字商品服务-商户管理-设置资金管理员
 */
func (client *Client) SetMerchantFundmanager(request *SetMerchantFundmanagerRequest) (_result *SetMerchantFundmanagerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetMerchantFundmanagerResponse{}
	_body, _err := client.SetMerchantFundmanagerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 设置商户的资金管理员，重要权限，谨慎操作！
 * Summary: 数字商品服务-商户管理-设置资金管理员
 */
func (client *Client) SetMerchantFundmanagerEx(request *SetMerchantFundmanagerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetMerchantFundmanagerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetMerchantFundmanagerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.merchant.fundmanager.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建备付金账户，合约管理员权限
 * Summary: 数字商品服务-商户管理-创建备付金账户
 */
func (client *Client) CreateMerchantProvision(request *CreateMerchantProvisionRequest) (_result *CreateMerchantProvisionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateMerchantProvisionResponse{}
	_body, _err := client.CreateMerchantProvisionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建备付金账户，合约管理员权限
 * Summary: 数字商品服务-商户管理-创建备付金账户
 */
func (client *Client) CreateMerchantProvisionEx(request *CreateMerchantProvisionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateMerchantProvisionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateMerchantProvisionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.merchant.provision.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询租户的授权代理权限
 * Summary: 数字商品服务-管理服务-代理权限查询
 */
func (client *Client) QueryConfigDelegaterelation(request *QueryConfigDelegaterelationRequest) (_result *QueryConfigDelegaterelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConfigDelegaterelationResponse{}
	_body, _err := client.QueryConfigDelegaterelationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询租户的授权代理权限
 * Summary: 数字商品服务-管理服务-代理权限查询
 */
func (client *Client) QueryConfigDelegaterelationEx(request *QueryConfigDelegaterelationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConfigDelegaterelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConfigDelegaterelationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.config.delegaterelation.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 设置租户的授权代理权限。赋予 opt_tenant_id 代理 delegated_tenant_id 调用接口的权限，见可代理的接口详情单。
 * Summary: 数字商品服务-管理服务-设置代理权限
 */
func (client *Client) UpdateConfigDelegaterelation(request *UpdateConfigDelegaterelationRequest) (_result *UpdateConfigDelegaterelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateConfigDelegaterelationResponse{}
	_body, _err := client.UpdateConfigDelegaterelationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 设置租户的授权代理权限。赋予 opt_tenant_id 代理 delegated_tenant_id 调用接口的权限，见可代理的接口详情单。
 * Summary: 数字商品服务-管理服务-设置代理权限
 */
func (client *Client) UpdateConfigDelegaterelationEx(request *UpdateConfigDelegaterelationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateConfigDelegaterelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateConfigDelegaterelationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.config.delegaterelation.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询接口访问白名单信息
 * Summary: 数字商品服务-拉块服务-查询接口白名单
 */
func (client *Client) QueryConfigWhitelist(request *QueryConfigWhitelistRequest) (_result *QueryConfigWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConfigWhitelistResponse{}
	_body, _err := client.QueryConfigWhitelistEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询接口访问白名单信息
 * Summary: 数字商品服务-拉块服务-查询接口白名单
 */
func (client *Client) QueryConfigWhitelistEx(request *QueryConfigWhitelistRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConfigWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConfigWhitelistResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.config.whitelist.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 设置接口访问白名单
 * Summary: 数字商品服务-管理服务-设置访问白名单
 */
func (client *Client) UpdateConfigWhitelist(request *UpdateConfigWhitelistRequest) (_result *UpdateConfigWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateConfigWhitelistResponse{}
	_body, _err := client.UpdateConfigWhitelistEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 设置接口访问白名单
 * Summary: 数字商品服务-管理服务-设置访问白名单
 */
func (client *Client) UpdateConfigWhitelistEx(request *UpdateConfigWhitelistRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateConfigWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateConfigWhitelistResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.config.whitelist.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 兑换单申请售后（采购商）
 * Summary: 数字商品服务-兑换服务-申请售后(商家)
 */
func (client *Client) ApplyExchangeAftersale(request *ApplyExchangeAftersaleRequest) (_result *ApplyExchangeAftersaleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyExchangeAftersaleResponse{}
	_body, _err := client.ApplyExchangeAftersaleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 兑换单申请售后（采购商）
 * Summary: 数字商品服务-兑换服务-申请售后(商家)
 */
func (client *Client) ApplyExchangeAftersaleEx(request *ApplyExchangeAftersaleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyExchangeAftersaleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyExchangeAftersaleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.exchange.aftersale.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 同意售后（供应商）
 * Summary: 数字商品服务-兑换服务-同意售后
 */
func (client *Client) ExecExchangeAgreeaftersale(request *ExecExchangeAgreeaftersaleRequest) (_result *ExecExchangeAgreeaftersaleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecExchangeAgreeaftersaleResponse{}
	_body, _err := client.ExecExchangeAgreeaftersaleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 同意售后（供应商）
 * Summary: 数字商品服务-兑换服务-同意售后
 */
func (client *Client) ExecExchangeAgreeaftersaleEx(request *ExecExchangeAgreeaftersaleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecExchangeAgreeaftersaleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecExchangeAgreeaftersaleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.exchange.agreeaftersale.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 拒绝售后（供应商）
 * Summary: 数字商品服务-兑换服务-拒绝售后
 */
func (client *Client) RefuseExchangeAftersale(request *RefuseExchangeAftersaleRequest) (_result *RefuseExchangeAftersaleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RefuseExchangeAftersaleResponse{}
	_body, _err := client.RefuseExchangeAftersaleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 拒绝售后（供应商）
 * Summary: 数字商品服务-兑换服务-拒绝售后
 */
func (client *Client) RefuseExchangeAftersaleEx(request *RefuseExchangeAftersaleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RefuseExchangeAftersaleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RefuseExchangeAftersaleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.exchange.aftersale.refuse"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重新发货（供应商）
 * Summary: 数字商品服务-兑换服务-重新发货
 */
func (client *Client) SendExchangeAftersale(request *SendExchangeAftersaleRequest) (_result *SendExchangeAftersaleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SendExchangeAftersaleResponse{}
	_body, _err := client.SendExchangeAftersaleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重新发货（供应商）
 * Summary: 数字商品服务-兑换服务-重新发货
 */
func (client *Client) SendExchangeAftersaleEx(request *SendExchangeAftersaleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SendExchangeAftersaleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SendExchangeAftersaleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.exchange.aftersale.send"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商户确认售后（供应商）comfirmaftersale
 * Summary:  数字商品服务-兑换服务-商户确认售后
 */
func (client *Client) ConfirmExchangeAftersale(request *ConfirmExchangeAftersaleRequest) (_result *ConfirmExchangeAftersaleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmExchangeAftersaleResponse{}
	_body, _err := client.ConfirmExchangeAftersaleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商户确认售后（供应商）comfirmaftersale
 * Summary:  数字商品服务-兑换服务-商户确认售后
 */
func (client *Client) ConfirmExchangeAftersaleEx(request *ConfirmExchangeAftersaleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmExchangeAftersaleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmExchangeAftersaleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.exchange.aftersale.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字消费卡链上发布
 * Summary: 数字商品服务-存证服务-消费卡链上发布
 */
func (client *Client) ExecDataDeposit(request *ExecDataDepositRequest) (_result *ExecDataDepositResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecDataDepositResponse{}
	_body, _err := client.ExecDataDepositEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字消费卡链上发布
 * Summary: 数字商品服务-存证服务-消费卡链上发布
 */
func (client *Client) ExecDataDepositEx(request *ExecDataDepositRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecDataDepositResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecDataDepositResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.data.deposit.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 设置商品兑换手续费
 * Summary: 数字商品服务-商品服务-设置商品手续费
 */
func (client *Client) SetCommission(request *SetCommissionRequest) (_result *SetCommissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetCommissionResponse{}
	_body, _err := client.SetCommissionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 设置商品兑换手续费
 * Summary: 数字商品服务-商品服务-设置商品手续费
 */
func (client *Client) SetCommissionEx(request *SetCommissionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetCommissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetCommissionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.commission.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询商品手续费（可查询 当前生效 和 全部 的手续费信息）
 * Summary: 数字商品服务-商品服务-查询商品手续费
 */
func (client *Client) QueryCommission(request *QueryCommissionRequest) (_result *QueryCommissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCommissionResponse{}
	_body, _err := client.QueryCommissionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询商品手续费（可查询 当前生效 和 全部 的手续费信息）
 * Summary: 数字商品服务-商品服务-查询商品手续费
 */
func (client *Client) QueryCommissionEx(request *QueryCommissionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCommissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCommissionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.commission.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 设置收取手续费的商户信息（合约管理员权限）
 * Summary: 数字商品服务-商品服务-设置收手续费商户
 */
func (client *Client) SetCommissionMerchant(request *SetCommissionMerchantRequest) (_result *SetCommissionMerchantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetCommissionMerchantResponse{}
	_body, _err := client.SetCommissionMerchantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 设置收取手续费的商户信息（合约管理员权限）
 * Summary: 数字商品服务-商品服务-设置收手续费商户
 */
func (client *Client) SetCommissionMerchantEx(request *SetCommissionMerchantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetCommissionMerchantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetCommissionMerchantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.commission.merchant.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询收取手续费的商户信息
 * Summary: 数字商品服务-商品服务-查询收手续费商户
 */
func (client *Client) QueryCommissionMerchant(request *QueryCommissionMerchantRequest) (_result *QueryCommissionMerchantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCommissionMerchantResponse{}
	_body, _err := client.QueryCommissionMerchantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询收取手续费的商户信息
 * Summary: 数字商品服务-商品服务-查询收手续费商户
 */
func (client *Client) QueryCommissionMerchantEx(request *QueryCommissionMerchantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCommissionMerchantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCommissionMerchantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.commission.merchant.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 单独创建对应的链ID的链上账户
 * Summary: 数字商品服务-管理服务-创建链上账户
 */
func (client *Client) CreateConfigChainaccount(request *CreateConfigChainaccountRequest) (_result *CreateConfigChainaccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateConfigChainaccountResponse{}
	_body, _err := client.CreateConfigChainaccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 单独创建对应的链ID的链上账户
 * Summary: 数字商品服务-管理服务-创建链上账户
 */
func (client *Client) CreateConfigChainaccountEx(request *CreateConfigChainaccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateConfigChainaccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateConfigChainaccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.config.chainaccount.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 买家发起套餐交易
 * Summary: 数字商品服务-IP授权服务-发起套餐交易
 */
func (client *Client) StartIpPackagetrade(request *StartIpPackagetradeRequest) (_result *StartIpPackagetradeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartIpPackagetradeResponse{}
	_body, _err := client.StartIpPackagetradeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 买家发起套餐交易
 * Summary: 数字商品服务-IP授权服务-发起套餐交易
 */
func (client *Client) StartIpPackagetradeEx(request *StartIpPackagetradeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartIpPackagetradeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartIpPackagetradeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.packagetrade.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 交易发起方取消交易，包括套餐交易和定向授权
 * Summary: 数字商品服务-IP授权服务-取消交易
 */
func (client *Client) CancelIpPackagetrade(request *CancelIpPackagetradeRequest) (_result *CancelIpPackagetradeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelIpPackagetradeResponse{}
	_body, _err := client.CancelIpPackagetradeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 交易发起方取消交易，包括套餐交易和定向授权
 * Summary: 数字商品服务-IP授权服务-取消交易
 */
func (client *Client) CancelIpPackagetradeEx(request *CancelIpPackagetradeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelIpPackagetradeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelIpPackagetradeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.packagetrade.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 上传套餐交易销售数据
 * Summary: 数字商品服务-IP授权服务-上传套餐数据
 */
func (client *Client) UploadIpPackagetradesales(request *UploadIpPackagetradesalesRequest) (_result *UploadIpPackagetradesalesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadIpPackagetradesalesResponse{}
	_body, _err := client.UploadIpPackagetradesalesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 上传套餐交易销售数据
 * Summary: 数字商品服务-IP授权服务-上传套餐数据
 */
func (client *Client) UploadIpPackagetradesalesEx(request *UploadIpPackagetradesalesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadIpPackagetradesalesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadIpPackagetradesalesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.packagetradesales.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发起授权交易
 * Summary: 数字商品服务-IP授权服务-发起授权交易
 */
func (client *Client) StartIpAuthtrade(request *StartIpAuthtradeRequest) (_result *StartIpAuthtradeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartIpAuthtradeResponse{}
	_body, _err := client.StartIpAuthtradeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发起授权交易
 * Summary: 数字商品服务-IP授权服务-发起授权交易
 */
func (client *Client) StartIpAuthtradeEx(request *StartIpAuthtradeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartIpAuthtradeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartIpAuthtradeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.authtrade.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 上传授权模式交易的销售数据
 * Summary: 数字商品服务-IP授权服务-上传销售数据
 */
func (client *Client) UploadIpAuthtradesales(request *UploadIpAuthtradesalesRequest) (_result *UploadIpAuthtradesalesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadIpAuthtradesalesResponse{}
	_body, _err := client.UploadIpAuthtradesalesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 上传授权模式交易的销售数据
 * Summary: 数字商品服务-IP授权服务-上传销售数据
 */
func (client *Client) UploadIpAuthtradesalesEx(request *UploadIpAuthtradesalesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadIpAuthtradesalesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadIpAuthtradesalesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.authtradesales.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消授权模式下销售数据账单
 * Summary: 数字商品服务-IP授权服务-取消授权账单
 */
func (client *Client) CancelIpAuthtradebill(request *CancelIpAuthtradebillRequest) (_result *CancelIpAuthtradebillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelIpAuthtradebillResponse{}
	_body, _err := client.CancelIpAuthtradebillEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消授权模式下销售数据账单
 * Summary: 数字商品服务-IP授权服务-取消授权账单
 */
func (client *Client) CancelIpAuthtradebillEx(request *CancelIpAuthtradebillRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelIpAuthtradebillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelIpAuthtradebillResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.authtradebill.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询账单支付状态
 * Summary: 数字商品服务-IP授权服务-查询账单状态
 */
func (client *Client) QueryIpBillstatus(request *QueryIpBillstatusRequest) (_result *QueryIpBillstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpBillstatusResponse{}
	_body, _err := client.QueryIpBillstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询账单支付状态
 * Summary: 数字商品服务-IP授权服务-查询账单状态
 */
func (client *Client) QueryIpBillstatusEx(request *QueryIpBillstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpBillstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpBillstatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.billstatus.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询订单信息，模糊查询和分页查询
 * Summary: 数字商品服务-IP授权服务-查询订单列表
 */
func (client *Client) QueryIpOrderlist(request *QueryIpOrderlistRequest) (_result *QueryIpOrderlistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpOrderlistResponse{}
	_body, _err := client.QueryIpOrderlistEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询订单信息，模糊查询和分页查询
 * Summary: 数字商品服务-IP授权服务-查询订单列表
 */
func (client *Client) QueryIpOrderlistEx(request *QueryIpOrderlistRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpOrderlistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpOrderlistResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.orderlist.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ip商品创建
 * Summary: 数字商品服务-IP授权服务-ip创建
 */
func (client *Client) CreateIpGoods(request *CreateIpGoodsRequest) (_result *CreateIpGoodsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateIpGoodsResponse{}
	_body, _err := client.CreateIpGoodsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ip商品创建
 * Summary: 数字商品服务-IP授权服务-ip创建
 */
func (client *Client) CreateIpGoodsEx(request *CreateIpGoodsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateIpGoodsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateIpGoodsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.goods.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ip的渠道信息添加
 * Summary: 数字商品服务-IP授权服务-渠道信息添加
 */
func (client *Client) AddIpChannel(request *AddIpChannelRequest) (_result *AddIpChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddIpChannelResponse{}
	_body, _err := client.AddIpChannelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ip的渠道信息添加
 * Summary: 数字商品服务-IP授权服务-渠道信息添加
 */
func (client *Client) AddIpChannelEx(request *AddIpChannelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddIpChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddIpChannelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.channel.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询订单详情，包含销售数据
 * Summary: 数字商品服务-IP授权服务-查询订单详情
 */
func (client *Client) QueryIpOrderinfo(request *QueryIpOrderinfoRequest) (_result *QueryIpOrderinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpOrderinfoResponse{}
	_body, _err := client.QueryIpOrderinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询订单详情，包含销售数据
 * Summary: 数字商品服务-IP授权服务-查询订单详情
 */
func (client *Client) QueryIpOrderinfoEx(request *QueryIpOrderinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpOrderinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpOrderinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.orderinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询ip简略信息
 * Summary: 数字商品服务-IP授权服务-批量查询
 */
func (client *Client) BatchqueryIpGoods(request *BatchqueryIpGoodsRequest) (_result *BatchqueryIpGoodsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryIpGoodsResponse{}
	_body, _err := client.BatchqueryIpGoodsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询ip简略信息
 * Summary: 数字商品服务-IP授权服务-批量查询
 */
func (client *Client) BatchqueryIpGoodsEx(request *BatchqueryIpGoodsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryIpGoodsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryIpGoodsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.goods.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据渠道查询详细的信息
 * Summary: 数字商品服务-IP授权服务-查询渠道详细
 */
func (client *Client) QueryIpGoodsdetailwithchannel(request *QueryIpGoodsdetailwithchannelRequest) (_result *QueryIpGoodsdetailwithchannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpGoodsdetailwithchannelResponse{}
	_body, _err := client.QueryIpGoodsdetailwithchannelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据渠道查询详细的信息
 * Summary: 数字商品服务-IP授权服务-查询渠道详细
 */
func (client *Client) QueryIpGoodsdetailwithchannelEx(request *QueryIpGoodsdetailwithchannelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpGoodsdetailwithchannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpGoodsdetailwithchannelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.goodsdetailwithchannel.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ip的所有信息 包括渠道和sku
 * Summary: 数字商品服务-IP授权服务-IP详情查询
 */
func (client *Client) QueryIpDetail(request *QueryIpDetailRequest) (_result *QueryIpDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpDetailResponse{}
	_body, _err := client.QueryIpDetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ip的所有信息 包括渠道和sku
 * Summary: 数字商品服务-IP授权服务-IP详情查询
 */
func (client *Client) QueryIpDetailEx(request *QueryIpDetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpDetailResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.detail.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ip商品创建
 * Summary: 数字商品服务-IP授权服务-ip更新
 */
func (client *Client) UpdateIpGoods(request *UpdateIpGoodsRequest) (_result *UpdateIpGoodsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateIpGoodsResponse{}
	_body, _err := client.UpdateIpGoodsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ip商品创建
 * Summary: 数字商品服务-IP授权服务-ip更新
 */
func (client *Client) UpdateIpGoodsEx(request *UpdateIpGoodsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateIpGoodsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateIpGoodsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.goods.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ip的渠道信息修改
 * Summary: 数字商品服务-IP授权服务-渠道信息更新
 */
func (client *Client) UpdateIpChannel(request *UpdateIpChannelRequest) (_result *UpdateIpChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateIpChannelResponse{}
	_body, _err := client.UpdateIpChannelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ip的渠道信息修改
 * Summary: 数字商品服务-IP授权服务-渠道信息更新
 */
func (client *Client) UpdateIpChannelEx(request *UpdateIpChannelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateIpChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateIpChannelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.channel.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ip上线
 * Summary: 数字商品服务-IP授权服务-上架
 */
func (client *Client) OnlineIp(request *OnlineIpRequest) (_result *OnlineIpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OnlineIpResponse{}
	_body, _err := client.OnlineIpEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ip上线
 * Summary: 数字商品服务-IP授权服务-上架
 */
func (client *Client) OnlineIpEx(request *OnlineIpRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OnlineIpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OnlineIpResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.online"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ip下线
 * Summary: 数字商品服务-IP授权服务-下架
 */
func (client *Client) OfflineIp(request *OfflineIpRequest) (_result *OfflineIpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OfflineIpResponse{}
	_body, _err := client.OfflineIpEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ip下线
 * Summary: 数字商品服务-IP授权服务-下架
 */
func (client *Client) OfflineIpEx(request *OfflineIpRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OfflineIpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OfflineIpResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.offline"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户注册, 采购商注册账户完成即可以参与IP授权交易服务, 版权方需要根据具体需要完成二级商户创建操作后再参与IP授权交易服务。
 * Summary: 数字商品服务-IP授权服务-账户创建
 */
func (client *Client) CreateIpAccount(request *CreateIpAccountRequest) (_result *CreateIpAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateIpAccountResponse{}
	_body, _err := client.CreateIpAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户注册, 采购商注册账户完成即可以参与IP授权交易服务, 版权方需要根据具体需要完成二级商户创建操作后再参与IP授权交易服务。
 * Summary: 数字商品服务-IP授权服务-账户创建
 */
func (client *Client) CreateIpAccountEx(request *CreateIpAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateIpAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateIpAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.account.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户冻结, 账户冻结后无法参与IP授权交易活动。
 * Summary: 数字商品服务-IP授权服务-账户冻结
 */
func (client *Client) FreezeIpAccount(request *FreezeIpAccountRequest) (_result *FreezeIpAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &FreezeIpAccountResponse{}
	_body, _err := client.FreezeIpAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户冻结, 账户冻结后无法参与IP授权交易活动。
 * Summary: 数字商品服务-IP授权服务-账户冻结
 */
func (client *Client) FreezeIpAccountEx(request *FreezeIpAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *FreezeIpAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &FreezeIpAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.account.freeze"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户解冻, 对于已经被冻结的账户, 账户解冻后才可以参与IP授权交易活动。
 * Summary: 数字商品服务-IP授权服务-账户解冻
 */
func (client *Client) UnfreezeIpAccount(request *UnfreezeIpAccountRequest) (_result *UnfreezeIpAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UnfreezeIpAccountResponse{}
	_body, _err := client.UnfreezeIpAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户解冻, 对于已经被冻结的账户, 账户解冻后才可以参与IP授权交易活动。
 * Summary: 数字商品服务-IP授权服务-账户解冻
 */
func (client *Client) UnfreezeIpAccountEx(request *UnfreezeIpAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UnfreezeIpAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnfreezeIpAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.account.unfreeze"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户查询。
 * Summary: 数字商品服务-IP授权服务-账户查询
 */
func (client *Client) QueryIpAccount(request *QueryIpAccountRequest) (_result *QueryIpAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpAccountResponse{}
	_body, _err := client.QueryIpAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: IP授权交易服务: IP采购商和版权方的账户查询。
 * Summary: 数字商品服务-IP授权服务-账户查询
 */
func (client *Client) QueryIpAccountEx(request *QueryIpAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.account.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品-IP授权交易服务-版权方申请: 版权方完成账户注册后需要完成版权方申请,异步流程需要查询申请结果。
 * Summary: 数字商品服务-IP授权服务-版权方申请
 */
func (client *Client) ApplyIpAccount(request *ApplyIpAccountRequest) (_result *ApplyIpAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyIpAccountResponse{}
	_body, _err := client.ApplyIpAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品-IP授权交易服务-版权方申请: 版权方完成账户注册后需要完成版权方申请,异步流程需要查询申请结果。
 * Summary: 数字商品服务-IP授权服务-版权方申请
 */
func (client *Client) ApplyIpAccountEx(request *ApplyIpAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyIpAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyIpAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.account.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品-IP授权交易-版权方申请进度查询: 版权方申请流程需要人工审核和支付宝审核。
 * Summary: 数字商品服务-IP授权服务-查申请进度
 */
func (client *Client) CheckIpAccount(request *CheckIpAccountRequest) (_result *CheckIpAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckIpAccountResponse{}
	_body, _err := client.CheckIpAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品-IP授权交易-版权方申请进度查询: 版权方申请流程需要人工审核和支付宝审核。
 * Summary: 数字商品服务-IP授权服务-查申请进度
 */
func (client *Client) CheckIpAccountEx(request *CheckIpAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckIpAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckIpAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.account.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ip商品审批
 * Summary: 数字商品服务-IP授权服务-ip创建审批
 */
func (client *Client) ConfirmIpGoods(request *ConfirmIpGoodsRequest) (_result *ConfirmIpGoodsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmIpGoodsResponse{}
	_body, _err := client.ConfirmIpGoodsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ip商品审批
 * Summary: 数字商品服务-IP授权服务-ip创建审批
 */
func (client *Client) ConfirmIpGoodsEx(request *ConfirmIpGoodsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmIpGoodsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmIpGoodsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.goods.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ip信息批量查询--给运营使用
查询审批信息
 * Summary: 数字商品服务-IP授权服务-审批信息查询
*/
func (client *Client) BatchqueryIpApproval(request *BatchqueryIpApprovalRequest) (_result *BatchqueryIpApprovalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryIpApprovalResponse{}
	_body, _err := client.BatchqueryIpApprovalEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ip信息批量查询--给运营使用
查询审批信息
 * Summary: 数字商品服务-IP授权服务-审批信息查询
*/
func (client *Client) BatchqueryIpApprovalEx(request *BatchqueryIpApprovalRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryIpApprovalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryIpApprovalResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.approval.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-运营审核确认
 * Summary: 数字商品服务-IP授权服务-运营审核确认
 */
func (client *Client) ConfirmIpAccount(request *ConfirmIpAccountRequest) (_result *ConfirmIpAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmIpAccountResponse{}
	_body, _err := client.ConfirmIpAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-运营审核确认
 * Summary: 数字商品服务-IP授权服务-运营审核确认
 */
func (client *Client) ConfirmIpAccountEx(request *ConfirmIpAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmIpAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmIpAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.account.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-运营审核拒绝
 * Summary: 数字商品服务-IP授权服务-运营审核拒绝
 */
func (client *Client) RefuseIpAccount(request *RefuseIpAccountRequest) (_result *RefuseIpAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RefuseIpAccountResponse{}
	_body, _err := client.RefuseIpAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-运营审核拒绝
 * Summary: 数字商品服务-IP授权服务-运营审核拒绝
 */
func (client *Client) RefuseIpAccountEx(request *RefuseIpAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RefuseIpAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RefuseIpAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.account.refuse"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 版权方进件信息的单个查询
 * Summary: 数字商品服务-IP授权服务-申请信息查询
 */
func (client *Client) PullIpAccount(request *PullIpAccountRequest) (_result *PullIpAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PullIpAccountResponse{}
	_body, _err := client.PullIpAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 版权方进件信息的单个查询
 * Summary: 数字商品服务-IP授权服务-申请信息查询
 */
func (client *Client) PullIpAccountEx(request *PullIpAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PullIpAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PullIpAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.account.pull"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-MCC列表查询
 * Summary: 数字商品服务-IP授权服务-MCC查询
 */
func (client *Client) QueryIpMcc(request *QueryIpMccRequest) (_result *QueryIpMccResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpMccResponse{}
	_body, _err := client.QueryIpMccEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-MCC列表查询
 * Summary: 数字商品服务-IP授权服务-MCC查询
 */
func (client *Client) QueryIpMccEx(request *QueryIpMccRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpMccResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpMccResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.mcc.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询ip type和受众人群
 * Summary: 数字商品服务-IP授权服务-IP标签查询
 */
func (client *Client) QueryIpType(request *QueryIpTypeRequest) (_result *QueryIpTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpTypeResponse{}
	_body, _err := client.QueryIpTypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询ip type和受众人群
 * Summary: 数字商品服务-IP授权服务-IP标签查询
 */
func (client *Client) QueryIpTypeEx(request *QueryIpTypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpTypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.type.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ip审批信息批量查询（带上渠道信息）
 * Summary: 数字商品服务-IP授权服务-审批批量查询
 */
func (client *Client) BatchqueryIpApprovalandchannel(request *BatchqueryIpApprovalandchannelRequest) (_result *BatchqueryIpApprovalandchannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryIpApprovalandchannelResponse{}
	_body, _err := client.BatchqueryIpApprovalandchannelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ip审批信息批量查询（带上渠道信息）
 * Summary: 数字商品服务-IP授权服务-审批批量查询
 */
func (client *Client) BatchqueryIpApprovalandchannelEx(request *BatchqueryIpApprovalandchannelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryIpApprovalandchannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryIpApprovalandchannelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.approvalandchannel.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 版权方进件信息的批量查询
 * Summary: 数字商品服务-IP授权服务-查询商家信息
 */
func (client *Client) BatchqueryIpAccount(request *BatchqueryIpAccountRequest) (_result *BatchqueryIpAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryIpAccountResponse{}
	_body, _err := client.BatchqueryIpAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 版权方进件信息的批量查询
 * Summary: 数字商品服务-IP授权服务-查询商家信息
 */
func (client *Client) BatchqueryIpAccountEx(request *BatchqueryIpAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryIpAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryIpAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.account.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 账户列表查询
 * Summary: 数字商品服务-IP授权服务-查账户列表
 */
func (client *Client) BatchqueryIpSeller(request *BatchqueryIpSellerRequest) (_result *BatchqueryIpSellerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryIpSellerResponse{}
	_body, _err := client.BatchqueryIpSellerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 账户列表查询
 * Summary: 数字商品服务-IP授权服务-查账户列表
 */
func (client *Client) BatchqueryIpSellerEx(request *BatchqueryIpSellerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryIpSellerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryIpSellerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.seller.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP服务-UNI码申请(特别注意: 针对同一笔订单(order_id), 累计申请(调用本接口)次数不能超过200次)
 * Summary: 数字商品服务-IP服务-UNI码申请
 */
func (client *Client) ApplyIpCode(request *ApplyIpCodeRequest) (_result *ApplyIpCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyIpCodeResponse{}
	_body, _err := client.ApplyIpCodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP服务-UNI码申请(特别注意: 针对同一笔订单(order_id), 累计申请(调用本接口)次数不能超过200次)
 * Summary: 数字商品服务-IP服务-UNI码申请
 */
func (client *Client) ApplyIpCodeEx(request *ApplyIpCodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyIpCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyIpCodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.code.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-数字凭证源码分页查询: 小程序不可扫描的数字凭证分页查询。
注意: 这个接口查到的为小程序不可扫描的码, 是原始编码!!!
 * Summary: 数字商品服务-IP服务-凭证源码查询
*/
func (client *Client) PagequeryIpCode(request *PagequeryIpCodeRequest) (_result *PagequeryIpCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryIpCodeResponse{}
	_body, _err := client.PagequeryIpCodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-数字凭证源码分页查询: 小程序不可扫描的数字凭证分页查询。
注意: 这个接口查到的为小程序不可扫描的码, 是原始编码!!!
 * Summary: 数字商品服务-IP服务-凭证源码查询
*/
func (client *Client) PagequeryIpCodeEx(request *PagequeryIpCodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryIpCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryIpCodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.code.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP服务-UNI码校验
 * Summary: 数字商品服务-IP服务-UNI码校验
 */
func (client *Client) CheckIpCode(request *CheckIpCodeRequest) (_result *CheckIpCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckIpCodeResponse{}
	_body, _err := client.CheckIpCodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP服务-UNI码校验
 * Summary: 数字商品服务-IP服务-UNI码校验
 */
func (client *Client) CheckIpCodeEx(request *CheckIpCodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckIpCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckIpCodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.code.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对商品的更新进行审核
 * Summary: 数字商品服务-IP授权服务-IP更新审核
 */
func (client *Client) ConfirmIpUpdateapproval(request *ConfirmIpUpdateapprovalRequest) (_result *ConfirmIpUpdateapprovalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmIpUpdateapprovalResponse{}
	_body, _err := client.ConfirmIpUpdateapprovalEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对商品的更新进行审核
 * Summary: 数字商品服务-IP授权服务-IP更新审核
 */
func (client *Client) ConfirmIpUpdateapprovalEx(request *ConfirmIpUpdateapprovalRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmIpUpdateapprovalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmIpUpdateapprovalResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.updateapproval.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ip商品sku信息设置
 * Summary: 数字商品服务-IP授权服务-sku设置
 */
func (client *Client) SetIpSku(request *SetIpSkuRequest) (_result *SetIpSkuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetIpSkuResponse{}
	_body, _err := client.SetIpSkuEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ip商品sku信息设置
 * Summary: 数字商品服务-IP授权服务-sku设置
 */
func (client *Client) SetIpSkuEx(request *SetIpSkuRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetIpSkuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetIpSkuResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.sku.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询商品基础信息的更新数据
 * Summary: 数字商品服务-IP授权服务-查询更新数据
 */
func (client *Client) QueryIpGoodsupdate(request *QueryIpGoodsupdateRequest) (_result *QueryIpGoodsupdateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpGoodsupdateResponse{}
	_body, _err := client.QueryIpGoodsupdateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询商品基础信息的更新数据
 * Summary: 数字商品服务-IP授权服务-查询更新数据
 */
func (client *Client) QueryIpGoodsupdateEx(request *QueryIpGoodsupdateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpGoodsupdateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpGoodsupdateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.goodsupdate.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询账单信息，分页查询
 * Summary: 数字商品服务-IP授权服务-查询账单列表
 */
func (client *Client) PagequeryIpBill(request *PagequeryIpBillRequest) (_result *PagequeryIpBillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryIpBillResponse{}
	_body, _err := client.PagequeryIpBillEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询账单信息，分页查询
 * Summary: 数字商品服务-IP授权服务-查询账单列表
 */
func (client *Client) PagequeryIpBillEx(request *PagequeryIpBillRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryIpBillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryIpBillResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.bill.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ip商品某个渠道默认sku查询
 * Summary: 数字商品服务-IP授权服务-sku查询
 */
func (client *Client) QueryIpSkuconfig(request *QueryIpSkuconfigRequest) (_result *QueryIpSkuconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpSkuconfigResponse{}
	_body, _err := client.QueryIpSkuconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ip商品某个渠道默认sku查询
 * Summary: 数字商品服务-IP授权服务-sku查询
 */
func (client *Client) QueryIpSkuconfigEx(request *QueryIpSkuconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpSkuconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpSkuconfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.skuconfig.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权交易-版权方导入: 一链多端版权方互通
 * Summary: 数字商品服务-IP授权服务-版权方导入
 */
func (client *Client) ImportIpAccount(request *ImportIpAccountRequest) (_result *ImportIpAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportIpAccountResponse{}
	_body, _err := client.ImportIpAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权交易-版权方导入: 一链多端版权方互通
 * Summary: 数字商品服务-IP授权服务-版权方导入
 */
func (client *Client) ImportIpAccountEx(request *ImportIpAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportIpAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportIpAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.account.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商品特定渠道的sku信息清空
 * Summary: 数字商品服务-IP授权服务-sku清空
 */
func (client *Client) RemoveIpSku(request *RemoveIpSkuRequest) (_result *RemoveIpSkuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveIpSkuResponse{}
	_body, _err := client.RemoveIpSkuEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商品特定渠道的sku信息清空
 * Summary: 数字商品服务-IP授权服务-sku清空
 */
func (client *Client) RemoveIpSkuEx(request *RemoveIpSkuRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveIpSkuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveIpSkuResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.sku.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建监修报审
 * Summary: 数字商品服务-IP授权服务-创建监修报审
 */
func (client *Client) CreateIpSuperviseapprove(request *CreateIpSuperviseapproveRequest) (_result *CreateIpSuperviseapproveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateIpSuperviseapproveResponse{}
	_body, _err := client.CreateIpSuperviseapproveEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建监修报审
 * Summary: 数字商品服务-IP授权服务-创建监修报审
 */
func (client *Client) CreateIpSuperviseapproveEx(request *CreateIpSuperviseapproveRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateIpSuperviseapproveResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateIpSuperviseapproveResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.superviseapprove.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 监修报审审批
 * Summary: 数字商品服务-IP授权服务-监修报审审批
 */
func (client *Client) ConfirmIpSuperviseapprove(request *ConfirmIpSuperviseapproveRequest) (_result *ConfirmIpSuperviseapproveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmIpSuperviseapproveResponse{}
	_body, _err := client.ConfirmIpSuperviseapproveEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 监修报审审批
 * Summary: 数字商品服务-IP授权服务-监修报审审批
 */
func (client *Client) ConfirmIpSuperviseapproveEx(request *ConfirmIpSuperviseapproveRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmIpSuperviseapproveResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmIpSuperviseapproveResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.superviseapprove.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 监修报审进度推进/重置
 * Summary: 数字商品服务-IP授权服务-推进监修报审
 */
func (client *Client) PushIpSuperviseapprove(request *PushIpSuperviseapproveRequest) (_result *PushIpSuperviseapproveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PushIpSuperviseapproveResponse{}
	_body, _err := client.PushIpSuperviseapproveEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 监修报审进度推进/重置
 * Summary: 数字商品服务-IP授权服务-推进监修报审
 */
func (client *Client) PushIpSuperviseapproveEx(request *PushIpSuperviseapproveRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PushIpSuperviseapproveResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PushIpSuperviseapproveResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.superviseapprove.push"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品-IP授权交易-查询监修报审详情
 * Summary: 数字商品服务-IP授权服务-查询监修报审
 */
func (client *Client) QueryIpSuperviseapprove(request *QueryIpSuperviseapproveRequest) (_result *QueryIpSuperviseapproveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpSuperviseapproveResponse{}
	_body, _err := client.QueryIpSuperviseapproveEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品-IP授权交易-查询监修报审详情
 * Summary: 数字商品服务-IP授权服务-查询监修报审
 */
func (client *Client) QueryIpSuperviseapproveEx(request *QueryIpSuperviseapproveRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpSuperviseapproveResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpSuperviseapproveResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.superviseapprove.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 领取数字凭证，如已被领取则返回被领取人昵称信息
 * Summary: 数字商品服务-IP授权服务-数字凭证领取
 */
func (client *Client) ReceiveIpCode(request *ReceiveIpCodeRequest) (_result *ReceiveIpCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReceiveIpCodeResponse{}
	_body, _err := client.ReceiveIpCodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 领取数字凭证，如已被领取则返回被领取人昵称信息
 * Summary: 数字商品服务-IP授权服务-数字凭证领取
 */
func (client *Client) ReceiveIpCodeEx(request *ReceiveIpCodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReceiveIpCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReceiveIpCodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.code.receive"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 已领取或以扫描过的数字凭证列表，分页查询
 * Summary: 数字商品服务-IP授权服务-数字凭证列表
 */
func (client *Client) PagequeryIpCodeinfo(request *PagequeryIpCodeinfoRequest) (_result *PagequeryIpCodeinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryIpCodeinfoResponse{}
	_body, _err := client.PagequeryIpCodeinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 已领取或以扫描过的数字凭证列表，分页查询
 * Summary: 数字商品服务-IP授权服务-数字凭证列表
 */
func (client *Client) PagequeryIpCodeinfoEx(request *PagequeryIpCodeinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryIpCodeinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryIpCodeinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.codeinfo.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建增值服务
 * Summary: 数字商品服务-IP授权服务-创建增值服务
 */
func (client *Client) CreateIpValueadd(request *CreateIpValueaddRequest) (_result *CreateIpValueaddResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateIpValueaddResponse{}
	_body, _err := client.CreateIpValueaddEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建增值服务
 * Summary: 数字商品服务-IP授权服务-创建增值服务
 */
func (client *Client) CreateIpValueaddEx(request *CreateIpValueaddRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateIpValueaddResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateIpValueaddResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.valueadd.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-更新增值服务
 * Summary: 数字商品服务-IP授权服务-更新增值服务
 */
func (client *Client) UpdateIpValueadd(request *UpdateIpValueaddRequest) (_result *UpdateIpValueaddResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateIpValueaddResponse{}
	_body, _err := client.UpdateIpValueaddEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-更新增值服务
 * Summary: 数字商品服务-IP授权服务-更新增值服务
 */
func (client *Client) UpdateIpValueaddEx(request *UpdateIpValueaddRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateIpValueaddResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateIpValueaddResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.valueadd.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品-IP授权-设置增值服务sku
 * Summary: 数字商品服务-IP授权服务-设置增值服务
 */
func (client *Client) SetIpValueaddsku(request *SetIpValueaddskuRequest) (_result *SetIpValueaddskuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetIpValueaddskuResponse{}
	_body, _err := client.SetIpValueaddskuEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品-IP授权-设置增值服务sku
 * Summary: 数字商品服务-IP授权服务-设置增值服务
 */
func (client *Client) SetIpValueaddskuEx(request *SetIpValueaddskuRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetIpValueaddskuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetIpValueaddskuResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.valueaddsku.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-增值服务上下架操作
 * Summary: 数字商品服务-IP授权服务-服务上下架
 */
func (client *Client) OnlineIpValueadd(request *OnlineIpValueaddRequest) (_result *OnlineIpValueaddResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OnlineIpValueaddResponse{}
	_body, _err := client.OnlineIpValueaddEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-增值服务上下架操作
 * Summary: 数字商品服务-IP授权服务-服务上下架
 */
func (client *Client) OnlineIpValueaddEx(request *OnlineIpValueaddRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OnlineIpValueaddResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OnlineIpValueaddResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.valueadd.online"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品-IP授权交易-增值服务查询
 * Summary: 数字商品服务-IP授权服务-增值服务查询
 */
func (client *Client) QueryIpValueadd(request *QueryIpValueaddRequest) (_result *QueryIpValueaddResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpValueaddResponse{}
	_body, _err := client.QueryIpValueaddEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品-IP授权交易-增值服务查询
 * Summary: 数字商品服务-IP授权服务-增值服务查询
 */
func (client *Client) QueryIpValueaddEx(request *QueryIpValueaddRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpValueaddResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpValueaddResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.valueadd.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 增值服务批量查询
 * Summary: 数字商品服务-IP授权服务-增值服务查询
 */
func (client *Client) PagequeryIpValueadd(request *PagequeryIpValueaddRequest) (_result *PagequeryIpValueaddResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryIpValueaddResponse{}
	_body, _err := client.PagequeryIpValueaddEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 增值服务批量查询
 * Summary: 数字商品服务-IP授权服务-增值服务查询
 */
func (client *Client) PagequeryIpValueaddEx(request *PagequeryIpValueaddRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryIpValueaddResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryIpValueaddResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.valueadd.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量上传授权交易的销售数据
 * Summary: 数字商品服务-IP授权服务-上传销售数据
 */
func (client *Client) UploadIpTradesales(request *UploadIpTradesalesRequest) (_result *UploadIpTradesalesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadIpTradesalesResponse{}
	_body, _err := client.UploadIpTradesalesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量上传授权交易的销售数据
 * Summary: 数字商品服务-IP授权服务-上传销售数据
 */
func (client *Client) UploadIpTradesalesEx(request *UploadIpTradesalesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadIpTradesalesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadIpTradesalesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.tradesales.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: C端用户授权信息
 * Summary: 数字商品服务-IP授权服务-C用户授权
 */
func (client *Client) AuthIpUser(request *AuthIpUserRequest) (_result *AuthIpUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AuthIpUserResponse{}
	_body, _err := client.AuthIpUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: C端用户授权信息
 * Summary: 数字商品服务-IP授权服务-C用户授权
 */
func (client *Client) AuthIpUserEx(request *AuthIpUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AuthIpUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthIpUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.user.auth"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-删除ip商品
 * Summary: 数字商品服务-IP授权服务-IP删除
 */
func (client *Client) RemoveIpGoods(request *RemoveIpGoodsRequest) (_result *RemoveIpGoodsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveIpGoodsResponse{}
	_body, _err := client.RemoveIpGoodsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-删除ip商品
 * Summary: 数字商品服务-IP授权服务-IP删除
 */
func (client *Client) RemoveIpGoodsEx(request *RemoveIpGoodsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveIpGoodsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveIpGoodsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.goods.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-ip数量统计
 * Summary: 数字商品服务-IP授权服务-ip数量统计
 */
func (client *Client) CountIpNum(request *CountIpNumRequest) (_result *CountIpNumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CountIpNumResponse{}
	_body, _err := client.CountIpNumEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-ip数量统计
 * Summary: 数字商品服务-IP授权服务-ip数量统计
 */
func (client *Client) CountIpNumEx(request *CountIpNumRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CountIpNumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CountIpNumResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.num.count"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-pv统计
 * Summary: 数字商品服务-IP授权服务-pv统计
 */
func (client *Client) CountIpPv(request *CountIpPvRequest) (_result *CountIpPvResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CountIpPvResponse{}
	_body, _err := client.CountIpPvEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-pv统计
 * Summary: 数字商品服务-IP授权服务-pv统计
 */
func (client *Client) CountIpPvEx(request *CountIpPvRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CountIpPvResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CountIpPvResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.pv.count"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询数字凭证详细信息
 * Summary: 数字商品服务-IP授权服务-数字凭证详情
 */
func (client *Client) QueryIpCode(request *QueryIpCodeRequest) (_result *QueryIpCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpCodeResponse{}
	_body, _err := client.QueryIpCodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询数字凭证详细信息
 * Summary: 数字商品服务-IP授权服务-数字凭证详情
 */
func (client *Client) QueryIpCodeEx(request *QueryIpCodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpCodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.code.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-账户统计
 * Summary: 数字商品服务-IP授权服务-账户统计
 */
func (client *Client) CountIpAccount(request *CountIpAccountRequest) (_result *CountIpAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CountIpAccountResponse{}
	_body, _err := client.CountIpAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-账户统计
 * Summary: 数字商品服务-IP授权服务-账户统计
 */
func (client *Client) CountIpAccountEx(request *CountIpAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CountIpAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CountIpAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.account.count"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询渠道订单统计值
 * Summary: 数字商品服务-IP授权服务-查询订单统计
 */
func (client *Client) QueryIpOrderstatistic(request *QueryIpOrderstatisticRequest) (_result *QueryIpOrderstatisticResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpOrderstatisticResponse{}
	_body, _err := client.QueryIpOrderstatisticEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询渠道订单统计值
 * Summary: 数字商品服务-IP授权服务-查询订单统计
 */
func (client *Client) QueryIpOrderstatisticEx(request *QueryIpOrderstatisticRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpOrderstatisticResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpOrderstatisticResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.orderstatistic.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 版权方更新IP图库
 * Summary: 数字商品服务-IP授权服务-ip更新图库
 */
func (client *Client) UpdateIpGoodsgallery(request *UpdateIpGoodsgalleryRequest) (_result *UpdateIpGoodsgalleryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateIpGoodsgalleryResponse{}
	_body, _err := client.UpdateIpGoodsgalleryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 版权方更新IP图库
 * Summary: 数字商品服务-IP授权服务-ip更新图库
 */
func (client *Client) UpdateIpGoodsgalleryEx(request *UpdateIpGoodsgalleryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateIpGoodsgalleryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateIpGoodsgalleryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.goodsgallery.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 版权方根据IPID查询图库，商家根据订单ID查询图库
 * Summary: 数字商品服务-IP授权服务-查询ip图库
 */
func (client *Client) QueryIpGoodsgallery(request *QueryIpGoodsgalleryRequest) (_result *QueryIpGoodsgalleryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpGoodsgalleryResponse{}
	_body, _err := client.QueryIpGoodsgalleryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 版权方根据IPID查询图库，商家根据订单ID查询图库
 * Summary: 数字商品服务-IP授权服务-查询ip图库
 */
func (client *Client) QueryIpGoodsgalleryEx(request *QueryIpGoodsgalleryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpGoodsgalleryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpGoodsgalleryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.goodsgallery.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 配置数字凭证的商品信息和资源位信息
 * Summary: 数字商品服务-IP服务-UNI码信息配置
 */
func (client *Client) SetIpCodeinfo(request *SetIpCodeinfoRequest) (_result *SetIpCodeinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetIpCodeinfoResponse{}
	_body, _err := client.SetIpCodeinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 配置数字凭证的商品信息和资源位信息
 * Summary: 数字商品服务-IP服务-UNI码信息配置
 */
func (client *Client) SetIpCodeinfoEx(request *SetIpCodeinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetIpCodeinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetIpCodeinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.codeinfo.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询订单的图库下载记录
 * Summary: 数字商品服务-IP授权服务-查询图库记录
 */
func (client *Client) PagequeryIpGalleryinstruction(request *PagequeryIpGalleryinstructionRequest) (_result *PagequeryIpGalleryinstructionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryIpGalleryinstructionResponse{}
	_body, _err := client.PagequeryIpGalleryinstructionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询订单的图库下载记录
 * Summary: 数字商品服务-IP授权服务-查询图库记录
 */
func (client *Client) PagequeryIpGalleryinstructionEx(request *PagequeryIpGalleryinstructionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryIpGalleryinstructionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryIpGalleryinstructionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.galleryinstruction.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 版权方确认订单图库信息
 * Summary: 数字商品服务-IP授权服务-订单图库确认
 */
func (client *Client) ConfirmIpOrdergallery(request *ConfirmIpOrdergalleryRequest) (_result *ConfirmIpOrdergalleryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmIpOrdergalleryResponse{}
	_body, _err := client.ConfirmIpOrdergalleryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 版权方确认订单图库信息
 * Summary: 数字商品服务-IP授权服务-订单图库确认
 */
func (client *Client) ConfirmIpOrdergalleryEx(request *ConfirmIpOrdergalleryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmIpOrdergalleryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmIpOrdergalleryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.ordergallery.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 审批IP定向授权交易。如果订单状态是“合作待确认”，则审批后状态为“合作拒绝”或者“合作通过”。如果订单状态是”订单待审核“，则审批后状态为“审核失败”或者“申请中”。
 * Summary: 数字商品服务-IP授权服务-审批定向授权
 */
func (client *Client) ConfirmIpAuthtrade(request *ConfirmIpAuthtradeRequest) (_result *ConfirmIpAuthtradeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmIpAuthtradeResponse{}
	_body, _err := client.ConfirmIpAuthtradeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 审批IP定向授权交易。如果订单状态是“合作待确认”，则审批后状态为“合作拒绝”或者“合作通过”。如果订单状态是”订单待审核“，则审批后状态为“审核失败”或者“申请中”。
 * Summary: 数字商品服务-IP授权服务-审批定向授权
 */
func (client *Client) ConfirmIpAuthtradeEx(request *ConfirmIpAuthtradeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmIpAuthtradeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmIpAuthtradeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.authtrade.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 审核套餐授权申请
 * Summary: 数字商品服务-IP授权服务-审批套餐授权
 */
func (client *Client) ConfirmIpPackagetrade(request *ConfirmIpPackagetradeRequest) (_result *ConfirmIpPackagetradeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmIpPackagetradeResponse{}
	_body, _err := client.ConfirmIpPackagetradeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 审核套餐授权申请
 * Summary: 数字商品服务-IP授权服务-审批套餐授权
 */
func (client *Client) ConfirmIpPackagetradeEx(request *ConfirmIpPackagetradeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmIpPackagetradeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmIpPackagetradeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.packagetrade.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商家申请套餐交易
 * Summary: 数字商品服务-IP授权服务-申请套餐交易
 */
func (client *Client) ApplyIpPackagetrade(request *ApplyIpPackagetradeRequest) (_result *ApplyIpPackagetradeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyIpPackagetradeResponse{}
	_body, _err := client.ApplyIpPackagetradeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商家申请套餐交易
 * Summary: 数字商品服务-IP授权服务-申请套餐交易
 */
func (client *Client) ApplyIpPackagetradeEx(request *ApplyIpPackagetradeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyIpPackagetradeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyIpPackagetradeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.packagetrade.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 版权方申请授权交易
 * Summary: 数字商品服务-IP授权服务-申请授权交易
 */
func (client *Client) ApplyIpAuthtrade(request *ApplyIpAuthtradeRequest) (_result *ApplyIpAuthtradeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyIpAuthtradeResponse{}
	_body, _err := client.ApplyIpAuthtradeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 版权方申请授权交易
 * Summary: 数字商品服务-IP授权服务-申请授权交易
 */
func (client *Client) ApplyIpAuthtradeEx(request *ApplyIpAuthtradeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyIpAuthtradeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyIpAuthtradeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.authtrade.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询数字凭证的配置信息
 * Summary: 数字商品服务-IP服务-UNI码配置查询
 */
func (client *Client) QueryIpCodeinfo(request *QueryIpCodeinfoRequest) (_result *QueryIpCodeinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpCodeinfoResponse{}
	_body, _err := client.QueryIpCodeinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询数字凭证的配置信息
 * Summary: 数字商品服务-IP服务-UNI码配置查询
 */
func (client *Client) QueryIpCodeinfoEx(request *QueryIpCodeinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpCodeinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpCodeinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.codeinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ip审批信息批量查询（带上更新信息，供天猫测使用）
 * Summary: ip审批信息批量查询（带上更新信息）
 */
func (client *Client) BatchqueryIpApprovalwithupdate(request *BatchqueryIpApprovalwithupdateRequest) (_result *BatchqueryIpApprovalwithupdateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryIpApprovalwithupdateResponse{}
	_body, _err := client.BatchqueryIpApprovalwithupdateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ip审批信息批量查询（带上更新信息，供天猫测使用）
 * Summary: ip审批信息批量查询（带上更新信息）
 */
func (client *Client) BatchqueryIpApprovalwithupdateEx(request *BatchqueryIpApprovalwithupdateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryIpApprovalwithupdateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryIpApprovalwithupdateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.approvalwithupdate.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品-IP授权交易服务-商家账户信息补充，版权方联系人修改，仅支持版权方联系人修改
 * Summary: 数字商品服务-IP授权服务-账户信息补充
 */
func (client *Client) UpdateIpAccount(request *UpdateIpAccountRequest) (_result *UpdateIpAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateIpAccountResponse{}
	_body, _err := client.UpdateIpAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品-IP授权交易服务-商家账户信息补充，版权方联系人修改，仅支持版权方联系人修改
 * Summary: 数字商品服务-IP授权服务-账户信息补充
 */
func (client *Client) UpdateIpAccountEx(request *UpdateIpAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateIpAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateIpAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.account.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP-查询账户已经入驻的渠道列表
 * Summary: 数字商品服务-IP-查询账户渠道列表
 */
func (client *Client) QueryIpAccountsettlement(request *QueryIpAccountsettlementRequest) (_result *QueryIpAccountsettlementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpAccountsettlementResponse{}
	_body, _err := client.QueryIpAccountsettlementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP-查询账户已经入驻的渠道列表
 * Summary: 数字商品服务-IP-查询账户渠道列表
 */
func (client *Client) QueryIpAccountsettlementEx(request *QueryIpAccountsettlementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpAccountsettlementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpAccountsettlementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.accountsettlement.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品-IP授权服务-版权方用户申请开通新渠道
 * Summary: 数字商品-IP授权服务-申请开通新渠道
 */
func (client *Client) AddIpAccountsettlement(request *AddIpAccountsettlementRequest) (_result *AddIpAccountsettlementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddIpAccountsettlementResponse{}
	_body, _err := client.AddIpAccountsettlementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品-IP授权服务-版权方用户申请开通新渠道
 * Summary: 数字商品-IP授权服务-申请开通新渠道
 */
func (client *Client) AddIpAccountsettlementEx(request *AddIpAccountsettlementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddIpAccountsettlementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddIpAccountsettlementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.accountsettlement.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 签署交易订单的区块链合同
 * Summary: 数字商品服务-IP授权服务-签署订单合同
 */
func (client *Client) SignIpOrdercontract(request *SignIpOrdercontractRequest) (_result *SignIpOrdercontractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SignIpOrdercontractResponse{}
	_body, _err := client.SignIpOrdercontractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 签署交易订单的区块链合同
 * Summary: 数字商品服务-IP授权服务-签署订单合同
 */
func (client *Client) SignIpOrdercontractEx(request *SignIpOrdercontractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SignIpOrdercontractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SignIpOrdercontractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.ordercontract.sign"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 授权订单绑定商品ID，后续上传的销售数据需满足已绑定的商品ID
 * Summary: 数字商品服务-IP授权服务-绑定商品ID
 */
func (client *Client) SetIpOrdergoodsids(request *SetIpOrdergoodsidsRequest) (_result *SetIpOrdergoodsidsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetIpOrdergoodsidsResponse{}
	_body, _err := client.SetIpOrdergoodsidsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 授权订单绑定商品ID，后续上传的销售数据需满足已绑定的商品ID
 * Summary: 数字商品服务-IP授权服务-绑定商品ID
 */
func (client *Client) SetIpOrdergoodsidsEx(request *SetIpOrdergoodsidsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetIpOrdergoodsidsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetIpOrdergoodsidsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.ordergoodsids.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分页查询商户和订单的T+1日销售数据汇总数据
 * Summary: 数字商品服务-IP授权服务-查日销售数据
 */
func (client *Client) PagequeryIpSalesbyday(request *PagequeryIpSalesbydayRequest) (_result *PagequeryIpSalesbydayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryIpSalesbydayResponse{}
	_body, _err := client.PagequeryIpSalesbydayEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分页查询商户和订单的T+1日销售数据汇总数据
 * Summary: 数字商品服务-IP授权服务-查日销售数据
 */
func (client *Client) PagequeryIpSalesbydayEx(request *PagequeryIpSalesbydayRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryIpSalesbydayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryIpSalesbydayResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.salesbyday.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 联动雀凿，为文件生成区块链证书，实现文件的版权保护
 * Summary: 数字商品服务-IP授权服务-文件版权保护
 */
func (client *Client) CreateIpCopyright(request *CreateIpCopyrightRequest) (_result *CreateIpCopyrightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateIpCopyrightResponse{}
	_body, _err := client.CreateIpCopyrightEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 联动雀凿，为文件生成区块链证书，实现文件的版权保护
 * Summary: 数字商品服务-IP授权服务-文件版权保护
 */
func (client *Client) CreateIpCopyrightEx(request *CreateIpCopyrightRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateIpCopyrightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateIpCopyrightResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.copyright.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品-IP授权服务-文件版权状态查询
 * Summary: 数字商品-IP授权服务-文件版权状态查询
 */
func (client *Client) QueryIpCopyright(request *QueryIpCopyrightRequest) (_result *QueryIpCopyrightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpCopyrightResponse{}
	_body, _err := client.QueryIpCopyrightEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品-IP授权服务-文件版权状态查询
 * Summary: 数字商品-IP授权服务-文件版权状态查询
 */
func (client *Client) QueryIpCopyrightEx(request *QueryIpCopyrightRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpCopyrightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpCopyrightResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.copyright.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 编辑订单备注
 * Summary: 数字商品服务-IP授权服务-编辑订单备注
 */
func (client *Client) SetIpOrdermemo(request *SetIpOrdermemoRequest) (_result *SetIpOrdermemoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetIpOrdermemoResponse{}
	_body, _err := client.SetIpOrdermemoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 编辑订单备注
 * Summary: 数字商品服务-IP授权服务-编辑订单备注
 */
func (client *Client) SetIpOrdermemoEx(request *SetIpOrdermemoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetIpOrdermemoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetIpOrdermemoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.ordermemo.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP-确认开通版权方渠道
 * Summary: 数字商品服务-IP-开通版权方渠道
 */
func (client *Client) ConfirmIpAccountsettlement(request *ConfirmIpAccountsettlementRequest) (_result *ConfirmIpAccountsettlementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmIpAccountsettlementResponse{}
	_body, _err := client.ConfirmIpAccountsettlementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP-确认开通版权方渠道
 * Summary: 数字商品服务-IP-开通版权方渠道
 */
func (client *Client) ConfirmIpAccountsettlementEx(request *ConfirmIpAccountsettlementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmIpAccountsettlementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmIpAccountsettlementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.accountsettlement.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分页查询订单的销售数据详情列表
 * Summary: 数字商品服务-IP授权服务-查询销售数据
 */
func (client *Client) PagequeryIpSales(request *PagequeryIpSalesRequest) (_result *PagequeryIpSalesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryIpSalesResponse{}
	_body, _err := client.PagequeryIpSalesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分页查询订单的销售数据详情列表
 * Summary: 数字商品服务-IP授权服务-查询销售数据
 */
func (client *Client) PagequeryIpSalesEx(request *PagequeryIpSalesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryIpSalesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryIpSalesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.sales.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品-IP授权服务-查询申请入驻该渠道的所有版权方列表
 * Summary: 数字商品-IP授权服务-查询版权方列表
 */
func (client *Client) BatchqueryIpAccountsettlement(request *BatchqueryIpAccountsettlementRequest) (_result *BatchqueryIpAccountsettlementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryIpAccountsettlementResponse{}
	_body, _err := client.BatchqueryIpAccountsettlementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品-IP授权服务-查询申请入驻该渠道的所有版权方列表
 * Summary: 数字商品-IP授权服务-查询版权方列表
 */
func (client *Client) BatchqueryIpAccountsettlementEx(request *BatchqueryIpAccountsettlementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryIpAccountsettlementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryIpAccountsettlementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.accountsettlement.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-可跳转小程序的数字凭证分页查询: 小程序可扫描的数字凭证分页查询。
 * Summary: 数字商品服务-IP服务-UNI码查询
 */
func (client *Client) PullIpCode(request *PullIpCodeRequest) (_result *PullIpCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PullIpCodeResponse{}
	_body, _err := client.PullIpCodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-可跳转小程序的数字凭证分页查询: 小程序可扫描的数字凭证分页查询。
 * Summary: 数字商品服务-IP服务-UNI码查询
 */
func (client *Client) PullIpCodeEx(request *PullIpCodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PullIpCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PullIpCodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.code.pull"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP-猜你喜欢的商品
 * Summary: 数字商品服务-IP-查询用户感兴趣的商品
 */
func (client *Client) BatchqueryIpGoodsinterest(request *BatchqueryIpGoodsinterestRequest) (_result *BatchqueryIpGoodsinterestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryIpGoodsinterestResponse{}
	_body, _err := client.BatchqueryIpGoodsinterestEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP-猜你喜欢的商品
 * Summary: 数字商品服务-IP-查询用户感兴趣的商品
 */
func (client *Client) BatchqueryIpGoodsinterestEx(request *BatchqueryIpGoodsinterestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryIpGoodsinterestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryIpGoodsinterestResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.goodsinterest.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询区块链合同账号信息
 * Summary: 数字商品服务-IP授权服务-合同账户查询
 */
func (client *Client) QueryIpTwcaccount(request *QueryIpTwcaccountRequest) (_result *QueryIpTwcaccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpTwcaccountResponse{}
	_body, _err := client.QueryIpTwcaccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询区块链合同账号信息
 * Summary: 数字商品服务-IP授权服务-合同账户查询
 */
func (client *Client) QueryIpTwcaccountEx(request *QueryIpTwcaccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpTwcaccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpTwcaccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.twcaccount.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-授权URI: 获取授权URI, 用于淘宝店铺授权数据给IPforce
 * Summary: 数字商品服务-IP授权服务-授权URI
 */
func (client *Client) BindIpShop(request *BindIpShopRequest) (_result *BindIpShopResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BindIpShopResponse{}
	_body, _err := client.BindIpShopEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-授权URI: 获取授权URI, 用于淘宝店铺授权数据给IPforce
 * Summary: 数字商品服务-IP授权服务-授权URI
 */
func (client *Client) BindIpShopEx(request *BindIpShopRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BindIpShopResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BindIpShopResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.shop.bind"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-店铺授权结果: 店铺登陆淘宝授权后的授权结果回调
 * Summary: 数字商品服务-IP授权服务-店铺授权结果
 */
func (client *Client) AuthIpShop(request *AuthIpShopRequest) (_result *AuthIpShopResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AuthIpShopResponse{}
	_body, _err := client.AuthIpShopEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-店铺授权结果: 店铺登陆淘宝授权后的授权结果回调
 * Summary: 数字商品服务-IP授权服务-店铺授权结果
 */
func (client *Client) AuthIpShopEx(request *AuthIpShopRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AuthIpShopResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthIpShopResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.shop.auth"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-商户授权列表: 商户获取其店铺授权历史列表
 * Summary: 数字商品服务-IP授权服务-商户授权列表
 */
func (client *Client) ListIpShop(request *ListIpShopRequest) (_result *ListIpShopResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListIpShopResponse{}
	_body, _err := client.ListIpShopEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-商户授权列表: 商户获取其店铺授权历史列表
 * Summary: 数字商品服务-IP授权服务-商户授权列表
 */
func (client *Client) ListIpShopEx(request *ListIpShopRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListIpShopResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListIpShopResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.shop.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询数字凭证收藏证书详情，主要包括该数字凭证对应的ip商品，流转信息，区块信息等
 * Summary: 数字商品服务-IP服务-查UNI收藏证书
 */
func (client *Client) QueryIpCodecollect(request *QueryIpCodecollectRequest) (_result *QueryIpCodecollectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpCodecollectResponse{}
	_body, _err := client.QueryIpCodecollectEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询数字凭证收藏证书详情，主要包括该数字凭证对应的ip商品，流转信息，区块信息等
 * Summary: 数字商品服务-IP服务-查UNI收藏证书
 */
func (client *Client) QueryIpCodecollectEx(request *QueryIpCodecollectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpCodecollectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpCodecollectResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.codecollect.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-商品查询: 查询单个商品信息(淘宝开放平台数据)
 * Summary: 数字商品服务-IP授权服务-商品查询
 */
func (client *Client) GetIpShop(request *GetIpShopRequest) (_result *GetIpShopResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetIpShopResponse{}
	_body, _err := client.GetIpShopEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP授权服务-商品查询: 查询单个商品信息(淘宝开放平台数据)
 * Summary: 数字商品服务-IP授权服务-商品查询
 */
func (client *Client) GetIpShopEx(request *GetIpShopRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetIpShopResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetIpShopResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.shop.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 授权订单绑定商品ID，后续上传的销售数据需满足已绑定的商品ID
 * Summary: 数字商品服务-IP授权服务-绑定商品ID
 */
func (client *Client) SetIpOrdergoodsid(request *SetIpOrdergoodsidRequest) (_result *SetIpOrdergoodsidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetIpOrdergoodsidResponse{}
	_body, _err := client.SetIpOrdergoodsidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 授权订单绑定商品ID，后续上传的销售数据需满足已绑定的商品ID
 * Summary: 数字商品服务-IP授权服务-绑定商品ID
 */
func (client *Client) SetIpOrdergoodsidEx(request *SetIpOrdergoodsidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetIpOrdergoodsidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetIpOrdergoodsidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.ordergoodsid.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商家校正授权订单的销售数据
 * Summary: 数字商品服务-IP授权服务-校正销售数据
 */
func (client *Client) SetIpSalescorrection(request *SetIpSalescorrectionRequest) (_result *SetIpSalescorrectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetIpSalescorrectionResponse{}
	_body, _err := client.SetIpSalescorrectionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商家校正授权订单的销售数据
 * Summary: 数字商品服务-IP授权服务-校正销售数据
 */
func (client *Client) SetIpSalescorrectionEx(request *SetIpSalescorrectionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetIpSalescorrectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetIpSalescorrectionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.salescorrection.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商户确认销售数据。版权方确认或者拒绝销售数据
 * Summary: 数字商品服务-IP授权服务-确认销售数据
 */
func (client *Client) ConfirmIpSalessummary(request *ConfirmIpSalessummaryRequest) (_result *ConfirmIpSalessummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmIpSalessummaryResponse{}
	_body, _err := client.ConfirmIpSalessummaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商户确认销售数据。版权方确认或者拒绝销售数据
 * Summary: 数字商品服务-IP授权服务-确认销售数据
 */
func (client *Client) ConfirmIpSalessummaryEx(request *ConfirmIpSalessummaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmIpSalessummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmIpSalessummaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.salessummary.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 上传授权订单的逐条销售数据
 * Summary: 数字商品服务-IP授权服务-销售数据上传
 */
func (client *Client) UploadIpSaleseverylist(request *UploadIpSaleseverylistRequest) (_result *UploadIpSaleseverylistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadIpSaleseverylistResponse{}
	_body, _err := client.UploadIpSaleseverylistEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 上传授权订单的逐条销售数据
 * Summary: 数字商品服务-IP授权服务-销售数据上传
 */
func (client *Client) UploadIpSaleseverylistEx(request *UploadIpSaleseverylistRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadIpSaleseverylistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadIpSaleseverylistResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.saleseverylist.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询订单或者账单的销售数据汇总信息列表
 * Summary: 数字商品服务-IP授权服务-查询销售数据
 */
func (client *Client) PagequeryIpSalessummary(request *PagequeryIpSalessummaryRequest) (_result *PagequeryIpSalessummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryIpSalessummaryResponse{}
	_body, _err := client.PagequeryIpSalessummaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询订单或者账单的销售数据汇总信息列表
 * Summary: 数字商品服务-IP授权服务-查询销售数据
 */
func (client *Client) PagequeryIpSalessummaryEx(request *PagequeryIpSalessummaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryIpSalessummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryIpSalessummaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.salessummary.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 账单超时关闭的情况下，重新生成支付链接，变为待支付状态
 * Summary: 数字商品服务-IP授权服务-刷新账单状态
 */
func (client *Client) ReopenIpBill(request *ReopenIpBillRequest) (_result *ReopenIpBillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReopenIpBillResponse{}
	_body, _err := client.ReopenIpBillEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 账单超时关闭的情况下，重新生成支付链接，变为待支付状态
 * Summary: 数字商品服务-IP授权服务-刷新账单状态
 */
func (client *Client) ReopenIpBillEx(request *ReopenIpBillRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReopenIpBillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReopenIpBillResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.bill.reopen"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 下单问询，商家申请合作授权
 * Summary: 数字商品服务-IP授权服务-授权交易问询
 */
func (client *Client) InitIpAuthtrade(request *InitIpAuthtradeRequest) (_result *InitIpAuthtradeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitIpAuthtradeResponse{}
	_body, _err := client.InitIpAuthtradeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 下单问询，商家申请合作授权
 * Summary: 数字商品服务-IP授权服务-授权交易问询
 */
func (client *Client) InitIpAuthtradeEx(request *InitIpAuthtradeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitIpAuthtradeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitIpAuthtradeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.authtrade.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询订单历史信息
 * Summary: 数字商品服务-IP授权服务-查询订单历史
 */
func (client *Client) QueryIpOrderhistory(request *QueryIpOrderhistoryRequest) (_result *QueryIpOrderhistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIpOrderhistoryResponse{}
	_body, _err := client.QueryIpOrderhistoryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询订单历史信息
 * Summary: 数字商品服务-IP授权服务-查询订单历史
 */
func (client *Client) QueryIpOrderhistoryEx(request *QueryIpOrderhistoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIpOrderhistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIpOrderhistoryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.orderhistory.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 版权方确认线下回款，生成版权方需要支付的手续费账单和支付链接
 * Summary: 数字商品服务-IP授权服务-确认线下回款
 */
func (client *Client) ConfirmIpBillpay(request *ConfirmIpBillpayRequest) (_result *ConfirmIpBillpayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmIpBillpayResponse{}
	_body, _err := client.ConfirmIpBillpayEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 版权方确认线下回款，生成版权方需要支付的手续费账单和支付链接
 * Summary: 数字商品服务-IP授权服务-确认线下回款
 */
func (client *Client) ConfirmIpBillpayEx(request *ConfirmIpBillpayRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmIpBillpayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmIpBillpayResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.billpay.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字商品服务-IP服务-UNI码失效: 将UNI码失效,不可逆。
 * Summary: 数字商品服务-IP服务-UNI码失效
 */
func (client *Client) DisableIpCode(request *DisableIpCodeRequest) (_result *DisableIpCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DisableIpCodeResponse{}
	_body, _err := client.DisableIpCodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字商品服务-IP服务-UNI码失效: 将UNI码失效,不可逆。
 * Summary: 数字商品服务-IP服务-UNI码失效
 */
func (client *Client) DisableIpCodeEx(request *DisableIpCodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DisableIpCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DisableIpCodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.code.disable"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 上传数字凭证的流转信息
 * Summary: 数字商品服务-IP服务-上传UNI流转
 */
func (client *Client) UploadIpCodecirculation(request *UploadIpCodecirculationRequest) (_result *UploadIpCodecirculationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadIpCodecirculationResponse{}
	_body, _err := client.UploadIpCodecirculationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 上传数字凭证的流转信息
 * Summary: 数字商品服务-IP服务-上传UNI流转
 */
func (client *Client) UploadIpCodecirculationEx(request *UploadIpCodecirculationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadIpCodecirculationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadIpCodecirculationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.codecirculation.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分页查询数字凭证的流转信息
 * Summary: 数字商品服务-IP服务-查询UNI流转
 */
func (client *Client) PagequeryIpCodecirculation(request *PagequeryIpCodecirculationRequest) (_result *PagequeryIpCodecirculationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryIpCodecirculationResponse{}
	_body, _err := client.PagequeryIpCodecirculationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分页查询数字凭证的流转信息
 * Summary: 数字商品服务-IP服务-查询UNI流转
 */
func (client *Client) PagequeryIpCodecirculationEx(request *PagequeryIpCodecirculationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryIpCodecirculationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryIpCodecirculationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.codecirculation.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 签署区块链合同, 平台入驻协议、单方协议、三方和大于三方的协议均可签署。
 * Summary: 数字商品服务-IP授权服务-签署合同
 */
func (client *Client) SignIpContract(request *SignIpContractRequest) (_result *SignIpContractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SignIpContractResponse{}
	_body, _err := client.SignIpContractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 签署区块链合同, 平台入驻协议、单方协议、三方和大于三方的协议均可签署。
 * Summary: 数字商品服务-IP授权服务-签署合同
 */
func (client *Client) SignIpContractEx(request *SignIpContractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SignIpContractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SignIpContractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.ip.contract.sign"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取特定高度的区块信息
 * Summary: 数字商品服务-拉块服务-获取区块信息
 */
func (client *Client) QueryBlockanalysisBlock(request *QueryBlockanalysisBlockRequest) (_result *QueryBlockanalysisBlockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBlockanalysisBlockResponse{}
	_body, _err := client.QueryBlockanalysisBlockEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取特定高度的区块信息
 * Summary: 数字商品服务-拉块服务-获取区块信息
 */
func (client *Client) QueryBlockanalysisBlockEx(request *QueryBlockanalysisBlockRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBlockanalysisBlockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBlockanalysisBlockResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.blockanalysis.block.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取最新区块高度
 * Summary: 数字商品服务-拉块服务-获取最新区块高度
 */
func (client *Client) QueryBlockanalysisLastblocknumber(request *QueryBlockanalysisLastblocknumberRequest) (_result *QueryBlockanalysisLastblocknumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBlockanalysisLastblocknumberResponse{}
	_body, _err := client.QueryBlockanalysisLastblocknumberEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取最新区块高度
 * Summary: 数字商品服务-拉块服务-获取最新区块高度
 */
func (client *Client) QueryBlockanalysisLastblocknumberEx(request *QueryBlockanalysisLastblocknumberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBlockanalysisLastblocknumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBlockanalysisLastblocknumberResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.blockanalysis.lastblocknumber.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取公开的或者已授权的权益商品信息
 * Summary: 数字商品服务-拉块服务-获取已授权商品
 */
func (client *Client) QueryBlockanalysisOpenedequities(request *QueryBlockanalysisOpenedequitiesRequest) (_result *QueryBlockanalysisOpenedequitiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBlockanalysisOpenedequitiesResponse{}
	_body, _err := client.QueryBlockanalysisOpenedequitiesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取公开的或者已授权的权益商品信息
 * Summary: 数字商品服务-拉块服务-获取已授权商品
 */
func (client *Client) QueryBlockanalysisOpenedequitiesEx(request *QueryBlockanalysisOpenedequitiesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBlockanalysisOpenedequitiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBlockanalysisOpenedequitiesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.blockanalysis.openedequities.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询已设置过用户价格的有效权益商品信息
 * Summary: 数字商品服务-拉块服务-已设用户价格商品
 */
func (client *Client) QueryBlockanalysisUserpriceupdatedequities(request *QueryBlockanalysisUserpriceupdatedequitiesRequest) (_result *QueryBlockanalysisUserpriceupdatedequitiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBlockanalysisUserpriceupdatedequitiesResponse{}
	_body, _err := client.QueryBlockanalysisUserpriceupdatedequitiesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询已设置过用户价格的有效权益商品信息
 * Summary: 数字商品服务-拉块服务-已设用户价格商品
 */
func (client *Client) QueryBlockanalysisUserpriceupdatedequitiesEx(request *QueryBlockanalysisUserpriceupdatedequitiesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBlockanalysisUserpriceupdatedequitiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBlockanalysisUserpriceupdatedequitiesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.blockanalysis.userpriceupdatedequities.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询商户的可提现资产价值(单位:分)
 * Summary: 数字商品服务-拉块服务-查询可提现资产
 */
func (client *Client) QueryBlockanalysisUnwriteoffvalue(request *QueryBlockanalysisUnwriteoffvalueRequest) (_result *QueryBlockanalysisUnwriteoffvalueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBlockanalysisUnwriteoffvalueResponse{}
	_body, _err := client.QueryBlockanalysisUnwriteoffvalueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询商户的可提现资产价值(单位:分)
 * Summary: 数字商品服务-拉块服务-查询可提现资产
 */
func (client *Client) QueryBlockanalysisUnwriteoffvalueEx(request *QueryBlockanalysisUnwriteoffvalueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBlockanalysisUnwriteoffvalueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBlockanalysisUnwriteoffvalueResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.blockanalysis.unwriteoffvalue.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 设置租户的授权代理权限。赋予 opt_tenant_id 代理 delegated_tenant_id 调用接口的权限，见可代理的接口详情单。
 * Summary: 数字商品服务-拉块服务-设置代理权限
 */
func (client *Client) UpdateBlockanalysisDelegaterelation(request *UpdateBlockanalysisDelegaterelationRequest) (_result *UpdateBlockanalysisDelegaterelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateBlockanalysisDelegaterelationResponse{}
	_body, _err := client.UpdateBlockanalysisDelegaterelationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 设置租户的授权代理权限。赋予 opt_tenant_id 代理 delegated_tenant_id 调用接口的权限，见可代理的接口详情单。
 * Summary: 数字商品服务-拉块服务-设置代理权限
 */
func (client *Client) UpdateBlockanalysisDelegaterelationEx(request *UpdateBlockanalysisDelegaterelationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateBlockanalysisDelegaterelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateBlockanalysisDelegaterelationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.blockanalysis.delegaterelation.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 设置接口访问白名单。
 * Summary: 数字商品服务-拉块服务-设置访问白名单
 */
func (client *Client) UpdateBlockanalysisWhitelist(request *UpdateBlockanalysisWhitelistRequest) (_result *UpdateBlockanalysisWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateBlockanalysisWhitelistResponse{}
	_body, _err := client.UpdateBlockanalysisWhitelistEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 设置接口访问白名单。
 * Summary: 数字商品服务-拉块服务-设置访问白名单
 */
func (client *Client) UpdateBlockanalysisWhitelistEx(request *UpdateBlockanalysisWhitelistRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateBlockanalysisWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateBlockanalysisWhitelistResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.blockanalysis.whitelist.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询租户的授权代理权限
 * Summary: 数字商品服务-拉块服务-代理权限查询
 */
func (client *Client) QueryBlockanalysisDelegaterelation(request *QueryBlockanalysisDelegaterelationRequest) (_result *QueryBlockanalysisDelegaterelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBlockanalysisDelegaterelationResponse{}
	_body, _err := client.QueryBlockanalysisDelegaterelationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询租户的授权代理权限
 * Summary: 数字商品服务-拉块服务-代理权限查询
 */
func (client *Client) QueryBlockanalysisDelegaterelationEx(request *QueryBlockanalysisDelegaterelationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBlockanalysisDelegaterelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBlockanalysisDelegaterelationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.blockanalysis.delegaterelation.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询接口访问白名单信息
 * Summary: 数字商品服务-拉块服务-查询接口白名单
 */
func (client *Client) QueryBlockanalysisWhitelist(request *QueryBlockanalysisWhitelistRequest) (_result *QueryBlockanalysisWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBlockanalysisWhitelistResponse{}
	_body, _err := client.QueryBlockanalysisWhitelistEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询接口访问白名单信息
 * Summary: 数字商品服务-拉块服务-查询接口白名单
 */
func (client *Client) QueryBlockanalysisWhitelistEx(request *QueryBlockanalysisWhitelistRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBlockanalysisWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBlockanalysisWhitelistResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.blockanalysis.whitelist.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据交易hash获取交易信息
 * Summary: 数字商品服务-拉块服务-获取交易信息
 */
func (client *Client) QueryBlockanalysisTransaction(request *QueryBlockanalysisTransactionRequest) (_result *QueryBlockanalysisTransactionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBlockanalysisTransactionResponse{}
	_body, _err := client.QueryBlockanalysisTransactionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据交易hash获取交易信息
 * Summary: 数字商品服务-拉块服务-获取交易信息
 */
func (client *Client) QueryBlockanalysisTransactionEx(request *QueryBlockanalysisTransactionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBlockanalysisTransactionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBlockanalysisTransactionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.blockanalysis.transaction.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取商品的授权信息列表(一客一价信息)
 * Summary: 数字商品服务-拉块服务-获取商品授权信息
 */
func (client *Client) QueryBlockanalysisEquityauthlist(request *QueryBlockanalysisEquityauthlistRequest) (_result *QueryBlockanalysisEquityauthlistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBlockanalysisEquityauthlistResponse{}
	_body, _err := client.QueryBlockanalysisEquityauthlistEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取商品的授权信息列表(一客一价信息)
 * Summary: 数字商品服务-拉块服务-获取商品授权信息
 */
func (client *Client) QueryBlockanalysisEquityauthlistEx(request *QueryBlockanalysisEquityauthlistRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBlockanalysisEquityauthlistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBlockanalysisEquityauthlistResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.blockanalysis.equityauthlist.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取下一个与用户有关联交易的区块。需要传入超时时间，如果已到超时时间，则返回当前过滤的最高区块信息。
 * Summary: 数字商品服务-拉块服务-获取下个相关区块
 */
func (client *Client) QueryBlockanalysisNextblock(request *QueryBlockanalysisNextblockRequest) (_result *QueryBlockanalysisNextblockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBlockanalysisNextblockResponse{}
	_body, _err := client.QueryBlockanalysisNextblockEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取下一个与用户有关联交易的区块。需要传入超时时间，如果已到超时时间，则返回当前过滤的最高区块信息。
 * Summary: 数字商品服务-拉块服务-获取下个相关区块
 */
func (client *Client) QueryBlockanalysisNextblockEx(request *QueryBlockanalysisNextblockRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBlockanalysisNextblockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBlockanalysisNextblockResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.blockanalysis.nextblock.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 可订购的SKU列表查询
 * Summary: 数字商品服务-商品服务-商品列表查询
 */
func (client *Client) QueryMypointsSku(request *QueryMypointsSkuRequest) (_result *QueryMypointsSkuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMypointsSkuResponse{}
	_body, _err := client.QueryMypointsSkuEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 可订购的SKU列表查询
 * Summary: 数字商品服务-商品服务-商品列表查询
 */
func (client *Client) QueryMypointsSkuEx(request *QueryMypointsSkuRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMypointsSkuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMypointsSkuResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.mypoints.sku.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询商户的积分库和预算库
 * Summary: 数字商品服务-商品服务-积分预算库查询
 */
func (client *Client) QueryMypointsMerchantbalance(request *QueryMypointsMerchantbalanceRequest) (_result *QueryMypointsMerchantbalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMypointsMerchantbalanceResponse{}
	_body, _err := client.QueryMypointsMerchantbalanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询商户的积分库和预算库
 * Summary: 数字商品服务-商品服务-积分预算库查询
 */
func (client *Client) QueryMypointsMerchantbalanceEx(request *QueryMypointsMerchantbalanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMypointsMerchantbalanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMypointsMerchantbalanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.mypoints.merchantbalance.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 预下单商品
 * Summary: 数字商品服务-商品服务-商品预下单
 */
func (client *Client) ExecMypointsPreordersku(request *ExecMypointsPreorderskuRequest) (_result *ExecMypointsPreorderskuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecMypointsPreorderskuResponse{}
	_body, _err := client.ExecMypointsPreorderskuEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 预下单商品
 * Summary: 数字商品服务-商品服务-商品预下单
 */
func (client *Client) ExecMypointsPreorderskuEx(request *ExecMypointsPreorderskuRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecMypointsPreorderskuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecMypointsPreorderskuResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.mypoints.preordersku.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商品下单
 * Summary: 数字商品服务-商品服务-商品下单
 */
func (client *Client) ExecMypointsOrdersku(request *ExecMypointsOrderskuRequest) (_result *ExecMypointsOrderskuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecMypointsOrderskuResponse{}
	_body, _err := client.ExecMypointsOrderskuEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商品下单
 * Summary: 数字商品服务-商品服务-商品下单
 */
func (client *Client) ExecMypointsOrderskuEx(request *ExecMypointsOrderskuRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecMypointsOrderskuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecMypointsOrderskuResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.mypoints.ordersku.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据商品ID，查询批量购买的费率
 * Summary: 数字商品服务-商品服务-商品费率查询
 */
func (client *Client) QueryMypointsSkufee(request *QueryMypointsSkufeeRequest) (_result *QueryMypointsSkufeeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMypointsSkufeeResponse{}
	_body, _err := client.QueryMypointsSkufeeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据商品ID，查询批量购买的费率
 * Summary: 数字商品服务-商品服务-商品费率查询
 */
func (client *Client) QueryMypointsSkufeeEx(request *QueryMypointsSkufeeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMypointsSkufeeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMypointsSkufeeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.mypoints.skufee.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询集分宝SKU的预下单流水记录
 * Summary: 数字商品服务-商品服务-预下单流水查询
 */
func (client *Client) QueryMypointsPreorderinstruction(request *QueryMypointsPreorderinstructionRequest) (_result *QueryMypointsPreorderinstructionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMypointsPreorderinstructionResponse{}
	_body, _err := client.QueryMypointsPreorderinstructionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询集分宝SKU的预下单流水记录
 * Summary: 数字商品服务-商品服务-预下单流水查询
 */
func (client *Client) QueryMypointsPreorderinstructionEx(request *QueryMypointsPreorderinstructionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMypointsPreorderinstructionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMypointsPreorderinstructionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.mypoints.preorderinstruction.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询下单流水信息
 * Summary: 数字商品服务-商品服务-商品下单流水查询
 */
func (client *Client) QueryMypointsOrderinstruction(request *QueryMypointsOrderinstructionRequest) (_result *QueryMypointsOrderinstructionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMypointsOrderinstructionResponse{}
	_body, _err := client.QueryMypointsOrderinstructionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询下单流水信息
 * Summary: 数字商品服务-商品服务-商品下单流水查询
 */
func (client *Client) QueryMypointsOrderinstructionEx(request *QueryMypointsOrderinstructionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMypointsOrderinstructionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMypointsOrderinstructionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.antdao.mypoints.orderinstruction.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
func (client *Client) CreateAntcloudGatewayxFileUpload(request *CreateAntcloudGatewayxFileUploadRequest) (_result *CreateAntcloudGatewayxFileUploadResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAntcloudGatewayxFileUploadResponse{}
	_body, _err := client.CreateAntcloudGatewayxFileUploadEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
func (client *Client) CreateAntcloudGatewayxFileUploadEx(request *CreateAntcloudGatewayxFileUploadRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAntcloudGatewayxFileUploadResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAntcloudGatewayxFileUploadResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.gatewayx.file.upload.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}
