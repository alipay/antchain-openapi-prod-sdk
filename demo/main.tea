import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.1.52',
    _prod_code = 'DEMO',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'centre-openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// host
model Host {
  // test_2e1ae924805f
  systemName: string(name='system_name', example='test_2e1ae924805f'),
  // 地址
  address: string(name='address', example='test_941f18a4013b'),
}

// 身份
model Identity {
  // ak
  ak: string(name='ak', example='test_0efe42463f8f'),
}

// SCRealEstateQueryResponseData
model SCRealEstateQueryResponseData {
  // area_code
  areaCode: string(name='area_code', example='510108'),
  // area_name
  areaName: string(name='area_name', example='area_name'),
  // bdcdyh
  bdcdyh: string(name='bdcdyh', example='bdcdyh'),
  // bdcqzh
  bdcqzh: string(name='bdcqzh', example='bdcqzh'),
  // djsj
  djsj: string(name='djsj', example='djsj'),
  // fwyt1
  fwyt1: string(name='fwyt1', example='fwyt1'),
  // gyqk
  gyqk: string(name='gyqk', example='gyqk'),
  // qllx
  qllx: string(name='qllx', example='qllx'),
  // qlrmc
  qlrmc: string(name='qlrmc', example='qlrmc'),
  // scjzmj
  scjzmj: string(name='scjzmj', example='scjzmj'),
}

// 头文件
model Header {
  // 身份信息
  identity: Identity(name='identity', example='"identity": {       "ak": "test_0efe42463f8f"     }'),
  // 调用链编号
  traceId: string(name='trace_id', example='test_6db79b5d2e48'),
  // host信息
  host: Host(name='host', example='"host": {       "systemName": "test_2e1ae924805f",       "address": "test_941f18a4013b"     }'),
  // 方向
  direction: string(name='direction', example='REQUEST'),
  // 请求类型
  requestType: string(name='request_type', example='INVOKE'),
  // 协议版本
  protocolVersion: string(name='protocol_version', example='test_6709e9002606'),
}

// routeCondition
model RouteCondition {
  // 渠道编号
  channelId: string(name='channel_id', example='HZZKZTKJ'),
}

// testAtestB
model SCRealEstateQueryBody {
}

// Demo类1
model DemoClass {
  // 字符串测试
  someString: string(name='some_string', example='some string'),
  // 日期测试
  someDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='some_date', example='3'),
  // Boolean测试
  someBoolean: boolean(name='some_boolean', example='true'),
  // 整数测试
  someInt: long(maximum=2000, minimum=1, name='some_int', example='3'),
  // 列表测试
  someList: [ string ](name='some_list', example=''),
}

// SCRealEstateQueryRequestPayload
model SCRealEstateQueryRequestPayload {
  // xm
  xm: string(name='xm', example='张三'),
  // sfz
  sfz: string(name='sfz', example='51382219970820817X'),
}

// 键值对，兼容map用
model NameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

// 编码
model Cmd {
  // cmd编码
  cmdCode: string(name='cmd_code', example='SC-RealEstate-Query'),
  // 版本号
  version: string(name='version', example='test_d19bd9d59915'),
}

// SCRealEstateQueryResponsePayload
model SCRealEstateQueryResponsePayload {
  // code
  code: string(name='code', example='200'),
  // data
  data: [ SCRealEstateQueryResponseData ](name='data', example=''),
  // uuid
  uuid: string(name='uuid', example='uuid'),
  // ret_msg
  retMsg: string(name='ret_msg', example='ret_msg'),
}

// 键值对
model Map {
  // 键
  key: string(name='key', example='key1'),
  // 值
  value?: string(name='value', example='value1'),
}

// 大安全佐罗测试接口结构体
model FaceImage {
  // 123
  content?: string(name='content', example='123'),
  // 213
  rect?: string(name='rect', example='13'),
}

// SCRealEstateQuery
model SCRealEstateQueryInvokerRequest {
  // header
  header: Header(name='header', example='"header": {}'),
  // body
  body: SCRealEstateQueryBody(name='body', example='"body":{}'),
}

// 风险评估因子明细
model RiskFactorDetail {
  // 风险评估因子类型
  factorType?: string(name='factor_type', example='BLACKLIST'),
  // 分数
  score?: long(name='score', example='85'),
  // 风险事件
  evidence?: [ string ](name='evidence', example='["关联账户被冻结", "高频异常交易"]'),
}

// 用于上海非金迭代的测试使用
model ShangHaiTest {
  // string
  param1?: string(name='param_1', example='test'),
  // number
  param2?: long(name='param_2', example='1'),
}

// init接口响应结果，map类型
model InitPack {
  // 返回接收到请求的当前时间
  time: string(name='time', example='2022-11-07 14:48'),
  // 操作人
  operator: string(name='operator', example='wanyi'),
  // 请求编号
  count: long(name='count', example='1'),
}

// 交易明细信息
model TransactionDetails {
  // 金额
  amount?: long(name='amount', example='85000.00'),
  // 币种
  currency?: string(name='currency', example='CNY'),
  // 渠道
  channel?: string(name='channel', example='ATM'),
  // 地址
  location?: string(name='location', example='上海分行'),
  // 时间
  time?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='time', example='2018-10-10T10:10:00Z'),
}

// 数字类型
model NumberTest {
  // 1
  parameter1: long(maximum=5, minimum=1, name='parameter_1', example='1'),
  // 2
  parameter2: long(maximum=5, minimum=1, name='parameter_2', example='2'),
  // 3
  parameter3: long(maximum=5, minimum=1, name='parameter_3', example='3'),
  // 4
  parameter4: long(maximum=5, minimum=1, name='parameter_4', example='4'),
  // 5
  parameter5: DemoClass(name='parameter_5', example='5'),
}

// testAAAA
model TestClass {
  // 1
  test: string(name='test', example='testclass'),
  // 2
  demo: string(name='demo', example='testclass'),
  // 3
  demo1: string(name='demo1', example='id2'),
  // 22
  demo2: string(name='demo2', example='12'),
}

// TestStruct
model TestStruct {
  // x
  x: string(name='x', example='x'),
  // y
  y: DemoClass(name='y', example='y'),
  // z
  z: [ DemoClass ](name='z', example=''),
}

// 测试
model TestObject {
  // 主键
  id: long(name='id', example='12'),
  // 名称
  name: string(name='name', example='小蜜'),
}

// DemoTestx
model DemoTestx {
  // ability_id
  abilityId: string(name='ability_id', example='8000'),
}

// 另一个Demo类
model AnotherClass {
  // 测试字段
  bar: string(name='bar', example='some string'),
  // 引用字段
  ref: DemoClass(name='ref', example=''),
  // 列表引用Struct
  refList?: [ DemoClass ](name='refList', example=''),
}

// 自动生成单测代码model
model AutoCodeModel {
  // 111
  modelStringParam: string(name='model_string_param', example='111'),
  // 111
  modelDateParam: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='model_date_param', example='2018-10-10T10:10:00Z'),
  // 111
  modelArrayParam: [ string ](name='model_array_param', example='111'),
}

// SCRealEstateQueryRequestBody
model SCRealEstateQueryRequestBody {
  // cmd
  cmd: Cmd(name='cmd', example='"cmd": {       "cmdCode": "SC-RealEstate-Query",       "version": "test_d19bd9d59915"     }'),
  // 路由信息
  routeCondition: RouteCondition(name='route_condition', example='"routeCondition": {       "channelId": "HZZKZTKJ"     }'),
  // requestId
  requestId: string(name='request_id', example='test_8c964bb7781a'),
  // payload
  payload: SCRealEstateQueryRequestPayload(name='payload', example='{ "xm": "张三",   "sfz": "51382219970820817X"}'),
}

// 嵌套结构
model NestModel {
  // aaaa
  a: string(name='a', example='aaa'),
}

// 测试
model TestAPIObject {
  // test
  id: long(name='id', example='21'),
}

// ResponseBody
model SCRealEstateQueryResponseBody {
  // cost
  cost: long(name='cost', example='1234'),
  // response_status
  responseStatus: string(name='response_status', example='response_status'),
  // response_code
  responseCode: string(name='response_code', example='200'),
  // request_id
  requestId: string(name='request_id', example='request_id'),
  // payload
  payload: SCRealEstateQueryResponsePayload(name='payload', example=''),
}

// 用户基础信息
model UserProfile {
  // 用户ID
  userId?: string(name='user_id', example='1234567890'),
  // 用户身份证号
  idNumber?: string(name='id_number', example='110101199003072516'),
  // 手机号
  mobile?: string(name='mobile', example='13800138000'),
  // 年龄
  age?: long(name='age', example='32'),
  // 信用评分
  creditScore?: long(name='credit_score', example='720'),
}

// Map<String,Object> 集合
model QueryMap {
  // 键值
  name: string(name='name', example='BUSINESS_CODE'),
  // 额外用户信息
  value?: [ NameValuePair ](name='value', example=''),
}

// aaa
model A {
}

// 123
model TestA {
  // 1
  parameter1: string(name='parameter_1', example='1'),
  // 2
  parameter2: string(name='parameter_2', example='2'),
  // 3
  parameter3: string(name='parameter_3', example='3'),
  // 4
  parameter4: string(name='parameter_4', example='4'),
  // 5
  parameter5: string(name='parameter_5', example='5'),
  // 6
  parameter6: string(name='parameter_6', example='6'),
  // 7
  parameter7: string(name='parameter_7', example='7'),
  // 8
  parameter8: string(name='parameter_8', example='8'),
  // 9
  parameter9: string(name='parameter_9', example='9'),
  // 10
  parameter10: string(name='parameter_10', example='10'),
}

// 自动化测试创建（勿删）
model TestsT {
}

// groupA分组结构体
model GroupAClass {
  // -
  productInstanceId?: string(name='product_instance_id', example='-'),
  // 防伪码类型
  codeType: string(name='code_type', example='103001'),
  // 防伪码码值
  code: string(name='code', example='600011111'),
}

// 自动化测试创建（用于测试编辑功能，勿删）
model AbcdEfgh {
}

// 用于测试预发ob的同步_已编辑
model PreTestUse {
  // 1
  param1: string(name='param_1', example='1'),
  // 11
  param2: long(name='param_2', example='11'),
  // boolean
  param3: boolean(name='param_3', example='true, false'),
}

// 键值对
model XNameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

model StatusGatewayCheckRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model StatusGatewayCheckResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // OK
  status?: string(name='status'),
}

/**
 * Description: Demo接口，返回当前服务器当前状态1
 * Summary: 检查服务状态
 */
async function statusGatewayCheck(request: StatusGatewayCheckRequest): StatusGatewayCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return statusGatewayCheckEx(request, headers, runtime);
}

/**
 * Description: Demo接口，返回当前服务器当前状态1
 * Summary: 检查服务状态
 */
async function statusGatewayCheckEx(request: StatusGatewayCheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StatusGatewayCheckResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.status', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EchoGatewayCheckRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // input_array
  inputArray: [ TestStruct ](name='input_array'),
  // file_id
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
  // 1
  inputInt: long(maximum=40, minimum=10, name='input_int'),
  // 测试一下
  fileName: string(name='file_name'),
}

model EchoGatewayCheckResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // output_demo测试
  outputDemo?: DemoClass(name='output_demo'),
  // output_string
  outputString?: string(name='output_string'),
  // file_url
  fileUrl?: string(name='file_url'),
}

/**
 * Description: Demo接口，返回当前输入的值
 * Summary: 返回输入值1
 */
async function echoGatewayCheck(request: EchoGatewayCheckRequest): EchoGatewayCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return echoGatewayCheckEx(request, headers, runtime);
}

/**
 * Description: Demo接口，返回当前输入的值
 * Summary: 返回输入值1
 */
async function echoGatewayCheckEx(request: EchoGatewayCheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EchoGatewayCheckResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'demo.gateway.check.echo',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "OK")) {
      var echoGatewayCheckResponse = new EchoGatewayCheckResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return echoGatewayCheckResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
    request.fileObject = null;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.echo', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayMyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 字符串类型入参
  test1: string(name='test_1'),
  // 数字入参
  test2: long(name='test_2'),
  // 布尔值入参
  test3: boolean(name='test_3'),
}

model QueryGatewayMyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // SUCCESS le
  success?: string(name='success'),
}

/**
 * Description: aaa
 * Summary: 测试demo
 */
async function queryGatewayMy(request: QueryGatewayMyRequest): QueryGatewayMyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayMyEx(request, headers, runtime);
}

/**
 * Description: aaa
 * Summary: 测试demo
 */
async function queryGatewayMyEx(request: QueryGatewayMyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayMyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.my.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayCheckEchotimeoutRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 10
  timeout?: string(name='timeout'),
}

model QueryGatewayCheckEchotimeoutResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 222
  stauts?: string(name='stauts'),
  // ok
  msg?: string(name='msg'),
}

/**
 * Description: 超时测试
 * Summary: 超时
 */
async function queryGatewayCheckEchotimeout(request: QueryGatewayCheckEchotimeoutRequest): QueryGatewayCheckEchotimeoutResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayCheckEchotimeoutEx(request, headers, runtime);
}

/**
 * Description: 超时测试
 * Summary: 超时
 */
async function queryGatewayCheckEchotimeoutEx(request: QueryGatewayCheckEchotimeoutRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayCheckEchotimeoutResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.echotimeout.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayCheckEchotenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryGatewayCheckEchotenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 222
  status?: string(name='status'),
  // ok
  msg?: string(name='msg'),
}

/**
 * Description: 10  测测aa
 * Summary: 10s
 */
async function queryGatewayCheckEchoten(request: QueryGatewayCheckEchotenRequest): QueryGatewayCheckEchotenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayCheckEchotenEx(request, headers, runtime);
}

/**
 * Description: 10  测测aa
 * Summary: 10s
 */
async function queryGatewayCheckEchotenEx(request: QueryGatewayCheckEchotenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayCheckEchotenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.echoten.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAdAsdAsdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 1111
  bnumber: string(maxLength=2, minLength=1, name='bnumber'),
}

model QueryAdAsdAsdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 简介简介简介s
 * Summary: 简介简介
 */
async function queryAdAsdAsd(request: QueryAdAsdAsdRequest): QueryAdAsdAsdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAdAsdAsdEx(request, headers, runtime);
}

/**
 * Description: 简介简介简介s
 * Summary: 简介简介
 */
async function queryAdAsdAsdEx(request: QueryAdAsdAsdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAdAsdAsdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.ad.asd.asd.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitGatewayRoadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求编号
  count: long(maximum=5, minimum=1, name='count'),
  // 请求时间
  time: string(name='time'),
  // 请求描述
  desc?: string(maxLength=15, minLength=5, name='desc'),
  // 操作人
  operator: string(name='operator'),
}

model InitGatewayRoadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回desc
  initDesc?: string(name='init_desc'),
  // 组合返回请求结果
  initPack?: InitPack(name='init_pack'),
}

/**
 * Description: 根据入参组合返回结果，Fr 自动化连通性测试。
 * Summary: road.init（Fr AutoT）
 */
async function initGatewayRoad(request: InitGatewayRoadRequest): InitGatewayRoadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initGatewayRoadEx(request, headers, runtime);
}

/**
 * Description: 根据入参组合返回结果，Fr 自动化连通性测试。
 * Summary: road.init（Fr AutoT）
 */
async function initGatewayRoadEx(request: InitGatewayRoadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitGatewayRoadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.road.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayEmbedRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例参数
  timeout?: string(name='timeout'),
}

model QueryGatewayEmbedResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 近端网关测试接口
 * Summary: 近端网关测试接口（勿删）
 */
async function queryGatewayEmbed(request: QueryGatewayEmbedRequest): QueryGatewayEmbedResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayEmbedEx(request, headers, runtime);
}

/**
 * Description: 近端网关测试接口
 * Summary: 近端网关测试接口（勿删）
 */
async function queryGatewayEmbedEx(request: QueryGatewayEmbedRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayEmbedResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.embed.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateGatewayRoadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求时间
  time: string(name='time'),
  // 操作人
  operator: string(name='operator'),
  // 请求编号
  count: long(name='count'),
  // 原信息
  originInfo: string(name='origin_info'),
}

model UpdateGatewayRoadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 更新后返回info
  updInfo?: string(name='upd_info'),
  // 组合返回请求结果
  updPack?: InitPack(name='upd_pack'),
}

/**
 * Description: 更新入参后返回结果，Fr 自动化连通性测试。
 * Summary: road.upd（Fr AutoT）
 */
async function updateGatewayRoad(request: UpdateGatewayRoadRequest): UpdateGatewayRoadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateGatewayRoadEx(request, headers, runtime);
}

/**
 * Description: 更新入参后返回结果，Fr 自动化连通性测试。
 * Summary: road.upd（Fr AutoT）
 */
async function updateGatewayRoadEx(request: UpdateGatewayRoadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateGatewayRoadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.road.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayRoadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询输入
  data: string(name='data'),
}

model QueryGatewayRoadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询返回
  queryResult?: string(name='query_result'),
}

/**
 * Description: 查询并返回结果，Fr 自动化连通性测试。
 * Summary: road.query（Fr AutoT）
 */
async function queryGatewayRoad(request: QueryGatewayRoadRequest): QueryGatewayRoadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayRoadEx(request, headers, runtime);
}

/**
 * Description: 查询并返回结果，Fr 自动化连通性测试。
 * Summary: road.query（Fr AutoT）
 */
async function queryGatewayRoadEx(request: QueryGatewayRoadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayRoadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.road.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecGatewayRoadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 计算值输入
  execNum: long(name='exec_num'),
}

model ExecGatewayRoadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 计算值返回
  execNumEcho?: long(name='exec_num_echo'),
}

/**
 * Description: 执行计算后返回，Fr 自动化连通性测试。
 * Summary: road.exec（Fr AutoT）
 */
async function execGatewayRoad(request: ExecGatewayRoadRequest): ExecGatewayRoadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execGatewayRoadEx(request, headers, runtime);
}

/**
 * Description: 执行计算后返回，Fr 自动化连通性测试。
 * Summary: road.exec（Fr AutoT）
 */
async function execGatewayRoadEx(request: ExecGatewayRoadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecGatewayRoadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.road.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadtestTimeThreeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ms
  timeout: string(name='timeout'),
}

model QueryLoadtestTimeThreeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 200
  stauts?: string(name='stauts'),
  // ok
  msg?: string(name='msg'),
}

/**
 * Description: 压测接口3
 * Summary: 压测接口3
 */
async function queryLoadtestTimeThree(request: QueryLoadtestTimeThreeRequest): QueryLoadtestTimeThreeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadtestTimeThreeEx(request, headers, runtime);
}

/**
 * Description: 压测接口3
 * Summary: 压测接口3
 */
async function queryLoadtestTimeThreeEx(request: QueryLoadtestTimeThreeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadtestTimeThreeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.loadtest.time.three.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryInstanceidRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数字
  count: string(name='count'),
  // 姓名
  oprator: string(name='oprator'),
  // 结构体
  struct: TestA(name='struct'),
}

model QueryInstanceidRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: test
 * Summary: 自动化测试工程使用，勿删勿改
 */
async function queryInstanceidRule(request: QueryInstanceidRuleRequest): QueryInstanceidRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryInstanceidRuleEx(request, headers, runtime);
}

/**
 * Description: test
 * Summary: 自动化测试工程使用，勿删勿改
 */
async function queryInstanceidRuleEx(request: QueryInstanceidRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryInstanceidRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.instanceid.rule.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayCheckEchotimeoutokRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 耗时时间
  timeout: string(name='timeout'),
}

model QueryGatewayCheckEchotimeoutokResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回OK
  stauts?: string(name='stauts'),
  // 结果描述
  msg?: string(name='msg'),
}

/**
 * Description: 设置下游耗时
 * Summary: 超时（加密）
 */
async function queryGatewayCheckEchotimeoutok(request: QueryGatewayCheckEchotimeoutokRequest): QueryGatewayCheckEchotimeoutokResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayCheckEchotimeoutokEx(request, headers, runtime);
}

/**
 * Description: 设置下游耗时
 * Summary: 超时（加密）
 */
async function queryGatewayCheckEchotimeoutokEx(request: QueryGatewayCheckEchotimeoutokRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayCheckEchotimeoutokResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.echotimeoutok.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model MatchBusinessAndInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // L5
  businessCode: string(name='business_code'),
  // 实例
  instanceCode: string(name='instance_code'),
}

model MatchBusinessAndInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 双百&门户&网关，停服决策测试使用
 * Summary: 商业化规则测试
 */
async function matchBusinessAndInstance(request: MatchBusinessAndInstanceRequest): MatchBusinessAndInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return matchBusinessAndInstanceEx(request, headers, runtime);
}

/**
 * Description: 双百&门户&网关，停服决策测试使用
 * Summary: 商业化规则测试
 */
async function matchBusinessAndInstanceEx(request: MatchBusinessAndInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): MatchBusinessAndInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.business.and.instance.match', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStreamTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 名称
  name: string(name='name'),
}

model QueryStreamTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 流失查询测试
 * Summary: 流失查询测试
 */
async function queryStreamTest(request: QueryStreamTestRequest): QueryStreamTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStreamTestEx(request, headers, runtime);
}

/**
 * Description: 流失查询测试
 * Summary: 流失查询测试
 */
async function queryStreamTestEx(request: QueryStreamTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStreamTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.stream.test.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestCatcheLimitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // abc
  timeout: string(name='timeout'),
}

model QueryTestCatcheLimitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回OK
  stauts?: string(name='stauts'),
  // 结果描述
  msg?: string(name='msg'),
}

/**
 * Description: 网关性能优化测试
 * Summary: 性能优化测试
 */
async function queryTestCatcheLimit(request: QueryTestCatcheLimitRequest): QueryTestCatcheLimitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestCatcheLimitEx(request, headers, runtime);
}

/**
 * Description: 网关性能优化测试
 * Summary: 性能优化测试
 */
async function queryTestCatcheLimitEx(request: QueryTestCatcheLimitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestCatcheLimitResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.catche.limit.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestForLimitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 2
  execNum: long(name='exec_num'),
}

model QueryTestForLimitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 1
  execNumEcho?: long(name='exec_num_echo'),
}

/**
 * Description: 测试使用
 * Summary: 测试使用
 */
async function queryTestForLimit(request: QueryTestForLimitRequest): QueryTestForLimitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestForLimitEx(request, headers, runtime);
}

/**
 * Description: 测试使用
 * Summary: 测试使用
 */
async function queryTestForLimitEx(request: QueryTestForLimitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestForLimitResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.for.limit.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestTestTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryTestTestTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: test
 * Summary: test
 */
async function queryTestTestTest(request: QueryTestTestTestRequest): QueryTestTestTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestTestTestEx(request, headers, runtime);
}

/**
 * Description: test
 * Summary: test
 */
async function queryTestTestTestEx(request: QueryTestTestTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestTestTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.test.test.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryABCRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryABCResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: a
 * Summary: abcde
 */
async function queryABC(request: QueryABCRequest): QueryABCResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryABCEx(request, headers, runtime);
}

/**
 * Description: a
 * Summary: abcde
 */
async function queryABCEx(request: QueryABCRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryABCResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.a.b.c.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestEmbedUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // test
  userId: string(name='user_id'),
}

model QueryTestEmbedUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // name
  name?: string(name='name'),
}

/**
 * Description: 近端接口测试
 * Summary: 近端接口测试
 */
async function queryTestEmbedUser(request: QueryTestEmbedUserRequest): QueryTestEmbedUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestEmbedUserEx(request, headers, runtime);
}

/**
 * Description: 近端接口测试
 * Summary: 近端接口测试
 */
async function queryTestEmbedUserEx(request: QueryTestEmbedUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestEmbedUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.embed.user.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAasSaSaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryAasSaSaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: sss
 * Summary: sss
 */
async function queryAasSaSa(request: QueryAasSaSaRequest): QueryAasSaSaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAasSaSaEx(request, headers, runtime);
}

/**
 * Description: sss
 * Summary: sss
 */
async function queryAasSaSaEx(request: QueryAasSaSaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAasSaSaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.aas.sa.sa.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApiWhiteListRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询输入
  data: string(name='data'),
}

model QueryApiWhiteListResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询返回
  queryResult?: string(name='query_result'),
}

/**
 * Description: 用于自动化测试IP访问控制白名单测试需要，【请勿做任何改动！】
 * Summary: 自动化测试需要，【请勿做任何改动！】
 */
async function queryApiWhiteList(request: QueryApiWhiteListRequest): QueryApiWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApiWhiteListEx(request, headers, runtime);
}

/**
 * Description: 用于自动化测试IP访问控制白名单测试需要，【请勿做任何改动！】
 * Summary: 自动化测试需要，【请勿做任何改动！】
 */
async function queryApiWhiteListEx(request: QueryApiWhiteListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApiWhiteListResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.api.white.list.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApiBlackListRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询输入
  data: string(name='data'),
}

model QueryApiBlackListResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询返回
  queryResult?: string(name='query_result'),
}

/**
 * Description: 用于自动化测试IP访问控制白名单测试需要，【请勿做任何改动！】
 * Summary: 自动化测试需要，【请勿做任何改动！】
 */
async function queryApiBlackList(request: QueryApiBlackListRequest): QueryApiBlackListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApiBlackListEx(request, headers, runtime);
}

/**
 * Description: 用于自动化测试IP访问控制白名单测试需要，【请勿做任何改动！】
 * Summary: 自动化测试需要，【请勿做任何改动！】
 */
async function queryApiBlackListEx(request: QueryApiBlackListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApiBlackListResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.api.black.list.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpWhiteListRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 超时时间
  timeout: string(name='timeout'),
}

model QueryIpWhiteListResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ok
  status?: string(name='status'),
  // SUCCESS
  msg?: string(name='msg'),
}

/**
 * Description: ip访问白名单测试
 * Summary: 【自动化】ip访问白名单测试
 */
async function queryIpWhiteList(request: QueryIpWhiteListRequest): QueryIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpWhiteListEx(request, headers, runtime);
}

/**
 * Description: ip访问白名单测试
 * Summary: 【自动化】ip访问白名单测试
 */
async function queryIpWhiteListEx(request: QueryIpWhiteListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpWhiteListResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.ip.white.list.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpBlackListRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 超时时间
  timeout: string(name='timeout'),
}

model QueryIpBlackListResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // OK
  status?: string(name='status'),
  // SUCCESS
  msg?: string(name='msg'),
}

/**
 * Description: ip访问白名单测试
 * Summary: 【自动化】ip访问黑名单测试
 */
async function queryIpBlackList(request: QueryIpBlackListRequest): QueryIpBlackListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpBlackListEx(request, headers, runtime);
}

/**
 * Description: ip访问白名单测试
 * Summary: 【自动化】ip访问黑名单测试
 */
async function queryIpBlackListEx(request: QueryIpBlackListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpBlackListResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.ip.black.list.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIpRetryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 超时时间
  timeout: string(name='timeout'),
}

model QueryIpRetryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // OK
  status?: string(name='status'),
  // SUCCESS
  msg?: string(name='msg'),
}

/**
 * Description: 重试策略
 * Summary: 【自动化】重试策略
 */
async function queryIpRetry(request: QueryIpRetryRequest): QueryIpRetryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIpRetryEx(request, headers, runtime);
}

/**
 * Description: 重试策略
 * Summary: 【自动化】重试策略
 */
async function queryIpRetryEx(request: QueryIpRetryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIpRetryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.ip.retry.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestTimeTestaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryTestTimeTestaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 个人工作台二期测试
 * Summary: 个人工作台二期测试
 */
async function queryTestTimeTesta(request: QueryTestTimeTestaRequest): QueryTestTimeTestaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestTimeTestaEx(request, headers, runtime);
}

/**
 * Description: 个人工作台二期测试
 * Summary: 个人工作台二期测试
 */
async function queryTestTimeTestaEx(request: QueryTestTimeTestaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestTimeTestaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.time.testa.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOasRestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id信息
  identityId: string(name='identity_id'),
}

model QueryOasRestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 描述信息
  info?: string(name='info'),
}

/**
 * Description: oas 测试使用
 * Summary: oas 测试使用
 */
async function queryOasRest(request: QueryOasRestRequest): QueryOasRestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOasRestEx(request, headers, runtime);
}

/**
 * Description: oas 测试使用
 * Summary: oas 测试使用
 */
async function queryOasRestEx(request: QueryOasRestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOasRestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.oas.rest.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestContentTypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询输入
  data?: string(name='data'),
}

model QueryTestContentTypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码
  statucode?: string(name='statucode'),
  // 查询返回结果
  queryResult?: string(name='query_result'),
}

/**
 * Description: 自动化contenttype兼容测试
 * Summary: 自动化contenttype兼容测试
 */
async function queryTestContentType(request: QueryTestContentTypeRequest): QueryTestContentTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestContentTypeEx(request, headers, runtime);
}

/**
 * Description: 自动化contenttype兼容测试
 * Summary: 自动化contenttype兼容测试
 */
async function queryTestContentTypeEx(request: QueryTestContentTypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestContentTypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.content.type.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestContentTypeoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询输入
  data: string(name='data'),
}

model QueryTestContentTypeoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  queryResult?: string(name='query_result'),
  // 结果码
  statucode?: string(name='statucode'),
}

/**
 * Description: 自动化测试contentType
 * Summary: 自动化测试contentType
 */
async function queryTestContentTypeone(request: QueryTestContentTypeoneRequest): QueryTestContentTypeoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestContentTypeoneEx(request, headers, runtime);
}

/**
 * Description: 自动化测试contentType
 * Summary: 自动化测试contentType
 */
async function queryTestContentTypeoneEx(request: QueryTestContentTypeoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestContentTypeoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.content.typeone.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestContentTypetwoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询输入
  data: string(name='data'),
}

model QueryTestContentTypetwoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询返回结果
  data?: string(name='data'),
  // 状态码
  statucode?: string(name='statucode'),
}

/**
 * Description: 自动化contenttype兼容测试
 * Summary: 自动化contenttype兼容测试
 */
async function queryTestContentTypetwo(request: QueryTestContentTypetwoRequest): QueryTestContentTypetwoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestContentTypetwoEx(request, headers, runtime);
}

/**
 * Description: 自动化contenttype兼容测试
 * Summary: 自动化contenttype兼容测试
 */
async function queryTestContentTypetwoEx(request: QueryTestContentTypetwoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestContentTypetwoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.content.typetwo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestContentTypethreeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询输入
  data: string(name='data'),
}

model QueryTestContentTypethreeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询返回结果
  queryResult?: string(name='query_result'),
  // 结果码
  statucode?: string(name='statucode'),
}

/**
 * Description: 自动化contenttype兼容测试
 * Summary: 自动化contenttype兼容测试
 */
async function queryTestContentTypethree(request: QueryTestContentTypethreeRequest): QueryTestContentTypethreeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestContentTypethreeEx(request, headers, runtime);
}

/**
 * Description: 自动化contenttype兼容测试
 * Summary: 自动化contenttype兼容测试
 */
async function queryTestContentTypethreeEx(request: QueryTestContentTypethreeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestContentTypethreeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.content.typethree.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestContentTypefourRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询输入
  data: string(name='data'),
}

model QueryTestContentTypefourResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询返回结果
  queryResult?: string(name='query_result'),
  // 结果码
  statucode?: string(name='statucode'),
}

/**
 * Description: 自动化contenttype兼容测试
 * Summary: 自动化contenttype兼容测试
 */
async function queryTestContentTypefour(request: QueryTestContentTypefourRequest): QueryTestContentTypefourResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestContentTypefourEx(request, headers, runtime);
}

/**
 * Description: 自动化contenttype兼容测试
 * Summary: 自动化contenttype兼容测试
 */
async function queryTestContentTypefourEx(request: QueryTestContentTypefourRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestContentTypefourResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.content.typefour.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestContentTypefiveRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询入参
  data: string(name='data'),
}

model QueryTestContentTypefiveResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果码
  statucode?: string(name='statucode'),
  // 查询结果
  queryResult?: string(name='query_result'),
}

/**
 * Description: 自动化contenttype兼容测试
 * Summary: 自动化contenttype兼容测试
 */
async function queryTestContentTypefive(request: QueryTestContentTypefiveRequest): QueryTestContentTypefiveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestContentTypefiveEx(request, headers, runtime);
}

/**
 * Description: 自动化contenttype兼容测试
 * Summary: 自动化contenttype兼容测试
 */
async function queryTestContentTypefiveEx(request: QueryTestContentTypefiveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestContentTypefiveResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.content.typefive.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAgentFinancialRiskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户基础信息
  userProfile?: UserProfile(name='user_profile'),
  // 交易明细信息
  transactionDetails?: TransactionDetails(name='transaction_details'),
  // 风险评估因子列表
  riskFactors?: [ RiskFactorDetail ](name='risk_factors'),
  // 业务上下文信息
  businessContext?: NameValuePair(name='business_context'),
  // 风险等级标识（LOW/MEDIUM/HIGH/URGENT）
  riskLevel?: string(name='risk_level'),
  // 接口超时时间（毫秒）
  timeout?: long(maximum=60000, minimum=0, name='timeout'),
}

model QueryAgentFinancialRiskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 风险等级
  riskLevel?: string(name='risk_level'),
  // 风险建议动作
  suggestedAction?: string(name='suggested_action'),
  // 风险分
  riskScore?: long(name='risk_score'),
  // 风险因子列表
  riskfactors?: RiskFactorDetail(name='riskfactors'),
  // 处置建议
  recommendations?: string(name='recommendations'),
}

/**
 * Description: 金融场景风险分析
 * Summary: 金融场景风险分析
 */
async function queryAgentFinancialRisk(request: QueryAgentFinancialRiskRequest): QueryAgentFinancialRiskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAgentFinancialRiskEx(request, headers, runtime);
}

/**
 * Description: 金融场景风险分析
 * Summary: 金融场景风险分析
 */
async function queryAgentFinancialRiskEx(request: QueryAgentFinancialRiskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAgentFinancialRiskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.agent.financial.risk.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStreamTestmethodRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 名称
  name: string(name='name'),
}

model QueryStreamTestmethodResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 流式处理
 * Summary: 流式处理
 */
async function queryStreamTestmethod(request: QueryStreamTestmethodRequest): QueryStreamTestmethodResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStreamTestmethodEx(request, headers, runtime);
}

/**
 * Description: 流式处理
 * Summary: 流式处理
 */
async function queryStreamTestmethodEx(request: QueryStreamTestmethodRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStreamTestmethodResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.stream.testmethod.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStreamTimeoutRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // name
  name: string(name='name'),
}

model QueryStreamTimeoutResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 模拟下游超时情况
 * Summary: 流式超时测试接口
 */
async function queryStreamTimeout(request: QueryStreamTimeoutRequest): QueryStreamTimeoutResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStreamTimeoutEx(request, headers, runtime);
}

/**
 * Description: 模拟下游超时情况
 * Summary: 流式超时测试接口
 */
async function queryStreamTimeoutEx(request: QueryStreamTimeoutRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStreamTimeoutResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.stream.timeout.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStreamNonjsonRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // name
  name: string(name='name'),
}

model QueryStreamNonjsonResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 模拟下游返回非json的情况
 * Summary: 流式下游返回非json
 */
async function queryStreamNonjson(request: QueryStreamNonjsonRequest): QueryStreamNonjsonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStreamNonjsonEx(request, headers, runtime);
}

/**
 * Description: 模拟下游返回非json的情况
 * Summary: 流式下游返回非json
 */
async function queryStreamNonjsonEx(request: QueryStreamNonjsonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStreamNonjsonResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.stream.nonjson.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStreamSpecialCharactersRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // name
  name: string(name='name'),
}

model QueryStreamSpecialCharactersResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 流式出参包含特殊字符
 * Summary: 流式出参包含特殊字符
 */
async function queryStreamSpecialCharacters(request: QueryStreamSpecialCharactersRequest): QueryStreamSpecialCharactersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStreamSpecialCharactersEx(request, headers, runtime);
}

/**
 * Description: 流式出参包含特殊字符
 * Summary: 流式出参包含特殊字符
 */
async function queryStreamSpecialCharactersEx(request: QueryStreamSpecialCharactersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStreamSpecialCharactersResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.stream.special.characters.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStreamNonstreamRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // name
  name: string(name='name'),
}

model QueryStreamNonstreamResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 非流式返回
 * Summary: 非流式返回
 */
async function queryStreamNonstream(request: QueryStreamNonstreamRequest): QueryStreamNonstreamResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStreamNonstreamEx(request, headers, runtime);
}

/**
 * Description: 非流式返回
 * Summary: 非流式返回
 */
async function queryStreamNonstreamEx(request: QueryStreamNonstreamRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStreamNonstreamResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.stream.nonstream.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadtestTimeOneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 毫秒值
  timeout: string(name='timeout'),
}

model QueryLoadtestTimeOneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 200
  stauts?: string(name='stauts'),
  // ok
  msg?: string(name='msg'),
}

/**
 * Description: 压测接口1
 * Summary: 压测接口1
 */
async function queryLoadtestTimeOne(request: QueryLoadtestTimeOneRequest): QueryLoadtestTimeOneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadtestTimeOneEx(request, headers, runtime);
}

/**
 * Description: 压测接口1
 * Summary: 压测接口1
 */
async function queryLoadtestTimeOneEx(request: QueryLoadtestTimeOneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadtestTimeOneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.loadtest.time.one.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadtestTimeTwoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 毫秒
  timeout: string(name='timeout'),
}

model QueryLoadtestTimeTwoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 200
  stauts?: string(name='stauts'),
  // ok
  msg?: string(name='msg'),
}

/**
 * Description: 压测接口2
 * Summary: 压测接口2
 */
async function queryLoadtestTimeTwo(request: QueryLoadtestTimeTwoRequest): QueryLoadtestTimeTwoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadtestTimeTwoEx(request, headers, runtime);
}

/**
 * Description: 压测接口2
 * Summary: 压测接口2
 */
async function queryLoadtestTimeTwoEx(request: QueryLoadtestTimeTwoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadtestTimeTwoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.loadtest.time.two.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadtestTimeFourRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 毫秒值
  timeout: string(name='timeout'),
}

model QueryLoadtestTimeFourResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码
  stauts?: string(name='stauts'),
  // OK
  msg?: string(name='msg'),
}

/**
 * Description: 压测接口4，用于压测
 * Summary: 压测接口4
 */
async function queryLoadtestTimeFour(request: QueryLoadtestTimeFourRequest): QueryLoadtestTimeFourResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadtestTimeFourEx(request, headers, runtime);
}

/**
 * Description: 压测接口4，用于压测
 * Summary: 压测接口4
 */
async function queryLoadtestTimeFourEx(request: QueryLoadtestTimeFourRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadtestTimeFourResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.loadtest.time.four.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadtestTimeFiveRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 超时时间
  timeout: string(name='timeout'),
}

model QueryLoadtestTimeFiveResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码
  stauts?: string(name='stauts'),
  // OK
  msg?: string(name='msg'),
}

/**
 * Description: 压测接口5，用于压测
 * Summary: 压测接口5
 */
async function queryLoadtestTimeFive(request: QueryLoadtestTimeFiveRequest): QueryLoadtestTimeFiveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadtestTimeFiveEx(request, headers, runtime);
}

/**
 * Description: 压测接口5，用于压测
 * Summary: 压测接口5
 */
async function queryLoadtestTimeFiveEx(request: QueryLoadtestTimeFiveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadtestTimeFiveResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.loadtest.time.five.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckAicoguardcoreAicoguardrailsQuestionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 当前提问内容
  question: string(name='question'),
  // 当前提问格式
  questionFormat?: string(name='question_format'),
  // 应用名
  appCode: string(name='app_code'),
  // 会话ID
  sessionId: string(name='session_id'),
  // 唯一定位一个问答对
  requestId: string(name='request_id'),
  // 场景code，走SOP流程申请
  sceneCode: string(name='scene_code'),
  // 当前固定填入：TJ_QUESTION_BASIC
  serviceCode: string(name='service_code'),
  // Agent标识
  agentCode: string(name='agent_code'),
  // 大模型Code，区分大模型类型和版本，比如bailing_10b_0229、bailing_65b_0315
  modelCode?: string(name='model_code'),
  // 用户ID，用于主体风险判断
  userId?: string(name='user_id'),
  // 扩展信息，会透传到业务属性中
  businessProperties?: Map(name='business_properties'),
}

model CheckAicoguardcoreAicoguardrailsQuestionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否安全无风险 true：安全无风险 false：有风险
  safe?: boolean(name='safe'),
  // 安全动作 BLOCK：拦截  SECURITY_ANSWER：安全代答  SECURITY_PROMPT：安全提示增强
  actionCode?: string(name='action_code'),
  // 安全动作相关文案，比如安全提示增强的文案、安全代答的回答、回答里补充的安全提示
  actionMsg?: string(name='action_msg'),
  // 会话动作. END_SESSION：终止会话.  RECALL_QUERY：撤回提问
  sessionAction?: string(name='session_action'),
}

/**
 * Description: 大模型护栏多轮对话提问检测 测试
 * Summary: 大模型护栏多轮对话提问检测
 */
async function checkAicoguardcoreAicoguardrailsQuestion(request: CheckAicoguardcoreAicoguardrailsQuestionRequest): CheckAicoguardcoreAicoguardrailsQuestionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkAicoguardcoreAicoguardrailsQuestionEx(request, headers, runtime);
}

/**
 * Description: 大模型护栏多轮对话提问检测 测试
 * Summary: 大模型护栏多轮对话提问检测
 */
async function checkAicoguardcoreAicoguardrailsQuestionEx(request: CheckAicoguardcoreAicoguardrailsQuestionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckAicoguardcoreAicoguardrailsQuestionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.aicoguardcore.aicoguardrails.question.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestTimeMenhuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryTestTimeMenhuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 个人工作台二期测试
 * Summary: 个人工作台二期测试
 */
async function queryTestTimeMenhu(request: QueryTestTimeMenhuRequest): QueryTestTimeMenhuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestTimeMenhuEx(request, headers, runtime);
}

/**
 * Description: 个人工作台二期测试
 * Summary: 个人工作台二期测试
 */
async function queryTestTimeMenhuEx(request: QueryTestTimeMenhuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestTimeMenhuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.time.menhu.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindAaaBbbCccRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 123
  date: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='date'),
  // 123
  data: string(name='data'),
}

model BindAaaBbbCccResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建test，请勿修改、删除
 * Summary: 自动化测试创建test1
 */
async function bindAaaBbbCcc(request: BindAaaBbbCccRequest): BindAaaBbbCccResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindAaaBbbCccEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建test，请勿修改、删除
 * Summary: 自动化测试创建test1
 */
async function bindAaaBbbCccEx(request: BindAaaBbbCccRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindAaaBbbCccResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.aaa.bbb.ccc.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAaaBbbCccRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 入参
  param: string(name='param'),
}

model QueryAaaBbbCccResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建111
 * Summary: 自动化测试创建（勿动）
 */
async function queryAaaBbbCcc(request: QueryAaaBbbCccRequest): QueryAaaBbbCccResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAaaBbbCccEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建111
 * Summary: 自动化测试创建（勿动）
 */
async function queryAaaBbbCccEx(request: QueryAaaBbbCccRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAaaBbbCccResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.aaa.bbb.ccc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAbcAbcAbcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryAbcAbcAbcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建,用于测试API的修改
 * Summary: 自动化测试创建,用于测试API的修改勿动
 */
async function queryAbcAbcAbc(request: QueryAbcAbcAbcRequest): QueryAbcAbcAbcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAbcAbcAbcEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建,用于测试API的修改
 * Summary: 自动化测试创建,用于测试API的修改勿动
 */
async function queryAbcAbcAbcEx(request: QueryAbcAbcAbcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAbcAbcAbcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.abc.abc.abc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindAaaBbbCcdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model BindAaaBbbCcdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 123
 * Summary: 测试用api
 */
async function bindAaaBbbCcd(request: BindAaaBbbCcdRequest): BindAaaBbbCcdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindAaaBbbCcdEx(request, headers, runtime);
}

/**
 * Description: 123
 * Summary: 测试用api
 */
async function bindAaaBbbCcdEx(request: BindAaaBbbCcdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindAaaBbbCcdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.aaa.bbb.ccd.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 上传文件作用的openapi method
  apiCode: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ XNameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntcloudGatewayxFileUploadEx(request, headers, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

