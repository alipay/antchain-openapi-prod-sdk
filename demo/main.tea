import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.139',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'centre-openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// Demo类1
model DemoClass {
  // 字符串测试
  someString: string(name='some_string', example='some string'),
  // 日期测试
  someDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='some_date', example='3'),
  // Boolean测试
  someBoolean: boolean(name='some_boolean', example='true'),
  // 整数测试
  someInt: long(maximum=2000, minimum=1, name='some_int', example='3'),
  // 列表测试
  someList: [ string ](name='some_list', example=''),
}

// 键值对，兼容map用
model NameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

// testAAAA
model TestClass {
  // 1
  test: string(name='test', example='testclass'),
  // 2
  demo: string(name='demo', example='testclass'),
  // 3
  demo1: string(name='demo1', example='id2'),
}

// TestStruct
model TestStruct {
  // x
  x: string(name='x', example='x'),
  // y
  y: DemoClass(name='y', example='y'),
  // z
  z: [ DemoClass ](name='z', example=''),
}

// Map<String,Object> 集合
model QueryMap {
  // 键值
  name: string(name='name', example='BUSINESS_CODE'),
  // 额外用户信息
  value?: [ NameValuePair ](name='value', example=''),
}

// init接口响应结果，map类型
model InitPack {
  // 返回接收到请求的当前时间
  time: string(name='time', example='2022-11-07 14:48'),
  // 操作人
  operator: string(name='operator', example='wanyi'),
  // 请求编号
  count: long(name='count', example='1'),
}

// 另一个Demo类
model AnotherClass {
  // 测试字段
  bar: string(name='bar', example='some string'),
  // 引用字段
  ref: DemoClass(name='ref', example=''),
  // 列表引用Struct
  refList?: [ DemoClass ](name='refList', example=''),
}

// 自动化测试创建（勿删）
model TestsT {
}

// groupA分组结构体
model GroupAClass {
  // -
  productInstanceId?: string(name='product_instance_id', example='-'),
  // 防伪码类型
  codeType: string(name='code_type', example='103001'),
  // 防伪码码值
  code: string(name='code', example='600011111'),
}

// 自动化测试创建（用于测试编辑功能，勿删）
model AbcdEfgh {
}

// 键值对
model XNameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

model BindQweQweRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model BindQweQweResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 123
 * Summary: 123
 */
async function bindQweQwe(request: BindQweQweRequest): BindQweQweResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindQweQweEx(request, headers, runtime);
}

/**
 * Description: 123
 * Summary: 123
 */
async function bindQweQweEx(request: BindQweQweRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindQweQweResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.qwe.qwe.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindSdfSssSssRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model BindSdfSssSssResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: sdf
 * Summary: sdf
 */
async function bindSdfSssSss(request: BindSdfSssSssRequest): BindSdfSssSssResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindSdfSssSssEx(request, headers, runtime);
}

/**
 * Description: sdf
 * Summary: sdf
 */
async function bindSdfSssSssEx(request: BindSdfSssSssRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindSdfSssSssResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.sdf.sss.sss.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StatusGatewayCheckRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model StatusGatewayCheckResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // OK
  status?: string(name='status'),
}

/**
 * Description: Demo接口，返回当前服务器当前状态1
 * Summary: 检查服务状态
 */
async function statusGatewayCheck(request: StatusGatewayCheckRequest): StatusGatewayCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return statusGatewayCheckEx(request, headers, runtime);
}

/**
 * Description: Demo接口，返回当前服务器当前状态1
 * Summary: 检查服务状态
 */
async function statusGatewayCheckEx(request: StatusGatewayCheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StatusGatewayCheckResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.status', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EchoGatewayCheckRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // input_array
  inputArray: [ TestStruct ](name='input_array'),
  // file_id
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
  // 1
  inputInt: long(maximum=40, minimum=10, name='input_int'),
  // 测试一下
  fileName: string(name='file_name'),
}

model EchoGatewayCheckResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // output_demo
  outputDemo?: DemoClass(name='output_demo'),
  // output_string
  outputString?: string(name='output_string'),
  // file_url
  fileUrl?: string(name='file_url'),
}

/**
 * Description: Demo接口，返回当输入的值
 * Summary: 返回输入值
 */
async function echoGatewayCheck(request: EchoGatewayCheckRequest): EchoGatewayCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return echoGatewayCheckEx(request, headers, runtime);
}

/**
 * Description: Demo接口，返回当输入的值
 * Summary: 返回输入值
 */
async function echoGatewayCheckEx(request: EchoGatewayCheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EchoGatewayCheckResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'demo.gateway.check.echo',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "OK")) {
      var echoGatewayCheckResponse = new EchoGatewayCheckResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return echoGatewayCheckResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.echo', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayCheckRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryGatewayCheckResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: ceshi
 * Summary: ss
 */
async function queryGatewayCheck(request: QueryGatewayCheckRequest): QueryGatewayCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayCheckEx(request, headers, runtime);
}

/**
 * Description: ceshi
 * Summary: ss
 */
async function queryGatewayCheckEx(request: QueryGatewayCheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayCheckResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryGatewayTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 测试用aaa
 * Summary: 测试001
 */
async function queryGatewayTest(request: QueryGatewayTestRequest): QueryGatewayTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayTestEx(request, headers, runtime);
}

/**
 * Description: 测试用aaa
 * Summary: 测试001
 */
async function queryGatewayTestEx(request: QueryGatewayTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.test.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindSssSsSsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model BindSssSsSsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: sss
 * Summary: ss
 */
async function bindSssSsSs(request: BindSssSsSsRequest): BindSssSsSsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindSssSsSsEx(request, headers, runtime);
}

/**
 * Description: sss
 * Summary: ss
 */
async function bindSssSsSsEx(request: BindSssSsSsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindSssSsSsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.sss.ss.ss.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayMyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryGatewayMyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: aaa
 * Summary: 测试demo
 */
async function queryGatewayMy(request: QueryGatewayMyRequest): QueryGatewayMyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayMyEx(request, headers, runtime);
}

/**
 * Description: aaa
 * Summary: 测试demo
 */
async function queryGatewayMyEx(request: QueryGatewayMyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayMyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.my.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindDemoCheckEeeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model BindDemoCheckEeeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: s
 * Summary: ss
 */
async function bindDemoCheckEee(request: BindDemoCheckEeeRequest): BindDemoCheckEeeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindDemoCheckEeeEx(request, headers, runtime);
}

/**
 * Description: s
 * Summary: ss
 */
async function bindDemoCheckEeeEx(request: BindDemoCheckEeeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindDemoCheckEeeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.demo.check.eee.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindGatewayAbcTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model BindGatewayAbcTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: test
 * Summary: test
 */
async function bindGatewayAbcTest(request: BindGatewayAbcTestRequest): BindGatewayAbcTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindGatewayAbcTestEx(request, headers, runtime);
}

/**
 * Description: test
 * Summary: test
 */
async function bindGatewayAbcTestEx(request: BindGatewayAbcTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindGatewayAbcTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.abc.test.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindTestTestTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // test
  test: string(name='test'),
}

model BindTestTestTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // test
  test?: string(name='test'),
}

/**
 * Description: testaaa
 * Summary: test
 */
async function bindTestTestTest(request: BindTestTestTestRequest): BindTestTestTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindTestTestTestEx(request, headers, runtime);
}

/**
 * Description: testaaa
 * Summary: test
 */
async function bindTestTestTestEx(request: BindTestTestTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindTestTestTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.test.test.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayCheckEchotimeoutRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 10
  timeout?: string(name='timeout'),
}

model QueryGatewayCheckEchotimeoutResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 222
  stauts?: string(name='stauts'),
  // ok
  msg?: string(name='msg'),
}

/**
 * Description: 超时测试
 * Summary: 超时
 */
async function queryGatewayCheckEchotimeout(request: QueryGatewayCheckEchotimeoutRequest): QueryGatewayCheckEchotimeoutResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayCheckEchotimeoutEx(request, headers, runtime);
}

/**
 * Description: 超时测试
 * Summary: 超时
 */
async function queryGatewayCheckEchotimeoutEx(request: QueryGatewayCheckEchotimeoutRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayCheckEchotimeoutResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.echotimeout.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayCheckEchotenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryGatewayCheckEchotenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 222
  status?: string(name='status'),
  // ok
  msg?: string(name='msg'),
}

/**
 * Description: 10  测测aa
 * Summary: 10s
 */
async function queryGatewayCheckEchoten(request: QueryGatewayCheckEchotenRequest): QueryGatewayCheckEchotenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayCheckEchotenEx(request, headers, runtime);
}

/**
 * Description: 10  测测aa
 * Summary: 10s
 */
async function queryGatewayCheckEchotenEx(request: QueryGatewayCheckEchotenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayCheckEchotenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.echoten.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAdAsdAsdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryAdAsdAsdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: asd
 * Summary: asd1
 */
async function queryAdAsdAsd(request: QueryAdAsdAsdRequest): QueryAdAsdAsdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAdAsdAsdEx(request, headers, runtime);
}

/**
 * Description: asd
 * Summary: asd1
 */
async function queryAdAsdAsdEx(request: QueryAdAsdAsdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAdAsdAsdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.ad.asd.asd.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindAsdAsdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model BindAsdAsdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 1·2
 * Summary: 测试
 */
async function bindAsdAsd(request: BindAsdAsdRequest): BindAsdAsdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindAsdAsdEx(request, headers, runtime);
}

/**
 * Description: 1·2
 * Summary: 测试
 */
async function bindAsdAsdEx(request: BindAsdAsdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindAsdAsdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.asd.asd.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateCjtestCjRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 测试参数
  var1: string(name='var1'),
  // 测试参数2
  var2: string(name='var2'),
  // 被授权机构did
  subject?: string(name='subject'),
}

model UpdateCjtestCjResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 测试返回参数1
  return1?: string(name='return1'),
}

/**
 * Description: 测试网关评审能力
 * Summary: 评审测试
 */
async function updateCjtestCj(request: UpdateCjtestCjRequest): UpdateCjtestCjResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateCjtestCjEx(request, headers, runtime);
}

/**
 * Description: 测试网关评审能力
 * Summary: 评审测试
 */
async function updateCjtestCjEx(request: UpdateCjtestCjRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateCjtestCjResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.cjtest.cj.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadCjtestSourceFileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // file
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
}

model UploadCjtestSourceFileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // test
  res?: string(name='res'),
}

/**
 * Description: 文件测试
 * Summary: 文件测试
 */
async function uploadCjtestSourceFile(request: UploadCjtestSourceFileRequest): UploadCjtestSourceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadCjtestSourceFileEx(request, headers, runtime);
}

/**
 * Description: 文件测试
 * Summary: 文件测试
 */
async function uploadCjtestSourceFileEx(request: UploadCjtestSourceFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadCjtestSourceFileResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'demo.cjtest.source.file.upload',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "OK")) {
      var uploadCjtestSourceFileResponse = new UploadCjtestSourceFileResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return uploadCjtestSourceFileResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.cjtest.source.file.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCjtestCjResRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryCjtestCjResResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 字符串
  res?: string(name='res'),
}

/**
 * Description: 测试返回值限制
 * Summary: dev测试返回值限制
 */
async function queryCjtestCjRes(request: QueryCjtestCjResRequest): QueryCjtestCjResResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCjtestCjResEx(request, headers, runtime);
}

/**
 * Description: 测试返回值限制
 * Summary: dev测试返回值限制
 */
async function queryCjtestCjResEx(request: QueryCjtestCjResRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCjtestCjResResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.cjtest.cj.res.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ResetCjtestApiAuthorizeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model ResetCjtestApiAuthorizeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: test
 * Summary: test
 */
async function resetCjtestApiAuthorize(request: ResetCjtestApiAuthorizeRequest): ResetCjtestApiAuthorizeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return resetCjtestApiAuthorizeEx(request, headers, runtime);
}

/**
 * Description: test
 * Summary: test
 */
async function resetCjtestApiAuthorizeEx(request: ResetCjtestApiAuthorizeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResetCjtestApiAuthorizeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.cjtest.api.authorize.reset', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitGatewayRoadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求时间
  time: string(name='time'),
  // 操作人
  operator: string(name='operator'),
  // 请求编号
  count: long(name='count'),
  // 请求描述
  desc?: string(name='desc'),
}

model InitGatewayRoadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回desc
  initDesc?: string(name='init_desc'),
  // 组合返回请求结果
  initPack?: InitPack(name='init_pack'),
}

/**
 * Description: 根据入参组合返回结果，Fr 自动化连通性测试。
 * Summary: road.init（Fr AutoT）
 */
async function initGatewayRoad(request: InitGatewayRoadRequest): InitGatewayRoadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initGatewayRoadEx(request, headers, runtime);
}

/**
 * Description: 根据入参组合返回结果，Fr 自动化连通性测试。
 * Summary: road.init（Fr AutoT）
 */
async function initGatewayRoadEx(request: InitGatewayRoadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitGatewayRoadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.road.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateGatewayRoadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求时间
  time: string(name='time'),
  // 操作人
  operator: string(name='operator'),
  // 请求编号
  count: long(name='count'),
  // 原信息
  originInfo: string(name='origin_info'),
}

model UpdateGatewayRoadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 更新后信息
  updInfo?: string(name='upd_info'),
  // 组合返回请求结果
  updPack?: InitPack(name='upd_pack'),
}

/**
 * Description: 修改入参msg后返回，Fr 自动化连通性测试。
 * Summary: road.upd（Fr AutoT）
 */
async function updateGatewayRoad(request: UpdateGatewayRoadRequest): UpdateGatewayRoadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateGatewayRoadEx(request, headers, runtime);
}

/**
 * Description: 修改入参msg后返回，Fr 自动化连通性测试。
 * Summary: road.upd（Fr AutoT）
 */
async function updateGatewayRoadEx(request: UpdateGatewayRoadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateGatewayRoadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.road.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayRoadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询内容
  data: string(name='data'),
}

model QueryGatewayRoadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  queryResult?: string(name='query_result'),
}

/**
 * Description: 简单查询处理，Fr 自动化连通性测试。
 * Summary: road.query（Fr AutoT）
 */
async function queryGatewayRoad(request: QueryGatewayRoadRequest): QueryGatewayRoadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayRoadEx(request, headers, runtime);
}

/**
 * Description: 简单查询处理，Fr 自动化连通性测试。
 * Summary: road.query（Fr AutoT）
 */
async function queryGatewayRoadEx(request: QueryGatewayRoadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayRoadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.road.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecGatewayRoadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求执行编号
  execNum: long(name='exec_num'),
}

model ExecGatewayRoadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回用户请求编号+1
  execNumEcho?: long(name='exec_num_echo'),
}

/**
 * Description: 简单执行返回处理结果，Fr 自动化连通性测试。
 * Summary: road.exec（Fr AutoT）
 */
async function execGatewayRoad(request: ExecGatewayRoadRequest): ExecGatewayRoadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execGatewayRoadEx(request, headers, runtime);
}

/**
 * Description: 简单执行返回处理结果，Fr 自动化连通性测试。
 * Summary: road.exec（Fr AutoT）
 */
async function execGatewayRoadEx(request: ExecGatewayRoadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecGatewayRoadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.road.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMasterstationMasterdataStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 工号
  workNo: string(name='work_no'),
}

model QueryMasterstationMasterdataStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: test
 * Summary: 查询主数据
 */
async function queryMasterstationMasterdataStatus(request: QueryMasterstationMasterdataStatusRequest): QueryMasterstationMasterdataStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMasterstationMasterdataStatusEx(request, headers, runtime);
}

/**
 * Description: test
 * Summary: 查询主数据
 */
async function queryMasterstationMasterdataStatusEx(request: QueryMasterstationMasterdataStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMasterstationMasterdataStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.masterstation.masterdata.status.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnstabilizeTestTestTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model UnstabilizeTestTestTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: test
 * Summary: test
 */
async function unstabilizeTestTestTest(request: UnstabilizeTestTestTestRequest): UnstabilizeTestTestTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unstabilizeTestTestTestEx(request, headers, runtime);
}

/**
 * Description: test
 * Summary: test
 */
async function unstabilizeTestTestTestEx(request: UnstabilizeTestTestTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnstabilizeTestTestTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.test.test.unstabilize', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindAsdAsdAsdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model BindAsdAsdAsdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: asd
 * Summary: asd
 */
async function bindAsdAsdAsd(request: BindAsdAsdAsdRequest): BindAsdAsdAsdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindAsdAsdAsdEx(request, headers, runtime);
}

/**
 * Description: asd
 * Summary: asd
 */
async function bindAsdAsdAsdEx(request: BindAsdAsdAsdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindAsdAsdAsdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.asd.asd.asd.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestAaaBbbRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryTestAaaBbbResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 共享能力主链路回归验证
 * Summary: 共享能力回归验证
 */
async function queryTestAaaBbb(request: QueryTestAaaBbbRequest): QueryTestAaaBbbResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestAaaBbbEx(request, headers, runtime);
}

/**
 * Description: 共享能力主链路回归验证
 * Summary: 共享能力回归验证
 */
async function queryTestAaaBbbEx(request: QueryTestAaaBbbRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestAaaBbbResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.aaa.bbb.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitBbpInsuranceUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 保司编码
  businessCode: string(name='business_code'),
  // 第三方id，此处为天猫uid
  thirdPartId: string(name='third_part_id'),
  // 来源渠道
  channel: string(name='channel'),
  // 埋点信息
  burieds?: QueryMap(name='burieds'),
}

model InitBbpInsuranceUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 保司用户埋点信息
 * Summary: 用户登陆页面埋点
 */
async function initBbpInsuranceUser(request: InitBbpInsuranceUserRequest): InitBbpInsuranceUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initBbpInsuranceUserEx(request, headers, runtime);
}

/**
 * Description: 保司用户埋点信息
 * Summary: 用户登陆页面埋点
 */
async function initBbpInsuranceUserEx(request: InitBbpInsuranceUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitBbpInsuranceUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.bbp.insurance.user.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestTestobjectBbbRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 测试入参
  requestParam1: string(name='request_param1'),
  // 测试入参2
  requestParam2: string(name='request_param2'),
}

model QueryTestTestobjectBbbResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 测试返回参数
  response?: string(name='response'),
}

/**
 * Description: 测试添加api
 * Summary: 测试用api
 */
async function queryTestTestobjectBbb(request: QueryTestTestobjectBbbRequest): QueryTestTestobjectBbbResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestTestobjectBbbEx(request, headers, runtime);
}

/**
 * Description: 测试添加api
 * Summary: 测试用api
 */
async function queryTestTestobjectBbbEx(request: QueryTestTestobjectBbbRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestTestobjectBbbResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.testobject.bbb.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestGatewayTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryTestGatewayTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 测试使用1
 * Summary: 测试创建
 */
async function queryTestGatewayTest(request: QueryTestGatewayTestRequest): QueryTestGatewayTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestGatewayTestEx(request, headers, runtime);
}

/**
 * Description: 测试使用1
 * Summary: 测试创建
 */
async function queryTestGatewayTestEx(request: QueryTestGatewayTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestGatewayTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.gateway.test.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGongxiangTestDemoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 验证字符
  character1: string(name='character1'),
}

model QueryGongxiangTestDemoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // aaaaaa
  character1?: string(name='character1'),
}

/**
 * Description: 共享能力中心六期回归验证创建使用
 * Summary: 共享能力中心六期回归验证创建
 */
async function queryGongxiangTestDemo(request: QueryGongxiangTestDemoRequest): QueryGongxiangTestDemoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGongxiangTestDemoEx(request, headers, runtime);
}

/**
 * Description: 共享能力中心六期回归验证创建使用
 * Summary: 共享能力中心六期回归验证创建
 */
async function queryGongxiangTestDemoEx(request: QueryGongxiangTestDemoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGongxiangTestDemoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gongxiang.test.demo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySaasTestTestaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 张三
  name: string(name='name'),
  // 12
  age: long(name='age'),
}

model QuerySaasTestTestaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 男
  sex?: string(name='sex'),
}

/**
 * Description: testa
 * Summary: 测试用api
 */
async function querySaasTestTesta(request: QuerySaasTestTestaRequest): QuerySaasTestTestaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySaasTestTestaEx(request, headers, runtime);
}

/**
 * Description: testa
 * Summary: 测试用api
 */
async function querySaasTestTestaEx(request: QuerySaasTestTestaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySaasTestTestaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.saas.test.testa.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportSaasTestTestbRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 李四
  name: string(name='name'),
  // 18
  age: long(name='age'),
}

model ImportSaasTestTestbResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 男
  sex?: string(name='sex'),
}

/**
 * Description: testB
 * Summary: 测试用api
 */
async function importSaasTestTestb(request: ImportSaasTestTestbRequest): ImportSaasTestTestbResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importSaasTestTestbEx(request, headers, runtime);
}

/**
 * Description: testB
 * Summary: 测试用api
 */
async function importSaasTestTestbEx(request: ImportSaasTestTestbRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportSaasTestTestbResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.saas.test.testb.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PublishSaasTestTestcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 张三
  name: string(name='name'),
  // 14
  age: long(name='age'),
}

model PublishSaasTestTestcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 男
  sex?: string(name='sex'),
}

/**
 * Description: testc
 * Summary: 测试用api
 */
async function publishSaasTestTestc(request: PublishSaasTestTestcRequest): PublishSaasTestTestcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return publishSaasTestTestcEx(request, headers, runtime);
}

/**
 * Description: testc
 * Summary: 测试用api
 */
async function publishSaasTestTestcEx(request: PublishSaasTestTestcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PublishSaasTestTestcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.saas.test.testc.publish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ResetSaasTestTestdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // test
  name: string(name='name'),
}

model ResetSaasTestTestdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // test
  age?: string(name='age'),
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function resetSaasTestTestd(request: ResetSaasTestTestdRequest): ResetSaasTestTestdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return resetSaasTestTestdEx(request, headers, runtime);
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function resetSaasTestTestdEx(request: ResetSaasTestTestdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResetSaasTestTestdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.saas.test.testd.reset', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateSaasTestTesteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // test
  age: string(name='age'),
}

model OperateSaasTestTesteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // test
  age?: string(name='age'),
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function operateSaasTestTeste(request: OperateSaasTestTesteRequest): OperateSaasTestTesteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateSaasTestTesteEx(request, headers, runtime);
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function operateSaasTestTesteEx(request: OperateSaasTestTesteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateSaasTestTesteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.saas.test.teste.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateSaasTestTestfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // test
  name: string(name='name'),
}

model BatchcreateSaasTestTestfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // test
  age?: string(name='age'),
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function batchcreateSaasTestTestf(request: BatchcreateSaasTestTestfRequest): BatchcreateSaasTestTestfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateSaasTestTestfEx(request, headers, runtime);
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function batchcreateSaasTestTestfEx(request: BatchcreateSaasTestTestfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateSaasTestTestfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.saas.test.testf.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OpenSaasTestTestgRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // test
  name: string(name='name'),
}

model OpenSaasTestTestgResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // test
  sex?: string(name='sex'),
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function openSaasTestTestg(request: OpenSaasTestTestgRequest): OpenSaasTestTestgResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openSaasTestTestgEx(request, headers, runtime);
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function openSaasTestTestgEx(request: OpenSaasTestTestgRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenSaasTestTestgResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.saas.test.testg.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSaasTestTesthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // test
  name: string(name='name'),
}

model CreateSaasTestTesthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // test
  name?: string(name='name'),
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function createSaasTestTesth(request: CreateSaasTestTesthRequest): CreateSaasTestTesthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSaasTestTesthEx(request, headers, runtime);
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function createSaasTestTesthEx(request: CreateSaasTestTesthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSaasTestTesthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.saas.test.testh.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSaasTestTestiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model CreateSaasTestTestiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // test
  sex?: string(name='sex'),
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function createSaasTestTesti(request: CreateSaasTestTestiRequest): CreateSaasTestTestiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSaasTestTestiEx(request, headers, runtime);
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function createSaasTestTestiEx(request: CreateSaasTestTestiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSaasTestTestiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.saas.test.testi.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReplaceSaasTestTestjRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // test
  name: string(name='name'),
}

model ReplaceSaasTestTestjResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // test
  age?: string(name='age'),
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function replaceSaasTestTestj(request: ReplaceSaasTestTestjRequest): ReplaceSaasTestTestjResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return replaceSaasTestTestjEx(request, headers, runtime);
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function replaceSaasTestTestjEx(request: ReplaceSaasTestTestjRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReplaceSaasTestTestjResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.saas.test.testj.replace', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendSaasTestTestkRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // test
  age: string(name='age'),
}

model SendSaasTestTestkResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // test
  sex?: string(name='sex'),
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function sendSaasTestTestk(request: SendSaasTestTestkRequest): SendSaasTestTestkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendSaasTestTestkEx(request, headers, runtime);
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function sendSaasTestTestkEx(request: SendSaasTestTestkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendSaasTestTestkResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.saas.test.testk.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RegisterTestBizeventMessageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model RegisterTestBizeventMessageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 随机测试
 * Summary: 消息发送及消费
 */
async function registerTestBizeventMessage(request: RegisterTestBizeventMessageRequest): RegisterTestBizeventMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return registerTestBizeventMessageEx(request, headers, runtime);
}

/**
 * Description: 随机测试
 * Summary: 消息发送及消费
 */
async function registerTestBizeventMessageEx(request: RegisterTestBizeventMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RegisterTestBizeventMessageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.bizevent.message.register', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindGongxaingTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model BindGongxaingTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 共享能力六期回归验证
 * Summary: 共享能力六期回归验证
 */
async function bindGongxaingTest(request: BindGongxaingTestRequest): BindGongxaingTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindGongxaingTestEx(request, headers, runtime);
}

/**
 * Description: 共享能力六期回归验证
 * Summary: 共享能力六期回归验证
 */
async function bindGongxaingTestEx(request: BindGongxaingTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindGongxaingTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gongxaing.test.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindAaaBbbCccRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 123
  data: string(name='data'),
}

model BindAaaBbbCccResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建
 * Summary: 自动化测试创建
 */
async function bindAaaBbbCcc(request: BindAaaBbbCccRequest): BindAaaBbbCccResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindAaaBbbCccEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建
 * Summary: 自动化测试创建
 */
async function bindAaaBbbCccEx(request: BindAaaBbbCccRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindAaaBbbCccResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.aaa.bbb.ccc.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMasterstationMasterdataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户工号
  workno: string(name='workno'),
}

model QueryMasterstationMasterdataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 查询主数据
 * Summary: 查询主数据
 */
async function queryMasterstationMasterdata(request: QueryMasterstationMasterdataRequest): QueryMasterstationMasterdataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMasterstationMasterdataEx(request, headers, runtime);
}

/**
 * Description: 查询主数据
 * Summary: 查询主数据
 */
async function queryMasterstationMasterdataEx(request: QueryMasterstationMasterdataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMasterstationMasterdataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.masterstation.masterdata.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAaaBbbCccRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryAaaBbbCccResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建1
 * Summary: 自动化测试创建（勿动）
 */
async function queryAaaBbbCcc(request: QueryAaaBbbCccRequest): QueryAaaBbbCccResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAaaBbbCccEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建1
 * Summary: 自动化测试创建（勿动）
 */
async function queryAaaBbbCccEx(request: QueryAaaBbbCccRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAaaBbbCccResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.aaa.bbb.ccc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAbcAbcAbcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryAbcAbcAbcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建,用于测试API的修改
 * Summary: 自动化测试创建,用于测试API的修改勿动
 */
async function queryAbcAbcAbc(request: QueryAbcAbcAbcRequest): QueryAbcAbcAbcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAbcAbcAbcEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建,用于测试API的修改
 * Summary: 自动化测试创建,用于测试API的修改勿动
 */
async function queryAbcAbcAbcEx(request: QueryAbcAbcAbcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAbcAbcAbcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.abc.abc.abc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ResetComCnCcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // orderid
  orderId: string(name='order_id'),
}

model ResetComCnCcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单id
  orderId?: string(name='order_id'),
}

/**
 * Description: 测试api描述
 * Summary: api简介
 */
async function resetComCnCc(request: ResetComCnCcRequest): ResetComCnCcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return resetComCnCcEx(request, headers, runtime);
}

/**
 * Description: 测试api描述
 * Summary: api简介
 */
async function resetComCnCcEx(request: ResetComCnCcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResetComCnCcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.com.cn.cc.reset', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportComCnTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 1
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
}

model ImportComCnTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 长捷,qiujianglong.qjl
 * Summary: api简介
 */
async function importComCnTest(request: ImportComCnTestRequest): ImportComCnTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importComCnTestEx(request, headers, runtime);
}

/**
 * Description: 长捷,qiujianglong.qjl
 * Summary: api简介
 */
async function importComCnTestEx(request: ImportComCnTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportComCnTestResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'demo.com.cn.test.import',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "OK")) {
      var importComCnTestResponse = new ImportComCnTestResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return importComCnTestResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.com.cn.test.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 上传文件作用的openapi method
  apiCode: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ XNameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntcloudGatewayxFileUploadEx(request, headers, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

