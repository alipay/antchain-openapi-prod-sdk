import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.308',
    _prod_code = 'DEMO',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'centre-openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// host
model Host {
  // test_2e1ae924805f
  systemName: string(name='system_name', example='test_2e1ae924805f'),
  // 地址
  address: string(name='address', example='test_941f18a4013b'),
}

// 身份
model Identity {
  // ak
  ak: string(name='ak', example='test_0efe42463f8f'),
}

// SCRealEstateQueryResponseData
model SCRealEstateQueryResponseData {
  // area_code
  areaCode: string(name='area_code', example='510108'),
  // area_name
  areaName: string(name='area_name', example='area_name'),
  // bdcdyh
  bdcdyh: string(name='bdcdyh', example='bdcdyh'),
  // bdcqzh
  bdcqzh: string(name='bdcqzh', example='bdcqzh'),
  // djsj
  djsj: string(name='djsj', example='djsj'),
  // fwyt1
  fwyt1: string(name='fwyt1', example='fwyt1'),
  // gyqk
  gyqk: string(name='gyqk', example='gyqk'),
  // qllx
  qllx: string(name='qllx', example='qllx'),
  // qlrmc
  qlrmc: string(name='qlrmc', example='qlrmc'),
  // scjzmj
  scjzmj: string(name='scjzmj', example='scjzmj'),
}

// 头文件
model Header {
  // 身份信息
  identity: Identity(name='identity', example='"identity": {       "ak": "test_0efe42463f8f"     }'),
  // 调用链编号
  traceId: string(name='trace_id', example='test_6db79b5d2e48'),
  // host信息
  host: Host(name='host', example='"host": {       "systemName": "test_2e1ae924805f",       "address": "test_941f18a4013b"     }'),
  // 方向
  direction: string(name='direction', example='REQUEST'),
  // 请求类型
  requestType: string(name='request_type', example='INVOKE'),
  // 协议版本
  protocolVersion: string(name='protocol_version', example='test_6709e9002606'),
}

// routeCondition
model RouteCondition {
  // 渠道编号
  channelId: string(name='channel_id', example='HZZKZTKJ'),
}

// testAtestB
model SCRealEstateQueryBody {
}

// Demo类1
model DemoClass {
  // 字符串测试
  someString: string(name='some_string', example='some string'),
  // 日期测试
  someDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='some_date', example='3'),
  // Boolean测试
  someBoolean: boolean(name='some_boolean', example='true'),
  // 整数测试
  someInt: long(maximum=2000, minimum=1, name='some_int', example='3'),
  // 列表测试
  someList: [ string ](name='some_list', example=''),
}

// SCRealEstateQueryRequestPayload
model SCRealEstateQueryRequestPayload {
  // xm
  xm: string(name='xm', example='张三'),
  // sfz
  sfz: string(name='sfz', example='51382219970820817X'),
}

// 键值对，兼容map用
model NameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

// 编码
model Cmd {
  // cmd编码
  cmdCode: string(name='cmd_code', example='SC-RealEstate-Query'),
  // 版本号
  version: string(name='version', example='test_d19bd9d59915'),
}

// SCRealEstateQueryResponsePayload
model SCRealEstateQueryResponsePayload {
  // code
  code: string(name='code', example='200'),
  // data
  data: [ SCRealEstateQueryResponseData ](name='data', example=''),
  // uuid
  uuid: string(name='uuid', example='uuid'),
  // ret_msg
  retMsg: string(name='ret_msg', example='ret_msg'),
}

// 大安全佐罗测试接口结构体
model FaceImage {
  // 123
  content?: string(name='content', example='123'),
  // 213
  rect?: string(name='rect', example='13'),
}

// SCRealEstateQuery
model SCRealEstateQueryInvokerRequest {
  // header
  header: Header(name='header', example='"header": {}'),
  // body
  body: SCRealEstateQueryBody(name='body', example='"body":{}'),
}

// 用于上海非金迭代的测试使用
model ShangHaiTest {
  // string
  param1?: string(name='param_1', example='test'),
  // number
  param2?: long(name='param_2', example='1'),
}

// init接口响应结果，map类型
model InitPack {
  // 返回接收到请求的当前时间
  time: string(name='time', example='2022-11-07 14:48'),
  // 操作人
  operator: string(name='operator', example='wanyi'),
  // 请求编号
  count: long(name='count', example='1'),
}

// 数字类型
model NumberTest {
  // 1
  parameter1: long(maximum=5, minimum=1, name='parameter_1', example='1'),
  // 2
  parameter2: long(maximum=5, minimum=1, name='parameter_2', example='2'),
  // 3
  parameter3: long(maximum=5, minimum=1, name='parameter_3', example='3'),
  // 4
  parameter4: long(maximum=5, minimum=1, name='parameter_4', example='4'),
  // 5
  parameter5: DemoClass(name='parameter_5', example='5'),
}

// testAAAA
model TestClass {
  // 1
  test: string(name='test', example='testclass'),
  // 2
  demo: string(name='demo', example='testclass'),
  // 3
  demo1: string(name='demo1', example='id2'),
  // 22
  demo2: string(name='demo2', example='12'),
}

// TestStruct
model TestStruct {
  // x
  x: string(name='x', example='x'),
  // y
  y: DemoClass(name='y', example='y'),
  // z
  z: [ DemoClass ](name='z', example=''),
}

// 测试
model TestObject {
  // 主键
  id: long(name='id', example='12'),
  // 名称
  name: string(name='name', example='小蜜'),
}

// DemoTestx
model DemoTestx {
  // ability_id
  abilityId: string(name='ability_id', example='8000'),
}

// 另一个Demo类
model AnotherClass {
  // 测试字段
  bar: string(name='bar', example='some string'),
  // 引用字段
  ref: DemoClass(name='ref', example=''),
  // 列表引用Struct
  refList?: [ DemoClass ](name='refList', example=''),
}

// 自动生成单测代码model
model AutoCodeModel {
  // 111
  modelStringParam: string(name='model_string_param', example='111'),
  // 111
  modelDateParam: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='model_date_param', example='2018-10-10T10:10:00Z'),
  // 111
  modelArrayParam: [ string ](name='model_array_param', example='111'),
}

// SCRealEstateQueryRequestBody
model SCRealEstateQueryRequestBody {
  // cmd
  cmd: Cmd(name='cmd', example='"cmd": {       "cmdCode": "SC-RealEstate-Query",       "version": "test_d19bd9d59915"     }'),
  // 路由信息
  routeCondition: RouteCondition(name='route_condition', example='"routeCondition": {       "channelId": "HZZKZTKJ"     }'),
  // requestId
  requestId: string(name='request_id', example='test_8c964bb7781a'),
  // payload
  payload: SCRealEstateQueryRequestPayload(name='payload', example='{ "xm": "张三",   "sfz": "51382219970820817X"}'),
}

// 测试
model TestAPIObject {
  // test
  id: long(name='id', example='21'),
}

// ResponseBody
model SCRealEstateQueryResponseBody {
  // cost
  cost: long(name='cost', example='1234'),
  // response_status
  responseStatus: string(name='response_status', example='response_status'),
  // response_code
  responseCode: string(name='response_code', example='200'),
  // request_id
  requestId: string(name='request_id', example='request_id'),
  // payload
  payload: SCRealEstateQueryResponsePayload(name='payload', example=''),
}

// Map<String,Object> 集合
model QueryMap {
  // 键值
  name: string(name='name', example='BUSINESS_CODE'),
  // 额外用户信息
  value?: [ NameValuePair ](name='value', example=''),
}

// 123
model TestA {
  // 1
  parameter1: string(name='parameter_1', example='1'),
  // 2
  parameter2: string(name='parameter_2', example='2'),
  // 3
  parameter3: string(name='parameter_3', example='3'),
  // 4
  parameter4: string(name='parameter_4', example='4'),
  // 5
  parameter5: string(name='parameter_5', example='5'),
  // 6
  parameter6: string(name='parameter_6', example='6'),
  // 7
  parameter7: string(name='parameter_7', example='7'),
  // 8
  parameter8: string(name='parameter_8', example='8'),
  // 9
  parameter9: string(name='parameter_9', example='9'),
  // 10
  parameter10: string(name='parameter_10', example='10'),
}

// 自动化测试创建（勿删）
model TestsT {
}

// groupA分组结构体
model GroupAClass {
  // -
  productInstanceId?: string(name='product_instance_id', example='-'),
  // 防伪码类型
  codeType: string(name='code_type', example='103001'),
  // 防伪码码值
  code: string(name='code', example='600011111'),
}

// 自动化测试创建（用于测试编辑功能，勿删）
model AbcdEfgh {
}

// 用于测试预发ob的同步_已编辑
model PreTestUse {
  // 1
  param1: string(name='param_1', example='1'),
  // 11
  param2: long(name='param_2', example='11'),
  // boolean
  param3: boolean(name='param_3', example='true, false'),
}

// 键值对
model XNameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

model StatusGatewayCheckRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model StatusGatewayCheckResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // OK
  status?: string(name='status'),
}

/**
 * Description: Demo接口，返回当前服务器当前状态1
 * Summary: 检查服务状态
 */
async function statusGatewayCheck(request: StatusGatewayCheckRequest): StatusGatewayCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return statusGatewayCheckEx(request, headers, runtime);
}

/**
 * Description: Demo接口，返回当前服务器当前状态1
 * Summary: 检查服务状态
 */
async function statusGatewayCheckEx(request: StatusGatewayCheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StatusGatewayCheckResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.status', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EchoGatewayCheckRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // input_array
  inputArray: [ TestStruct ](name='input_array'),
  // file_id
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
  // 1
  inputInt: long(maximum=40, minimum=10, name='input_int'),
  // 测试一下
  fileName: string(name='file_name'),
}

model EchoGatewayCheckResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // output_demo
  outputDemo?: DemoClass(name='output_demo'),
  // output_string
  outputString?: string(name='output_string'),
  // file_url
  fileUrl?: string(name='file_url'),
}

/**
 * Description: Demo接口，返回当前输入的值
 * Summary: 返回输入值1
 */
async function echoGatewayCheck(request: EchoGatewayCheckRequest): EchoGatewayCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return echoGatewayCheckEx(request, headers, runtime);
}

/**
 * Description: Demo接口，返回当前输入的值
 * Summary: 返回输入值1
 */
async function echoGatewayCheckEx(request: EchoGatewayCheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EchoGatewayCheckResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'demo.gateway.check.echo',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "OK")) {
      var echoGatewayCheckResponse = new EchoGatewayCheckResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return echoGatewayCheckResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.echo', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayMyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 字符串类型入参
  test1: string(name='test_1'),
  // 数字入参
  test2: long(name='test_2'),
  // 布尔值入参
  test3: boolean(name='test_3'),
}

model QueryGatewayMyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: aaa
 * Summary: 测试demo
 */
async function queryGatewayMy(request: QueryGatewayMyRequest): QueryGatewayMyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayMyEx(request, headers, runtime);
}

/**
 * Description: aaa
 * Summary: 测试demo
 */
async function queryGatewayMyEx(request: QueryGatewayMyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayMyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.my.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayCheckEchotimeoutRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 10
  timeout?: string(name='timeout'),
}

model QueryGatewayCheckEchotimeoutResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 222
  stauts?: string(name='stauts'),
  // ok
  msg?: string(name='msg'),
}

/**
 * Description: 超时测试
 * Summary: 超时
 */
async function queryGatewayCheckEchotimeout(request: QueryGatewayCheckEchotimeoutRequest): QueryGatewayCheckEchotimeoutResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayCheckEchotimeoutEx(request, headers, runtime);
}

/**
 * Description: 超时测试
 * Summary: 超时
 */
async function queryGatewayCheckEchotimeoutEx(request: QueryGatewayCheckEchotimeoutRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayCheckEchotimeoutResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.echotimeout.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayCheckEchotenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryGatewayCheckEchotenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 222
  status?: string(name='status'),
  // ok
  msg?: string(name='msg'),
}

/**
 * Description: 10  测测aa
 * Summary: 10s
 */
async function queryGatewayCheckEchoten(request: QueryGatewayCheckEchotenRequest): QueryGatewayCheckEchotenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayCheckEchotenEx(request, headers, runtime);
}

/**
 * Description: 10  测测aa
 * Summary: 10s
 */
async function queryGatewayCheckEchotenEx(request: QueryGatewayCheckEchotenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayCheckEchotenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.echoten.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAdAsdAsdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 1111
  bnumber: string(maxLength=2, minLength=1, name='bnumber'),
}

model QueryAdAsdAsdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 简介简介简介s
 * Summary: 简介简介
 */
async function queryAdAsdAsd(request: QueryAdAsdAsdRequest): QueryAdAsdAsdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAdAsdAsdEx(request, headers, runtime);
}

/**
 * Description: 简介简介简介s
 * Summary: 简介简介
 */
async function queryAdAsdAsdEx(request: QueryAdAsdAsdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAdAsdAsdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.ad.asd.asd.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateCjtestCjRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 测试参数
  var1: string(name='var1'),
  // 测试参数2
  var2: string(name='var2'),
  // 被授权机构did
  subject?: string(name='subject'),
  // test
  var3: long(maximum=100, minimum=1, name='var3'),
  // 111
  var4: string(maxLength=200, minLength=2, name='var4'),
}

model UpdateCjtestCjResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 测试返回参数1
  return1?: string(name='return1'),
}

/**
 * Description: 测试网关评审能力
 * Summary: 评审测试
 */
async function updateCjtestCj(request: UpdateCjtestCjRequest): UpdateCjtestCjResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateCjtestCjEx(request, headers, runtime);
}

/**
 * Description: 测试网关评审能力
 * Summary: 评审测试
 */
async function updateCjtestCjEx(request: UpdateCjtestCjRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateCjtestCjResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.cjtest.cj.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadCjtestSourceFileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // file
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
}

model UploadCjtestSourceFileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // test
  res?: string(name='res'),
}

/**
 * Description: 文件测试1
 * Summary: 文件测试
 */
async function uploadCjtestSourceFile(request: UploadCjtestSourceFileRequest): UploadCjtestSourceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadCjtestSourceFileEx(request, headers, runtime);
}

/**
 * Description: 文件测试1
 * Summary: 文件测试
 */
async function uploadCjtestSourceFileEx(request: UploadCjtestSourceFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadCjtestSourceFileResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'demo.cjtest.source.file.upload',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "OK")) {
      var uploadCjtestSourceFileResponse = new UploadCjtestSourceFileResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return uploadCjtestSourceFileResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.cjtest.source.file.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitGatewayRoadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求编号
  count: long(maximum=5, minimum=1, name='count'),
  // 请求时间
  time: string(name='time'),
  // 请求描述
  desc?: string(maxLength=15, minLength=5, name='desc'),
  // 操作人
  operator: string(name='operator'),
}

model InitGatewayRoadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回desc
  initDesc?: string(name='init_desc'),
  // 组合返回请求结果
  initPack?: InitPack(name='init_pack'),
}

/**
 * Description: 根据入参组合返回结果，Fr 自动化连通性测试。
 * Summary: road.init（Fr AutoT）
 */
async function initGatewayRoad(request: InitGatewayRoadRequest): InitGatewayRoadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initGatewayRoadEx(request, headers, runtime);
}

/**
 * Description: 根据入参组合返回结果，Fr 自动化连通性测试。
 * Summary: road.init（Fr AutoT）
 */
async function initGatewayRoadEx(request: InitGatewayRoadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitGatewayRoadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.road.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayEmbedRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例参数
  timeout?: string(name='timeout'),
}

model QueryGatewayEmbedResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 近端网关测试接口
 * Summary: 近端网关测试接口（勿删）
 */
async function queryGatewayEmbed(request: QueryGatewayEmbedRequest): QueryGatewayEmbedResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayEmbedEx(request, headers, runtime);
}

/**
 * Description: 近端网关测试接口
 * Summary: 近端网关测试接口（勿删）
 */
async function queryGatewayEmbedEx(request: QueryGatewayEmbedRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayEmbedResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.embed.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateGatewayRoadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求时间
  time: string(name='time'),
  // 操作人
  operator: string(name='operator'),
  // 请求编号
  count: long(name='count'),
  // 原信息
  originInfo: string(name='origin_info'),
}

model UpdateGatewayRoadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 更新后返回info
  updInfo?: string(name='upd_info'),
  // 组合返回请求结果
  updPack?: InitPack(name='upd_pack'),
}

/**
 * Description: 更新入参后返回结果，Fr 自动化连通性测试。
 * Summary: road.upd（Fr AutoT）
 */
async function updateGatewayRoad(request: UpdateGatewayRoadRequest): UpdateGatewayRoadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateGatewayRoadEx(request, headers, runtime);
}

/**
 * Description: 更新入参后返回结果，Fr 自动化连通性测试。
 * Summary: road.upd（Fr AutoT）
 */
async function updateGatewayRoadEx(request: UpdateGatewayRoadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateGatewayRoadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.road.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitCjtestAcopmResRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 111
  timeout: long(name='timeout'),
  // 11111
  msg: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='msg'),
  // 111
  timeout111: [ string ](name='timeout111'),
  // 34134
  msg1111: AutoCodeModel(name='msg1111'),
}

model InitCjtestAcopmResResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: cj test
 * Summary: cj test1
 */
async function initCjtestAcopmRes(request: InitCjtestAcopmResRequest): InitCjtestAcopmResResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initCjtestAcopmResEx(request, headers, runtime);
}

/**
 * Description: cj test
 * Summary: cj test1
 */
async function initCjtestAcopmResEx(request: InitCjtestAcopmResRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitCjtestAcopmResResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.cjtest.acopm.res.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayRoadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询输入
  data: string(name='data'),
}

model QueryGatewayRoadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询返回
  queryResult?: string(name='query_result'),
}

/**
 * Description: 查询并返回结果，Fr 自动化连通性测试。
 * Summary: road.query（Fr AutoT）
 */
async function queryGatewayRoad(request: QueryGatewayRoadRequest): QueryGatewayRoadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayRoadEx(request, headers, runtime);
}

/**
 * Description: 查询并返回结果，Fr 自动化连通性测试。
 * Summary: road.query（Fr AutoT）
 */
async function queryGatewayRoadEx(request: QueryGatewayRoadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayRoadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.road.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecGatewayRoadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 计算值输入
  execNum: long(name='exec_num'),
}

model ExecGatewayRoadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 计算值返回
  execNumEcho?: long(name='exec_num_echo'),
}

/**
 * Description: 执行计算后返回，Fr 自动化连通性测试。
 * Summary: road.exec（Fr AutoT）
 */
async function execGatewayRoad(request: ExecGatewayRoadRequest): ExecGatewayRoadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execGatewayRoadEx(request, headers, runtime);
}

/**
 * Description: 执行计算后返回，Fr 自动化连通性测试。
 * Summary: road.exec（Fr AutoT）
 */
async function execGatewayRoadEx(request: ExecGatewayRoadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecGatewayRoadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.road.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadtestTimeThreeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ms
  timeout: long(name='timeout'),
}

model QueryLoadtestTimeThreeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 200
  stauts?: string(name='stauts'),
  // ok
  msg?: string(name='msg'),
}

/**
 * Description: 压测接口3
 * Summary: 压测接口3
 */
async function queryLoadtestTimeThree(request: QueryLoadtestTimeThreeRequest): QueryLoadtestTimeThreeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadtestTimeThreeEx(request, headers, runtime);
}

/**
 * Description: 压测接口3
 * Summary: 压测接口3
 */
async function queryLoadtestTimeThreeEx(request: QueryLoadtestTimeThreeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadtestTimeThreeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.loadtest.time.three.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAutoTestCodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 111
  stringParam1: string(name='string_param_1'),
  // 222
  stringParam2?: string(name='string_param_2'),
  // 111
  numberParam1: long(name='number_param_1'),
  // 222
  numberParam2?: long(name='number_param_2'),
  // 111
  boolParam1: boolean(name='bool_param_1'),
  // 222
  boolParam2?: boolean(name='bool_param_2'),
  // 111
  dateParam1: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='date_param_1'),
  // 222
  dateParam2?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='date_param_2'),
  // 111
  arrayParam1: [ string ](name='array_param_1'),
  // 222
  arrayParam2?: [ string ](name='array_param_2'),
  // 111
  structParam1: AutoCodeModel(name='struct_param_1'),
  // 222
  structParam2?: AutoCodeModel(name='struct_param_2'),
}

model CreateAutoTestCodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 测试自动生成回归测试代码
 * Summary: 测试自动生成回归测试代码
 */
async function createAutoTestCode(request: CreateAutoTestCodeRequest): CreateAutoTestCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAutoTestCodeEx(request, headers, runtime);
}

/**
 * Description: 测试自动生成回归测试代码
 * Summary: 测试自动生成回归测试代码
 */
async function createAutoTestCodeEx(request: CreateAutoTestCodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAutoTestCodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.auto.test.code.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDemoAbcAbcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryDemoAbcAbcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 123
 * Summary: 测试用api
 */
async function queryDemoAbcAbc(request: QueryDemoAbcAbcRequest): QueryDemoAbcAbcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDemoAbcAbcEx(request, headers, runtime);
}

/**
 * Description: 123
 * Summary: 测试用api
 */
async function queryDemoAbcAbcEx(request: QueryDemoAbcAbcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDemoAbcAbcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.demo.abc.abc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXxxxTestxAaaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 1
  xvalue: string(name='xvalue'),
}

model QueryXxxxTestxAaaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: test
 * Summary: test
 */
async function queryXxxxTestxAaa(request: QueryXxxxTestxAaaRequest): QueryXxxxTestxAaaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXxxxTestxAaaEx(request, headers, runtime);
}

/**
 * Description: test
 * Summary: test
 */
async function queryXxxxTestxAaaEx(request: QueryXxxxTestxAaaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXxxxTestxAaaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.xxxx.testx.aaa.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestTestaTestaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryTestTestaTestaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: test
 * Summary: test
 */
async function queryTestTestaTesta(request: QueryTestTestaTestaRequest): QueryTestTestaTestaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestTestaTestaEx(request, headers, runtime);
}

/**
 * Description: test
 * Summary: test
 */
async function queryTestTestaTestaEx(request: QueryTestTestaTestaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestTestaTestaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.testa.testa.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryInstanceidRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数字
  count: string(name='count'),
  // 姓名
  oprator: string(name='oprator'),
  // 结构体
  struct: TestA(name='struct'),
}

model QueryInstanceidRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: test
 * Summary: test
 */
async function queryInstanceidRule(request: QueryInstanceidRuleRequest): QueryInstanceidRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryInstanceidRuleEx(request, headers, runtime);
}

/**
 * Description: test
 * Summary: test
 */
async function queryInstanceidRuleEx(request: QueryInstanceidRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryInstanceidRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.instanceid.rule.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBusinessTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // jzq
  name: string(name='name'),
  // 1
  count: long(name='count'),
}

model QueryBusinessTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: test
 * Summary: test
 */
async function queryBusinessTest(request: QueryBusinessTestRequest): QueryBusinessTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBusinessTestEx(request, headers, runtime);
}

/**
 * Description: test
 * Summary: test
 */
async function queryBusinessTestEx(request: QueryBusinessTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBusinessTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.business.test.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayCheckEchotimeoutokRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 耗时时间
  timeout: string(name='timeout'),
}

model QueryGatewayCheckEchotimeoutokResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回OK
  stauts?: string(name='stauts'),
  // 结果描述
  msg?: string(name='msg'),
}

/**
 * Description: 设置下游耗时
 * Summary: 超时（加密）
 */
async function queryGatewayCheckEchotimeoutok(request: QueryGatewayCheckEchotimeoutokRequest): QueryGatewayCheckEchotimeoutokResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayCheckEchotimeoutokEx(request, headers, runtime);
}

/**
 * Description: 设置下游耗时
 * Summary: 超时（加密）
 */
async function queryGatewayCheckEchotimeoutokEx(request: QueryGatewayCheckEchotimeoutokRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayCheckEchotimeoutokResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.echotimeoutok.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBusinessCodeTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 1
  code: long(name='code'),
  // 1
  name: string(name='name'),
}

model QueryBusinessCodeTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 测试使用
 * Summary: testuse1
 */
async function queryBusinessCodeTest(request: QueryBusinessCodeTestRequest): QueryBusinessCodeTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBusinessCodeTestEx(request, headers, runtime);
}

/**
 * Description: 测试使用
 * Summary: testuse1
 */
async function queryBusinessCodeTestEx(request: QueryBusinessCodeTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBusinessCodeTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.business.code.test.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model MatchBusinessAndInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // L5
  businessCode: string(name='business_code'),
  // 实例
  instanceCode: string(name='instance_code'),
}

model MatchBusinessAndInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 双百&门户&网关，停服决策测试使用
 * Summary: 商业化规则测试
 */
async function matchBusinessAndInstance(request: MatchBusinessAndInstanceRequest): MatchBusinessAndInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return matchBusinessAndInstanceEx(request, headers, runtime);
}

/**
 * Description: 双百&门户&网关，停服决策测试使用
 * Summary: 商业化规则测试
 */
async function matchBusinessAndInstanceEx(request: MatchBusinessAndInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): MatchBusinessAndInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.business.and.instance.match', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDevelopTestUseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 入参1
  stringparameter: string(name='stringparameter'),
  // 数字入参
  numberparameter: long(name='numberparameter'),
}

model QueryDevelopTestUseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 研发自测使用API
 * Summary: 研发自测使用API
 */
async function queryDevelopTestUse(request: QueryDevelopTestUseRequest): QueryDevelopTestUseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDevelopTestUseEx(request, headers, runtime);
}

/**
 * Description: 研发自测使用API
 * Summary: 研发自测使用API
 */
async function queryDevelopTestUseEx(request: QueryDevelopTestUseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDevelopTestUseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.develop.test.use.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyDevelopTestTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 入参
  stringparameter: string(name='stringparameter'),
  // number类型入参
  numberparameter: long(name='numberparameter'),
}

model VerifyDevelopTestTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 资损防控研发自测使用API
 * Summary: 研发自测使用API
 */
async function verifyDevelopTestTest(request: VerifyDevelopTestTestRequest): VerifyDevelopTestTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyDevelopTestTestEx(request, headers, runtime);
}

/**
 * Description: 资损防控研发自测使用API
 * Summary: 研发自测使用API
 */
async function verifyDevelopTestTestEx(request: VerifyDevelopTestTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyDevelopTestTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.develop.test.test.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportPreObWriteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model ImportPreObWriteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用于测试预发环境RDS切OB之后的同步功能
 * Summary: 预发RDS切OB测试
 */
async function importPreObWrite(request: ImportPreObWriteRequest): ImportPreObWriteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importPreObWriteEx(request, headers, runtime);
}

/**
 * Description: 用于测试预发环境RDS切OB之后的同步功能
 * Summary: 预发RDS切OB测试
 */
async function importPreObWriteEx(request: ImportPreObWriteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportPreObWriteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.pre.ob.write.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitBbpInsuranceUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 保司编码
  businessCode: string(name='business_code'),
  // 第三方id，此处为天猫uid
  thirdPartId: string(name='third_part_id'),
  // 来源渠道
  channel: string(name='channel'),
  // 埋点信息
  burieds: QueryMap(name='burieds'),
}

model InitBbpInsuranceUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 123
  startDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_date'),
}

/**
 * Description: 保司用户埋点信息
 * Summary: 用户登陆页面埋点
 */
async function initBbpInsuranceUser(request: InitBbpInsuranceUserRequest): InitBbpInsuranceUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initBbpInsuranceUserEx(request, headers, runtime);
}

/**
 * Description: 保司用户埋点信息
 * Summary: 用户登陆页面埋点
 */
async function initBbpInsuranceUserEx(request: InitBbpInsuranceUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitBbpInsuranceUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.bbp.insurance.user.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateShanghaiPreTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参数1
  param1: string(name='param1'),
}

model OperateShanghaiPreTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用于上海非金生产环境的同步测试
 * Summary: 上海非金生产环境测试
 */
async function operateShanghaiPreTest(request: OperateShanghaiPreTestRequest): OperateShanghaiPreTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateShanghaiPreTestEx(request, headers, runtime);
}

/**
 * Description: 用于上海非金生产环境的同步测试
 * Summary: 上海非金生产环境测试
 */
async function operateShanghaiPreTestEx(request: OperateShanghaiPreTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateShanghaiPreTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.shanghai.pre.test.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCjtestCjResRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 1
  test1: long(maximum=100, minimum=1, name='test1'),
  // 2
  test2: long(maximum=200, minimum=100, name='test2'),
  // test
  test3: [ long ](name='test3'),
  // testclass
  testclass: Host(name='testclass'),
}

model QueryCjtestCjResResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: cj test
 * Summary: cj test1
 */
async function queryCjtestCjRes(request: QueryCjtestCjResRequest): QueryCjtestCjResResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCjtestCjResEx(request, headers, runtime);
}

/**
 * Description: cj test
 * Summary: cj test1
 */
async function queryCjtestCjResEx(request: QueryCjtestCjResRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCjtestCjResResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.cjtest.cj.res.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadtestTimeOneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 毫秒值
  timeout: long(name='timeout'),
}

model QueryLoadtestTimeOneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 200
  stauts?: string(name='stauts'),
  // ok
  msg?: string(name='msg'),
}

/**
 * Description: 压测接口1
 * Summary: 压测接口1
 */
async function queryLoadtestTimeOne(request: QueryLoadtestTimeOneRequest): QueryLoadtestTimeOneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadtestTimeOneEx(request, headers, runtime);
}

/**
 * Description: 压测接口1
 * Summary: 压测接口1
 */
async function queryLoadtestTimeOneEx(request: QueryLoadtestTimeOneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadtestTimeOneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.loadtest.time.one.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadtestTimeTwoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 毫秒
  timeout: long(name='timeout'),
}

model QueryLoadtestTimeTwoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 200
  stauts?: string(name='stauts'),
  // ok
  msg?: string(name='msg'),
}

/**
 * Description: 压测接口2
 * Summary: 压测接口2
 */
async function queryLoadtestTimeTwo(request: QueryLoadtestTimeTwoRequest): QueryLoadtestTimeTwoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadtestTimeTwoEx(request, headers, runtime);
}

/**
 * Description: 压测接口2
 * Summary: 压测接口2
 */
async function queryLoadtestTimeTwoEx(request: QueryLoadtestTimeTwoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadtestTimeTwoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.loadtest.time.two.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestGatewayTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryTestGatewayTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 测试使用1
 * Summary: 测试创建
 */
async function queryTestGatewayTest(request: QueryTestGatewayTestRequest): QueryTestGatewayTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestGatewayTestEx(request, headers, runtime);
}

/**
 * Description: 测试使用1
 * Summary: 测试创建
 */
async function queryTestGatewayTestEx(request: QueryTestGatewayTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestGatewayTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.gateway.test.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAcopmAtoWithholdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
}

model QueryAcopmAtoWithholdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 协议生效时间
  validTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='valid_time'),
  // 协议当前状态 1. UNSIGNED：未签约 2. SIG...
  // 
  status?: string(name='status'),
  // 协议失效时间
  invalidTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='invalid_time'),
  // 协议签署时间
  signTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='sign_time'),
}

/**
 * Description: 测试
 * Summary: 测试ato异常
 */
async function queryAcopmAtoWithhold(request: QueryAcopmAtoWithholdRequest): QueryAcopmAtoWithholdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAcopmAtoWithholdEx(request, headers, runtime);
}

/**
 * Description: 测试
 * Summary: 测试ato异常
 */
async function queryAcopmAtoWithholdEx(request: QueryAcopmAtoWithholdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAcopmAtoWithholdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.acopm.ato.withhold.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApdevcenterTestobjectTestsubRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // test
  test: string(maxLength=200, minLength=200, name='test'),
}

model QueryApdevcenterTestobjectTestsubResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: test
 * Summary: 新增API测试查询接口(只是测试使用)
 */
async function queryApdevcenterTestobjectTestsub(request: QueryApdevcenterTestobjectTestsubRequest): QueryApdevcenterTestobjectTestsubResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApdevcenterTestobjectTestsubEx(request, headers, runtime);
}

/**
 * Description: test
 * Summary: 新增API测试查询接口(只是测试使用)
 */
async function queryApdevcenterTestobjectTestsubEx(request: QueryApdevcenterTestobjectTestsubRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApdevcenterTestobjectTestsubResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.apdevcenter.testobject.testsub.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApdevcenterTestobjectTestsubaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键
  id: long(name='id'),
  // 名称
  name: string(maxLength=521, name='name'),
  // test
  test: string(name='test'),
}

model QueryApdevcenterTestobjectTestsubaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 主键
  id?: long(name='id'),
  // 名称
  name?: string(name='name'),
  // 描述
  desc?: string(name='desc'),
}

/**
 * Description: testtest
 * Summary: 新增API测试查询接口(只是测试使用)
 */
async function queryApdevcenterTestobjectTestsuba(request: QueryApdevcenterTestobjectTestsubaRequest): QueryApdevcenterTestobjectTestsubaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApdevcenterTestobjectTestsubaEx(request, headers, runtime);
}

/**
 * Description: testtest
 * Summary: 新增API测试查询接口(只是测试使用)
 */
async function queryApdevcenterTestobjectTestsubaEx(request: QueryApdevcenterTestobjectTestsubaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApdevcenterTestobjectTestsubaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.apdevcenter.testobject.testsuba.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestFilesystemFileinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键
  id: long(name='id'),
  // 名称
  name: string(name='name'),
}

model QueryTestFilesystemFileinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 主键
  id?: long(name='id'),
  // 名称
  name?: string(name='name'),
}

/**
 * Description: test
 * Summary: 新增API测试查询接口(只是测试使用)
 */
async function queryTestFilesystemFileinfo(request: QueryTestFilesystemFileinfoRequest): QueryTestFilesystemFileinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestFilesystemFileinfoEx(request, headers, runtime);
}

/**
 * Description: test
 * Summary: 新增API测试查询接口(只是测试使用)
 */
async function queryTestFilesystemFileinfoEx(request: QueryTestFilesystemFileinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestFilesystemFileinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.filesystem.fileinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTestproductTestobjectTestsubaaaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // test
  id: long(name='id'),
  // test
  name: string(name='name'),
}

model QueryTestproductTestobjectTestsubaaaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // test
  name?: string(name='name'),
}

/**
 * Description: test
 * Summary: 新增API测试查询接口(只是测试使用)
 */
async function queryTestproductTestobjectTestsubaaa(request: QueryTestproductTestobjectTestsubaaaRequest): QueryTestproductTestobjectTestsubaaaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTestproductTestobjectTestsubaaaEx(request, headers, runtime);
}

/**
 * Description: test
 * Summary: 新增API测试查询接口(只是测试使用)
 */
async function queryTestproductTestobjectTestsubaaaEx(request: QueryTestproductTestobjectTestsubaaaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTestproductTestobjectTestsubaaaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.testproduct.testobject.testsubaaa.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RegisterTestBizeventMessageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model RegisterTestBizeventMessageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 随机测试
 * Summary: 消息发送及消费
 */
async function registerTestBizeventMessage(request: RegisterTestBizeventMessageRequest): RegisterTestBizeventMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return registerTestBizeventMessageEx(request, headers, runtime);
}

/**
 * Description: 随机测试
 * Summary: 消息发送及消费
 */
async function registerTestBizeventMessageEx(request: RegisterTestBizeventMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RegisterTestBizeventMessageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.test.bizevent.message.register', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindAaaBbbCccRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 123
  date: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='date'),
  // 123
  data: string(name='data'),
}

model BindAaaBbbCccResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建test，请勿修改、删除
 * Summary: 自动化测试创建test1
 */
async function bindAaaBbbCcc(request: BindAaaBbbCccRequest): BindAaaBbbCccResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindAaaBbbCccEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建test，请勿修改、删除
 * Summary: 自动化测试创建test1
 */
async function bindAaaBbbCccEx(request: BindAaaBbbCccRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindAaaBbbCccResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.aaa.bbb.ccc.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAaaBbbCccRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryAaaBbbCccResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建111
 * Summary: 自动化测试创建（勿动）
 */
async function queryAaaBbbCcc(request: QueryAaaBbbCccRequest): QueryAaaBbbCccResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAaaBbbCccEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建111
 * Summary: 自动化测试创建（勿动）
 */
async function queryAaaBbbCccEx(request: QueryAaaBbbCccRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAaaBbbCccResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.aaa.bbb.ccc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAbcAbcAbcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryAbcAbcAbcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建,用于测试API的修改
 * Summary: 自动化测试创建,用于测试API的修改勿动
 */
async function queryAbcAbcAbc(request: QueryAbcAbcAbcRequest): QueryAbcAbcAbcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAbcAbcAbcEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建,用于测试API的修改
 * Summary: 自动化测试创建,用于测试API的修改勿动
 */
async function queryAbcAbcAbcEx(request: QueryAbcAbcAbcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAbcAbcAbcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.abc.abc.abc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindAaaBbbCcdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model BindAaaBbbCcdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 123
 * Summary: 测试用api
 */
async function bindAaaBbbCcd(request: BindAaaBbbCcdRequest): BindAaaBbbCcdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindAaaBbbCcdEx(request, headers, runtime);
}

/**
 * Description: 123
 * Summary: 测试用api
 */
async function bindAaaBbbCcdEx(request: BindAaaBbbCcdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindAaaBbbCcdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.aaa.bbb.ccd.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAutoGenerateCodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 必填参数
  string1: string(name='string_1'),
  // 非必填参数
  string2?: string(name='string_2'),
  // 长度限制2~5位
  string3: string(maxLength=5, minLength=2, name='string_3'),
  // 长度限制3~5位
  string4?: string(maxLength=5, minLength=3, name='string_4'),
  // 数值必填
  number1: long(name='number_1'),
  // 数值非必填
  number2?: long(name='number_2'),
  // 最小2，最大10
  number3: long(maximum=10, minimum=2, name='number_3'),
  // 最小1，最大5
  number4?: long(maximum=5, minimum=1, name='number_4'),
  // boolean必填
  boolean1: boolean(name='boolean_1'),
  // boolean非必填
  boolean2?: boolean(name='boolean_2'),
  // 必填日期
  date1: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='date_1'),
  // 非必填日期
  date2: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='date_2'),
  // 必填array
  array1: [ long ](name='array_1'),
  // 非必填array
  array2?: [ long ](name='array_2'),
  // 必填struct
  struct1: GroupAClass(name='struct_1'),
  // 非必填struct
  struct2: GroupAClass(name='struct_2'),
}

model CreateAutoGenerateCodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用于测试自动化脚本自动生成的功能
 * Summary: 自动生成自动化脚本测试
 */
async function createAutoGenerateCode(request: CreateAutoGenerateCodeRequest): CreateAutoGenerateCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAutoGenerateCodeEx(request, headers, runtime);
}

/**
 * Description: 用于测试自动化脚本自动生成的功能
 * Summary: 自动生成自动化脚本测试
 */
async function createAutoGenerateCodeEx(request: CreateAutoGenerateCodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAutoGenerateCodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.auto.generate.code.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPreTestUseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 2
  struct1: PreTestUse(name='struct_1'),
  // 1
  param1: string(name='param_1'),
}

model QueryPreTestUseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用于测试预发环境ob数据同步
 * Summary: 用于测试ob数据同步
 */
async function queryPreTestUse(request: QueryPreTestUseRequest): QueryPreTestUseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPreTestUseEx(request, headers, runtime);
}

/**
 * Description: 用于测试预发环境ob数据同步
 * Summary: 用于测试ob数据同步
 */
async function queryPreTestUseEx(request: QueryPreTestUseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPreTestUseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.pre.test.use.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 上传文件作用的openapi method
  apiCode: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ XNameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntcloudGatewayxFileUploadEx(request, headers, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

