import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.3.6',
    _prod_code = 'HK_SECURITYTECH',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// result.resultData
model DeviceRiskReportResultData {
  // webrtc_url
  webrtcUrl: string(name='webrtc_url', example='webrtc_url'),
  // a_dynamic_swi
  aDynamicSwi: string(name='a_dynamic_swi', example='a_dynamic_swi'),
  // dynamic_interval
  dynamicInterval: string(name='dynamic_interval', example='dynamic_interval'),
  // color
  color: string(name='color', example='color'),
  // os
  os: string(name='os', example='os'),
  // dynamic_cmd
  dynamicCmd: string(name='dynamic_cmd', example='dynamic_cmd'),
  // time_interval
  timeInterval: string(name='time_interval', example='time_interval'),
  // dynamic_trace
  dynamicTrace: string(name='dynamic_trace', example='dynamic_trace'),
  // dynamic_num
  dynamicNum: string(name='dynamic_num', example='dynamic_num'),
  // result_type
  resultType: string(name='result_type', example='result_type'),
}

// 人脸盾结果
// 
model FaceShieldResult {
  // 设备token
  // 
  apdidToken: string(name='apdid_token', example='uYxLZlL5YGpLvdwO5+4pyCkjgf3/FF4XxOqzrmG/XY+jyFilhgEAAA== '),
  // 风险等级，-1参数异常，0无风险，1-3表示低、中、高
  // 
  riskLevel: long(name='risk_level', example='3'),
  // 风险描述，对风险等级的补充
  // 
  riskDesc: string(name='risk_desc', example='本次咨询设备风险水平很高,风险编号:10000010.8.0 '),
  // 处理的建议，如PAAS
  sugAction: string(name='sug_action', example='建议直接拦截 '),
}

// 设备信息上报
model DeviceRiskReportResult {
  // success
  success: boolean(name='success', example='true, false'),
  // result_code
  resultCode: string(name='result_code', example='result_code'),
  // result_status
  resultStatus: string(name='result_status', example='result_status'),
  // apdid
  apdid: string(name='apdid', example='apdid'),
  // token
  token: string(name='token', example='token'),
  // current_time
  currentTime: string(name='current_time', example='current_time'),
  // version
  version: string(name='version', example='version'),
  // vkey_switch
  vkeySwitch: string(name='vkey_switch', example='vkey_switch'),
  // bug_track_switch
  bugTrackSwitch: string(name='bug_track_switch', example='bug_track_switch'),
  // app_list_ver
  appListVer: string(name='app_list_ver', example='app_list_ver'),
  // dynamic_key
  dynamicKey: string(name='dynamic_key', example='dynamic_key'),
  // result_data
  resultData: DeviceRiskReportResultData(name='result_data', example=''),
}

// 安卓加固ClassMethodConfig
model ClassMethodConfig {
  // 加固类名
  className: string(name='class_name', example='class_name'),
  // 方法集合，使用英文逗号分隔
  methods: string(name='methods', example='methods'),
}

// 安卓加固HardeningTaskResponse
model HardeningTaskResponse {
  // 加固任务的 ID，后续用来轮询调用
  taskId: string(name='task_id', example='task_id'),
  // 加固任务的状态
  status: long(name='status', example=''),
  // 加固后 APK/ABB 的 MD5
  afterMdFive: string(name='after_md_five', example='after_md_five'),
  // 加固后 APK/ABB 的大小
  afterSize: long(name='after_size', example=''),
}

// 终端安全MarketingRiskData
model MarketingRiskData {
  // risk_level
  riskLevel: long(name='risk_level', example=''),
  // sug_action
  sugAction: string(name='sug_action', example='sug_action'),
}

// 设备风险查询data
model DeviceRiskResp {
  // apdid
  apdid: string(name='apdid', example='-'),
  // apdid
  apdidToken: string(name='apdid_token', example='-'),
  // riskLevel
  riskLevel: long(name='risk_level', example=''),
  // risk_desc
  riskDesc: string(name='risk_desc', example='-'),
  // sug_action
  sugAction: string(name='sug_action', example='-'),
  // risk_labels
  riskLabels: [ string ](name='risk_labels', example=''),
}

// MarketingRiskSecurityData
model MarketingRiskSecurityData {
  // apdid_token
  apdidToken: string(name='apdid_token', example='apdid_token'),
  // signature
  signature: string(name='signature', example='signature'),
  // solution_risk_code
  solutionRiskCode: string(name='solution_risk_code', example='solution_risk_code'),
}

model CreateBlueshieldSecuritypictureRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  // 
  appName?: string(name='app_name'),
  // 客户名
  // 
  clientName: string(name='client_name'),
  // 操作系统
  // 
  osType: string(name='os_type'),
  // 包名
  // 
  packageName: string(name='package_name'),
  // 签名信息
  // 
  certSign?: string(name='cert_sign'),
  // 签名秘钥内容
  // 
  appKeyData?: string(name='app_key_data'),
  // 加密秘钥内容
  // 
  securityData?: string(name='security_data'),
  // 自定义秘钥内容
  // 
  extraData?: string(name='extra_data'),
  // 白盒秘钥内容
  // 
  whiteBoxData?: string(name='white_box_data'),
}

model CreateBlueshieldSecuritypictureResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 执行是否成功
  // 
  success?: boolean(name='success'),
  // 生成的图片文件名
  // 
  fileName?: string(name='file_name'),
  // body base 64
  // 
  bodyBase64?: string(name='body_base64'),
}

/**
 * Description: 蓝盾安全图片生成
 * Summary: 蓝盾安全图片生成
 */
async function createBlueshieldSecuritypicture(request: CreateBlueshieldSecuritypictureRequest): CreateBlueshieldSecuritypictureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBlueshieldSecuritypictureEx(request, headers, runtime);
}

/**
 * Description: 蓝盾安全图片生成
 * Summary: 蓝盾安全图片生成
 */
async function createBlueshieldSecuritypictureEx(request: CreateBlueshieldSecuritypictureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBlueshieldSecuritypictureResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'hksecuritytech.gateway.blueshield.securitypicture.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFaceshieldNativeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 客户id，标识客户来源
  // 
  clientId: string(name='client_id'),
  // 设备token
  // 
  apdidToken?: string(name='apdid_token'),
  // 切面数据（JSON，详见下方）
  aopData?: string(name='aop_data'),
  // 签名信息	否（和切面二选一即可）
  // 
  signature?: string(name='signature'),
  // 签名因子（和切面二选一即可）
  // 
  signFactor?: string(name='sign_factor'),
}

model QueryFaceshieldNativeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true成功，false失败
  // 
  success?: boolean(name='success'),
  // 请求码，200成功，其他失败，具体见错误码
  // 
  code?: long(name='code'),
  // 错误时的返回信息
  // 
  message?: string(name='message'),
  // 请求时传入的，若没有传，则系统自动生成
  // 
  requestId?: string(name='request_id'),
  // apdidToken String 设备token riskLevel String 风险等级，-1参数异常，0无风险，1-3表示低、中、高 riskDesc String 风险描述，对风险等级的补充 sugAction String 处理的建议，如PAAS
  data?: FaceShieldResult(name='data'),
}

/**
 * Description: 终端安全人脸盾Native查询
 * Summary: 人脸盾Native查询
 */
async function queryFaceshieldNative(request: QueryFaceshieldNativeRequest): QueryFaceshieldNativeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFaceshieldNativeEx(request, headers, runtime);
}

/**
 * Description: 终端安全人脸盾Native查询
 * Summary: 人脸盾Native查询
 */
async function queryFaceshieldNativeEx(request: QueryFaceshieldNativeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFaceshieldNativeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'hksecuritytech.gateway.faceshield.native.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitAshieldHardeningtaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // APK/ABB 上传后的地址
  fileUrl: string(name='file_url'),
  // java2jni配置文件
  javatocJniConfig: [ ClassMethodConfig ](name='javatoc_jni_config'),
}

model SubmitAshieldHardeningtaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回的具体对象，具体含义见下表。
  resData?: HardeningTaskResponse(name='res_data'),
}

/**
 * Description: 启动加固任务
 * Summary: 启动加固任务
 */
async function submitAshieldHardeningtask(request: SubmitAshieldHardeningtaskRequest): SubmitAshieldHardeningtaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitAshieldHardeningtaskEx(request, headers, runtime);
}

/**
 * Description: 启动加固任务
 * Summary: 启动加固任务
 */
async function submitAshieldHardeningtaskEx(request: SubmitAshieldHardeningtaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitAshieldHardeningtaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'hksecuritytech.gateway.ashield.hardeningtask.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceriskFingerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // apdid_token
  apdidToken: string(name='apdid_token'),
  // client_id
  clientId?: string(name='client_id'),
}

model QueryDeviceriskFingerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // code
  code?: long(name='code'),
  // message
  message?: string(name='message'),
  // request_id
  requestId?: string(name='request_id'),
  // success
  success?: boolean(name='success'),
  // data
  data?: DeviceRiskResp(name='data'),
}

/**
 * Description: 设备风险查询
 * Summary: 设备风险查询
 */
async function queryDeviceriskFinger(request: QueryDeviceriskFingerRequest): QueryDeviceriskFingerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceriskFingerEx(request, headers, runtime);
}

/**
 * Description: 设备风险查询
 * Summary: 设备风险查询
 */
async function queryDeviceriskFingerEx(request: QueryDeviceriskFingerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceriskFingerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'hksecuritytech.gateway.devicerisk.finger.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceriskDeviceriskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // apdid_token
  apdidToken: string(name='apdid_token'),
  // client_id
  clientId?: string(name='client_id'),
  // app_id
  appId?: string(name='app_id'),
  // env_id
  envId?: string(name='env_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // merchant_id
  merchantId?: string(name='merchant_id'),
  // app_name
  appName?: string(name='app_name'),
}

model QueryDeviceriskDeviceriskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // code
  code?: long(name='code'),
  // message
  message?: string(name='message'),
  // request_id
  requestId?: string(name='request_id'),
  // success
  success?: boolean(name='success'),
  // data
  data?: DeviceRiskResp(name='data'),
}

/**
 * Description: 终端安全-设备风险查询
 * Summary: 设备风险查询
 */
async function queryDeviceriskDevicerisk(request: QueryDeviceriskDeviceriskRequest): QueryDeviceriskDeviceriskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceriskDeviceriskEx(request, headers, runtime);
}

/**
 * Description: 终端安全-设备风险查询
 * Summary: 设备风险查询
 */
async function queryDeviceriskDeviceriskEx(request: QueryDeviceriskDeviceriskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceriskDeviceriskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'hksecuritytech.gateway.devicerisk.devicerisk.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFaceshieldWebRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 客户id，标识客户来源
  // 
  clientId: string(name='client_id'),
  // apdid_token
  apdidToken?: string(name='apdid_token'),
  // aop_data
  aopData?: string(name='aop_data'),
}

model QueryFaceshieldWebResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // success
  success?: boolean(name='success'),
  // 请求码，200成功，其他失败，具体见错误码
  // 
  code?: long(name='code'),
  // 错误时的返回信息
  // 
  message?: string(name='message'),
  // 请求时传入的，若没有传，则系统自动生成
  // 
  requestId?: string(name='request_id'),
  // data
  data?: FaceShieldResult(name='data'),
}

/**
 * Description: 终端安全人脸盾Web查询
 * Summary: 人脸盾Web查询
 */
async function queryFaceshieldWeb(request: QueryFaceshieldWebRequest): QueryFaceshieldWebResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFaceshieldWebEx(request, headers, runtime);
}

/**
 * Description: 终端安全人脸盾Web查询
 * Summary: 人脸盾Web查询
 */
async function queryFaceshieldWebEx(request: QueryFaceshieldWebRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFaceshieldWebResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'hksecuritytech.gateway.faceshield.web.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitDeviceriskReportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // request_data
  requestData: string(name='request_data'),
}

model SubmitDeviceriskReportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // success
  success?: boolean(name='success'),
  // apdid
  apdid?: string(name='apdid'),
  // token
  token?: string(name='token'),
  // current_time
  currentTime?: string(name='current_time'),
  // version
  version?: string(name='version'),
  // vkey_switch
  vkeySwitch?: string(name='vkey_switch'),
  // bug_track_switch
  bugTrackSwitch?: string(name='bug_track_switch'),
  // app_list_ver
  appListVer?: string(name='app_list_ver'),
  // dynamic_key
  dynamicKey?: string(name='dynamic_key'),
  // result_data
  resultData?: DeviceRiskReportResultData(name='result_data'),
}

/**
 * Description: 终端安全 设备信息上报
 * Summary: 设备信息上报
 */
async function submitDeviceriskReport(request: SubmitDeviceriskReportRequest): SubmitDeviceriskReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitDeviceriskReportEx(request, headers, runtime);
}

/**
 * Description: 终端安全 设备信息上报
 * Summary: 设备信息上报
 */
async function submitDeviceriskReportEx(request: SubmitDeviceriskReportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitDeviceriskReportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'hksecuritytech.gateway.devicerisk.report.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEaglepromoMarketingriskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // security_data
  securityData: MarketingRiskSecurityData(name='security_data'),
  // sign_factor
  signFactor: string(name='sign_factor'),
  // client_id
  clientId: string(name='client_id'),
  // request_id
  requestId?: string(name='request_id'),
  // biz_code
  bizCode?: string(name='biz_code'),
  // terminal_type
  terminalType: string(name='terminal_type'),
}

model QueryEaglepromoMarketingriskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // success
  success?: boolean(name='success'),
  // message
  message?: string(name='message'),
  // code
  code?: long(name='code'),
  // data
  data?: MarketingRiskData(name='data'),
}

/**
 * Description: 终端安全 EaglePromo
 * Summary: EaglePromo
 */
async function queryEaglepromoMarketingrisk(request: QueryEaglepromoMarketingriskRequest): QueryEaglepromoMarketingriskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEaglepromoMarketingriskEx(request, headers, runtime);
}

/**
 * Description: 终端安全 EaglePromo
 * Summary: EaglePromo
 */
async function queryEaglepromoMarketingriskEx(request: QueryEaglepromoMarketingriskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEaglepromoMarketingriskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'hksecuritytech.gateway.eaglepromo.marketingrisk.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

