import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '2.0.4',
    _prod_code = 'MORSERTA',
    _prod_channel = 'default'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

model FeedbackReportDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 广告主账号ID
  accountId: string(name='account_id'),
  // 报表类型级别
  level: string(name='level'),
  // 回传数据明细，类型json array
  feedbackData: string(name='feedback_data'),
}

model FeedbackReportDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: RTA广告主数据回传
 * Summary: RTA广告主数据回传
 */
async function feedbackReportData(request: FeedbackReportDataRequest): FeedbackReportDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return feedbackReportDataEx(request, headers, runtime);
}

/**
 * Description: RTA广告主数据回传
 * Summary: RTA广告主数据回传
 */
async function feedbackReportDataEx(request: FeedbackReportDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FeedbackReportDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.morserta.report.data.feedback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConvertAdDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 广告主id
  accountId: long(name='account_id'),
  // ios/android
  deviceOsType: string(name='device_os_type'),
  // 设备ID（imei或idfa的加密值）
  muid: string(name='muid'),
  // 点击ID
  clickId: string(name='click_id'),
  // 转化时间
  convTime: long(name='conv_time'),
  // 点击时间
  clickTime: long(name='click_time'),
  // 曝光时间
  impressionTime: string(name='impression_time'),
  // 投放日期年月日时分秒（准确到秒），格式为 yyyyMMddhhmmss
  dt: string(name='dt'),
  // 手机号MD5
  mobileMd5: string(name='mobile_md5'),
  // 是否提单标签0,1
  labelSubmit: long(name='label_submit'),
  // 是否支付标签0,1
  labelPay: long(name='label_pay'),
  // 是否升级标签0,1
  labelUp?: long(name='label_up'),
  // m2是否续期
  labelM2Renewal: long(name='label_m2_renewal'),
  // 是否退保
  labelSurrender?: long(name='label_surrender'),
  // 区分投放渠道来源weixin\youlianghui\chuanshanjia\douyin
  platform?: long(name='platform'),
}

model ConvertAdDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 调用是否成功
  success?: boolean(name='success'),
  // 返回码
  code?: string(name='code'),
  // 返回码描述
  message?: string(name='message'),
  // 请求的唯一id
  requestId?: string(name='request_id'),
}

/**
 * Description: 摩斯RTA提供的转化回传接口
 * Summary: 摩斯RTA提供的转化回传接口
 */
async function convertAdData(request: ConvertAdDataRequest): ConvertAdDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return convertAdDataEx(request, headers, runtime);
}

/**
 * Description: 摩斯RTA提供的转化回传接口
 * Summary: 摩斯RTA提供的转化回传接口
 */
async function convertAdDataEx(request: ConvertAdDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConvertAdDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.morserta.ad.data.convert', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ClickAdDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 广告主id
  accountId: long(name='account_id'),
  // 渠道，支持TENCENT
  channel: string(name='channel'),
  // 点击明细json string
  data: string(name='data'),
}

model ClickAdDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 调用是否成功
  success?: boolean(name='success'),
  // 返回码
  code?: string(name='code'),
  // 异常描述
  message?: string(name='message'),
  // 调用id
  requestId?: string(name='request_id'),
}

/**
 * Description: 广告主点击数据回传
 * Summary: 广告主点击数据回传
 */
async function clickAdData(request: ClickAdDataRequest): ClickAdDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return clickAdDataEx(request, headers, runtime);
}

/**
 * Description: 广告主点击数据回传
 * Summary: 广告主点击数据回传
 */
async function clickAdDataEx(request: ClickAdDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ClickAdDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.morserta.ad.data.click', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

