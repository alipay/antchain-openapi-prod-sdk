// This file is auto-generated, don't edit it. Thanks.
package client

import (
	rpcutil "github.com/alibabacloud-go/tea-rpc-utils/service"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
	antchainutil "github.com/antchain-openapi-sdk-go/antchain-util/service"
)

/**
 * Model for initing client
 */
type Config struct {
	// accesskey id
	AccessKeyId *string `json:"accessKeyId,omitempty" xml:"accessKeyId,omitempty"`
	// accesskey secret
	AccessKeySecret *string `json:"accessKeySecret,omitempty" xml:"accessKeySecret,omitempty"`
	// security token
	SecurityToken *string `json:"securityToken,omitempty" xml:"securityToken,omitempty"`
	// http protocol
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// read timeout
	ReadTimeout *int `json:"readTimeout,omitempty" xml:"readTimeout,omitempty"`
	// connect timeout
	ConnectTimeout *int `json:"connectTimeout,omitempty" xml:"connectTimeout,omitempty"`
	// http proxy
	HttpProxy *string `json:"httpProxy,omitempty" xml:"httpProxy,omitempty"`
	// https proxy
	HttpsProxy *string `json:"httpsProxy,omitempty" xml:"httpsProxy,omitempty"`
	// endpoint
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	// proxy white list
	NoProxy *string `json:"noProxy,omitempty" xml:"noProxy,omitempty"`
	// max idle conns
	MaxIdleConns *int `json:"maxIdleConns,omitempty" xml:"maxIdleConns,omitempty"`
	// user agent
	UserAgent *string `json:"userAgent,omitempty" xml:"userAgent,omitempty"`
	// socks5 proxy
	Socks5Proxy *string `json:"socks5Proxy,omitempty" xml:"socks5Proxy,omitempty"`
	// socks5 network
	Socks5NetWork *string `json:"socks5NetWork,omitempty" xml:"socks5NetWork,omitempty"`
	// 长链接最大空闲时长
	MaxIdleTimeMillis *int `json:"maxIdleTimeMillis,omitempty" xml:"maxIdleTimeMillis,omitempty"`
	// 长链接最大连接时长
	KeepAliveDurationMillis *int `json:"keepAliveDurationMillis,omitempty" xml:"keepAliveDurationMillis,omitempty"`
	// 最大连接数（长链接最大总数）
	MaxRequests *int `json:"maxRequests,omitempty" xml:"maxRequests,omitempty"`
	// 每个目标主机的最大连接数（分主机域名的长链接最大总数
	MaxRequestsPerHost *int `json:"maxRequestsPerHost,omitempty" xml:"maxRequestsPerHost,omitempty"`
}

func (s Config) String() string {
	return tea.Prettify(s)
}

func (s Config) GoString() string {
	return s.String()
}

func (s *Config) SetAccessKeyId(v string) *Config {
	s.AccessKeyId = &v
	return s
}

func (s *Config) SetAccessKeySecret(v string) *Config {
	s.AccessKeySecret = &v
	return s
}

func (s *Config) SetSecurityToken(v string) *Config {
	s.SecurityToken = &v
	return s
}

func (s *Config) SetProtocol(v string) *Config {
	s.Protocol = &v
	return s
}

func (s *Config) SetReadTimeout(v int) *Config {
	s.ReadTimeout = &v
	return s
}

func (s *Config) SetConnectTimeout(v int) *Config {
	s.ConnectTimeout = &v
	return s
}

func (s *Config) SetHttpProxy(v string) *Config {
	s.HttpProxy = &v
	return s
}

func (s *Config) SetHttpsProxy(v string) *Config {
	s.HttpsProxy = &v
	return s
}

func (s *Config) SetEndpoint(v string) *Config {
	s.Endpoint = &v
	return s
}

func (s *Config) SetNoProxy(v string) *Config {
	s.NoProxy = &v
	return s
}

func (s *Config) SetMaxIdleConns(v int) *Config {
	s.MaxIdleConns = &v
	return s
}

func (s *Config) SetUserAgent(v string) *Config {
	s.UserAgent = &v
	return s
}

func (s *Config) SetSocks5Proxy(v string) *Config {
	s.Socks5Proxy = &v
	return s
}

func (s *Config) SetSocks5NetWork(v string) *Config {
	s.Socks5NetWork = &v
	return s
}

func (s *Config) SetMaxIdleTimeMillis(v int) *Config {
	s.MaxIdleTimeMillis = &v
	return s
}

func (s *Config) SetKeepAliveDurationMillis(v int) *Config {
	s.KeepAliveDurationMillis = &v
	return s
}

func (s *Config) SetMaxRequests(v int) *Config {
	s.MaxRequests = &v
	return s
}

func (s *Config) SetMaxRequestsPerHost(v int) *Config {
	s.MaxRequestsPerHost = &v
	return s
}

// condition
type XCondition struct {
	// 表达式
	Expr *string `json:"expr,omitempty" xml:"expr,omitempty" require:"true"`
	// operator
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	//
	Values []*string `json:"values,omitempty" xml:"values,omitempty" type:"Repeated"`
	//
	All *bool `json:"all,omitempty" xml:"all,omitempty"`
}

func (s XCondition) String() string {
	return tea.Prettify(s)
}

func (s XCondition) GoString() string {
	return s.String()
}

func (s *XCondition) SetExpr(v string) *XCondition {
	s.Expr = &v
	return s
}

func (s *XCondition) SetOperator(v string) *XCondition {
	s.Operator = &v
	return s
}

func (s *XCondition) SetValue(v string) *XCondition {
	s.Value = &v
	return s
}

func (s *XCondition) SetValues(v []*string) *XCondition {
	s.Values = v
	return s
}

func (s *XCondition) SetAll(v bool) *XCondition {
	s.All = &v
	return s
}

// metric query metadata
type XMetricQueryMetadata struct {
	// query clause name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 32位datasource uuid
	DatasourceUuid *string `json:"datasource_uuid,omitempty" xml:"datasource_uuid,omitempty" require:"true"`
	// metric name
	MetricName *string `json:"metric_name,omitempty" xml:"metric_name,omitempty"`
	//
	TableName *string `json:"table_name,omitempty" xml:"table_name,omitempty"`
	//
	Conditions []*XCondition `json:"conditions,omitempty" xml:"conditions,omitempty" type:"Repeated"`
}

func (s XMetricQueryMetadata) String() string {
	return tea.Prettify(s)
}

func (s XMetricQueryMetadata) GoString() string {
	return s.String()
}

func (s *XMetricQueryMetadata) SetName(v string) *XMetricQueryMetadata {
	s.Name = &v
	return s
}

func (s *XMetricQueryMetadata) SetDatasourceUuid(v string) *XMetricQueryMetadata {
	s.DatasourceUuid = &v
	return s
}

func (s *XMetricQueryMetadata) SetMetricName(v string) *XMetricQueryMetadata {
	s.MetricName = &v
	return s
}

func (s *XMetricQueryMetadata) SetTableName(v string) *XMetricQueryMetadata {
	s.TableName = &v
	return s
}

func (s *XMetricQueryMetadata) SetConditions(v []*XCondition) *XMetricQueryMetadata {
	s.Conditions = v
	return s
}

// Translate Expression
type XTranslateExpression struct {
	// expression type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	//  from
	From *string `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// to
	To *string `json:"to,omitempty" xml:"to,omitempty" require:"true"`
}

func (s XTranslateExpression) String() string {
	return tea.Prettify(s)
}

func (s XTranslateExpression) GoString() string {
	return s.String()
}

func (s *XTranslateExpression) SetType(v string) *XTranslateExpression {
	s.Type = &v
	return s
}

func (s *XTranslateExpression) SetFrom(v string) *XTranslateExpression {
	s.From = &v
	return s
}

func (s *XTranslateExpression) SetTo(v string) *XTranslateExpression {
	s.To = &v
	return s
}

// x
type XCalculationParameter struct {
	// x
	Expression *string `json:"expression,omitempty" xml:"expression,omitempty"`
	// x
	Constant *bool `json:"constant,omitempty" xml:"constant,omitempty"`
}

func (s XCalculationParameter) String() string {
	return tea.Prettify(s)
}

func (s XCalculationParameter) GoString() string {
	return s.String()
}

func (s *XCalculationParameter) SetExpression(v string) *XCalculationParameter {
	s.Expression = &v
	return s
}

func (s *XCalculationParameter) SetConstant(v bool) *XCalculationParameter {
	s.Constant = &v
	return s
}

//
type XMetricInfo struct {
	//
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	//
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	//
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	//
	Unit *string `json:"unit,omitempty" xml:"unit,omitempty"`
}

func (s XMetricInfo) String() string {
	return tea.Prettify(s)
}

func (s XMetricInfo) GoString() string {
	return s.String()
}

func (s *XMetricInfo) SetName(v string) *XMetricInfo {
	s.Name = &v
	return s
}

func (s *XMetricInfo) SetDescription(v string) *XMetricInfo {
	s.Description = &v
	return s
}

func (s *XMetricInfo) SetType(v string) *XMetricInfo {
	s.Type = &v
	return s
}

func (s *XMetricInfo) SetUnit(v string) *XMetricInfo {
	s.Unit = &v
	return s
}

//
type XTranslate struct {
	//
	DefaultValue *string `json:"default_value,omitempty" xml:"default_value,omitempty"`
	//
	IncludeNotMatched *bool `json:"include_not_matched,omitempty" xml:"include_not_matched,omitempty"`
	//
	TranslateExpressions []*XTranslateExpression `json:"translate_expressions,omitempty" xml:"translate_expressions,omitempty" type:"Repeated"`
}

func (s XTranslate) String() string {
	return tea.Prettify(s)
}

func (s XTranslate) GoString() string {
	return s.String()
}

func (s *XTranslate) SetDefaultValue(v string) *XTranslate {
	s.DefaultValue = &v
	return s
}

func (s *XTranslate) SetIncludeNotMatched(v bool) *XTranslate {
	s.IncludeNotMatched = &v
	return s
}

func (s *XTranslate) SetTranslateExpressions(v []*XTranslateExpression) *XTranslate {
	s.TranslateExpressions = v
	return s
}

// x
type XCalculationExpression struct {
	// x
	Function *string `json:"function,omitempty" xml:"function,omitempty"`
	// x
	Parameters []*XCalculationParameter `json:"parameters,omitempty" xml:"parameters,omitempty" type:"Repeated"`
	// PromQL
	Query *string `json:"query,omitempty" xml:"query,omitempty"`
	//
	QueryMetadatas []*XMetricQueryMetadata `json:"query_metadatas,omitempty" xml:"query_metadatas,omitempty" type:"Repeated"`
	// calculation type
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s XCalculationExpression) String() string {
	return tea.Prettify(s)
}

func (s XCalculationExpression) GoString() string {
	return s.String()
}

func (s *XCalculationExpression) SetFunction(v string) *XCalculationExpression {
	s.Function = &v
	return s
}

func (s *XCalculationExpression) SetParameters(v []*XCalculationParameter) *XCalculationExpression {
	s.Parameters = v
	return s
}

func (s *XCalculationExpression) SetQuery(v string) *XCalculationExpression {
	s.Query = &v
	return s
}

func (s *XCalculationExpression) SetQueryMetadatas(v []*XMetricQueryMetadata) *XCalculationExpression {
	s.QueryMetadatas = v
	return s
}

func (s *XCalculationExpression) SetType(v string) *XCalculationExpression {
	s.Type = &v
	return s
}

// AiExtraAttr
type AiExtraAttr struct {
	// time_range_thres
	TimeRangeThres *string `json:"time_range_thres,omitempty" xml:"time_range_thres,omitempty" require:"true"`
	// abnormal_value_thres
	AbnormalValueThres *string `json:"abnormal_value_thres,omitempty" xml:"abnormal_value_thres,omitempty" require:"true"`
	// value_range_thres
	ValueRangeThres *string `json:"value_range_thres,omitempty" xml:"value_range_thres,omitempty" require:"true"`
	// algo_score_thres
	AlgoScoreThres *string `json:"algo_score_thres,omitempty" xml:"algo_score_thres,omitempty" require:"true"`
}

func (s AiExtraAttr) String() string {
	return tea.Prettify(s)
}

func (s AiExtraAttr) GoString() string {
	return s.String()
}

func (s *AiExtraAttr) SetTimeRangeThres(v string) *AiExtraAttr {
	s.TimeRangeThres = &v
	return s
}

func (s *AiExtraAttr) SetAbnormalValueThres(v string) *AiExtraAttr {
	s.AbnormalValueThres = &v
	return s
}

func (s *AiExtraAttr) SetValueRangeThres(v string) *AiExtraAttr {
	s.ValueRangeThres = &v
	return s
}

func (s *AiExtraAttr) SetAlgoScoreThres(v string) *AiExtraAttr {
	s.AlgoScoreThres = &v
	return s
}

// match expression
type XMatchExpression struct {
	// match expression type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// metadata field expr
	Expr *string `json:"expr,omitempty" xml:"expr,omitempty"`
	// left character
	Left *string `json:"left,omitempty" xml:"left,omitempty"`
	// left index
	LeftIndex *int64 `json:"left_index,omitempty" xml:"left_index,omitempty"`
	//
	Right *string `json:"right,omitempty" xml:"right,omitempty"`
	//
	ValueType *string `json:"value_type,omitempty" xml:"value_type,omitempty"`
}

func (s XMatchExpression) String() string {
	return tea.Prettify(s)
}

func (s XMatchExpression) GoString() string {
	return s.String()
}

func (s *XMatchExpression) SetType(v string) *XMatchExpression {
	s.Type = &v
	return s
}

func (s *XMatchExpression) SetExpr(v string) *XMatchExpression {
	s.Expr = &v
	return s
}

func (s *XMatchExpression) SetLeft(v string) *XMatchExpression {
	s.Left = &v
	return s
}

func (s *XMatchExpression) SetLeftIndex(v int64) *XMatchExpression {
	s.LeftIndex = &v
	return s
}

func (s *XMatchExpression) SetRight(v string) *XMatchExpression {
	s.Right = &v
	return s
}

func (s *XMatchExpression) SetValueType(v string) *XMatchExpression {
	s.ValueType = &v
	return s
}

// Threshold
type Threshold struct {
	// level1
	Level1 *string `json:"level1,omitempty" xml:"level1,omitempty" require:"true"`
	// level2
	Level2 *string `json:"level2,omitempty" xml:"level2,omitempty" require:"true"`
	// level3
	Level3 *string `json:"level3,omitempty" xml:"level3,omitempty" require:"true"`
	// im
	Im *string `json:"im,omitempty" xml:"im,omitempty" require:"true"`
	// sms
	Sms *string `json:"sms,omitempty" xml:"sms,omitempty" require:"true"`
	// control_plan
	ControlPlan *string `json:"control_plan,omitempty" xml:"control_plan,omitempty" require:"true"`
}

func (s Threshold) String() string {
	return tea.Prettify(s)
}

func (s Threshold) GoString() string {
	return s.String()
}

func (s *Threshold) SetLevel1(v string) *Threshold {
	s.Level1 = &v
	return s
}

func (s *Threshold) SetLevel2(v string) *Threshold {
	s.Level2 = &v
	return s
}

func (s *Threshold) SetLevel3(v string) *Threshold {
	s.Level3 = &v
	return s
}

func (s *Threshold) SetIm(v string) *Threshold {
	s.Im = &v
	return s
}

func (s *Threshold) SetSms(v string) *Threshold {
	s.Sms = &v
	return s
}

func (s *Threshold) SetControlPlan(v string) *Threshold {
	s.ControlPlan = &v
	return s
}

// string key value
type XStringKeyValue struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s XStringKeyValue) String() string {
	return tea.Prettify(s)
}

func (s XStringKeyValue) GoString() string {
	return s.String()
}

func (s *XStringKeyValue) SetKey(v string) *XStringKeyValue {
	s.Key = &v
	return s
}

func (s *XStringKeyValue) SetValue(v string) *XStringKeyValue {
	s.Value = &v
	return s
}

// DimFilter
type DimFilter struct {
	// dim_index
	DimIndex *int64 `json:"dim_index,omitempty" xml:"dim_index,omitempty" require:"true"`
	// dim_name
	DimName *string `json:"dim_name,omitempty" xml:"dim_name,omitempty" require:"true"`
	// white_names
	WhiteNames []*string `json:"white_names,omitempty" xml:"white_names,omitempty" require:"true" type:"Repeated"`
	// black_names
	BlackNames []*string `json:"black_names,omitempty" xml:"black_names,omitempty" require:"true" type:"Repeated"`
}

func (s DimFilter) String() string {
	return tea.Prettify(s)
}

func (s DimFilter) GoString() string {
	return s.String()
}

func (s *DimFilter) SetDimIndex(v int64) *DimFilter {
	s.DimIndex = &v
	return s
}

func (s *DimFilter) SetDimName(v string) *DimFilter {
	s.DimName = &v
	return s
}

func (s *DimFilter) SetWhiteNames(v []*string) *DimFilter {
	s.WhiteNames = v
	return s
}

func (s *DimFilter) SetBlackNames(v []*string) *DimFilter {
	s.BlackNames = v
	return s
}

// WorkspaceDTO
type WorkspaceDTO struct {
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// outside_ws_id
	OutsideWsId *string `json:"outside_ws_id,omitempty" xml:"outside_ws_id,omitempty" require:"true"`
	// tenant_id
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// outside_tenant_id
	OutsideTenantId *string `json:"outside_tenant_id,omitempty" xml:"outside_tenant_id,omitempty" require:"true"`
	// stack_view
	StackView *bool `json:"stack_view,omitempty" xml:"stack_view,omitempty" require:"true"`
}

func (s WorkspaceDTO) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceDTO) GoString() string {
	return s.String()
}

func (s *WorkspaceDTO) SetId(v int64) *WorkspaceDTO {
	s.Id = &v
	return s
}

func (s *WorkspaceDTO) SetName(v string) *WorkspaceDTO {
	s.Name = &v
	return s
}

func (s *WorkspaceDTO) SetDisplayName(v string) *WorkspaceDTO {
	s.DisplayName = &v
	return s
}

func (s *WorkspaceDTO) SetOutsideWsId(v string) *WorkspaceDTO {
	s.OutsideWsId = &v
	return s
}

func (s *WorkspaceDTO) SetTenantId(v int64) *WorkspaceDTO {
	s.TenantId = &v
	return s
}

func (s *WorkspaceDTO) SetOutsideTenantId(v string) *WorkspaceDTO {
	s.OutsideTenantId = &v
	return s
}

func (s *WorkspaceDTO) SetStackView(v bool) *WorkspaceDTO {
	s.StackView = &v
	return s
}

// AiAlarmParams
type AiAlarmParams struct {
	// value_fields
	ValueFields []*string `json:"value_fields,omitempty" xml:"value_fields,omitempty" require:"true" type:"Repeated"`
	// ai_algo_code
	AiAlgoCode *string `json:"ai_algo_code,omitempty" xml:"ai_algo_code,omitempty" require:"true"`
	// ai_extra_attr
	AiExtraAttr *AiExtraAttr `json:"ai_extra_attr,omitempty" xml:"ai_extra_attr,omitempty" require:"true"`
}

func (s AiAlarmParams) String() string {
	return tea.Prettify(s)
}

func (s AiAlarmParams) GoString() string {
	return s.String()
}

func (s *AiAlarmParams) SetValueFields(v []*string) *AiAlarmParams {
	s.ValueFields = v
	return s
}

func (s *AiAlarmParams) SetAiAlgoCode(v string) *AiAlarmParams {
	s.AiAlgoCode = &v
	return s
}

func (s *AiAlarmParams) SetAiExtraAttr(v *AiExtraAttr) *AiAlarmParams {
	s.AiExtraAttr = v
	return s
}

// TimeRange
type TimeRange struct {
	// start
	Start *int64 `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// end
	End *int64 `json:"end,omitempty" xml:"end,omitempty" require:"true"`
}

func (s TimeRange) String() string {
	return tea.Prettify(s)
}

func (s TimeRange) GoString() string {
	return s.String()
}

func (s *TimeRange) SetStart(v int64) *TimeRange {
	s.Start = &v
	return s
}

func (s *TimeRange) SetEnd(v int64) *TimeRange {
	s.End = &v
	return s
}

// Trigger
type Trigger struct {
	// value_field
	ValueField *string `json:"value_field,omitempty" xml:"value_field,omitempty" require:"true"`
	// value_index
	ValueIndex *int64 `json:"value_index,omitempty" xml:"value_index,omitempty" require:"true"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// n
	N *int64 `json:"n,omitempty" xml:"n,omitempty" require:"true"`
	// compare
	Compare *string `json:"compare,omitempty" xml:"compare,omitempty" require:"true"`
	// compare_percent
	ComparePercent *string `json:"compare_percent,omitempty" xml:"compare_percent,omitempty" require:"true"`
	// threshold
	Threshold *Threshold `json:"threshold,omitempty" xml:"threshold,omitempty" require:"true"`
	// threshold_copy
	ThresholdCopy *Threshold `json:"threshold_copy,omitempty" xml:"threshold_copy,omitempty" require:"true"`
	// value_is_percent
	ValueIsPercent *bool `json:"value_is_percent,omitempty" xml:"value_is_percent,omitempty" require:"true"`
}

func (s Trigger) String() string {
	return tea.Prettify(s)
}

func (s Trigger) GoString() string {
	return s.String()
}

func (s *Trigger) SetValueField(v string) *Trigger {
	s.ValueField = &v
	return s
}

func (s *Trigger) SetValueIndex(v int64) *Trigger {
	s.ValueIndex = &v
	return s
}

func (s *Trigger) SetType(v string) *Trigger {
	s.Type = &v
	return s
}

func (s *Trigger) SetN(v int64) *Trigger {
	s.N = &v
	return s
}

func (s *Trigger) SetCompare(v string) *Trigger {
	s.Compare = &v
	return s
}

func (s *Trigger) SetComparePercent(v string) *Trigger {
	s.ComparePercent = &v
	return s
}

func (s *Trigger) SetThreshold(v *Threshold) *Trigger {
	s.Threshold = v
	return s
}

func (s *Trigger) SetThresholdCopy(v *Threshold) *Trigger {
	s.ThresholdCopy = v
	return s
}

func (s *Trigger) SetValueIsPercent(v bool) *Trigger {
	s.ValueIsPercent = &v
	return s
}

// TimeFilter
type TimeFilter struct {
	// from
	From *string `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// to
	To *string `json:"to,omitempty" xml:"to,omitempty" require:"true"`
	// weeks
	Weeks []*int64 `json:"weeks,omitempty" xml:"weeks,omitempty" require:"true" type:"Repeated"`
}

func (s TimeFilter) String() string {
	return tea.Prettify(s)
}

func (s TimeFilter) GoString() string {
	return s.String()
}

func (s *TimeFilter) SetFrom(v string) *TimeFilter {
	s.From = &v
	return s
}

func (s *TimeFilter) SetTo(v string) *TimeFilter {
	s.To = &v
	return s
}

func (s *TimeFilter) SetWeeks(v []*int64) *TimeFilter {
	s.Weeks = v
	return s
}

// BizDomain
type BizDomain struct {
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// tenant_id
	//
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// config
	Config *string `json:"config,omitempty" xml:"config,omitempty" require:"true"`
	// outside_domain_id
	OutsideDomainId *string `json:"outside_domain_id,omitempty" xml:"outside_domain_id,omitempty" require:"true"`
	// entity_list
	EntityList *string `json:"entity_list,omitempty" xml:"entity_list,omitempty" require:"true"`
}

func (s BizDomain) String() string {
	return tea.Prettify(s)
}

func (s BizDomain) GoString() string {
	return s.String()
}

func (s *BizDomain) SetId(v int64) *BizDomain {
	s.Id = &v
	return s
}

func (s *BizDomain) SetName(v string) *BizDomain {
	s.Name = &v
	return s
}

func (s *BizDomain) SetTenantId(v int64) *BizDomain {
	s.TenantId = &v
	return s
}

func (s *BizDomain) SetConfig(v string) *BizDomain {
	s.Config = &v
	return s
}

func (s *BizDomain) SetOutsideDomainId(v string) *BizDomain {
	s.OutsideDomainId = &v
	return s
}

func (s *BizDomain) SetEntityList(v string) *BizDomain {
	s.EntityList = &v
	return s
}

// Expression
type XExpression struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	//
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	//
	MatchExpression *XMatchExpression `json:"match_expression,omitempty" xml:"match_expression,omitempty"`
	//
	TranslateExpression *XTranslate `json:"translate_expression,omitempty" xml:"translate_expression,omitempty"`
	//  metric type
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	//
	Unit *string `json:"unit,omitempty" xml:"unit,omitempty"`
	//
	DownsampleFunc *string `json:"downsample_func,omitempty" xml:"downsample_func,omitempty"`
	//
	AggregationFunc *string `json:"aggregation_func,omitempty" xml:"aggregation_func,omitempty"`
	// prometheus tags
	ExpressionTags []*XMetricInfo `json:"expression_tags,omitempty" xml:"expression_tags,omitempty" type:"Repeated"`
	// prometheus metric-tags 是否采集
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// line filter
	Values []*string `json:"values,omitempty" xml:"values,omitempty" type:"Repeated"`
	//
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	//
	PathParameters []*XStringKeyValue `json:"path_parameters,omitempty" xml:"path_parameters,omitempty" type:"Repeated"`
	// x
	CalculationExpression *XCalculationExpression `json:"calculation_expression,omitempty" xml:"calculation_expression,omitempty"`
	// 计算数据源使用的原始指标名称
	SourceName *string `json:"source_name,omitempty" xml:"source_name,omitempty"`
}

func (s XExpression) String() string {
	return tea.Prettify(s)
}

func (s XExpression) GoString() string {
	return s.String()
}

func (s *XExpression) SetName(v string) *XExpression {
	s.Name = &v
	return s
}

func (s *XExpression) SetDescription(v string) *XExpression {
	s.Description = &v
	return s
}

func (s *XExpression) SetMatchExpression(v *XMatchExpression) *XExpression {
	s.MatchExpression = v
	return s
}

func (s *XExpression) SetTranslateExpression(v *XTranslate) *XExpression {
	s.TranslateExpression = v
	return s
}

func (s *XExpression) SetType(v string) *XExpression {
	s.Type = &v
	return s
}

func (s *XExpression) SetUnit(v string) *XExpression {
	s.Unit = &v
	return s
}

func (s *XExpression) SetDownsampleFunc(v string) *XExpression {
	s.DownsampleFunc = &v
	return s
}

func (s *XExpression) SetAggregationFunc(v string) *XExpression {
	s.AggregationFunc = &v
	return s
}

func (s *XExpression) SetExpressionTags(v []*XMetricInfo) *XExpression {
	s.ExpressionTags = v
	return s
}

func (s *XExpression) SetEnabled(v bool) *XExpression {
	s.Enabled = &v
	return s
}

func (s *XExpression) SetValues(v []*string) *XExpression {
	s.Values = v
	return s
}

func (s *XExpression) SetDisplayName(v string) *XExpression {
	s.DisplayName = &v
	return s
}

func (s *XExpression) SetPathParameters(v []*XStringKeyValue) *XExpression {
	s.PathParameters = v
	return s
}

func (s *XExpression) SetCalculationExpression(v *XCalculationExpression) *XExpression {
	s.CalculationExpression = v
	return s
}

func (s *XExpression) SetSourceName(v string) *XExpression {
	s.SourceName = &v
	return s
}

// ControlPlan
type ControlPlan struct {
	// action_id
	ActionId *int64 `json:"action_id,omitempty" xml:"action_id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// plugin_type
	PluginType *string `json:"plugin_type,omitempty" xml:"plugin_type,omitempty" require:"true"`
	// plugin_id
	PluginId *string `json:"plugin_id,omitempty" xml:"plugin_id,omitempty" require:"true"`
	// file_id
	FileId *int64 `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// ds_name
	DsName *string `json:"ds_name,omitempty" xml:"ds_name,omitempty" require:"true"`
}

func (s ControlPlan) String() string {
	return tea.Prettify(s)
}

func (s ControlPlan) GoString() string {
	return s.String()
}

func (s *ControlPlan) SetActionId(v int64) *ControlPlan {
	s.ActionId = &v
	return s
}

func (s *ControlPlan) SetName(v string) *ControlPlan {
	s.Name = &v
	return s
}

func (s *ControlPlan) SetPluginType(v string) *ControlPlan {
	s.PluginType = &v
	return s
}

func (s *ControlPlan) SetPluginId(v string) *ControlPlan {
	s.PluginId = &v
	return s
}

func (s *ControlPlan) SetFileId(v int64) *ControlPlan {
	s.FileId = &v
	return s
}

func (s *ControlPlan) SetDsName(v string) *ControlPlan {
	s.DsName = &v
	return s
}

// NavWorkspace
type NavWorkspace struct {
	// workspace
	Workspace *WorkspaceDTO `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s NavWorkspace) String() string {
	return tea.Prettify(s)
}

func (s NavWorkspace) GoString() string {
	return s.String()
}

func (s *NavWorkspace) SetWorkspace(v *WorkspaceDTO) *NavWorkspace {
	s.Workspace = v
	return s
}

// 租户
type Tenant struct {
	// ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 租户名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 展示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// outsideTenantId
	OutsideTenantId *string `json:"outside_tenant_id,omitempty" xml:"outside_tenant_id,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// config
	Config *string `json:"config,omitempty" xml:"config,omitempty" require:"true"`
	// stack_view
	StackView *bool `json:"stack_view,omitempty" xml:"stack_view,omitempty" require:"true"`
}

func (s Tenant) String() string {
	return tea.Prettify(s)
}

func (s Tenant) GoString() string {
	return s.String()
}

func (s *Tenant) SetId(v int64) *Tenant {
	s.Id = &v
	return s
}

func (s *Tenant) SetName(v string) *Tenant {
	s.Name = &v
	return s
}

func (s *Tenant) SetDisplayName(v string) *Tenant {
	s.DisplayName = &v
	return s
}

func (s *Tenant) SetOutsideTenantId(v string) *Tenant {
	s.OutsideTenantId = &v
	return s
}

func (s *Tenant) SetStatus(v string) *Tenant {
	s.Status = &v
	return s
}

func (s *Tenant) SetConfig(v string) *Tenant {
	s.Config = &v
	return s
}

func (s *Tenant) SetStackView(v bool) *Tenant {
	s.StackView = &v
	return s
}

// 列值翻译映射关系
type TranslateMapping struct {
	// 原始列值
	From *string `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// 翻译后列值
	To *string `json:"to,omitempty" xml:"to,omitempty" require:"true"`
	// 正则类型 (完整正则或简单正则)
	Mode *string `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
}

func (s TranslateMapping) String() string {
	return tea.Prettify(s)
}

func (s TranslateMapping) GoString() string {
	return s.String()
}

func (s *TranslateMapping) SetFrom(v string) *TranslateMapping {
	s.From = &v
	return s
}

func (s *TranslateMapping) SetTo(v string) *TranslateMapping {
	s.To = &v
	return s
}

func (s *TranslateMapping) SetMode(v string) *TranslateMapping {
	s.Mode = &v
	return s
}

// LogSubRule
type XLogSubRule struct {
	// log path
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	//
	Metrics []*XExpression `json:"metrics,omitempty" xml:"metrics,omitempty" require:"true" type:"Repeated"`
	//
	RuleTags []*XExpression `json:"rule_tags,omitempty" xml:"rule_tags,omitempty" type:"Repeated"`
	// 白名单
	IncludeLines []*XExpression `json:"include_lines,omitempty" xml:"include_lines,omitempty" type:"Repeated"`
	//
	ExcludeLines []*XExpression `json:"exclude_lines,omitempty" xml:"exclude_lines,omitempty" type:"Repeated"`
	// x
	Paths []*string `json:"paths,omitempty" xml:"paths,omitempty" type:"Repeated"`
	// x
	PathLinkPrefix *string `json:"path_link_prefix,omitempty" xml:"path_link_prefix,omitempty"`
	//
	PathExpression *XExpression `json:"path_expression,omitempty" xml:"path_expression,omitempty"`
}

func (s XLogSubRule) String() string {
	return tea.Prettify(s)
}

func (s XLogSubRule) GoString() string {
	return s.String()
}

func (s *XLogSubRule) SetPath(v string) *XLogSubRule {
	s.Path = &v
	return s
}

func (s *XLogSubRule) SetMetrics(v []*XExpression) *XLogSubRule {
	s.Metrics = v
	return s
}

func (s *XLogSubRule) SetRuleTags(v []*XExpression) *XLogSubRule {
	s.RuleTags = v
	return s
}

func (s *XLogSubRule) SetIncludeLines(v []*XExpression) *XLogSubRule {
	s.IncludeLines = v
	return s
}

func (s *XLogSubRule) SetExcludeLines(v []*XExpression) *XLogSubRule {
	s.ExcludeLines = v
	return s
}

func (s *XLogSubRule) SetPaths(v []*string) *XLogSubRule {
	s.Paths = v
	return s
}

func (s *XLogSubRule) SetPathLinkPrefix(v string) *XLogSubRule {
	s.PathLinkPrefix = &v
	return s
}

func (s *XLogSubRule) SetPathExpression(v *XExpression) *XLogSubRule {
	s.PathExpression = v
	return s
}

// NavBizDomain
type NavBizDomain struct {
	// biz_domain
	BizDomain *BizDomain `json:"biz_domain,omitempty" xml:"biz_domain,omitempty" require:"true"`
}

func (s NavBizDomain) String() string {
	return tea.Prettify(s)
}

func (s NavBizDomain) GoString() string {
	return s.String()
}

func (s *NavBizDomain) SetBizDomain(v *BizDomain) *NavBizDomain {
	s.BizDomain = v
	return s
}

// Rule
type Rule struct {
	// ai_alarm_params
	AiAlarmParams *AiAlarmParams `json:"ai_alarm_params,omitempty" xml:"ai_alarm_params,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// run_type
	RunType *string `json:"run_type,omitempty" xml:"run_type,omitempty" require:"true"`
	// cal_time_range
	CalTimeRange *TimeRange `json:"cal_time_range,omitempty" xml:"cal_time_range,omitempty" require:"true"`
	// exclude_data_time_range
	ExcludeDataTimeRange *TimeRange `json:"exclude_data_time_range,omitempty" xml:"exclude_data_time_range,omitempty" require:"true"`
	// dim_filters
	DimFilters []*DimFilter `json:"dim_filters,omitempty" xml:"dim_filters,omitempty" require:"true" type:"Repeated"`
	// time_filter
	TimeFilter *TimeFilter `json:"time_filter,omitempty" xml:"time_filter,omitempty" require:"true"`
	// triggers
	Triggers []*Trigger `json:"triggers,omitempty" xml:"triggers,omitempty" require:"true" type:"Repeated"`
	// andor
	Andor *string `json:"andor,omitempty" xml:"andor,omitempty" require:"true"`
	// control_plan_auto
	ControlPlanAuto *bool `json:"control_plan_auto,omitempty" xml:"control_plan_auto,omitempty" require:"true"`
	// control_plans
	ControlPlans []*ControlPlan `json:"control_plans,omitempty" xml:"control_plans,omitempty" require:"true" type:"Repeated"`
	// function_id
	FunctionId *int64 `json:"function_id,omitempty" xml:"function_id,omitempty" require:"true"`
	// from_tmp_rule
	FromTmpRule *int64 `json:"from_tmp_rule,omitempty" xml:"from_tmp_rule,omitempty" require:"true"`
	// rule_type
	RuleType *string `json:"rule_type,omitempty" xml:"rule_type,omitempty" require:"true"`
	// ports
	Ports []*string `json:"ports,omitempty" xml:"ports,omitempty" require:"true" type:"Repeated"`
	// group_by
	GroupBy []*string `json:"group_by,omitempty" xml:"group_by,omitempty" require:"true" type:"Repeated"`
}

func (s Rule) String() string {
	return tea.Prettify(s)
}

func (s Rule) GoString() string {
	return s.String()
}

func (s *Rule) SetAiAlarmParams(v *AiAlarmParams) *Rule {
	s.AiAlarmParams = v
	return s
}

func (s *Rule) SetName(v string) *Rule {
	s.Name = &v
	return s
}

func (s *Rule) SetRunType(v string) *Rule {
	s.RunType = &v
	return s
}

func (s *Rule) SetCalTimeRange(v *TimeRange) *Rule {
	s.CalTimeRange = v
	return s
}

func (s *Rule) SetExcludeDataTimeRange(v *TimeRange) *Rule {
	s.ExcludeDataTimeRange = v
	return s
}

func (s *Rule) SetDimFilters(v []*DimFilter) *Rule {
	s.DimFilters = v
	return s
}

func (s *Rule) SetTimeFilter(v *TimeFilter) *Rule {
	s.TimeFilter = v
	return s
}

func (s *Rule) SetTriggers(v []*Trigger) *Rule {
	s.Triggers = v
	return s
}

func (s *Rule) SetAndor(v string) *Rule {
	s.Andor = &v
	return s
}

func (s *Rule) SetControlPlanAuto(v bool) *Rule {
	s.ControlPlanAuto = &v
	return s
}

func (s *Rule) SetControlPlans(v []*ControlPlan) *Rule {
	s.ControlPlans = v
	return s
}

func (s *Rule) SetFunctionId(v int64) *Rule {
	s.FunctionId = &v
	return s
}

func (s *Rule) SetFromTmpRule(v int64) *Rule {
	s.FromTmpRule = &v
	return s
}

func (s *Rule) SetRuleType(v string) *Rule {
	s.RuleType = &v
	return s
}

func (s *Rule) SetPorts(v []*string) *Rule {
	s.Ports = v
	return s
}

func (s *Rule) SetGroupBy(v []*string) *Rule {
	s.GroupBy = v
	return s
}

// NavTenant
type NavTenant struct {
	// tenant
	Tenant *Tenant `json:"tenant,omitempty" xml:"tenant,omitempty" require:"true"`
	// view_power
	ViewPower *bool `json:"view_power,omitempty" xml:"view_power,omitempty" require:"true"`
	// nav_workspaces
	NavWorkspaces []*NavWorkspace `json:"nav_workspaces,omitempty" xml:"nav_workspaces,omitempty" require:"true" type:"Repeated"`
	// nav_biz_domains
	NavBizDomains []*NavBizDomain `json:"nav_biz_domains,omitempty" xml:"nav_biz_domains,omitempty" require:"true" type:"Repeated"`
}

func (s NavTenant) String() string {
	return tea.Prettify(s)
}

func (s NavTenant) GoString() string {
	return s.String()
}

func (s *NavTenant) SetTenant(v *Tenant) *NavTenant {
	s.Tenant = v
	return s
}

func (s *NavTenant) SetViewPower(v bool) *NavTenant {
	s.ViewPower = &v
	return s
}

func (s *NavTenant) SetNavWorkspaces(v []*NavWorkspace) *NavTenant {
	s.NavWorkspaces = v
	return s
}

func (s *NavTenant) SetNavBizDomains(v []*NavBizDomain) *NavTenant {
	s.NavBizDomains = v
	return s
}

//
type XRule struct {
	// rule type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	//
	Interval *int64 `json:"interval,omitempty" xml:"interval,omitempty" require:"true"`
	// rule timeout
	Timeout *int64 `json:"timeout,omitempty" xml:"timeout,omitempty"`
	//
	ExternalTags []*XExpression `json:"external_tags,omitempty" xml:"external_tags,omitempty" type:"Repeated"`
	// log rules
	Rules []*XLogSubRule `json:"rules,omitempty" xml:"rules,omitempty" type:"Repeated"`
	// metrics
	Metrics []*XExpression `json:"metrics,omitempty" xml:"metrics,omitempty" type:"Repeated"`
	// prometheus port
	Port *int64 `json:"port,omitempty" xml:"port,omitempty"`
	// prometheus path
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	//
	Scheme *string `json:"scheme,omitempty" xml:"scheme,omitempty"`
	//
	Method *string `json:"method,omitempty" xml:"method,omitempty"`
	// tcp ports
	Ports []*int64 `json:"ports,omitempty" xml:"ports,omitempty" type:"Repeated"`
	//
	Tags []*XExpression `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	//
	Expression *string `json:"expression,omitempty" xml:"expression,omitempty"`
	//
	Target *XMatchExpression `json:"target,omitempty" xml:"target,omitempty"`
	//
	LocalHost *bool `json:"local_host,omitempty" xml:"local_host,omitempty"`
	//
	CaFile *string `json:"ca_file,omitempty" xml:"ca_file,omitempty"`
	//
	CertFile *string `json:"cert_file,omitempty" xml:"cert_file,omitempty"`
	//
	KeyFile *string `json:"key_file,omitempty" xml:"key_file,omitempty"`
	//
	BearerTokenFile *string `json:"bearer_token_file,omitempty" xml:"bearer_token_file,omitempty"`
	//
	InsecureSkipVerify *bool `json:"insecure_skip_verify,omitempty" xml:"insecure_skip_verify,omitempty"`
}

func (s XRule) String() string {
	return tea.Prettify(s)
}

func (s XRule) GoString() string {
	return s.String()
}

func (s *XRule) SetType(v string) *XRule {
	s.Type = &v
	return s
}

func (s *XRule) SetInterval(v int64) *XRule {
	s.Interval = &v
	return s
}

func (s *XRule) SetTimeout(v int64) *XRule {
	s.Timeout = &v
	return s
}

func (s *XRule) SetExternalTags(v []*XExpression) *XRule {
	s.ExternalTags = v
	return s
}

func (s *XRule) SetRules(v []*XLogSubRule) *XRule {
	s.Rules = v
	return s
}

func (s *XRule) SetMetrics(v []*XExpression) *XRule {
	s.Metrics = v
	return s
}

func (s *XRule) SetPort(v int64) *XRule {
	s.Port = &v
	return s
}

func (s *XRule) SetPath(v string) *XRule {
	s.Path = &v
	return s
}

func (s *XRule) SetScheme(v string) *XRule {
	s.Scheme = &v
	return s
}

func (s *XRule) SetMethod(v string) *XRule {
	s.Method = &v
	return s
}

func (s *XRule) SetPorts(v []*int64) *XRule {
	s.Ports = v
	return s
}

func (s *XRule) SetTags(v []*XExpression) *XRule {
	s.Tags = v
	return s
}

func (s *XRule) SetExpression(v string) *XRule {
	s.Expression = &v
	return s
}

func (s *XRule) SetTarget(v *XMatchExpression) *XRule {
	s.Target = v
	return s
}

func (s *XRule) SetLocalHost(v bool) *XRule {
	s.LocalHost = &v
	return s
}

func (s *XRule) SetCaFile(v string) *XRule {
	s.CaFile = &v
	return s
}

func (s *XRule) SetCertFile(v string) *XRule {
	s.CertFile = &v
	return s
}

func (s *XRule) SetKeyFile(v string) *XRule {
	s.KeyFile = &v
	return s
}

func (s *XRule) SetBearerTokenFile(v string) *XRule {
	s.BearerTokenFile = &v
	return s
}

func (s *XRule) SetInsecureSkipVerify(v bool) *XRule {
	s.InsecureSkipVerify = &v
	return s
}

// Model
type Model struct {
	// rules
	Rules []*Rule `json:"rules,omitempty" xml:"rules,omitempty" require:"true" type:"Repeated"`
	// batch_rule_id
	BatchRuleId *string `json:"batch_rule_id,omitempty" xml:"batch_rule_id,omitempty" require:"true"`
}

func (s Model) String() string {
	return tea.Prettify(s)
}

func (s Model) GoString() string {
	return s.String()
}

func (s *Model) SetRules(v []*Rule) *Model {
	s.Rules = v
	return s
}

func (s *Model) SetBatchRuleId(v string) *Model {
	s.BatchRuleId = &v
	return s
}

// Site
type Site struct {
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// local
	Local *string `json:"local,omitempty" xml:"local,omitempty" require:"true"`
	// domain
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// token
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
	// config
	Config *string `json:"config,omitempty" xml:"config,omitempty" require:"true"`
	// url_preffix
	UrlPreffix *string `json:"url_preffix,omitempty" xml:"url_preffix,omitempty" require:"true"`
	// readonly
	Readonly *string `json:"readonly,omitempty" xml:"readonly,omitempty" require:"true"`
}

func (s Site) String() string {
	return tea.Prettify(s)
}

func (s Site) GoString() string {
	return s.String()
}

func (s *Site) SetId(v int64) *Site {
	s.Id = &v
	return s
}

func (s *Site) SetName(v string) *Site {
	s.Name = &v
	return s
}

func (s *Site) SetDisplayName(v string) *Site {
	s.DisplayName = &v
	return s
}

func (s *Site) SetLocal(v string) *Site {
	s.Local = &v
	return s
}

func (s *Site) SetDomain(v string) *Site {
	s.Domain = &v
	return s
}

func (s *Site) SetToken(v string) *Site {
	s.Token = &v
	return s
}

func (s *Site) SetConfig(v string) *Site {
	s.Config = &v
	return s
}

func (s *Site) SetUrlPreffix(v string) *Site {
	s.UrlPreffix = &v
	return s
}

func (s *Site) SetReadonly(v string) *Site {
	s.Readonly = &v
	return s
}

// 列值翻译
type Translate struct {
	// 列值翻译的默认值
	DefaultValue *string `json:"default_value,omitempty" xml:"default_value,omitempty"`
	// 列值翻译映射关系
	Mappings []*TranslateMapping `json:"mappings,omitempty" xml:"mappings,omitempty" type:"Repeated"`
}

func (s Translate) String() string {
	return tea.Prettify(s)
}

func (s Translate) GoString() string {
	return s.String()
}

func (s *Translate) SetDefaultValue(v string) *Translate {
	s.DefaultValue = &v
	return s
}

func (s *Translate) SetMappings(v []*TranslateMapping) *Translate {
	s.Mappings = v
	return s
}

// resource target
type XTarget struct {
	// target type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// resource kind
	MetadataKind *string `json:"metadata_kind,omitempty" xml:"metadata_kind,omitempty"`
	// resource name
	MetadataName *string `json:"metadata_name,omitempty" xml:"metadata_name,omitempty"`
	// where 条件
	Conditions []*XCondition `json:"conditions,omitempty" xml:"conditions,omitempty" type:"Repeated"`
	//
	FrontType *string `json:"front_type,omitempty" xml:"front_type,omitempty"`
	//
	FromDatasourceUuid *string `json:"from_datasource_uuid,omitempty" xml:"from_datasource_uuid,omitempty"`
	//
	FromDatasourceName *string `json:"from_datasource_name,omitempty" xml:"from_datasource_name,omitempty"`
	//
	FromDatasourceMd5 *string `json:"from_datasource_md5,omitempty" xml:"from_datasource_md5,omitempty"`
	//
	FromDatasourceMetricName *string `json:"from_datasource_metric_name,omitempty" xml:"from_datasource_metric_name,omitempty"`
}

func (s XTarget) String() string {
	return tea.Prettify(s)
}

func (s XTarget) GoString() string {
	return s.String()
}

func (s *XTarget) SetType(v string) *XTarget {
	s.Type = &v
	return s
}

func (s *XTarget) SetMetadataKind(v string) *XTarget {
	s.MetadataKind = &v
	return s
}

func (s *XTarget) SetMetadataName(v string) *XTarget {
	s.MetadataName = &v
	return s
}

func (s *XTarget) SetConditions(v []*XCondition) *XTarget {
	s.Conditions = v
	return s
}

func (s *XTarget) SetFrontType(v string) *XTarget {
	s.FrontType = &v
	return s
}

func (s *XTarget) SetFromDatasourceUuid(v string) *XTarget {
	s.FromDatasourceUuid = &v
	return s
}

func (s *XTarget) SetFromDatasourceName(v string) *XTarget {
	s.FromDatasourceName = &v
	return s
}

func (s *XTarget) SetFromDatasourceMd5(v string) *XTarget {
	s.FromDatasourceMd5 = &v
	return s
}

func (s *XTarget) SetFromDatasourceMetricName(v string) *XTarget {
	s.FromDatasourceMetricName = &v
	return s
}

// OpsFilter
type OpsFilter struct {
	// black
	Black *bool `json:"black,omitempty" xml:"black,omitempty" require:"true"`
	// names
	Names []*string `json:"names,omitempty" xml:"names,omitempty" require:"true" type:"Repeated"`
}

func (s OpsFilter) String() string {
	return tea.Prettify(s)
}

func (s OpsFilter) GoString() string {
	return s.String()
}

func (s *OpsFilter) SetBlack(v bool) *OpsFilter {
	s.Black = &v
	return s
}

func (s *OpsFilter) SetNames(v []*string) *OpsFilter {
	s.Names = v
	return s
}

// 指标时序值
type MetricValue struct {
	// 时间戳
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// double类型值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s MetricValue) String() string {
	return tea.Prettify(s)
}

func (s MetricValue) GoString() string {
	return s.String()
}

func (s *MetricValue) SetTimestamp(v int64) *MetricValue {
	s.Timestamp = &v
	return s
}

func (s *MetricValue) SetValue(v string) *MetricValue {
	s.Value = &v
	return s
}

// spec
type XSpec struct {
	//
	Target *XTarget `json:"target,omitempty" xml:"target,omitempty" require:"true"`
	//
	Rule *XRule `json:"rule,omitempty" xml:"rule,omitempty" require:"true"`
}

func (s XSpec) String() string {
	return tea.Prettify(s)
}

func (s XSpec) GoString() string {
	return s.String()
}

func (s *XSpec) SetTarget(v *XTarget) *XSpec {
	s.Target = v
	return s
}

func (s *XSpec) SetRule(v *XRule) *XSpec {
	s.Rule = v
	return s
}

// NavSite
type NavSite struct {
	// site
	Site *Site `json:"site,omitempty" xml:"site,omitempty" require:"true"`
	// nav_tenants
	NavTenants []*NavTenant `json:"nav_tenants,omitempty" xml:"nav_tenants,omitempty" require:"true" type:"Repeated"`
}

func (s NavSite) String() string {
	return tea.Prettify(s)
}

func (s NavSite) GoString() string {
	return s.String()
}

func (s *NavSite) SetSite(v *Site) *NavSite {
	s.Site = v
	return s
}

func (s *NavSite) SetNavTenants(v []*NavTenant) *NavSite {
	s.NavTenants = v
	return s
}

// AlarmHistoryStatsDTO
type AlarmHistoryStatsDTO struct {
	// alarm_time
	AlarmTime *int64 `json:"alarm_time,omitempty" xml:"alarm_time,omitempty" require:"true"`
	// alarm_level
	AlarmLevel *int64 `json:"alarm_level,omitempty" xml:"alarm_level,omitempty" require:"true"`
	// count
	Count *int64 `json:"count,omitempty" xml:"count,omitempty" require:"true"`
}

func (s AlarmHistoryStatsDTO) String() string {
	return tea.Prettify(s)
}

func (s AlarmHistoryStatsDTO) GoString() string {
	return s.String()
}

func (s *AlarmHistoryStatsDTO) SetAlarmTime(v int64) *AlarmHistoryStatsDTO {
	s.AlarmTime = &v
	return s
}

func (s *AlarmHistoryStatsDTO) SetAlarmLevel(v int64) *AlarmHistoryStatsDTO {
	s.AlarmLevel = &v
	return s
}

func (s *AlarmHistoryStatsDTO) SetCount(v int64) *AlarmHistoryStatsDTO {
	s.Count = &v
	return s
}

// Metrics 中的一个 field
type TimeSeriesMetricsField struct {
	// Field key
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// Field value
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s TimeSeriesMetricsField) String() string {
	return tea.Prettify(s)
}

func (s TimeSeriesMetricsField) GoString() string {
	return s.String()
}

func (s *TimeSeriesMetricsField) SetKey(v string) *TimeSeriesMetricsField {
	s.Key = &v
	return s
}

func (s *TimeSeriesMetricsField) SetValue(v string) *TimeSeriesMetricsField {
	s.Value = &v
	return s
}

// time and value
type XTimeStringValue struct {
	// unix timestamp (s)
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// double string
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s XTimeStringValue) String() string {
	return tea.Prettify(s)
}

func (s XTimeStringValue) GoString() string {
	return s.String()
}

func (s *XTimeStringValue) SetTimestamp(v int64) *XTimeStringValue {
	s.Timestamp = &v
	return s
}

func (s *XTimeStringValue) SetValue(v string) *XTimeStringValue {
	s.Value = &v
	return s
}

// 日志过滤列
type UniqueDim struct {
	// 列名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 左起第几个
	LeftIndex *int64 `json:"left_index,omitempty" xml:"left_index,omitempty" require:"true"`
	// 左起字符串
	Left *string `json:"left,omitempty" xml:"left,omitempty"`
	// 右至字符串
	Right *string `json:"right,omitempty" xml:"right,omitempty"`
	// 列值翻译
	Translate *Translate `json:"translate,omitempty" xml:"translate,omitempty"`
}

func (s UniqueDim) String() string {
	return tea.Prettify(s)
}

func (s UniqueDim) GoString() string {
	return s.String()
}

func (s *UniqueDim) SetName(v string) *UniqueDim {
	s.Name = &v
	return s
}

func (s *UniqueDim) SetLeftIndex(v int64) *UniqueDim {
	s.LeftIndex = &v
	return s
}

func (s *UniqueDim) SetLeft(v string) *UniqueDim {
	s.Left = &v
	return s
}

func (s *UniqueDim) SetRight(v string) *UniqueDim {
	s.Right = &v
	return s
}

func (s *UniqueDim) SetTranslate(v *Translate) *UniqueDim {
	s.Translate = v
	return s
}

// 资源基本信息
type XResource struct {
	// 全球唯一标识符（32位）。
	// Update操作，必填
	// Create操作，非必填，默认不传，后端会自动生成。特殊情况可以传入，比如一些领域需要固定该UUID。
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" maxLength:"32" minLength:"32"`
	// 名称。命名规则：^[a-zA-Z\u4E00-\u9FA5][a-zA-Z0-9_-\u4E00-\u9FA5]*$$
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true" maxLength:"64" minLength:"1"`
	// 描述。
	//
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true" maxLength:"512" minLength:"1"`
	// 父目录UUID。全球唯一标识符（32位）。
	// 00000000000000000000000000000000特指根目录UUID
	ParentUuid *string `json:"parent_uuid,omitempty" xml:"parent_uuid,omitempty" require:"true" maxLength:"32" minLength:"32"`
	// 作用范围
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty" require:"true"`
	// 是否生效。默认true
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// 是否开放。默认为false
	Open *bool `json:"open,omitempty" xml:"open,omitempty"`
	// 资源版本
	Version *int64 `json:"version,omitempty" xml:"version,omitempty"`
	// inner tenant id
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// inner workspace id
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// 创建者
	CreatedBy *string `json:"created_by,omitempty" xml:"created_by,omitempty"`
	// unix time 秒
	CreatedAt *int64 `json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 更新者
	UpdatedBy *string `json:"updated_by,omitempty" xml:"updated_by,omitempty"`
	// 更新时间
	UpdatedAt *int64 `json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// 资源类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	//
	Md5 *string `json:"md5,omitempty" xml:"md5,omitempty"`
	//
	Priority *string `json:"priority,omitempty" xml:"priority,omitempty"`
	//
	TimeToLive *string `json:"time_to_live,omitempty" xml:"time_to_live,omitempty"`
}

func (s XResource) String() string {
	return tea.Prettify(s)
}

func (s XResource) GoString() string {
	return s.String()
}

func (s *XResource) SetUuid(v string) *XResource {
	s.Uuid = &v
	return s
}

func (s *XResource) SetName(v string) *XResource {
	s.Name = &v
	return s
}

func (s *XResource) SetDescription(v string) *XResource {
	s.Description = &v
	return s
}

func (s *XResource) SetParentUuid(v string) *XResource {
	s.ParentUuid = &v
	return s
}

func (s *XResource) SetScope(v string) *XResource {
	s.Scope = &v
	return s
}

func (s *XResource) SetEnabled(v bool) *XResource {
	s.Enabled = &v
	return s
}

func (s *XResource) SetOpen(v bool) *XResource {
	s.Open = &v
	return s
}

func (s *XResource) SetVersion(v int64) *XResource {
	s.Version = &v
	return s
}

func (s *XResource) SetTenantId(v int64) *XResource {
	s.TenantId = &v
	return s
}

func (s *XResource) SetWorkspaceId(v int64) *XResource {
	s.WorkspaceId = &v
	return s
}

func (s *XResource) SetCreatedBy(v string) *XResource {
	s.CreatedBy = &v
	return s
}

func (s *XResource) SetCreatedAt(v int64) *XResource {
	s.CreatedAt = &v
	return s
}

func (s *XResource) SetUpdatedBy(v string) *XResource {
	s.UpdatedBy = &v
	return s
}

func (s *XResource) SetUpdatedAt(v int64) *XResource {
	s.UpdatedAt = &v
	return s
}

func (s *XResource) SetType(v string) *XResource {
	s.Type = &v
	return s
}

func (s *XResource) SetMd5(v string) *XResource {
	s.Md5 = &v
	return s
}

func (s *XResource) SetPriority(v string) *XResource {
	s.Priority = &v
	return s
}

func (s *XResource) SetTimeToLive(v string) *XResource {
	s.TimeToLive = &v
	return s
}

// 计算配置包含值对象
type ContainVals struct {
	// 包含值列表
	Vals []*string `json:"vals,omitempty" xml:"vals,omitempty" type:"Repeated"`
}

func (s ContainVals) String() string {
	return tea.Prettify(s)
}

func (s ContainVals) GoString() string {
	return s.String()
}

func (s *ContainVals) SetVals(v []*string) *ContainVals {
	s.Vals = v
	return s
}

// StackState
type StackState struct {
	// state
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// values
	Values []*string `json:"values,omitempty" xml:"values,omitempty" require:"true" type:"Repeated"`
	// is_black
	IsBlack *bool `json:"is_black,omitempty" xml:"is_black,omitempty" require:"true"`
}

func (s StackState) String() string {
	return tea.Prettify(s)
}

func (s StackState) GoString() string {
	return s.String()
}

func (s *StackState) SetState(v string) *StackState {
	s.State = &v
	return s
}

func (s *StackState) SetValues(v []*string) *StackState {
	s.Values = v
	return s
}

func (s *StackState) SetIsBlack(v bool) *StackState {
	s.IsBlack = &v
	return s
}

// 对应Map结构
type KeySet struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s KeySet) String() string {
	return tea.Prettify(s)
}

func (s KeySet) GoString() string {
	return s.String()
}

func (s *KeySet) SetKey(v string) *KeySet {
	s.Key = &v
	return s
}

func (s *KeySet) SetValue(v string) *KeySet {
	s.Value = &v
	return s
}

// 用户组关联关系
type UserGroupRelation struct {
	// ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 用户组 ID
	UserGroupId *int64 `json:"user_group_id,omitempty" xml:"user_group_id,omitempty" require:"true"`
	// 钉钉机器人webhook
	DingtalkWebhook *string `json:"dingtalk_webhook,omitempty" xml:"dingtalk_webhook,omitempty" require:"true"`
	// 联系人登录名
	UserLoginName *string `json:"user_login_name,omitempty" xml:"user_login_name,omitempty" require:"true"`
	// 用户展示名
	UserDisplayName *string `json:"user_display_name,omitempty" xml:"user_display_name,omitempty"`
	// 钉钉机器人
	DingDingRobot *string `json:"ding_ding_robot,omitempty" xml:"ding_ding_robot,omitempty"`
}

func (s UserGroupRelation) String() string {
	return tea.Prettify(s)
}

func (s UserGroupRelation) GoString() string {
	return s.String()
}

func (s *UserGroupRelation) SetId(v int64) *UserGroupRelation {
	s.Id = &v
	return s
}

func (s *UserGroupRelation) SetUserGroupId(v int64) *UserGroupRelation {
	s.UserGroupId = &v
	return s
}

func (s *UserGroupRelation) SetDingtalkWebhook(v string) *UserGroupRelation {
	s.DingtalkWebhook = &v
	return s
}

func (s *UserGroupRelation) SetUserLoginName(v string) *UserGroupRelation {
	s.UserLoginName = &v
	return s
}

func (s *UserGroupRelation) SetUserDisplayName(v string) *UserGroupRelation {
	s.UserDisplayName = &v
	return s
}

func (s *UserGroupRelation) SetDingDingRobot(v string) *UserGroupRelation {
	s.DingDingRobot = &v
	return s
}

// TopAlarmDO
type TopAlarmDO struct {
	// error
	Error *string `json:"error,omitempty" xml:"error,omitempty" require:"true"`
	// error_count
	ErrorCount *int64 `json:"error_count,omitempty" xml:"error_count,omitempty" require:"true"`
	// warn
	Warn *string `json:"warn,omitempty" xml:"warn,omitempty" require:"true"`
	// warn_count
	WarnCount *int64 `json:"warn_count,omitempty" xml:"warn_count,omitempty" require:"true"`
	// alarm_level
	AlarmLevel *int64 `json:"alarm_level,omitempty" xml:"alarm_level,omitempty" require:"true"`
	// max_alarm_count
	MaxAlarmCount *int64 `json:"max_alarm_count,omitempty" xml:"max_alarm_count,omitempty" require:"true"`
	// emergency_copy
	EmergencyCopy *string `json:"emergency_copy,omitempty" xml:"emergency_copy,omitempty" require:"true"`
	// emergency_url
	EmergencyUrl *string `json:"emergency_url,omitempty" xml:"emergency_url,omitempty" require:"true"`
}

func (s TopAlarmDO) String() string {
	return tea.Prettify(s)
}

func (s TopAlarmDO) GoString() string {
	return s.String()
}

func (s *TopAlarmDO) SetError(v string) *TopAlarmDO {
	s.Error = &v
	return s
}

func (s *TopAlarmDO) SetErrorCount(v int64) *TopAlarmDO {
	s.ErrorCount = &v
	return s
}

func (s *TopAlarmDO) SetWarn(v string) *TopAlarmDO {
	s.Warn = &v
	return s
}

func (s *TopAlarmDO) SetWarnCount(v int64) *TopAlarmDO {
	s.WarnCount = &v
	return s
}

func (s *TopAlarmDO) SetAlarmLevel(v int64) *TopAlarmDO {
	s.AlarmLevel = &v
	return s
}

func (s *TopAlarmDO) SetMaxAlarmCount(v int64) *TopAlarmDO {
	s.MaxAlarmCount = &v
	return s
}

func (s *TopAlarmDO) SetEmergencyCopy(v string) *TopAlarmDO {
	s.EmergencyCopy = &v
	return s
}

func (s *TopAlarmDO) SetEmergencyUrl(v string) *TopAlarmDO {
	s.EmergencyUrl = &v
	return s
}

// AlarmDO
type AlarmDO struct {
	// model
	Model *Model `json:"model,omitempty" xml:"model,omitempty" require:"true"`
	// level
	Level *string `json:"level,omitempty" xml:"level,omitempty" require:"true"`
	// frequency
	Frequency *int64 `json:"frequency,omitempty" xml:"frequency,omitempty" require:"true"`
	// silent_minute
	SilentMinute *string `json:"silent_minute,omitempty" xml:"silent_minute,omitempty" require:"true"`
	// emergency_copy
	EmergencyCopy *string `json:"emergency_copy,omitempty" xml:"emergency_copy,omitempty" require:"true"`
	// emergency_url
	EmergencyUrl *string `json:"emergency_url,omitempty" xml:"emergency_url,omitempty" require:"true"`
	// time_zone
	TimeZone *string `json:"time_zone,omitempty" xml:"time_zone,omitempty" require:"true"`
	// time_zone_custom
	TimeZoneCustom *bool `json:"time_zone_custom,omitempty" xml:"time_zone_custom,omitempty" require:"true"`
}

func (s AlarmDO) String() string {
	return tea.Prettify(s)
}

func (s AlarmDO) GoString() string {
	return s.String()
}

func (s *AlarmDO) SetModel(v *Model) *AlarmDO {
	s.Model = v
	return s
}

func (s *AlarmDO) SetLevel(v string) *AlarmDO {
	s.Level = &v
	return s
}

func (s *AlarmDO) SetFrequency(v int64) *AlarmDO {
	s.Frequency = &v
	return s
}

func (s *AlarmDO) SetSilentMinute(v string) *AlarmDO {
	s.SilentMinute = &v
	return s
}

func (s *AlarmDO) SetEmergencyCopy(v string) *AlarmDO {
	s.EmergencyCopy = &v
	return s
}

func (s *AlarmDO) SetEmergencyUrl(v string) *AlarmDO {
	s.EmergencyUrl = &v
	return s
}

func (s *AlarmDO) SetTimeZone(v string) *AlarmDO {
	s.TimeZone = &v
	return s
}

func (s *AlarmDO) SetTimeZoneCustom(v bool) *AlarmDO {
	s.TimeZoneCustom = &v
	return s
}

// AlarmHistory
type AlarmHistory struct {
	// alarm_level
	AlarmLevel *int64 `json:"alarm_level,omitempty" xml:"alarm_level,omitempty" require:"true"`
	// alarmPkgId
	AlarmPkgId *int64 `json:"alarm_pkg_id,omitempty" xml:"alarm_pkg_id,omitempty" require:"true"`
	// alarm_rule_name
	AlarmRuleName *string `json:"alarm_rule_name,omitempty" xml:"alarm_rule_name,omitempty" require:"true"`
	// alarmSourceType
	AlarmSourceType *string `json:"alarm_source_type,omitempty" xml:"alarm_source_type,omitempty" require:"true"`
	// alarm_time
	AlarmTime *int64 `json:"alarm_time,omitempty" xml:"alarm_time,omitempty" require:"true"`
	// biz_domain_id
	BizDomainId *int64 `json:"biz_domain_id,omitempty" xml:"biz_domain_id,omitempty" require:"true"`
	// context
	Context *string `json:"context,omitempty" xml:"context,omitempty" require:"true"`
	// custom_plugin_id
	CustomPluginId *int64 `json:"custom_plugin_id,omitempty" xml:"custom_plugin_id,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// meta_group_id
	MetaGroupId *int64 `json:"meta_group_id,omitempty" xml:"meta_group_id,omitempty" require:"true"`
	// msg
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// stack_entity_id
	StackEntityId *int64 `json:"stack_entity_id,omitempty" xml:"stack_entity_id,omitempty" require:"true"`
	// stack_id
	StackId *int64 `json:"stack_id,omitempty" xml:"stack_id,omitempty" require:"true"`
	// stack_monitor_item_name
	StackMonitorItemName *string `json:"stack_monitor_item_name,omitempty" xml:"stack_monitor_item_name,omitempty" require:"true"`
	// stack_universal_table_id
	StackUniversalTableId *string `json:"stack_universal_table_id,omitempty" xml:"stack_universal_table_id,omitempty" require:"true"`
	// tag_value_id
	TagValueId *int64 `json:"tag_value_id,omitempty" xml:"tag_value_id,omitempty" require:"true"`
	// tenant_id
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s AlarmHistory) String() string {
	return tea.Prettify(s)
}

func (s AlarmHistory) GoString() string {
	return s.String()
}

func (s *AlarmHistory) SetAlarmLevel(v int64) *AlarmHistory {
	s.AlarmLevel = &v
	return s
}

func (s *AlarmHistory) SetAlarmPkgId(v int64) *AlarmHistory {
	s.AlarmPkgId = &v
	return s
}

func (s *AlarmHistory) SetAlarmRuleName(v string) *AlarmHistory {
	s.AlarmRuleName = &v
	return s
}

func (s *AlarmHistory) SetAlarmSourceType(v string) *AlarmHistory {
	s.AlarmSourceType = &v
	return s
}

func (s *AlarmHistory) SetAlarmTime(v int64) *AlarmHistory {
	s.AlarmTime = &v
	return s
}

func (s *AlarmHistory) SetBizDomainId(v int64) *AlarmHistory {
	s.BizDomainId = &v
	return s
}

func (s *AlarmHistory) SetContext(v string) *AlarmHistory {
	s.Context = &v
	return s
}

func (s *AlarmHistory) SetCustomPluginId(v int64) *AlarmHistory {
	s.CustomPluginId = &v
	return s
}

func (s *AlarmHistory) SetId(v int64) *AlarmHistory {
	s.Id = &v
	return s
}

func (s *AlarmHistory) SetMetaGroupId(v int64) *AlarmHistory {
	s.MetaGroupId = &v
	return s
}

func (s *AlarmHistory) SetMsg(v string) *AlarmHistory {
	s.Msg = &v
	return s
}

func (s *AlarmHistory) SetStackEntityId(v int64) *AlarmHistory {
	s.StackEntityId = &v
	return s
}

func (s *AlarmHistory) SetStackId(v int64) *AlarmHistory {
	s.StackId = &v
	return s
}

func (s *AlarmHistory) SetStackMonitorItemName(v string) *AlarmHistory {
	s.StackMonitorItemName = &v
	return s
}

func (s *AlarmHistory) SetStackUniversalTableId(v string) *AlarmHistory {
	s.StackUniversalTableId = &v
	return s
}

func (s *AlarmHistory) SetTagValueId(v int64) *AlarmHistory {
	s.TagValueId = &v
	return s
}

func (s *AlarmHistory) SetTenantId(v int64) *AlarmHistory {
	s.TenantId = &v
	return s
}

func (s *AlarmHistory) SetWorkspaceId(v int64) *AlarmHistory {
	s.WorkspaceId = &v
	return s
}

//
type XTimeMetricsValue struct {
	//
	Values []*XStringKeyValue `json:"values,omitempty" xml:"values,omitempty" require:"true" type:"Repeated"`
	//
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
}

func (s XTimeMetricsValue) String() string {
	return tea.Prettify(s)
}

func (s XTimeMetricsValue) GoString() string {
	return s.String()
}

func (s *XTimeMetricsValue) SetValues(v []*XStringKeyValue) *XTimeMetricsValue {
	s.Values = v
	return s
}

func (s *XTimeMetricsValue) SetTimestamp(v int64) *XTimeMetricsValue {
	s.Timestamp = &v
	return s
}

// NavContent
type NavContent struct {
	// hasw
	Hasw *bool `json:"hasw,omitempty" xml:"hasw,omitempty" require:"true"`
	// hast
	Hast *bool `json:"hast,omitempty" xml:"hast,omitempty" require:"true"`
	// hasbiz
	Hasbiz *bool `json:"hasbiz,omitempty" xml:"hasbiz,omitempty" require:"true"`
	// nav_sites
	NavSites []*NavSite `json:"nav_sites,omitempty" xml:"nav_sites,omitempty" require:"true" type:"Repeated"`
}

func (s NavContent) String() string {
	return tea.Prettify(s)
}

func (s NavContent) GoString() string {
	return s.String()
}

func (s *NavContent) SetHasw(v bool) *NavContent {
	s.Hasw = &v
	return s
}

func (s *NavContent) SetHast(v bool) *NavContent {
	s.Hast = &v
	return s
}

func (s *NavContent) SetHasbiz(v bool) *NavContent {
	s.Hasbiz = &v
	return s
}

func (s *NavContent) SetNavSites(v []*NavSite) *NavContent {
	s.NavSites = v
	return s
}

// 指标数据
type MetricData struct {
	// 维度信息
	Tags []*KeySet `json:"tags,omitempty" xml:"tags,omitempty" require:"true" type:"Repeated"`
	// 时序数据
	Values []*MetricValue `json:"values,omitempty" xml:"values,omitempty" require:"true" type:"Repeated"`
}

func (s MetricData) String() string {
	return tea.Prettify(s)
}

func (s MetricData) GoString() string {
	return s.String()
}

func (s *MetricData) SetTags(v []*KeySet) *MetricData {
	s.Tags = v
	return s
}

func (s *MetricData) SetValues(v []*MetricValue) *MetricData {
	s.Values = v
	return s
}

// 日志过滤规则
type Filter struct {
	// 过滤列
	Dim *UniqueDim `json:"dim,omitempty" xml:"dim,omitempty" require:"true"`
	// 过滤目标值列表
	Values []*string `json:"values,omitempty" xml:"values,omitempty" require:"true" type:"Repeated"`
}

func (s Filter) String() string {
	return tea.Prettify(s)
}

func (s Filter) GoString() string {
	return s.String()
}

func (s *Filter) SetDim(v *UniqueDim) *Filter {
	s.Dim = v
	return s
}

func (s *Filter) SetValues(v []*string) *Filter {
	s.Values = v
	return s
}

// metric data
type XMetricData struct {
	// key value
	Metric []*XStringKeyValue `json:"metric,omitempty" xml:"metric,omitempty" require:"true" type:"Repeated"`
	// time value
	Value *XTimeStringValue `json:"value,omitempty" xml:"value,omitempty"`
	//
	Values []*XTimeStringValue `json:"values,omitempty" xml:"values,omitempty" type:"Repeated"`
}

func (s XMetricData) String() string {
	return tea.Prettify(s)
}

func (s XMetricData) GoString() string {
	return s.String()
}

func (s *XMetricData) SetMetric(v []*XStringKeyValue) *XMetricData {
	s.Metric = v
	return s
}

func (s *XMetricData) SetValue(v *XTimeStringValue) *XMetricData {
	s.Value = v
	return s
}

func (s *XMetricData) SetValues(v []*XTimeStringValue) *XMetricData {
	s.Values = v
	return s
}

// Condition
type Condition struct {
	// plugin
	Plugin *string `json:"plugin,omitempty" xml:"plugin,omitempty" require:"true"`
	// content_type
	ContentType *string `json:"content_type,omitempty" xml:"content_type,omitempty" require:"true"`
	// tag
	Tag *string `json:"tag,omitempty" xml:"tag,omitempty" require:"true"`
	// ds_id
	DsId *string `json:"ds_id,omitempty" xml:"ds_id,omitempty" require:"true"`
	// new_cp_id
	NewCpId *string `json:"new_cp_id,omitempty" xml:"new_cp_id,omitempty" require:"true"`
	// start
	Start *int64 `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// end
	End *int64 `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// tick_interval
	TickInterval *int64 `json:"tick_interval,omitempty" xml:"tick_interval,omitempty" require:"true"`
	// use_new
	UseNew *bool `json:"use_new,omitempty" xml:"use_new,omitempty" require:"true"`
	// groupby
	Groupby []*string `json:"groupby,omitempty" xml:"groupby,omitempty" require:"true" type:"Repeated"`
	// values
	Values []*KeySet `json:"values,omitempty" xml:"values,omitempty" require:"true" type:"Repeated"`
	// tenant_id
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// am_old_data_struct
	AmOldDataStruct *bool `json:"am_old_data_struct,omitempty" xml:"am_old_data_struct,omitempty" require:"true"`
	// am_is_spm
	AmIsSpm *bool `json:"am_is_spm,omitempty" xml:"am_is_spm,omitempty" require:"true"`
	// old_ds_id
	OldDsId *string `json:"old_ds_id,omitempty" xml:"old_ds_id,omitempty" require:"true"`
}

func (s Condition) String() string {
	return tea.Prettify(s)
}

func (s Condition) GoString() string {
	return s.String()
}

func (s *Condition) SetPlugin(v string) *Condition {
	s.Plugin = &v
	return s
}

func (s *Condition) SetContentType(v string) *Condition {
	s.ContentType = &v
	return s
}

func (s *Condition) SetTag(v string) *Condition {
	s.Tag = &v
	return s
}

func (s *Condition) SetDsId(v string) *Condition {
	s.DsId = &v
	return s
}

func (s *Condition) SetNewCpId(v string) *Condition {
	s.NewCpId = &v
	return s
}

func (s *Condition) SetStart(v int64) *Condition {
	s.Start = &v
	return s
}

func (s *Condition) SetEnd(v int64) *Condition {
	s.End = &v
	return s
}

func (s *Condition) SetTickInterval(v int64) *Condition {
	s.TickInterval = &v
	return s
}

func (s *Condition) SetUseNew(v bool) *Condition {
	s.UseNew = &v
	return s
}

func (s *Condition) SetGroupby(v []*string) *Condition {
	s.Groupby = v
	return s
}

func (s *Condition) SetValues(v []*KeySet) *Condition {
	s.Values = v
	return s
}

func (s *Condition) SetTenantId(v int64) *Condition {
	s.TenantId = &v
	return s
}

func (s *Condition) SetWorkspaceId(v int64) *Condition {
	s.WorkspaceId = &v
	return s
}

func (s *Condition) SetAmOldDataStruct(v bool) *Condition {
	s.AmOldDataStruct = &v
	return s
}

func (s *Condition) SetAmIsSpm(v bool) *Condition {
	s.AmIsSpm = &v
	return s
}

func (s *Condition) SetOldDsId(v string) *Condition {
	s.OldDsId = &v
	return s
}

// NodeTopItem
type NodeTopItem struct {
	// 主机名称
	Node *string `json:"node,omitempty" xml:"node,omitempty" require:"true"`
	// 应用TopN统计值，有可能有小数，使用前转换为数值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s NodeTopItem) String() string {
	return tea.Prettify(s)
}

func (s NodeTopItem) GoString() string {
	return s.String()
}

func (s *NodeTopItem) SetNode(v string) *NodeTopItem {
	s.Node = &v
	return s
}

func (s *NodeTopItem) SetValue(v string) *NodeTopItem {
	s.Value = &v
	return s
}

// TraasAppGroupDto
type TraasAppGroupDto struct {
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// parent_uuid
	ParentUuid *string `json:"parent_uuid,omitempty" xml:"parent_uuid,omitempty"`
	// layer
	Layer *int64 `json:"layer,omitempty" xml:"layer,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// outside_parent_id
	OutsideParentId *string `json:"outside_parent_id,omitempty" xml:"outside_parent_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s TraasAppGroupDto) String() string {
	return tea.Prettify(s)
}

func (s TraasAppGroupDto) GoString() string {
	return s.String()
}

func (s *TraasAppGroupDto) SetUuid(v string) *TraasAppGroupDto {
	s.Uuid = &v
	return s
}

func (s *TraasAppGroupDto) SetName(v string) *TraasAppGroupDto {
	s.Name = &v
	return s
}

func (s *TraasAppGroupDto) SetDisplayName(v string) *TraasAppGroupDto {
	s.DisplayName = &v
	return s
}

func (s *TraasAppGroupDto) SetParentUuid(v string) *TraasAppGroupDto {
	s.ParentUuid = &v
	return s
}

func (s *TraasAppGroupDto) SetLayer(v int64) *TraasAppGroupDto {
	s.Layer = &v
	return s
}

func (s *TraasAppGroupDto) SetTenantUuid(v string) *TraasAppGroupDto {
	s.TenantUuid = &v
	return s
}

func (s *TraasAppGroupDto) SetTenantName(v string) *TraasAppGroupDto {
	s.TenantName = &v
	return s
}

func (s *TraasAppGroupDto) SetOutsideId(v string) *TraasAppGroupDto {
	s.OutsideId = &v
	return s
}

func (s *TraasAppGroupDto) SetOutsideParentId(v string) *TraasAppGroupDto {
	s.OutsideParentId = &v
	return s
}

func (s *TraasAppGroupDto) SetSourceFrom(v string) *TraasAppGroupDto {
	s.SourceFrom = &v
	return s
}

func (s *TraasAppGroupDto) SetExtension(v string) *TraasAppGroupDto {
	s.Extension = &v
	return s
}

func (s *TraasAppGroupDto) SetGmtCreate(v string) *TraasAppGroupDto {
	s.GmtCreate = &v
	return s
}

func (s *TraasAppGroupDto) SetGmtModified(v string) *TraasAppGroupDto {
	s.GmtModified = &v
	return s
}

// AlarmHistoryStatsDTOsKeySet
type AlarmHistoryStatsDTOsKeySet struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value []*AlarmHistoryStatsDTO `json:"value,omitempty" xml:"value,omitempty" require:"true" type:"Repeated"`
}

func (s AlarmHistoryStatsDTOsKeySet) String() string {
	return tea.Prettify(s)
}

func (s AlarmHistoryStatsDTOsKeySet) GoString() string {
	return s.String()
}

func (s *AlarmHistoryStatsDTOsKeySet) SetKey(v string) *AlarmHistoryStatsDTOsKeySet {
	s.Key = &v
	return s
}

func (s *AlarmHistoryStatsDTOsKeySet) SetValue(v []*AlarmHistoryStatsDTO) *AlarmHistoryStatsDTOsKeySet {
	s.Value = v
	return s
}

// AlarmHistoryListKeySet
type AlarmHistoryListKeySet struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// AlarmHistoryListKeySet
	Value []*AlarmHistory `json:"value,omitempty" xml:"value,omitempty" require:"true" type:"Repeated"`
}

func (s AlarmHistoryListKeySet) String() string {
	return tea.Prettify(s)
}

func (s AlarmHistoryListKeySet) GoString() string {
	return s.String()
}

func (s *AlarmHistoryListKeySet) SetKey(v string) *AlarmHistoryListKeySet {
	s.Key = &v
	return s
}

func (s *AlarmHistoryListKeySet) SetValue(v []*AlarmHistory) *AlarmHistoryListKeySet {
	s.Value = v
	return s
}

// PontusTrendRequest
type PontusTrendRequest struct {
	// token
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
	// metric_table
	MetricTable *string `json:"metric_table,omitempty" xml:"metric_table,omitempty" require:"true"`
	// site_env
	SiteEnv *string `json:"site_env,omitempty" xml:"site_env,omitempty" require:"true"`
	// view_id
	ViewId *string `json:"view_id,omitempty" xml:"view_id,omitempty" require:"true"`
	// period_type
	PeriodType *string `json:"period_type,omitempty" xml:"period_type,omitempty" require:"true"`
	// extraDimNames
	ExtraDimNames []*string `json:"extra_dim_names,omitempty" xml:"extra_dim_names,omitempty" require:"true" type:"Repeated"`
	// metric_filter
	MetricFilter *string `json:"metric_filter,omitempty" xml:"metric_filter,omitempty" require:"true"`
	// start
	Start *int64 `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// end
	End *int64 `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// dim_conditions_list
	DimConditionsList []*KeySet `json:"dim_conditions_list,omitempty" xml:"dim_conditions_list,omitempty" require:"true" type:"Repeated"`
	// dim_expression
	DimExpression *KeySet `json:"dim_expression,omitempty" xml:"dim_expression,omitempty" require:"true"`
	// dim_expression_list
	DimExpressionList []*KeySet `json:"dim_expression_list,omitempty" xml:"dim_expression_list,omitempty" require:"true" type:"Repeated"`
}

func (s PontusTrendRequest) String() string {
	return tea.Prettify(s)
}

func (s PontusTrendRequest) GoString() string {
	return s.String()
}

func (s *PontusTrendRequest) SetToken(v string) *PontusTrendRequest {
	s.Token = &v
	return s
}

func (s *PontusTrendRequest) SetMetricTable(v string) *PontusTrendRequest {
	s.MetricTable = &v
	return s
}

func (s *PontusTrendRequest) SetSiteEnv(v string) *PontusTrendRequest {
	s.SiteEnv = &v
	return s
}

func (s *PontusTrendRequest) SetViewId(v string) *PontusTrendRequest {
	s.ViewId = &v
	return s
}

func (s *PontusTrendRequest) SetPeriodType(v string) *PontusTrendRequest {
	s.PeriodType = &v
	return s
}

func (s *PontusTrendRequest) SetExtraDimNames(v []*string) *PontusTrendRequest {
	s.ExtraDimNames = v
	return s
}

func (s *PontusTrendRequest) SetMetricFilter(v string) *PontusTrendRequest {
	s.MetricFilter = &v
	return s
}

func (s *PontusTrendRequest) SetStart(v int64) *PontusTrendRequest {
	s.Start = &v
	return s
}

func (s *PontusTrendRequest) SetEnd(v int64) *PontusTrendRequest {
	s.End = &v
	return s
}

func (s *PontusTrendRequest) SetDimConditionsList(v []*KeySet) *PontusTrendRequest {
	s.DimConditionsList = v
	return s
}

func (s *PontusTrendRequest) SetDimExpression(v *KeySet) *PontusTrendRequest {
	s.DimExpression = v
	return s
}

func (s *PontusTrendRequest) SetDimExpressionList(v []*KeySet) *PontusTrendRequest {
	s.DimExpressionList = v
	return s
}

// MonitorUser
type MonitorUser struct {
	// 用户来源
	IdentityType *string `json:"identity_type,omitempty" xml:"identity_type,omitempty" require:"true"`
	// 用户上的权限
	SuperViewer *bool `json:"super_viewer,omitempty" xml:"super_viewer,omitempty" require:"true"`
	// 是否为超级管理员
	SuperAdmin *bool `json:"super_admin,omitempty" xml:"super_admin,omitempty" require:"true"`
	// 显示名，花名
	NickName *string `json:"nick_name,omitempty" xml:"nick_name,omitempty" require:"true"`
	// emp_id
	EmpId *string `json:"emp_id,omitempty" xml:"emp_id,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 登录名，等于_id, _id实在太难辨别了，域帐号  yerui.yr
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty" require:"true"`
	// 展示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// 兼容UniversalRead里返回的userDisplayName
	UserDisplayName *string `json:"user_display_name,omitempty" xml:"user_display_name,omitempty" require:"true"`
	// 真名
	RealName *string `json:"real_name,omitempty" xml:"real_name,omitempty" require:"true"`
	// phone_num
	PhoneNum *string `json:"phone_num,omitempty" xml:"phone_num,omitempty" require:"true"`
	// email
	Email *string `json:"email,omitempty" xml:"email,omitempty" require:"true"`
	// enterprise_id（金融云专属）
	EnterpriseId *string `json:"enterprise_id,omitempty" xml:"enterprise_id,omitempty" require:"true"`
	// token
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
	// 一方化标记位
	IsFromAliyun *bool `json:"is_from_aliyun,omitempty" xml:"is_from_aliyun,omitempty" require:"true"`
}

func (s MonitorUser) String() string {
	return tea.Prettify(s)
}

func (s MonitorUser) GoString() string {
	return s.String()
}

func (s *MonitorUser) SetIdentityType(v string) *MonitorUser {
	s.IdentityType = &v
	return s
}

func (s *MonitorUser) SetSuperViewer(v bool) *MonitorUser {
	s.SuperViewer = &v
	return s
}

func (s *MonitorUser) SetSuperAdmin(v bool) *MonitorUser {
	s.SuperAdmin = &v
	return s
}

func (s *MonitorUser) SetNickName(v string) *MonitorUser {
	s.NickName = &v
	return s
}

func (s *MonitorUser) SetEmpId(v string) *MonitorUser {
	s.EmpId = &v
	return s
}

func (s *MonitorUser) SetId(v int64) *MonitorUser {
	s.Id = &v
	return s
}

func (s *MonitorUser) SetLoginName(v string) *MonitorUser {
	s.LoginName = &v
	return s
}

func (s *MonitorUser) SetDisplayName(v string) *MonitorUser {
	s.DisplayName = &v
	return s
}

func (s *MonitorUser) SetUserDisplayName(v string) *MonitorUser {
	s.UserDisplayName = &v
	return s
}

func (s *MonitorUser) SetRealName(v string) *MonitorUser {
	s.RealName = &v
	return s
}

func (s *MonitorUser) SetPhoneNum(v string) *MonitorUser {
	s.PhoneNum = &v
	return s
}

func (s *MonitorUser) SetEmail(v string) *MonitorUser {
	s.Email = &v
	return s
}

func (s *MonitorUser) SetEnterpriseId(v string) *MonitorUser {
	s.EnterpriseId = &v
	return s
}

func (s *MonitorUser) SetToken(v string) *MonitorUser {
	s.Token = &v
	return s
}

func (s *MonitorUser) SetIsFromAliyun(v bool) *MonitorUser {
	s.IsFromAliyun = &v
	return s
}

//
type XPrometheusQuery struct {
	//
	Port *int64 `json:"port,omitempty" xml:"port,omitempty" require:"true"`
	//
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	//
	Path *string `json:"path,omitempty" xml:"path,omitempty" require:"true"`
	//
	Target *XTarget `json:"target,omitempty" xml:"target,omitempty"`
}

func (s XPrometheusQuery) String() string {
	return tea.Prettify(s)
}

func (s XPrometheusQuery) GoString() string {
	return s.String()
}

func (s *XPrometheusQuery) SetPort(v int64) *XPrometheusQuery {
	s.Port = &v
	return s
}

func (s *XPrometheusQuery) SetIp(v string) *XPrometheusQuery {
	s.Ip = &v
	return s
}

func (s *XPrometheusQuery) SetPath(v string) *XPrometheusQuery {
	s.Path = &v
	return s
}

func (s *XPrometheusQuery) SetTarget(v *XTarget) *XPrometheusQuery {
	s.Target = v
	return s
}

// 统计方式
type Cal struct {
	// 统计功能
	Fun *string `json:"fun,omitempty" xml:"fun,omitempty" require:"true"`
	// 值对象
	Val *UniqueDim `json:"val,omitempty" xml:"val,omitempty"`
	// 值对象备份
	ValBak *UniqueDim `json:"val_bak,omitempty" xml:"val_bak,omitempty"`
	// topn
	Topn *int64 `json:"topn,omitempty" xml:"topn,omitempty"`
	// 所包含的值
	ContainVals *ContainVals `json:"contain_vals,omitempty" xml:"contain_vals,omitempty"`
}

func (s Cal) String() string {
	return tea.Prettify(s)
}

func (s Cal) GoString() string {
	return s.String()
}

func (s *Cal) SetFun(v string) *Cal {
	s.Fun = &v
	return s
}

func (s *Cal) SetVal(v *UniqueDim) *Cal {
	s.Val = v
	return s
}

func (s *Cal) SetValBak(v *UniqueDim) *Cal {
	s.ValBak = v
	return s
}

func (s *Cal) SetTopn(v int64) *Cal {
	s.Topn = &v
	return s
}

func (s *Cal) SetContainVals(v *ContainVals) *Cal {
	s.ContainVals = v
	return s
}

// OpsmetaSchema
type OpsmetaSchema struct {
	// envs
	Envs []*string `json:"envs,omitempty" xml:"envs,omitempty" require:"true" type:"Repeated"`
	// idc
	Idc *OpsFilter `json:"idc,omitempty" xml:"idc,omitempty" require:"true"`
	// ldc
	Ldc *OpsFilter `json:"ldc,omitempty" xml:"ldc,omitempty" require:"true"`
	// server
	Server *OpsFilter `json:"server,omitempty" xml:"server,omitempty" require:"true"`
}

func (s OpsmetaSchema) String() string {
	return tea.Prettify(s)
}

func (s OpsmetaSchema) GoString() string {
	return s.String()
}

func (s *OpsmetaSchema) SetEnvs(v []*string) *OpsmetaSchema {
	s.Envs = v
	return s
}

func (s *OpsmetaSchema) SetIdc(v *OpsFilter) *OpsmetaSchema {
	s.Idc = v
	return s
}

func (s *OpsmetaSchema) SetLdc(v *OpsFilter) *OpsmetaSchema {
	s.Ldc = v
	return s
}

func (s *OpsmetaSchema) SetServer(v *OpsFilter) *OpsmetaSchema {
	s.Server = v
	return s
}

// dashboard query
type XDashboardQuery struct {
	//
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	//
	ParentUuid *string `json:"parent_uuid,omitempty" xml:"parent_uuid,omitempty"`
	//
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s XDashboardQuery) String() string {
	return tea.Prettify(s)
}

func (s XDashboardQuery) GoString() string {
	return s.String()
}

func (s *XDashboardQuery) SetUuid(v string) *XDashboardQuery {
	s.Uuid = &v
	return s
}

func (s *XDashboardQuery) SetParentUuid(v string) *XDashboardQuery {
	s.ParentUuid = &v
	return s
}

func (s *XDashboardQuery) SetName(v string) *XDashboardQuery {
	s.Name = &v
	return s
}

// FolderPath
type FolderPath struct {
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// v
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s FolderPath) String() string {
	return tea.Prettify(s)
}

func (s FolderPath) GoString() string {
	return s.String()
}

func (s *FolderPath) SetId(v int64) *FolderPath {
	s.Id = &v
	return s
}

func (s *FolderPath) SetName(v string) *FolderPath {
	s.Name = &v
	return s
}

func (s *FolderPath) SetType(v string) *FolderPath {
	s.Type = &v
	return s
}

// KV对
type KeyValuePair struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s KeyValuePair) String() string {
	return tea.Prettify(s)
}

func (s KeyValuePair) GoString() string {
	return s.String()
}

func (s *KeyValuePair) SetKey(v string) *KeyValuePair {
	s.Key = &v
	return s
}

func (s *KeyValuePair) SetValue(v string) *KeyValuePair {
	s.Value = &v
	return s
}

// oneconsole需要的workspace
type OneConsoleWorkspace struct {
	// ws id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s OneConsoleWorkspace) String() string {
	return tea.Prettify(s)
}

func (s OneConsoleWorkspace) GoString() string {
	return s.String()
}

func (s *OneConsoleWorkspace) SetId(v string) *OneConsoleWorkspace {
	s.Id = &v
	return s
}

func (s *OneConsoleWorkspace) SetIdentity(v string) *OneConsoleWorkspace {
	s.Identity = &v
	return s
}

func (s *OneConsoleWorkspace) SetName(v string) *OneConsoleWorkspace {
	s.Name = &v
	return s
}

// DatasourceCRULResponseCURequest
type XDatasourceCRULResponseCURequest struct {
	//
	ApiVersion *string `json:"api_version,omitempty" xml:"api_version,omitempty"`
	//
	Metadata *XResource `json:"metadata,omitempty" xml:"metadata,omitempty" require:"true"`
	//
	Spec *XSpec `json:"spec,omitempty" xml:"spec,omitempty" require:"true"`
}

func (s XDatasourceCRULResponseCURequest) String() string {
	return tea.Prettify(s)
}

func (s XDatasourceCRULResponseCURequest) GoString() string {
	return s.String()
}

func (s *XDatasourceCRULResponseCURequest) SetApiVersion(v string) *XDatasourceCRULResponseCURequest {
	s.ApiVersion = &v
	return s
}

func (s *XDatasourceCRULResponseCURequest) SetMetadata(v *XResource) *XDatasourceCRULResponseCURequest {
	s.Metadata = v
	return s
}

func (s *XDatasourceCRULResponseCURequest) SetSpec(v *XSpec) *XDatasourceCRULResponseCURequest {
	s.Spec = v
	return s
}

// 告警历史对象
type UnifiedAlarmHistoryVO struct {
	// 主键
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 事件id
	EventId *string `json:"event_id,omitempty" xml:"event_id,omitempty" require:"true"`
	// 告警规则id
	AlarmRuleId *int64 `json:"alarm_rule_id,omitempty" xml:"alarm_rule_id,omitempty" require:"true"`
	// 告警规则唯一标识
	UniqueIdentity *string `json:"unique_identity,omitempty" xml:"unique_identity,omitempty" require:"true"`
	// 告警规则名字
	AlarmRuleName *string `json:"alarm_rule_name,omitempty" xml:"alarm_rule_name,omitempty" require:"true"`
	// 告警等级
	AlarmLevel *int64 `json:"alarm_level,omitempty" xml:"alarm_level,omitempty" require:"true"`
	// 告警时间
	AlarmTime *int64 `json:"alarm_time,omitempty" xml:"alarm_time,omitempty" require:"true"`
	// 告警内容
	AlarmContent *string `json:"alarm_content,omitempty" xml:"alarm_content,omitempty" require:"true"`
	// 告警对象
	AlarmTarget *string `json:"alarm_target,omitempty" xml:"alarm_target,omitempty" require:"true"`
	// 触发状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 租户id
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 工作区id
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// type
	AlarmTargetType *string `json:"alarm_target_type,omitempty" xml:"alarm_target_type,omitempty"`
	// 告警详情
	AlarmDetail *string `json:"alarm_detail,omitempty" xml:"alarm_detail,omitempty" require:"true"`
	// 数据源名称
	DataSourceName *string `json:"data_source_name,omitempty" xml:"data_source_name,omitempty"`
	// 数据源跳转url
	AlarmUrl *string `json:"alarm_url,omitempty" xml:"alarm_url,omitempty"`
	// 告警类型
	AlarmType *string `json:"alarm_type,omitempty" xml:"alarm_type,omitempty"`
	// 目标对象是否已经删除
	AlarmTargetDeleted *bool `json:"alarm_target_deleted,omitempty" xml:"alarm_target_deleted,omitempty"`
}

func (s UnifiedAlarmHistoryVO) String() string {
	return tea.Prettify(s)
}

func (s UnifiedAlarmHistoryVO) GoString() string {
	return s.String()
}

func (s *UnifiedAlarmHistoryVO) SetId(v int64) *UnifiedAlarmHistoryVO {
	s.Id = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetEventId(v string) *UnifiedAlarmHistoryVO {
	s.EventId = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetAlarmRuleId(v int64) *UnifiedAlarmHistoryVO {
	s.AlarmRuleId = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetUniqueIdentity(v string) *UnifiedAlarmHistoryVO {
	s.UniqueIdentity = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetAlarmRuleName(v string) *UnifiedAlarmHistoryVO {
	s.AlarmRuleName = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetAlarmLevel(v int64) *UnifiedAlarmHistoryVO {
	s.AlarmLevel = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetAlarmTime(v int64) *UnifiedAlarmHistoryVO {
	s.AlarmTime = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetAlarmContent(v string) *UnifiedAlarmHistoryVO {
	s.AlarmContent = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetAlarmTarget(v string) *UnifiedAlarmHistoryVO {
	s.AlarmTarget = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetStatus(v int64) *UnifiedAlarmHistoryVO {
	s.Status = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetTenantId(v int64) *UnifiedAlarmHistoryVO {
	s.TenantId = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetWorkspaceId(v int64) *UnifiedAlarmHistoryVO {
	s.WorkspaceId = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetGmtCreate(v string) *UnifiedAlarmHistoryVO {
	s.GmtCreate = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetGmtModified(v string) *UnifiedAlarmHistoryVO {
	s.GmtModified = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetAlarmTargetType(v string) *UnifiedAlarmHistoryVO {
	s.AlarmTargetType = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetAlarmDetail(v string) *UnifiedAlarmHistoryVO {
	s.AlarmDetail = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetDataSourceName(v string) *UnifiedAlarmHistoryVO {
	s.DataSourceName = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetAlarmUrl(v string) *UnifiedAlarmHistoryVO {
	s.AlarmUrl = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetAlarmType(v string) *UnifiedAlarmHistoryVO {
	s.AlarmType = &v
	return s
}

func (s *UnifiedAlarmHistoryVO) SetAlarmTargetDeleted(v bool) *UnifiedAlarmHistoryVO {
	s.AlarmTargetDeleted = &v
	return s
}

// 应用TopN信息
type AppTopItem struct {
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 应用TopN统计值，有可能有小数，使用前转换为数值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s AppTopItem) String() string {
	return tea.Prettify(s)
}

func (s AppTopItem) GoString() string {
	return s.String()
}

func (s *AppTopItem) SetAppName(v string) *AppTopItem {
	s.AppName = &v
	return s
}

func (s *AppTopItem) SetValue(v string) *AppTopItem {
	s.Value = &v
	return s
}

// stats
type XSiteExportStats struct {
	//
	Alert *int64 `json:"alert,omitempty" xml:"alert,omitempty"`
	//
	AlertDatasource *int64 `json:"alert_datasource,omitempty" xml:"alert_datasource,omitempty"`
	//
	Dashboard *int64 `json:"dashboard,omitempty" xml:"dashboard,omitempty"`
	//
	DashboardDatasource *int64 `json:"dashboard_datasource,omitempty" xml:"dashboard_datasource,omitempty"`
	//
	Datasource *int64 `json:"datasource,omitempty" xml:"datasource,omitempty"`
	// 通知对象的数量
	AlarmSubscriberCount *int64 `json:"alarm_subscriber_count,omitempty" xml:"alarm_subscriber_count,omitempty"`
}

func (s XSiteExportStats) String() string {
	return tea.Prettify(s)
}

func (s XSiteExportStats) GoString() string {
	return s.String()
}

func (s *XSiteExportStats) SetAlert(v int64) *XSiteExportStats {
	s.Alert = &v
	return s
}

func (s *XSiteExportStats) SetAlertDatasource(v int64) *XSiteExportStats {
	s.AlertDatasource = &v
	return s
}

func (s *XSiteExportStats) SetDashboard(v int64) *XSiteExportStats {
	s.Dashboard = &v
	return s
}

func (s *XSiteExportStats) SetDashboardDatasource(v int64) *XSiteExportStats {
	s.DashboardDatasource = &v
	return s
}

func (s *XSiteExportStats) SetDatasource(v int64) *XSiteExportStats {
	s.Datasource = &v
	return s
}

func (s *XSiteExportStats) SetAlarmSubscriberCount(v int64) *XSiteExportStats {
	s.AlarmSubscriberCount = &v
	return s
}

// trace span
type TraceSpan struct {
	// 组件类型
	Component *string `json:"component,omitempty" xml:"component,omitempty"`
	// 毫秒耗时
	Duration *int64 `json:"duration,omitempty" xml:"duration,omitempty"`
	// 服务描述信息
	Info *string `json:"info,omitempty" xml:"info,omitempty"`
	// span kind, CLIENT SERVER PRODUCER CONSUMER
	Kind *string `json:"kind,omitempty" xml:"kind,omitempty"`
	// local endpoint ip
	LocalIp *string `json:"local_ip,omitempty" xml:"local_ip,omitempty"`
	// local endpoint service name
	LocalServiceName *string `json:"local_service_name,omitempty" xml:"local_service_name,omitempty"`
	// local idc name
	LocalIdcName *string `json:"local_idc_name,omitempty" xml:"local_idc_name,omitempty"`
	// local cell name
	LocalCellName *string `json:"local_cell_name,omitempty" xml:"local_cell_name,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// parent_id
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// remote endpoint ip
	RemoteIp *string `json:"remote_ip,omitempty" xml:"remote_ip,omitempty"`
	// remote endpoint service name
	RemoteServiceName *string `json:"remote_service_name,omitempty" xml:"remote_service_name,omitempty"`
	// remote idc name
	RemoteIdcName *string `json:"remote_idc_name,omitempty" xml:"remote_idc_name,omitempty"`
	// remote cell name
	RemoteCellName *string `json:"remote_cell_name,omitempty" xml:"remote_cell_name,omitempty"`
	// span_id
	SpanId *string `json:"span_id,omitempty" xml:"span_id,omitempty"`
	// 开始时间, 毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty"`
	// 状态码
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// span tags, 是关于span的键值对
	Tags []*KeySet `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	// trace id
	TraceId *string `json:"trace_id,omitempty" xml:"trace_id,omitempty"`
}

func (s TraceSpan) String() string {
	return tea.Prettify(s)
}

func (s TraceSpan) GoString() string {
	return s.String()
}

func (s *TraceSpan) SetComponent(v string) *TraceSpan {
	s.Component = &v
	return s
}

func (s *TraceSpan) SetDuration(v int64) *TraceSpan {
	s.Duration = &v
	return s
}

func (s *TraceSpan) SetInfo(v string) *TraceSpan {
	s.Info = &v
	return s
}

func (s *TraceSpan) SetKind(v string) *TraceSpan {
	s.Kind = &v
	return s
}

func (s *TraceSpan) SetLocalIp(v string) *TraceSpan {
	s.LocalIp = &v
	return s
}

func (s *TraceSpan) SetLocalServiceName(v string) *TraceSpan {
	s.LocalServiceName = &v
	return s
}

func (s *TraceSpan) SetLocalIdcName(v string) *TraceSpan {
	s.LocalIdcName = &v
	return s
}

func (s *TraceSpan) SetLocalCellName(v string) *TraceSpan {
	s.LocalCellName = &v
	return s
}

func (s *TraceSpan) SetName(v string) *TraceSpan {
	s.Name = &v
	return s
}

func (s *TraceSpan) SetParentId(v string) *TraceSpan {
	s.ParentId = &v
	return s
}

func (s *TraceSpan) SetRemoteIp(v string) *TraceSpan {
	s.RemoteIp = &v
	return s
}

func (s *TraceSpan) SetRemoteServiceName(v string) *TraceSpan {
	s.RemoteServiceName = &v
	return s
}

func (s *TraceSpan) SetRemoteIdcName(v string) *TraceSpan {
	s.RemoteIdcName = &v
	return s
}

func (s *TraceSpan) SetRemoteCellName(v string) *TraceSpan {
	s.RemoteCellName = &v
	return s
}

func (s *TraceSpan) SetSpanId(v string) *TraceSpan {
	s.SpanId = &v
	return s
}

func (s *TraceSpan) SetStartTime(v int64) *TraceSpan {
	s.StartTime = &v
	return s
}

func (s *TraceSpan) SetStatus(v string) *TraceSpan {
	s.Status = &v
	return s
}

func (s *TraceSpan) SetTags(v []*KeySet) *TraceSpan {
	s.Tags = v
	return s
}

func (s *TraceSpan) SetTraceId(v string) *TraceSpan {
	s.TraceId = &v
	return s
}

// Spm
type Spm struct {
	// resultDim
	ResultDim *UniqueDim `json:"result_dim,omitempty" xml:"result_dim,omitempty"`
	// costDim
	CostDim *UniqueDim `json:"cost_dim,omitempty" xml:"cost_dim,omitempty"`
	// countDim
	CountDim *UniqueDim `json:"count_dim,omitempty" xml:"count_dim,omitempty"`
}

func (s Spm) String() string {
	return tea.Prettify(s)
}

func (s Spm) GoString() string {
	return s.String()
}

func (s *Spm) SetResultDim(v *UniqueDim) *Spm {
	s.ResultDim = v
	return s
}

func (s *Spm) SetCostDim(v *UniqueDim) *Spm {
	s.CostDim = v
	return s
}

func (s *Spm) SetCountDim(v *UniqueDim) *Spm {
	s.CountDim = v
	return s
}

// StackExpression
type StackExpression struct {
	// states
	States []*StackState `json:"states,omitempty" xml:"states,omitempty" require:"true" type:"Repeated"`
	// andor
	Andor *bool `json:"andor,omitempty" xml:"andor,omitempty" require:"true"`
}

func (s StackExpression) String() string {
	return tea.Prettify(s)
}

func (s StackExpression) GoString() string {
	return s.String()
}

func (s *StackExpression) SetStates(v []*StackState) *StackExpression {
	s.States = v
	return s
}

func (s *StackExpression) SetAndor(v bool) *StackExpression {
	s.Andor = &v
	return s
}

// Metrics 中具体时间点的数据
type TimeSeriesMetricsPoint struct {
	// 时间戳 (毫秒)
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// Metrics 某时间点的具体值
	Value []*TimeSeriesMetricsField `json:"value,omitempty" xml:"value,omitempty" type:"Repeated"`
}

func (s TimeSeriesMetricsPoint) String() string {
	return tea.Prettify(s)
}

func (s TimeSeriesMetricsPoint) GoString() string {
	return s.String()
}

func (s *TimeSeriesMetricsPoint) SetTimestamp(v int64) *TimeSeriesMetricsPoint {
	s.Timestamp = &v
	return s
}

func (s *TimeSeriesMetricsPoint) SetValue(v []*TimeSeriesMetricsField) *TimeSeriesMetricsPoint {
	s.Value = v
	return s
}

// StatusDO
type StatusDO struct {
	// creater
	Creater *string `json:"creater,omitempty" xml:"creater,omitempty" require:"true"`
	// create_time
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true"`
	// operator
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// update_time
	UpdateTime *int64 `json:"update_time,omitempty" xml:"update_time,omitempty" require:"true"`
	// status_desc
	StatusDesc *string `json:"status_desc,omitempty" xml:"status_desc,omitempty" require:"true"`
	// compute_close
	ComputeClose *bool `json:"compute_close,omitempty" xml:"compute_close,omitempty" require:"true"`
	// degrade_reason
	DegradeReason *string `json:"degrade_reason,omitempty" xml:"degrade_reason,omitempty" require:"true"`
	// degrade_operator
	DegradeOperator *string `json:"degrade_operator,omitempty" xml:"degrade_operator,omitempty" require:"true"`
	// degrade_time
	DegradeTime *string `json:"degrade_time,omitempty" xml:"degrade_time,omitempty" require:"true"`
	// degrade_time_v2
	DegradeTimeV2 *int64 `json:"degrade_time_v2,omitempty" xml:"degrade_time_v2,omitempty" require:"true"`
}

func (s StatusDO) String() string {
	return tea.Prettify(s)
}

func (s StatusDO) GoString() string {
	return s.String()
}

func (s *StatusDO) SetCreater(v string) *StatusDO {
	s.Creater = &v
	return s
}

func (s *StatusDO) SetCreateTime(v int64) *StatusDO {
	s.CreateTime = &v
	return s
}

func (s *StatusDO) SetOperator(v string) *StatusDO {
	s.Operator = &v
	return s
}

func (s *StatusDO) SetUpdateTime(v int64) *StatusDO {
	s.UpdateTime = &v
	return s
}

func (s *StatusDO) SetStatusDesc(v string) *StatusDO {
	s.StatusDesc = &v
	return s
}

func (s *StatusDO) SetComputeClose(v bool) *StatusDO {
	s.ComputeClose = &v
	return s
}

func (s *StatusDO) SetDegradeReason(v string) *StatusDO {
	s.DegradeReason = &v
	return s
}

func (s *StatusDO) SetDegradeOperator(v string) *StatusDO {
	s.DegradeOperator = &v
	return s
}

func (s *StatusDO) SetDegradeTime(v string) *StatusDO {
	s.DegradeTime = &v
	return s
}

func (s *StatusDO) SetDegradeTimeV2(v int64) *StatusDO {
	s.DegradeTimeV2 = &v
	return s
}

// AlarmNotifyStats
type AlarmNotifyStats struct {
	// alarm_time
	AlarmTime *int64 `json:"alarm_time,omitempty" xml:"alarm_time,omitempty" require:"true"`
	// count
	Count *int64 `json:"count,omitempty" xml:"count,omitempty" require:"true"`
	// notify_channel
	NotifyChannel *string `json:"notify_channel,omitempty" xml:"notify_channel,omitempty" require:"true"`
}

func (s AlarmNotifyStats) String() string {
	return tea.Prettify(s)
}

func (s AlarmNotifyStats) GoString() string {
	return s.String()
}

func (s *AlarmNotifyStats) SetAlarmTime(v int64) *AlarmNotifyStats {
	s.AlarmTime = &v
	return s
}

func (s *AlarmNotifyStats) SetCount(v int64) *AlarmNotifyStats {
	s.Count = &v
	return s
}

func (s *AlarmNotifyStats) SetNotifyChannel(v string) *AlarmNotifyStats {
	s.NotifyChannel = &v
	return s
}

// LongListKeySet
type LongListKeySet struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value []*string `json:"value,omitempty" xml:"value,omitempty" require:"true" type:"Repeated"`
}

func (s LongListKeySet) String() string {
	return tea.Prettify(s)
}

func (s LongListKeySet) GoString() string {
	return s.String()
}

func (s *LongListKeySet) SetKey(v string) *LongListKeySet {
	s.Key = &v
	return s
}

func (s *LongListKeySet) SetValue(v []*string) *LongListKeySet {
	s.Value = v
	return s
}

// datasource query
type XDatasourceQuery struct {
	//
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	//
	ParentUuid *string `json:"parent_uuid,omitempty" xml:"parent_uuid,omitempty"`
	//
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	//
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	//
	TargetResourceKind *string `json:"target_resource_kind,omitempty" xml:"target_resource_kind,omitempty"`
	//
	TargetResourceName *string `json:"target_resource_name,omitempty" xml:"target_resource_name,omitempty"`
	//
	RuleType *string `json:"rule_type,omitempty" xml:"rule_type,omitempty"`
	//
	CreatedBy *string `json:"created_by,omitempty" xml:"created_by,omitempty"`
}

func (s XDatasourceQuery) String() string {
	return tea.Prettify(s)
}

func (s XDatasourceQuery) GoString() string {
	return s.String()
}

func (s *XDatasourceQuery) SetUuid(v string) *XDatasourceQuery {
	s.Uuid = &v
	return s
}

func (s *XDatasourceQuery) SetParentUuid(v string) *XDatasourceQuery {
	s.ParentUuid = &v
	return s
}

func (s *XDatasourceQuery) SetName(v string) *XDatasourceQuery {
	s.Name = &v
	return s
}

func (s *XDatasourceQuery) SetEnabled(v bool) *XDatasourceQuery {
	s.Enabled = &v
	return s
}

func (s *XDatasourceQuery) SetTargetResourceKind(v string) *XDatasourceQuery {
	s.TargetResourceKind = &v
	return s
}

func (s *XDatasourceQuery) SetTargetResourceName(v string) *XDatasourceQuery {
	s.TargetResourceName = &v
	return s
}

func (s *XDatasourceQuery) SetRuleType(v string) *XDatasourceQuery {
	s.RuleType = &v
	return s
}

func (s *XDatasourceQuery) SetCreatedBy(v string) *XDatasourceQuery {
	s.CreatedBy = &v
	return s
}

// 菜单
type Menu struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s Menu) String() string {
	return tea.Prettify(s)
}

func (s Menu) GoString() string {
	return s.String()
}

func (s *Menu) SetId(v string) *Menu {
	s.Id = &v
	return s
}

// AlarmPkgDO
type AlarmPkgDO struct {
	// biz_groupby_name
	BizGroupbyName *string `json:"biz_groupby_name,omitempty" xml:"biz_groupby_name,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// stack_metric_group_metric_table
	StackMetricGroupMetricTable *string `json:"stack_metric_group_metric_table,omitempty" xml:"stack_metric_group_metric_table,omitempty" require:"true"`
	// tag_value
	TagValue *string `json:"tag_value,omitempty" xml:"tag_value,omitempty" require:"true"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// alarm
	Alarm *AlarmDO `json:"alarm,omitempty" xml:"alarm,omitempty" require:"true"`
	// top_alarm
	TopAlarm *TopAlarmDO `json:"top_alarm,omitempty" xml:"top_alarm,omitempty" require:"true"`
}

func (s AlarmPkgDO) String() string {
	return tea.Prettify(s)
}

func (s AlarmPkgDO) GoString() string {
	return s.String()
}

func (s *AlarmPkgDO) SetBizGroupbyName(v string) *AlarmPkgDO {
	s.BizGroupbyName = &v
	return s
}

func (s *AlarmPkgDO) SetId(v int64) *AlarmPkgDO {
	s.Id = &v
	return s
}

func (s *AlarmPkgDO) SetName(v string) *AlarmPkgDO {
	s.Name = &v
	return s
}

func (s *AlarmPkgDO) SetStackMetricGroupMetricTable(v string) *AlarmPkgDO {
	s.StackMetricGroupMetricTable = &v
	return s
}

func (s *AlarmPkgDO) SetTagValue(v string) *AlarmPkgDO {
	s.TagValue = &v
	return s
}

func (s *AlarmPkgDO) SetUuid(v string) *AlarmPkgDO {
	s.Uuid = &v
	return s
}

func (s *AlarmPkgDO) SetAlarm(v *AlarmDO) *AlarmPkgDO {
	s.Alarm = v
	return s
}

func (s *AlarmPkgDO) SetTopAlarm(v *TopAlarmDO) *AlarmPkgDO {
	s.TopAlarm = v
	return s
}

// AlarmTypeStatsVO
type AlarmTypeStatsVO struct {
	// custom_plugin
	CustomPlugin *int64 `json:"custom_plugin,omitempty" xml:"custom_plugin,omitempty" require:"true"`
	// meta_group
	MetaGroup *int64 `json:"meta_group,omitempty" xml:"meta_group,omitempty" require:"true"`
	// stack_universal_table
	StackUniversalTable *int64 `json:"stack_universal_table,omitempty" xml:"stack_universal_table,omitempty" require:"true"`
}

func (s AlarmTypeStatsVO) String() string {
	return tea.Prettify(s)
}

func (s AlarmTypeStatsVO) GoString() string {
	return s.String()
}

func (s *AlarmTypeStatsVO) SetCustomPlugin(v int64) *AlarmTypeStatsVO {
	s.CustomPlugin = &v
	return s
}

func (s *AlarmTypeStatsVO) SetMetaGroup(v int64) *AlarmTypeStatsVO {
	s.MetaGroup = &v
	return s
}

func (s *AlarmTypeStatsVO) SetStackUniversalTable(v int64) *AlarmTypeStatsVO {
	s.StackUniversalTable = &v
	return s
}

// SaveSchema
type SaveSchema struct {
	// capacity
	Capacity *int64 `json:"capacity,omitempty" xml:"capacity,omitempty" require:"true"`
	// reserved
	Reserved *string `json:"reserved,omitempty" xml:"reserved,omitempty" require:"true"`
	// max_key_size
	MaxKeySize *int64 `json:"max_key_size,omitempty" xml:"max_key_size,omitempty" require:"true"`
}

func (s SaveSchema) String() string {
	return tea.Prettify(s)
}

func (s SaveSchema) GoString() string {
	return s.String()
}

func (s *SaveSchema) SetCapacity(v int64) *SaveSchema {
	s.Capacity = &v
	return s
}

func (s *SaveSchema) SetReserved(v string) *SaveSchema {
	s.Reserved = &v
	return s
}

func (s *SaveSchema) SetMaxKeySize(v int64) *SaveSchema {
	s.MaxKeySize = &v
	return s
}

// AlarmHistoryDTO
type AlarmHistoryDTO struct {
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// alarm_rule_name
	AlarmRuleName *string `json:"alarm_rule_name,omitempty" xml:"alarm_rule_name,omitempty" require:"true"`
	// msg
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// alarm_pkg_id
	AlarmPkgId *int64 `json:"alarm_pkg_id,omitempty" xml:"alarm_pkg_id,omitempty" require:"true"`
	// custom_plugin_id
	CustomPluginId *int64 `json:"custom_plugin_id,omitempty" xml:"custom_plugin_id,omitempty" require:"true"`
	// meta_group_id
	MetaGroupId *int64 `json:"meta_group_id,omitempty" xml:"meta_group_id,omitempty" require:"true"`
	// stack_universal_tableId
	StackUniversalTableId *string `json:"stack_universal_table_id,omitempty" xml:"stack_universal_table_id,omitempty" require:"true"`
	// tag_value_id
	TagValueId *int64 `json:"tag_value_id,omitempty" xml:"tag_value_id,omitempty" require:"true"`
	// tenant_id
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// biz_domain_id
	BizDomainId *int64 `json:"biz_domain_id,omitempty" xml:"biz_domain_id,omitempty" require:"true"`
	// alarm_time
	AlarmTime *int64 `json:"alarm_time,omitempty" xml:"alarm_time,omitempty" require:"true"`
	// alarm_level
	AlarmLevel *int64 `json:"alarm_level,omitempty" xml:"alarm_level,omitempty" require:"true"`
	// stack_id
	StackId *int64 `json:"stack_id,omitempty" xml:"stack_id,omitempty" require:"true"`
	// stack_entity_id
	StackEntityId *int64 `json:"stack_entity_id,omitempty" xml:"stack_entity_id,omitempty" require:"true"`
	// stack_monitor_item_name
	StackMonitorItemName *string `json:"stack_monitor_item_name,omitempty" xml:"stack_monitor_item_name,omitempty" require:"true"`
	// alarm_source_type
	AlarmSourceType *string `json:"alarm_source_type,omitempty" xml:"alarm_source_type,omitempty" require:"true"`
	// biz_id
	BizId *int64 `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// biz_groupby_name
	BizGroupbyName *string `json:"biz_groupby_name,omitempty" xml:"biz_groupby_name,omitempty" require:"true"`
	// multi_alarm_id
	MultiAlarmId *int64 `json:"multi_alarm_id,omitempty" xml:"multi_alarm_id,omitempty" require:"true"`
	// context
	Context []*KeySet `json:"context,omitempty" xml:"context,omitempty" require:"true" type:"Repeated"`
}

func (s AlarmHistoryDTO) String() string {
	return tea.Prettify(s)
}

func (s AlarmHistoryDTO) GoString() string {
	return s.String()
}

func (s *AlarmHistoryDTO) SetId(v int64) *AlarmHistoryDTO {
	s.Id = &v
	return s
}

func (s *AlarmHistoryDTO) SetAlarmRuleName(v string) *AlarmHistoryDTO {
	s.AlarmRuleName = &v
	return s
}

func (s *AlarmHistoryDTO) SetMsg(v string) *AlarmHistoryDTO {
	s.Msg = &v
	return s
}

func (s *AlarmHistoryDTO) SetAlarmPkgId(v int64) *AlarmHistoryDTO {
	s.AlarmPkgId = &v
	return s
}

func (s *AlarmHistoryDTO) SetCustomPluginId(v int64) *AlarmHistoryDTO {
	s.CustomPluginId = &v
	return s
}

func (s *AlarmHistoryDTO) SetMetaGroupId(v int64) *AlarmHistoryDTO {
	s.MetaGroupId = &v
	return s
}

func (s *AlarmHistoryDTO) SetStackUniversalTableId(v string) *AlarmHistoryDTO {
	s.StackUniversalTableId = &v
	return s
}

func (s *AlarmHistoryDTO) SetTagValueId(v int64) *AlarmHistoryDTO {
	s.TagValueId = &v
	return s
}

func (s *AlarmHistoryDTO) SetTenantId(v int64) *AlarmHistoryDTO {
	s.TenantId = &v
	return s
}

func (s *AlarmHistoryDTO) SetWorkspaceId(v int64) *AlarmHistoryDTO {
	s.WorkspaceId = &v
	return s
}

func (s *AlarmHistoryDTO) SetBizDomainId(v int64) *AlarmHistoryDTO {
	s.BizDomainId = &v
	return s
}

func (s *AlarmHistoryDTO) SetAlarmTime(v int64) *AlarmHistoryDTO {
	s.AlarmTime = &v
	return s
}

func (s *AlarmHistoryDTO) SetAlarmLevel(v int64) *AlarmHistoryDTO {
	s.AlarmLevel = &v
	return s
}

func (s *AlarmHistoryDTO) SetStackId(v int64) *AlarmHistoryDTO {
	s.StackId = &v
	return s
}

func (s *AlarmHistoryDTO) SetStackEntityId(v int64) *AlarmHistoryDTO {
	s.StackEntityId = &v
	return s
}

func (s *AlarmHistoryDTO) SetStackMonitorItemName(v string) *AlarmHistoryDTO {
	s.StackMonitorItemName = &v
	return s
}

func (s *AlarmHistoryDTO) SetAlarmSourceType(v string) *AlarmHistoryDTO {
	s.AlarmSourceType = &v
	return s
}

func (s *AlarmHistoryDTO) SetBizId(v int64) *AlarmHistoryDTO {
	s.BizId = &v
	return s
}

func (s *AlarmHistoryDTO) SetBizGroupbyName(v string) *AlarmHistoryDTO {
	s.BizGroupbyName = &v
	return s
}

func (s *AlarmHistoryDTO) SetMultiAlarmId(v int64) *AlarmHistoryDTO {
	s.MultiAlarmId = &v
	return s
}

func (s *AlarmHistoryDTO) SetContext(v []*KeySet) *AlarmHistoryDTO {
	s.Context = v
	return s
}

// dashboard
type XDashboardCRULResponseCURequest struct {
	// API版本
	ApiVersion *string `json:"api_version,omitempty" xml:"api_version,omitempty"`
	// Dashboard元数据信息
	Metadata *XResource `json:"metadata,omitempty" xml:"metadata,omitempty" require:"true"`
	// Dashboard配置JSON字符串。
	// Dashboard目录不需要填写
	Config *string `json:"config,omitempty" xml:"config,omitempty"`
}

func (s XDashboardCRULResponseCURequest) String() string {
	return tea.Prettify(s)
}

func (s XDashboardCRULResponseCURequest) GoString() string {
	return s.String()
}

func (s *XDashboardCRULResponseCURequest) SetApiVersion(v string) *XDashboardCRULResponseCURequest {
	s.ApiVersion = &v
	return s
}

func (s *XDashboardCRULResponseCURequest) SetMetadata(v *XResource) *XDashboardCRULResponseCURequest {
	s.Metadata = v
	return s
}

func (s *XDashboardCRULResponseCURequest) SetConfig(v string) *XDashboardCRULResponseCURequest {
	s.Config = &v
	return s
}

// OPS分组方式
type OpsGroupBy struct {
	// 是否按环境分组
	Env *bool `json:"env,omitempty" xml:"env,omitempty"`
	// 是否按部署单元分组
	DeployUnit *bool `json:"deploy_unit,omitempty" xml:"deploy_unit,omitempty"`
	// 是否按应用分组
	App *bool `json:"app,omitempty" xml:"app,omitempty"`
	// 是否按idc分组
	Idc *bool `json:"idc,omitempty" xml:"idc,omitempty"`
	// 是否按ldc分组
	Ldc *bool `json:"ldc,omitempty" xml:"ldc,omitempty"`
	// 是否按server分组
	Server *bool `json:"server,omitempty" xml:"server,omitempty"`
	// 附加信息
	Extra *string `json:"extra,omitempty" xml:"extra,omitempty"`
}

func (s OpsGroupBy) String() string {
	return tea.Prettify(s)
}

func (s OpsGroupBy) GoString() string {
	return s.String()
}

func (s *OpsGroupBy) SetEnv(v bool) *OpsGroupBy {
	s.Env = &v
	return s
}

func (s *OpsGroupBy) SetDeployUnit(v bool) *OpsGroupBy {
	s.DeployUnit = &v
	return s
}

func (s *OpsGroupBy) SetApp(v bool) *OpsGroupBy {
	s.App = &v
	return s
}

func (s *OpsGroupBy) SetIdc(v bool) *OpsGroupBy {
	s.Idc = &v
	return s
}

func (s *OpsGroupBy) SetLdc(v bool) *OpsGroupBy {
	s.Ldc = &v
	return s
}

func (s *OpsGroupBy) SetServer(v bool) *OpsGroupBy {
	s.Server = &v
	return s
}

func (s *OpsGroupBy) SetExtra(v string) *OpsGroupBy {
	s.Extra = &v
	return s
}

// 告警统计信息
type AlarmCountInfo struct {
	// 自定义监控告警数量
	CustomPluginCount *int64 `json:"custom_plugin_count,omitempty" xml:"custom_plugin_count,omitempty" require:"true"`
	// 应用组告警数量
	AppGroupCount *int64 `json:"app_group_count,omitempty" xml:"app_group_count,omitempty" require:"true"`
	// 应用监控告警数量
	AppCount *int64 `json:"app_count,omitempty" xml:"app_count,omitempty" require:"true"`
}

func (s AlarmCountInfo) String() string {
	return tea.Prettify(s)
}

func (s AlarmCountInfo) GoString() string {
	return s.String()
}

func (s *AlarmCountInfo) SetCustomPluginCount(v int64) *AlarmCountInfo {
	s.CustomPluginCount = &v
	return s
}

func (s *AlarmCountInfo) SetAppGroupCount(v int64) *AlarmCountInfo {
	s.AppGroupCount = &v
	return s
}

func (s *AlarmCountInfo) SetAppCount(v int64) *AlarmCountInfo {
	s.AppCount = &v
	return s
}

// 自定义监控日志
type Log struct {
	// 应用名列表
	Apps []*string `json:"apps,omitempty" xml:"apps,omitempty" require:"true" type:"Repeated"`
	// 采集日志文件
	Path *string `json:"path,omitempty" xml:"path,omitempty" require:"true"`
	// 日志编码
	Charset *string `json:"charset,omitempty" xml:"charset,omitempty"`
	// 日志限制流量，单位KB/min
	AgentLimitKB *int64 `json:"agent_limit_k_b,omitempty" xml:"agent_limit_k_b,omitempty"`
	// 日志路径软连接描述
	SymlinkPath *string `json:"symlink_path,omitempty" xml:"symlink_path,omitempty"`
}

func (s Log) String() string {
	return tea.Prettify(s)
}

func (s Log) GoString() string {
	return s.String()
}

func (s *Log) SetApps(v []*string) *Log {
	s.Apps = v
	return s
}

func (s *Log) SetPath(v string) *Log {
	s.Path = &v
	return s
}

func (s *Log) SetCharset(v string) *Log {
	s.Charset = &v
	return s
}

func (s *Log) SetAgentLimitKB(v int64) *Log {
	s.AgentLimitKB = &v
	return s
}

func (s *Log) SetSymlinkPath(v string) *Log {
	s.SymlinkPath = &v
	return s
}

// 实体拓扑节点
type TraasEntityTopoNode struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// field
	Field *string `json:"field,omitempty" xml:"field,omitempty" require:"true"`
}

func (s TraasEntityTopoNode) String() string {
	return tea.Prettify(s)
}

func (s TraasEntityTopoNode) GoString() string {
	return s.String()
}

func (s *TraasEntityTopoNode) SetName(v string) *TraasEntityTopoNode {
	s.Name = &v
	return s
}

func (s *TraasEntityTopoNode) SetField(v string) *TraasEntityTopoNode {
	s.Field = &v
	return s
}

// AlarmLevelStatsVO
type AlarmLevelStatsVO struct {
	// l0
	L0 *int64 `json:"l0,omitempty" xml:"l0,omitempty" require:"true"`
	// l1
	L1 *int64 `json:"l1,omitempty" xml:"l1,omitempty" require:"true"`
	// l2
	L2 *int64 `json:"l2,omitempty" xml:"l2,omitempty" require:"true"`
}

func (s AlarmLevelStatsVO) String() string {
	return tea.Prettify(s)
}

func (s AlarmLevelStatsVO) GoString() string {
	return s.String()
}

func (s *AlarmLevelStatsVO) SetL0(v int64) *AlarmLevelStatsVO {
	s.L0 = &v
	return s
}

func (s *AlarmLevelStatsVO) SetL1(v int64) *AlarmLevelStatsVO {
	s.L1 = &v
	return s
}

func (s *AlarmLevelStatsVO) SetL2(v int64) *AlarmLevelStatsVO {
	s.L2 = &v
	return s
}

// 用户组
type UserGroup struct {
	// ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 通知组名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 最后修改人
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty" require:"true"`
	// 最后修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// 用户组关联关系
	Relations []*UserGroupRelation `json:"relations,omitempty" xml:"relations,omitempty" require:"true" type:"Repeated"`
	// 全局订阅
	ScopeGlobal *bool `json:"scope_global,omitempty" xml:"scope_global,omitempty"`
	// 0、当前workspace有效；
	// 1、租户有效；
	ValidScope *int64 `json:"valid_scope,omitempty" xml:"valid_scope,omitempty"`
	// 当前用户组的告警规则定阅数量
	SubscribeCount *int64 `json:"subscribe_count,omitempty" xml:"subscribe_count,omitempty"`
}

func (s UserGroup) String() string {
	return tea.Prettify(s)
}

func (s UserGroup) GoString() string {
	return s.String()
}

func (s *UserGroup) SetId(v int64) *UserGroup {
	s.Id = &v
	return s
}

func (s *UserGroup) SetName(v string) *UserGroup {
	s.Name = &v
	return s
}

func (s *UserGroup) SetModifier(v string) *UserGroup {
	s.Modifier = &v
	return s
}

func (s *UserGroup) SetGmtModified(v int64) *UserGroup {
	s.GmtModified = &v
	return s
}

func (s *UserGroup) SetRelations(v []*UserGroupRelation) *UserGroup {
	s.Relations = v
	return s
}

func (s *UserGroup) SetScopeGlobal(v bool) *UserGroup {
	s.ScopeGlobal = &v
	return s
}

func (s *UserGroup) SetValidScope(v int64) *UserGroup {
	s.ValidScope = &v
	return s
}

func (s *UserGroup) SetSubscribeCount(v int64) *UserGroup {
	s.SubscribeCount = &v
	return s
}

// PageQuery
type PageQuery struct {
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// page_index
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// cur_index
	CurIndex *int64 `json:"cur_index,omitempty" xml:"cur_index,omitempty" require:"true"`
}

func (s PageQuery) String() string {
	return tea.Prettify(s)
}

func (s PageQuery) GoString() string {
	return s.String()
}

func (s *PageQuery) SetPageSize(v int64) *PageQuery {
	s.PageSize = &v
	return s
}

func (s *PageQuery) SetPageIndex(v int64) *PageQuery {
	s.PageIndex = &v
	return s
}

func (s *PageQuery) SetCurIndex(v int64) *PageQuery {
	s.CurIndex = &v
	return s
}

//
type XTableData struct {
	//
	Tags []*XStringKeyValue `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	//
	MetricValues []*XTimeMetricsValue `json:"metric_values,omitempty" xml:"metric_values,omitempty" type:"Repeated"`
}

func (s XTableData) String() string {
	return tea.Prettify(s)
}

func (s XTableData) GoString() string {
	return s.String()
}

func (s *XTableData) SetTags(v []*XStringKeyValue) *XTableData {
	s.Tags = v
	return s
}

func (s *XTableData) SetMetricValues(v []*XTimeMetricsValue) *XTableData {
	s.MetricValues = v
	return s
}

// 统一告警规则
type UnifiedAlarmRuleVO struct {
	// 主键
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// 告警规则名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 分类 用于区分pql规则和自定义规则
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// 规则配置
	RuleConfig *string `json:"rule_config,omitempty" xml:"rule_config,omitempty"`
	// 告警等级
	Level *int64 `json:"level,omitempty" xml:"level,omitempty"`
	// 检测频率
	Step *int64 `json:"step,omitempty" xml:"step,omitempty"`
	// 触发周期
	PendingHit *int64 `json:"pending_hit,omitempty" xml:"pending_hit,omitempty"`
	// 恢复周期
	RecoveredHit *int64 `json:"recovered_hit,omitempty" xml:"recovered_hit,omitempty"`
	// 静默时间
	SilenceTime *int64 `json:"silence_time,omitempty" xml:"silence_time,omitempty"`
	// 时区
	TimeZone *string `json:"time_zone,omitempty" xml:"time_zone,omitempty"`
	// 应急处理人
	Emergency *string `json:"emergency,omitempty" xml:"emergency,omitempty"`
	// 应急处理链接
	EmergencyUrl *string `json:"emergency_url,omitempty" xml:"emergency_url,omitempty"`
	// 指标无数据触发告警 是个开关 1:打开 0:关闭
	AlarmEmpty *int64 `json:"alarm_empty,omitempty" xml:"alarm_empty,omitempty"`
	// 告警触发时通知 1:勾选 0:不勾选
	NotifyFiring *int64 `json:"notify_firing,omitempty" xml:"notify_firing,omitempty"`
	// 告警恢复时通知 1:勾选 0:不勾选
	NotifyRecovered *int64 `json:"notify_recovered,omitempty" xml:"notify_recovered,omitempty"`
	// 告警无数据时通知 1:勾选 0:不勾选
	NotifyEmpty *int64 `json:"notify_empty,omitempty" xml:"notify_empty,omitempty"`
	// 通知渠道
	Channels *string `json:"channels,omitempty" xml:"channels,omitempty"`
	// 通知模板id
	NotifyTplId *int64 `json:"notify_tpl_id,omitempty" xml:"notify_tpl_id,omitempty"`
	// 通知时间
	NotifyTimeFilter *string `json:"notify_time_filter,omitempty" xml:"notify_time_filter,omitempty"`
	// 暂停开始时间
	SuspendedStartTime *int64 `json:"suspended_start_time,omitempty" xml:"suspended_start_time,omitempty"`
	// 暂停结束时间
	SuspendedEndTime *int64 `json:"suspended_end_time,omitempty" xml:"suspended_end_time,omitempty"`
	// 暂停的原因
	SuspendedReason *string `json:"suspended_reason,omitempty" xml:"suspended_reason,omitempty"`
	// 唯一 ID，保证迁移前后不变
	UniqueIdentity *string `json:"unique_identity,omitempty" xml:"unique_identity,omitempty"`
	// 标识告警规则迁移之前的 ID
	SourceId *string `json:"source_id,omitempty" xml:"source_id,omitempty"`
	// 启停状态 开关
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 软删除
	Deleted *int64 `json:"deleted,omitempty" xml:"deleted,omitempty"`
	// 租户id
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 工作空间id
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// 创建人
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// 修改人
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 告警状态
	AlarmStatus *int64 `json:"alarm_status,omitempty" xml:"alarm_status,omitempty"`
	// 告警条件简介
	ConditionsDes []*string `json:"conditions_des,omitempty" xml:"conditions_des,omitempty" type:"Repeated"`
	// 告警类型
	AlarmType *string `json:"alarm_type,omitempty" xml:"alarm_type,omitempty"`
	// 告警数据源跳转url
	AlarmUrl *string `json:"alarm_url,omitempty" xml:"alarm_url,omitempty"`
	// 数据源名称
	DataSourceName *string `json:"data_source_name,omitempty" xml:"data_source_name,omitempty"`
	// 目标对象是否删除
	AlarmTargetDeleted *bool `json:"alarm_target_deleted,omitempty" xml:"alarm_target_deleted,omitempty"`
}

func (s UnifiedAlarmRuleVO) String() string {
	return tea.Prettify(s)
}

func (s UnifiedAlarmRuleVO) GoString() string {
	return s.String()
}

func (s *UnifiedAlarmRuleVO) SetId(v int64) *UnifiedAlarmRuleVO {
	s.Id = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetName(v string) *UnifiedAlarmRuleVO {
	s.Name = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetCategory(v string) *UnifiedAlarmRuleVO {
	s.Category = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetRuleConfig(v string) *UnifiedAlarmRuleVO {
	s.RuleConfig = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetLevel(v int64) *UnifiedAlarmRuleVO {
	s.Level = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetStep(v int64) *UnifiedAlarmRuleVO {
	s.Step = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetPendingHit(v int64) *UnifiedAlarmRuleVO {
	s.PendingHit = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetRecoveredHit(v int64) *UnifiedAlarmRuleVO {
	s.RecoveredHit = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetSilenceTime(v int64) *UnifiedAlarmRuleVO {
	s.SilenceTime = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetTimeZone(v string) *UnifiedAlarmRuleVO {
	s.TimeZone = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetEmergency(v string) *UnifiedAlarmRuleVO {
	s.Emergency = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetEmergencyUrl(v string) *UnifiedAlarmRuleVO {
	s.EmergencyUrl = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetAlarmEmpty(v int64) *UnifiedAlarmRuleVO {
	s.AlarmEmpty = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetNotifyFiring(v int64) *UnifiedAlarmRuleVO {
	s.NotifyFiring = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetNotifyRecovered(v int64) *UnifiedAlarmRuleVO {
	s.NotifyRecovered = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetNotifyEmpty(v int64) *UnifiedAlarmRuleVO {
	s.NotifyEmpty = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetChannels(v string) *UnifiedAlarmRuleVO {
	s.Channels = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetNotifyTplId(v int64) *UnifiedAlarmRuleVO {
	s.NotifyTplId = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetNotifyTimeFilter(v string) *UnifiedAlarmRuleVO {
	s.NotifyTimeFilter = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetSuspendedStartTime(v int64) *UnifiedAlarmRuleVO {
	s.SuspendedStartTime = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetSuspendedEndTime(v int64) *UnifiedAlarmRuleVO {
	s.SuspendedEndTime = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetSuspendedReason(v string) *UnifiedAlarmRuleVO {
	s.SuspendedReason = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetUniqueIdentity(v string) *UnifiedAlarmRuleVO {
	s.UniqueIdentity = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetSourceId(v string) *UnifiedAlarmRuleVO {
	s.SourceId = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetStatus(v int64) *UnifiedAlarmRuleVO {
	s.Status = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetDeleted(v int64) *UnifiedAlarmRuleVO {
	s.Deleted = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetTenantId(v int64) *UnifiedAlarmRuleVO {
	s.TenantId = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetWorkspaceId(v int64) *UnifiedAlarmRuleVO {
	s.WorkspaceId = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetCreator(v string) *UnifiedAlarmRuleVO {
	s.Creator = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetModifier(v string) *UnifiedAlarmRuleVO {
	s.Modifier = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetGmtCreate(v string) *UnifiedAlarmRuleVO {
	s.GmtCreate = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetGmtModified(v string) *UnifiedAlarmRuleVO {
	s.GmtModified = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetAlarmStatus(v int64) *UnifiedAlarmRuleVO {
	s.AlarmStatus = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetConditionsDes(v []*string) *UnifiedAlarmRuleVO {
	s.ConditionsDes = v
	return s
}

func (s *UnifiedAlarmRuleVO) SetAlarmType(v string) *UnifiedAlarmRuleVO {
	s.AlarmType = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetAlarmUrl(v string) *UnifiedAlarmRuleVO {
	s.AlarmUrl = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetDataSourceName(v string) *UnifiedAlarmRuleVO {
	s.DataSourceName = &v
	return s
}

func (s *UnifiedAlarmRuleVO) SetAlarmTargetDeleted(v bool) *UnifiedAlarmRuleVO {
	s.AlarmTargetDeleted = &v
	return s
}

// 能登陆监控的用户
type MonitorUserDO struct {
	// 登录名
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty" require:"true"`
	// 昵称(花名或显示名)
	NickName *string `json:"nick_name,omitempty" xml:"nick_name,omitempty" require:"true"`
	// 手机号码
	PhoneNum *string `json:"phone_num,omitempty" xml:"phone_num,omitempty" require:"true"`
	// 真名
	RealName *string `json:"real_name,omitempty" xml:"real_name,omitempty" require:"true"`
	// 一方化标记位
	FromAliyun *bool `json:"from_aliyun,omitempty" xml:"from_aliyun,omitempty" require:"true"`
	// 是否未超级管理员
	SuperAdmin *bool `json:"super_admin,omitempty" xml:"super_admin,omitempty" require:"true"`
	// 用户上的权限
	SuperViewer *bool `json:"super_viewer,omitempty" xml:"super_viewer,omitempty" require:"true"`
	// super_admin或者super_viewer
	IsSuper *bool `json:"is_super,omitempty" xml:"is_super,omitempty" require:"true"`
	// 用户 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 用户来源
	IdentityType *string `json:"identity_type,omitempty" xml:"identity_type,omitempty" require:"true"`
}

func (s MonitorUserDO) String() string {
	return tea.Prettify(s)
}

func (s MonitorUserDO) GoString() string {
	return s.String()
}

func (s *MonitorUserDO) SetLoginName(v string) *MonitorUserDO {
	s.LoginName = &v
	return s
}

func (s *MonitorUserDO) SetNickName(v string) *MonitorUserDO {
	s.NickName = &v
	return s
}

func (s *MonitorUserDO) SetPhoneNum(v string) *MonitorUserDO {
	s.PhoneNum = &v
	return s
}

func (s *MonitorUserDO) SetRealName(v string) *MonitorUserDO {
	s.RealName = &v
	return s
}

func (s *MonitorUserDO) SetFromAliyun(v bool) *MonitorUserDO {
	s.FromAliyun = &v
	return s
}

func (s *MonitorUserDO) SetSuperAdmin(v bool) *MonitorUserDO {
	s.SuperAdmin = &v
	return s
}

func (s *MonitorUserDO) SetSuperViewer(v bool) *MonitorUserDO {
	s.SuperViewer = &v
	return s
}

func (s *MonitorUserDO) SetIsSuper(v bool) *MonitorUserDO {
	s.IsSuper = &v
	return s
}

func (s *MonitorUserDO) SetId(v int64) *MonitorUserDO {
	s.Id = &v
	return s
}

func (s *MonitorUserDO) SetIdentityType(v string) *MonitorUserDO {
	s.IdentityType = &v
	return s
}

// 工作空间
type Workspace struct {
	// ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 展示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// 租户ID
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// outsideWsId
	OutsideWsId *string `json:"outside_ws_id,omitempty" xml:"outside_ws_id,omitempty" require:"true"`
	// outsideTenantId
	OutsideTenantId *string `json:"outside_tenant_id,omitempty" xml:"outside_tenant_id,omitempty" require:"true"`
}

func (s Workspace) String() string {
	return tea.Prettify(s)
}

func (s Workspace) GoString() string {
	return s.String()
}

func (s *Workspace) SetId(v int64) *Workspace {
	s.Id = &v
	return s
}

func (s *Workspace) SetName(v string) *Workspace {
	s.Name = &v
	return s
}

func (s *Workspace) SetDisplayName(v string) *Workspace {
	s.DisplayName = &v
	return s
}

func (s *Workspace) SetTenantId(v int64) *Workspace {
	s.TenantId = &v
	return s
}

func (s *Workspace) SetOutsideWsId(v string) *Workspace {
	s.OutsideWsId = &v
	return s
}

func (s *Workspace) SetOutsideTenantId(v string) *Workspace {
	s.OutsideTenantId = &v
	return s
}

// UserAuthRsp
type UserAuthRsp struct {
	// powers
	Powers []*LongListKeySet `json:"powers,omitempty" xml:"powers,omitempty" require:"true" type:"Repeated"`
	// bd_powers
	BdPowers []*LongListKeySet `json:"bd_powers,omitempty" xml:"bd_powers,omitempty" require:"true" type:"Repeated"`
	// w_powers
	WPowers []*LongListKeySet `json:"w_powers,omitempty" xml:"w_powers,omitempty" require:"true" type:"Repeated"`
	// t_powers
	TPowers []*LongListKeySet `json:"t_powers,omitempty" xml:"t_powers,omitempty" require:"true" type:"Repeated"`
	// super_admin
	SuperAdmin *bool `json:"super_admin,omitempty" xml:"super_admin,omitempty" require:"true"`
	// super_view
	SuperView *bool `json:"super_view,omitempty" xml:"super_view,omitempty" require:"true"`
	// biz_domains
	BizDomains []*BizDomain `json:"biz_domains,omitempty" xml:"biz_domains,omitempty" require:"true" type:"Repeated"`
	// auth_url
	AuthUrl *string `json:"auth_url,omitempty" xml:"auth_url,omitempty" require:"true"`
}

func (s UserAuthRsp) String() string {
	return tea.Prettify(s)
}

func (s UserAuthRsp) GoString() string {
	return s.String()
}

func (s *UserAuthRsp) SetPowers(v []*LongListKeySet) *UserAuthRsp {
	s.Powers = v
	return s
}

func (s *UserAuthRsp) SetBdPowers(v []*LongListKeySet) *UserAuthRsp {
	s.BdPowers = v
	return s
}

func (s *UserAuthRsp) SetWPowers(v []*LongListKeySet) *UserAuthRsp {
	s.WPowers = v
	return s
}

func (s *UserAuthRsp) SetTPowers(v []*LongListKeySet) *UserAuthRsp {
	s.TPowers = v
	return s
}

func (s *UserAuthRsp) SetSuperAdmin(v bool) *UserAuthRsp {
	s.SuperAdmin = &v
	return s
}

func (s *UserAuthRsp) SetSuperView(v bool) *UserAuthRsp {
	s.SuperView = &v
	return s
}

func (s *UserAuthRsp) SetBizDomains(v []*BizDomain) *UserAuthRsp {
	s.BizDomains = v
	return s
}

func (s *UserAuthRsp) SetAuthUrl(v string) *UserAuthRsp {
	s.AuthUrl = &v
	return s
}

// ModelTreeNode
type ModelTreeNode struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// plugin_name
	PluginName *string `json:"plugin_name,omitempty" xml:"plugin_name,omitempty" require:"true"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s ModelTreeNode) String() string {
	return tea.Prettify(s)
}

func (s ModelTreeNode) GoString() string {
	return s.String()
}

func (s *ModelTreeNode) SetName(v string) *ModelTreeNode {
	s.Name = &v
	return s
}

func (s *ModelTreeNode) SetId(v int64) *ModelTreeNode {
	s.Id = &v
	return s
}

func (s *ModelTreeNode) SetPluginName(v string) *ModelTreeNode {
	s.PluginName = &v
	return s
}

func (s *ModelTreeNode) SetType(v string) *ModelTreeNode {
	s.Type = &v
	return s
}

// 文件夹实体类
type FolderDO struct {
	// 文件夹ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 文件夹名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 父目录 ID
	ParentFolderId *string `json:"parent_folder_id,omitempty" xml:"parent_folder_id,omitempty" require:"true"`
	// 排序号
	SortIndex *string `json:"sort_index,omitempty" xml:"sort_index,omitempty"`
	// 监控租户 ID
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 监控工作空间 ID
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// 创建者
	Creater *string `json:"creater,omitempty" xml:"creater,omitempty" require:"true"`
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// 修改者
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty" require:"true"`
	// 是否告警
	Alarmed *bool `json:"alarmed,omitempty" xml:"alarmed,omitempty" require:"true"`
	// 是否置顶
	Top *bool `json:"top,omitempty" xml:"top,omitempty" require:"true"`
}

func (s FolderDO) String() string {
	return tea.Prettify(s)
}

func (s FolderDO) GoString() string {
	return s.String()
}

func (s *FolderDO) SetId(v int64) *FolderDO {
	s.Id = &v
	return s
}

func (s *FolderDO) SetName(v string) *FolderDO {
	s.Name = &v
	return s
}

func (s *FolderDO) SetParentFolderId(v string) *FolderDO {
	s.ParentFolderId = &v
	return s
}

func (s *FolderDO) SetSortIndex(v string) *FolderDO {
	s.SortIndex = &v
	return s
}

func (s *FolderDO) SetTenantId(v int64) *FolderDO {
	s.TenantId = &v
	return s
}

func (s *FolderDO) SetWorkspaceId(v string) *FolderDO {
	s.WorkspaceId = &v
	return s
}

func (s *FolderDO) SetCreater(v string) *FolderDO {
	s.Creater = &v
	return s
}

func (s *FolderDO) SetGmtCreate(v int64) *FolderDO {
	s.GmtCreate = &v
	return s
}

func (s *FolderDO) SetGmtModified(v int64) *FolderDO {
	s.GmtModified = &v
	return s
}

func (s *FolderDO) SetModifier(v string) *FolderDO {
	s.Modifier = &v
	return s
}

func (s *FolderDO) SetAlarmed(v bool) *FolderDO {
	s.Alarmed = &v
	return s
}

func (s *FolderDO) SetTop(v bool) *FolderDO {
	s.Top = &v
	return s
}

// 统一告警订阅
type UnifiedAlarmSubVO struct {
	// 主键
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// 告警规则id
	AlarmRuleId *int64 `json:"alarm_rule_id,omitempty" xml:"alarm_rule_id,omitempty"`
	// 告警模板id
	AlarmTplId *int64 `json:"alarm_tpl_id,omitempty" xml:"alarm_tpl_id,omitempty"`
	// 订阅者的类型
	SubscriberType *string `json:"subscriber_type,omitempty" xml:"subscriber_type,omitempty"`
	// 订阅者
	Subscriber *string `json:"subscriber,omitempty" xml:"subscriber,omitempty"`
	// 订阅者名称
	SubscriberName *string `json:"subscriber_name,omitempty" xml:"subscriber_name,omitempty"`
	// 租户id
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 工作空间id
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// 创建人,可以理解为当前登录用户
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// 修改人,同creator
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// 创建日期
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 修改日期
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 静默时间
	SilenceTime *int64 `json:"silence_time,omitempty" xml:"silence_time,omitempty"`
	// 通知渠道
	Channel *string `json:"channel,omitempty" xml:"channel,omitempty"`
	// 订阅者来源
	SubscriberSource *string `json:"subscriber_source,omitempty" xml:"subscriber_source,omitempty"`
}

func (s UnifiedAlarmSubVO) String() string {
	return tea.Prettify(s)
}

func (s UnifiedAlarmSubVO) GoString() string {
	return s.String()
}

func (s *UnifiedAlarmSubVO) SetId(v int64) *UnifiedAlarmSubVO {
	s.Id = &v
	return s
}

func (s *UnifiedAlarmSubVO) SetAlarmRuleId(v int64) *UnifiedAlarmSubVO {
	s.AlarmRuleId = &v
	return s
}

func (s *UnifiedAlarmSubVO) SetAlarmTplId(v int64) *UnifiedAlarmSubVO {
	s.AlarmTplId = &v
	return s
}

func (s *UnifiedAlarmSubVO) SetSubscriberType(v string) *UnifiedAlarmSubVO {
	s.SubscriberType = &v
	return s
}

func (s *UnifiedAlarmSubVO) SetSubscriber(v string) *UnifiedAlarmSubVO {
	s.Subscriber = &v
	return s
}

func (s *UnifiedAlarmSubVO) SetSubscriberName(v string) *UnifiedAlarmSubVO {
	s.SubscriberName = &v
	return s
}

func (s *UnifiedAlarmSubVO) SetTenantId(v int64) *UnifiedAlarmSubVO {
	s.TenantId = &v
	return s
}

func (s *UnifiedAlarmSubVO) SetWorkspaceId(v int64) *UnifiedAlarmSubVO {
	s.WorkspaceId = &v
	return s
}

func (s *UnifiedAlarmSubVO) SetCreator(v string) *UnifiedAlarmSubVO {
	s.Creator = &v
	return s
}

func (s *UnifiedAlarmSubVO) SetModifier(v string) *UnifiedAlarmSubVO {
	s.Modifier = &v
	return s
}

func (s *UnifiedAlarmSubVO) SetGmtCreate(v string) *UnifiedAlarmSubVO {
	s.GmtCreate = &v
	return s
}

func (s *UnifiedAlarmSubVO) SetGmtModified(v string) *UnifiedAlarmSubVO {
	s.GmtModified = &v
	return s
}

func (s *UnifiedAlarmSubVO) SetSilenceTime(v int64) *UnifiedAlarmSubVO {
	s.SilenceTime = &v
	return s
}

func (s *UnifiedAlarmSubVO) SetChannel(v string) *UnifiedAlarmSubVO {
	s.Channel = &v
	return s
}

func (s *UnifiedAlarmSubVO) SetSubscriberSource(v string) *UnifiedAlarmSubVO {
	s.SubscriberSource = &v
	return s
}

// IpFileOs
type IpFileOs struct {
	// error_msg
	ErrorMsg *string `json:"error_msg,omitempty" xml:"error_msg,omitempty" require:"true"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty" require:"true"`
	// next_file_id
	NextFileId *string `json:"next_file_id,omitempty" xml:"next_file_id,omitempty" require:"true"`
	// next_offset
	NextOffset *int64 `json:"next_offset,omitempty" xml:"next_offset,omitempty" require:"true"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
}

func (s IpFileOs) String() string {
	return tea.Prettify(s)
}

func (s IpFileOs) GoString() string {
	return s.String()
}

func (s *IpFileOs) SetErrorMsg(v string) *IpFileOs {
	s.ErrorMsg = &v
	return s
}

func (s *IpFileOs) SetIp(v string) *IpFileOs {
	s.Ip = &v
	return s
}

func (s *IpFileOs) SetNextFileId(v string) *IpFileOs {
	s.NextFileId = &v
	return s
}

func (s *IpFileOs) SetNextOffset(v int64) *IpFileOs {
	s.NextOffset = &v
	return s
}

func (s *IpFileOs) SetUuid(v string) *IpFileOs {
	s.Uuid = &v
	return s
}

// 自定义监控指标DO
type CustomPluginDO struct {
	// ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// 自定义监控名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 监控类型id
	PluginId *int64 `json:"plugin_id,omitempty" xml:"plugin_id,omitempty" require:"true"`
	// 监控类型
	PluginType *string `json:"plugin_type,omitempty" xml:"plugin_type,omitempty" require:"true"`
	// 父级文件夹 ID
	ParentFolderId *int64 `json:"parent_folder_id,omitempty" xml:"parent_folder_id,omitempty" require:"true"`
	// 创建者
	Creater *string `json:"creater,omitempty" xml:"creater,omitempty"`
	// 最后修改者
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// 创建时间 - 时间戳
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	// 最后修改时间 - 时间戳
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	// 是否有报警
	Alarmed *bool `json:"alarmed,omitempty" xml:"alarmed,omitempty"`
	// 日志
	Log *Log `json:"log,omitempty" xml:"log,omitempty"`
	// 存储信息
	SaveSchema *SaveSchema `json:"save_schema,omitempty" xml:"save_schema,omitempty"`
	// 采集元数据过滤项
	OpsmetaSchema *OpsmetaSchema `json:"opsmeta_schema,omitempty" xml:"opsmeta_schema,omitempty"`
	// 属性扩展包
	Spm *Spm `json:"spm,omitempty" xml:"spm,omitempty"`
	// 告警套餐列表
	AlarmPkgs []*AlarmPkgDO `json:"alarm_pkgs,omitempty" xml:"alarm_pkgs,omitempty" type:"Repeated"`
	// 日志筛选黑名单
	BlackFilters []*Filter `json:"black_filters,omitempty" xml:"black_filters,omitempty" type:"Repeated"`
	// 日志筛选白名单
	WhiteFilters []*Filter `json:"white_filters,omitempty" xml:"white_filters,omitempty" type:"Repeated"`
	// OPS分组方式
	OpsGroupBy *OpsGroupBy `json:"ops_group_by,omitempty" xml:"ops_group_by,omitempty"`
	// 统计方式
	Cal *Cal `json:"cal,omitempty" xml:"cal,omitempty"`
	// 配置状态
	Status *StatusDO `json:"status,omitempty" xml:"status,omitempty"`
	// top预警
	TopAlarm *TopAlarmDO `json:"top_alarm,omitempty" xml:"top_alarm,omitempty"`
	// 分组规则
	GroupBy []*Filter `json:"group_by,omitempty" xml:"group_by,omitempty" type:"Repeated"`
	// 状态描述信息
	StatusDesc *string `json:"status_desc,omitempty" xml:"status_desc,omitempty"`
	// 是否需要动态key
	DkNeed *bool `json:"dk_need,omitempty" xml:"dk_need,omitempty"`
	// 推荐的动态key列表, 分号间隔
	Dks *string `json:"dks,omitempty" xml:"dks,omitempty"`
	// 是否需要大盘显示基线
	BaselineNeed *bool `json:"baseline_need,omitempty" xml:"baseline_need,omitempty"`
	// 是否需要快速刷入实时缓存
	FlushBasin *bool `json:"flush_basin,omitempty" xml:"flush_basin,omitempty"`
	// 所属应用
	XflushApps *string `json:"xflush_apps,omitempty" xml:"xflush_apps,omitempty"`
	// script (JSON String格式)
	ScriptNew *string `json:"script_new,omitempty" xml:"script_new,omitempty"`
	// 是否开启
	IsOpen *bool `json:"is_open,omitempty" xml:"is_open,omitempty"`
	// 插件类型别名
	PluginTypeAlias *string `json:"plugin_type_alias,omitempty" xml:"plugin_type_alias,omitempty" require:"true"`
}

func (s CustomPluginDO) String() string {
	return tea.Prettify(s)
}

func (s CustomPluginDO) GoString() string {
	return s.String()
}

func (s *CustomPluginDO) SetId(v int64) *CustomPluginDO {
	s.Id = &v
	return s
}

func (s *CustomPluginDO) SetName(v string) *CustomPluginDO {
	s.Name = &v
	return s
}

func (s *CustomPluginDO) SetPluginId(v int64) *CustomPluginDO {
	s.PluginId = &v
	return s
}

func (s *CustomPluginDO) SetPluginType(v string) *CustomPluginDO {
	s.PluginType = &v
	return s
}

func (s *CustomPluginDO) SetParentFolderId(v int64) *CustomPluginDO {
	s.ParentFolderId = &v
	return s
}

func (s *CustomPluginDO) SetCreater(v string) *CustomPluginDO {
	s.Creater = &v
	return s
}

func (s *CustomPluginDO) SetModifier(v string) *CustomPluginDO {
	s.Modifier = &v
	return s
}

func (s *CustomPluginDO) SetGmtCreate(v int64) *CustomPluginDO {
	s.GmtCreate = &v
	return s
}

func (s *CustomPluginDO) SetGmtModified(v int64) *CustomPluginDO {
	s.GmtModified = &v
	return s
}

func (s *CustomPluginDO) SetAlarmed(v bool) *CustomPluginDO {
	s.Alarmed = &v
	return s
}

func (s *CustomPluginDO) SetLog(v *Log) *CustomPluginDO {
	s.Log = v
	return s
}

func (s *CustomPluginDO) SetSaveSchema(v *SaveSchema) *CustomPluginDO {
	s.SaveSchema = v
	return s
}

func (s *CustomPluginDO) SetOpsmetaSchema(v *OpsmetaSchema) *CustomPluginDO {
	s.OpsmetaSchema = v
	return s
}

func (s *CustomPluginDO) SetSpm(v *Spm) *CustomPluginDO {
	s.Spm = v
	return s
}

func (s *CustomPluginDO) SetAlarmPkgs(v []*AlarmPkgDO) *CustomPluginDO {
	s.AlarmPkgs = v
	return s
}

func (s *CustomPluginDO) SetBlackFilters(v []*Filter) *CustomPluginDO {
	s.BlackFilters = v
	return s
}

func (s *CustomPluginDO) SetWhiteFilters(v []*Filter) *CustomPluginDO {
	s.WhiteFilters = v
	return s
}

func (s *CustomPluginDO) SetOpsGroupBy(v *OpsGroupBy) *CustomPluginDO {
	s.OpsGroupBy = v
	return s
}

func (s *CustomPluginDO) SetCal(v *Cal) *CustomPluginDO {
	s.Cal = v
	return s
}

func (s *CustomPluginDO) SetStatus(v *StatusDO) *CustomPluginDO {
	s.Status = v
	return s
}

func (s *CustomPluginDO) SetTopAlarm(v *TopAlarmDO) *CustomPluginDO {
	s.TopAlarm = v
	return s
}

func (s *CustomPluginDO) SetGroupBy(v []*Filter) *CustomPluginDO {
	s.GroupBy = v
	return s
}

func (s *CustomPluginDO) SetStatusDesc(v string) *CustomPluginDO {
	s.StatusDesc = &v
	return s
}

func (s *CustomPluginDO) SetDkNeed(v bool) *CustomPluginDO {
	s.DkNeed = &v
	return s
}

func (s *CustomPluginDO) SetDks(v string) *CustomPluginDO {
	s.Dks = &v
	return s
}

func (s *CustomPluginDO) SetBaselineNeed(v bool) *CustomPluginDO {
	s.BaselineNeed = &v
	return s
}

func (s *CustomPluginDO) SetFlushBasin(v bool) *CustomPluginDO {
	s.FlushBasin = &v
	return s
}

func (s *CustomPluginDO) SetXflushApps(v string) *CustomPluginDO {
	s.XflushApps = &v
	return s
}

func (s *CustomPluginDO) SetScriptNew(v string) *CustomPluginDO {
	s.ScriptNew = &v
	return s
}

func (s *CustomPluginDO) SetIsOpen(v bool) *CustomPluginDO {
	s.IsOpen = &v
	return s
}

func (s *CustomPluginDO) SetPluginTypeAlias(v string) *CustomPluginDO {
	s.PluginTypeAlias = &v
	return s
}

// 告警消息历史
type UnifiedAlarmNotifyHistoryVO struct {
	// 主键
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// 告警历史id
	AlarmHistoryId *int64 `json:"alarm_history_id,omitempty" xml:"alarm_history_id,omitempty"`
	// 告警事件id
	AlarmEventId *string `json:"alarm_event_id,omitempty" xml:"alarm_event_id,omitempty"`
	// 告警规则id
	AlarmRuleId *int64 `json:"alarm_rule_id,omitempty" xml:"alarm_rule_id,omitempty"`
	// 告警等级
	AlarmLevel *int64 `json:"alarm_level,omitempty" xml:"alarm_level,omitempty"`
	// 告警静默期
	AlarmSilenceTime *int64 `json:"alarm_silence_time,omitempty" xml:"alarm_silence_time,omitempty"`
	// 告警时间
	AlarmTime *int64 `json:"alarm_time,omitempty" xml:"alarm_time,omitempty"`
	// 通知渠道
	Channel *string `json:"channel,omitempty" xml:"channel,omitempty"`
	// 订阅人的类型
	SubscriberType *string `json:"subscriber_type,omitempty" xml:"subscriber_type,omitempty"`
	// 订阅人
	Subscriber *string `json:"subscriber,omitempty" xml:"subscriber,omitempty"`
	// 聚合条数
	AggCount *int64 `json:"agg_count,omitempty" xml:"agg_count,omitempty"`
	// 通知状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 租户id
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 工作空间id
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 消息内容
	NotifyContent *string `json:"notify_content,omitempty" xml:"notify_content,omitempty"`
	// 告警规则名
	AlarmRuleName *string `json:"alarm_rule_name,omitempty" xml:"alarm_rule_name,omitempty"`
	// 订阅人
	SubscriberName *string `json:"subscriber_name,omitempty" xml:"subscriber_name,omitempty"`
	// 订阅者来源
	SubscriberSource *string `json:"subscriber_source,omitempty" xml:"subscriber_source,omitempty"`
	// 告警消息的状态
	AlarmStatus *int64 `json:"alarm_status,omitempty" xml:"alarm_status,omitempty"`
	// 告警类型
	AlarmType *string `json:"alarm_type,omitempty" xml:"alarm_type,omitempty"`
	// 告警数据源跳转url
	AlarmUrl *string `json:"alarm_url,omitempty" xml:"alarm_url,omitempty"`
	// 数据源名称
	DataSourceName *string `json:"data_source_name,omitempty" xml:"data_source_name,omitempty"`
	// 目标对象是否删除
	AlarmTargetDeleted *bool `json:"alarm_target_deleted,omitempty" xml:"alarm_target_deleted,omitempty"`
	// 描述消息发送错误原因
	ErrorMessage *string `json:"error_message,omitempty" xml:"error_message,omitempty"`
	// 告警消息的日志跟踪字段
	TraceId *string `json:"trace_id,omitempty" xml:"trace_id,omitempty"`
}

func (s UnifiedAlarmNotifyHistoryVO) String() string {
	return tea.Prettify(s)
}

func (s UnifiedAlarmNotifyHistoryVO) GoString() string {
	return s.String()
}

func (s *UnifiedAlarmNotifyHistoryVO) SetId(v int64) *UnifiedAlarmNotifyHistoryVO {
	s.Id = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetAlarmHistoryId(v int64) *UnifiedAlarmNotifyHistoryVO {
	s.AlarmHistoryId = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetAlarmEventId(v string) *UnifiedAlarmNotifyHistoryVO {
	s.AlarmEventId = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetAlarmRuleId(v int64) *UnifiedAlarmNotifyHistoryVO {
	s.AlarmRuleId = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetAlarmLevel(v int64) *UnifiedAlarmNotifyHistoryVO {
	s.AlarmLevel = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetAlarmSilenceTime(v int64) *UnifiedAlarmNotifyHistoryVO {
	s.AlarmSilenceTime = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetAlarmTime(v int64) *UnifiedAlarmNotifyHistoryVO {
	s.AlarmTime = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetChannel(v string) *UnifiedAlarmNotifyHistoryVO {
	s.Channel = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetSubscriberType(v string) *UnifiedAlarmNotifyHistoryVO {
	s.SubscriberType = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetSubscriber(v string) *UnifiedAlarmNotifyHistoryVO {
	s.Subscriber = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetAggCount(v int64) *UnifiedAlarmNotifyHistoryVO {
	s.AggCount = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetStatus(v int64) *UnifiedAlarmNotifyHistoryVO {
	s.Status = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetTenantId(v int64) *UnifiedAlarmNotifyHistoryVO {
	s.TenantId = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetWorkspaceId(v int64) *UnifiedAlarmNotifyHistoryVO {
	s.WorkspaceId = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetGmtCreate(v string) *UnifiedAlarmNotifyHistoryVO {
	s.GmtCreate = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetGmtModified(v string) *UnifiedAlarmNotifyHistoryVO {
	s.GmtModified = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetNotifyContent(v string) *UnifiedAlarmNotifyHistoryVO {
	s.NotifyContent = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetAlarmRuleName(v string) *UnifiedAlarmNotifyHistoryVO {
	s.AlarmRuleName = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetSubscriberName(v string) *UnifiedAlarmNotifyHistoryVO {
	s.SubscriberName = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetSubscriberSource(v string) *UnifiedAlarmNotifyHistoryVO {
	s.SubscriberSource = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetAlarmStatus(v int64) *UnifiedAlarmNotifyHistoryVO {
	s.AlarmStatus = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetAlarmType(v string) *UnifiedAlarmNotifyHistoryVO {
	s.AlarmType = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetAlarmUrl(v string) *UnifiedAlarmNotifyHistoryVO {
	s.AlarmUrl = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetDataSourceName(v string) *UnifiedAlarmNotifyHistoryVO {
	s.DataSourceName = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetAlarmTargetDeleted(v bool) *UnifiedAlarmNotifyHistoryVO {
	s.AlarmTargetDeleted = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetErrorMessage(v string) *UnifiedAlarmNotifyHistoryVO {
	s.ErrorMessage = &v
	return s
}

func (s *UnifiedAlarmNotifyHistoryVO) SetTraceId(v string) *UnifiedAlarmNotifyHistoryVO {
	s.TraceId = &v
	return s
}

// TraasAppDto
type TraasAppDto struct {
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 应用所属的上层所有祖先分组
	AncestorAppGroups []*TraasAppGroupDto `json:"ancestor_app_groups,omitempty" xml:"ancestor_app_groups,omitempty" type:"Repeated"`
	// app_group_uuid
	AppGroupUuid *string `json:"app_group_uuid,omitempty" xml:"app_group_uuid,omitempty"`
	// app_group_name
	AppGroupName *string `json:"app_group_name,omitempty" xml:"app_group_name,omitempty"`
	// app_server_count
	AppServerCount *int64 `json:"app_server_count,omitempty" xml:"app_server_count,omitempty"`
}

func (s TraasAppDto) String() string {
	return tea.Prettify(s)
}

func (s TraasAppDto) GoString() string {
	return s.String()
}

func (s *TraasAppDto) SetUuid(v string) *TraasAppDto {
	s.Uuid = &v
	return s
}

func (s *TraasAppDto) SetName(v string) *TraasAppDto {
	s.Name = &v
	return s
}

func (s *TraasAppDto) SetDisplayName(v string) *TraasAppDto {
	s.DisplayName = &v
	return s
}

func (s *TraasAppDto) SetTenantUuid(v string) *TraasAppDto {
	s.TenantUuid = &v
	return s
}

func (s *TraasAppDto) SetTenantName(v string) *TraasAppDto {
	s.TenantName = &v
	return s
}

func (s *TraasAppDto) SetOutsideId(v string) *TraasAppDto {
	s.OutsideId = &v
	return s
}

func (s *TraasAppDto) SetSourceFrom(v string) *TraasAppDto {
	s.SourceFrom = &v
	return s
}

func (s *TraasAppDto) SetExtension(v string) *TraasAppDto {
	s.Extension = &v
	return s
}

func (s *TraasAppDto) SetGmtCreate(v string) *TraasAppDto {
	s.GmtCreate = &v
	return s
}

func (s *TraasAppDto) SetGmtModified(v string) *TraasAppDto {
	s.GmtModified = &v
	return s
}

func (s *TraasAppDto) SetAncestorAppGroups(v []*TraasAppGroupDto) *TraasAppDto {
	s.AncestorAppGroups = v
	return s
}

func (s *TraasAppDto) SetAppGroupUuid(v string) *TraasAppDto {
	s.AppGroupUuid = &v
	return s
}

func (s *TraasAppDto) SetAppGroupName(v string) *TraasAppDto {
	s.AppGroupName = &v
	return s
}

func (s *TraasAppDto) SetAppServerCount(v int64) *TraasAppDto {
	s.AppServerCount = &v
	return s
}

// UniversalBodyCmd
type UniversalBodyCmd struct {
	// body
	Body *string `json:"body,omitempty" xml:"body,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// model_name
	ModelName *string `json:"model_name,omitempty" xml:"model_name,omitempty" require:"true"`
	// op
	Op *string `json:"op,omitempty" xml:"op,omitempty" require:"true"`
	// parse_long_text
	ParseLongText *bool `json:"parse_long_text,omitempty" xml:"parse_long_text,omitempty" require:"true"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// page_index
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// cur_index
	CurIndex *int64 `json:"cur_index,omitempty" xml:"cur_index,omitempty" require:"true"`
}

func (s UniversalBodyCmd) String() string {
	return tea.Prettify(s)
}

func (s UniversalBodyCmd) GoString() string {
	return s.String()
}

func (s *UniversalBodyCmd) SetBody(v string) *UniversalBodyCmd {
	s.Body = &v
	return s
}

func (s *UniversalBodyCmd) SetId(v int64) *UniversalBodyCmd {
	s.Id = &v
	return s
}

func (s *UniversalBodyCmd) SetModelName(v string) *UniversalBodyCmd {
	s.ModelName = &v
	return s
}

func (s *UniversalBodyCmd) SetOp(v string) *UniversalBodyCmd {
	s.Op = &v
	return s
}

func (s *UniversalBodyCmd) SetParseLongText(v bool) *UniversalBodyCmd {
	s.ParseLongText = &v
	return s
}

func (s *UniversalBodyCmd) SetPageSize(v int64) *UniversalBodyCmd {
	s.PageSize = &v
	return s
}

func (s *UniversalBodyCmd) SetPageIndex(v int64) *UniversalBodyCmd {
	s.PageIndex = &v
	return s
}

func (s *UniversalBodyCmd) SetCurIndex(v int64) *UniversalBodyCmd {
	s.CurIndex = &v
	return s
}

// 链路查询结果的关键字段取值集
type TraceQuerySummary struct {
	// local endpoint ip
	LocalIp []*string `json:"local_ip,omitempty" xml:"local_ip,omitempty" type:"Repeated"`
	// local endpoint service name
	LocalServiceName []*string `json:"local_service_name,omitempty" xml:"local_service_name,omitempty" type:"Repeated"`
	// remote endpoint ip
	RemoteIp []*string `json:"remote_ip,omitempty" xml:"remote_ip,omitempty" type:"Repeated"`
	// remote endpoint service name
	RemoteServiceName []*string `json:"remote_service_name,omitempty" xml:"remote_service_name,omitempty" type:"Repeated"`
	// 状态
	Status []*string `json:"status,omitempty" xml:"status,omitempty" type:"Repeated"`
}

func (s TraceQuerySummary) String() string {
	return tea.Prettify(s)
}

func (s TraceQuerySummary) GoString() string {
	return s.String()
}

func (s *TraceQuerySummary) SetLocalIp(v []*string) *TraceQuerySummary {
	s.LocalIp = v
	return s
}

func (s *TraceQuerySummary) SetLocalServiceName(v []*string) *TraceQuerySummary {
	s.LocalServiceName = v
	return s
}

func (s *TraceQuerySummary) SetRemoteIp(v []*string) *TraceQuerySummary {
	s.RemoteIp = v
	return s
}

func (s *TraceQuerySummary) SetRemoteServiceName(v []*string) *TraceQuerySummary {
	s.RemoteServiceName = v
	return s
}

func (s *TraceQuerySummary) SetStatus(v []*string) *TraceQuerySummary {
	s.Status = v
	return s
}

// FolderRequestCmd
type FolderRequestCmd struct {
	// custom_plugin_id
	CustomPluginId *int64 `json:"custom_plugin_id,omitempty" xml:"custom_plugin_id,omitempty" require:"true"`
	// folder_id
	FolderId *int64 `json:"folder_id,omitempty" xml:"folder_id,omitempty" require:"true"`
	// include_me
	IncludeMe *bool `json:"include_me,omitempty" xml:"include_me,omitempty" require:"true"`
	// include_plugin_name
	IncludePluginName *bool `json:"include_plugin_name,omitempty" xml:"include_plugin_name,omitempty" require:"true"`
}

func (s FolderRequestCmd) String() string {
	return tea.Prettify(s)
}

func (s FolderRequestCmd) GoString() string {
	return s.String()
}

func (s *FolderRequestCmd) SetCustomPluginId(v int64) *FolderRequestCmd {
	s.CustomPluginId = &v
	return s
}

func (s *FolderRequestCmd) SetFolderId(v int64) *FolderRequestCmd {
	s.FolderId = &v
	return s
}

func (s *FolderRequestCmd) SetIncludeMe(v bool) *FolderRequestCmd {
	s.IncludeMe = &v
	return s
}

func (s *FolderRequestCmd) SetIncludePluginName(v bool) *FolderRequestCmd {
	s.IncludePluginName = &v
	return s
}

// AlarmTypeStatsVOKeySet
type AlarmTypeStatsVOKeySet struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value *AlarmTypeStatsVO `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s AlarmTypeStatsVOKeySet) String() string {
	return tea.Prettify(s)
}

func (s AlarmTypeStatsVOKeySet) GoString() string {
	return s.String()
}

func (s *AlarmTypeStatsVOKeySet) SetKey(v string) *AlarmTypeStatsVOKeySet {
	s.Key = &v
	return s
}

func (s *AlarmTypeStatsVOKeySet) SetValue(v *AlarmTypeStatsVO) *AlarmTypeStatsVOKeySet {
	s.Value = v
	return s
}

// 钉钉机器人
type DingDingRobot struct {
	// 钉钉机器人名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 钉钉机器人token
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
	// 钉钉机器人ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// 是否全局有效
	ScopeGlobal *bool `json:"scope_global,omitempty" xml:"scope_global,omitempty"`
	// 订阅类型：0、当前workspace有效； 1、当前租户有效
	ValidScope *int64 `json:"valid_scope,omitempty" xml:"valid_scope,omitempty"`
	// 订阅告警规则数量
	SubscribeCount *int64 `json:"subscribe_count,omitempty" xml:"subscribe_count,omitempty"`
}

func (s DingDingRobot) String() string {
	return tea.Prettify(s)
}

func (s DingDingRobot) GoString() string {
	return s.String()
}

func (s *DingDingRobot) SetName(v string) *DingDingRobot {
	s.Name = &v
	return s
}

func (s *DingDingRobot) SetToken(v string) *DingDingRobot {
	s.Token = &v
	return s
}

func (s *DingDingRobot) SetId(v int64) *DingDingRobot {
	s.Id = &v
	return s
}

func (s *DingDingRobot) SetScopeGlobal(v bool) *DingDingRobot {
	s.ScopeGlobal = &v
	return s
}

func (s *DingDingRobot) SetValidScope(v int64) *DingDingRobot {
	s.ValidScope = &v
	return s
}

func (s *DingDingRobot) SetSubscribeCount(v int64) *DingDingRobot {
	s.SubscribeCount = &v
	return s
}

// agent实例信息
type AgentInstance struct {
	// agent版本
	Version *string `json:"version,omitempty" xml:"version,omitempty" require:"true"`
	// agent 采集对象的唯一标识符
	CollectId *string `json:"collect_id,omitempty" xml:"collect_id,omitempty" require:"true"`
	// app 名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// IP 地址
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty" require:"true"`
	// hostname 名称
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty"`
	// 租户 ID
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 工作空间 ID
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// agent 状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 容器/ECS
	DeployType *string `json:"deploy_type,omitempty" xml:"deploy_type,omitempty" require:"true"`
	// agent 附加信息
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 更新时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	// 是否开启告警标志
	Label *int64 `json:"label,omitempty" xml:"label,omitempty" require:"true"`
}

func (s AgentInstance) String() string {
	return tea.Prettify(s)
}

func (s AgentInstance) GoString() string {
	return s.String()
}

func (s *AgentInstance) SetVersion(v string) *AgentInstance {
	s.Version = &v
	return s
}

func (s *AgentInstance) SetCollectId(v string) *AgentInstance {
	s.CollectId = &v
	return s
}

func (s *AgentInstance) SetAppName(v string) *AgentInstance {
	s.AppName = &v
	return s
}

func (s *AgentInstance) SetIp(v string) *AgentInstance {
	s.Ip = &v
	return s
}

func (s *AgentInstance) SetHostname(v string) *AgentInstance {
	s.Hostname = &v
	return s
}

func (s *AgentInstance) SetTenantId(v int64) *AgentInstance {
	s.TenantId = &v
	return s
}

func (s *AgentInstance) SetWorkspaceId(v int64) *AgentInstance {
	s.WorkspaceId = &v
	return s
}

func (s *AgentInstance) SetStatus(v int64) *AgentInstance {
	s.Status = &v
	return s
}

func (s *AgentInstance) SetDeployType(v string) *AgentInstance {
	s.DeployType = &v
	return s
}

func (s *AgentInstance) SetExtraInfo(v string) *AgentInstance {
	s.ExtraInfo = &v
	return s
}

func (s *AgentInstance) SetGmtModified(v int64) *AgentInstance {
	s.GmtModified = &v
	return s
}

func (s *AgentInstance) SetLabel(v int64) *AgentInstance {
	s.Label = &v
	return s
}

// time series
type XMetricResponse struct {
	// timeseries
	Result []*XMetricData `json:"result,omitempty" xml:"result,omitempty" require:"true" type:"Repeated"`
	// result type
	ResultType *string `json:"result_type,omitempty" xml:"result_type,omitempty" require:"true"`
}

func (s XMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s XMetricResponse) GoString() string {
	return s.String()
}

func (s *XMetricResponse) SetResult(v []*XMetricData) *XMetricResponse {
	s.Result = v
	return s
}

func (s *XMetricResponse) SetResultType(v string) *XMetricResponse {
	s.ResultType = &v
	return s
}

// Agent版本策略
type AgentVersionStrategy struct {
	// agent 地址
	Url *string `json:"url,omitempty" xml:"url,omitempty" require:"true"`
	// agent 版本号
	Version *string `json:"version,omitempty" xml:"version,omitempty" require:"true"`
	// 0 容器，1经典
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 0 生效，1失效
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// agent 版本内容
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// 生效范围
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty" require:"true"`
	// 生效范围的唯一标识
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty" require:"true"`
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
}

func (s AgentVersionStrategy) String() string {
	return tea.Prettify(s)
}

func (s AgentVersionStrategy) GoString() string {
	return s.String()
}

func (s *AgentVersionStrategy) SetUrl(v string) *AgentVersionStrategy {
	s.Url = &v
	return s
}

func (s *AgentVersionStrategy) SetVersion(v string) *AgentVersionStrategy {
	s.Version = &v
	return s
}

func (s *AgentVersionStrategy) SetType(v int64) *AgentVersionStrategy {
	s.Type = &v
	return s
}

func (s *AgentVersionStrategy) SetStatus(v int64) *AgentVersionStrategy {
	s.Status = &v
	return s
}

func (s *AgentVersionStrategy) SetContent(v string) *AgentVersionStrategy {
	s.Content = &v
	return s
}

func (s *AgentVersionStrategy) SetScope(v string) *AgentVersionStrategy {
	s.Scope = &v
	return s
}

func (s *AgentVersionStrategy) SetScopeIdentity(v string) *AgentVersionStrategy {
	s.ScopeIdentity = &v
	return s
}

func (s *AgentVersionStrategy) SetGmtCreate(v int64) *AgentVersionStrategy {
	s.GmtCreate = &v
	return s
}

func (s *AgentVersionStrategy) SetGmtModified(v int64) *AgentVersionStrategy {
	s.GmtModified = &v
	return s
}

// 时间点 - 告警统计信息 KeySet
type AlarmCountInfoKeySet struct {
	// 键值 (时间戳字符串)
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 某一时刻对应的告警统计信息
	Value *AlarmCountInfo `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s AlarmCountInfoKeySet) String() string {
	return tea.Prettify(s)
}

func (s AlarmCountInfoKeySet) GoString() string {
	return s.String()
}

func (s *AlarmCountInfoKeySet) SetKey(v string) *AlarmCountInfoKeySet {
	s.Key = &v
	return s
}

func (s *AlarmCountInfoKeySet) SetValue(v *AlarmCountInfo) *AlarmCountInfoKeySet {
	s.Value = v
	return s
}

// CallErrorMessage
type CallErrorMessage struct {
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty" require:"true"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// cause
	Cause *string `json:"cause,omitempty" xml:"cause,omitempty"`
}

func (s CallErrorMessage) String() string {
	return tea.Prettify(s)
}

func (s CallErrorMessage) GoString() string {
	return s.String()
}

func (s *CallErrorMessage) SetErrorCode(v string) *CallErrorMessage {
	s.ErrorCode = &v
	return s
}

func (s *CallErrorMessage) SetMessage(v string) *CallErrorMessage {
	s.Message = &v
	return s
}

func (s *CallErrorMessage) SetCause(v string) *CallErrorMessage {
	s.Cause = &v
	return s
}

// AppStats
type AppStats struct {
	// app_list
	AppList []*string `json:"app_list,omitempty" xml:"app_list,omitempty" require:"true" type:"Repeated"`
	// page_query
	PageQuery *PageQuery `json:"page_query,omitempty" xml:"page_query,omitempty" require:"true"`
}

func (s AppStats) String() string {
	return tea.Prettify(s)
}

func (s AppStats) GoString() string {
	return s.String()
}

func (s *AppStats) SetAppList(v []*string) *AppStats {
	s.AppList = v
	return s
}

func (s *AppStats) SetPageQuery(v *PageQuery) *AppStats {
	s.PageQuery = v
	return s
}

// AlarmOverviewDTO
type AlarmOverviewDTO struct {
	// level1_alarm_count
	Level1AlarmCount *int64 `json:"level1_alarm_count,omitempty" xml:"level1_alarm_count,omitempty" require:"true"`
	// level2_alarm_count
	Level2AlarmCount *int64 `json:"level2_alarm_count,omitempty" xml:"level2_alarm_count,omitempty" require:"true"`
	// level3_alarm_count
	Level3AlarmCount *int64 `json:"level3_alarm_count,omitempty" xml:"level3_alarm_count,omitempty" require:"true"`
	// alarm_sub_count
	AlarmSubCount *int64 `json:"alarm_sub_count,omitempty" xml:"alarm_sub_count,omitempty" require:"true"`
	// alarm_pkg_count
	AlarmPkgCount *int64 `json:"alarm_pkg_count,omitempty" xml:"alarm_pkg_count,omitempty" require:"true"`
	// recent_alarms
	RecentAlarms []*AlarmHistoryDTO `json:"recent_alarms,omitempty" xml:"recent_alarms,omitempty" require:"true" type:"Repeated"`
}

func (s AlarmOverviewDTO) String() string {
	return tea.Prettify(s)
}

func (s AlarmOverviewDTO) GoString() string {
	return s.String()
}

func (s *AlarmOverviewDTO) SetLevel1AlarmCount(v int64) *AlarmOverviewDTO {
	s.Level1AlarmCount = &v
	return s
}

func (s *AlarmOverviewDTO) SetLevel2AlarmCount(v int64) *AlarmOverviewDTO {
	s.Level2AlarmCount = &v
	return s
}

func (s *AlarmOverviewDTO) SetLevel3AlarmCount(v int64) *AlarmOverviewDTO {
	s.Level3AlarmCount = &v
	return s
}

func (s *AlarmOverviewDTO) SetAlarmSubCount(v int64) *AlarmOverviewDTO {
	s.AlarmSubCount = &v
	return s
}

func (s *AlarmOverviewDTO) SetAlarmPkgCount(v int64) *AlarmOverviewDTO {
	s.AlarmPkgCount = &v
	return s
}

func (s *AlarmOverviewDTO) SetRecentAlarms(v []*AlarmHistoryDTO) *AlarmOverviewDTO {
	s.RecentAlarms = v
	return s
}

//
type XPrometheusData struct {
	//
	Metrics []*XExpression `json:"metrics,omitempty" xml:"metrics,omitempty" type:"Repeated"`
	//
	Query *XPrometheusQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s XPrometheusData) String() string {
	return tea.Prettify(s)
}

func (s XPrometheusData) GoString() string {
	return s.String()
}

func (s *XPrometheusData) SetMetrics(v []*XExpression) *XPrometheusData {
	s.Metrics = v
	return s
}

func (s *XPrometheusData) SetQuery(v *XPrometheusQuery) *XPrometheusData {
	s.Query = v
	return s
}

// RequestParams
type RequestParams struct {
	// req_type
	ReqType *string `json:"req_type,omitempty" xml:"req_type,omitempty" require:"true"`
	// condition
	Condition *Condition `json:"condition,omitempty" xml:"condition,omitempty" require:"true"`
	// dimCondition
	DimCondition *PontusTrendRequest `json:"dim_condition,omitempty" xml:"dim_condition,omitempty" require:"true"`
	// tenant
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty" require:"true"`
	// zones
	Zones *string `json:"zones,omitempty" xml:"zones,omitempty" require:"true"`
	// from_front
	FromFront *bool `json:"from_front,omitempty" xml:"from_front,omitempty" require:"true"`
	// fuzzy
	Fuzzy *bool `json:"fuzzy,omitempty" xml:"fuzzy,omitempty" require:"true"`
	// validKeyCount
	ValidKeyCount *int64 `json:"valid_key_count,omitempty" xml:"valid_key_count,omitempty" require:"true"`
	// can_switch
	CanSwitch *bool `json:"can_switch,omitempty" xml:"can_switch,omitempty" require:"true"`
}

func (s RequestParams) String() string {
	return tea.Prettify(s)
}

func (s RequestParams) GoString() string {
	return s.String()
}

func (s *RequestParams) SetReqType(v string) *RequestParams {
	s.ReqType = &v
	return s
}

func (s *RequestParams) SetCondition(v *Condition) *RequestParams {
	s.Condition = v
	return s
}

func (s *RequestParams) SetDimCondition(v *PontusTrendRequest) *RequestParams {
	s.DimCondition = v
	return s
}

func (s *RequestParams) SetTenant(v string) *RequestParams {
	s.Tenant = &v
	return s
}

func (s *RequestParams) SetZones(v string) *RequestParams {
	s.Zones = &v
	return s
}

func (s *RequestParams) SetFromFront(v bool) *RequestParams {
	s.FromFront = &v
	return s
}

func (s *RequestParams) SetFuzzy(v bool) *RequestParams {
	s.Fuzzy = &v
	return s
}

func (s *RequestParams) SetValidKeyCount(v int64) *RequestParams {
	s.ValidKeyCount = &v
	return s
}

func (s *RequestParams) SetCanSwitch(v bool) *RequestParams {
	s.CanSwitch = &v
	return s
}

// AlarmAppStats
type AlarmAppStats struct {
	// app
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
	// alarm_level
	AlarmLevel *int64 `json:"alarm_level,omitempty" xml:"alarm_level,omitempty" require:"true"`
	// count
	Count *int64 `json:"count,omitempty" xml:"count,omitempty" require:"true"`
	// stack_universal_table_id
	StackUniversalTableId *string `json:"stack_universal_table_id,omitempty" xml:"stack_universal_table_id,omitempty" require:"true"`
}

func (s AlarmAppStats) String() string {
	return tea.Prettify(s)
}

func (s AlarmAppStats) GoString() string {
	return s.String()
}

func (s *AlarmAppStats) SetApp(v string) *AlarmAppStats {
	s.App = &v
	return s
}

func (s *AlarmAppStats) SetAlarmLevel(v int64) *AlarmAppStats {
	s.AlarmLevel = &v
	return s
}

func (s *AlarmAppStats) SetCount(v int64) *AlarmAppStats {
	s.Count = &v
	return s
}

func (s *AlarmAppStats) SetStackUniversalTableId(v string) *AlarmAppStats {
	s.StackUniversalTableId = &v
	return s
}

// 实体拓扑边
type TraasEntityTopoEdge struct {
	// source_node
	SourceNode *TraasEntityTopoNode `json:"source_node,omitempty" xml:"source_node,omitempty" require:"true"`
	// target_node
	TargetNode *TraasEntityTopoNode `json:"target_node,omitempty" xml:"target_node,omitempty" require:"true"`
	// relation
	Relation *string `json:"relation,omitempty" xml:"relation,omitempty" require:"true"`
}

func (s TraasEntityTopoEdge) String() string {
	return tea.Prettify(s)
}

func (s TraasEntityTopoEdge) GoString() string {
	return s.String()
}

func (s *TraasEntityTopoEdge) SetSourceNode(v *TraasEntityTopoNode) *TraasEntityTopoEdge {
	s.SourceNode = v
	return s
}

func (s *TraasEntityTopoEdge) SetTargetNode(v *TraasEntityTopoNode) *TraasEntityTopoEdge {
	s.TargetNode = v
	return s
}

func (s *TraasEntityTopoEdge) SetRelation(v string) *TraasEntityTopoEdge {
	s.Relation = &v
	return s
}

// WebHook结构体
type AlarmWebHook struct {
	// 主键 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// url
	Url *string `json:"url,omitempty" xml:"url,omitempty" require:"true"`
	// method (POST, GET等)
	Method *string `json:"method,omitempty" xml:"method,omitempty" require:"true"`
	// headers
	Headers []*KeySet `json:"headers,omitempty" xml:"headers,omitempty" type:"Repeated"`
	// params
	Params []*KeySet `json:"params,omitempty" xml:"params,omitempty" type:"Repeated"`
	// config
	Config []*KeySet `json:"config,omitempty" xml:"config,omitempty" type:"Repeated"`
	// body_template
	BodyTemplate *string `json:"body_template,omitempty" xml:"body_template,omitempty"`
	// 是否该 scope 内全局
	ScopeGlobal *bool `json:"scope_global,omitempty" xml:"scope_global,omitempty"`
	// creator
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// modifier
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// gmtCreate
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	// gmtModified
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	// webhook订阅的规则数量
	SubscribeCount *int64 `json:"subscribe_count,omitempty" xml:"subscribe_count,omitempty"`
	// 当前租户有效还是当前workspace有效
	ValidScope *int64 `json:"valid_scope,omitempty" xml:"valid_scope,omitempty"`
}

func (s AlarmWebHook) String() string {
	return tea.Prettify(s)
}

func (s AlarmWebHook) GoString() string {
	return s.String()
}

func (s *AlarmWebHook) SetId(v int64) *AlarmWebHook {
	s.Id = &v
	return s
}

func (s *AlarmWebHook) SetName(v string) *AlarmWebHook {
	s.Name = &v
	return s
}

func (s *AlarmWebHook) SetUrl(v string) *AlarmWebHook {
	s.Url = &v
	return s
}

func (s *AlarmWebHook) SetMethod(v string) *AlarmWebHook {
	s.Method = &v
	return s
}

func (s *AlarmWebHook) SetHeaders(v []*KeySet) *AlarmWebHook {
	s.Headers = v
	return s
}

func (s *AlarmWebHook) SetParams(v []*KeySet) *AlarmWebHook {
	s.Params = v
	return s
}

func (s *AlarmWebHook) SetConfig(v []*KeySet) *AlarmWebHook {
	s.Config = v
	return s
}

func (s *AlarmWebHook) SetBodyTemplate(v string) *AlarmWebHook {
	s.BodyTemplate = &v
	return s
}

func (s *AlarmWebHook) SetScopeGlobal(v bool) *AlarmWebHook {
	s.ScopeGlobal = &v
	return s
}

func (s *AlarmWebHook) SetCreator(v string) *AlarmWebHook {
	s.Creator = &v
	return s
}

func (s *AlarmWebHook) SetModifier(v string) *AlarmWebHook {
	s.Modifier = &v
	return s
}

func (s *AlarmWebHook) SetGmtCreate(v int64) *AlarmWebHook {
	s.GmtCreate = &v
	return s
}

func (s *AlarmWebHook) SetGmtModified(v int64) *AlarmWebHook {
	s.GmtModified = &v
	return s
}

func (s *AlarmWebHook) SetSubscribeCount(v int64) *AlarmWebHook {
	s.SubscribeCount = &v
	return s
}

func (s *AlarmWebHook) SetValidScope(v int64) *AlarmWebHook {
	s.ValidScope = &v
	return s
}

// 总览页应用统计信息
type AppOverviewDTO struct {
	// 应用总数
	TotalAppCount *int64 `json:"total_app_count,omitempty" xml:"total_app_count,omitempty" require:"true"`
	// 正常运行应用数
	NormalAppCount *int64 `json:"normal_app_count,omitempty" xml:"normal_app_count,omitempty" require:"true"`
	// 告警应用数
	AlarmAppCount *int64 `json:"alarm_app_count,omitempty" xml:"alarm_app_count,omitempty" require:"true"`
	// 自定义监控配置数
	CustomPluginCount *int64 `json:"custom_plugin_count,omitempty" xml:"custom_plugin_count,omitempty" require:"true"`
	// 告警规则配置数
	AlarmRuleCount *int64 `json:"alarm_rule_count,omitempty" xml:"alarm_rule_count,omitempty" require:"true"`
	// 告警模板配置数
	AlarmTplCount *int64 `json:"alarm_tpl_count,omitempty" xml:"alarm_tpl_count,omitempty" require:"true"`
	// 日志路径数
	LogConfigCount *int64 `json:"log_config_count,omitempty" xml:"log_config_count,omitempty" require:"true"`
	// mem top排序应用
	MemTopApps []*AppTopItem `json:"mem_top_apps,omitempty" xml:"mem_top_apps,omitempty" require:"true" type:"Repeated"`
	// cpu top排序应用
	CpuTopApps []*AppTopItem `json:"cpu_top_apps,omitempty" xml:"cpu_top_apps,omitempty" require:"true" type:"Repeated"`
	// 磁盘 top排序应用
	DiskTopApps []*AppTopItem `json:"disk_top_apps,omitempty" xml:"disk_top_apps,omitempty" require:"true" type:"Repeated"`
	// 告警top排序应用
	AlarmTopApps []*AppTopItem `json:"alarm_top_apps,omitempty" xml:"alarm_top_apps,omitempty" type:"Repeated"`
	// error top排序应用
	ErrorTopApps []*AppTopItem `json:"error_top_apps,omitempty" xml:"error_top_apps,omitempty" type:"Repeated"`
}

func (s AppOverviewDTO) String() string {
	return tea.Prettify(s)
}

func (s AppOverviewDTO) GoString() string {
	return s.String()
}

func (s *AppOverviewDTO) SetTotalAppCount(v int64) *AppOverviewDTO {
	s.TotalAppCount = &v
	return s
}

func (s *AppOverviewDTO) SetNormalAppCount(v int64) *AppOverviewDTO {
	s.NormalAppCount = &v
	return s
}

func (s *AppOverviewDTO) SetAlarmAppCount(v int64) *AppOverviewDTO {
	s.AlarmAppCount = &v
	return s
}

func (s *AppOverviewDTO) SetCustomPluginCount(v int64) *AppOverviewDTO {
	s.CustomPluginCount = &v
	return s
}

func (s *AppOverviewDTO) SetAlarmRuleCount(v int64) *AppOverviewDTO {
	s.AlarmRuleCount = &v
	return s
}

func (s *AppOverviewDTO) SetAlarmTplCount(v int64) *AppOverviewDTO {
	s.AlarmTplCount = &v
	return s
}

func (s *AppOverviewDTO) SetLogConfigCount(v int64) *AppOverviewDTO {
	s.LogConfigCount = &v
	return s
}

func (s *AppOverviewDTO) SetMemTopApps(v []*AppTopItem) *AppOverviewDTO {
	s.MemTopApps = v
	return s
}

func (s *AppOverviewDTO) SetCpuTopApps(v []*AppTopItem) *AppOverviewDTO {
	s.CpuTopApps = v
	return s
}

func (s *AppOverviewDTO) SetDiskTopApps(v []*AppTopItem) *AppOverviewDTO {
	s.DiskTopApps = v
	return s
}

func (s *AppOverviewDTO) SetAlarmTopApps(v []*AppTopItem) *AppOverviewDTO {
	s.AlarmTopApps = v
	return s
}

func (s *AppOverviewDTO) SetErrorTopApps(v []*AppTopItem) *AppOverviewDTO {
	s.ErrorTopApps = v
	return s
}

// 权限
type AuthDO struct {
	// ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 登录名
	UserLoginName *string `json:"user_login_name,omitempty" xml:"user_login_name,omitempty" require:"true"`
	// 权限码
	Auth *string `json:"auth,omitempty" xml:"auth,omitempty" require:"true"`
	// 权限的资源类型
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	// 权限的资源ID (如果FOLDER或CUSTOM_PLUGIN，需要自行转成Number类型)
	ResourceId *string `json:"resource_id,omitempty" xml:"resource_id,omitempty" require:"true"`
}

func (s AuthDO) String() string {
	return tea.Prettify(s)
}

func (s AuthDO) GoString() string {
	return s.String()
}

func (s *AuthDO) SetId(v int64) *AuthDO {
	s.Id = &v
	return s
}

func (s *AuthDO) SetUserLoginName(v string) *AuthDO {
	s.UserLoginName = &v
	return s
}

func (s *AuthDO) SetAuth(v string) *AuthDO {
	s.Auth = &v
	return s
}

func (s *AuthDO) SetResourceType(v string) *AuthDO {
	s.ResourceType = &v
	return s
}

func (s *AuthDO) SetResourceId(v string) *AuthDO {
	s.ResourceId = &v
	return s
}

// 时间统计
type EventStat struct {
	// 告警时间
	AlarmTime *int64 `json:"alarm_time,omitempty" xml:"alarm_time,omitempty"`
	// 告警等级
	AlarmLevel *int64 `json:"alarm_level,omitempty" xml:"alarm_level,omitempty"`
	// 告警统计数
	Count *int64 `json:"count,omitempty" xml:"count,omitempty"`
}

func (s EventStat) String() string {
	return tea.Prettify(s)
}

func (s EventStat) GoString() string {
	return s.String()
}

func (s *EventStat) SetAlarmTime(v int64) *EventStat {
	s.AlarmTime = &v
	return s
}

func (s *EventStat) SetAlarmLevel(v int64) *EventStat {
	s.AlarmLevel = &v
	return s
}

func (s *EventStat) SetCount(v int64) *EventStat {
	s.Count = &v
	return s
}

// APP配置
type AppSetting struct {
	// 租户ID
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 工作空间ID
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// 配置信息
	Setting *string `json:"setting,omitempty" xml:"setting,omitempty"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 应用监控是否开启采集
	CollectEnable *bool `json:"collect_enable,omitempty" xml:"collect_enable,omitempty" require:"true"`
}

func (s AppSetting) String() string {
	return tea.Prettify(s)
}

func (s AppSetting) GoString() string {
	return s.String()
}

func (s *AppSetting) SetTenantId(v int64) *AppSetting {
	s.TenantId = &v
	return s
}

func (s *AppSetting) SetWorkspaceId(v int64) *AppSetting {
	s.WorkspaceId = &v
	return s
}

func (s *AppSetting) SetSetting(v string) *AppSetting {
	s.Setting = &v
	return s
}

func (s *AppSetting) SetAppName(v string) *AppSetting {
	s.AppName = &v
	return s
}

func (s *AppSetting) SetCollectEnable(v bool) *AppSetting {
	s.CollectEnable = &v
	return s
}

// 链路搜索页面的tags配置项
type TraceSpanSearchTagConfig struct {
	// 字段的key
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 中文标签
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 是否支持多选
	Multiple *bool `json:"multiple,omitempty" xml:"multiple,omitempty"`
	// 如果该数组非空, 那么表明用户只能从数组给定的值中进行选择, 否则意味着用户可以随意填写.
	Values []*string `json:"values,omitempty" xml:"values,omitempty" type:"Repeated"`
}

func (s TraceSpanSearchTagConfig) String() string {
	return tea.Prettify(s)
}

func (s TraceSpanSearchTagConfig) GoString() string {
	return s.String()
}

func (s *TraceSpanSearchTagConfig) SetKey(v string) *TraceSpanSearchTagConfig {
	s.Key = &v
	return s
}

func (s *TraceSpanSearchTagConfig) SetName(v string) *TraceSpanSearchTagConfig {
	s.Name = &v
	return s
}

func (s *TraceSpanSearchTagConfig) SetMultiple(v bool) *TraceSpanSearchTagConfig {
	s.Multiple = &v
	return s
}

func (s *TraceSpanSearchTagConfig) SetValues(v []*string) *TraceSpanSearchTagConfig {
	s.Values = v
	return s
}

//
type XSiteExport struct {
	//
	Dashboards []*XDashboardQuery `json:"dashboards,omitempty" xml:"dashboards,omitempty" type:"Repeated"`
	//
	Datasources []*XDatasourceQuery `json:"datasources,omitempty" xml:"datasources,omitempty" type:"Repeated"`
	// alert uuids
	Alerts []*string `json:"alerts,omitempty" xml:"alerts,omitempty" type:"Repeated"`
}

func (s XSiteExport) String() string {
	return tea.Prettify(s)
}

func (s XSiteExport) GoString() string {
	return s.String()
}

func (s *XSiteExport) SetDashboards(v []*XDashboardQuery) *XSiteExport {
	s.Dashboards = v
	return s
}

func (s *XSiteExport) SetDatasources(v []*XDatasourceQuery) *XSiteExport {
	s.Datasources = v
	return s
}

func (s *XSiteExport) SetAlerts(v []*string) *XSiteExport {
	s.Alerts = v
	return s
}

// 总览页配置信息统计
type ConfigOverviewDto struct {
	// 自定义监控配置数
	CustomPluginCount *int64 `json:"custom_plugin_count,omitempty" xml:"custom_plugin_count,omitempty" require:"true"`
	// 告警规则配置数
	AlarmRuleCount *int64 `json:"alarm_rule_count,omitempty" xml:"alarm_rule_count,omitempty" require:"true"`
	// 告警规则配置数
	AlarmTplCount *int64 `json:"alarm_tpl_count,omitempty" xml:"alarm_tpl_count,omitempty" require:"true"`
}

func (s ConfigOverviewDto) String() string {
	return tea.Prettify(s)
}

func (s ConfigOverviewDto) GoString() string {
	return s.String()
}

func (s *ConfigOverviewDto) SetCustomPluginCount(v int64) *ConfigOverviewDto {
	s.CustomPluginCount = &v
	return s
}

func (s *ConfigOverviewDto) SetAlarmRuleCount(v int64) *ConfigOverviewDto {
	s.AlarmRuleCount = &v
	return s
}

func (s *ConfigOverviewDto) SetAlarmTplCount(v int64) *ConfigOverviewDto {
	s.AlarmTplCount = &v
	return s
}

// 应用监控 - 单个应用
type MonitorApp struct {
	// 应用 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 应用展示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// 来源
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// 应用描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 拼接好的stack_universal_table_id
	StackUniversalTableId *string `json:"stack_universal_table_id,omitempty" xml:"stack_universal_table_id,omitempty"`
}

func (s MonitorApp) String() string {
	return tea.Prettify(s)
}

func (s MonitorApp) GoString() string {
	return s.String()
}

func (s *MonitorApp) SetId(v int64) *MonitorApp {
	s.Id = &v
	return s
}

func (s *MonitorApp) SetDisplayName(v string) *MonitorApp {
	s.DisplayName = &v
	return s
}

func (s *MonitorApp) SetSourceFrom(v string) *MonitorApp {
	s.SourceFrom = &v
	return s
}

func (s *MonitorApp) SetDescription(v string) *MonitorApp {
	s.Description = &v
	return s
}

func (s *MonitorApp) SetStackUniversalTableId(v string) *MonitorApp {
	s.StackUniversalTableId = &v
	return s
}

// 应用告警规则总数
type AppAlarmRuleCount struct {
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 应用告警规则总数
	AlarmRuleCount *int64 `json:"alarm_rule_count,omitempty" xml:"alarm_rule_count,omitempty" require:"true"`
}

func (s AppAlarmRuleCount) String() string {
	return tea.Prettify(s)
}

func (s AppAlarmRuleCount) GoString() string {
	return s.String()
}

func (s *AppAlarmRuleCount) SetAppName(v string) *AppAlarmRuleCount {
	s.AppName = &v
	return s
}

func (s *AppAlarmRuleCount) SetAlarmRuleCount(v int64) *AppAlarmRuleCount {
	s.AlarmRuleCount = &v
	return s
}

// 物理机信息
type MtmNc struct {
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// 主机名
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty" require:"true"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty" require:"true"`
	// sn
	Sn *string `json:"sn,omitempty" xml:"sn,omitempty" require:"true"`
	// 分组
	NodeGroup *string `json:"node_group,omitempty" xml:"node_group,omitempty" require:"true"`
	// cpu_num
	CpuNum *int64 `json:"cpu_num,omitempty" xml:"cpu_num,omitempty" require:"true"`
	// 内存 M
	MemMega *int64 `json:"mem_mega,omitempty" xml:"mem_mega,omitempty" require:"true"`
	// 磁盘 M
	DiskMega *int64 `json:"disk_mega,omitempty" xml:"disk_mega,omitempty" require:"true"`
	// 物理机房
	Idc *string `json:"idc,omitempty" xml:"idc,omitempty" require:"true"`
	// 状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 机型
	SmName *string `json:"sm_name,omitempty" xml:"sm_name,omitempty" require:"true"`
	// 采集ip
	CollectIp *string `json:"collect_ip,omitempty" xml:"collect_ip,omitempty" require:"true"`
	// idc 机房
	IdcName *string `json:"idc_name,omitempty" xml:"idc_name,omitempty" require:"true"`
	// sigma 集群
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
}

func (s MtmNc) String() string {
	return tea.Prettify(s)
}

func (s MtmNc) GoString() string {
	return s.String()
}

func (s *MtmNc) SetId(v int64) *MtmNc {
	s.Id = &v
	return s
}

func (s *MtmNc) SetGmtCreate(v int64) *MtmNc {
	s.GmtCreate = &v
	return s
}

func (s *MtmNc) SetGmtModified(v int64) *MtmNc {
	s.GmtModified = &v
	return s
}

func (s *MtmNc) SetHostname(v string) *MtmNc {
	s.Hostname = &v
	return s
}

func (s *MtmNc) SetIp(v string) *MtmNc {
	s.Ip = &v
	return s
}

func (s *MtmNc) SetSn(v string) *MtmNc {
	s.Sn = &v
	return s
}

func (s *MtmNc) SetNodeGroup(v string) *MtmNc {
	s.NodeGroup = &v
	return s
}

func (s *MtmNc) SetCpuNum(v int64) *MtmNc {
	s.CpuNum = &v
	return s
}

func (s *MtmNc) SetMemMega(v int64) *MtmNc {
	s.MemMega = &v
	return s
}

func (s *MtmNc) SetDiskMega(v int64) *MtmNc {
	s.DiskMega = &v
	return s
}

func (s *MtmNc) SetIdc(v string) *MtmNc {
	s.Idc = &v
	return s
}

func (s *MtmNc) SetStatus(v string) *MtmNc {
	s.Status = &v
	return s
}

func (s *MtmNc) SetSmName(v string) *MtmNc {
	s.SmName = &v
	return s
}

func (s *MtmNc) SetCollectIp(v string) *MtmNc {
	s.CollectIp = &v
	return s
}

func (s *MtmNc) SetIdcName(v string) *MtmNc {
	s.IdcName = &v
	return s
}

func (s *MtmNc) SetCluster(v string) *MtmNc {
	s.Cluster = &v
	return s
}

// metric query
type XMetricQuery struct {
	//
	Timeout *int64 `json:"timeout,omitempty" xml:"timeout,omitempty"`
	// start timestamp
	Start *int64 `json:"start,omitempty" xml:"start,omitempty"`
	// end timestamp
	End *int64 `json:"end,omitempty" xml:"end,omitempty"`
	// value step
	Step *int64 `json:"step,omitempty" xml:"step,omitempty"`
	// instant time
	Time *int64 `json:"time,omitempty" xml:"time,omitempty"`
	// query clause
	Query *string `json:"query,omitempty" xml:"query,omitempty"`
	//
	QueryMetadatas []*XMetricQueryMetadata `json:"query_metadatas,omitempty" xml:"query_metadatas,omitempty" type:"Repeated"`
	//
	DatasourceUuid *string `json:"datasource_uuid,omitempty" xml:"datasource_uuid,omitempty"`
	//
	MetricName *string `json:"metric_name,omitempty" xml:"metric_name,omitempty"`
	//
	TableName *string `json:"table_name,omitempty" xml:"table_name,omitempty"`
	//
	Conditions []*XCondition `json:"conditions,omitempty" xml:"conditions,omitempty" type:"Repeated"`
	//
	Tag *string `json:"tag,omitempty" xml:"tag,omitempty"`
	//
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	//
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	//
	DatasourceType *string `json:"datasource_type,omitempty" xml:"datasource_type,omitempty"`
	//
	NullValueType *string `json:"null_value_type,omitempty" xml:"null_value_type,omitempty"`
}

func (s XMetricQuery) String() string {
	return tea.Prettify(s)
}

func (s XMetricQuery) GoString() string {
	return s.String()
}

func (s *XMetricQuery) SetTimeout(v int64) *XMetricQuery {
	s.Timeout = &v
	return s
}

func (s *XMetricQuery) SetStart(v int64) *XMetricQuery {
	s.Start = &v
	return s
}

func (s *XMetricQuery) SetEnd(v int64) *XMetricQuery {
	s.End = &v
	return s
}

func (s *XMetricQuery) SetStep(v int64) *XMetricQuery {
	s.Step = &v
	return s
}

func (s *XMetricQuery) SetTime(v int64) *XMetricQuery {
	s.Time = &v
	return s
}

func (s *XMetricQuery) SetQuery(v string) *XMetricQuery {
	s.Query = &v
	return s
}

func (s *XMetricQuery) SetQueryMetadatas(v []*XMetricQueryMetadata) *XMetricQuery {
	s.QueryMetadatas = v
	return s
}

func (s *XMetricQuery) SetDatasourceUuid(v string) *XMetricQuery {
	s.DatasourceUuid = &v
	return s
}

func (s *XMetricQuery) SetMetricName(v string) *XMetricQuery {
	s.MetricName = &v
	return s
}

func (s *XMetricQuery) SetTableName(v string) *XMetricQuery {
	s.TableName = &v
	return s
}

func (s *XMetricQuery) SetConditions(v []*XCondition) *XMetricQuery {
	s.Conditions = v
	return s
}

func (s *XMetricQuery) SetTag(v string) *XMetricQuery {
	s.Tag = &v
	return s
}

func (s *XMetricQuery) SetTenantId(v int64) *XMetricQuery {
	s.TenantId = &v
	return s
}

func (s *XMetricQuery) SetWorkspaceId(v int64) *XMetricQuery {
	s.WorkspaceId = &v
	return s
}

func (s *XMetricQuery) SetDatasourceType(v string) *XMetricQuery {
	s.DatasourceType = &v
	return s
}

func (s *XMetricQuery) SetNullValueType(v string) *XMetricQuery {
	s.NullValueType = &v
	return s
}

// 统一告警规则模板
type UnifiedAlarmTplVO struct {
	// 主键
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// 模板名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 用于区分规则模板和消息模板
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// 规则配置
	RuleConfig *string `json:"rule_config,omitempty" xml:"rule_config,omitempty"`
	// 告警等级
	Level *int64 `json:"level,omitempty" xml:"level,omitempty"`
	// 检测频率
	Step *int64 `json:"step,omitempty" xml:"step,omitempty"`
	// 触发周期
	PendingHit *int64 `json:"pending_hit,omitempty" xml:"pending_hit,omitempty"`
	// 恢复周期
	RecoveredHit *int64 `json:"recovered_hit,omitempty" xml:"recovered_hit,omitempty"`
	// 静默时间
	SilenceTime *int64 `json:"silence_time,omitempty" xml:"silence_time,omitempty"`
	// 时区
	TimeZone *string `json:"time_zone,omitempty" xml:"time_zone,omitempty"`
	// 应急处理人
	Emergency *string `json:"emergency,omitempty" xml:"emergency,omitempty"`
	// 应急处理链接
	EmergencyUrl *string `json:"emergency_url,omitempty" xml:"emergency_url,omitempty"`
	// 无数据告警 这是个开关
	AlarmEmpty *int64 `json:"alarm_empty,omitempty" xml:"alarm_empty,omitempty"`
	// 告警触发时通知 开关
	NotifyFiring *int64 `json:"notify_firing,omitempty" xml:"notify_firing,omitempty"`
	// 告警恢复时通知 开关
	NotifyRecovered *int64 `json:"notify_recovered,omitempty" xml:"notify_recovered,omitempty"`
	// 告警无数据时通知 开关
	NotifyEmpty *int64 `json:"notify_empty,omitempty" xml:"notify_empty,omitempty"`
	// 通知渠道
	Channels *string `json:"channels,omitempty" xml:"channels,omitempty"`
	// 通知模板id
	NotifyTplId *int64 `json:"notify_tpl_id,omitempty" xml:"notify_tpl_id,omitempty"`
	// 通知时间
	NotifyTimeFilter *string `json:"notify_time_filter,omitempty" xml:"notify_time_filter,omitempty"`
	// 生效范围
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 如scope为租户 则值为tenant_id
	ScopeIdentity *int64 `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// 订阅关系的对象
	AlarmSub *string `json:"alarm_sub,omitempty" xml:"alarm_sub,omitempty"`
	// 租户id
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 工作空间id
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// 创建人
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// 修改人
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s UnifiedAlarmTplVO) String() string {
	return tea.Prettify(s)
}

func (s UnifiedAlarmTplVO) GoString() string {
	return s.String()
}

func (s *UnifiedAlarmTplVO) SetId(v int64) *UnifiedAlarmTplVO {
	s.Id = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetName(v string) *UnifiedAlarmTplVO {
	s.Name = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetCategory(v string) *UnifiedAlarmTplVO {
	s.Category = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetRuleConfig(v string) *UnifiedAlarmTplVO {
	s.RuleConfig = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetLevel(v int64) *UnifiedAlarmTplVO {
	s.Level = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetStep(v int64) *UnifiedAlarmTplVO {
	s.Step = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetPendingHit(v int64) *UnifiedAlarmTplVO {
	s.PendingHit = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetRecoveredHit(v int64) *UnifiedAlarmTplVO {
	s.RecoveredHit = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetSilenceTime(v int64) *UnifiedAlarmTplVO {
	s.SilenceTime = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetTimeZone(v string) *UnifiedAlarmTplVO {
	s.TimeZone = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetEmergency(v string) *UnifiedAlarmTplVO {
	s.Emergency = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetEmergencyUrl(v string) *UnifiedAlarmTplVO {
	s.EmergencyUrl = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetAlarmEmpty(v int64) *UnifiedAlarmTplVO {
	s.AlarmEmpty = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetNotifyFiring(v int64) *UnifiedAlarmTplVO {
	s.NotifyFiring = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetNotifyRecovered(v int64) *UnifiedAlarmTplVO {
	s.NotifyRecovered = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetNotifyEmpty(v int64) *UnifiedAlarmTplVO {
	s.NotifyEmpty = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetChannels(v string) *UnifiedAlarmTplVO {
	s.Channels = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetNotifyTplId(v int64) *UnifiedAlarmTplVO {
	s.NotifyTplId = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetNotifyTimeFilter(v string) *UnifiedAlarmTplVO {
	s.NotifyTimeFilter = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetScope(v string) *UnifiedAlarmTplVO {
	s.Scope = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetScopeIdentity(v int64) *UnifiedAlarmTplVO {
	s.ScopeIdentity = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetAlarmSub(v string) *UnifiedAlarmTplVO {
	s.AlarmSub = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetTenantId(v int64) *UnifiedAlarmTplVO {
	s.TenantId = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetWorkspaceId(v int64) *UnifiedAlarmTplVO {
	s.WorkspaceId = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetCreator(v string) *UnifiedAlarmTplVO {
	s.Creator = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetModifier(v string) *UnifiedAlarmTplVO {
	s.Modifier = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetGmtCreate(v string) *UnifiedAlarmTplVO {
	s.GmtCreate = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetGmtModified(v string) *UnifiedAlarmTplVO {
	s.GmtModified = &v
	return s
}

func (s *UnifiedAlarmTplVO) SetStatus(v int64) *UnifiedAlarmTplVO {
	s.Status = &v
	return s
}

// TraasCellDto
type TraasCellDto struct {
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// tenant_name
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty" require:"true"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty" require:"true"`
	// workspace_uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty" require:"true"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// zone_uuid
	ZoneUuid *string `json:"zone_uuid,omitempty" xml:"zone_uuid,omitempty" require:"true"`
	// zone_name
	ZoneName *string `json:"zone_name,omitempty" xml:"zone_name,omitempty" require:"true"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty" require:"true"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty" require:"true"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s TraasCellDto) String() string {
	return tea.Prettify(s)
}

func (s TraasCellDto) GoString() string {
	return s.String()
}

func (s *TraasCellDto) SetUuid(v string) *TraasCellDto {
	s.Uuid = &v
	return s
}

func (s *TraasCellDto) SetName(v string) *TraasCellDto {
	s.Name = &v
	return s
}

func (s *TraasCellDto) SetDisplayName(v string) *TraasCellDto {
	s.DisplayName = &v
	return s
}

func (s *TraasCellDto) SetTenantUuid(v string) *TraasCellDto {
	s.TenantUuid = &v
	return s
}

func (s *TraasCellDto) SetTenantName(v string) *TraasCellDto {
	s.TenantName = &v
	return s
}

func (s *TraasCellDto) SetWorkspaceUuid(v string) *TraasCellDto {
	s.WorkspaceUuid = &v
	return s
}

func (s *TraasCellDto) SetWorkspaceName(v string) *TraasCellDto {
	s.WorkspaceName = &v
	return s
}

func (s *TraasCellDto) SetZoneUuid(v string) *TraasCellDto {
	s.ZoneUuid = &v
	return s
}

func (s *TraasCellDto) SetZoneName(v string) *TraasCellDto {
	s.ZoneName = &v
	return s
}

func (s *TraasCellDto) SetOutsideId(v string) *TraasCellDto {
	s.OutsideId = &v
	return s
}

func (s *TraasCellDto) SetSourceFrom(v string) *TraasCellDto {
	s.SourceFrom = &v
	return s
}

func (s *TraasCellDto) SetExtension(v string) *TraasCellDto {
	s.Extension = &v
	return s
}

func (s *TraasCellDto) SetGmtCreate(v string) *TraasCellDto {
	s.GmtCreate = &v
	return s
}

func (s *TraasCellDto) SetGmtModified(v string) *TraasCellDto {
	s.GmtModified = &v
	return s
}

// TraasAppServerDto
type TraasAppServerDto struct {
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// hostname
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty" require:"true"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty" require:"true"`
	// collect_id
	CollectId *string `json:"collect_id,omitempty" xml:"collect_id,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// workspace_uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// cell_uuid
	CellUuid *string `json:"cell_uuid,omitempty" xml:"cell_uuid,omitempty"`
	// zone_uuid
	ZoneUuid *string `json:"zone_uuid,omitempty" xml:"zone_uuid,omitempty"`
	// app_uuid
	AppUuid *string `json:"app_uuid,omitempty" xml:"app_uuid,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// app_service_uuid
	AppServiceUuid *string `json:"app_service_uuid,omitempty" xml:"app_service_uuid,omitempty"`
	// vm_uuid
	VmUuid *string `json:"vm_uuid,omitempty" xml:"vm_uuid,omitempty"`
	// pod_uuid
	PodUuid *string `json:"pod_uuid,omitempty" xml:"pod_uuid,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// status
	Status *bool `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// host_ip
	HostIp *string `json:"host_ip,omitempty" xml:"host_ip,omitempty" require:"true"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s TraasAppServerDto) String() string {
	return tea.Prettify(s)
}

func (s TraasAppServerDto) GoString() string {
	return s.String()
}

func (s *TraasAppServerDto) SetUuid(v string) *TraasAppServerDto {
	s.Uuid = &v
	return s
}

func (s *TraasAppServerDto) SetHostname(v string) *TraasAppServerDto {
	s.Hostname = &v
	return s
}

func (s *TraasAppServerDto) SetIp(v string) *TraasAppServerDto {
	s.Ip = &v
	return s
}

func (s *TraasAppServerDto) SetCollectId(v string) *TraasAppServerDto {
	s.CollectId = &v
	return s
}

func (s *TraasAppServerDto) SetTenantUuid(v string) *TraasAppServerDto {
	s.TenantUuid = &v
	return s
}

func (s *TraasAppServerDto) SetTenantName(v string) *TraasAppServerDto {
	s.TenantName = &v
	return s
}

func (s *TraasAppServerDto) SetWorkspaceUuid(v string) *TraasAppServerDto {
	s.WorkspaceUuid = &v
	return s
}

func (s *TraasAppServerDto) SetWorkspaceName(v string) *TraasAppServerDto {
	s.WorkspaceName = &v
	return s
}

func (s *TraasAppServerDto) SetCellUuid(v string) *TraasAppServerDto {
	s.CellUuid = &v
	return s
}

func (s *TraasAppServerDto) SetZoneUuid(v string) *TraasAppServerDto {
	s.ZoneUuid = &v
	return s
}

func (s *TraasAppServerDto) SetAppUuid(v string) *TraasAppServerDto {
	s.AppUuid = &v
	return s
}

func (s *TraasAppServerDto) SetAppName(v string) *TraasAppServerDto {
	s.AppName = &v
	return s
}

func (s *TraasAppServerDto) SetAppServiceUuid(v string) *TraasAppServerDto {
	s.AppServiceUuid = &v
	return s
}

func (s *TraasAppServerDto) SetVmUuid(v string) *TraasAppServerDto {
	s.VmUuid = &v
	return s
}

func (s *TraasAppServerDto) SetPodUuid(v string) *TraasAppServerDto {
	s.PodUuid = &v
	return s
}

func (s *TraasAppServerDto) SetOutsideId(v string) *TraasAppServerDto {
	s.OutsideId = &v
	return s
}

func (s *TraasAppServerDto) SetSourceFrom(v string) *TraasAppServerDto {
	s.SourceFrom = &v
	return s
}

func (s *TraasAppServerDto) SetExtension(v string) *TraasAppServerDto {
	s.Extension = &v
	return s
}

func (s *TraasAppServerDto) SetStatus(v bool) *TraasAppServerDto {
	s.Status = &v
	return s
}

func (s *TraasAppServerDto) SetHostIp(v string) *TraasAppServerDto {
	s.HostIp = &v
	return s
}

func (s *TraasAppServerDto) SetGmtCreate(v string) *TraasAppServerDto {
	s.GmtCreate = &v
	return s
}

func (s *TraasAppServerDto) SetGmtModified(v string) *TraasAppServerDto {
	s.GmtModified = &v
	return s
}

// 指标
type UnifiedAlarmMetric struct {
	// 指标
	Metric *string `json:"metric,omitempty" xml:"metric,omitempty" require:"true"`
	// 指标数据
	Data []*MetricData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s UnifiedAlarmMetric) String() string {
	return tea.Prettify(s)
}

func (s UnifiedAlarmMetric) GoString() string {
	return s.String()
}

func (s *UnifiedAlarmMetric) SetMetric(v string) *UnifiedAlarmMetric {
	s.Metric = &v
	return s
}

func (s *UnifiedAlarmMetric) SetData(v []*MetricData) *UnifiedAlarmMetric {
	s.Data = v
	return s
}

// 用户操作记录
type UserOplogDO struct {
	// 操作记录ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 表名
	TableName *string `json:"table_name,omitempty" xml:"table_name,omitempty" require:"true"`
	// 表实体对应ID
	TableEntityId *int64 `json:"table_entity_id,omitempty" xml:"table_entity_id,omitempty" require:"true"`
	// 操作类型(可以是CREATE、UPDATE、DELETE)
	OpType *string `json:"op_type,omitempty" xml:"op_type,omitempty" require:"true"`
	// 操作时间 (直接取日志创建时间)
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 操作人
	Creater *string `json:"creater,omitempty" xml:"creater,omitempty" require:"true"`
	// tableName+table_entity_id，方便查询
	CombineQuery *string `json:"combine_query,omitempty" xml:"combine_query,omitempty" require:"true"`
	// 实体类型
	EntityType *string `json:"entity_type,omitempty" xml:"entity_type,omitempty"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 操作前的内容 (JSON String)
	OpBeforeContext *string `json:"op_before_context,omitempty" xml:"op_before_context,omitempty"`
	// 操作后的内容 (JSON String)
	OpAfterContext *string `json:"op_after_context,omitempty" xml:"op_after_context,omitempty"`
}

func (s UserOplogDO) String() string {
	return tea.Prettify(s)
}

func (s UserOplogDO) GoString() string {
	return s.String()
}

func (s *UserOplogDO) SetId(v int64) *UserOplogDO {
	s.Id = &v
	return s
}

func (s *UserOplogDO) SetTableName(v string) *UserOplogDO {
	s.TableName = &v
	return s
}

func (s *UserOplogDO) SetTableEntityId(v int64) *UserOplogDO {
	s.TableEntityId = &v
	return s
}

func (s *UserOplogDO) SetOpType(v string) *UserOplogDO {
	s.OpType = &v
	return s
}

func (s *UserOplogDO) SetGmtCreate(v int64) *UserOplogDO {
	s.GmtCreate = &v
	return s
}

func (s *UserOplogDO) SetCreater(v string) *UserOplogDO {
	s.Creater = &v
	return s
}

func (s *UserOplogDO) SetCombineQuery(v string) *UserOplogDO {
	s.CombineQuery = &v
	return s
}

func (s *UserOplogDO) SetEntityType(v string) *UserOplogDO {
	s.EntityType = &v
	return s
}

func (s *UserOplogDO) SetName(v string) *UserOplogDO {
	s.Name = &v
	return s
}

func (s *UserOplogDO) SetOpBeforeContext(v string) *UserOplogDO {
	s.OpBeforeContext = &v
	return s
}

func (s *UserOplogDO) SetOpAfterContext(v string) *UserOplogDO {
	s.OpAfterContext = &v
	return s
}

// LongKeySet
type LongKeySet struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value *int64 `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s LongKeySet) String() string {
	return tea.Prettify(s)
}

func (s LongKeySet) GoString() string {
	return s.String()
}

func (s *LongKeySet) SetKey(v string) *LongKeySet {
	s.Key = &v
	return s
}

func (s *LongKeySet) SetValue(v int64) *LongKeySet {
	s.Value = &v
	return s
}

// AppAlarmStats
type AppAlarmStats struct {
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// count
	Count *int64 `json:"count,omitempty" xml:"count,omitempty" require:"true"`
}

func (s AppAlarmStats) String() string {
	return tea.Prettify(s)
}

func (s AppAlarmStats) GoString() string {
	return s.String()
}

func (s *AppAlarmStats) SetAppName(v string) *AppAlarmStats {
	s.AppName = &v
	return s
}

func (s *AppAlarmStats) SetCount(v int64) *AppAlarmStats {
	s.Count = &v
	return s
}

// TokenConfig
type TokenConfig struct {
	// token
	Token *string `json:"token,omitempty" xml:"token,omitempty"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	// last_editor
	LastEditor *string `json:"last_editor,omitempty" xml:"last_editor,omitempty"`
}

func (s TokenConfig) String() string {
	return tea.Prettify(s)
}

func (s TokenConfig) GoString() string {
	return s.String()
}

func (s *TokenConfig) SetToken(v string) *TokenConfig {
	s.Token = &v
	return s
}

func (s *TokenConfig) SetGmtCreate(v string) *TokenConfig {
	s.GmtCreate = &v
	return s
}

func (s *TokenConfig) SetGmtModified(v string) *TokenConfig {
	s.GmtModified = &v
	return s
}

func (s *TokenConfig) SetLastEditor(v string) *TokenConfig {
	s.LastEditor = &v
	return s
}

// 监控告警传输对象
type AlarmSubDTO struct {
	// ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 告警展示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// 修改人
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// 告警订阅类型(folder、customplugin)
	SubscriptionType *string `json:"subscription_type,omitempty" xml:"subscription_type,omitempty" require:"true"`
	// 通知组列表
	UserGroups []*UserGroup `json:"user_groups,omitempty" xml:"user_groups,omitempty" type:"Repeated"`
	// 联系人登录名数组
	UserLoginNames []*string `json:"user_login_names,omitempty" xml:"user_login_names,omitempty" type:"Repeated"`
}

func (s AlarmSubDTO) String() string {
	return tea.Prettify(s)
}

func (s AlarmSubDTO) GoString() string {
	return s.String()
}

func (s *AlarmSubDTO) SetId(v int64) *AlarmSubDTO {
	s.Id = &v
	return s
}

func (s *AlarmSubDTO) SetDisplayName(v string) *AlarmSubDTO {
	s.DisplayName = &v
	return s
}

func (s *AlarmSubDTO) SetModifier(v string) *AlarmSubDTO {
	s.Modifier = &v
	return s
}

func (s *AlarmSubDTO) SetGmtModified(v int64) *AlarmSubDTO {
	s.GmtModified = &v
	return s
}

func (s *AlarmSubDTO) SetSubscriptionType(v string) *AlarmSubDTO {
	s.SubscriptionType = &v
	return s
}

func (s *AlarmSubDTO) SetUserGroups(v []*UserGroup) *AlarmSubDTO {
	s.UserGroups = v
	return s
}

func (s *AlarmSubDTO) SetUserLoginNames(v []*string) *AlarmSubDTO {
	s.UserLoginNames = v
	return s
}

// 拓扑节点
type TopologyNode struct {
	// 应用名
	App *string `json:"app,omitempty" xml:"app,omitempty"`
	// 节点类型: APP DB MQ CACHE
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 节点id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s TopologyNode) String() string {
	return tea.Prettify(s)
}

func (s TopologyNode) GoString() string {
	return s.String()
}

func (s *TopologyNode) SetApp(v string) *TopologyNode {
	s.App = &v
	return s
}

func (s *TopologyNode) SetType(v string) *TopologyNode {
	s.Type = &v
	return s
}

func (s *TopologyNode) SetId(v string) *TopologyNode {
	s.Id = &v
	return s
}

//
type XSiteExportData struct {
	//
	Dashboards []*XDashboardCRULResponseCURequest `json:"dashboards,omitempty" xml:"dashboards,omitempty" type:"Repeated"`
	//
	Datasources []*XDatasourceCRULResponseCURequest `json:"datasources,omitempty" xml:"datasources,omitempty" type:"Repeated"`
	//
	Alerts []*UnifiedAlarmRuleVO `json:"alerts,omitempty" xml:"alerts,omitempty" type:"Repeated"`
	//
	Stats *XSiteExportStats `json:"stats,omitempty" xml:"stats,omitempty"`
	// 自定义告警的BASE64编码
	AlarmRulesV2Custom *string `json:"alarm_rules_v2_custom,omitempty" xml:"alarm_rules_v2_custom,omitempty"`
}

func (s XSiteExportData) String() string {
	return tea.Prettify(s)
}

func (s XSiteExportData) GoString() string {
	return s.String()
}

func (s *XSiteExportData) SetDashboards(v []*XDashboardCRULResponseCURequest) *XSiteExportData {
	s.Dashboards = v
	return s
}

func (s *XSiteExportData) SetDatasources(v []*XDatasourceCRULResponseCURequest) *XSiteExportData {
	s.Datasources = v
	return s
}

func (s *XSiteExportData) SetAlerts(v []*UnifiedAlarmRuleVO) *XSiteExportData {
	s.Alerts = v
	return s
}

func (s *XSiteExportData) SetStats(v *XSiteExportStats) *XSiteExportData {
	s.Stats = v
	return s
}

func (s *XSiteExportData) SetAlarmRulesV2Custom(v string) *XSiteExportData {
	s.AlarmRulesV2Custom = &v
	return s
}

// AlarmHistoryListKeySetMap
type AlarmHistoryListKeySetMap struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Entity []*AlarmHistoryListKeySet `json:"entity,omitempty" xml:"entity,omitempty" require:"true" type:"Repeated"`
}

func (s AlarmHistoryListKeySetMap) String() string {
	return tea.Prettify(s)
}

func (s AlarmHistoryListKeySetMap) GoString() string {
	return s.String()
}

func (s *AlarmHistoryListKeySetMap) SetKey(v string) *AlarmHistoryListKeySetMap {
	s.Key = &v
	return s
}

func (s *AlarmHistoryListKeySetMap) SetEntity(v []*AlarmHistoryListKeySet) *AlarmHistoryListKeySetMap {
	s.Entity = v
	return s
}

// 主机元数据
type TraasHostMachineDto struct {
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// hostname
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty" require:"true"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty" require:"true"`
	// collect_ip
	CollectIp *string `json:"collect_ip,omitempty" xml:"collect_ip,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// workspace_uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// zone_uuid
	ZoneUuid *string `json:"zone_uuid,omitempty" xml:"zone_uuid,omitempty"`
	// zone_name
	ZoneName *string `json:"zone_name,omitempty" xml:"zone_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
}

func (s TraasHostMachineDto) String() string {
	return tea.Prettify(s)
}

func (s TraasHostMachineDto) GoString() string {
	return s.String()
}

func (s *TraasHostMachineDto) SetUuid(v string) *TraasHostMachineDto {
	s.Uuid = &v
	return s
}

func (s *TraasHostMachineDto) SetHostname(v string) *TraasHostMachineDto {
	s.Hostname = &v
	return s
}

func (s *TraasHostMachineDto) SetIp(v string) *TraasHostMachineDto {
	s.Ip = &v
	return s
}

func (s *TraasHostMachineDto) SetCollectIp(v string) *TraasHostMachineDto {
	s.CollectIp = &v
	return s
}

func (s *TraasHostMachineDto) SetTenantUuid(v string) *TraasHostMachineDto {
	s.TenantUuid = &v
	return s
}

func (s *TraasHostMachineDto) SetTenantName(v string) *TraasHostMachineDto {
	s.TenantName = &v
	return s
}

func (s *TraasHostMachineDto) SetWorkspaceUuid(v string) *TraasHostMachineDto {
	s.WorkspaceUuid = &v
	return s
}

func (s *TraasHostMachineDto) SetWorkspaceName(v string) *TraasHostMachineDto {
	s.WorkspaceName = &v
	return s
}

func (s *TraasHostMachineDto) SetZoneUuid(v string) *TraasHostMachineDto {
	s.ZoneUuid = &v
	return s
}

func (s *TraasHostMachineDto) SetZoneName(v string) *TraasHostMachineDto {
	s.ZoneName = &v
	return s
}

func (s *TraasHostMachineDto) SetOutsideId(v string) *TraasHostMachineDto {
	s.OutsideId = &v
	return s
}

func (s *TraasHostMachineDto) SetSourceFrom(v string) *TraasHostMachineDto {
	s.SourceFrom = &v
	return s
}

func (s *TraasHostMachineDto) SetExtension(v string) *TraasHostMachineDto {
	s.Extension = &v
	return s
}

func (s *TraasHostMachineDto) SetGmtCreate(v string) *TraasHostMachineDto {
	s.GmtCreate = &v
	return s
}

func (s *TraasHostMachineDto) SetGmtModified(v string) *TraasHostMachineDto {
	s.GmtModified = &v
	return s
}

// drm 推送配置地址
type SiteWithDrm struct {
	// 站点名称
	SiteName *string `json:"site_name,omitempty" xml:"site_name,omitempty" require:"true"`
	// 端点
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty" require:"true"`
	// ldc
	Ldcs []*string `json:"ldcs,omitempty" xml:"ldcs,omitempty" require:"true" type:"Repeated"`
}

func (s SiteWithDrm) String() string {
	return tea.Prettify(s)
}

func (s SiteWithDrm) GoString() string {
	return s.String()
}

func (s *SiteWithDrm) SetSiteName(v string) *SiteWithDrm {
	s.SiteName = &v
	return s
}

func (s *SiteWithDrm) SetEndpoint(v string) *SiteWithDrm {
	s.Endpoint = &v
	return s
}

func (s *SiteWithDrm) SetLdcs(v []*string) *SiteWithDrm {
	s.Ldcs = v
	return s
}

// 单链路树状图树节点
type TraceTreeItem struct {
	// 应用名
	App *string `json:"app,omitempty" xml:"app,omitempty"`
	// 组件类型
	Component *string `json:"component,omitempty" xml:"component,omitempty"`
	// 耗时, 毫秒
	Duration *int64 `json:"duration,omitempty" xml:"duration,omitempty"`
	// 本地应用机房信息
	IdcName *string `json:"idc_name,omitempty" xml:"idc_name,omitempty"`
	// 描述信息
	Info *string `json:"info,omitempty" xml:"info,omitempty"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// 对应的span的类型 枚举类型 CLIENT SERVER CONSUMER PRODUCER
	Kind *string `json:"kind,omitempty" xml:"kind,omitempty"`
	// parent span id
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// 请求体字节大小, 如果取不到就为-1
	RequestSize *int64 `json:"request_size,omitempty" xml:"request_size,omitempty"`
	// 响应体大小, 如果取不到就为-1
	ResponseSize *int64 `json:"response_size,omitempty" xml:"response_size,omitempty"`
	// span id
	SpanId *string `json:"span_id,omitempty" xml:"span_id,omitempty"`
	// 开始时间, 毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty"`
	// 状态码，0或者00代表成功
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 键值对
	Tags []*KeySet `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	// 节点的id, 没有业务语义, 用于帮助前端还原树状结构
	TreeId *string `json:"tree_id,omitempty" xml:"tree_id,omitempty"`
	// 父节点的id, 如果为0表示这是一个顶级节点, 没有业务语义, 用于帮助前端还原树状结构
	TreeParentId *string `json:"tree_parent_id,omitempty" xml:"tree_parent_id,omitempty"`
	// 方法名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 本地应用所属单元
	CellName *string `json:"cell_name,omitempty" xml:"cell_name,omitempty"`
	// 远端应用名
	RemoteApp *string `json:"remote_app,omitempty" xml:"remote_app,omitempty"`
	// 远端应用ip
	RemoteIp *string `json:"remote_ip,omitempty" xml:"remote_ip,omitempty"`
	// 远端应用机房信息
	RemoteIdcName *string `json:"remote_idc_name,omitempty" xml:"remote_idc_name,omitempty"`
	// 远端应用所属单元
	RemoteCellName *string `json:"remote_cell_name,omitempty" xml:"remote_cell_name,omitempty"`
	// 代表是否本节点数据缺失
	Missing *bool `json:"missing,omitempty" xml:"missing,omitempty"`
	// 代表是否有子节点
	HasChildren *bool `json:"has_children,omitempty" xml:"has_children,omitempty"`
}

func (s TraceTreeItem) String() string {
	return tea.Prettify(s)
}

func (s TraceTreeItem) GoString() string {
	return s.String()
}

func (s *TraceTreeItem) SetApp(v string) *TraceTreeItem {
	s.App = &v
	return s
}

func (s *TraceTreeItem) SetComponent(v string) *TraceTreeItem {
	s.Component = &v
	return s
}

func (s *TraceTreeItem) SetDuration(v int64) *TraceTreeItem {
	s.Duration = &v
	return s
}

func (s *TraceTreeItem) SetIdcName(v string) *TraceTreeItem {
	s.IdcName = &v
	return s
}

func (s *TraceTreeItem) SetInfo(v string) *TraceTreeItem {
	s.Info = &v
	return s
}

func (s *TraceTreeItem) SetIp(v string) *TraceTreeItem {
	s.Ip = &v
	return s
}

func (s *TraceTreeItem) SetKind(v string) *TraceTreeItem {
	s.Kind = &v
	return s
}

func (s *TraceTreeItem) SetParentId(v string) *TraceTreeItem {
	s.ParentId = &v
	return s
}

func (s *TraceTreeItem) SetRequestSize(v int64) *TraceTreeItem {
	s.RequestSize = &v
	return s
}

func (s *TraceTreeItem) SetResponseSize(v int64) *TraceTreeItem {
	s.ResponseSize = &v
	return s
}

func (s *TraceTreeItem) SetSpanId(v string) *TraceTreeItem {
	s.SpanId = &v
	return s
}

func (s *TraceTreeItem) SetStartTime(v int64) *TraceTreeItem {
	s.StartTime = &v
	return s
}

func (s *TraceTreeItem) SetStatus(v string) *TraceTreeItem {
	s.Status = &v
	return s
}

func (s *TraceTreeItem) SetTags(v []*KeySet) *TraceTreeItem {
	s.Tags = v
	return s
}

func (s *TraceTreeItem) SetTreeId(v string) *TraceTreeItem {
	s.TreeId = &v
	return s
}

func (s *TraceTreeItem) SetTreeParentId(v string) *TraceTreeItem {
	s.TreeParentId = &v
	return s
}

func (s *TraceTreeItem) SetName(v string) *TraceTreeItem {
	s.Name = &v
	return s
}

func (s *TraceTreeItem) SetCellName(v string) *TraceTreeItem {
	s.CellName = &v
	return s
}

func (s *TraceTreeItem) SetRemoteApp(v string) *TraceTreeItem {
	s.RemoteApp = &v
	return s
}

func (s *TraceTreeItem) SetRemoteIp(v string) *TraceTreeItem {
	s.RemoteIp = &v
	return s
}

func (s *TraceTreeItem) SetRemoteIdcName(v string) *TraceTreeItem {
	s.RemoteIdcName = &v
	return s
}

func (s *TraceTreeItem) SetRemoteCellName(v string) *TraceTreeItem {
	s.RemoteCellName = &v
	return s
}

func (s *TraceTreeItem) SetMissing(v bool) *TraceTreeItem {
	s.Missing = &v
	return s
}

func (s *TraceTreeItem) SetHasChildren(v bool) *TraceTreeItem {
	s.HasChildren = &v
	return s
}

// agent版本
type AgentVersion struct {
	// 版本号
	Version *string `json:"version,omitempty" xml:"version,omitempty" require:"true"`
	// 存储url
	Url *string `json:"url,omitempty" xml:"url,omitempty" require:"true"`
}

func (s AgentVersion) String() string {
	return tea.Prettify(s)
}

func (s AgentVersion) GoString() string {
	return s.String()
}

func (s *AgentVersion) SetVersion(v string) *AgentVersion {
	s.Version = &v
	return s
}

func (s *AgentVersion) SetUrl(v string) *AgentVersion {
	s.Url = &v
	return s
}

// PluginModelDO
type PluginModelDO struct {
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// parent_folder_id
	ParentFolderId *int64 `json:"parent_folder_id,omitempty" xml:"parent_folder_id,omitempty" require:"true"`
	// plugin_id
	PluginId *int64 `json:"plugin_id,omitempty" xml:"plugin_id,omitempty" require:"true"`
	// plugin_type
	PluginType *string `json:"plugin_type,omitempty" xml:"plugin_type,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// xflush_apps
	XflushApps *string `json:"xflush_apps,omitempty" xml:"xflush_apps,omitempty" require:"true"`
	// stack_expression
	StackExpression *StackExpression `json:"stack_expression,omitempty" xml:"stack_expression,omitempty" require:"true"`
	// cal_conf
	CalConf *string `json:"cal_conf,omitempty" xml:"cal_conf,omitempty" require:"true"`
	// opsmeta_schema
	OpsmetaSchema *OpsmetaSchema `json:"opsmeta_schema,omitempty" xml:"opsmeta_schema,omitempty" require:"true"`
	// save_schema
	SaveSchema *SaveSchema `json:"save_schema,omitempty" xml:"save_schema,omitempty" require:"true"`
	// status
	Status *StatusDO `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// outside_domain_id
	OutsideDomainId *int64 `json:"outside_domain_id,omitempty" xml:"outside_domain_id,omitempty" require:"true"`
	// old_folder_id
	OldFolderId *int64 `json:"old_folder_id,omitempty" xml:"old_folder_id,omitempty" require:"true"`
	// tenant_id
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// biz_domain_id
	BizDomainId *int64 `json:"biz_domain_id,omitempty" xml:"biz_domain_id,omitempty" require:"true"`
	// creater
	Creater *string `json:"creater,omitempty" xml:"creater,omitempty" require:"true"`
	// gmt_create
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// modifier
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty" require:"true"`
	// gmt_modified
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// alarm_pkgs
	AlarmPkgs []*AlarmPkgDO `json:"alarm_pkgs,omitempty" xml:"alarm_pkgs,omitempty" require:"true" type:"Repeated"`
	// noc
	Noc *string `json:"noc,omitempty" xml:"noc,omitempty" require:"true"`
	// position
	Position *string `json:"position,omitempty" xml:"position,omitempty" require:"true"`
	// alarmed
	Alarmed *bool `json:"alarmed,omitempty" xml:"alarmed,omitempty" require:"true"`
	// recent_alarm_history_id
	RecentAlarmHistoryId *string `json:"recent_alarm_history_id,omitempty" xml:"recent_alarm_history_id,omitempty" require:"true"`
	// recent_alarm
	RecentAlarm *int64 `json:"recent_alarm,omitempty" xml:"recent_alarm,omitempty" require:"true"`
	// key_cms
	KeyCms *bool `json:"key_cms,omitempty" xml:"key_cms,omitempty" require:"true"`
	// key_cms_sort
	KeyCmsSort *int64 `json:"key_cms_sort,omitempty" xml:"key_cms_sort,omitempty" require:"true"`
	// status_desc
	StatusDesc *string `json:"status_desc,omitempty" xml:"status_desc,omitempty" require:"true"`
	// data_from
	DataFrom *int64 `json:"data_from,omitempty" xml:"data_from,omitempty" require:"true"`
	// data_to
	DataTo *int64 `json:"data_to,omitempty" xml:"data_to,omitempty" require:"true"`
	// from_source
	FromSource *string `json:"from_source,omitempty" xml:"from_source,omitempty" require:"true"`
}

func (s PluginModelDO) String() string {
	return tea.Prettify(s)
}

func (s PluginModelDO) GoString() string {
	return s.String()
}

func (s *PluginModelDO) SetId(v int64) *PluginModelDO {
	s.Id = &v
	return s
}

func (s *PluginModelDO) SetParentFolderId(v int64) *PluginModelDO {
	s.ParentFolderId = &v
	return s
}

func (s *PluginModelDO) SetPluginId(v int64) *PluginModelDO {
	s.PluginId = &v
	return s
}

func (s *PluginModelDO) SetPluginType(v string) *PluginModelDO {
	s.PluginType = &v
	return s
}

func (s *PluginModelDO) SetName(v string) *PluginModelDO {
	s.Name = &v
	return s
}

func (s *PluginModelDO) SetXflushApps(v string) *PluginModelDO {
	s.XflushApps = &v
	return s
}

func (s *PluginModelDO) SetStackExpression(v *StackExpression) *PluginModelDO {
	s.StackExpression = v
	return s
}

func (s *PluginModelDO) SetCalConf(v string) *PluginModelDO {
	s.CalConf = &v
	return s
}

func (s *PluginModelDO) SetOpsmetaSchema(v *OpsmetaSchema) *PluginModelDO {
	s.OpsmetaSchema = v
	return s
}

func (s *PluginModelDO) SetSaveSchema(v *SaveSchema) *PluginModelDO {
	s.SaveSchema = v
	return s
}

func (s *PluginModelDO) SetStatus(v *StatusDO) *PluginModelDO {
	s.Status = v
	return s
}

func (s *PluginModelDO) SetOutsideDomainId(v int64) *PluginModelDO {
	s.OutsideDomainId = &v
	return s
}

func (s *PluginModelDO) SetOldFolderId(v int64) *PluginModelDO {
	s.OldFolderId = &v
	return s
}

func (s *PluginModelDO) SetTenantId(v int64) *PluginModelDO {
	s.TenantId = &v
	return s
}

func (s *PluginModelDO) SetWorkspaceId(v int64) *PluginModelDO {
	s.WorkspaceId = &v
	return s
}

func (s *PluginModelDO) SetBizDomainId(v int64) *PluginModelDO {
	s.BizDomainId = &v
	return s
}

func (s *PluginModelDO) SetCreater(v string) *PluginModelDO {
	s.Creater = &v
	return s
}

func (s *PluginModelDO) SetGmtCreate(v int64) *PluginModelDO {
	s.GmtCreate = &v
	return s
}

func (s *PluginModelDO) SetModifier(v string) *PluginModelDO {
	s.Modifier = &v
	return s
}

func (s *PluginModelDO) SetGmtModified(v int64) *PluginModelDO {
	s.GmtModified = &v
	return s
}

func (s *PluginModelDO) SetAlarmPkgs(v []*AlarmPkgDO) *PluginModelDO {
	s.AlarmPkgs = v
	return s
}

func (s *PluginModelDO) SetNoc(v string) *PluginModelDO {
	s.Noc = &v
	return s
}

func (s *PluginModelDO) SetPosition(v string) *PluginModelDO {
	s.Position = &v
	return s
}

func (s *PluginModelDO) SetAlarmed(v bool) *PluginModelDO {
	s.Alarmed = &v
	return s
}

func (s *PluginModelDO) SetRecentAlarmHistoryId(v string) *PluginModelDO {
	s.RecentAlarmHistoryId = &v
	return s
}

func (s *PluginModelDO) SetRecentAlarm(v int64) *PluginModelDO {
	s.RecentAlarm = &v
	return s
}

func (s *PluginModelDO) SetKeyCms(v bool) *PluginModelDO {
	s.KeyCms = &v
	return s
}

func (s *PluginModelDO) SetKeyCmsSort(v int64) *PluginModelDO {
	s.KeyCmsSort = &v
	return s
}

func (s *PluginModelDO) SetStatusDesc(v string) *PluginModelDO {
	s.StatusDesc = &v
	return s
}

func (s *PluginModelDO) SetDataFrom(v int64) *PluginModelDO {
	s.DataFrom = &v
	return s
}

func (s *PluginModelDO) SetDataTo(v int64) *PluginModelDO {
	s.DataTo = &v
	return s
}

func (s *PluginModelDO) SetFromSource(v string) *PluginModelDO {
	s.FromSource = &v
	return s
}

// TraasAppTagDto
type TraasAppTagDto struct {
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// tag_value
	TagValue *string `json:"tag_value,omitempty" xml:"tag_value,omitempty"`
	// tag_key
	TagKey *string `json:"tag_key,omitempty" xml:"tag_key,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// app_uuid
	AppUuid *string `json:"app_uuid,omitempty" xml:"app_uuid,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s TraasAppTagDto) String() string {
	return tea.Prettify(s)
}

func (s TraasAppTagDto) GoString() string {
	return s.String()
}

func (s *TraasAppTagDto) SetUuid(v string) *TraasAppTagDto {
	s.Uuid = &v
	return s
}

func (s *TraasAppTagDto) SetTagValue(v string) *TraasAppTagDto {
	s.TagValue = &v
	return s
}

func (s *TraasAppTagDto) SetTagKey(v string) *TraasAppTagDto {
	s.TagKey = &v
	return s
}

func (s *TraasAppTagDto) SetTenantUuid(v string) *TraasAppTagDto {
	s.TenantUuid = &v
	return s
}

func (s *TraasAppTagDto) SetTenantName(v string) *TraasAppTagDto {
	s.TenantName = &v
	return s
}

func (s *TraasAppTagDto) SetAppUuid(v string) *TraasAppTagDto {
	s.AppUuid = &v
	return s
}

func (s *TraasAppTagDto) SetAppName(v string) *TraasAppTagDto {
	s.AppName = &v
	return s
}

func (s *TraasAppTagDto) SetOutsideId(v string) *TraasAppTagDto {
	s.OutsideId = &v
	return s
}

func (s *TraasAppTagDto) SetSourceFrom(v string) *TraasAppTagDto {
	s.SourceFrom = &v
	return s
}

func (s *TraasAppTagDto) SetExtension(v string) *TraasAppTagDto {
	s.Extension = &v
	return s
}

func (s *TraasAppTagDto) SetGmtCreate(v string) *TraasAppTagDto {
	s.GmtCreate = &v
	return s
}

func (s *TraasAppTagDto) SetGmtModified(v string) *TraasAppTagDto {
	s.GmtModified = &v
	return s
}

// 告警历史时间页面显示对象
type UnifiedAlarmEventVO struct {
	// 告警事件id
	AlarmEventId *string `json:"alarm_event_id,omitempty" xml:"alarm_event_id,omitempty"`
	// 告警内容
	AlarmContent *string `json:"alarm_content,omitempty" xml:"alarm_content,omitempty"`
	// 告警等级
	AlarmLevel *int64 `json:"alarm_level,omitempty" xml:"alarm_level,omitempty"`
	// 触发状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 告警对象
	AlarmTarget *string `json:"alarm_target,omitempty" xml:"alarm_target,omitempty"`
	// 告警产生时间
	AlarmStartTime *string `json:"alarm_start_time,omitempty" xml:"alarm_start_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 告警恢复时间
	AlarmRecoverTime *string `json:"alarm_recover_time,omitempty" xml:"alarm_recover_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 分组的告警历史集合
	AlarmHistoryList []*UnifiedAlarmHistoryVO `json:"alarm_history_list,omitempty" xml:"alarm_history_list,omitempty" type:"Repeated"`
	// 历史id
	AlarmHistoryId *int64 `json:"alarm_history_id,omitempty" xml:"alarm_history_id,omitempty"`
	// type
	AlarmTargetType *string `json:"alarm_target_type,omitempty" xml:"alarm_target_type,omitempty"`
	// 告警类型
	AlarmType *string `json:"alarm_type,omitempty" xml:"alarm_type,omitempty"`
	// 数据源跳转url
	AlarmUrl *string `json:"alarm_url,omitempty" xml:"alarm_url,omitempty"`
	// 数据源名称
	DataSourceName *string `json:"data_source_name,omitempty" xml:"data_source_name,omitempty"`
	// 目标对象是否已经删除
	AlarmTargetDeleted *bool `json:"alarm_target_deleted,omitempty" xml:"alarm_target_deleted,omitempty"`
	// 静默剩余时间
	SilenceRemainTime *int64 `json:"silence_remain_time,omitempty" xml:"silence_remain_time,omitempty"`
	// 告警规则ID
	AlarmRuleId *int64 `json:"alarm_rule_id,omitempty" xml:"alarm_rule_id,omitempty"`
}

func (s UnifiedAlarmEventVO) String() string {
	return tea.Prettify(s)
}

func (s UnifiedAlarmEventVO) GoString() string {
	return s.String()
}

func (s *UnifiedAlarmEventVO) SetAlarmEventId(v string) *UnifiedAlarmEventVO {
	s.AlarmEventId = &v
	return s
}

func (s *UnifiedAlarmEventVO) SetAlarmContent(v string) *UnifiedAlarmEventVO {
	s.AlarmContent = &v
	return s
}

func (s *UnifiedAlarmEventVO) SetAlarmLevel(v int64) *UnifiedAlarmEventVO {
	s.AlarmLevel = &v
	return s
}

func (s *UnifiedAlarmEventVO) SetStatus(v int64) *UnifiedAlarmEventVO {
	s.Status = &v
	return s
}

func (s *UnifiedAlarmEventVO) SetAlarmTarget(v string) *UnifiedAlarmEventVO {
	s.AlarmTarget = &v
	return s
}

func (s *UnifiedAlarmEventVO) SetAlarmStartTime(v string) *UnifiedAlarmEventVO {
	s.AlarmStartTime = &v
	return s
}

func (s *UnifiedAlarmEventVO) SetAlarmRecoverTime(v string) *UnifiedAlarmEventVO {
	s.AlarmRecoverTime = &v
	return s
}

func (s *UnifiedAlarmEventVO) SetAlarmHistoryList(v []*UnifiedAlarmHistoryVO) *UnifiedAlarmEventVO {
	s.AlarmHistoryList = v
	return s
}

func (s *UnifiedAlarmEventVO) SetAlarmHistoryId(v int64) *UnifiedAlarmEventVO {
	s.AlarmHistoryId = &v
	return s
}

func (s *UnifiedAlarmEventVO) SetAlarmTargetType(v string) *UnifiedAlarmEventVO {
	s.AlarmTargetType = &v
	return s
}

func (s *UnifiedAlarmEventVO) SetAlarmType(v string) *UnifiedAlarmEventVO {
	s.AlarmType = &v
	return s
}

func (s *UnifiedAlarmEventVO) SetAlarmUrl(v string) *UnifiedAlarmEventVO {
	s.AlarmUrl = &v
	return s
}

func (s *UnifiedAlarmEventVO) SetDataSourceName(v string) *UnifiedAlarmEventVO {
	s.DataSourceName = &v
	return s
}

func (s *UnifiedAlarmEventVO) SetAlarmTargetDeleted(v bool) *UnifiedAlarmEventVO {
	s.AlarmTargetDeleted = &v
	return s
}

func (s *UnifiedAlarmEventVO) SetSilenceRemainTime(v int64) *UnifiedAlarmEventVO {
	s.SilenceRemainTime = &v
	return s
}

func (s *UnifiedAlarmEventVO) SetAlarmRuleId(v int64) *UnifiedAlarmEventVO {
	s.AlarmRuleId = &v
	return s
}

// traasmeta zone
type TraasZoneDto struct {
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// region_uuid
	RegionUuid *string `json:"region_uuid,omitempty" xml:"region_uuid,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s TraasZoneDto) String() string {
	return tea.Prettify(s)
}

func (s TraasZoneDto) GoString() string {
	return s.String()
}

func (s *TraasZoneDto) SetUuid(v string) *TraasZoneDto {
	s.Uuid = &v
	return s
}

func (s *TraasZoneDto) SetName(v string) *TraasZoneDto {
	s.Name = &v
	return s
}

func (s *TraasZoneDto) SetDisplayName(v string) *TraasZoneDto {
	s.DisplayName = &v
	return s
}

func (s *TraasZoneDto) SetOutsideId(v string) *TraasZoneDto {
	s.OutsideId = &v
	return s
}

func (s *TraasZoneDto) SetSourceFrom(v string) *TraasZoneDto {
	s.SourceFrom = &v
	return s
}

func (s *TraasZoneDto) SetExtension(v string) *TraasZoneDto {
	s.Extension = &v
	return s
}

func (s *TraasZoneDto) SetRegionUuid(v string) *TraasZoneDto {
	s.RegionUuid = &v
	return s
}

func (s *TraasZoneDto) SetTenantUuid(v string) *TraasZoneDto {
	s.TenantUuid = &v
	return s
}

func (s *TraasZoneDto) SetTenantName(v string) *TraasZoneDto {
	s.TenantName = &v
	return s
}

func (s *TraasZoneDto) SetGmtCreate(v string) *TraasZoneDto {
	s.GmtCreate = &v
	return s
}

func (s *TraasZoneDto) SetGmtModified(v string) *TraasZoneDto {
	s.GmtModified = &v
	return s
}

// traasmeta tenant
type TraasTenantDto struct {
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
}

func (s TraasTenantDto) String() string {
	return tea.Prettify(s)
}

func (s TraasTenantDto) GoString() string {
	return s.String()
}

func (s *TraasTenantDto) SetUuid(v string) *TraasTenantDto {
	s.Uuid = &v
	return s
}

func (s *TraasTenantDto) SetName(v string) *TraasTenantDto {
	s.Name = &v
	return s
}

func (s *TraasTenantDto) SetDisplayName(v string) *TraasTenantDto {
	s.DisplayName = &v
	return s
}

func (s *TraasTenantDto) SetOutsideId(v string) *TraasTenantDto {
	s.OutsideId = &v
	return s
}

func (s *TraasTenantDto) SetSourceFrom(v string) *TraasTenantDto {
	s.SourceFrom = &v
	return s
}

func (s *TraasTenantDto) SetExtension(v string) *TraasTenantDto {
	s.Extension = &v
	return s
}

//
type XKeyJson struct {
	//
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// json string
	Json *string `json:"json,omitempty" xml:"json,omitempty" require:"true"`
}

func (s XKeyJson) String() string {
	return tea.Prettify(s)
}

func (s XKeyJson) GoString() string {
	return s.String()
}

func (s *XKeyJson) SetKey(v string) *XKeyJson {
	s.Key = &v
	return s
}

func (s *XKeyJson) SetJson(v string) *XKeyJson {
	s.Json = &v
	return s
}

// 告警规则绑定关系
type UnifiedAlarmRuleBindingVO struct {
	// 租户 ID
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 工作空间 ID
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// 监控对象类型
	AlarmTargetType *string `json:"alarm_target_type,omitempty" xml:"alarm_target_type,omitempty" require:"true"`
	// 监控对象名称
	AlarmTargetIdentity *string `json:"alarm_target_identity,omitempty" xml:"alarm_target_identity,omitempty"`
	// 告警规则 ID
	AlarmRuleId *int64 `json:"alarm_rule_id,omitempty" xml:"alarm_rule_id,omitempty" require:"true"`
	// 数据源类型
	DatasourceType *string `json:"datasource_type,omitempty" xml:"datasource_type,omitempty"`
	// 数据源 ID
	Datasource *string `json:"datasource,omitempty" xml:"datasource,omitempty"`
	// 告警规则详情
	AlarmRule *UnifiedAlarmRuleVO `json:"alarm_rule,omitempty" xml:"alarm_rule,omitempty"`
}

func (s UnifiedAlarmRuleBindingVO) String() string {
	return tea.Prettify(s)
}

func (s UnifiedAlarmRuleBindingVO) GoString() string {
	return s.String()
}

func (s *UnifiedAlarmRuleBindingVO) SetTenantId(v int64) *UnifiedAlarmRuleBindingVO {
	s.TenantId = &v
	return s
}

func (s *UnifiedAlarmRuleBindingVO) SetWorkspaceId(v int64) *UnifiedAlarmRuleBindingVO {
	s.WorkspaceId = &v
	return s
}

func (s *UnifiedAlarmRuleBindingVO) SetAlarmTargetType(v string) *UnifiedAlarmRuleBindingVO {
	s.AlarmTargetType = &v
	return s
}

func (s *UnifiedAlarmRuleBindingVO) SetAlarmTargetIdentity(v string) *UnifiedAlarmRuleBindingVO {
	s.AlarmTargetIdentity = &v
	return s
}

func (s *UnifiedAlarmRuleBindingVO) SetAlarmRuleId(v int64) *UnifiedAlarmRuleBindingVO {
	s.AlarmRuleId = &v
	return s
}

func (s *UnifiedAlarmRuleBindingVO) SetDatasourceType(v string) *UnifiedAlarmRuleBindingVO {
	s.DatasourceType = &v
	return s
}

func (s *UnifiedAlarmRuleBindingVO) SetDatasource(v string) *UnifiedAlarmRuleBindingVO {
	s.Datasource = &v
	return s
}

func (s *UnifiedAlarmRuleBindingVO) SetAlarmRule(v *UnifiedAlarmRuleVO) *UnifiedAlarmRuleBindingVO {
	s.AlarmRule = v
	return s
}

// 链路详情的拓扑节点
type TraceDetailTopologyItem struct {
	// 节点的id, 没有业务语义, 用于帮助前端还原树状结构
	TreeId *string `json:"tree_id,omitempty" xml:"tree_id,omitempty"`
	// 父节点的id, 如果为0表示这是一个顶级节点, 没有业务语义, 用于帮助前端还原树状结构
	TreeParentId *string `json:"tree_parent_id,omitempty" xml:"tree_parent_id,omitempty"`
	// 应用名
	App *string `json:"app,omitempty" xml:"app,omitempty"`
	// 应用ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// 客户端是否经过mesh
	HasClientMesh *bool `json:"has_client_mesh,omitempty" xml:"has_client_mesh,omitempty"`
	// 服务端是否经过mesh
	HasServerMesh *bool `json:"has_server_mesh,omitempty" xml:"has_server_mesh,omitempty"`
	// 数据中心
	IdcName *string `json:"idc_name,omitempty" xml:"idc_name,omitempty"`
	// 单元名
	CellName *string `json:"cell_name,omitempty" xml:"cell_name,omitempty"`
	// 方法名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 客户端开始时间, 毫秒时间戳
	ClientStartTime *int64 `json:"client_start_time,omitempty" xml:"client_start_time,omitempty"`
	// 服务端开始时间, 毫秒时间戳
	ServerStartTime *int64 `json:"server_start_time,omitempty" xml:"server_start_time,omitempty"`
	// 客户端毫秒耗时
	ClientDuration *int64 `json:"client_duration,omitempty" xml:"client_duration,omitempty"`
	// 服务端毫秒耗时
	ServerDuration *int64 `json:"server_duration,omitempty" xml:"server_duration,omitempty"`
	// 客户端状态码
	ClientStatus *string `json:"client_status,omitempty" xml:"client_status,omitempty"`
	// 服务端状态码
	ServerStatus *string `json:"server_status,omitempty" xml:"server_status,omitempty"`
	// 客户端组件类型
	ClientComponent *string `json:"client_component,omitempty" xml:"client_component,omitempty"`
	// 服务端组件类型
	ServerComponent *string `json:"server_component,omitempty" xml:"server_component,omitempty"`
	// 整体状态码
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 健康度耗时配置
	ApdexThreshold *string `json:"apdex_threshold,omitempty" xml:"apdex_threshold,omitempty"`
	// 健康度
	ApdexStatus *string `json:"apdex_status,omitempty" xml:"apdex_status,omitempty"`
	// 健康度数值
	ApdexValue *string `json:"apdex_value,omitempty" xml:"apdex_value,omitempty"`
}

func (s TraceDetailTopologyItem) String() string {
	return tea.Prettify(s)
}

func (s TraceDetailTopologyItem) GoString() string {
	return s.String()
}

func (s *TraceDetailTopologyItem) SetTreeId(v string) *TraceDetailTopologyItem {
	s.TreeId = &v
	return s
}

func (s *TraceDetailTopologyItem) SetTreeParentId(v string) *TraceDetailTopologyItem {
	s.TreeParentId = &v
	return s
}

func (s *TraceDetailTopologyItem) SetApp(v string) *TraceDetailTopologyItem {
	s.App = &v
	return s
}

func (s *TraceDetailTopologyItem) SetIp(v string) *TraceDetailTopologyItem {
	s.Ip = &v
	return s
}

func (s *TraceDetailTopologyItem) SetHasClientMesh(v bool) *TraceDetailTopologyItem {
	s.HasClientMesh = &v
	return s
}

func (s *TraceDetailTopologyItem) SetHasServerMesh(v bool) *TraceDetailTopologyItem {
	s.HasServerMesh = &v
	return s
}

func (s *TraceDetailTopologyItem) SetIdcName(v string) *TraceDetailTopologyItem {
	s.IdcName = &v
	return s
}

func (s *TraceDetailTopologyItem) SetCellName(v string) *TraceDetailTopologyItem {
	s.CellName = &v
	return s
}

func (s *TraceDetailTopologyItem) SetName(v string) *TraceDetailTopologyItem {
	s.Name = &v
	return s
}

func (s *TraceDetailTopologyItem) SetClientStartTime(v int64) *TraceDetailTopologyItem {
	s.ClientStartTime = &v
	return s
}

func (s *TraceDetailTopologyItem) SetServerStartTime(v int64) *TraceDetailTopologyItem {
	s.ServerStartTime = &v
	return s
}

func (s *TraceDetailTopologyItem) SetClientDuration(v int64) *TraceDetailTopologyItem {
	s.ClientDuration = &v
	return s
}

func (s *TraceDetailTopologyItem) SetServerDuration(v int64) *TraceDetailTopologyItem {
	s.ServerDuration = &v
	return s
}

func (s *TraceDetailTopologyItem) SetClientStatus(v string) *TraceDetailTopologyItem {
	s.ClientStatus = &v
	return s
}

func (s *TraceDetailTopologyItem) SetServerStatus(v string) *TraceDetailTopologyItem {
	s.ServerStatus = &v
	return s
}

func (s *TraceDetailTopologyItem) SetClientComponent(v string) *TraceDetailTopologyItem {
	s.ClientComponent = &v
	return s
}

func (s *TraceDetailTopologyItem) SetServerComponent(v string) *TraceDetailTopologyItem {
	s.ServerComponent = &v
	return s
}

func (s *TraceDetailTopologyItem) SetStatus(v string) *TraceDetailTopologyItem {
	s.Status = &v
	return s
}

func (s *TraceDetailTopologyItem) SetApdexThreshold(v string) *TraceDetailTopologyItem {
	s.ApdexThreshold = &v
	return s
}

func (s *TraceDetailTopologyItem) SetApdexStatus(v string) *TraceDetailTopologyItem {
	s.ApdexStatus = &v
	return s
}

func (s *TraceDetailTopologyItem) SetApdexValue(v string) *TraceDetailTopologyItem {
	s.ApdexValue = &v
	return s
}

// 栈告警套餐配置
type StackAlarmRule struct {
	// ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 告警套餐配置
	Config *string `json:"config,omitempty" xml:"config,omitempty" require:"true"`
	// 栈 ID
	StackId *int64 `json:"stack_id,omitempty" xml:"stack_id,omitempty" require:"true"`
	// 指标 ID (如pv对应的ID)
	StackMetricId *int64 `json:"stack_metric_id,omitempty" xml:"stack_metric_id,omitempty" require:"true"`
	// 关联报警relation (如果未关联，默认为-1)
	StackRelationId *int64 `json:"stack_relation_id,omitempty" xml:"stack_relation_id,omitempty" require:"true"`
	// 实体对象复合 ID
	StackUniversalTableId *string `json:"stack_universal_table_id,omitempty" xml:"stack_universal_table_id,omitempty" require:"true"`
}

func (s StackAlarmRule) String() string {
	return tea.Prettify(s)
}

func (s StackAlarmRule) GoString() string {
	return s.String()
}

func (s *StackAlarmRule) SetId(v int64) *StackAlarmRule {
	s.Id = &v
	return s
}

func (s *StackAlarmRule) SetConfig(v string) *StackAlarmRule {
	s.Config = &v
	return s
}

func (s *StackAlarmRule) SetStackId(v int64) *StackAlarmRule {
	s.StackId = &v
	return s
}

func (s *StackAlarmRule) SetStackMetricId(v int64) *StackAlarmRule {
	s.StackMetricId = &v
	return s
}

func (s *StackAlarmRule) SetStackRelationId(v int64) *StackAlarmRule {
	s.StackRelationId = &v
	return s
}

func (s *StackAlarmRule) SetStackUniversalTableId(v string) *StackAlarmRule {
	s.StackUniversalTableId = &v
	return s
}

// 技术栈产品配置
type StackGeneratedConfig struct {
	// 配置 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 所属技术栈 ID
	StackId *int64 `json:"stack_id,omitempty" xml:"stack_id,omitempty" require:"true"`
	// 技术栈名称
	StackName *string `json:"stack_name,omitempty" xml:"stack_name,omitempty" require:"true"`
	// 技术栈版本
	StackVersion *string `json:"stack_version,omitempty" xml:"stack_version,omitempty" require:"true"`
	// 栈的一个实体对象 ID
	StackEntityId *int64 `json:"stack_entity_id,omitempty" xml:"stack_entity_id,omitempty" require:"true"`
	// 栈的一个实体对象名称
	StackEntityName *string `json:"stack_entity_name,omitempty" xml:"stack_entity_name,omitempty" require:"true"`
	// 实体的一个监控项 ID
	StackMonitorItemId *int64 `json:"stack_monitor_item_id,omitempty" xml:"stack_monitor_item_id,omitempty" require:"true"`
	// 实体的一个监控项名称
	StackMonitorItemName *string `json:"stack_monitor_item_name,omitempty" xml:"stack_monitor_item_name,omitempty" require:"true"`
	// 栈实体
	StackUniversalTableId *string `json:"stack_universal_table_id,omitempty" xml:"stack_universal_table_id,omitempty" require:"true"`
	// xflush应用名称
	XflushApp *string `json:"xflush_app,omitempty" xml:"xflush_app,omitempty" require:"true"`
	// 是否迁移过来
	XflushMove *bool `json:"xflush_move,omitempty" xml:"xflush_move,omitempty" require:"true"`
	// xflush_type
	XflushType *string `json:"xflush_type,omitempty" xml:"xflush_type,omitempty" require:"true"`
	// 是否开启
	IsOpen *bool `json:"is_open,omitempty" xml:"is_open,omitempty" require:"true"`
	// 存储规则(JSON String, 使用前需要解析)
	StorageConfig *string `json:"storage_config,omitempty" xml:"storage_config,omitempty" require:"true"`
	// 是否自定义
	UseCustom *bool `json:"use_custom,omitempty" xml:"use_custom,omitempty" require:"true"`
	// xflush配置(JSON String, 使用前需要解析)
	XflushConfig *string `json:"xflush_config,omitempty" xml:"xflush_config,omitempty"`
}

func (s StackGeneratedConfig) String() string {
	return tea.Prettify(s)
}

func (s StackGeneratedConfig) GoString() string {
	return s.String()
}

func (s *StackGeneratedConfig) SetId(v int64) *StackGeneratedConfig {
	s.Id = &v
	return s
}

func (s *StackGeneratedConfig) SetStackId(v int64) *StackGeneratedConfig {
	s.StackId = &v
	return s
}

func (s *StackGeneratedConfig) SetStackName(v string) *StackGeneratedConfig {
	s.StackName = &v
	return s
}

func (s *StackGeneratedConfig) SetStackVersion(v string) *StackGeneratedConfig {
	s.StackVersion = &v
	return s
}

func (s *StackGeneratedConfig) SetStackEntityId(v int64) *StackGeneratedConfig {
	s.StackEntityId = &v
	return s
}

func (s *StackGeneratedConfig) SetStackEntityName(v string) *StackGeneratedConfig {
	s.StackEntityName = &v
	return s
}

func (s *StackGeneratedConfig) SetStackMonitorItemId(v int64) *StackGeneratedConfig {
	s.StackMonitorItemId = &v
	return s
}

func (s *StackGeneratedConfig) SetStackMonitorItemName(v string) *StackGeneratedConfig {
	s.StackMonitorItemName = &v
	return s
}

func (s *StackGeneratedConfig) SetStackUniversalTableId(v string) *StackGeneratedConfig {
	s.StackUniversalTableId = &v
	return s
}

func (s *StackGeneratedConfig) SetXflushApp(v string) *StackGeneratedConfig {
	s.XflushApp = &v
	return s
}

func (s *StackGeneratedConfig) SetXflushMove(v bool) *StackGeneratedConfig {
	s.XflushMove = &v
	return s
}

func (s *StackGeneratedConfig) SetXflushType(v string) *StackGeneratedConfig {
	s.XflushType = &v
	return s
}

func (s *StackGeneratedConfig) SetIsOpen(v bool) *StackGeneratedConfig {
	s.IsOpen = &v
	return s
}

func (s *StackGeneratedConfig) SetStorageConfig(v string) *StackGeneratedConfig {
	s.StorageConfig = &v
	return s
}

func (s *StackGeneratedConfig) SetUseCustom(v bool) *StackGeneratedConfig {
	s.UseCustom = &v
	return s
}

func (s *StackGeneratedConfig) SetXflushConfig(v string) *StackGeneratedConfig {
	s.XflushConfig = &v
	return s
}

// 链路搜索的数据库配置
type TraceSpanSearchDbConfig struct {
	// tracer插件名
	TracerPluginName *string `json:"tracer_plugin_name,omitempty" xml:"tracer_plugin_name,omitempty" require:"true"`
	// 数据源tag key
	DatasourceKey *string `json:"datasource_key,omitempty" xml:"datasource_key,omitempty" require:"true"`
	// 数据库tag key
	DatabaseKey *string `json:"database_key,omitempty" xml:"database_key,omitempty" require:"true"`
	// 支持的数据库类型列表
	SupportedDbTypes []*string `json:"supported_db_types,omitempty" xml:"supported_db_types,omitempty" require:"true" type:"Repeated"`
}

func (s TraceSpanSearchDbConfig) String() string {
	return tea.Prettify(s)
}

func (s TraceSpanSearchDbConfig) GoString() string {
	return s.String()
}

func (s *TraceSpanSearchDbConfig) SetTracerPluginName(v string) *TraceSpanSearchDbConfig {
	s.TracerPluginName = &v
	return s
}

func (s *TraceSpanSearchDbConfig) SetDatasourceKey(v string) *TraceSpanSearchDbConfig {
	s.DatasourceKey = &v
	return s
}

func (s *TraceSpanSearchDbConfig) SetDatabaseKey(v string) *TraceSpanSearchDbConfig {
	s.DatabaseKey = &v
	return s
}

func (s *TraceSpanSearchDbConfig) SetSupportedDbTypes(v []*string) *TraceSpanSearchDbConfig {
	s.SupportedDbTypes = v
	return s
}

// TraasWorkspaceGroupDto
type TraasWorkspaceGroupDto struct {
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// uuid
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s TraasWorkspaceGroupDto) String() string {
	return tea.Prettify(s)
}

func (s TraasWorkspaceGroupDto) GoString() string {
	return s.String()
}

func (s *TraasWorkspaceGroupDto) SetUuid(v string) *TraasWorkspaceGroupDto {
	s.Uuid = &v
	return s
}

func (s *TraasWorkspaceGroupDto) SetName(v string) *TraasWorkspaceGroupDto {
	s.Name = &v
	return s
}

func (s *TraasWorkspaceGroupDto) SetDisplayName(v string) *TraasWorkspaceGroupDto {
	s.DisplayName = &v
	return s
}

func (s *TraasWorkspaceGroupDto) SetTenantUuid(v string) *TraasWorkspaceGroupDto {
	s.TenantUuid = &v
	return s
}

func (s *TraasWorkspaceGroupDto) SetTenantName(v string) *TraasWorkspaceGroupDto {
	s.TenantName = &v
	return s
}

func (s *TraasWorkspaceGroupDto) SetOutsideId(v string) *TraasWorkspaceGroupDto {
	s.OutsideId = &v
	return s
}

func (s *TraasWorkspaceGroupDto) SetSourceFrom(v string) *TraasWorkspaceGroupDto {
	s.SourceFrom = &v
	return s
}

func (s *TraasWorkspaceGroupDto) SetExtension(v string) *TraasWorkspaceGroupDto {
	s.Extension = &v
	return s
}

func (s *TraasWorkspaceGroupDto) SetGmtCreate(v string) *TraasWorkspaceGroupDto {
	s.GmtCreate = &v
	return s
}

func (s *TraasWorkspaceGroupDto) SetGmtModified(v string) *TraasWorkspaceGroupDto {
	s.GmtModified = &v
	return s
}

// 实体字段
type TraasEntityFieldDto struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
}

func (s TraasEntityFieldDto) String() string {
	return tea.Prettify(s)
}

func (s TraasEntityFieldDto) GoString() string {
	return s.String()
}

func (s *TraasEntityFieldDto) SetName(v string) *TraasEntityFieldDto {
	s.Name = &v
	return s
}

func (s *TraasEntityFieldDto) SetDisplayName(v string) *TraasEntityFieldDto {
	s.DisplayName = &v
	return s
}

// 链路工作空间配置
type TraceWorkspaceSetting struct {
	// 工作空间名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 是否开启采样率，false代表全采
	SampleEnabled *bool `json:"sample_enabled,omitempty" xml:"sample_enabled,omitempty"`
	// 采样率
	SampleRate *string `json:"sample_rate,omitempty" xml:"sample_rate,omitempty"`
	// 是否开启链路
	TraceEnabled *bool `json:"trace_enabled,omitempty" xml:"trace_enabled,omitempty"`
	// 是否开启异常链路全采样
	ErrorTraceEnabled *bool `json:"error_trace_enabled,omitempty" xml:"error_trace_enabled,omitempty"`
	// 是否开启链路瘦身
	NarrowSpanEnabled *bool `json:"narrow_span_enabled,omitempty" xml:"narrow_span_enabled,omitempty"`
}

func (s TraceWorkspaceSetting) String() string {
	return tea.Prettify(s)
}

func (s TraceWorkspaceSetting) GoString() string {
	return s.String()
}

func (s *TraceWorkspaceSetting) SetWorkspaceName(v string) *TraceWorkspaceSetting {
	s.WorkspaceName = &v
	return s
}

func (s *TraceWorkspaceSetting) SetSampleEnabled(v bool) *TraceWorkspaceSetting {
	s.SampleEnabled = &v
	return s
}

func (s *TraceWorkspaceSetting) SetSampleRate(v string) *TraceWorkspaceSetting {
	s.SampleRate = &v
	return s
}

func (s *TraceWorkspaceSetting) SetTraceEnabled(v bool) *TraceWorkspaceSetting {
	s.TraceEnabled = &v
	return s
}

func (s *TraceWorkspaceSetting) SetErrorTraceEnabled(v bool) *TraceWorkspaceSetting {
	s.ErrorTraceEnabled = &v
	return s
}

func (s *TraceWorkspaceSetting) SetNarrowSpanEnabled(v bool) *TraceWorkspaceSetting {
	s.NarrowSpanEnabled = &v
	return s
}

// 拓扑边
type TopologyEdge struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// source节点的id
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// target节点的id
	Target *string `json:"target,omitempty" xml:"target,omitempty"`
}

func (s TopologyEdge) String() string {
	return tea.Prettify(s)
}

func (s TopologyEdge) GoString() string {
	return s.String()
}

func (s *TopologyEdge) SetId(v string) *TopologyEdge {
	s.Id = &v
	return s
}

func (s *TopologyEdge) SetSource(v string) *TopologyEdge {
	s.Source = &v
	return s
}

func (s *TopologyEdge) SetTarget(v string) *TopologyEdge {
	s.Target = &v
	return s
}

// 技术栈信息，用于查询告警规则、历史。
type AlarmStackInfo struct {
	// 是应用监控，还是自定义监控
	DatasourceType *string `json:"datasource_type,omitempty" xml:"datasource_type,omitempty"`
	// 数据源
	Datasource *string `json:"datasource,omitempty" xml:"datasource,omitempty"`
	// 应用类型
	AlarmTargetType *string `json:"alarm_target_type,omitempty" xml:"alarm_target_type,omitempty"`
	// 应用名称
	AlarmTargetIdentify *string `json:"alarm_target_identify,omitempty" xml:"alarm_target_identify,omitempty"`
}

func (s AlarmStackInfo) String() string {
	return tea.Prettify(s)
}

func (s AlarmStackInfo) GoString() string {
	return s.String()
}

func (s *AlarmStackInfo) SetDatasourceType(v string) *AlarmStackInfo {
	s.DatasourceType = &v
	return s
}

func (s *AlarmStackInfo) SetDatasource(v string) *AlarmStackInfo {
	s.Datasource = &v
	return s
}

func (s *AlarmStackInfo) SetAlarmTargetType(v string) *AlarmStackInfo {
	s.AlarmTargetType = &v
	return s
}

func (s *AlarmStackInfo) SetAlarmTargetIdentify(v string) *AlarmStackInfo {
	s.AlarmTargetIdentify = &v
	return s
}

// AlarmLevelStatsVOKeySet
type AlarmLevelStatsVOKeySet struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value *AlarmLevelStatsVO `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s AlarmLevelStatsVOKeySet) String() string {
	return tea.Prettify(s)
}

func (s AlarmLevelStatsVOKeySet) GoString() string {
	return s.String()
}

func (s *AlarmLevelStatsVOKeySet) SetKey(v string) *AlarmLevelStatsVOKeySet {
	s.Key = &v
	return s
}

func (s *AlarmLevelStatsVOKeySet) SetValue(v *AlarmLevelStatsVO) *AlarmLevelStatsVOKeySet {
	s.Value = v
	return s
}

// app详情
type AppMeta struct {
	// workspace_id
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// app_id
	AppId *int64 `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
}

func (s AppMeta) String() string {
	return tea.Prettify(s)
}

func (s AppMeta) GoString() string {
	return s.String()
}

func (s *AppMeta) SetWorkspaceId(v int64) *AppMeta {
	s.WorkspaceId = &v
	return s
}

func (s *AppMeta) SetAppName(v string) *AppMeta {
	s.AppName = &v
	return s
}

func (s *AppMeta) SetAppId(v int64) *AppMeta {
	s.AppId = &v
	return s
}

// 阿里云开通信息
type AliyunOpenState struct {
	// 阿里云用户ID
	AliyunUserId *int64 `json:"aliyun_user_id,omitempty" xml:"aliyun_user_id,omitempty" require:"true"`
	// 阿里云实例ID
	AliyunInstanceId *string `json:"aliyun_instance_id,omitempty" xml:"aliyun_instance_id,omitempty" require:"true"`
	// 监控租户ID
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 监控租户名称
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty" require:"true"`
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// 开通状态，0未开通，1开通
	State *int64 `json:"state,omitempty" xml:"state,omitempty" require:"true"`
}

func (s AliyunOpenState) String() string {
	return tea.Prettify(s)
}

func (s AliyunOpenState) GoString() string {
	return s.String()
}

func (s *AliyunOpenState) SetAliyunUserId(v int64) *AliyunOpenState {
	s.AliyunUserId = &v
	return s
}

func (s *AliyunOpenState) SetAliyunInstanceId(v string) *AliyunOpenState {
	s.AliyunInstanceId = &v
	return s
}

func (s *AliyunOpenState) SetTenantId(v int64) *AliyunOpenState {
	s.TenantId = &v
	return s
}

func (s *AliyunOpenState) SetTenantName(v string) *AliyunOpenState {
	s.TenantName = &v
	return s
}

func (s *AliyunOpenState) SetGmtCreate(v int64) *AliyunOpenState {
	s.GmtCreate = &v
	return s
}

func (s *AliyunOpenState) SetGmtModified(v int64) *AliyunOpenState {
	s.GmtModified = &v
	return s
}

func (s *AliyunOpenState) SetState(v int64) *AliyunOpenState {
	s.State = &v
	return s
}

// 用户资源收藏状态
type UserFavoriteVO struct {
	// 收藏资源 ID
	ResourceId *string `json:"resource_id,omitempty" xml:"resource_id,omitempty" require:"true"`
	// 收藏资源类型
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	// 用户收藏的 ID
	UserFavoriteId *int64 `json:"user_favorite_id,omitempty" xml:"user_favorite_id,omitempty" require:"true"`
}

func (s UserFavoriteVO) String() string {
	return tea.Prettify(s)
}

func (s UserFavoriteVO) GoString() string {
	return s.String()
}

func (s *UserFavoriteVO) SetResourceId(v string) *UserFavoriteVO {
	s.ResourceId = &v
	return s
}

func (s *UserFavoriteVO) SetResourceType(v string) *UserFavoriteVO {
	s.ResourceType = &v
	return s
}

func (s *UserFavoriteVO) SetUserFavoriteId(v int64) *UserFavoriteVO {
	s.UserFavoriteId = &v
	return s
}

// 单链路紧凑树状图树节点
type TraceCompactTreeItem struct {
	// 方法名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 节点的id, 没有业务语义, 用于帮助前端还原树状结构
	TreeId *string `json:"tree_id,omitempty" xml:"tree_id,omitempty"`
	// 父节点的id, 如果为0表示这是一个顶级节点, 没有业务语义, 用于帮助前端还原树状结构
	TreeParentId *string `json:"tree_parent_id,omitempty" xml:"tree_parent_id,omitempty"`
	// 客户端span是否缺失
	ClientMissing *bool `json:"client_missing,omitempty" xml:"client_missing,omitempty"`
	// 服务端span是否缺失
	ServerMissing *bool `json:"server_missing,omitempty" xml:"server_missing,omitempty"`
	// 客户端是否经过mesh
	HasClientMesh *bool `json:"has_client_mesh,omitempty" xml:"has_client_mesh,omitempty"`
	// 服务端是否经过mesh
	HasServerMesh *bool `json:"has_server_mesh,omitempty" xml:"has_server_mesh,omitempty"`
	// 是否包含子节点
	HasChildren *bool `json:"has_children,omitempty" xml:"has_children,omitempty"`
	// 客户端应用名
	ClientApp *string `json:"client_app,omitempty" xml:"client_app,omitempty"`
	// 服务端应用名
	ServerApp *string `json:"server_app,omitempty" xml:"server_app,omitempty"`
	// 客户端 ip
	ClientIp *string `json:"client_ip,omitempty" xml:"client_ip,omitempty"`
	// 服务端 ip
	ServerIp *string `json:"server_ip,omitempty" xml:"server_ip,omitempty"`
	// 客户端 idc
	ClientIdcName *string `json:"client_idc_name,omitempty" xml:"client_idc_name,omitempty"`
	// 服务端 idc
	ServerIdcName *string `json:"server_idc_name,omitempty" xml:"server_idc_name,omitempty"`
	// 客户端 cell
	ClientCellName *string `json:"client_cell_name,omitempty" xml:"client_cell_name,omitempty"`
	// 服务端 cell
	ServerCellName *string `json:"server_cell_name,omitempty" xml:"server_cell_name,omitempty"`
	// 客户端开始时间, 毫秒时间戳
	ClientStartTime *int64 `json:"client_start_time,omitempty" xml:"client_start_time,omitempty"`
	// 服务端开始时间, 毫秒时间戳
	ServerStartTime *int64 `json:"server_start_time,omitempty" xml:"server_start_time,omitempty"`
	// 客户端毫秒耗时
	ClientDuration *int64 `json:"client_duration,omitempty" xml:"client_duration,omitempty"`
	// 服务端毫秒耗时
	ServerDuration *int64 `json:"server_duration,omitempty" xml:"server_duration,omitempty"`
	// 客户端状态码
	ClientStatus *string `json:"client_status,omitempty" xml:"client_status,omitempty"`
	// 服务端状态码
	ServerStatus *string `json:"server_status,omitempty" xml:"server_status,omitempty"`
	// 客户端组件类型
	ClientComponent *string `json:"client_component,omitempty" xml:"client_component,omitempty"`
	// 服务端组件类型
	ServerComponent *string `json:"server_component,omitempty" xml:"server_component,omitempty"`
	// 客户端span
	ClientSpan *TraceSpan `json:"client_span,omitempty" xml:"client_span,omitempty"`
	// 服务端span
	ServerSpan *TraceSpan `json:"server_span,omitempty" xml:"server_span,omitempty"`
	// 整体状态码
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 健康度耗时配置
	ApdexThreshold *string `json:"apdex_threshold,omitempty" xml:"apdex_threshold,omitempty"`
	// 健康度
	ApdexStatus *string `json:"apdex_status,omitempty" xml:"apdex_status,omitempty"`
}

func (s TraceCompactTreeItem) String() string {
	return tea.Prettify(s)
}

func (s TraceCompactTreeItem) GoString() string {
	return s.String()
}

func (s *TraceCompactTreeItem) SetName(v string) *TraceCompactTreeItem {
	s.Name = &v
	return s
}

func (s *TraceCompactTreeItem) SetTreeId(v string) *TraceCompactTreeItem {
	s.TreeId = &v
	return s
}

func (s *TraceCompactTreeItem) SetTreeParentId(v string) *TraceCompactTreeItem {
	s.TreeParentId = &v
	return s
}

func (s *TraceCompactTreeItem) SetClientMissing(v bool) *TraceCompactTreeItem {
	s.ClientMissing = &v
	return s
}

func (s *TraceCompactTreeItem) SetServerMissing(v bool) *TraceCompactTreeItem {
	s.ServerMissing = &v
	return s
}

func (s *TraceCompactTreeItem) SetHasClientMesh(v bool) *TraceCompactTreeItem {
	s.HasClientMesh = &v
	return s
}

func (s *TraceCompactTreeItem) SetHasServerMesh(v bool) *TraceCompactTreeItem {
	s.HasServerMesh = &v
	return s
}

func (s *TraceCompactTreeItem) SetHasChildren(v bool) *TraceCompactTreeItem {
	s.HasChildren = &v
	return s
}

func (s *TraceCompactTreeItem) SetClientApp(v string) *TraceCompactTreeItem {
	s.ClientApp = &v
	return s
}

func (s *TraceCompactTreeItem) SetServerApp(v string) *TraceCompactTreeItem {
	s.ServerApp = &v
	return s
}

func (s *TraceCompactTreeItem) SetClientIp(v string) *TraceCompactTreeItem {
	s.ClientIp = &v
	return s
}

func (s *TraceCompactTreeItem) SetServerIp(v string) *TraceCompactTreeItem {
	s.ServerIp = &v
	return s
}

func (s *TraceCompactTreeItem) SetClientIdcName(v string) *TraceCompactTreeItem {
	s.ClientIdcName = &v
	return s
}

func (s *TraceCompactTreeItem) SetServerIdcName(v string) *TraceCompactTreeItem {
	s.ServerIdcName = &v
	return s
}

func (s *TraceCompactTreeItem) SetClientCellName(v string) *TraceCompactTreeItem {
	s.ClientCellName = &v
	return s
}

func (s *TraceCompactTreeItem) SetServerCellName(v string) *TraceCompactTreeItem {
	s.ServerCellName = &v
	return s
}

func (s *TraceCompactTreeItem) SetClientStartTime(v int64) *TraceCompactTreeItem {
	s.ClientStartTime = &v
	return s
}

func (s *TraceCompactTreeItem) SetServerStartTime(v int64) *TraceCompactTreeItem {
	s.ServerStartTime = &v
	return s
}

func (s *TraceCompactTreeItem) SetClientDuration(v int64) *TraceCompactTreeItem {
	s.ClientDuration = &v
	return s
}

func (s *TraceCompactTreeItem) SetServerDuration(v int64) *TraceCompactTreeItem {
	s.ServerDuration = &v
	return s
}

func (s *TraceCompactTreeItem) SetClientStatus(v string) *TraceCompactTreeItem {
	s.ClientStatus = &v
	return s
}

func (s *TraceCompactTreeItem) SetServerStatus(v string) *TraceCompactTreeItem {
	s.ServerStatus = &v
	return s
}

func (s *TraceCompactTreeItem) SetClientComponent(v string) *TraceCompactTreeItem {
	s.ClientComponent = &v
	return s
}

func (s *TraceCompactTreeItem) SetServerComponent(v string) *TraceCompactTreeItem {
	s.ServerComponent = &v
	return s
}

func (s *TraceCompactTreeItem) SetClientSpan(v *TraceSpan) *TraceCompactTreeItem {
	s.ClientSpan = v
	return s
}

func (s *TraceCompactTreeItem) SetServerSpan(v *TraceSpan) *TraceCompactTreeItem {
	s.ServerSpan = v
	return s
}

func (s *TraceCompactTreeItem) SetStatus(v string) *TraceCompactTreeItem {
	s.Status = &v
	return s
}

func (s *TraceCompactTreeItem) SetApdexThreshold(v string) *TraceCompactTreeItem {
	s.ApdexThreshold = &v
	return s
}

func (s *TraceCompactTreeItem) SetApdexStatus(v string) *TraceCompactTreeItem {
	s.ApdexStatus = &v
	return s
}

// 技术栈监控项
type StackMonitorItem struct {
	// 监控项 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 技术栈 ID
	StackId *int64 `json:"stack_id,omitempty" xml:"stack_id,omitempty" require:"true"`
	// 名称，必须是英文
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 显示名
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// 能否自定义
	CanCustom *bool `json:"can_custom,omitempty" xml:"can_custom,omitempty" require:"true"`
	// 管理实体 ID
	ManageEntityId *int64 `json:"manage_entity_id,omitempty" xml:"manage_entity_id,omitempty" require:"true"`
	// metric类型(dependency、error、service、resource等)
	MetricType *string `json:"metric_type,omitempty" xml:"metric_type,omitempty"`
	// 配置(JSON String, 使用前需要解析)
	Config *string `json:"config,omitempty" xml:"config,omitempty"`
	// 标题
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s StackMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s StackMonitorItem) GoString() string {
	return s.String()
}

func (s *StackMonitorItem) SetId(v int64) *StackMonitorItem {
	s.Id = &v
	return s
}

func (s *StackMonitorItem) SetStackId(v int64) *StackMonitorItem {
	s.StackId = &v
	return s
}

func (s *StackMonitorItem) SetName(v string) *StackMonitorItem {
	s.Name = &v
	return s
}

func (s *StackMonitorItem) SetDisplayName(v string) *StackMonitorItem {
	s.DisplayName = &v
	return s
}

func (s *StackMonitorItem) SetCanCustom(v bool) *StackMonitorItem {
	s.CanCustom = &v
	return s
}

func (s *StackMonitorItem) SetManageEntityId(v int64) *StackMonitorItem {
	s.ManageEntityId = &v
	return s
}

func (s *StackMonitorItem) SetMetricType(v string) *StackMonitorItem {
	s.MetricType = &v
	return s
}

func (s *StackMonitorItem) SetConfig(v string) *StackMonitorItem {
	s.Config = &v
	return s
}

func (s *StackMonitorItem) SetTitle(v string) *StackMonitorItem {
	s.Title = &v
	return s
}

// ErrorRealte
type ErrorRealte struct {
	// ips
	Ips []*string `json:"ips,omitempty" xml:"ips,omitempty" require:"true" type:"Repeated"`
	// log_paths
	LogPaths []*string `json:"log_paths,omitempty" xml:"log_paths,omitempty" require:"true" type:"Repeated"`
}

func (s ErrorRealte) String() string {
	return tea.Prettify(s)
}

func (s ErrorRealte) GoString() string {
	return s.String()
}

func (s *ErrorRealte) SetIps(v []*string) *ErrorRealte {
	s.Ips = v
	return s
}

func (s *ErrorRealte) SetLogPaths(v []*string) *ErrorRealte {
	s.LogPaths = v
	return s
}

// NodeOverviewDTO
type NodeOverviewDTO struct {
	// 磁盘 top排序应用
	DiskTopNodes []*NodeTopItem `json:"disk_top_nodes,omitempty" xml:"disk_top_nodes,omitempty" require:"true" type:"Repeated"`
	//
	// cpu top排序应用
	CpuTopNodes []*NodeTopItem `json:"cpu_top_nodes,omitempty" xml:"cpu_top_nodes,omitempty" require:"true" type:"Repeated"`
	// mem top排序应用
	MemTopNodes []*NodeTopItem `json:"mem_top_nodes,omitempty" xml:"mem_top_nodes,omitempty" require:"true" type:"Repeated"`
}

func (s NodeOverviewDTO) String() string {
	return tea.Prettify(s)
}

func (s NodeOverviewDTO) GoString() string {
	return s.String()
}

func (s *NodeOverviewDTO) SetDiskTopNodes(v []*NodeTopItem) *NodeOverviewDTO {
	s.DiskTopNodes = v
	return s
}

func (s *NodeOverviewDTO) SetCpuTopNodes(v []*NodeTopItem) *NodeOverviewDTO {
	s.CpuTopNodes = v
	return s
}

func (s *NodeOverviewDTO) SetMemTopNodes(v []*NodeTopItem) *NodeOverviewDTO {
	s.MemTopNodes = v
	return s
}

// InitInfo
type InitInfo struct {
	// auth_url
	AuthUrl *string `json:"auth_url,omitempty" xml:"auth_url,omitempty" require:"true"`
	// user
	User *MonitorUser `json:"user,omitempty" xml:"user,omitempty" require:"true"`
	// nav_head
	NavHead *NavContent `json:"nav_head,omitempty" xml:"nav_head,omitempty" require:"true"`
}

func (s InitInfo) String() string {
	return tea.Prettify(s)
}

func (s InitInfo) GoString() string {
	return s.String()
}

func (s *InitInfo) SetAuthUrl(v string) *InitInfo {
	s.AuthUrl = &v
	return s
}

func (s *InitInfo) SetUser(v *MonitorUser) *InitInfo {
	s.User = v
	return s
}

func (s *InitInfo) SetNavHead(v *NavContent) *InitInfo {
	s.NavHead = v
	return s
}

// SpiConfig
type SpiConfig struct {
	// end_point或token
	EndPoint *string `json:"end_point,omitempty" xml:"end_point,omitempty"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	// last_editor
	LastEditor *string `json:"last_editor,omitempty" xml:"last_editor,omitempty"`
	// 字段格式
	FieldNamingStrategy *string `json:"field_naming_strategy,omitempty" xml:"field_naming_strategy,omitempty"`
	// 云厂商类型
	CloudVendorType *string `json:"cloud_vendor_type,omitempty" xml:"cloud_vendor_type,omitempty"`
}

func (s SpiConfig) String() string {
	return tea.Prettify(s)
}

func (s SpiConfig) GoString() string {
	return s.String()
}

func (s *SpiConfig) SetEndPoint(v string) *SpiConfig {
	s.EndPoint = &v
	return s
}

func (s *SpiConfig) SetGmtCreate(v string) *SpiConfig {
	s.GmtCreate = &v
	return s
}

func (s *SpiConfig) SetGmtModified(v string) *SpiConfig {
	s.GmtModified = &v
	return s
}

func (s *SpiConfig) SetLastEditor(v string) *SpiConfig {
	s.LastEditor = &v
	return s
}

func (s *SpiConfig) SetFieldNamingStrategy(v string) *SpiConfig {
	s.FieldNamingStrategy = &v
	return s
}

func (s *SpiConfig) SetCloudVendorType(v string) *SpiConfig {
	s.CloudVendorType = &v
	return s
}

// 测试演示
type AlarmTest struct {
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 告警规则id
	AlarmRuleId *int64 `json:"alarm_rule_id,omitempty" xml:"alarm_rule_id,omitempty" require:"true"`
}

func (s AlarmTest) String() string {
	return tea.Prettify(s)
}

func (s AlarmTest) GoString() string {
	return s.String()
}

func (s *AlarmTest) SetWorkspaceName(v string) *AlarmTest {
	s.WorkspaceName = &v
	return s
}

func (s *AlarmTest) SetAlarmRuleId(v int64) *AlarmTest {
	s.AlarmRuleId = &v
	return s
}

// FolderPaths
type FolderPaths struct {
	// paths
	Paths []*FolderPath `json:"paths,omitempty" xml:"paths,omitempty" require:"true" type:"Repeated"`
}

func (s FolderPaths) String() string {
	return tea.Prettify(s)
}

func (s FolderPaths) GoString() string {
	return s.String()
}

func (s *FolderPaths) SetPaths(v []*FolderPath) *FolderPaths {
	s.Paths = v
	return s
}

// AlarmNotifyStatsKeySet
type AlarmNotifyStatsKeySet struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value *AlarmNotifyStats `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s AlarmNotifyStatsKeySet) String() string {
	return tea.Prettify(s)
}

func (s AlarmNotifyStatsKeySet) GoString() string {
	return s.String()
}

func (s *AlarmNotifyStatsKeySet) SetKey(v string) *AlarmNotifyStatsKeySet {
	s.Key = &v
	return s
}

func (s *AlarmNotifyStatsKeySet) SetValue(v *AlarmNotifyStats) *AlarmNotifyStatsKeySet {
	s.Value = v
	return s
}

// traasmeta region
type TraasRegionDto struct {
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s TraasRegionDto) String() string {
	return tea.Prettify(s)
}

func (s TraasRegionDto) GoString() string {
	return s.String()
}

func (s *TraasRegionDto) SetUuid(v string) *TraasRegionDto {
	s.Uuid = &v
	return s
}

func (s *TraasRegionDto) SetName(v string) *TraasRegionDto {
	s.Name = &v
	return s
}

func (s *TraasRegionDto) SetDisplayName(v string) *TraasRegionDto {
	s.DisplayName = &v
	return s
}

func (s *TraasRegionDto) SetOutsideId(v string) *TraasRegionDto {
	s.OutsideId = &v
	return s
}

func (s *TraasRegionDto) SetSourceFrom(v string) *TraasRegionDto {
	s.SourceFrom = &v
	return s
}

func (s *TraasRegionDto) SetExtension(v string) *TraasRegionDto {
	s.Extension = &v
	return s
}

func (s *TraasRegionDto) SetTenantUuid(v string) *TraasRegionDto {
	s.TenantUuid = &v
	return s
}

func (s *TraasRegionDto) SetTenantName(v string) *TraasRegionDto {
	s.TenantName = &v
	return s
}

func (s *TraasRegionDto) SetGmtCreate(v string) *TraasRegionDto {
	s.GmtCreate = &v
	return s
}

func (s *TraasRegionDto) SetGmtModified(v string) *TraasRegionDto {
	s.GmtModified = &v
	return s
}

// 只包含一个string value的结构体, 用于解决阿里云POP OpenAPI的限制问题.
type StringValue struct {
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s StringValue) String() string {
	return tea.Prettify(s)
}

func (s StringValue) GoString() string {
	return s.String()
}

func (s *StringValue) SetValue(v string) *StringValue {
	s.Value = &v
	return s
}

// OpsDataCheck
type OpsDataCheck struct {
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 指标名称
	TargetName *string `json:"target_name,omitempty" xml:"target_name,omitempty" require:"true"`
	// 指标类型
	TargetType *string `json:"target_type,omitempty" xml:"target_type,omitempty" require:"true"`
	// 0：异常 1：正常
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// check_result
	CheckResult *string `json:"check_result,omitempty" xml:"check_result,omitempty" require:"true"`
}

func (s OpsDataCheck) String() string {
	return tea.Prettify(s)
}

func (s OpsDataCheck) GoString() string {
	return s.String()
}

func (s *OpsDataCheck) SetId(v int64) *OpsDataCheck {
	s.Id = &v
	return s
}

func (s *OpsDataCheck) SetTargetName(v string) *OpsDataCheck {
	s.TargetName = &v
	return s
}

func (s *OpsDataCheck) SetTargetType(v string) *OpsDataCheck {
	s.TargetType = &v
	return s
}

func (s *OpsDataCheck) SetStatus(v int64) *OpsDataCheck {
	s.Status = &v
	return s
}

func (s *OpsDataCheck) SetCheckResult(v string) *OpsDataCheck {
	s.CheckResult = &v
	return s
}

// 统一告警传输对象
type UnifiedAlarmSubDTO struct {
	// 订阅者id
	Subscriber *string `json:"subscriber,omitempty" xml:"subscriber,omitempty" require:"true"`
	// 订阅者类型
	SubscriberType *string `json:"subscriber_type,omitempty" xml:"subscriber_type,omitempty" require:"true"`
	// 订阅者来源
	SubscriberSource *string `json:"subscriber_source,omitempty" xml:"subscriber_source,omitempty" require:"true"`
	// 告警对象的名称
	SubscriberName *string `json:"subscriber_name,omitempty" xml:"subscriber_name,omitempty" require:"true"`
}

func (s UnifiedAlarmSubDTO) String() string {
	return tea.Prettify(s)
}

func (s UnifiedAlarmSubDTO) GoString() string {
	return s.String()
}

func (s *UnifiedAlarmSubDTO) SetSubscriber(v string) *UnifiedAlarmSubDTO {
	s.Subscriber = &v
	return s
}

func (s *UnifiedAlarmSubDTO) SetSubscriberType(v string) *UnifiedAlarmSubDTO {
	s.SubscriberType = &v
	return s
}

func (s *UnifiedAlarmSubDTO) SetSubscriberSource(v string) *UnifiedAlarmSubDTO {
	s.SubscriberSource = &v
	return s
}

func (s *UnifiedAlarmSubDTO) SetSubscriberName(v string) *UnifiedAlarmSubDTO {
	s.SubscriberName = &v
	return s
}

// 菜单配置
type MenuConfig struct {
	// 是否需要在顶部菜单展示各个入口
	ShowTopNavPages *bool `json:"show_top_nav_pages,omitempty" xml:"show_top_nav_pages,omitempty" require:"true"`
	// 需要隐藏的菜单
	HideMenus []*Menu `json:"hide_menus,omitempty" xml:"hide_menus,omitempty" require:"true" type:"Repeated"`
}

func (s MenuConfig) String() string {
	return tea.Prettify(s)
}

func (s MenuConfig) GoString() string {
	return s.String()
}

func (s *MenuConfig) SetShowTopNavPages(v bool) *MenuConfig {
	s.ShowTopNavPages = &v
	return s
}

func (s *MenuConfig) SetHideMenus(v []*Menu) *MenuConfig {
	s.HideMenus = v
	return s
}

// x
type XTableResponse struct {
	//
	ResultType *string `json:"result_type,omitempty" xml:"result_type,omitempty" require:"true"`
	//
	Result []*XTableData `json:"result,omitempty" xml:"result,omitempty" require:"true" type:"Repeated"`
}

func (s XTableResponse) String() string {
	return tea.Prettify(s)
}

func (s XTableResponse) GoString() string {
	return s.String()
}

func (s *XTableResponse) SetResultType(v string) *XTableResponse {
	s.ResultType = &v
	return s
}

func (s *XTableResponse) SetResult(v []*XTableData) *XTableResponse {
	s.Result = v
	return s
}

// OpsCheckResult
type OpsCheckResult struct {
	// 应用名
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
	// 实际实例数
	ActualInstanceNum *int64 `json:"actual_instance_num,omitempty" xml:"actual_instance_num,omitempty" require:"true"`
	// 预期实例数
	ExpectInstanceNum *int64 `json:"expect_instance_num,omitempty" xml:"expect_instance_num,omitempty" require:"true"`
	// 应用监控指标健康数
	AppHealthyNum *int64 `json:"app_healthy_num,omitempty" xml:"app_healthy_num,omitempty" require:"true"`
	//
	// 应用监控指标异常数
	AppUnhealthyNum *int64 `json:"app_unhealthy_num,omitempty" xml:"app_unhealthy_num,omitempty" require:"true"`
	// 自定义监控指标健康数
	CustomHealthyNum *int64 `json:"custom_healthy_num,omitempty" xml:"custom_healthy_num,omitempty" require:"true"`
	// 自定义监控指标异常数
	CustomUnhealthyNum *int64 `json:"custom_unhealthy_num,omitempty" xml:"custom_unhealthy_num,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 规则状态 0：已关闭 1：已开启
	RuleStatus *int64 `json:"rule_status,omitempty" xml:"rule_status,omitempty" require:"true"`
	// rule_id
	RuleId *string `json:"rule_id,omitempty" xml:"rule_id,omitempty"`
}

func (s OpsCheckResult) String() string {
	return tea.Prettify(s)
}

func (s OpsCheckResult) GoString() string {
	return s.String()
}

func (s *OpsCheckResult) SetApp(v string) *OpsCheckResult {
	s.App = &v
	return s
}

func (s *OpsCheckResult) SetActualInstanceNum(v int64) *OpsCheckResult {
	s.ActualInstanceNum = &v
	return s
}

func (s *OpsCheckResult) SetExpectInstanceNum(v int64) *OpsCheckResult {
	s.ExpectInstanceNum = &v
	return s
}

func (s *OpsCheckResult) SetAppHealthyNum(v int64) *OpsCheckResult {
	s.AppHealthyNum = &v
	return s
}

func (s *OpsCheckResult) SetAppUnhealthyNum(v int64) *OpsCheckResult {
	s.AppUnhealthyNum = &v
	return s
}

func (s *OpsCheckResult) SetCustomHealthyNum(v int64) *OpsCheckResult {
	s.CustomHealthyNum = &v
	return s
}

func (s *OpsCheckResult) SetCustomUnhealthyNum(v int64) *OpsCheckResult {
	s.CustomUnhealthyNum = &v
	return s
}

func (s *OpsCheckResult) SetId(v int64) *OpsCheckResult {
	s.Id = &v
	return s
}

func (s *OpsCheckResult) SetRuleStatus(v int64) *OpsCheckResult {
	s.RuleStatus = &v
	return s
}

func (s *OpsCheckResult) SetRuleId(v string) *OpsCheckResult {
	s.RuleId = &v
	return s
}

// WorkspaceSettingDetail
type WorkspaceSettingDetail struct {
	// old_alarm_lang
	OldAlarmLang *string `json:"old_alarm_lang,omitempty" xml:"old_alarm_lang,omitempty"`
	// 旧版告警开关
	OldAlarmEnable *bool `json:"old_alarm_enable,omitempty" xml:"old_alarm_enable,omitempty"`
	// unified_alarm_lang
	UnifiedAlarmLang *string `json:"unified_alarm_lang,omitempty" xml:"unified_alarm_lang,omitempty"`
	// unified_alarm_enable
	UnifiedAlarmEnable *bool `json:"unified_alarm_enable,omitempty" xml:"unified_alarm_enable,omitempty"`
	// trace_enable
	TraceEnable *bool `json:"trace_enable,omitempty" xml:"trace_enable,omitempty"`
	// 监控诊断开关
	DiagnoseEnable *bool `json:"diagnose_enable,omitempty" xml:"diagnose_enable,omitempty"`
}

func (s WorkspaceSettingDetail) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceSettingDetail) GoString() string {
	return s.String()
}

func (s *WorkspaceSettingDetail) SetOldAlarmLang(v string) *WorkspaceSettingDetail {
	s.OldAlarmLang = &v
	return s
}

func (s *WorkspaceSettingDetail) SetOldAlarmEnable(v bool) *WorkspaceSettingDetail {
	s.OldAlarmEnable = &v
	return s
}

func (s *WorkspaceSettingDetail) SetUnifiedAlarmLang(v string) *WorkspaceSettingDetail {
	s.UnifiedAlarmLang = &v
	return s
}

func (s *WorkspaceSettingDetail) SetUnifiedAlarmEnable(v bool) *WorkspaceSettingDetail {
	s.UnifiedAlarmEnable = &v
	return s
}

func (s *WorkspaceSettingDetail) SetTraceEnable(v bool) *WorkspaceSettingDetail {
	s.TraceEnable = &v
	return s
}

func (s *WorkspaceSettingDetail) SetDiagnoseEnable(v bool) *WorkspaceSettingDetail {
	s.DiagnoseEnable = &v
	return s
}

// 告警对象
type AlarmTarget struct {
	// 告警对象标识:
	TargetIdentity *string `json:"target_identity,omitempty" xml:"target_identity,omitempty"`
	// 告警对象类型
	TargetType *string `json:"target_type,omitempty" xml:"target_type,omitempty"`
}

func (s AlarmTarget) String() string {
	return tea.Prettify(s)
}

func (s AlarmTarget) GoString() string {
	return s.String()
}

func (s *AlarmTarget) SetTargetIdentity(v string) *AlarmTarget {
	s.TargetIdentity = &v
	return s
}

func (s *AlarmTarget) SetTargetType(v string) *AlarmTarget {
	s.TargetType = &v
	return s
}

// OneConsoleRegion
type OneConsoleRegion struct {
	// region id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// workspaces
	Workspaces []*OneConsoleWorkspace `json:"workspaces,omitempty" xml:"workspaces,omitempty" require:"true" type:"Repeated"`
}

func (s OneConsoleRegion) String() string {
	return tea.Prettify(s)
}

func (s OneConsoleRegion) GoString() string {
	return s.String()
}

func (s *OneConsoleRegion) SetId(v string) *OneConsoleRegion {
	s.Id = &v
	return s
}

func (s *OneConsoleRegion) SetIdentity(v string) *OneConsoleRegion {
	s.Identity = &v
	return s
}

func (s *OneConsoleRegion) SetName(v string) *OneConsoleRegion {
	s.Name = &v
	return s
}

func (s *OneConsoleRegion) SetWorkspaces(v []*OneConsoleWorkspace) *OneConsoleRegion {
	s.Workspaces = v
	return s
}

// AlarmHistoryStatsVO
type AlarmHistoryStatsVO struct {
	// trends
	Trends []*AlarmHistoryStatsDTOsKeySet `json:"trends,omitempty" xml:"trends,omitempty" require:"true" type:"Repeated"`
}

func (s AlarmHistoryStatsVO) String() string {
	return tea.Prettify(s)
}

func (s AlarmHistoryStatsVO) GoString() string {
	return s.String()
}

func (s *AlarmHistoryStatsVO) SetTrends(v []*AlarmHistoryStatsDTOsKeySet) *AlarmHistoryStatsVO {
	s.Trends = v
	return s
}

// TraasWorkspaceDto
type TraasWorkspaceDto struct {
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// workspace_group_uuid
	WorkspaceGroupUuid *string `json:"workspace_group_uuid,omitempty" xml:"workspace_group_uuid,omitempty"`
	// region_uuid
	RegionUuid *string `json:"region_uuid,omitempty" xml:"region_uuid,omitempty"`
	// zone_uuids
	ZoneUuids []*string `json:"zone_uuids,omitempty" xml:"zone_uuids,omitempty" type:"Repeated"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s TraasWorkspaceDto) String() string {
	return tea.Prettify(s)
}

func (s TraasWorkspaceDto) GoString() string {
	return s.String()
}

func (s *TraasWorkspaceDto) SetUuid(v string) *TraasWorkspaceDto {
	s.Uuid = &v
	return s
}

func (s *TraasWorkspaceDto) SetName(v string) *TraasWorkspaceDto {
	s.Name = &v
	return s
}

func (s *TraasWorkspaceDto) SetDisplayName(v string) *TraasWorkspaceDto {
	s.DisplayName = &v
	return s
}

func (s *TraasWorkspaceDto) SetTenantUuid(v string) *TraasWorkspaceDto {
	s.TenantUuid = &v
	return s
}

func (s *TraasWorkspaceDto) SetTenantName(v string) *TraasWorkspaceDto {
	s.TenantName = &v
	return s
}

func (s *TraasWorkspaceDto) SetWorkspaceGroupUuid(v string) *TraasWorkspaceDto {
	s.WorkspaceGroupUuid = &v
	return s
}

func (s *TraasWorkspaceDto) SetRegionUuid(v string) *TraasWorkspaceDto {
	s.RegionUuid = &v
	return s
}

func (s *TraasWorkspaceDto) SetZoneUuids(v []*string) *TraasWorkspaceDto {
	s.ZoneUuids = v
	return s
}

func (s *TraasWorkspaceDto) SetOutsideId(v string) *TraasWorkspaceDto {
	s.OutsideId = &v
	return s
}

func (s *TraasWorkspaceDto) SetSourceFrom(v string) *TraasWorkspaceDto {
	s.SourceFrom = &v
	return s
}

func (s *TraasWorkspaceDto) SetExtension(v string) *TraasWorkspaceDto {
	s.Extension = &v
	return s
}

func (s *TraasWorkspaceDto) SetGmtCreate(v string) *TraasWorkspaceDto {
	s.GmtCreate = &v
	return s
}

func (s *TraasWorkspaceDto) SetGmtModified(v string) *TraasWorkspaceDto {
	s.GmtModified = &v
	return s
}

// 告警订阅结构体
type AlarmSub struct {
	// 主键 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 用户登录名
	UserLoginName *string `json:"user_login_name,omitempty" xml:"user_login_name,omitempty"`
	// 告警组 ID
	UserGroupId *int64 `json:"user_group_id,omitempty" xml:"user_group_id,omitempty"`
	// the notifyChannel
	NotifyChannel *string `json:"notify_channel,omitempty" xml:"notify_channel,omitempty"`
	// 告警套餐 ID
	AlarmPkgId *int64 `json:"alarm_pkg_id,omitempty" xml:"alarm_pkg_id,omitempty"`
	// 自定义监控 ID
	CustomPluginId *int64 `json:"custom_plugin_id,omitempty" xml:"custom_plugin_id,omitempty"`
	// the stackAlarmRuleId
	StackAlarmRuleId *int64 `json:"stack_alarm_rule_id,omitempty" xml:"stack_alarm_rule_id,omitempty"`
	// 文件夹 ID
	FolderId *int64 `json:"folder_id,omitempty" xml:"folder_id,omitempty"`
	// the metaGroupId
	MetaGroupId *int64 `json:"meta_group_id,omitempty" xml:"meta_group_id,omitempty"`
	// 技术栈实体
	StackUniversalTableId *string `json:"stack_universal_table_id,omitempty" xml:"stack_universal_table_id,omitempty"`
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	// 创建者
	Creater *string `json:"creater,omitempty" xml:"creater,omitempty" require:"true"`
	// 修改人
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// 告警级别
	AlarmLevel *int64 `json:"alarm_level,omitempty" xml:"alarm_level,omitempty" require:"true"`
	// 降频通知开关
	NotifyReduceSwitch *int64 `json:"notify_reduce_switch,omitempty" xml:"notify_reduce_switch,omitempty" require:"true"`
	// web hook id
	AlarmHttpWebHookId *int64 `json:"alarm_http_web_hook_id,omitempty" xml:"alarm_http_web_hook_id,omitempty"`
}

func (s AlarmSub) String() string {
	return tea.Prettify(s)
}

func (s AlarmSub) GoString() string {
	return s.String()
}

func (s *AlarmSub) SetId(v int64) *AlarmSub {
	s.Id = &v
	return s
}

func (s *AlarmSub) SetUserLoginName(v string) *AlarmSub {
	s.UserLoginName = &v
	return s
}

func (s *AlarmSub) SetUserGroupId(v int64) *AlarmSub {
	s.UserGroupId = &v
	return s
}

func (s *AlarmSub) SetNotifyChannel(v string) *AlarmSub {
	s.NotifyChannel = &v
	return s
}

func (s *AlarmSub) SetAlarmPkgId(v int64) *AlarmSub {
	s.AlarmPkgId = &v
	return s
}

func (s *AlarmSub) SetCustomPluginId(v int64) *AlarmSub {
	s.CustomPluginId = &v
	return s
}

func (s *AlarmSub) SetStackAlarmRuleId(v int64) *AlarmSub {
	s.StackAlarmRuleId = &v
	return s
}

func (s *AlarmSub) SetFolderId(v int64) *AlarmSub {
	s.FolderId = &v
	return s
}

func (s *AlarmSub) SetMetaGroupId(v int64) *AlarmSub {
	s.MetaGroupId = &v
	return s
}

func (s *AlarmSub) SetStackUniversalTableId(v string) *AlarmSub {
	s.StackUniversalTableId = &v
	return s
}

func (s *AlarmSub) SetGmtCreate(v int64) *AlarmSub {
	s.GmtCreate = &v
	return s
}

func (s *AlarmSub) SetGmtModified(v int64) *AlarmSub {
	s.GmtModified = &v
	return s
}

func (s *AlarmSub) SetCreater(v string) *AlarmSub {
	s.Creater = &v
	return s
}

func (s *AlarmSub) SetModifier(v string) *AlarmSub {
	s.Modifier = &v
	return s
}

func (s *AlarmSub) SetAlarmLevel(v int64) *AlarmSub {
	s.AlarmLevel = &v
	return s
}

func (s *AlarmSub) SetNotifyReduceSwitch(v int64) *AlarmSub {
	s.NotifyReduceSwitch = &v
	return s
}

func (s *AlarmSub) SetAlarmHttpWebHookId(v int64) *AlarmSub {
	s.AlarmHttpWebHookId = &v
	return s
}

// 拉取日志的返回对象
type LogTail struct {
	// 代理IP
	Agent *string `json:"agent,omitempty" xml:"agent,omitempty" require:"true"`
	// 应用名
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
	// 日志行数据
	Lines []*string `json:"lines,omitempty" xml:"lines,omitempty" require:"true" type:"Repeated"`
	// collectId
	Nc *string `json:"nc,omitempty" xml:"nc,omitempty" require:"true"`
}

func (s LogTail) String() string {
	return tea.Prettify(s)
}

func (s LogTail) GoString() string {
	return s.String()
}

func (s *LogTail) SetAgent(v string) *LogTail {
	s.Agent = &v
	return s
}

func (s *LogTail) SetApp(v string) *LogTail {
	s.App = &v
	return s
}

func (s *LogTail) SetLines(v []*string) *LogTail {
	s.Lines = v
	return s
}

func (s *LogTail) SetNc(v string) *LogTail {
	s.Nc = &v
	return s
}

// 时序指标数据, 相当于一条时间线
type TimeSeriesMetrics struct {
	// 开始时间, 毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty"`
	// 结束时间, 毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty"`
	// 标识 metrics，类似 sql 查询条件
	Tags []*KeyValuePair `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	// 指标的分类
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// Metrics 多个 point 的集合
	Values []*TimeSeriesMetricsPoint `json:"values,omitempty" xml:"values,omitempty" type:"Repeated"`
}

func (s TimeSeriesMetrics) String() string {
	return tea.Prettify(s)
}

func (s TimeSeriesMetrics) GoString() string {
	return s.String()
}

func (s *TimeSeriesMetrics) SetStartTime(v int64) *TimeSeriesMetrics {
	s.StartTime = &v
	return s
}

func (s *TimeSeriesMetrics) SetEndTime(v int64) *TimeSeriesMetrics {
	s.EndTime = &v
	return s
}

func (s *TimeSeriesMetrics) SetTags(v []*KeyValuePair) *TimeSeriesMetrics {
	s.Tags = v
	return s
}

func (s *TimeSeriesMetrics) SetType(v string) *TimeSeriesMetrics {
	s.Type = &v
	return s
}

func (s *TimeSeriesMetrics) SetValues(v []*TimeSeriesMetricsPoint) *TimeSeriesMetrics {
	s.Values = v
	return s
}

type QueryRmsAgentloglocateRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// batch_ip_files
	BatchIpFiles []*IpFileOs `json:"batch_ip_files,omitempty" xml:"batch_ip_files,omitempty" require:"true" type:"Repeated"`
	// charset_str
	CharsetStr *string `json:"charset_str,omitempty" xml:"charset_str,omitempty" require:"true"`
	// error_msg
	ErrorMsg *string `json:"error_msg,omitempty" xml:"error_msg,omitempty" require:"true"`
	// ips
	Ips []*string `json:"ips,omitempty" xml:"ips,omitempty" require:"true" type:"Repeated"`
	// ip_file
	IpFile *IpFileOs `json:"ip_file,omitempty" xml:"ip_file,omitempty" require:"true"`
	// is_batch
	IsBatch *bool `json:"is_batch,omitempty" xml:"is_batch,omitempty" require:"true"`
	// log_path
	LogPath *string `json:"log_path,omitempty" xml:"log_path,omitempty" require:"true"`
	// log_paths
	LogPaths []*string `json:"log_paths,omitempty" xml:"log_paths,omitempty" require:"true" type:"Repeated"`
	// time
	Time *int64 `json:"time,omitempty" xml:"time,omitempty" require:"true"`
}

func (s QueryRmsAgentloglocateRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAgentloglocateRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsAgentloglocateRequest) SetAuthToken(v string) *QueryRmsAgentloglocateRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsAgentloglocateRequest) SetAppId(v string) *QueryRmsAgentloglocateRequest {
	s.AppId = &v
	return s
}

func (s *QueryRmsAgentloglocateRequest) SetBatchIpFiles(v []*IpFileOs) *QueryRmsAgentloglocateRequest {
	s.BatchIpFiles = v
	return s
}

func (s *QueryRmsAgentloglocateRequest) SetCharsetStr(v string) *QueryRmsAgentloglocateRequest {
	s.CharsetStr = &v
	return s
}

func (s *QueryRmsAgentloglocateRequest) SetErrorMsg(v string) *QueryRmsAgentloglocateRequest {
	s.ErrorMsg = &v
	return s
}

func (s *QueryRmsAgentloglocateRequest) SetIps(v []*string) *QueryRmsAgentloglocateRequest {
	s.Ips = v
	return s
}

func (s *QueryRmsAgentloglocateRequest) SetIpFile(v *IpFileOs) *QueryRmsAgentloglocateRequest {
	s.IpFile = v
	return s
}

func (s *QueryRmsAgentloglocateRequest) SetIsBatch(v bool) *QueryRmsAgentloglocateRequest {
	s.IsBatch = &v
	return s
}

func (s *QueryRmsAgentloglocateRequest) SetLogPath(v string) *QueryRmsAgentloglocateRequest {
	s.LogPath = &v
	return s
}

func (s *QueryRmsAgentloglocateRequest) SetLogPaths(v []*string) *QueryRmsAgentloglocateRequest {
	s.LogPaths = v
	return s
}

func (s *QueryRmsAgentloglocateRequest) SetTime(v int64) *QueryRmsAgentloglocateRequest {
	s.Time = &v
	return s
}

type QueryRmsAgentloglocateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// error_message
	ErrorMessage *CallErrorMessage `json:"error_message,omitempty" xml:"error_message,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryRmsAgentloglocateResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAgentloglocateResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsAgentloglocateResponse) SetReqMsgId(v string) *QueryRmsAgentloglocateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsAgentloglocateResponse) SetResultCode(v string) *QueryRmsAgentloglocateResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsAgentloglocateResponse) SetResultMsg(v string) *QueryRmsAgentloglocateResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsAgentloglocateResponse) SetSuccess(v bool) *QueryRmsAgentloglocateResponse {
	s.Success = &v
	return s
}

func (s *QueryRmsAgentloglocateResponse) SetErrorMessage(v *CallErrorMessage) *QueryRmsAgentloglocateResponse {
	s.ErrorMessage = v
	return s
}

func (s *QueryRmsAgentloglocateResponse) SetResult(v string) *QueryRmsAgentloglocateResponse {
	s.Result = &v
	return s
}

type QueryRmsAgenttailRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// prefer_host
	PreferHost *string `json:"prefer_host,omitempty" xml:"prefer_host,omitempty" require:"true"`
	// full_path
	FullPath *string `json:"full_path,omitempty" xml:"full_path,omitempty" require:"true"`
	// scan_dirs
	ScanDirs []*string `json:"scan_dirs,omitempty" xml:"scan_dirs,omitempty" require:"true" type:"Repeated"`
	// need_bytes
	NeedBytes *int64 `json:"need_bytes,omitempty" xml:"need_bytes,omitempty" require:"true"`
	// line_break_str
	LineBreakStr *string `json:"line_break_str,omitempty" xml:"line_break_str,omitempty" require:"true"`
	// extra_suffixs
	ExtraSuffixs []*string `json:"extra_suffixs,omitempty" xml:"extra_suffixs,omitempty" require:"true" type:"Repeated"`
	// charset_str
	CharsetStr *string `json:"charset_str,omitempty" xml:"charset_str,omitempty" require:"true"`
}

func (s QueryRmsAgenttailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAgenttailRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsAgenttailRequest) SetAuthToken(v string) *QueryRmsAgenttailRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsAgenttailRequest) SetTenantId(v string) *QueryRmsAgenttailRequest {
	s.TenantId = &v
	return s
}

func (s *QueryRmsAgenttailRequest) SetAppName(v string) *QueryRmsAgenttailRequest {
	s.AppName = &v
	return s
}

func (s *QueryRmsAgenttailRequest) SetPreferHost(v string) *QueryRmsAgenttailRequest {
	s.PreferHost = &v
	return s
}

func (s *QueryRmsAgenttailRequest) SetFullPath(v string) *QueryRmsAgenttailRequest {
	s.FullPath = &v
	return s
}

func (s *QueryRmsAgenttailRequest) SetScanDirs(v []*string) *QueryRmsAgenttailRequest {
	s.ScanDirs = v
	return s
}

func (s *QueryRmsAgenttailRequest) SetNeedBytes(v int64) *QueryRmsAgenttailRequest {
	s.NeedBytes = &v
	return s
}

func (s *QueryRmsAgenttailRequest) SetLineBreakStr(v string) *QueryRmsAgenttailRequest {
	s.LineBreakStr = &v
	return s
}

func (s *QueryRmsAgenttailRequest) SetExtraSuffixs(v []*string) *QueryRmsAgenttailRequest {
	s.ExtraSuffixs = v
	return s
}

func (s *QueryRmsAgenttailRequest) SetCharsetStr(v string) *QueryRmsAgenttailRequest {
	s.CharsetStr = &v
	return s
}

type QueryRmsAgenttailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// error_message
	ErrorMessage *CallErrorMessage `json:"error_message,omitempty" xml:"error_message,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryRmsAgenttailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAgenttailResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsAgenttailResponse) SetReqMsgId(v string) *QueryRmsAgenttailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsAgenttailResponse) SetResultCode(v string) *QueryRmsAgenttailResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsAgenttailResponse) SetResultMsg(v string) *QueryRmsAgenttailResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsAgenttailResponse) SetSuccess(v bool) *QueryRmsAgenttailResponse {
	s.Success = &v
	return s
}

func (s *QueryRmsAgenttailResponse) SetErrorMessage(v *CallErrorMessage) *QueryRmsAgenttailResponse {
	s.ErrorMessage = v
	return s
}

func (s *QueryRmsAgenttailResponse) SetResult(v string) *QueryRmsAgenttailResponse {
	s.Result = &v
	return s
}

type QueryRmsAgentbrowserRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// extra_suffixs
	ExtraSuffixs []*string `json:"extra_suffixs,omitempty" xml:"extra_suffixs,omitempty" require:"true" type:"Repeated"`
	// scan_dirs
	ScanDirs []*string `json:"scan_dirs,omitempty" xml:"scan_dirs,omitempty" require:"true" type:"Repeated"`
	// prefer_host
	PreferHost *string `json:"prefer_host,omitempty" xml:"prefer_host,omitempty" require:"true"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
}

func (s QueryRmsAgentbrowserRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAgentbrowserRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsAgentbrowserRequest) SetAuthToken(v string) *QueryRmsAgentbrowserRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsAgentbrowserRequest) SetAppName(v string) *QueryRmsAgentbrowserRequest {
	s.AppName = &v
	return s
}

func (s *QueryRmsAgentbrowserRequest) SetExtraSuffixs(v []*string) *QueryRmsAgentbrowserRequest {
	s.ExtraSuffixs = v
	return s
}

func (s *QueryRmsAgentbrowserRequest) SetScanDirs(v []*string) *QueryRmsAgentbrowserRequest {
	s.ScanDirs = v
	return s
}

func (s *QueryRmsAgentbrowserRequest) SetPreferHost(v string) *QueryRmsAgentbrowserRequest {
	s.PreferHost = &v
	return s
}

func (s *QueryRmsAgentbrowserRequest) SetTenantId(v string) *QueryRmsAgentbrowserRequest {
	s.TenantId = &v
	return s
}

type QueryRmsAgentbrowserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// error_message
	ErrorMessage *CallErrorMessage `json:"error_message,omitempty" xml:"error_message,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryRmsAgentbrowserResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAgentbrowserResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsAgentbrowserResponse) SetReqMsgId(v string) *QueryRmsAgentbrowserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsAgentbrowserResponse) SetResultCode(v string) *QueryRmsAgentbrowserResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsAgentbrowserResponse) SetResultMsg(v string) *QueryRmsAgentbrowserResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsAgentbrowserResponse) SetSuccess(v bool) *QueryRmsAgentbrowserResponse {
	s.Success = &v
	return s
}

func (s *QueryRmsAgentbrowserResponse) SetErrorMessage(v *CallErrorMessage) *QueryRmsAgentbrowserResponse {
	s.ErrorMessage = v
	return s
}

func (s *QueryRmsAgentbrowserResponse) SetResult(v string) *QueryRmsAgentbrowserResponse {
	s.Result = &v
	return s
}

type QueryRmsAlarmhistorytypeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// from
	From *int64 `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// to
	To *int64 `json:"to,omitempty" xml:"to,omitempty" require:"true"`
}

func (s QueryRmsAlarmhistorytypeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAlarmhistorytypeRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsAlarmhistorytypeRequest) SetAuthToken(v string) *QueryRmsAlarmhistorytypeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsAlarmhistorytypeRequest) SetFrom(v int64) *QueryRmsAlarmhistorytypeRequest {
	s.From = &v
	return s
}

func (s *QueryRmsAlarmhistorytypeRequest) SetTo(v int64) *QueryRmsAlarmhistorytypeRequest {
	s.To = &v
	return s
}

type QueryRmsAlarmhistorytypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*AlarmTypeStatsVOKeySet `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s QueryRmsAlarmhistorytypeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAlarmhistorytypeResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsAlarmhistorytypeResponse) SetReqMsgId(v string) *QueryRmsAlarmhistorytypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsAlarmhistorytypeResponse) SetResultCode(v string) *QueryRmsAlarmhistorytypeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsAlarmhistorytypeResponse) SetResultMsg(v string) *QueryRmsAlarmhistorytypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsAlarmhistorytypeResponse) SetData(v []*AlarmTypeStatsVOKeySet) *QueryRmsAlarmhistorytypeResponse {
	s.Data = v
	return s
}

func (s *QueryRmsAlarmhistorytypeResponse) SetErrorCode(v string) *QueryRmsAlarmhistorytypeResponse {
	s.ErrorCode = &v
	return s
}

func (s *QueryRmsAlarmhistorytypeResponse) SetRid(v string) *QueryRmsAlarmhistorytypeResponse {
	s.Rid = &v
	return s
}

func (s *QueryRmsAlarmhistorytypeResponse) SetSuccess(v bool) *QueryRmsAlarmhistorytypeResponse {
	s.Success = &v
	return s
}

type QueryRmsAlarmhistorylevelRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// from
	From *int64 `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// to
	To *int64 `json:"to,omitempty" xml:"to,omitempty" require:"true"`
}

func (s QueryRmsAlarmhistorylevelRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAlarmhistorylevelRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsAlarmhistorylevelRequest) SetAuthToken(v string) *QueryRmsAlarmhistorylevelRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsAlarmhistorylevelRequest) SetFrom(v int64) *QueryRmsAlarmhistorylevelRequest {
	s.From = &v
	return s
}

func (s *QueryRmsAlarmhistorylevelRequest) SetTo(v int64) *QueryRmsAlarmhistorylevelRequest {
	s.To = &v
	return s
}

type QueryRmsAlarmhistorylevelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*AlarmLevelStatsVOKeySet `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s QueryRmsAlarmhistorylevelResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAlarmhistorylevelResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsAlarmhistorylevelResponse) SetReqMsgId(v string) *QueryRmsAlarmhistorylevelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsAlarmhistorylevelResponse) SetResultCode(v string) *QueryRmsAlarmhistorylevelResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsAlarmhistorylevelResponse) SetResultMsg(v string) *QueryRmsAlarmhistorylevelResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsAlarmhistorylevelResponse) SetData(v []*AlarmLevelStatsVOKeySet) *QueryRmsAlarmhistorylevelResponse {
	s.Data = v
	return s
}

func (s *QueryRmsAlarmhistorylevelResponse) SetErrorCode(v string) *QueryRmsAlarmhistorylevelResponse {
	s.ErrorCode = &v
	return s
}

func (s *QueryRmsAlarmhistorylevelResponse) SetRid(v string) *QueryRmsAlarmhistorylevelResponse {
	s.Rid = &v
	return s
}

func (s *QueryRmsAlarmhistorylevelResponse) SetSuccess(v bool) *QueryRmsAlarmhistorylevelResponse {
	s.Success = &v
	return s
}

type QueryRmsNotifyhistoryRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// from
	From *int64 `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// login_name
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty" require:"true"`
	// to
	To *int64 `json:"to,omitempty" xml:"to,omitempty" require:"true"`
}

func (s QueryRmsNotifyhistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsNotifyhistoryRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsNotifyhistoryRequest) SetAuthToken(v string) *QueryRmsNotifyhistoryRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsNotifyhistoryRequest) SetFrom(v int64) *QueryRmsNotifyhistoryRequest {
	s.From = &v
	return s
}

func (s *QueryRmsNotifyhistoryRequest) SetLoginName(v string) *QueryRmsNotifyhistoryRequest {
	s.LoginName = &v
	return s
}

func (s *QueryRmsNotifyhistoryRequest) SetTo(v int64) *QueryRmsNotifyhistoryRequest {
	s.To = &v
	return s
}

type QueryRmsNotifyhistoryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*AlarmNotifyStats `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s QueryRmsNotifyhistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsNotifyhistoryResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsNotifyhistoryResponse) SetReqMsgId(v string) *QueryRmsNotifyhistoryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsNotifyhistoryResponse) SetResultCode(v string) *QueryRmsNotifyhistoryResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsNotifyhistoryResponse) SetResultMsg(v string) *QueryRmsNotifyhistoryResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsNotifyhistoryResponse) SetData(v []*AlarmNotifyStats) *QueryRmsNotifyhistoryResponse {
	s.Data = v
	return s
}

func (s *QueryRmsNotifyhistoryResponse) SetErrorCode(v string) *QueryRmsNotifyhistoryResponse {
	s.ErrorCode = &v
	return s
}

func (s *QueryRmsNotifyhistoryResponse) SetRid(v string) *QueryRmsNotifyhistoryResponse {
	s.Rid = &v
	return s
}

func (s *QueryRmsNotifyhistoryResponse) SetSuccess(v bool) *QueryRmsNotifyhistoryResponse {
	s.Success = &v
	return s
}

type QueryRmsStackentityRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s QueryRmsStackentityRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsStackentityRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsStackentityRequest) SetAuthToken(v string) *QueryRmsStackentityRequest {
	s.AuthToken = &v
	return s
}

type QueryRmsStackentityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*LongKeySet `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s QueryRmsStackentityResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsStackentityResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsStackentityResponse) SetReqMsgId(v string) *QueryRmsStackentityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsStackentityResponse) SetResultCode(v string) *QueryRmsStackentityResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsStackentityResponse) SetResultMsg(v string) *QueryRmsStackentityResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsStackentityResponse) SetData(v []*LongKeySet) *QueryRmsStackentityResponse {
	s.Data = v
	return s
}

func (s *QueryRmsStackentityResponse) SetErrorCode(v string) *QueryRmsStackentityResponse {
	s.ErrorCode = &v
	return s
}

func (s *QueryRmsStackentityResponse) SetRid(v string) *QueryRmsStackentityResponse {
	s.Rid = &v
	return s
}

func (s *QueryRmsStackentityResponse) SetSuccess(v bool) *QueryRmsStackentityResponse {
	s.Success = &v
	return s
}

type QueryRmsAlarmhistoryappcountRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_list
	AppList *AppStats `json:"app_list,omitempty" xml:"app_list,omitempty" require:"true"`
	// from
	From *int64 `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// to
	To *int64 `json:"to,omitempty" xml:"to,omitempty" require:"true"`
}

func (s QueryRmsAlarmhistoryappcountRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAlarmhistoryappcountRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsAlarmhistoryappcountRequest) SetAuthToken(v string) *QueryRmsAlarmhistoryappcountRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsAlarmhistoryappcountRequest) SetAppList(v *AppStats) *QueryRmsAlarmhistoryappcountRequest {
	s.AppList = v
	return s
}

func (s *QueryRmsAlarmhistoryappcountRequest) SetFrom(v int64) *QueryRmsAlarmhistoryappcountRequest {
	s.From = &v
	return s
}

func (s *QueryRmsAlarmhistoryappcountRequest) SetTo(v int64) *QueryRmsAlarmhistoryappcountRequest {
	s.To = &v
	return s
}

type QueryRmsAlarmhistoryappcountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*AlarmAppStats `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s QueryRmsAlarmhistoryappcountResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAlarmhistoryappcountResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsAlarmhistoryappcountResponse) SetReqMsgId(v string) *QueryRmsAlarmhistoryappcountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsAlarmhistoryappcountResponse) SetResultCode(v string) *QueryRmsAlarmhistoryappcountResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsAlarmhistoryappcountResponse) SetResultMsg(v string) *QueryRmsAlarmhistoryappcountResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsAlarmhistoryappcountResponse) SetData(v []*AlarmAppStats) *QueryRmsAlarmhistoryappcountResponse {
	s.Data = v
	return s
}

func (s *QueryRmsAlarmhistoryappcountResponse) SetErrorCode(v string) *QueryRmsAlarmhistoryappcountResponse {
	s.ErrorCode = &v
	return s
}

func (s *QueryRmsAlarmhistoryappcountResponse) SetRid(v string) *QueryRmsAlarmhistoryappcountResponse {
	s.Rid = &v
	return s
}

func (s *QueryRmsAlarmhistoryappcountResponse) SetSuccess(v bool) *QueryRmsAlarmhistoryappcountResponse {
	s.Success = &v
	return s
}

type QueryRmsAlarmhistoryappstatsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_list
	AppList *AppStats `json:"app_list,omitempty" xml:"app_list,omitempty" require:"true"`
	// from
	From *int64 `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// to
	To *int64 `json:"to,omitempty" xml:"to,omitempty" require:"true"`
}

func (s QueryRmsAlarmhistoryappstatsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAlarmhistoryappstatsRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsAlarmhistoryappstatsRequest) SetAuthToken(v string) *QueryRmsAlarmhistoryappstatsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsAlarmhistoryappstatsRequest) SetAppList(v *AppStats) *QueryRmsAlarmhistoryappstatsRequest {
	s.AppList = v
	return s
}

func (s *QueryRmsAlarmhistoryappstatsRequest) SetFrom(v int64) *QueryRmsAlarmhistoryappstatsRequest {
	s.From = &v
	return s
}

func (s *QueryRmsAlarmhistoryappstatsRequest) SetTo(v int64) *QueryRmsAlarmhistoryappstatsRequest {
	s.To = &v
	return s
}

type QueryRmsAlarmhistoryappstatsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*AlarmHistoryListKeySetMap `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s QueryRmsAlarmhistoryappstatsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAlarmhistoryappstatsResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsAlarmhistoryappstatsResponse) SetReqMsgId(v string) *QueryRmsAlarmhistoryappstatsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsAlarmhistoryappstatsResponse) SetResultCode(v string) *QueryRmsAlarmhistoryappstatsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsAlarmhistoryappstatsResponse) SetResultMsg(v string) *QueryRmsAlarmhistoryappstatsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsAlarmhistoryappstatsResponse) SetData(v []*AlarmHistoryListKeySetMap) *QueryRmsAlarmhistoryappstatsResponse {
	s.Data = v
	return s
}

func (s *QueryRmsAlarmhistoryappstatsResponse) SetErrorCode(v string) *QueryRmsAlarmhistoryappstatsResponse {
	s.ErrorCode = &v
	return s
}

func (s *QueryRmsAlarmhistoryappstatsResponse) SetRid(v string) *QueryRmsAlarmhistoryappstatsResponse {
	s.Rid = &v
	return s
}

func (s *QueryRmsAlarmhistoryappstatsResponse) SetSuccess(v bool) *QueryRmsAlarmhistoryappstatsResponse {
	s.Success = &v
	return s
}

type QueryRmsAppstatspageableRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_list
	AppList *AppStats `json:"app_list,omitempty" xml:"app_list,omitempty" require:"true"`
	// from
	From *int64 `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// to
	To *int64 `json:"to,omitempty" xml:"to,omitempty" require:"true"`
}

func (s QueryRmsAppstatspageableRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAppstatspageableRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsAppstatspageableRequest) SetAuthToken(v string) *QueryRmsAppstatspageableRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsAppstatspageableRequest) SetAppList(v *AppStats) *QueryRmsAppstatspageableRequest {
	s.AppList = v
	return s
}

func (s *QueryRmsAppstatspageableRequest) SetFrom(v int64) *QueryRmsAppstatspageableRequest {
	s.From = &v
	return s
}

func (s *QueryRmsAppstatspageableRequest) SetTo(v int64) *QueryRmsAppstatspageableRequest {
	s.To = &v
	return s
}

type QueryRmsAppstatspageableResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*AlarmHistoryListKeySetMap `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s QueryRmsAppstatspageableResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsAppstatspageableResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsAppstatspageableResponse) SetReqMsgId(v string) *QueryRmsAppstatspageableResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsAppstatspageableResponse) SetResultCode(v string) *QueryRmsAppstatspageableResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsAppstatspageableResponse) SetResultMsg(v string) *QueryRmsAppstatspageableResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsAppstatspageableResponse) SetData(v []*AlarmHistoryListKeySetMap) *QueryRmsAppstatspageableResponse {
	s.Data = v
	return s
}

func (s *QueryRmsAppstatspageableResponse) SetErrorCode(v string) *QueryRmsAppstatspageableResponse {
	s.ErrorCode = &v
	return s
}

func (s *QueryRmsAppstatspageableResponse) SetRid(v string) *QueryRmsAppstatspageableResponse {
	s.Rid = &v
	return s
}

func (s *QueryRmsAppstatspageableResponse) SetSuccess(v bool) *QueryRmsAppstatspageableResponse {
	s.Success = &v
	return s
}

type QueryRmsLogreaderrorRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
	// time
	Time *int64 `json:"time,omitempty" xml:"time,omitempty" require:"true"`
}

func (s QueryRmsLogreaderrorRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsLogreaderrorRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsLogreaderrorRequest) SetAuthToken(v string) *QueryRmsLogreaderrorRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsLogreaderrorRequest) SetApp(v string) *QueryRmsLogreaderrorRequest {
	s.App = &v
	return s
}

func (s *QueryRmsLogreaderrorRequest) SetTime(v int64) *QueryRmsLogreaderrorRequest {
	s.Time = &v
	return s
}

type QueryRmsLogreaderrorResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *ErrorRealte `json:"data,omitempty" xml:"data,omitempty"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s QueryRmsLogreaderrorResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsLogreaderrorResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsLogreaderrorResponse) SetReqMsgId(v string) *QueryRmsLogreaderrorResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsLogreaderrorResponse) SetResultCode(v string) *QueryRmsLogreaderrorResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsLogreaderrorResponse) SetResultMsg(v string) *QueryRmsLogreaderrorResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsLogreaderrorResponse) SetData(v *ErrorRealte) *QueryRmsLogreaderrorResponse {
	s.Data = v
	return s
}

func (s *QueryRmsLogreaderrorResponse) SetErrorCode(v string) *QueryRmsLogreaderrorResponse {
	s.ErrorCode = &v
	return s
}

func (s *QueryRmsLogreaderrorResponse) SetRid(v string) *QueryRmsLogreaderrorResponse {
	s.Rid = &v
	return s
}

func (s *QueryRmsLogreaderrorResponse) SetSuccess(v bool) *QueryRmsLogreaderrorResponse {
	s.Success = &v
	return s
}

type QueryRmsUniversalreadRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cmds
	Cmds []*UniversalBodyCmd `json:"cmds,omitempty" xml:"cmds,omitempty" require:"true" type:"Repeated"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
}

func (s QueryRmsUniversalreadRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsUniversalreadRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsUniversalreadRequest) SetAuthToken(v string) *QueryRmsUniversalreadRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsUniversalreadRequest) SetCmds(v []*UniversalBodyCmd) *QueryRmsUniversalreadRequest {
	s.Cmds = v
	return s
}

func (s *QueryRmsUniversalreadRequest) SetRid(v string) *QueryRmsUniversalreadRequest {
	s.Rid = &v
	return s
}

type QueryRmsUniversalreadResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s QueryRmsUniversalreadResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsUniversalreadResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsUniversalreadResponse) SetReqMsgId(v string) *QueryRmsUniversalreadResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsUniversalreadResponse) SetResultCode(v string) *QueryRmsUniversalreadResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsUniversalreadResponse) SetResultMsg(v string) *QueryRmsUniversalreadResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsUniversalreadResponse) SetData(v []*string) *QueryRmsUniversalreadResponse {
	s.Data = v
	return s
}

func (s *QueryRmsUniversalreadResponse) SetErrorCode(v string) *QueryRmsUniversalreadResponse {
	s.ErrorCode = &v
	return s
}

func (s *QueryRmsUniversalreadResponse) SetRid(v string) *QueryRmsUniversalreadResponse {
	s.Rid = &v
	return s
}

func (s *QueryRmsUniversalreadResponse) SetSuccess(v bool) *QueryRmsUniversalreadResponse {
	s.Success = &v
	return s
}

type QueryRmsUniversalwriteRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cmds
	Cmds []*UniversalBodyCmd `json:"cmds,omitempty" xml:"cmds,omitempty" require:"true" type:"Repeated"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty" require:"true"`
}

func (s QueryRmsUniversalwriteRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsUniversalwriteRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsUniversalwriteRequest) SetAuthToken(v string) *QueryRmsUniversalwriteRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsUniversalwriteRequest) SetCmds(v []*UniversalBodyCmd) *QueryRmsUniversalwriteRequest {
	s.Cmds = v
	return s
}

func (s *QueryRmsUniversalwriteRequest) SetRid(v string) *QueryRmsUniversalwriteRequest {
	s.Rid = &v
	return s
}

type QueryRmsUniversalwriteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s QueryRmsUniversalwriteResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsUniversalwriteResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsUniversalwriteResponse) SetReqMsgId(v string) *QueryRmsUniversalwriteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsUniversalwriteResponse) SetResultCode(v string) *QueryRmsUniversalwriteResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsUniversalwriteResponse) SetResultMsg(v string) *QueryRmsUniversalwriteResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsUniversalwriteResponse) SetData(v []*string) *QueryRmsUniversalwriteResponse {
	s.Data = v
	return s
}

func (s *QueryRmsUniversalwriteResponse) SetErrorCode(v string) *QueryRmsUniversalwriteResponse {
	s.ErrorCode = &v
	return s
}

func (s *QueryRmsUniversalwriteResponse) SetRid(v string) *QueryRmsUniversalwriteResponse {
	s.Rid = &v
	return s
}

func (s *QueryRmsUniversalwriteResponse) SetSuccess(v bool) *QueryRmsUniversalwriteResponse {
	s.Success = &v
	return s
}

type CreateRmsPluginRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// body
	Body *string `json:"body,omitempty" xml:"body,omitempty" require:"true"`
	// file_id
	FileId *int64 `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// outside_bizdomain
	OutsideBizdomain *string `json:"outside_bizdomain,omitempty" xml:"outside_bizdomain,omitempty" require:"true"`
	// plugin_id
	PluginId *int64 `json:"plugin_id,omitempty" xml:"plugin_id,omitempty" require:"true"`
	// table
	Table *string `json:"table,omitempty" xml:"table,omitempty" require:"true"`
}

func (s CreateRmsPluginRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRmsPluginRequest) GoString() string {
	return s.String()
}

func (s *CreateRmsPluginRequest) SetAuthToken(v string) *CreateRmsPluginRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateRmsPluginRequest) SetBody(v string) *CreateRmsPluginRequest {
	s.Body = &v
	return s
}

func (s *CreateRmsPluginRequest) SetFileId(v int64) *CreateRmsPluginRequest {
	s.FileId = &v
	return s
}

func (s *CreateRmsPluginRequest) SetId(v int64) *CreateRmsPluginRequest {
	s.Id = &v
	return s
}

func (s *CreateRmsPluginRequest) SetOutsideBizdomain(v string) *CreateRmsPluginRequest {
	s.OutsideBizdomain = &v
	return s
}

func (s *CreateRmsPluginRequest) SetPluginId(v int64) *CreateRmsPluginRequest {
	s.PluginId = &v
	return s
}

func (s *CreateRmsPluginRequest) SetTable(v string) *CreateRmsPluginRequest {
	s.Table = &v
	return s
}

type CreateRmsPluginResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateRmsPluginResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRmsPluginResponse) GoString() string {
	return s.String()
}

func (s *CreateRmsPluginResponse) SetReqMsgId(v string) *CreateRmsPluginResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateRmsPluginResponse) SetResultCode(v string) *CreateRmsPluginResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateRmsPluginResponse) SetResultMsg(v string) *CreateRmsPluginResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateRmsPluginResponse) SetData(v bool) *CreateRmsPluginResponse {
	s.Data = &v
	return s
}

func (s *CreateRmsPluginResponse) SetErrorCode(v string) *CreateRmsPluginResponse {
	s.ErrorCode = &v
	return s
}

func (s *CreateRmsPluginResponse) SetRid(v string) *CreateRmsPluginResponse {
	s.Rid = &v
	return s
}

func (s *CreateRmsPluginResponse) SetSuccess(v bool) *CreateRmsPluginResponse {
	s.Success = &v
	return s
}

type DeleteRmsPluginRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// body
	Body *string `json:"body,omitempty" xml:"body,omitempty" require:"true"`
	// file_id
	FileId *int64 `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// outside_bizdomain
	OutsideBizdomain *string `json:"outside_bizdomain,omitempty" xml:"outside_bizdomain,omitempty" require:"true"`
	// plugin_id
	PluginId *int64 `json:"plugin_id,omitempty" xml:"plugin_id,omitempty" require:"true"`
	// table
	Table *string `json:"table,omitempty" xml:"table,omitempty" require:"true"`
}

func (s DeleteRmsPluginRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRmsPluginRequest) GoString() string {
	return s.String()
}

func (s *DeleteRmsPluginRequest) SetAuthToken(v string) *DeleteRmsPluginRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteRmsPluginRequest) SetBody(v string) *DeleteRmsPluginRequest {
	s.Body = &v
	return s
}

func (s *DeleteRmsPluginRequest) SetFileId(v int64) *DeleteRmsPluginRequest {
	s.FileId = &v
	return s
}

func (s *DeleteRmsPluginRequest) SetId(v int64) *DeleteRmsPluginRequest {
	s.Id = &v
	return s
}

func (s *DeleteRmsPluginRequest) SetOutsideBizdomain(v string) *DeleteRmsPluginRequest {
	s.OutsideBizdomain = &v
	return s
}

func (s *DeleteRmsPluginRequest) SetPluginId(v int64) *DeleteRmsPluginRequest {
	s.PluginId = &v
	return s
}

func (s *DeleteRmsPluginRequest) SetTable(v string) *DeleteRmsPluginRequest {
	s.Table = &v
	return s
}

type DeleteRmsPluginResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteRmsPluginResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRmsPluginResponse) GoString() string {
	return s.String()
}

func (s *DeleteRmsPluginResponse) SetReqMsgId(v string) *DeleteRmsPluginResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteRmsPluginResponse) SetResultCode(v string) *DeleteRmsPluginResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteRmsPluginResponse) SetResultMsg(v string) *DeleteRmsPluginResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteRmsPluginResponse) SetData(v bool) *DeleteRmsPluginResponse {
	s.Data = &v
	return s
}

func (s *DeleteRmsPluginResponse) SetErrorCode(v string) *DeleteRmsPluginResponse {
	s.ErrorCode = &v
	return s
}

func (s *DeleteRmsPluginResponse) SetRid(v string) *DeleteRmsPluginResponse {
	s.Rid = &v
	return s
}

func (s *DeleteRmsPluginResponse) SetSuccess(v bool) *DeleteRmsPluginResponse {
	s.Success = &v
	return s
}

type CloseRmsPluginRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// body
	Body *string `json:"body,omitempty" xml:"body,omitempty" require:"true"`
	// file_id
	FileId *int64 `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// outside_bizdomain
	OutsideBizdomain *string `json:"outside_bizdomain,omitempty" xml:"outside_bizdomain,omitempty" require:"true"`
	// plugin_id
	PluginId *int64 `json:"plugin_id,omitempty" xml:"plugin_id,omitempty" require:"true"`
	// table
	Table *string `json:"table,omitempty" xml:"table,omitempty" require:"true"`
}

func (s CloseRmsPluginRequest) String() string {
	return tea.Prettify(s)
}

func (s CloseRmsPluginRequest) GoString() string {
	return s.String()
}

func (s *CloseRmsPluginRequest) SetAuthToken(v string) *CloseRmsPluginRequest {
	s.AuthToken = &v
	return s
}

func (s *CloseRmsPluginRequest) SetBody(v string) *CloseRmsPluginRequest {
	s.Body = &v
	return s
}

func (s *CloseRmsPluginRequest) SetFileId(v int64) *CloseRmsPluginRequest {
	s.FileId = &v
	return s
}

func (s *CloseRmsPluginRequest) SetId(v int64) *CloseRmsPluginRequest {
	s.Id = &v
	return s
}

func (s *CloseRmsPluginRequest) SetOutsideBizdomain(v string) *CloseRmsPluginRequest {
	s.OutsideBizdomain = &v
	return s
}

func (s *CloseRmsPluginRequest) SetPluginId(v int64) *CloseRmsPluginRequest {
	s.PluginId = &v
	return s
}

func (s *CloseRmsPluginRequest) SetTable(v string) *CloseRmsPluginRequest {
	s.Table = &v
	return s
}

type CloseRmsPluginResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CloseRmsPluginResponse) String() string {
	return tea.Prettify(s)
}

func (s CloseRmsPluginResponse) GoString() string {
	return s.String()
}

func (s *CloseRmsPluginResponse) SetReqMsgId(v string) *CloseRmsPluginResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CloseRmsPluginResponse) SetResultCode(v string) *CloseRmsPluginResponse {
	s.ResultCode = &v
	return s
}

func (s *CloseRmsPluginResponse) SetResultMsg(v string) *CloseRmsPluginResponse {
	s.ResultMsg = &v
	return s
}

func (s *CloseRmsPluginResponse) SetData(v bool) *CloseRmsPluginResponse {
	s.Data = &v
	return s
}

func (s *CloseRmsPluginResponse) SetErrorCode(v string) *CloseRmsPluginResponse {
	s.ErrorCode = &v
	return s
}

func (s *CloseRmsPluginResponse) SetRid(v string) *CloseRmsPluginResponse {
	s.Rid = &v
	return s
}

func (s *CloseRmsPluginResponse) SetSuccess(v bool) *CloseRmsPluginResponse {
	s.Success = &v
	return s
}

type OpenRmsPluginRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// body
	Body *string `json:"body,omitempty" xml:"body,omitempty" require:"true"`
	// file_id
	FileId *int64 `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// outside_bizdomain
	OutsideBizdomain *string `json:"outside_bizdomain,omitempty" xml:"outside_bizdomain,omitempty" require:"true"`
	// plugin_id
	PluginId *int64 `json:"plugin_id,omitempty" xml:"plugin_id,omitempty" require:"true"`
	// table
	Table *string `json:"table,omitempty" xml:"table,omitempty" require:"true"`
}

func (s OpenRmsPluginRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenRmsPluginRequest) GoString() string {
	return s.String()
}

func (s *OpenRmsPluginRequest) SetAuthToken(v string) *OpenRmsPluginRequest {
	s.AuthToken = &v
	return s
}

func (s *OpenRmsPluginRequest) SetBody(v string) *OpenRmsPluginRequest {
	s.Body = &v
	return s
}

func (s *OpenRmsPluginRequest) SetFileId(v int64) *OpenRmsPluginRequest {
	s.FileId = &v
	return s
}

func (s *OpenRmsPluginRequest) SetId(v int64) *OpenRmsPluginRequest {
	s.Id = &v
	return s
}

func (s *OpenRmsPluginRequest) SetOutsideBizdomain(v string) *OpenRmsPluginRequest {
	s.OutsideBizdomain = &v
	return s
}

func (s *OpenRmsPluginRequest) SetPluginId(v int64) *OpenRmsPluginRequest {
	s.PluginId = &v
	return s
}

func (s *OpenRmsPluginRequest) SetTable(v string) *OpenRmsPluginRequest {
	s.Table = &v
	return s
}

type OpenRmsPluginResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s OpenRmsPluginResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenRmsPluginResponse) GoString() string {
	return s.String()
}

func (s *OpenRmsPluginResponse) SetReqMsgId(v string) *OpenRmsPluginResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OpenRmsPluginResponse) SetResultCode(v string) *OpenRmsPluginResponse {
	s.ResultCode = &v
	return s
}

func (s *OpenRmsPluginResponse) SetResultMsg(v string) *OpenRmsPluginResponse {
	s.ResultMsg = &v
	return s
}

func (s *OpenRmsPluginResponse) SetData(v bool) *OpenRmsPluginResponse {
	s.Data = &v
	return s
}

func (s *OpenRmsPluginResponse) SetErrorCode(v string) *OpenRmsPluginResponse {
	s.ErrorCode = &v
	return s
}

func (s *OpenRmsPluginResponse) SetRid(v string) *OpenRmsPluginResponse {
	s.Rid = &v
	return s
}

func (s *OpenRmsPluginResponse) SetSuccess(v bool) *OpenRmsPluginResponse {
	s.Success = &v
	return s
}

type UpdateRmsPluginRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// body
	Body *string `json:"body,omitempty" xml:"body,omitempty" require:"true"`
	// file_id
	FileId *int64 `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// outside_bizdomain
	OutsideBizdomain *string `json:"outside_bizdomain,omitempty" xml:"outside_bizdomain,omitempty" require:"true"`
	// plugin_id
	PluginId *int64 `json:"plugin_id,omitempty" xml:"plugin_id,omitempty" require:"true"`
	// table
	Table *string `json:"table,omitempty" xml:"table,omitempty" require:"true"`
}

func (s UpdateRmsPluginRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRmsPluginRequest) GoString() string {
	return s.String()
}

func (s *UpdateRmsPluginRequest) SetAuthToken(v string) *UpdateRmsPluginRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateRmsPluginRequest) SetBody(v string) *UpdateRmsPluginRequest {
	s.Body = &v
	return s
}

func (s *UpdateRmsPluginRequest) SetFileId(v int64) *UpdateRmsPluginRequest {
	s.FileId = &v
	return s
}

func (s *UpdateRmsPluginRequest) SetId(v int64) *UpdateRmsPluginRequest {
	s.Id = &v
	return s
}

func (s *UpdateRmsPluginRequest) SetOutsideBizdomain(v string) *UpdateRmsPluginRequest {
	s.OutsideBizdomain = &v
	return s
}

func (s *UpdateRmsPluginRequest) SetPluginId(v int64) *UpdateRmsPluginRequest {
	s.PluginId = &v
	return s
}

func (s *UpdateRmsPluginRequest) SetTable(v string) *UpdateRmsPluginRequest {
	s.Table = &v
	return s
}

type UpdateRmsPluginResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateRmsPluginResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRmsPluginResponse) GoString() string {
	return s.String()
}

func (s *UpdateRmsPluginResponse) SetReqMsgId(v string) *UpdateRmsPluginResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateRmsPluginResponse) SetResultCode(v string) *UpdateRmsPluginResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateRmsPluginResponse) SetResultMsg(v string) *UpdateRmsPluginResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateRmsPluginResponse) SetData(v bool) *UpdateRmsPluginResponse {
	s.Data = &v
	return s
}

func (s *UpdateRmsPluginResponse) SetErrorCode(v string) *UpdateRmsPluginResponse {
	s.ErrorCode = &v
	return s
}

func (s *UpdateRmsPluginResponse) SetRid(v string) *UpdateRmsPluginResponse {
	s.Rid = &v
	return s
}

func (s *UpdateRmsPluginResponse) SetSuccess(v bool) *UpdateRmsPluginResponse {
	s.Success = &v
	return s
}

type QueryRmsPluginbytypeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// body
	Body *string `json:"body,omitempty" xml:"body,omitempty" require:"true"`
	// file_id
	FileId *int64 `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// outside_bizdomain
	OutsideBizdomain *string `json:"outside_bizdomain,omitempty" xml:"outside_bizdomain,omitempty" require:"true"`
	// plugin_id
	PluginId *int64 `json:"plugin_id,omitempty" xml:"plugin_id,omitempty" require:"true"`
	// table
	Table *string `json:"table,omitempty" xml:"table,omitempty" require:"true"`
}

func (s QueryRmsPluginbytypeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsPluginbytypeRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsPluginbytypeRequest) SetAuthToken(v string) *QueryRmsPluginbytypeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsPluginbytypeRequest) SetBody(v string) *QueryRmsPluginbytypeRequest {
	s.Body = &v
	return s
}

func (s *QueryRmsPluginbytypeRequest) SetFileId(v int64) *QueryRmsPluginbytypeRequest {
	s.FileId = &v
	return s
}

func (s *QueryRmsPluginbytypeRequest) SetId(v int64) *QueryRmsPluginbytypeRequest {
	s.Id = &v
	return s
}

func (s *QueryRmsPluginbytypeRequest) SetOutsideBizdomain(v string) *QueryRmsPluginbytypeRequest {
	s.OutsideBizdomain = &v
	return s
}

func (s *QueryRmsPluginbytypeRequest) SetPluginId(v int64) *QueryRmsPluginbytypeRequest {
	s.PluginId = &v
	return s
}

func (s *QueryRmsPluginbytypeRequest) SetTable(v string) *QueryRmsPluginbytypeRequest {
	s.Table = &v
	return s
}

type QueryRmsPluginbytypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*PluginModelDO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s QueryRmsPluginbytypeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsPluginbytypeResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsPluginbytypeResponse) SetReqMsgId(v string) *QueryRmsPluginbytypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsPluginbytypeResponse) SetResultCode(v string) *QueryRmsPluginbytypeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsPluginbytypeResponse) SetResultMsg(v string) *QueryRmsPluginbytypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsPluginbytypeResponse) SetData(v []*PluginModelDO) *QueryRmsPluginbytypeResponse {
	s.Data = v
	return s
}

func (s *QueryRmsPluginbytypeResponse) SetErrorCode(v string) *QueryRmsPluginbytypeResponse {
	s.ErrorCode = &v
	return s
}

func (s *QueryRmsPluginbytypeResponse) SetRid(v string) *QueryRmsPluginbytypeResponse {
	s.Rid = &v
	return s
}

func (s *QueryRmsPluginbytypeResponse) SetSuccess(v bool) *QueryRmsPluginbytypeResponse {
	s.Success = &v
	return s
}

type QueryRmsPluginbyfolderRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// body
	Body *string `json:"body,omitempty" xml:"body,omitempty" require:"true"`
	// file_id
	FileId *int64 `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// outside_bizdomain
	OutsideBizdomain *string `json:"outside_bizdomain,omitempty" xml:"outside_bizdomain,omitempty" require:"true"`
	// plugin_id
	PluginId *int64 `json:"plugin_id,omitempty" xml:"plugin_id,omitempty" require:"true"`
	// table
	Table *string `json:"table,omitempty" xml:"table,omitempty" require:"true"`
}

func (s QueryRmsPluginbyfolderRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsPluginbyfolderRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsPluginbyfolderRequest) SetAuthToken(v string) *QueryRmsPluginbyfolderRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsPluginbyfolderRequest) SetBody(v string) *QueryRmsPluginbyfolderRequest {
	s.Body = &v
	return s
}

func (s *QueryRmsPluginbyfolderRequest) SetFileId(v int64) *QueryRmsPluginbyfolderRequest {
	s.FileId = &v
	return s
}

func (s *QueryRmsPluginbyfolderRequest) SetId(v int64) *QueryRmsPluginbyfolderRequest {
	s.Id = &v
	return s
}

func (s *QueryRmsPluginbyfolderRequest) SetOutsideBizdomain(v string) *QueryRmsPluginbyfolderRequest {
	s.OutsideBizdomain = &v
	return s
}

func (s *QueryRmsPluginbyfolderRequest) SetPluginId(v int64) *QueryRmsPluginbyfolderRequest {
	s.PluginId = &v
	return s
}

func (s *QueryRmsPluginbyfolderRequest) SetTable(v string) *QueryRmsPluginbyfolderRequest {
	s.Table = &v
	return s
}

type QueryRmsPluginbyfolderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*ModelTreeNode `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s QueryRmsPluginbyfolderResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsPluginbyfolderResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsPluginbyfolderResponse) SetReqMsgId(v string) *QueryRmsPluginbyfolderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsPluginbyfolderResponse) SetResultCode(v string) *QueryRmsPluginbyfolderResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsPluginbyfolderResponse) SetResultMsg(v string) *QueryRmsPluginbyfolderResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsPluginbyfolderResponse) SetData(v []*ModelTreeNode) *QueryRmsPluginbyfolderResponse {
	s.Data = v
	return s
}

func (s *QueryRmsPluginbyfolderResponse) SetErrorCode(v string) *QueryRmsPluginbyfolderResponse {
	s.ErrorCode = &v
	return s
}

func (s *QueryRmsPluginbyfolderResponse) SetRid(v string) *QueryRmsPluginbyfolderResponse {
	s.Rid = &v
	return s
}

func (s *QueryRmsPluginbyfolderResponse) SetSuccess(v bool) *QueryRmsPluginbyfolderResponse {
	s.Success = &v
	return s
}

type QueryRmsPluginRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// body
	Body *string `json:"body,omitempty" xml:"body,omitempty" require:"true"`
	// file_id
	FileId *int64 `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// outside_bizdomain
	OutsideBizdomain *string `json:"outside_bizdomain,omitempty" xml:"outside_bizdomain,omitempty" require:"true"`
	// plugin_id
	PluginId *int64 `json:"plugin_id,omitempty" xml:"plugin_id,omitempty" require:"true"`
	// table
	Table *string `json:"table,omitempty" xml:"table,omitempty" require:"true"`
}

func (s QueryRmsPluginRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsPluginRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsPluginRequest) SetAuthToken(v string) *QueryRmsPluginRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsPluginRequest) SetBody(v string) *QueryRmsPluginRequest {
	s.Body = &v
	return s
}

func (s *QueryRmsPluginRequest) SetFileId(v int64) *QueryRmsPluginRequest {
	s.FileId = &v
	return s
}

func (s *QueryRmsPluginRequest) SetId(v int64) *QueryRmsPluginRequest {
	s.Id = &v
	return s
}

func (s *QueryRmsPluginRequest) SetOutsideBizdomain(v string) *QueryRmsPluginRequest {
	s.OutsideBizdomain = &v
	return s
}

func (s *QueryRmsPluginRequest) SetPluginId(v int64) *QueryRmsPluginRequest {
	s.PluginId = &v
	return s
}

func (s *QueryRmsPluginRequest) SetTable(v string) *QueryRmsPluginRequest {
	s.Table = &v
	return s
}

type QueryRmsPluginResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *PluginModelDO `json:"data,omitempty" xml:"data,omitempty"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s QueryRmsPluginResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsPluginResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsPluginResponse) SetReqMsgId(v string) *QueryRmsPluginResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsPluginResponse) SetResultCode(v string) *QueryRmsPluginResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsPluginResponse) SetResultMsg(v string) *QueryRmsPluginResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsPluginResponse) SetData(v *PluginModelDO) *QueryRmsPluginResponse {
	s.Data = v
	return s
}

func (s *QueryRmsPluginResponse) SetErrorCode(v string) *QueryRmsPluginResponse {
	s.ErrorCode = &v
	return s
}

func (s *QueryRmsPluginResponse) SetRid(v string) *QueryRmsPluginResponse {
	s.Rid = &v
	return s
}

func (s *QueryRmsPluginResponse) SetSuccess(v bool) *QueryRmsPluginResponse {
	s.Success = &v
	return s
}

type QueryRmsPlugintestRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// body
	Body *string `json:"body,omitempty" xml:"body,omitempty" require:"true"`
	// file_id
	FileId *int64 `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// outside_bizdomain
	OutsideBizdomain *string `json:"outside_bizdomain,omitempty" xml:"outside_bizdomain,omitempty" require:"true"`
	// plugin_id
	PluginId *int64 `json:"plugin_id,omitempty" xml:"plugin_id,omitempty" require:"true"`
	// table
	Table *string `json:"table,omitempty" xml:"table,omitempty" require:"true"`
}

func (s QueryRmsPlugintestRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsPlugintestRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsPlugintestRequest) SetAuthToken(v string) *QueryRmsPlugintestRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsPlugintestRequest) SetBody(v string) *QueryRmsPlugintestRequest {
	s.Body = &v
	return s
}

func (s *QueryRmsPlugintestRequest) SetFileId(v int64) *QueryRmsPlugintestRequest {
	s.FileId = &v
	return s
}

func (s *QueryRmsPlugintestRequest) SetId(v int64) *QueryRmsPlugintestRequest {
	s.Id = &v
	return s
}

func (s *QueryRmsPlugintestRequest) SetOutsideBizdomain(v string) *QueryRmsPlugintestRequest {
	s.OutsideBizdomain = &v
	return s
}

func (s *QueryRmsPlugintestRequest) SetPluginId(v int64) *QueryRmsPlugintestRequest {
	s.PluginId = &v
	return s
}

func (s *QueryRmsPlugintestRequest) SetTable(v string) *QueryRmsPlugintestRequest {
	s.Table = &v
	return s
}

type QueryRmsPlugintestResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *Threshold `json:"data,omitempty" xml:"data,omitempty"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s QueryRmsPlugintestResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsPlugintestResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsPlugintestResponse) SetReqMsgId(v string) *QueryRmsPlugintestResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsPlugintestResponse) SetResultCode(v string) *QueryRmsPlugintestResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsPlugintestResponse) SetResultMsg(v string) *QueryRmsPlugintestResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsPlugintestResponse) SetData(v *Threshold) *QueryRmsPlugintestResponse {
	s.Data = v
	return s
}

func (s *QueryRmsPlugintestResponse) SetErrorCode(v string) *QueryRmsPlugintestResponse {
	s.ErrorCode = &v
	return s
}

func (s *QueryRmsPlugintestResponse) SetRid(v string) *QueryRmsPlugintestResponse {
	s.Rid = &v
	return s
}

func (s *QueryRmsPlugintestResponse) SetSuccess(v bool) *QueryRmsPlugintestResponse {
	s.Success = &v
	return s
}

type QueryRmsPathRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// requests
	Requests []*FolderRequestCmd `json:"requests,omitempty" xml:"requests,omitempty" require:"true" type:"Repeated"`
}

func (s QueryRmsPathRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsPathRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsPathRequest) SetAuthToken(v string) *QueryRmsPathRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsPathRequest) SetRequests(v []*FolderRequestCmd) *QueryRmsPathRequest {
	s.Requests = v
	return s
}

type QueryRmsPathResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*FolderPaths `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// rid
	Rid *string `json:"rid,omitempty" xml:"rid,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s QueryRmsPathResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsPathResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsPathResponse) SetReqMsgId(v string) *QueryRmsPathResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsPathResponse) SetResultCode(v string) *QueryRmsPathResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsPathResponse) SetResultMsg(v string) *QueryRmsPathResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsPathResponse) SetData(v []*FolderPaths) *QueryRmsPathResponse {
	s.Data = v
	return s
}

func (s *QueryRmsPathResponse) SetErrorCode(v string) *QueryRmsPathResponse {
	s.ErrorCode = &v
	return s
}

func (s *QueryRmsPathResponse) SetRid(v string) *QueryRmsPathResponse {
	s.Rid = &v
	return s
}

func (s *QueryRmsPathResponse) SetSuccess(v bool) *QueryRmsPathResponse {
	s.Success = &v
	return s
}

type ExecRmsUniversalcleankeyRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// req_params
	ReqParams []*KeySet `json:"req_params,omitempty" xml:"req_params,omitempty" require:"true" type:"Repeated"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
}

func (s ExecRmsUniversalcleankeyRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecRmsUniversalcleankeyRequest) GoString() string {
	return s.String()
}

func (s *ExecRmsUniversalcleankeyRequest) SetAuthToken(v string) *ExecRmsUniversalcleankeyRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecRmsUniversalcleankeyRequest) SetReqParams(v []*KeySet) *ExecRmsUniversalcleankeyRequest {
	s.ReqParams = v
	return s
}

func (s *ExecRmsUniversalcleankeyRequest) SetTenantId(v string) *ExecRmsUniversalcleankeyRequest {
	s.TenantId = &v
	return s
}

type ExecRmsUniversalcleankeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// error_message
	ErrorMessage *CallErrorMessage `json:"error_message,omitempty" xml:"error_message,omitempty"`
	// part_suc
	PartSuc *bool `json:"part_suc,omitempty" xml:"part_suc,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ExecRmsUniversalcleankeyResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecRmsUniversalcleankeyResponse) GoString() string {
	return s.String()
}

func (s *ExecRmsUniversalcleankeyResponse) SetReqMsgId(v string) *ExecRmsUniversalcleankeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecRmsUniversalcleankeyResponse) SetResultCode(v string) *ExecRmsUniversalcleankeyResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecRmsUniversalcleankeyResponse) SetResultMsg(v string) *ExecRmsUniversalcleankeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecRmsUniversalcleankeyResponse) SetErrorMessage(v *CallErrorMessage) *ExecRmsUniversalcleankeyResponse {
	s.ErrorMessage = v
	return s
}

func (s *ExecRmsUniversalcleankeyResponse) SetPartSuc(v bool) *ExecRmsUniversalcleankeyResponse {
	s.PartSuc = &v
	return s
}

func (s *ExecRmsUniversalcleankeyResponse) SetResult(v string) *ExecRmsUniversalcleankeyResponse {
	s.Result = &v
	return s
}

func (s *ExecRmsUniversalcleankeyResponse) SetSuccess(v bool) *ExecRmsUniversalcleankeyResponse {
	s.Success = &v
	return s
}

type QueryRmsUniversalRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// post_body
	PostBody *string `json:"post_body,omitempty" xml:"post_body,omitempty" require:"true"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
}

func (s QueryRmsUniversalRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsUniversalRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsUniversalRequest) SetAuthToken(v string) *QueryRmsUniversalRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsUniversalRequest) SetPostBody(v string) *QueryRmsUniversalRequest {
	s.PostBody = &v
	return s
}

func (s *QueryRmsUniversalRequest) SetTenantId(v string) *QueryRmsUniversalRequest {
	s.TenantId = &v
	return s
}

type QueryRmsUniversalResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryRmsUniversalResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsUniversalResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsUniversalResponse) SetReqMsgId(v string) *QueryRmsUniversalResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsUniversalResponse) SetResultCode(v string) *QueryRmsUniversalResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsUniversalResponse) SetResultMsg(v string) *QueryRmsUniversalResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsUniversalResponse) SetResult(v string) *QueryRmsUniversalResponse {
	s.Result = &v
	return s
}

type QueryRmsTracespanRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 如果指定了app, 那么是 localServiceName or remoteServiceName 的效果, 任何一个命中了都行
	App *string `json:"app,omitempty" xml:"app,omitempty"`
	// 最大的毫秒开始时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty"`
	// 万能扩展字段
	Extensions []*KeySet `json:"extensions,omitempty" xml:"extensions,omitempty" type:"Repeated"`
	// 最大毫秒耗时
	MaxDuration *int64 `json:"max_duration,omitempty" xml:"max_duration,omitempty"`
	// 最小毫秒耗时
	MinDuration *int64 `json:"min_duration,omitempty" xml:"min_duration,omitempty"`
	// 分页号
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 搜索的毫秒开始时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty"`
	// 结果码
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 用来动态传递一些tags或条件匹配, 有一些key是保留的, 服务端会进行特殊解释, 其他的则会认为是要对tags做精确匹配.
	Tags []*KeySet `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	// 按traceId搜索时会用到 此时其他条件自动失效
	TraceId *string `json:"trace_id,omitempty" xml:"trace_id,omitempty"`
	// workspace_id
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s QueryRmsTracespanRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsTracespanRequest) GoString() string {
	return s.String()
}

func (s *QueryRmsTracespanRequest) SetAuthToken(v string) *QueryRmsTracespanRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRmsTracespanRequest) SetApp(v string) *QueryRmsTracespanRequest {
	s.App = &v
	return s
}

func (s *QueryRmsTracespanRequest) SetEndTime(v int64) *QueryRmsTracespanRequest {
	s.EndTime = &v
	return s
}

func (s *QueryRmsTracespanRequest) SetExtensions(v []*KeySet) *QueryRmsTracespanRequest {
	s.Extensions = v
	return s
}

func (s *QueryRmsTracespanRequest) SetMaxDuration(v int64) *QueryRmsTracespanRequest {
	s.MaxDuration = &v
	return s
}

func (s *QueryRmsTracespanRequest) SetMinDuration(v int64) *QueryRmsTracespanRequest {
	s.MinDuration = &v
	return s
}

func (s *QueryRmsTracespanRequest) SetPageNumber(v int64) *QueryRmsTracespanRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryRmsTracespanRequest) SetPageSize(v int64) *QueryRmsTracespanRequest {
	s.PageSize = &v
	return s
}

func (s *QueryRmsTracespanRequest) SetStartTime(v int64) *QueryRmsTracespanRequest {
	s.StartTime = &v
	return s
}

func (s *QueryRmsTracespanRequest) SetStatus(v string) *QueryRmsTracespanRequest {
	s.Status = &v
	return s
}

func (s *QueryRmsTracespanRequest) SetTags(v []*KeySet) *QueryRmsTracespanRequest {
	s.Tags = v
	return s
}

func (s *QueryRmsTracespanRequest) SetTraceId(v string) *QueryRmsTracespanRequest {
	s.TraceId = &v
	return s
}

func (s *QueryRmsTracespanRequest) SetWorkspaceId(v int64) *QueryRmsTracespanRequest {
	s.WorkspaceId = &v
	return s
}

type QueryRmsTracespanResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分页号
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 搜索出的spans, 查无结果时为空数组
	Spans []*TraceSpan `json:"spans,omitempty" xml:"spans,omitempty" type:"Repeated"`
	// 总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
}

func (s QueryRmsTracespanResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRmsTracespanResponse) GoString() string {
	return s.String()
}

func (s *QueryRmsTracespanResponse) SetReqMsgId(v string) *QueryRmsTracespanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRmsTracespanResponse) SetResultCode(v string) *QueryRmsTracespanResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRmsTracespanResponse) SetResultMsg(v string) *QueryRmsTracespanResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRmsTracespanResponse) SetPageNumber(v int64) *QueryRmsTracespanResponse {
	s.PageNumber = &v
	return s
}

func (s *QueryRmsTracespanResponse) SetPageSize(v int64) *QueryRmsTracespanResponse {
	s.PageSize = &v
	return s
}

func (s *QueryRmsTracespanResponse) SetSpans(v []*TraceSpan) *QueryRmsTracespanResponse {
	s.Spans = v
	return s
}

func (s *QueryRmsTracespanResponse) SetTotalPage(v int64) *QueryRmsTracespanResponse {
	s.TotalPage = &v
	return s
}

type GetRmsTracespanqueryconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s GetRmsTracespanqueryconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRmsTracespanqueryconfigRequest) GoString() string {
	return s.String()
}

func (s *GetRmsTracespanqueryconfigRequest) SetAuthToken(v string) *GetRmsTracespanqueryconfigRequest {
	s.AuthToken = &v
	return s
}

type GetRmsTracespanqueryconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 支持的tags列表
	TagConfigs []*TraceSpanSearchTagConfig `json:"tag_configs,omitempty" xml:"tag_configs,omitempty" type:"Repeated"`
}

func (s GetRmsTracespanqueryconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRmsTracespanqueryconfigResponse) GoString() string {
	return s.String()
}

func (s *GetRmsTracespanqueryconfigResponse) SetReqMsgId(v string) *GetRmsTracespanqueryconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetRmsTracespanqueryconfigResponse) SetResultCode(v string) *GetRmsTracespanqueryconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *GetRmsTracespanqueryconfigResponse) SetResultMsg(v string) *GetRmsTracespanqueryconfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetRmsTracespanqueryconfigResponse) SetTagConfigs(v []*TraceSpanSearchTagConfig) *GetRmsTracespanqueryconfigResponse {
	s.TagConfigs = v
	return s
}

type DescribeRmsTracetreeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// trace_id
	TraceId *string `json:"trace_id,omitempty" xml:"trace_id,omitempty" require:"true"`
}

func (s DescribeRmsTracetreeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRmsTracetreeRequest) GoString() string {
	return s.String()
}

func (s *DescribeRmsTracetreeRequest) SetAuthToken(v string) *DescribeRmsTracetreeRequest {
	s.AuthToken = &v
	return s
}

func (s *DescribeRmsTracetreeRequest) SetTraceId(v string) *DescribeRmsTracetreeRequest {
	s.TraceId = &v
	return s
}

type DescribeRmsTracetreeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 树状图结构体
	// 找不到数据时 trace_tree_items 为空数组, 并不会报错
	TraceTreeItems []*TraceTreeItem `json:"trace_tree_items,omitempty" xml:"trace_tree_items,omitempty" type:"Repeated"`
}

func (s DescribeRmsTracetreeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRmsTracetreeResponse) GoString() string {
	return s.String()
}

func (s *DescribeRmsTracetreeResponse) SetReqMsgId(v string) *DescribeRmsTracetreeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DescribeRmsTracetreeResponse) SetResultCode(v string) *DescribeRmsTracetreeResponse {
	s.ResultCode = &v
	return s
}

func (s *DescribeRmsTracetreeResponse) SetResultMsg(v string) *DescribeRmsTracetreeResponse {
	s.ResultMsg = &v
	return s
}

func (s *DescribeRmsTracetreeResponse) SetTraceTreeItems(v []*TraceTreeItem) *DescribeRmsTracetreeResponse {
	s.TraceTreeItems = v
	return s
}

type CallbackSpiCompletecommodityRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 南天门的请求体都是做成json字符串放在data字段里
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CallbackSpiCompletecommodityRequest) String() string {
	return tea.Prettify(s)
}

func (s CallbackSpiCompletecommodityRequest) GoString() string {
	return s.String()
}

func (s *CallbackSpiCompletecommodityRequest) SetAuthToken(v string) *CallbackSpiCompletecommodityRequest {
	s.AuthToken = &v
	return s
}

func (s *CallbackSpiCompletecommodityRequest) SetData(v string) *CallbackSpiCompletecommodityRequest {
	s.Data = &v
	return s
}

type CallbackSpiCompletecommodityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// code
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// synchro
	Synchro *string `json:"synchro,omitempty" xml:"synchro,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CallbackSpiCompletecommodityResponse) String() string {
	return tea.Prettify(s)
}

func (s CallbackSpiCompletecommodityResponse) GoString() string {
	return s.String()
}

func (s *CallbackSpiCompletecommodityResponse) SetReqMsgId(v string) *CallbackSpiCompletecommodityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CallbackSpiCompletecommodityResponse) SetResultCode(v string) *CallbackSpiCompletecommodityResponse {
	s.ResultCode = &v
	return s
}

func (s *CallbackSpiCompletecommodityResponse) SetResultMsg(v string) *CallbackSpiCompletecommodityResponse {
	s.ResultMsg = &v
	return s
}

func (s *CallbackSpiCompletecommodityResponse) SetCode(v string) *CallbackSpiCompletecommodityResponse {
	s.Code = &v
	return s
}

func (s *CallbackSpiCompletecommodityResponse) SetData(v string) *CallbackSpiCompletecommodityResponse {
	s.Data = &v
	return s
}

func (s *CallbackSpiCompletecommodityResponse) SetMessage(v string) *CallbackSpiCompletecommodityResponse {
	s.Message = &v
	return s
}

func (s *CallbackSpiCompletecommodityResponse) SetSynchro(v string) *CallbackSpiCompletecommodityResponse {
	s.Synchro = &v
	return s
}

func (s *CallbackSpiCompletecommodityResponse) SetSuccess(v bool) *CallbackSpiCompletecommodityResponse {
	s.Success = &v
	return s
}

type CallbackSpiPayordercallbackRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 南天门支付后回调请求, 见 http://help.aliyun-inc.com/internaldoc/detail/134798.html?spm=ntm.workbench-devPlatform-extendPoint.0.0.42a919afQhBhEB.
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CallbackSpiPayordercallbackRequest) String() string {
	return tea.Prettify(s)
}

func (s CallbackSpiPayordercallbackRequest) GoString() string {
	return s.String()
}

func (s *CallbackSpiPayordercallbackRequest) SetAuthToken(v string) *CallbackSpiPayordercallbackRequest {
	s.AuthToken = &v
	return s
}

func (s *CallbackSpiPayordercallbackRequest) SetData(v string) *CallbackSpiPayordercallbackRequest {
	s.Data = &v
	return s
}

type CallbackSpiPayordercallbackResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// code
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// synchro
	Synchro *string `json:"synchro,omitempty" xml:"synchro,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CallbackSpiPayordercallbackResponse) String() string {
	return tea.Prettify(s)
}

func (s CallbackSpiPayordercallbackResponse) GoString() string {
	return s.String()
}

func (s *CallbackSpiPayordercallbackResponse) SetReqMsgId(v string) *CallbackSpiPayordercallbackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CallbackSpiPayordercallbackResponse) SetResultCode(v string) *CallbackSpiPayordercallbackResponse {
	s.ResultCode = &v
	return s
}

func (s *CallbackSpiPayordercallbackResponse) SetResultMsg(v string) *CallbackSpiPayordercallbackResponse {
	s.ResultMsg = &v
	return s
}

func (s *CallbackSpiPayordercallbackResponse) SetCode(v string) *CallbackSpiPayordercallbackResponse {
	s.Code = &v
	return s
}

func (s *CallbackSpiPayordercallbackResponse) SetData(v string) *CallbackSpiPayordercallbackResponse {
	s.Data = &v
	return s
}

func (s *CallbackSpiPayordercallbackResponse) SetMessage(v string) *CallbackSpiPayordercallbackResponse {
	s.Message = &v
	return s
}

func (s *CallbackSpiPayordercallbackResponse) SetSynchro(v string) *CallbackSpiPayordercallbackResponse {
	s.Synchro = &v
	return s
}

func (s *CallbackSpiPayordercallbackResponse) SetSuccess(v bool) *CallbackSpiPayordercallbackResponse {
	s.Success = &v
	return s
}

type CallbackSpiCompleteorderparamRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CallbackSpiCompleteorderparamRequest) String() string {
	return tea.Prettify(s)
}

func (s CallbackSpiCompleteorderparamRequest) GoString() string {
	return s.String()
}

func (s *CallbackSpiCompleteorderparamRequest) SetAuthToken(v string) *CallbackSpiCompleteorderparamRequest {
	s.AuthToken = &v
	return s
}

func (s *CallbackSpiCompleteorderparamRequest) SetData(v string) *CallbackSpiCompleteorderparamRequest {
	s.Data = &v
	return s
}

type CallbackSpiCompleteorderparamResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// code
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// synchro
	Synchro *string `json:"synchro,omitempty" xml:"synchro,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CallbackSpiCompleteorderparamResponse) String() string {
	return tea.Prettify(s)
}

func (s CallbackSpiCompleteorderparamResponse) GoString() string {
	return s.String()
}

func (s *CallbackSpiCompleteorderparamResponse) SetReqMsgId(v string) *CallbackSpiCompleteorderparamResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CallbackSpiCompleteorderparamResponse) SetResultCode(v string) *CallbackSpiCompleteorderparamResponse {
	s.ResultCode = &v
	return s
}

func (s *CallbackSpiCompleteorderparamResponse) SetResultMsg(v string) *CallbackSpiCompleteorderparamResponse {
	s.ResultMsg = &v
	return s
}

func (s *CallbackSpiCompleteorderparamResponse) SetCode(v string) *CallbackSpiCompleteorderparamResponse {
	s.Code = &v
	return s
}

func (s *CallbackSpiCompleteorderparamResponse) SetData(v string) *CallbackSpiCompleteorderparamResponse {
	s.Data = &v
	return s
}

func (s *CallbackSpiCompleteorderparamResponse) SetMessage(v string) *CallbackSpiCompleteorderparamResponse {
	s.Message = &v
	return s
}

func (s *CallbackSpiCompleteorderparamResponse) SetSynchro(v string) *CallbackSpiCompleteorderparamResponse {
	s.Synchro = &v
	return s
}

func (s *CallbackSpiCompleteorderparamResponse) SetSuccess(v bool) *CallbackSpiCompleteorderparamResponse {
	s.Success = &v
	return s
}

type CallbackSpiVerifyRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CallbackSpiVerifyRequest) String() string {
	return tea.Prettify(s)
}

func (s CallbackSpiVerifyRequest) GoString() string {
	return s.String()
}

func (s *CallbackSpiVerifyRequest) SetAuthToken(v string) *CallbackSpiVerifyRequest {
	s.AuthToken = &v
	return s
}

func (s *CallbackSpiVerifyRequest) SetData(v string) *CallbackSpiVerifyRequest {
	s.Data = &v
	return s
}

type CallbackSpiVerifyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// code
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// synchro
	Synchro *string `json:"synchro,omitempty" xml:"synchro,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CallbackSpiVerifyResponse) String() string {
	return tea.Prettify(s)
}

func (s CallbackSpiVerifyResponse) GoString() string {
	return s.String()
}

func (s *CallbackSpiVerifyResponse) SetReqMsgId(v string) *CallbackSpiVerifyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CallbackSpiVerifyResponse) SetResultCode(v string) *CallbackSpiVerifyResponse {
	s.ResultCode = &v
	return s
}

func (s *CallbackSpiVerifyResponse) SetResultMsg(v string) *CallbackSpiVerifyResponse {
	s.ResultMsg = &v
	return s
}

func (s *CallbackSpiVerifyResponse) SetCode(v string) *CallbackSpiVerifyResponse {
	s.Code = &v
	return s
}

func (s *CallbackSpiVerifyResponse) SetData(v string) *CallbackSpiVerifyResponse {
	s.Data = &v
	return s
}

func (s *CallbackSpiVerifyResponse) SetMessage(v string) *CallbackSpiVerifyResponse {
	s.Message = &v
	return s
}

func (s *CallbackSpiVerifyResponse) SetSynchro(v string) *CallbackSpiVerifyResponse {
	s.Synchro = &v
	return s
}

func (s *CallbackSpiVerifyResponse) SetSuccess(v bool) *CallbackSpiVerifyResponse {
	s.Success = &v
	return s
}

type CallbackSpiRefundRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CallbackSpiRefundRequest) String() string {
	return tea.Prettify(s)
}

func (s CallbackSpiRefundRequest) GoString() string {
	return s.String()
}

func (s *CallbackSpiRefundRequest) SetAuthToken(v string) *CallbackSpiRefundRequest {
	s.AuthToken = &v
	return s
}

func (s *CallbackSpiRefundRequest) SetData(v string) *CallbackSpiRefundRequest {
	s.Data = &v
	return s
}

type CallbackSpiRefundResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// code
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// synchro
	Synchro *string `json:"synchro,omitempty" xml:"synchro,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CallbackSpiRefundResponse) String() string {
	return tea.Prettify(s)
}

func (s CallbackSpiRefundResponse) GoString() string {
	return s.String()
}

func (s *CallbackSpiRefundResponse) SetReqMsgId(v string) *CallbackSpiRefundResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CallbackSpiRefundResponse) SetResultCode(v string) *CallbackSpiRefundResponse {
	s.ResultCode = &v
	return s
}

func (s *CallbackSpiRefundResponse) SetResultMsg(v string) *CallbackSpiRefundResponse {
	s.ResultMsg = &v
	return s
}

func (s *CallbackSpiRefundResponse) SetCode(v string) *CallbackSpiRefundResponse {
	s.Code = &v
	return s
}

func (s *CallbackSpiRefundResponse) SetData(v string) *CallbackSpiRefundResponse {
	s.Data = &v
	return s
}

func (s *CallbackSpiRefundResponse) SetMessage(v string) *CallbackSpiRefundResponse {
	s.Message = &v
	return s
}

func (s *CallbackSpiRefundResponse) SetSynchro(v string) *CallbackSpiRefundResponse {
	s.Synchro = &v
	return s
}

func (s *CallbackSpiRefundResponse) SetSuccess(v bool) *CallbackSpiRefundResponse {
	s.Success = &v
	return s
}

type CallbackSpiLifecycleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CallbackSpiLifecycleRequest) String() string {
	return tea.Prettify(s)
}

func (s CallbackSpiLifecycleRequest) GoString() string {
	return s.String()
}

func (s *CallbackSpiLifecycleRequest) SetAuthToken(v string) *CallbackSpiLifecycleRequest {
	s.AuthToken = &v
	return s
}

func (s *CallbackSpiLifecycleRequest) SetData(v string) *CallbackSpiLifecycleRequest {
	s.Data = &v
	return s
}

type CallbackSpiLifecycleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// code
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// a synchro
	Synchro *string `json:"synchro,omitempty" xml:"synchro,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CallbackSpiLifecycleResponse) String() string {
	return tea.Prettify(s)
}

func (s CallbackSpiLifecycleResponse) GoString() string {
	return s.String()
}

func (s *CallbackSpiLifecycleResponse) SetReqMsgId(v string) *CallbackSpiLifecycleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CallbackSpiLifecycleResponse) SetResultCode(v string) *CallbackSpiLifecycleResponse {
	s.ResultCode = &v
	return s
}

func (s *CallbackSpiLifecycleResponse) SetResultMsg(v string) *CallbackSpiLifecycleResponse {
	s.ResultMsg = &v
	return s
}

func (s *CallbackSpiLifecycleResponse) SetCode(v string) *CallbackSpiLifecycleResponse {
	s.Code = &v
	return s
}

func (s *CallbackSpiLifecycleResponse) SetData(v string) *CallbackSpiLifecycleResponse {
	s.Data = &v
	return s
}

func (s *CallbackSpiLifecycleResponse) SetMessage(v string) *CallbackSpiLifecycleResponse {
	s.Message = &v
	return s
}

func (s *CallbackSpiLifecycleResponse) SetSynchro(v string) *CallbackSpiLifecycleResponse {
	s.Synchro = &v
	return s
}

func (s *CallbackSpiLifecycleResponse) SetSuccess(v bool) *CallbackSpiLifecycleResponse {
	s.Success = &v
	return s
}

type DescribeRmsTimeseriesmetricsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// sum或none
	Aggregator *string `json:"aggregator,omitempty" xml:"aggregator,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// metrics字段名称
	Metrics []*StringValue `json:"metrics,omitempty" xml:"metrics,omitempty" require:"true" type:"Repeated"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 扩展字段tags
	Tags []*KeyValuePair `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	// metrics类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// workspace_id或workspace_name选填一个
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// workspace_id或workspace_name选填一个
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
}

func (s DescribeRmsTimeseriesmetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRmsTimeseriesmetricsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRmsTimeseriesmetricsRequest) SetAuthToken(v string) *DescribeRmsTimeseriesmetricsRequest {
	s.AuthToken = &v
	return s
}

func (s *DescribeRmsTimeseriesmetricsRequest) SetAggregator(v string) *DescribeRmsTimeseriesmetricsRequest {
	s.Aggregator = &v
	return s
}

func (s *DescribeRmsTimeseriesmetricsRequest) SetEndTime(v int64) *DescribeRmsTimeseriesmetricsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRmsTimeseriesmetricsRequest) SetMetrics(v []*StringValue) *DescribeRmsTimeseriesmetricsRequest {
	s.Metrics = v
	return s
}

func (s *DescribeRmsTimeseriesmetricsRequest) SetStartTime(v int64) *DescribeRmsTimeseriesmetricsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeRmsTimeseriesmetricsRequest) SetTags(v []*KeyValuePair) *DescribeRmsTimeseriesmetricsRequest {
	s.Tags = v
	return s
}

func (s *DescribeRmsTimeseriesmetricsRequest) SetType(v string) *DescribeRmsTimeseriesmetricsRequest {
	s.Type = &v
	return s
}

func (s *DescribeRmsTimeseriesmetricsRequest) SetWorkspaceId(v int64) *DescribeRmsTimeseriesmetricsRequest {
	s.WorkspaceId = &v
	return s
}

func (s *DescribeRmsTimeseriesmetricsRequest) SetWorkspaceName(v string) *DescribeRmsTimeseriesmetricsRequest {
	s.WorkspaceName = &v
	return s
}

type DescribeRmsTimeseriesmetricsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// metrics reulsts
	Results []*TimeSeriesMetrics `json:"results,omitempty" xml:"results,omitempty" type:"Repeated"`
}

func (s DescribeRmsTimeseriesmetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRmsTimeseriesmetricsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRmsTimeseriesmetricsResponse) SetReqMsgId(v string) *DescribeRmsTimeseriesmetricsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DescribeRmsTimeseriesmetricsResponse) SetResultCode(v string) *DescribeRmsTimeseriesmetricsResponse {
	s.ResultCode = &v
	return s
}

func (s *DescribeRmsTimeseriesmetricsResponse) SetResultMsg(v string) *DescribeRmsTimeseriesmetricsResponse {
	s.ResultMsg = &v
	return s
}

func (s *DescribeRmsTimeseriesmetricsResponse) SetResults(v []*TimeSeriesMetrics) *DescribeRmsTimeseriesmetricsResponse {
	s.Results = v
	return s
}

type DescribeRmsTopologyRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty"`
	// workspace_id或workspace_name二选一
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// workspace_id或workspace_name二选一
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
}

func (s DescribeRmsTopologyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRmsTopologyRequest) GoString() string {
	return s.String()
}

func (s *DescribeRmsTopologyRequest) SetAuthToken(v string) *DescribeRmsTopologyRequest {
	s.AuthToken = &v
	return s
}

func (s *DescribeRmsTopologyRequest) SetEndTime(v int64) *DescribeRmsTopologyRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRmsTopologyRequest) SetStartTime(v int64) *DescribeRmsTopologyRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeRmsTopologyRequest) SetWorkspaceId(v int64) *DescribeRmsTopologyRequest {
	s.WorkspaceId = &v
	return s
}

func (s *DescribeRmsTopologyRequest) SetWorkspaceName(v string) *DescribeRmsTopologyRequest {
	s.WorkspaceName = &v
	return s
}

type DescribeRmsTopologyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 拓扑节点
	Nodes []*TopologyNode `json:"nodes,omitempty" xml:"nodes,omitempty" type:"Repeated"`
	// 拓扑边
	Edges []*TopologyEdge `json:"edges,omitempty" xml:"edges,omitempty" type:"Repeated"`
	// 节点性能指标
	NodeMetrics []*TimeSeriesMetrics `json:"node_metrics,omitempty" xml:"node_metrics,omitempty" type:"Repeated"`
	// 边性能指标
	EdgeMetrics []*TimeSeriesMetrics `json:"edge_metrics,omitempty" xml:"edge_metrics,omitempty" type:"Repeated"`
}

func (s DescribeRmsTopologyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRmsTopologyResponse) GoString() string {
	return s.String()
}

func (s *DescribeRmsTopologyResponse) SetReqMsgId(v string) *DescribeRmsTopologyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DescribeRmsTopologyResponse) SetResultCode(v string) *DescribeRmsTopologyResponse {
	s.ResultCode = &v
	return s
}

func (s *DescribeRmsTopologyResponse) SetResultMsg(v string) *DescribeRmsTopologyResponse {
	s.ResultMsg = &v
	return s
}

func (s *DescribeRmsTopologyResponse) SetNodes(v []*TopologyNode) *DescribeRmsTopologyResponse {
	s.Nodes = v
	return s
}

func (s *DescribeRmsTopologyResponse) SetEdges(v []*TopologyEdge) *DescribeRmsTopologyResponse {
	s.Edges = v
	return s
}

func (s *DescribeRmsTopologyResponse) SetNodeMetrics(v []*TimeSeriesMetrics) *DescribeRmsTopologyResponse {
	s.NodeMetrics = v
	return s
}

func (s *DescribeRmsTopologyResponse) SetEdgeMetrics(v []*TimeSeriesMetrics) *DescribeRmsTopologyResponse {
	s.EdgeMetrics = v
	return s
}

type QueryMetricsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 开始时间
	Start *int64 `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// 结束时间
	End *int64 `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// 插件类型
	Plugin *string `json:"plugin,omitempty" xml:"plugin,omitempty" require:"true"`
	// 监控指标 ID
	DsId *string `json:"ds_id,omitempty" xml:"ds_id,omitempty" require:"true"`
	// contentType
	ContentType *string `json:"content_type,omitempty" xml:"content_type,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// //采集频率
	PeriodType *string `json:"period_type,omitempty" xml:"period_type,omitempty"`
	// 查询目标列
	Fields []*string `json:"fields,omitempty" xml:"fields,omitempty" type:"Repeated"`
	// 查询条件
	Where []*KeySet `json:"where,omitempty" xml:"where,omitempty" type:"Repeated"`
}

func (s QueryMetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsRequest) GoString() string {
	return s.String()
}

func (s *QueryMetricsRequest) SetAuthToken(v string) *QueryMetricsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMetricsRequest) SetStart(v int64) *QueryMetricsRequest {
	s.Start = &v
	return s
}

func (s *QueryMetricsRequest) SetEnd(v int64) *QueryMetricsRequest {
	s.End = &v
	return s
}

func (s *QueryMetricsRequest) SetPlugin(v string) *QueryMetricsRequest {
	s.Plugin = &v
	return s
}

func (s *QueryMetricsRequest) SetDsId(v string) *QueryMetricsRequest {
	s.DsId = &v
	return s
}

func (s *QueryMetricsRequest) SetContentType(v string) *QueryMetricsRequest {
	s.ContentType = &v
	return s
}

func (s *QueryMetricsRequest) SetWorkspaceName(v string) *QueryMetricsRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryMetricsRequest) SetPeriodType(v string) *QueryMetricsRequest {
	s.PeriodType = &v
	return s
}

func (s *QueryMetricsRequest) SetFields(v []*string) *QueryMetricsRequest {
	s.Fields = v
	return s
}

func (s *QueryMetricsRequest) SetWhere(v []*KeySet) *QueryMetricsRequest {
	s.Where = v
	return s
}

type QueryMetricsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询数据结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryMetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsResponse) GoString() string {
	return s.String()
}

func (s *QueryMetricsResponse) SetReqMsgId(v string) *QueryMetricsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMetricsResponse) SetResultCode(v string) *QueryMetricsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMetricsResponse) SetResultMsg(v string) *QueryMetricsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMetricsResponse) SetResult(v string) *QueryMetricsResponse {
	s.Result = &v
	return s
}

type QueryTraceSpanRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 搜索的毫秒开始时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 最大的毫秒开始时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 按traceId搜索时会用到 此时其他条件自动失效
	TraceId *string `json:"trace_id,omitempty" xml:"trace_id,omitempty"`
	// 如果指定了app, 那么是 localServiceName or remoteServiceName 的效果, 任何一个命中了都行
	App *string `json:"app,omitempty" xml:"app,omitempty"`
	// 最小毫秒耗时
	MinDuration *int64 `json:"min_duration,omitempty" xml:"min_duration,omitempty"`
	// 最大毫秒耗时
	MaxDuration *int64 `json:"max_duration,omitempty" xml:"max_duration,omitempty"`
	// 分页号
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 每页记录条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 用来动态传递一些tags或条件匹配, 有一些key是保留的, 服务端会进行特殊解释, 其他的则会认为是要对tags做精确匹配.
	Tags []*KeySet `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	// 总页数，小于0或不填代表第一次查询，用来获取总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
	// 总数，小于0或不填代表第一次查询，用来获取总数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
	// 排序字段
	SortBy *string `json:"sort_by,omitempty" xml:"sort_by,omitempty"`
	// 排序是否逆序
	SortReverse *bool `json:"sort_reverse,omitempty" xml:"sort_reverse,omitempty"`
	// 传递需要过滤的字段
	Filter *TraceQuerySummary `json:"filter,omitempty" xml:"filter,omitempty"`
}

func (s QueryTraceSpanRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceSpanRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceSpanRequest) SetAuthToken(v string) *QueryTraceSpanRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceSpanRequest) SetWorkspaceName(v string) *QueryTraceSpanRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceSpanRequest) SetStartTime(v int64) *QueryTraceSpanRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceSpanRequest) SetEndTime(v int64) *QueryTraceSpanRequest {
	s.EndTime = &v
	return s
}

func (s *QueryTraceSpanRequest) SetTraceId(v string) *QueryTraceSpanRequest {
	s.TraceId = &v
	return s
}

func (s *QueryTraceSpanRequest) SetApp(v string) *QueryTraceSpanRequest {
	s.App = &v
	return s
}

func (s *QueryTraceSpanRequest) SetMinDuration(v int64) *QueryTraceSpanRequest {
	s.MinDuration = &v
	return s
}

func (s *QueryTraceSpanRequest) SetMaxDuration(v int64) *QueryTraceSpanRequest {
	s.MaxDuration = &v
	return s
}

func (s *QueryTraceSpanRequest) SetCurrentPage(v int64) *QueryTraceSpanRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryTraceSpanRequest) SetPageSize(v int64) *QueryTraceSpanRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTraceSpanRequest) SetTags(v []*KeySet) *QueryTraceSpanRequest {
	s.Tags = v
	return s
}

func (s *QueryTraceSpanRequest) SetTotalPage(v int64) *QueryTraceSpanRequest {
	s.TotalPage = &v
	return s
}

func (s *QueryTraceSpanRequest) SetTotalSize(v int64) *QueryTraceSpanRequest {
	s.TotalSize = &v
	return s
}

func (s *QueryTraceSpanRequest) SetSortBy(v string) *QueryTraceSpanRequest {
	s.SortBy = &v
	return s
}

func (s *QueryTraceSpanRequest) SetSortReverse(v bool) *QueryTraceSpanRequest {
	s.SortReverse = &v
	return s
}

func (s *QueryTraceSpanRequest) SetFilter(v *TraceQuerySummary) *QueryTraceSpanRequest {
	s.Filter = v
	return s
}

type QueryTraceSpanResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分页号
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询总数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
	// 查询总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
	// 搜索出的spans, 查无结果时为空数组
	Spans []*TraceSpan `json:"spans,omitempty" xml:"spans,omitempty" type:"Repeated"`
	// 链路查询结果的关键字段取值集
	Summary *TraceQuerySummary `json:"summary,omitempty" xml:"summary,omitempty"`
}

func (s QueryTraceSpanResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceSpanResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceSpanResponse) SetReqMsgId(v string) *QueryTraceSpanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceSpanResponse) SetResultCode(v string) *QueryTraceSpanResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceSpanResponse) SetResultMsg(v string) *QueryTraceSpanResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceSpanResponse) SetCurrentPage(v int64) *QueryTraceSpanResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryTraceSpanResponse) SetPageSize(v int64) *QueryTraceSpanResponse {
	s.PageSize = &v
	return s
}

func (s *QueryTraceSpanResponse) SetTotalSize(v int64) *QueryTraceSpanResponse {
	s.TotalSize = &v
	return s
}

func (s *QueryTraceSpanResponse) SetTotalPage(v int64) *QueryTraceSpanResponse {
	s.TotalPage = &v
	return s
}

func (s *QueryTraceSpanResponse) SetSpans(v []*TraceSpan) *QueryTraceSpanResponse {
	s.Spans = v
	return s
}

func (s *QueryTraceSpanResponse) SetSummary(v *TraceQuerySummary) *QueryTraceSpanResponse {
	s.Summary = v
	return s
}

type ListAppNameRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 实际SQL查询时LIMIT的第一个字段
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s ListAppNameRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppNameRequest) GoString() string {
	return s.String()
}

func (s *ListAppNameRequest) SetAuthToken(v string) *ListAppNameRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppNameRequest) SetCurrentPage(v int64) *ListAppNameRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListAppNameRequest) SetPageSize(v int64) *ListAppNameRequest {
	s.PageSize = &v
	return s
}

func (s *ListAppNameRequest) SetWorkspaceName(v string) *ListAppNameRequest {
	s.WorkspaceName = &v
	return s
}

type ListAppNameResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用名称列表
	AppNames []*string `json:"app_names,omitempty" xml:"app_names,omitempty" type:"Repeated"`
}

func (s ListAppNameResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppNameResponse) GoString() string {
	return s.String()
}

func (s *ListAppNameResponse) SetReqMsgId(v string) *ListAppNameResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppNameResponse) SetResultCode(v string) *ListAppNameResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppNameResponse) SetResultMsg(v string) *ListAppNameResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppNameResponse) SetAppNames(v []*string) *ListAppNameResponse {
	s.AppNames = v
	return s
}

type CreateCustompluginRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 自定义监控指标详细信息 (嵌套对象)
	CustomPlugin *CustomPluginDO `json:"custom_plugin,omitempty" xml:"custom_plugin,omitempty" require:"true"`
}

func (s CreateCustompluginRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCustompluginRequest) GoString() string {
	return s.String()
}

func (s *CreateCustompluginRequest) SetAuthToken(v string) *CreateCustompluginRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateCustompluginRequest) SetWorkspaceName(v string) *CreateCustompluginRequest {
	s.WorkspaceName = &v
	return s
}

func (s *CreateCustompluginRequest) SetCustomPlugin(v *CustomPluginDO) *CreateCustompluginRequest {
	s.CustomPlugin = v
	return s
}

type CreateCustompluginResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateCustompluginResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCustompluginResponse) GoString() string {
	return s.String()
}

func (s *CreateCustompluginResponse) SetReqMsgId(v string) *CreateCustompluginResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateCustompluginResponse) SetResultCode(v string) *CreateCustompluginResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateCustompluginResponse) SetResultMsg(v string) *CreateCustompluginResponse {
	s.ResultMsg = &v
	return s
}

type DeleteCustompluginRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 监控产品类型
	PluginType *string `json:"plugin_type,omitempty" xml:"plugin_type,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s DeleteCustompluginRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustompluginRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustompluginRequest) SetAuthToken(v string) *DeleteCustompluginRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteCustompluginRequest) SetPluginType(v string) *DeleteCustompluginRequest {
	s.PluginType = &v
	return s
}

func (s *DeleteCustompluginRequest) SetId(v int64) *DeleteCustompluginRequest {
	s.Id = &v
	return s
}

func (s *DeleteCustompluginRequest) SetWorkspaceName(v string) *DeleteCustompluginRequest {
	s.WorkspaceName = &v
	return s
}

type DeleteCustompluginResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteCustompluginResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustompluginResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustompluginResponse) SetReqMsgId(v string) *DeleteCustompluginResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteCustompluginResponse) SetResultCode(v string) *DeleteCustompluginResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteCustompluginResponse) SetResultMsg(v string) *DeleteCustompluginResponse {
	s.ResultMsg = &v
	return s
}

type CreateFolderRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 文件夹名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 父级文件夹id
	ParentFolderId *int64 `json:"parent_folder_id,omitempty" xml:"parent_folder_id,omitempty" require:"true"`
}

func (s CreateFolderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFolderRequest) GoString() string {
	return s.String()
}

func (s *CreateFolderRequest) SetAuthToken(v string) *CreateFolderRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFolderRequest) SetWorkspaceName(v string) *CreateFolderRequest {
	s.WorkspaceName = &v
	return s
}

func (s *CreateFolderRequest) SetName(v string) *CreateFolderRequest {
	s.Name = &v
	return s
}

func (s *CreateFolderRequest) SetParentFolderId(v int64) *CreateFolderRequest {
	s.ParentFolderId = &v
	return s
}

type CreateFolderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 文件夹 ID
	FolderId *int64 `json:"folder_id,omitempty" xml:"folder_id,omitempty"`
}

func (s CreateFolderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFolderResponse) GoString() string {
	return s.String()
}

func (s *CreateFolderResponse) SetReqMsgId(v string) *CreateFolderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFolderResponse) SetResultCode(v string) *CreateFolderResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFolderResponse) SetResultMsg(v string) *CreateFolderResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateFolderResponse) SetFolderId(v int64) *CreateFolderResponse {
	s.FolderId = &v
	return s
}

type UpdateFolderRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 文件夹id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 文件夹新名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s UpdateFolderRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFolderRequest) GoString() string {
	return s.String()
}

func (s *UpdateFolderRequest) SetAuthToken(v string) *UpdateFolderRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateFolderRequest) SetId(v int64) *UpdateFolderRequest {
	s.Id = &v
	return s
}

func (s *UpdateFolderRequest) SetName(v string) *UpdateFolderRequest {
	s.Name = &v
	return s
}

func (s *UpdateFolderRequest) SetWorkspaceName(v string) *UpdateFolderRequest {
	s.WorkspaceName = &v
	return s
}

type UpdateFolderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateFolderResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFolderResponse) GoString() string {
	return s.String()
}

func (s *UpdateFolderResponse) SetReqMsgId(v string) *UpdateFolderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateFolderResponse) SetResultCode(v string) *UpdateFolderResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateFolderResponse) SetResultMsg(v string) *UpdateFolderResponse {
	s.ResultMsg = &v
	return s
}

type QueryTraceConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s QueryTraceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceConfigRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceConfigRequest) SetAuthToken(v string) *QueryTraceConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceConfigRequest) SetWorkspaceName(v string) *QueryTraceConfigRequest {
	s.WorkspaceName = &v
	return s
}

type QueryTraceConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链路配置
	Tags []*TraceSpanSearchTagConfig `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	// 链路搜索的大类
	Categories []*string `json:"categories,omitempty" xml:"categories,omitempty" type:"Repeated"`
	// 数据库配置
	Dbconfigs []*TraceSpanSearchDbConfig `json:"dbconfigs,omitempty" xml:"dbconfigs,omitempty" type:"Repeated"`
	// 消息队列的kind取值范围
	Mqkinds []*string `json:"mqkinds,omitempty" xml:"mqkinds,omitempty" type:"Repeated"`
}

func (s QueryTraceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceConfigResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceConfigResponse) SetReqMsgId(v string) *QueryTraceConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceConfigResponse) SetResultCode(v string) *QueryTraceConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceConfigResponse) SetResultMsg(v string) *QueryTraceConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceConfigResponse) SetTags(v []*TraceSpanSearchTagConfig) *QueryTraceConfigResponse {
	s.Tags = v
	return s
}

func (s *QueryTraceConfigResponse) SetCategories(v []*string) *QueryTraceConfigResponse {
	s.Categories = v
	return s
}

func (s *QueryTraceConfigResponse) SetDbconfigs(v []*TraceSpanSearchDbConfig) *QueryTraceConfigResponse {
	s.Dbconfigs = v
	return s
}

func (s *QueryTraceConfigResponse) SetMqkinds(v []*string) *QueryTraceConfigResponse {
	s.Mqkinds = v
	return s
}

type QueryFolderPathRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 自定义监控 ID
	CustomPluginId *int64 `json:"custom_plugin_id,omitempty" xml:"custom_plugin_id,omitempty"`
	// 文件夹 ID
	FolderId *int64 `json:"folder_id,omitempty" xml:"folder_id,omitempty" require:"true"`
	// 是否包含插件名
	IncludePluginName *bool `json:"include_plugin_name,omitempty" xml:"include_plugin_name,omitempty" require:"true"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s QueryFolderPathRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFolderPathRequest) GoString() string {
	return s.String()
}

func (s *QueryFolderPathRequest) SetAuthToken(v string) *QueryFolderPathRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFolderPathRequest) SetCustomPluginId(v int64) *QueryFolderPathRequest {
	s.CustomPluginId = &v
	return s
}

func (s *QueryFolderPathRequest) SetFolderId(v int64) *QueryFolderPathRequest {
	s.FolderId = &v
	return s
}

func (s *QueryFolderPathRequest) SetIncludePluginName(v bool) *QueryFolderPathRequest {
	s.IncludePluginName = &v
	return s
}

func (s *QueryFolderPathRequest) SetWorkspaceName(v string) *QueryFolderPathRequest {
	s.WorkspaceName = &v
	return s
}

type QueryFolderPathResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 文件夹路径
	Paths []*FolderPath `json:"paths,omitempty" xml:"paths,omitempty" type:"Repeated"`
}

func (s QueryFolderPathResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFolderPathResponse) GoString() string {
	return s.String()
}

func (s *QueryFolderPathResponse) SetReqMsgId(v string) *QueryFolderPathResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFolderPathResponse) SetResultCode(v string) *QueryFolderPathResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFolderPathResponse) SetResultMsg(v string) *QueryFolderPathResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFolderPathResponse) SetPaths(v []*FolderPath) *QueryFolderPathResponse {
	s.Paths = v
	return s
}

type QueryTraceDetailRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// traceId
	TraceId *string `json:"trace_id,omitempty" xml:"trace_id,omitempty" require:"true"`
	// 备选的入口ip
	BackupEntryip *string `json:"backup_entryip,omitempty" xml:"backup_entryip,omitempty"`
	// 是否为第一次查询
	FirstQuery *bool `json:"first_query,omitempty" xml:"first_query,omitempty" require:"true"`
}

func (s QueryTraceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceDetailRequest) SetAuthToken(v string) *QueryTraceDetailRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceDetailRequest) SetWorkspaceName(v string) *QueryTraceDetailRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceDetailRequest) SetTraceId(v string) *QueryTraceDetailRequest {
	s.TraceId = &v
	return s
}

func (s *QueryTraceDetailRequest) SetBackupEntryip(v string) *QueryTraceDetailRequest {
	s.BackupEntryip = &v
	return s
}

func (s *QueryTraceDetailRequest) SetFirstQuery(v bool) *QueryTraceDetailRequest {
	s.FirstQuery = &v
	return s
}

type QueryTraceDetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 节点
	Items []*TraceTreeItem `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
	// 描述整体链路的额外信息，比span总数，应用总数之类的
	Attributes []*KeySet `json:"attributes,omitempty" xml:"attributes,omitempty" type:"Repeated"`
}

func (s QueryTraceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceDetailResponse) SetReqMsgId(v string) *QueryTraceDetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceDetailResponse) SetResultCode(v string) *QueryTraceDetailResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceDetailResponse) SetResultMsg(v string) *QueryTraceDetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceDetailResponse) SetItems(v []*TraceTreeItem) *QueryTraceDetailResponse {
	s.Items = v
	return s
}

func (s *QueryTraceDetailResponse) SetAttributes(v []*KeySet) *QueryTraceDetailResponse {
	s.Attributes = v
	return s
}

type QueryTraceTopologyRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// trace_id
	TraceId *string `json:"trace_id,omitempty" xml:"trace_id,omitempty"`
	// app
	App *string `json:"app,omitempty" xml:"app,omitempty"`
}

func (s QueryTraceTopologyRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceTopologyRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceTopologyRequest) SetAuthToken(v string) *QueryTraceTopologyRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceTopologyRequest) SetWorkspaceName(v string) *QueryTraceTopologyRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceTopologyRequest) SetStartTime(v int64) *QueryTraceTopologyRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceTopologyRequest) SetEndTime(v int64) *QueryTraceTopologyRequest {
	s.EndTime = &v
	return s
}

func (s *QueryTraceTopologyRequest) SetTraceId(v string) *QueryTraceTopologyRequest {
	s.TraceId = &v
	return s
}

func (s *QueryTraceTopologyRequest) SetApp(v string) *QueryTraceTopologyRequest {
	s.App = &v
	return s
}

type QueryTraceTopologyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 拓扑节点
	Nodes []*TopologyNode `json:"nodes,omitempty" xml:"nodes,omitempty" type:"Repeated"`
	// 拓扑边
	Edges []*TopologyEdge `json:"edges,omitempty" xml:"edges,omitempty" type:"Repeated"`
	// 节点性能指标
	NodeMetrics []*TimeSeriesMetrics `json:"node_metrics,omitempty" xml:"node_metrics,omitempty" type:"Repeated"`
	// 边性能指标
	EdgeMetrics []*TimeSeriesMetrics `json:"edge_metrics,omitempty" xml:"edge_metrics,omitempty" type:"Repeated"`
}

func (s QueryTraceTopologyResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceTopologyResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceTopologyResponse) SetReqMsgId(v string) *QueryTraceTopologyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceTopologyResponse) SetResultCode(v string) *QueryTraceTopologyResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceTopologyResponse) SetResultMsg(v string) *QueryTraceTopologyResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceTopologyResponse) SetNodes(v []*TopologyNode) *QueryTraceTopologyResponse {
	s.Nodes = v
	return s
}

func (s *QueryTraceTopologyResponse) SetEdges(v []*TopologyEdge) *QueryTraceTopologyResponse {
	s.Edges = v
	return s
}

func (s *QueryTraceTopologyResponse) SetNodeMetrics(v []*TimeSeriesMetrics) *QueryTraceTopologyResponse {
	s.NodeMetrics = v
	return s
}

func (s *QueryTraceTopologyResponse) SetEdgeMetrics(v []*TimeSeriesMetrics) *QueryTraceTopologyResponse {
	s.EdgeMetrics = v
	return s
}

type QueryTraceMetricsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// sum或none
	Aggregator *string `json:"aggregator,omitempty" xml:"aggregator,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// metrics字段名称
	Metrics []*string `json:"metrics,omitempty" xml:"metrics,omitempty" require:"true" type:"Repeated"`
	// 扩展字段tags
	Tags []*KeyValuePair `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	// metrics类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s QueryTraceMetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceMetricsRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceMetricsRequest) SetAuthToken(v string) *QueryTraceMetricsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceMetricsRequest) SetAggregator(v string) *QueryTraceMetricsRequest {
	s.Aggregator = &v
	return s
}

func (s *QueryTraceMetricsRequest) SetEndTime(v int64) *QueryTraceMetricsRequest {
	s.EndTime = &v
	return s
}

func (s *QueryTraceMetricsRequest) SetStartTime(v int64) *QueryTraceMetricsRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceMetricsRequest) SetMetrics(v []*string) *QueryTraceMetricsRequest {
	s.Metrics = v
	return s
}

func (s *QueryTraceMetricsRequest) SetTags(v []*KeyValuePair) *QueryTraceMetricsRequest {
	s.Tags = v
	return s
}

func (s *QueryTraceMetricsRequest) SetType(v string) *QueryTraceMetricsRequest {
	s.Type = &v
	return s
}

func (s *QueryTraceMetricsRequest) SetWorkspaceName(v string) *QueryTraceMetricsRequest {
	s.WorkspaceName = &v
	return s
}

type QueryTraceMetricsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// metrics reulsts
	Result *TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryTraceMetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceMetricsResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceMetricsResponse) SetReqMsgId(v string) *QueryTraceMetricsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceMetricsResponse) SetResultCode(v string) *QueryTraceMetricsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceMetricsResponse) SetResultMsg(v string) *QueryTraceMetricsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceMetricsResponse) SetResult(v *TimeSeriesMetrics) *QueryTraceMetricsResponse {
	s.Result = v
	return s
}

type GetCustompluginRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 自定义监控指标 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 类型
	PluginType *string `json:"plugin_type,omitempty" xml:"plugin_type,omitempty" require:"true"`
}

func (s GetCustompluginRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCustompluginRequest) GoString() string {
	return s.String()
}

func (s *GetCustompluginRequest) SetAuthToken(v string) *GetCustompluginRequest {
	s.AuthToken = &v
	return s
}

func (s *GetCustompluginRequest) SetWorkspaceName(v string) *GetCustompluginRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetCustompluginRequest) SetId(v int64) *GetCustompluginRequest {
	s.Id = &v
	return s
}

func (s *GetCustompluginRequest) SetPluginType(v string) *GetCustompluginRequest {
	s.PluginType = &v
	return s
}

type GetCustompluginResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 自定义监控指标详情
	CustomPlugin *CustomPluginDO `json:"custom_plugin,omitempty" xml:"custom_plugin,omitempty"`
}

func (s GetCustompluginResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustompluginResponse) GoString() string {
	return s.String()
}

func (s *GetCustompluginResponse) SetReqMsgId(v string) *GetCustompluginResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetCustompluginResponse) SetResultCode(v string) *GetCustompluginResponse {
	s.ResultCode = &v
	return s
}

func (s *GetCustompluginResponse) SetResultMsg(v string) *GetCustompluginResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetCustompluginResponse) SetCustomPlugin(v *CustomPluginDO) *GetCustompluginResponse {
	s.CustomPlugin = v
	return s
}

type QueryAppRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 应用名称模糊搜索
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
	// 应用名称列表
	AppNames []*string `json:"app_names,omitempty" xml:"app_names,omitempty" type:"Repeated"`
	// 为true时表示查询我的应用
	OnlyMine *bool `json:"only_mine,omitempty" xml:"only_mine,omitempty"`
}

func (s QueryAppRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppRequest) GoString() string {
	return s.String()
}

func (s *QueryAppRequest) SetAuthToken(v string) *QueryAppRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppRequest) SetWorkspaceName(v string) *QueryAppRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryAppRequest) SetCurrentPage(v int64) *QueryAppRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryAppRequest) SetPageSize(v int64) *QueryAppRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAppRequest) SetKeyword(v string) *QueryAppRequest {
	s.Keyword = &v
	return s
}

func (s *QueryAppRequest) SetAppNames(v []*string) *QueryAppRequest {
	s.AppNames = v
	return s
}

func (s *QueryAppRequest) SetOnlyMine(v bool) *QueryAppRequest {
	s.OnlyMine = &v
	return s
}

type QueryAppResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用列表
	Apps []*MonitorApp `json:"apps,omitempty" xml:"apps,omitempty" type:"Repeated"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总记录数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryAppResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppResponse) GoString() string {
	return s.String()
}

func (s *QueryAppResponse) SetReqMsgId(v string) *QueryAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppResponse) SetResultCode(v string) *QueryAppResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppResponse) SetResultMsg(v string) *QueryAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppResponse) SetApps(v []*MonitorApp) *QueryAppResponse {
	s.Apps = v
	return s
}

func (s *QueryAppResponse) SetCurrentPage(v int64) *QueryAppResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryAppResponse) SetPageSize(v int64) *QueryAppResponse {
	s.PageSize = &v
	return s
}

func (s *QueryAppResponse) SetTotalCount(v int64) *QueryAppResponse {
	s.TotalCount = &v
	return s
}

type GetUserFavoriteRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 收藏资源类型
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	//  收藏资源 ID
	ResourceId *string `json:"resource_id,omitempty" xml:"resource_id,omitempty" require:"true"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s GetUserFavoriteRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserFavoriteRequest) GoString() string {
	return s.String()
}

func (s *GetUserFavoriteRequest) SetAuthToken(v string) *GetUserFavoriteRequest {
	s.AuthToken = &v
	return s
}

func (s *GetUserFavoriteRequest) SetResourceType(v string) *GetUserFavoriteRequest {
	s.ResourceType = &v
	return s
}

func (s *GetUserFavoriteRequest) SetResourceId(v string) *GetUserFavoriteRequest {
	s.ResourceId = &v
	return s
}

func (s *GetUserFavoriteRequest) SetWorkspaceName(v string) *GetUserFavoriteRequest {
	s.WorkspaceName = &v
	return s
}

type GetUserFavoriteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否收藏
	Status *bool `json:"status,omitempty" xml:"status,omitempty"`
}

func (s GetUserFavoriteResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserFavoriteResponse) GoString() string {
	return s.String()
}

func (s *GetUserFavoriteResponse) SetReqMsgId(v string) *GetUserFavoriteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetUserFavoriteResponse) SetResultCode(v string) *GetUserFavoriteResponse {
	s.ResultCode = &v
	return s
}

func (s *GetUserFavoriteResponse) SetResultMsg(v string) *GetUserFavoriteResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetUserFavoriteResponse) SetStatus(v bool) *GetUserFavoriteResponse {
	s.Status = &v
	return s
}

type QueryFolderRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 父目录 ID
	ParentFolderId *int64 `json:"parent_folder_id,omitempty" xml:"parent_folder_id,omitempty" require:"true"`
}

func (s QueryFolderRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFolderRequest) GoString() string {
	return s.String()
}

func (s *QueryFolderRequest) SetAuthToken(v string) *QueryFolderRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFolderRequest) SetWorkspaceName(v string) *QueryFolderRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryFolderRequest) SetParentFolderId(v int64) *QueryFolderRequest {
	s.ParentFolderId = &v
	return s
}

type QueryFolderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 文件夹列表
	Folders []*FolderDO `json:"folders,omitempty" xml:"folders,omitempty" type:"Repeated"`
}

func (s QueryFolderResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFolderResponse) GoString() string {
	return s.String()
}

func (s *QueryFolderResponse) SetReqMsgId(v string) *QueryFolderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFolderResponse) SetResultCode(v string) *QueryFolderResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFolderResponse) SetResultMsg(v string) *QueryFolderResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFolderResponse) SetFolders(v []*FolderDO) *QueryFolderResponse {
	s.Folders = v
	return s
}

type QueryCustompluginRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 父级文件夹 ID
	ParentFolderId *int64 `json:"parent_folder_id,omitempty" xml:"parent_folder_id,omitempty" require:"true"`
	// 插件类型
	PluginType *string `json:"plugin_type,omitempty" xml:"plugin_type,omitempty"`
	// 当前页码
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryCustompluginRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCustompluginRequest) GoString() string {
	return s.String()
}

func (s *QueryCustompluginRequest) SetAuthToken(v string) *QueryCustompluginRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCustompluginRequest) SetWorkspaceName(v string) *QueryCustompluginRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryCustompluginRequest) SetParentFolderId(v int64) *QueryCustompluginRequest {
	s.ParentFolderId = &v
	return s
}

func (s *QueryCustompluginRequest) SetPluginType(v string) *QueryCustompluginRequest {
	s.PluginType = &v
	return s
}

func (s *QueryCustompluginRequest) SetCurrentPage(v int64) *QueryCustompluginRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryCustompluginRequest) SetPageSize(v int64) *QueryCustompluginRequest {
	s.PageSize = &v
	return s
}

type QueryCustompluginResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 自定义指标监控配置列表
	CustomPlugins []*CustomPluginDO `json:"custom_plugins,omitempty" xml:"custom_plugins,omitempty" type:"Repeated"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 总记录数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryCustompluginResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCustompluginResponse) GoString() string {
	return s.String()
}

func (s *QueryCustompluginResponse) SetReqMsgId(v string) *QueryCustompluginResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCustompluginResponse) SetResultCode(v string) *QueryCustompluginResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCustompluginResponse) SetResultMsg(v string) *QueryCustompluginResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCustompluginResponse) SetCustomPlugins(v []*CustomPluginDO) *QueryCustompluginResponse {
	s.CustomPlugins = v
	return s
}

func (s *QueryCustompluginResponse) SetPageSize(v int64) *QueryCustompluginResponse {
	s.PageSize = &v
	return s
}

func (s *QueryCustompluginResponse) SetCurrentPage(v int64) *QueryCustompluginResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryCustompluginResponse) SetTotalCount(v int64) *QueryCustompluginResponse {
	s.TotalCount = &v
	return s
}

type QueryUserFavoriteRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 收藏资源 ID 列表
	ResourceIds []*string `json:"resource_ids,omitempty" xml:"resource_ids,omitempty" require:"true" type:"Repeated"`
	// 收藏资源类型
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s QueryUserFavoriteRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUserFavoriteRequest) GoString() string {
	return s.String()
}

func (s *QueryUserFavoriteRequest) SetAuthToken(v string) *QueryUserFavoriteRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUserFavoriteRequest) SetResourceIds(v []*string) *QueryUserFavoriteRequest {
	s.ResourceIds = v
	return s
}

func (s *QueryUserFavoriteRequest) SetResourceType(v string) *QueryUserFavoriteRequest {
	s.ResourceType = &v
	return s
}

func (s *QueryUserFavoriteRequest) SetWorkspaceName(v string) *QueryUserFavoriteRequest {
	s.WorkspaceName = &v
	return s
}

type QueryUserFavoriteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户收藏的资源列表
	Favorites []*UserFavoriteVO `json:"favorites,omitempty" xml:"favorites,omitempty" type:"Repeated"`
}

func (s QueryUserFavoriteResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUserFavoriteResponse) GoString() string {
	return s.String()
}

func (s *QueryUserFavoriteResponse) SetReqMsgId(v string) *QueryUserFavoriteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUserFavoriteResponse) SetResultCode(v string) *QueryUserFavoriteResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUserFavoriteResponse) SetResultMsg(v string) *QueryUserFavoriteResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUserFavoriteResponse) SetFavorites(v []*UserFavoriteVO) *QueryUserFavoriteResponse {
	s.Favorites = v
	return s
}

type QueryAlarmPauseRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s QueryAlarmPauseRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmPauseRequest) GoString() string {
	return s.String()
}

func (s *QueryAlarmPauseRequest) SetAuthToken(v string) *QueryAlarmPauseRequest {
	s.AuthToken = &v
	return s
}

type QueryAlarmPauseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s QueryAlarmPauseResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmPauseResponse) GoString() string {
	return s.String()
}

func (s *QueryAlarmPauseResponse) SetReqMsgId(v string) *QueryAlarmPauseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAlarmPauseResponse) SetResultCode(v string) *QueryAlarmPauseResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAlarmPauseResponse) SetResultMsg(v string) *QueryAlarmPauseResponse {
	s.ResultMsg = &v
	return s
}

type CountAlarmAppRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 开始时间 - 时间戳
	Start *int64 `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// 结束时间 - 时间戳
	End *int64 `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// 应用名称模糊搜索
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
}

func (s CountAlarmAppRequest) String() string {
	return tea.Prettify(s)
}

func (s CountAlarmAppRequest) GoString() string {
	return s.String()
}

func (s *CountAlarmAppRequest) SetAuthToken(v string) *CountAlarmAppRequest {
	s.AuthToken = &v
	return s
}

func (s *CountAlarmAppRequest) SetWorkspaceName(v string) *CountAlarmAppRequest {
	s.WorkspaceName = &v
	return s
}

func (s *CountAlarmAppRequest) SetStart(v int64) *CountAlarmAppRequest {
	s.Start = &v
	return s
}

func (s *CountAlarmAppRequest) SetEnd(v int64) *CountAlarmAppRequest {
	s.End = &v
	return s
}

func (s *CountAlarmAppRequest) SetAppName(v string) *CountAlarmAppRequest {
	s.AppName = &v
	return s
}

type CountAlarmAppResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 告警应用
	AlarmApps []*AlarmAppStats `json:"alarm_apps,omitempty" xml:"alarm_apps,omitempty" type:"Repeated"`
}

func (s CountAlarmAppResponse) String() string {
	return tea.Prettify(s)
}

func (s CountAlarmAppResponse) GoString() string {
	return s.String()
}

func (s *CountAlarmAppResponse) SetReqMsgId(v string) *CountAlarmAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CountAlarmAppResponse) SetResultCode(v string) *CountAlarmAppResponse {
	s.ResultCode = &v
	return s
}

func (s *CountAlarmAppResponse) SetResultMsg(v string) *CountAlarmAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *CountAlarmAppResponse) SetAlarmApps(v []*AlarmAppStats) *CountAlarmAppResponse {
	s.AlarmApps = v
	return s
}

type QueryAlarmApprelationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 开始时间 - 时间戳
	From *int64 `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// 结束时间 - 时间戳
	To *int64 `json:"to,omitempty" xml:"to,omitempty" require:"true"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
}

func (s QueryAlarmApprelationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmApprelationRequest) GoString() string {
	return s.String()
}

func (s *QueryAlarmApprelationRequest) SetAuthToken(v string) *QueryAlarmApprelationRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAlarmApprelationRequest) SetWorkspaceName(v string) *QueryAlarmApprelationRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryAlarmApprelationRequest) SetFrom(v int64) *QueryAlarmApprelationRequest {
	s.From = &v
	return s
}

func (s *QueryAlarmApprelationRequest) SetTo(v int64) *QueryAlarmApprelationRequest {
	s.To = &v
	return s
}

func (s *QueryAlarmApprelationRequest) SetAppName(v string) *QueryAlarmApprelationRequest {
	s.AppName = &v
	return s
}

type QueryAlarmApprelationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 告警应用关联信息
	Result []*AlarmHistoryListKeySetMap `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryAlarmApprelationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmApprelationResponse) GoString() string {
	return s.String()
}

func (s *QueryAlarmApprelationResponse) SetReqMsgId(v string) *QueryAlarmApprelationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAlarmApprelationResponse) SetResultCode(v string) *QueryAlarmApprelationResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAlarmApprelationResponse) SetResultMsg(v string) *QueryAlarmApprelationResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAlarmApprelationResponse) SetResult(v []*AlarmHistoryListKeySetMap) *QueryAlarmApprelationResponse {
	s.Result = v
	return s
}

type BatchqueryStackGeneratedconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名列表
	AppNames []*string `json:"app_names,omitempty" xml:"app_names,omitempty" type:"Repeated"`
}

func (s BatchqueryStackGeneratedconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryStackGeneratedconfigRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryStackGeneratedconfigRequest) SetAuthToken(v string) *BatchqueryStackGeneratedconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryStackGeneratedconfigRequest) SetWorkspaceName(v string) *BatchqueryStackGeneratedconfigRequest {
	s.WorkspaceName = &v
	return s
}

func (s *BatchqueryStackGeneratedconfigRequest) SetAppNames(v []*string) *BatchqueryStackGeneratedconfigRequest {
	s.AppNames = v
	return s
}

type BatchqueryStackGeneratedconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 技术栈配置列表
	GeneratedConfigs []*StackGeneratedConfig `json:"generated_configs,omitempty" xml:"generated_configs,omitempty" type:"Repeated"`
}

func (s BatchqueryStackGeneratedconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryStackGeneratedconfigResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryStackGeneratedconfigResponse) SetReqMsgId(v string) *BatchqueryStackGeneratedconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryStackGeneratedconfigResponse) SetResultCode(v string) *BatchqueryStackGeneratedconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryStackGeneratedconfigResponse) SetResultMsg(v string) *BatchqueryStackGeneratedconfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryStackGeneratedconfigResponse) SetGeneratedConfigs(v []*StackGeneratedConfig) *BatchqueryStackGeneratedconfigResponse {
	s.GeneratedConfigs = v
	return s
}

type ListDashboardRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 大盘类型：MINE(我的大盘)、CORE(关键大盘)
	DashboardType *string `json:"dashboard_type,omitempty" xml:"dashboard_type,omitempty" require:"true"`
}

func (s ListDashboardRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDashboardRequest) GoString() string {
	return s.String()
}

func (s *ListDashboardRequest) SetAuthToken(v string) *ListDashboardRequest {
	s.AuthToken = &v
	return s
}

func (s *ListDashboardRequest) SetWorkspaceName(v string) *ListDashboardRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ListDashboardRequest) SetDashboardType(v string) *ListDashboardRequest {
	s.DashboardType = &v
	return s
}

type ListDashboardResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 大盘列表
	Dashboards []*PluginModelDO `json:"dashboards,omitempty" xml:"dashboards,omitempty" type:"Repeated"`
}

func (s ListDashboardResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDashboardResponse) GoString() string {
	return s.String()
}

func (s *ListDashboardResponse) SetReqMsgId(v string) *ListDashboardResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListDashboardResponse) SetResultCode(v string) *ListDashboardResponse {
	s.ResultCode = &v
	return s
}

func (s *ListDashboardResponse) SetResultMsg(v string) *ListDashboardResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListDashboardResponse) SetDashboards(v []*PluginModelDO) *ListDashboardResponse {
	s.Dashboards = v
	return s
}

type QueryStackGeneratedconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 栈实体对象复合ID
	StackUniversalTableId *string `json:"stack_universal_table_id,omitempty" xml:"stack_universal_table_id,omitempty" require:"true"`
}

func (s QueryStackGeneratedconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryStackGeneratedconfigRequest) GoString() string {
	return s.String()
}

func (s *QueryStackGeneratedconfigRequest) SetAuthToken(v string) *QueryStackGeneratedconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryStackGeneratedconfigRequest) SetWorkspaceName(v string) *QueryStackGeneratedconfigRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryStackGeneratedconfigRequest) SetStackUniversalTableId(v string) *QueryStackGeneratedconfigRequest {
	s.StackUniversalTableId = &v
	return s
}

type QueryStackGeneratedconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 栈配置列表
	GeneratedConfigs []*StackGeneratedConfig `json:"generated_configs,omitempty" xml:"generated_configs,omitempty" type:"Repeated"`
}

func (s QueryStackGeneratedconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryStackGeneratedconfigResponse) GoString() string {
	return s.String()
}

func (s *QueryStackGeneratedconfigResponse) SetReqMsgId(v string) *QueryStackGeneratedconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryStackGeneratedconfigResponse) SetResultCode(v string) *QueryStackGeneratedconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryStackGeneratedconfigResponse) SetResultMsg(v string) *QueryStackGeneratedconfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryStackGeneratedconfigResponse) SetGeneratedConfigs(v []*StackGeneratedConfig) *QueryStackGeneratedconfigResponse {
	s.GeneratedConfigs = v
	return s
}

type QueryStackMonitoritemRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 技术栈 ID
	StackId *int64 `json:"stack_id,omitempty" xml:"stack_id,omitempty" require:"true"`
}

func (s QueryStackMonitoritemRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryStackMonitoritemRequest) GoString() string {
	return s.String()
}

func (s *QueryStackMonitoritemRequest) SetAuthToken(v string) *QueryStackMonitoritemRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryStackMonitoritemRequest) SetWorkspaceName(v string) *QueryStackMonitoritemRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryStackMonitoritemRequest) SetStackId(v int64) *QueryStackMonitoritemRequest {
	s.StackId = &v
	return s
}

type QueryStackMonitoritemResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 监控项列表
	MonitorItems []*StackMonitorItem `json:"monitor_items,omitempty" xml:"monitor_items,omitempty" type:"Repeated"`
}

func (s QueryStackMonitoritemResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryStackMonitoritemResponse) GoString() string {
	return s.String()
}

func (s *QueryStackMonitoritemResponse) SetReqMsgId(v string) *QueryStackMonitoritemResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryStackMonitoritemResponse) SetResultCode(v string) *QueryStackMonitoritemResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryStackMonitoritemResponse) SetResultMsg(v string) *QueryStackMonitoritemResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryStackMonitoritemResponse) SetMonitorItems(v []*StackMonitorItem) *QueryStackMonitoritemResponse {
	s.MonitorItems = v
	return s
}

type QueryUsergroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 联系人登录名称数组
	UserLoginNames *string `json:"user_login_names,omitempty" xml:"user_login_names,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 通知组名称
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
	// 是否只查询当前操作者的
	OnlyCurrentStaff *bool `json:"only_current_staff,omitempty" xml:"only_current_staff,omitempty"`
}

func (s QueryUsergroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUsergroupRequest) GoString() string {
	return s.String()
}

func (s *QueryUsergroupRequest) SetAuthToken(v string) *QueryUsergroupRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUsergroupRequest) SetWorkspaceName(v string) *QueryUsergroupRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryUsergroupRequest) SetUserLoginNames(v string) *QueryUsergroupRequest {
	s.UserLoginNames = &v
	return s
}

func (s *QueryUsergroupRequest) SetPageSize(v int64) *QueryUsergroupRequest {
	s.PageSize = &v
	return s
}

func (s *QueryUsergroupRequest) SetCurrentPage(v int64) *QueryUsergroupRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryUsergroupRequest) SetKeyword(v string) *QueryUsergroupRequest {
	s.Keyword = &v
	return s
}

func (s *QueryUsergroupRequest) SetOnlyCurrentStaff(v bool) *QueryUsergroupRequest {
	s.OnlyCurrentStaff = &v
	return s
}

type QueryUsergroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 通知组列表
	UserGroups []*UserGroup `json:"user_groups,omitempty" xml:"user_groups,omitempty" type:"Repeated"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总记录数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryUsergroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUsergroupResponse) GoString() string {
	return s.String()
}

func (s *QueryUsergroupResponse) SetReqMsgId(v string) *QueryUsergroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUsergroupResponse) SetResultCode(v string) *QueryUsergroupResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUsergroupResponse) SetResultMsg(v string) *QueryUsergroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUsergroupResponse) SetUserGroups(v []*UserGroup) *QueryUsergroupResponse {
	s.UserGroups = v
	return s
}

func (s *QueryUsergroupResponse) SetCurrentPage(v int64) *QueryUsergroupResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryUsergroupResponse) SetPageSize(v int64) *QueryUsergroupResponse {
	s.PageSize = &v
	return s
}

func (s *QueryUsergroupResponse) SetTotalCount(v int64) *QueryUsergroupResponse {
	s.TotalCount = &v
	return s
}

type CreateUsergroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 通知组名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 钉钉机器人token数组
	DingtalkWebhooks []*string `json:"dingtalk_webhooks,omitempty" xml:"dingtalk_webhooks,omitempty" type:"Repeated"`
	// 联系人登录名称数组
	UserLoginNames []*string `json:"user_login_names,omitempty" xml:"user_login_names,omitempty" type:"Repeated"`
	// 0、当前workspace有效；
	// 1、当前租户有效
	ValidScope *int64 `json:"valid_scope,omitempty" xml:"valid_scope,omitempty"`
	// 钉钉机器人
	DingDingRobots []*string `json:"ding_ding_robots,omitempty" xml:"ding_ding_robots,omitempty" type:"Repeated"`
}

func (s CreateUsergroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUsergroupRequest) GoString() string {
	return s.String()
}

func (s *CreateUsergroupRequest) SetAuthToken(v string) *CreateUsergroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateUsergroupRequest) SetWorkspaceName(v string) *CreateUsergroupRequest {
	s.WorkspaceName = &v
	return s
}

func (s *CreateUsergroupRequest) SetName(v string) *CreateUsergroupRequest {
	s.Name = &v
	return s
}

func (s *CreateUsergroupRequest) SetDingtalkWebhooks(v []*string) *CreateUsergroupRequest {
	s.DingtalkWebhooks = v
	return s
}

func (s *CreateUsergroupRequest) SetUserLoginNames(v []*string) *CreateUsergroupRequest {
	s.UserLoginNames = v
	return s
}

func (s *CreateUsergroupRequest) SetValidScope(v int64) *CreateUsergroupRequest {
	s.ValidScope = &v
	return s
}

func (s *CreateUsergroupRequest) SetDingDingRobots(v []*string) *CreateUsergroupRequest {
	s.DingDingRobots = v
	return s
}

type CreateUsergroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 通知组 ID
	GroupId *int64 `json:"group_id,omitempty" xml:"group_id,omitempty"`
}

func (s CreateUsergroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUsergroupResponse) GoString() string {
	return s.String()
}

func (s *CreateUsergroupResponse) SetReqMsgId(v string) *CreateUsergroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateUsergroupResponse) SetResultCode(v string) *CreateUsergroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateUsergroupResponse) SetResultMsg(v string) *CreateUsergroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateUsergroupResponse) SetGroupId(v int64) *CreateUsergroupResponse {
	s.GroupId = &v
	return s
}

type UpdateUsergroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 通知组 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 通知组名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 钉钉机器人token数组
	DingtalkWebhooks []*string `json:"dingtalk_webhooks,omitempty" xml:"dingtalk_webhooks,omitempty" type:"Repeated"`
	// 联系人登录名称数组
	UserLoginNames []*string `json:"user_login_names,omitempty" xml:"user_login_names,omitempty" type:"Repeated"`
	// 全局订阅
	ScopeGlobal *bool `json:"scope_global,omitempty" xml:"scope_global,omitempty"`
	// 0、当前workspace有效；
	// 1、租户有效；
	ValidScope *int64 `json:"valid_scope,omitempty" xml:"valid_scope,omitempty"`
	// 钉钉机器人
	DingDingRobots []*string `json:"ding_ding_robots,omitempty" xml:"ding_ding_robots,omitempty" type:"Repeated"`
}

func (s UpdateUsergroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateUsergroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateUsergroupRequest) SetAuthToken(v string) *UpdateUsergroupRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateUsergroupRequest) SetWorkspaceName(v string) *UpdateUsergroupRequest {
	s.WorkspaceName = &v
	return s
}

func (s *UpdateUsergroupRequest) SetId(v int64) *UpdateUsergroupRequest {
	s.Id = &v
	return s
}

func (s *UpdateUsergroupRequest) SetName(v string) *UpdateUsergroupRequest {
	s.Name = &v
	return s
}

func (s *UpdateUsergroupRequest) SetDingtalkWebhooks(v []*string) *UpdateUsergroupRequest {
	s.DingtalkWebhooks = v
	return s
}

func (s *UpdateUsergroupRequest) SetUserLoginNames(v []*string) *UpdateUsergroupRequest {
	s.UserLoginNames = v
	return s
}

func (s *UpdateUsergroupRequest) SetScopeGlobal(v bool) *UpdateUsergroupRequest {
	s.ScopeGlobal = &v
	return s
}

func (s *UpdateUsergroupRequest) SetValidScope(v int64) *UpdateUsergroupRequest {
	s.ValidScope = &v
	return s
}

func (s *UpdateUsergroupRequest) SetDingDingRobots(v []*string) *UpdateUsergroupRequest {
	s.DingDingRobots = v
	return s
}

type UpdateUsergroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateUsergroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateUsergroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateUsergroupResponse) SetReqMsgId(v string) *UpdateUsergroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateUsergroupResponse) SetResultCode(v string) *UpdateUsergroupResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateUsergroupResponse) SetResultMsg(v string) *UpdateUsergroupResponse {
	s.ResultMsg = &v
	return s
}

type DeleteUsergroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 通知组 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteUsergroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUsergroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteUsergroupRequest) SetAuthToken(v string) *DeleteUsergroupRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteUsergroupRequest) SetWorkspaceName(v string) *DeleteUsergroupRequest {
	s.WorkspaceName = &v
	return s
}

func (s *DeleteUsergroupRequest) SetId(v int64) *DeleteUsergroupRequest {
	s.Id = &v
	return s
}

type DeleteUsergroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteUsergroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUsergroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteUsergroupResponse) SetReqMsgId(v string) *DeleteUsergroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteUsergroupResponse) SetResultCode(v string) *DeleteUsergroupResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteUsergroupResponse) SetResultMsg(v string) *DeleteUsergroupResponse {
	s.ResultMsg = &v
	return s
}

type QueryAlarmTrendRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 开始时间
	Start *int64 `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// 结束时间
	End *int64 `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// 告警类型 (固定传入自定义、应用、应用组3个告警类型)
	AlarmTypes []*string `json:"alarm_types,omitempty" xml:"alarm_types,omitempty" require:"true" type:"Repeated"`
}

func (s QueryAlarmTrendRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmTrendRequest) GoString() string {
	return s.String()
}

func (s *QueryAlarmTrendRequest) SetAuthToken(v string) *QueryAlarmTrendRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAlarmTrendRequest) SetWorkspaceName(v string) *QueryAlarmTrendRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryAlarmTrendRequest) SetStart(v int64) *QueryAlarmTrendRequest {
	s.Start = &v
	return s
}

func (s *QueryAlarmTrendRequest) SetEnd(v int64) *QueryAlarmTrendRequest {
	s.End = &v
	return s
}

func (s *QueryAlarmTrendRequest) SetAlarmTypes(v []*string) *QueryAlarmTrendRequest {
	s.AlarmTypes = v
	return s
}

type QueryAlarmTrendResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回数据
	Data []*AlarmCountInfoKeySet `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryAlarmTrendResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmTrendResponse) GoString() string {
	return s.String()
}

func (s *QueryAlarmTrendResponse) SetReqMsgId(v string) *QueryAlarmTrendResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAlarmTrendResponse) SetResultCode(v string) *QueryAlarmTrendResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAlarmTrendResponse) SetResultMsg(v string) *QueryAlarmTrendResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAlarmTrendResponse) SetData(v []*AlarmCountInfoKeySet) *QueryAlarmTrendResponse {
	s.Data = v
	return s
}

type QueryAlarmHistoryRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 开始时间
	Start *int64 `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// 结束时间
	End *int64 `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// 是否查询所有告警类型
	AllTypes *bool `json:"all_types,omitempty" xml:"all_types,omitempty" require:"true"`
	// 告警类型数组
	AlarmTypes []*string `json:"alarm_types,omitempty" xml:"alarm_types,omitempty" type:"Repeated"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// dsid
	Dsid *int64 `json:"dsid,omitempty" xml:"dsid,omitempty"`
}

func (s QueryAlarmHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmHistoryRequest) GoString() string {
	return s.String()
}

func (s *QueryAlarmHistoryRequest) SetAuthToken(v string) *QueryAlarmHistoryRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAlarmHistoryRequest) SetWorkspaceName(v string) *QueryAlarmHistoryRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryAlarmHistoryRequest) SetStart(v int64) *QueryAlarmHistoryRequest {
	s.Start = &v
	return s
}

func (s *QueryAlarmHistoryRequest) SetEnd(v int64) *QueryAlarmHistoryRequest {
	s.End = &v
	return s
}

func (s *QueryAlarmHistoryRequest) SetAllTypes(v bool) *QueryAlarmHistoryRequest {
	s.AllTypes = &v
	return s
}

func (s *QueryAlarmHistoryRequest) SetAlarmTypes(v []*string) *QueryAlarmHistoryRequest {
	s.AlarmTypes = v
	return s
}

func (s *QueryAlarmHistoryRequest) SetCurrentPage(v int64) *QueryAlarmHistoryRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryAlarmHistoryRequest) SetPageSize(v int64) *QueryAlarmHistoryRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAlarmHistoryRequest) SetDsid(v int64) *QueryAlarmHistoryRequest {
	s.Dsid = &v
	return s
}

type QueryAlarmHistoryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 告警历史数组
	AlarmHistorys []*AlarmHistory `json:"alarm_historys,omitempty" xml:"alarm_historys,omitempty" type:"Repeated"`
	// 总记录数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryAlarmHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmHistoryResponse) GoString() string {
	return s.String()
}

func (s *QueryAlarmHistoryResponse) SetReqMsgId(v string) *QueryAlarmHistoryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAlarmHistoryResponse) SetResultCode(v string) *QueryAlarmHistoryResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAlarmHistoryResponse) SetResultMsg(v string) *QueryAlarmHistoryResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAlarmHistoryResponse) SetAlarmHistorys(v []*AlarmHistory) *QueryAlarmHistoryResponse {
	s.AlarmHistorys = v
	return s
}

func (s *QueryAlarmHistoryResponse) SetTotalCount(v int64) *QueryAlarmHistoryResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryAlarmHistoryResponse) SetCurrentPage(v int64) *QueryAlarmHistoryResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryAlarmHistoryResponse) SetPageSize(v int64) *QueryAlarmHistoryResponse {
	s.PageSize = &v
	return s
}

type QueryAlarmSubscriptionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 是否只查询我的订阅
	OnlyMine *bool `json:"only_mine,omitempty" xml:"only_mine,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryAlarmSubscriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmSubscriptionRequest) GoString() string {
	return s.String()
}

func (s *QueryAlarmSubscriptionRequest) SetAuthToken(v string) *QueryAlarmSubscriptionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAlarmSubscriptionRequest) SetWorkspaceName(v string) *QueryAlarmSubscriptionRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryAlarmSubscriptionRequest) SetOnlyMine(v bool) *QueryAlarmSubscriptionRequest {
	s.OnlyMine = &v
	return s
}

func (s *QueryAlarmSubscriptionRequest) SetCurrentPage(v int64) *QueryAlarmSubscriptionRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryAlarmSubscriptionRequest) SetPageSize(v int64) *QueryAlarmSubscriptionRequest {
	s.PageSize = &v
	return s
}

type QueryAlarmSubscriptionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 告警订阅数组
	AlarmSubscriptions []*AlarmSubDTO `json:"alarm_subscriptions,omitempty" xml:"alarm_subscriptions,omitempty" type:"Repeated"`
	// 总记录数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryAlarmSubscriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmSubscriptionResponse) GoString() string {
	return s.String()
}

func (s *QueryAlarmSubscriptionResponse) SetReqMsgId(v string) *QueryAlarmSubscriptionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAlarmSubscriptionResponse) SetResultCode(v string) *QueryAlarmSubscriptionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAlarmSubscriptionResponse) SetResultMsg(v string) *QueryAlarmSubscriptionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAlarmSubscriptionResponse) SetAlarmSubscriptions(v []*AlarmSubDTO) *QueryAlarmSubscriptionResponse {
	s.AlarmSubscriptions = v
	return s
}

func (s *QueryAlarmSubscriptionResponse) SetTotalCount(v int64) *QueryAlarmSubscriptionResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryAlarmSubscriptionResponse) SetCurrentPage(v int64) *QueryAlarmSubscriptionResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryAlarmSubscriptionResponse) SetPageSize(v int64) *QueryAlarmSubscriptionResponse {
	s.PageSize = &v
	return s
}

type QueryStackAlarmruleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 栈实体对象复合ID
	StackUniversalTableId *string `json:"stack_universal_table_id,omitempty" xml:"stack_universal_table_id,omitempty" require:"true"`
}

func (s QueryStackAlarmruleRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryStackAlarmruleRequest) GoString() string {
	return s.String()
}

func (s *QueryStackAlarmruleRequest) SetAuthToken(v string) *QueryStackAlarmruleRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryStackAlarmruleRequest) SetWorkspaceName(v string) *QueryStackAlarmruleRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryStackAlarmruleRequest) SetStackUniversalTableId(v string) *QueryStackAlarmruleRequest {
	s.StackUniversalTableId = &v
	return s
}

type QueryStackAlarmruleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 告警套餐配置数组
	AlarmRules []*StackAlarmRule `json:"alarm_rules,omitempty" xml:"alarm_rules,omitempty" type:"Repeated"`
}

func (s QueryStackAlarmruleResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryStackAlarmruleResponse) GoString() string {
	return s.String()
}

func (s *QueryStackAlarmruleResponse) SetReqMsgId(v string) *QueryStackAlarmruleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryStackAlarmruleResponse) SetResultCode(v string) *QueryStackAlarmruleResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryStackAlarmruleResponse) SetResultMsg(v string) *QueryStackAlarmruleResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryStackAlarmruleResponse) SetAlarmRules(v []*StackAlarmRule) *QueryStackAlarmruleResponse {
	s.AlarmRules = v
	return s
}

type UpdateCustompluginRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 自定义监控指标详细信息 (嵌套对象)
	CustomPlugin *CustomPluginDO `json:"custom_plugin,omitempty" xml:"custom_plugin,omitempty" require:"true"`
}

func (s UpdateCustompluginRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustompluginRequest) GoString() string {
	return s.String()
}

func (s *UpdateCustompluginRequest) SetAuthToken(v string) *UpdateCustompluginRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateCustompluginRequest) SetWorkspaceName(v string) *UpdateCustompluginRequest {
	s.WorkspaceName = &v
	return s
}

func (s *UpdateCustompluginRequest) SetCustomPlugin(v *CustomPluginDO) *UpdateCustompluginRequest {
	s.CustomPlugin = v
	return s
}

type UpdateCustompluginResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateCustompluginResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustompluginResponse) GoString() string {
	return s.String()
}

func (s *UpdateCustompluginResponse) SetReqMsgId(v string) *UpdateCustompluginResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateCustompluginResponse) SetResultCode(v string) *UpdateCustompluginResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateCustompluginResponse) SetResultMsg(v string) *UpdateCustompluginResponse {
	s.ResultMsg = &v
	return s
}

type QueryAgentRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页码
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// agent部署类型：容器CONTAINER、经典MACHINE
	DeployType *string `json:"deploy_type,omitempty" xml:"deploy_type,omitempty"`
	// 模糊搜索关键字
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
	// app 模糊搜索关键字
	AppKeyword *string `json:"app_keyword,omitempty" xml:"app_keyword,omitempty"`
	// 服务 IP 模糊搜索关键字
	ServiceIpKeyword *string `json:"service_ip_keyword,omitempty" xml:"service_ip_keyword,omitempty"`
	// 主机 IP 模糊搜索关键字
	HostIpKeyword *string `json:"host_ip_keyword,omitempty" xml:"host_ip_keyword,omitempty"`
	// agent 状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s QueryAgentRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAgentRequest) GoString() string {
	return s.String()
}

func (s *QueryAgentRequest) SetAuthToken(v string) *QueryAgentRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAgentRequest) SetWorkspaceName(v string) *QueryAgentRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryAgentRequest) SetPageSize(v int64) *QueryAgentRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAgentRequest) SetCurrentPage(v int64) *QueryAgentRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryAgentRequest) SetDeployType(v string) *QueryAgentRequest {
	s.DeployType = &v
	return s
}

func (s *QueryAgentRequest) SetKeyword(v string) *QueryAgentRequest {
	s.Keyword = &v
	return s
}

func (s *QueryAgentRequest) SetAppKeyword(v string) *QueryAgentRequest {
	s.AppKeyword = &v
	return s
}

func (s *QueryAgentRequest) SetServiceIpKeyword(v string) *QueryAgentRequest {
	s.ServiceIpKeyword = &v
	return s
}

func (s *QueryAgentRequest) SetHostIpKeyword(v string) *QueryAgentRequest {
	s.HostIpKeyword = &v
	return s
}

func (s *QueryAgentRequest) SetStatus(v int64) *QueryAgentRequest {
	s.Status = &v
	return s
}

type QueryAgentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// agent 实例列表
	AgentInstances []*AgentInstance `json:"agent_instances,omitempty" xml:"agent_instances,omitempty" type:"Repeated"`
	// agent 实例总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页码
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
}

func (s QueryAgentResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAgentResponse) GoString() string {
	return s.String()
}

func (s *QueryAgentResponse) SetReqMsgId(v string) *QueryAgentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAgentResponse) SetResultCode(v string) *QueryAgentResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAgentResponse) SetResultMsg(v string) *QueryAgentResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAgentResponse) SetAgentInstances(v []*AgentInstance) *QueryAgentResponse {
	s.AgentInstances = v
	return s
}

func (s *QueryAgentResponse) SetTotalCount(v int64) *QueryAgentResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryAgentResponse) SetPageSize(v int64) *QueryAgentResponse {
	s.PageSize = &v
	return s
}

func (s *QueryAgentResponse) SetCurrentPage(v int64) *QueryAgentResponse {
	s.CurrentPage = &v
	return s
}

type InstallAgentRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 需要安装 agent 的目标列表
	CollectIds []*string `json:"collect_ids,omitempty" xml:"collect_ids,omitempty" type:"Repeated"`
	// 0 容器，1经典
	Type *int64 `json:"type,omitempty" xml:"type,omitempty"`
}

func (s InstallAgentRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallAgentRequest) GoString() string {
	return s.String()
}

func (s *InstallAgentRequest) SetAuthToken(v string) *InstallAgentRequest {
	s.AuthToken = &v
	return s
}

func (s *InstallAgentRequest) SetWorkspaceName(v string) *InstallAgentRequest {
	s.WorkspaceName = &v
	return s
}

func (s *InstallAgentRequest) SetCollectIds(v []*string) *InstallAgentRequest {
	s.CollectIds = v
	return s
}

func (s *InstallAgentRequest) SetType(v int64) *InstallAgentRequest {
	s.Type = &v
	return s
}

type InstallAgentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s InstallAgentResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallAgentResponse) GoString() string {
	return s.String()
}

func (s *InstallAgentResponse) SetReqMsgId(v string) *InstallAgentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InstallAgentResponse) SetResultCode(v string) *InstallAgentResponse {
	s.ResultCode = &v
	return s
}

func (s *InstallAgentResponse) SetResultMsg(v string) *InstallAgentResponse {
	s.ResultMsg = &v
	return s
}

type GetAgentVersionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// agent 机器对应的唯一标识
	CollectId *string `json:"collect_id,omitempty" xml:"collect_id,omitempty"`
}

func (s GetAgentVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAgentVersionRequest) GoString() string {
	return s.String()
}

func (s *GetAgentVersionRequest) SetAuthToken(v string) *GetAgentVersionRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAgentVersionRequest) SetWorkspaceName(v string) *GetAgentVersionRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetAgentVersionRequest) SetCollectId(v string) *GetAgentVersionRequest {
	s.CollectId = &v
	return s
}

type GetAgentVersionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// agent版本信息
	AgentVersion *AgentVersion `json:"agent_version,omitempty" xml:"agent_version,omitempty"`
}

func (s GetAgentVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAgentVersionResponse) GoString() string {
	return s.String()
}

func (s *GetAgentVersionResponse) SetReqMsgId(v string) *GetAgentVersionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAgentVersionResponse) SetResultCode(v string) *GetAgentVersionResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAgentVersionResponse) SetResultMsg(v string) *GetAgentVersionResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAgentVersionResponse) SetAgentVersion(v *AgentVersion) *GetAgentVersionResponse {
	s.AgentVersion = v
	return s
}

type EnableAgentVersionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// agent版本号
	AgentVersion *string `json:"agent_version,omitempty" xml:"agent_version,omitempty" require:"true"`
	// agent存储url
	AgentUrl *string `json:"agent_url,omitempty" xml:"agent_url,omitempty" require:"true"`
}

func (s EnableAgentVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableAgentVersionRequest) GoString() string {
	return s.String()
}

func (s *EnableAgentVersionRequest) SetAuthToken(v string) *EnableAgentVersionRequest {
	s.AuthToken = &v
	return s
}

func (s *EnableAgentVersionRequest) SetAgentVersion(v string) *EnableAgentVersionRequest {
	s.AgentVersion = &v
	return s
}

func (s *EnableAgentVersionRequest) SetAgentUrl(v string) *EnableAgentVersionRequest {
	s.AgentUrl = &v
	return s
}

type EnableAgentVersionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 版本信息
	AgentVersion *AgentVersion `json:"agent_version,omitempty" xml:"agent_version,omitempty"`
}

func (s EnableAgentVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableAgentVersionResponse) GoString() string {
	return s.String()
}

func (s *EnableAgentVersionResponse) SetReqMsgId(v string) *EnableAgentVersionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *EnableAgentVersionResponse) SetResultCode(v string) *EnableAgentVersionResponse {
	s.ResultCode = &v
	return s
}

func (s *EnableAgentVersionResponse) SetResultMsg(v string) *EnableAgentVersionResponse {
	s.ResultMsg = &v
	return s
}

func (s *EnableAgentVersionResponse) SetAgentVersion(v *AgentVersion) *EnableAgentVersionResponse {
	s.AgentVersion = v
	return s
}

type GetWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s GetWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *GetWorkspaceRequest) SetAuthToken(v string) *GetWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetWorkspaceRequest) SetWorkspaceName(v string) *GetWorkspaceRequest {
	s.WorkspaceName = &v
	return s
}

type GetWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 工作空间
	Workspace *Workspace `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *GetWorkspaceResponse) SetReqMsgId(v string) *GetWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetWorkspaceResponse) SetResultCode(v string) *GetWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetWorkspaceResponse) SetResultMsg(v string) *GetWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetWorkspaceResponse) SetWorkspace(v *Workspace) *GetWorkspaceResponse {
	s.Workspace = v
	return s
}

type GetTenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s GetTenantRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTenantRequest) GoString() string {
	return s.String()
}

func (s *GetTenantRequest) SetAuthToken(v string) *GetTenantRequest {
	s.AuthToken = &v
	return s
}

type GetTenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 租户
	Tenant *Tenant `json:"tenant,omitempty" xml:"tenant,omitempty"`
}

func (s GetTenantResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTenantResponse) GoString() string {
	return s.String()
}

func (s *GetTenantResponse) SetReqMsgId(v string) *GetTenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTenantResponse) SetResultCode(v string) *GetTenantResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTenantResponse) SetResultMsg(v string) *GetTenantResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTenantResponse) SetTenant(v *Tenant) *GetTenantResponse {
	s.Tenant = v
	return s
}

type QueryKernelstackGeneratedconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 不带租户id和workspaceId的universalTableId后缀
	SimpleTableId *string `json:"simple_table_id,omitempty" xml:"simple_table_id,omitempty" require:"true"`
}

func (s QueryKernelstackGeneratedconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryKernelstackGeneratedconfigRequest) GoString() string {
	return s.String()
}

func (s *QueryKernelstackGeneratedconfigRequest) SetAuthToken(v string) *QueryKernelstackGeneratedconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryKernelstackGeneratedconfigRequest) SetSimpleTableId(v string) *QueryKernelstackGeneratedconfigRequest {
	s.SimpleTableId = &v
	return s
}

type QueryKernelstackGeneratedconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 栈配置列表
	GeneratedConfigs []*StackGeneratedConfig `json:"generated_configs,omitempty" xml:"generated_configs,omitempty" type:"Repeated"`
}

func (s QueryKernelstackGeneratedconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryKernelstackGeneratedconfigResponse) GoString() string {
	return s.String()
}

func (s *QueryKernelstackGeneratedconfigResponse) SetReqMsgId(v string) *QueryKernelstackGeneratedconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryKernelstackGeneratedconfigResponse) SetResultCode(v string) *QueryKernelstackGeneratedconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryKernelstackGeneratedconfigResponse) SetResultMsg(v string) *QueryKernelstackGeneratedconfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryKernelstackGeneratedconfigResponse) SetGeneratedConfigs(v []*StackGeneratedConfig) *QueryKernelstackGeneratedconfigResponse {
	s.GeneratedConfigs = v
	return s
}

type GetAliyunStatusRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s GetAliyunStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAliyunStatusRequest) GoString() string {
	return s.String()
}

func (s *GetAliyunStatusRequest) SetAuthToken(v string) *GetAliyunStatusRequest {
	s.AuthToken = &v
	return s
}

type GetAliyunStatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 阿里云开通状态
	Status *AliyunOpenState `json:"status,omitempty" xml:"status,omitempty"`
}

func (s GetAliyunStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAliyunStatusResponse) GoString() string {
	return s.String()
}

func (s *GetAliyunStatusResponse) SetReqMsgId(v string) *GetAliyunStatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAliyunStatusResponse) SetResultCode(v string) *GetAliyunStatusResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAliyunStatusResponse) SetResultMsg(v string) *GetAliyunStatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAliyunStatusResponse) SetStatus(v *AliyunOpenState) *GetAliyunStatusResponse {
	s.Status = v
	return s
}

type OpenWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 工作空间展示名称
	WorkspaceDisplayName *string `json:"workspace_display_name,omitempty" xml:"workspace_display_name,omitempty"`
}

func (s OpenWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *OpenWorkspaceRequest) SetAuthToken(v string) *OpenWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *OpenWorkspaceRequest) SetWorkspaceName(v string) *OpenWorkspaceRequest {
	s.WorkspaceName = &v
	return s
}

func (s *OpenWorkspaceRequest) SetWorkspaceDisplayName(v string) *OpenWorkspaceRequest {
	s.WorkspaceDisplayName = &v
	return s
}

type OpenWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 工作空间信息
	Workspace *Workspace `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s OpenWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *OpenWorkspaceResponse) SetReqMsgId(v string) *OpenWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OpenWorkspaceResponse) SetResultCode(v string) *OpenWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *OpenWorkspaceResponse) SetResultMsg(v string) *OpenWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *OpenWorkspaceResponse) SetWorkspace(v *Workspace) *OpenWorkspaceResponse {
	s.Workspace = v
	return s
}

type UpdateStackGeneratedconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 待修改的技术栈配置
	GeneratedConfig *StackGeneratedConfig `json:"generated_config,omitempty" xml:"generated_config,omitempty" require:"true"`
}

func (s UpdateStackGeneratedconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateStackGeneratedconfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateStackGeneratedconfigRequest) SetAuthToken(v string) *UpdateStackGeneratedconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateStackGeneratedconfigRequest) SetWorkspaceName(v string) *UpdateStackGeneratedconfigRequest {
	s.WorkspaceName = &v
	return s
}

func (s *UpdateStackGeneratedconfigRequest) SetGeneratedConfig(v *StackGeneratedConfig) *UpdateStackGeneratedconfigRequest {
	s.GeneratedConfig = v
	return s
}

type UpdateStackGeneratedconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateStackGeneratedconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateStackGeneratedconfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateStackGeneratedconfigResponse) SetReqMsgId(v string) *UpdateStackGeneratedconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateStackGeneratedconfigResponse) SetResultCode(v string) *UpdateStackGeneratedconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateStackGeneratedconfigResponse) SetResultMsg(v string) *UpdateStackGeneratedconfigResponse {
	s.ResultMsg = &v
	return s
}

type QueryUserRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 用户名(支持模糊搜索)
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty" require:"true"`
}

func (s QueryUserRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUserRequest) GoString() string {
	return s.String()
}

func (s *QueryUserRequest) SetAuthToken(v string) *QueryUserRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUserRequest) SetWorkspaceName(v string) *QueryUserRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryUserRequest) SetKeyword(v string) *QueryUserRequest {
	s.Keyword = &v
	return s
}

type QueryUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户列表
	Users []*MonitorUserDO `json:"users,omitempty" xml:"users,omitempty" type:"Repeated"`
}

func (s QueryUserResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUserResponse) GoString() string {
	return s.String()
}

func (s *QueryUserResponse) SetReqMsgId(v string) *QueryUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUserResponse) SetResultCode(v string) *QueryUserResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUserResponse) SetResultMsg(v string) *QueryUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUserResponse) SetUsers(v []*MonitorUserDO) *QueryUserResponse {
	s.Users = v
	return s
}

type ListAuthRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 权限码
	Auth *string `json:"auth,omitempty" xml:"auth,omitempty" require:"true"`
	// 资源类型（取值范围：CUSTOM_PLUGIN(自定义监控)、FOLDER(文件夹)、UNIVERSAL_TABLE(用户应用)）
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	// 资源ID列表
	ResourceIds []*string `json:"resource_ids,omitempty" xml:"resource_ids,omitempty" require:"true" type:"Repeated"`
}

func (s ListAuthRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAuthRequest) GoString() string {
	return s.String()
}

func (s *ListAuthRequest) SetAuthToken(v string) *ListAuthRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAuthRequest) SetWorkspaceName(v string) *ListAuthRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ListAuthRequest) SetAuth(v string) *ListAuthRequest {
	s.Auth = &v
	return s
}

func (s *ListAuthRequest) SetResourceType(v string) *ListAuthRequest {
	s.ResourceType = &v
	return s
}

func (s *ListAuthRequest) SetResourceIds(v []*string) *ListAuthRequest {
	s.ResourceIds = v
	return s
}

type ListAuthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 权限列表
	Data []*AuthDO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListAuthResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAuthResponse) GoString() string {
	return s.String()
}

func (s *ListAuthResponse) SetReqMsgId(v string) *ListAuthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAuthResponse) SetResultCode(v string) *ListAuthResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAuthResponse) SetResultMsg(v string) *ListAuthResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAuthResponse) SetData(v []*AuthDO) *ListAuthResponse {
	s.Data = v
	return s
}

type DeleteAuthRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 待删除的权限ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteAuthRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAuthRequest) GoString() string {
	return s.String()
}

func (s *DeleteAuthRequest) SetAuthToken(v string) *DeleteAuthRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteAuthRequest) SetWorkspaceName(v string) *DeleteAuthRequest {
	s.WorkspaceName = &v
	return s
}

func (s *DeleteAuthRequest) SetId(v int64) *DeleteAuthRequest {
	s.Id = &v
	return s
}

type DeleteAuthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteAuthResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAuthResponse) GoString() string {
	return s.String()
}

func (s *DeleteAuthResponse) SetReqMsgId(v string) *DeleteAuthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteAuthResponse) SetResultCode(v string) *DeleteAuthResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteAuthResponse) SetResultMsg(v string) *DeleteAuthResponse {
	s.ResultMsg = &v
	return s
}

type CreateAuthRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 权限码
	Auth *string `json:"auth,omitempty" xml:"auth,omitempty" require:"true"`
	// 用户名列表
	UserNames []*string `json:"user_names,omitempty" xml:"user_names,omitempty" require:"true" type:"Repeated"`
	// 权限的资源类型（取值范围：CUSTOM_PLUGIN(自定义监控)、FOLDER(文件夹)、UNIVERSAL_TABLE(用户应用)）
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	// 权限对应的资源ID
	ResourceId *string `json:"resource_id,omitempty" xml:"resource_id,omitempty" require:"true"`
}

func (s CreateAuthRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthRequest) GoString() string {
	return s.String()
}

func (s *CreateAuthRequest) SetAuthToken(v string) *CreateAuthRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAuthRequest) SetWorkspaceName(v string) *CreateAuthRequest {
	s.WorkspaceName = &v
	return s
}

func (s *CreateAuthRequest) SetAuth(v string) *CreateAuthRequest {
	s.Auth = &v
	return s
}

func (s *CreateAuthRequest) SetUserNames(v []*string) *CreateAuthRequest {
	s.UserNames = v
	return s
}

func (s *CreateAuthRequest) SetResourceType(v string) *CreateAuthRequest {
	s.ResourceType = &v
	return s
}

func (s *CreateAuthRequest) SetResourceId(v string) *CreateAuthRequest {
	s.ResourceId = &v
	return s
}

type CreateAuthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateAuthResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthResponse) GoString() string {
	return s.String()
}

func (s *CreateAuthResponse) SetReqMsgId(v string) *CreateAuthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAuthResponse) SetResultCode(v string) *CreateAuthResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAuthResponse) SetResultMsg(v string) *CreateAuthResponse {
	s.ResultMsg = &v
	return s
}

type BatchcreateUserFavoriteRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 收藏资源类型（取值范围：CUSTOM_PLUGIN(自定义监控)、FOLDER(文件夹)、UNIVERSAL_TABLE(用户应用)）
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	// 收藏资源ID列表，需要是相同类型下的ID (如果是自定义监控或文件夹，为数值类型，如果是用户应用，是复杂组合字符串)
	ResourceIds []*string `json:"resource_ids,omitempty" xml:"resource_ids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateUserFavoriteRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateUserFavoriteRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateUserFavoriteRequest) SetAuthToken(v string) *BatchcreateUserFavoriteRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateUserFavoriteRequest) SetWorkspaceName(v string) *BatchcreateUserFavoriteRequest {
	s.WorkspaceName = &v
	return s
}

func (s *BatchcreateUserFavoriteRequest) SetResourceType(v string) *BatchcreateUserFavoriteRequest {
	s.ResourceType = &v
	return s
}

func (s *BatchcreateUserFavoriteRequest) SetResourceIds(v []*string) *BatchcreateUserFavoriteRequest {
	s.ResourceIds = v
	return s
}

type BatchcreateUserFavoriteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchcreateUserFavoriteResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateUserFavoriteResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateUserFavoriteResponse) SetReqMsgId(v string) *BatchcreateUserFavoriteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateUserFavoriteResponse) SetResultCode(v string) *BatchcreateUserFavoriteResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateUserFavoriteResponse) SetResultMsg(v string) *BatchcreateUserFavoriteResponse {
	s.ResultMsg = &v
	return s
}

type BatchdeleteUserFavoriteRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 资源类型
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	// 已收藏资源ID列表（文件夹，传入文件夹ID；自定义监控，传入自定义监控ID；应用，传入universal_table_id）
	ResourceIds []*string `json:"resource_ids,omitempty" xml:"resource_ids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteUserFavoriteRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteUserFavoriteRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteUserFavoriteRequest) SetAuthToken(v string) *BatchdeleteUserFavoriteRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteUserFavoriteRequest) SetWorkspaceName(v string) *BatchdeleteUserFavoriteRequest {
	s.WorkspaceName = &v
	return s
}

func (s *BatchdeleteUserFavoriteRequest) SetResourceType(v string) *BatchdeleteUserFavoriteRequest {
	s.ResourceType = &v
	return s
}

func (s *BatchdeleteUserFavoriteRequest) SetResourceIds(v []*string) *BatchdeleteUserFavoriteRequest {
	s.ResourceIds = v
	return s
}

type BatchdeleteUserFavoriteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteUserFavoriteResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteUserFavoriteResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteUserFavoriteResponse) SetReqMsgId(v string) *BatchdeleteUserFavoriteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteUserFavoriteResponse) SetResultCode(v string) *BatchdeleteUserFavoriteResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteUserFavoriteResponse) SetResultMsg(v string) *BatchdeleteUserFavoriteResponse {
	s.ResultMsg = &v
	return s
}

type QueryUserOperationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 开始时间
	Start *int64 `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// 结束时间
	End *int64 `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// 表名
	TableName *string `json:"table_name,omitempty" xml:"table_name,omitempty" require:"true"`
	// 表实体对应ID
	TableEntityId *int64 `json:"table_entity_id,omitempty" xml:"table_entity_id,omitempty" require:"true"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
}

func (s QueryUserOperationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUserOperationRequest) GoString() string {
	return s.String()
}

func (s *QueryUserOperationRequest) SetAuthToken(v string) *QueryUserOperationRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUserOperationRequest) SetWorkspaceName(v string) *QueryUserOperationRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryUserOperationRequest) SetStart(v int64) *QueryUserOperationRequest {
	s.Start = &v
	return s
}

func (s *QueryUserOperationRequest) SetEnd(v int64) *QueryUserOperationRequest {
	s.End = &v
	return s
}

func (s *QueryUserOperationRequest) SetTableName(v string) *QueryUserOperationRequest {
	s.TableName = &v
	return s
}

func (s *QueryUserOperationRequest) SetTableEntityId(v int64) *QueryUserOperationRequest {
	s.TableEntityId = &v
	return s
}

func (s *QueryUserOperationRequest) SetPageSize(v int64) *QueryUserOperationRequest {
	s.PageSize = &v
	return s
}

func (s *QueryUserOperationRequest) SetCurrentPage(v int64) *QueryUserOperationRequest {
	s.CurrentPage = &v
	return s
}

type QueryUserOperationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 操作日志列表
	Operations []*UserOplogDO `json:"operations,omitempty" xml:"operations,omitempty" type:"Repeated"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总记录数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryUserOperationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUserOperationResponse) GoString() string {
	return s.String()
}

func (s *QueryUserOperationResponse) SetReqMsgId(v string) *QueryUserOperationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUserOperationResponse) SetResultCode(v string) *QueryUserOperationResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUserOperationResponse) SetResultMsg(v string) *QueryUserOperationResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUserOperationResponse) SetOperations(v []*UserOplogDO) *QueryUserOperationResponse {
	s.Operations = v
	return s
}

func (s *QueryUserOperationResponse) SetCurrentPage(v int64) *QueryUserOperationResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryUserOperationResponse) SetPageSize(v int64) *QueryUserOperationResponse {
	s.PageSize = &v
	return s
}

func (s *QueryUserOperationResponse) SetTotalCount(v int64) *QueryUserOperationResponse {
	s.TotalCount = &v
	return s
}

type CreateAlarmSubscriptionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 告警等级 (-1表示全部订阅)
	AlarmLevel *int64 `json:"alarm_level,omitempty" xml:"alarm_level,omitempty" require:"true"`
	// 是否开启通知降频 (0 - 关闭，1 - 开启)
	NotifyReduceSwitch *int64 `json:"notify_reduce_switch,omitempty" xml:"notify_reduce_switch,omitempty" require:"true"`
	// 资源类型（取值范围：CUSTOM_PLUGIN(自定义监控)、FOLDER(文件夹)、UNIVERSAL_TABLE(用户应用)）
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	// 资源 ID
	ResourceId *string `json:"resource_id,omitempty" xml:"resource_id,omitempty" require:"true"`
	// 用户登录名列表
	UserLoginNames []*string `json:"user_login_names,omitempty" xml:"user_login_names,omitempty" type:"Repeated"`
	// 用户组 ID列表
	UserGroupIds []*int64 `json:"user_group_ids,omitempty" xml:"user_group_ids,omitempty" type:"Repeated"`
	// http web hook id列表
	AlarmWebHookIds []*int64 `json:"alarm_web_hook_ids,omitempty" xml:"alarm_web_hook_ids,omitempty" type:"Repeated"`
}

func (s CreateAlarmSubscriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAlarmSubscriptionRequest) GoString() string {
	return s.String()
}

func (s *CreateAlarmSubscriptionRequest) SetAuthToken(v string) *CreateAlarmSubscriptionRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAlarmSubscriptionRequest) SetWorkspaceName(v string) *CreateAlarmSubscriptionRequest {
	s.WorkspaceName = &v
	return s
}

func (s *CreateAlarmSubscriptionRequest) SetAlarmLevel(v int64) *CreateAlarmSubscriptionRequest {
	s.AlarmLevel = &v
	return s
}

func (s *CreateAlarmSubscriptionRequest) SetNotifyReduceSwitch(v int64) *CreateAlarmSubscriptionRequest {
	s.NotifyReduceSwitch = &v
	return s
}

func (s *CreateAlarmSubscriptionRequest) SetResourceType(v string) *CreateAlarmSubscriptionRequest {
	s.ResourceType = &v
	return s
}

func (s *CreateAlarmSubscriptionRequest) SetResourceId(v string) *CreateAlarmSubscriptionRequest {
	s.ResourceId = &v
	return s
}

func (s *CreateAlarmSubscriptionRequest) SetUserLoginNames(v []*string) *CreateAlarmSubscriptionRequest {
	s.UserLoginNames = v
	return s
}

func (s *CreateAlarmSubscriptionRequest) SetUserGroupIds(v []*int64) *CreateAlarmSubscriptionRequest {
	s.UserGroupIds = v
	return s
}

func (s *CreateAlarmSubscriptionRequest) SetAlarmWebHookIds(v []*int64) *CreateAlarmSubscriptionRequest {
	s.AlarmWebHookIds = v
	return s
}

type CreateAlarmSubscriptionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateAlarmSubscriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAlarmSubscriptionResponse) GoString() string {
	return s.String()
}

func (s *CreateAlarmSubscriptionResponse) SetReqMsgId(v string) *CreateAlarmSubscriptionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAlarmSubscriptionResponse) SetResultCode(v string) *CreateAlarmSubscriptionResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAlarmSubscriptionResponse) SetResultMsg(v string) *CreateAlarmSubscriptionResponse {
	s.ResultMsg = &v
	return s
}

type DeleteAlarmSubscriptionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 待删除的告警订阅 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteAlarmSubscriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlarmSubscriptionRequest) GoString() string {
	return s.String()
}

func (s *DeleteAlarmSubscriptionRequest) SetAuthToken(v string) *DeleteAlarmSubscriptionRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteAlarmSubscriptionRequest) SetWorkspaceName(v string) *DeleteAlarmSubscriptionRequest {
	s.WorkspaceName = &v
	return s
}

func (s *DeleteAlarmSubscriptionRequest) SetId(v int64) *DeleteAlarmSubscriptionRequest {
	s.Id = &v
	return s
}

type DeleteAlarmSubscriptionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteAlarmSubscriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlarmSubscriptionResponse) GoString() string {
	return s.String()
}

func (s *DeleteAlarmSubscriptionResponse) SetReqMsgId(v string) *DeleteAlarmSubscriptionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteAlarmSubscriptionResponse) SetResultCode(v string) *DeleteAlarmSubscriptionResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteAlarmSubscriptionResponse) SetResultMsg(v string) *DeleteAlarmSubscriptionResponse {
	s.ResultMsg = &v
	return s
}

type PauseAlarmRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 告警暂停开始时间
	Start *int64 `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// 告警暂停结束时间
	End *int64 `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// 告警关闭原因
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty" require:"true"`
	// 资源类型（取值范围：CUSTOM_PLUGIN(自定义监控)、FOLDER(文件夹)、UNIVERSAL_TABLE(用户应用)）
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	// 资源 ID
	ResourceId *string `json:"resource_id,omitempty" xml:"resource_id,omitempty" require:"true"`
}

func (s PauseAlarmRequest) String() string {
	return tea.Prettify(s)
}

func (s PauseAlarmRequest) GoString() string {
	return s.String()
}

func (s *PauseAlarmRequest) SetAuthToken(v string) *PauseAlarmRequest {
	s.AuthToken = &v
	return s
}

func (s *PauseAlarmRequest) SetWorkspaceName(v string) *PauseAlarmRequest {
	s.WorkspaceName = &v
	return s
}

func (s *PauseAlarmRequest) SetStart(v int64) *PauseAlarmRequest {
	s.Start = &v
	return s
}

func (s *PauseAlarmRequest) SetEnd(v int64) *PauseAlarmRequest {
	s.End = &v
	return s
}

func (s *PauseAlarmRequest) SetReason(v string) *PauseAlarmRequest {
	s.Reason = &v
	return s
}

func (s *PauseAlarmRequest) SetResourceType(v string) *PauseAlarmRequest {
	s.ResourceType = &v
	return s
}

func (s *PauseAlarmRequest) SetResourceId(v string) *PauseAlarmRequest {
	s.ResourceId = &v
	return s
}

type PauseAlarmResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s PauseAlarmResponse) String() string {
	return tea.Prettify(s)
}

func (s PauseAlarmResponse) GoString() string {
	return s.String()
}

func (s *PauseAlarmResponse) SetReqMsgId(v string) *PauseAlarmResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PauseAlarmResponse) SetResultCode(v string) *PauseAlarmResponse {
	s.ResultCode = &v
	return s
}

func (s *PauseAlarmResponse) SetResultMsg(v string) *PauseAlarmResponse {
	s.ResultMsg = &v
	return s
}

type ResumeAlarmRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 待恢复的告警 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s ResumeAlarmRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeAlarmRequest) GoString() string {
	return s.String()
}

func (s *ResumeAlarmRequest) SetAuthToken(v string) *ResumeAlarmRequest {
	s.AuthToken = &v
	return s
}

func (s *ResumeAlarmRequest) SetWorkspaceName(v string) *ResumeAlarmRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ResumeAlarmRequest) SetId(v int64) *ResumeAlarmRequest {
	s.Id = &v
	return s
}

type ResumeAlarmResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ResumeAlarmResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeAlarmResponse) GoString() string {
	return s.String()
}

func (s *ResumeAlarmResponse) SetReqMsgId(v string) *ResumeAlarmResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ResumeAlarmResponse) SetResultCode(v string) *ResumeAlarmResponse {
	s.ResultCode = &v
	return s
}

func (s *ResumeAlarmResponse) SetResultMsg(v string) *ResumeAlarmResponse {
	s.ResultMsg = &v
	return s
}

type GetLogTailRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// the preferHost
	PreferHost *string `json:"prefer_host,omitempty" xml:"prefer_host,omitempty"`
	// 日志完整路径
	FullPath *string `json:"full_path,omitempty" xml:"full_path,omitempty"`
	// 扫描路径
	ScanDirs []*string `json:"scan_dirs,omitempty" xml:"scan_dirs,omitempty" type:"Repeated"`
}

func (s GetLogTailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLogTailRequest) GoString() string {
	return s.String()
}

func (s *GetLogTailRequest) SetAuthToken(v string) *GetLogTailRequest {
	s.AuthToken = &v
	return s
}

func (s *GetLogTailRequest) SetWorkspaceName(v string) *GetLogTailRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetLogTailRequest) SetAppName(v string) *GetLogTailRequest {
	s.AppName = &v
	return s
}

func (s *GetLogTailRequest) SetPreferHost(v string) *GetLogTailRequest {
	s.PreferHost = &v
	return s
}

func (s *GetLogTailRequest) SetFullPath(v string) *GetLogTailRequest {
	s.FullPath = &v
	return s
}

func (s *GetLogTailRequest) SetScanDirs(v []*string) *GetLogTailRequest {
	s.ScanDirs = v
	return s
}

type GetLogTailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回对象
	LogTail *LogTail `json:"log_tail,omitempty" xml:"log_tail,omitempty"`
}

func (s GetLogTailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLogTailResponse) GoString() string {
	return s.String()
}

func (s *GetLogTailResponse) SetReqMsgId(v string) *GetLogTailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetLogTailResponse) SetResultCode(v string) *GetLogTailResponse {
	s.ResultCode = &v
	return s
}

func (s *GetLogTailResponse) SetResultMsg(v string) *GetLogTailResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetLogTailResponse) SetLogTail(v *LogTail) *GetLogTailResponse {
	s.LogTail = v
	return s
}

type GetLogBrowserRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 扫描根目录
	ScanDirs []*string `json:"scan_dirs,omitempty" xml:"scan_dirs,omitempty" require:"true" type:"Repeated"`
	// preferHost
	PreferHost *string `json:"prefer_host,omitempty" xml:"prefer_host,omitempty"`
}

func (s GetLogBrowserRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLogBrowserRequest) GoString() string {
	return s.String()
}

func (s *GetLogBrowserRequest) SetAuthToken(v string) *GetLogBrowserRequest {
	s.AuthToken = &v
	return s
}

func (s *GetLogBrowserRequest) SetWorkspaceName(v string) *GetLogBrowserRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetLogBrowserRequest) SetAppName(v string) *GetLogBrowserRequest {
	s.AppName = &v
	return s
}

func (s *GetLogBrowserRequest) SetScanDirs(v []*string) *GetLogBrowserRequest {
	s.ScanDirs = v
	return s
}

func (s *GetLogBrowserRequest) SetPreferHost(v string) *GetLogBrowserRequest {
	s.PreferHost = &v
	return s
}

type GetLogBrowserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果，JSON String
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s GetLogBrowserResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLogBrowserResponse) GoString() string {
	return s.String()
}

func (s *GetLogBrowserResponse) SetReqMsgId(v string) *GetLogBrowserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetLogBrowserResponse) SetResultCode(v string) *GetLogBrowserResponse {
	s.ResultCode = &v
	return s
}

func (s *GetLogBrowserResponse) SetResultMsg(v string) *GetLogBrowserResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetLogBrowserResponse) SetResult(v string) *GetLogBrowserResponse {
	s.Result = &v
	return s
}

type DeleteFolderRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 主键 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteFolderRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFolderRequest) GoString() string {
	return s.String()
}

func (s *DeleteFolderRequest) SetAuthToken(v string) *DeleteFolderRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteFolderRequest) SetWorkspaceName(v string) *DeleteFolderRequest {
	s.WorkspaceName = &v
	return s
}

func (s *DeleteFolderRequest) SetId(v int64) *DeleteFolderRequest {
	s.Id = &v
	return s
}

type DeleteFolderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteFolderResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFolderResponse) GoString() string {
	return s.String()
}

func (s *DeleteFolderResponse) SetReqMsgId(v string) *DeleteFolderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteFolderResponse) SetResultCode(v string) *DeleteFolderResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteFolderResponse) SetResultMsg(v string) *DeleteFolderResponse {
	s.ResultMsg = &v
	return s
}

type GetAppOverviewRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 查询截止时间，unix timestamp in ms
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 查询开始时间，unix timestamp in ms
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty"`
}

func (s GetAppOverviewRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppOverviewRequest) GoString() string {
	return s.String()
}

func (s *GetAppOverviewRequest) SetAuthToken(v string) *GetAppOverviewRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAppOverviewRequest) SetWorkspaceName(v string) *GetAppOverviewRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetAppOverviewRequest) SetEndTime(v int64) *GetAppOverviewRequest {
	s.EndTime = &v
	return s
}

func (s *GetAppOverviewRequest) SetStartTime(v int64) *GetAppOverviewRequest {
	s.StartTime = &v
	return s
}

type GetAppOverviewResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果
	Data *AppOverviewDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetAppOverviewResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppOverviewResponse) GoString() string {
	return s.String()
}

func (s *GetAppOverviewResponse) SetReqMsgId(v string) *GetAppOverviewResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppOverviewResponse) SetResultCode(v string) *GetAppOverviewResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppOverviewResponse) SetResultMsg(v string) *GetAppOverviewResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppOverviewResponse) SetData(v *AppOverviewDTO) *GetAppOverviewResponse {
	s.Data = v
	return s
}

type QueryUnifiedalarmHistoryRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 开始时间
	Start *int64 `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// 结束时间
	End *int64 `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// 当前页码
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 应用 / 主机
	AlarmTargetType *string `json:"alarm_target_type,omitempty" xml:"alarm_target_type,omitempty"`
	// 告警对象
	AlarmTarget *string `json:"alarm_target,omitempty" xml:"alarm_target,omitempty"`
	// 告警级别
	AlarmLevel *int64 `json:"alarm_level,omitempty" xml:"alarm_level,omitempty"`
	// 触发状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 根据应用过滤告警历史
	AlarmStackInfo *AlarmStackInfo `json:"alarm_stack_info,omitempty" xml:"alarm_stack_info,omitempty"`
}

func (s QueryUnifiedalarmHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmHistoryRequest) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmHistoryRequest) SetAuthToken(v string) *QueryUnifiedalarmHistoryRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnifiedalarmHistoryRequest) SetWorkspaceName(v string) *QueryUnifiedalarmHistoryRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryUnifiedalarmHistoryRequest) SetStart(v int64) *QueryUnifiedalarmHistoryRequest {
	s.Start = &v
	return s
}

func (s *QueryUnifiedalarmHistoryRequest) SetEnd(v int64) *QueryUnifiedalarmHistoryRequest {
	s.End = &v
	return s
}

func (s *QueryUnifiedalarmHistoryRequest) SetCurrentPage(v int64) *QueryUnifiedalarmHistoryRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryUnifiedalarmHistoryRequest) SetPageSize(v int64) *QueryUnifiedalarmHistoryRequest {
	s.PageSize = &v
	return s
}

func (s *QueryUnifiedalarmHistoryRequest) SetAlarmTargetType(v string) *QueryUnifiedalarmHistoryRequest {
	s.AlarmTargetType = &v
	return s
}

func (s *QueryUnifiedalarmHistoryRequest) SetAlarmTarget(v string) *QueryUnifiedalarmHistoryRequest {
	s.AlarmTarget = &v
	return s
}

func (s *QueryUnifiedalarmHistoryRequest) SetAlarmLevel(v int64) *QueryUnifiedalarmHistoryRequest {
	s.AlarmLevel = &v
	return s
}

func (s *QueryUnifiedalarmHistoryRequest) SetStatus(v int64) *QueryUnifiedalarmHistoryRequest {
	s.Status = &v
	return s
}

func (s *QueryUnifiedalarmHistoryRequest) SetAlarmStackInfo(v *AlarmStackInfo) *QueryUnifiedalarmHistoryRequest {
	s.AlarmStackInfo = v
	return s
}

type QueryUnifiedalarmHistoryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 告警历史列表
	AlarmHistories []*UnifiedAlarmHistoryVO `json:"alarm_histories,omitempty" xml:"alarm_histories,omitempty" type:"Repeated"`
	// 总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryUnifiedalarmHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmHistoryResponse) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmHistoryResponse) SetReqMsgId(v string) *QueryUnifiedalarmHistoryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnifiedalarmHistoryResponse) SetResultCode(v string) *QueryUnifiedalarmHistoryResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnifiedalarmHistoryResponse) SetResultMsg(v string) *QueryUnifiedalarmHistoryResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnifiedalarmHistoryResponse) SetAlarmHistories(v []*UnifiedAlarmHistoryVO) *QueryUnifiedalarmHistoryResponse {
	s.AlarmHistories = v
	return s
}

func (s *QueryUnifiedalarmHistoryResponse) SetTotalCount(v int64) *QueryUnifiedalarmHistoryResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryUnifiedalarmHistoryResponse) SetCurrentPage(v int64) *QueryUnifiedalarmHistoryResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryUnifiedalarmHistoryResponse) SetPageSize(v int64) *QueryUnifiedalarmHistoryResponse {
	s.PageSize = &v
	return s
}

type GetAlarmTestRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 告警规则的唯一名称
	AlarmUniqueName *string `json:"alarm_unique_name,omitempty" xml:"alarm_unique_name,omitempty" require:"true"`
	// 类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s GetAlarmTestRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAlarmTestRequest) GoString() string {
	return s.String()
}

func (s *GetAlarmTestRequest) SetAuthToken(v string) *GetAlarmTestRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAlarmTestRequest) SetWorkspaceName(v string) *GetAlarmTestRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetAlarmTestRequest) SetAlarmUniqueName(v string) *GetAlarmTestRequest {
	s.AlarmUniqueName = &v
	return s
}

func (s *GetAlarmTestRequest) SetType(v string) *GetAlarmTestRequest {
	s.Type = &v
	return s
}

type GetAlarmTestResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
	// 测试
	AlarmContext []*AlarmTest `json:"alarm_context,omitempty" xml:"alarm_context,omitempty" type:"Repeated"`
}

func (s GetAlarmTestResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAlarmTestResponse) GoString() string {
	return s.String()
}

func (s *GetAlarmTestResponse) SetReqMsgId(v string) *GetAlarmTestResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAlarmTestResponse) SetResultCode(v string) *GetAlarmTestResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAlarmTestResponse) SetResultMsg(v string) *GetAlarmTestResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAlarmTestResponse) SetResult(v string) *GetAlarmTestResponse {
	s.Result = &v
	return s
}

func (s *GetAlarmTestResponse) SetAlarmContext(v []*AlarmTest) *GetAlarmTestResponse {
	s.AlarmContext = v
	return s
}

type QueryAlarmwebhookRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// createOrModifyByMe
	CreateOrModifyByMe *bool `json:"create_or_modify_by_me,omitempty" xml:"create_or_modify_by_me,omitempty" require:"true"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// webhook名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 修改人
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// ID列表
	Ids []*int64 `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
	// 是否只查询当前操作者的
	OnlyCurrentStaff *bool `json:"only_current_staff,omitempty" xml:"only_current_staff,omitempty"`
}

func (s QueryAlarmwebhookRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmwebhookRequest) GoString() string {
	return s.String()
}

func (s *QueryAlarmwebhookRequest) SetAuthToken(v string) *QueryAlarmwebhookRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAlarmwebhookRequest) SetWorkspaceName(v string) *QueryAlarmwebhookRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryAlarmwebhookRequest) SetCreateOrModifyByMe(v bool) *QueryAlarmwebhookRequest {
	s.CreateOrModifyByMe = &v
	return s
}

func (s *QueryAlarmwebhookRequest) SetCurrentPage(v int64) *QueryAlarmwebhookRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryAlarmwebhookRequest) SetPageSize(v int64) *QueryAlarmwebhookRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAlarmwebhookRequest) SetName(v string) *QueryAlarmwebhookRequest {
	s.Name = &v
	return s
}

func (s *QueryAlarmwebhookRequest) SetModifier(v string) *QueryAlarmwebhookRequest {
	s.Modifier = &v
	return s
}

func (s *QueryAlarmwebhookRequest) SetIds(v []*int64) *QueryAlarmwebhookRequest {
	s.Ids = v
	return s
}

func (s *QueryAlarmwebhookRequest) SetOnlyCurrentStaff(v bool) *QueryAlarmwebhookRequest {
	s.OnlyCurrentStaff = &v
	return s
}

type QueryAlarmwebhookResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// webhook列表
	WebHooks []*AlarmWebHook `json:"web_hooks,omitempty" xml:"web_hooks,omitempty" type:"Repeated"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总记录数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryAlarmwebhookResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmwebhookResponse) GoString() string {
	return s.String()
}

func (s *QueryAlarmwebhookResponse) SetReqMsgId(v string) *QueryAlarmwebhookResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAlarmwebhookResponse) SetResultCode(v string) *QueryAlarmwebhookResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAlarmwebhookResponse) SetResultMsg(v string) *QueryAlarmwebhookResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAlarmwebhookResponse) SetWebHooks(v []*AlarmWebHook) *QueryAlarmwebhookResponse {
	s.WebHooks = v
	return s
}

func (s *QueryAlarmwebhookResponse) SetCurrentPage(v int64) *QueryAlarmwebhookResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryAlarmwebhookResponse) SetPageSize(v int64) *QueryAlarmwebhookResponse {
	s.PageSize = &v
	return s
}

func (s *QueryAlarmwebhookResponse) SetTotalCount(v int64) *QueryAlarmwebhookResponse {
	s.TotalCount = &v
	return s
}

type CreateUnifiedalarmRuleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 告警规则名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 标识符 区分规则是自定义规则还是pql规则
	Category *string `json:"category,omitempty" xml:"category,omitempty" require:"true"`
	// 规则配置
	RuleConfig *string `json:"rule_config,omitempty" xml:"rule_config,omitempty" require:"true"`
	// 指标无数据触发告警 这是个开关 1表示打开 0表示闭合
	AlarmNodata *int64 `json:"alarm_nodata,omitempty" xml:"alarm_nodata,omitempty" require:"true"`
	// 告警等级
	Level *int64 `json:"level,omitempty" xml:"level,omitempty" require:"true"`
	// 应急处理人
	Emergency *string `json:"emergency,omitempty" xml:"emergency,omitempty"`
	// 应急处理链接
	EmergencyUrl *string `json:"emergency_url,omitempty" xml:"emergency_url,omitempty"`
	// 触发周期
	PendingHit *int64 `json:"pending_hit,omitempty" xml:"pending_hit,omitempty" require:"true"`
	// 恢复周期
	RecoveredHit *int64 `json:"recovered_hit,omitempty" xml:"recovered_hit,omitempty" require:"true"`
	// 检测频率
	Step *int64 `json:"step,omitempty" xml:"step,omitempty" require:"true"`
	// 通知渠道
	Channels []*string `json:"channels,omitempty" xml:"channels,omitempty" require:"true" type:"Repeated"`
	// 通知对象
	NotifyTarget []*UnifiedAlarmSubDTO `json:"notify_target,omitempty" xml:"notify_target,omitempty" type:"Repeated"`
	// 静默时间
	SilenceTime *int64 `json:"silence_time,omitempty" xml:"silence_time,omitempty" require:"true"`
	// 告警触发时通知 1:勾选 0:不勾选
	NotifyFiring *int64 `json:"notify_firing,omitempty" xml:"notify_firing,omitempty" require:"true"`
	// 告警恢复时通知 1:勾选 0:不勾选
	NotifyRecovered *int64 `json:"notify_recovered,omitempty" xml:"notify_recovered,omitempty" require:"true"`
	// 告警无数据时通知 1:勾选 0:不勾选
	NotifyNodata *int64 `json:"notify_nodata,omitempty" xml:"notify_nodata,omitempty" require:"true"`
	// 通知时间
	NotifyTimeFilter *TimeFilter `json:"notify_time_filter,omitempty" xml:"notify_time_filter,omitempty"`
	// 工作区名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s CreateUnifiedalarmRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUnifiedalarmRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateUnifiedalarmRuleRequest) SetAuthToken(v string) *CreateUnifiedalarmRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetName(v string) *CreateUnifiedalarmRuleRequest {
	s.Name = &v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetCategory(v string) *CreateUnifiedalarmRuleRequest {
	s.Category = &v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetRuleConfig(v string) *CreateUnifiedalarmRuleRequest {
	s.RuleConfig = &v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetAlarmNodata(v int64) *CreateUnifiedalarmRuleRequest {
	s.AlarmNodata = &v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetLevel(v int64) *CreateUnifiedalarmRuleRequest {
	s.Level = &v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetEmergency(v string) *CreateUnifiedalarmRuleRequest {
	s.Emergency = &v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetEmergencyUrl(v string) *CreateUnifiedalarmRuleRequest {
	s.EmergencyUrl = &v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetPendingHit(v int64) *CreateUnifiedalarmRuleRequest {
	s.PendingHit = &v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetRecoveredHit(v int64) *CreateUnifiedalarmRuleRequest {
	s.RecoveredHit = &v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetStep(v int64) *CreateUnifiedalarmRuleRequest {
	s.Step = &v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetChannels(v []*string) *CreateUnifiedalarmRuleRequest {
	s.Channels = v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetNotifyTarget(v []*UnifiedAlarmSubDTO) *CreateUnifiedalarmRuleRequest {
	s.NotifyTarget = v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetSilenceTime(v int64) *CreateUnifiedalarmRuleRequest {
	s.SilenceTime = &v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetNotifyFiring(v int64) *CreateUnifiedalarmRuleRequest {
	s.NotifyFiring = &v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetNotifyRecovered(v int64) *CreateUnifiedalarmRuleRequest {
	s.NotifyRecovered = &v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetNotifyNodata(v int64) *CreateUnifiedalarmRuleRequest {
	s.NotifyNodata = &v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetNotifyTimeFilter(v *TimeFilter) *CreateUnifiedalarmRuleRequest {
	s.NotifyTimeFilter = v
	return s
}

func (s *CreateUnifiedalarmRuleRequest) SetWorkspaceName(v string) *CreateUnifiedalarmRuleRequest {
	s.WorkspaceName = &v
	return s
}

type CreateUnifiedalarmRuleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateUnifiedalarmRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUnifiedalarmRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateUnifiedalarmRuleResponse) SetReqMsgId(v string) *CreateUnifiedalarmRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateUnifiedalarmRuleResponse) SetResultCode(v string) *CreateUnifiedalarmRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateUnifiedalarmRuleResponse) SetResultMsg(v string) *CreateUnifiedalarmRuleResponse {
	s.ResultMsg = &v
	return s
}

type UpdateUnifiedalarmRuleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 主键
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 规则名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 规则分类
	Category *string `json:"category,omitempty" xml:"category,omitempty" require:"true"`
	// 规则配置
	RuleConfig *string `json:"rule_config,omitempty" xml:"rule_config,omitempty" require:"true"`
	// 指标无数据时触发告警
	AlarmNodata *int64 `json:"alarm_nodata,omitempty" xml:"alarm_nodata,omitempty" require:"true"`
	// 告警等级
	Level *int64 `json:"level,omitempty" xml:"level,omitempty" require:"true"`
	// 应急处理人
	Emergency *string `json:"emergency,omitempty" xml:"emergency,omitempty"`
	// 应急处理链接
	EmergencyUrl *string `json:"emergency_url,omitempty" xml:"emergency_url,omitempty"`
	// 触发周期
	PendingHit *int64 `json:"pending_hit,omitempty" xml:"pending_hit,omitempty" require:"true"`
	// 恢复周期
	RecoveredHit *int64 `json:"recovered_hit,omitempty" xml:"recovered_hit,omitempty" require:"true"`
	// 检测频率
	Step *int64 `json:"step,omitempty" xml:"step,omitempty" require:"true"`
	// 通知渠道
	Channels []*string `json:"channels,omitempty" xml:"channels,omitempty" require:"true" type:"Repeated"`
	// 通知对象
	NotifyTarget []*UnifiedAlarmSubDTO `json:"notify_target,omitempty" xml:"notify_target,omitempty" type:"Repeated"`
	// 静默时间
	SilenceTime *int64 `json:"silence_time,omitempty" xml:"silence_time,omitempty" require:"true"`
	// 告警触发时通知
	NotifyFiring *int64 `json:"notify_firing,omitempty" xml:"notify_firing,omitempty" require:"true"`
	// 告警恢复时通知
	NotifyRecovered *int64 `json:"notify_recovered,omitempty" xml:"notify_recovered,omitempty" require:"true"`
	// 告警无数据时通知
	NotifyNodata *int64 `json:"notify_nodata,omitempty" xml:"notify_nodata,omitempty" require:"true"`
	// 通知时间
	NotifyTimeFilter *TimeFilter `json:"notify_time_filter,omitempty" xml:"notify_time_filter,omitempty"`
	// 启停状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 暂停开始时间
	SuspendedStartTime *int64 `json:"suspended_start_time,omitempty" xml:"suspended_start_time,omitempty"`
	// 告警结束时间
	SuspendedEndTime *int64 `json:"suspended_end_time,omitempty" xml:"suspended_end_time,omitempty"`
	// 暂停原因
	SuspendedReason *string `json:"suspended_reason,omitempty" xml:"suspended_reason,omitempty"`
	// 工作空间名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s UpdateUnifiedalarmRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateUnifiedalarmRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateUnifiedalarmRuleRequest) SetAuthToken(v string) *UpdateUnifiedalarmRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetId(v int64) *UpdateUnifiedalarmRuleRequest {
	s.Id = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetName(v string) *UpdateUnifiedalarmRuleRequest {
	s.Name = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetCategory(v string) *UpdateUnifiedalarmRuleRequest {
	s.Category = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetRuleConfig(v string) *UpdateUnifiedalarmRuleRequest {
	s.RuleConfig = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetAlarmNodata(v int64) *UpdateUnifiedalarmRuleRequest {
	s.AlarmNodata = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetLevel(v int64) *UpdateUnifiedalarmRuleRequest {
	s.Level = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetEmergency(v string) *UpdateUnifiedalarmRuleRequest {
	s.Emergency = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetEmergencyUrl(v string) *UpdateUnifiedalarmRuleRequest {
	s.EmergencyUrl = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetPendingHit(v int64) *UpdateUnifiedalarmRuleRequest {
	s.PendingHit = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetRecoveredHit(v int64) *UpdateUnifiedalarmRuleRequest {
	s.RecoveredHit = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetStep(v int64) *UpdateUnifiedalarmRuleRequest {
	s.Step = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetChannels(v []*string) *UpdateUnifiedalarmRuleRequest {
	s.Channels = v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetNotifyTarget(v []*UnifiedAlarmSubDTO) *UpdateUnifiedalarmRuleRequest {
	s.NotifyTarget = v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetSilenceTime(v int64) *UpdateUnifiedalarmRuleRequest {
	s.SilenceTime = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetNotifyFiring(v int64) *UpdateUnifiedalarmRuleRequest {
	s.NotifyFiring = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetNotifyRecovered(v int64) *UpdateUnifiedalarmRuleRequest {
	s.NotifyRecovered = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetNotifyNodata(v int64) *UpdateUnifiedalarmRuleRequest {
	s.NotifyNodata = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetNotifyTimeFilter(v *TimeFilter) *UpdateUnifiedalarmRuleRequest {
	s.NotifyTimeFilter = v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetStatus(v string) *UpdateUnifiedalarmRuleRequest {
	s.Status = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetSuspendedStartTime(v int64) *UpdateUnifiedalarmRuleRequest {
	s.SuspendedStartTime = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetSuspendedEndTime(v int64) *UpdateUnifiedalarmRuleRequest {
	s.SuspendedEndTime = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetSuspendedReason(v string) *UpdateUnifiedalarmRuleRequest {
	s.SuspendedReason = &v
	return s
}

func (s *UpdateUnifiedalarmRuleRequest) SetWorkspaceName(v string) *UpdateUnifiedalarmRuleRequest {
	s.WorkspaceName = &v
	return s
}

type UpdateUnifiedalarmRuleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateUnifiedalarmRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateUnifiedalarmRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateUnifiedalarmRuleResponse) SetReqMsgId(v string) *UpdateUnifiedalarmRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateUnifiedalarmRuleResponse) SetResultCode(v string) *UpdateUnifiedalarmRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateUnifiedalarmRuleResponse) SetResultMsg(v string) *UpdateUnifiedalarmRuleResponse {
	s.ResultMsg = &v
	return s
}

type QueryUnifiedalarmRuleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 告警规则名称模糊搜索
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
	// 告警等级
	Level *int64 `json:"level,omitempty" xml:"level,omitempty"`
	// 告警对象
	AlarmTarget *AlarmTarget `json:"alarm_target,omitempty" xml:"alarm_target,omitempty"`
	// 启停状态
	RuleStatus *int64 `json:"rule_status,omitempty" xml:"rule_status,omitempty"`
	// 告警状态
	AlarmStatus *int64 `json:"alarm_status,omitempty" xml:"alarm_status,omitempty"`
	// 只看我
	OnlyMe *bool `json:"only_me,omitempty" xml:"only_me,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面尺寸
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 工作区名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 告警规则id
	RuleId *int64 `json:"rule_id,omitempty" xml:"rule_id,omitempty"`
	// 告警唯一标识
	RuleUniqueIdentity *string `json:"rule_unique_identity,omitempty" xml:"rule_unique_identity,omitempty"`
	// 标识符 区分规则是自定义规则还是pql规则
	Category *string `json:"category,omitempty" xml:"category,omitempty" require:"true"`
	//
	RefDatasourceType *string `json:"ref_datasource_type,omitempty" xml:"ref_datasource_type,omitempty"`
	// 根据用户组过滤
	FilterUserGroup *int64 `json:"filter_user_group,omitempty" xml:"filter_user_group,omitempty"`
	// 根据webhook过滤
	FilterWebhook *int64 `json:"filter_webhook,omitempty" xml:"filter_webhook,omitempty"`
	// 钉钉机器人过滤
	FilterDingRobot *int64 `json:"filter_ding_robot,omitempty" xml:"filter_ding_robot,omitempty"`
	// 根据应栈信息对告警规则做过滤
	AlarmStackInfo *AlarmStackInfo `json:"alarm_stack_info,omitempty" xml:"alarm_stack_info,omitempty"`
	// CUSTOM,STACK,HOST
	DataSourceType *string `json:"data_source_type,omitempty" xml:"data_source_type,omitempty"`
	// 过滤的告警级别
	Levels []*int64 `json:"levels,omitempty" xml:"levels,omitempty" type:"Repeated"`
	// 告警事件id
	AlarmEventId *string `json:"alarm_event_id,omitempty" xml:"alarm_event_id,omitempty"`
}

func (s QueryUnifiedalarmRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmRuleRequest) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmRuleRequest) SetAuthToken(v string) *QueryUnifiedalarmRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetKeyword(v string) *QueryUnifiedalarmRuleRequest {
	s.Keyword = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetLevel(v int64) *QueryUnifiedalarmRuleRequest {
	s.Level = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetAlarmTarget(v *AlarmTarget) *QueryUnifiedalarmRuleRequest {
	s.AlarmTarget = v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetRuleStatus(v int64) *QueryUnifiedalarmRuleRequest {
	s.RuleStatus = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetAlarmStatus(v int64) *QueryUnifiedalarmRuleRequest {
	s.AlarmStatus = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetOnlyMe(v bool) *QueryUnifiedalarmRuleRequest {
	s.OnlyMe = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetCurrentPage(v int64) *QueryUnifiedalarmRuleRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetPageSize(v int64) *QueryUnifiedalarmRuleRequest {
	s.PageSize = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetWorkspaceName(v string) *QueryUnifiedalarmRuleRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetRuleId(v int64) *QueryUnifiedalarmRuleRequest {
	s.RuleId = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetRuleUniqueIdentity(v string) *QueryUnifiedalarmRuleRequest {
	s.RuleUniqueIdentity = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetCategory(v string) *QueryUnifiedalarmRuleRequest {
	s.Category = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetRefDatasourceType(v string) *QueryUnifiedalarmRuleRequest {
	s.RefDatasourceType = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetFilterUserGroup(v int64) *QueryUnifiedalarmRuleRequest {
	s.FilterUserGroup = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetFilterWebhook(v int64) *QueryUnifiedalarmRuleRequest {
	s.FilterWebhook = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetFilterDingRobot(v int64) *QueryUnifiedalarmRuleRequest {
	s.FilterDingRobot = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetAlarmStackInfo(v *AlarmStackInfo) *QueryUnifiedalarmRuleRequest {
	s.AlarmStackInfo = v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetDataSourceType(v string) *QueryUnifiedalarmRuleRequest {
	s.DataSourceType = &v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetLevels(v []*int64) *QueryUnifiedalarmRuleRequest {
	s.Levels = v
	return s
}

func (s *QueryUnifiedalarmRuleRequest) SetAlarmEventId(v string) *QueryUnifiedalarmRuleRequest {
	s.AlarmEventId = &v
	return s
}

type QueryUnifiedalarmRuleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 告警规则列表
	AlarmRules []*UnifiedAlarmRuleVO `json:"alarm_rules,omitempty" xml:"alarm_rules,omitempty" type:"Repeated"`
	// 总记录数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面尺寸
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryUnifiedalarmRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmRuleResponse) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmRuleResponse) SetReqMsgId(v string) *QueryUnifiedalarmRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnifiedalarmRuleResponse) SetResultCode(v string) *QueryUnifiedalarmRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnifiedalarmRuleResponse) SetResultMsg(v string) *QueryUnifiedalarmRuleResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnifiedalarmRuleResponse) SetAlarmRules(v []*UnifiedAlarmRuleVO) *QueryUnifiedalarmRuleResponse {
	s.AlarmRules = v
	return s
}

func (s *QueryUnifiedalarmRuleResponse) SetTotalCount(v int64) *QueryUnifiedalarmRuleResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryUnifiedalarmRuleResponse) SetCurrentPage(v int64) *QueryUnifiedalarmRuleResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryUnifiedalarmRuleResponse) SetPageSize(v int64) *QueryUnifiedalarmRuleResponse {
	s.PageSize = &v
	return s
}

type GetUnifiedalarmRuleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 告警规则id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 工作空间名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s GetUnifiedalarmRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUnifiedalarmRuleRequest) GoString() string {
	return s.String()
}

func (s *GetUnifiedalarmRuleRequest) SetAuthToken(v string) *GetUnifiedalarmRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *GetUnifiedalarmRuleRequest) SetId(v int64) *GetUnifiedalarmRuleRequest {
	s.Id = &v
	return s
}

func (s *GetUnifiedalarmRuleRequest) SetWorkspaceName(v string) *GetUnifiedalarmRuleRequest {
	s.WorkspaceName = &v
	return s
}

type GetUnifiedalarmRuleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 告警规则详情
	AlarmRule *UnifiedAlarmRuleVO `json:"alarm_rule,omitempty" xml:"alarm_rule,omitempty"`
}

func (s GetUnifiedalarmRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUnifiedalarmRuleResponse) GoString() string {
	return s.String()
}

func (s *GetUnifiedalarmRuleResponse) SetReqMsgId(v string) *GetUnifiedalarmRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetUnifiedalarmRuleResponse) SetResultCode(v string) *GetUnifiedalarmRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *GetUnifiedalarmRuleResponse) SetResultMsg(v string) *GetUnifiedalarmRuleResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetUnifiedalarmRuleResponse) SetAlarmRule(v *UnifiedAlarmRuleVO) *GetUnifiedalarmRuleResponse {
	s.AlarmRule = v
	return s
}

type DeleteUnifiedalarmRuleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 告警规则 id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 工作空间名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s DeleteUnifiedalarmRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUnifiedalarmRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteUnifiedalarmRuleRequest) SetAuthToken(v string) *DeleteUnifiedalarmRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteUnifiedalarmRuleRequest) SetId(v int64) *DeleteUnifiedalarmRuleRequest {
	s.Id = &v
	return s
}

func (s *DeleteUnifiedalarmRuleRequest) SetWorkspaceName(v string) *DeleteUnifiedalarmRuleRequest {
	s.WorkspaceName = &v
	return s
}

type DeleteUnifiedalarmRuleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteUnifiedalarmRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUnifiedalarmRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteUnifiedalarmRuleResponse) SetReqMsgId(v string) *DeleteUnifiedalarmRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteUnifiedalarmRuleResponse) SetResultCode(v string) *DeleteUnifiedalarmRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteUnifiedalarmRuleResponse) SetResultMsg(v string) *DeleteUnifiedalarmRuleResponse {
	s.ResultMsg = &v
	return s
}

type QueryUnifiedalarmNotifyhistoryRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发送状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 通知渠道
	Channel *string `json:"channel,omitempty" xml:"channel,omitempty"`
	// 通知人id
	Subscriber *string `json:"subscriber,omitempty" xml:"subscriber,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面尺寸
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 工作区名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 事件id
	EventId *string `json:"event_id,omitempty" xml:"event_id,omitempty"`
	// 开始时间
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束时间
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 查询告警内容
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
	// 告警规则 ID
	AlarmRuleId *int64 `json:"alarm_rule_id,omitempty" xml:"alarm_rule_id,omitempty"`
	// 告警状态
	AlarmStatus *int64 `json:"alarm_status,omitempty" xml:"alarm_status,omitempty"`
	// 根据应用过滤告警历史
	AlarmStackInfo *AlarmStackInfo `json:"alarm_stack_info,omitempty" xml:"alarm_stack_info,omitempty"`
	// 是否根据通知对象过滤
	AlarmSubscribers []*UnifiedAlarmSubDTO `json:"alarm_subscribers,omitempty" xml:"alarm_subscribers,omitempty" type:"Repeated"`
}

func (s QueryUnifiedalarmNotifyhistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmNotifyhistoryRequest) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmNotifyhistoryRequest) SetAuthToken(v string) *QueryUnifiedalarmNotifyhistoryRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryRequest) SetStatus(v int64) *QueryUnifiedalarmNotifyhistoryRequest {
	s.Status = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryRequest) SetChannel(v string) *QueryUnifiedalarmNotifyhistoryRequest {
	s.Channel = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryRequest) SetSubscriber(v string) *QueryUnifiedalarmNotifyhistoryRequest {
	s.Subscriber = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryRequest) SetCurrentPage(v int64) *QueryUnifiedalarmNotifyhistoryRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryRequest) SetPageSize(v int64) *QueryUnifiedalarmNotifyhistoryRequest {
	s.PageSize = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryRequest) SetWorkspaceName(v string) *QueryUnifiedalarmNotifyhistoryRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryRequest) SetEventId(v string) *QueryUnifiedalarmNotifyhistoryRequest {
	s.EventId = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryRequest) SetStartTime(v int64) *QueryUnifiedalarmNotifyhistoryRequest {
	s.StartTime = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryRequest) SetEndTime(v int64) *QueryUnifiedalarmNotifyhistoryRequest {
	s.EndTime = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryRequest) SetKeyword(v string) *QueryUnifiedalarmNotifyhistoryRequest {
	s.Keyword = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryRequest) SetAlarmRuleId(v int64) *QueryUnifiedalarmNotifyhistoryRequest {
	s.AlarmRuleId = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryRequest) SetAlarmStatus(v int64) *QueryUnifiedalarmNotifyhistoryRequest {
	s.AlarmStatus = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryRequest) SetAlarmStackInfo(v *AlarmStackInfo) *QueryUnifiedalarmNotifyhistoryRequest {
	s.AlarmStackInfo = v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryRequest) SetAlarmSubscribers(v []*UnifiedAlarmSubDTO) *QueryUnifiedalarmNotifyhistoryRequest {
	s.AlarmSubscribers = v
	return s
}

type QueryUnifiedalarmNotifyhistoryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 总记录数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面尺寸
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 响应结果
	AlarmNotifyHistories []*UnifiedAlarmNotifyHistoryVO `json:"alarm_notify_histories,omitempty" xml:"alarm_notify_histories,omitempty" type:"Repeated"`
	// 告警通知历史中对应的通知对象
	AlarmNotifySubs []*UnifiedAlarmSubDTO `json:"alarm_notify_subs,omitempty" xml:"alarm_notify_subs,omitempty" type:"Repeated"`
}

func (s QueryUnifiedalarmNotifyhistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmNotifyhistoryResponse) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmNotifyhistoryResponse) SetReqMsgId(v string) *QueryUnifiedalarmNotifyhistoryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryResponse) SetResultCode(v string) *QueryUnifiedalarmNotifyhistoryResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryResponse) SetResultMsg(v string) *QueryUnifiedalarmNotifyhistoryResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryResponse) SetTotalCount(v int64) *QueryUnifiedalarmNotifyhistoryResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryResponse) SetCurrentPage(v int64) *QueryUnifiedalarmNotifyhistoryResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryResponse) SetPageSize(v int64) *QueryUnifiedalarmNotifyhistoryResponse {
	s.PageSize = &v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryResponse) SetAlarmNotifyHistories(v []*UnifiedAlarmNotifyHistoryVO) *QueryUnifiedalarmNotifyhistoryResponse {
	s.AlarmNotifyHistories = v
	return s
}

func (s *QueryUnifiedalarmNotifyhistoryResponse) SetAlarmNotifySubs(v []*UnifiedAlarmSubDTO) *QueryUnifiedalarmNotifyhistoryResponse {
	s.AlarmNotifySubs = v
	return s
}

type BatchcreateUnifiedalarmSubRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 通知对象 可能有多个
	AlarmSubs []*UnifiedAlarmSubDTO `json:"alarm_subs,omitempty" xml:"alarm_subs,omitempty" require:"true" type:"Repeated"`
	// 告警规则id集合
	AlarmRuleIds []*int64 `json:"alarm_rule_ids,omitempty" xml:"alarm_rule_ids,omitempty" type:"Repeated"`
	// 是否全部订阅
	SubAll *bool `json:"sub_all,omitempty" xml:"sub_all,omitempty"`
	// 工作区名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 订阅成员是新增吗？新增时，不做旧的订阅关系做覆盖
	IsAppend *bool `json:"is_append,omitempty" xml:"is_append,omitempty"`
}

func (s BatchcreateUnifiedalarmSubRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateUnifiedalarmSubRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateUnifiedalarmSubRequest) SetAuthToken(v string) *BatchcreateUnifiedalarmSubRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateUnifiedalarmSubRequest) SetAlarmSubs(v []*UnifiedAlarmSubDTO) *BatchcreateUnifiedalarmSubRequest {
	s.AlarmSubs = v
	return s
}

func (s *BatchcreateUnifiedalarmSubRequest) SetAlarmRuleIds(v []*int64) *BatchcreateUnifiedalarmSubRequest {
	s.AlarmRuleIds = v
	return s
}

func (s *BatchcreateUnifiedalarmSubRequest) SetSubAll(v bool) *BatchcreateUnifiedalarmSubRequest {
	s.SubAll = &v
	return s
}

func (s *BatchcreateUnifiedalarmSubRequest) SetWorkspaceName(v string) *BatchcreateUnifiedalarmSubRequest {
	s.WorkspaceName = &v
	return s
}

func (s *BatchcreateUnifiedalarmSubRequest) SetIsAppend(v bool) *BatchcreateUnifiedalarmSubRequest {
	s.IsAppend = &v
	return s
}

type BatchcreateUnifiedalarmSubResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchcreateUnifiedalarmSubResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateUnifiedalarmSubResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateUnifiedalarmSubResponse) SetReqMsgId(v string) *BatchcreateUnifiedalarmSubResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateUnifiedalarmSubResponse) SetResultCode(v string) *BatchcreateUnifiedalarmSubResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateUnifiedalarmSubResponse) SetResultMsg(v string) *BatchcreateUnifiedalarmSubResponse {
	s.ResultMsg = &v
	return s
}

type DeleteUnifiedalarmSubRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 通知对象 可能为多个
	AlarmSub *UnifiedAlarmSubDTO `json:"alarm_sub,omitempty" xml:"alarm_sub,omitempty" require:"true"`
	// 规则id集合
	RuleId *int64 `json:"rule_id,omitempty" xml:"rule_id,omitempty" require:"true"`
	// 工作区名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s DeleteUnifiedalarmSubRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUnifiedalarmSubRequest) GoString() string {
	return s.String()
}

func (s *DeleteUnifiedalarmSubRequest) SetAuthToken(v string) *DeleteUnifiedalarmSubRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteUnifiedalarmSubRequest) SetAlarmSub(v *UnifiedAlarmSubDTO) *DeleteUnifiedalarmSubRequest {
	s.AlarmSub = v
	return s
}

func (s *DeleteUnifiedalarmSubRequest) SetRuleId(v int64) *DeleteUnifiedalarmSubRequest {
	s.RuleId = &v
	return s
}

func (s *DeleteUnifiedalarmSubRequest) SetWorkspaceName(v string) *DeleteUnifiedalarmSubRequest {
	s.WorkspaceName = &v
	return s
}

type DeleteUnifiedalarmSubResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteUnifiedalarmSubResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUnifiedalarmSubResponse) GoString() string {
	return s.String()
}

func (s *DeleteUnifiedalarmSubResponse) SetReqMsgId(v string) *DeleteUnifiedalarmSubResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteUnifiedalarmSubResponse) SetResultCode(v string) *DeleteUnifiedalarmSubResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteUnifiedalarmSubResponse) SetResultMsg(v string) *DeleteUnifiedalarmSubResponse {
	s.ResultMsg = &v
	return s
}

type QueryUnifiedalarmSubRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 通知人
	Subscriber *string `json:"subscriber,omitempty" xml:"subscriber,omitempty"`
	// 通知人的类型
	SubscriberType *string `json:"subscriber_type,omitempty" xml:"subscriber_type,omitempty"`
	// 是否包含我
	OnlyMe *bool `json:"only_me,omitempty" xml:"only_me,omitempty"`
	// 工作区名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 规则id
	AlarmRuleId *int64 `json:"alarm_rule_id,omitempty" xml:"alarm_rule_id,omitempty"`
	// 模板id
	AlarmTplId *int64 `json:"alarm_tpl_id,omitempty" xml:"alarm_tpl_id,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面尺寸
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 订阅人来源
	SubscriberSource *string `json:"subscriber_source,omitempty" xml:"subscriber_source,omitempty"`
}

func (s QueryUnifiedalarmSubRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmSubRequest) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmSubRequest) SetAuthToken(v string) *QueryUnifiedalarmSubRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnifiedalarmSubRequest) SetSubscriber(v string) *QueryUnifiedalarmSubRequest {
	s.Subscriber = &v
	return s
}

func (s *QueryUnifiedalarmSubRequest) SetSubscriberType(v string) *QueryUnifiedalarmSubRequest {
	s.SubscriberType = &v
	return s
}

func (s *QueryUnifiedalarmSubRequest) SetOnlyMe(v bool) *QueryUnifiedalarmSubRequest {
	s.OnlyMe = &v
	return s
}

func (s *QueryUnifiedalarmSubRequest) SetWorkspaceName(v string) *QueryUnifiedalarmSubRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryUnifiedalarmSubRequest) SetAlarmRuleId(v int64) *QueryUnifiedalarmSubRequest {
	s.AlarmRuleId = &v
	return s
}

func (s *QueryUnifiedalarmSubRequest) SetAlarmTplId(v int64) *QueryUnifiedalarmSubRequest {
	s.AlarmTplId = &v
	return s
}

func (s *QueryUnifiedalarmSubRequest) SetCurrentPage(v int64) *QueryUnifiedalarmSubRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryUnifiedalarmSubRequest) SetPageSize(v int64) *QueryUnifiedalarmSubRequest {
	s.PageSize = &v
	return s
}

func (s *QueryUnifiedalarmSubRequest) SetSubscriberSource(v string) *QueryUnifiedalarmSubRequest {
	s.SubscriberSource = &v
	return s
}

type QueryUnifiedalarmSubResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 告警订阅关系列表
	AlarmSubs []*UnifiedAlarmSubVO `json:"alarm_subs,omitempty" xml:"alarm_subs,omitempty" type:"Repeated"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面尺寸
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总记录数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryUnifiedalarmSubResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmSubResponse) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmSubResponse) SetReqMsgId(v string) *QueryUnifiedalarmSubResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnifiedalarmSubResponse) SetResultCode(v string) *QueryUnifiedalarmSubResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnifiedalarmSubResponse) SetResultMsg(v string) *QueryUnifiedalarmSubResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnifiedalarmSubResponse) SetAlarmSubs(v []*UnifiedAlarmSubVO) *QueryUnifiedalarmSubResponse {
	s.AlarmSubs = v
	return s
}

func (s *QueryUnifiedalarmSubResponse) SetCurrentPage(v int64) *QueryUnifiedalarmSubResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryUnifiedalarmSubResponse) SetPageSize(v int64) *QueryUnifiedalarmSubResponse {
	s.PageSize = &v
	return s
}

func (s *QueryUnifiedalarmSubResponse) SetTotalCount(v int64) *QueryUnifiedalarmSubResponse {
	s.TotalCount = &v
	return s
}

type CreateUnifiedalarmTplRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 模板名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 区分自定义还是pql
	Category *string `json:"category,omitempty" xml:"category,omitempty" require:"true"`
	// 规则配置
	RuleConfig *string `json:"rule_config,omitempty" xml:"rule_config,omitempty" require:"true"`
	// 告警等级
	Level *int64 `json:"level,omitempty" xml:"level,omitempty" require:"true"`
	// 应急处理人
	Emergency *string `json:"emergency,omitempty" xml:"emergency,omitempty"`
	// 应急处理链接
	EmergencyUrl *string `json:"emergency_url,omitempty" xml:"emergency_url,omitempty"`
	// 触发周期
	PendingHit *int64 `json:"pending_hit,omitempty" xml:"pending_hit,omitempty" require:"true"`
	// 恢复周期
	RecoveredHit *int64 `json:"recovered_hit,omitempty" xml:"recovered_hit,omitempty" require:"true"`
	// 检测频率
	Step *int64 `json:"step,omitempty" xml:"step,omitempty" require:"true"`
	// 通知渠道
	Channels []*string `json:"channels,omitempty" xml:"channels,omitempty" require:"true" type:"Repeated"`
	// 通知对象
	AlarmSubs []*UnifiedAlarmSubDTO `json:"alarm_subs,omitempty" xml:"alarm_subs,omitempty" type:"Repeated"`
	// 静默期
	SilenceTime *int64 `json:"silence_time,omitempty" xml:"silence_time,omitempty" require:"true"`
	// 告警触发时通知
	NotifyFiring *int64 `json:"notify_firing,omitempty" xml:"notify_firing,omitempty" require:"true"`
	// 告警恢复时通知
	NotifyRecovered *int64 `json:"notify_recovered,omitempty" xml:"notify_recovered,omitempty" require:"true"`
	// 告警无数据时通知
	NotifyNodata *int64 `json:"notify_nodata,omitempty" xml:"notify_nodata,omitempty" require:"true"`
	// 通知时间
	NotifyTimeFilter *TimeFilter `json:"notify_time_filter,omitempty" xml:"notify_time_filter,omitempty"`
	// 工作区名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 指标无数据触发告警 这是个开关 1表示打开 0表示闭合
	AlarmNodata *int64 `json:"alarm_nodata,omitempty" xml:"alarm_nodata,omitempty" require:"true"`
}

func (s CreateUnifiedalarmTplRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUnifiedalarmTplRequest) GoString() string {
	return s.String()
}

func (s *CreateUnifiedalarmTplRequest) SetAuthToken(v string) *CreateUnifiedalarmTplRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetName(v string) *CreateUnifiedalarmTplRequest {
	s.Name = &v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetCategory(v string) *CreateUnifiedalarmTplRequest {
	s.Category = &v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetRuleConfig(v string) *CreateUnifiedalarmTplRequest {
	s.RuleConfig = &v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetLevel(v int64) *CreateUnifiedalarmTplRequest {
	s.Level = &v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetEmergency(v string) *CreateUnifiedalarmTplRequest {
	s.Emergency = &v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetEmergencyUrl(v string) *CreateUnifiedalarmTplRequest {
	s.EmergencyUrl = &v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetPendingHit(v int64) *CreateUnifiedalarmTplRequest {
	s.PendingHit = &v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetRecoveredHit(v int64) *CreateUnifiedalarmTplRequest {
	s.RecoveredHit = &v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetStep(v int64) *CreateUnifiedalarmTplRequest {
	s.Step = &v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetChannels(v []*string) *CreateUnifiedalarmTplRequest {
	s.Channels = v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetAlarmSubs(v []*UnifiedAlarmSubDTO) *CreateUnifiedalarmTplRequest {
	s.AlarmSubs = v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetSilenceTime(v int64) *CreateUnifiedalarmTplRequest {
	s.SilenceTime = &v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetNotifyFiring(v int64) *CreateUnifiedalarmTplRequest {
	s.NotifyFiring = &v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetNotifyRecovered(v int64) *CreateUnifiedalarmTplRequest {
	s.NotifyRecovered = &v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetNotifyNodata(v int64) *CreateUnifiedalarmTplRequest {
	s.NotifyNodata = &v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetNotifyTimeFilter(v *TimeFilter) *CreateUnifiedalarmTplRequest {
	s.NotifyTimeFilter = v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetWorkspaceName(v string) *CreateUnifiedalarmTplRequest {
	s.WorkspaceName = &v
	return s
}

func (s *CreateUnifiedalarmTplRequest) SetAlarmNodata(v int64) *CreateUnifiedalarmTplRequest {
	s.AlarmNodata = &v
	return s
}

type CreateUnifiedalarmTplResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// true 成功 false 失败
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateUnifiedalarmTplResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUnifiedalarmTplResponse) GoString() string {
	return s.String()
}

func (s *CreateUnifiedalarmTplResponse) SetReqMsgId(v string) *CreateUnifiedalarmTplResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateUnifiedalarmTplResponse) SetResultCode(v string) *CreateUnifiedalarmTplResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateUnifiedalarmTplResponse) SetResultMsg(v string) *CreateUnifiedalarmTplResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateUnifiedalarmTplResponse) SetResult(v bool) *CreateUnifiedalarmTplResponse {
	s.Result = &v
	return s
}

type UpdateUnifiedalarmTplRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 主键
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 模板名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 区分自定义还是pql
	Category *string `json:"category,omitempty" xml:"category,omitempty" require:"true"`
	// 规则配置
	RuleConfig *string `json:"rule_config,omitempty" xml:"rule_config,omitempty" require:"true"`
	// 告警等级
	Level *int64 `json:"level,omitempty" xml:"level,omitempty" require:"true"`
	// 应急处理人
	Emergency *string `json:"emergency,omitempty" xml:"emergency,omitempty"`
	// 应急处理链接
	EmergencyUrl *string `json:"emergency_url,omitempty" xml:"emergency_url,omitempty"`
	// 触发周期
	PendingHit *int64 `json:"pending_hit,omitempty" xml:"pending_hit,omitempty" require:"true"`
	// 恢复周期
	RecoveredHit *int64 `json:"recovered_hit,omitempty" xml:"recovered_hit,omitempty" require:"true"`
	// 检测频率
	Step *int64 `json:"step,omitempty" xml:"step,omitempty" require:"true"`
	// 通知渠道
	Channels []*string `json:"channels,omitempty" xml:"channels,omitempty" require:"true" type:"Repeated"`
	// 通知对象 可能有多个
	AlarmSubs []*UnifiedAlarmSubDTO `json:"alarm_subs,omitempty" xml:"alarm_subs,omitempty" type:"Repeated"`
	// 静默期
	SilenceTime *int64 `json:"silence_time,omitempty" xml:"silence_time,omitempty" require:"true"`
	// 告警触发时通知
	NotifyFiring *int64 `json:"notify_firing,omitempty" xml:"notify_firing,omitempty" require:"true"`
	// 告警恢复时通知
	NotifyRecovered *int64 `json:"notify_recovered,omitempty" xml:"notify_recovered,omitempty" require:"true"`
	// 告警无数据时通知
	NotifyNodata *int64 `json:"notify_nodata,omitempty" xml:"notify_nodata,omitempty" require:"true"`
	// 通知时间
	NotifyTimeFilter *TimeFilter `json:"notify_time_filter,omitempty" xml:"notify_time_filter,omitempty"`
	// 工作空间名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s UpdateUnifiedalarmTplRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateUnifiedalarmTplRequest) GoString() string {
	return s.String()
}

func (s *UpdateUnifiedalarmTplRequest) SetAuthToken(v string) *UpdateUnifiedalarmTplRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetId(v int64) *UpdateUnifiedalarmTplRequest {
	s.Id = &v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetName(v string) *UpdateUnifiedalarmTplRequest {
	s.Name = &v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetCategory(v string) *UpdateUnifiedalarmTplRequest {
	s.Category = &v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetRuleConfig(v string) *UpdateUnifiedalarmTplRequest {
	s.RuleConfig = &v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetLevel(v int64) *UpdateUnifiedalarmTplRequest {
	s.Level = &v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetEmergency(v string) *UpdateUnifiedalarmTplRequest {
	s.Emergency = &v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetEmergencyUrl(v string) *UpdateUnifiedalarmTplRequest {
	s.EmergencyUrl = &v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetPendingHit(v int64) *UpdateUnifiedalarmTplRequest {
	s.PendingHit = &v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetRecoveredHit(v int64) *UpdateUnifiedalarmTplRequest {
	s.RecoveredHit = &v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetStep(v int64) *UpdateUnifiedalarmTplRequest {
	s.Step = &v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetChannels(v []*string) *UpdateUnifiedalarmTplRequest {
	s.Channels = v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetAlarmSubs(v []*UnifiedAlarmSubDTO) *UpdateUnifiedalarmTplRequest {
	s.AlarmSubs = v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetSilenceTime(v int64) *UpdateUnifiedalarmTplRequest {
	s.SilenceTime = &v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetNotifyFiring(v int64) *UpdateUnifiedalarmTplRequest {
	s.NotifyFiring = &v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetNotifyRecovered(v int64) *UpdateUnifiedalarmTplRequest {
	s.NotifyRecovered = &v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetNotifyNodata(v int64) *UpdateUnifiedalarmTplRequest {
	s.NotifyNodata = &v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetNotifyTimeFilter(v *TimeFilter) *UpdateUnifiedalarmTplRequest {
	s.NotifyTimeFilter = v
	return s
}

func (s *UpdateUnifiedalarmTplRequest) SetWorkspaceName(v string) *UpdateUnifiedalarmTplRequest {
	s.WorkspaceName = &v
	return s
}

type UpdateUnifiedalarmTplResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateUnifiedalarmTplResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateUnifiedalarmTplResponse) GoString() string {
	return s.String()
}

func (s *UpdateUnifiedalarmTplResponse) SetReqMsgId(v string) *UpdateUnifiedalarmTplResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateUnifiedalarmTplResponse) SetResultCode(v string) *UpdateUnifiedalarmTplResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateUnifiedalarmTplResponse) SetResultMsg(v string) *UpdateUnifiedalarmTplResponse {
	s.ResultMsg = &v
	return s
}

type QueryUnifiedalarmTplRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 当前页
	//
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面尺寸
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 工作区名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s QueryUnifiedalarmTplRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmTplRequest) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmTplRequest) SetAuthToken(v string) *QueryUnifiedalarmTplRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnifiedalarmTplRequest) SetCurrentPage(v int64) *QueryUnifiedalarmTplRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryUnifiedalarmTplRequest) SetPageSize(v int64) *QueryUnifiedalarmTplRequest {
	s.PageSize = &v
	return s
}

func (s *QueryUnifiedalarmTplRequest) SetWorkspaceName(v string) *QueryUnifiedalarmTplRequest {
	s.WorkspaceName = &v
	return s
}

type QueryUnifiedalarmTplResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 告警模板集合
	AlarmTpls []*UnifiedAlarmTplVO `json:"alarm_tpls,omitempty" xml:"alarm_tpls,omitempty" type:"Repeated"`
	// 总记录数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面尺寸
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryUnifiedalarmTplResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmTplResponse) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmTplResponse) SetReqMsgId(v string) *QueryUnifiedalarmTplResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnifiedalarmTplResponse) SetResultCode(v string) *QueryUnifiedalarmTplResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnifiedalarmTplResponse) SetResultMsg(v string) *QueryUnifiedalarmTplResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnifiedalarmTplResponse) SetAlarmTpls(v []*UnifiedAlarmTplVO) *QueryUnifiedalarmTplResponse {
	s.AlarmTpls = v
	return s
}

func (s *QueryUnifiedalarmTplResponse) SetTotalCount(v int64) *QueryUnifiedalarmTplResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryUnifiedalarmTplResponse) SetCurrentPage(v int64) *QueryUnifiedalarmTplResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryUnifiedalarmTplResponse) SetPageSize(v int64) *QueryUnifiedalarmTplResponse {
	s.PageSize = &v
	return s
}

type GetUnifiedalarmTplRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 主键
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 工作空间名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s GetUnifiedalarmTplRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUnifiedalarmTplRequest) GoString() string {
	return s.String()
}

func (s *GetUnifiedalarmTplRequest) SetAuthToken(v string) *GetUnifiedalarmTplRequest {
	s.AuthToken = &v
	return s
}

func (s *GetUnifiedalarmTplRequest) SetId(v int64) *GetUnifiedalarmTplRequest {
	s.Id = &v
	return s
}

func (s *GetUnifiedalarmTplRequest) SetWorkspaceName(v string) *GetUnifiedalarmTplRequest {
	s.WorkspaceName = &v
	return s
}

type GetUnifiedalarmTplResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 告警规则模板详情
	AlarmTpl *UnifiedAlarmTplVO `json:"alarm_tpl,omitempty" xml:"alarm_tpl,omitempty"`
}

func (s GetUnifiedalarmTplResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUnifiedalarmTplResponse) GoString() string {
	return s.String()
}

func (s *GetUnifiedalarmTplResponse) SetReqMsgId(v string) *GetUnifiedalarmTplResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetUnifiedalarmTplResponse) SetResultCode(v string) *GetUnifiedalarmTplResponse {
	s.ResultCode = &v
	return s
}

func (s *GetUnifiedalarmTplResponse) SetResultMsg(v string) *GetUnifiedalarmTplResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetUnifiedalarmTplResponse) SetAlarmTpl(v *UnifiedAlarmTplVO) *GetUnifiedalarmTplResponse {
	s.AlarmTpl = v
	return s
}

type DeleteUnifiedalarmTplRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 主键
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 工作空间名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s DeleteUnifiedalarmTplRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUnifiedalarmTplRequest) GoString() string {
	return s.String()
}

func (s *DeleteUnifiedalarmTplRequest) SetAuthToken(v string) *DeleteUnifiedalarmTplRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteUnifiedalarmTplRequest) SetId(v int64) *DeleteUnifiedalarmTplRequest {
	s.Id = &v
	return s
}

func (s *DeleteUnifiedalarmTplRequest) SetWorkspaceName(v string) *DeleteUnifiedalarmTplRequest {
	s.WorkspaceName = &v
	return s
}

type DeleteUnifiedalarmTplResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteUnifiedalarmTplResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUnifiedalarmTplResponse) GoString() string {
	return s.String()
}

func (s *DeleteUnifiedalarmTplResponse) SetReqMsgId(v string) *DeleteUnifiedalarmTplResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteUnifiedalarmTplResponse) SetResultCode(v string) *DeleteUnifiedalarmTplResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteUnifiedalarmTplResponse) SetResultMsg(v string) *DeleteUnifiedalarmTplResponse {
	s.ResultMsg = &v
	return s
}

type SwitchUnifiedalarmRuleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 主键
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 告警开始时间
	SuspendStartTime *int64 `json:"suspend_start_time,omitempty" xml:"suspend_start_time,omitempty"`
	// 告警结束时间
	SuspendedEndTime *int64 `json:"suspended_end_time,omitempty" xml:"suspended_end_time,omitempty"`
	// 告警暂停原因
	SuspendedReason *string `json:"suspended_reason,omitempty" xml:"suspended_reason,omitempty"`
	// 启停状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 工作空间名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 批量暂停与恢复
	Ids []*int64 `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
}

func (s SwitchUnifiedalarmRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchUnifiedalarmRuleRequest) GoString() string {
	return s.String()
}

func (s *SwitchUnifiedalarmRuleRequest) SetAuthToken(v string) *SwitchUnifiedalarmRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *SwitchUnifiedalarmRuleRequest) SetId(v int64) *SwitchUnifiedalarmRuleRequest {
	s.Id = &v
	return s
}

func (s *SwitchUnifiedalarmRuleRequest) SetSuspendStartTime(v int64) *SwitchUnifiedalarmRuleRequest {
	s.SuspendStartTime = &v
	return s
}

func (s *SwitchUnifiedalarmRuleRequest) SetSuspendedEndTime(v int64) *SwitchUnifiedalarmRuleRequest {
	s.SuspendedEndTime = &v
	return s
}

func (s *SwitchUnifiedalarmRuleRequest) SetSuspendedReason(v string) *SwitchUnifiedalarmRuleRequest {
	s.SuspendedReason = &v
	return s
}

func (s *SwitchUnifiedalarmRuleRequest) SetStatus(v int64) *SwitchUnifiedalarmRuleRequest {
	s.Status = &v
	return s
}

func (s *SwitchUnifiedalarmRuleRequest) SetWorkspaceName(v string) *SwitchUnifiedalarmRuleRequest {
	s.WorkspaceName = &v
	return s
}

func (s *SwitchUnifiedalarmRuleRequest) SetIds(v []*int64) *SwitchUnifiedalarmRuleRequest {
	s.Ids = v
	return s
}

type SwitchUnifiedalarmRuleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SwitchUnifiedalarmRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchUnifiedalarmRuleResponse) GoString() string {
	return s.String()
}

func (s *SwitchUnifiedalarmRuleResponse) SetReqMsgId(v string) *SwitchUnifiedalarmRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SwitchUnifiedalarmRuleResponse) SetResultCode(v string) *SwitchUnifiedalarmRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *SwitchUnifiedalarmRuleResponse) SetResultMsg(v string) *SwitchUnifiedalarmRuleResponse {
	s.ResultMsg = &v
	return s
}

type ListAlarmSubscriptionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 资源类型
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	// 资源ID
	ResourceId *string `json:"resource_id,omitempty" xml:"resource_id,omitempty" require:"true"`
}

func (s ListAlarmSubscriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAlarmSubscriptionRequest) GoString() string {
	return s.String()
}

func (s *ListAlarmSubscriptionRequest) SetAuthToken(v string) *ListAlarmSubscriptionRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAlarmSubscriptionRequest) SetWorkspaceName(v string) *ListAlarmSubscriptionRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ListAlarmSubscriptionRequest) SetResourceType(v string) *ListAlarmSubscriptionRequest {
	s.ResourceType = &v
	return s
}

func (s *ListAlarmSubscriptionRequest) SetResourceId(v string) *ListAlarmSubscriptionRequest {
	s.ResourceId = &v
	return s
}

type ListAlarmSubscriptionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 告警订阅列表
	AlarmSubs []*AlarmSub `json:"alarm_subs,omitempty" xml:"alarm_subs,omitempty" type:"Repeated"`
}

func (s ListAlarmSubscriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAlarmSubscriptionResponse) GoString() string {
	return s.String()
}

func (s *ListAlarmSubscriptionResponse) SetReqMsgId(v string) *ListAlarmSubscriptionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAlarmSubscriptionResponse) SetResultCode(v string) *ListAlarmSubscriptionResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAlarmSubscriptionResponse) SetResultMsg(v string) *ListAlarmSubscriptionResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAlarmSubscriptionResponse) SetAlarmSubs(v []*AlarmSub) *ListAlarmSubscriptionResponse {
	s.AlarmSubs = v
	return s
}

type UpdateAlarmSubscriptionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 告警订阅主键 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 告警级别
	AlarmLevel *int64 `json:"alarm_level,omitempty" xml:"alarm_level,omitempty" require:"true"`
	// 降频通知开关
	NotifyReduceSwitch *int64 `json:"notify_reduce_switch,omitempty" xml:"notify_reduce_switch,omitempty" require:"true"`
}

func (s UpdateAlarmSubscriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlarmSubscriptionRequest) GoString() string {
	return s.String()
}

func (s *UpdateAlarmSubscriptionRequest) SetAuthToken(v string) *UpdateAlarmSubscriptionRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateAlarmSubscriptionRequest) SetWorkspaceName(v string) *UpdateAlarmSubscriptionRequest {
	s.WorkspaceName = &v
	return s
}

func (s *UpdateAlarmSubscriptionRequest) SetId(v int64) *UpdateAlarmSubscriptionRequest {
	s.Id = &v
	return s
}

func (s *UpdateAlarmSubscriptionRequest) SetAlarmLevel(v int64) *UpdateAlarmSubscriptionRequest {
	s.AlarmLevel = &v
	return s
}

func (s *UpdateAlarmSubscriptionRequest) SetNotifyReduceSwitch(v int64) *UpdateAlarmSubscriptionRequest {
	s.NotifyReduceSwitch = &v
	return s
}

type UpdateAlarmSubscriptionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateAlarmSubscriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlarmSubscriptionResponse) GoString() string {
	return s.String()
}

func (s *UpdateAlarmSubscriptionResponse) SetReqMsgId(v string) *UpdateAlarmSubscriptionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateAlarmSubscriptionResponse) SetResultCode(v string) *UpdateAlarmSubscriptionResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateAlarmSubscriptionResponse) SetResultMsg(v string) *UpdateAlarmSubscriptionResponse {
	s.ResultMsg = &v
	return s
}

type ListCustompluginRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 插件类型
	PluginType *string `json:"plugin_type,omitempty" xml:"plugin_type,omitempty"`
	// 过滤类型
	FilterType *string `json:"filter_type,omitempty" xml:"filter_type,omitempty"`
	// 过滤条件，如app名称
	Filter *string `json:"filter,omitempty" xml:"filter,omitempty"`
}

func (s ListCustompluginRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCustompluginRequest) GoString() string {
	return s.String()
}

func (s *ListCustompluginRequest) SetAuthToken(v string) *ListCustompluginRequest {
	s.AuthToken = &v
	return s
}

func (s *ListCustompluginRequest) SetWorkspaceName(v string) *ListCustompluginRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ListCustompluginRequest) SetPluginType(v string) *ListCustompluginRequest {
	s.PluginType = &v
	return s
}

func (s *ListCustompluginRequest) SetFilterType(v string) *ListCustompluginRequest {
	s.FilterType = &v
	return s
}

func (s *ListCustompluginRequest) SetFilter(v string) *ListCustompluginRequest {
	s.Filter = &v
	return s
}

type ListCustompluginResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 自定义指标监控配置列表
	CustomPlugins []*CustomPluginDO `json:"custom_plugins,omitempty" xml:"custom_plugins,omitempty" type:"Repeated"`
}

func (s ListCustompluginResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCustompluginResponse) GoString() string {
	return s.String()
}

func (s *ListCustompluginResponse) SetReqMsgId(v string) *ListCustompluginResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListCustompluginResponse) SetResultCode(v string) *ListCustompluginResponse {
	s.ResultCode = &v
	return s
}

func (s *ListCustompluginResponse) SetResultMsg(v string) *ListCustompluginResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListCustompluginResponse) SetCustomPlugins(v []*CustomPluginDO) *ListCustompluginResponse {
	s.CustomPlugins = v
	return s
}

type QueryUnifiedalarmEventRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作区
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面尺寸
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 告警等级
	AlarmLevel *int64 `json:"alarm_level,omitempty" xml:"alarm_level,omitempty"`
	// 触发状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 告警对象类型
	AlarmTargetType *string `json:"alarm_target_type,omitempty" xml:"alarm_target_type,omitempty"`
	// 模糊查询字段
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
	// 开始时间
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty"`
	// 结束时间
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty"`
	// 告警规则 ID
	AlarmRuleId *int64 `json:"alarm_rule_id,omitempty" xml:"alarm_rule_id,omitempty"`
	// 根据应用栈过滤
	AlarmStackInfo *AlarmStackInfo `json:"alarm_stack_info,omitempty" xml:"alarm_stack_info,omitempty"`
	// 查询告警事件产生时间所在区间的开始时间
	FireStartTime *int64 `json:"fire_start_time,omitempty" xml:"fire_start_time,omitempty"`
	// 查询告警事件产生时间所在区间的结束时间
	FireEndTime *int64 `json:"fire_end_time,omitempty" xml:"fire_end_time,omitempty"`
	// 查询告警事件恢复时间所在区间的开始时间
	RecoveredStartTime *int64 `json:"recovered_start_time,omitempty" xml:"recovered_start_time,omitempty"`
	// 查询告警事件恢复时间所在区间的结束时间
	RecoveredEndTime *int64 `json:"recovered_end_time,omitempty" xml:"recovered_end_time,omitempty"`
}

func (s QueryUnifiedalarmEventRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmEventRequest) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmEventRequest) SetAuthToken(v string) *QueryUnifiedalarmEventRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnifiedalarmEventRequest) SetWorkspaceName(v string) *QueryUnifiedalarmEventRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryUnifiedalarmEventRequest) SetCurrentPage(v int64) *QueryUnifiedalarmEventRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryUnifiedalarmEventRequest) SetPageSize(v int64) *QueryUnifiedalarmEventRequest {
	s.PageSize = &v
	return s
}

func (s *QueryUnifiedalarmEventRequest) SetAlarmLevel(v int64) *QueryUnifiedalarmEventRequest {
	s.AlarmLevel = &v
	return s
}

func (s *QueryUnifiedalarmEventRequest) SetStatus(v int64) *QueryUnifiedalarmEventRequest {
	s.Status = &v
	return s
}

func (s *QueryUnifiedalarmEventRequest) SetAlarmTargetType(v string) *QueryUnifiedalarmEventRequest {
	s.AlarmTargetType = &v
	return s
}

func (s *QueryUnifiedalarmEventRequest) SetKeyword(v string) *QueryUnifiedalarmEventRequest {
	s.Keyword = &v
	return s
}

func (s *QueryUnifiedalarmEventRequest) SetStartTime(v int64) *QueryUnifiedalarmEventRequest {
	s.StartTime = &v
	return s
}

func (s *QueryUnifiedalarmEventRequest) SetEndTime(v int64) *QueryUnifiedalarmEventRequest {
	s.EndTime = &v
	return s
}

func (s *QueryUnifiedalarmEventRequest) SetAlarmRuleId(v int64) *QueryUnifiedalarmEventRequest {
	s.AlarmRuleId = &v
	return s
}

func (s *QueryUnifiedalarmEventRequest) SetAlarmStackInfo(v *AlarmStackInfo) *QueryUnifiedalarmEventRequest {
	s.AlarmStackInfo = v
	return s
}

func (s *QueryUnifiedalarmEventRequest) SetFireStartTime(v int64) *QueryUnifiedalarmEventRequest {
	s.FireStartTime = &v
	return s
}

func (s *QueryUnifiedalarmEventRequest) SetFireEndTime(v int64) *QueryUnifiedalarmEventRequest {
	s.FireEndTime = &v
	return s
}

func (s *QueryUnifiedalarmEventRequest) SetRecoveredStartTime(v int64) *QueryUnifiedalarmEventRequest {
	s.RecoveredStartTime = &v
	return s
}

func (s *QueryUnifiedalarmEventRequest) SetRecoveredEndTime(v int64) *QueryUnifiedalarmEventRequest {
	s.RecoveredEndTime = &v
	return s
}

type QueryUnifiedalarmEventResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 告警事件列表
	UnifiedAlarmEventList []*UnifiedAlarmEventVO `json:"unified_alarm_event_list,omitempty" xml:"unified_alarm_event_list,omitempty" type:"Repeated"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面尺寸
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总记录数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryUnifiedalarmEventResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmEventResponse) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmEventResponse) SetReqMsgId(v string) *QueryUnifiedalarmEventResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnifiedalarmEventResponse) SetResultCode(v string) *QueryUnifiedalarmEventResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnifiedalarmEventResponse) SetResultMsg(v string) *QueryUnifiedalarmEventResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnifiedalarmEventResponse) SetUnifiedAlarmEventList(v []*UnifiedAlarmEventVO) *QueryUnifiedalarmEventResponse {
	s.UnifiedAlarmEventList = v
	return s
}

func (s *QueryUnifiedalarmEventResponse) SetCurrentPage(v int64) *QueryUnifiedalarmEventResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryUnifiedalarmEventResponse) SetPageSize(v int64) *QueryUnifiedalarmEventResponse {
	s.PageSize = &v
	return s
}

func (s *QueryUnifiedalarmEventResponse) SetTotalCount(v int64) *QueryUnifiedalarmEventResponse {
	s.TotalCount = &v
	return s
}

type QueryUnifiedalarmMetricsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 告警规则唯一标识
	RuleUniqueIdentity *string `json:"rule_unique_identity,omitempty" xml:"rule_unique_identity,omitempty"`
	// metrics查询唯一id
	Muid *string `json:"muid,omitempty" xml:"muid,omitempty"`
	// 维度筛选
	Tags []*KeySet `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	// 开始时间
	Start *int64 `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// 结束时间
	End *int64 `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s QueryUnifiedalarmMetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmMetricsRequest) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmMetricsRequest) SetAuthToken(v string) *QueryUnifiedalarmMetricsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnifiedalarmMetricsRequest) SetRuleUniqueIdentity(v string) *QueryUnifiedalarmMetricsRequest {
	s.RuleUniqueIdentity = &v
	return s
}

func (s *QueryUnifiedalarmMetricsRequest) SetMuid(v string) *QueryUnifiedalarmMetricsRequest {
	s.Muid = &v
	return s
}

func (s *QueryUnifiedalarmMetricsRequest) SetTags(v []*KeySet) *QueryUnifiedalarmMetricsRequest {
	s.Tags = v
	return s
}

func (s *QueryUnifiedalarmMetricsRequest) SetStart(v int64) *QueryUnifiedalarmMetricsRequest {
	s.Start = &v
	return s
}

func (s *QueryUnifiedalarmMetricsRequest) SetEnd(v int64) *QueryUnifiedalarmMetricsRequest {
	s.End = &v
	return s
}

func (s *QueryUnifiedalarmMetricsRequest) SetWorkspaceName(v string) *QueryUnifiedalarmMetricsRequest {
	s.WorkspaceName = &v
	return s
}

type QueryUnifiedalarmMetricsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 指标数据
	Results []*UnifiedAlarmMetric `json:"results,omitempty" xml:"results,omitempty" type:"Repeated"`
}

func (s QueryUnifiedalarmMetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmMetricsResponse) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmMetricsResponse) SetReqMsgId(v string) *QueryUnifiedalarmMetricsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnifiedalarmMetricsResponse) SetResultCode(v string) *QueryUnifiedalarmMetricsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnifiedalarmMetricsResponse) SetResultMsg(v string) *QueryUnifiedalarmMetricsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnifiedalarmMetricsResponse) SetResults(v []*UnifiedAlarmMetric) *QueryUnifiedalarmMetricsResponse {
	s.Results = v
	return s
}

type BatchcreateUnifiedalarmHistoryRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// json格式上下文信息
	Context *string `json:"context,omitempty" xml:"context,omitempty" require:"true"`
}

func (s BatchcreateUnifiedalarmHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateUnifiedalarmHistoryRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateUnifiedalarmHistoryRequest) SetAuthToken(v string) *BatchcreateUnifiedalarmHistoryRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateUnifiedalarmHistoryRequest) SetContext(v string) *BatchcreateUnifiedalarmHistoryRequest {
	s.Context = &v
	return s
}

type BatchcreateUnifiedalarmHistoryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchcreateUnifiedalarmHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateUnifiedalarmHistoryResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateUnifiedalarmHistoryResponse) SetReqMsgId(v string) *BatchcreateUnifiedalarmHistoryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateUnifiedalarmHistoryResponse) SetResultCode(v string) *BatchcreateUnifiedalarmHistoryResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateUnifiedalarmHistoryResponse) SetResultMsg(v string) *BatchcreateUnifiedalarmHistoryResponse {
	s.ResultMsg = &v
	return s
}

type BatchcreateUnifiedalarmRuleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 模板 ID
	TplId *int64 `json:"tpl_id,omitempty" xml:"tpl_id,omitempty" require:"true"`
	// 监控对象名称列表
	AlarmTargets []*AlarmTarget `json:"alarm_targets,omitempty" xml:"alarm_targets,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateUnifiedalarmRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateUnifiedalarmRuleRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateUnifiedalarmRuleRequest) SetAuthToken(v string) *BatchcreateUnifiedalarmRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateUnifiedalarmRuleRequest) SetWorkspaceName(v string) *BatchcreateUnifiedalarmRuleRequest {
	s.WorkspaceName = &v
	return s
}

func (s *BatchcreateUnifiedalarmRuleRequest) SetTplId(v int64) *BatchcreateUnifiedalarmRuleRequest {
	s.TplId = &v
	return s
}

func (s *BatchcreateUnifiedalarmRuleRequest) SetAlarmTargets(v []*AlarmTarget) *BatchcreateUnifiedalarmRuleRequest {
	s.AlarmTargets = v
	return s
}

type BatchcreateUnifiedalarmRuleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchcreateUnifiedalarmRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateUnifiedalarmRuleResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateUnifiedalarmRuleResponse) SetReqMsgId(v string) *BatchcreateUnifiedalarmRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateUnifiedalarmRuleResponse) SetResultCode(v string) *BatchcreateUnifiedalarmRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateUnifiedalarmRuleResponse) SetResultMsg(v string) *BatchcreateUnifiedalarmRuleResponse {
	s.ResultMsg = &v
	return s
}

type QueryUnifiedalarmEventstatRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 告警等级
	AlarmLevel *int64 `json:"alarm_level,omitempty" xml:"alarm_level,omitempty"`
	// 触发状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 工作空间名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 模糊查询告警内容
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
	// 告警规则 ID
	AlarmRuleId *int64 `json:"alarm_rule_id,omitempty" xml:"alarm_rule_id,omitempty"`
	// alarm_target_type
	AlarmTargetType *string `json:"alarm_target_type,omitempty" xml:"alarm_target_type,omitempty"`
	// 根据应用过滤
	AlarmStackInfo *AlarmStackInfo `json:"alarm_stack_info,omitempty" xml:"alarm_stack_info,omitempty"`
}

func (s QueryUnifiedalarmEventstatRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmEventstatRequest) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmEventstatRequest) SetAuthToken(v string) *QueryUnifiedalarmEventstatRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnifiedalarmEventstatRequest) SetAlarmLevel(v int64) *QueryUnifiedalarmEventstatRequest {
	s.AlarmLevel = &v
	return s
}

func (s *QueryUnifiedalarmEventstatRequest) SetStatus(v int64) *QueryUnifiedalarmEventstatRequest {
	s.Status = &v
	return s
}

func (s *QueryUnifiedalarmEventstatRequest) SetStartTime(v int64) *QueryUnifiedalarmEventstatRequest {
	s.StartTime = &v
	return s
}

func (s *QueryUnifiedalarmEventstatRequest) SetEndTime(v int64) *QueryUnifiedalarmEventstatRequest {
	s.EndTime = &v
	return s
}

func (s *QueryUnifiedalarmEventstatRequest) SetWorkspaceName(v string) *QueryUnifiedalarmEventstatRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryUnifiedalarmEventstatRequest) SetKeyword(v string) *QueryUnifiedalarmEventstatRequest {
	s.Keyword = &v
	return s
}

func (s *QueryUnifiedalarmEventstatRequest) SetAlarmRuleId(v int64) *QueryUnifiedalarmEventstatRequest {
	s.AlarmRuleId = &v
	return s
}

func (s *QueryUnifiedalarmEventstatRequest) SetAlarmTargetType(v string) *QueryUnifiedalarmEventstatRequest {
	s.AlarmTargetType = &v
	return s
}

func (s *QueryUnifiedalarmEventstatRequest) SetAlarmStackInfo(v *AlarmStackInfo) *QueryUnifiedalarmEventstatRequest {
	s.AlarmStackInfo = v
	return s
}

type QueryUnifiedalarmEventstatResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 历史事件统计
	AlarmHistoryList []*EventStat `json:"alarm_history_list,omitempty" xml:"alarm_history_list,omitempty" type:"Repeated"`
	// 时间分段
	TimeSlots []*int64 `json:"time_slots,omitempty" xml:"time_slots,omitempty" type:"Repeated"`
}

func (s QueryUnifiedalarmEventstatResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmEventstatResponse) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmEventstatResponse) SetReqMsgId(v string) *QueryUnifiedalarmEventstatResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnifiedalarmEventstatResponse) SetResultCode(v string) *QueryUnifiedalarmEventstatResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnifiedalarmEventstatResponse) SetResultMsg(v string) *QueryUnifiedalarmEventstatResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnifiedalarmEventstatResponse) SetAlarmHistoryList(v []*EventStat) *QueryUnifiedalarmEventstatResponse {
	s.AlarmHistoryList = v
	return s
}

func (s *QueryUnifiedalarmEventstatResponse) SetTimeSlots(v []*int64) *QueryUnifiedalarmEventstatResponse {
	s.TimeSlots = v
	return s
}

type QueryUnifiedalarmNotifystatRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 开始时间
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束时间
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 发送状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 通知渠道
	Channel *string `json:"channel,omitempty" xml:"channel,omitempty"`
	// 模糊查询通知内容
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 告警规则 ID
	AlarmRuleId *int64 `json:"alarm_rule_id,omitempty" xml:"alarm_rule_id,omitempty"`
	// 事件ID
	EventId *string `json:"event_id,omitempty" xml:"event_id,omitempty"`
	// 根据应用过滤
	AlarmStackInfo *AlarmStackInfo `json:"alarm_stack_info,omitempty" xml:"alarm_stack_info,omitempty"`
}

func (s QueryUnifiedalarmNotifystatRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmNotifystatRequest) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmNotifystatRequest) SetAuthToken(v string) *QueryUnifiedalarmNotifystatRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnifiedalarmNotifystatRequest) SetStartTime(v int64) *QueryUnifiedalarmNotifystatRequest {
	s.StartTime = &v
	return s
}

func (s *QueryUnifiedalarmNotifystatRequest) SetEndTime(v int64) *QueryUnifiedalarmNotifystatRequest {
	s.EndTime = &v
	return s
}

func (s *QueryUnifiedalarmNotifystatRequest) SetStatus(v int64) *QueryUnifiedalarmNotifystatRequest {
	s.Status = &v
	return s
}

func (s *QueryUnifiedalarmNotifystatRequest) SetChannel(v string) *QueryUnifiedalarmNotifystatRequest {
	s.Channel = &v
	return s
}

func (s *QueryUnifiedalarmNotifystatRequest) SetKeyword(v string) *QueryUnifiedalarmNotifystatRequest {
	s.Keyword = &v
	return s
}

func (s *QueryUnifiedalarmNotifystatRequest) SetWorkspaceName(v string) *QueryUnifiedalarmNotifystatRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryUnifiedalarmNotifystatRequest) SetAlarmRuleId(v int64) *QueryUnifiedalarmNotifystatRequest {
	s.AlarmRuleId = &v
	return s
}

func (s *QueryUnifiedalarmNotifystatRequest) SetEventId(v string) *QueryUnifiedalarmNotifystatRequest {
	s.EventId = &v
	return s
}

func (s *QueryUnifiedalarmNotifystatRequest) SetAlarmStackInfo(v *AlarmStackInfo) *QueryUnifiedalarmNotifystatRequest {
	s.AlarmStackInfo = v
	return s
}

type QueryUnifiedalarmNotifystatResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 统计通知历史
	NotifyStatList []*EventStat `json:"notify_stat_list,omitempty" xml:"notify_stat_list,omitempty" type:"Repeated"`
	// 时间分段
	TimeSlots []*int64 `json:"time_slots,omitempty" xml:"time_slots,omitempty" type:"Repeated"`
}

func (s QueryUnifiedalarmNotifystatResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmNotifystatResponse) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmNotifystatResponse) SetReqMsgId(v string) *QueryUnifiedalarmNotifystatResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnifiedalarmNotifystatResponse) SetResultCode(v string) *QueryUnifiedalarmNotifystatResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnifiedalarmNotifystatResponse) SetResultMsg(v string) *QueryUnifiedalarmNotifystatResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnifiedalarmNotifystatResponse) SetNotifyStatList(v []*EventStat) *QueryUnifiedalarmNotifystatResponse {
	s.NotifyStatList = v
	return s
}

func (s *QueryUnifiedalarmNotifystatResponse) SetTimeSlots(v []*int64) *QueryUnifiedalarmNotifystatResponse {
	s.TimeSlots = v
	return s
}

type QueryMetaNodeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s QueryMetaNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMetaNodeRequest) GoString() string {
	return s.String()
}

func (s *QueryMetaNodeRequest) SetAuthToken(v string) *QueryMetaNodeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMetaNodeRequest) SetWorkspaceName(v string) *QueryMetaNodeRequest {
	s.WorkspaceName = &v
	return s
}

type QueryMetaNodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 物理机信息
	MtmNcs []*MtmNc `json:"mtm_ncs,omitempty" xml:"mtm_ncs,omitempty" type:"Repeated"`
}

func (s QueryMetaNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMetaNodeResponse) GoString() string {
	return s.String()
}

func (s *QueryMetaNodeResponse) SetReqMsgId(v string) *QueryMetaNodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMetaNodeResponse) SetResultCode(v string) *QueryMetaNodeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMetaNodeResponse) SetResultMsg(v string) *QueryMetaNodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMetaNodeResponse) SetMtmNcs(v []*MtmNc) *QueryMetaNodeResponse {
	s.MtmNcs = v
	return s
}

type BatchdeleteUnifiedalarmRuleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// id
	IdsRepeatList []*int64 `json:"ids_repeat_list,omitempty" xml:"ids_repeat_list,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteUnifiedalarmRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteUnifiedalarmRuleRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteUnifiedalarmRuleRequest) SetAuthToken(v string) *BatchdeleteUnifiedalarmRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteUnifiedalarmRuleRequest) SetWorkspaceName(v string) *BatchdeleteUnifiedalarmRuleRequest {
	s.WorkspaceName = &v
	return s
}

func (s *BatchdeleteUnifiedalarmRuleRequest) SetIdsRepeatList(v []*int64) *BatchdeleteUnifiedalarmRuleRequest {
	s.IdsRepeatList = v
	return s
}

type BatchdeleteUnifiedalarmRuleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteUnifiedalarmRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteUnifiedalarmRuleResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteUnifiedalarmRuleResponse) SetReqMsgId(v string) *BatchdeleteUnifiedalarmRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteUnifiedalarmRuleResponse) SetResultCode(v string) *BatchdeleteUnifiedalarmRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteUnifiedalarmRuleResponse) SetResultMsg(v string) *BatchdeleteUnifiedalarmRuleResponse {
	s.ResultMsg = &v
	return s
}

type CreateXdashboardRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// request data
	Data *XDashboardCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s CreateXdashboardRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateXdashboardRequest) GoString() string {
	return s.String()
}

func (s *CreateXdashboardRequest) SetAuthToken(v string) *CreateXdashboardRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateXdashboardRequest) SetWorkspaceName(v string) *CreateXdashboardRequest {
	s.WorkspaceName = &v
	return s
}

func (s *CreateXdashboardRequest) SetData(v *XDashboardCRULResponseCURequest) *CreateXdashboardRequest {
	s.Data = v
	return s
}

type CreateXdashboardResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// response data
	Data *XDashboardCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateXdashboardResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateXdashboardResponse) GoString() string {
	return s.String()
}

func (s *CreateXdashboardResponse) SetReqMsgId(v string) *CreateXdashboardResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateXdashboardResponse) SetResultCode(v string) *CreateXdashboardResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateXdashboardResponse) SetResultMsg(v string) *CreateXdashboardResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateXdashboardResponse) SetData(v *XDashboardCRULResponseCURequest) *CreateXdashboardResponse {
	s.Data = v
	return s
}

type UpdateXdashboardRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// external workspace name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// update
	Data *XDashboardCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s UpdateXdashboardRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateXdashboardRequest) GoString() string {
	return s.String()
}

func (s *UpdateXdashboardRequest) SetAuthToken(v string) *UpdateXdashboardRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateXdashboardRequest) SetWorkspaceName(v string) *UpdateXdashboardRequest {
	s.WorkspaceName = &v
	return s
}

func (s *UpdateXdashboardRequest) SetData(v *XDashboardCRULResponseCURequest) *UpdateXdashboardRequest {
	s.Data = v
	return s
}

type UpdateXdashboardResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// dashboard body
	Data *XDashboardCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty"`
}

func (s UpdateXdashboardResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateXdashboardResponse) GoString() string {
	return s.String()
}

func (s *UpdateXdashboardResponse) SetReqMsgId(v string) *UpdateXdashboardResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateXdashboardResponse) SetResultCode(v string) *UpdateXdashboardResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateXdashboardResponse) SetResultMsg(v string) *UpdateXdashboardResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateXdashboardResponse) SetData(v *XDashboardCRULResponseCURequest) *UpdateXdashboardResponse {
	s.Data = v
	return s
}

type QueryXdashboardRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	//
	Data *XDashboardQuery `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryXdashboardRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryXdashboardRequest) GoString() string {
	return s.String()
}

func (s *QueryXdashboardRequest) SetAuthToken(v string) *QueryXdashboardRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryXdashboardRequest) SetWorkspaceName(v string) *QueryXdashboardRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryXdashboardRequest) SetData(v *XDashboardQuery) *QueryXdashboardRequest {
	s.Data = v
	return s
}

type QueryXdashboardResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// dashboard body
	Data []*XDashboardCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryXdashboardResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryXdashboardResponse) GoString() string {
	return s.String()
}

func (s *QueryXdashboardResponse) SetReqMsgId(v string) *QueryXdashboardResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryXdashboardResponse) SetResultCode(v string) *QueryXdashboardResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryXdashboardResponse) SetResultMsg(v string) *QueryXdashboardResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryXdashboardResponse) SetData(v []*XDashboardCRULResponseCURequest) *QueryXdashboardResponse {
	s.Data = v
	return s
}

type ListXdashboardDirectoryRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// uuid必填
	Data *XResource `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s ListXdashboardDirectoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListXdashboardDirectoryRequest) GoString() string {
	return s.String()
}

func (s *ListXdashboardDirectoryRequest) SetAuthToken(v string) *ListXdashboardDirectoryRequest {
	s.AuthToken = &v
	return s
}

func (s *ListXdashboardDirectoryRequest) SetWorkspaceName(v string) *ListXdashboardDirectoryRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ListXdashboardDirectoryRequest) SetData(v *XResource) *ListXdashboardDirectoryRequest {
	s.Data = v
	return s
}

type ListXdashboardDirectoryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// dashboard body list
	Data []*XDashboardCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListXdashboardDirectoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListXdashboardDirectoryResponse) GoString() string {
	return s.String()
}

func (s *ListXdashboardDirectoryResponse) SetReqMsgId(v string) *ListXdashboardDirectoryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListXdashboardDirectoryResponse) SetResultCode(v string) *ListXdashboardDirectoryResponse {
	s.ResultCode = &v
	return s
}

func (s *ListXdashboardDirectoryResponse) SetResultMsg(v string) *ListXdashboardDirectoryResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListXdashboardDirectoryResponse) SetData(v []*XDashboardCRULResponseCURequest) *ListXdashboardDirectoryResponse {
	s.Data = v
	return s
}

type DeleteXdashboardRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 其中uuid和type必填
	Data *XResource `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s DeleteXdashboardRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteXdashboardRequest) GoString() string {
	return s.String()
}

func (s *DeleteXdashboardRequest) SetAuthToken(v string) *DeleteXdashboardRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteXdashboardRequest) SetWorkspaceName(v string) *DeleteXdashboardRequest {
	s.WorkspaceName = &v
	return s
}

func (s *DeleteXdashboardRequest) SetData(v *XResource) *DeleteXdashboardRequest {
	s.Data = v
	return s
}

type DeleteXdashboardResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 删除成功资源列表
	Data []*XResource `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s DeleteXdashboardResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteXdashboardResponse) GoString() string {
	return s.String()
}

func (s *DeleteXdashboardResponse) SetReqMsgId(v string) *DeleteXdashboardResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteXdashboardResponse) SetResultCode(v string) *DeleteXdashboardResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteXdashboardResponse) SetResultMsg(v string) *DeleteXdashboardResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteXdashboardResponse) SetData(v []*XResource) *DeleteXdashboardResponse {
	s.Data = v
	return s
}

type QueryXmetricInstantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	//  time 必填
	Data *XMetricQuery `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryXmetricInstantRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetricInstantRequest) GoString() string {
	return s.String()
}

func (s *QueryXmetricInstantRequest) SetAuthToken(v string) *QueryXmetricInstantRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryXmetricInstantRequest) SetWorkspaceName(v string) *QueryXmetricInstantRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryXmetricInstantRequest) SetData(v *XMetricQuery) *QueryXmetricInstantRequest {
	s.Data = v
	return s
}

type QueryXmetricInstantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data *XMetricResponse `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryXmetricInstantResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetricInstantResponse) GoString() string {
	return s.String()
}

func (s *QueryXmetricInstantResponse) SetReqMsgId(v string) *QueryXmetricInstantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryXmetricInstantResponse) SetResultCode(v string) *QueryXmetricInstantResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryXmetricInstantResponse) SetResultMsg(v string) *QueryXmetricInstantResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryXmetricInstantResponse) SetData(v *XMetricResponse) *QueryXmetricInstantResponse {
	s.Data = v
	return s
}

type QueryXmetricRangeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	//  start end 必填
	Data *XMetricQuery `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryXmetricRangeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetricRangeRequest) GoString() string {
	return s.String()
}

func (s *QueryXmetricRangeRequest) SetAuthToken(v string) *QueryXmetricRangeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryXmetricRangeRequest) SetWorkspaceName(v string) *QueryXmetricRangeRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryXmetricRangeRequest) SetData(v *XMetricQuery) *QueryXmetricRangeRequest {
	s.Data = v
	return s
}

type QueryXmetricRangeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data *XMetricResponse `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryXmetricRangeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetricRangeResponse) GoString() string {
	return s.String()
}

func (s *QueryXmetricRangeResponse) SetReqMsgId(v string) *QueryXmetricRangeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryXmetricRangeResponse) SetResultCode(v string) *QueryXmetricRangeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryXmetricRangeResponse) SetResultMsg(v string) *QueryXmetricRangeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryXmetricRangeResponse) SetData(v *XMetricResponse) *QueryXmetricRangeResponse {
	s.Data = v
	return s
}

type QueryXmetricdatasourceInstantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	//
	Data *XMetricQuery `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryXmetricdatasourceInstantRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetricdatasourceInstantRequest) GoString() string {
	return s.String()
}

func (s *QueryXmetricdatasourceInstantRequest) SetAuthToken(v string) *QueryXmetricdatasourceInstantRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryXmetricdatasourceInstantRequest) SetWorkspaceName(v string) *QueryXmetricdatasourceInstantRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryXmetricdatasourceInstantRequest) SetData(v *XMetricQuery) *QueryXmetricdatasourceInstantRequest {
	s.Data = v
	return s
}

type QueryXmetricdatasourceInstantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data *XMetricResponse `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryXmetricdatasourceInstantResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetricdatasourceInstantResponse) GoString() string {
	return s.String()
}

func (s *QueryXmetricdatasourceInstantResponse) SetReqMsgId(v string) *QueryXmetricdatasourceInstantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryXmetricdatasourceInstantResponse) SetResultCode(v string) *QueryXmetricdatasourceInstantResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryXmetricdatasourceInstantResponse) SetResultMsg(v string) *QueryXmetricdatasourceInstantResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryXmetricdatasourceInstantResponse) SetData(v *XMetricResponse) *QueryXmetricdatasourceInstantResponse {
	s.Data = v
	return s
}

type QueryXmetricdatasourceRangeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	//
	Data *XMetricQuery `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryXmetricdatasourceRangeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetricdatasourceRangeRequest) GoString() string {
	return s.String()
}

func (s *QueryXmetricdatasourceRangeRequest) SetAuthToken(v string) *QueryXmetricdatasourceRangeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryXmetricdatasourceRangeRequest) SetWorkspaceName(v string) *QueryXmetricdatasourceRangeRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryXmetricdatasourceRangeRequest) SetData(v *XMetricQuery) *QueryXmetricdatasourceRangeRequest {
	s.Data = v
	return s
}

type QueryXmetricdatasourceRangeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data *XTableResponse `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryXmetricdatasourceRangeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetricdatasourceRangeResponse) GoString() string {
	return s.String()
}

func (s *QueryXmetricdatasourceRangeResponse) SetReqMsgId(v string) *QueryXmetricdatasourceRangeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryXmetricdatasourceRangeResponse) SetResultCode(v string) *QueryXmetricdatasourceRangeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryXmetricdatasourceRangeResponse) SetResultMsg(v string) *QueryXmetricdatasourceRangeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryXmetricdatasourceRangeResponse) SetData(v *XTableResponse) *QueryXmetricdatasourceRangeResponse {
	s.Data = v
	return s
}

type QueryXmetrictagKeyRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	//
	Data *XMetricQuery `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryXmetrictagKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetrictagKeyRequest) GoString() string {
	return s.String()
}

func (s *QueryXmetrictagKeyRequest) SetAuthToken(v string) *QueryXmetrictagKeyRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryXmetrictagKeyRequest) SetWorkspaceName(v string) *QueryXmetrictagKeyRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryXmetrictagKeyRequest) SetData(v *XMetricQuery) *QueryXmetrictagKeyRequest {
	s.Data = v
	return s
}

type QueryXmetrictagKeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// tag keys
	Data []*XMetricInfo `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryXmetrictagKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetrictagKeyResponse) GoString() string {
	return s.String()
}

func (s *QueryXmetrictagKeyResponse) SetReqMsgId(v string) *QueryXmetrictagKeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryXmetrictagKeyResponse) SetResultCode(v string) *QueryXmetrictagKeyResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryXmetrictagKeyResponse) SetResultMsg(v string) *QueryXmetrictagKeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryXmetrictagKeyResponse) SetData(v []*XMetricInfo) *QueryXmetrictagKeyResponse {
	s.Data = v
	return s
}

type QueryXmetrictagValueRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	//
	Data *XMetricQuery `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryXmetrictagValueRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetrictagValueRequest) GoString() string {
	return s.String()
}

func (s *QueryXmetrictagValueRequest) SetAuthToken(v string) *QueryXmetrictagValueRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryXmetrictagValueRequest) SetWorkspaceName(v string) *QueryXmetrictagValueRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryXmetrictagValueRequest) SetData(v *XMetricQuery) *QueryXmetrictagValueRequest {
	s.Data = v
	return s
}

type QueryXmetrictagValueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryXmetrictagValueResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetrictagValueResponse) GoString() string {
	return s.String()
}

func (s *QueryXmetrictagValueResponse) SetReqMsgId(v string) *QueryXmetrictagValueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryXmetrictagValueResponse) SetResultCode(v string) *QueryXmetrictagValueResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryXmetrictagValueResponse) SetResultMsg(v string) *QueryXmetrictagValueResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryXmetrictagValueResponse) SetData(v []*string) *QueryXmetrictagValueResponse {
	s.Data = v
	return s
}

type ListLogserviceDesenstypesRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s ListLogserviceDesenstypesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLogserviceDesenstypesRequest) GoString() string {
	return s.String()
}

func (s *ListLogserviceDesenstypesRequest) SetAuthToken(v string) *ListLogserviceDesenstypesRequest {
	s.AuthToken = &v
	return s
}

type ListLogserviceDesenstypesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可配置的脱敏类型
	DesensTypes []*string `json:"desens_types,omitempty" xml:"desens_types,omitempty" type:"Repeated"`
}

func (s ListLogserviceDesenstypesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLogserviceDesenstypesResponse) GoString() string {
	return s.String()
}

func (s *ListLogserviceDesenstypesResponse) SetReqMsgId(v string) *ListLogserviceDesenstypesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListLogserviceDesenstypesResponse) SetResultCode(v string) *ListLogserviceDesenstypesResponse {
	s.ResultCode = &v
	return s
}

func (s *ListLogserviceDesenstypesResponse) SetResultMsg(v string) *ListLogserviceDesenstypesResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListLogserviceDesenstypesResponse) SetDesensTypes(v []*string) *ListLogserviceDesenstypesResponse {
	s.DesensTypes = v
	return s
}

type GetLogserviceDesensconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s GetLogserviceDesensconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLogserviceDesensconfigRequest) GoString() string {
	return s.String()
}

func (s *GetLogserviceDesensconfigRequest) SetAuthToken(v string) *GetLogserviceDesensconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *GetLogserviceDesensconfigRequest) SetWorkspaceName(v string) *GetLogserviceDesensconfigRequest {
	s.WorkspaceName = &v
	return s
}

type GetLogserviceDesensconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 已配置的脱敏类型
	DesensTypes []*string `json:"desens_types,omitempty" xml:"desens_types,omitempty" type:"Repeated"`
}

func (s GetLogserviceDesensconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLogserviceDesensconfigResponse) GoString() string {
	return s.String()
}

func (s *GetLogserviceDesensconfigResponse) SetReqMsgId(v string) *GetLogserviceDesensconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetLogserviceDesensconfigResponse) SetResultCode(v string) *GetLogserviceDesensconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *GetLogserviceDesensconfigResponse) SetResultMsg(v string) *GetLogserviceDesensconfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetLogserviceDesensconfigResponse) SetDesensTypes(v []*string) *GetLogserviceDesensconfigResponse {
	s.DesensTypes = v
	return s
}

type UpdateLogserviceDesensconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 需配置的脱敏类型
	DesensTypes []*string `json:"desens_types,omitempty" xml:"desens_types,omitempty" require:"true" type:"Repeated"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s UpdateLogserviceDesensconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLogserviceDesensconfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLogserviceDesensconfigRequest) SetAuthToken(v string) *UpdateLogserviceDesensconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateLogserviceDesensconfigRequest) SetDesensTypes(v []*string) *UpdateLogserviceDesensconfigRequest {
	s.DesensTypes = v
	return s
}

func (s *UpdateLogserviceDesensconfigRequest) SetWorkspaceName(v string) *UpdateLogserviceDesensconfigRequest {
	s.WorkspaceName = &v
	return s
}

type UpdateLogserviceDesensconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateLogserviceDesensconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLogserviceDesensconfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLogserviceDesensconfigResponse) SetReqMsgId(v string) *UpdateLogserviceDesensconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateLogserviceDesensconfigResponse) SetResultCode(v string) *UpdateLogserviceDesensconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateLogserviceDesensconfigResponse) SetResultMsg(v string) *UpdateLogserviceDesensconfigResponse {
	s.ResultMsg = &v
	return s
}

type DetailUserRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s DetailUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DetailUserRequest) GoString() string {
	return s.String()
}

func (s *DetailUserRequest) SetAuthToken(v string) *DetailUserRequest {
	s.AuthToken = &v
	return s
}

func (s *DetailUserRequest) SetWorkspaceName(v string) *DetailUserRequest {
	s.WorkspaceName = &v
	return s
}

type DetailUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// auth_url
	AuthUrl *string `json:"auth_url,omitempty" xml:"auth_url,omitempty"`
	// user
	User *MonitorUser `json:"user,omitempty" xml:"user,omitempty"`
	// nav_head
	NavHead *NavContent `json:"nav_head,omitempty" xml:"nav_head,omitempty"`
}

func (s DetailUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DetailUserResponse) GoString() string {
	return s.String()
}

func (s *DetailUserResponse) SetReqMsgId(v string) *DetailUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DetailUserResponse) SetResultCode(v string) *DetailUserResponse {
	s.ResultCode = &v
	return s
}

func (s *DetailUserResponse) SetResultMsg(v string) *DetailUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *DetailUserResponse) SetAuthUrl(v string) *DetailUserResponse {
	s.AuthUrl = &v
	return s
}

func (s *DetailUserResponse) SetUser(v *MonitorUser) *DetailUserResponse {
	s.User = v
	return s
}

func (s *DetailUserResponse) SetNavHead(v *NavContent) *DetailUserResponse {
	s.NavHead = v
	return s
}

type AuthUserRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// login_name
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty" require:"true"`
}

func (s AuthUserRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthUserRequest) GoString() string {
	return s.String()
}

func (s *AuthUserRequest) SetAuthToken(v string) *AuthUserRequest {
	s.AuthToken = &v
	return s
}

func (s *AuthUserRequest) SetWorkspaceName(v string) *AuthUserRequest {
	s.WorkspaceName = &v
	return s
}

func (s *AuthUserRequest) SetLoginName(v string) *AuthUserRequest {
	s.LoginName = &v
	return s
}

type AuthUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// powers
	Powers []*LongListKeySet `json:"powers,omitempty" xml:"powers,omitempty" type:"Repeated"`
	// bd_powers
	BdPowers []*LongListKeySet `json:"bd_powers,omitempty" xml:"bd_powers,omitempty" type:"Repeated"`
	// w_powers
	WPowers []*LongListKeySet `json:"w_powers,omitempty" xml:"w_powers,omitempty" type:"Repeated"`
	// t_powers
	TPowers []*LongListKeySet `json:"t_powers,omitempty" xml:"t_powers,omitempty" type:"Repeated"`
	// super_admin
	SuperAdmin *bool `json:"super_admin,omitempty" xml:"super_admin,omitempty"`
	// super_view
	SuperView *bool `json:"super_view,omitempty" xml:"super_view,omitempty"`
	// biz_domains
	BizDomains []*BizDomain `json:"biz_domains,omitempty" xml:"biz_domains,omitempty" type:"Repeated"`
	// auth_url
	AuthUrl *string `json:"auth_url,omitempty" xml:"auth_url,omitempty"`
}

func (s AuthUserResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthUserResponse) GoString() string {
	return s.String()
}

func (s *AuthUserResponse) SetReqMsgId(v string) *AuthUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AuthUserResponse) SetResultCode(v string) *AuthUserResponse {
	s.ResultCode = &v
	return s
}

func (s *AuthUserResponse) SetResultMsg(v string) *AuthUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *AuthUserResponse) SetPowers(v []*LongListKeySet) *AuthUserResponse {
	s.Powers = v
	return s
}

func (s *AuthUserResponse) SetBdPowers(v []*LongListKeySet) *AuthUserResponse {
	s.BdPowers = v
	return s
}

func (s *AuthUserResponse) SetWPowers(v []*LongListKeySet) *AuthUserResponse {
	s.WPowers = v
	return s
}

func (s *AuthUserResponse) SetTPowers(v []*LongListKeySet) *AuthUserResponse {
	s.TPowers = v
	return s
}

func (s *AuthUserResponse) SetSuperAdmin(v bool) *AuthUserResponse {
	s.SuperAdmin = &v
	return s
}

func (s *AuthUserResponse) SetSuperView(v bool) *AuthUserResponse {
	s.SuperView = &v
	return s
}

func (s *AuthUserResponse) SetBizDomains(v []*BizDomain) *AuthUserResponse {
	s.BizDomains = v
	return s
}

func (s *AuthUserResponse) SetAuthUrl(v string) *AuthUserResponse {
	s.AuthUrl = &v
	return s
}

type QueryLogpathMetricsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 日志路径
	Fullpath *string `json:"fullpath,omitempty" xml:"fullpath,omitempty" require:"true"`
	// 工作空间名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 监控数据起始时间
	Start *int64 `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// 监控数据结束时间
	End *int64 `json:"end,omitempty" xml:"end,omitempty" require:"true"`
}

func (s QueryLogpathMetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLogpathMetricsRequest) GoString() string {
	return s.String()
}

func (s *QueryLogpathMetricsRequest) SetAuthToken(v string) *QueryLogpathMetricsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLogpathMetricsRequest) SetAppName(v string) *QueryLogpathMetricsRequest {
	s.AppName = &v
	return s
}

func (s *QueryLogpathMetricsRequest) SetFullpath(v string) *QueryLogpathMetricsRequest {
	s.Fullpath = &v
	return s
}

func (s *QueryLogpathMetricsRequest) SetWorkspaceName(v string) *QueryLogpathMetricsRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryLogpathMetricsRequest) SetStart(v int64) *QueryLogpathMetricsRequest {
	s.Start = &v
	return s
}

func (s *QueryLogpathMetricsRequest) SetEnd(v int64) *QueryLogpathMetricsRequest {
	s.End = &v
	return s
}

type QueryLogpathMetricsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回数据
	Results []*string `json:"results,omitempty" xml:"results,omitempty" type:"Repeated"`
}

func (s QueryLogpathMetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLogpathMetricsResponse) GoString() string {
	return s.String()
}

func (s *QueryLogpathMetricsResponse) SetReqMsgId(v string) *QueryLogpathMetricsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLogpathMetricsResponse) SetResultCode(v string) *QueryLogpathMetricsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLogpathMetricsResponse) SetResultMsg(v string) *QueryLogpathMetricsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLogpathMetricsResponse) SetResults(v []*string) *QueryLogpathMetricsResponse {
	s.Results = v
	return s
}

type QueryXmetricNameRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	//
	Data *XMetricQuery `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryXmetricNameRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetricNameRequest) GoString() string {
	return s.String()
}

func (s *QueryXmetricNameRequest) SetAuthToken(v string) *QueryXmetricNameRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryXmetricNameRequest) SetWorkspaceName(v string) *QueryXmetricNameRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryXmetricNameRequest) SetData(v *XMetricQuery) *QueryXmetricNameRequest {
	s.Data = v
	return s
}

type QueryXmetricNameResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data []*XMetricInfo `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryXmetricNameResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetricNameResponse) GoString() string {
	return s.String()
}

func (s *QueryXmetricNameResponse) SetReqMsgId(v string) *QueryXmetricNameResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryXmetricNameResponse) SetResultCode(v string) *QueryXmetricNameResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryXmetricNameResponse) SetResultMsg(v string) *QueryXmetricNameResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryXmetricNameResponse) SetData(v []*XMetricInfo) *QueryXmetricNameResponse {
	s.Data = v
	return s
}

type CreateAlarmwebhookRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作区名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// web hook 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// web hook http url
	Url *string `json:"url,omitempty" xml:"url,omitempty" require:"true"`
	// web hook http method
	HttpMethod *string `json:"http_method,omitempty" xml:"http_method,omitempty" require:"true"`
	// web hook http headers
	Headers []*KeySet `json:"headers,omitempty" xml:"headers,omitempty" type:"Repeated"`
	// web hook http params
	Params []*KeySet `json:"params,omitempty" xml:"params,omitempty" type:"Repeated"`
	// 配置项（timeOut，retryCount）
	Config []*KeySet `json:"config,omitempty" xml:"config,omitempty" type:"Repeated"`
	// body_template
	BodyTemplate *string `json:"body_template,omitempty" xml:"body_template,omitempty"`
	// scope_global
	ScopeGlobal *bool `json:"scope_global,omitempty" xml:"scope_global,omitempty" require:"true"`
	// 当前workspace有效，还是当前租户有效
	ValidScope *int64 `json:"valid_scope,omitempty" xml:"valid_scope,omitempty" require:"true"`
}

func (s CreateAlarmwebhookRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAlarmwebhookRequest) GoString() string {
	return s.String()
}

func (s *CreateAlarmwebhookRequest) SetAuthToken(v string) *CreateAlarmwebhookRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAlarmwebhookRequest) SetWorkspaceName(v string) *CreateAlarmwebhookRequest {
	s.WorkspaceName = &v
	return s
}

func (s *CreateAlarmwebhookRequest) SetName(v string) *CreateAlarmwebhookRequest {
	s.Name = &v
	return s
}

func (s *CreateAlarmwebhookRequest) SetUrl(v string) *CreateAlarmwebhookRequest {
	s.Url = &v
	return s
}

func (s *CreateAlarmwebhookRequest) SetHttpMethod(v string) *CreateAlarmwebhookRequest {
	s.HttpMethod = &v
	return s
}

func (s *CreateAlarmwebhookRequest) SetHeaders(v []*KeySet) *CreateAlarmwebhookRequest {
	s.Headers = v
	return s
}

func (s *CreateAlarmwebhookRequest) SetParams(v []*KeySet) *CreateAlarmwebhookRequest {
	s.Params = v
	return s
}

func (s *CreateAlarmwebhookRequest) SetConfig(v []*KeySet) *CreateAlarmwebhookRequest {
	s.Config = v
	return s
}

func (s *CreateAlarmwebhookRequest) SetBodyTemplate(v string) *CreateAlarmwebhookRequest {
	s.BodyTemplate = &v
	return s
}

func (s *CreateAlarmwebhookRequest) SetScopeGlobal(v bool) *CreateAlarmwebhookRequest {
	s.ScopeGlobal = &v
	return s
}

func (s *CreateAlarmwebhookRequest) SetValidScope(v int64) *CreateAlarmwebhookRequest {
	s.ValidScope = &v
	return s
}

type CreateAlarmwebhookResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateAlarmwebhookResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAlarmwebhookResponse) GoString() string {
	return s.String()
}

func (s *CreateAlarmwebhookResponse) SetReqMsgId(v string) *CreateAlarmwebhookResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAlarmwebhookResponse) SetResultCode(v string) *CreateAlarmwebhookResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAlarmwebhookResponse) SetResultMsg(v string) *CreateAlarmwebhookResponse {
	s.ResultMsg = &v
	return s
}

type CreateXdatasourceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	//
	Data *XDatasourceCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s CreateXdatasourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateXdatasourceRequest) GoString() string {
	return s.String()
}

func (s *CreateXdatasourceRequest) SetAuthToken(v string) *CreateXdatasourceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateXdatasourceRequest) SetWorkspaceName(v string) *CreateXdatasourceRequest {
	s.WorkspaceName = &v
	return s
}

func (s *CreateXdatasourceRequest) SetData(v *XDatasourceCRULResponseCURequest) *CreateXdatasourceRequest {
	s.Data = v
	return s
}

type CreateXdatasourceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data *XDatasourceCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateXdatasourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateXdatasourceResponse) GoString() string {
	return s.String()
}

func (s *CreateXdatasourceResponse) SetReqMsgId(v string) *CreateXdatasourceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateXdatasourceResponse) SetResultCode(v string) *CreateXdatasourceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateXdatasourceResponse) SetResultMsg(v string) *CreateXdatasourceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateXdatasourceResponse) SetData(v *XDatasourceCRULResponseCURequest) *CreateXdatasourceResponse {
	s.Data = v
	return s
}

type UpdateXdatasourceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	//
	Data *XDatasourceCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s UpdateXdatasourceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateXdatasourceRequest) GoString() string {
	return s.String()
}

func (s *UpdateXdatasourceRequest) SetAuthToken(v string) *UpdateXdatasourceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateXdatasourceRequest) SetWorkspaceName(v string) *UpdateXdatasourceRequest {
	s.WorkspaceName = &v
	return s
}

func (s *UpdateXdatasourceRequest) SetData(v *XDatasourceCRULResponseCURequest) *UpdateXdatasourceRequest {
	s.Data = v
	return s
}

type UpdateXdatasourceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data *XDatasourceCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty"`
}

func (s UpdateXdatasourceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateXdatasourceResponse) GoString() string {
	return s.String()
}

func (s *UpdateXdatasourceResponse) SetReqMsgId(v string) *UpdateXdatasourceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateXdatasourceResponse) SetResultCode(v string) *UpdateXdatasourceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateXdatasourceResponse) SetResultMsg(v string) *UpdateXdatasourceResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateXdatasourceResponse) SetData(v *XDatasourceCRULResponseCURequest) *UpdateXdatasourceResponse {
	s.Data = v
	return s
}

type GetXdatasourceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	//
	Data *XResource `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s GetXdatasourceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetXdatasourceRequest) GoString() string {
	return s.String()
}

func (s *GetXdatasourceRequest) SetAuthToken(v string) *GetXdatasourceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetXdatasourceRequest) SetWorkspaceName(v string) *GetXdatasourceRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetXdatasourceRequest) SetData(v *XResource) *GetXdatasourceRequest {
	s.Data = v
	return s
}

type GetXdatasourceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data *XDatasourceCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetXdatasourceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetXdatasourceResponse) GoString() string {
	return s.String()
}

func (s *GetXdatasourceResponse) SetReqMsgId(v string) *GetXdatasourceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetXdatasourceResponse) SetResultCode(v string) *GetXdatasourceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetXdatasourceResponse) SetResultMsg(v string) *GetXdatasourceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetXdatasourceResponse) SetData(v *XDatasourceCRULResponseCURequest) *GetXdatasourceResponse {
	s.Data = v
	return s
}

type DeleteXdatasourceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	//
	Data *XResource `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s DeleteXdatasourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteXdatasourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteXdatasourceRequest) SetAuthToken(v string) *DeleteXdatasourceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteXdatasourceRequest) SetWorkspaceName(v string) *DeleteXdatasourceRequest {
	s.WorkspaceName = &v
	return s
}

func (s *DeleteXdatasourceRequest) SetData(v *XResource) *DeleteXdatasourceRequest {
	s.Data = v
	return s
}

type DeleteXdatasourceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data []*XResource `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s DeleteXdatasourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteXdatasourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteXdatasourceResponse) SetReqMsgId(v string) *DeleteXdatasourceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteXdatasourceResponse) SetResultCode(v string) *DeleteXdatasourceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteXdatasourceResponse) SetResultMsg(v string) *DeleteXdatasourceResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteXdatasourceResponse) SetData(v []*XResource) *DeleteXdatasourceResponse {
	s.Data = v
	return s
}

type ListXdatasourceDirectoryRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	//
	Data *XResource `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s ListXdatasourceDirectoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListXdatasourceDirectoryRequest) GoString() string {
	return s.String()
}

func (s *ListXdatasourceDirectoryRequest) SetAuthToken(v string) *ListXdatasourceDirectoryRequest {
	s.AuthToken = &v
	return s
}

func (s *ListXdatasourceDirectoryRequest) SetWorkspaceName(v string) *ListXdatasourceDirectoryRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ListXdatasourceDirectoryRequest) SetData(v *XResource) *ListXdatasourceDirectoryRequest {
	s.Data = v
	return s
}

type ListXdatasourceDirectoryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data []*XDatasourceCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListXdatasourceDirectoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListXdatasourceDirectoryResponse) GoString() string {
	return s.String()
}

func (s *ListXdatasourceDirectoryResponse) SetReqMsgId(v string) *ListXdatasourceDirectoryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListXdatasourceDirectoryResponse) SetResultCode(v string) *ListXdatasourceDirectoryResponse {
	s.ResultCode = &v
	return s
}

func (s *ListXdatasourceDirectoryResponse) SetResultMsg(v string) *ListXdatasourceDirectoryResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListXdatasourceDirectoryResponse) SetData(v []*XDatasourceCRULResponseCURequest) *ListXdatasourceDirectoryResponse {
	s.Data = v
	return s
}

type UpdateAlarmwebhookRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// web hook http url
	Url *string `json:"url,omitempty" xml:"url,omitempty" require:"true"`
	// web hook http method
	HttpMethod *string `json:"http_method,omitempty" xml:"http_method,omitempty" require:"true"`
	// headers
	Headers []*KeySet `json:"headers,omitempty" xml:"headers,omitempty" type:"Repeated"`
	// params
	Params []*KeySet `json:"params,omitempty" xml:"params,omitempty" type:"Repeated"`
	// config
	Config []*KeySet `json:"config,omitempty" xml:"config,omitempty" type:"Repeated"`
	// body_template
	BodyTemplate *string `json:"body_template,omitempty" xml:"body_template,omitempty"`
	// scope_global
	ScopeGlobal *bool `json:"scope_global,omitempty" xml:"scope_global,omitempty" require:"true"`
}

func (s UpdateAlarmwebhookRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlarmwebhookRequest) GoString() string {
	return s.String()
}

func (s *UpdateAlarmwebhookRequest) SetAuthToken(v string) *UpdateAlarmwebhookRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateAlarmwebhookRequest) SetWorkspaceName(v string) *UpdateAlarmwebhookRequest {
	s.WorkspaceName = &v
	return s
}

func (s *UpdateAlarmwebhookRequest) SetId(v int64) *UpdateAlarmwebhookRequest {
	s.Id = &v
	return s
}

func (s *UpdateAlarmwebhookRequest) SetName(v string) *UpdateAlarmwebhookRequest {
	s.Name = &v
	return s
}

func (s *UpdateAlarmwebhookRequest) SetUrl(v string) *UpdateAlarmwebhookRequest {
	s.Url = &v
	return s
}

func (s *UpdateAlarmwebhookRequest) SetHttpMethod(v string) *UpdateAlarmwebhookRequest {
	s.HttpMethod = &v
	return s
}

func (s *UpdateAlarmwebhookRequest) SetHeaders(v []*KeySet) *UpdateAlarmwebhookRequest {
	s.Headers = v
	return s
}

func (s *UpdateAlarmwebhookRequest) SetParams(v []*KeySet) *UpdateAlarmwebhookRequest {
	s.Params = v
	return s
}

func (s *UpdateAlarmwebhookRequest) SetConfig(v []*KeySet) *UpdateAlarmwebhookRequest {
	s.Config = v
	return s
}

func (s *UpdateAlarmwebhookRequest) SetBodyTemplate(v string) *UpdateAlarmwebhookRequest {
	s.BodyTemplate = &v
	return s
}

func (s *UpdateAlarmwebhookRequest) SetScopeGlobal(v bool) *UpdateAlarmwebhookRequest {
	s.ScopeGlobal = &v
	return s
}

type UpdateAlarmwebhookResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateAlarmwebhookResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlarmwebhookResponse) GoString() string {
	return s.String()
}

func (s *UpdateAlarmwebhookResponse) SetReqMsgId(v string) *UpdateAlarmwebhookResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateAlarmwebhookResponse) SetResultCode(v string) *UpdateAlarmwebhookResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateAlarmwebhookResponse) SetResultMsg(v string) *UpdateAlarmwebhookResponse {
	s.ResultMsg = &v
	return s
}

type DeleteAlarmwebhookRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteAlarmwebhookRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlarmwebhookRequest) GoString() string {
	return s.String()
}

func (s *DeleteAlarmwebhookRequest) SetAuthToken(v string) *DeleteAlarmwebhookRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteAlarmwebhookRequest) SetWorkspaceName(v string) *DeleteAlarmwebhookRequest {
	s.WorkspaceName = &v
	return s
}

func (s *DeleteAlarmwebhookRequest) SetId(v int64) *DeleteAlarmwebhookRequest {
	s.Id = &v
	return s
}

type DeleteAlarmwebhookResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteAlarmwebhookResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlarmwebhookResponse) GoString() string {
	return s.String()
}

func (s *DeleteAlarmwebhookResponse) SetReqMsgId(v string) *DeleteAlarmwebhookResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteAlarmwebhookResponse) SetResultCode(v string) *DeleteAlarmwebhookResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteAlarmwebhookResponse) SetResultMsg(v string) *DeleteAlarmwebhookResponse {
	s.ResultMsg = &v
	return s
}

type QueryXdatasourceTableRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	//
	Data *XMetricQuery `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryXdatasourceTableRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryXdatasourceTableRequest) GoString() string {
	return s.String()
}

func (s *QueryXdatasourceTableRequest) SetAuthToken(v string) *QueryXdatasourceTableRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryXdatasourceTableRequest) SetWorkspaceName(v string) *QueryXdatasourceTableRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryXdatasourceTableRequest) SetData(v *XMetricQuery) *QueryXdatasourceTableRequest {
	s.Data = v
	return s
}

type QueryXdatasourceTableResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data *XMetricQuery `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryXdatasourceTableResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryXdatasourceTableResponse) GoString() string {
	return s.String()
}

func (s *QueryXdatasourceTableResponse) SetReqMsgId(v string) *QueryXdatasourceTableResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryXdatasourceTableResponse) SetResultCode(v string) *QueryXdatasourceTableResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryXdatasourceTableResponse) SetResultMsg(v string) *QueryXdatasourceTableResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryXdatasourceTableResponse) SetData(v *XMetricQuery) *QueryXdatasourceTableResponse {
	s.Data = v
	return s
}

type GetAlarmOverviewRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// end_time
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// alarm_type
	AlarmType *string `json:"alarm_type,omitempty" xml:"alarm_type,omitempty" require:"true"`
}

func (s GetAlarmOverviewRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAlarmOverviewRequest) GoString() string {
	return s.String()
}

func (s *GetAlarmOverviewRequest) SetAuthToken(v string) *GetAlarmOverviewRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAlarmOverviewRequest) SetWorkspaceName(v string) *GetAlarmOverviewRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetAlarmOverviewRequest) SetEndTime(v int64) *GetAlarmOverviewRequest {
	s.EndTime = &v
	return s
}

func (s *GetAlarmOverviewRequest) SetAlarmType(v string) *GetAlarmOverviewRequest {
	s.AlarmType = &v
	return s
}

type GetAlarmOverviewResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// AlarmOverviewDTO
	Data *AlarmOverviewDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetAlarmOverviewResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAlarmOverviewResponse) GoString() string {
	return s.String()
}

func (s *GetAlarmOverviewResponse) SetReqMsgId(v string) *GetAlarmOverviewResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAlarmOverviewResponse) SetResultCode(v string) *GetAlarmOverviewResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAlarmOverviewResponse) SetResultMsg(v string) *GetAlarmOverviewResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAlarmOverviewResponse) SetData(v *AlarmOverviewDTO) *GetAlarmOverviewResponse {
	s.Data = v
	return s
}

type QueryAppAlarmstatsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// end_time
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s QueryAppAlarmstatsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppAlarmstatsRequest) GoString() string {
	return s.String()
}

func (s *QueryAppAlarmstatsRequest) SetAuthToken(v string) *QueryAppAlarmstatsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppAlarmstatsRequest) SetEndTime(v int64) *QueryAppAlarmstatsRequest {
	s.EndTime = &v
	return s
}

func (s *QueryAppAlarmstatsRequest) SetWorkspaceName(v string) *QueryAppAlarmstatsRequest {
	s.WorkspaceName = &v
	return s
}

type QueryAppAlarmstatsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*AppAlarmStats `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryAppAlarmstatsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppAlarmstatsResponse) GoString() string {
	return s.String()
}

func (s *QueryAppAlarmstatsResponse) SetReqMsgId(v string) *QueryAppAlarmstatsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppAlarmstatsResponse) SetResultCode(v string) *QueryAppAlarmstatsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppAlarmstatsResponse) SetResultMsg(v string) *QueryAppAlarmstatsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppAlarmstatsResponse) SetData(v []*AppAlarmStats) *QueryAppAlarmstatsResponse {
	s.Data = v
	return s
}

type QueryAlarmhistoryAlarmtrendsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// alarm_type
	AlarmType *string `json:"alarm_type,omitempty" xml:"alarm_type,omitempty" require:"true"`
	// group_by
	GroupBy *string `json:"group_by,omitempty" xml:"group_by,omitempty" require:"true"`
	// from
	From *int64 `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// to
	To *int64 `json:"to,omitempty" xml:"to,omitempty" require:"true"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s QueryAlarmhistoryAlarmtrendsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmhistoryAlarmtrendsRequest) GoString() string {
	return s.String()
}

func (s *QueryAlarmhistoryAlarmtrendsRequest) SetAuthToken(v string) *QueryAlarmhistoryAlarmtrendsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAlarmhistoryAlarmtrendsRequest) SetAlarmType(v string) *QueryAlarmhistoryAlarmtrendsRequest {
	s.AlarmType = &v
	return s
}

func (s *QueryAlarmhistoryAlarmtrendsRequest) SetGroupBy(v string) *QueryAlarmhistoryAlarmtrendsRequest {
	s.GroupBy = &v
	return s
}

func (s *QueryAlarmhistoryAlarmtrendsRequest) SetFrom(v int64) *QueryAlarmhistoryAlarmtrendsRequest {
	s.From = &v
	return s
}

func (s *QueryAlarmhistoryAlarmtrendsRequest) SetTo(v int64) *QueryAlarmhistoryAlarmtrendsRequest {
	s.To = &v
	return s
}

func (s *QueryAlarmhistoryAlarmtrendsRequest) SetWorkspaceName(v string) *QueryAlarmhistoryAlarmtrendsRequest {
	s.WorkspaceName = &v
	return s
}

type QueryAlarmhistoryAlarmtrendsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *AlarmHistoryStatsVO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryAlarmhistoryAlarmtrendsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmhistoryAlarmtrendsResponse) GoString() string {
	return s.String()
}

func (s *QueryAlarmhistoryAlarmtrendsResponse) SetReqMsgId(v string) *QueryAlarmhistoryAlarmtrendsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAlarmhistoryAlarmtrendsResponse) SetResultCode(v string) *QueryAlarmhistoryAlarmtrendsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAlarmhistoryAlarmtrendsResponse) SetResultMsg(v string) *QueryAlarmhistoryAlarmtrendsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAlarmhistoryAlarmtrendsResponse) SetData(v *AlarmHistoryStatsVO) *QueryAlarmhistoryAlarmtrendsResponse {
	s.Data = v
	return s
}

type GetWorkspaceConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s GetWorkspaceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceConfigRequest) GoString() string {
	return s.String()
}

func (s *GetWorkspaceConfigRequest) SetAuthToken(v string) *GetWorkspaceConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *GetWorkspaceConfigRequest) SetWorkspaceName(v string) *GetWorkspaceConfigRequest {
	s.WorkspaceName = &v
	return s
}

type GetWorkspaceConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否拥有kubeconfig
	HasKubeconfig *bool `json:"has_kubeconfig,omitempty" xml:"has_kubeconfig,omitempty"`
}

func (s GetWorkspaceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceConfigResponse) GoString() string {
	return s.String()
}

func (s *GetWorkspaceConfigResponse) SetReqMsgId(v string) *GetWorkspaceConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetWorkspaceConfigResponse) SetResultCode(v string) *GetWorkspaceConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *GetWorkspaceConfigResponse) SetResultMsg(v string) *GetWorkspaceConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetWorkspaceConfigResponse) SetHasKubeconfig(v bool) *GetWorkspaceConfigResponse {
	s.HasKubeconfig = &v
	return s
}

type SetAgentVersionstrategyRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 0 容器，1经典
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// TENANT、WORKSPACE
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty" require:"true"`
	// agent 地址，容器为镜像地址，经典为 OSS 地址
	AgentUrl *string `json:"agent_url,omitempty" xml:"agent_url,omitempty" require:"true"`
	// 版本号
	AgentVersion *string `json:"agent_version,omitempty" xml:"agent_version,omitempty" require:"true"`
}

func (s SetAgentVersionstrategyRequest) String() string {
	return tea.Prettify(s)
}

func (s SetAgentVersionstrategyRequest) GoString() string {
	return s.String()
}

func (s *SetAgentVersionstrategyRequest) SetAuthToken(v string) *SetAgentVersionstrategyRequest {
	s.AuthToken = &v
	return s
}

func (s *SetAgentVersionstrategyRequest) SetWorkspaceName(v string) *SetAgentVersionstrategyRequest {
	s.WorkspaceName = &v
	return s
}

func (s *SetAgentVersionstrategyRequest) SetType(v int64) *SetAgentVersionstrategyRequest {
	s.Type = &v
	return s
}

func (s *SetAgentVersionstrategyRequest) SetScope(v string) *SetAgentVersionstrategyRequest {
	s.Scope = &v
	return s
}

func (s *SetAgentVersionstrategyRequest) SetAgentUrl(v string) *SetAgentVersionstrategyRequest {
	s.AgentUrl = &v
	return s
}

func (s *SetAgentVersionstrategyRequest) SetAgentVersion(v string) *SetAgentVersionstrategyRequest {
	s.AgentVersion = &v
	return s
}

type SetAgentVersionstrategyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetAgentVersionstrategyResponse) String() string {
	return tea.Prettify(s)
}

func (s SetAgentVersionstrategyResponse) GoString() string {
	return s.String()
}

func (s *SetAgentVersionstrategyResponse) SetReqMsgId(v string) *SetAgentVersionstrategyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetAgentVersionstrategyResponse) SetResultCode(v string) *SetAgentVersionstrategyResponse {
	s.ResultCode = &v
	return s
}

func (s *SetAgentVersionstrategyResponse) SetResultMsg(v string) *SetAgentVersionstrategyResponse {
	s.ResultMsg = &v
	return s
}

type GetAgentVersionstrategyRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 0 容器，1经典
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s GetAgentVersionstrategyRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAgentVersionstrategyRequest) GoString() string {
	return s.String()
}

func (s *GetAgentVersionstrategyRequest) SetAuthToken(v string) *GetAgentVersionstrategyRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAgentVersionstrategyRequest) SetWorkspaceName(v string) *GetAgentVersionstrategyRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetAgentVersionstrategyRequest) SetType(v int64) *GetAgentVersionstrategyRequest {
	s.Type = &v
	return s
}

type GetAgentVersionstrategyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// agent 版本策略
	AgentVersionStrategy *AgentVersionStrategy `json:"agent_version_strategy,omitempty" xml:"agent_version_strategy,omitempty"`
}

func (s GetAgentVersionstrategyResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAgentVersionstrategyResponse) GoString() string {
	return s.String()
}

func (s *GetAgentVersionstrategyResponse) SetReqMsgId(v string) *GetAgentVersionstrategyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAgentVersionstrategyResponse) SetResultCode(v string) *GetAgentVersionstrategyResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAgentVersionstrategyResponse) SetResultMsg(v string) *GetAgentVersionstrategyResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAgentVersionstrategyResponse) SetAgentVersionStrategy(v *AgentVersionStrategy) *GetAgentVersionstrategyResponse {
	s.AgentVersionStrategy = v
	return s
}

type GetSystemTimeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s GetSystemTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSystemTimeRequest) GoString() string {
	return s.String()
}

func (s *GetSystemTimeRequest) SetAuthToken(v string) *GetSystemTimeRequest {
	s.AuthToken = &v
	return s
}

type GetSystemTimeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 服务器系统时间
	Time *int64 `json:"time,omitempty" xml:"time,omitempty"`
}

func (s GetSystemTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSystemTimeResponse) GoString() string {
	return s.String()
}

func (s *GetSystemTimeResponse) SetReqMsgId(v string) *GetSystemTimeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSystemTimeResponse) SetResultCode(v string) *GetSystemTimeResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSystemTimeResponse) SetResultMsg(v string) *GetSystemTimeResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSystemTimeResponse) SetTime(v int64) *GetSystemTimeResponse {
	s.Time = &v
	return s
}

type ExecXdatasourceMoveRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	//
	Data []*XResource `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ExecXdatasourceMoveRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecXdatasourceMoveRequest) GoString() string {
	return s.String()
}

func (s *ExecXdatasourceMoveRequest) SetAuthToken(v string) *ExecXdatasourceMoveRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecXdatasourceMoveRequest) SetWorkspaceName(v string) *ExecXdatasourceMoveRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ExecXdatasourceMoveRequest) SetData(v []*XResource) *ExecXdatasourceMoveRequest {
	s.Data = v
	return s
}

type ExecXdatasourceMoveResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data []*XResource `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ExecXdatasourceMoveResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecXdatasourceMoveResponse) GoString() string {
	return s.String()
}

func (s *ExecXdatasourceMoveResponse) SetReqMsgId(v string) *ExecXdatasourceMoveResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecXdatasourceMoveResponse) SetResultCode(v string) *ExecXdatasourceMoveResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecXdatasourceMoveResponse) SetResultMsg(v string) *ExecXdatasourceMoveResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecXdatasourceMoveResponse) SetData(v []*XResource) *ExecXdatasourceMoveResponse {
	s.Data = v
	return s
}

type QueryXmetadataTagRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	//
	Data *XTarget `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryXmetadataTagRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetadataTagRequest) GoString() string {
	return s.String()
}

func (s *QueryXmetadataTagRequest) SetAuthToken(v string) *QueryXmetadataTagRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryXmetadataTagRequest) SetWorkspaceName(v string) *QueryXmetadataTagRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryXmetadataTagRequest) SetData(v *XTarget) *QueryXmetadataTagRequest {
	s.Data = v
	return s
}

type QueryXmetadataTagResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data *XRule `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryXmetadataTagResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetadataTagResponse) GoString() string {
	return s.String()
}

func (s *QueryXmetadataTagResponse) SetReqMsgId(v string) *QueryXmetadataTagResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryXmetadataTagResponse) SetResultCode(v string) *QueryXmetadataTagResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryXmetadataTagResponse) SetResultMsg(v string) *QueryXmetadataTagResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryXmetadataTagResponse) SetData(v *XRule) *QueryXmetadataTagResponse {
	s.Data = v
	return s
}

type QueryXdatasourceSearchRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	//
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	//
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	//
	TargetResourceKind *string `json:"target_resource_kind,omitempty" xml:"target_resource_kind,omitempty"`
	//
	TargetResourceName *string `json:"target_resource_name,omitempty" xml:"target_resource_name,omitempty"`
	//
	RuleType *string `json:"rule_type,omitempty" xml:"rule_type,omitempty"`
	//
	CreatedBy *string `json:"created_by,omitempty" xml:"created_by,omitempty"`
	//
	ParentUuid *string `json:"parent_uuid,omitempty" xml:"parent_uuid,omitempty"`
	//
	DatasourceType *string `json:"datasource_type,omitempty" xml:"datasource_type,omitempty"`
}

func (s QueryXdatasourceSearchRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryXdatasourceSearchRequest) GoString() string {
	return s.String()
}

func (s *QueryXdatasourceSearchRequest) SetAuthToken(v string) *QueryXdatasourceSearchRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryXdatasourceSearchRequest) SetWorkspaceName(v string) *QueryXdatasourceSearchRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryXdatasourceSearchRequest) SetName(v string) *QueryXdatasourceSearchRequest {
	s.Name = &v
	return s
}

func (s *QueryXdatasourceSearchRequest) SetEnabled(v bool) *QueryXdatasourceSearchRequest {
	s.Enabled = &v
	return s
}

func (s *QueryXdatasourceSearchRequest) SetTargetResourceKind(v string) *QueryXdatasourceSearchRequest {
	s.TargetResourceKind = &v
	return s
}

func (s *QueryXdatasourceSearchRequest) SetTargetResourceName(v string) *QueryXdatasourceSearchRequest {
	s.TargetResourceName = &v
	return s
}

func (s *QueryXdatasourceSearchRequest) SetRuleType(v string) *QueryXdatasourceSearchRequest {
	s.RuleType = &v
	return s
}

func (s *QueryXdatasourceSearchRequest) SetCreatedBy(v string) *QueryXdatasourceSearchRequest {
	s.CreatedBy = &v
	return s
}

func (s *QueryXdatasourceSearchRequest) SetParentUuid(v string) *QueryXdatasourceSearchRequest {
	s.ParentUuid = &v
	return s
}

func (s *QueryXdatasourceSearchRequest) SetDatasourceType(v string) *QueryXdatasourceSearchRequest {
	s.DatasourceType = &v
	return s
}

type QueryXdatasourceSearchResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data []*XDatasourceCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryXdatasourceSearchResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryXdatasourceSearchResponse) GoString() string {
	return s.String()
}

func (s *QueryXdatasourceSearchResponse) SetReqMsgId(v string) *QueryXdatasourceSearchResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryXdatasourceSearchResponse) SetResultCode(v string) *QueryXdatasourceSearchResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryXdatasourceSearchResponse) SetResultMsg(v string) *QueryXdatasourceSearchResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryXdatasourceSearchResponse) SetData(v []*XDatasourceCRULResponseCURequest) *QueryXdatasourceSearchResponse {
	s.Data = v
	return s
}

type QuerySetupConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	//
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
}

func (s QuerySetupConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySetupConfigRequest) GoString() string {
	return s.String()
}

func (s *QuerySetupConfigRequest) SetAuthToken(v string) *QuerySetupConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySetupConfigRequest) SetWorkspaceName(v string) *QuerySetupConfigRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QuerySetupConfigRequest) SetKey(v string) *QuerySetupConfigRequest {
	s.Key = &v
	return s
}

type QuerySetupConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// key jsonString
	Data *XKeyJson `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySetupConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySetupConfigResponse) GoString() string {
	return s.String()
}

func (s *QuerySetupConfigResponse) SetReqMsgId(v string) *QuerySetupConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySetupConfigResponse) SetResultCode(v string) *QuerySetupConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySetupConfigResponse) SetResultMsg(v string) *QuerySetupConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySetupConfigResponse) SetData(v *XKeyJson) *QuerySetupConfigResponse {
	s.Data = v
	return s
}

type UpdateSetupConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	//
	Data *XKeyJson `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s UpdateSetupConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSetupConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateSetupConfigRequest) SetAuthToken(v string) *UpdateSetupConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSetupConfigRequest) SetWorkspaceName(v string) *UpdateSetupConfigRequest {
	s.WorkspaceName = &v
	return s
}

func (s *UpdateSetupConfigRequest) SetData(v *XKeyJson) *UpdateSetupConfigRequest {
	s.Data = v
	return s
}

type UpdateSetupConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data *XKeyJson `json:"data,omitempty" xml:"data,omitempty"`
}

func (s UpdateSetupConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSetupConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateSetupConfigResponse) SetReqMsgId(v string) *UpdateSetupConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSetupConfigResponse) SetResultCode(v string) *UpdateSetupConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSetupConfigResponse) SetResultMsg(v string) *UpdateSetupConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateSetupConfigResponse) SetData(v *XKeyJson) *UpdateSetupConfigResponse {
	s.Data = v
	return s
}

type DeleteSetupConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	//
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
}

func (s DeleteSetupConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSetupConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteSetupConfigRequest) SetAuthToken(v string) *DeleteSetupConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSetupConfigRequest) SetWorkspaceName(v string) *DeleteSetupConfigRequest {
	s.WorkspaceName = &v
	return s
}

func (s *DeleteSetupConfigRequest) SetKey(v string) *DeleteSetupConfigRequest {
	s.Key = &v
	return s
}

type DeleteSetupConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data *XKeyJson `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteSetupConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSetupConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteSetupConfigResponse) SetReqMsgId(v string) *DeleteSetupConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSetupConfigResponse) SetResultCode(v string) *DeleteSetupConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSetupConfigResponse) SetResultMsg(v string) *DeleteSetupConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteSetupConfigResponse) SetData(v *XKeyJson) *DeleteSetupConfigResponse {
	s.Data = v
	return s
}

type UpdateWorkspaceSettingRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// workspace_setting_detail
	WorkspaceSettingDetail *WorkspaceSettingDetail `json:"workspace_setting_detail,omitempty" xml:"workspace_setting_detail,omitempty" require:"true"`
}

func (s UpdateWorkspaceSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceSettingRequest) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceSettingRequest) SetAuthToken(v string) *UpdateWorkspaceSettingRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateWorkspaceSettingRequest) SetWorkspaceName(v string) *UpdateWorkspaceSettingRequest {
	s.WorkspaceName = &v
	return s
}

func (s *UpdateWorkspaceSettingRequest) SetWorkspaceSettingDetail(v *WorkspaceSettingDetail) *UpdateWorkspaceSettingRequest {
	s.WorkspaceSettingDetail = v
	return s
}

type UpdateWorkspaceSettingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateWorkspaceSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceSettingResponse) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceSettingResponse) SetReqMsgId(v string) *UpdateWorkspaceSettingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateWorkspaceSettingResponse) SetResultCode(v string) *UpdateWorkspaceSettingResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateWorkspaceSettingResponse) SetResultMsg(v string) *UpdateWorkspaceSettingResponse {
	s.ResultMsg = &v
	return s
}

type ExportXsiteConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	//
	Data *XSiteExport `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s ExportXsiteConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportXsiteConfigRequest) GoString() string {
	return s.String()
}

func (s *ExportXsiteConfigRequest) SetAuthToken(v string) *ExportXsiteConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *ExportXsiteConfigRequest) SetWorkspaceName(v string) *ExportXsiteConfigRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ExportXsiteConfigRequest) SetData(v *XSiteExport) *ExportXsiteConfigRequest {
	s.Data = v
	return s
}

type ExportXsiteConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data *XSiteExportData `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ExportXsiteConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportXsiteConfigResponse) GoString() string {
	return s.String()
}

func (s *ExportXsiteConfigResponse) SetReqMsgId(v string) *ExportXsiteConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExportXsiteConfigResponse) SetResultCode(v string) *ExportXsiteConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *ExportXsiteConfigResponse) SetResultMsg(v string) *ExportXsiteConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExportXsiteConfigResponse) SetData(v *XSiteExportData) *ExportXsiteConfigResponse {
	s.Data = v
	return s
}

type ImportXsiteConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	//
	Data *XSiteExportData `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// 替换前的字符串
	Origin *string `json:"origin,omitempty" xml:"origin,omitempty"`
	// 替换后的字符串
	Replaced *string `json:"replaced,omitempty" xml:"replaced,omitempty"`
}

func (s ImportXsiteConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportXsiteConfigRequest) GoString() string {
	return s.String()
}

func (s *ImportXsiteConfigRequest) SetAuthToken(v string) *ImportXsiteConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportXsiteConfigRequest) SetWorkspaceName(v string) *ImportXsiteConfigRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ImportXsiteConfigRequest) SetData(v *XSiteExportData) *ImportXsiteConfigRequest {
	s.Data = v
	return s
}

func (s *ImportXsiteConfigRequest) SetOrigin(v string) *ImportXsiteConfigRequest {
	s.Origin = &v
	return s
}

func (s *ImportXsiteConfigRequest) SetReplaced(v string) *ImportXsiteConfigRequest {
	s.Replaced = &v
	return s
}

type ImportXsiteConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data []*XResource `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ImportXsiteConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportXsiteConfigResponse) GoString() string {
	return s.String()
}

func (s *ImportXsiteConfigResponse) SetReqMsgId(v string) *ImportXsiteConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportXsiteConfigResponse) SetResultCode(v string) *ImportXsiteConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportXsiteConfigResponse) SetResultMsg(v string) *ImportXsiteConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *ImportXsiteConfigResponse) SetData(v []*XResource) *ImportXsiteConfigResponse {
	s.Data = v
	return s
}

type QueryXdatasourceTreeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	//
	Data *XDatasourceQuery `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryXdatasourceTreeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryXdatasourceTreeRequest) GoString() string {
	return s.String()
}

func (s *QueryXdatasourceTreeRequest) SetAuthToken(v string) *QueryXdatasourceTreeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryXdatasourceTreeRequest) SetWorkspaceName(v string) *QueryXdatasourceTreeRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryXdatasourceTreeRequest) SetData(v *XDatasourceQuery) *QueryXdatasourceTreeRequest {
	s.Data = v
	return s
}

type QueryXdatasourceTreeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data []*XDatasourceCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryXdatasourceTreeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryXdatasourceTreeResponse) GoString() string {
	return s.String()
}

func (s *QueryXdatasourceTreeResponse) SetReqMsgId(v string) *QueryXdatasourceTreeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryXdatasourceTreeResponse) SetResultCode(v string) *QueryXdatasourceTreeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryXdatasourceTreeResponse) SetResultMsg(v string) *QueryXdatasourceTreeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryXdatasourceTreeResponse) SetData(v []*XDatasourceCRULResponseCURequest) *QueryXdatasourceTreeResponse {
	s.Data = v
	return s
}

type QueryXdashboardTreeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	//
	Data *XDashboardQuery `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryXdashboardTreeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryXdashboardTreeRequest) GoString() string {
	return s.String()
}

func (s *QueryXdashboardTreeRequest) SetAuthToken(v string) *QueryXdashboardTreeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryXdashboardTreeRequest) SetWorkspaceName(v string) *QueryXdashboardTreeRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryXdashboardTreeRequest) SetData(v *XDashboardQuery) *QueryXdashboardTreeRequest {
	s.Data = v
	return s
}

type QueryXdashboardTreeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data []*XDashboardCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryXdashboardTreeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryXdashboardTreeResponse) GoString() string {
	return s.String()
}

func (s *QueryXdashboardTreeResponse) SetReqMsgId(v string) *QueryXdashboardTreeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryXdashboardTreeResponse) SetResultCode(v string) *QueryXdashboardTreeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryXdashboardTreeResponse) SetResultMsg(v string) *QueryXdashboardTreeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryXdashboardTreeResponse) SetData(v []*XDashboardCRULResponseCURequest) *QueryXdashboardTreeResponse {
	s.Data = v
	return s
}

type GetXdashboardRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	//
	Data *XResource `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s GetXdashboardRequest) String() string {
	return tea.Prettify(s)
}

func (s GetXdashboardRequest) GoString() string {
	return s.String()
}

func (s *GetXdashboardRequest) SetAuthToken(v string) *GetXdashboardRequest {
	s.AuthToken = &v
	return s
}

func (s *GetXdashboardRequest) SetWorkspaceName(v string) *GetXdashboardRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetXdashboardRequest) SetData(v *XResource) *GetXdashboardRequest {
	s.Data = v
	return s
}

type GetXdashboardResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data *XDashboardCRULResponseCURequest `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetXdashboardResponse) String() string {
	return tea.Prettify(s)
}

func (s GetXdashboardResponse) GoString() string {
	return s.String()
}

func (s *GetXdashboardResponse) SetReqMsgId(v string) *GetXdashboardResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetXdashboardResponse) SetResultCode(v string) *GetXdashboardResponse {
	s.ResultCode = &v
	return s
}

func (s *GetXdashboardResponse) SetResultMsg(v string) *GetXdashboardResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetXdashboardResponse) SetData(v *XDashboardCRULResponseCURequest) *GetXdashboardResponse {
	s.Data = v
	return s
}

type QueryXdatasourcePrometheusRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	//
	Data *XPrometheusQuery `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryXdatasourcePrometheusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryXdatasourcePrometheusRequest) GoString() string {
	return s.String()
}

func (s *QueryXdatasourcePrometheusRequest) SetAuthToken(v string) *QueryXdatasourcePrometheusRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryXdatasourcePrometheusRequest) SetWorkspaceName(v string) *QueryXdatasourcePrometheusRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryXdatasourcePrometheusRequest) SetData(v *XPrometheusQuery) *QueryXdatasourcePrometheusRequest {
	s.Data = v
	return s
}

type QueryXdatasourcePrometheusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data *XPrometheusData `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryXdatasourcePrometheusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryXdatasourcePrometheusResponse) GoString() string {
	return s.String()
}

func (s *QueryXdatasourcePrometheusResponse) SetReqMsgId(v string) *QueryXdatasourcePrometheusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryXdatasourcePrometheusResponse) SetResultCode(v string) *QueryXdatasourcePrometheusResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryXdatasourcePrometheusResponse) SetResultMsg(v string) *QueryXdatasourcePrometheusResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryXdatasourcePrometheusResponse) SetData(v *XPrometheusData) *QueryXdatasourcePrometheusResponse {
	s.Data = v
	return s
}

type GetNodeOverviewRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 查询开始时间，unix timestamp in ms
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty"`
	//
	// 查询截止时间，unix timestamp in ms
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
}

func (s GetNodeOverviewRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodeOverviewRequest) GoString() string {
	return s.String()
}

func (s *GetNodeOverviewRequest) SetAuthToken(v string) *GetNodeOverviewRequest {
	s.AuthToken = &v
	return s
}

func (s *GetNodeOverviewRequest) SetWorkspaceName(v string) *GetNodeOverviewRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetNodeOverviewRequest) SetStartTime(v int64) *GetNodeOverviewRequest {
	s.StartTime = &v
	return s
}

func (s *GetNodeOverviewRequest) SetEndTime(v int64) *GetNodeOverviewRequest {
	s.EndTime = &v
	return s
}

type GetNodeOverviewResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果
	Data *NodeOverviewDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetNodeOverviewResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNodeOverviewResponse) GoString() string {
	return s.String()
}

func (s *GetNodeOverviewResponse) SetReqMsgId(v string) *GetNodeOverviewResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetNodeOverviewResponse) SetResultCode(v string) *GetNodeOverviewResponse {
	s.ResultCode = &v
	return s
}

func (s *GetNodeOverviewResponse) SetResultMsg(v string) *GetNodeOverviewResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetNodeOverviewResponse) SetData(v *NodeOverviewDTO) *GetNodeOverviewResponse {
	s.Data = v
	return s
}

type GetConfigOverviewRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s GetConfigOverviewRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConfigOverviewRequest) GoString() string {
	return s.String()
}

func (s *GetConfigOverviewRequest) SetAuthToken(v string) *GetConfigOverviewRequest {
	s.AuthToken = &v
	return s
}

func (s *GetConfigOverviewRequest) SetWorkspaceName(v string) *GetConfigOverviewRequest {
	s.WorkspaceName = &v
	return s
}

type GetConfigOverviewResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 总览页配置统计信息
	Data *ConfigOverviewDto `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetConfigOverviewResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConfigOverviewResponse) GoString() string {
	return s.String()
}

func (s *GetConfigOverviewResponse) SetReqMsgId(v string) *GetConfigOverviewResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetConfigOverviewResponse) SetResultCode(v string) *GetConfigOverviewResponse {
	s.ResultCode = &v
	return s
}

func (s *GetConfigOverviewResponse) SetResultMsg(v string) *GetConfigOverviewResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetConfigOverviewResponse) SetData(v *ConfigOverviewDto) *GetConfigOverviewResponse {
	s.Data = v
	return s
}

type GetWorkspaceSettingRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s GetWorkspaceSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceSettingRequest) GoString() string {
	return s.String()
}

func (s *GetWorkspaceSettingRequest) SetAuthToken(v string) *GetWorkspaceSettingRequest {
	s.AuthToken = &v
	return s
}

func (s *GetWorkspaceSettingRequest) SetWorkspaceName(v string) *GetWorkspaceSettingRequest {
	s.WorkspaceName = &v
	return s
}

type GetWorkspaceSettingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 工作空间配置
	WorkspaceSettingDetail *WorkspaceSettingDetail `json:"workspace_setting_detail,omitempty" xml:"workspace_setting_detail,omitempty"`
}

func (s GetWorkspaceSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceSettingResponse) GoString() string {
	return s.String()
}

func (s *GetWorkspaceSettingResponse) SetReqMsgId(v string) *GetWorkspaceSettingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetWorkspaceSettingResponse) SetResultCode(v string) *GetWorkspaceSettingResponse {
	s.ResultCode = &v
	return s
}

func (s *GetWorkspaceSettingResponse) SetResultMsg(v string) *GetWorkspaceSettingResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetWorkspaceSettingResponse) SetWorkspaceSettingDetail(v *WorkspaceSettingDetail) *GetWorkspaceSettingResponse {
	s.WorkspaceSettingDetail = v
	return s
}

type ListTraceWorkspacesettingRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间，用来鉴权
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s ListTraceWorkspacesettingRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTraceWorkspacesettingRequest) GoString() string {
	return s.String()
}

func (s *ListTraceWorkspacesettingRequest) SetAuthToken(v string) *ListTraceWorkspacesettingRequest {
	s.AuthToken = &v
	return s
}

func (s *ListTraceWorkspacesettingRequest) SetWorkspaceName(v string) *ListTraceWorkspacesettingRequest {
	s.WorkspaceName = &v
	return s
}

type ListTraceWorkspacesettingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 工作空间配置
	TraceWorkspaceSettings []*TraceWorkspaceSetting `json:"trace_workspace_settings,omitempty" xml:"trace_workspace_settings,omitempty" type:"Repeated"`
}

func (s ListTraceWorkspacesettingResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTraceWorkspacesettingResponse) GoString() string {
	return s.String()
}

func (s *ListTraceWorkspacesettingResponse) SetReqMsgId(v string) *ListTraceWorkspacesettingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListTraceWorkspacesettingResponse) SetResultCode(v string) *ListTraceWorkspacesettingResponse {
	s.ResultCode = &v
	return s
}

func (s *ListTraceWorkspacesettingResponse) SetResultMsg(v string) *ListTraceWorkspacesettingResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListTraceWorkspacesettingResponse) SetTraceWorkspaceSettings(v []*TraceWorkspaceSetting) *ListTraceWorkspacesettingResponse {
	s.TraceWorkspaceSettings = v
	return s
}

type UpdateTraceWorkspacesettingRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间配置
	TraceWorkspaceSettings []*TraceWorkspaceSetting `json:"trace_workspace_settings,omitempty" xml:"trace_workspace_settings,omitempty" require:"true" type:"Repeated"`
	// 工作空间，用来鉴权
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s UpdateTraceWorkspacesettingRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraceWorkspacesettingRequest) GoString() string {
	return s.String()
}

func (s *UpdateTraceWorkspacesettingRequest) SetAuthToken(v string) *UpdateTraceWorkspacesettingRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateTraceWorkspacesettingRequest) SetTraceWorkspaceSettings(v []*TraceWorkspaceSetting) *UpdateTraceWorkspacesettingRequest {
	s.TraceWorkspaceSettings = v
	return s
}

func (s *UpdateTraceWorkspacesettingRequest) SetWorkspaceName(v string) *UpdateTraceWorkspacesettingRequest {
	s.WorkspaceName = &v
	return s
}

type UpdateTraceWorkspacesettingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateTraceWorkspacesettingResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraceWorkspacesettingResponse) GoString() string {
	return s.String()
}

func (s *UpdateTraceWorkspacesettingResponse) SetReqMsgId(v string) *UpdateTraceWorkspacesettingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateTraceWorkspacesettingResponse) SetResultCode(v string) *UpdateTraceWorkspacesettingResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateTraceWorkspacesettingResponse) SetResultMsg(v string) *UpdateTraceWorkspacesettingResponse {
	s.ResultMsg = &v
	return s
}

type ListAppSettingRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s ListAppSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppSettingRequest) GoString() string {
	return s.String()
}

func (s *ListAppSettingRequest) SetAuthToken(v string) *ListAppSettingRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppSettingRequest) SetWorkspaceName(v string) *ListAppSettingRequest {
	s.WorkspaceName = &v
	return s
}

type ListAppSettingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// APP配置列表
	AppSettings []*AppSetting `json:"app_settings,omitempty" xml:"app_settings,omitempty" type:"Repeated"`
}

func (s ListAppSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppSettingResponse) GoString() string {
	return s.String()
}

func (s *ListAppSettingResponse) SetReqMsgId(v string) *ListAppSettingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppSettingResponse) SetResultCode(v string) *ListAppSettingResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppSettingResponse) SetResultMsg(v string) *ListAppSettingResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppSettingResponse) SetAppSettings(v []*AppSetting) *ListAppSettingResponse {
	s.AppSettings = v
	return s
}

type UpdateAppSettingRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 是否开启应用监控采集
	CollectEnable *bool `json:"collect_enable,omitempty" xml:"collect_enable,omitempty" require:"true"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 配置信息
	Setting *string `json:"setting,omitempty" xml:"setting,omitempty"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
}

func (s UpdateAppSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppSettingRequest) GoString() string {
	return s.String()
}

func (s *UpdateAppSettingRequest) SetAuthToken(v string) *UpdateAppSettingRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateAppSettingRequest) SetCollectEnable(v bool) *UpdateAppSettingRequest {
	s.CollectEnable = &v
	return s
}

func (s *UpdateAppSettingRequest) SetWorkspaceName(v string) *UpdateAppSettingRequest {
	s.WorkspaceName = &v
	return s
}

func (s *UpdateAppSettingRequest) SetSetting(v string) *UpdateAppSettingRequest {
	s.Setting = &v
	return s
}

func (s *UpdateAppSettingRequest) SetAppName(v string) *UpdateAppSettingRequest {
	s.AppName = &v
	return s
}

type UpdateAppSettingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateAppSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppSettingResponse) GoString() string {
	return s.String()
}

func (s *UpdateAppSettingResponse) SetReqMsgId(v string) *UpdateAppSettingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateAppSettingResponse) SetResultCode(v string) *UpdateAppSettingResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateAppSettingResponse) SetResultMsg(v string) *UpdateAppSettingResponse {
	s.ResultMsg = &v
	return s
}

type GetAppSettingRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
}

func (s GetAppSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppSettingRequest) GoString() string {
	return s.String()
}

func (s *GetAppSettingRequest) SetAuthToken(v string) *GetAppSettingRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAppSettingRequest) SetWorkspaceName(v string) *GetAppSettingRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetAppSettingRequest) SetAppName(v string) *GetAppSettingRequest {
	s.AppName = &v
	return s
}

type GetAppSettingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// APP配置
	AppSetting *AppSetting `json:"app_setting,omitempty" xml:"app_setting,omitempty"`
}

func (s GetAppSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppSettingResponse) GoString() string {
	return s.String()
}

func (s *GetAppSettingResponse) SetReqMsgId(v string) *GetAppSettingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppSettingResponse) SetResultCode(v string) *GetAppSettingResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppSettingResponse) SetResultMsg(v string) *GetAppSettingResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppSettingResponse) SetAppSetting(v *AppSetting) *GetAppSettingResponse {
	s.AppSetting = v
	return s
}

type QueryUnifiedalarmEventdetailRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作区名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// event id
	EventId *string `json:"event_id,omitempty" xml:"event_id,omitempty" require:"true"`
	// 告警规则 ID
	AlarmRuleId *int64 `json:"alarm_rule_id,omitempty" xml:"alarm_rule_id,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 按page_size做记录切分。
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryUnifiedalarmEventdetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmEventdetailRequest) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmEventdetailRequest) SetAuthToken(v string) *QueryUnifiedalarmEventdetailRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnifiedalarmEventdetailRequest) SetWorkspaceName(v string) *QueryUnifiedalarmEventdetailRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryUnifiedalarmEventdetailRequest) SetEventId(v string) *QueryUnifiedalarmEventdetailRequest {
	s.EventId = &v
	return s
}

func (s *QueryUnifiedalarmEventdetailRequest) SetAlarmRuleId(v int64) *QueryUnifiedalarmEventdetailRequest {
	s.AlarmRuleId = &v
	return s
}

func (s *QueryUnifiedalarmEventdetailRequest) SetCurrentPage(v int64) *QueryUnifiedalarmEventdetailRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryUnifiedalarmEventdetailRequest) SetPageSize(v int64) *QueryUnifiedalarmEventdetailRequest {
	s.PageSize = &v
	return s
}

type QueryUnifiedalarmEventdetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 总记录数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 页面尺寸
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 告警消息列表
	AlarmHistoryList []*UnifiedAlarmHistoryVO `json:"alarm_history_list,omitempty" xml:"alarm_history_list,omitempty" type:"Repeated"`
}

func (s QueryUnifiedalarmEventdetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmEventdetailResponse) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmEventdetailResponse) SetReqMsgId(v string) *QueryUnifiedalarmEventdetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnifiedalarmEventdetailResponse) SetResultCode(v string) *QueryUnifiedalarmEventdetailResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnifiedalarmEventdetailResponse) SetResultMsg(v string) *QueryUnifiedalarmEventdetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnifiedalarmEventdetailResponse) SetCurrentPage(v int64) *QueryUnifiedalarmEventdetailResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryUnifiedalarmEventdetailResponse) SetTotalCount(v int64) *QueryUnifiedalarmEventdetailResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryUnifiedalarmEventdetailResponse) SetPageSize(v int64) *QueryUnifiedalarmEventdetailResponse {
	s.PageSize = &v
	return s
}

func (s *QueryUnifiedalarmEventdetailResponse) SetAlarmHistoryList(v []*UnifiedAlarmHistoryVO) *QueryUnifiedalarmEventdetailResponse {
	s.AlarmHistoryList = v
	return s
}

type QueryUnifiedalarmMonitorlistRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 租户名称
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 查询哪个技术栈下的告警指标。
	StackId *int64 `json:"stack_id,omitempty" xml:"stack_id,omitempty" require:"true"`
}

func (s QueryUnifiedalarmMonitorlistRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmMonitorlistRequest) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmMonitorlistRequest) SetAuthToken(v string) *QueryUnifiedalarmMonitorlistRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnifiedalarmMonitorlistRequest) SetTenantId(v int64) *QueryUnifiedalarmMonitorlistRequest {
	s.TenantId = &v
	return s
}

func (s *QueryUnifiedalarmMonitorlistRequest) SetAppName(v string) *QueryUnifiedalarmMonitorlistRequest {
	s.AppName = &v
	return s
}

func (s *QueryUnifiedalarmMonitorlistRequest) SetStackId(v int64) *QueryUnifiedalarmMonitorlistRequest {
	s.StackId = &v
	return s
}

type QueryUnifiedalarmMonitorlistResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 缺省的监控指标。
	StackMonitorList []*StackMonitorItem `json:"stack_monitor_list,omitempty" xml:"stack_monitor_list,omitempty" type:"Repeated"`
	// 用户定制的告警项。
	CustomPluginList []*CustomPluginDO `json:"custom_plugin_list,omitempty" xml:"custom_plugin_list,omitempty" type:"Repeated"`
}

func (s QueryUnifiedalarmMonitorlistResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmMonitorlistResponse) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmMonitorlistResponse) SetReqMsgId(v string) *QueryUnifiedalarmMonitorlistResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnifiedalarmMonitorlistResponse) SetResultCode(v string) *QueryUnifiedalarmMonitorlistResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnifiedalarmMonitorlistResponse) SetResultMsg(v string) *QueryUnifiedalarmMonitorlistResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnifiedalarmMonitorlistResponse) SetStackMonitorList(v []*StackMonitorItem) *QueryUnifiedalarmMonitorlistResponse {
	s.StackMonitorList = v
	return s
}

func (s *QueryUnifiedalarmMonitorlistResponse) SetCustomPluginList(v []*CustomPluginDO) *QueryUnifiedalarmMonitorlistResponse {
	s.CustomPluginList = v
	return s
}

type QueryXmetricTableRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	//
	Data *XMetricQuery `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryXmetricTableRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetricTableRequest) GoString() string {
	return s.String()
}

func (s *QueryXmetricTableRequest) SetAuthToken(v string) *QueryXmetricTableRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryXmetricTableRequest) SetWorkspaceName(v string) *QueryXmetricTableRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryXmetricTableRequest) SetData(v *XMetricQuery) *QueryXmetricTableRequest {
	s.Data = v
	return s
}

type QueryXmetricTableResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Data *XTableResponse `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryXmetricTableResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryXmetricTableResponse) GoString() string {
	return s.String()
}

func (s *QueryXmetricTableResponse) SetReqMsgId(v string) *QueryXmetricTableResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryXmetricTableResponse) SetResultCode(v string) *QueryXmetricTableResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryXmetricTableResponse) SetResultMsg(v string) *QueryXmetricTableResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryXmetricTableResponse) SetData(v *XTableResponse) *QueryXmetricTableResponse {
	s.Data = v
	return s
}

type QueryTraceAppsqlmetricsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
}

func (s QueryTraceAppsqlmetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppsqlmetricsRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceAppsqlmetricsRequest) SetAuthToken(v string) *QueryTraceAppsqlmetricsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceAppsqlmetricsRequest) SetWorkspaceName(v string) *QueryTraceAppsqlmetricsRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceAppsqlmetricsRequest) SetAppName(v string) *QueryTraceAppsqlmetricsRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceAppsqlmetricsRequest) SetStartTime(v int64) *QueryTraceAppsqlmetricsRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceAppsqlmetricsRequest) SetEndTime(v int64) *QueryTraceAppsqlmetricsRequest {
	s.EndTime = &v
	return s
}

type QueryTraceAppsqlmetricsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryTraceAppsqlmetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppsqlmetricsResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceAppsqlmetricsResponse) SetReqMsgId(v string) *QueryTraceAppsqlmetricsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceAppsqlmetricsResponse) SetResultCode(v string) *QueryTraceAppsqlmetricsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceAppsqlmetricsResponse) SetResultMsg(v string) *QueryTraceAppsqlmetricsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceAppsqlmetricsResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceAppsqlmetricsResponse {
	s.Result = v
	return s
}

type QueryTraceAppsqlstatRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 排序字段
	SortBy *string `json:"sort_by,omitempty" xml:"sort_by,omitempty"`
	// 排序是否逆序
	SortReverse *bool `json:"sort_reverse,omitempty" xml:"sort_reverse,omitempty"`
	// 分页页数
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 每页记录条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryTraceAppsqlstatRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppsqlstatRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceAppsqlstatRequest) SetAuthToken(v string) *QueryTraceAppsqlstatRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceAppsqlstatRequest) SetWorkspaceName(v string) *QueryTraceAppsqlstatRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceAppsqlstatRequest) SetAppName(v string) *QueryTraceAppsqlstatRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceAppsqlstatRequest) SetStartTime(v int64) *QueryTraceAppsqlstatRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceAppsqlstatRequest) SetEndTime(v int64) *QueryTraceAppsqlstatRequest {
	s.EndTime = &v
	return s
}

func (s *QueryTraceAppsqlstatRequest) SetSortBy(v string) *QueryTraceAppsqlstatRequest {
	s.SortBy = &v
	return s
}

func (s *QueryTraceAppsqlstatRequest) SetSortReverse(v bool) *QueryTraceAppsqlstatRequest {
	s.SortReverse = &v
	return s
}

func (s *QueryTraceAppsqlstatRequest) SetPageNumber(v int64) *QueryTraceAppsqlstatRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryTraceAppsqlstatRequest) SetPageSize(v int64) *QueryTraceAppsqlstatRequest {
	s.PageSize = &v
	return s
}

type QueryTraceAppsqlstatResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// 分页号
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询总数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
	// 查询总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
}

func (s QueryTraceAppsqlstatResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppsqlstatResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceAppsqlstatResponse) SetReqMsgId(v string) *QueryTraceAppsqlstatResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceAppsqlstatResponse) SetResultCode(v string) *QueryTraceAppsqlstatResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceAppsqlstatResponse) SetResultMsg(v string) *QueryTraceAppsqlstatResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceAppsqlstatResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceAppsqlstatResponse {
	s.Result = v
	return s
}

func (s *QueryTraceAppsqlstatResponse) SetCurrentPage(v int64) *QueryTraceAppsqlstatResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryTraceAppsqlstatResponse) SetPageSize(v int64) *QueryTraceAppsqlstatResponse {
	s.PageSize = &v
	return s
}

func (s *QueryTraceAppsqlstatResponse) SetTotalSize(v int64) *QueryTraceAppsqlstatResponse {
	s.TotalSize = &v
	return s
}

func (s *QueryTraceAppsqlstatResponse) SetTotalPage(v int64) *QueryTraceAppsqlstatResponse {
	s.TotalPage = &v
	return s
}

type QueryTraceAppnosqlmetricsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
}

func (s QueryTraceAppnosqlmetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppnosqlmetricsRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceAppnosqlmetricsRequest) SetAuthToken(v string) *QueryTraceAppnosqlmetricsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceAppnosqlmetricsRequest) SetWorkspaceName(v string) *QueryTraceAppnosqlmetricsRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceAppnosqlmetricsRequest) SetAppName(v string) *QueryTraceAppnosqlmetricsRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceAppnosqlmetricsRequest) SetStartTime(v int64) *QueryTraceAppnosqlmetricsRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceAppnosqlmetricsRequest) SetEndTime(v int64) *QueryTraceAppnosqlmetricsRequest {
	s.EndTime = &v
	return s
}

type QueryTraceAppnosqlmetricsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryTraceAppnosqlmetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppnosqlmetricsResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceAppnosqlmetricsResponse) SetReqMsgId(v string) *QueryTraceAppnosqlmetricsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceAppnosqlmetricsResponse) SetResultCode(v string) *QueryTraceAppnosqlmetricsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceAppnosqlmetricsResponse) SetResultMsg(v string) *QueryTraceAppnosqlmetricsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceAppnosqlmetricsResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceAppnosqlmetricsResponse {
	s.Result = v
	return s
}

type QueryTraceAppmqconsumemetricsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
}

func (s QueryTraceAppmqconsumemetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppmqconsumemetricsRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceAppmqconsumemetricsRequest) SetAuthToken(v string) *QueryTraceAppmqconsumemetricsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceAppmqconsumemetricsRequest) SetWorkspaceName(v string) *QueryTraceAppmqconsumemetricsRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceAppmqconsumemetricsRequest) SetAppName(v string) *QueryTraceAppmqconsumemetricsRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceAppmqconsumemetricsRequest) SetStartTime(v int64) *QueryTraceAppmqconsumemetricsRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceAppmqconsumemetricsRequest) SetEndTime(v int64) *QueryTraceAppmqconsumemetricsRequest {
	s.EndTime = &v
	return s
}

type QueryTraceAppmqconsumemetricsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryTraceAppmqconsumemetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppmqconsumemetricsResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceAppmqconsumemetricsResponse) SetReqMsgId(v string) *QueryTraceAppmqconsumemetricsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceAppmqconsumemetricsResponse) SetResultCode(v string) *QueryTraceAppmqconsumemetricsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceAppmqconsumemetricsResponse) SetResultMsg(v string) *QueryTraceAppmqconsumemetricsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceAppmqconsumemetricsResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceAppmqconsumemetricsResponse {
	s.Result = v
	return s
}

type QueryTraceApprpcclientmetricsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
}

func (s QueryTraceApprpcclientmetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApprpcclientmetricsRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceApprpcclientmetricsRequest) SetAuthToken(v string) *QueryTraceApprpcclientmetricsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceApprpcclientmetricsRequest) SetWorkspaceName(v string) *QueryTraceApprpcclientmetricsRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceApprpcclientmetricsRequest) SetAppName(v string) *QueryTraceApprpcclientmetricsRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceApprpcclientmetricsRequest) SetStartTime(v int64) *QueryTraceApprpcclientmetricsRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceApprpcclientmetricsRequest) SetEndTime(v int64) *QueryTraceApprpcclientmetricsRequest {
	s.EndTime = &v
	return s
}

type QueryTraceApprpcclientmetricsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryTraceApprpcclientmetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApprpcclientmetricsResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceApprpcclientmetricsResponse) SetReqMsgId(v string) *QueryTraceApprpcclientmetricsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceApprpcclientmetricsResponse) SetResultCode(v string) *QueryTraceApprpcclientmetricsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceApprpcclientmetricsResponse) SetResultMsg(v string) *QueryTraceApprpcclientmetricsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceApprpcclientmetricsResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceApprpcclientmetricsResponse {
	s.Result = v
	return s
}

type QueryTraceApprpcservermetricsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
}

func (s QueryTraceApprpcservermetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApprpcservermetricsRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceApprpcservermetricsRequest) SetAuthToken(v string) *QueryTraceApprpcservermetricsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceApprpcservermetricsRequest) SetWorkspaceName(v string) *QueryTraceApprpcservermetricsRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceApprpcservermetricsRequest) SetAppName(v string) *QueryTraceApprpcservermetricsRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceApprpcservermetricsRequest) SetStartTime(v int64) *QueryTraceApprpcservermetricsRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceApprpcservermetricsRequest) SetEndTime(v int64) *QueryTraceApprpcservermetricsRequest {
	s.EndTime = &v
	return s
}

type QueryTraceApprpcservermetricsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryTraceApprpcservermetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApprpcservermetricsResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceApprpcservermetricsResponse) SetReqMsgId(v string) *QueryTraceApprpcservermetricsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceApprpcservermetricsResponse) SetResultCode(v string) *QueryTraceApprpcservermetricsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceApprpcservermetricsResponse) SetResultMsg(v string) *QueryTraceApprpcservermetricsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceApprpcservermetricsResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceApprpcservermetricsResponse {
	s.Result = v
	return s
}

type QueryTraceApphttpclientmetricsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
}

func (s QueryTraceApphttpclientmetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApphttpclientmetricsRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceApphttpclientmetricsRequest) SetAuthToken(v string) *QueryTraceApphttpclientmetricsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceApphttpclientmetricsRequest) SetWorkspaceName(v string) *QueryTraceApphttpclientmetricsRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceApphttpclientmetricsRequest) SetAppName(v string) *QueryTraceApphttpclientmetricsRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceApphttpclientmetricsRequest) SetStartTime(v int64) *QueryTraceApphttpclientmetricsRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceApphttpclientmetricsRequest) SetEndTime(v int64) *QueryTraceApphttpclientmetricsRequest {
	s.EndTime = &v
	return s
}

type QueryTraceApphttpclientmetricsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryTraceApphttpclientmetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApphttpclientmetricsResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceApphttpclientmetricsResponse) SetReqMsgId(v string) *QueryTraceApphttpclientmetricsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceApphttpclientmetricsResponse) SetResultCode(v string) *QueryTraceApphttpclientmetricsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceApphttpclientmetricsResponse) SetResultMsg(v string) *QueryTraceApphttpclientmetricsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceApphttpclientmetricsResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceApphttpclientmetricsResponse {
	s.Result = v
	return s
}

type QueryTraceApphttpservermetricsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
}

func (s QueryTraceApphttpservermetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApphttpservermetricsRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceApphttpservermetricsRequest) SetAuthToken(v string) *QueryTraceApphttpservermetricsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceApphttpservermetricsRequest) SetWorkspaceName(v string) *QueryTraceApphttpservermetricsRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceApphttpservermetricsRequest) SetAppName(v string) *QueryTraceApphttpservermetricsRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceApphttpservermetricsRequest) SetStartTime(v int64) *QueryTraceApphttpservermetricsRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceApphttpservermetricsRequest) SetEndTime(v int64) *QueryTraceApphttpservermetricsRequest {
	s.EndTime = &v
	return s
}

type QueryTraceApphttpservermetricsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryTraceApphttpservermetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApphttpservermetricsResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceApphttpservermetricsResponse) SetReqMsgId(v string) *QueryTraceApphttpservermetricsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceApphttpservermetricsResponse) SetResultCode(v string) *QueryTraceApphttpservermetricsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceApphttpservermetricsResponse) SetResultMsg(v string) *QueryTraceApphttpservermetricsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceApphttpservermetricsResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceApphttpservermetricsResponse {
	s.Result = v
	return s
}

type QueryTraceAppnosqlstatRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 排序字段
	SortBy *string `json:"sort_by,omitempty" xml:"sort_by,omitempty"`
	// 排序是否逆序
	SortReverse *bool `json:"sort_reverse,omitempty" xml:"sort_reverse,omitempty"`
	// 分页页数
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 每页记录条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryTraceAppnosqlstatRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppnosqlstatRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceAppnosqlstatRequest) SetAuthToken(v string) *QueryTraceAppnosqlstatRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceAppnosqlstatRequest) SetWorkspaceName(v string) *QueryTraceAppnosqlstatRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceAppnosqlstatRequest) SetAppName(v string) *QueryTraceAppnosqlstatRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceAppnosqlstatRequest) SetStartTime(v int64) *QueryTraceAppnosqlstatRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceAppnosqlstatRequest) SetEndTime(v int64) *QueryTraceAppnosqlstatRequest {
	s.EndTime = &v
	return s
}

func (s *QueryTraceAppnosqlstatRequest) SetSortBy(v string) *QueryTraceAppnosqlstatRequest {
	s.SortBy = &v
	return s
}

func (s *QueryTraceAppnosqlstatRequest) SetSortReverse(v bool) *QueryTraceAppnosqlstatRequest {
	s.SortReverse = &v
	return s
}

func (s *QueryTraceAppnosqlstatRequest) SetPageNumber(v int64) *QueryTraceAppnosqlstatRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryTraceAppnosqlstatRequest) SetPageSize(v int64) *QueryTraceAppnosqlstatRequest {
	s.PageSize = &v
	return s
}

type QueryTraceAppnosqlstatResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// 分页号
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询总数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
	// 查询总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
}

func (s QueryTraceAppnosqlstatResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppnosqlstatResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceAppnosqlstatResponse) SetReqMsgId(v string) *QueryTraceAppnosqlstatResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceAppnosqlstatResponse) SetResultCode(v string) *QueryTraceAppnosqlstatResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceAppnosqlstatResponse) SetResultMsg(v string) *QueryTraceAppnosqlstatResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceAppnosqlstatResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceAppnosqlstatResponse {
	s.Result = v
	return s
}

func (s *QueryTraceAppnosqlstatResponse) SetCurrentPage(v int64) *QueryTraceAppnosqlstatResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryTraceAppnosqlstatResponse) SetPageSize(v int64) *QueryTraceAppnosqlstatResponse {
	s.PageSize = &v
	return s
}

func (s *QueryTraceAppnosqlstatResponse) SetTotalSize(v int64) *QueryTraceAppnosqlstatResponse {
	s.TotalSize = &v
	return s
}

func (s *QueryTraceAppnosqlstatResponse) SetTotalPage(v int64) *QueryTraceAppnosqlstatResponse {
	s.TotalPage = &v
	return s
}

type QueryTraceAppmqconsumestatRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 排序字段
	SortBy *string `json:"sort_by,omitempty" xml:"sort_by,omitempty"`
	// 排序是否逆序
	SortReverse *bool `json:"sort_reverse,omitempty" xml:"sort_reverse,omitempty"`
	// 分页页数
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 每页记录条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryTraceAppmqconsumestatRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppmqconsumestatRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceAppmqconsumestatRequest) SetAuthToken(v string) *QueryTraceAppmqconsumestatRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceAppmqconsumestatRequest) SetWorkspaceName(v string) *QueryTraceAppmqconsumestatRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceAppmqconsumestatRequest) SetAppName(v string) *QueryTraceAppmqconsumestatRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceAppmqconsumestatRequest) SetStartTime(v int64) *QueryTraceAppmqconsumestatRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceAppmqconsumestatRequest) SetEndTime(v int64) *QueryTraceAppmqconsumestatRequest {
	s.EndTime = &v
	return s
}

func (s *QueryTraceAppmqconsumestatRequest) SetSortBy(v string) *QueryTraceAppmqconsumestatRequest {
	s.SortBy = &v
	return s
}

func (s *QueryTraceAppmqconsumestatRequest) SetSortReverse(v bool) *QueryTraceAppmqconsumestatRequest {
	s.SortReverse = &v
	return s
}

func (s *QueryTraceAppmqconsumestatRequest) SetPageNumber(v int64) *QueryTraceAppmqconsumestatRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryTraceAppmqconsumestatRequest) SetPageSize(v int64) *QueryTraceAppmqconsumestatRequest {
	s.PageSize = &v
	return s
}

type QueryTraceAppmqconsumestatResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// 分页号
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询总数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
	// 查询总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
}

func (s QueryTraceAppmqconsumestatResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppmqconsumestatResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceAppmqconsumestatResponse) SetReqMsgId(v string) *QueryTraceAppmqconsumestatResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceAppmqconsumestatResponse) SetResultCode(v string) *QueryTraceAppmqconsumestatResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceAppmqconsumestatResponse) SetResultMsg(v string) *QueryTraceAppmqconsumestatResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceAppmqconsumestatResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceAppmqconsumestatResponse {
	s.Result = v
	return s
}

func (s *QueryTraceAppmqconsumestatResponse) SetCurrentPage(v int64) *QueryTraceAppmqconsumestatResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryTraceAppmqconsumestatResponse) SetPageSize(v int64) *QueryTraceAppmqconsumestatResponse {
	s.PageSize = &v
	return s
}

func (s *QueryTraceAppmqconsumestatResponse) SetTotalSize(v int64) *QueryTraceAppmqconsumestatResponse {
	s.TotalSize = &v
	return s
}

func (s *QueryTraceAppmqconsumestatResponse) SetTotalPage(v int64) *QueryTraceAppmqconsumestatResponse {
	s.TotalPage = &v
	return s
}

type QueryTraceApphttpclientstatRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 排序字段
	SortBy *string `json:"sort_by,omitempty" xml:"sort_by,omitempty"`
	// 排序是否逆序
	SortReverse *bool `json:"sort_reverse,omitempty" xml:"sort_reverse,omitempty"`
	// 分页页数
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 每页记录条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryTraceApphttpclientstatRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApphttpclientstatRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceApphttpclientstatRequest) SetAuthToken(v string) *QueryTraceApphttpclientstatRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceApphttpclientstatRequest) SetWorkspaceName(v string) *QueryTraceApphttpclientstatRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceApphttpclientstatRequest) SetAppName(v string) *QueryTraceApphttpclientstatRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceApphttpclientstatRequest) SetStartTime(v int64) *QueryTraceApphttpclientstatRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceApphttpclientstatRequest) SetEndTime(v int64) *QueryTraceApphttpclientstatRequest {
	s.EndTime = &v
	return s
}

func (s *QueryTraceApphttpclientstatRequest) SetSortBy(v string) *QueryTraceApphttpclientstatRequest {
	s.SortBy = &v
	return s
}

func (s *QueryTraceApphttpclientstatRequest) SetSortReverse(v bool) *QueryTraceApphttpclientstatRequest {
	s.SortReverse = &v
	return s
}

func (s *QueryTraceApphttpclientstatRequest) SetPageNumber(v int64) *QueryTraceApphttpclientstatRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryTraceApphttpclientstatRequest) SetPageSize(v int64) *QueryTraceApphttpclientstatRequest {
	s.PageSize = &v
	return s
}

type QueryTraceApphttpclientstatResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// 分页号
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询总数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
	// 查询总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
}

func (s QueryTraceApphttpclientstatResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApphttpclientstatResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceApphttpclientstatResponse) SetReqMsgId(v string) *QueryTraceApphttpclientstatResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceApphttpclientstatResponse) SetResultCode(v string) *QueryTraceApphttpclientstatResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceApphttpclientstatResponse) SetResultMsg(v string) *QueryTraceApphttpclientstatResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceApphttpclientstatResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceApphttpclientstatResponse {
	s.Result = v
	return s
}

func (s *QueryTraceApphttpclientstatResponse) SetCurrentPage(v int64) *QueryTraceApphttpclientstatResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryTraceApphttpclientstatResponse) SetPageSize(v int64) *QueryTraceApphttpclientstatResponse {
	s.PageSize = &v
	return s
}

func (s *QueryTraceApphttpclientstatResponse) SetTotalSize(v int64) *QueryTraceApphttpclientstatResponse {
	s.TotalSize = &v
	return s
}

func (s *QueryTraceApphttpclientstatResponse) SetTotalPage(v int64) *QueryTraceApphttpclientstatResponse {
	s.TotalPage = &v
	return s
}

type QueryTraceApphttpserverstatRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 排序字段
	SortBy *string `json:"sort_by,omitempty" xml:"sort_by,omitempty"`
	// 排序是否逆序
	SortReverse *bool `json:"sort_reverse,omitempty" xml:"sort_reverse,omitempty"`
	// 分页页数
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 每页记录条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryTraceApphttpserverstatRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApphttpserverstatRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceApphttpserverstatRequest) SetAuthToken(v string) *QueryTraceApphttpserverstatRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceApphttpserverstatRequest) SetWorkspaceName(v string) *QueryTraceApphttpserverstatRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceApphttpserverstatRequest) SetAppName(v string) *QueryTraceApphttpserverstatRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceApphttpserverstatRequest) SetStartTime(v int64) *QueryTraceApphttpserverstatRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceApphttpserverstatRequest) SetEndTime(v int64) *QueryTraceApphttpserverstatRequest {
	s.EndTime = &v
	return s
}

func (s *QueryTraceApphttpserverstatRequest) SetSortBy(v string) *QueryTraceApphttpserverstatRequest {
	s.SortBy = &v
	return s
}

func (s *QueryTraceApphttpserverstatRequest) SetSortReverse(v bool) *QueryTraceApphttpserverstatRequest {
	s.SortReverse = &v
	return s
}

func (s *QueryTraceApphttpserverstatRequest) SetPageNumber(v int64) *QueryTraceApphttpserverstatRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryTraceApphttpserverstatRequest) SetPageSize(v int64) *QueryTraceApphttpserverstatRequest {
	s.PageSize = &v
	return s
}

type QueryTraceApphttpserverstatResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// 分页号
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询总数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
	// 查询总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
}

func (s QueryTraceApphttpserverstatResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApphttpserverstatResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceApphttpserverstatResponse) SetReqMsgId(v string) *QueryTraceApphttpserverstatResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceApphttpserverstatResponse) SetResultCode(v string) *QueryTraceApphttpserverstatResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceApphttpserverstatResponse) SetResultMsg(v string) *QueryTraceApphttpserverstatResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceApphttpserverstatResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceApphttpserverstatResponse {
	s.Result = v
	return s
}

func (s *QueryTraceApphttpserverstatResponse) SetCurrentPage(v int64) *QueryTraceApphttpserverstatResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryTraceApphttpserverstatResponse) SetPageSize(v int64) *QueryTraceApphttpserverstatResponse {
	s.PageSize = &v
	return s
}

func (s *QueryTraceApphttpserverstatResponse) SetTotalSize(v int64) *QueryTraceApphttpserverstatResponse {
	s.TotalSize = &v
	return s
}

func (s *QueryTraceApphttpserverstatResponse) SetTotalPage(v int64) *QueryTraceApphttpserverstatResponse {
	s.TotalPage = &v
	return s
}

type QueryTraceApprpcclientstatRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 排序字段
	SortBy *string `json:"sort_by,omitempty" xml:"sort_by,omitempty"`
	// 排序是否逆序
	SortReverse *bool `json:"sort_reverse,omitempty" xml:"sort_reverse,omitempty"`
	// 分页页数
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 每页记录条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryTraceApprpcclientstatRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApprpcclientstatRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceApprpcclientstatRequest) SetAuthToken(v string) *QueryTraceApprpcclientstatRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceApprpcclientstatRequest) SetWorkspaceName(v string) *QueryTraceApprpcclientstatRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceApprpcclientstatRequest) SetAppName(v string) *QueryTraceApprpcclientstatRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceApprpcclientstatRequest) SetStartTime(v int64) *QueryTraceApprpcclientstatRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceApprpcclientstatRequest) SetEndTime(v int64) *QueryTraceApprpcclientstatRequest {
	s.EndTime = &v
	return s
}

func (s *QueryTraceApprpcclientstatRequest) SetSortBy(v string) *QueryTraceApprpcclientstatRequest {
	s.SortBy = &v
	return s
}

func (s *QueryTraceApprpcclientstatRequest) SetSortReverse(v bool) *QueryTraceApprpcclientstatRequest {
	s.SortReverse = &v
	return s
}

func (s *QueryTraceApprpcclientstatRequest) SetPageNumber(v int64) *QueryTraceApprpcclientstatRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryTraceApprpcclientstatRequest) SetPageSize(v int64) *QueryTraceApprpcclientstatRequest {
	s.PageSize = &v
	return s
}

type QueryTraceApprpcclientstatResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// 分页号
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询总数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
	// 查询总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
}

func (s QueryTraceApprpcclientstatResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApprpcclientstatResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceApprpcclientstatResponse) SetReqMsgId(v string) *QueryTraceApprpcclientstatResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceApprpcclientstatResponse) SetResultCode(v string) *QueryTraceApprpcclientstatResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceApprpcclientstatResponse) SetResultMsg(v string) *QueryTraceApprpcclientstatResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceApprpcclientstatResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceApprpcclientstatResponse {
	s.Result = v
	return s
}

func (s *QueryTraceApprpcclientstatResponse) SetCurrentPage(v int64) *QueryTraceApprpcclientstatResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryTraceApprpcclientstatResponse) SetPageSize(v int64) *QueryTraceApprpcclientstatResponse {
	s.PageSize = &v
	return s
}

func (s *QueryTraceApprpcclientstatResponse) SetTotalSize(v int64) *QueryTraceApprpcclientstatResponse {
	s.TotalSize = &v
	return s
}

func (s *QueryTraceApprpcclientstatResponse) SetTotalPage(v int64) *QueryTraceApprpcclientstatResponse {
	s.TotalPage = &v
	return s
}

type QueryTraceApprpcserverstatRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 排序字段
	SortBy *string `json:"sort_by,omitempty" xml:"sort_by,omitempty"`
	// 排序是否逆序
	SortReverse *bool `json:"sort_reverse,omitempty" xml:"sort_reverse,omitempty"`
	// 分页页数
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 每页记录条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryTraceApprpcserverstatRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApprpcserverstatRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceApprpcserverstatRequest) SetAuthToken(v string) *QueryTraceApprpcserverstatRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceApprpcserverstatRequest) SetWorkspaceName(v string) *QueryTraceApprpcserverstatRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceApprpcserverstatRequest) SetAppName(v string) *QueryTraceApprpcserverstatRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceApprpcserverstatRequest) SetStartTime(v int64) *QueryTraceApprpcserverstatRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceApprpcserverstatRequest) SetEndTime(v int64) *QueryTraceApprpcserverstatRequest {
	s.EndTime = &v
	return s
}

func (s *QueryTraceApprpcserverstatRequest) SetSortBy(v string) *QueryTraceApprpcserverstatRequest {
	s.SortBy = &v
	return s
}

func (s *QueryTraceApprpcserverstatRequest) SetSortReverse(v bool) *QueryTraceApprpcserverstatRequest {
	s.SortReverse = &v
	return s
}

func (s *QueryTraceApprpcserverstatRequest) SetPageNumber(v int64) *QueryTraceApprpcserverstatRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryTraceApprpcserverstatRequest) SetPageSize(v int64) *QueryTraceApprpcserverstatRequest {
	s.PageSize = &v
	return s
}

type QueryTraceApprpcserverstatResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// 分页号
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询总数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
	// 查询总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
}

func (s QueryTraceApprpcserverstatResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApprpcserverstatResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceApprpcserverstatResponse) SetReqMsgId(v string) *QueryTraceApprpcserverstatResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceApprpcserverstatResponse) SetResultCode(v string) *QueryTraceApprpcserverstatResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceApprpcserverstatResponse) SetResultMsg(v string) *QueryTraceApprpcserverstatResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceApprpcserverstatResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceApprpcserverstatResponse {
	s.Result = v
	return s
}

func (s *QueryTraceApprpcserverstatResponse) SetCurrentPage(v int64) *QueryTraceApprpcserverstatResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryTraceApprpcserverstatResponse) SetPageSize(v int64) *QueryTraceApprpcserverstatResponse {
	s.PageSize = &v
	return s
}

func (s *QueryTraceApprpcserverstatResponse) SetTotalSize(v int64) *QueryTraceApprpcserverstatResponse {
	s.TotalSize = &v
	return s
}

func (s *QueryTraceApprpcserverstatResponse) SetTotalPage(v int64) *QueryTraceApprpcserverstatResponse {
	s.TotalPage = &v
	return s
}

type GetTraceWorkspacesettingRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s GetTraceWorkspacesettingRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTraceWorkspacesettingRequest) GoString() string {
	return s.String()
}

func (s *GetTraceWorkspacesettingRequest) SetAuthToken(v string) *GetTraceWorkspacesettingRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTraceWorkspacesettingRequest) SetWorkspaceName(v string) *GetTraceWorkspacesettingRequest {
	s.WorkspaceName = &v
	return s
}

type GetTraceWorkspacesettingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 工作空间配置
	TraceWorkspaceSetting *TraceWorkspaceSetting `json:"trace_workspace_setting,omitempty" xml:"trace_workspace_setting,omitempty"`
}

func (s GetTraceWorkspacesettingResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTraceWorkspacesettingResponse) GoString() string {
	return s.String()
}

func (s *GetTraceWorkspacesettingResponse) SetReqMsgId(v string) *GetTraceWorkspacesettingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTraceWorkspacesettingResponse) SetResultCode(v string) *GetTraceWorkspacesettingResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTraceWorkspacesettingResponse) SetResultMsg(v string) *GetTraceWorkspacesettingResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTraceWorkspacesettingResponse) SetTraceWorkspaceSetting(v *TraceWorkspaceSetting) *GetTraceWorkspacesettingResponse {
	s.TraceWorkspaceSetting = v
	return s
}

type QueryTraceAppmqproducemetricsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
}

func (s QueryTraceAppmqproducemetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppmqproducemetricsRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceAppmqproducemetricsRequest) SetAuthToken(v string) *QueryTraceAppmqproducemetricsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceAppmqproducemetricsRequest) SetWorkspaceName(v string) *QueryTraceAppmqproducemetricsRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceAppmqproducemetricsRequest) SetAppName(v string) *QueryTraceAppmqproducemetricsRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceAppmqproducemetricsRequest) SetStartTime(v int64) *QueryTraceAppmqproducemetricsRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceAppmqproducemetricsRequest) SetEndTime(v int64) *QueryTraceAppmqproducemetricsRequest {
	s.EndTime = &v
	return s
}

type QueryTraceAppmqproducemetricsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryTraceAppmqproducemetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppmqproducemetricsResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceAppmqproducemetricsResponse) SetReqMsgId(v string) *QueryTraceAppmqproducemetricsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceAppmqproducemetricsResponse) SetResultCode(v string) *QueryTraceAppmqproducemetricsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceAppmqproducemetricsResponse) SetResultMsg(v string) *QueryTraceAppmqproducemetricsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceAppmqproducemetricsResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceAppmqproducemetricsResponse {
	s.Result = v
	return s
}

type QueryTraceAppmqproducestatRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 排序字段
	SortBy *string `json:"sort_by,omitempty" xml:"sort_by,omitempty"`
	// 排序是否逆序
	SortReverse *bool `json:"sort_reverse,omitempty" xml:"sort_reverse,omitempty"`
	// 分页页数
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 每页记录条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryTraceAppmqproducestatRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppmqproducestatRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceAppmqproducestatRequest) SetAuthToken(v string) *QueryTraceAppmqproducestatRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceAppmqproducestatRequest) SetWorkspaceName(v string) *QueryTraceAppmqproducestatRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceAppmqproducestatRequest) SetAppName(v string) *QueryTraceAppmqproducestatRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceAppmqproducestatRequest) SetStartTime(v int64) *QueryTraceAppmqproducestatRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceAppmqproducestatRequest) SetEndTime(v int64) *QueryTraceAppmqproducestatRequest {
	s.EndTime = &v
	return s
}

func (s *QueryTraceAppmqproducestatRequest) SetSortBy(v string) *QueryTraceAppmqproducestatRequest {
	s.SortBy = &v
	return s
}

func (s *QueryTraceAppmqproducestatRequest) SetSortReverse(v bool) *QueryTraceAppmqproducestatRequest {
	s.SortReverse = &v
	return s
}

func (s *QueryTraceAppmqproducestatRequest) SetPageNumber(v int64) *QueryTraceAppmqproducestatRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryTraceAppmqproducestatRequest) SetPageSize(v int64) *QueryTraceAppmqproducestatRequest {
	s.PageSize = &v
	return s
}

type QueryTraceAppmqproducestatResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// 分页号
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询总数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
	// 查询总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
}

func (s QueryTraceAppmqproducestatResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppmqproducestatResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceAppmqproducestatResponse) SetReqMsgId(v string) *QueryTraceAppmqproducestatResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceAppmqproducestatResponse) SetResultCode(v string) *QueryTraceAppmqproducestatResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceAppmqproducestatResponse) SetResultMsg(v string) *QueryTraceAppmqproducestatResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceAppmqproducestatResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceAppmqproducestatResponse {
	s.Result = v
	return s
}

func (s *QueryTraceAppmqproducestatResponse) SetCurrentPage(v int64) *QueryTraceAppmqproducestatResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryTraceAppmqproducestatResponse) SetPageSize(v int64) *QueryTraceAppmqproducestatResponse {
	s.PageSize = &v
	return s
}

func (s *QueryTraceAppmqproducestatResponse) SetTotalSize(v int64) *QueryTraceAppmqproducestatResponse {
	s.TotalSize = &v
	return s
}

func (s *QueryTraceAppmqproducestatResponse) SetTotalPage(v int64) *QueryTraceAppmqproducestatResponse {
	s.TotalPage = &v
	return s
}

type GetMeasurementStatusRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s GetMeasurementStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMeasurementStatusRequest) GoString() string {
	return s.String()
}

func (s *GetMeasurementStatusRequest) SetAuthToken(v string) *GetMeasurementStatusRequest {
	s.AuthToken = &v
	return s
}

type GetMeasurementStatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 计量计费是否开启
	MeasurementEnable *bool `json:"measurement_enable,omitempty" xml:"measurement_enable,omitempty"`
}

func (s GetMeasurementStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMeasurementStatusResponse) GoString() string {
	return s.String()
}

func (s *GetMeasurementStatusResponse) SetReqMsgId(v string) *GetMeasurementStatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetMeasurementStatusResponse) SetResultCode(v string) *GetMeasurementStatusResponse {
	s.ResultCode = &v
	return s
}

func (s *GetMeasurementStatusResponse) SetResultMsg(v string) *GetMeasurementStatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetMeasurementStatusResponse) SetMeasurementEnable(v bool) *GetMeasurementStatusResponse {
	s.MeasurementEnable = &v
	return s
}

type QueryLogserviceAppsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 命名空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 租户名称
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty" require:"true"`
}

func (s QueryLogserviceAppsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLogserviceAppsRequest) GoString() string {
	return s.String()
}

func (s *QueryLogserviceAppsRequest) SetAuthToken(v string) *QueryLogserviceAppsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLogserviceAppsRequest) SetWorkspaceName(v string) *QueryLogserviceAppsRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryLogserviceAppsRequest) SetTenantName(v string) *QueryLogserviceAppsRequest {
	s.TenantName = &v
	return s
}

type QueryLogserviceAppsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspace id
	WorkspaceId *int64 `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// tenant_id
	TenantId *int64 `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 应用详情列表
	Result []*AppMeta `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryLogserviceAppsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLogserviceAppsResponse) GoString() string {
	return s.String()
}

func (s *QueryLogserviceAppsResponse) SetReqMsgId(v string) *QueryLogserviceAppsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLogserviceAppsResponse) SetResultCode(v string) *QueryLogserviceAppsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLogserviceAppsResponse) SetResultMsg(v string) *QueryLogserviceAppsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLogserviceAppsResponse) SetWorkspaceId(v int64) *QueryLogserviceAppsResponse {
	s.WorkspaceId = &v
	return s
}

func (s *QueryLogserviceAppsResponse) SetTenantId(v int64) *QueryLogserviceAppsResponse {
	s.TenantId = &v
	return s
}

func (s *QueryLogserviceAppsResponse) SetTotalCount(v int64) *QueryLogserviceAppsResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryLogserviceAppsResponse) SetResult(v []*AppMeta) *QueryLogserviceAppsResponse {
	s.Result = v
	return s
}

type QueryTraceApphttpserverstatusmetricsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
}

func (s QueryTraceApphttpserverstatusmetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApphttpserverstatusmetricsRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceApphttpserverstatusmetricsRequest) SetAuthToken(v string) *QueryTraceApphttpserverstatusmetricsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceApphttpserverstatusmetricsRequest) SetWorkspaceName(v string) *QueryTraceApphttpserverstatusmetricsRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceApphttpserverstatusmetricsRequest) SetAppName(v string) *QueryTraceApphttpserverstatusmetricsRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceApphttpserverstatusmetricsRequest) SetStartTime(v int64) *QueryTraceApphttpserverstatusmetricsRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceApphttpserverstatusmetricsRequest) SetEndTime(v int64) *QueryTraceApphttpserverstatusmetricsRequest {
	s.EndTime = &v
	return s
}

type QueryTraceApphttpserverstatusmetricsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryTraceApphttpserverstatusmetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceApphttpserverstatusmetricsResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceApphttpserverstatusmetricsResponse) SetReqMsgId(v string) *QueryTraceApphttpserverstatusmetricsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceApphttpserverstatusmetricsResponse) SetResultCode(v string) *QueryTraceApphttpserverstatusmetricsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceApphttpserverstatusmetricsResponse) SetResultMsg(v string) *QueryTraceApphttpserverstatusmetricsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceApphttpserverstatusmetricsResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceApphttpserverstatusmetricsResponse {
	s.Result = v
	return s
}

type QueryAppAlarmrulesRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 指标栈ID
	StackId *int64 `json:"stack_id,omitempty" xml:"stack_id,omitempty" require:"true"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 查询所有，还是查询当前设置的告警指标。
	All *bool `json:"all,omitempty" xml:"all,omitempty" require:"true"`
}

func (s QueryAppAlarmrulesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppAlarmrulesRequest) GoString() string {
	return s.String()
}

func (s *QueryAppAlarmrulesRequest) SetAuthToken(v string) *QueryAppAlarmrulesRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppAlarmrulesRequest) SetStackId(v int64) *QueryAppAlarmrulesRequest {
	s.StackId = &v
	return s
}

func (s *QueryAppAlarmrulesRequest) SetAppName(v string) *QueryAppAlarmrulesRequest {
	s.AppName = &v
	return s
}

func (s *QueryAppAlarmrulesRequest) SetAll(v bool) *QueryAppAlarmrulesRequest {
	s.All = &v
	return s
}

type QueryAppAlarmrulesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 技术栈指标
	StackMetrics []*StackMonitorItem `json:"stack_metrics,omitempty" xml:"stack_metrics,omitempty" type:"Repeated"`
	// 应用自定义指标
	CustomPlugins []*CustomPluginDO `json:"custom_plugins,omitempty" xml:"custom_plugins,omitempty" type:"Repeated"`
}

func (s QueryAppAlarmrulesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppAlarmrulesResponse) GoString() string {
	return s.String()
}

func (s *QueryAppAlarmrulesResponse) SetReqMsgId(v string) *QueryAppAlarmrulesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppAlarmrulesResponse) SetResultCode(v string) *QueryAppAlarmrulesResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppAlarmrulesResponse) SetResultMsg(v string) *QueryAppAlarmrulesResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppAlarmrulesResponse) SetStackMetrics(v []*StackMonitorItem) *QueryAppAlarmrulesResponse {
	s.StackMetrics = v
	return s
}

func (s *QueryAppAlarmrulesResponse) SetCustomPlugins(v []*CustomPluginDO) *QueryAppAlarmrulesResponse {
	s.CustomPlugins = v
	return s
}

type QueryTraceCompactdetailRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// traceId
	TraceId *string `json:"trace_id,omitempty" xml:"trace_id,omitempty" require:"true"`
}

func (s QueryTraceCompactdetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceCompactdetailRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceCompactdetailRequest) SetAuthToken(v string) *QueryTraceCompactdetailRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceCompactdetailRequest) SetWorkspaceName(v string) *QueryTraceCompactdetailRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceCompactdetailRequest) SetTraceId(v string) *QueryTraceCompactdetailRequest {
	s.TraceId = &v
	return s
}

type QueryTraceCompactdetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 节点
	Items []*TraceCompactTreeItem `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
	// 描述整体链路的额外信息，比span总数，应用总数之类的
	Attributes []*KeySet `json:"attributes,omitempty" xml:"attributes,omitempty" type:"Repeated"`
}

func (s QueryTraceCompactdetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceCompactdetailResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceCompactdetailResponse) SetReqMsgId(v string) *QueryTraceCompactdetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceCompactdetailResponse) SetResultCode(v string) *QueryTraceCompactdetailResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceCompactdetailResponse) SetResultMsg(v string) *QueryTraceCompactdetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceCompactdetailResponse) SetItems(v []*TraceCompactTreeItem) *QueryTraceCompactdetailResponse {
	s.Items = v
	return s
}

func (s *QueryTraceCompactdetailResponse) SetAttributes(v []*KeySet) *QueryTraceCompactdetailResponse {
	s.Attributes = v
	return s
}

type QueryTraceAppexceptionmetricsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
}

func (s QueryTraceAppexceptionmetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppexceptionmetricsRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceAppexceptionmetricsRequest) SetAuthToken(v string) *QueryTraceAppexceptionmetricsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceAppexceptionmetricsRequest) SetWorkspaceName(v string) *QueryTraceAppexceptionmetricsRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceAppexceptionmetricsRequest) SetAppName(v string) *QueryTraceAppexceptionmetricsRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceAppexceptionmetricsRequest) SetStartTime(v int64) *QueryTraceAppexceptionmetricsRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceAppexceptionmetricsRequest) SetEndTime(v int64) *QueryTraceAppexceptionmetricsRequest {
	s.EndTime = &v
	return s
}

type QueryTraceAppexceptionmetricsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryTraceAppexceptionmetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppexceptionmetricsResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceAppexceptionmetricsResponse) SetReqMsgId(v string) *QueryTraceAppexceptionmetricsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceAppexceptionmetricsResponse) SetResultCode(v string) *QueryTraceAppexceptionmetricsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceAppexceptionmetricsResponse) SetResultMsg(v string) *QueryTraceAppexceptionmetricsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceAppexceptionmetricsResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceAppexceptionmetricsResponse {
	s.Result = v
	return s
}

type QueryTraceAppexceptionstatRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 开始毫秒时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 排序字段
	SortBy *string `json:"sort_by,omitempty" xml:"sort_by,omitempty"`
	// 排序是否逆序
	SortReverse *bool `json:"sort_reverse,omitempty" xml:"sort_reverse,omitempty"`
	// 分页页数
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 每页记录条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryTraceAppexceptionstatRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppexceptionstatRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceAppexceptionstatRequest) SetAuthToken(v string) *QueryTraceAppexceptionstatRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceAppexceptionstatRequest) SetWorkspaceName(v string) *QueryTraceAppexceptionstatRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceAppexceptionstatRequest) SetAppName(v string) *QueryTraceAppexceptionstatRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraceAppexceptionstatRequest) SetStartTime(v int64) *QueryTraceAppexceptionstatRequest {
	s.StartTime = &v
	return s
}

func (s *QueryTraceAppexceptionstatRequest) SetEndTime(v int64) *QueryTraceAppexceptionstatRequest {
	s.EndTime = &v
	return s
}

func (s *QueryTraceAppexceptionstatRequest) SetSortBy(v string) *QueryTraceAppexceptionstatRequest {
	s.SortBy = &v
	return s
}

func (s *QueryTraceAppexceptionstatRequest) SetSortReverse(v bool) *QueryTraceAppexceptionstatRequest {
	s.SortReverse = &v
	return s
}

func (s *QueryTraceAppexceptionstatRequest) SetPageNumber(v int64) *QueryTraceAppexceptionstatRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryTraceAppexceptionstatRequest) SetPageSize(v int64) *QueryTraceAppexceptionstatRequest {
	s.PageSize = &v
	return s
}

type QueryTraceAppexceptionstatResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果
	Result []*TimeSeriesMetrics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// 分页号
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询总数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
	// 查询总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
}

func (s QueryTraceAppexceptionstatResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceAppexceptionstatResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceAppexceptionstatResponse) SetReqMsgId(v string) *QueryTraceAppexceptionstatResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceAppexceptionstatResponse) SetResultCode(v string) *QueryTraceAppexceptionstatResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceAppexceptionstatResponse) SetResultMsg(v string) *QueryTraceAppexceptionstatResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceAppexceptionstatResponse) SetResult(v []*TimeSeriesMetrics) *QueryTraceAppexceptionstatResponse {
	s.Result = v
	return s
}

func (s *QueryTraceAppexceptionstatResponse) SetCurrentPage(v int64) *QueryTraceAppexceptionstatResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryTraceAppexceptionstatResponse) SetPageSize(v int64) *QueryTraceAppexceptionstatResponse {
	s.PageSize = &v
	return s
}

func (s *QueryTraceAppexceptionstatResponse) SetTotalSize(v int64) *QueryTraceAppexceptionstatResponse {
	s.TotalSize = &v
	return s
}

func (s *QueryTraceAppexceptionstatResponse) SetTotalPage(v int64) *QueryTraceAppexceptionstatResponse {
	s.TotalPage = &v
	return s
}

type QueryUnifiedalarmRulebindingRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 告警对象类型：APP应用，HOST主机
	AlarmTargetType *string `json:"alarm_target_type,omitempty" xml:"alarm_target_type,omitempty"`
	// 告警对象名称
	AlarmTargetIdentity *string `json:"alarm_target_identity,omitempty" xml:"alarm_target_identity,omitempty"`
	// 告警规则ID
	AlarmRuleId *int64 `json:"alarm_rule_id,omitempty" xml:"alarm_rule_id,omitempty"`
	// 数据源 ID
	Datasource *string `json:"datasource,omitempty" xml:"datasource,omitempty"`
	// 数据源类型：CUSTOM自定义监控，STACK技术栈监控
	DatasourceType *string `json:"datasource_type,omitempty" xml:"datasource_type,omitempty"`
	// 监控指标 URL
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s QueryUnifiedalarmRulebindingRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmRulebindingRequest) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmRulebindingRequest) SetAuthToken(v string) *QueryUnifiedalarmRulebindingRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnifiedalarmRulebindingRequest) SetWorkspaceName(v string) *QueryUnifiedalarmRulebindingRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryUnifiedalarmRulebindingRequest) SetAlarmTargetType(v string) *QueryUnifiedalarmRulebindingRequest {
	s.AlarmTargetType = &v
	return s
}

func (s *QueryUnifiedalarmRulebindingRequest) SetAlarmTargetIdentity(v string) *QueryUnifiedalarmRulebindingRequest {
	s.AlarmTargetIdentity = &v
	return s
}

func (s *QueryUnifiedalarmRulebindingRequest) SetAlarmRuleId(v int64) *QueryUnifiedalarmRulebindingRequest {
	s.AlarmRuleId = &v
	return s
}

func (s *QueryUnifiedalarmRulebindingRequest) SetDatasource(v string) *QueryUnifiedalarmRulebindingRequest {
	s.Datasource = &v
	return s
}

func (s *QueryUnifiedalarmRulebindingRequest) SetDatasourceType(v string) *QueryUnifiedalarmRulebindingRequest {
	s.DatasourceType = &v
	return s
}

func (s *QueryUnifiedalarmRulebindingRequest) SetUrl(v string) *QueryUnifiedalarmRulebindingRequest {
	s.Url = &v
	return s
}

type QueryUnifiedalarmRulebindingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 告警规则绑定列表
	RuleBindings []*UnifiedAlarmRuleBindingVO `json:"rule_bindings,omitempty" xml:"rule_bindings,omitempty" type:"Repeated"`
}

func (s QueryUnifiedalarmRulebindingResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedalarmRulebindingResponse) GoString() string {
	return s.String()
}

func (s *QueryUnifiedalarmRulebindingResponse) SetReqMsgId(v string) *QueryUnifiedalarmRulebindingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnifiedalarmRulebindingResponse) SetResultCode(v string) *QueryUnifiedalarmRulebindingResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnifiedalarmRulebindingResponse) SetResultMsg(v string) *QueryUnifiedalarmRulebindingResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnifiedalarmRulebindingResponse) SetRuleBindings(v []*UnifiedAlarmRuleBindingVO) *QueryUnifiedalarmRulebindingResponse {
	s.RuleBindings = v
	return s
}

type QueryOpsCheckRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	//
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 应用名
	App *string `json:"app,omitempty" xml:"app,omitempty"`
	// 应用监控指标状态 0：异常 1：正常 不传：全部
	AppStatus *int64 `json:"app_status,omitempty" xml:"app_status,omitempty"`
	// 自定义监控指标状态 0：异常 1：正常 不传：全部
	CustomStatus *int64 `json:"custom_status,omitempty" xml:"custom_status,omitempty"`
}

func (s QueryOpsCheckRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsCheckRequest) GoString() string {
	return s.String()
}

func (s *QueryOpsCheckRequest) SetAuthToken(v string) *QueryOpsCheckRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOpsCheckRequest) SetWorkspaceName(v string) *QueryOpsCheckRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryOpsCheckRequest) SetCurrentPage(v int64) *QueryOpsCheckRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryOpsCheckRequest) SetPageSize(v int64) *QueryOpsCheckRequest {
	s.PageSize = &v
	return s
}

func (s *QueryOpsCheckRequest) SetApp(v string) *QueryOpsCheckRequest {
	s.App = &v
	return s
}

func (s *QueryOpsCheckRequest) SetAppStatus(v int64) *QueryOpsCheckRequest {
	s.AppStatus = &v
	return s
}

func (s *QueryOpsCheckRequest) SetCustomStatus(v int64) *QueryOpsCheckRequest {
	s.CustomStatus = &v
	return s
}

type QueryOpsCheckResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ops_check_results
	OpsCheckResults []*OpsCheckResult `json:"ops_check_results,omitempty" xml:"ops_check_results,omitempty" type:"Repeated"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryOpsCheckResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsCheckResponse) GoString() string {
	return s.String()
}

func (s *QueryOpsCheckResponse) SetReqMsgId(v string) *QueryOpsCheckResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOpsCheckResponse) SetResultCode(v string) *QueryOpsCheckResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOpsCheckResponse) SetResultMsg(v string) *QueryOpsCheckResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOpsCheckResponse) SetOpsCheckResults(v []*OpsCheckResult) *QueryOpsCheckResponse {
	s.OpsCheckResults = v
	return s
}

func (s *QueryOpsCheckResponse) SetTotalCount(v int64) *QueryOpsCheckResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryOpsCheckResponse) SetCurrentPage(v int64) *QueryOpsCheckResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryOpsCheckResponse) SetPageSize(v int64) *QueryOpsCheckResponse {
	s.PageSize = &v
	return s
}

type QueryOpsAppcheckRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名称
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
	// 0：异常 1：正常
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s QueryOpsAppcheckRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsAppcheckRequest) GoString() string {
	return s.String()
}

func (s *QueryOpsAppcheckRequest) SetAuthToken(v string) *QueryOpsAppcheckRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOpsAppcheckRequest) SetWorkspaceName(v string) *QueryOpsAppcheckRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryOpsAppcheckRequest) SetApp(v string) *QueryOpsAppcheckRequest {
	s.App = &v
	return s
}

func (s *QueryOpsAppcheckRequest) SetStatus(v int64) *QueryOpsAppcheckRequest {
	s.Status = &v
	return s
}

type QueryOpsAppcheckResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用诊断
	OpsDataChecks []*OpsDataCheck `json:"ops_data_checks,omitempty" xml:"ops_data_checks,omitempty" type:"Repeated"`
}

func (s QueryOpsAppcheckResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsAppcheckResponse) GoString() string {
	return s.String()
}

func (s *QueryOpsAppcheckResponse) SetReqMsgId(v string) *QueryOpsAppcheckResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOpsAppcheckResponse) SetResultCode(v string) *QueryOpsAppcheckResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOpsAppcheckResponse) SetResultMsg(v string) *QueryOpsAppcheckResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOpsAppcheckResponse) SetOpsDataChecks(v []*OpsDataCheck) *QueryOpsAppcheckResponse {
	s.OpsDataChecks = v
	return s
}

type CreateAlarmDingdingrobotRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作区名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 钉钉机器人列表
	Robots []*DingDingRobot `json:"robots,omitempty" xml:"robots,omitempty" require:"true" type:"Repeated"`
}

func (s CreateAlarmDingdingrobotRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAlarmDingdingrobotRequest) GoString() string {
	return s.String()
}

func (s *CreateAlarmDingdingrobotRequest) SetAuthToken(v string) *CreateAlarmDingdingrobotRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAlarmDingdingrobotRequest) SetWorkspaceName(v string) *CreateAlarmDingdingrobotRequest {
	s.WorkspaceName = &v
	return s
}

func (s *CreateAlarmDingdingrobotRequest) SetRobots(v []*DingDingRobot) *CreateAlarmDingdingrobotRequest {
	s.Robots = v
	return s
}

type CreateAlarmDingdingrobotResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateAlarmDingdingrobotResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAlarmDingdingrobotResponse) GoString() string {
	return s.String()
}

func (s *CreateAlarmDingdingrobotResponse) SetReqMsgId(v string) *CreateAlarmDingdingrobotResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAlarmDingdingrobotResponse) SetResultCode(v string) *CreateAlarmDingdingrobotResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAlarmDingdingrobotResponse) SetResultMsg(v string) *CreateAlarmDingdingrobotResponse {
	s.ResultMsg = &v
	return s
}

type QueryAlarmDingdingrobotRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作区名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 只看当前用户创建的钉钉机器人
	OnlyCurrentStaff *bool `json:"only_current_staff,omitempty" xml:"only_current_staff,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页面尺寸
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 机器人名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 根据token过滤
	Token *string `json:"token,omitempty" xml:"token,omitempty"`
}

func (s QueryAlarmDingdingrobotRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmDingdingrobotRequest) GoString() string {
	return s.String()
}

func (s *QueryAlarmDingdingrobotRequest) SetAuthToken(v string) *QueryAlarmDingdingrobotRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAlarmDingdingrobotRequest) SetWorkspaceName(v string) *QueryAlarmDingdingrobotRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryAlarmDingdingrobotRequest) SetOnlyCurrentStaff(v bool) *QueryAlarmDingdingrobotRequest {
	s.OnlyCurrentStaff = &v
	return s
}

func (s *QueryAlarmDingdingrobotRequest) SetCurrentPage(v int64) *QueryAlarmDingdingrobotRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryAlarmDingdingrobotRequest) SetPageSize(v int64) *QueryAlarmDingdingrobotRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAlarmDingdingrobotRequest) SetName(v string) *QueryAlarmDingdingrobotRequest {
	s.Name = &v
	return s
}

func (s *QueryAlarmDingdingrobotRequest) SetToken(v string) *QueryAlarmDingdingrobotRequest {
	s.Token = &v
	return s
}

type QueryAlarmDingdingrobotResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 钉钉机器人列表
	Robots []*DingDingRobot `json:"robots,omitempty" xml:"robots,omitempty" type:"Repeated"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总记录数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryAlarmDingdingrobotResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmDingdingrobotResponse) GoString() string {
	return s.String()
}

func (s *QueryAlarmDingdingrobotResponse) SetReqMsgId(v string) *QueryAlarmDingdingrobotResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAlarmDingdingrobotResponse) SetResultCode(v string) *QueryAlarmDingdingrobotResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAlarmDingdingrobotResponse) SetResultMsg(v string) *QueryAlarmDingdingrobotResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAlarmDingdingrobotResponse) SetRobots(v []*DingDingRobot) *QueryAlarmDingdingrobotResponse {
	s.Robots = v
	return s
}

func (s *QueryAlarmDingdingrobotResponse) SetCurrentPage(v int64) *QueryAlarmDingdingrobotResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryAlarmDingdingrobotResponse) SetPageSize(v int64) *QueryAlarmDingdingrobotResponse {
	s.PageSize = &v
	return s
}

func (s *QueryAlarmDingdingrobotResponse) SetTotalCount(v int64) *QueryAlarmDingdingrobotResponse {
	s.TotalCount = &v
	return s
}

type DeleteAlarmDingdingrobotRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作区名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 要删除的机器人列表
	Robots []*DingDingRobot `json:"robots,omitempty" xml:"robots,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteAlarmDingdingrobotRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlarmDingdingrobotRequest) GoString() string {
	return s.String()
}

func (s *DeleteAlarmDingdingrobotRequest) SetAuthToken(v string) *DeleteAlarmDingdingrobotRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteAlarmDingdingrobotRequest) SetWorkspaceName(v string) *DeleteAlarmDingdingrobotRequest {
	s.WorkspaceName = &v
	return s
}

func (s *DeleteAlarmDingdingrobotRequest) SetRobots(v []*DingDingRobot) *DeleteAlarmDingdingrobotRequest {
	s.Robots = v
	return s
}

type DeleteAlarmDingdingrobotResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteAlarmDingdingrobotResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlarmDingdingrobotResponse) GoString() string {
	return s.String()
}

func (s *DeleteAlarmDingdingrobotResponse) SetReqMsgId(v string) *DeleteAlarmDingdingrobotResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteAlarmDingdingrobotResponse) SetResultCode(v string) *DeleteAlarmDingdingrobotResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteAlarmDingdingrobotResponse) SetResultMsg(v string) *DeleteAlarmDingdingrobotResponse {
	s.ResultMsg = &v
	return s
}

type UpdateAlarmDingdingrobotRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作区名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 更新的机器人清单
	Robots []*DingDingRobot `json:"robots,omitempty" xml:"robots,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateAlarmDingdingrobotRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlarmDingdingrobotRequest) GoString() string {
	return s.String()
}

func (s *UpdateAlarmDingdingrobotRequest) SetAuthToken(v string) *UpdateAlarmDingdingrobotRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateAlarmDingdingrobotRequest) SetWorkspaceName(v string) *UpdateAlarmDingdingrobotRequest {
	s.WorkspaceName = &v
	return s
}

func (s *UpdateAlarmDingdingrobotRequest) SetRobots(v []*DingDingRobot) *UpdateAlarmDingdingrobotRequest {
	s.Robots = v
	return s
}

type UpdateAlarmDingdingrobotResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateAlarmDingdingrobotResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlarmDingdingrobotResponse) GoString() string {
	return s.String()
}

func (s *UpdateAlarmDingdingrobotResponse) SetReqMsgId(v string) *UpdateAlarmDingdingrobotResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateAlarmDingdingrobotResponse) SetResultCode(v string) *UpdateAlarmDingdingrobotResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateAlarmDingdingrobotResponse) SetResultMsg(v string) *UpdateAlarmDingdingrobotResponse {
	s.ResultMsg = &v
	return s
}

type QueryAppsAlarmrulecountRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 查询app清单
	Apps []*string `json:"apps,omitempty" xml:"apps,omitempty" require:"true" type:"Repeated"`
}

func (s QueryAppsAlarmrulecountRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppsAlarmrulecountRequest) GoString() string {
	return s.String()
}

func (s *QueryAppsAlarmrulecountRequest) SetAuthToken(v string) *QueryAppsAlarmrulecountRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppsAlarmrulecountRequest) SetApps(v []*string) *QueryAppsAlarmrulecountRequest {
	s.Apps = v
	return s
}

type QueryAppsAlarmrulecountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用告警规则数清单
	AppAlarmRuleCounts []*AppAlarmRuleCount `json:"app_alarm_rule_counts,omitempty" xml:"app_alarm_rule_counts,omitempty" type:"Repeated"`
}

func (s QueryAppsAlarmrulecountResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppsAlarmrulecountResponse) GoString() string {
	return s.String()
}

func (s *QueryAppsAlarmrulecountResponse) SetReqMsgId(v string) *QueryAppsAlarmrulecountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppsAlarmrulecountResponse) SetResultCode(v string) *QueryAppsAlarmrulecountResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppsAlarmrulecountResponse) SetResultMsg(v string) *QueryAppsAlarmrulecountResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppsAlarmrulecountResponse) SetAppAlarmRuleCounts(v []*AppAlarmRuleCount) *QueryAppsAlarmrulecountResponse {
	s.AppAlarmRuleCounts = v
	return s
}

type QueryAppsUnifiedalarmstatsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 告警开始时间
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty"`
	// 告警结束时间
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
}

func (s QueryAppsUnifiedalarmstatsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppsUnifiedalarmstatsRequest) GoString() string {
	return s.String()
}

func (s *QueryAppsUnifiedalarmstatsRequest) SetAuthToken(v string) *QueryAppsUnifiedalarmstatsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppsUnifiedalarmstatsRequest) SetStartTime(v int64) *QueryAppsUnifiedalarmstatsRequest {
	s.StartTime = &v
	return s
}

func (s *QueryAppsUnifiedalarmstatsRequest) SetEndTime(v int64) *QueryAppsUnifiedalarmstatsRequest {
	s.EndTime = &v
	return s
}

type QueryAppsUnifiedalarmstatsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 正在告警的所有应用状态
	AppAlarmStatus []*AppAlarmStats `json:"app_alarm_status,omitempty" xml:"app_alarm_status,omitempty" type:"Repeated"`
	// 总应用数
	TotalAppCount *int64 `json:"total_app_count,omitempty" xml:"total_app_count,omitempty"`
	// 正在告警的应用数
	AlarmAppCount *int64 `json:"alarm_app_count,omitempty" xml:"alarm_app_count,omitempty"`
}

func (s QueryAppsUnifiedalarmstatsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppsUnifiedalarmstatsResponse) GoString() string {
	return s.String()
}

func (s *QueryAppsUnifiedalarmstatsResponse) SetReqMsgId(v string) *QueryAppsUnifiedalarmstatsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppsUnifiedalarmstatsResponse) SetResultCode(v string) *QueryAppsUnifiedalarmstatsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppsUnifiedalarmstatsResponse) SetResultMsg(v string) *QueryAppsUnifiedalarmstatsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppsUnifiedalarmstatsResponse) SetAppAlarmStatus(v []*AppAlarmStats) *QueryAppsUnifiedalarmstatsResponse {
	s.AppAlarmStatus = v
	return s
}

func (s *QueryAppsUnifiedalarmstatsResponse) SetTotalAppCount(v int64) *QueryAppsUnifiedalarmstatsResponse {
	s.TotalAppCount = &v
	return s
}

func (s *QueryAppsUnifiedalarmstatsResponse) SetAlarmAppCount(v int64) *QueryAppsUnifiedalarmstatsResponse {
	s.AlarmAppCount = &v
	return s
}

type SwitchOpsAlarmRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// DATA_OPS： 诊断告警
	// AGENT：agent告警
	//
	AlarmTargetType *string `json:"alarm_target_type,omitempty" xml:"alarm_target_type,omitempty" require:"true"`
	// 1：开启告警
	// 0：暂停告警
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 应用
	AlarmTargetIdentity *string `json:"alarm_target_identity,omitempty" xml:"alarm_target_identity,omitempty"`
}

func (s SwitchOpsAlarmRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchOpsAlarmRequest) GoString() string {
	return s.String()
}

func (s *SwitchOpsAlarmRequest) SetAuthToken(v string) *SwitchOpsAlarmRequest {
	s.AuthToken = &v
	return s
}

func (s *SwitchOpsAlarmRequest) SetWorkspaceName(v string) *SwitchOpsAlarmRequest {
	s.WorkspaceName = &v
	return s
}

func (s *SwitchOpsAlarmRequest) SetAlarmTargetType(v string) *SwitchOpsAlarmRequest {
	s.AlarmTargetType = &v
	return s
}

func (s *SwitchOpsAlarmRequest) SetStatus(v int64) *SwitchOpsAlarmRequest {
	s.Status = &v
	return s
}

func (s *SwitchOpsAlarmRequest) SetAlarmTargetIdentity(v string) *SwitchOpsAlarmRequest {
	s.AlarmTargetIdentity = &v
	return s
}

type SwitchOpsAlarmResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SwitchOpsAlarmResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchOpsAlarmResponse) GoString() string {
	return s.String()
}

func (s *SwitchOpsAlarmResponse) SetReqMsgId(v string) *SwitchOpsAlarmResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SwitchOpsAlarmResponse) SetResultCode(v string) *SwitchOpsAlarmResponse {
	s.ResultCode = &v
	return s
}

func (s *SwitchOpsAlarmResponse) SetResultMsg(v string) *SwitchOpsAlarmResponse {
	s.ResultMsg = &v
	return s
}

type AllTraasmetaTenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s AllTraasmetaTenantRequest) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaTenantRequest) GoString() string {
	return s.String()
}

func (s *AllTraasmetaTenantRequest) SetAuthToken(v string) *AllTraasmetaTenantRequest {
	s.AuthToken = &v
	return s
}

type AllTraasmetaTenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// tenants
	Tenants []*TraasTenantDto `json:"tenants,omitempty" xml:"tenants,omitempty" type:"Repeated"`
}

func (s AllTraasmetaTenantResponse) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaTenantResponse) GoString() string {
	return s.String()
}

func (s *AllTraasmetaTenantResponse) SetReqMsgId(v string) *AllTraasmetaTenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllTraasmetaTenantResponse) SetResultCode(v string) *AllTraasmetaTenantResponse {
	s.ResultCode = &v
	return s
}

func (s *AllTraasmetaTenantResponse) SetResultMsg(v string) *AllTraasmetaTenantResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllTraasmetaTenantResponse) SetTenants(v []*TraasTenantDto) *AllTraasmetaTenantResponse {
	s.Tenants = v
	return s
}

type AllTraasmetaRegionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s AllTraasmetaRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaRegionRequest) GoString() string {
	return s.String()
}

func (s *AllTraasmetaRegionRequest) SetAuthToken(v string) *AllTraasmetaRegionRequest {
	s.AuthToken = &v
	return s
}

type AllTraasmetaRegionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// regions
	Regions []*TraasRegionDto `json:"regions,omitempty" xml:"regions,omitempty" type:"Repeated"`
}

func (s AllTraasmetaRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaRegionResponse) GoString() string {
	return s.String()
}

func (s *AllTraasmetaRegionResponse) SetReqMsgId(v string) *AllTraasmetaRegionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllTraasmetaRegionResponse) SetResultCode(v string) *AllTraasmetaRegionResponse {
	s.ResultCode = &v
	return s
}

func (s *AllTraasmetaRegionResponse) SetResultMsg(v string) *AllTraasmetaRegionResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllTraasmetaRegionResponse) SetRegions(v []*TraasRegionDto) *AllTraasmetaRegionResponse {
	s.Regions = v
	return s
}

type PagequeryTraasmetaTenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
}

func (s PagequeryTraasmetaTenantRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaTenantRequest) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaTenantRequest) SetAuthToken(v string) *PagequeryTraasmetaTenantRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryTraasmetaTenantRequest) SetPageSize(v int64) *PagequeryTraasmetaTenantRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaTenantRequest) SetCurrentPage(v int64) *PagequeryTraasmetaTenantRequest {
	s.CurrentPage = &v
	return s
}

type PagequeryTraasmetaTenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// tenants
	Tenants []*TraasTenantDto `json:"tenants,omitempty" xml:"tenants,omitempty" type:"Repeated"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s PagequeryTraasmetaTenantResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaTenantResponse) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaTenantResponse) SetReqMsgId(v string) *PagequeryTraasmetaTenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryTraasmetaTenantResponse) SetResultCode(v string) *PagequeryTraasmetaTenantResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryTraasmetaTenantResponse) SetResultMsg(v string) *PagequeryTraasmetaTenantResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryTraasmetaTenantResponse) SetTenants(v []*TraasTenantDto) *PagequeryTraasmetaTenantResponse {
	s.Tenants = v
	return s
}

func (s *PagequeryTraasmetaTenantResponse) SetPageSize(v int64) *PagequeryTraasmetaTenantResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaTenantResponse) SetCurrentPage(v int64) *PagequeryTraasmetaTenantResponse {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaTenantResponse) SetTotalCount(v int64) *PagequeryTraasmetaTenantResponse {
	s.TotalCount = &v
	return s
}

type GetTraasmetaTenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetTraasmetaTenantRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaTenantRequest) GoString() string {
	return s.String()
}

func (s *GetTraasmetaTenantRequest) SetAuthToken(v string) *GetTraasmetaTenantRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTraasmetaTenantRequest) SetUuid(v string) *GetTraasmetaTenantRequest {
	s.Uuid = &v
	return s
}

func (s *GetTraasmetaTenantRequest) SetName(v string) *GetTraasmetaTenantRequest {
	s.Name = &v
	return s
}

type GetTraasmetaTenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// tenant
	Tenant *TraasTenantDto `json:"tenant,omitempty" xml:"tenant,omitempty"`
}

func (s GetTraasmetaTenantResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaTenantResponse) GoString() string {
	return s.String()
}

func (s *GetTraasmetaTenantResponse) SetReqMsgId(v string) *GetTraasmetaTenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTraasmetaTenantResponse) SetResultCode(v string) *GetTraasmetaTenantResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTraasmetaTenantResponse) SetResultMsg(v string) *GetTraasmetaTenantResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTraasmetaTenantResponse) SetTenant(v *TraasTenantDto) *GetTraasmetaTenantResponse {
	s.Tenant = v
	return s
}

type QueryTraasmetaTenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
}

func (s QueryTraasmetaTenantRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaTenantRequest) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaTenantRequest) SetAuthToken(v string) *QueryTraasmetaTenantRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraasmetaTenantRequest) SetUuid(v string) *QueryTraasmetaTenantRequest {
	s.Uuid = &v
	return s
}

func (s *QueryTraasmetaTenantRequest) SetName(v string) *QueryTraasmetaTenantRequest {
	s.Name = &v
	return s
}

func (s *QueryTraasmetaTenantRequest) SetSearch(v bool) *QueryTraasmetaTenantRequest {
	s.Search = &v
	return s
}

type QueryTraasmetaTenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// tenants
	Tenants []*TraasTenantDto `json:"tenants,omitempty" xml:"tenants,omitempty" type:"Repeated"`
}

func (s QueryTraasmetaTenantResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaTenantResponse) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaTenantResponse) SetReqMsgId(v string) *QueryTraasmetaTenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraasmetaTenantResponse) SetResultCode(v string) *QueryTraasmetaTenantResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraasmetaTenantResponse) SetResultMsg(v string) *QueryTraasmetaTenantResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraasmetaTenantResponse) SetTenants(v []*TraasTenantDto) *QueryTraasmetaTenantResponse {
	s.Tenants = v
	return s
}

type BatchqueryTraasmetaTenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid数组
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" type:"Repeated"`
	// names
	Names []*string `json:"names,omitempty" xml:"names,omitempty" type:"Repeated"`
}

func (s BatchqueryTraasmetaTenantRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaTenantRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaTenantRequest) SetAuthToken(v string) *BatchqueryTraasmetaTenantRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryTraasmetaTenantRequest) SetUuids(v []*string) *BatchqueryTraasmetaTenantRequest {
	s.Uuids = v
	return s
}

func (s *BatchqueryTraasmetaTenantRequest) SetNames(v []*string) *BatchqueryTraasmetaTenantRequest {
	s.Names = v
	return s
}

type BatchqueryTraasmetaTenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// tenants
	Tenants []*TraasTenantDto `json:"tenants,omitempty" xml:"tenants,omitempty" type:"Repeated"`
}

func (s BatchqueryTraasmetaTenantResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaTenantResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaTenantResponse) SetReqMsgId(v string) *BatchqueryTraasmetaTenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryTraasmetaTenantResponse) SetResultCode(v string) *BatchqueryTraasmetaTenantResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryTraasmetaTenantResponse) SetResultMsg(v string) *BatchqueryTraasmetaTenantResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryTraasmetaTenantResponse) SetTenants(v []*TraasTenantDto) *BatchqueryTraasmetaTenantResponse {
	s.Tenants = v
	return s
}

type CreateTraasmetaTenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// tenant name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outsideId
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty"`
}

func (s CreateTraasmetaTenantRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaTenantRequest) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaTenantRequest) SetAuthToken(v string) *CreateTraasmetaTenantRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateTraasmetaTenantRequest) SetName(v string) *CreateTraasmetaTenantRequest {
	s.Name = &v
	return s
}

func (s *CreateTraasmetaTenantRequest) SetDisplayName(v string) *CreateTraasmetaTenantRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateTraasmetaTenantRequest) SetOutsideId(v string) *CreateTraasmetaTenantRequest {
	s.OutsideId = &v
	return s
}

func (s *CreateTraasmetaTenantRequest) SetSourceFrom(v string) *CreateTraasmetaTenantRequest {
	s.SourceFrom = &v
	return s
}

type CreateTraasmetaTenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// tenant
	Tenant *TraasTenantDto `json:"tenant,omitempty" xml:"tenant,omitempty"`
}

func (s CreateTraasmetaTenantResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaTenantResponse) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaTenantResponse) SetReqMsgId(v string) *CreateTraasmetaTenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateTraasmetaTenantResponse) SetResultCode(v string) *CreateTraasmetaTenantResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateTraasmetaTenantResponse) SetResultMsg(v string) *CreateTraasmetaTenantResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateTraasmetaTenantResponse) SetTenant(v *TraasTenantDto) *CreateTraasmetaTenantResponse {
	s.Tenant = v
	return s
}

type BatchcreateTraasmetaTenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 租户列表
	Tenants []*TraasTenantDto `json:"tenants,omitempty" xml:"tenants,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateTraasmetaTenantRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaTenantRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaTenantRequest) SetAuthToken(v string) *BatchcreateTraasmetaTenantRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateTraasmetaTenantRequest) SetTenants(v []*TraasTenantDto) *BatchcreateTraasmetaTenantRequest {
	s.Tenants = v
	return s
}

type BatchcreateTraasmetaTenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// tenants
	Tenants []*TraasTenantDto `json:"tenants,omitempty" xml:"tenants,omitempty" type:"Repeated"`
}

func (s BatchcreateTraasmetaTenantResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaTenantResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaTenantResponse) SetReqMsgId(v string) *BatchcreateTraasmetaTenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateTraasmetaTenantResponse) SetResultCode(v string) *BatchcreateTraasmetaTenantResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateTraasmetaTenantResponse) SetResultMsg(v string) *BatchcreateTraasmetaTenantResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateTraasmetaTenantResponse) SetTenants(v []*TraasTenantDto) *BatchcreateTraasmetaTenantResponse {
	s.Tenants = v
	return s
}

type UpdateTraasmetaTenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty" require:"true"`
}

func (s UpdateTraasmetaTenantRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaTenantRequest) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaTenantRequest) SetAuthToken(v string) *UpdateTraasmetaTenantRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateTraasmetaTenantRequest) SetUuid(v string) *UpdateTraasmetaTenantRequest {
	s.Uuid = &v
	return s
}

func (s *UpdateTraasmetaTenantRequest) SetDisplayName(v string) *UpdateTraasmetaTenantRequest {
	s.DisplayName = &v
	return s
}

func (s *UpdateTraasmetaTenantRequest) SetOutsideId(v string) *UpdateTraasmetaTenantRequest {
	s.OutsideId = &v
	return s
}

type UpdateTraasmetaTenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// tenant
	Tenant *TraasTenantDto `json:"tenant,omitempty" xml:"tenant,omitempty"`
}

func (s UpdateTraasmetaTenantResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaTenantResponse) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaTenantResponse) SetReqMsgId(v string) *UpdateTraasmetaTenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateTraasmetaTenantResponse) SetResultCode(v string) *UpdateTraasmetaTenantResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateTraasmetaTenantResponse) SetResultMsg(v string) *UpdateTraasmetaTenantResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateTraasmetaTenantResponse) SetTenant(v *TraasTenantDto) *UpdateTraasmetaTenantResponse {
	s.Tenant = v
	return s
}

type DeleteTraasmetaTenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
}

func (s DeleteTraasmetaTenantRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaTenantRequest) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaTenantRequest) SetAuthToken(v string) *DeleteTraasmetaTenantRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteTraasmetaTenantRequest) SetUuid(v string) *DeleteTraasmetaTenantRequest {
	s.Uuid = &v
	return s
}

type DeleteTraasmetaTenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteTraasmetaTenantResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaTenantResponse) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaTenantResponse) SetReqMsgId(v string) *DeleteTraasmetaTenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteTraasmetaTenantResponse) SetResultCode(v string) *DeleteTraasmetaTenantResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteTraasmetaTenantResponse) SetResultMsg(v string) *DeleteTraasmetaTenantResponse {
	s.ResultMsg = &v
	return s
}

type BatchdeleteTraasmetaTenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteTraasmetaTenantRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaTenantRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaTenantRequest) SetAuthToken(v string) *BatchdeleteTraasmetaTenantRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteTraasmetaTenantRequest) SetUuids(v []*string) *BatchdeleteTraasmetaTenantRequest {
	s.Uuids = v
	return s
}

type BatchdeleteTraasmetaTenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteTraasmetaTenantResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaTenantResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaTenantResponse) SetReqMsgId(v string) *BatchdeleteTraasmetaTenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteTraasmetaTenantResponse) SetResultCode(v string) *BatchdeleteTraasmetaTenantResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteTraasmetaTenantResponse) SetResultMsg(v string) *BatchdeleteTraasmetaTenantResponse {
	s.ResultMsg = &v
	return s
}

type GetTraasmetaRegionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s GetTraasmetaRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaRegionRequest) GoString() string {
	return s.String()
}

func (s *GetTraasmetaRegionRequest) SetAuthToken(v string) *GetTraasmetaRegionRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTraasmetaRegionRequest) SetUuid(v string) *GetTraasmetaRegionRequest {
	s.Uuid = &v
	return s
}

func (s *GetTraasmetaRegionRequest) SetName(v string) *GetTraasmetaRegionRequest {
	s.Name = &v
	return s
}

func (s *GetTraasmetaRegionRequest) SetTenantUuid(v string) *GetTraasmetaRegionRequest {
	s.TenantUuid = &v
	return s
}

func (s *GetTraasmetaRegionRequest) SetTenantName(v string) *GetTraasmetaRegionRequest {
	s.TenantName = &v
	return s
}

type GetTraasmetaRegionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// traasregiondto
	Region *TraasRegionDto `json:"region,omitempty" xml:"region,omitempty"`
}

func (s GetTraasmetaRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaRegionResponse) GoString() string {
	return s.String()
}

func (s *GetTraasmetaRegionResponse) SetReqMsgId(v string) *GetTraasmetaRegionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTraasmetaRegionResponse) SetResultCode(v string) *GetTraasmetaRegionResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTraasmetaRegionResponse) SetResultMsg(v string) *GetTraasmetaRegionResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTraasmetaRegionResponse) SetRegion(v *TraasRegionDto) *GetTraasmetaRegionResponse {
	s.Region = v
	return s
}

type AllTraasmetaZoneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s AllTraasmetaZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaZoneRequest) GoString() string {
	return s.String()
}

func (s *AllTraasmetaZoneRequest) SetAuthToken(v string) *AllTraasmetaZoneRequest {
	s.AuthToken = &v
	return s
}

type AllTraasmetaZoneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// zones
	Zones []*TraasZoneDto `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
}

func (s AllTraasmetaZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaZoneResponse) GoString() string {
	return s.String()
}

func (s *AllTraasmetaZoneResponse) SetReqMsgId(v string) *AllTraasmetaZoneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllTraasmetaZoneResponse) SetResultCode(v string) *AllTraasmetaZoneResponse {
	s.ResultCode = &v
	return s
}

func (s *AllTraasmetaZoneResponse) SetResultMsg(v string) *AllTraasmetaZoneResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllTraasmetaZoneResponse) SetZones(v []*TraasZoneDto) *AllTraasmetaZoneResponse {
	s.Zones = v
	return s
}

type GetTraasmetaZoneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s GetTraasmetaZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaZoneRequest) GoString() string {
	return s.String()
}

func (s *GetTraasmetaZoneRequest) SetAuthToken(v string) *GetTraasmetaZoneRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTraasmetaZoneRequest) SetUuid(v string) *GetTraasmetaZoneRequest {
	s.Uuid = &v
	return s
}

func (s *GetTraasmetaZoneRequest) SetName(v string) *GetTraasmetaZoneRequest {
	s.Name = &v
	return s
}

func (s *GetTraasmetaZoneRequest) SetTenantUuid(v string) *GetTraasmetaZoneRequest {
	s.TenantUuid = &v
	return s
}

func (s *GetTraasmetaZoneRequest) SetTenantName(v string) *GetTraasmetaZoneRequest {
	s.TenantName = &v
	return s
}

type GetTraasmetaZoneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// zone
	Zone *TraasZoneDto `json:"zone,omitempty" xml:"zone,omitempty"`
}

func (s GetTraasmetaZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaZoneResponse) GoString() string {
	return s.String()
}

func (s *GetTraasmetaZoneResponse) SetReqMsgId(v string) *GetTraasmetaZoneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTraasmetaZoneResponse) SetResultCode(v string) *GetTraasmetaZoneResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTraasmetaZoneResponse) SetResultMsg(v string) *GetTraasmetaZoneResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTraasmetaZoneResponse) SetZone(v *TraasZoneDto) *GetTraasmetaZoneResponse {
	s.Zone = v
	return s
}

type CreateTraasmetaRegionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s CreateTraasmetaRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaRegionRequest) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaRegionRequest) SetAuthToken(v string) *CreateTraasmetaRegionRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateTraasmetaRegionRequest) SetName(v string) *CreateTraasmetaRegionRequest {
	s.Name = &v
	return s
}

func (s *CreateTraasmetaRegionRequest) SetDisplayName(v string) *CreateTraasmetaRegionRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateTraasmetaRegionRequest) SetOutsideId(v string) *CreateTraasmetaRegionRequest {
	s.OutsideId = &v
	return s
}

func (s *CreateTraasmetaRegionRequest) SetSourceFrom(v string) *CreateTraasmetaRegionRequest {
	s.SourceFrom = &v
	return s
}

func (s *CreateTraasmetaRegionRequest) SetExtension(v string) *CreateTraasmetaRegionRequest {
	s.Extension = &v
	return s
}

func (s *CreateTraasmetaRegionRequest) SetTenantUuid(v string) *CreateTraasmetaRegionRequest {
	s.TenantUuid = &v
	return s
}

func (s *CreateTraasmetaRegionRequest) SetTenantName(v string) *CreateTraasmetaRegionRequest {
	s.TenantName = &v
	return s
}

type CreateTraasmetaRegionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// region
	Region *TraasRegionDto `json:"region,omitempty" xml:"region,omitempty"`
}

func (s CreateTraasmetaRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaRegionResponse) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaRegionResponse) SetReqMsgId(v string) *CreateTraasmetaRegionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateTraasmetaRegionResponse) SetResultCode(v string) *CreateTraasmetaRegionResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateTraasmetaRegionResponse) SetResultMsg(v string) *CreateTraasmetaRegionResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateTraasmetaRegionResponse) SetRegion(v *TraasRegionDto) *CreateTraasmetaRegionResponse {
	s.Region = v
	return s
}

type UpdateAgentLabelRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 唯一标识数组
	CollectIds []*string `json:"collect_ids,omitempty" xml:"collect_ids,omitempty" require:"true" type:"Repeated"`
	// 标记是否开启告警
	// 1：开启告警
	// 0：关闭告警
	Label *int64 `json:"label,omitempty" xml:"label,omitempty" require:"true"`
}

func (s UpdateAgentLabelRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAgentLabelRequest) GoString() string {
	return s.String()
}

func (s *UpdateAgentLabelRequest) SetAuthToken(v string) *UpdateAgentLabelRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateAgentLabelRequest) SetWorkspaceName(v string) *UpdateAgentLabelRequest {
	s.WorkspaceName = &v
	return s
}

func (s *UpdateAgentLabelRequest) SetCollectIds(v []*string) *UpdateAgentLabelRequest {
	s.CollectIds = v
	return s
}

func (s *UpdateAgentLabelRequest) SetLabel(v int64) *UpdateAgentLabelRequest {
	s.Label = &v
	return s
}

type UpdateAgentLabelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateAgentLabelResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAgentLabelResponse) GoString() string {
	return s.String()
}

func (s *UpdateAgentLabelResponse) SetReqMsgId(v string) *UpdateAgentLabelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateAgentLabelResponse) SetResultCode(v string) *UpdateAgentLabelResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateAgentLabelResponse) SetResultMsg(v string) *UpdateAgentLabelResponse {
	s.ResultMsg = &v
	return s
}

type CreateTraasmetaZoneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// region_uuid
	RegionUuid *string `json:"region_uuid,omitempty" xml:"region_uuid,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s CreateTraasmetaZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaZoneRequest) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaZoneRequest) SetAuthToken(v string) *CreateTraasmetaZoneRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateTraasmetaZoneRequest) SetName(v string) *CreateTraasmetaZoneRequest {
	s.Name = &v
	return s
}

func (s *CreateTraasmetaZoneRequest) SetDisplayName(v string) *CreateTraasmetaZoneRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateTraasmetaZoneRequest) SetOutsideId(v string) *CreateTraasmetaZoneRequest {
	s.OutsideId = &v
	return s
}

func (s *CreateTraasmetaZoneRequest) SetSourceFrom(v string) *CreateTraasmetaZoneRequest {
	s.SourceFrom = &v
	return s
}

func (s *CreateTraasmetaZoneRequest) SetExtension(v string) *CreateTraasmetaZoneRequest {
	s.Extension = &v
	return s
}

func (s *CreateTraasmetaZoneRequest) SetRegionUuid(v string) *CreateTraasmetaZoneRequest {
	s.RegionUuid = &v
	return s
}

func (s *CreateTraasmetaZoneRequest) SetTenantUuid(v string) *CreateTraasmetaZoneRequest {
	s.TenantUuid = &v
	return s
}

func (s *CreateTraasmetaZoneRequest) SetTenantName(v string) *CreateTraasmetaZoneRequest {
	s.TenantName = &v
	return s
}

type CreateTraasmetaZoneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// zone
	Zone *TraasZoneDto `json:"zone,omitempty" xml:"zone,omitempty"`
}

func (s CreateTraasmetaZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaZoneResponse) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaZoneResponse) SetReqMsgId(v string) *CreateTraasmetaZoneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateTraasmetaZoneResponse) SetResultCode(v string) *CreateTraasmetaZoneResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateTraasmetaZoneResponse) SetResultMsg(v string) *CreateTraasmetaZoneResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateTraasmetaZoneResponse) SetZone(v *TraasZoneDto) *CreateTraasmetaZoneResponse {
	s.Zone = v
	return s
}

type DeleteTraasmetaRegionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
}

func (s DeleteTraasmetaRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaRegionRequest) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaRegionRequest) SetAuthToken(v string) *DeleteTraasmetaRegionRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteTraasmetaRegionRequest) SetUuid(v string) *DeleteTraasmetaRegionRequest {
	s.Uuid = &v
	return s
}

type DeleteTraasmetaRegionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteTraasmetaRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaRegionResponse) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaRegionResponse) SetReqMsgId(v string) *DeleteTraasmetaRegionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteTraasmetaRegionResponse) SetResultCode(v string) *DeleteTraasmetaRegionResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteTraasmetaRegionResponse) SetResultMsg(v string) *DeleteTraasmetaRegionResponse {
	s.ResultMsg = &v
	return s
}

type DeleteTraasmetaZoneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
}

func (s DeleteTraasmetaZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaZoneRequest) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaZoneRequest) SetAuthToken(v string) *DeleteTraasmetaZoneRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteTraasmetaZoneRequest) SetUuid(v string) *DeleteTraasmetaZoneRequest {
	s.Uuid = &v
	return s
}

type DeleteTraasmetaZoneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteTraasmetaZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaZoneResponse) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaZoneResponse) SetReqMsgId(v string) *DeleteTraasmetaZoneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteTraasmetaZoneResponse) SetResultCode(v string) *DeleteTraasmetaZoneResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteTraasmetaZoneResponse) SetResultMsg(v string) *DeleteTraasmetaZoneResponse {
	s.ResultMsg = &v
	return s
}

type UpdateTraasmetaRegionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s UpdateTraasmetaRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaRegionRequest) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaRegionRequest) SetAuthToken(v string) *UpdateTraasmetaRegionRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateTraasmetaRegionRequest) SetUuid(v string) *UpdateTraasmetaRegionRequest {
	s.Uuid = &v
	return s
}

func (s *UpdateTraasmetaRegionRequest) SetDisplayName(v string) *UpdateTraasmetaRegionRequest {
	s.DisplayName = &v
	return s
}

func (s *UpdateTraasmetaRegionRequest) SetOutsideId(v string) *UpdateTraasmetaRegionRequest {
	s.OutsideId = &v
	return s
}

func (s *UpdateTraasmetaRegionRequest) SetExtension(v string) *UpdateTraasmetaRegionRequest {
	s.Extension = &v
	return s
}

func (s *UpdateTraasmetaRegionRequest) SetName(v string) *UpdateTraasmetaRegionRequest {
	s.Name = &v
	return s
}

func (s *UpdateTraasmetaRegionRequest) SetTenantUuid(v string) *UpdateTraasmetaRegionRequest {
	s.TenantUuid = &v
	return s
}

func (s *UpdateTraasmetaRegionRequest) SetTenantName(v string) *UpdateTraasmetaRegionRequest {
	s.TenantName = &v
	return s
}

type UpdateTraasmetaRegionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// region
	Region *TraasRegionDto `json:"region,omitempty" xml:"region,omitempty"`
}

func (s UpdateTraasmetaRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaRegionResponse) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaRegionResponse) SetReqMsgId(v string) *UpdateTraasmetaRegionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateTraasmetaRegionResponse) SetResultCode(v string) *UpdateTraasmetaRegionResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateTraasmetaRegionResponse) SetResultMsg(v string) *UpdateTraasmetaRegionResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateTraasmetaRegionResponse) SetRegion(v *TraasRegionDto) *UpdateTraasmetaRegionResponse {
	s.Region = v
	return s
}

type UpdateTraasmetaZoneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// region_uuid
	RegionUuid *string `json:"region_uuid,omitempty" xml:"region_uuid,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s UpdateTraasmetaZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaZoneRequest) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaZoneRequest) SetAuthToken(v string) *UpdateTraasmetaZoneRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateTraasmetaZoneRequest) SetUuid(v string) *UpdateTraasmetaZoneRequest {
	s.Uuid = &v
	return s
}

func (s *UpdateTraasmetaZoneRequest) SetName(v string) *UpdateTraasmetaZoneRequest {
	s.Name = &v
	return s
}

func (s *UpdateTraasmetaZoneRequest) SetDisplayName(v string) *UpdateTraasmetaZoneRequest {
	s.DisplayName = &v
	return s
}

func (s *UpdateTraasmetaZoneRequest) SetOutsideId(v string) *UpdateTraasmetaZoneRequest {
	s.OutsideId = &v
	return s
}

func (s *UpdateTraasmetaZoneRequest) SetExtension(v string) *UpdateTraasmetaZoneRequest {
	s.Extension = &v
	return s
}

func (s *UpdateTraasmetaZoneRequest) SetRegionUuid(v string) *UpdateTraasmetaZoneRequest {
	s.RegionUuid = &v
	return s
}

func (s *UpdateTraasmetaZoneRequest) SetTenantUuid(v string) *UpdateTraasmetaZoneRequest {
	s.TenantUuid = &v
	return s
}

func (s *UpdateTraasmetaZoneRequest) SetTenantName(v string) *UpdateTraasmetaZoneRequest {
	s.TenantName = &v
	return s
}

type UpdateTraasmetaZoneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// zone
	Zone *TraasZoneDto `json:"zone,omitempty" xml:"zone,omitempty"`
}

func (s UpdateTraasmetaZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaZoneResponse) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaZoneResponse) SetReqMsgId(v string) *UpdateTraasmetaZoneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateTraasmetaZoneResponse) SetResultCode(v string) *UpdateTraasmetaZoneResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateTraasmetaZoneResponse) SetResultMsg(v string) *UpdateTraasmetaZoneResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateTraasmetaZoneResponse) SetZone(v *TraasZoneDto) *UpdateTraasmetaZoneResponse {
	s.Zone = v
	return s
}

type QueryTraasmetaRegionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s QueryTraasmetaRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaRegionRequest) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaRegionRequest) SetAuthToken(v string) *QueryTraasmetaRegionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraasmetaRegionRequest) SetUuid(v string) *QueryTraasmetaRegionRequest {
	s.Uuid = &v
	return s
}

func (s *QueryTraasmetaRegionRequest) SetName(v string) *QueryTraasmetaRegionRequest {
	s.Name = &v
	return s
}

func (s *QueryTraasmetaRegionRequest) SetSearch(v bool) *QueryTraasmetaRegionRequest {
	s.Search = &v
	return s
}

func (s *QueryTraasmetaRegionRequest) SetTenantUuid(v string) *QueryTraasmetaRegionRequest {
	s.TenantUuid = &v
	return s
}

func (s *QueryTraasmetaRegionRequest) SetTenantName(v string) *QueryTraasmetaRegionRequest {
	s.TenantName = &v
	return s
}

type QueryTraasmetaRegionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// regions
	//
	Regions []*TraasRegionDto `json:"regions,omitempty" xml:"regions,omitempty" type:"Repeated"`
}

func (s QueryTraasmetaRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaRegionResponse) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaRegionResponse) SetReqMsgId(v string) *QueryTraasmetaRegionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraasmetaRegionResponse) SetResultCode(v string) *QueryTraasmetaRegionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraasmetaRegionResponse) SetResultMsg(v string) *QueryTraasmetaRegionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraasmetaRegionResponse) SetRegions(v []*TraasRegionDto) *QueryTraasmetaRegionResponse {
	s.Regions = v
	return s
}

type QueryTraasmetaZoneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s QueryTraasmetaZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaZoneRequest) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaZoneRequest) SetAuthToken(v string) *QueryTraasmetaZoneRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraasmetaZoneRequest) SetUuid(v string) *QueryTraasmetaZoneRequest {
	s.Uuid = &v
	return s
}

func (s *QueryTraasmetaZoneRequest) SetName(v string) *QueryTraasmetaZoneRequest {
	s.Name = &v
	return s
}

func (s *QueryTraasmetaZoneRequest) SetSearch(v bool) *QueryTraasmetaZoneRequest {
	s.Search = &v
	return s
}

func (s *QueryTraasmetaZoneRequest) SetTenantUuid(v string) *QueryTraasmetaZoneRequest {
	s.TenantUuid = &v
	return s
}

func (s *QueryTraasmetaZoneRequest) SetTenantName(v string) *QueryTraasmetaZoneRequest {
	s.TenantName = &v
	return s
}

type QueryTraasmetaZoneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// zones
	//
	Zones []*TraasZoneDto `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
}

func (s QueryTraasmetaZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaZoneResponse) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaZoneResponse) SetReqMsgId(v string) *QueryTraasmetaZoneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraasmetaZoneResponse) SetResultCode(v string) *QueryTraasmetaZoneResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraasmetaZoneResponse) SetResultMsg(v string) *QueryTraasmetaZoneResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraasmetaZoneResponse) SetZones(v []*TraasZoneDto) *QueryTraasmetaZoneResponse {
	s.Zones = v
	return s
}

type PagequeryTraasmetaRegionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	//
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s PagequeryTraasmetaRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaRegionRequest) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaRegionRequest) SetAuthToken(v string) *PagequeryTraasmetaRegionRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryTraasmetaRegionRequest) SetPageSize(v int64) *PagequeryTraasmetaRegionRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaRegionRequest) SetCurrentPage(v int64) *PagequeryTraasmetaRegionRequest {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaRegionRequest) SetTenantUuid(v string) *PagequeryTraasmetaRegionRequest {
	s.TenantUuid = &v
	return s
}

func (s *PagequeryTraasmetaRegionRequest) SetTenantName(v string) *PagequeryTraasmetaRegionRequest {
	s.TenantName = &v
	return s
}

func (s *PagequeryTraasmetaRegionRequest) SetSearch(v bool) *PagequeryTraasmetaRegionRequest {
	s.Search = &v
	return s
}

func (s *PagequeryTraasmetaRegionRequest) SetName(v string) *PagequeryTraasmetaRegionRequest {
	s.Name = &v
	return s
}

type PagequeryTraasmetaRegionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// regions
	Regions []*TraasRegionDto `json:"regions,omitempty" xml:"regions,omitempty" type:"Repeated"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s PagequeryTraasmetaRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaRegionResponse) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaRegionResponse) SetReqMsgId(v string) *PagequeryTraasmetaRegionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryTraasmetaRegionResponse) SetResultCode(v string) *PagequeryTraasmetaRegionResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryTraasmetaRegionResponse) SetResultMsg(v string) *PagequeryTraasmetaRegionResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryTraasmetaRegionResponse) SetRegions(v []*TraasRegionDto) *PagequeryTraasmetaRegionResponse {
	s.Regions = v
	return s
}

func (s *PagequeryTraasmetaRegionResponse) SetPageSize(v int64) *PagequeryTraasmetaRegionResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaRegionResponse) SetCurrentPage(v int64) *PagequeryTraasmetaRegionResponse {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaRegionResponse) SetTotalCount(v int64) *PagequeryTraasmetaRegionResponse {
	s.TotalCount = &v
	return s
}

type PagequeryTraasmetaZoneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s PagequeryTraasmetaZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaZoneRequest) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaZoneRequest) SetAuthToken(v string) *PagequeryTraasmetaZoneRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryTraasmetaZoneRequest) SetPageSize(v int64) *PagequeryTraasmetaZoneRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaZoneRequest) SetCurrentPage(v int64) *PagequeryTraasmetaZoneRequest {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaZoneRequest) SetTenantUuid(v string) *PagequeryTraasmetaZoneRequest {
	s.TenantUuid = &v
	return s
}

func (s *PagequeryTraasmetaZoneRequest) SetTenantName(v string) *PagequeryTraasmetaZoneRequest {
	s.TenantName = &v
	return s
}

func (s *PagequeryTraasmetaZoneRequest) SetSearch(v bool) *PagequeryTraasmetaZoneRequest {
	s.Search = &v
	return s
}

func (s *PagequeryTraasmetaZoneRequest) SetName(v string) *PagequeryTraasmetaZoneRequest {
	s.Name = &v
	return s
}

type PagequeryTraasmetaZoneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// zones
	Zones []*TraasZoneDto `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s PagequeryTraasmetaZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaZoneResponse) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaZoneResponse) SetReqMsgId(v string) *PagequeryTraasmetaZoneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryTraasmetaZoneResponse) SetResultCode(v string) *PagequeryTraasmetaZoneResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryTraasmetaZoneResponse) SetResultMsg(v string) *PagequeryTraasmetaZoneResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryTraasmetaZoneResponse) SetZones(v []*TraasZoneDto) *PagequeryTraasmetaZoneResponse {
	s.Zones = v
	return s
}

func (s *PagequeryTraasmetaZoneResponse) SetPageSize(v int64) *PagequeryTraasmetaZoneResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaZoneResponse) SetCurrentPage(v int64) *PagequeryTraasmetaZoneResponse {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaZoneResponse) SetTotalCount(v int64) *PagequeryTraasmetaZoneResponse {
	s.TotalCount = &v
	return s
}

type BatchqueryTraasmetaRegionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" type:"Repeated"`
	// names
	Names []*string `json:"names,omitempty" xml:"names,omitempty" type:"Repeated"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s BatchqueryTraasmetaRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaRegionRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaRegionRequest) SetAuthToken(v string) *BatchqueryTraasmetaRegionRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryTraasmetaRegionRequest) SetUuids(v []*string) *BatchqueryTraasmetaRegionRequest {
	s.Uuids = v
	return s
}

func (s *BatchqueryTraasmetaRegionRequest) SetNames(v []*string) *BatchqueryTraasmetaRegionRequest {
	s.Names = v
	return s
}

func (s *BatchqueryTraasmetaRegionRequest) SetTenantUuid(v string) *BatchqueryTraasmetaRegionRequest {
	s.TenantUuid = &v
	return s
}

func (s *BatchqueryTraasmetaRegionRequest) SetTenantName(v string) *BatchqueryTraasmetaRegionRequest {
	s.TenantName = &v
	return s
}

type BatchqueryTraasmetaRegionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// regions
	Regions []*TraasRegionDto `json:"regions,omitempty" xml:"regions,omitempty" type:"Repeated"`
}

func (s BatchqueryTraasmetaRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaRegionResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaRegionResponse) SetReqMsgId(v string) *BatchqueryTraasmetaRegionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryTraasmetaRegionResponse) SetResultCode(v string) *BatchqueryTraasmetaRegionResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryTraasmetaRegionResponse) SetResultMsg(v string) *BatchqueryTraasmetaRegionResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryTraasmetaRegionResponse) SetRegions(v []*TraasRegionDto) *BatchqueryTraasmetaRegionResponse {
	s.Regions = v
	return s
}

type BatchcreateTraasmetaRegionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// regions
	Regions []*TraasRegionDto `json:"regions,omitempty" xml:"regions,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateTraasmetaRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaRegionRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaRegionRequest) SetAuthToken(v string) *BatchcreateTraasmetaRegionRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateTraasmetaRegionRequest) SetRegions(v []*TraasRegionDto) *BatchcreateTraasmetaRegionRequest {
	s.Regions = v
	return s
}

type BatchcreateTraasmetaRegionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// regions
	Regions []*TraasRegionDto `json:"regions,omitempty" xml:"regions,omitempty" type:"Repeated"`
}

func (s BatchcreateTraasmetaRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaRegionResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaRegionResponse) SetReqMsgId(v string) *BatchcreateTraasmetaRegionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateTraasmetaRegionResponse) SetResultCode(v string) *BatchcreateTraasmetaRegionResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateTraasmetaRegionResponse) SetResultMsg(v string) *BatchcreateTraasmetaRegionResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateTraasmetaRegionResponse) SetRegions(v []*TraasRegionDto) *BatchcreateTraasmetaRegionResponse {
	s.Regions = v
	return s
}

type BatchcreateTraasmetaZoneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// zones
	Zones []*TraasZoneDto `json:"zones,omitempty" xml:"zones,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateTraasmetaZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaZoneRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaZoneRequest) SetAuthToken(v string) *BatchcreateTraasmetaZoneRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateTraasmetaZoneRequest) SetZones(v []*TraasZoneDto) *BatchcreateTraasmetaZoneRequest {
	s.Zones = v
	return s
}

type BatchcreateTraasmetaZoneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// zones
	Zones []*TraasZoneDto `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
}

func (s BatchcreateTraasmetaZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaZoneResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaZoneResponse) SetReqMsgId(v string) *BatchcreateTraasmetaZoneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateTraasmetaZoneResponse) SetResultCode(v string) *BatchcreateTraasmetaZoneResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateTraasmetaZoneResponse) SetResultMsg(v string) *BatchcreateTraasmetaZoneResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateTraasmetaZoneResponse) SetZones(v []*TraasZoneDto) *BatchcreateTraasmetaZoneResponse {
	s.Zones = v
	return s
}

type BatchqueryTraasmetaZoneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" type:"Repeated"`
	// names
	Names []*string `json:"names,omitempty" xml:"names,omitempty" type:"Repeated"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s BatchqueryTraasmetaZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaZoneRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaZoneRequest) SetAuthToken(v string) *BatchqueryTraasmetaZoneRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryTraasmetaZoneRequest) SetUuids(v []*string) *BatchqueryTraasmetaZoneRequest {
	s.Uuids = v
	return s
}

func (s *BatchqueryTraasmetaZoneRequest) SetNames(v []*string) *BatchqueryTraasmetaZoneRequest {
	s.Names = v
	return s
}

func (s *BatchqueryTraasmetaZoneRequest) SetTenantUuid(v string) *BatchqueryTraasmetaZoneRequest {
	s.TenantUuid = &v
	return s
}

func (s *BatchqueryTraasmetaZoneRequest) SetTenantName(v string) *BatchqueryTraasmetaZoneRequest {
	s.TenantName = &v
	return s
}

type BatchqueryTraasmetaZoneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// zones
	Zones []*TraasZoneDto `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
}

func (s BatchqueryTraasmetaZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaZoneResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaZoneResponse) SetReqMsgId(v string) *BatchqueryTraasmetaZoneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryTraasmetaZoneResponse) SetResultCode(v string) *BatchqueryTraasmetaZoneResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryTraasmetaZoneResponse) SetResultMsg(v string) *BatchqueryTraasmetaZoneResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryTraasmetaZoneResponse) SetZones(v []*TraasZoneDto) *BatchqueryTraasmetaZoneResponse {
	s.Zones = v
	return s
}

type BatchdeleteTraasmetaRegionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteTraasmetaRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaRegionRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaRegionRequest) SetAuthToken(v string) *BatchdeleteTraasmetaRegionRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteTraasmetaRegionRequest) SetUuids(v []*string) *BatchdeleteTraasmetaRegionRequest {
	s.Uuids = v
	return s
}

type BatchdeleteTraasmetaRegionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteTraasmetaRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaRegionResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaRegionResponse) SetReqMsgId(v string) *BatchdeleteTraasmetaRegionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteTraasmetaRegionResponse) SetResultCode(v string) *BatchdeleteTraasmetaRegionResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteTraasmetaRegionResponse) SetResultMsg(v string) *BatchdeleteTraasmetaRegionResponse {
	s.ResultMsg = &v
	return s
}

type BatchdeleteTraasmetaZoneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteTraasmetaZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaZoneRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaZoneRequest) SetAuthToken(v string) *BatchdeleteTraasmetaZoneRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteTraasmetaZoneRequest) SetUuids(v []*string) *BatchdeleteTraasmetaZoneRequest {
	s.Uuids = v
	return s
}

type BatchdeleteTraasmetaZoneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteTraasmetaZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaZoneResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaZoneResponse) SetReqMsgId(v string) *BatchdeleteTraasmetaZoneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteTraasmetaZoneResponse) SetResultCode(v string) *BatchdeleteTraasmetaZoneResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteTraasmetaZoneResponse) SetResultMsg(v string) *BatchdeleteTraasmetaZoneResponse {
	s.ResultMsg = &v
	return s
}

type AllTraasmetaAppRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s AllTraasmetaAppRequest) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaAppRequest) GoString() string {
	return s.String()
}

func (s *AllTraasmetaAppRequest) SetAuthToken(v string) *AllTraasmetaAppRequest {
	s.AuthToken = &v
	return s
}

type AllTraasmetaAppResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// appdto
	Apps []*TraasAppDto `json:"apps,omitempty" xml:"apps,omitempty" type:"Repeated"`
}

func (s AllTraasmetaAppResponse) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaAppResponse) GoString() string {
	return s.String()
}

func (s *AllTraasmetaAppResponse) SetReqMsgId(v string) *AllTraasmetaAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllTraasmetaAppResponse) SetResultCode(v string) *AllTraasmetaAppResponse {
	s.ResultCode = &v
	return s
}

func (s *AllTraasmetaAppResponse) SetResultMsg(v string) *AllTraasmetaAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllTraasmetaAppResponse) SetApps(v []*TraasAppDto) *AllTraasmetaAppResponse {
	s.Apps = v
	return s
}

type AllTraasmetaAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s AllTraasmetaAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaAppgroupRequest) GoString() string {
	return s.String()
}

func (s *AllTraasmetaAppgroupRequest) SetAuthToken(v string) *AllTraasmetaAppgroupRequest {
	s.AuthToken = &v
	return s
}

type AllTraasmetaAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// appgroupsdto
	AppGroups []*TraasAppGroupDto `json:"app_groups,omitempty" xml:"app_groups,omitempty" type:"Repeated"`
}

func (s AllTraasmetaAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaAppgroupResponse) GoString() string {
	return s.String()
}

func (s *AllTraasmetaAppgroupResponse) SetReqMsgId(v string) *AllTraasmetaAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllTraasmetaAppgroupResponse) SetResultCode(v string) *AllTraasmetaAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *AllTraasmetaAppgroupResponse) SetResultMsg(v string) *AllTraasmetaAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllTraasmetaAppgroupResponse) SetAppGroups(v []*TraasAppGroupDto) *AllTraasmetaAppgroupResponse {
	s.AppGroups = v
	return s
}

type AllTraasmetaAppserverRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s AllTraasmetaAppserverRequest) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaAppserverRequest) GoString() string {
	return s.String()
}

func (s *AllTraasmetaAppserverRequest) SetAuthToken(v string) *AllTraasmetaAppserverRequest {
	s.AuthToken = &v
	return s
}

type AllTraasmetaAppserverResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_servers
	AppServers []*TraasAppServerDto `json:"app_servers,omitempty" xml:"app_servers,omitempty" type:"Repeated"`
}

func (s AllTraasmetaAppserverResponse) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaAppserverResponse) GoString() string {
	return s.String()
}

func (s *AllTraasmetaAppserverResponse) SetReqMsgId(v string) *AllTraasmetaAppserverResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllTraasmetaAppserverResponse) SetResultCode(v string) *AllTraasmetaAppserverResponse {
	s.ResultCode = &v
	return s
}

func (s *AllTraasmetaAppserverResponse) SetResultMsg(v string) *AllTraasmetaAppserverResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllTraasmetaAppserverResponse) SetAppServers(v []*TraasAppServerDto) *AllTraasmetaAppserverResponse {
	s.AppServers = v
	return s
}

type AllTraasmetaApptagRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s AllTraasmetaApptagRequest) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaApptagRequest) GoString() string {
	return s.String()
}

func (s *AllTraasmetaApptagRequest) SetAuthToken(v string) *AllTraasmetaApptagRequest {
	s.AuthToken = &v
	return s
}

type AllTraasmetaApptagResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_tags
	AppTags []*TraasAppTagDto `json:"app_tags,omitempty" xml:"app_tags,omitempty" type:"Repeated"`
}

func (s AllTraasmetaApptagResponse) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaApptagResponse) GoString() string {
	return s.String()
}

func (s *AllTraasmetaApptagResponse) SetReqMsgId(v string) *AllTraasmetaApptagResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllTraasmetaApptagResponse) SetResultCode(v string) *AllTraasmetaApptagResponse {
	s.ResultCode = &v
	return s
}

func (s *AllTraasmetaApptagResponse) SetResultMsg(v string) *AllTraasmetaApptagResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllTraasmetaApptagResponse) SetAppTags(v []*TraasAppTagDto) *AllTraasmetaApptagResponse {
	s.AppTags = v
	return s
}

type AllTraasmetaWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s AllTraasmetaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *AllTraasmetaWorkspaceRequest) SetAuthToken(v string) *AllTraasmetaWorkspaceRequest {
	s.AuthToken = &v
	return s
}

type AllTraasmetaWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspaces
	Workspaces []*TraasWorkspaceDto `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s AllTraasmetaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *AllTraasmetaWorkspaceResponse) SetReqMsgId(v string) *AllTraasmetaWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllTraasmetaWorkspaceResponse) SetResultCode(v string) *AllTraasmetaWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *AllTraasmetaWorkspaceResponse) SetResultMsg(v string) *AllTraasmetaWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllTraasmetaWorkspaceResponse) SetWorkspaces(v []*TraasWorkspaceDto) *AllTraasmetaWorkspaceResponse {
	s.Workspaces = v
	return s
}

type AllTraasmetaWorkspacegroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s AllTraasmetaWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *AllTraasmetaWorkspacegroupRequest) SetAuthToken(v string) *AllTraasmetaWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

type AllTraasmetaWorkspacegroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspace_groups
	WorkspaceGroups []*TraasWorkspaceGroupDto `json:"workspace_groups,omitempty" xml:"workspace_groups,omitempty" type:"Repeated"`
}

func (s AllTraasmetaWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *AllTraasmetaWorkspacegroupResponse) SetReqMsgId(v string) *AllTraasmetaWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllTraasmetaWorkspacegroupResponse) SetResultCode(v string) *AllTraasmetaWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *AllTraasmetaWorkspacegroupResponse) SetResultMsg(v string) *AllTraasmetaWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllTraasmetaWorkspacegroupResponse) SetWorkspaceGroups(v []*TraasWorkspaceGroupDto) *AllTraasmetaWorkspacegroupResponse {
	s.WorkspaceGroups = v
	return s
}

type BatchcreateTraasmetaWorkspacegroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_groups
	WorkspaceGroups []*TraasWorkspaceGroupDto `json:"workspace_groups,omitempty" xml:"workspace_groups,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateTraasmetaWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaWorkspacegroupRequest) SetAuthToken(v string) *BatchcreateTraasmetaWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateTraasmetaWorkspacegroupRequest) SetWorkspaceGroups(v []*TraasWorkspaceGroupDto) *BatchcreateTraasmetaWorkspacegroupRequest {
	s.WorkspaceGroups = v
	return s
}

type BatchcreateTraasmetaWorkspacegroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspace_groups
	WorkspaceGroups []*TraasWorkspaceGroupDto `json:"workspace_groups,omitempty" xml:"workspace_groups,omitempty" type:"Repeated"`
}

func (s BatchcreateTraasmetaWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaWorkspacegroupResponse) SetReqMsgId(v string) *BatchcreateTraasmetaWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateTraasmetaWorkspacegroupResponse) SetResultCode(v string) *BatchcreateTraasmetaWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateTraasmetaWorkspacegroupResponse) SetResultMsg(v string) *BatchcreateTraasmetaWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateTraasmetaWorkspacegroupResponse) SetWorkspaceGroups(v []*TraasWorkspaceGroupDto) *BatchcreateTraasmetaWorkspacegroupResponse {
	s.WorkspaceGroups = v
	return s
}

type BatchcreateTraasmetaAppRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// apps
	Apps []*TraasAppDto `json:"apps,omitempty" xml:"apps,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateTraasmetaAppRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaAppRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaAppRequest) SetAuthToken(v string) *BatchcreateTraasmetaAppRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateTraasmetaAppRequest) SetApps(v []*TraasAppDto) *BatchcreateTraasmetaAppRequest {
	s.Apps = v
	return s
}

type BatchcreateTraasmetaAppResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// apps
	Apps []*TraasAppDto `json:"apps,omitempty" xml:"apps,omitempty" type:"Repeated"`
}

func (s BatchcreateTraasmetaAppResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaAppResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaAppResponse) SetReqMsgId(v string) *BatchcreateTraasmetaAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateTraasmetaAppResponse) SetResultCode(v string) *BatchcreateTraasmetaAppResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateTraasmetaAppResponse) SetResultMsg(v string) *BatchcreateTraasmetaAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateTraasmetaAppResponse) SetApps(v []*TraasAppDto) *BatchcreateTraasmetaAppResponse {
	s.Apps = v
	return s
}

type BatchcreateTraasmetaAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_groups
	AppGroups []*TraasAppGroupDto `json:"app_groups,omitempty" xml:"app_groups,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateTraasmetaAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaAppgroupRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaAppgroupRequest) SetAuthToken(v string) *BatchcreateTraasmetaAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateTraasmetaAppgroupRequest) SetAppGroups(v []*TraasAppGroupDto) *BatchcreateTraasmetaAppgroupRequest {
	s.AppGroups = v
	return s
}

type BatchcreateTraasmetaAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_groups
	AppGroups []*TraasAppGroupDto `json:"app_groups,omitempty" xml:"app_groups,omitempty" type:"Repeated"`
}

func (s BatchcreateTraasmetaAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaAppgroupResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaAppgroupResponse) SetReqMsgId(v string) *BatchcreateTraasmetaAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateTraasmetaAppgroupResponse) SetResultCode(v string) *BatchcreateTraasmetaAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateTraasmetaAppgroupResponse) SetResultMsg(v string) *BatchcreateTraasmetaAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateTraasmetaAppgroupResponse) SetAppGroups(v []*TraasAppGroupDto) *BatchcreateTraasmetaAppgroupResponse {
	s.AppGroups = v
	return s
}

type BatchcreateTraasmetaAppserverRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_servers
	AppServers []*TraasAppServerDto `json:"app_servers,omitempty" xml:"app_servers,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateTraasmetaAppserverRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaAppserverRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaAppserverRequest) SetAuthToken(v string) *BatchcreateTraasmetaAppserverRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateTraasmetaAppserverRequest) SetAppServers(v []*TraasAppServerDto) *BatchcreateTraasmetaAppserverRequest {
	s.AppServers = v
	return s
}

type BatchcreateTraasmetaAppserverResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_servers
	AppServers []*TraasAppServerDto `json:"app_servers,omitempty" xml:"app_servers,omitempty" type:"Repeated"`
}

func (s BatchcreateTraasmetaAppserverResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaAppserverResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaAppserverResponse) SetReqMsgId(v string) *BatchcreateTraasmetaAppserverResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateTraasmetaAppserverResponse) SetResultCode(v string) *BatchcreateTraasmetaAppserverResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateTraasmetaAppserverResponse) SetResultMsg(v string) *BatchcreateTraasmetaAppserverResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateTraasmetaAppserverResponse) SetAppServers(v []*TraasAppServerDto) *BatchcreateTraasmetaAppserverResponse {
	s.AppServers = v
	return s
}

type BatchcreateTraasmetaApptagRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_tags
	AppTags []*TraasAppTagDto `json:"app_tags,omitempty" xml:"app_tags,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateTraasmetaApptagRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaApptagRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaApptagRequest) SetAuthToken(v string) *BatchcreateTraasmetaApptagRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateTraasmetaApptagRequest) SetAppTags(v []*TraasAppTagDto) *BatchcreateTraasmetaApptagRequest {
	s.AppTags = v
	return s
}

type BatchcreateTraasmetaApptagResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_tags
	AppTags []*TraasAppTagDto `json:"app_tags,omitempty" xml:"app_tags,omitempty" type:"Repeated"`
}

func (s BatchcreateTraasmetaApptagResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaApptagResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaApptagResponse) SetReqMsgId(v string) *BatchcreateTraasmetaApptagResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateTraasmetaApptagResponse) SetResultCode(v string) *BatchcreateTraasmetaApptagResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateTraasmetaApptagResponse) SetResultMsg(v string) *BatchcreateTraasmetaApptagResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateTraasmetaApptagResponse) SetAppTags(v []*TraasAppTagDto) *BatchcreateTraasmetaApptagResponse {
	s.AppTags = v
	return s
}

type BatchcreateTraasmetaWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspaces
	Workspaces []*TraasWorkspaceDto `json:"workspaces,omitempty" xml:"workspaces,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateTraasmetaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaWorkspaceRequest) SetAuthToken(v string) *BatchcreateTraasmetaWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateTraasmetaWorkspaceRequest) SetWorkspaces(v []*TraasWorkspaceDto) *BatchcreateTraasmetaWorkspaceRequest {
	s.Workspaces = v
	return s
}

type BatchcreateTraasmetaWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspaces
	Workspaces []*TraasWorkspaceDto `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s BatchcreateTraasmetaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaWorkspaceResponse) SetReqMsgId(v string) *BatchcreateTraasmetaWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateTraasmetaWorkspaceResponse) SetResultCode(v string) *BatchcreateTraasmetaWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateTraasmetaWorkspaceResponse) SetResultMsg(v string) *BatchcreateTraasmetaWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateTraasmetaWorkspaceResponse) SetWorkspaces(v []*TraasWorkspaceDto) *BatchcreateTraasmetaWorkspaceResponse {
	s.Workspaces = v
	return s
}

type BatchdeleteTraasmetaAppRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteTraasmetaAppRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaAppRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaAppRequest) SetAuthToken(v string) *BatchdeleteTraasmetaAppRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteTraasmetaAppRequest) SetUuids(v []*string) *BatchdeleteTraasmetaAppRequest {
	s.Uuids = v
	return s
}

type BatchdeleteTraasmetaAppResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteTraasmetaAppResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaAppResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaAppResponse) SetReqMsgId(v string) *BatchdeleteTraasmetaAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteTraasmetaAppResponse) SetResultCode(v string) *BatchdeleteTraasmetaAppResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteTraasmetaAppResponse) SetResultMsg(v string) *BatchdeleteTraasmetaAppResponse {
	s.ResultMsg = &v
	return s
}

type BatchdeleteTraasmetaWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteTraasmetaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaWorkspaceRequest) SetAuthToken(v string) *BatchdeleteTraasmetaWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteTraasmetaWorkspaceRequest) SetUuids(v []*string) *BatchdeleteTraasmetaWorkspaceRequest {
	s.Uuids = v
	return s
}

type BatchdeleteTraasmetaWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteTraasmetaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaWorkspaceResponse) SetReqMsgId(v string) *BatchdeleteTraasmetaWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteTraasmetaWorkspaceResponse) SetResultCode(v string) *BatchdeleteTraasmetaWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteTraasmetaWorkspaceResponse) SetResultMsg(v string) *BatchdeleteTraasmetaWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

type BatchdeleteTraasmetaApptagRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteTraasmetaApptagRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaApptagRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaApptagRequest) SetAuthToken(v string) *BatchdeleteTraasmetaApptagRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteTraasmetaApptagRequest) SetUuids(v []*string) *BatchdeleteTraasmetaApptagRequest {
	s.Uuids = v
	return s
}

type BatchdeleteTraasmetaApptagResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteTraasmetaApptagResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaApptagResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaApptagResponse) SetReqMsgId(v string) *BatchdeleteTraasmetaApptagResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteTraasmetaApptagResponse) SetResultCode(v string) *BatchdeleteTraasmetaApptagResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteTraasmetaApptagResponse) SetResultMsg(v string) *BatchdeleteTraasmetaApptagResponse {
	s.ResultMsg = &v
	return s
}

type BatchdeleteTraasmetaAppserverRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteTraasmetaAppserverRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaAppserverRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaAppserverRequest) SetAuthToken(v string) *BatchdeleteTraasmetaAppserverRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteTraasmetaAppserverRequest) SetUuids(v []*string) *BatchdeleteTraasmetaAppserverRequest {
	s.Uuids = v
	return s
}

type BatchdeleteTraasmetaAppserverResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteTraasmetaAppserverResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaAppserverResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaAppserverResponse) SetReqMsgId(v string) *BatchdeleteTraasmetaAppserverResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteTraasmetaAppserverResponse) SetResultCode(v string) *BatchdeleteTraasmetaAppserverResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteTraasmetaAppserverResponse) SetResultMsg(v string) *BatchdeleteTraasmetaAppserverResponse {
	s.ResultMsg = &v
	return s
}

type BatchdeleteTraasmetaAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteTraasmetaAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaAppgroupRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaAppgroupRequest) SetAuthToken(v string) *BatchdeleteTraasmetaAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteTraasmetaAppgroupRequest) SetUuids(v []*string) *BatchdeleteTraasmetaAppgroupRequest {
	s.Uuids = v
	return s
}

type BatchdeleteTraasmetaAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteTraasmetaAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaAppgroupResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaAppgroupResponse) SetReqMsgId(v string) *BatchdeleteTraasmetaAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteTraasmetaAppgroupResponse) SetResultCode(v string) *BatchdeleteTraasmetaAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteTraasmetaAppgroupResponse) SetResultMsg(v string) *BatchdeleteTraasmetaAppgroupResponse {
	s.ResultMsg = &v
	return s
}

type BatchdeleteTraasmetaWorkspacegroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteTraasmetaWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaWorkspacegroupRequest) SetAuthToken(v string) *BatchdeleteTraasmetaWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteTraasmetaWorkspacegroupRequest) SetUuids(v []*string) *BatchdeleteTraasmetaWorkspacegroupRequest {
	s.Uuids = v
	return s
}

type BatchdeleteTraasmetaWorkspacegroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteTraasmetaWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaWorkspacegroupResponse) SetReqMsgId(v string) *BatchdeleteTraasmetaWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteTraasmetaWorkspacegroupResponse) SetResultCode(v string) *BatchdeleteTraasmetaWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteTraasmetaWorkspacegroupResponse) SetResultMsg(v string) *BatchdeleteTraasmetaWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

type BatchqueryTraasmetaWorkspacegroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" type:"Repeated"`
	// names
	Names []*string `json:"names,omitempty" xml:"names,omitempty" type:"Repeated"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s BatchqueryTraasmetaWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaWorkspacegroupRequest) SetAuthToken(v string) *BatchqueryTraasmetaWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryTraasmetaWorkspacegroupRequest) SetUuids(v []*string) *BatchqueryTraasmetaWorkspacegroupRequest {
	s.Uuids = v
	return s
}

func (s *BatchqueryTraasmetaWorkspacegroupRequest) SetNames(v []*string) *BatchqueryTraasmetaWorkspacegroupRequest {
	s.Names = v
	return s
}

func (s *BatchqueryTraasmetaWorkspacegroupRequest) SetTenantUuid(v string) *BatchqueryTraasmetaWorkspacegroupRequest {
	s.TenantUuid = &v
	return s
}

func (s *BatchqueryTraasmetaWorkspacegroupRequest) SetTenantName(v string) *BatchqueryTraasmetaWorkspacegroupRequest {
	s.TenantName = &v
	return s
}

type BatchqueryTraasmetaWorkspacegroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspace_groups
	WorkspaceGroups []*TraasWorkspaceGroupDto `json:"workspace_groups,omitempty" xml:"workspace_groups,omitempty" type:"Repeated"`
}

func (s BatchqueryTraasmetaWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaWorkspacegroupResponse) SetReqMsgId(v string) *BatchqueryTraasmetaWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryTraasmetaWorkspacegroupResponse) SetResultCode(v string) *BatchqueryTraasmetaWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryTraasmetaWorkspacegroupResponse) SetResultMsg(v string) *BatchqueryTraasmetaWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryTraasmetaWorkspacegroupResponse) SetWorkspaceGroups(v []*TraasWorkspaceGroupDto) *BatchqueryTraasmetaWorkspacegroupResponse {
	s.WorkspaceGroups = v
	return s
}

type BatchqueryTraasmetaWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" type:"Repeated"`
	// names
	Names []*string `json:"names,omitempty" xml:"names,omitempty" type:"Repeated"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s BatchqueryTraasmetaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaWorkspaceRequest) SetAuthToken(v string) *BatchqueryTraasmetaWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryTraasmetaWorkspaceRequest) SetUuids(v []*string) *BatchqueryTraasmetaWorkspaceRequest {
	s.Uuids = v
	return s
}

func (s *BatchqueryTraasmetaWorkspaceRequest) SetNames(v []*string) *BatchqueryTraasmetaWorkspaceRequest {
	s.Names = v
	return s
}

func (s *BatchqueryTraasmetaWorkspaceRequest) SetTenantUuid(v string) *BatchqueryTraasmetaWorkspaceRequest {
	s.TenantUuid = &v
	return s
}

func (s *BatchqueryTraasmetaWorkspaceRequest) SetTenantName(v string) *BatchqueryTraasmetaWorkspaceRequest {
	s.TenantName = &v
	return s
}

type BatchqueryTraasmetaWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspaces
	Workspaces []*TraasWorkspaceDto `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s BatchqueryTraasmetaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaWorkspaceResponse) SetReqMsgId(v string) *BatchqueryTraasmetaWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryTraasmetaWorkspaceResponse) SetResultCode(v string) *BatchqueryTraasmetaWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryTraasmetaWorkspaceResponse) SetResultMsg(v string) *BatchqueryTraasmetaWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryTraasmetaWorkspaceResponse) SetWorkspaces(v []*TraasWorkspaceDto) *BatchqueryTraasmetaWorkspaceResponse {
	s.Workspaces = v
	return s
}

type BatchqueryTraasmetaApptagRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" type:"Repeated"`
	// app_names
	AppNames []*string `json:"app_names,omitempty" xml:"app_names,omitempty" type:"Repeated"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// tag_keys
	TagKeys []*string `json:"tag_keys,omitempty" xml:"tag_keys,omitempty" type:"Repeated"`
}

func (s BatchqueryTraasmetaApptagRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaApptagRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaApptagRequest) SetAuthToken(v string) *BatchqueryTraasmetaApptagRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryTraasmetaApptagRequest) SetUuids(v []*string) *BatchqueryTraasmetaApptagRequest {
	s.Uuids = v
	return s
}

func (s *BatchqueryTraasmetaApptagRequest) SetAppNames(v []*string) *BatchqueryTraasmetaApptagRequest {
	s.AppNames = v
	return s
}

func (s *BatchqueryTraasmetaApptagRequest) SetTenantUuid(v string) *BatchqueryTraasmetaApptagRequest {
	s.TenantUuid = &v
	return s
}

func (s *BatchqueryTraasmetaApptagRequest) SetTenantName(v string) *BatchqueryTraasmetaApptagRequest {
	s.TenantName = &v
	return s
}

func (s *BatchqueryTraasmetaApptagRequest) SetTagKeys(v []*string) *BatchqueryTraasmetaApptagRequest {
	s.TagKeys = v
	return s
}

type BatchqueryTraasmetaApptagResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_tags
	AppTags []*TraasAppTagDto `json:"app_tags,omitempty" xml:"app_tags,omitempty" type:"Repeated"`
}

func (s BatchqueryTraasmetaApptagResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaApptagResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaApptagResponse) SetReqMsgId(v string) *BatchqueryTraasmetaApptagResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryTraasmetaApptagResponse) SetResultCode(v string) *BatchqueryTraasmetaApptagResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryTraasmetaApptagResponse) SetResultMsg(v string) *BatchqueryTraasmetaApptagResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryTraasmetaApptagResponse) SetAppTags(v []*TraasAppTagDto) *BatchqueryTraasmetaApptagResponse {
	s.AppTags = v
	return s
}

type BatchqueryTraasmetaAppserverRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" type:"Repeated"`
	// hostnames
	Hostnames []*string `json:"hostnames,omitempty" xml:"hostnames,omitempty" type:"Repeated"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// ips
	Ips []*string `json:"ips,omitempty" xml:"ips,omitempty" type:"Repeated"`
	// app_names
	AppNames []*string `json:"app_names,omitempty" xml:"app_names,omitempty" type:"Repeated"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
}

func (s BatchqueryTraasmetaAppserverRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaAppserverRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaAppserverRequest) SetAuthToken(v string) *BatchqueryTraasmetaAppserverRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryTraasmetaAppserverRequest) SetUuids(v []*string) *BatchqueryTraasmetaAppserverRequest {
	s.Uuids = v
	return s
}

func (s *BatchqueryTraasmetaAppserverRequest) SetHostnames(v []*string) *BatchqueryTraasmetaAppserverRequest {
	s.Hostnames = v
	return s
}

func (s *BatchqueryTraasmetaAppserverRequest) SetTenantUuid(v string) *BatchqueryTraasmetaAppserverRequest {
	s.TenantUuid = &v
	return s
}

func (s *BatchqueryTraasmetaAppserverRequest) SetTenantName(v string) *BatchqueryTraasmetaAppserverRequest {
	s.TenantName = &v
	return s
}

func (s *BatchqueryTraasmetaAppserverRequest) SetIps(v []*string) *BatchqueryTraasmetaAppserverRequest {
	s.Ips = v
	return s
}

func (s *BatchqueryTraasmetaAppserverRequest) SetAppNames(v []*string) *BatchqueryTraasmetaAppserverRequest {
	s.AppNames = v
	return s
}

func (s *BatchqueryTraasmetaAppserverRequest) SetWorkspaceName(v string) *BatchqueryTraasmetaAppserverRequest {
	s.WorkspaceName = &v
	return s
}

type BatchqueryTraasmetaAppserverResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_servers
	AppServers []*TraasAppServerDto `json:"app_servers,omitempty" xml:"app_servers,omitempty" type:"Repeated"`
}

func (s BatchqueryTraasmetaAppserverResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaAppserverResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaAppserverResponse) SetReqMsgId(v string) *BatchqueryTraasmetaAppserverResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryTraasmetaAppserverResponse) SetResultCode(v string) *BatchqueryTraasmetaAppserverResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryTraasmetaAppserverResponse) SetResultMsg(v string) *BatchqueryTraasmetaAppserverResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryTraasmetaAppserverResponse) SetAppServers(v []*TraasAppServerDto) *BatchqueryTraasmetaAppserverResponse {
	s.AppServers = v
	return s
}

type BatchqueryTraasmetaAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" type:"Repeated"`
	// names
	Names []*string `json:"names,omitempty" xml:"names,omitempty" type:"Repeated"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s BatchqueryTraasmetaAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaAppgroupRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaAppgroupRequest) SetAuthToken(v string) *BatchqueryTraasmetaAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryTraasmetaAppgroupRequest) SetUuids(v []*string) *BatchqueryTraasmetaAppgroupRequest {
	s.Uuids = v
	return s
}

func (s *BatchqueryTraasmetaAppgroupRequest) SetNames(v []*string) *BatchqueryTraasmetaAppgroupRequest {
	s.Names = v
	return s
}

func (s *BatchqueryTraasmetaAppgroupRequest) SetTenantUuid(v string) *BatchqueryTraasmetaAppgroupRequest {
	s.TenantUuid = &v
	return s
}

func (s *BatchqueryTraasmetaAppgroupRequest) SetTenantName(v string) *BatchqueryTraasmetaAppgroupRequest {
	s.TenantName = &v
	return s
}

type BatchqueryTraasmetaAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_groups
	AppGroups []*TraasAppGroupDto `json:"app_groups,omitempty" xml:"app_groups,omitempty" type:"Repeated"`
}

func (s BatchqueryTraasmetaAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaAppgroupResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaAppgroupResponse) SetReqMsgId(v string) *BatchqueryTraasmetaAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryTraasmetaAppgroupResponse) SetResultCode(v string) *BatchqueryTraasmetaAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryTraasmetaAppgroupResponse) SetResultMsg(v string) *BatchqueryTraasmetaAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryTraasmetaAppgroupResponse) SetAppGroups(v []*TraasAppGroupDto) *BatchqueryTraasmetaAppgroupResponse {
	s.AppGroups = v
	return s
}

type BatchqueryTraasmetaAppRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" type:"Repeated"`
	// names
	Names []*string `json:"names,omitempty" xml:"names,omitempty" type:"Repeated"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s BatchqueryTraasmetaAppRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaAppRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaAppRequest) SetAuthToken(v string) *BatchqueryTraasmetaAppRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryTraasmetaAppRequest) SetUuids(v []*string) *BatchqueryTraasmetaAppRequest {
	s.Uuids = v
	return s
}

func (s *BatchqueryTraasmetaAppRequest) SetNames(v []*string) *BatchqueryTraasmetaAppRequest {
	s.Names = v
	return s
}

func (s *BatchqueryTraasmetaAppRequest) SetTenantUuid(v string) *BatchqueryTraasmetaAppRequest {
	s.TenantUuid = &v
	return s
}

func (s *BatchqueryTraasmetaAppRequest) SetTenantName(v string) *BatchqueryTraasmetaAppRequest {
	s.TenantName = &v
	return s
}

type BatchqueryTraasmetaAppResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// apps
	Apps []*TraasAppDto `json:"apps,omitempty" xml:"apps,omitempty" type:"Repeated"`
}

func (s BatchqueryTraasmetaAppResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaAppResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaAppResponse) SetReqMsgId(v string) *BatchqueryTraasmetaAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryTraasmetaAppResponse) SetResultCode(v string) *BatchqueryTraasmetaAppResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryTraasmetaAppResponse) SetResultMsg(v string) *BatchqueryTraasmetaAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryTraasmetaAppResponse) SetApps(v []*TraasAppDto) *BatchqueryTraasmetaAppResponse {
	s.Apps = v
	return s
}

type DeleteTraasmetaAppRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
}

func (s DeleteTraasmetaAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaAppRequest) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaAppRequest) SetAuthToken(v string) *DeleteTraasmetaAppRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteTraasmetaAppRequest) SetUuid(v string) *DeleteTraasmetaAppRequest {
	s.Uuid = &v
	return s
}

type DeleteTraasmetaAppResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteTraasmetaAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaAppResponse) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaAppResponse) SetReqMsgId(v string) *DeleteTraasmetaAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteTraasmetaAppResponse) SetResultCode(v string) *DeleteTraasmetaAppResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteTraasmetaAppResponse) SetResultMsg(v string) *DeleteTraasmetaAppResponse {
	s.ResultMsg = &v
	return s
}

type DeleteTraasmetaAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
}

func (s DeleteTraasmetaAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaAppgroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaAppgroupRequest) SetAuthToken(v string) *DeleteTraasmetaAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteTraasmetaAppgroupRequest) SetUuid(v string) *DeleteTraasmetaAppgroupRequest {
	s.Uuid = &v
	return s
}

type DeleteTraasmetaAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteTraasmetaAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaAppgroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaAppgroupResponse) SetReqMsgId(v string) *DeleteTraasmetaAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteTraasmetaAppgroupResponse) SetResultCode(v string) *DeleteTraasmetaAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteTraasmetaAppgroupResponse) SetResultMsg(v string) *DeleteTraasmetaAppgroupResponse {
	s.ResultMsg = &v
	return s
}

type DeleteTraasmetaAppserverRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
}

func (s DeleteTraasmetaAppserverRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaAppserverRequest) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaAppserverRequest) SetAuthToken(v string) *DeleteTraasmetaAppserverRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteTraasmetaAppserverRequest) SetUuid(v string) *DeleteTraasmetaAppserverRequest {
	s.Uuid = &v
	return s
}

type DeleteTraasmetaAppserverResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteTraasmetaAppserverResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaAppserverResponse) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaAppserverResponse) SetReqMsgId(v string) *DeleteTraasmetaAppserverResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteTraasmetaAppserverResponse) SetResultCode(v string) *DeleteTraasmetaAppserverResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteTraasmetaAppserverResponse) SetResultMsg(v string) *DeleteTraasmetaAppserverResponse {
	s.ResultMsg = &v
	return s
}

type DeleteTraasmetaApptagRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
}

func (s DeleteTraasmetaApptagRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaApptagRequest) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaApptagRequest) SetAuthToken(v string) *DeleteTraasmetaApptagRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteTraasmetaApptagRequest) SetUuid(v string) *DeleteTraasmetaApptagRequest {
	s.Uuid = &v
	return s
}

type DeleteTraasmetaApptagResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteTraasmetaApptagResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaApptagResponse) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaApptagResponse) SetReqMsgId(v string) *DeleteTraasmetaApptagResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteTraasmetaApptagResponse) SetResultCode(v string) *DeleteTraasmetaApptagResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteTraasmetaApptagResponse) SetResultMsg(v string) *DeleteTraasmetaApptagResponse {
	s.ResultMsg = &v
	return s
}

type DeleteTraasmetaWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
}

func (s DeleteTraasmetaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaWorkspaceRequest) SetAuthToken(v string) *DeleteTraasmetaWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteTraasmetaWorkspaceRequest) SetUuid(v string) *DeleteTraasmetaWorkspaceRequest {
	s.Uuid = &v
	return s
}

type DeleteTraasmetaWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteTraasmetaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaWorkspaceResponse) SetReqMsgId(v string) *DeleteTraasmetaWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteTraasmetaWorkspaceResponse) SetResultCode(v string) *DeleteTraasmetaWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteTraasmetaWorkspaceResponse) SetResultMsg(v string) *DeleteTraasmetaWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

type DeleteTraasmetaWorkspacegroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
}

func (s DeleteTraasmetaWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaWorkspacegroupRequest) SetAuthToken(v string) *DeleteTraasmetaWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteTraasmetaWorkspacegroupRequest) SetUuid(v string) *DeleteTraasmetaWorkspacegroupRequest {
	s.Uuid = &v
	return s
}

type DeleteTraasmetaWorkspacegroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteTraasmetaWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaWorkspacegroupResponse) SetReqMsgId(v string) *DeleteTraasmetaWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteTraasmetaWorkspacegroupResponse) SetResultCode(v string) *DeleteTraasmetaWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteTraasmetaWorkspacegroupResponse) SetResultMsg(v string) *DeleteTraasmetaWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

type GetTraasmetaAppRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s GetTraasmetaAppRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaAppRequest) GoString() string {
	return s.String()
}

func (s *GetTraasmetaAppRequest) SetAuthToken(v string) *GetTraasmetaAppRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTraasmetaAppRequest) SetUuid(v string) *GetTraasmetaAppRequest {
	s.Uuid = &v
	return s
}

func (s *GetTraasmetaAppRequest) SetName(v string) *GetTraasmetaAppRequest {
	s.Name = &v
	return s
}

func (s *GetTraasmetaAppRequest) SetTenantUuid(v string) *GetTraasmetaAppRequest {
	s.TenantUuid = &v
	return s
}

func (s *GetTraasmetaAppRequest) SetTenantName(v string) *GetTraasmetaAppRequest {
	s.TenantName = &v
	return s
}

type GetTraasmetaAppResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app
	App *TraasAppDto `json:"app,omitempty" xml:"app,omitempty"`
}

func (s GetTraasmetaAppResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaAppResponse) GoString() string {
	return s.String()
}

func (s *GetTraasmetaAppResponse) SetReqMsgId(v string) *GetTraasmetaAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTraasmetaAppResponse) SetResultCode(v string) *GetTraasmetaAppResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTraasmetaAppResponse) SetResultMsg(v string) *GetTraasmetaAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTraasmetaAppResponse) SetApp(v *TraasAppDto) *GetTraasmetaAppResponse {
	s.App = v
	return s
}

type GetTraasmetaAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s GetTraasmetaAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaAppgroupRequest) GoString() string {
	return s.String()
}

func (s *GetTraasmetaAppgroupRequest) SetAuthToken(v string) *GetTraasmetaAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTraasmetaAppgroupRequest) SetUuid(v string) *GetTraasmetaAppgroupRequest {
	s.Uuid = &v
	return s
}

func (s *GetTraasmetaAppgroupRequest) SetName(v string) *GetTraasmetaAppgroupRequest {
	s.Name = &v
	return s
}

func (s *GetTraasmetaAppgroupRequest) SetTenantUuid(v string) *GetTraasmetaAppgroupRequest {
	s.TenantUuid = &v
	return s
}

func (s *GetTraasmetaAppgroupRequest) SetTenantName(v string) *GetTraasmetaAppgroupRequest {
	s.TenantName = &v
	return s
}

type GetTraasmetaAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_group
	AppGroup *TraasAppGroupDto `json:"app_group,omitempty" xml:"app_group,omitempty"`
}

func (s GetTraasmetaAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaAppgroupResponse) GoString() string {
	return s.String()
}

func (s *GetTraasmetaAppgroupResponse) SetReqMsgId(v string) *GetTraasmetaAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTraasmetaAppgroupResponse) SetResultCode(v string) *GetTraasmetaAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTraasmetaAppgroupResponse) SetResultMsg(v string) *GetTraasmetaAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTraasmetaAppgroupResponse) SetAppGroup(v *TraasAppGroupDto) *GetTraasmetaAppgroupResponse {
	s.AppGroup = v
	return s
}

type GetTraasmetaAppserverRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
}

func (s GetTraasmetaAppserverRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaAppserverRequest) GoString() string {
	return s.String()
}

func (s *GetTraasmetaAppserverRequest) SetAuthToken(v string) *GetTraasmetaAppserverRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTraasmetaAppserverRequest) SetUuid(v string) *GetTraasmetaAppserverRequest {
	s.Uuid = &v
	return s
}

func (s *GetTraasmetaAppserverRequest) SetTenantUuid(v string) *GetTraasmetaAppserverRequest {
	s.TenantUuid = &v
	return s
}

func (s *GetTraasmetaAppserverRequest) SetTenantName(v string) *GetTraasmetaAppserverRequest {
	s.TenantName = &v
	return s
}

func (s *GetTraasmetaAppserverRequest) SetIp(v string) *GetTraasmetaAppserverRequest {
	s.Ip = &v
	return s
}

func (s *GetTraasmetaAppserverRequest) SetAppName(v string) *GetTraasmetaAppserverRequest {
	s.AppName = &v
	return s
}

func (s *GetTraasmetaAppserverRequest) SetWorkspaceName(v string) *GetTraasmetaAppserverRequest {
	s.WorkspaceName = &v
	return s
}

type GetTraasmetaAppserverResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_server
	AppServer *TraasAppServerDto `json:"app_server,omitempty" xml:"app_server,omitempty"`
}

func (s GetTraasmetaAppserverResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaAppserverResponse) GoString() string {
	return s.String()
}

func (s *GetTraasmetaAppserverResponse) SetReqMsgId(v string) *GetTraasmetaAppserverResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTraasmetaAppserverResponse) SetResultCode(v string) *GetTraasmetaAppserverResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTraasmetaAppserverResponse) SetResultMsg(v string) *GetTraasmetaAppserverResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTraasmetaAppserverResponse) SetAppServer(v *TraasAppServerDto) *GetTraasmetaAppserverResponse {
	s.AppServer = v
	return s
}

type GetTraasmetaApptagRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// tag_key
	TagKey *string `json:"tag_key,omitempty" xml:"tag_key,omitempty"`
}

func (s GetTraasmetaApptagRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaApptagRequest) GoString() string {
	return s.String()
}

func (s *GetTraasmetaApptagRequest) SetAuthToken(v string) *GetTraasmetaApptagRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTraasmetaApptagRequest) SetUuid(v string) *GetTraasmetaApptagRequest {
	s.Uuid = &v
	return s
}

func (s *GetTraasmetaApptagRequest) SetAppName(v string) *GetTraasmetaApptagRequest {
	s.AppName = &v
	return s
}

func (s *GetTraasmetaApptagRequest) SetTenantUuid(v string) *GetTraasmetaApptagRequest {
	s.TenantUuid = &v
	return s
}

func (s *GetTraasmetaApptagRequest) SetTenantName(v string) *GetTraasmetaApptagRequest {
	s.TenantName = &v
	return s
}

func (s *GetTraasmetaApptagRequest) SetTagKey(v string) *GetTraasmetaApptagRequest {
	s.TagKey = &v
	return s
}

type GetTraasmetaApptagResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_tag
	AppTag *TraasAppTagDto `json:"app_tag,omitempty" xml:"app_tag,omitempty"`
}

func (s GetTraasmetaApptagResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaApptagResponse) GoString() string {
	return s.String()
}

func (s *GetTraasmetaApptagResponse) SetReqMsgId(v string) *GetTraasmetaApptagResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTraasmetaApptagResponse) SetResultCode(v string) *GetTraasmetaApptagResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTraasmetaApptagResponse) SetResultMsg(v string) *GetTraasmetaApptagResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTraasmetaApptagResponse) SetAppTag(v *TraasAppTagDto) *GetTraasmetaApptagResponse {
	s.AppTag = v
	return s
}

type GetTraasmetaWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s GetTraasmetaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *GetTraasmetaWorkspaceRequest) SetAuthToken(v string) *GetTraasmetaWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTraasmetaWorkspaceRequest) SetUuid(v string) *GetTraasmetaWorkspaceRequest {
	s.Uuid = &v
	return s
}

func (s *GetTraasmetaWorkspaceRequest) SetName(v string) *GetTraasmetaWorkspaceRequest {
	s.Name = &v
	return s
}

func (s *GetTraasmetaWorkspaceRequest) SetTenantUuid(v string) *GetTraasmetaWorkspaceRequest {
	s.TenantUuid = &v
	return s
}

func (s *GetTraasmetaWorkspaceRequest) SetTenantName(v string) *GetTraasmetaWorkspaceRequest {
	s.TenantName = &v
	return s
}

type GetTraasmetaWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspace
	Workspace *TraasWorkspaceDto `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetTraasmetaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *GetTraasmetaWorkspaceResponse) SetReqMsgId(v string) *GetTraasmetaWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTraasmetaWorkspaceResponse) SetResultCode(v string) *GetTraasmetaWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTraasmetaWorkspaceResponse) SetResultMsg(v string) *GetTraasmetaWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTraasmetaWorkspaceResponse) SetWorkspace(v *TraasWorkspaceDto) *GetTraasmetaWorkspaceResponse {
	s.Workspace = v
	return s
}

type GetTraasmetaWorkspacegroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s GetTraasmetaWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *GetTraasmetaWorkspacegroupRequest) SetAuthToken(v string) *GetTraasmetaWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTraasmetaWorkspacegroupRequest) SetUuid(v string) *GetTraasmetaWorkspacegroupRequest {
	s.Uuid = &v
	return s
}

func (s *GetTraasmetaWorkspacegroupRequest) SetName(v string) *GetTraasmetaWorkspacegroupRequest {
	s.Name = &v
	return s
}

func (s *GetTraasmetaWorkspacegroupRequest) SetTenantUuid(v string) *GetTraasmetaWorkspacegroupRequest {
	s.TenantUuid = &v
	return s
}

func (s *GetTraasmetaWorkspacegroupRequest) SetTenantName(v string) *GetTraasmetaWorkspacegroupRequest {
	s.TenantName = &v
	return s
}

type GetTraasmetaWorkspacegroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspace_group
	WorkspaceGroup *TraasWorkspaceGroupDto `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
}

func (s GetTraasmetaWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *GetTraasmetaWorkspacegroupResponse) SetReqMsgId(v string) *GetTraasmetaWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTraasmetaWorkspacegroupResponse) SetResultCode(v string) *GetTraasmetaWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTraasmetaWorkspacegroupResponse) SetResultMsg(v string) *GetTraasmetaWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTraasmetaWorkspacegroupResponse) SetWorkspaceGroup(v *TraasWorkspaceGroupDto) *GetTraasmetaWorkspacegroupResponse {
	s.WorkspaceGroup = v
	return s
}

type PagequeryTraasmetaWorkspacegroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty" require:"true"`
	//
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	//
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s PagequeryTraasmetaWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaWorkspacegroupRequest) SetAuthToken(v string) *PagequeryTraasmetaWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryTraasmetaWorkspacegroupRequest) SetPageSize(v int64) *PagequeryTraasmetaWorkspacegroupRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaWorkspacegroupRequest) SetCurrentPage(v int64) *PagequeryTraasmetaWorkspacegroupRequest {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaWorkspacegroupRequest) SetTenantUuid(v string) *PagequeryTraasmetaWorkspacegroupRequest {
	s.TenantUuid = &v
	return s
}

func (s *PagequeryTraasmetaWorkspacegroupRequest) SetTenantName(v string) *PagequeryTraasmetaWorkspacegroupRequest {
	s.TenantName = &v
	return s
}

func (s *PagequeryTraasmetaWorkspacegroupRequest) SetSearch(v bool) *PagequeryTraasmetaWorkspacegroupRequest {
	s.Search = &v
	return s
}

func (s *PagequeryTraasmetaWorkspacegroupRequest) SetName(v string) *PagequeryTraasmetaWorkspacegroupRequest {
	s.Name = &v
	return s
}

type PagequeryTraasmetaWorkspacegroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspace_groups
	WorkspaceGroups []*TraasWorkspaceGroupDto `json:"workspace_groups,omitempty" xml:"workspace_groups,omitempty" type:"Repeated"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	//
	// 总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s PagequeryTraasmetaWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaWorkspacegroupResponse) SetReqMsgId(v string) *PagequeryTraasmetaWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryTraasmetaWorkspacegroupResponse) SetResultCode(v string) *PagequeryTraasmetaWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryTraasmetaWorkspacegroupResponse) SetResultMsg(v string) *PagequeryTraasmetaWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryTraasmetaWorkspacegroupResponse) SetWorkspaceGroups(v []*TraasWorkspaceGroupDto) *PagequeryTraasmetaWorkspacegroupResponse {
	s.WorkspaceGroups = v
	return s
}

func (s *PagequeryTraasmetaWorkspacegroupResponse) SetPageSize(v int64) *PagequeryTraasmetaWorkspacegroupResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaWorkspacegroupResponse) SetCurrentPage(v int64) *PagequeryTraasmetaWorkspacegroupResponse {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaWorkspacegroupResponse) SetTotalCount(v int64) *PagequeryTraasmetaWorkspacegroupResponse {
	s.TotalCount = &v
	return s
}

type PagequeryTraasmetaWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty" require:"true"`
	//
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	//
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s PagequeryTraasmetaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaWorkspaceRequest) SetAuthToken(v string) *PagequeryTraasmetaWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryTraasmetaWorkspaceRequest) SetPageSize(v int64) *PagequeryTraasmetaWorkspaceRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaWorkspaceRequest) SetCurrentPage(v int64) *PagequeryTraasmetaWorkspaceRequest {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaWorkspaceRequest) SetTenantUuid(v string) *PagequeryTraasmetaWorkspaceRequest {
	s.TenantUuid = &v
	return s
}

func (s *PagequeryTraasmetaWorkspaceRequest) SetTenantName(v string) *PagequeryTraasmetaWorkspaceRequest {
	s.TenantName = &v
	return s
}

func (s *PagequeryTraasmetaWorkspaceRequest) SetSearch(v bool) *PagequeryTraasmetaWorkspaceRequest {
	s.Search = &v
	return s
}

func (s *PagequeryTraasmetaWorkspaceRequest) SetName(v string) *PagequeryTraasmetaWorkspaceRequest {
	s.Name = &v
	return s
}

type PagequeryTraasmetaWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspaces
	Workspaces []*TraasWorkspaceDto `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	//
	// 总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s PagequeryTraasmetaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaWorkspaceResponse) SetReqMsgId(v string) *PagequeryTraasmetaWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryTraasmetaWorkspaceResponse) SetResultCode(v string) *PagequeryTraasmetaWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryTraasmetaWorkspaceResponse) SetResultMsg(v string) *PagequeryTraasmetaWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryTraasmetaWorkspaceResponse) SetWorkspaces(v []*TraasWorkspaceDto) *PagequeryTraasmetaWorkspaceResponse {
	s.Workspaces = v
	return s
}

func (s *PagequeryTraasmetaWorkspaceResponse) SetPageSize(v int64) *PagequeryTraasmetaWorkspaceResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaWorkspaceResponse) SetCurrentPage(v int64) *PagequeryTraasmetaWorkspaceResponse {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaWorkspaceResponse) SetTotalCount(v int64) *PagequeryTraasmetaWorkspaceResponse {
	s.TotalCount = &v
	return s
}

type PagequeryTraasmetaApptagRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
}

func (s PagequeryTraasmetaApptagRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaApptagRequest) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaApptagRequest) SetAuthToken(v string) *PagequeryTraasmetaApptagRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryTraasmetaApptagRequest) SetPageSize(v int64) *PagequeryTraasmetaApptagRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaApptagRequest) SetCurrentPage(v int64) *PagequeryTraasmetaApptagRequest {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaApptagRequest) SetTenantUuid(v string) *PagequeryTraasmetaApptagRequest {
	s.TenantUuid = &v
	return s
}

func (s *PagequeryTraasmetaApptagRequest) SetTenantName(v string) *PagequeryTraasmetaApptagRequest {
	s.TenantName = &v
	return s
}

func (s *PagequeryTraasmetaApptagRequest) SetAppName(v string) *PagequeryTraasmetaApptagRequest {
	s.AppName = &v
	return s
}

func (s *PagequeryTraasmetaApptagRequest) SetSearch(v bool) *PagequeryTraasmetaApptagRequest {
	s.Search = &v
	return s
}

type PagequeryTraasmetaApptagResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_tags
	AppTags []*TraasAppTagDto `json:"app_tags,omitempty" xml:"app_tags,omitempty" type:"Repeated"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	//
	// 总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s PagequeryTraasmetaApptagResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaApptagResponse) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaApptagResponse) SetReqMsgId(v string) *PagequeryTraasmetaApptagResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryTraasmetaApptagResponse) SetResultCode(v string) *PagequeryTraasmetaApptagResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryTraasmetaApptagResponse) SetResultMsg(v string) *PagequeryTraasmetaApptagResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryTraasmetaApptagResponse) SetAppTags(v []*TraasAppTagDto) *PagequeryTraasmetaApptagResponse {
	s.AppTags = v
	return s
}

func (s *PagequeryTraasmetaApptagResponse) SetPageSize(v int64) *PagequeryTraasmetaApptagResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaApptagResponse) SetCurrentPage(v int64) *PagequeryTraasmetaApptagResponse {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaApptagResponse) SetTotalCount(v int64) *PagequeryTraasmetaApptagResponse {
	s.TotalCount = &v
	return s
}

type PagequeryTraasmetaAppserverRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty" require:"true"`
	//
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	//
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// host_ip
	HostIp *string `json:"host_ip,omitempty" xml:"host_ip,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// hotsname
	Hotsname *string `json:"hotsname,omitempty" xml:"hotsname,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
}

func (s PagequeryTraasmetaAppserverRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaAppserverRequest) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaAppserverRequest) SetAuthToken(v string) *PagequeryTraasmetaAppserverRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryTraasmetaAppserverRequest) SetPageSize(v int64) *PagequeryTraasmetaAppserverRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaAppserverRequest) SetCurrentPage(v int64) *PagequeryTraasmetaAppserverRequest {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaAppserverRequest) SetTenantUuid(v string) *PagequeryTraasmetaAppserverRequest {
	s.TenantUuid = &v
	return s
}

func (s *PagequeryTraasmetaAppserverRequest) SetTenantName(v string) *PagequeryTraasmetaAppserverRequest {
	s.TenantName = &v
	return s
}

func (s *PagequeryTraasmetaAppserverRequest) SetWorkspaceName(v string) *PagequeryTraasmetaAppserverRequest {
	s.WorkspaceName = &v
	return s
}

func (s *PagequeryTraasmetaAppserverRequest) SetHostIp(v string) *PagequeryTraasmetaAppserverRequest {
	s.HostIp = &v
	return s
}

func (s *PagequeryTraasmetaAppserverRequest) SetAppName(v string) *PagequeryTraasmetaAppserverRequest {
	s.AppName = &v
	return s
}

func (s *PagequeryTraasmetaAppserverRequest) SetIp(v string) *PagequeryTraasmetaAppserverRequest {
	s.Ip = &v
	return s
}

func (s *PagequeryTraasmetaAppserverRequest) SetHotsname(v string) *PagequeryTraasmetaAppserverRequest {
	s.Hotsname = &v
	return s
}

func (s *PagequeryTraasmetaAppserverRequest) SetSearch(v bool) *PagequeryTraasmetaAppserverRequest {
	s.Search = &v
	return s
}

type PagequeryTraasmetaAppserverResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_servers
	AppServers []*TraasAppServerDto `json:"app_servers,omitempty" xml:"app_servers,omitempty" type:"Repeated"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	//
	// 总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s PagequeryTraasmetaAppserverResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaAppserverResponse) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaAppserverResponse) SetReqMsgId(v string) *PagequeryTraasmetaAppserverResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryTraasmetaAppserverResponse) SetResultCode(v string) *PagequeryTraasmetaAppserverResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryTraasmetaAppserverResponse) SetResultMsg(v string) *PagequeryTraasmetaAppserverResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryTraasmetaAppserverResponse) SetAppServers(v []*TraasAppServerDto) *PagequeryTraasmetaAppserverResponse {
	s.AppServers = v
	return s
}

func (s *PagequeryTraasmetaAppserverResponse) SetPageSize(v int64) *PagequeryTraasmetaAppserverResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaAppserverResponse) SetCurrentPage(v int64) *PagequeryTraasmetaAppserverResponse {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaAppserverResponse) SetTotalCount(v int64) *PagequeryTraasmetaAppserverResponse {
	s.TotalCount = &v
	return s
}

type PagequeryTraasmetaAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	//
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
}

func (s PagequeryTraasmetaAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaAppgroupRequest) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaAppgroupRequest) SetAuthToken(v string) *PagequeryTraasmetaAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryTraasmetaAppgroupRequest) SetPageSize(v int64) *PagequeryTraasmetaAppgroupRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaAppgroupRequest) SetCurrentPage(v int64) *PagequeryTraasmetaAppgroupRequest {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaAppgroupRequest) SetTenantUuid(v string) *PagequeryTraasmetaAppgroupRequest {
	s.TenantUuid = &v
	return s
}

func (s *PagequeryTraasmetaAppgroupRequest) SetTenantName(v string) *PagequeryTraasmetaAppgroupRequest {
	s.TenantName = &v
	return s
}

func (s *PagequeryTraasmetaAppgroupRequest) SetName(v string) *PagequeryTraasmetaAppgroupRequest {
	s.Name = &v
	return s
}

func (s *PagequeryTraasmetaAppgroupRequest) SetSearch(v bool) *PagequeryTraasmetaAppgroupRequest {
	s.Search = &v
	return s
}

type PagequeryTraasmetaAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_groups
	AppGroups []*TraasAppGroupDto `json:"app_groups,omitempty" xml:"app_groups,omitempty" type:"Repeated"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	//
	// 总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s PagequeryTraasmetaAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaAppgroupResponse) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaAppgroupResponse) SetReqMsgId(v string) *PagequeryTraasmetaAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryTraasmetaAppgroupResponse) SetResultCode(v string) *PagequeryTraasmetaAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryTraasmetaAppgroupResponse) SetResultMsg(v string) *PagequeryTraasmetaAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryTraasmetaAppgroupResponse) SetAppGroups(v []*TraasAppGroupDto) *PagequeryTraasmetaAppgroupResponse {
	s.AppGroups = v
	return s
}

func (s *PagequeryTraasmetaAppgroupResponse) SetPageSize(v int64) *PagequeryTraasmetaAppgroupResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaAppgroupResponse) SetCurrentPage(v int64) *PagequeryTraasmetaAppgroupResponse {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaAppgroupResponse) SetTotalCount(v int64) *PagequeryTraasmetaAppgroupResponse {
	s.TotalCount = &v
	return s
}

type PagequeryTraasmetaAppRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	//
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
	// name
	//
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// app_group_name
	AppGroupName *string `json:"app_group_name,omitempty" xml:"app_group_name,omitempty"`
}

func (s PagequeryTraasmetaAppRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaAppRequest) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaAppRequest) SetAuthToken(v string) *PagequeryTraasmetaAppRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryTraasmetaAppRequest) SetPageSize(v int64) *PagequeryTraasmetaAppRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaAppRequest) SetCurrentPage(v int64) *PagequeryTraasmetaAppRequest {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaAppRequest) SetTenantUuid(v string) *PagequeryTraasmetaAppRequest {
	s.TenantUuid = &v
	return s
}

func (s *PagequeryTraasmetaAppRequest) SetTenantName(v string) *PagequeryTraasmetaAppRequest {
	s.TenantName = &v
	return s
}

func (s *PagequeryTraasmetaAppRequest) SetSearch(v bool) *PagequeryTraasmetaAppRequest {
	s.Search = &v
	return s
}

func (s *PagequeryTraasmetaAppRequest) SetName(v string) *PagequeryTraasmetaAppRequest {
	s.Name = &v
	return s
}

func (s *PagequeryTraasmetaAppRequest) SetAppGroupName(v string) *PagequeryTraasmetaAppRequest {
	s.AppGroupName = &v
	return s
}

type PagequeryTraasmetaAppResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// apps
	Apps []*TraasAppDto `json:"apps,omitempty" xml:"apps,omitempty" type:"Repeated"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	//
	// 总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s PagequeryTraasmetaAppResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaAppResponse) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaAppResponse) SetReqMsgId(v string) *PagequeryTraasmetaAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryTraasmetaAppResponse) SetResultCode(v string) *PagequeryTraasmetaAppResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryTraasmetaAppResponse) SetResultMsg(v string) *PagequeryTraasmetaAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryTraasmetaAppResponse) SetApps(v []*TraasAppDto) *PagequeryTraasmetaAppResponse {
	s.Apps = v
	return s
}

func (s *PagequeryTraasmetaAppResponse) SetPageSize(v int64) *PagequeryTraasmetaAppResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaAppResponse) SetCurrentPage(v int64) *PagequeryTraasmetaAppResponse {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaAppResponse) SetTotalCount(v int64) *PagequeryTraasmetaAppResponse {
	s.TotalCount = &v
	return s
}

type QueryTraasmetaWorkspacegroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s QueryTraasmetaWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaWorkspacegroupRequest) SetAuthToken(v string) *QueryTraasmetaWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraasmetaWorkspacegroupRequest) SetUuid(v string) *QueryTraasmetaWorkspacegroupRequest {
	s.Uuid = &v
	return s
}

func (s *QueryTraasmetaWorkspacegroupRequest) SetName(v string) *QueryTraasmetaWorkspacegroupRequest {
	s.Name = &v
	return s
}

func (s *QueryTraasmetaWorkspacegroupRequest) SetSearch(v bool) *QueryTraasmetaWorkspacegroupRequest {
	s.Search = &v
	return s
}

func (s *QueryTraasmetaWorkspacegroupRequest) SetTenantUuid(v string) *QueryTraasmetaWorkspacegroupRequest {
	s.TenantUuid = &v
	return s
}

func (s *QueryTraasmetaWorkspacegroupRequest) SetTenantName(v string) *QueryTraasmetaWorkspacegroupRequest {
	s.TenantName = &v
	return s
}

type QueryTraasmetaWorkspacegroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspace_groups
	WorkspaceGroups []*TraasWorkspaceGroupDto `json:"workspace_groups,omitempty" xml:"workspace_groups,omitempty" type:"Repeated"`
}

func (s QueryTraasmetaWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaWorkspacegroupResponse) SetReqMsgId(v string) *QueryTraasmetaWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraasmetaWorkspacegroupResponse) SetResultCode(v string) *QueryTraasmetaWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraasmetaWorkspacegroupResponse) SetResultMsg(v string) *QueryTraasmetaWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraasmetaWorkspacegroupResponse) SetWorkspaceGroups(v []*TraasWorkspaceGroupDto) *QueryTraasmetaWorkspacegroupResponse {
	s.WorkspaceGroups = v
	return s
}

type QueryTraasmetaWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s QueryTraasmetaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaWorkspaceRequest) SetAuthToken(v string) *QueryTraasmetaWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraasmetaWorkspaceRequest) SetUuid(v string) *QueryTraasmetaWorkspaceRequest {
	s.Uuid = &v
	return s
}

func (s *QueryTraasmetaWorkspaceRequest) SetName(v string) *QueryTraasmetaWorkspaceRequest {
	s.Name = &v
	return s
}

func (s *QueryTraasmetaWorkspaceRequest) SetSearch(v bool) *QueryTraasmetaWorkspaceRequest {
	s.Search = &v
	return s
}

func (s *QueryTraasmetaWorkspaceRequest) SetTenantUuid(v string) *QueryTraasmetaWorkspaceRequest {
	s.TenantUuid = &v
	return s
}

func (s *QueryTraasmetaWorkspaceRequest) SetTenantName(v string) *QueryTraasmetaWorkspaceRequest {
	s.TenantName = &v
	return s
}

type QueryTraasmetaWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspaces
	Workspaces []*TraasWorkspaceDto `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s QueryTraasmetaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaWorkspaceResponse) SetReqMsgId(v string) *QueryTraasmetaWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraasmetaWorkspaceResponse) SetResultCode(v string) *QueryTraasmetaWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraasmetaWorkspaceResponse) SetResultMsg(v string) *QueryTraasmetaWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraasmetaWorkspaceResponse) SetWorkspaces(v []*TraasWorkspaceDto) *QueryTraasmetaWorkspaceResponse {
	s.Workspaces = v
	return s
}

type QueryTraasmetaApptagRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// tag_key
	TagKey *string `json:"tag_key,omitempty" xml:"tag_key,omitempty"`
}

func (s QueryTraasmetaApptagRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaApptagRequest) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaApptagRequest) SetAuthToken(v string) *QueryTraasmetaApptagRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraasmetaApptagRequest) SetUuid(v string) *QueryTraasmetaApptagRequest {
	s.Uuid = &v
	return s
}

func (s *QueryTraasmetaApptagRequest) SetAppName(v string) *QueryTraasmetaApptagRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraasmetaApptagRequest) SetSearch(v bool) *QueryTraasmetaApptagRequest {
	s.Search = &v
	return s
}

func (s *QueryTraasmetaApptagRequest) SetTenantUuid(v string) *QueryTraasmetaApptagRequest {
	s.TenantUuid = &v
	return s
}

func (s *QueryTraasmetaApptagRequest) SetTenantName(v string) *QueryTraasmetaApptagRequest {
	s.TenantName = &v
	return s
}

func (s *QueryTraasmetaApptagRequest) SetTagKey(v string) *QueryTraasmetaApptagRequest {
	s.TagKey = &v
	return s
}

type QueryTraasmetaApptagResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_tags
	AppTags []*TraasAppTagDto `json:"app_tags,omitempty" xml:"app_tags,omitempty" type:"Repeated"`
}

func (s QueryTraasmetaApptagResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaApptagResponse) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaApptagResponse) SetReqMsgId(v string) *QueryTraasmetaApptagResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraasmetaApptagResponse) SetResultCode(v string) *QueryTraasmetaApptagResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraasmetaApptagResponse) SetResultMsg(v string) *QueryTraasmetaApptagResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraasmetaApptagResponse) SetAppTags(v []*TraasAppTagDto) *QueryTraasmetaApptagResponse {
	s.AppTags = v
	return s
}

type QueryTraasmetaAppserverRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// hostname
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
}

func (s QueryTraasmetaAppserverRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaAppserverRequest) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaAppserverRequest) SetAuthToken(v string) *QueryTraasmetaAppserverRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraasmetaAppserverRequest) SetUuid(v string) *QueryTraasmetaAppserverRequest {
	s.Uuid = &v
	return s
}

func (s *QueryTraasmetaAppserverRequest) SetHostname(v string) *QueryTraasmetaAppserverRequest {
	s.Hostname = &v
	return s
}

func (s *QueryTraasmetaAppserverRequest) SetSearch(v bool) *QueryTraasmetaAppserverRequest {
	s.Search = &v
	return s
}

func (s *QueryTraasmetaAppserverRequest) SetTenantUuid(v string) *QueryTraasmetaAppserverRequest {
	s.TenantUuid = &v
	return s
}

func (s *QueryTraasmetaAppserverRequest) SetTenantName(v string) *QueryTraasmetaAppserverRequest {
	s.TenantName = &v
	return s
}

func (s *QueryTraasmetaAppserverRequest) SetWorkspaceName(v string) *QueryTraasmetaAppserverRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraasmetaAppserverRequest) SetAppName(v string) *QueryTraasmetaAppserverRequest {
	s.AppName = &v
	return s
}

func (s *QueryTraasmetaAppserverRequest) SetIp(v string) *QueryTraasmetaAppserverRequest {
	s.Ip = &v
	return s
}

type QueryTraasmetaAppserverResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_servers
	AppServers []*TraasAppServerDto `json:"app_servers,omitempty" xml:"app_servers,omitempty" type:"Repeated"`
}

func (s QueryTraasmetaAppserverResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaAppserverResponse) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaAppserverResponse) SetReqMsgId(v string) *QueryTraasmetaAppserverResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraasmetaAppserverResponse) SetResultCode(v string) *QueryTraasmetaAppserverResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraasmetaAppserverResponse) SetResultMsg(v string) *QueryTraasmetaAppserverResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraasmetaAppserverResponse) SetAppServers(v []*TraasAppServerDto) *QueryTraasmetaAppserverResponse {
	s.AppServers = v
	return s
}

type QueryTraasmetaAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s QueryTraasmetaAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaAppgroupRequest) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaAppgroupRequest) SetAuthToken(v string) *QueryTraasmetaAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraasmetaAppgroupRequest) SetUuid(v string) *QueryTraasmetaAppgroupRequest {
	s.Uuid = &v
	return s
}

func (s *QueryTraasmetaAppgroupRequest) SetName(v string) *QueryTraasmetaAppgroupRequest {
	s.Name = &v
	return s
}

func (s *QueryTraasmetaAppgroupRequest) SetSearch(v bool) *QueryTraasmetaAppgroupRequest {
	s.Search = &v
	return s
}

func (s *QueryTraasmetaAppgroupRequest) SetTenantUuid(v string) *QueryTraasmetaAppgroupRequest {
	s.TenantUuid = &v
	return s
}

func (s *QueryTraasmetaAppgroupRequest) SetTenantName(v string) *QueryTraasmetaAppgroupRequest {
	s.TenantName = &v
	return s
}

type QueryTraasmetaAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_groups
	AppGroups []*TraasAppGroupDto `json:"app_groups,omitempty" xml:"app_groups,omitempty" type:"Repeated"`
}

func (s QueryTraasmetaAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaAppgroupResponse) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaAppgroupResponse) SetReqMsgId(v string) *QueryTraasmetaAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraasmetaAppgroupResponse) SetResultCode(v string) *QueryTraasmetaAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraasmetaAppgroupResponse) SetResultMsg(v string) *QueryTraasmetaAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraasmetaAppgroupResponse) SetAppGroups(v []*TraasAppGroupDto) *QueryTraasmetaAppgroupResponse {
	s.AppGroups = v
	return s
}

type QueryTraasmetaAppRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s QueryTraasmetaAppRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaAppRequest) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaAppRequest) SetAuthToken(v string) *QueryTraasmetaAppRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraasmetaAppRequest) SetUuid(v string) *QueryTraasmetaAppRequest {
	s.Uuid = &v
	return s
}

func (s *QueryTraasmetaAppRequest) SetName(v string) *QueryTraasmetaAppRequest {
	s.Name = &v
	return s
}

func (s *QueryTraasmetaAppRequest) SetSearch(v bool) *QueryTraasmetaAppRequest {
	s.Search = &v
	return s
}

func (s *QueryTraasmetaAppRequest) SetTenantUuid(v string) *QueryTraasmetaAppRequest {
	s.TenantUuid = &v
	return s
}

func (s *QueryTraasmetaAppRequest) SetTenantName(v string) *QueryTraasmetaAppRequest {
	s.TenantName = &v
	return s
}

type QueryTraasmetaAppResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// apps
	Apps []*TraasAppDto `json:"apps,omitempty" xml:"apps,omitempty" type:"Repeated"`
}

func (s QueryTraasmetaAppResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaAppResponse) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaAppResponse) SetReqMsgId(v string) *QueryTraasmetaAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraasmetaAppResponse) SetResultCode(v string) *QueryTraasmetaAppResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraasmetaAppResponse) SetResultMsg(v string) *QueryTraasmetaAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraasmetaAppResponse) SetApps(v []*TraasAppDto) *QueryTraasmetaAppResponse {
	s.Apps = v
	return s
}

type UpdateTraasmetaAppRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s UpdateTraasmetaAppRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaAppRequest) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaAppRequest) SetAuthToken(v string) *UpdateTraasmetaAppRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateTraasmetaAppRequest) SetUuid(v string) *UpdateTraasmetaAppRequest {
	s.Uuid = &v
	return s
}

func (s *UpdateTraasmetaAppRequest) SetName(v string) *UpdateTraasmetaAppRequest {
	s.Name = &v
	return s
}

func (s *UpdateTraasmetaAppRequest) SetDisplayName(v string) *UpdateTraasmetaAppRequest {
	s.DisplayName = &v
	return s
}

func (s *UpdateTraasmetaAppRequest) SetOutsideId(v string) *UpdateTraasmetaAppRequest {
	s.OutsideId = &v
	return s
}

func (s *UpdateTraasmetaAppRequest) SetSourceFrom(v string) *UpdateTraasmetaAppRequest {
	s.SourceFrom = &v
	return s
}

func (s *UpdateTraasmetaAppRequest) SetExtension(v string) *UpdateTraasmetaAppRequest {
	s.Extension = &v
	return s
}

func (s *UpdateTraasmetaAppRequest) SetTenantUuid(v string) *UpdateTraasmetaAppRequest {
	s.TenantUuid = &v
	return s
}

func (s *UpdateTraasmetaAppRequest) SetTenantName(v string) *UpdateTraasmetaAppRequest {
	s.TenantName = &v
	return s
}

type UpdateTraasmetaAppResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app
	App *TraasAppDto `json:"app,omitempty" xml:"app,omitempty"`
}

func (s UpdateTraasmetaAppResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaAppResponse) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaAppResponse) SetReqMsgId(v string) *UpdateTraasmetaAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateTraasmetaAppResponse) SetResultCode(v string) *UpdateTraasmetaAppResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateTraasmetaAppResponse) SetResultMsg(v string) *UpdateTraasmetaAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateTraasmetaAppResponse) SetApp(v *TraasAppDto) *UpdateTraasmetaAppResponse {
	s.App = v
	return s
}

type CreateTraasmetaAppRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s CreateTraasmetaAppRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaAppRequest) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaAppRequest) SetAuthToken(v string) *CreateTraasmetaAppRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateTraasmetaAppRequest) SetName(v string) *CreateTraasmetaAppRequest {
	s.Name = &v
	return s
}

func (s *CreateTraasmetaAppRequest) SetDisplayName(v string) *CreateTraasmetaAppRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateTraasmetaAppRequest) SetOutsideId(v string) *CreateTraasmetaAppRequest {
	s.OutsideId = &v
	return s
}

func (s *CreateTraasmetaAppRequest) SetSourceFrom(v string) *CreateTraasmetaAppRequest {
	s.SourceFrom = &v
	return s
}

func (s *CreateTraasmetaAppRequest) SetExtension(v string) *CreateTraasmetaAppRequest {
	s.Extension = &v
	return s
}

func (s *CreateTraasmetaAppRequest) SetTenantUuid(v string) *CreateTraasmetaAppRequest {
	s.TenantUuid = &v
	return s
}

func (s *CreateTraasmetaAppRequest) SetTenantName(v string) *CreateTraasmetaAppRequest {
	s.TenantName = &v
	return s
}

type CreateTraasmetaAppResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app
	App *TraasAppDto `json:"app,omitempty" xml:"app,omitempty"`
}

func (s CreateTraasmetaAppResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaAppResponse) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaAppResponse) SetReqMsgId(v string) *CreateTraasmetaAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateTraasmetaAppResponse) SetResultCode(v string) *CreateTraasmetaAppResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateTraasmetaAppResponse) SetResultMsg(v string) *CreateTraasmetaAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateTraasmetaAppResponse) SetApp(v *TraasAppDto) *CreateTraasmetaAppResponse {
	s.App = v
	return s
}

type UpdateTraasmetaWorkspacegroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s UpdateTraasmetaWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaWorkspacegroupRequest) SetAuthToken(v string) *UpdateTraasmetaWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateTraasmetaWorkspacegroupRequest) SetUuid(v string) *UpdateTraasmetaWorkspacegroupRequest {
	s.Uuid = &v
	return s
}

func (s *UpdateTraasmetaWorkspacegroupRequest) SetName(v string) *UpdateTraasmetaWorkspacegroupRequest {
	s.Name = &v
	return s
}

func (s *UpdateTraasmetaWorkspacegroupRequest) SetDisplayName(v string) *UpdateTraasmetaWorkspacegroupRequest {
	s.DisplayName = &v
	return s
}

func (s *UpdateTraasmetaWorkspacegroupRequest) SetOutsideId(v string) *UpdateTraasmetaWorkspacegroupRequest {
	s.OutsideId = &v
	return s
}

func (s *UpdateTraasmetaWorkspacegroupRequest) SetSourceFrom(v string) *UpdateTraasmetaWorkspacegroupRequest {
	s.SourceFrom = &v
	return s
}

func (s *UpdateTraasmetaWorkspacegroupRequest) SetExtension(v string) *UpdateTraasmetaWorkspacegroupRequest {
	s.Extension = &v
	return s
}

func (s *UpdateTraasmetaWorkspacegroupRequest) SetTenantUuid(v string) *UpdateTraasmetaWorkspacegroupRequest {
	s.TenantUuid = &v
	return s
}

func (s *UpdateTraasmetaWorkspacegroupRequest) SetTenantName(v string) *UpdateTraasmetaWorkspacegroupRequest {
	s.TenantName = &v
	return s
}

type UpdateTraasmetaWorkspacegroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// tenant_name
	WorkspaceGroup *TraasWorkspaceGroupDto `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
}

func (s UpdateTraasmetaWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaWorkspacegroupResponse) SetReqMsgId(v string) *UpdateTraasmetaWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateTraasmetaWorkspacegroupResponse) SetResultCode(v string) *UpdateTraasmetaWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateTraasmetaWorkspacegroupResponse) SetResultMsg(v string) *UpdateTraasmetaWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateTraasmetaWorkspacegroupResponse) SetWorkspaceGroup(v *TraasWorkspaceGroupDto) *UpdateTraasmetaWorkspacegroupResponse {
	s.WorkspaceGroup = v
	return s
}

type UpdateTraasmetaAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// parent_uuid
	ParentUuid *string `json:"parent_uuid,omitempty" xml:"parent_uuid,omitempty"`
	// layer
	Layer *int64 `json:"layer,omitempty" xml:"layer,omitempty"`
	// outside_parent_id
	OutsideParentId *string `json:"outside_parent_id,omitempty" xml:"outside_parent_id,omitempty"`
}

func (s UpdateTraasmetaAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaAppgroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaAppgroupRequest) SetAuthToken(v string) *UpdateTraasmetaAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateTraasmetaAppgroupRequest) SetUuid(v string) *UpdateTraasmetaAppgroupRequest {
	s.Uuid = &v
	return s
}

func (s *UpdateTraasmetaAppgroupRequest) SetName(v string) *UpdateTraasmetaAppgroupRequest {
	s.Name = &v
	return s
}

func (s *UpdateTraasmetaAppgroupRequest) SetDisplayName(v string) *UpdateTraasmetaAppgroupRequest {
	s.DisplayName = &v
	return s
}

func (s *UpdateTraasmetaAppgroupRequest) SetOutsideId(v string) *UpdateTraasmetaAppgroupRequest {
	s.OutsideId = &v
	return s
}

func (s *UpdateTraasmetaAppgroupRequest) SetSourceFrom(v string) *UpdateTraasmetaAppgroupRequest {
	s.SourceFrom = &v
	return s
}

func (s *UpdateTraasmetaAppgroupRequest) SetExtension(v string) *UpdateTraasmetaAppgroupRequest {
	s.Extension = &v
	return s
}

func (s *UpdateTraasmetaAppgroupRequest) SetTenantUuid(v string) *UpdateTraasmetaAppgroupRequest {
	s.TenantUuid = &v
	return s
}

func (s *UpdateTraasmetaAppgroupRequest) SetTenantName(v string) *UpdateTraasmetaAppgroupRequest {
	s.TenantName = &v
	return s
}

func (s *UpdateTraasmetaAppgroupRequest) SetParentUuid(v string) *UpdateTraasmetaAppgroupRequest {
	s.ParentUuid = &v
	return s
}

func (s *UpdateTraasmetaAppgroupRequest) SetLayer(v int64) *UpdateTraasmetaAppgroupRequest {
	s.Layer = &v
	return s
}

func (s *UpdateTraasmetaAppgroupRequest) SetOutsideParentId(v string) *UpdateTraasmetaAppgroupRequest {
	s.OutsideParentId = &v
	return s
}

type UpdateTraasmetaAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_group
	AppGroup *TraasAppGroupDto `json:"app_group,omitempty" xml:"app_group,omitempty"`
}

func (s UpdateTraasmetaAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaAppgroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaAppgroupResponse) SetReqMsgId(v string) *UpdateTraasmetaAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateTraasmetaAppgroupResponse) SetResultCode(v string) *UpdateTraasmetaAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateTraasmetaAppgroupResponse) SetResultMsg(v string) *UpdateTraasmetaAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateTraasmetaAppgroupResponse) SetAppGroup(v *TraasAppGroupDto) *UpdateTraasmetaAppgroupResponse {
	s.AppGroup = v
	return s
}

type CreateTraasmetaAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// parent_uuid
	ParentUuid *string `json:"parent_uuid,omitempty" xml:"parent_uuid,omitempty"`
	// layer
	Layer *int64 `json:"layer,omitempty" xml:"layer,omitempty"`
	// outside_parent_id
	OutsideParentId *string `json:"outside_parent_id,omitempty" xml:"outside_parent_id,omitempty"`
}

func (s CreateTraasmetaAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaAppgroupRequest) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaAppgroupRequest) SetAuthToken(v string) *CreateTraasmetaAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateTraasmetaAppgroupRequest) SetName(v string) *CreateTraasmetaAppgroupRequest {
	s.Name = &v
	return s
}

func (s *CreateTraasmetaAppgroupRequest) SetDisplayName(v string) *CreateTraasmetaAppgroupRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateTraasmetaAppgroupRequest) SetOutsideId(v string) *CreateTraasmetaAppgroupRequest {
	s.OutsideId = &v
	return s
}

func (s *CreateTraasmetaAppgroupRequest) SetSourceFrom(v string) *CreateTraasmetaAppgroupRequest {
	s.SourceFrom = &v
	return s
}

func (s *CreateTraasmetaAppgroupRequest) SetExtension(v string) *CreateTraasmetaAppgroupRequest {
	s.Extension = &v
	return s
}

func (s *CreateTraasmetaAppgroupRequest) SetTenantUuid(v string) *CreateTraasmetaAppgroupRequest {
	s.TenantUuid = &v
	return s
}

func (s *CreateTraasmetaAppgroupRequest) SetTenantName(v string) *CreateTraasmetaAppgroupRequest {
	s.TenantName = &v
	return s
}

func (s *CreateTraasmetaAppgroupRequest) SetParentUuid(v string) *CreateTraasmetaAppgroupRequest {
	s.ParentUuid = &v
	return s
}

func (s *CreateTraasmetaAppgroupRequest) SetLayer(v int64) *CreateTraasmetaAppgroupRequest {
	s.Layer = &v
	return s
}

func (s *CreateTraasmetaAppgroupRequest) SetOutsideParentId(v string) *CreateTraasmetaAppgroupRequest {
	s.OutsideParentId = &v
	return s
}

type CreateTraasmetaAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_group
	AppGroup *TraasAppGroupDto `json:"app_group,omitempty" xml:"app_group,omitempty"`
}

func (s CreateTraasmetaAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaAppgroupResponse) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaAppgroupResponse) SetReqMsgId(v string) *CreateTraasmetaAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateTraasmetaAppgroupResponse) SetResultCode(v string) *CreateTraasmetaAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateTraasmetaAppgroupResponse) SetResultMsg(v string) *CreateTraasmetaAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateTraasmetaAppgroupResponse) SetAppGroup(v *TraasAppGroupDto) *CreateTraasmetaAppgroupResponse {
	s.AppGroup = v
	return s
}

type CreateTraasmetaWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// workspace_group_uuid
	WorkspaceGroupUuid *string `json:"workspace_group_uuid,omitempty" xml:"workspace_group_uuid,omitempty"`
	// region_uuid
	RegionUuid *string `json:"region_uuid,omitempty" xml:"region_uuid,omitempty"`
	// zone_uuid
	ZoneUuid *string `json:"zone_uuid,omitempty" xml:"zone_uuid,omitempty"`
}

func (s CreateTraasmetaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaWorkspaceRequest) SetAuthToken(v string) *CreateTraasmetaWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateTraasmetaWorkspaceRequest) SetName(v string) *CreateTraasmetaWorkspaceRequest {
	s.Name = &v
	return s
}

func (s *CreateTraasmetaWorkspaceRequest) SetDisplayName(v string) *CreateTraasmetaWorkspaceRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateTraasmetaWorkspaceRequest) SetOutsideId(v string) *CreateTraasmetaWorkspaceRequest {
	s.OutsideId = &v
	return s
}

func (s *CreateTraasmetaWorkspaceRequest) SetSourceFrom(v string) *CreateTraasmetaWorkspaceRequest {
	s.SourceFrom = &v
	return s
}

func (s *CreateTraasmetaWorkspaceRequest) SetExtension(v string) *CreateTraasmetaWorkspaceRequest {
	s.Extension = &v
	return s
}

func (s *CreateTraasmetaWorkspaceRequest) SetTenantUuid(v string) *CreateTraasmetaWorkspaceRequest {
	s.TenantUuid = &v
	return s
}

func (s *CreateTraasmetaWorkspaceRequest) SetTenantName(v string) *CreateTraasmetaWorkspaceRequest {
	s.TenantName = &v
	return s
}

func (s *CreateTraasmetaWorkspaceRequest) SetWorkspaceGroupUuid(v string) *CreateTraasmetaWorkspaceRequest {
	s.WorkspaceGroupUuid = &v
	return s
}

func (s *CreateTraasmetaWorkspaceRequest) SetRegionUuid(v string) *CreateTraasmetaWorkspaceRequest {
	s.RegionUuid = &v
	return s
}

func (s *CreateTraasmetaWorkspaceRequest) SetZoneUuid(v string) *CreateTraasmetaWorkspaceRequest {
	s.ZoneUuid = &v
	return s
}

type CreateTraasmetaWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// zone_uuid
	Workspace *TraasWorkspaceDto `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CreateTraasmetaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaWorkspaceResponse) SetReqMsgId(v string) *CreateTraasmetaWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateTraasmetaWorkspaceResponse) SetResultCode(v string) *CreateTraasmetaWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateTraasmetaWorkspaceResponse) SetResultMsg(v string) *CreateTraasmetaWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateTraasmetaWorkspaceResponse) SetWorkspace(v *TraasWorkspaceDto) *CreateTraasmetaWorkspaceResponse {
	s.Workspace = v
	return s
}

type UpdateTraasmetaWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// workspace_group_uuid
	WorkspaceGroupUuid *string `json:"workspace_group_uuid,omitempty" xml:"workspace_group_uuid,omitempty"`
	// region_uuid
	RegionUuid *string `json:"region_uuid,omitempty" xml:"region_uuid,omitempty"`
	// zone_uuid
	ZoneUuid *string `json:"zone_uuid,omitempty" xml:"zone_uuid,omitempty"`
}

func (s UpdateTraasmetaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaWorkspaceRequest) SetAuthToken(v string) *UpdateTraasmetaWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateTraasmetaWorkspaceRequest) SetUuid(v string) *UpdateTraasmetaWorkspaceRequest {
	s.Uuid = &v
	return s
}

func (s *UpdateTraasmetaWorkspaceRequest) SetName(v string) *UpdateTraasmetaWorkspaceRequest {
	s.Name = &v
	return s
}

func (s *UpdateTraasmetaWorkspaceRequest) SetDisplayName(v string) *UpdateTraasmetaWorkspaceRequest {
	s.DisplayName = &v
	return s
}

func (s *UpdateTraasmetaWorkspaceRequest) SetOutsideId(v string) *UpdateTraasmetaWorkspaceRequest {
	s.OutsideId = &v
	return s
}

func (s *UpdateTraasmetaWorkspaceRequest) SetSourceFrom(v string) *UpdateTraasmetaWorkspaceRequest {
	s.SourceFrom = &v
	return s
}

func (s *UpdateTraasmetaWorkspaceRequest) SetExtension(v string) *UpdateTraasmetaWorkspaceRequest {
	s.Extension = &v
	return s
}

func (s *UpdateTraasmetaWorkspaceRequest) SetTenantUuid(v string) *UpdateTraasmetaWorkspaceRequest {
	s.TenantUuid = &v
	return s
}

func (s *UpdateTraasmetaWorkspaceRequest) SetTenantName(v string) *UpdateTraasmetaWorkspaceRequest {
	s.TenantName = &v
	return s
}

func (s *UpdateTraasmetaWorkspaceRequest) SetWorkspaceGroupUuid(v string) *UpdateTraasmetaWorkspaceRequest {
	s.WorkspaceGroupUuid = &v
	return s
}

func (s *UpdateTraasmetaWorkspaceRequest) SetRegionUuid(v string) *UpdateTraasmetaWorkspaceRequest {
	s.RegionUuid = &v
	return s
}

func (s *UpdateTraasmetaWorkspaceRequest) SetZoneUuid(v string) *UpdateTraasmetaWorkspaceRequest {
	s.ZoneUuid = &v
	return s
}

type UpdateTraasmetaWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// zone_uuid
	Workspace *TraasWorkspaceDto `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s UpdateTraasmetaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaWorkspaceResponse) SetReqMsgId(v string) *UpdateTraasmetaWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateTraasmetaWorkspaceResponse) SetResultCode(v string) *UpdateTraasmetaWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateTraasmetaWorkspaceResponse) SetResultMsg(v string) *UpdateTraasmetaWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateTraasmetaWorkspaceResponse) SetWorkspace(v *TraasWorkspaceDto) *UpdateTraasmetaWorkspaceResponse {
	s.Workspace = v
	return s
}

type UpdateTraasmetaApptagRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// tag_key
	TagKey *string `json:"tag_key,omitempty" xml:"tag_key,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// app_uuid
	AppUuid *string `json:"app_uuid,omitempty" xml:"app_uuid,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// tag_value
	TagValue *string `json:"tag_value,omitempty" xml:"tag_value,omitempty"`
}

func (s UpdateTraasmetaApptagRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaApptagRequest) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaApptagRequest) SetAuthToken(v string) *UpdateTraasmetaApptagRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateTraasmetaApptagRequest) SetUuid(v string) *UpdateTraasmetaApptagRequest {
	s.Uuid = &v
	return s
}

func (s *UpdateTraasmetaApptagRequest) SetTagKey(v string) *UpdateTraasmetaApptagRequest {
	s.TagKey = &v
	return s
}

func (s *UpdateTraasmetaApptagRequest) SetOutsideId(v string) *UpdateTraasmetaApptagRequest {
	s.OutsideId = &v
	return s
}

func (s *UpdateTraasmetaApptagRequest) SetSourceFrom(v string) *UpdateTraasmetaApptagRequest {
	s.SourceFrom = &v
	return s
}

func (s *UpdateTraasmetaApptagRequest) SetExtension(v string) *UpdateTraasmetaApptagRequest {
	s.Extension = &v
	return s
}

func (s *UpdateTraasmetaApptagRequest) SetTenantUuid(v string) *UpdateTraasmetaApptagRequest {
	s.TenantUuid = &v
	return s
}

func (s *UpdateTraasmetaApptagRequest) SetTenantName(v string) *UpdateTraasmetaApptagRequest {
	s.TenantName = &v
	return s
}

func (s *UpdateTraasmetaApptagRequest) SetAppUuid(v string) *UpdateTraasmetaApptagRequest {
	s.AppUuid = &v
	return s
}

func (s *UpdateTraasmetaApptagRequest) SetAppName(v string) *UpdateTraasmetaApptagRequest {
	s.AppName = &v
	return s
}

func (s *UpdateTraasmetaApptagRequest) SetTagValue(v string) *UpdateTraasmetaApptagRequest {
	s.TagValue = &v
	return s
}

type UpdateTraasmetaApptagResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_tag
	AppTag *TraasAppTagDto `json:"app_tag,omitempty" xml:"app_tag,omitempty"`
}

func (s UpdateTraasmetaApptagResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaApptagResponse) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaApptagResponse) SetReqMsgId(v string) *UpdateTraasmetaApptagResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateTraasmetaApptagResponse) SetResultCode(v string) *UpdateTraasmetaApptagResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateTraasmetaApptagResponse) SetResultMsg(v string) *UpdateTraasmetaApptagResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateTraasmetaApptagResponse) SetAppTag(v *TraasAppTagDto) *UpdateTraasmetaApptagResponse {
	s.AppTag = v
	return s
}

type CreateTraasmetaApptagRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// tag_key
	TagKey *string `json:"tag_key,omitempty" xml:"tag_key,omitempty" require:"true"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// tag_value
	TagValue *string `json:"tag_value,omitempty" xml:"tag_value,omitempty"`
	// app_uuid
	AppUuid *string `json:"app_uuid,omitempty" xml:"app_uuid,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
}

func (s CreateTraasmetaApptagRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaApptagRequest) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaApptagRequest) SetAuthToken(v string) *CreateTraasmetaApptagRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateTraasmetaApptagRequest) SetTagKey(v string) *CreateTraasmetaApptagRequest {
	s.TagKey = &v
	return s
}

func (s *CreateTraasmetaApptagRequest) SetOutsideId(v string) *CreateTraasmetaApptagRequest {
	s.OutsideId = &v
	return s
}

func (s *CreateTraasmetaApptagRequest) SetSourceFrom(v string) *CreateTraasmetaApptagRequest {
	s.SourceFrom = &v
	return s
}

func (s *CreateTraasmetaApptagRequest) SetExtension(v string) *CreateTraasmetaApptagRequest {
	s.Extension = &v
	return s
}

func (s *CreateTraasmetaApptagRequest) SetTenantUuid(v string) *CreateTraasmetaApptagRequest {
	s.TenantUuid = &v
	return s
}

func (s *CreateTraasmetaApptagRequest) SetTenantName(v string) *CreateTraasmetaApptagRequest {
	s.TenantName = &v
	return s
}

func (s *CreateTraasmetaApptagRequest) SetTagValue(v string) *CreateTraasmetaApptagRequest {
	s.TagValue = &v
	return s
}

func (s *CreateTraasmetaApptagRequest) SetAppUuid(v string) *CreateTraasmetaApptagRequest {
	s.AppUuid = &v
	return s
}

func (s *CreateTraasmetaApptagRequest) SetAppName(v string) *CreateTraasmetaApptagRequest {
	s.AppName = &v
	return s
}

type CreateTraasmetaApptagResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_tag
	AppTag *TraasAppTagDto `json:"app_tag,omitempty" xml:"app_tag,omitempty"`
}

func (s CreateTraasmetaApptagResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaApptagResponse) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaApptagResponse) SetReqMsgId(v string) *CreateTraasmetaApptagResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateTraasmetaApptagResponse) SetResultCode(v string) *CreateTraasmetaApptagResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateTraasmetaApptagResponse) SetResultMsg(v string) *CreateTraasmetaApptagResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateTraasmetaApptagResponse) SetAppTag(v *TraasAppTagDto) *CreateTraasmetaApptagResponse {
	s.AppTag = v
	return s
}

type CreateTraasmetaAppserverRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// hostname
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty" require:"true"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// host_ip
	HostIp *string `json:"host_ip,omitempty" xml:"host_ip,omitempty"`
	// collect_id
	CollectId *string `json:"collect_id,omitempty" xml:"collect_id,omitempty"`
	// status
	Status *bool `json:"status,omitempty" xml:"status,omitempty"`
	// workspace_uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// cell_uuid
	CellUuid *string `json:"cell_uuid,omitempty" xml:"cell_uuid,omitempty"`
	// zone_uuid
	ZoneUuid *string `json:"zone_uuid,omitempty" xml:"zone_uuid,omitempty"`
	// app_uuid
	AppUuid *string `json:"app_uuid,omitempty" xml:"app_uuid,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// app_service_uuid
	AppServiceUuid *string `json:"app_service_uuid,omitempty" xml:"app_service_uuid,omitempty"`
	// vm_uuid
	VmUuid *string `json:"vm_uuid,omitempty" xml:"vm_uuid,omitempty"`
	// pod_uuid
	PodUuid *string `json:"pod_uuid,omitempty" xml:"pod_uuid,omitempty"`
}

func (s CreateTraasmetaAppserverRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaAppserverRequest) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaAppserverRequest) SetAuthToken(v string) *CreateTraasmetaAppserverRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetHostname(v string) *CreateTraasmetaAppserverRequest {
	s.Hostname = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetOutsideId(v string) *CreateTraasmetaAppserverRequest {
	s.OutsideId = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetSourceFrom(v string) *CreateTraasmetaAppserverRequest {
	s.SourceFrom = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetExtension(v string) *CreateTraasmetaAppserverRequest {
	s.Extension = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetTenantUuid(v string) *CreateTraasmetaAppserverRequest {
	s.TenantUuid = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetTenantName(v string) *CreateTraasmetaAppserverRequest {
	s.TenantName = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetIp(v string) *CreateTraasmetaAppserverRequest {
	s.Ip = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetHostIp(v string) *CreateTraasmetaAppserverRequest {
	s.HostIp = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetCollectId(v string) *CreateTraasmetaAppserverRequest {
	s.CollectId = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetStatus(v bool) *CreateTraasmetaAppserverRequest {
	s.Status = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetWorkspaceUuid(v string) *CreateTraasmetaAppserverRequest {
	s.WorkspaceUuid = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetWorkspaceName(v string) *CreateTraasmetaAppserverRequest {
	s.WorkspaceName = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetCellUuid(v string) *CreateTraasmetaAppserverRequest {
	s.CellUuid = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetZoneUuid(v string) *CreateTraasmetaAppserverRequest {
	s.ZoneUuid = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetAppUuid(v string) *CreateTraasmetaAppserverRequest {
	s.AppUuid = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetAppName(v string) *CreateTraasmetaAppserverRequest {
	s.AppName = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetAppServiceUuid(v string) *CreateTraasmetaAppserverRequest {
	s.AppServiceUuid = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetVmUuid(v string) *CreateTraasmetaAppserverRequest {
	s.VmUuid = &v
	return s
}

func (s *CreateTraasmetaAppserverRequest) SetPodUuid(v string) *CreateTraasmetaAppserverRequest {
	s.PodUuid = &v
	return s
}

type CreateTraasmetaAppserverResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_server
	AppServer *TraasAppServerDto `json:"app_server,omitempty" xml:"app_server,omitempty"`
}

func (s CreateTraasmetaAppserverResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaAppserverResponse) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaAppserverResponse) SetReqMsgId(v string) *CreateTraasmetaAppserverResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateTraasmetaAppserverResponse) SetResultCode(v string) *CreateTraasmetaAppserverResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateTraasmetaAppserverResponse) SetResultMsg(v string) *CreateTraasmetaAppserverResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateTraasmetaAppserverResponse) SetAppServer(v *TraasAppServerDto) *CreateTraasmetaAppserverResponse {
	s.AppServer = v
	return s
}

type UpdateTraasmetaAppserverRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// hostname
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// host_ip
	HostIp *string `json:"host_ip,omitempty" xml:"host_ip,omitempty"`
	// collect_id
	CollectId *string `json:"collect_id,omitempty" xml:"collect_id,omitempty"`
	// status
	Status *bool `json:"status,omitempty" xml:"status,omitempty"`
	// workspace_uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// cell_uuid
	CellUuid *string `json:"cell_uuid,omitempty" xml:"cell_uuid,omitempty"`
	// zone_uuid
	ZoneUuid *string `json:"zone_uuid,omitempty" xml:"zone_uuid,omitempty"`
	// app_uuid
	AppUuid *string `json:"app_uuid,omitempty" xml:"app_uuid,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// app_service_uuid
	AppServiceUuid *string `json:"app_service_uuid,omitempty" xml:"app_service_uuid,omitempty"`
	// vm_uuid
	VmUuid *string `json:"vm_uuid,omitempty" xml:"vm_uuid,omitempty"`
	// pod_uuid
	PodUuid *string `json:"pod_uuid,omitempty" xml:"pod_uuid,omitempty"`
}

func (s UpdateTraasmetaAppserverRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaAppserverRequest) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaAppserverRequest) SetAuthToken(v string) *UpdateTraasmetaAppserverRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetUuid(v string) *UpdateTraasmetaAppserverRequest {
	s.Uuid = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetHostname(v string) *UpdateTraasmetaAppserverRequest {
	s.Hostname = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetOutsideId(v string) *UpdateTraasmetaAppserverRequest {
	s.OutsideId = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetSourceFrom(v string) *UpdateTraasmetaAppserverRequest {
	s.SourceFrom = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetExtension(v string) *UpdateTraasmetaAppserverRequest {
	s.Extension = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetTenantUuid(v string) *UpdateTraasmetaAppserverRequest {
	s.TenantUuid = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetTenantName(v string) *UpdateTraasmetaAppserverRequest {
	s.TenantName = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetIp(v string) *UpdateTraasmetaAppserverRequest {
	s.Ip = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetHostIp(v string) *UpdateTraasmetaAppserverRequest {
	s.HostIp = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetCollectId(v string) *UpdateTraasmetaAppserverRequest {
	s.CollectId = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetStatus(v bool) *UpdateTraasmetaAppserverRequest {
	s.Status = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetWorkspaceUuid(v string) *UpdateTraasmetaAppserverRequest {
	s.WorkspaceUuid = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetWorkspaceName(v string) *UpdateTraasmetaAppserverRequest {
	s.WorkspaceName = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetCellUuid(v string) *UpdateTraasmetaAppserverRequest {
	s.CellUuid = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetZoneUuid(v string) *UpdateTraasmetaAppserverRequest {
	s.ZoneUuid = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetAppUuid(v string) *UpdateTraasmetaAppserverRequest {
	s.AppUuid = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetAppName(v string) *UpdateTraasmetaAppserverRequest {
	s.AppName = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetAppServiceUuid(v string) *UpdateTraasmetaAppserverRequest {
	s.AppServiceUuid = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetVmUuid(v string) *UpdateTraasmetaAppserverRequest {
	s.VmUuid = &v
	return s
}

func (s *UpdateTraasmetaAppserverRequest) SetPodUuid(v string) *UpdateTraasmetaAppserverRequest {
	s.PodUuid = &v
	return s
}

type UpdateTraasmetaAppserverResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_server
	AppServer *TraasAppServerDto `json:"app_server,omitempty" xml:"app_server,omitempty"`
}

func (s UpdateTraasmetaAppserverResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaAppserverResponse) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaAppserverResponse) SetReqMsgId(v string) *UpdateTraasmetaAppserverResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateTraasmetaAppserverResponse) SetResultCode(v string) *UpdateTraasmetaAppserverResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateTraasmetaAppserverResponse) SetResultMsg(v string) *UpdateTraasmetaAppserverResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateTraasmetaAppserverResponse) SetAppServer(v *TraasAppServerDto) *UpdateTraasmetaAppserverResponse {
	s.AppServer = v
	return s
}

type GetSetupModelRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
}

func (s GetSetupModelRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSetupModelRequest) GoString() string {
	return s.String()
}

func (s *GetSetupModelRequest) SetAuthToken(v string) *GetSetupModelRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSetupModelRequest) SetWorkspaceName(v string) *GetSetupModelRequest {
	s.WorkspaceName = &v
	return s
}

type GetSetupModelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 主站试点的产品是否打开
	BetaPlugin *bool `json:"beta_plugin,omitempty" xml:"beta_plugin,omitempty"`
	// showBizDomain
	ShowBizDomain *bool `json:"show_biz_domain,omitempty" xml:"show_biz_domain,omitempty"`
	// drm 推送的地址列表, 如果为空，前端默认主站，如果不为空，按照配置来渲染
	SiteDrms []*SiteWithDrm `json:"site_drms,omitempty" xml:"site_drms,omitempty" type:"Repeated"`
	// 是不是租户总览用空间总览
	TenantUseWsOverview *bool `json:"tenant_use_ws_overview,omitempty" xml:"tenant_use_ws_overview,omitempty"`
	// iaas监控开关
	IaasMonitor *bool `json:"iaas_monitor,omitempty" xml:"iaas_monitor,omitempty"`
	// 应用监控的技术栈
	AppStack *string `json:"app_stack,omitempty" xml:"app_stack,omitempty"`
	// 应用监控的技术栈实体
	AppStackEntity *string `json:"app_stack_entity,omitempty" xml:"app_stack_entity,omitempty"`
	// 站点
	SiteEnv *string `json:"site_env,omitempty" xml:"site_env,omitempty"`
	// useNewAlarmConfig
	UseNewAlarmConfig *bool `json:"use_new_alarm_config,omitempty" xml:"use_new_alarm_config,omitempty"`
	// goc推送开关
	GocPushOpen *bool `json:"goc_push_open,omitempty" xml:"goc_push_open,omitempty"`
	// 是否打开高级产品配置，脚本、联合计算等
	AdvCustomPluinOpen *bool `json:"adv_custom_pluin_open,omitempty" xml:"adv_custom_pluin_open,omitempty"`
	// 导航是否鉴权
	NavAuth *bool `json:"nav_auth,omitempty" xml:"nav_auth,omitempty"`
	// unFocusPageShutFresh
	UnFocusPageShutFresh *bool `json:"un_focus_page_shut_fresh,omitempty" xml:"un_focus_page_shut_fresh,omitempty"`
	// lineChartIncreFresh
	LineChartIncreFresh *bool `json:"line_chart_incre_fresh,omitempty" xml:"line_chart_incre_fresh,omitempty"`
	// ws开关
	ShowWs *bool `json:"show_ws,omitempty" xml:"show_ws,omitempty"`
	// Tenant开关
	ShowTenant *bool `json:"show_tenant,omitempty" xml:"show_tenant,omitempty"`
	// searchEagleEye
	SearchEagleEye *bool `json:"search_eagle_eye,omitempty" xml:"search_eagle_eye,omitempty"`
	// 系统指标默认显示的周期
	SysMetricInterval *string `json:"sys_metric_interval,omitempty" xml:"sys_metric_interval,omitempty"`
	// uuidWithWorkspace
	UuidWithWorkspace *bool `json:"uuid_with_workspace,omitempty" xml:"uuid_with_workspace,omitempty"`
	// 封网变更标志
	BlockChange *bool `json:"block_change,omitempty" xml:"block_change,omitempty"`
	// bizEditors
	BizEditors []*string `json:"biz_editors,omitempty" xml:"biz_editors,omitempty" type:"Repeated"`
	// 数据接口还使用fiber接口的租户
	UseFiberDataTenants []*string `json:"use_fiber_data_tenants,omitempty" xml:"use_fiber_data_tenants,omitempty" type:"Repeated"`
	// 平台运维技术栈（前端利用这个值来判断将哪些技术栈展示在平台运维版块）
	PlatformMonitorStackNames []*string `json:"platform_monitor_stack_names,omitempty" xml:"platform_monitor_stack_names,omitempty" type:"Repeated"`
	// 菜单配置
	MenuConfig *MenuConfig `json:"menu_config,omitempty" xml:"menu_config,omitempty"`
	// 是否开启秒级监控配置，默认关闭
	SecondMonitorEnable *bool `json:"second_monitor_enable,omitempty" xml:"second_monitor_enable,omitempty"`
	// 是否允许前端显示应用分组
	ShowAppGroup *bool `json:"show_app_group,omitempty" xml:"show_app_group,omitempty"`
	// 是否禁用老版告警
	DisableOldAlarm *bool `json:"disable_old_alarm,omitempty" xml:"disable_old_alarm,omitempty"`
	// frontDatasource
	FrontDatasource *string `json:"front_datasource,omitempty" xml:"front_datasource,omitempty"`
	// frontDashboard
	FrontDashboard *string `json:"front_dashboard,omitempty" xml:"front_dashboard,omitempty"`
	// showAllChartType
	ShowAllChartType *string `json:"show_all_chart_type,omitempty" xml:"show_all_chart_type,omitempty"`
	// showImportReplace
	ShowImportReplace *string `json:"show_import_replace,omitempty" xml:"show_import_replace,omitempty"`
}

func (s GetSetupModelResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSetupModelResponse) GoString() string {
	return s.String()
}

func (s *GetSetupModelResponse) SetReqMsgId(v string) *GetSetupModelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSetupModelResponse) SetResultCode(v string) *GetSetupModelResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSetupModelResponse) SetResultMsg(v string) *GetSetupModelResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSetupModelResponse) SetBetaPlugin(v bool) *GetSetupModelResponse {
	s.BetaPlugin = &v
	return s
}

func (s *GetSetupModelResponse) SetShowBizDomain(v bool) *GetSetupModelResponse {
	s.ShowBizDomain = &v
	return s
}

func (s *GetSetupModelResponse) SetSiteDrms(v []*SiteWithDrm) *GetSetupModelResponse {
	s.SiteDrms = v
	return s
}

func (s *GetSetupModelResponse) SetTenantUseWsOverview(v bool) *GetSetupModelResponse {
	s.TenantUseWsOverview = &v
	return s
}

func (s *GetSetupModelResponse) SetIaasMonitor(v bool) *GetSetupModelResponse {
	s.IaasMonitor = &v
	return s
}

func (s *GetSetupModelResponse) SetAppStack(v string) *GetSetupModelResponse {
	s.AppStack = &v
	return s
}

func (s *GetSetupModelResponse) SetAppStackEntity(v string) *GetSetupModelResponse {
	s.AppStackEntity = &v
	return s
}

func (s *GetSetupModelResponse) SetSiteEnv(v string) *GetSetupModelResponse {
	s.SiteEnv = &v
	return s
}

func (s *GetSetupModelResponse) SetUseNewAlarmConfig(v bool) *GetSetupModelResponse {
	s.UseNewAlarmConfig = &v
	return s
}

func (s *GetSetupModelResponse) SetGocPushOpen(v bool) *GetSetupModelResponse {
	s.GocPushOpen = &v
	return s
}

func (s *GetSetupModelResponse) SetAdvCustomPluinOpen(v bool) *GetSetupModelResponse {
	s.AdvCustomPluinOpen = &v
	return s
}

func (s *GetSetupModelResponse) SetNavAuth(v bool) *GetSetupModelResponse {
	s.NavAuth = &v
	return s
}

func (s *GetSetupModelResponse) SetUnFocusPageShutFresh(v bool) *GetSetupModelResponse {
	s.UnFocusPageShutFresh = &v
	return s
}

func (s *GetSetupModelResponse) SetLineChartIncreFresh(v bool) *GetSetupModelResponse {
	s.LineChartIncreFresh = &v
	return s
}

func (s *GetSetupModelResponse) SetShowWs(v bool) *GetSetupModelResponse {
	s.ShowWs = &v
	return s
}

func (s *GetSetupModelResponse) SetShowTenant(v bool) *GetSetupModelResponse {
	s.ShowTenant = &v
	return s
}

func (s *GetSetupModelResponse) SetSearchEagleEye(v bool) *GetSetupModelResponse {
	s.SearchEagleEye = &v
	return s
}

func (s *GetSetupModelResponse) SetSysMetricInterval(v string) *GetSetupModelResponse {
	s.SysMetricInterval = &v
	return s
}

func (s *GetSetupModelResponse) SetUuidWithWorkspace(v bool) *GetSetupModelResponse {
	s.UuidWithWorkspace = &v
	return s
}

func (s *GetSetupModelResponse) SetBlockChange(v bool) *GetSetupModelResponse {
	s.BlockChange = &v
	return s
}

func (s *GetSetupModelResponse) SetBizEditors(v []*string) *GetSetupModelResponse {
	s.BizEditors = v
	return s
}

func (s *GetSetupModelResponse) SetUseFiberDataTenants(v []*string) *GetSetupModelResponse {
	s.UseFiberDataTenants = v
	return s
}

func (s *GetSetupModelResponse) SetPlatformMonitorStackNames(v []*string) *GetSetupModelResponse {
	s.PlatformMonitorStackNames = v
	return s
}

func (s *GetSetupModelResponse) SetMenuConfig(v *MenuConfig) *GetSetupModelResponse {
	s.MenuConfig = v
	return s
}

func (s *GetSetupModelResponse) SetSecondMonitorEnable(v bool) *GetSetupModelResponse {
	s.SecondMonitorEnable = &v
	return s
}

func (s *GetSetupModelResponse) SetShowAppGroup(v bool) *GetSetupModelResponse {
	s.ShowAppGroup = &v
	return s
}

func (s *GetSetupModelResponse) SetDisableOldAlarm(v bool) *GetSetupModelResponse {
	s.DisableOldAlarm = &v
	return s
}

func (s *GetSetupModelResponse) SetFrontDatasource(v string) *GetSetupModelResponse {
	s.FrontDatasource = &v
	return s
}

func (s *GetSetupModelResponse) SetFrontDashboard(v string) *GetSetupModelResponse {
	s.FrontDashboard = &v
	return s
}

func (s *GetSetupModelResponse) SetShowAllChartType(v string) *GetSetupModelResponse {
	s.ShowAllChartType = &v
	return s
}

func (s *GetSetupModelResponse) SetShowImportReplace(v string) *GetSetupModelResponse {
	s.ShowImportReplace = &v
	return s
}

type CreateTraasmetaWorkspacegroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s CreateTraasmetaWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaWorkspacegroupRequest) SetAuthToken(v string) *CreateTraasmetaWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateTraasmetaWorkspacegroupRequest) SetName(v string) *CreateTraasmetaWorkspacegroupRequest {
	s.Name = &v
	return s
}

func (s *CreateTraasmetaWorkspacegroupRequest) SetDisplayName(v string) *CreateTraasmetaWorkspacegroupRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateTraasmetaWorkspacegroupRequest) SetOutsideId(v string) *CreateTraasmetaWorkspacegroupRequest {
	s.OutsideId = &v
	return s
}

func (s *CreateTraasmetaWorkspacegroupRequest) SetSourceFrom(v string) *CreateTraasmetaWorkspacegroupRequest {
	s.SourceFrom = &v
	return s
}

func (s *CreateTraasmetaWorkspacegroupRequest) SetExtension(v string) *CreateTraasmetaWorkspacegroupRequest {
	s.Extension = &v
	return s
}

func (s *CreateTraasmetaWorkspacegroupRequest) SetTenantUuid(v string) *CreateTraasmetaWorkspacegroupRequest {
	s.TenantUuid = &v
	return s
}

func (s *CreateTraasmetaWorkspacegroupRequest) SetTenantName(v string) *CreateTraasmetaWorkspacegroupRequest {
	s.TenantName = &v
	return s
}

type CreateTraasmetaWorkspacegroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspace_group
	WorkspaceGroup *TraasWorkspaceGroupDto `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
}

func (s CreateTraasmetaWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaWorkspacegroupResponse) SetReqMsgId(v string) *CreateTraasmetaWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateTraasmetaWorkspacegroupResponse) SetResultCode(v string) *CreateTraasmetaWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateTraasmetaWorkspacegroupResponse) SetResultMsg(v string) *CreateTraasmetaWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateTraasmetaWorkspacegroupResponse) SetWorkspaceGroup(v *TraasWorkspaceGroupDto) *CreateTraasmetaWorkspacegroupResponse {
	s.WorkspaceGroup = v
	return s
}

type GetTraasmetaCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetTraasmetaCellRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaCellRequest) GoString() string {
	return s.String()
}

func (s *GetTraasmetaCellRequest) SetAuthToken(v string) *GetTraasmetaCellRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTraasmetaCellRequest) SetUuid(v string) *GetTraasmetaCellRequest {
	s.Uuid = &v
	return s
}

func (s *GetTraasmetaCellRequest) SetWorkspaceName(v string) *GetTraasmetaCellRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetTraasmetaCellRequest) SetName(v string) *GetTraasmetaCellRequest {
	s.Name = &v
	return s
}

type GetTraasmetaCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cell
	Cell *TraasCellDto `json:"cell,omitempty" xml:"cell,omitempty"`
}

func (s GetTraasmetaCellResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaCellResponse) GoString() string {
	return s.String()
}

func (s *GetTraasmetaCellResponse) SetReqMsgId(v string) *GetTraasmetaCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTraasmetaCellResponse) SetResultCode(v string) *GetTraasmetaCellResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTraasmetaCellResponse) SetResultMsg(v string) *GetTraasmetaCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTraasmetaCellResponse) SetCell(v *TraasCellDto) *GetTraasmetaCellResponse {
	s.Cell = v
	return s
}

type PagequeryTraasmetaCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty" require:"true"`
	// cell name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// workspace name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// workspace uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty"`
}

func (s PagequeryTraasmetaCellRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaCellRequest) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaCellRequest) SetAuthToken(v string) *PagequeryTraasmetaCellRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryTraasmetaCellRequest) SetPageSize(v int64) *PagequeryTraasmetaCellRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaCellRequest) SetCurrentPage(v int64) *PagequeryTraasmetaCellRequest {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaCellRequest) SetName(v string) *PagequeryTraasmetaCellRequest {
	s.Name = &v
	return s
}

func (s *PagequeryTraasmetaCellRequest) SetWorkspaceName(v string) *PagequeryTraasmetaCellRequest {
	s.WorkspaceName = &v
	return s
}

func (s *PagequeryTraasmetaCellRequest) SetWorkspaceUuid(v string) *PagequeryTraasmetaCellRequest {
	s.WorkspaceUuid = &v
	return s
}

type PagequeryTraasmetaCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cells
	Cells []*TraasCellDto `json:"cells,omitempty" xml:"cells,omitempty" type:"Repeated"`
	// page size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// current page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// total count
	TotalCount *string `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s PagequeryTraasmetaCellResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaCellResponse) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaCellResponse) SetReqMsgId(v string) *PagequeryTraasmetaCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryTraasmetaCellResponse) SetResultCode(v string) *PagequeryTraasmetaCellResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryTraasmetaCellResponse) SetResultMsg(v string) *PagequeryTraasmetaCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryTraasmetaCellResponse) SetCells(v []*TraasCellDto) *PagequeryTraasmetaCellResponse {
	s.Cells = v
	return s
}

func (s *PagequeryTraasmetaCellResponse) SetPageSize(v int64) *PagequeryTraasmetaCellResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaCellResponse) SetCurrentPage(v int64) *PagequeryTraasmetaCellResponse {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaCellResponse) SetTotalCount(v string) *PagequeryTraasmetaCellResponse {
	s.TotalCount = &v
	return s
}

type GetTraasmetaHostmachineRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// workspace_uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty"`
}

func (s GetTraasmetaHostmachineRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaHostmachineRequest) GoString() string {
	return s.String()
}

func (s *GetTraasmetaHostmachineRequest) SetAuthToken(v string) *GetTraasmetaHostmachineRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTraasmetaHostmachineRequest) SetUuid(v string) *GetTraasmetaHostmachineRequest {
	s.Uuid = &v
	return s
}

func (s *GetTraasmetaHostmachineRequest) SetWorkspaceName(v string) *GetTraasmetaHostmachineRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetTraasmetaHostmachineRequest) SetIp(v string) *GetTraasmetaHostmachineRequest {
	s.Ip = &v
	return s
}

func (s *GetTraasmetaHostmachineRequest) SetWorkspaceUuid(v string) *GetTraasmetaHostmachineRequest {
	s.WorkspaceUuid = &v
	return s
}

type GetTraasmetaHostmachineResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// host_machine
	HostMachine *TraasHostMachineDto `json:"host_machine,omitempty" xml:"host_machine,omitempty"`
}

func (s GetTraasmetaHostmachineResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTraasmetaHostmachineResponse) GoString() string {
	return s.String()
}

func (s *GetTraasmetaHostmachineResponse) SetReqMsgId(v string) *GetTraasmetaHostmachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTraasmetaHostmachineResponse) SetResultCode(v string) *GetTraasmetaHostmachineResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTraasmetaHostmachineResponse) SetResultMsg(v string) *GetTraasmetaHostmachineResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTraasmetaHostmachineResponse) SetHostMachine(v *TraasHostMachineDto) *GetTraasmetaHostmachineResponse {
	s.HostMachine = v
	return s
}

type PagequeryTraasmetaHostmachineRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// currentPage
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty" require:"true"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// workspace_uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty"`
	// hostname
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
}

func (s PagequeryTraasmetaHostmachineRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaHostmachineRequest) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaHostmachineRequest) SetAuthToken(v string) *PagequeryTraasmetaHostmachineRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryTraasmetaHostmachineRequest) SetPageSize(v int64) *PagequeryTraasmetaHostmachineRequest {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaHostmachineRequest) SetCurrentPage(v int64) *PagequeryTraasmetaHostmachineRequest {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaHostmachineRequest) SetWorkspaceName(v string) *PagequeryTraasmetaHostmachineRequest {
	s.WorkspaceName = &v
	return s
}

func (s *PagequeryTraasmetaHostmachineRequest) SetWorkspaceUuid(v string) *PagequeryTraasmetaHostmachineRequest {
	s.WorkspaceUuid = &v
	return s
}

func (s *PagequeryTraasmetaHostmachineRequest) SetHostname(v string) *PagequeryTraasmetaHostmachineRequest {
	s.Hostname = &v
	return s
}

func (s *PagequeryTraasmetaHostmachineRequest) SetIp(v string) *PagequeryTraasmetaHostmachineRequest {
	s.Ip = &v
	return s
}

type PagequeryTraasmetaHostmachineResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// host_machines
	HostMachines []*TraasHostMachineDto `json:"host_machines,omitempty" xml:"host_machines,omitempty" type:"Repeated"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s PagequeryTraasmetaHostmachineResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryTraasmetaHostmachineResponse) GoString() string {
	return s.String()
}

func (s *PagequeryTraasmetaHostmachineResponse) SetReqMsgId(v string) *PagequeryTraasmetaHostmachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryTraasmetaHostmachineResponse) SetResultCode(v string) *PagequeryTraasmetaHostmachineResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryTraasmetaHostmachineResponse) SetResultMsg(v string) *PagequeryTraasmetaHostmachineResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryTraasmetaHostmachineResponse) SetHostMachines(v []*TraasHostMachineDto) *PagequeryTraasmetaHostmachineResponse {
	s.HostMachines = v
	return s
}

func (s *PagequeryTraasmetaHostmachineResponse) SetPageSize(v int64) *PagequeryTraasmetaHostmachineResponse {
	s.PageSize = &v
	return s
}

func (s *PagequeryTraasmetaHostmachineResponse) SetCurrentPage(v int64) *PagequeryTraasmetaHostmachineResponse {
	s.CurrentPage = &v
	return s
}

func (s *PagequeryTraasmetaHostmachineResponse) SetTotalCount(v int64) *PagequeryTraasmetaHostmachineResponse {
	s.TotalCount = &v
	return s
}

type QueryTraceDetailtopologyRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// trace_id
	TraceId *string `json:"trace_id,omitempty" xml:"trace_id,omitempty" require:"true"`
}

func (s QueryTraceDetailtopologyRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceDetailtopologyRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceDetailtopologyRequest) SetAuthToken(v string) *QueryTraceDetailtopologyRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceDetailtopologyRequest) SetWorkspaceName(v string) *QueryTraceDetailtopologyRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTraceDetailtopologyRequest) SetTraceId(v string) *QueryTraceDetailtopologyRequest {
	s.TraceId = &v
	return s
}

type QueryTraceDetailtopologyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 拓扑节点
	Items []*TraceDetailTopologyItem `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
}

func (s QueryTraceDetailtopologyResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceDetailtopologyResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceDetailtopologyResponse) SetReqMsgId(v string) *QueryTraceDetailtopologyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceDetailtopologyResponse) SetResultCode(v string) *QueryTraceDetailtopologyResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceDetailtopologyResponse) SetResultMsg(v string) *QueryTraceDetailtopologyResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceDetailtopologyResponse) SetItems(v []*TraceDetailTopologyItem) *QueryTraceDetailtopologyResponse {
	s.Items = v
	return s
}

type SaveTenantconfigSpiRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// configKey参数名称
	EntityName *string `json:"entity_name,omitempty" xml:"entity_name,omitempty" require:"true"`
	// end_point
	EndPoint *string `json:"end_point,omitempty" xml:"end_point,omitempty" require:"true"`
	// 默认为CamelCase
	FieldNamingStrategy *string `json:"field_naming_strategy,omitempty" xml:"field_naming_strategy,omitempty"`
	// 云厂商类型
	CloudVendorType *string `json:"cloud_vendor_type,omitempty" xml:"cloud_vendor_type,omitempty"`
}

func (s SaveTenantconfigSpiRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveTenantconfigSpiRequest) GoString() string {
	return s.String()
}

func (s *SaveTenantconfigSpiRequest) SetAuthToken(v string) *SaveTenantconfigSpiRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveTenantconfigSpiRequest) SetWorkspaceName(v string) *SaveTenantconfigSpiRequest {
	s.WorkspaceName = &v
	return s
}

func (s *SaveTenantconfigSpiRequest) SetEntityName(v string) *SaveTenantconfigSpiRequest {
	s.EntityName = &v
	return s
}

func (s *SaveTenantconfigSpiRequest) SetEndPoint(v string) *SaveTenantconfigSpiRequest {
	s.EndPoint = &v
	return s
}

func (s *SaveTenantconfigSpiRequest) SetFieldNamingStrategy(v string) *SaveTenantconfigSpiRequest {
	s.FieldNamingStrategy = &v
	return s
}

func (s *SaveTenantconfigSpiRequest) SetCloudVendorType(v string) *SaveTenantconfigSpiRequest {
	s.CloudVendorType = &v
	return s
}

type SaveTenantconfigSpiResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SaveTenantconfigSpiResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveTenantconfigSpiResponse) GoString() string {
	return s.String()
}

func (s *SaveTenantconfigSpiResponse) SetReqMsgId(v string) *SaveTenantconfigSpiResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveTenantconfigSpiResponse) SetResultCode(v string) *SaveTenantconfigSpiResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveTenantconfigSpiResponse) SetResultMsg(v string) *SaveTenantconfigSpiResponse {
	s.ResultMsg = &v
	return s
}

type QueryTenantconfigSpiRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 模块名称
	EntityName *string `json:"entity_name,omitempty" xml:"entity_name,omitempty" require:"true"`
}

func (s QueryTenantconfigSpiRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTenantconfigSpiRequest) GoString() string {
	return s.String()
}

func (s *QueryTenantconfigSpiRequest) SetAuthToken(v string) *QueryTenantconfigSpiRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTenantconfigSpiRequest) SetWorkspaceName(v string) *QueryTenantconfigSpiRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTenantconfigSpiRequest) SetEntityName(v string) *QueryTenantconfigSpiRequest {
	s.EntityName = &v
	return s
}

type QueryTenantconfigSpiResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// entity_name
	EntityName *string `json:"entity_name,omitempty" xml:"entity_name,omitempty"`
	// spi_config
	ConfigValue *SpiConfig `json:"config_value,omitempty" xml:"config_value,omitempty"`
}

func (s QueryTenantconfigSpiResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTenantconfigSpiResponse) GoString() string {
	return s.String()
}

func (s *QueryTenantconfigSpiResponse) SetReqMsgId(v string) *QueryTenantconfigSpiResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTenantconfigSpiResponse) SetResultCode(v string) *QueryTenantconfigSpiResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTenantconfigSpiResponse) SetResultMsg(v string) *QueryTenantconfigSpiResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTenantconfigSpiResponse) SetEntityName(v string) *QueryTenantconfigSpiResponse {
	s.EntityName = &v
	return s
}

func (s *QueryTenantconfigSpiResponse) SetConfigValue(v *SpiConfig) *QueryTenantconfigSpiResponse {
	s.ConfigValue = v
	return s
}

type ListOneconsoleWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s ListOneconsoleWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOneconsoleWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *ListOneconsoleWorkspaceRequest) SetAuthToken(v string) *ListOneconsoleWorkspaceRequest {
	s.AuthToken = &v
	return s
}

type ListOneconsoleWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*OneConsoleRegion `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListOneconsoleWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOneconsoleWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *ListOneconsoleWorkspaceResponse) SetReqMsgId(v string) *ListOneconsoleWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListOneconsoleWorkspaceResponse) SetResultCode(v string) *ListOneconsoleWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *ListOneconsoleWorkspaceResponse) SetResultMsg(v string) *ListOneconsoleWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListOneconsoleWorkspaceResponse) SetData(v []*OneConsoleRegion) *ListOneconsoleWorkspaceResponse {
	s.Data = v
	return s
}

type DeleteTenantconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 模块名称
	EntityName *string `json:"entity_name,omitempty" xml:"entity_name,omitempty" require:"true"`
}

func (s DeleteTenantconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTenantconfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteTenantconfigRequest) SetAuthToken(v string) *DeleteTenantconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteTenantconfigRequest) SetWorkspaceName(v string) *DeleteTenantconfigRequest {
	s.WorkspaceName = &v
	return s
}

func (s *DeleteTenantconfigRequest) SetEntityName(v string) *DeleteTenantconfigRequest {
	s.EntityName = &v
	return s
}

type DeleteTenantconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteTenantconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTenantconfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteTenantconfigResponse) SetReqMsgId(v string) *DeleteTenantconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteTenantconfigResponse) SetResultCode(v string) *DeleteTenantconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteTenantconfigResponse) SetResultMsg(v string) *DeleteTenantconfigResponse {
	s.ResultMsg = &v
	return s
}

type QueryTenantconfigTokenRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// configKey对应值
	EntityName *string `json:"entity_name,omitempty" xml:"entity_name,omitempty" require:"true"`
}

func (s QueryTenantconfigTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTenantconfigTokenRequest) GoString() string {
	return s.String()
}

func (s *QueryTenantconfigTokenRequest) SetAuthToken(v string) *QueryTenantconfigTokenRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTenantconfigTokenRequest) SetWorkspaceName(v string) *QueryTenantconfigTokenRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryTenantconfigTokenRequest) SetEntityName(v string) *QueryTenantconfigTokenRequest {
	s.EntityName = &v
	return s
}

type QueryTenantconfigTokenResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// token_config
	ConfigValue *TokenConfig `json:"config_value,omitempty" xml:"config_value,omitempty"`
	// entity_name
	EntityName *string `json:"entity_name,omitempty" xml:"entity_name,omitempty"`
}

func (s QueryTenantconfigTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTenantconfigTokenResponse) GoString() string {
	return s.String()
}

func (s *QueryTenantconfigTokenResponse) SetReqMsgId(v string) *QueryTenantconfigTokenResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTenantconfigTokenResponse) SetResultCode(v string) *QueryTenantconfigTokenResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTenantconfigTokenResponse) SetResultMsg(v string) *QueryTenantconfigTokenResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTenantconfigTokenResponse) SetConfigValue(v *TokenConfig) *QueryTenantconfigTokenResponse {
	s.ConfigValue = v
	return s
}

func (s *QueryTenantconfigTokenResponse) SetEntityName(v string) *QueryTenantconfigTokenResponse {
	s.EntityName = &v
	return s
}

type SaveTenantconfigTokenRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// configKey对应值
	EntityName *string `json:"entity_name,omitempty" xml:"entity_name,omitempty" require:"true"`
	// token值
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
}

func (s SaveTenantconfigTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveTenantconfigTokenRequest) GoString() string {
	return s.String()
}

func (s *SaveTenantconfigTokenRequest) SetAuthToken(v string) *SaveTenantconfigTokenRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveTenantconfigTokenRequest) SetWorkspaceName(v string) *SaveTenantconfigTokenRequest {
	s.WorkspaceName = &v
	return s
}

func (s *SaveTenantconfigTokenRequest) SetEntityName(v string) *SaveTenantconfigTokenRequest {
	s.EntityName = &v
	return s
}

func (s *SaveTenantconfigTokenRequest) SetToken(v string) *SaveTenantconfigTokenRequest {
	s.Token = &v
	return s
}

type SaveTenantconfigTokenResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SaveTenantconfigTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveTenantconfigTokenResponse) GoString() string {
	return s.String()
}

func (s *SaveTenantconfigTokenResponse) SetReqMsgId(v string) *SaveTenantconfigTokenResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveTenantconfigTokenResponse) SetResultCode(v string) *SaveTenantconfigTokenResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveTenantconfigTokenResponse) SetResultMsg(v string) *SaveTenantconfigTokenResponse {
	s.ResultMsg = &v
	return s
}

type QueryTraasmetaEntityRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// entity_name
	EntityName *string `json:"entity_name,omitempty" xml:"entity_name,omitempty" require:"true"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
}

func (s QueryTraasmetaEntityRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaEntityRequest) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaEntityRequest) SetAuthToken(v string) *QueryTraasmetaEntityRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraasmetaEntityRequest) SetEntityName(v string) *QueryTraasmetaEntityRequest {
	s.EntityName = &v
	return s
}

func (s *QueryTraasmetaEntityRequest) SetWorkspaceName(v string) *QueryTraasmetaEntityRequest {
	s.WorkspaceName = &v
	return s
}

type QueryTraasmetaEntityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 实体名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 展示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// 实体所属分组名称
	GroupName *string `json:"group_name,omitempty" xml:"group_name,omitempty"`
	// 实例所属分组展示名称
	GroupDisplayName *string `json:"group_display_name,omitempty" xml:"group_display_name,omitempty"`
}

func (s QueryTraasmetaEntityResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaEntityResponse) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaEntityResponse) SetReqMsgId(v string) *QueryTraasmetaEntityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraasmetaEntityResponse) SetResultCode(v string) *QueryTraasmetaEntityResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraasmetaEntityResponse) SetResultMsg(v string) *QueryTraasmetaEntityResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraasmetaEntityResponse) SetName(v string) *QueryTraasmetaEntityResponse {
	s.Name = &v
	return s
}

func (s *QueryTraasmetaEntityResponse) SetDisplayName(v string) *QueryTraasmetaEntityResponse {
	s.DisplayName = &v
	return s
}

func (s *QueryTraasmetaEntityResponse) SetGroupName(v string) *QueryTraasmetaEntityResponse {
	s.GroupName = &v
	return s
}

func (s *QueryTraasmetaEntityResponse) SetGroupDisplayName(v string) *QueryTraasmetaEntityResponse {
	s.GroupDisplayName = &v
	return s
}

type ListTraasmetaEntityfieldRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 实体名称
	EntityName *string `json:"entity_name,omitempty" xml:"entity_name,omitempty" require:"true"`
}

func (s ListTraasmetaEntityfieldRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTraasmetaEntityfieldRequest) GoString() string {
	return s.String()
}

func (s *ListTraasmetaEntityfieldRequest) SetAuthToken(v string) *ListTraasmetaEntityfieldRequest {
	s.AuthToken = &v
	return s
}

func (s *ListTraasmetaEntityfieldRequest) SetEntityName(v string) *ListTraasmetaEntityfieldRequest {
	s.EntityName = &v
	return s
}

type ListTraasmetaEntityfieldResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// fields
	Fields []*TraasEntityFieldDto `json:"fields,omitempty" xml:"fields,omitempty" type:"Repeated"`
}

func (s ListTraasmetaEntityfieldResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTraasmetaEntityfieldResponse) GoString() string {
	return s.String()
}

func (s *ListTraasmetaEntityfieldResponse) SetReqMsgId(v string) *ListTraasmetaEntityfieldResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListTraasmetaEntityfieldResponse) SetResultCode(v string) *ListTraasmetaEntityfieldResponse {
	s.ResultCode = &v
	return s
}

func (s *ListTraasmetaEntityfieldResponse) SetResultMsg(v string) *ListTraasmetaEntityfieldResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListTraasmetaEntityfieldResponse) SetFields(v []*TraasEntityFieldDto) *ListTraasmetaEntityfieldResponse {
	s.Fields = v
	return s
}

type QueryTraasmetaEntitytopoRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// entity_name
	EntityName *string `json:"entity_name,omitempty" xml:"entity_name,omitempty" require:"true"`
}

func (s QueryTraasmetaEntitytopoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaEntitytopoRequest) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaEntitytopoRequest) SetAuthToken(v string) *QueryTraasmetaEntitytopoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraasmetaEntitytopoRequest) SetEntityName(v string) *QueryTraasmetaEntitytopoRequest {
	s.EntityName = &v
	return s
}

type QueryTraasmetaEntitytopoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// edges
	Edges []*TraasEntityTopoEdge `json:"edges,omitempty" xml:"edges,omitempty" type:"Repeated"`
}

func (s QueryTraasmetaEntitytopoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaEntitytopoResponse) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaEntitytopoResponse) SetReqMsgId(v string) *QueryTraasmetaEntitytopoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraasmetaEntitytopoResponse) SetResultCode(v string) *QueryTraasmetaEntitytopoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraasmetaEntitytopoResponse) SetResultMsg(v string) *QueryTraasmetaEntitytopoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraasmetaEntitytopoResponse) SetEdges(v []*TraasEntityTopoEdge) *QueryTraasmetaEntitytopoResponse {
	s.Edges = v
	return s
}

type AllTraasmetaHostmachineRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s AllTraasmetaHostmachineRequest) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaHostmachineRequest) GoString() string {
	return s.String()
}

func (s *AllTraasmetaHostmachineRequest) SetAuthToken(v string) *AllTraasmetaHostmachineRequest {
	s.AuthToken = &v
	return s
}

type AllTraasmetaHostmachineResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// hosts
	Hosts []*TraasHostMachineDto `json:"hosts,omitempty" xml:"hosts,omitempty" type:"Repeated"`
}

func (s AllTraasmetaHostmachineResponse) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaHostmachineResponse) GoString() string {
	return s.String()
}

func (s *AllTraasmetaHostmachineResponse) SetReqMsgId(v string) *AllTraasmetaHostmachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllTraasmetaHostmachineResponse) SetResultCode(v string) *AllTraasmetaHostmachineResponse {
	s.ResultCode = &v
	return s
}

func (s *AllTraasmetaHostmachineResponse) SetResultMsg(v string) *AllTraasmetaHostmachineResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllTraasmetaHostmachineResponse) SetHosts(v []*TraasHostMachineDto) *AllTraasmetaHostmachineResponse {
	s.Hosts = v
	return s
}

type BatchcreateTraasmetaHostmachineRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// hosts
	Hosts []*TraasHostMachineDto `json:"hosts,omitempty" xml:"hosts,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateTraasmetaHostmachineRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaHostmachineRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaHostmachineRequest) SetAuthToken(v string) *BatchcreateTraasmetaHostmachineRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateTraasmetaHostmachineRequest) SetHosts(v []*TraasHostMachineDto) *BatchcreateTraasmetaHostmachineRequest {
	s.Hosts = v
	return s
}

type BatchcreateTraasmetaHostmachineResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// hosts
	Hosts []*TraasHostMachineDto `json:"hosts,omitempty" xml:"hosts,omitempty" type:"Repeated"`
}

func (s BatchcreateTraasmetaHostmachineResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaHostmachineResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaHostmachineResponse) SetReqMsgId(v string) *BatchcreateTraasmetaHostmachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateTraasmetaHostmachineResponse) SetResultCode(v string) *BatchcreateTraasmetaHostmachineResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateTraasmetaHostmachineResponse) SetResultMsg(v string) *BatchcreateTraasmetaHostmachineResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateTraasmetaHostmachineResponse) SetHosts(v []*TraasHostMachineDto) *BatchcreateTraasmetaHostmachineResponse {
	s.Hosts = v
	return s
}

type BatchdeleteTraasmetaHostmachineRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteTraasmetaHostmachineRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaHostmachineRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaHostmachineRequest) SetAuthToken(v string) *BatchdeleteTraasmetaHostmachineRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteTraasmetaHostmachineRequest) SetUuids(v []*string) *BatchdeleteTraasmetaHostmachineRequest {
	s.Uuids = v
	return s
}

type BatchdeleteTraasmetaHostmachineResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteTraasmetaHostmachineResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaHostmachineResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaHostmachineResponse) SetReqMsgId(v string) *BatchdeleteTraasmetaHostmachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteTraasmetaHostmachineResponse) SetResultCode(v string) *BatchdeleteTraasmetaHostmachineResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteTraasmetaHostmachineResponse) SetResultMsg(v string) *BatchdeleteTraasmetaHostmachineResponse {
	s.ResultMsg = &v
	return s
}

type BatchqueryTraasmetaHostmachineRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" type:"Repeated"`
	// ips
	Ips []*string `json:"ips,omitempty" xml:"ips,omitempty" type:"Repeated"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// workspace_uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
}

func (s BatchqueryTraasmetaHostmachineRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaHostmachineRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaHostmachineRequest) SetAuthToken(v string) *BatchqueryTraasmetaHostmachineRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryTraasmetaHostmachineRequest) SetUuids(v []*string) *BatchqueryTraasmetaHostmachineRequest {
	s.Uuids = v
	return s
}

func (s *BatchqueryTraasmetaHostmachineRequest) SetIps(v []*string) *BatchqueryTraasmetaHostmachineRequest {
	s.Ips = v
	return s
}

func (s *BatchqueryTraasmetaHostmachineRequest) SetTenantUuid(v string) *BatchqueryTraasmetaHostmachineRequest {
	s.TenantUuid = &v
	return s
}

func (s *BatchqueryTraasmetaHostmachineRequest) SetTenantName(v string) *BatchqueryTraasmetaHostmachineRequest {
	s.TenantName = &v
	return s
}

func (s *BatchqueryTraasmetaHostmachineRequest) SetWorkspaceUuid(v string) *BatchqueryTraasmetaHostmachineRequest {
	s.WorkspaceUuid = &v
	return s
}

func (s *BatchqueryTraasmetaHostmachineRequest) SetWorkspaceName(v string) *BatchqueryTraasmetaHostmachineRequest {
	s.WorkspaceName = &v
	return s
}

type BatchqueryTraasmetaHostmachineResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// hosts
	Hosts []*TraasHostMachineDto `json:"hosts,omitempty" xml:"hosts,omitempty" type:"Repeated"`
}

func (s BatchqueryTraasmetaHostmachineResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaHostmachineResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaHostmachineResponse) SetReqMsgId(v string) *BatchqueryTraasmetaHostmachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryTraasmetaHostmachineResponse) SetResultCode(v string) *BatchqueryTraasmetaHostmachineResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryTraasmetaHostmachineResponse) SetResultMsg(v string) *BatchqueryTraasmetaHostmachineResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryTraasmetaHostmachineResponse) SetHosts(v []*TraasHostMachineDto) *BatchqueryTraasmetaHostmachineResponse {
	s.Hosts = v
	return s
}

type CreateTraasmetaHostmachineRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// hostname
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty" require:"true"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty" require:"true"`
	// collect_id
	CollectId *string `json:"collect_id,omitempty" xml:"collect_id,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// workspace_uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// zone_uuid
	ZoneUuid *string `json:"zone_uuid,omitempty" xml:"zone_uuid,omitempty"`
	// zone_name
	ZoneName *string `json:"zone_name,omitempty" xml:"zone_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
}

func (s CreateTraasmetaHostmachineRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaHostmachineRequest) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaHostmachineRequest) SetAuthToken(v string) *CreateTraasmetaHostmachineRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateTraasmetaHostmachineRequest) SetHostname(v string) *CreateTraasmetaHostmachineRequest {
	s.Hostname = &v
	return s
}

func (s *CreateTraasmetaHostmachineRequest) SetIp(v string) *CreateTraasmetaHostmachineRequest {
	s.Ip = &v
	return s
}

func (s *CreateTraasmetaHostmachineRequest) SetCollectId(v string) *CreateTraasmetaHostmachineRequest {
	s.CollectId = &v
	return s
}

func (s *CreateTraasmetaHostmachineRequest) SetTenantUuid(v string) *CreateTraasmetaHostmachineRequest {
	s.TenantUuid = &v
	return s
}

func (s *CreateTraasmetaHostmachineRequest) SetTenantName(v string) *CreateTraasmetaHostmachineRequest {
	s.TenantName = &v
	return s
}

func (s *CreateTraasmetaHostmachineRequest) SetWorkspaceUuid(v string) *CreateTraasmetaHostmachineRequest {
	s.WorkspaceUuid = &v
	return s
}

func (s *CreateTraasmetaHostmachineRequest) SetWorkspaceName(v string) *CreateTraasmetaHostmachineRequest {
	s.WorkspaceName = &v
	return s
}

func (s *CreateTraasmetaHostmachineRequest) SetZoneUuid(v string) *CreateTraasmetaHostmachineRequest {
	s.ZoneUuid = &v
	return s
}

func (s *CreateTraasmetaHostmachineRequest) SetZoneName(v string) *CreateTraasmetaHostmachineRequest {
	s.ZoneName = &v
	return s
}

func (s *CreateTraasmetaHostmachineRequest) SetOutsideId(v string) *CreateTraasmetaHostmachineRequest {
	s.OutsideId = &v
	return s
}

func (s *CreateTraasmetaHostmachineRequest) SetSourceFrom(v string) *CreateTraasmetaHostmachineRequest {
	s.SourceFrom = &v
	return s
}

func (s *CreateTraasmetaHostmachineRequest) SetExtension(v string) *CreateTraasmetaHostmachineRequest {
	s.Extension = &v
	return s
}

type CreateTraasmetaHostmachineResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// host
	Host *TraasHostMachineDto `json:"host,omitempty" xml:"host,omitempty"`
}

func (s CreateTraasmetaHostmachineResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaHostmachineResponse) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaHostmachineResponse) SetReqMsgId(v string) *CreateTraasmetaHostmachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateTraasmetaHostmachineResponse) SetResultCode(v string) *CreateTraasmetaHostmachineResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateTraasmetaHostmachineResponse) SetResultMsg(v string) *CreateTraasmetaHostmachineResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateTraasmetaHostmachineResponse) SetHost(v *TraasHostMachineDto) *CreateTraasmetaHostmachineResponse {
	s.Host = v
	return s
}

type DeleteTraasmetaHostmachineRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
}

func (s DeleteTraasmetaHostmachineRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaHostmachineRequest) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaHostmachineRequest) SetAuthToken(v string) *DeleteTraasmetaHostmachineRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteTraasmetaHostmachineRequest) SetUuid(v string) *DeleteTraasmetaHostmachineRequest {
	s.Uuid = &v
	return s
}

type DeleteTraasmetaHostmachineResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteTraasmetaHostmachineResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaHostmachineResponse) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaHostmachineResponse) SetReqMsgId(v string) *DeleteTraasmetaHostmachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteTraasmetaHostmachineResponse) SetResultCode(v string) *DeleteTraasmetaHostmachineResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteTraasmetaHostmachineResponse) SetResultMsg(v string) *DeleteTraasmetaHostmachineResponse {
	s.ResultMsg = &v
	return s
}

type QueryTraasmetaHostmachineRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// workspace_uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
}

func (s QueryTraasmetaHostmachineRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaHostmachineRequest) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaHostmachineRequest) SetAuthToken(v string) *QueryTraasmetaHostmachineRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraasmetaHostmachineRequest) SetUuid(v string) *QueryTraasmetaHostmachineRequest {
	s.Uuid = &v
	return s
}

func (s *QueryTraasmetaHostmachineRequest) SetIp(v string) *QueryTraasmetaHostmachineRequest {
	s.Ip = &v
	return s
}

func (s *QueryTraasmetaHostmachineRequest) SetSearch(v bool) *QueryTraasmetaHostmachineRequest {
	s.Search = &v
	return s
}

func (s *QueryTraasmetaHostmachineRequest) SetTenantUuid(v string) *QueryTraasmetaHostmachineRequest {
	s.TenantUuid = &v
	return s
}

func (s *QueryTraasmetaHostmachineRequest) SetTenantName(v string) *QueryTraasmetaHostmachineRequest {
	s.TenantName = &v
	return s
}

func (s *QueryTraasmetaHostmachineRequest) SetWorkspaceUuid(v string) *QueryTraasmetaHostmachineRequest {
	s.WorkspaceUuid = &v
	return s
}

func (s *QueryTraasmetaHostmachineRequest) SetWorkspaceName(v string) *QueryTraasmetaHostmachineRequest {
	s.WorkspaceName = &v
	return s
}

type QueryTraasmetaHostmachineResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// hosts
	Hosts []*TraasHostMachineDto `json:"hosts,omitempty" xml:"hosts,omitempty" type:"Repeated"`
}

func (s QueryTraasmetaHostmachineResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaHostmachineResponse) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaHostmachineResponse) SetReqMsgId(v string) *QueryTraasmetaHostmachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraasmetaHostmachineResponse) SetResultCode(v string) *QueryTraasmetaHostmachineResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraasmetaHostmachineResponse) SetResultMsg(v string) *QueryTraasmetaHostmachineResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraasmetaHostmachineResponse) SetHosts(v []*TraasHostMachineDto) *QueryTraasmetaHostmachineResponse {
	s.Hosts = v
	return s
}

type UpdateTraasmetaHostmachineRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// hostname
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty"`
	// collect_id
	CollectId *string `json:"collect_id,omitempty" xml:"collect_id,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// workspace_uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// zone_uuid
	ZoneUuid *string `json:"zone_uuid,omitempty" xml:"zone_uuid,omitempty"`
	// zone_name
	ZoneName *string `json:"zone_name,omitempty" xml:"zone_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
}

func (s UpdateTraasmetaHostmachineRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaHostmachineRequest) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaHostmachineRequest) SetAuthToken(v string) *UpdateTraasmetaHostmachineRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateTraasmetaHostmachineRequest) SetUuid(v string) *UpdateTraasmetaHostmachineRequest {
	s.Uuid = &v
	return s
}

func (s *UpdateTraasmetaHostmachineRequest) SetHostname(v string) *UpdateTraasmetaHostmachineRequest {
	s.Hostname = &v
	return s
}

func (s *UpdateTraasmetaHostmachineRequest) SetCollectId(v string) *UpdateTraasmetaHostmachineRequest {
	s.CollectId = &v
	return s
}

func (s *UpdateTraasmetaHostmachineRequest) SetTenantUuid(v string) *UpdateTraasmetaHostmachineRequest {
	s.TenantUuid = &v
	return s
}

func (s *UpdateTraasmetaHostmachineRequest) SetTenantName(v string) *UpdateTraasmetaHostmachineRequest {
	s.TenantName = &v
	return s
}

func (s *UpdateTraasmetaHostmachineRequest) SetWorkspaceUuid(v string) *UpdateTraasmetaHostmachineRequest {
	s.WorkspaceUuid = &v
	return s
}

func (s *UpdateTraasmetaHostmachineRequest) SetWorkspaceName(v string) *UpdateTraasmetaHostmachineRequest {
	s.WorkspaceName = &v
	return s
}

func (s *UpdateTraasmetaHostmachineRequest) SetZoneUuid(v string) *UpdateTraasmetaHostmachineRequest {
	s.ZoneUuid = &v
	return s
}

func (s *UpdateTraasmetaHostmachineRequest) SetZoneName(v string) *UpdateTraasmetaHostmachineRequest {
	s.ZoneName = &v
	return s
}

func (s *UpdateTraasmetaHostmachineRequest) SetOutsideId(v string) *UpdateTraasmetaHostmachineRequest {
	s.OutsideId = &v
	return s
}

func (s *UpdateTraasmetaHostmachineRequest) SetSourceFrom(v string) *UpdateTraasmetaHostmachineRequest {
	s.SourceFrom = &v
	return s
}

func (s *UpdateTraasmetaHostmachineRequest) SetExtension(v string) *UpdateTraasmetaHostmachineRequest {
	s.Extension = &v
	return s
}

func (s *UpdateTraasmetaHostmachineRequest) SetIp(v string) *UpdateTraasmetaHostmachineRequest {
	s.Ip = &v
	return s
}

type UpdateTraasmetaHostmachineResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// host
	Host *TraasHostMachineDto `json:"host,omitempty" xml:"host,omitempty"`
}

func (s UpdateTraasmetaHostmachineResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaHostmachineResponse) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaHostmachineResponse) SetReqMsgId(v string) *UpdateTraasmetaHostmachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateTraasmetaHostmachineResponse) SetResultCode(v string) *UpdateTraasmetaHostmachineResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateTraasmetaHostmachineResponse) SetResultMsg(v string) *UpdateTraasmetaHostmachineResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateTraasmetaHostmachineResponse) SetHost(v *TraasHostMachineDto) *UpdateTraasmetaHostmachineResponse {
	s.Host = v
	return s
}

type BatchcreateTraasmetaCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cells
	Cells []*TraasCellDto `json:"cells,omitempty" xml:"cells,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateTraasmetaCellRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaCellRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaCellRequest) SetAuthToken(v string) *BatchcreateTraasmetaCellRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateTraasmetaCellRequest) SetCells(v []*TraasCellDto) *BatchcreateTraasmetaCellRequest {
	s.Cells = v
	return s
}

type BatchcreateTraasmetaCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cells
	Cells []*TraasCellDto `json:"cells,omitempty" xml:"cells,omitempty" type:"Repeated"`
}

func (s BatchcreateTraasmetaCellResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateTraasmetaCellResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateTraasmetaCellResponse) SetReqMsgId(v string) *BatchcreateTraasmetaCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateTraasmetaCellResponse) SetResultCode(v string) *BatchcreateTraasmetaCellResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateTraasmetaCellResponse) SetResultMsg(v string) *BatchcreateTraasmetaCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateTraasmetaCellResponse) SetCells(v []*TraasCellDto) *BatchcreateTraasmetaCellResponse {
	s.Cells = v
	return s
}

type BatchdeleteTraasmetaCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteTraasmetaCellRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaCellRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaCellRequest) SetAuthToken(v string) *BatchdeleteTraasmetaCellRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteTraasmetaCellRequest) SetUuids(v []*string) *BatchdeleteTraasmetaCellRequest {
	s.Uuids = v
	return s
}

type BatchdeleteTraasmetaCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteTraasmetaCellResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteTraasmetaCellResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteTraasmetaCellResponse) SetReqMsgId(v string) *BatchdeleteTraasmetaCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteTraasmetaCellResponse) SetResultCode(v string) *BatchdeleteTraasmetaCellResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteTraasmetaCellResponse) SetResultMsg(v string) *BatchdeleteTraasmetaCellResponse {
	s.ResultMsg = &v
	return s
}

type BatchqueryTraasmetaCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuids
	Uuids []*string `json:"uuids,omitempty" xml:"uuids,omitempty" type:"Repeated"`
	// names
	Names []*string `json:"names,omitempty" xml:"names,omitempty" type:"Repeated"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// workspace_uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
}

func (s BatchqueryTraasmetaCellRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaCellRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaCellRequest) SetAuthToken(v string) *BatchqueryTraasmetaCellRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryTraasmetaCellRequest) SetUuids(v []*string) *BatchqueryTraasmetaCellRequest {
	s.Uuids = v
	return s
}

func (s *BatchqueryTraasmetaCellRequest) SetNames(v []*string) *BatchqueryTraasmetaCellRequest {
	s.Names = v
	return s
}

func (s *BatchqueryTraasmetaCellRequest) SetTenantUuid(v string) *BatchqueryTraasmetaCellRequest {
	s.TenantUuid = &v
	return s
}

func (s *BatchqueryTraasmetaCellRequest) SetTenantName(v string) *BatchqueryTraasmetaCellRequest {
	s.TenantName = &v
	return s
}

func (s *BatchqueryTraasmetaCellRequest) SetWorkspaceUuid(v string) *BatchqueryTraasmetaCellRequest {
	s.WorkspaceUuid = &v
	return s
}

func (s *BatchqueryTraasmetaCellRequest) SetWorkspaceName(v string) *BatchqueryTraasmetaCellRequest {
	s.WorkspaceName = &v
	return s
}

type BatchqueryTraasmetaCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cells
	Cells []*TraasCellDto `json:"cells,omitempty" xml:"cells,omitempty" type:"Repeated"`
}

func (s BatchqueryTraasmetaCellResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryTraasmetaCellResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryTraasmetaCellResponse) SetReqMsgId(v string) *BatchqueryTraasmetaCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryTraasmetaCellResponse) SetResultCode(v string) *BatchqueryTraasmetaCellResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryTraasmetaCellResponse) SetResultMsg(v string) *BatchqueryTraasmetaCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryTraasmetaCellResponse) SetCells(v []*TraasCellDto) *BatchqueryTraasmetaCellResponse {
	s.Cells = v
	return s
}

type UpdateTraasmetaCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// workspace_uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// zone_uuid
	ZoneUuid *string `json:"zone_uuid,omitempty" xml:"zone_uuid,omitempty"`
	// zone_name
	ZoneName *string `json:"zone_name,omitempty" xml:"zone_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
}

func (s UpdateTraasmetaCellRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaCellRequest) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaCellRequest) SetAuthToken(v string) *UpdateTraasmetaCellRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateTraasmetaCellRequest) SetUuid(v string) *UpdateTraasmetaCellRequest {
	s.Uuid = &v
	return s
}

func (s *UpdateTraasmetaCellRequest) SetName(v string) *UpdateTraasmetaCellRequest {
	s.Name = &v
	return s
}

func (s *UpdateTraasmetaCellRequest) SetDisplayName(v string) *UpdateTraasmetaCellRequest {
	s.DisplayName = &v
	return s
}

func (s *UpdateTraasmetaCellRequest) SetTenantUuid(v string) *UpdateTraasmetaCellRequest {
	s.TenantUuid = &v
	return s
}

func (s *UpdateTraasmetaCellRequest) SetTenantName(v string) *UpdateTraasmetaCellRequest {
	s.TenantName = &v
	return s
}

func (s *UpdateTraasmetaCellRequest) SetWorkspaceUuid(v string) *UpdateTraasmetaCellRequest {
	s.WorkspaceUuid = &v
	return s
}

func (s *UpdateTraasmetaCellRequest) SetWorkspaceName(v string) *UpdateTraasmetaCellRequest {
	s.WorkspaceName = &v
	return s
}

func (s *UpdateTraasmetaCellRequest) SetZoneUuid(v string) *UpdateTraasmetaCellRequest {
	s.ZoneUuid = &v
	return s
}

func (s *UpdateTraasmetaCellRequest) SetZoneName(v string) *UpdateTraasmetaCellRequest {
	s.ZoneName = &v
	return s
}

func (s *UpdateTraasmetaCellRequest) SetOutsideId(v string) *UpdateTraasmetaCellRequest {
	s.OutsideId = &v
	return s
}

func (s *UpdateTraasmetaCellRequest) SetSourceFrom(v string) *UpdateTraasmetaCellRequest {
	s.SourceFrom = &v
	return s
}

func (s *UpdateTraasmetaCellRequest) SetExtension(v string) *UpdateTraasmetaCellRequest {
	s.Extension = &v
	return s
}

type UpdateTraasmetaCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cell
	Cell *TraasCellDto `json:"cell,omitempty" xml:"cell,omitempty"`
}

func (s UpdateTraasmetaCellResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTraasmetaCellResponse) GoString() string {
	return s.String()
}

func (s *UpdateTraasmetaCellResponse) SetReqMsgId(v string) *UpdateTraasmetaCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateTraasmetaCellResponse) SetResultCode(v string) *UpdateTraasmetaCellResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateTraasmetaCellResponse) SetResultMsg(v string) *UpdateTraasmetaCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateTraasmetaCellResponse) SetCell(v *TraasCellDto) *UpdateTraasmetaCellResponse {
	s.Cell = v
	return s
}

type CreateTraasmetaCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// display_name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// workspace_uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// zone_uuid
	ZoneUuid *string `json:"zone_uuid,omitempty" xml:"zone_uuid,omitempty"`
	// zone_name
	ZoneName *string `json:"zone_name,omitempty" xml:"zone_name,omitempty"`
	// outside_id
	OutsideId *string `json:"outside_id,omitempty" xml:"outside_id,omitempty"`
	// source_from
	SourceFrom *string `json:"source_from,omitempty" xml:"source_from,omitempty" require:"true"`
	// extension
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
}

func (s CreateTraasmetaCellRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaCellRequest) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaCellRequest) SetAuthToken(v string) *CreateTraasmetaCellRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateTraasmetaCellRequest) SetName(v string) *CreateTraasmetaCellRequest {
	s.Name = &v
	return s
}

func (s *CreateTraasmetaCellRequest) SetDisplayName(v string) *CreateTraasmetaCellRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateTraasmetaCellRequest) SetTenantUuid(v string) *CreateTraasmetaCellRequest {
	s.TenantUuid = &v
	return s
}

func (s *CreateTraasmetaCellRequest) SetTenantName(v string) *CreateTraasmetaCellRequest {
	s.TenantName = &v
	return s
}

func (s *CreateTraasmetaCellRequest) SetWorkspaceUuid(v string) *CreateTraasmetaCellRequest {
	s.WorkspaceUuid = &v
	return s
}

func (s *CreateTraasmetaCellRequest) SetWorkspaceName(v string) *CreateTraasmetaCellRequest {
	s.WorkspaceName = &v
	return s
}

func (s *CreateTraasmetaCellRequest) SetZoneUuid(v string) *CreateTraasmetaCellRequest {
	s.ZoneUuid = &v
	return s
}

func (s *CreateTraasmetaCellRequest) SetZoneName(v string) *CreateTraasmetaCellRequest {
	s.ZoneName = &v
	return s
}

func (s *CreateTraasmetaCellRequest) SetOutsideId(v string) *CreateTraasmetaCellRequest {
	s.OutsideId = &v
	return s
}

func (s *CreateTraasmetaCellRequest) SetSourceFrom(v string) *CreateTraasmetaCellRequest {
	s.SourceFrom = &v
	return s
}

func (s *CreateTraasmetaCellRequest) SetExtension(v string) *CreateTraasmetaCellRequest {
	s.Extension = &v
	return s
}

type CreateTraasmetaCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cell
	Cell *TraasCellDto `json:"cell,omitempty" xml:"cell,omitempty"`
}

func (s CreateTraasmetaCellResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTraasmetaCellResponse) GoString() string {
	return s.String()
}

func (s *CreateTraasmetaCellResponse) SetReqMsgId(v string) *CreateTraasmetaCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateTraasmetaCellResponse) SetResultCode(v string) *CreateTraasmetaCellResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateTraasmetaCellResponse) SetResultMsg(v string) *CreateTraasmetaCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateTraasmetaCellResponse) SetCell(v *TraasCellDto) *CreateTraasmetaCellResponse {
	s.Cell = v
	return s
}

type DeleteTraasmetaCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
}

func (s DeleteTraasmetaCellRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaCellRequest) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaCellRequest) SetAuthToken(v string) *DeleteTraasmetaCellRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteTraasmetaCellRequest) SetUuid(v string) *DeleteTraasmetaCellRequest {
	s.Uuid = &v
	return s
}

type DeleteTraasmetaCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteTraasmetaCellResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraasmetaCellResponse) GoString() string {
	return s.String()
}

func (s *DeleteTraasmetaCellResponse) SetReqMsgId(v string) *DeleteTraasmetaCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteTraasmetaCellResponse) SetResultCode(v string) *DeleteTraasmetaCellResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteTraasmetaCellResponse) SetResultMsg(v string) *DeleteTraasmetaCellResponse {
	s.ResultMsg = &v
	return s
}

type AllTraasmetaCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s AllTraasmetaCellRequest) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaCellRequest) GoString() string {
	return s.String()
}

func (s *AllTraasmetaCellRequest) SetAuthToken(v string) *AllTraasmetaCellRequest {
	s.AuthToken = &v
	return s
}

type AllTraasmetaCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cells
	Cells []*TraasCellDto `json:"cells,omitempty" xml:"cells,omitempty" type:"Repeated"`
}

func (s AllTraasmetaCellResponse) String() string {
	return tea.Prettify(s)
}

func (s AllTraasmetaCellResponse) GoString() string {
	return s.String()
}

func (s *AllTraasmetaCellResponse) SetReqMsgId(v string) *AllTraasmetaCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllTraasmetaCellResponse) SetResultCode(v string) *AllTraasmetaCellResponse {
	s.ResultCode = &v
	return s
}

func (s *AllTraasmetaCellResponse) SetResultMsg(v string) *AllTraasmetaCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllTraasmetaCellResponse) SetCells(v []*TraasCellDto) *AllTraasmetaCellResponse {
	s.Cells = v
	return s
}

type QueryTraasmetaCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	//
	// 是否是模糊搜索，默认为false
	Search *bool `json:"search,omitempty" xml:"search,omitempty" require:"true"`
	// tenant_uuid
	TenantUuid *string `json:"tenant_uuid,omitempty" xml:"tenant_uuid,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// workspace_uuid
	WorkspaceUuid *string `json:"workspace_uuid,omitempty" xml:"workspace_uuid,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
}

func (s QueryTraasmetaCellRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaCellRequest) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaCellRequest) SetAuthToken(v string) *QueryTraasmetaCellRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraasmetaCellRequest) SetUuid(v string) *QueryTraasmetaCellRequest {
	s.Uuid = &v
	return s
}

func (s *QueryTraasmetaCellRequest) SetName(v string) *QueryTraasmetaCellRequest {
	s.Name = &v
	return s
}

func (s *QueryTraasmetaCellRequest) SetSearch(v bool) *QueryTraasmetaCellRequest {
	s.Search = &v
	return s
}

func (s *QueryTraasmetaCellRequest) SetTenantUuid(v string) *QueryTraasmetaCellRequest {
	s.TenantUuid = &v
	return s
}

func (s *QueryTraasmetaCellRequest) SetTenantName(v string) *QueryTraasmetaCellRequest {
	s.TenantName = &v
	return s
}

func (s *QueryTraasmetaCellRequest) SetWorkspaceUuid(v string) *QueryTraasmetaCellRequest {
	s.WorkspaceUuid = &v
	return s
}

func (s *QueryTraasmetaCellRequest) SetWorkspaceName(v string) *QueryTraasmetaCellRequest {
	s.WorkspaceName = &v
	return s
}

type QueryTraasmetaCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cells
	Cells []*TraasCellDto `json:"cells,omitempty" xml:"cells,omitempty" type:"Repeated"`
}

func (s QueryTraasmetaCellResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraasmetaCellResponse) GoString() string {
	return s.String()
}

func (s *QueryTraasmetaCellResponse) SetReqMsgId(v string) *QueryTraasmetaCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraasmetaCellResponse) SetResultCode(v string) *QueryTraasmetaCellResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraasmetaCellResponse) SetResultMsg(v string) *QueryTraasmetaCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraasmetaCellResponse) SetCells(v []*TraasCellDto) *QueryTraasmetaCellResponse {
	s.Cells = v
	return s
}

type Client struct {
	Endpoint                *string
	RegionId                *string
	AccessKeyId             *string
	AccessKeySecret         *string
	Protocol                *string
	UserAgent               *string
	ReadTimeout             *int
	ConnectTimeout          *int
	HttpProxy               *string
	HttpsProxy              *string
	Socks5Proxy             *string
	Socks5NetWork           *string
	NoProxy                 *string
	MaxIdleConns            *int
	SecurityToken           *string
	MaxIdleTimeMillis       *int
	KeepAliveDurationMillis *int
	MaxRequests             *int
	MaxRequestsPerHost      *int
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
func NewClient(config *Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *Config) (_err error) {
	if tea.BoolValue(util.IsUnset(tea.ToMap(config))) {
		_err = tea.NewSDKError(map[string]interface{}{
			"code":    "ParameterMissing",
			"message": "'config' can not be unset",
		})
		return _err
	}

	client.AccessKeyId = config.AccessKeyId
	client.AccessKeySecret = config.AccessKeySecret
	client.SecurityToken = config.SecurityToken
	client.Endpoint = config.Endpoint
	client.Protocol = config.Protocol
	client.UserAgent = config.UserAgent
	client.ReadTimeout = util.DefaultNumber(config.ReadTimeout, tea.Int(20000))
	client.ConnectTimeout = util.DefaultNumber(config.ConnectTimeout, tea.Int(20000))
	client.HttpProxy = config.HttpProxy
	client.HttpsProxy = config.HttpsProxy
	client.NoProxy = config.NoProxy
	client.Socks5Proxy = config.Socks5Proxy
	client.Socks5NetWork = config.Socks5NetWork
	client.MaxIdleConns = util.DefaultNumber(config.MaxIdleConns, tea.Int(60000))
	client.MaxIdleTimeMillis = util.DefaultNumber(config.MaxIdleTimeMillis, tea.Int(5))
	client.KeepAliveDurationMillis = util.DefaultNumber(config.KeepAliveDurationMillis, tea.Int(5000))
	client.MaxRequests = util.DefaultNumber(config.MaxRequests, tea.Int(100))
	client.MaxRequestsPerHost = util.DefaultNumber(config.MaxRequestsPerHost, tea.Int(100))
	return nil
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
func (client *Client) DoRequest(version *string, action *string, protocol *string, method *string, pathname *string, request map[string]interface{}, headers map[string]*string, runtime *util.RuntimeOptions) (_result map[string]interface{}, _err error) {
	_err = tea.Validate(runtime)
	if _err != nil {
		return _result, _err
	}
	_runtime := map[string]interface{}{
		"timeouted":               "retry",
		"readTimeout":             tea.IntValue(util.DefaultNumber(runtime.ReadTimeout, client.ReadTimeout)),
		"connectTimeout":          tea.IntValue(util.DefaultNumber(runtime.ConnectTimeout, client.ConnectTimeout)),
		"httpProxy":               tea.StringValue(util.DefaultString(runtime.HttpProxy, client.HttpProxy)),
		"httpsProxy":              tea.StringValue(util.DefaultString(runtime.HttpsProxy, client.HttpsProxy)),
		"noProxy":                 tea.StringValue(util.DefaultString(runtime.NoProxy, client.NoProxy)),
		"maxIdleConns":            tea.IntValue(util.DefaultNumber(runtime.MaxIdleConns, client.MaxIdleConns)),
		"maxIdleTimeMillis":       tea.IntValue(client.MaxIdleTimeMillis),
		"keepAliveDurationMillis": tea.IntValue(client.KeepAliveDurationMillis),
		"maxRequests":             tea.IntValue(client.MaxRequests),
		"maxRequestsPerHost":      tea.IntValue(client.MaxRequestsPerHost),
		"retry": map[string]interface{}{
			"retryable":   tea.BoolValue(runtime.Autoretry),
			"maxAttempts": tea.IntValue(util.DefaultNumber(runtime.MaxAttempts, tea.Int(3))),
		},
		"backoff": map[string]interface{}{
			"policy": tea.StringValue(util.DefaultString(runtime.BackoffPolicy, tea.String("no"))),
			"period": tea.IntValue(util.DefaultNumber(runtime.BackoffPeriod, tea.Int(1))),
		},
		"ignoreSSL": tea.BoolValue(runtime.IgnoreSSL),
	}

	_resp := make(map[string]interface{})
	for _retryTimes := 0; tea.BoolValue(tea.AllowRetry(_runtime["retry"], tea.Int(_retryTimes))); _retryTimes++ {
		if _retryTimes > 0 {
			_backoffTime := tea.GetBackoffTime(_runtime["backoff"], tea.Int(_retryTimes))
			if tea.IntValue(_backoffTime) > 0 {
				tea.Sleep(_backoffTime)
			}
		}

		_resp, _err = func() (map[string]interface{}, error) {
			request_ := tea.NewRequest()
			request_.Protocol = util.DefaultString(client.Protocol, protocol)
			request_.Method = method
			request_.Pathname = pathname
			request_.Query = map[string]*string{
				"method":           action,
				"version":          version,
				"sign_type":        tea.String("HmacSHA1"),
				"req_time":         antchainutil.GetTimestamp(),
				"req_msg_id":       antchainutil.GetNonce(),
				"access_key":       client.AccessKeyId,
				"base_sdk_version": tea.String("TeaSDK-2.0"),
				"sdk_version":      tea.String("1.3.273"),
			}
			if !tea.BoolValue(util.Empty(client.SecurityToken)) {
				request_.Query["security_token"] = client.SecurityToken
			}

			request_.Headers = tea.Merge(map[string]*string{
				"host":       util.DefaultString(client.Endpoint, tea.String("openapi.antchain.antgroup.com")),
				"user-agent": util.GetUserAgent(client.UserAgent),
			}, headers)
			tmp := util.AnyifyMapValue(rpcutil.Query(request))
			request_.Body = tea.ToReader(util.ToFormString(tmp))
			request_.Headers["content-type"] = tea.String("application/x-www-form-urlencoded")
			signedParam := tea.Merge(request_.Query,
				rpcutil.Query(request))
			request_.Query["sign"] = antchainutil.GetSignature(signedParam, client.AccessKeySecret)
			response_, _err := tea.DoRequest(request_, _runtime)
			if _err != nil {
				return _result, _err
			}
			raw, _err := util.ReadAsString(response_.Body)
			if _err != nil {
				return _result, _err
			}

			obj := util.ParseJSON(raw)
			res := util.AssertAsMap(obj)
			resp := util.AssertAsMap(res["response"])
			if tea.BoolValue(antchainutil.HasError(raw, client.AccessKeySecret)) {
				_err = tea.NewSDKError(map[string]interface{}{
					"message": resp["result_msg"],
					"data":    resp,
					"code":    resp["result_code"],
				})
				return _result, _err
			}

			_result = resp
			return _result, _err
		}()
		if !tea.BoolValue(tea.Retryable(_err)) {
			break
		}
	}

	return _resp, _err
}

/**
 * Description: /agent/logLocate
 * Summary: /agent/logLocate
 */
func (client *Client) QueryRmsAgentloglocate(request *QueryRmsAgentloglocateRequest) (_result *QueryRmsAgentloglocateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsAgentloglocateResponse{}
	_body, _err := client.QueryRmsAgentloglocateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /agent/logLocate
 * Summary: /agent/logLocate
 */
func (client *Client) QueryRmsAgentloglocateEx(request *QueryRmsAgentloglocateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsAgentloglocateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsAgentloglocateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.agentloglocate.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /agent/tail
 * Summary: /agent/tail
 */
func (client *Client) QueryRmsAgenttail(request *QueryRmsAgenttailRequest) (_result *QueryRmsAgenttailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsAgenttailResponse{}
	_body, _err := client.QueryRmsAgenttailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /agent/tail
 * Summary: /agent/tail
 */
func (client *Client) QueryRmsAgenttailEx(request *QueryRmsAgenttailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsAgenttailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsAgenttailResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.agenttail.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /agent/browser
 * Summary: /agent/browser
 */
func (client *Client) QueryRmsAgentbrowser(request *QueryRmsAgentbrowserRequest) (_result *QueryRmsAgentbrowserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsAgentbrowserResponse{}
	_body, _err := client.QueryRmsAgentbrowserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /agent/browser
 * Summary: /agent/browser
 */
func (client *Client) QueryRmsAgentbrowserEx(request *QueryRmsAgentbrowserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsAgentbrowserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsAgentbrowserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.agentbrowser.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: rms.alarmhistorytype.query
 * Summary: alarmTypeStats
 */
func (client *Client) QueryRmsAlarmhistorytype(request *QueryRmsAlarmhistorytypeRequest) (_result *QueryRmsAlarmhistorytypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsAlarmhistorytypeResponse{}
	_body, _err := client.QueryRmsAlarmhistorytypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: rms.alarmhistorytype.query
 * Summary: alarmTypeStats
 */
func (client *Client) QueryRmsAlarmhistorytypeEx(request *QueryRmsAlarmhistorytypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsAlarmhistorytypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsAlarmhistorytypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.alarmhistorytype.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: alarmLevelStats
 * Summary: alarmLevelStats
 */
func (client *Client) QueryRmsAlarmhistorylevel(request *QueryRmsAlarmhistorylevelRequest) (_result *QueryRmsAlarmhistorylevelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsAlarmhistorylevelResponse{}
	_body, _err := client.QueryRmsAlarmhistorylevelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: alarmLevelStats
 * Summary: alarmLevelStats
 */
func (client *Client) QueryRmsAlarmhistorylevelEx(request *QueryRmsAlarmhistorylevelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsAlarmhistorylevelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsAlarmhistorylevelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.alarmhistorylevel.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /stats/notify/history
 * Summary: notifyHistoryStatsV2
 */
func (client *Client) QueryRmsNotifyhistory(request *QueryRmsNotifyhistoryRequest) (_result *QueryRmsNotifyhistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsNotifyhistoryResponse{}
	_body, _err := client.QueryRmsNotifyhistoryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /stats/notify/history
 * Summary: notifyHistoryStatsV2
 */
func (client *Client) QueryRmsNotifyhistoryEx(request *QueryRmsNotifyhistoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsNotifyhistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsNotifyhistoryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.notifyhistory.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /stats/stack/entity
 * Summary: stackEntityStats
 */
func (client *Client) QueryRmsStackentity(request *QueryRmsStackentityRequest) (_result *QueryRmsStackentityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsStackentityResponse{}
	_body, _err := client.QueryRmsStackentityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /stats/stack/entity
 * Summary: stackEntityStats
 */
func (client *Client) QueryRmsStackentityEx(request *QueryRmsStackentityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsStackentityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsStackentityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.stackentity.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /stats/alarm/history/appCount
 * Summary: alarmHistoryAppCount
 */
func (client *Client) QueryRmsAlarmhistoryappcount(request *QueryRmsAlarmhistoryappcountRequest) (_result *QueryRmsAlarmhistoryappcountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsAlarmhistoryappcountResponse{}
	_body, _err := client.QueryRmsAlarmhistoryappcountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /stats/alarm/history/appCount
 * Summary: alarmHistoryAppCount
 */
func (client *Client) QueryRmsAlarmhistoryappcountEx(request *QueryRmsAlarmhistoryappcountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsAlarmhistoryappcountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsAlarmhistoryappcountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.alarmhistoryappcount.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /alarm/history/appStats
 * Summary: alarmHistoryAppStats
 */
func (client *Client) QueryRmsAlarmhistoryappstats(request *QueryRmsAlarmhistoryappstatsRequest) (_result *QueryRmsAlarmhistoryappstatsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsAlarmhistoryappstatsResponse{}
	_body, _err := client.QueryRmsAlarmhistoryappstatsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /alarm/history/appStats
 * Summary: alarmHistoryAppStats
 */
func (client *Client) QueryRmsAlarmhistoryappstatsEx(request *QueryRmsAlarmhistoryappstatsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsAlarmhistoryappstatsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsAlarmhistoryappstatsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.alarmhistoryappstats.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /alarm/history/appStatsPageable
 * Summary: appstatspageable
 */
func (client *Client) QueryRmsAppstatspageable(request *QueryRmsAppstatspageableRequest) (_result *QueryRmsAppstatspageableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsAppstatspageableResponse{}
	_body, _err := client.QueryRmsAppstatspageableEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /alarm/history/appStatsPageable
 * Summary: appstatspageable
 */
func (client *Client) QueryRmsAppstatspageableEx(request *QueryRmsAppstatspageableRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsAppstatspageableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsAppstatspageableResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.appstatspageable.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /logread/error
 * Summary: /logread/error
 */
func (client *Client) QueryRmsLogreaderror(request *QueryRmsLogreaderrorRequest) (_result *QueryRmsLogreaderrorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsLogreaderrorResponse{}
	_body, _err := client.QueryRmsLogreaderrorEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /logread/error
 * Summary: /logread/error
 */
func (client *Client) QueryRmsLogreaderrorEx(request *QueryRmsLogreaderrorRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsLogreaderrorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsLogreaderrorResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.logreaderror.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /universal/read
 * Summary: /universal/read
 */
func (client *Client) QueryRmsUniversalread(request *QueryRmsUniversalreadRequest) (_result *QueryRmsUniversalreadResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsUniversalreadResponse{}
	_body, _err := client.QueryRmsUniversalreadEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /universal/read
 * Summary: /universal/read
 */
func (client *Client) QueryRmsUniversalreadEx(request *QueryRmsUniversalreadRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsUniversalreadResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsUniversalreadResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.universalread.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /universal/write
 * Summary: /universal/write
 */
func (client *Client) QueryRmsUniversalwrite(request *QueryRmsUniversalwriteRequest) (_result *QueryRmsUniversalwriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsUniversalwriteResponse{}
	_body, _err := client.QueryRmsUniversalwriteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /universal/write
 * Summary: /universal/write
 */
func (client *Client) QueryRmsUniversalwriteEx(request *QueryRmsUniversalwriteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsUniversalwriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsUniversalwriteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.universalwrite.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /modeling/plugin/create
 * Summary: create
 */
func (client *Client) CreateRmsPlugin(request *CreateRmsPluginRequest) (_result *CreateRmsPluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateRmsPluginResponse{}
	_body, _err := client.CreateRmsPluginEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /modeling/plugin/create
 * Summary: create
 */
func (client *Client) CreateRmsPluginEx(request *CreateRmsPluginRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateRmsPluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateRmsPluginResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.plugin.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /modeling/plugin/delete
 * Summary: delete
 */
func (client *Client) DeleteRmsPlugin(request *DeleteRmsPluginRequest) (_result *DeleteRmsPluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteRmsPluginResponse{}
	_body, _err := client.DeleteRmsPluginEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /modeling/plugin/delete
 * Summary: delete
 */
func (client *Client) DeleteRmsPluginEx(request *DeleteRmsPluginRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteRmsPluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteRmsPluginResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.plugin.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /modeling/plugin/close
 * Summary: close
 */
func (client *Client) CloseRmsPlugin(request *CloseRmsPluginRequest) (_result *CloseRmsPluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CloseRmsPluginResponse{}
	_body, _err := client.CloseRmsPluginEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /modeling/plugin/close
 * Summary: close
 */
func (client *Client) CloseRmsPluginEx(request *CloseRmsPluginRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CloseRmsPluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CloseRmsPluginResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.plugin.close"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /modeling/plugin/open
 * Summary: open
 */
func (client *Client) OpenRmsPlugin(request *OpenRmsPluginRequest) (_result *OpenRmsPluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OpenRmsPluginResponse{}
	_body, _err := client.OpenRmsPluginEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /modeling/plugin/open
 * Summary: open
 */
func (client *Client) OpenRmsPluginEx(request *OpenRmsPluginRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OpenRmsPluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OpenRmsPluginResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.plugin.open"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /modeling/plugin/update
 * Summary: update
 */
func (client *Client) UpdateRmsPlugin(request *UpdateRmsPluginRequest) (_result *UpdateRmsPluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateRmsPluginResponse{}
	_body, _err := client.UpdateRmsPluginEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /modeling/plugin/update
 * Summary: update
 */
func (client *Client) UpdateRmsPluginEx(request *UpdateRmsPluginRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateRmsPluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateRmsPluginResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.plugin.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /modeling/plugin/queryByPluginType
 * Summary: queryByPluginType
 */
func (client *Client) QueryRmsPluginbytype(request *QueryRmsPluginbytypeRequest) (_result *QueryRmsPluginbytypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsPluginbytypeResponse{}
	_body, _err := client.QueryRmsPluginbytypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /modeling/plugin/queryByPluginType
 * Summary: queryByPluginType
 */
func (client *Client) QueryRmsPluginbytypeEx(request *QueryRmsPluginbytypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsPluginbytypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsPluginbytypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.pluginbytype.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /modeling/plugin/queryByFolder
 * Summary: queryByFolder
 */
func (client *Client) QueryRmsPluginbyfolder(request *QueryRmsPluginbyfolderRequest) (_result *QueryRmsPluginbyfolderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsPluginbyfolderResponse{}
	_body, _err := client.QueryRmsPluginbyfolderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /modeling/plugin/queryByFolder
 * Summary: queryByFolder
 */
func (client *Client) QueryRmsPluginbyfolderEx(request *QueryRmsPluginbyfolderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsPluginbyfolderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsPluginbyfolderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.pluginbyfolder.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /modeling/plugin/query
 * Summary: query
 */
func (client *Client) QueryRmsPlugin(request *QueryRmsPluginRequest) (_result *QueryRmsPluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsPluginResponse{}
	_body, _err := client.QueryRmsPluginEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /modeling/plugin/query
 * Summary: query
 */
func (client *Client) QueryRmsPluginEx(request *QueryRmsPluginRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsPluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsPluginResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.plugin.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /modeling/plugin/querytest
 * Summary: querytest
 */
func (client *Client) QueryRmsPlugintest(request *QueryRmsPlugintestRequest) (_result *QueryRmsPlugintestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsPlugintestResponse{}
	_body, _err := client.QueryRmsPlugintestEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /modeling/plugin/querytest
 * Summary: querytest
 */
func (client *Client) QueryRmsPlugintestEx(request *QueryRmsPlugintestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsPlugintestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsPlugintestResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.plugintest.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /modeling/folder/path
 * Summary: queryPath
 */
func (client *Client) QueryRmsPath(request *QueryRmsPathRequest) (_result *QueryRmsPathResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsPathResponse{}
	_body, _err := client.QueryRmsPathEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /modeling/folder/path
 * Summary: queryPath
 */
func (client *Client) QueryRmsPathEx(request *QueryRmsPathRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsPathResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsPathResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.path.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /{tenantId}/webapi/cleankey
 * Summary: cleankey
 */
func (client *Client) ExecRmsUniversalcleankey(request *ExecRmsUniversalcleankeyRequest) (_result *ExecRmsUniversalcleankeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecRmsUniversalcleankeyResponse{}
	_body, _err := client.ExecRmsUniversalcleankeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /{tenantId}/webapi/cleankey
 * Summary: cleankey
 */
func (client *Client) ExecRmsUniversalcleankeyEx(request *ExecRmsUniversalcleankeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecRmsUniversalcleankeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecRmsUniversalcleankeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.universalcleankey.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /{tenantId}/universalQuery
 * Summary: universalQuery
 */
func (client *Client) QueryRmsUniversal(request *QueryRmsUniversalRequest) (_result *QueryRmsUniversalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsUniversalResponse{}
	_body, _err := client.QueryRmsUniversalEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /{tenantId}/universalQuery
 * Summary: universalQuery
 */
func (client *Client) QueryRmsUniversalEx(request *QueryRmsUniversalRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsUniversalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsUniversalResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.universal.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 链路搜索
 * Summary: 链路搜索
 */
func (client *Client) QueryRmsTracespan(request *QueryRmsTracespanRequest) (_result *QueryRmsTracespanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRmsTracespanResponse{}
	_body, _err := client.QueryRmsTracespanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 链路搜索
 * Summary: 链路搜索
 */
func (client *Client) QueryRmsTracespanEx(request *QueryRmsTracespanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRmsTracespanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRmsTracespanResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.tracespan.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询链路搜索页面的配置
 * Summary: 查询链路搜索页面的配置
 */
func (client *Client) GetRmsTracespanqueryconfig(request *GetRmsTracespanqueryconfigRequest) (_result *GetRmsTracespanqueryconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetRmsTracespanqueryconfigResponse{}
	_body, _err := client.GetRmsTracespanqueryconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询链路搜索页面的配置
 * Summary: 查询链路搜索页面的配置
 */
func (client *Client) GetRmsTracespanqueryconfigEx(request *GetRmsTracespanqueryconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetRmsTracespanqueryconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetRmsTracespanqueryconfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.tracespanqueryconfig.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 单链路树状图查询
 * Summary: 单链路树状图查询
 */
func (client *Client) DescribeRmsTracetree(request *DescribeRmsTracetreeRequest) (_result *DescribeRmsTracetreeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeRmsTracetreeResponse{}
	_body, _err := client.DescribeRmsTracetreeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 单链路树状图查询
 * Summary: 单链路树状图查询
 */
func (client *Client) DescribeRmsTracetreeEx(request *DescribeRmsTracetreeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeRmsTracetreeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRmsTracetreeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.tracetree.describe"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 南天门 - 商品补全接口
 * Summary: 南天门 - 商品补全接口
 */
func (client *Client) CallbackSpiCompletecommodity(request *CallbackSpiCompletecommodityRequest) (_result *CallbackSpiCompletecommodityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CallbackSpiCompletecommodityResponse{}
	_body, _err := client.CallbackSpiCompletecommodityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 南天门 - 商品补全接口
 * Summary: 南天门 - 商品补全接口
 */
func (client *Client) CallbackSpiCompletecommodityEx(request *CallbackSpiCompletecommodityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CallbackSpiCompletecommodityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CallbackSpiCompletecommodityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.spi.completecommodity.callback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 南天门 - 支付后回调
 * Summary: 南天门 - 支付后回调
 */
func (client *Client) CallbackSpiPayordercallback(request *CallbackSpiPayordercallbackRequest) (_result *CallbackSpiPayordercallbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CallbackSpiPayordercallbackResponse{}
	_body, _err := client.CallbackSpiPayordercallbackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 南天门 - 支付后回调
 * Summary: 南天门 - 支付后回调
 */
func (client *Client) CallbackSpiPayordercallbackEx(request *CallbackSpiPayordercallbackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CallbackSpiPayordercallbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CallbackSpiPayordercallbackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.spi.payordercallback.callback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 南天门 - 补全订单
 * Summary: 南天门 - 补全订单
 */
func (client *Client) CallbackSpiCompleteorderparam(request *CallbackSpiCompleteorderparamRequest) (_result *CallbackSpiCompleteorderparamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CallbackSpiCompleteorderparamResponse{}
	_body, _err := client.CallbackSpiCompleteorderparamEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 南天门 - 补全订单
 * Summary: 南天门 - 补全订单
 */
func (client *Client) CallbackSpiCompleteorderparamEx(request *CallbackSpiCompleteorderparamRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CallbackSpiCompleteorderparamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CallbackSpiCompleteorderparamResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.spi.completeorderparam.callback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 南天门 - 订单校验回调
 * Summary: 南天门 - 订单校验回调
 */
func (client *Client) CallbackSpiVerify(request *CallbackSpiVerifyRequest) (_result *CallbackSpiVerifyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CallbackSpiVerifyResponse{}
	_body, _err := client.CallbackSpiVerifyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 南天门 - 订单校验回调
 * Summary: 南天门 - 订单校验回调
 */
func (client *Client) CallbackSpiVerifyEx(request *CallbackSpiVerifyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CallbackSpiVerifyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CallbackSpiVerifyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.spi.verify.callback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 南天门 - 退款
 * Summary: 南天门 - 退款
 */
func (client *Client) CallbackSpiRefund(request *CallbackSpiRefundRequest) (_result *CallbackSpiRefundResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CallbackSpiRefundResponse{}
	_body, _err := client.CallbackSpiRefundEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 南天门 - 退款
 * Summary: 南天门 - 退款
 */
func (client *Client) CallbackSpiRefundEx(request *CallbackSpiRefundRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CallbackSpiRefundResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CallbackSpiRefundResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.spi.refund.callback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 南天门 - 商品实例生命周期回调
 * Summary: 南天门 - 商品实例生命周期回调
 */
func (client *Client) CallbackSpiLifecycle(request *CallbackSpiLifecycleRequest) (_result *CallbackSpiLifecycleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CallbackSpiLifecycleResponse{}
	_body, _err := client.CallbackSpiLifecycleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 南天门 - 商品实例生命周期回调
 * Summary: 南天门 - 商品实例生命周期回调
 */
func (client *Client) CallbackSpiLifecycleEx(request *CallbackSpiLifecycleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CallbackSpiLifecycleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CallbackSpiLifecycleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.spi.lifecycle.callback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询时序指标
 * Summary: 查询时序指标
 */
func (client *Client) DescribeRmsTimeseriesmetrics(request *DescribeRmsTimeseriesmetricsRequest) (_result *DescribeRmsTimeseriesmetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeRmsTimeseriesmetricsResponse{}
	_body, _err := client.DescribeRmsTimeseriesmetricsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询时序指标
 * Summary: 查询时序指标
 */
func (client *Client) DescribeRmsTimeseriesmetricsEx(request *DescribeRmsTimeseriesmetricsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeRmsTimeseriesmetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRmsTimeseriesmetricsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.timeseriesmetrics.describe"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取调用拓扑
 * Summary: 获取调用拓扑
 */
func (client *Client) DescribeRmsTopology(request *DescribeRmsTopologyRequest) (_result *DescribeRmsTopologyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeRmsTopologyResponse{}
	_body, _err := client.DescribeRmsTopologyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取调用拓扑
 * Summary: 获取调用拓扑
 */
func (client *Client) DescribeRmsTopologyEx(request *DescribeRmsTopologyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeRmsTopologyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRmsTopologyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.rms.topology.describe"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 监控指标数据查询
 * Summary: 监控指标数据查询
 */
func (client *Client) QueryMetrics(request *QueryMetricsRequest) (_result *QueryMetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMetricsResponse{}
	_body, _err := client.QueryMetricsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 监控指标数据查询
 * Summary: 监控指标数据查询
 */
func (client *Client) QueryMetricsEx(request *QueryMetricsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMetricsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.metrics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 链路Span查询搜索
 * Summary: 链路查询
 */
func (client *Client) QueryTraceSpan(request *QueryTraceSpanRequest) (_result *QueryTraceSpanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceSpanResponse{}
	_body, _err := client.QueryTraceSpanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 链路Span查询搜索
 * Summary: 链路查询
 */
func (client *Client) QueryTraceSpanEx(request *QueryTraceSpanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceSpanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceSpanResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.span.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取应用列表
 * Summary: 获取应用列表
 */
func (client *Client) ListAppName(request *ListAppNameRequest) (_result *ListAppNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppNameResponse{}
	_body, _err := client.ListAppNameEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取应用列表
 * Summary: 获取应用列表
 */
func (client *Client) ListAppNameEx(request *ListAppNameRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppNameResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.app.name.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建自定义监控指标
 * Summary: 创建自定义监控指标
 */
func (client *Client) CreateCustomplugin(request *CreateCustompluginRequest) (_result *CreateCustompluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCustompluginResponse{}
	_body, _err := client.CreateCustompluginEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建自定义监控指标
 * Summary: 创建自定义监控指标
 */
func (client *Client) CreateCustompluginEx(request *CreateCustompluginRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCustompluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateCustompluginResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.customplugin.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除自定义监控指标
 * Summary: 删除自定义监控指标
 */
func (client *Client) DeleteCustomplugin(request *DeleteCustompluginRequest) (_result *DeleteCustompluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteCustompluginResponse{}
	_body, _err := client.DeleteCustompluginEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除自定义监控指标
 * Summary: 删除自定义监控指标
 */
func (client *Client) DeleteCustompluginEx(request *DeleteCustompluginRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteCustompluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteCustompluginResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.customplugin.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 自定义监控 - 添加文件夹
 * Summary: 自定义监控 - 添加文件夹
 */
func (client *Client) CreateFolder(request *CreateFolderRequest) (_result *CreateFolderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFolderResponse{}
	_body, _err := client.CreateFolderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 自定义监控 - 添加文件夹
 * Summary: 自定义监控 - 添加文件夹
 */
func (client *Client) CreateFolderEx(request *CreateFolderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFolderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFolderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.folder.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 自定义监控 - 文件夹更新
 * Summary: 自定义监控 - 文件夹更新
 */
func (client *Client) UpdateFolder(request *UpdateFolderRequest) (_result *UpdateFolderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFolderResponse{}
	_body, _err := client.UpdateFolderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 自定义监控 - 文件夹更新
 * Summary: 自定义监控 - 文件夹更新
 */
func (client *Client) UpdateFolderEx(request *UpdateFolderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFolderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateFolderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.folder.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 链路查询时可选参数的配置查询
 * Summary: 链路查询时可选参数的配置查询
 */
func (client *Client) QueryTraceConfig(request *QueryTraceConfigRequest) (_result *QueryTraceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceConfigResponse{}
	_body, _err := client.QueryTraceConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 链路查询时可选参数的配置查询
 * Summary: 链路查询时可选参数的配置查询
 */
func (client *Client) QueryTraceConfigEx(request *QueryTraceConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.config.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询文件夹路径
 * Summary: 查询文件夹路径
 */
func (client *Client) QueryFolderPath(request *QueryFolderPathRequest) (_result *QueryFolderPathResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFolderPathResponse{}
	_body, _err := client.QueryFolderPathEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询文件夹路径
 * Summary: 查询文件夹路径
 */
func (client *Client) QueryFolderPathEx(request *QueryFolderPathRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFolderPathResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFolderPathResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.folder.path.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询链路详情
 * Summary: 查询链路详情
 */
func (client *Client) QueryTraceDetail(request *QueryTraceDetailRequest) (_result *QueryTraceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceDetailResponse{}
	_body, _err := client.QueryTraceDetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询链路详情
 * Summary: 查询链路详情
 */
func (client *Client) QueryTraceDetailEx(request *QueryTraceDetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceDetailResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.detail.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取链路拓扑图
 * Summary: 获取链路拓扑图
 */
func (client *Client) QueryTraceTopology(request *QueryTraceTopologyRequest) (_result *QueryTraceTopologyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceTopologyResponse{}
	_body, _err := client.QueryTraceTopologyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取链路拓扑图
 * Summary: 获取链路拓扑图
 */
func (client *Client) QueryTraceTopologyEx(request *QueryTraceTopologyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceTopologyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceTopologyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.topology.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询链路关联指标
 * Summary: 查询链路关联指标
 */
func (client *Client) QueryTraceMetrics(request *QueryTraceMetricsRequest) (_result *QueryTraceMetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceMetricsResponse{}
	_body, _err := client.QueryTraceMetricsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询链路关联指标
 * Summary: 查询链路关联指标
 */
func (client *Client) QueryTraceMetricsEx(request *QueryTraceMetricsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceMetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceMetricsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.metrics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取自定义监控指标详情
 * Summary: 获取自定义监控指标详情
 */
func (client *Client) GetCustomplugin(request *GetCustompluginRequest) (_result *GetCustompluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetCustompluginResponse{}
	_body, _err := client.GetCustompluginEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取自定义监控指标详情
 * Summary: 获取自定义监控指标详情
 */
func (client *Client) GetCustompluginEx(request *GetCustompluginRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetCustompluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetCustompluginResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.customplugin.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用监控
 * Summary: 查询应用监控
 */
func (client *Client) QueryApp(request *QueryAppRequest) (_result *QueryAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppResponse{}
	_body, _err := client.QueryAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用监控
 * Summary: 查询应用监控
 */
func (client *Client) QueryAppEx(request *QueryAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.app.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取用户收藏资源状态
 * Summary: 获取用户收藏资源状态
 */
func (client *Client) GetUserFavorite(request *GetUserFavoriteRequest) (_result *GetUserFavoriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetUserFavoriteResponse{}
	_body, _err := client.GetUserFavoriteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取用户收藏资源状态
 * Summary: 获取用户收藏资源状态
 */
func (client *Client) GetUserFavoriteEx(request *GetUserFavoriteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetUserFavoriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetUserFavoriteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.user.favorite.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询文件夹列表
 * Summary: 查询文件夹列表
 */
func (client *Client) QueryFolder(request *QueryFolderRequest) (_result *QueryFolderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFolderResponse{}
	_body, _err := client.QueryFolderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询文件夹列表
 * Summary: 查询文件夹列表
 */
func (client *Client) QueryFolderEx(request *QueryFolderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFolderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFolderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.folder.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:  查询自定义监控配置列表
 * Summary:  查询自定义监控配置列表
 */
func (client *Client) QueryCustomplugin(request *QueryCustompluginRequest) (_result *QueryCustompluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCustompluginResponse{}
	_body, _err := client.QueryCustompluginEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:  查询自定义监控配置列表
 * Summary:  查询自定义监控配置列表
 */
func (client *Client) QueryCustompluginEx(request *QueryCustompluginRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCustompluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCustompluginResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.customplugin.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询用户收藏列表
 * Summary: 查询用户收藏列表
 */
func (client *Client) QueryUserFavorite(request *QueryUserFavoriteRequest) (_result *QueryUserFavoriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUserFavoriteResponse{}
	_body, _err := client.QueryUserFavoriteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询用户收藏列表
 * Summary: 查询用户收藏列表
 */
func (client *Client) QueryUserFavoriteEx(request *QueryUserFavoriteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUserFavoriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUserFavoriteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.user.favorite.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 告警暂停列表查询
 * Summary: 告警暂停列表查询
 */
func (client *Client) QueryAlarmPause(request *QueryAlarmPauseRequest) (_result *QueryAlarmPauseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAlarmPauseResponse{}
	_body, _err := client.QueryAlarmPauseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 告警暂停列表查询
 * Summary: 告警暂停列表查询
 */
func (client *Client) QueryAlarmPauseEx(request *QueryAlarmPauseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAlarmPauseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAlarmPauseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.pause.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取告警应用统计信息
 * Summary: 获取告警应用统计信息
 */
func (client *Client) CountAlarmApp(request *CountAlarmAppRequest) (_result *CountAlarmAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CountAlarmAppResponse{}
	_body, _err := client.CountAlarmAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取告警应用统计信息
 * Summary: 获取告警应用统计信息
 */
func (client *Client) CountAlarmAppEx(request *CountAlarmAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CountAlarmAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CountAlarmAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.app.count"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询告警应用关联Map
 * Summary: 查询告警应用关联Map
 */
func (client *Client) QueryAlarmApprelation(request *QueryAlarmApprelationRequest) (_result *QueryAlarmApprelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAlarmApprelationResponse{}
	_body, _err := client.QueryAlarmApprelationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询告警应用关联Map
 * Summary: 查询告警应用关联Map
 */
func (client *Client) QueryAlarmApprelationEx(request *QueryAlarmApprelationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAlarmApprelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAlarmApprelationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.apprelation.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询栈配置
 * Summary: 批量查询栈配置
 */
func (client *Client) BatchqueryStackGeneratedconfig(request *BatchqueryStackGeneratedconfigRequest) (_result *BatchqueryStackGeneratedconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryStackGeneratedconfigResponse{}
	_body, _err := client.BatchqueryStackGeneratedconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询栈配置
 * Summary: 批量查询栈配置
 */
func (client *Client) BatchqueryStackGeneratedconfigEx(request *BatchqueryStackGeneratedconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryStackGeneratedconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryStackGeneratedconfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.stack.generatedconfig.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取大盘列表
 * Summary: 获取大盘列表
 */
func (client *Client) ListDashboard(request *ListDashboardRequest) (_result *ListDashboardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListDashboardResponse{}
	_body, _err := client.ListDashboardEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取大盘列表
 * Summary: 获取大盘列表
 */
func (client *Client) ListDashboardEx(request *ListDashboardRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListDashboardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDashboardResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.dashboard.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询技术栈配置详情
 * Summary: 查询技术栈配置详情
 */
func (client *Client) QueryStackGeneratedconfig(request *QueryStackGeneratedconfigRequest) (_result *QueryStackGeneratedconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryStackGeneratedconfigResponse{}
	_body, _err := client.QueryStackGeneratedconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询技术栈配置详情
 * Summary: 查询技术栈配置详情
 */
func (client *Client) QueryStackGeneratedconfigEx(request *QueryStackGeneratedconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryStackGeneratedconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryStackGeneratedconfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.stack.generatedconfig.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询监控项
 * Summary: 查询监控项
 */
func (client *Client) QueryStackMonitoritem(request *QueryStackMonitoritemRequest) (_result *QueryStackMonitoritemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryStackMonitoritemResponse{}
	_body, _err := client.QueryStackMonitoritemEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询监控项
 * Summary: 查询监控项
 */
func (client *Client) QueryStackMonitoritemEx(request *QueryStackMonitoritemRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryStackMonitoritemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryStackMonitoritemResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.stack.monitoritem.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分页查询通知组
 * Summary: 分页查询通知组
 */
func (client *Client) QueryUsergroup(request *QueryUsergroupRequest) (_result *QueryUsergroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUsergroupResponse{}
	_body, _err := client.QueryUsergroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分页查询通知组
 * Summary: 分页查询通知组
 */
func (client *Client) QueryUsergroupEx(request *QueryUsergroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUsergroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUsergroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.usergroup.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建通知组
 * Summary: 创建通知组
 */
func (client *Client) CreateUsergroup(request *CreateUsergroupRequest) (_result *CreateUsergroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateUsergroupResponse{}
	_body, _err := client.CreateUsergroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建通知组
 * Summary: 创建通知组
 */
func (client *Client) CreateUsergroupEx(request *CreateUsergroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateUsergroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateUsergroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.usergroup.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新通知组
 * Summary: 更新通知组
 */
func (client *Client) UpdateUsergroup(request *UpdateUsergroupRequest) (_result *UpdateUsergroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateUsergroupResponse{}
	_body, _err := client.UpdateUsergroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新通知组
 * Summary: 更新通知组
 */
func (client *Client) UpdateUsergroupEx(request *UpdateUsergroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateUsergroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateUsergroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.usergroup.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除通知组
 * Summary: 删除通知组
 */
func (client *Client) DeleteUsergroup(request *DeleteUsergroupRequest) (_result *DeleteUsergroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteUsergroupResponse{}
	_body, _err := client.DeleteUsergroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除通知组
 * Summary: 删除通知组
 */
func (client *Client) DeleteUsergroupEx(request *DeleteUsergroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteUsergroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteUsergroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.usergroup.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询过去某一时段内的告警趋势(包含自定义、应用、应用组的告警数量)
 * Summary: 查询过去某一时段内的告警趋势
 */
func (client *Client) QueryAlarmTrend(request *QueryAlarmTrendRequest) (_result *QueryAlarmTrendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAlarmTrendResponse{}
	_body, _err := client.QueryAlarmTrendEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询过去某一时段内的告警趋势(包含自定义、应用、应用组的告警数量)
 * Summary: 查询过去某一时段内的告警趋势
 */
func (client *Client) QueryAlarmTrendEx(request *QueryAlarmTrendRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAlarmTrendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAlarmTrendResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.trend.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询过去某一时段的告警详情
 * Summary: 查询过去某一时段的告警详情
 */
func (client *Client) QueryAlarmHistory(request *QueryAlarmHistoryRequest) (_result *QueryAlarmHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAlarmHistoryResponse{}
	_body, _err := client.QueryAlarmHistoryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询过去某一时段的告警详情
 * Summary: 查询过去某一时段的告警详情
 */
func (client *Client) QueryAlarmHistoryEx(request *QueryAlarmHistoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAlarmHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAlarmHistoryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.history.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询告警订阅
 * Summary: 查询告警订阅
 */
func (client *Client) QueryAlarmSubscription(request *QueryAlarmSubscriptionRequest) (_result *QueryAlarmSubscriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAlarmSubscriptionResponse{}
	_body, _err := client.QueryAlarmSubscriptionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询告警订阅
 * Summary: 查询告警订阅
 */
func (client *Client) QueryAlarmSubscriptionEx(request *QueryAlarmSubscriptionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAlarmSubscriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAlarmSubscriptionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.subscription.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询某个应用监控的告警套餐
 * Summary: 查询某个应用监控的告警套餐
 */
func (client *Client) QueryStackAlarmrule(request *QueryStackAlarmruleRequest) (_result *QueryStackAlarmruleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryStackAlarmruleResponse{}
	_body, _err := client.QueryStackAlarmruleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询某个应用监控的告警套餐
 * Summary: 查询某个应用监控的告警套餐
 */
func (client *Client) QueryStackAlarmruleEx(request *QueryStackAlarmruleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryStackAlarmruleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryStackAlarmruleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.stack.alarmrule.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 修改自定义监控指标
 * Summary: 修改自定义监控指标
 */
func (client *Client) UpdateCustomplugin(request *UpdateCustompluginRequest) (_result *UpdateCustompluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateCustompluginResponse{}
	_body, _err := client.UpdateCustompluginEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 修改自定义监控指标
 * Summary: 修改自定义监控指标
 */
func (client *Client) UpdateCustompluginEx(request *UpdateCustompluginRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateCustompluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateCustompluginResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.customplugin.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询 agent 安装信息列表
 * Summary: 查询 agent 安装信息列表
 */
func (client *Client) QueryAgent(request *QueryAgentRequest) (_result *QueryAgentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAgentResponse{}
	_body, _err := client.QueryAgentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询 agent 安装信息列表
 * Summary: 查询 agent 安装信息列表
 */
func (client *Client) QueryAgentEx(request *QueryAgentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAgentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAgentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.agent.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 安装 agent 组件
 * Summary: 安装 agent 组件
 */
func (client *Client) InstallAgent(request *InstallAgentRequest) (_result *InstallAgentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InstallAgentResponse{}
	_body, _err := client.InstallAgentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 安装 agent 组件
 * Summary: 安装 agent 组件
 */
func (client *Client) InstallAgentEx(request *InstallAgentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InstallAgentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InstallAgentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.agent.install"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取需要安装的 agent 版本
 * Summary: 获取需要安装的 agent 版本
 */
func (client *Client) GetAgentVersion(request *GetAgentVersionRequest) (_result *GetAgentVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAgentVersionResponse{}
	_body, _err := client.GetAgentVersionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取需要安装的 agent 版本
 * Summary: 获取需要安装的 agent 版本
 */
func (client *Client) GetAgentVersionEx(request *GetAgentVersionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAgentVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAgentVersionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.agent.version.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:  设置默认最新agent版本
 * Summary:  设置默认最新agent版本
 */
func (client *Client) EnableAgentVersion(request *EnableAgentVersionRequest) (_result *EnableAgentVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &EnableAgentVersionResponse{}
	_body, _err := client.EnableAgentVersionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:  设置默认最新agent版本
 * Summary:  设置默认最新agent版本
 */
func (client *Client) EnableAgentVersionEx(request *EnableAgentVersionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *EnableAgentVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnableAgentVersionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.agent.version.enable"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取当前工作空间
 * Summary: 获取当前工作空间
 */
func (client *Client) GetWorkspace(request *GetWorkspaceRequest) (_result *GetWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkspaceResponse{}
	_body, _err := client.GetWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取当前工作空间
 * Summary: 获取当前工作空间
 */
func (client *Client) GetWorkspaceEx(request *GetWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.workspace.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取当前租户
 * Summary: 获取当前租户
 */
func (client *Client) GetTenant(request *GetTenantRequest) (_result *GetTenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTenantResponse{}
	_body, _err := client.GetTenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取当前租户
 * Summary: 获取当前租户
 */
func (client *Client) GetTenantEx(request *GetTenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.tenant.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询核心态监控配置
 * Summary: 查询核心态监控配置
 */
func (client *Client) QueryKernelstackGeneratedconfig(request *QueryKernelstackGeneratedconfigRequest) (_result *QueryKernelstackGeneratedconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryKernelstackGeneratedconfigResponse{}
	_body, _err := client.QueryKernelstackGeneratedconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询核心态监控配置
 * Summary: 查询核心态监控配置
 */
func (client *Client) QueryKernelstackGeneratedconfigEx(request *QueryKernelstackGeneratedconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryKernelstackGeneratedconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryKernelstackGeneratedconfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.kernelstack.generatedconfig.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取阿里云开通状态
 * Summary: 获取阿里云开通状态
 */
func (client *Client) GetAliyunStatus(request *GetAliyunStatusRequest) (_result *GetAliyunStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAliyunStatusResponse{}
	_body, _err := client.GetAliyunStatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取阿里云开通状态
 * Summary: 获取阿里云开通状态
 */
func (client *Client) GetAliyunStatusEx(request *GetAliyunStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAliyunStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAliyunStatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.aliyun.status.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 监控工作空间开通
 * Summary: 监控工作空间开通
 */
func (client *Client) OpenWorkspace(request *OpenWorkspaceRequest) (_result *OpenWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OpenWorkspaceResponse{}
	_body, _err := client.OpenWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 监控工作空间开通
 * Summary: 监控工作空间开通
 */
func (client *Client) OpenWorkspaceEx(request *OpenWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OpenWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OpenWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.workspace.open"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新技术栈配置
 * Summary: 更新技术栈配置
 */
func (client *Client) UpdateStackGeneratedconfig(request *UpdateStackGeneratedconfigRequest) (_result *UpdateStackGeneratedconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateStackGeneratedconfigResponse{}
	_body, _err := client.UpdateStackGeneratedconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新技术栈配置
 * Summary: 更新技术栈配置
 */
func (client *Client) UpdateStackGeneratedconfigEx(request *UpdateStackGeneratedconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateStackGeneratedconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateStackGeneratedconfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.stack.generatedconfig.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询用户列表
 * Summary: 查询用户列表
 */
func (client *Client) QueryUser(request *QueryUserRequest) (_result *QueryUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUserResponse{}
	_body, _err := client.QueryUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询用户列表
 * Summary: 查询用户列表
 */
func (client *Client) QueryUserEx(request *QueryUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.user.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取用户权限列表
 * Summary: 获取用户权限列表
 */
func (client *Client) ListAuth(request *ListAuthRequest) (_result *ListAuthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAuthResponse{}
	_body, _err := client.ListAuthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取用户权限列表
 * Summary: 获取用户权限列表
 */
func (client *Client) ListAuthEx(request *ListAuthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAuthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAuthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.auth.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除用户权限
 * Summary: 删除用户权限
 */
func (client *Client) DeleteAuth(request *DeleteAuthRequest) (_result *DeleteAuthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteAuthResponse{}
	_body, _err := client.DeleteAuthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除用户权限
 * Summary: 删除用户权限
 */
func (client *Client) DeleteAuthEx(request *DeleteAuthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteAuthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteAuthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.auth.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 新建用户权限
 * Summary: 新建用户权限
 */
func (client *Client) CreateAuth(request *CreateAuthRequest) (_result *CreateAuthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAuthResponse{}
	_body, _err := client.CreateAuthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 新建用户权限
 * Summary: 新建用户权限
 */
func (client *Client) CreateAuthEx(request *CreateAuthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAuthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAuthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.auth.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户添加收藏资源(可以收藏自定义监控、文件夹、用户应用)
 * Summary: 用户添加收藏资源
 */
func (client *Client) BatchcreateUserFavorite(request *BatchcreateUserFavoriteRequest) (_result *BatchcreateUserFavoriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateUserFavoriteResponse{}
	_body, _err := client.BatchcreateUserFavoriteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户添加收藏资源(可以收藏自定义监控、文件夹、用户应用)
 * Summary: 用户添加收藏资源
 */
func (client *Client) BatchcreateUserFavoriteEx(request *BatchcreateUserFavoriteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateUserFavoriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateUserFavoriteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.user.favorite.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量取消收藏
 * Summary: 批量取消收藏
 */
func (client *Client) BatchdeleteUserFavorite(request *BatchdeleteUserFavoriteRequest) (_result *BatchdeleteUserFavoriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteUserFavoriteResponse{}
	_body, _err := client.BatchdeleteUserFavoriteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量取消收藏
 * Summary: 批量取消收藏
 */
func (client *Client) BatchdeleteUserFavoriteEx(request *BatchdeleteUserFavoriteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteUserFavoriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteUserFavoriteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.user.favorite.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分页查询用户的操作历史
 * Summary: 查询用户的操作历史
 */
func (client *Client) QueryUserOperation(request *QueryUserOperationRequest) (_result *QueryUserOperationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUserOperationResponse{}
	_body, _err := client.QueryUserOperationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分页查询用户的操作历史
 * Summary: 查询用户的操作历史
 */
func (client *Client) QueryUserOperationEx(request *QueryUserOperationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUserOperationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUserOperationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.user.operation.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 新增告警订阅
 * Summary: 新增告警订阅
 */
func (client *Client) CreateAlarmSubscription(request *CreateAlarmSubscriptionRequest) (_result *CreateAlarmSubscriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAlarmSubscriptionResponse{}
	_body, _err := client.CreateAlarmSubscriptionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 新增告警订阅
 * Summary: 新增告警订阅
 */
func (client *Client) CreateAlarmSubscriptionEx(request *CreateAlarmSubscriptionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAlarmSubscriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAlarmSubscriptionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.subscription.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消告警订阅 (删除)
 * Summary: 取消告警订阅
 */
func (client *Client) DeleteAlarmSubscription(request *DeleteAlarmSubscriptionRequest) (_result *DeleteAlarmSubscriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteAlarmSubscriptionResponse{}
	_body, _err := client.DeleteAlarmSubscriptionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消告警订阅 (删除)
 * Summary: 取消告警订阅
 */
func (client *Client) DeleteAlarmSubscriptionEx(request *DeleteAlarmSubscriptionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteAlarmSubscriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteAlarmSubscriptionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.subscription.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 暂停告警
 * Summary: 暂停告警
 */
func (client *Client) PauseAlarm(request *PauseAlarmRequest) (_result *PauseAlarmResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PauseAlarmResponse{}
	_body, _err := client.PauseAlarmEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 暂停告警
 * Summary: 暂停告警
 */
func (client *Client) PauseAlarmEx(request *PauseAlarmRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PauseAlarmResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PauseAlarmResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.pause"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 恢复告警
 * Summary: 恢复告警
 */
func (client *Client) ResumeAlarm(request *ResumeAlarmRequest) (_result *ResumeAlarmResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ResumeAlarmResponse{}
	_body, _err := client.ResumeAlarmEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 恢复告警
 * Summary: 恢复告警
 */
func (client *Client) ResumeAlarmEx(request *ResumeAlarmRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ResumeAlarmResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ResumeAlarmResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.resume"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 拉取日志，返回LogTail
 * Summary: 拉取日志
 */
func (client *Client) GetLogTail(request *GetLogTailRequest) (_result *GetLogTailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetLogTailResponse{}
	_body, _err := client.GetLogTailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 拉取日志，返回LogTail
 * Summary: 拉取日志
 */
func (client *Client) GetLogTailEx(request *GetLogTailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetLogTailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetLogTailResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.log.tail.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取文件浏览结果
 * Summary: 获取文件浏览结果
 */
func (client *Client) GetLogBrowser(request *GetLogBrowserRequest) (_result *GetLogBrowserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetLogBrowserResponse{}
	_body, _err := client.GetLogBrowserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取文件浏览结果
 * Summary: 获取文件浏览结果
 */
func (client *Client) GetLogBrowserEx(request *GetLogBrowserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetLogBrowserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetLogBrowserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.log.browser.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 按ID删除文件夹
 * Summary: 删除文件夹
 */
func (client *Client) DeleteFolder(request *DeleteFolderRequest) (_result *DeleteFolderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFolderResponse{}
	_body, _err := client.DeleteFolderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 按ID删除文件夹
 * Summary: 删除文件夹
 */
func (client *Client) DeleteFolderEx(request *DeleteFolderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFolderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteFolderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.folder.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取总览页应用统计信息
 * Summary: 获取总览页应用统计信息
 */
func (client *Client) GetAppOverview(request *GetAppOverviewRequest) (_result *GetAppOverviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppOverviewResponse{}
	_body, _err := client.GetAppOverviewEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取总览页应用统计信息
 * Summary: 获取总览页应用统计信息
 */
func (client *Client) GetAppOverviewEx(request *GetAppOverviewRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppOverviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppOverviewResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.app.overview.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询统一告警历史记录
 * Summary: 查询统一告警历史记录
 */
func (client *Client) QueryUnifiedalarmHistory(request *QueryUnifiedalarmHistoryRequest) (_result *QueryUnifiedalarmHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnifiedalarmHistoryResponse{}
	_body, _err := client.QueryUnifiedalarmHistoryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询统一告警历史记录
 * Summary: 查询统一告警历史记录
 */
func (client *Client) QueryUnifiedalarmHistoryEx(request *QueryUnifiedalarmHistoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnifiedalarmHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnifiedalarmHistoryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.history.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 测试演示
 * Summary: 测试演示
 */
func (client *Client) GetAlarmTest(request *GetAlarmTestRequest) (_result *GetAlarmTestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAlarmTestResponse{}
	_body, _err := client.GetAlarmTestEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 测试演示
 * Summary: 测试演示
 */
func (client *Client) GetAlarmTestEx(request *GetAlarmTestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAlarmTestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAlarmTestResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.test.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取webhook列表
 * Summary: 获取webhook列表
 */
func (client *Client) QueryAlarmwebhook(request *QueryAlarmwebhookRequest) (_result *QueryAlarmwebhookResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAlarmwebhookResponse{}
	_body, _err := client.QueryAlarmwebhookEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取webhook列表
 * Summary: 获取webhook列表
 */
func (client *Client) QueryAlarmwebhookEx(request *QueryAlarmwebhookRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAlarmwebhookResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAlarmwebhookResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarmwebhook.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建告警规则
 * Summary: 创建告警规则
 */
func (client *Client) CreateUnifiedalarmRule(request *CreateUnifiedalarmRuleRequest) (_result *CreateUnifiedalarmRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateUnifiedalarmRuleResponse{}
	_body, _err := client.CreateUnifiedalarmRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建告警规则
 * Summary: 创建告警规则
 */
func (client *Client) CreateUnifiedalarmRuleEx(request *CreateUnifiedalarmRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateUnifiedalarmRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateUnifiedalarmRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.rule.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新告警规则
 * Summary: 更新告警规则
 */
func (client *Client) UpdateUnifiedalarmRule(request *UpdateUnifiedalarmRuleRequest) (_result *UpdateUnifiedalarmRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateUnifiedalarmRuleResponse{}
	_body, _err := client.UpdateUnifiedalarmRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新告警规则
 * Summary: 更新告警规则
 */
func (client *Client) UpdateUnifiedalarmRuleEx(request *UpdateUnifiedalarmRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateUnifiedalarmRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateUnifiedalarmRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.rule.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询告警规则列表
 * Summary: 查询告警规则列表
 */
func (client *Client) QueryUnifiedalarmRule(request *QueryUnifiedalarmRuleRequest) (_result *QueryUnifiedalarmRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnifiedalarmRuleResponse{}
	_body, _err := client.QueryUnifiedalarmRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询告警规则列表
 * Summary: 查询告警规则列表
 */
func (client *Client) QueryUnifiedalarmRuleEx(request *QueryUnifiedalarmRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnifiedalarmRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnifiedalarmRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.rule.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询告警规则详情
 * Summary: 查询告警规则详情
 */
func (client *Client) GetUnifiedalarmRule(request *GetUnifiedalarmRuleRequest) (_result *GetUnifiedalarmRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetUnifiedalarmRuleResponse{}
	_body, _err := client.GetUnifiedalarmRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询告警规则详情
 * Summary: 查询告警规则详情
 */
func (client *Client) GetUnifiedalarmRuleEx(request *GetUnifiedalarmRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetUnifiedalarmRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetUnifiedalarmRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.rule.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除告警规则
 * Summary: 删除告警规则
 */
func (client *Client) DeleteUnifiedalarmRule(request *DeleteUnifiedalarmRuleRequest) (_result *DeleteUnifiedalarmRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteUnifiedalarmRuleResponse{}
	_body, _err := client.DeleteUnifiedalarmRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除告警规则
 * Summary: 删除告警规则
 */
func (client *Client) DeleteUnifiedalarmRuleEx(request *DeleteUnifiedalarmRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteUnifiedalarmRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteUnifiedalarmRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.rule.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询告警消息历史
 * Summary: 查询告警消息历史
 */
func (client *Client) QueryUnifiedalarmNotifyhistory(request *QueryUnifiedalarmNotifyhistoryRequest) (_result *QueryUnifiedalarmNotifyhistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnifiedalarmNotifyhistoryResponse{}
	_body, _err := client.QueryUnifiedalarmNotifyhistoryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询告警消息历史
 * Summary: 查询告警消息历史
 */
func (client *Client) QueryUnifiedalarmNotifyhistoryEx(request *QueryUnifiedalarmNotifyhistoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnifiedalarmNotifyhistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnifiedalarmNotifyhistoryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.notifyhistory.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量订阅告警
 * Summary: 批量订阅告警
 */
func (client *Client) BatchcreateUnifiedalarmSub(request *BatchcreateUnifiedalarmSubRequest) (_result *BatchcreateUnifiedalarmSubResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateUnifiedalarmSubResponse{}
	_body, _err := client.BatchcreateUnifiedalarmSubEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量订阅告警
 * Summary: 批量订阅告警
 */
func (client *Client) BatchcreateUnifiedalarmSubEx(request *BatchcreateUnifiedalarmSubRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateUnifiedalarmSubResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateUnifiedalarmSubResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.sub.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消订阅
 * Summary: 批量取消订阅
 */
func (client *Client) DeleteUnifiedalarmSub(request *DeleteUnifiedalarmSubRequest) (_result *DeleteUnifiedalarmSubResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteUnifiedalarmSubResponse{}
	_body, _err := client.DeleteUnifiedalarmSubEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消订阅
 * Summary: 批量取消订阅
 */
func (client *Client) DeleteUnifiedalarmSubEx(request *DeleteUnifiedalarmSubRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteUnifiedalarmSubResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteUnifiedalarmSubResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.sub.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询告警订阅关系列表
 * Summary: 查询告警订阅关系列表
 */
func (client *Client) QueryUnifiedalarmSub(request *QueryUnifiedalarmSubRequest) (_result *QueryUnifiedalarmSubResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnifiedalarmSubResponse{}
	_body, _err := client.QueryUnifiedalarmSubEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询告警订阅关系列表
 * Summary: 查询告警订阅关系列表
 */
func (client *Client) QueryUnifiedalarmSubEx(request *QueryUnifiedalarmSubRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnifiedalarmSubResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnifiedalarmSubResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.sub.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建告警规则模板
 * Summary: 创建告警规则模板
 */
func (client *Client) CreateUnifiedalarmTpl(request *CreateUnifiedalarmTplRequest) (_result *CreateUnifiedalarmTplResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateUnifiedalarmTplResponse{}
	_body, _err := client.CreateUnifiedalarmTplEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建告警规则模板
 * Summary: 创建告警规则模板
 */
func (client *Client) CreateUnifiedalarmTplEx(request *CreateUnifiedalarmTplRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateUnifiedalarmTplResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateUnifiedalarmTplResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.tpl.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新告警规则模板
 * Summary: 更新告警规则模板
 */
func (client *Client) UpdateUnifiedalarmTpl(request *UpdateUnifiedalarmTplRequest) (_result *UpdateUnifiedalarmTplResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateUnifiedalarmTplResponse{}
	_body, _err := client.UpdateUnifiedalarmTplEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新告警规则模板
 * Summary: 更新告警规则模板
 */
func (client *Client) UpdateUnifiedalarmTplEx(request *UpdateUnifiedalarmTplRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateUnifiedalarmTplResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateUnifiedalarmTplResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.tpl.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询告警规则模板列表
 * Summary: 查询告警规则模板列表
 */
func (client *Client) QueryUnifiedalarmTpl(request *QueryUnifiedalarmTplRequest) (_result *QueryUnifiedalarmTplResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnifiedalarmTplResponse{}
	_body, _err := client.QueryUnifiedalarmTplEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询告警规则模板列表
 * Summary: 查询告警规则模板列表
 */
func (client *Client) QueryUnifiedalarmTplEx(request *QueryUnifiedalarmTplRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnifiedalarmTplResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnifiedalarmTplResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.tpl.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询告警规则模板详情
 * Summary: 查询告警规则模板详情
 */
func (client *Client) GetUnifiedalarmTpl(request *GetUnifiedalarmTplRequest) (_result *GetUnifiedalarmTplResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetUnifiedalarmTplResponse{}
	_body, _err := client.GetUnifiedalarmTplEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询告警规则模板详情
 * Summary: 查询告警规则模板详情
 */
func (client *Client) GetUnifiedalarmTplEx(request *GetUnifiedalarmTplRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetUnifiedalarmTplResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetUnifiedalarmTplResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.tpl.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除告警规则模板
 * Summary: 删除告警规则模板
 */
func (client *Client) DeleteUnifiedalarmTpl(request *DeleteUnifiedalarmTplRequest) (_result *DeleteUnifiedalarmTplResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteUnifiedalarmTplResponse{}
	_body, _err := client.DeleteUnifiedalarmTplEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除告警规则模板
 * Summary: 删除告警规则模板
 */
func (client *Client) DeleteUnifiedalarmTplEx(request *DeleteUnifiedalarmTplRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteUnifiedalarmTplResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteUnifiedalarmTplResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.tpl.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 暂停/开启告警规则
 * Summary: 暂停告警规则
 */
func (client *Client) SwitchUnifiedalarmRule(request *SwitchUnifiedalarmRuleRequest) (_result *SwitchUnifiedalarmRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SwitchUnifiedalarmRuleResponse{}
	_body, _err := client.SwitchUnifiedalarmRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 暂停/开启告警规则
 * Summary: 暂停告警规则
 */
func (client *Client) SwitchUnifiedalarmRuleEx(request *SwitchUnifiedalarmRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SwitchUnifiedalarmRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SwitchUnifiedalarmRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.rule.switch"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据资源类型获取告警订阅列表
 * Summary: 获取告警订阅列表
 */
func (client *Client) ListAlarmSubscription(request *ListAlarmSubscriptionRequest) (_result *ListAlarmSubscriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAlarmSubscriptionResponse{}
	_body, _err := client.ListAlarmSubscriptionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据资源类型获取告警订阅列表
 * Summary: 获取告警订阅列表
 */
func (client *Client) ListAlarmSubscriptionEx(request *ListAlarmSubscriptionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAlarmSubscriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAlarmSubscriptionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.subscription.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新告警订阅
 * Summary: 更新告警订阅
 */
func (client *Client) UpdateAlarmSubscription(request *UpdateAlarmSubscriptionRequest) (_result *UpdateAlarmSubscriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAlarmSubscriptionResponse{}
	_body, _err := client.UpdateAlarmSubscriptionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新告警订阅
 * Summary: 更新告警订阅
 */
func (client *Client) UpdateAlarmSubscriptionEx(request *UpdateAlarmSubscriptionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAlarmSubscriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateAlarmSubscriptionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.subscription.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询 custom plugin 列表
 * Summary: 查询 custom plugin 列表
 */
func (client *Client) ListCustomplugin(request *ListCustompluginRequest) (_result *ListCustompluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListCustompluginResponse{}
	_body, _err := client.ListCustompluginEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询 custom plugin 列表
 * Summary: 查询 custom plugin 列表
 */
func (client *Client) ListCustompluginEx(request *ListCustompluginRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListCustompluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListCustompluginResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.customplugin.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询事件列表
 * Summary: 查询事件列表
 */
func (client *Client) QueryUnifiedalarmEvent(request *QueryUnifiedalarmEventRequest) (_result *QueryUnifiedalarmEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnifiedalarmEventResponse{}
	_body, _err := client.QueryUnifiedalarmEventEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询事件列表
 * Summary: 查询事件列表
 */
func (client *Client) QueryUnifiedalarmEventEx(request *QueryUnifiedalarmEventRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnifiedalarmEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnifiedalarmEventResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.event.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 告警指标查询
 * Summary: 告警指标查询
 */
func (client *Client) QueryUnifiedalarmMetrics(request *QueryUnifiedalarmMetricsRequest) (_result *QueryUnifiedalarmMetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnifiedalarmMetricsResponse{}
	_body, _err := client.QueryUnifiedalarmMetricsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 告警指标查询
 * Summary: 告警指标查询
 */
func (client *Client) QueryUnifiedalarmMetricsEx(request *QueryUnifiedalarmMetricsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnifiedalarmMetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnifiedalarmMetricsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.metrics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量创建告警历史
 * Summary: 批量创建告警历史
 */
func (client *Client) BatchcreateUnifiedalarmHistory(request *BatchcreateUnifiedalarmHistoryRequest) (_result *BatchcreateUnifiedalarmHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateUnifiedalarmHistoryResponse{}
	_body, _err := client.BatchcreateUnifiedalarmHistoryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量创建告警历史
 * Summary: 批量创建告警历史
 */
func (client *Client) BatchcreateUnifiedalarmHistoryEx(request *BatchcreateUnifiedalarmHistoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateUnifiedalarmHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateUnifiedalarmHistoryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.history.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据模板批量创建规则
 * Summary: 根据模板批量创建规则
 */
func (client *Client) BatchcreateUnifiedalarmRule(request *BatchcreateUnifiedalarmRuleRequest) (_result *BatchcreateUnifiedalarmRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateUnifiedalarmRuleResponse{}
	_body, _err := client.BatchcreateUnifiedalarmRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据模板批量创建规则
 * Summary: 根据模板批量创建规则
 */
func (client *Client) BatchcreateUnifiedalarmRuleEx(request *BatchcreateUnifiedalarmRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateUnifiedalarmRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateUnifiedalarmRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.rule.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 告警事件统计信息
 * Summary: 告警事件统计信息
 */
func (client *Client) QueryUnifiedalarmEventstat(request *QueryUnifiedalarmEventstatRequest) (_result *QueryUnifiedalarmEventstatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnifiedalarmEventstatResponse{}
	_body, _err := client.QueryUnifiedalarmEventstatEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 告警事件统计信息
 * Summary: 告警事件统计信息
 */
func (client *Client) QueryUnifiedalarmEventstatEx(request *QueryUnifiedalarmEventstatRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnifiedalarmEventstatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnifiedalarmEventstatResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.eventstat.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通知历史统计
 * Summary: 通知历史统计
 */
func (client *Client) QueryUnifiedalarmNotifystat(request *QueryUnifiedalarmNotifystatRequest) (_result *QueryUnifiedalarmNotifystatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnifiedalarmNotifystatResponse{}
	_body, _err := client.QueryUnifiedalarmNotifystatEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通知历史统计
 * Summary: 通知历史统计
 */
func (client *Client) QueryUnifiedalarmNotifystatEx(request *QueryUnifiedalarmNotifystatRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnifiedalarmNotifystatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnifiedalarmNotifystatResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.notifystat.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询主机ip列表
 * Summary: 查询主机ip列表
 */
func (client *Client) QueryMetaNode(request *QueryMetaNodeRequest) (_result *QueryMetaNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMetaNodeResponse{}
	_body, _err := client.QueryMetaNodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询主机ip列表
 * Summary: 查询主机ip列表
 */
func (client *Client) QueryMetaNodeEx(request *QueryMetaNodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMetaNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMetaNodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.meta.node.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除告警规则
 * Summary: 批量删除告警规则
 */
func (client *Client) BatchdeleteUnifiedalarmRule(request *BatchdeleteUnifiedalarmRuleRequest) (_result *BatchdeleteUnifiedalarmRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteUnifiedalarmRuleResponse{}
	_body, _err := client.BatchdeleteUnifiedalarmRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除告警规则
 * Summary: 批量删除告警规则
 */
func (client *Client) BatchdeleteUnifiedalarmRuleEx(request *BatchdeleteUnifiedalarmRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteUnifiedalarmRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteUnifiedalarmRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.rule.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dashboard创建
 * Summary: dashboard创建
 */
func (client *Client) CreateXdashboard(request *CreateXdashboardRequest) (_result *CreateXdashboardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateXdashboardResponse{}
	_body, _err := client.CreateXdashboardEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dashboard创建
 * Summary: dashboard创建
 */
func (client *Client) CreateXdashboardEx(request *CreateXdashboardRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateXdashboardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateXdashboardResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdashboard.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dashboard更新
 * Summary: dashboard更新
 */
func (client *Client) UpdateXdashboard(request *UpdateXdashboardRequest) (_result *UpdateXdashboardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateXdashboardResponse{}
	_body, _err := client.UpdateXdashboardEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dashboard更新
 * Summary: dashboard更新
 */
func (client *Client) UpdateXdashboardEx(request *UpdateXdashboardRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateXdashboardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateXdashboardResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdashboard.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dashboard查询
 * Summary: dashboard查询
 */
func (client *Client) QueryXdashboard(request *QueryXdashboardRequest) (_result *QueryXdashboardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryXdashboardResponse{}
	_body, _err := client.QueryXdashboardEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dashboard查询
 * Summary: dashboard查询
 */
func (client *Client) QueryXdashboardEx(request *QueryXdashboardRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryXdashboardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryXdashboardResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdashboard.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dashboard目录列表
 * Summary: dashboard目录列表
 */
func (client *Client) ListXdashboardDirectory(request *ListXdashboardDirectoryRequest) (_result *ListXdashboardDirectoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListXdashboardDirectoryResponse{}
	_body, _err := client.ListXdashboardDirectoryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dashboard目录列表
 * Summary: dashboard目录列表
 */
func (client *Client) ListXdashboardDirectoryEx(request *ListXdashboardDirectoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListXdashboardDirectoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListXdashboardDirectoryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdashboard.directory.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dashboard删除。
单个dashboard删除或者整个目录删除
 * Summary: dashboard删除
*/
func (client *Client) DeleteXdashboard(request *DeleteXdashboardRequest) (_result *DeleteXdashboardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteXdashboardResponse{}
	_body, _err := client.DeleteXdashboardEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dashboard删除。
单个dashboard删除或者整个目录删除
 * Summary: dashboard删除
*/
func (client *Client) DeleteXdashboardEx(request *DeleteXdashboardRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteXdashboardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteXdashboardResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdashboard.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: instant query
 * Summary: instant query
 */
func (client *Client) QueryXmetricInstant(request *QueryXmetricInstantRequest) (_result *QueryXmetricInstantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryXmetricInstantResponse{}
	_body, _err := client.QueryXmetricInstantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: instant query
 * Summary: instant query
 */
func (client *Client) QueryXmetricInstantEx(request *QueryXmetricInstantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryXmetricInstantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryXmetricInstantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xmetric.instant.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: range query
 * Summary: range query
 */
func (client *Client) QueryXmetricRange(request *QueryXmetricRangeRequest) (_result *QueryXmetricRangeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryXmetricRangeResponse{}
	_body, _err := client.QueryXmetricRangeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: range query
 * Summary: range query
 */
func (client *Client) QueryXmetricRangeEx(request *QueryXmetricRangeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryXmetricRangeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryXmetricRangeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xmetric.range.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: datasource metric
 * Summary: datasource metric
 */
func (client *Client) QueryXmetricdatasourceInstant(request *QueryXmetricdatasourceInstantRequest) (_result *QueryXmetricdatasourceInstantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryXmetricdatasourceInstantResponse{}
	_body, _err := client.QueryXmetricdatasourceInstantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: datasource metric
 * Summary: datasource metric
 */
func (client *Client) QueryXmetricdatasourceInstantEx(request *QueryXmetricdatasourceInstantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryXmetricdatasourceInstantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryXmetricdatasourceInstantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xmetricdatasource.instant.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: datasource metric
 * Summary: datasource metric
 */
func (client *Client) QueryXmetricdatasourceRange(request *QueryXmetricdatasourceRangeRequest) (_result *QueryXmetricdatasourceRangeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryXmetricdatasourceRangeResponse{}
	_body, _err := client.QueryXmetricdatasourceRangeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: datasource metric
 * Summary: datasource metric
 */
func (client *Client) QueryXmetricdatasourceRangeEx(request *QueryXmetricdatasourceRangeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryXmetricdatasourceRangeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryXmetricdatasourceRangeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xmetricdatasource.range.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: metric tag keys
 * Summary: metric tag keys
 */
func (client *Client) QueryXmetrictagKey(request *QueryXmetrictagKeyRequest) (_result *QueryXmetrictagKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryXmetrictagKeyResponse{}
	_body, _err := client.QueryXmetrictagKeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: metric tag keys
 * Summary: metric tag keys
 */
func (client *Client) QueryXmetrictagKeyEx(request *QueryXmetrictagKeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryXmetrictagKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryXmetrictagKeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xmetrictag.key.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: metric tag values
 * Summary: metric tag values
 */
func (client *Client) QueryXmetrictagValue(request *QueryXmetrictagValueRequest) (_result *QueryXmetrictagValueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryXmetrictagValueResponse{}
	_body, _err := client.QueryXmetrictagValueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: metric tag values
 * Summary: metric tag values
 */
func (client *Client) QueryXmetrictagValueEx(request *QueryXmetrictagValueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryXmetrictagValueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryXmetrictagValueResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xmetrictag.value.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 日志脱敏类型列表查询
 * Summary: 日志脱敏类型列表查询
 */
func (client *Client) ListLogserviceDesenstypes(request *ListLogserviceDesenstypesRequest) (_result *ListLogserviceDesenstypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListLogserviceDesenstypesResponse{}
	_body, _err := client.ListLogserviceDesenstypesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 日志脱敏类型列表查询
 * Summary: 日志脱敏类型列表查询
 */
func (client *Client) ListLogserviceDesenstypesEx(request *ListLogserviceDesenstypesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListLogserviceDesenstypesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListLogserviceDesenstypesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.logservice.desenstypes.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 日志脱敏配置查询
 * Summary: 日志脱敏配置查询
 */
func (client *Client) GetLogserviceDesensconfig(request *GetLogserviceDesensconfigRequest) (_result *GetLogserviceDesensconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetLogserviceDesensconfigResponse{}
	_body, _err := client.GetLogserviceDesensconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 日志脱敏配置查询
 * Summary: 日志脱敏配置查询
 */
func (client *Client) GetLogserviceDesensconfigEx(request *GetLogserviceDesensconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetLogserviceDesensconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetLogserviceDesensconfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.logservice.desensconfig.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 日志脱敏配置更新
 * Summary: 日志脱敏配置更新
 */
func (client *Client) UpdateLogserviceDesensconfig(request *UpdateLogserviceDesensconfigRequest) (_result *UpdateLogserviceDesensconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateLogserviceDesensconfigResponse{}
	_body, _err := client.UpdateLogserviceDesensconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 日志脱敏配置更新
 * Summary: 日志脱敏配置更新
 */
func (client *Client) UpdateLogserviceDesensconfigEx(request *UpdateLogserviceDesensconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateLogserviceDesensconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateLogserviceDesensconfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.logservice.desensconfig.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取登录用户信息
 * Summary: 获取登录用户信息
 */
func (client *Client) DetailUser(request *DetailUserRequest) (_result *DetailUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DetailUserResponse{}
	_body, _err := client.DetailUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取登录用户信息
 * Summary: 获取登录用户信息
 */
func (client *Client) DetailUserEx(request *DetailUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DetailUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DetailUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.user.detail"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过登录名获取鉴权
 * Summary: 通过登录名获取鉴权
 */
func (client *Client) AuthUser(request *AuthUserRequest) (_result *AuthUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AuthUserResponse{}
	_body, _err := client.AuthUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过登录名获取鉴权
 * Summary: 通过登录名获取鉴权
 */
func (client *Client) AuthUserEx(request *AuthUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AuthUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.user.auth"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取持久化日志路径级别的监控数据
 * Summary: 持久化日志监控
 */
func (client *Client) QueryLogpathMetrics(request *QueryLogpathMetricsRequest) (_result *QueryLogpathMetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLogpathMetricsResponse{}
	_body, _err := client.QueryLogpathMetricsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取持久化日志路径级别的监控数据
 * Summary: 持久化日志监控
 */
func (client *Client) QueryLogpathMetricsEx(request *QueryLogpathMetricsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLogpathMetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLogpathMetricsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.logpath.metrics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: query metric names
 * Summary: query metric names
 */
func (client *Client) QueryXmetricName(request *QueryXmetricNameRequest) (_result *QueryXmetricNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryXmetricNameResponse{}
	_body, _err := client.QueryXmetricNameEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: query metric names
 * Summary: query metric names
 */
func (client *Client) QueryXmetricNameEx(request *QueryXmetricNameRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryXmetricNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryXmetricNameResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xmetric.name.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建alarmwebhook
 * Summary: 创建alarmwebhook
 */
func (client *Client) CreateAlarmwebhook(request *CreateAlarmwebhookRequest) (_result *CreateAlarmwebhookResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAlarmwebhookResponse{}
	_body, _err := client.CreateAlarmwebhookEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建alarmwebhook
 * Summary: 创建alarmwebhook
 */
func (client *Client) CreateAlarmwebhookEx(request *CreateAlarmwebhookRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAlarmwebhookResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAlarmwebhookResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarmwebhook.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: datasource 创建
 * Summary: datasource 创建
 */
func (client *Client) CreateXdatasource(request *CreateXdatasourceRequest) (_result *CreateXdatasourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateXdatasourceResponse{}
	_body, _err := client.CreateXdatasourceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: datasource 创建
 * Summary: datasource 创建
 */
func (client *Client) CreateXdatasourceEx(request *CreateXdatasourceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateXdatasourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateXdatasourceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdatasource.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:
 * Summary: datasource update
 */
func (client *Client) UpdateXdatasource(request *UpdateXdatasourceRequest) (_result *UpdateXdatasourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateXdatasourceResponse{}
	_body, _err := client.UpdateXdatasourceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:
 * Summary: datasource update
 */
func (client *Client) UpdateXdatasourceEx(request *UpdateXdatasourceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateXdatasourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateXdatasourceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdatasource.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:
 * Summary:
 */
func (client *Client) GetXdatasource(request *GetXdatasourceRequest) (_result *GetXdatasourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetXdatasourceResponse{}
	_body, _err := client.GetXdatasourceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:
 * Summary:
 */
func (client *Client) GetXdatasourceEx(request *GetXdatasourceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetXdatasourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetXdatasourceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdatasource.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:
 * Summary:
 */
func (client *Client) DeleteXdatasource(request *DeleteXdatasourceRequest) (_result *DeleteXdatasourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteXdatasourceResponse{}
	_body, _err := client.DeleteXdatasourceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:
 * Summary:
 */
func (client *Client) DeleteXdatasourceEx(request *DeleteXdatasourceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteXdatasourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteXdatasourceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdatasource.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:
 * Summary:
 */
func (client *Client) ListXdatasourceDirectory(request *ListXdatasourceDirectoryRequest) (_result *ListXdatasourceDirectoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListXdatasourceDirectoryResponse{}
	_body, _err := client.ListXdatasourceDirectoryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:
 * Summary:
 */
func (client *Client) ListXdatasourceDirectoryEx(request *ListXdatasourceDirectoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListXdatasourceDirectoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListXdatasourceDirectoryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdatasource.directory.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新alarmwebhook
 * Summary: 更新alarmwebhook
 */
func (client *Client) UpdateAlarmwebhook(request *UpdateAlarmwebhookRequest) (_result *UpdateAlarmwebhookResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAlarmwebhookResponse{}
	_body, _err := client.UpdateAlarmwebhookEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新alarmwebhook
 * Summary: 更新alarmwebhook
 */
func (client *Client) UpdateAlarmwebhookEx(request *UpdateAlarmwebhookRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAlarmwebhookResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateAlarmwebhookResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarmwebhook.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除alarmwebhook
 * Summary: 删除alarmwebhook
 */
func (client *Client) DeleteAlarmwebhook(request *DeleteAlarmwebhookRequest) (_result *DeleteAlarmwebhookResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteAlarmwebhookResponse{}
	_body, _err := client.DeleteAlarmwebhookEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除alarmwebhook
 * Summary: 删除alarmwebhook
 */
func (client *Client) DeleteAlarmwebhookEx(request *DeleteAlarmwebhookRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteAlarmwebhookResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteAlarmwebhookResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarmwebhook.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: datasource table
 * Summary: datasource table
 */
func (client *Client) QueryXdatasourceTable(request *QueryXdatasourceTableRequest) (_result *QueryXdatasourceTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryXdatasourceTableResponse{}
	_body, _err := client.QueryXdatasourceTableEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: datasource table
 * Summary: datasource table
 */
func (client *Client) QueryXdatasourceTableEx(request *QueryXdatasourceTableRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryXdatasourceTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryXdatasourceTableResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdatasource.table.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 告警总览
 * Summary: 告警总览
 */
func (client *Client) GetAlarmOverview(request *GetAlarmOverviewRequest) (_result *GetAlarmOverviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAlarmOverviewResponse{}
	_body, _err := client.GetAlarmOverviewEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 告警总览
 * Summary: 告警总览
 */
func (client *Client) GetAlarmOverviewEx(request *GetAlarmOverviewRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAlarmOverviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAlarmOverviewResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.overview.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的告警数据
 * Summary: 查询应用的告警数据
 */
func (client *Client) QueryAppAlarmstats(request *QueryAppAlarmstatsRequest) (_result *QueryAppAlarmstatsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppAlarmstatsResponse{}
	_body, _err := client.QueryAppAlarmstatsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的告警数据
 * Summary: 查询应用的告警数据
 */
func (client *Client) QueryAppAlarmstatsEx(request *QueryAppAlarmstatsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppAlarmstatsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppAlarmstatsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.app.alarmstats.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 告警趋势
 * Summary: 告警趋势
 */
func (client *Client) QueryAlarmhistoryAlarmtrends(request *QueryAlarmhistoryAlarmtrendsRequest) (_result *QueryAlarmhistoryAlarmtrendsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAlarmhistoryAlarmtrendsResponse{}
	_body, _err := client.QueryAlarmhistoryAlarmtrendsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 告警趋势
 * Summary: 告警趋势
 */
func (client *Client) QueryAlarmhistoryAlarmtrendsEx(request *QueryAlarmhistoryAlarmtrendsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAlarmhistoryAlarmtrendsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAlarmhistoryAlarmtrendsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarmhistory.alarmtrends.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取workspace的配置
 * Summary: 获取workspace的配置
 */
func (client *Client) GetWorkspaceConfig(request *GetWorkspaceConfigRequest) (_result *GetWorkspaceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkspaceConfigResponse{}
	_body, _err := client.GetWorkspaceConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取workspace的配置
 * Summary: 获取workspace的配置
 */
func (client *Client) GetWorkspaceConfigEx(request *GetWorkspaceConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkspaceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetWorkspaceConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.workspace.config.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Agent版本策略配置
 * Summary: Agent版本策略配置
 */
func (client *Client) SetAgentVersionstrategy(request *SetAgentVersionstrategyRequest) (_result *SetAgentVersionstrategyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetAgentVersionstrategyResponse{}
	_body, _err := client.SetAgentVersionstrategyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Agent版本策略配置
 * Summary: Agent版本策略配置
 */
func (client *Client) SetAgentVersionstrategyEx(request *SetAgentVersionstrategyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetAgentVersionstrategyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetAgentVersionstrategyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.agent.versionstrategy.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取agent版本策略详情
 * Summary: 获取agent版本策略详情
 */
func (client *Client) GetAgentVersionstrategy(request *GetAgentVersionstrategyRequest) (_result *GetAgentVersionstrategyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAgentVersionstrategyResponse{}
	_body, _err := client.GetAgentVersionstrategyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取agent版本策略详情
 * Summary: 获取agent版本策略详情
 */
func (client *Client) GetAgentVersionstrategyEx(request *GetAgentVersionstrategyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAgentVersionstrategyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAgentVersionstrategyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.agent.versionstrategy.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取服务器系统时间
 * Summary: 获取服务器系统时间
 */
func (client *Client) GetSystemTime(request *GetSystemTimeRequest) (_result *GetSystemTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSystemTimeResponse{}
	_body, _err := client.GetSystemTimeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取服务器系统时间
 * Summary: 获取服务器系统时间
 */
func (client *Client) GetSystemTimeEx(request *GetSystemTimeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSystemTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSystemTimeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.system.time.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: move datasource
 * Summary: move datasource
 */
func (client *Client) ExecXdatasourceMove(request *ExecXdatasourceMoveRequest) (_result *ExecXdatasourceMoveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecXdatasourceMoveResponse{}
	_body, _err := client.ExecXdatasourceMoveEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: move datasource
 * Summary: move datasource
 */
func (client *Client) ExecXdatasourceMoveEx(request *ExecXdatasourceMoveRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecXdatasourceMoveResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecXdatasourceMoveResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdatasource.move.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: metadata default tags
 * Summary: default tags
 */
func (client *Client) QueryXmetadataTag(request *QueryXmetadataTagRequest) (_result *QueryXmetadataTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryXmetadataTagResponse{}
	_body, _err := client.QueryXmetadataTagEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: metadata default tags
 * Summary: default tags
 */
func (client *Client) QueryXmetadataTagEx(request *QueryXmetadataTagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryXmetadataTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryXmetadataTagResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xmetadata.tag.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: search datasource
 * Summary: search datasource
 */
func (client *Client) QueryXdatasourceSearch(request *QueryXdatasourceSearchRequest) (_result *QueryXdatasourceSearchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryXdatasourceSearchResponse{}
	_body, _err := client.QueryXdatasourceSearchEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: search datasource
 * Summary: search datasource
 */
func (client *Client) QueryXdatasourceSearchEx(request *QueryXdatasourceSearchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryXdatasourceSearchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryXdatasourceSearchResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdatasource.search.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:
 * Summary: query setup config
 */
func (client *Client) QuerySetupConfig(request *QuerySetupConfigRequest) (_result *QuerySetupConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySetupConfigResponse{}
	_body, _err := client.QuerySetupConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:
 * Summary: query setup config
 */
func (client *Client) QuerySetupConfigEx(request *QuerySetupConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySetupConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySetupConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.setup.config.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:
 * Summary: update or insert
 */
func (client *Client) UpdateSetupConfig(request *UpdateSetupConfigRequest) (_result *UpdateSetupConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSetupConfigResponse{}
	_body, _err := client.UpdateSetupConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:
 * Summary: update or insert
 */
func (client *Client) UpdateSetupConfigEx(request *UpdateSetupConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSetupConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSetupConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.setup.config.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:
 * Summary: delete config
 */
func (client *Client) DeleteSetupConfig(request *DeleteSetupConfigRequest) (_result *DeleteSetupConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSetupConfigResponse{}
	_body, _err := client.DeleteSetupConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:
 * Summary: delete config
 */
func (client *Client) DeleteSetupConfigEx(request *DeleteSetupConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSetupConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSetupConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.setup.config.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 告警开关配置更新
 * Summary: 告警开关配置更新
 */
func (client *Client) UpdateWorkspaceSetting(request *UpdateWorkspaceSettingRequest) (_result *UpdateWorkspaceSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateWorkspaceSettingResponse{}
	_body, _err := client.UpdateWorkspaceSettingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 告警开关配置更新
 * Summary: 告警开关配置更新
 */
func (client *Client) UpdateWorkspaceSettingEx(request *UpdateWorkspaceSettingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateWorkspaceSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateWorkspaceSettingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.workspace.setting.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:
 * Summary:
 */
func (client *Client) ExportXsiteConfig(request *ExportXsiteConfigRequest) (_result *ExportXsiteConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportXsiteConfigResponse{}
	_body, _err := client.ExportXsiteConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:
 * Summary:
 */
func (client *Client) ExportXsiteConfigEx(request *ExportXsiteConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportXsiteConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExportXsiteConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xsite.config.export"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:
 * Summary: import
 */
func (client *Client) ImportXsiteConfig(request *ImportXsiteConfigRequest) (_result *ImportXsiteConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportXsiteConfigResponse{}
	_body, _err := client.ImportXsiteConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:
 * Summary: import
 */
func (client *Client) ImportXsiteConfigEx(request *ImportXsiteConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportXsiteConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportXsiteConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xsite.config.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:
 * Summary: tree
 */
func (client *Client) QueryXdatasourceTree(request *QueryXdatasourceTreeRequest) (_result *QueryXdatasourceTreeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryXdatasourceTreeResponse{}
	_body, _err := client.QueryXdatasourceTreeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:
 * Summary: tree
 */
func (client *Client) QueryXdatasourceTreeEx(request *QueryXdatasourceTreeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryXdatasourceTreeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryXdatasourceTreeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdatasource.tree.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:
 * Summary:
 */
func (client *Client) QueryXdashboardTree(request *QueryXdashboardTreeRequest) (_result *QueryXdashboardTreeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryXdashboardTreeResponse{}
	_body, _err := client.QueryXdashboardTreeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:
 * Summary:
 */
func (client *Client) QueryXdashboardTreeEx(request *QueryXdashboardTreeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryXdashboardTreeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryXdashboardTreeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdashboard.tree.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:
 * Summary: dashboard查询
 */
func (client *Client) GetXdashboard(request *GetXdashboardRequest) (_result *GetXdashboardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetXdashboardResponse{}
	_body, _err := client.GetXdashboardEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:
 * Summary: dashboard查询
 */
func (client *Client) GetXdashboardEx(request *GetXdashboardRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetXdashboardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetXdashboardResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdashboard.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:
 * Summary: prometheus metrics
 */
func (client *Client) QueryXdatasourcePrometheus(request *QueryXdatasourcePrometheusRequest) (_result *QueryXdatasourcePrometheusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryXdatasourcePrometheusResponse{}
	_body, _err := client.QueryXdatasourcePrometheusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:
 * Summary: prometheus metrics
 */
func (client *Client) QueryXdatasourcePrometheusEx(request *QueryXdatasourcePrometheusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryXdatasourcePrometheusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryXdatasourcePrometheusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xdatasource.prometheus.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:  获取总览页主机统计信息
 * Summary:  获取总览页主机统计信息
 */
func (client *Client) GetNodeOverview(request *GetNodeOverviewRequest) (_result *GetNodeOverviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetNodeOverviewResponse{}
	_body, _err := client.GetNodeOverviewEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:  获取总览页主机统计信息
 * Summary:  获取总览页主机统计信息
 */
func (client *Client) GetNodeOverviewEx(request *GetNodeOverviewRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetNodeOverviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetNodeOverviewResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.node.overview.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 总览页配置信息统计
 * Summary: 总览页配置信息统计
 */
func (client *Client) GetConfigOverview(request *GetConfigOverviewRequest) (_result *GetConfigOverviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetConfigOverviewResponse{}
	_body, _err := client.GetConfigOverviewEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 总览页配置信息统计
 * Summary: 总览页配置信息统计
 */
func (client *Client) GetConfigOverviewEx(request *GetConfigOverviewRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetConfigOverviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetConfigOverviewResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.config.overview.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取workspace具体配置
 * Summary: 获取workspace具体配置
 */
func (client *Client) GetWorkspaceSetting(request *GetWorkspaceSettingRequest) (_result *GetWorkspaceSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkspaceSettingResponse{}
	_body, _err := client.GetWorkspaceSettingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取workspace具体配置
 * Summary: 获取workspace具体配置
 */
func (client *Client) GetWorkspaceSettingEx(request *GetWorkspaceSettingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkspaceSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetWorkspaceSettingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.workspace.setting.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取链路工作空间配置
 * Summary: 获取链路工作空间配置
 */
func (client *Client) ListTraceWorkspacesetting(request *ListTraceWorkspacesettingRequest) (_result *ListTraceWorkspacesettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListTraceWorkspacesettingResponse{}
	_body, _err := client.ListTraceWorkspacesettingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取链路工作空间配置
 * Summary: 获取链路工作空间配置
 */
func (client *Client) ListTraceWorkspacesettingEx(request *ListTraceWorkspacesettingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListTraceWorkspacesettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListTraceWorkspacesettingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.workspacesetting.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 链路工作空间配置更新
 * Summary: 链路工作空间配置更新
 */
func (client *Client) UpdateTraceWorkspacesetting(request *UpdateTraceWorkspacesettingRequest) (_result *UpdateTraceWorkspacesettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateTraceWorkspacesettingResponse{}
	_body, _err := client.UpdateTraceWorkspacesettingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 链路工作空间配置更新
 * Summary: 链路工作空间配置更新
 */
func (client *Client) UpdateTraceWorkspacesettingEx(request *UpdateTraceWorkspacesettingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateTraceWorkspacesettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateTraceWorkspacesettingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.workspacesetting.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: APP配置列表
 * Summary: APP配置列表
 */
func (client *Client) ListAppSetting(request *ListAppSettingRequest) (_result *ListAppSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppSettingResponse{}
	_body, _err := client.ListAppSettingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: APP配置列表
 * Summary: APP配置列表
 */
func (client *Client) ListAppSettingEx(request *ListAppSettingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppSettingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.app.setting.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建APP配置信息
 * Summary: 创建APP配置信息
 */
func (client *Client) UpdateAppSetting(request *UpdateAppSettingRequest) (_result *UpdateAppSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAppSettingResponse{}
	_body, _err := client.UpdateAppSettingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建APP配置信息
 * Summary: 创建APP配置信息
 */
func (client *Client) UpdateAppSettingEx(request *UpdateAppSettingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAppSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateAppSettingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.app.setting.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取APP配置信息
 * Summary: 获取APP配置信息
 */
func (client *Client) GetAppSetting(request *GetAppSettingRequest) (_result *GetAppSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppSettingResponse{}
	_body, _err := client.GetAppSettingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取APP配置信息
 * Summary: 获取APP配置信息
 */
func (client *Client) GetAppSettingEx(request *GetAppSettingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppSettingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.app.setting.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询某一告警事件相关的告警列表
 * Summary: 查询某一告警事件相关的告警列表
 */
func (client *Client) QueryUnifiedalarmEventdetail(request *QueryUnifiedalarmEventdetailRequest) (_result *QueryUnifiedalarmEventdetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnifiedalarmEventdetailResponse{}
	_body, _err := client.QueryUnifiedalarmEventdetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询某一告警事件相关的告警列表
 * Summary: 查询某一告警事件相关的告警列表
 */
func (client *Client) QueryUnifiedalarmEventdetailEx(request *QueryUnifiedalarmEventdetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnifiedalarmEventdetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnifiedalarmEventdetailResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.eventdetail.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的告警指标清单
 * Summary: 查询应用的告警指标清单
 */
func (client *Client) QueryUnifiedalarmMonitorlist(request *QueryUnifiedalarmMonitorlistRequest) (_result *QueryUnifiedalarmMonitorlistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnifiedalarmMonitorlistResponse{}
	_body, _err := client.QueryUnifiedalarmMonitorlistEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的告警指标清单
 * Summary: 查询应用的告警指标清单
 */
func (client *Client) QueryUnifiedalarmMonitorlistEx(request *QueryUnifiedalarmMonitorlistRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnifiedalarmMonitorlistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnifiedalarmMonitorlistResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.monitorlist.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:
 * Summary:
 */
func (client *Client) QueryXmetricTable(request *QueryXmetricTableRequest) (_result *QueryXmetricTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryXmetricTableResponse{}
	_body, _err := client.QueryXmetricTableEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:
 * Summary:
 */
func (client *Client) QueryXmetricTableEx(request *QueryXmetricTableRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryXmetricTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryXmetricTableResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.xmetric.table.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的SQL调用指标
 * Summary: 查询应用的SQL调用指标
 */
func (client *Client) QueryTraceAppsqlmetrics(request *QueryTraceAppsqlmetricsRequest) (_result *QueryTraceAppsqlmetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceAppsqlmetricsResponse{}
	_body, _err := client.QueryTraceAppsqlmetricsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的SQL调用指标
 * Summary: 查询应用的SQL调用指标
 */
func (client *Client) QueryTraceAppsqlmetricsEx(request *QueryTraceAppsqlmetricsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceAppsqlmetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceAppsqlmetricsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.appsqlmetrics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的SQL请求调用明细
 * Summary: 查询应用的SQL请求调用明细
 */
func (client *Client) QueryTraceAppsqlstat(request *QueryTraceAppsqlstatRequest) (_result *QueryTraceAppsqlstatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceAppsqlstatResponse{}
	_body, _err := client.QueryTraceAppsqlstatEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的SQL请求调用明细
 * Summary: 查询应用的SQL请求调用明细
 */
func (client *Client) QueryTraceAppsqlstatEx(request *QueryTraceAppsqlstatRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceAppsqlstatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceAppsqlstatResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.appsqlstat.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的NoSQL调用指标
 * Summary: 查询应用的NoSQL调用指标
 */
func (client *Client) QueryTraceAppnosqlmetrics(request *QueryTraceAppnosqlmetricsRequest) (_result *QueryTraceAppnosqlmetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceAppnosqlmetricsResponse{}
	_body, _err := client.QueryTraceAppnosqlmetricsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的NoSQL调用指标
 * Summary: 查询应用的NoSQL调用指标
 */
func (client *Client) QueryTraceAppnosqlmetricsEx(request *QueryTraceAppnosqlmetricsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceAppnosqlmetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceAppnosqlmetricsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.appnosqlmetrics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的MQ消费调用指标
 * Summary: 查询应用的MQ消费调用指标
 */
func (client *Client) QueryTraceAppmqconsumemetrics(request *QueryTraceAppmqconsumemetricsRequest) (_result *QueryTraceAppmqconsumemetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceAppmqconsumemetricsResponse{}
	_body, _err := client.QueryTraceAppmqconsumemetricsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的MQ消费调用指标
 * Summary: 查询应用的MQ消费调用指标
 */
func (client *Client) QueryTraceAppmqconsumemetricsEx(request *QueryTraceAppmqconsumemetricsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceAppmqconsumemetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceAppmqconsumemetricsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.appmqconsumemetrics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的RPC客户端调用指标
 * Summary: 查询应用的RPC客户端调用指标
 */
func (client *Client) QueryTraceApprpcclientmetrics(request *QueryTraceApprpcclientmetricsRequest) (_result *QueryTraceApprpcclientmetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceApprpcclientmetricsResponse{}
	_body, _err := client.QueryTraceApprpcclientmetricsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的RPC客户端调用指标
 * Summary: 查询应用的RPC客户端调用指标
 */
func (client *Client) QueryTraceApprpcclientmetricsEx(request *QueryTraceApprpcclientmetricsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceApprpcclientmetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceApprpcclientmetricsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.apprpcclientmetrics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的RPC服务端指标
 * Summary:  查询应用的RPC服务端指标
 */
func (client *Client) QueryTraceApprpcservermetrics(request *QueryTraceApprpcservermetricsRequest) (_result *QueryTraceApprpcservermetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceApprpcservermetricsResponse{}
	_body, _err := client.QueryTraceApprpcservermetricsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的RPC服务端指标
 * Summary:  查询应用的RPC服务端指标
 */
func (client *Client) QueryTraceApprpcservermetricsEx(request *QueryTraceApprpcservermetricsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceApprpcservermetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceApprpcservermetricsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.apprpcservermetrics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的HTTP客户端调用指标
 * Summary: 查询应用的HTTP客户端调用指标
 */
func (client *Client) QueryTraceApphttpclientmetrics(request *QueryTraceApphttpclientmetricsRequest) (_result *QueryTraceApphttpclientmetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceApphttpclientmetricsResponse{}
	_body, _err := client.QueryTraceApphttpclientmetricsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的HTTP客户端调用指标
 * Summary: 查询应用的HTTP客户端调用指标
 */
func (client *Client) QueryTraceApphttpclientmetricsEx(request *QueryTraceApphttpclientmetricsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceApphttpclientmetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceApphttpclientmetricsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.apphttpclientmetrics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的HTTP服务端指标
 * Summary: 查询应用的HTTP服务端指标
 */
func (client *Client) QueryTraceApphttpservermetrics(request *QueryTraceApphttpservermetricsRequest) (_result *QueryTraceApphttpservermetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceApphttpservermetricsResponse{}
	_body, _err := client.QueryTraceApphttpservermetricsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的HTTP服务端指标
 * Summary: 查询应用的HTTP服务端指标
 */
func (client *Client) QueryTraceApphttpservermetricsEx(request *QueryTraceApphttpservermetricsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceApphttpservermetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceApphttpservermetricsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.apphttpservermetrics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的NoSQL请求调用明细
 * Summary: 查询应用的NoSQL请求调用明细
 */
func (client *Client) QueryTraceAppnosqlstat(request *QueryTraceAppnosqlstatRequest) (_result *QueryTraceAppnosqlstatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceAppnosqlstatResponse{}
	_body, _err := client.QueryTraceAppnosqlstatEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的NoSQL请求调用明细
 * Summary: 查询应用的NoSQL请求调用明细
 */
func (client *Client) QueryTraceAppnosqlstatEx(request *QueryTraceAppnosqlstatRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceAppnosqlstatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceAppnosqlstatResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.appnosqlstat.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的MQ消费调用明细
 * Summary: 查询应用的MQ消费调用明细
 */
func (client *Client) QueryTraceAppmqconsumestat(request *QueryTraceAppmqconsumestatRequest) (_result *QueryTraceAppmqconsumestatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceAppmqconsumestatResponse{}
	_body, _err := client.QueryTraceAppmqconsumestatEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的MQ消费调用明细
 * Summary: 查询应用的MQ消费调用明细
 */
func (client *Client) QueryTraceAppmqconsumestatEx(request *QueryTraceAppmqconsumestatRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceAppmqconsumestatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceAppmqconsumestatResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.appmqconsumestat.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的HTTP客户端请求调用明细
 * Summary: 查询应用的HTTP客户端请求调用明细
 */
func (client *Client) QueryTraceApphttpclientstat(request *QueryTraceApphttpclientstatRequest) (_result *QueryTraceApphttpclientstatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceApphttpclientstatResponse{}
	_body, _err := client.QueryTraceApphttpclientstatEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的HTTP客户端请求调用明细
 * Summary: 查询应用的HTTP客户端请求调用明细
 */
func (client *Client) QueryTraceApphttpclientstatEx(request *QueryTraceApphttpclientstatRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceApphttpclientstatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceApphttpclientstatResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.apphttpclientstat.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的HTTP服务端调用明细
 * Summary: 查询应用的HTTP服务端调用明细
 */
func (client *Client) QueryTraceApphttpserverstat(request *QueryTraceApphttpserverstatRequest) (_result *QueryTraceApphttpserverstatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceApphttpserverstatResponse{}
	_body, _err := client.QueryTraceApphttpserverstatEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的HTTP服务端调用明细
 * Summary: 查询应用的HTTP服务端调用明细
 */
func (client *Client) QueryTraceApphttpserverstatEx(request *QueryTraceApphttpserverstatRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceApphttpserverstatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceApphttpserverstatResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.apphttpserverstat.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的RPC客户端请求调用明细
 * Summary: 查询应用的RPC客户端请求调用明细
 */
func (client *Client) QueryTraceApprpcclientstat(request *QueryTraceApprpcclientstatRequest) (_result *QueryTraceApprpcclientstatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceApprpcclientstatResponse{}
	_body, _err := client.QueryTraceApprpcclientstatEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的RPC客户端请求调用明细
 * Summary: 查询应用的RPC客户端请求调用明细
 */
func (client *Client) QueryTraceApprpcclientstatEx(request *QueryTraceApprpcclientstatRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceApprpcclientstatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceApprpcclientstatResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.apprpcclientstat.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的RPC服务端调用明细
 * Summary: 查询应用的RPC服务端调用明细
 */
func (client *Client) QueryTraceApprpcserverstat(request *QueryTraceApprpcserverstatRequest) (_result *QueryTraceApprpcserverstatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceApprpcserverstatResponse{}
	_body, _err := client.QueryTraceApprpcserverstatEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的RPC服务端调用明细
 * Summary: 查询应用的RPC服务端调用明细
 */
func (client *Client) QueryTraceApprpcserverstatEx(request *QueryTraceApprpcserverstatRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceApprpcserverstatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceApprpcserverstatResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.apprpcserverstat.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取链路单工作空间配置
 * Summary: 获取链路单工作空间配置
 */
func (client *Client) GetTraceWorkspacesetting(request *GetTraceWorkspacesettingRequest) (_result *GetTraceWorkspacesettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTraceWorkspacesettingResponse{}
	_body, _err := client.GetTraceWorkspacesettingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取链路单工作空间配置
 * Summary: 获取链路单工作空间配置
 */
func (client *Client) GetTraceWorkspacesettingEx(request *GetTraceWorkspacesettingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTraceWorkspacesettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTraceWorkspacesettingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.workspacesetting.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的MQ生产调用指标
 * Summary: 查询应用的MQ生产调用指标
 */
func (client *Client) QueryTraceAppmqproducemetrics(request *QueryTraceAppmqproducemetricsRequest) (_result *QueryTraceAppmqproducemetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceAppmqproducemetricsResponse{}
	_body, _err := client.QueryTraceAppmqproducemetricsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的MQ生产调用指标
 * Summary: 查询应用的MQ生产调用指标
 */
func (client *Client) QueryTraceAppmqproducemetricsEx(request *QueryTraceAppmqproducemetricsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceAppmqproducemetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceAppmqproducemetricsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.appmqproducemetrics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的MQ生产调用明细
 * Summary: 查询应用的MQ生产调用明细
 */
func (client *Client) QueryTraceAppmqproducestat(request *QueryTraceAppmqproducestatRequest) (_result *QueryTraceAppmqproducestatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceAppmqproducestatResponse{}
	_body, _err := client.QueryTraceAppmqproducestatEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的MQ生产调用明细
 * Summary: 查询应用的MQ生产调用明细
 */
func (client *Client) QueryTraceAppmqproducestatEx(request *QueryTraceAppmqproducestatRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceAppmqproducestatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceAppmqproducestatResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.appmqproducestat.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 计量计费是否开启
 * Summary: 计量计费是否开启
 */
func (client *Client) GetMeasurementStatus(request *GetMeasurementStatusRequest) (_result *GetMeasurementStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetMeasurementStatusResponse{}
	_body, _err := client.GetMeasurementStatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 计量计费是否开启
 * Summary: 计量计费是否开启
 */
func (client *Client) GetMeasurementStatusEx(request *GetMeasurementStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetMeasurementStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetMeasurementStatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.measurement.status.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 日志查询页面获取应用列表
 * Summary: 获取应用列表
 */
func (client *Client) QueryLogserviceApps(request *QueryLogserviceAppsRequest) (_result *QueryLogserviceAppsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLogserviceAppsResponse{}
	_body, _err := client.QueryLogserviceAppsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 日志查询页面获取应用列表
 * Summary: 获取应用列表
 */
func (client *Client) QueryLogserviceAppsEx(request *QueryLogserviceAppsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLogserviceAppsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLogserviceAppsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.logservice.apps.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的HTTP服务端状态指标
 * Summary: 查询应用的HTTP服务端状态指标
 */
func (client *Client) QueryTraceApphttpserverstatusmetrics(request *QueryTraceApphttpserverstatusmetricsRequest) (_result *QueryTraceApphttpserverstatusmetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceApphttpserverstatusmetricsResponse{}
	_body, _err := client.QueryTraceApphttpserverstatusmetricsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的HTTP服务端状态指标
 * Summary: 查询应用的HTTP服务端状态指标
 */
func (client *Client) QueryTraceApphttpserverstatusmetricsEx(request *QueryTraceApphttpserverstatusmetricsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceApphttpserverstatusmetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceApphttpserverstatusmetricsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.apphttpserverstatusmetrics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的告警指标，或应用已经配置。
 * Summary: 查询应用的告警指标清单
 */
func (client *Client) QueryAppAlarmrules(request *QueryAppAlarmrulesRequest) (_result *QueryAppAlarmrulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppAlarmrulesResponse{}
	_body, _err := client.QueryAppAlarmrulesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的告警指标，或应用已经配置。
 * Summary: 查询应用的告警指标清单
 */
func (client *Client) QueryAppAlarmrulesEx(request *QueryAppAlarmrulesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppAlarmrulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppAlarmrulesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.app.alarmrules.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询链路紧凑详情
 * Summary: 查询链路紧凑详情
 */
func (client *Client) QueryTraceCompactdetail(request *QueryTraceCompactdetailRequest) (_result *QueryTraceCompactdetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceCompactdetailResponse{}
	_body, _err := client.QueryTraceCompactdetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询链路紧凑详情
 * Summary: 查询链路紧凑详情
 */
func (client *Client) QueryTraceCompactdetailEx(request *QueryTraceCompactdetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceCompactdetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceCompactdetailResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.compactdetail.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的异常调用指标
 * Summary: 查询应用的异常调用指标
 */
func (client *Client) QueryTraceAppexceptionmetrics(request *QueryTraceAppexceptionmetricsRequest) (_result *QueryTraceAppexceptionmetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceAppexceptionmetricsResponse{}
	_body, _err := client.QueryTraceAppexceptionmetricsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的异常调用指标
 * Summary: 查询应用的异常调用指标
 */
func (client *Client) QueryTraceAppexceptionmetricsEx(request *QueryTraceAppexceptionmetricsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceAppexceptionmetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceAppexceptionmetricsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.appexceptionmetrics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用的异常请求调用明细
 * Summary: 查询应用的异常请求调用明细
 */
func (client *Client) QueryTraceAppexceptionstat(request *QueryTraceAppexceptionstatRequest) (_result *QueryTraceAppexceptionstatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceAppexceptionstatResponse{}
	_body, _err := client.QueryTraceAppexceptionstatEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用的异常请求调用明细
 * Summary: 查询应用的异常请求调用明细
 */
func (client *Client) QueryTraceAppexceptionstatEx(request *QueryTraceAppexceptionstatRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceAppexceptionstatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceAppexceptionstatResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.appexceptionstat.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询告警绑定关系
 * Summary: 罗予
 */
func (client *Client) QueryUnifiedalarmRulebinding(request *QueryUnifiedalarmRulebindingRequest) (_result *QueryUnifiedalarmRulebindingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnifiedalarmRulebindingResponse{}
	_body, _err := client.QueryUnifiedalarmRulebindingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询告警绑定关系
 * Summary: 罗予
 */
func (client *Client) QueryUnifiedalarmRulebindingEx(request *QueryUnifiedalarmRulebindingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnifiedalarmRulebindingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnifiedalarmRulebindingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.unifiedalarm.rulebinding.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 监控数据诊断列表查询
 * Summary: 监控数据诊断列表查询
 */
func (client *Client) QueryOpsCheck(request *QueryOpsCheckRequest) (_result *QueryOpsCheckResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOpsCheckResponse{}
	_body, _err := client.QueryOpsCheckEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 监控数据诊断列表查询
 * Summary: 监控数据诊断列表查询
 */
func (client *Client) QueryOpsCheckEx(request *QueryOpsCheckRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOpsCheckResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOpsCheckResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.ops.check.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用诊断
 * Summary: 应用诊断
 */
func (client *Client) QueryOpsAppcheck(request *QueryOpsAppcheckRequest) (_result *QueryOpsAppcheckResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOpsAppcheckResponse{}
	_body, _err := client.QueryOpsAppcheckEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用诊断
 * Summary: 应用诊断
 */
func (client *Client) QueryOpsAppcheckEx(request *QueryOpsAppcheckRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOpsAppcheckResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOpsAppcheckResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.ops.appcheck.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 添加钉钉机器人
 * Summary: 添加钉钉机器人
 */
func (client *Client) CreateAlarmDingdingrobot(request *CreateAlarmDingdingrobotRequest) (_result *CreateAlarmDingdingrobotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAlarmDingdingrobotResponse{}
	_body, _err := client.CreateAlarmDingdingrobotEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 添加钉钉机器人
 * Summary: 添加钉钉机器人
 */
func (client *Client) CreateAlarmDingdingrobotEx(request *CreateAlarmDingdingrobotRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAlarmDingdingrobotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAlarmDingdingrobotResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.dingdingrobot.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询钉钉机器人
 * Summary: 查询钉钉机器人
 */
func (client *Client) QueryAlarmDingdingrobot(request *QueryAlarmDingdingrobotRequest) (_result *QueryAlarmDingdingrobotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAlarmDingdingrobotResponse{}
	_body, _err := client.QueryAlarmDingdingrobotEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询钉钉机器人
 * Summary: 查询钉钉机器人
 */
func (client *Client) QueryAlarmDingdingrobotEx(request *QueryAlarmDingdingrobotRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAlarmDingdingrobotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAlarmDingdingrobotResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.dingdingrobot.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除钉钉机器人
 * Summary: 删除钉钉机器人
 */
func (client *Client) DeleteAlarmDingdingrobot(request *DeleteAlarmDingdingrobotRequest) (_result *DeleteAlarmDingdingrobotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteAlarmDingdingrobotResponse{}
	_body, _err := client.DeleteAlarmDingdingrobotEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除钉钉机器人
 * Summary: 删除钉钉机器人
 */
func (client *Client) DeleteAlarmDingdingrobotEx(request *DeleteAlarmDingdingrobotRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteAlarmDingdingrobotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteAlarmDingdingrobotResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.dingdingrobot.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新钉钉机器人
 * Summary: 更新钉钉机器人
 */
func (client *Client) UpdateAlarmDingdingrobot(request *UpdateAlarmDingdingrobotRequest) (_result *UpdateAlarmDingdingrobotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAlarmDingdingrobotResponse{}
	_body, _err := client.UpdateAlarmDingdingrobotEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新钉钉机器人
 * Summary: 更新钉钉机器人
 */
func (client *Client) UpdateAlarmDingdingrobotEx(request *UpdateAlarmDingdingrobotRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAlarmDingdingrobotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateAlarmDingdingrobotResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.alarm.dingdingrobot.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用告警统计
 * Summary: 查询应用告警统计
 */
func (client *Client) QueryAppsAlarmrulecount(request *QueryAppsAlarmrulecountRequest) (_result *QueryAppsAlarmrulecountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppsAlarmrulecountResponse{}
	_body, _err := client.QueryAppsAlarmrulecountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用告警统计
 * Summary: 查询应用告警统计
 */
func (client *Client) QueryAppsAlarmrulecountEx(request *QueryAppsAlarmrulecountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppsAlarmrulecountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppsAlarmrulecountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.apps.alarmrulecount.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据app维度查询统一告警状态
 * Summary: 根据app维度查询统一告警状态
 */
func (client *Client) QueryAppsUnifiedalarmstats(request *QueryAppsUnifiedalarmstatsRequest) (_result *QueryAppsUnifiedalarmstatsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppsUnifiedalarmstatsResponse{}
	_body, _err := client.QueryAppsUnifiedalarmstatsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据app维度查询统一告警状态
 * Summary: 根据app维度查询统一告警状态
 */
func (client *Client) QueryAppsUnifiedalarmstatsEx(request *QueryAppsUnifiedalarmstatsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppsUnifiedalarmstatsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppsUnifiedalarmstatsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.apps.unifiedalarmstats.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开启监控数据诊断告警
 * Summary: 开启监控数据诊断告警
 */
func (client *Client) SwitchOpsAlarm(request *SwitchOpsAlarmRequest) (_result *SwitchOpsAlarmResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SwitchOpsAlarmResponse{}
	_body, _err := client.SwitchOpsAlarmEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开启监控数据诊断告警
 * Summary: 开启监控数据诊断告警
 */
func (client *Client) SwitchOpsAlarmEx(request *SwitchOpsAlarmRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SwitchOpsAlarmResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SwitchOpsAlarmResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.ops.alarm.switch"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有租户
 * Summary: 获取所有租户
 */
func (client *Client) AllTraasmetaTenant(request *AllTraasmetaTenantRequest) (_result *AllTraasmetaTenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllTraasmetaTenantResponse{}
	_body, _err := client.AllTraasmetaTenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有租户
 * Summary: 获取所有租户
 */
func (client *Client) AllTraasmetaTenantEx(request *AllTraasmetaTenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllTraasmetaTenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllTraasmetaTenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.tenant.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有region
 * Summary: 获取所有region
 */
func (client *Client) AllTraasmetaRegion(request *AllTraasmetaRegionRequest) (_result *AllTraasmetaRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllTraasmetaRegionResponse{}
	_body, _err := client.AllTraasmetaRegionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有region
 * Summary: 获取所有region
 */
func (client *Client) AllTraasmetaRegionEx(request *AllTraasmetaRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllTraasmetaRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllTraasmetaRegionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.region.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租户分页查询
 * Summary: 租户分页查询
 */
func (client *Client) PagequeryTraasmetaTenant(request *PagequeryTraasmetaTenantRequest) (_result *PagequeryTraasmetaTenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryTraasmetaTenantResponse{}
	_body, _err := client.PagequeryTraasmetaTenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租户分页查询
 * Summary: 租户分页查询
 */
func (client *Client) PagequeryTraasmetaTenantEx(request *PagequeryTraasmetaTenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryTraasmetaTenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryTraasmetaTenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.tenant.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个租户
 * Summary: 获取单个租户
 */
func (client *Client) GetTraasmetaTenant(request *GetTraasmetaTenantRequest) (_result *GetTraasmetaTenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTraasmetaTenantResponse{}
	_body, _err := client.GetTraasmetaTenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个租户
 * Summary: 获取单个租户
 */
func (client *Client) GetTraasmetaTenantEx(request *GetTraasmetaTenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTraasmetaTenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTraasmetaTenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.tenant.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租户查询
 * Summary: 租户查询
 */
func (client *Client) QueryTraasmetaTenant(request *QueryTraasmetaTenantRequest) (_result *QueryTraasmetaTenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraasmetaTenantResponse{}
	_body, _err := client.QueryTraasmetaTenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租户查询
 * Summary: 租户查询
 */
func (client *Client) QueryTraasmetaTenantEx(request *QueryTraasmetaTenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraasmetaTenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraasmetaTenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.tenant.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询租户
 * Summary: 批量查询租户
 */
func (client *Client) BatchqueryTraasmetaTenant(request *BatchqueryTraasmetaTenantRequest) (_result *BatchqueryTraasmetaTenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryTraasmetaTenantResponse{}
	_body, _err := client.BatchqueryTraasmetaTenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询租户
 * Summary: 批量查询租户
 */
func (client *Client) BatchqueryTraasmetaTenantEx(request *BatchqueryTraasmetaTenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryTraasmetaTenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryTraasmetaTenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.tenant.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建tenant
 * Summary: 创建tenant
 */
func (client *Client) CreateTraasmetaTenant(request *CreateTraasmetaTenantRequest) (_result *CreateTraasmetaTenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTraasmetaTenantResponse{}
	_body, _err := client.CreateTraasmetaTenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建tenant
 * Summary: 创建tenant
 */
func (client *Client) CreateTraasmetaTenantEx(request *CreateTraasmetaTenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTraasmetaTenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTraasmetaTenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.tenant.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量创建租户
 * Summary: 批量创建租户
 */
func (client *Client) BatchcreateTraasmetaTenant(request *BatchcreateTraasmetaTenantRequest) (_result *BatchcreateTraasmetaTenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateTraasmetaTenantResponse{}
	_body, _err := client.BatchcreateTraasmetaTenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量创建租户
 * Summary: 批量创建租户
 */
func (client *Client) BatchcreateTraasmetaTenantEx(request *BatchcreateTraasmetaTenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateTraasmetaTenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateTraasmetaTenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.tenant.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新租户
 * Summary: 更新租户
 */
func (client *Client) UpdateTraasmetaTenant(request *UpdateTraasmetaTenantRequest) (_result *UpdateTraasmetaTenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateTraasmetaTenantResponse{}
	_body, _err := client.UpdateTraasmetaTenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新租户
 * Summary: 更新租户
 */
func (client *Client) UpdateTraasmetaTenantEx(request *UpdateTraasmetaTenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateTraasmetaTenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateTraasmetaTenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.tenant.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除租户
 * Summary: 删除租户
 */
func (client *Client) DeleteTraasmetaTenant(request *DeleteTraasmetaTenantRequest) (_result *DeleteTraasmetaTenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteTraasmetaTenantResponse{}
	_body, _err := client.DeleteTraasmetaTenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除租户
 * Summary: 删除租户
 */
func (client *Client) DeleteTraasmetaTenantEx(request *DeleteTraasmetaTenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteTraasmetaTenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteTraasmetaTenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.tenant.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除租户
 * Summary: 批量删除租户
 */
func (client *Client) BatchdeleteTraasmetaTenant(request *BatchdeleteTraasmetaTenantRequest) (_result *BatchdeleteTraasmetaTenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteTraasmetaTenantResponse{}
	_body, _err := client.BatchdeleteTraasmetaTenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除租户
 * Summary: 批量删除租户
 */
func (client *Client) BatchdeleteTraasmetaTenantEx(request *BatchdeleteTraasmetaTenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteTraasmetaTenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteTraasmetaTenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.tenant.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个地域
 * Summary: 获取单个地域
 */
func (client *Client) GetTraasmetaRegion(request *GetTraasmetaRegionRequest) (_result *GetTraasmetaRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTraasmetaRegionResponse{}
	_body, _err := client.GetTraasmetaRegionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个地域
 * Summary: 获取单个地域
 */
func (client *Client) GetTraasmetaRegionEx(request *GetTraasmetaRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTraasmetaRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTraasmetaRegionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.region.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有机房
 * Summary: 获取所有机房
 */
func (client *Client) AllTraasmetaZone(request *AllTraasmetaZoneRequest) (_result *AllTraasmetaZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllTraasmetaZoneResponse{}
	_body, _err := client.AllTraasmetaZoneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有机房
 * Summary: 获取所有机房
 */
func (client *Client) AllTraasmetaZoneEx(request *AllTraasmetaZoneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllTraasmetaZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllTraasmetaZoneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.zone.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个机房
 * Summary: 获取单个机房
 */
func (client *Client) GetTraasmetaZone(request *GetTraasmetaZoneRequest) (_result *GetTraasmetaZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTraasmetaZoneResponse{}
	_body, _err := client.GetTraasmetaZoneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个机房
 * Summary: 获取单个机房
 */
func (client *Client) GetTraasmetaZoneEx(request *GetTraasmetaZoneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTraasmetaZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTraasmetaZoneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.zone.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建单个地域
 * Summary: 创建单个地域
 */
func (client *Client) CreateTraasmetaRegion(request *CreateTraasmetaRegionRequest) (_result *CreateTraasmetaRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTraasmetaRegionResponse{}
	_body, _err := client.CreateTraasmetaRegionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建单个地域
 * Summary: 创建单个地域
 */
func (client *Client) CreateTraasmetaRegionEx(request *CreateTraasmetaRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTraasmetaRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTraasmetaRegionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.region.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量修改agent是否开启告警标记
 * Summary: agent批量打标
 */
func (client *Client) UpdateAgentLabel(request *UpdateAgentLabelRequest) (_result *UpdateAgentLabelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAgentLabelResponse{}
	_body, _err := client.UpdateAgentLabelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量修改agent是否开启告警标记
 * Summary: agent批量打标
 */
func (client *Client) UpdateAgentLabelEx(request *UpdateAgentLabelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAgentLabelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateAgentLabelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.agent.label.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建单个机房
 * Summary: 创建单个机房
 */
func (client *Client) CreateTraasmetaZone(request *CreateTraasmetaZoneRequest) (_result *CreateTraasmetaZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTraasmetaZoneResponse{}
	_body, _err := client.CreateTraasmetaZoneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建单个机房
 * Summary: 创建单个机房
 */
func (client *Client) CreateTraasmetaZoneEx(request *CreateTraasmetaZoneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTraasmetaZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTraasmetaZoneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.zone.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除单个地域
 * Summary: 删除单个地域
 */
func (client *Client) DeleteTraasmetaRegion(request *DeleteTraasmetaRegionRequest) (_result *DeleteTraasmetaRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteTraasmetaRegionResponse{}
	_body, _err := client.DeleteTraasmetaRegionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除单个地域
 * Summary: 删除单个地域
 */
func (client *Client) DeleteTraasmetaRegionEx(request *DeleteTraasmetaRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteTraasmetaRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteTraasmetaRegionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.region.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除单个机房
 * Summary: 删除单个机房
 */
func (client *Client) DeleteTraasmetaZone(request *DeleteTraasmetaZoneRequest) (_result *DeleteTraasmetaZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteTraasmetaZoneResponse{}
	_body, _err := client.DeleteTraasmetaZoneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除单个机房
 * Summary: 删除单个机房
 */
func (client *Client) DeleteTraasmetaZoneEx(request *DeleteTraasmetaZoneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteTraasmetaZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteTraasmetaZoneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.zone.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新单个地域
 * Summary: 更新单个地域
 */
func (client *Client) UpdateTraasmetaRegion(request *UpdateTraasmetaRegionRequest) (_result *UpdateTraasmetaRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateTraasmetaRegionResponse{}
	_body, _err := client.UpdateTraasmetaRegionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新单个地域
 * Summary: 更新单个地域
 */
func (client *Client) UpdateTraasmetaRegionEx(request *UpdateTraasmetaRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateTraasmetaRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateTraasmetaRegionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.region.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新单个机房
 * Summary: 更新单个机房
 */
func (client *Client) UpdateTraasmetaZone(request *UpdateTraasmetaZoneRequest) (_result *UpdateTraasmetaZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateTraasmetaZoneResponse{}
	_body, _err := client.UpdateTraasmetaZoneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新单个机房
 * Summary: 更新单个机房
 */
func (client *Client) UpdateTraasmetaZoneEx(request *UpdateTraasmetaZoneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateTraasmetaZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateTraasmetaZoneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.zone.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 地域查询
 * Summary: 地域查询
 */
func (client *Client) QueryTraasmetaRegion(request *QueryTraasmetaRegionRequest) (_result *QueryTraasmetaRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraasmetaRegionResponse{}
	_body, _err := client.QueryTraasmetaRegionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 地域查询
 * Summary: 地域查询
 */
func (client *Client) QueryTraasmetaRegionEx(request *QueryTraasmetaRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraasmetaRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraasmetaRegionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.region.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 机房查询
 * Summary: 机房查询
 */
func (client *Client) QueryTraasmetaZone(request *QueryTraasmetaZoneRequest) (_result *QueryTraasmetaZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraasmetaZoneResponse{}
	_body, _err := client.QueryTraasmetaZoneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 机房查询
 * Summary: 机房查询
 */
func (client *Client) QueryTraasmetaZoneEx(request *QueryTraasmetaZoneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraasmetaZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraasmetaZoneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.zone.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 地域分页查询
 * Summary: 地域分页查询
 */
func (client *Client) PagequeryTraasmetaRegion(request *PagequeryTraasmetaRegionRequest) (_result *PagequeryTraasmetaRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryTraasmetaRegionResponse{}
	_body, _err := client.PagequeryTraasmetaRegionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 地域分页查询
 * Summary: 地域分页查询
 */
func (client *Client) PagequeryTraasmetaRegionEx(request *PagequeryTraasmetaRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryTraasmetaRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryTraasmetaRegionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.region.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 机房分页查询
 * Summary: 机房分页查询
 */
func (client *Client) PagequeryTraasmetaZone(request *PagequeryTraasmetaZoneRequest) (_result *PagequeryTraasmetaZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryTraasmetaZoneResponse{}
	_body, _err := client.PagequeryTraasmetaZoneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 机房分页查询
 * Summary: 机房分页查询
 */
func (client *Client) PagequeryTraasmetaZoneEx(request *PagequeryTraasmetaZoneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryTraasmetaZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryTraasmetaZoneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.zone.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询地域
 * Summary: 批量查询地域
 */
func (client *Client) BatchqueryTraasmetaRegion(request *BatchqueryTraasmetaRegionRequest) (_result *BatchqueryTraasmetaRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryTraasmetaRegionResponse{}
	_body, _err := client.BatchqueryTraasmetaRegionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询地域
 * Summary: 批量查询地域
 */
func (client *Client) BatchqueryTraasmetaRegionEx(request *BatchqueryTraasmetaRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryTraasmetaRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryTraasmetaRegionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.region.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量创建地域
 * Summary: 批量创建地域
 */
func (client *Client) BatchcreateTraasmetaRegion(request *BatchcreateTraasmetaRegionRequest) (_result *BatchcreateTraasmetaRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateTraasmetaRegionResponse{}
	_body, _err := client.BatchcreateTraasmetaRegionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量创建地域
 * Summary: 批量创建地域
 */
func (client *Client) BatchcreateTraasmetaRegionEx(request *BatchcreateTraasmetaRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateTraasmetaRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateTraasmetaRegionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.region.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量创建机房
 * Summary: 批量创建机房
 */
func (client *Client) BatchcreateTraasmetaZone(request *BatchcreateTraasmetaZoneRequest) (_result *BatchcreateTraasmetaZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateTraasmetaZoneResponse{}
	_body, _err := client.BatchcreateTraasmetaZoneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量创建机房
 * Summary: 批量创建机房
 */
func (client *Client) BatchcreateTraasmetaZoneEx(request *BatchcreateTraasmetaZoneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateTraasmetaZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateTraasmetaZoneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.zone.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询机房
 * Summary: 批量查询机房
 */
func (client *Client) BatchqueryTraasmetaZone(request *BatchqueryTraasmetaZoneRequest) (_result *BatchqueryTraasmetaZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryTraasmetaZoneResponse{}
	_body, _err := client.BatchqueryTraasmetaZoneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询机房
 * Summary: 批量查询机房
 */
func (client *Client) BatchqueryTraasmetaZoneEx(request *BatchqueryTraasmetaZoneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryTraasmetaZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryTraasmetaZoneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.zone.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除地域
 * Summary: 批量删除地域
 */
func (client *Client) BatchdeleteTraasmetaRegion(request *BatchdeleteTraasmetaRegionRequest) (_result *BatchdeleteTraasmetaRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteTraasmetaRegionResponse{}
	_body, _err := client.BatchdeleteTraasmetaRegionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除地域
 * Summary: 批量删除地域
 */
func (client *Client) BatchdeleteTraasmetaRegionEx(request *BatchdeleteTraasmetaRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteTraasmetaRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteTraasmetaRegionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.region.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除机房
 * Summary: 批量删除机房
 */
func (client *Client) BatchdeleteTraasmetaZone(request *BatchdeleteTraasmetaZoneRequest) (_result *BatchdeleteTraasmetaZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteTraasmetaZoneResponse{}
	_body, _err := client.BatchdeleteTraasmetaZoneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除机房
 * Summary: 批量删除机房
 */
func (client *Client) BatchdeleteTraasmetaZoneEx(request *BatchdeleteTraasmetaZoneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteTraasmetaZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteTraasmetaZoneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.zone.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有应用
 * Summary: 获取所有应用
 */
func (client *Client) AllTraasmetaApp(request *AllTraasmetaAppRequest) (_result *AllTraasmetaAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllTraasmetaAppResponse{}
	_body, _err := client.AllTraasmetaAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有应用
 * Summary: 获取所有应用
 */
func (client *Client) AllTraasmetaAppEx(request *AllTraasmetaAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllTraasmetaAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllTraasmetaAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.app.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有应用分组
 * Summary: 获取所有应用分组
 */
func (client *Client) AllTraasmetaAppgroup(request *AllTraasmetaAppgroupRequest) (_result *AllTraasmetaAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllTraasmetaAppgroupResponse{}
	_body, _err := client.AllTraasmetaAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有应用分组
 * Summary: 获取所有应用分组
 */
func (client *Client) AllTraasmetaAppgroupEx(request *AllTraasmetaAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllTraasmetaAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllTraasmetaAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appgroup.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有应用服务器
 * Summary: 获取所有应用服务器
 */
func (client *Client) AllTraasmetaAppserver(request *AllTraasmetaAppserverRequest) (_result *AllTraasmetaAppserverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllTraasmetaAppserverResponse{}
	_body, _err := client.AllTraasmetaAppserverEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有应用服务器
 * Summary: 获取所有应用服务器
 */
func (client *Client) AllTraasmetaAppserverEx(request *AllTraasmetaAppserverRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllTraasmetaAppserverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllTraasmetaAppserverResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appserver.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有应用标签
 * Summary: 获取所有应用标签
 */
func (client *Client) AllTraasmetaApptag(request *AllTraasmetaApptagRequest) (_result *AllTraasmetaApptagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllTraasmetaApptagResponse{}
	_body, _err := client.AllTraasmetaApptagEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有应用标签
 * Summary: 获取所有应用标签
 */
func (client *Client) AllTraasmetaApptagEx(request *AllTraasmetaApptagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllTraasmetaApptagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllTraasmetaApptagResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.apptag.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有工作空间
 * Summary: 获取所有工作空间
 */
func (client *Client) AllTraasmetaWorkspace(request *AllTraasmetaWorkspaceRequest) (_result *AllTraasmetaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllTraasmetaWorkspaceResponse{}
	_body, _err := client.AllTraasmetaWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有工作空间
 * Summary: 获取所有工作空间
 */
func (client *Client) AllTraasmetaWorkspaceEx(request *AllTraasmetaWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllTraasmetaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllTraasmetaWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspace.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有工作空间组
 * Summary: 获取所有工作空间组
 */
func (client *Client) AllTraasmetaWorkspacegroup(request *AllTraasmetaWorkspacegroupRequest) (_result *AllTraasmetaWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllTraasmetaWorkspacegroupResponse{}
	_body, _err := client.AllTraasmetaWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有工作空间组
 * Summary: 获取所有工作空间组
 */
func (client *Client) AllTraasmetaWorkspacegroupEx(request *AllTraasmetaWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllTraasmetaWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllTraasmetaWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspacegroup.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量创建工作空间组
 * Summary: 批量创建工作空间组
 */
func (client *Client) BatchcreateTraasmetaWorkspacegroup(request *BatchcreateTraasmetaWorkspacegroupRequest) (_result *BatchcreateTraasmetaWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateTraasmetaWorkspacegroupResponse{}
	_body, _err := client.BatchcreateTraasmetaWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量创建工作空间组
 * Summary: 批量创建工作空间组
 */
func (client *Client) BatchcreateTraasmetaWorkspacegroupEx(request *BatchcreateTraasmetaWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateTraasmetaWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateTraasmetaWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspacegroup.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量创建应用
 * Summary: 批量创建应用
 */
func (client *Client) BatchcreateTraasmetaApp(request *BatchcreateTraasmetaAppRequest) (_result *BatchcreateTraasmetaAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateTraasmetaAppResponse{}
	_body, _err := client.BatchcreateTraasmetaAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量创建应用
 * Summary: 批量创建应用
 */
func (client *Client) BatchcreateTraasmetaAppEx(request *BatchcreateTraasmetaAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateTraasmetaAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateTraasmetaAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.app.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量创建应用组
 * Summary: 批量创建应用组
 */
func (client *Client) BatchcreateTraasmetaAppgroup(request *BatchcreateTraasmetaAppgroupRequest) (_result *BatchcreateTraasmetaAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateTraasmetaAppgroupResponse{}
	_body, _err := client.BatchcreateTraasmetaAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量创建应用组
 * Summary: 批量创建应用组
 */
func (client *Client) BatchcreateTraasmetaAppgroupEx(request *BatchcreateTraasmetaAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateTraasmetaAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateTraasmetaAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appgroup.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量创建应用服务器
 * Summary: 批量创建应用服务器
 */
func (client *Client) BatchcreateTraasmetaAppserver(request *BatchcreateTraasmetaAppserverRequest) (_result *BatchcreateTraasmetaAppserverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateTraasmetaAppserverResponse{}
	_body, _err := client.BatchcreateTraasmetaAppserverEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量创建应用服务器
 * Summary: 批量创建应用服务器
 */
func (client *Client) BatchcreateTraasmetaAppserverEx(request *BatchcreateTraasmetaAppserverRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateTraasmetaAppserverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateTraasmetaAppserverResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appserver.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量创建应用标签
 * Summary: 批量创建应用标签
 */
func (client *Client) BatchcreateTraasmetaApptag(request *BatchcreateTraasmetaApptagRequest) (_result *BatchcreateTraasmetaApptagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateTraasmetaApptagResponse{}
	_body, _err := client.BatchcreateTraasmetaApptagEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量创建应用标签
 * Summary: 批量创建应用标签
 */
func (client *Client) BatchcreateTraasmetaApptagEx(request *BatchcreateTraasmetaApptagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateTraasmetaApptagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateTraasmetaApptagResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.apptag.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量创建工作空间
 * Summary: 批量创建工作空间
 */
func (client *Client) BatchcreateTraasmetaWorkspace(request *BatchcreateTraasmetaWorkspaceRequest) (_result *BatchcreateTraasmetaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateTraasmetaWorkspaceResponse{}
	_body, _err := client.BatchcreateTraasmetaWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量创建工作空间
 * Summary: 批量创建工作空间
 */
func (client *Client) BatchcreateTraasmetaWorkspaceEx(request *BatchcreateTraasmetaWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateTraasmetaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateTraasmetaWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspace.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除应用
 * Summary: 批量删除应用
 */
func (client *Client) BatchdeleteTraasmetaApp(request *BatchdeleteTraasmetaAppRequest) (_result *BatchdeleteTraasmetaAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteTraasmetaAppResponse{}
	_body, _err := client.BatchdeleteTraasmetaAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除应用
 * Summary: 批量删除应用
 */
func (client *Client) BatchdeleteTraasmetaAppEx(request *BatchdeleteTraasmetaAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteTraasmetaAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteTraasmetaAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.app.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除工作空间
 * Summary: 批量删除工作空间
 */
func (client *Client) BatchdeleteTraasmetaWorkspace(request *BatchdeleteTraasmetaWorkspaceRequest) (_result *BatchdeleteTraasmetaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteTraasmetaWorkspaceResponse{}
	_body, _err := client.BatchdeleteTraasmetaWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除工作空间
 * Summary: 批量删除工作空间
 */
func (client *Client) BatchdeleteTraasmetaWorkspaceEx(request *BatchdeleteTraasmetaWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteTraasmetaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteTraasmetaWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspace.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除应用标签
 * Summary: 批量删除应用标签
 */
func (client *Client) BatchdeleteTraasmetaApptag(request *BatchdeleteTraasmetaApptagRequest) (_result *BatchdeleteTraasmetaApptagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteTraasmetaApptagResponse{}
	_body, _err := client.BatchdeleteTraasmetaApptagEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除应用标签
 * Summary: 批量删除应用标签
 */
func (client *Client) BatchdeleteTraasmetaApptagEx(request *BatchdeleteTraasmetaApptagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteTraasmetaApptagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteTraasmetaApptagResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.apptag.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除应用服务器
 * Summary: 批量删除应用服务器
 */
func (client *Client) BatchdeleteTraasmetaAppserver(request *BatchdeleteTraasmetaAppserverRequest) (_result *BatchdeleteTraasmetaAppserverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteTraasmetaAppserverResponse{}
	_body, _err := client.BatchdeleteTraasmetaAppserverEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除应用服务器
 * Summary: 批量删除应用服务器
 */
func (client *Client) BatchdeleteTraasmetaAppserverEx(request *BatchdeleteTraasmetaAppserverRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteTraasmetaAppserverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteTraasmetaAppserverResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appserver.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除应用组
 * Summary: 批量删除应用组
 */
func (client *Client) BatchdeleteTraasmetaAppgroup(request *BatchdeleteTraasmetaAppgroupRequest) (_result *BatchdeleteTraasmetaAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteTraasmetaAppgroupResponse{}
	_body, _err := client.BatchdeleteTraasmetaAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除应用组
 * Summary: 批量删除应用组
 */
func (client *Client) BatchdeleteTraasmetaAppgroupEx(request *BatchdeleteTraasmetaAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteTraasmetaAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteTraasmetaAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appgroup.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除工作空间组
 * Summary: 批量删除工作空间组
 */
func (client *Client) BatchdeleteTraasmetaWorkspacegroup(request *BatchdeleteTraasmetaWorkspacegroupRequest) (_result *BatchdeleteTraasmetaWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteTraasmetaWorkspacegroupResponse{}
	_body, _err := client.BatchdeleteTraasmetaWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除工作空间组
 * Summary: 批量删除工作空间组
 */
func (client *Client) BatchdeleteTraasmetaWorkspacegroupEx(request *BatchdeleteTraasmetaWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteTraasmetaWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteTraasmetaWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspacegroup.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询工作空间组
 * Summary: 批量查询工作空间组
 */
func (client *Client) BatchqueryTraasmetaWorkspacegroup(request *BatchqueryTraasmetaWorkspacegroupRequest) (_result *BatchqueryTraasmetaWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryTraasmetaWorkspacegroupResponse{}
	_body, _err := client.BatchqueryTraasmetaWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询工作空间组
 * Summary: 批量查询工作空间组
 */
func (client *Client) BatchqueryTraasmetaWorkspacegroupEx(request *BatchqueryTraasmetaWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryTraasmetaWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryTraasmetaWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspacegroup.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询工作空间
 * Summary: 批量查询工作空间
 */
func (client *Client) BatchqueryTraasmetaWorkspace(request *BatchqueryTraasmetaWorkspaceRequest) (_result *BatchqueryTraasmetaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryTraasmetaWorkspaceResponse{}
	_body, _err := client.BatchqueryTraasmetaWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询工作空间
 * Summary: 批量查询工作空间
 */
func (client *Client) BatchqueryTraasmetaWorkspaceEx(request *BatchqueryTraasmetaWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryTraasmetaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryTraasmetaWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspace.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询应用标签
 * Summary: 批量查询应用标签
 */
func (client *Client) BatchqueryTraasmetaApptag(request *BatchqueryTraasmetaApptagRequest) (_result *BatchqueryTraasmetaApptagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryTraasmetaApptagResponse{}
	_body, _err := client.BatchqueryTraasmetaApptagEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询应用标签
 * Summary: 批量查询应用标签
 */
func (client *Client) BatchqueryTraasmetaApptagEx(request *BatchqueryTraasmetaApptagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryTraasmetaApptagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryTraasmetaApptagResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.apptag.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询应用服务器
 * Summary: 批量查询应用服务器
 */
func (client *Client) BatchqueryTraasmetaAppserver(request *BatchqueryTraasmetaAppserverRequest) (_result *BatchqueryTraasmetaAppserverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryTraasmetaAppserverResponse{}
	_body, _err := client.BatchqueryTraasmetaAppserverEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询应用服务器
 * Summary: 批量查询应用服务器
 */
func (client *Client) BatchqueryTraasmetaAppserverEx(request *BatchqueryTraasmetaAppserverRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryTraasmetaAppserverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryTraasmetaAppserverResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appserver.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询应用组
 * Summary: 批量查询应用组
 */
func (client *Client) BatchqueryTraasmetaAppgroup(request *BatchqueryTraasmetaAppgroupRequest) (_result *BatchqueryTraasmetaAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryTraasmetaAppgroupResponse{}
	_body, _err := client.BatchqueryTraasmetaAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询应用组
 * Summary: 批量查询应用组
 */
func (client *Client) BatchqueryTraasmetaAppgroupEx(request *BatchqueryTraasmetaAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryTraasmetaAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryTraasmetaAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appgroup.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询应用
 * Summary: 批量查询应用
 */
func (client *Client) BatchqueryTraasmetaApp(request *BatchqueryTraasmetaAppRequest) (_result *BatchqueryTraasmetaAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryTraasmetaAppResponse{}
	_body, _err := client.BatchqueryTraasmetaAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询应用
 * Summary: 批量查询应用
 */
func (client *Client) BatchqueryTraasmetaAppEx(request *BatchqueryTraasmetaAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryTraasmetaAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryTraasmetaAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.app.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除单个应用
 * Summary: 删除单个应用
 */
func (client *Client) DeleteTraasmetaApp(request *DeleteTraasmetaAppRequest) (_result *DeleteTraasmetaAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteTraasmetaAppResponse{}
	_body, _err := client.DeleteTraasmetaAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除单个应用
 * Summary: 删除单个应用
 */
func (client *Client) DeleteTraasmetaAppEx(request *DeleteTraasmetaAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteTraasmetaAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteTraasmetaAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.app.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除单个应用组
 * Summary: 删除单个应用组
 */
func (client *Client) DeleteTraasmetaAppgroup(request *DeleteTraasmetaAppgroupRequest) (_result *DeleteTraasmetaAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteTraasmetaAppgroupResponse{}
	_body, _err := client.DeleteTraasmetaAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除单个应用组
 * Summary: 删除单个应用组
 */
func (client *Client) DeleteTraasmetaAppgroupEx(request *DeleteTraasmetaAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteTraasmetaAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteTraasmetaAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appgroup.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除单个应用服务器
 * Summary: 删除单个应用服务器
 */
func (client *Client) DeleteTraasmetaAppserver(request *DeleteTraasmetaAppserverRequest) (_result *DeleteTraasmetaAppserverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteTraasmetaAppserverResponse{}
	_body, _err := client.DeleteTraasmetaAppserverEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除单个应用服务器
 * Summary: 删除单个应用服务器
 */
func (client *Client) DeleteTraasmetaAppserverEx(request *DeleteTraasmetaAppserverRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteTraasmetaAppserverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteTraasmetaAppserverResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appserver.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除单个应用标签
 * Summary: 删除单个应用标签
 */
func (client *Client) DeleteTraasmetaApptag(request *DeleteTraasmetaApptagRequest) (_result *DeleteTraasmetaApptagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteTraasmetaApptagResponse{}
	_body, _err := client.DeleteTraasmetaApptagEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除单个应用标签
 * Summary: 删除单个应用标签
 */
func (client *Client) DeleteTraasmetaApptagEx(request *DeleteTraasmetaApptagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteTraasmetaApptagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteTraasmetaApptagResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.apptag.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除单个工作空间
 * Summary: 删除单个工作空间
 */
func (client *Client) DeleteTraasmetaWorkspace(request *DeleteTraasmetaWorkspaceRequest) (_result *DeleteTraasmetaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteTraasmetaWorkspaceResponse{}
	_body, _err := client.DeleteTraasmetaWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除单个工作空间
 * Summary: 删除单个工作空间
 */
func (client *Client) DeleteTraasmetaWorkspaceEx(request *DeleteTraasmetaWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteTraasmetaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteTraasmetaWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspace.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除单个工作空间组
 * Summary: 删除单个工作空间组
 */
func (client *Client) DeleteTraasmetaWorkspacegroup(request *DeleteTraasmetaWorkspacegroupRequest) (_result *DeleteTraasmetaWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteTraasmetaWorkspacegroupResponse{}
	_body, _err := client.DeleteTraasmetaWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除单个工作空间组
 * Summary: 删除单个工作空间组
 */
func (client *Client) DeleteTraasmetaWorkspacegroupEx(request *DeleteTraasmetaWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteTraasmetaWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteTraasmetaWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspacegroup.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个应用
 * Summary: 获取单个应用
 */
func (client *Client) GetTraasmetaApp(request *GetTraasmetaAppRequest) (_result *GetTraasmetaAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTraasmetaAppResponse{}
	_body, _err := client.GetTraasmetaAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个应用
 * Summary: 获取单个应用
 */
func (client *Client) GetTraasmetaAppEx(request *GetTraasmetaAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTraasmetaAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTraasmetaAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.app.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个应用组
 * Summary: 获取单个应用组
 */
func (client *Client) GetTraasmetaAppgroup(request *GetTraasmetaAppgroupRequest) (_result *GetTraasmetaAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTraasmetaAppgroupResponse{}
	_body, _err := client.GetTraasmetaAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个应用组
 * Summary: 获取单个应用组
 */
func (client *Client) GetTraasmetaAppgroupEx(request *GetTraasmetaAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTraasmetaAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTraasmetaAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appgroup.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个应用服务器
 * Summary: 获取单个应用服务器
 */
func (client *Client) GetTraasmetaAppserver(request *GetTraasmetaAppserverRequest) (_result *GetTraasmetaAppserverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTraasmetaAppserverResponse{}
	_body, _err := client.GetTraasmetaAppserverEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个应用服务器
 * Summary: 获取单个应用服务器
 */
func (client *Client) GetTraasmetaAppserverEx(request *GetTraasmetaAppserverRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTraasmetaAppserverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTraasmetaAppserverResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appserver.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个应用标签
 * Summary: 获取单个应用标签
 */
func (client *Client) GetTraasmetaApptag(request *GetTraasmetaApptagRequest) (_result *GetTraasmetaApptagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTraasmetaApptagResponse{}
	_body, _err := client.GetTraasmetaApptagEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个应用标签
 * Summary: 获取单个应用标签
 */
func (client *Client) GetTraasmetaApptagEx(request *GetTraasmetaApptagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTraasmetaApptagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTraasmetaApptagResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.apptag.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个工作空间
 * Summary: 获取单个工作空间
 */
func (client *Client) GetTraasmetaWorkspace(request *GetTraasmetaWorkspaceRequest) (_result *GetTraasmetaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTraasmetaWorkspaceResponse{}
	_body, _err := client.GetTraasmetaWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个工作空间
 * Summary: 获取单个工作空间
 */
func (client *Client) GetTraasmetaWorkspaceEx(request *GetTraasmetaWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTraasmetaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTraasmetaWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspace.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个工作空间组
 * Summary: 获取单个工作空间组
 */
func (client *Client) GetTraasmetaWorkspacegroup(request *GetTraasmetaWorkspacegroupRequest) (_result *GetTraasmetaWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTraasmetaWorkspacegroupResponse{}
	_body, _err := client.GetTraasmetaWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个工作空间组
 * Summary: 获取单个工作空间组
 */
func (client *Client) GetTraasmetaWorkspacegroupEx(request *GetTraasmetaWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTraasmetaWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTraasmetaWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspacegroup.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 工作空间组分页查询
 * Summary: 工作空间组分页查询
 */
func (client *Client) PagequeryTraasmetaWorkspacegroup(request *PagequeryTraasmetaWorkspacegroupRequest) (_result *PagequeryTraasmetaWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryTraasmetaWorkspacegroupResponse{}
	_body, _err := client.PagequeryTraasmetaWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 工作空间组分页查询
 * Summary: 工作空间组分页查询
 */
func (client *Client) PagequeryTraasmetaWorkspacegroupEx(request *PagequeryTraasmetaWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryTraasmetaWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryTraasmetaWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspacegroup.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 工作空间分页查询
 * Summary: 工作空间分页查询
 */
func (client *Client) PagequeryTraasmetaWorkspace(request *PagequeryTraasmetaWorkspaceRequest) (_result *PagequeryTraasmetaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryTraasmetaWorkspaceResponse{}
	_body, _err := client.PagequeryTraasmetaWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 工作空间分页查询
 * Summary: 工作空间分页查询
 */
func (client *Client) PagequeryTraasmetaWorkspaceEx(request *PagequeryTraasmetaWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryTraasmetaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryTraasmetaWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspace.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用标签分页查询
 * Summary: 应用标签分页查询
 */
func (client *Client) PagequeryTraasmetaApptag(request *PagequeryTraasmetaApptagRequest) (_result *PagequeryTraasmetaApptagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryTraasmetaApptagResponse{}
	_body, _err := client.PagequeryTraasmetaApptagEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用标签分页查询
 * Summary: 应用标签分页查询
 */
func (client *Client) PagequeryTraasmetaApptagEx(request *PagequeryTraasmetaApptagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryTraasmetaApptagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryTraasmetaApptagResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.apptag.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用服务器分页查询
 * Summary: 应用服务器分页查询
 */
func (client *Client) PagequeryTraasmetaAppserver(request *PagequeryTraasmetaAppserverRequest) (_result *PagequeryTraasmetaAppserverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryTraasmetaAppserverResponse{}
	_body, _err := client.PagequeryTraasmetaAppserverEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用服务器分页查询
 * Summary: 应用服务器分页查询
 */
func (client *Client) PagequeryTraasmetaAppserverEx(request *PagequeryTraasmetaAppserverRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryTraasmetaAppserverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryTraasmetaAppserverResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appserver.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用组分页查询
 * Summary: 应用组分页查询
 */
func (client *Client) PagequeryTraasmetaAppgroup(request *PagequeryTraasmetaAppgroupRequest) (_result *PagequeryTraasmetaAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryTraasmetaAppgroupResponse{}
	_body, _err := client.PagequeryTraasmetaAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用组分页查询
 * Summary: 应用组分页查询
 */
func (client *Client) PagequeryTraasmetaAppgroupEx(request *PagequeryTraasmetaAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryTraasmetaAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryTraasmetaAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appgroup.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用分页查询
 * Summary: 应用分页查询
 */
func (client *Client) PagequeryTraasmetaApp(request *PagequeryTraasmetaAppRequest) (_result *PagequeryTraasmetaAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryTraasmetaAppResponse{}
	_body, _err := client.PagequeryTraasmetaAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用分页查询
 * Summary: 应用分页查询
 */
func (client *Client) PagequeryTraasmetaAppEx(request *PagequeryTraasmetaAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryTraasmetaAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryTraasmetaAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.app.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 工作空间组查询
 * Summary: 工作空间组查询
 */
func (client *Client) QueryTraasmetaWorkspacegroup(request *QueryTraasmetaWorkspacegroupRequest) (_result *QueryTraasmetaWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraasmetaWorkspacegroupResponse{}
	_body, _err := client.QueryTraasmetaWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 工作空间组查询
 * Summary: 工作空间组查询
 */
func (client *Client) QueryTraasmetaWorkspacegroupEx(request *QueryTraasmetaWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraasmetaWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraasmetaWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspacegroup.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 工作空间查询
 * Summary: 工作空间查询
 */
func (client *Client) QueryTraasmetaWorkspace(request *QueryTraasmetaWorkspaceRequest) (_result *QueryTraasmetaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraasmetaWorkspaceResponse{}
	_body, _err := client.QueryTraasmetaWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 工作空间查询
 * Summary: 工作空间查询
 */
func (client *Client) QueryTraasmetaWorkspaceEx(request *QueryTraasmetaWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraasmetaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraasmetaWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspace.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用标签查询
 * Summary: 应用标签查询
 */
func (client *Client) QueryTraasmetaApptag(request *QueryTraasmetaApptagRequest) (_result *QueryTraasmetaApptagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraasmetaApptagResponse{}
	_body, _err := client.QueryTraasmetaApptagEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用标签查询
 * Summary: 应用标签查询
 */
func (client *Client) QueryTraasmetaApptagEx(request *QueryTraasmetaApptagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraasmetaApptagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraasmetaApptagResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.apptag.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用服务器查询
 * Summary: 应用服务器查询
 */
func (client *Client) QueryTraasmetaAppserver(request *QueryTraasmetaAppserverRequest) (_result *QueryTraasmetaAppserverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraasmetaAppserverResponse{}
	_body, _err := client.QueryTraasmetaAppserverEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用服务器查询
 * Summary: 应用服务器查询
 */
func (client *Client) QueryTraasmetaAppserverEx(request *QueryTraasmetaAppserverRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraasmetaAppserverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraasmetaAppserverResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appserver.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用组查询
 * Summary: 应用组查询
 */
func (client *Client) QueryTraasmetaAppgroup(request *QueryTraasmetaAppgroupRequest) (_result *QueryTraasmetaAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraasmetaAppgroupResponse{}
	_body, _err := client.QueryTraasmetaAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用组查询
 * Summary: 应用组查询
 */
func (client *Client) QueryTraasmetaAppgroupEx(request *QueryTraasmetaAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraasmetaAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraasmetaAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appgroup.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用查询
 * Summary: 应用查询
 */
func (client *Client) QueryTraasmetaApp(request *QueryTraasmetaAppRequest) (_result *QueryTraasmetaAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraasmetaAppResponse{}
	_body, _err := client.QueryTraasmetaAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用查询
 * Summary: 应用查询
 */
func (client *Client) QueryTraasmetaAppEx(request *QueryTraasmetaAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraasmetaAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraasmetaAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.app.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新单个应用
 * Summary: 更新单个应用
 */
func (client *Client) UpdateTraasmetaApp(request *UpdateTraasmetaAppRequest) (_result *UpdateTraasmetaAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateTraasmetaAppResponse{}
	_body, _err := client.UpdateTraasmetaAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新单个应用
 * Summary: 更新单个应用
 */
func (client *Client) UpdateTraasmetaAppEx(request *UpdateTraasmetaAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateTraasmetaAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateTraasmetaAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.app.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建单个应用
 * Summary: 创建单个应用
 */
func (client *Client) CreateTraasmetaApp(request *CreateTraasmetaAppRequest) (_result *CreateTraasmetaAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTraasmetaAppResponse{}
	_body, _err := client.CreateTraasmetaAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建单个应用
 * Summary: 创建单个应用
 */
func (client *Client) CreateTraasmetaAppEx(request *CreateTraasmetaAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTraasmetaAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTraasmetaAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.app.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新单个工作空间组
 * Summary: 更新单个工作空间组
 */
func (client *Client) UpdateTraasmetaWorkspacegroup(request *UpdateTraasmetaWorkspacegroupRequest) (_result *UpdateTraasmetaWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateTraasmetaWorkspacegroupResponse{}
	_body, _err := client.UpdateTraasmetaWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新单个工作空间组
 * Summary: 更新单个工作空间组
 */
func (client *Client) UpdateTraasmetaWorkspacegroupEx(request *UpdateTraasmetaWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateTraasmetaWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateTraasmetaWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspacegroup.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新单个应用组
 * Summary: 更新单个应用组
 */
func (client *Client) UpdateTraasmetaAppgroup(request *UpdateTraasmetaAppgroupRequest) (_result *UpdateTraasmetaAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateTraasmetaAppgroupResponse{}
	_body, _err := client.UpdateTraasmetaAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新单个应用组
 * Summary: 更新单个应用组
 */
func (client *Client) UpdateTraasmetaAppgroupEx(request *UpdateTraasmetaAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateTraasmetaAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateTraasmetaAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appgroup.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建单个应用组
 * Summary: 创建单个应用组
 */
func (client *Client) CreateTraasmetaAppgroup(request *CreateTraasmetaAppgroupRequest) (_result *CreateTraasmetaAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTraasmetaAppgroupResponse{}
	_body, _err := client.CreateTraasmetaAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建单个应用组
 * Summary: 创建单个应用组
 */
func (client *Client) CreateTraasmetaAppgroupEx(request *CreateTraasmetaAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTraasmetaAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTraasmetaAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appgroup.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建单个工作空间
 * Summary: 创建单个工作空间
 */
func (client *Client) CreateTraasmetaWorkspace(request *CreateTraasmetaWorkspaceRequest) (_result *CreateTraasmetaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTraasmetaWorkspaceResponse{}
	_body, _err := client.CreateTraasmetaWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建单个工作空间
 * Summary: 创建单个工作空间
 */
func (client *Client) CreateTraasmetaWorkspaceEx(request *CreateTraasmetaWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTraasmetaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTraasmetaWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspace.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新单个工作空间
 * Summary: 更新单个工作空间
 */
func (client *Client) UpdateTraasmetaWorkspace(request *UpdateTraasmetaWorkspaceRequest) (_result *UpdateTraasmetaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateTraasmetaWorkspaceResponse{}
	_body, _err := client.UpdateTraasmetaWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新单个工作空间
 * Summary: 更新单个工作空间
 */
func (client *Client) UpdateTraasmetaWorkspaceEx(request *UpdateTraasmetaWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateTraasmetaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateTraasmetaWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspace.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新单个应用标签
 * Summary: 更新单个应用标签
 */
func (client *Client) UpdateTraasmetaApptag(request *UpdateTraasmetaApptagRequest) (_result *UpdateTraasmetaApptagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateTraasmetaApptagResponse{}
	_body, _err := client.UpdateTraasmetaApptagEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新单个应用标签
 * Summary: 更新单个应用标签
 */
func (client *Client) UpdateTraasmetaApptagEx(request *UpdateTraasmetaApptagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateTraasmetaApptagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateTraasmetaApptagResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.apptag.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建单个应用标签
 * Summary: 创建单个应用标签
 */
func (client *Client) CreateTraasmetaApptag(request *CreateTraasmetaApptagRequest) (_result *CreateTraasmetaApptagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTraasmetaApptagResponse{}
	_body, _err := client.CreateTraasmetaApptagEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建单个应用标签
 * Summary: 创建单个应用标签
 */
func (client *Client) CreateTraasmetaApptagEx(request *CreateTraasmetaApptagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTraasmetaApptagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTraasmetaApptagResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.apptag.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建单个应用服务器
 * Summary: 创建单个应用服务器
 */
func (client *Client) CreateTraasmetaAppserver(request *CreateTraasmetaAppserverRequest) (_result *CreateTraasmetaAppserverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTraasmetaAppserverResponse{}
	_body, _err := client.CreateTraasmetaAppserverEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建单个应用服务器
 * Summary: 创建单个应用服务器
 */
func (client *Client) CreateTraasmetaAppserverEx(request *CreateTraasmetaAppserverRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTraasmetaAppserverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTraasmetaAppserverResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appserver.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新单个应用服务器
 * Summary: 更新单个应用服务器
 */
func (client *Client) UpdateTraasmetaAppserver(request *UpdateTraasmetaAppserverRequest) (_result *UpdateTraasmetaAppserverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateTraasmetaAppserverResponse{}
	_body, _err := client.UpdateTraasmetaAppserverEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新单个应用服务器
 * Summary: 更新单个应用服务器
 */
func (client *Client) UpdateTraasmetaAppserverEx(request *UpdateTraasmetaAppserverRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateTraasmetaAppserverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateTraasmetaAppserverResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.appserver.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取SetupModel
 * Summary: 获取SetupModel
 */
func (client *Client) GetSetupModel(request *GetSetupModelRequest) (_result *GetSetupModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSetupModelResponse{}
	_body, _err := client.GetSetupModelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取SetupModel
 * Summary: 获取SetupModel
 */
func (client *Client) GetSetupModelEx(request *GetSetupModelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSetupModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSetupModelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.setup.model.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建单个工作空间组
 * Summary: 创建单个工作空间组
 */
func (client *Client) CreateTraasmetaWorkspacegroup(request *CreateTraasmetaWorkspacegroupRequest) (_result *CreateTraasmetaWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTraasmetaWorkspacegroupResponse{}
	_body, _err := client.CreateTraasmetaWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建单个工作空间组
 * Summary: 创建单个工作空间组
 */
func (client *Client) CreateTraasmetaWorkspacegroupEx(request *CreateTraasmetaWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTraasmetaWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTraasmetaWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.workspacegroup.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个cell
 * Summary: 获取单个cell
 */
func (client *Client) GetTraasmetaCell(request *GetTraasmetaCellRequest) (_result *GetTraasmetaCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTraasmetaCellResponse{}
	_body, _err := client.GetTraasmetaCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个cell
 * Summary: 获取单个cell
 */
func (client *Client) GetTraasmetaCellEx(request *GetTraasmetaCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTraasmetaCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTraasmetaCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.cell.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分页查询
 * Summary: 分页查询
 */
func (client *Client) PagequeryTraasmetaCell(request *PagequeryTraasmetaCellRequest) (_result *PagequeryTraasmetaCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryTraasmetaCellResponse{}
	_body, _err := client.PagequeryTraasmetaCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分页查询
 * Summary: 分页查询
 */
func (client *Client) PagequeryTraasmetaCellEx(request *PagequeryTraasmetaCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryTraasmetaCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryTraasmetaCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.cell.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个主机
 * Summary: 获取单个主机
 */
func (client *Client) GetTraasmetaHostmachine(request *GetTraasmetaHostmachineRequest) (_result *GetTraasmetaHostmachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTraasmetaHostmachineResponse{}
	_body, _err := client.GetTraasmetaHostmachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个主机
 * Summary: 获取单个主机
 */
func (client *Client) GetTraasmetaHostmachineEx(request *GetTraasmetaHostmachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTraasmetaHostmachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTraasmetaHostmachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.hostmachine.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分页查询主机
 * Summary: 分页查询主机
 */
func (client *Client) PagequeryTraasmetaHostmachine(request *PagequeryTraasmetaHostmachineRequest) (_result *PagequeryTraasmetaHostmachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryTraasmetaHostmachineResponse{}
	_body, _err := client.PagequeryTraasmetaHostmachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分页查询主机
 * Summary: 分页查询主机
 */
func (client *Client) PagequeryTraasmetaHostmachineEx(request *PagequeryTraasmetaHostmachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryTraasmetaHostmachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryTraasmetaHostmachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.hostmachine.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单链路详细拓扑
 * Summary: 获取单链路详细拓扑
 */
func (client *Client) QueryTraceDetailtopology(request *QueryTraceDetailtopologyRequest) (_result *QueryTraceDetailtopologyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceDetailtopologyResponse{}
	_body, _err := client.QueryTraceDetailtopologyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单链路详细拓扑
 * Summary: 获取单链路详细拓扑
 */
func (client *Client) QueryTraceDetailtopologyEx(request *QueryTraceDetailtopologyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceDetailtopologyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceDetailtopologyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.trace.detailtopology.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: spi配置-保存spi
 * Summary: spi配置-保存spi
 */
func (client *Client) SaveTenantconfigSpi(request *SaveTenantconfigSpiRequest) (_result *SaveTenantconfigSpiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveTenantconfigSpiResponse{}
	_body, _err := client.SaveTenantconfigSpiEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: spi配置-保存spi
 * Summary: spi配置-保存spi
 */
func (client *Client) SaveTenantconfigSpiEx(request *SaveTenantconfigSpiRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveTenantconfigSpiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveTenantconfigSpiResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.tenantconfig.spi.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: spi配置-查询spi
 * Summary: spi配置-查询spi
 */
func (client *Client) QueryTenantconfigSpi(request *QueryTenantconfigSpiRequest) (_result *QueryTenantconfigSpiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTenantconfigSpiResponse{}
	_body, _err := client.QueryTenantconfigSpiEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: spi配置-查询spi
 * Summary: spi配置-查询spi
 */
func (client *Client) QueryTenantconfigSpiEx(request *QueryTenantconfigSpiRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTenantconfigSpiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTenantconfigSpiResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.tenantconfig.spi.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取当前用户能够访问的workspace
 * Summary: 获取当前用户能够访问的workspace
 */
func (client *Client) ListOneconsoleWorkspace(request *ListOneconsoleWorkspaceRequest) (_result *ListOneconsoleWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListOneconsoleWorkspaceResponse{}
	_body, _err := client.ListOneconsoleWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取当前用户能够访问的workspace
 * Summary: 获取当前用户能够访问的workspace
 */
func (client *Client) ListOneconsoleWorkspaceEx(request *ListOneconsoleWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListOneconsoleWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListOneconsoleWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.oneconsole.workspace.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: spi配置-删除
 * Summary: spi配置-删除
 */
func (client *Client) DeleteTenantconfig(request *DeleteTenantconfigRequest) (_result *DeleteTenantconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteTenantconfigResponse{}
	_body, _err := client.DeleteTenantconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: spi配置-删除
 * Summary: spi配置-删除
 */
func (client *Client) DeleteTenantconfigEx(request *DeleteTenantconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteTenantconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteTenantconfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.tenantconfig.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: spi配置-查询token
 * Summary: spi配置-查询token
 */
func (client *Client) QueryTenantconfigToken(request *QueryTenantconfigTokenRequest) (_result *QueryTenantconfigTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTenantconfigTokenResponse{}
	_body, _err := client.QueryTenantconfigTokenEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: spi配置-查询token
 * Summary: spi配置-查询token
 */
func (client *Client) QueryTenantconfigTokenEx(request *QueryTenantconfigTokenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTenantconfigTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTenantconfigTokenResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.tenantconfig.token.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: spi配置-保存token
 * Summary: spi配置-保存token
 */
func (client *Client) SaveTenantconfigToken(request *SaveTenantconfigTokenRequest) (_result *SaveTenantconfigTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveTenantconfigTokenResponse{}
	_body, _err := client.SaveTenantconfigTokenEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: spi配置-保存token
 * Summary: spi配置-保存token
 */
func (client *Client) SaveTenantconfigTokenEx(request *SaveTenantconfigTokenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveTenantconfigTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveTenantconfigTokenResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.tenantconfig.token.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询元数据实体基本信息
 * Summary: 查询元数据实体基本信息
 */
func (client *Client) QueryTraasmetaEntity(request *QueryTraasmetaEntityRequest) (_result *QueryTraasmetaEntityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraasmetaEntityResponse{}
	_body, _err := client.QueryTraasmetaEntityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询元数据实体基本信息
 * Summary: 查询元数据实体基本信息
 */
func (client *Client) QueryTraasmetaEntityEx(request *QueryTraasmetaEntityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraasmetaEntityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraasmetaEntityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.entity.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取实体字段列表
 * Summary: 获取实体字段列表
 */
func (client *Client) ListTraasmetaEntityfield(request *ListTraasmetaEntityfieldRequest) (_result *ListTraasmetaEntityfieldResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListTraasmetaEntityfieldResponse{}
	_body, _err := client.ListTraasmetaEntityfieldEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取实体字段列表
 * Summary: 获取实体字段列表
 */
func (client *Client) ListTraasmetaEntityfieldEx(request *ListTraasmetaEntityfieldRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListTraasmetaEntityfieldResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListTraasmetaEntityfieldResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.entityfield.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询实体拓扑
 * Summary: 查询实体拓扑
 */
func (client *Client) QueryTraasmetaEntitytopo(request *QueryTraasmetaEntitytopoRequest) (_result *QueryTraasmetaEntitytopoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraasmetaEntitytopoResponse{}
	_body, _err := client.QueryTraasmetaEntitytopoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询实体拓扑
 * Summary: 查询实体拓扑
 */
func (client *Client) QueryTraasmetaEntitytopoEx(request *QueryTraasmetaEntitytopoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraasmetaEntitytopoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraasmetaEntitytopoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.entitytopo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有主机
 * Summary: 获取所有主机
 */
func (client *Client) AllTraasmetaHostmachine(request *AllTraasmetaHostmachineRequest) (_result *AllTraasmetaHostmachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllTraasmetaHostmachineResponse{}
	_body, _err := client.AllTraasmetaHostmachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有主机
 * Summary: 获取所有主机
 */
func (client *Client) AllTraasmetaHostmachineEx(request *AllTraasmetaHostmachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllTraasmetaHostmachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllTraasmetaHostmachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.hostmachine.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量创建主机
 * Summary: 批量创建主机
 */
func (client *Client) BatchcreateTraasmetaHostmachine(request *BatchcreateTraasmetaHostmachineRequest) (_result *BatchcreateTraasmetaHostmachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateTraasmetaHostmachineResponse{}
	_body, _err := client.BatchcreateTraasmetaHostmachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量创建主机
 * Summary: 批量创建主机
 */
func (client *Client) BatchcreateTraasmetaHostmachineEx(request *BatchcreateTraasmetaHostmachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateTraasmetaHostmachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateTraasmetaHostmachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.hostmachine.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除主机
 * Summary: 批量删除主机
 */
func (client *Client) BatchdeleteTraasmetaHostmachine(request *BatchdeleteTraasmetaHostmachineRequest) (_result *BatchdeleteTraasmetaHostmachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteTraasmetaHostmachineResponse{}
	_body, _err := client.BatchdeleteTraasmetaHostmachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除主机
 * Summary: 批量删除主机
 */
func (client *Client) BatchdeleteTraasmetaHostmachineEx(request *BatchdeleteTraasmetaHostmachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteTraasmetaHostmachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteTraasmetaHostmachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.hostmachine.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询主机
 * Summary: 批量查询主机
 */
func (client *Client) BatchqueryTraasmetaHostmachine(request *BatchqueryTraasmetaHostmachineRequest) (_result *BatchqueryTraasmetaHostmachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryTraasmetaHostmachineResponse{}
	_body, _err := client.BatchqueryTraasmetaHostmachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询主机
 * Summary: 批量查询主机
 */
func (client *Client) BatchqueryTraasmetaHostmachineEx(request *BatchqueryTraasmetaHostmachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryTraasmetaHostmachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryTraasmetaHostmachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.hostmachine.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建单个主机
 * Summary: 创建单个主机
 */
func (client *Client) CreateTraasmetaHostmachine(request *CreateTraasmetaHostmachineRequest) (_result *CreateTraasmetaHostmachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTraasmetaHostmachineResponse{}
	_body, _err := client.CreateTraasmetaHostmachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建单个主机
 * Summary: 创建单个主机
 */
func (client *Client) CreateTraasmetaHostmachineEx(request *CreateTraasmetaHostmachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTraasmetaHostmachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTraasmetaHostmachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.hostmachine.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除主机
 * Summary: 删除主机
 */
func (client *Client) DeleteTraasmetaHostmachine(request *DeleteTraasmetaHostmachineRequest) (_result *DeleteTraasmetaHostmachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteTraasmetaHostmachineResponse{}
	_body, _err := client.DeleteTraasmetaHostmachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除主机
 * Summary: 删除主机
 */
func (client *Client) DeleteTraasmetaHostmachineEx(request *DeleteTraasmetaHostmachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteTraasmetaHostmachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteTraasmetaHostmachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.hostmachine.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询主机
 * Summary: 查询主机
 */
func (client *Client) QueryTraasmetaHostmachine(request *QueryTraasmetaHostmachineRequest) (_result *QueryTraasmetaHostmachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraasmetaHostmachineResponse{}
	_body, _err := client.QueryTraasmetaHostmachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询主机
 * Summary: 查询主机
 */
func (client *Client) QueryTraasmetaHostmachineEx(request *QueryTraasmetaHostmachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraasmetaHostmachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraasmetaHostmachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.hostmachine.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新主机
 * Summary: 更新主机
 */
func (client *Client) UpdateTraasmetaHostmachine(request *UpdateTraasmetaHostmachineRequest) (_result *UpdateTraasmetaHostmachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateTraasmetaHostmachineResponse{}
	_body, _err := client.UpdateTraasmetaHostmachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新主机
 * Summary: 更新主机
 */
func (client *Client) UpdateTraasmetaHostmachineEx(request *UpdateTraasmetaHostmachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateTraasmetaHostmachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateTraasmetaHostmachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.hostmachine.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量创建cell
 * Summary: 批量创建cell
 */
func (client *Client) BatchcreateTraasmetaCell(request *BatchcreateTraasmetaCellRequest) (_result *BatchcreateTraasmetaCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateTraasmetaCellResponse{}
	_body, _err := client.BatchcreateTraasmetaCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量创建cell
 * Summary: 批量创建cell
 */
func (client *Client) BatchcreateTraasmetaCellEx(request *BatchcreateTraasmetaCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateTraasmetaCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateTraasmetaCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.cell.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除cell
 * Summary: 批量删除cell
 */
func (client *Client) BatchdeleteTraasmetaCell(request *BatchdeleteTraasmetaCellRequest) (_result *BatchdeleteTraasmetaCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteTraasmetaCellResponse{}
	_body, _err := client.BatchdeleteTraasmetaCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除cell
 * Summary: 批量删除cell
 */
func (client *Client) BatchdeleteTraasmetaCellEx(request *BatchdeleteTraasmetaCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteTraasmetaCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteTraasmetaCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.cell.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询cell
 * Summary: 批量查询cell
 */
func (client *Client) BatchqueryTraasmetaCell(request *BatchqueryTraasmetaCellRequest) (_result *BatchqueryTraasmetaCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryTraasmetaCellResponse{}
	_body, _err := client.BatchqueryTraasmetaCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询cell
 * Summary: 批量查询cell
 */
func (client *Client) BatchqueryTraasmetaCellEx(request *BatchqueryTraasmetaCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryTraasmetaCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryTraasmetaCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.cell.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新cell
 * Summary: 更新cell
 */
func (client *Client) UpdateTraasmetaCell(request *UpdateTraasmetaCellRequest) (_result *UpdateTraasmetaCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateTraasmetaCellResponse{}
	_body, _err := client.UpdateTraasmetaCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新cell
 * Summary: 更新cell
 */
func (client *Client) UpdateTraasmetaCellEx(request *UpdateTraasmetaCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateTraasmetaCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateTraasmetaCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.cell.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建单个cell
 * Summary: 创建单个cell
 */
func (client *Client) CreateTraasmetaCell(request *CreateTraasmetaCellRequest) (_result *CreateTraasmetaCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTraasmetaCellResponse{}
	_body, _err := client.CreateTraasmetaCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建单个cell
 * Summary: 创建单个cell
 */
func (client *Client) CreateTraasmetaCellEx(request *CreateTraasmetaCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTraasmetaCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTraasmetaCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.cell.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除单个cell
 * Summary: 删除单个cell
 */
func (client *Client) DeleteTraasmetaCell(request *DeleteTraasmetaCellRequest) (_result *DeleteTraasmetaCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteTraasmetaCellResponse{}
	_body, _err := client.DeleteTraasmetaCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除单个cell
 * Summary: 删除单个cell
 */
func (client *Client) DeleteTraasmetaCellEx(request *DeleteTraasmetaCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteTraasmetaCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteTraasmetaCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.cell.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有cell
 * Summary: 获取所有cell
 */
func (client *Client) AllTraasmetaCell(request *AllTraasmetaCellRequest) (_result *AllTraasmetaCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllTraasmetaCellResponse{}
	_body, _err := client.AllTraasmetaCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有cell
 * Summary: 获取所有cell
 */
func (client *Client) AllTraasmetaCellEx(request *AllTraasmetaCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllTraasmetaCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllTraasmetaCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.cell.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询cell
 * Summary: 查询cell
 */
func (client *Client) QueryTraasmetaCell(request *QueryTraasmetaCellRequest) (_result *QueryTraasmetaCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraasmetaCellResponse{}
	_body, _err := client.QueryTraasmetaCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询cell
 * Summary: 查询cell
 */
func (client *Client) QueryTraasmetaCellEx(request *QueryTraasmetaCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraasmetaCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraasmetaCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.monitor.traasmeta.cell.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}
