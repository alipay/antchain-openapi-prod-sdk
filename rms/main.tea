import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.3.273',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// condition
model XCondition {
  // 表达式
  expr: string(name='expr', example=' '),
  // operator
  operator: string(name='operator', example='='),
  // value
  value?: string(name='value', example=' '),
  //  
  values?: [ string ](name='values', example=''),
  //  
  all?: boolean(name='all', example='true, false'),
}

// metric query metadata
model XMetricQueryMetadata {
  // query clause name
  name?: string(name='name', example='a'),
  // 32位datasource uuid
  datasourceUuid: string(name='datasource_uuid', example='a'),
  // metric name
  metricName?: string(name='metric_name', example=' '),
  //  
  tableName?: string(name='table_name', example=' '),
  //  
  conditions?: [ XCondition ](name='conditions', example=' '),
}

// Translate Expression
model XTranslateExpression {
  // expression type
  type: string(name='type', example='regex'),
  //  from
  from: string(name='from', example=' '),
  // to
  to: string(name='to', example=' '),
}

// x
model XCalculationParameter {
  // x
  expression?: string(name='expression', example='x'),
  // x
  constant?: boolean(name='constant', example='true, false'),
}

//  
model XMetricInfo {
  //  
  name: string(name='name', example=' '),
  //  
  description?: string(name='description', example=' '),
  //  
  type?: string(name='type', example=' '),
  //  
  unit?: string(name='unit', example=' '),
}

//  
model XTranslate {
  //  
  defaultValue?: string(name='default_value', example=' '),
  //  
  includeNotMatched?: boolean(name='include_not_matched', example='true, false'),
  //  
  translateExpressions?: [ XTranslateExpression ](name='translate_expressions', example=' '),
}

// x
model XCalculationExpression {
  // x
  function?: string(name='function', example='x'),
  // x
  parameters?: [ XCalculationParameter ](name='parameters', example='x'),
  // PromQL
  query?: string(name='query', example=' '),
  //  
  queryMetadatas?: [ XMetricQueryMetadata ](name='query_metadatas', example=''),
  // calculation type
  type?: string(name='type', example='PQL'),
}

// AiExtraAttr
model AiExtraAttr {
  // time_range_thres
  timeRangeThres: string(name='time_range_thres', example='time_range_thres'),
  // abnormal_value_thres
  abnormalValueThres: string(name='abnormal_value_thres', example='abnormal_value_thres'),
  // value_range_thres
  valueRangeThres: string(name='value_range_thres', example='value_range_thres'),
  // algo_score_thres
  algoScoreThres: string(name='algo_score_thres', example='algo_score_thres'),
}

// match expression
model XMatchExpression {
  // match expression type
  type: string(name='type', example='left_right'),
  // metadata field expr
  expr?: string(name='expr', example='app'),
  // left character
  left?: string(name='left', example=' '),
  // left index
  leftIndex?: long(name='left_index', example=' '),
  //  
  right?: string(name='right', example=' '),
  //  
  valueType?: string(name='value_type', example=' '),
}

// Threshold
model Threshold {
  // level1
  level1: string(name='level1', example='level1'),
  // level2
  level2: string(name='level2', example='level2'),
  // level3
  level3: string(name='level3', example='level3'),
  // im
  im: string(name='im', example='im'),
  // sms
  sms: string(name='sms', example='sms'),
  // control_plan
  controlPlan: string(name='control_plan', example='control_plan'),
}

// string key value
model XStringKeyValue {
  // key
  key: string(name='key', example='key'),
  // value
  value: string(name='value', example='value'),
}

// DimFilter
model DimFilter {
  // dim_index
  dimIndex: long(name='dim_index', example='dim_index'),
  // dim_name
  dimName: string(name='dim_name', example='dim_name'),
  // white_names
  whiteNames: [ string ](name='white_names', example='white_names'),
  // black_names
  blackNames: [ string ](name='black_names', example='black_names'),
}

// WorkspaceDTO
model WorkspaceDTO {
  // id
  id: long(name='id', example='id'),
  // name
  name: string(name='name', example='name'),
  // display_name
  displayName: string(name='display_name', example='display_name'),
  // outside_ws_id
  outsideWsId: string(name='outside_ws_id', example='outside_ws_id'),
  // tenant_id
  tenantId: long(name='tenant_id', example='tenant_id'),
  // outside_tenant_id
  outsideTenantId: string(name='outside_tenant_id', example='outside_tenant_id'),
  // stack_view
  stackView: boolean(name='stack_view', example='stack_view'),
}

// AiAlarmParams
model AiAlarmParams {
  // value_fields
  valueFields: [ string ](name='value_fields', example='value_fields'),
  // ai_algo_code
  aiAlgoCode: string(name='ai_algo_code', example='ai_algo_code'),
  // ai_extra_attr
  aiExtraAttr: AiExtraAttr(name='ai_extra_attr', example='ai_extra_attr'),
}

// TimeRange
model TimeRange {
  // start
  start: long(name='start', example='start'),
  // end
  end: long(name='end', example='end'),
}

// Trigger
model Trigger {
  // value_field
  valueField: string(name='value_field', example='value_field'),
  // value_index
  valueIndex: long(name='value_index', example='value_index'),
  // type
  type: string(name='type', example='type'),
  // n
  n: long(name='n', example='n'),
  // compare
  compare: string(name='compare', example='compare'),
  // compare_percent
  comparePercent: string(name='compare_percent', example='compare_percent'),
  // threshold
  threshold: Threshold(name='threshold', example='threshold'),
  // threshold_copy
  thresholdCopy: Threshold(name='threshold_copy', example='threshold_copy'),
  // value_is_percent
  valueIsPercent: boolean(name='value_is_percent', example='true,false'),
}

// TimeFilter
model TimeFilter {
  // from
  from: string(name='from', example='from'),
  // to
  to: string(name='to', example='to'),
  // weeks
  weeks: [ long ](name='weeks', example='weeks'),
}

// BizDomain
model BizDomain {
  // id
  id: long(name='id', example='id'),
  // name
  name: string(name='name', example='name'),
  // tenant_id
  // 
  tenantId: long(name='tenant_id', example=' tenant_id'),
  // config
  config: string(name='config', example='config'),
  // outside_domain_id
  outsideDomainId: string(name='outside_domain_id', example='outside_domain_id'),
  // entity_list
  entityList: string(name='entity_list', example='entity_list'),
}

// Expression
model XExpression {
  // name
  name?: string(name='name', example=' '),
  //  
  description?: string(name='description', example=' '),
  //  
  matchExpression?: XMatchExpression(name='match_expression', example=' '),
  //   
  translateExpression?: XTranslate(name='translate_expression', example='  '),
  //  metric type
  type?: string(name='type', example=' '),
  //  
  unit?: string(name='unit', example=' '),
  //  
  downsampleFunc?: string(name='downsample_func', example=' '),
  //  
  aggregationFunc?: string(name='aggregation_func', example=' '),
  // prometheus tags
  expressionTags?: [ XMetricInfo ](name='expression_tags', example=' '),
  // prometheus metric-tags 是否采集
  enabled?: boolean(name='enabled', example='true, false'),
  // line filter
  values?: [ string ](name='values', example=''),
  //  
  displayName?: string(name='display_name', example=' '),
  //  
  pathParameters?: [ XStringKeyValue ](name='path_parameters', example=''),
  // x
  calculationExpression?: XCalculationExpression(name='calculation_expression', example='x'),
  // 计算数据源使用的原始指标名称
  sourceName?: string(name='source_name', example=' '),
}

// ControlPlan
model ControlPlan {
  // action_id
  actionId: long(name='action_id', example='action_id'),
  // name
  name: string(name='name', example='name'),
  // plugin_type
  pluginType: string(name='plugin_type', example='plugin_type'),
  // plugin_id
  pluginId: string(name='plugin_id', example='plugin_id'),
  // file_id
  fileId: long(name='file_id', example='file_id'),
  // ds_name
  dsName: string(name='ds_name', example='ds_name'),
}

// NavWorkspace
model NavWorkspace {
  // workspace
  workspace: WorkspaceDTO(name='workspace', example=''),
}

// 租户
model Tenant {
  // ID
  id: long(name='id', example='1'),
  // 租户名称
  name: string(name='name', example='ANTCLOUD'),
  // 展示名称
  displayName: string(name='display_name', example='金融云租户'),
  // outsideTenantId
  outsideTenantId: string(name='outside_tenant_id', example='0000000001'),
  // status
  status: string(name='status', example='status'),
  // config
  config: string(name='config', example='config'),
  // stack_view
  stackView: boolean(name='stack_view', example='stack_view'),
}

// 列值翻译映射关系
model TranslateMapping {
  // 原始列值
  from: string(name='from', example='origin_column'),
  // 翻译后列值
  to: string(name='to', example='target_column'),
  // 正则类型 (完整正则或简单正则)
  mode: string(name='mode', example='simpleRegex'),
}

// LogSubRule
model XLogSubRule {
  // log path
  path?: string(name='path', example='/home/admin/logs/a.log'),
  //  
  metrics: [ XExpression ](name='metrics', example=' '),
  //  
  ruleTags?: [ XExpression ](name='rule_tags', example=' '),
  // 白名单
  includeLines?: [ XExpression ](name='include_lines', example=' '),
  //  
  excludeLines?: [ XExpression ](name='exclude_lines', example=''),
  // x
  paths?: [ string ](name='paths', example='x'),
  // x
  pathLinkPrefix?: string(name='path_link_prefix', example='x'),
  //  
  pathExpression?: XExpression(name='path_expression', example=''),
}

// NavBizDomain
model NavBizDomain {
  // biz_domain
  bizDomain: BizDomain(name='biz_domain', example='biz_domain'),
}

// Rule
model Rule {
  // ai_alarm_params
  aiAlarmParams: AiAlarmParams(name='ai_alarm_params', example='ai_alarm_params'),
  // name
  name: string(name='name', example='name'),
  // run_type
  runType: string(name='run_type', example='run_type'),
  // cal_time_range
  calTimeRange: TimeRange(name='cal_time_range', example='cal_time_range'),
  // exclude_data_time_range
  excludeDataTimeRange: TimeRange(name='exclude_data_time_range', example='exclude_data_time_range'),
  // dim_filters
  dimFilters: [ DimFilter ](name='dim_filters', example='dim_filters'),
  // time_filter
  timeFilter: TimeFilter(name='time_filter', example='time_filter'),
  // triggers
  triggers: [ Trigger ](name='triggers', example='triggers'),
  // andor
  andor: string(name='andor', example='andor'),
  // control_plan_auto
  controlPlanAuto: boolean(name='control_plan_auto', example='true, false'),
  // control_plans
  controlPlans: [ ControlPlan ](name='control_plans', example='control_plans'),
  // function_id
  functionId: long(name='function_id', example='function_id'),
  // from_tmp_rule
  fromTmpRule: long(name='from_tmp_rule', example='from_tmp_rule'),
  // rule_type
  ruleType: string(name='rule_type', example='rule_type'),
  // ports
  ports: [ string ](name='ports', example='ports'),
  // group_by
  groupBy: [ string ](name='group_by', example='group_by'),
}

// NavTenant
model NavTenant {
  // tenant
  tenant: Tenant(name='tenant', example='tenant'),
  // view_power
  viewPower: boolean(name='view_power', example='true, false'),
  // nav_workspaces
  navWorkspaces: [ NavWorkspace ](name='nav_workspaces', example='nav_workspaces'),
  // nav_biz_domains
  navBizDomains: [ NavBizDomain ](name='nav_biz_domains', example='nav_biz_domains'),
}

//  
model XRule {
  // rule type
  type: string(name='type', example=' '),
  //  
  interval: long(name='interval', example=''),
  // rule timeout
  timeout?: long(name='timeout', example=''),
  //  
  externalTags?: [ XExpression ](name='external_tags', example=' '),
  // log rules
  rules?: [ XLogSubRule ](name='rules', example=' '),
  // metrics
  metrics?: [ XExpression ](name='metrics', example=' '),
  // prometheus port
  port?: long(name='port', example=''),
  // prometheus path
  path?: string(name='path', example='/metrics'),
  //  
  scheme?: string(name='scheme', example='http'),
  //  
  method?: string(name='method', example='GET'),
  // tcp ports
  ports?: [ long ](name='ports', example='[80, 8080]'),
  //  
  tags?: [ XExpression ](name='tags', example=' '),
  //  
  expression?: string(name='expression', example=' '),
  //  
  target?: XMatchExpression(name='target', example=''),
  //  
  localHost?: boolean(name='local_host', example='true, false'),
  //   
  caFile?: string(name='ca_file', example=' '),
  //  
  certFile?: string(name='cert_file', example=' '),
  //  
  keyFile?: string(name='key_file', example=' '),
  //  
  bearerTokenFile?: string(name='bearer_token_file', example=' '),
  //  
  insecureSkipVerify?: boolean(name='insecure_skip_verify', example='true, false'),
}

// Model
model Model {
  // rules
  rules: [ Rule ](name='rules', example='rules'),
  // batch_rule_id
  batchRuleId: string(name='batch_rule_id', example='batch_rule_id'),
}

// Site
model Site {
  // id
  id: long(name='id', example='id'),
  // name
  name: string(name='name', example='name'),
  // display_name
  displayName: string(name='display_name', example='display_name'),
  // local
  local: string(name='local', example='local'),
  // domain
  domain: string(name='domain', example='domain'),
  // token
  token: string(name='token', example='token'),
  // config
  config: string(name='config', example='config'),
  // url_preffix
  urlPreffix: string(name='url_preffix', example='url_preffix'),
  // readonly
  readonly: string(name='readonly', example='readonly'),
}

// 列值翻译
model Translate {
  // 列值翻译的默认值
  defaultValue?: string(name='default_value', example='N'),
  // 列值翻译映射关系
  mappings?: [ TranslateMapping ](name='mappings', example=''),
}

// resource target
model XTarget {
  // target type
  type: string(name='type', example='metadata'),
  // resource kind
  metadataKind?: string(name='metadata_kind', example='sofacloud'),
  // resource name
  metadataName?: string(name='metadata_name', example='sofa_server'),
  // where 条件
  conditions?: [ XCondition ](name='conditions', example=' '),
  //  
  frontType?: string(name='front_type', example='APP|MACHINE|CONTAINER|CUSTOM'),
  //  
  fromDatasourceUuid?: string(name='from_datasource_uuid', example=' '),
  //  
  fromDatasourceName?: string(name='from_datasource_name', example=' '),
  //  
  fromDatasourceMd5?: string(name='from_datasource_md5', example=' '),
  //  
  fromDatasourceMetricName?: string(name='from_datasource_metric_name', example=' '),
}

// OpsFilter
model OpsFilter {
  // black
  black: boolean(name='black', example='true, false'),
  // names
  names: [ string ](name='names', example='names'),
}

// 指标时序值
model MetricValue {
  // 时间戳
  timestamp: long(name='timestamp', example=''),
  // double类型值
  value: string(name='value', example='2.0'),
}

// spec
model XSpec {
  //  
  target: XTarget(name='target', example=''),
  //  
  rule: XRule(name='rule', example=''),
}

// NavSite
model NavSite {
  // site
  site: Site(name='site', example='site'),
  // nav_tenants
  navTenants: [ NavTenant ](name='nav_tenants', example='nav_tenants'),
}

// AlarmHistoryStatsDTO
model AlarmHistoryStatsDTO {
  // alarm_time
  alarmTime: long(name='alarm_time', example='alarm_time'),
  // alarm_level
  alarmLevel: long(name='alarm_level', example='alarm_level'),
  // count
  count: long(name='count', example='count'),
}

// Metrics 中的一个 field
model TimeSeriesMetricsField {
  // Field key
  key?: string(name='key', example='"callCount"'),
  // Field value
  value?: string(name='value', example='100.1012'),
}

// time and value
model XTimeStringValue {
  // unix timestamp (s)
  timestamp: long(name='timestamp', example=''),
  // double string
  value: string(name='value', example='"1.1"'),
}

// 日志过滤列
model UniqueDim {
  // 列名称
  name: string(name='name', example='MQ'),
  // 左起第几个
  leftIndex: long(name='left_index', example='0'),
  // 左起字符串
  left?: string(name='left', example=','),
  // 右至字符串
  right?: string(name='right', example=','),
  // 列值翻译
  translate?: Translate(name='translate', example=''),
}

// 资源基本信息
model XResource {
  // 全球唯一标识符（32位）。
  // Update操作，必填
  // Create操作，非必填，默认不传，后端会自动生成。特殊情况可以传入，比如一些领域需要固定该UUID。
  uuid?: string(maxLength=32, minLength=32, name='uuid', example='e69241aaf10411eb883d4a6a559bf02b'),
  // 名称。命名规则：^[a-zA-Z\u4E00-\u9FA5][a-zA-Z0-9_-\u4E00-\u9FA5]*$$
  name: string(maxLength=64, minLength=1, name='name', example='myname'),
  // 描述。
  // 
  description: string(maxLength=512, minLength=1, name='description', example='my description'),
  // 父目录UUID。全球唯一标识符（32位）。
  // 00000000000000000000000000000000特指根目录UUID
  parentUuid: string(maxLength=32, minLength=32, name='parent_uuid', example='00000000000000000000000000000000'),
  // 作用范围
  scope: string(name='scope', example='workspace, tenant, global'),
  // 是否生效。默认true
  enabled?: boolean(name='enabled', example='true, false'),
  // 是否开放。默认为false
  open?: boolean(name='open', example='true, false'),
  // 资源版本
  version?: long(name='version', example='0,1,2'),
  // inner tenant id
  tenantId?: long(name='tenant_id', example=''),
  // inner workspace id
  workspaceId?: long(name='workspace_id', example='0, 1, 2'),
  // 创建者
  createdBy?: string(name='created_by', example='admin'),
  // unix time 秒
  createdAt?: long(name='created_at', example=''),
  // 更新者
  updatedBy?: string(name='updated_by', example='""'),
  // 更新时间
  updatedAt?: long(name='updated_at', example=''),
  // 资源类型
  type: string(name='type', example='directory, collection, calculation, magi'),
  //  
  md5?: string(name='md5', example=' '),
  //  
  priority?: string(name='priority', example='low, medium, high'),
  //  
  timeToLive?: string(name='time_to_live', example='week, month, year'),
}

// 计算配置包含值对象
model ContainVals {
  // 包含值列表
  vals?: [ string ](name='vals', example=''),
}

// StackState
model StackState {
  // state
  state: string(name='state', example='state'),
  // values
  values: [ string ](name='values', example='values'),
  // is_black
  isBlack: boolean(name='is_black', example='true,false'),
}

// 对应Map结构
model KeySet {
  // key
  key?: string(name='key', example='key'),
  // value
  value?: string(name='value', example='value'),
}

// 用户组关联关系
model UserGroupRelation {
  // ID
  id: long(name='id', example='15'),
  // 用户组 ID
  userGroupId: long(name='user_group_id', example='18'),
  // 钉钉机器人webhook
  dingtalkWebhook: string(name='dingtalk_webhook', example='https://oapi.dingtalk.com/robot/send?access_token=530f2dcb1fd16797f06f27698a982cf558e2e664521b793506fe05245cbab553'),
  // 联系人登录名
  userLoginName: string(name='user_login_name', example='yangjian.yangjian'),
  // 用户展示名
  userDisplayName?: string(name='user_display_name', example='test'),
  // 钉钉机器人
  dingDingRobot?: string(name='ding_ding_robot', example='奥特曼'),
}

// TopAlarmDO
model TopAlarmDO {
  // error
  error: string(name='error', example='error'),
  // error_count
  errorCount: long(name='error_count', example='error_count'),
  // warn
  warn: string(name='warn', example='warn'),
  // warn_count
  warnCount: long(name='warn_count', example='warn_count'),
  // alarm_level
  alarmLevel: long(name='alarm_level', example='alarm_level'),
  // max_alarm_count
  maxAlarmCount: long(name='max_alarm_count', example='max_alarm_count'),
  // emergency_copy
  emergencyCopy: string(name='emergency_copy', example='emergency_copy'),
  // emergency_url
  emergencyUrl: string(name='emergency_url', example='emergency_url'),
}

// AlarmDO
model AlarmDO {
  // model
  model: Model(name='model', example='model'),
  // level
  level: string(name='level', example='level'),
  // frequency
  frequency: long(name='frequency', example='frequency'),
  // silent_minute
  silentMinute: string(name='silent_minute', example='silent_minute'),
  // emergency_copy
  emergencyCopy: string(name='emergency_copy', example='emergency_copy'),
  // emergency_url
  emergencyUrl: string(name='emergency_url', example='emergency_url'),
  // time_zone
  timeZone: string(name='time_zone', example='time_zone'),
  // time_zone_custom
  timeZoneCustom: boolean(name='time_zone_custom', example='true,false'),
}

// AlarmHistory
model AlarmHistory {
  // alarm_level
  alarmLevel: long(name='alarm_level', example='alarm_level'),
  // alarmPkgId
  alarmPkgId: long(name='alarm_pkg_id', example='alarmPkgId'),
  // alarm_rule_name
  alarmRuleName: string(name='alarm_rule_name', example='alarm_rule_name'),
  // alarmSourceType
  alarmSourceType: string(name='alarm_source_type', example='alarmSourceType'),
  // alarm_time
  alarmTime: long(name='alarm_time', example='alarm_time'),
  // biz_domain_id
  bizDomainId: long(name='biz_domain_id', example='biz_domain_id'),
  // context
  context: string(name='context', example='context'),
  // custom_plugin_id
  customPluginId: long(name='custom_plugin_id', example='custom_plugin_id'),
  // id
  id: long(name='id', example='id'),
  // meta_group_id
  metaGroupId: long(name='meta_group_id', example='meta_group_id'),
  // msg
  msg: string(name='msg', example='msg'),
  // stack_entity_id
  stackEntityId: long(name='stack_entity_id', example='stack_entity_id'),
  // stack_id
  stackId: long(name='stack_id', example='stack_id'),
  // stack_monitor_item_name
  stackMonitorItemName: string(name='stack_monitor_item_name', example='stack_monitor_item_name'),
  // stack_universal_table_id
  stackUniversalTableId: string(name='stack_universal_table_id', example='stack_universal_table_id'),
  // tag_value_id
  tagValueId: long(name='tag_value_id', example='tag_value_id'),
  // tenant_id
  tenantId: long(name='tenant_id', example='tenant_id'),
  // workspace_id
  workspaceId: long(name='workspace_id', example='workspace_id'),
}

//  
model XTimeMetricsValue {
  //  
  values: [ XStringKeyValue ](name='values', example=''),
  //  
  timestamp: long(name='timestamp', example=' '),
}

// NavContent
model NavContent {
  // hasw
  hasw: boolean(name='hasw', example='true, false'),
  // hast
  hast: boolean(name='hast', example='true, false'),
  // hasbiz
  hasbiz: boolean(name='hasbiz', example='true, false'),
  // nav_sites
  navSites: [ NavSite ](name='nav_sites', example='nav_sites'),
}

// 指标数据
model MetricData {
  // 维度信息
  tags: [ KeySet ](name='tags', example=''),
  // 时序数据
  values: [ MetricValue ](name='values', example=''),
}

// 日志过滤规则
model Filter {
  // 过滤列
  dim: UniqueDim(name='dim', example=''),
  // 过滤目标值列表
  values: [ string ](name='values', example=''),
}

// metric data
model XMetricData {
  // key value
  metric: [ XStringKeyValue ](name='metric', example='[{"key":"value"}]'),
  // time value
  value?: XTimeStringValue(name='value', example='{"timestamp": 1627985457, "value": "1.1"}'),
  //  
  values?: [ XTimeStringValue ](name='values', example=''),
}

// Condition
model Condition {
  // plugin
  plugin: string(name='plugin', example='plugin'),
  // content_type
  contentType: string(name='content_type', example='content_type'),
  // tag
  tag: string(name='tag', example='tag'),
  // ds_id
  dsId: string(name='ds_id', example='ds_id'),
  // new_cp_id
  newCpId: string(name='new_cp_id', example='new_cp_id'),
  // start
  start: long(name='start', example='start'),
  // end
  end: long(name='end', example='end'),
  // tick_interval
  tickInterval: long(name='tick_interval', example='tick_interval'),
  // use_new
  useNew: boolean(name='use_new', example='true,false'),
  // groupby
  groupby: [ string ](name='groupby', example='groupby'),
  // values
  values: [ KeySet ](name='values', example='values'),
  // tenant_id
  tenantId: long(name='tenant_id', example='tenant_id'),
  // workspace_id
  workspaceId: long(name='workspace_id', example='workspace_id'),
  // am_old_data_struct
  amOldDataStruct: boolean(name='am_old_data_struct', example='true, false'),
  // am_is_spm
  amIsSpm: boolean(name='am_is_spm', example='true,false'),
  // old_ds_id
  oldDsId: string(name='old_ds_id', example='old_ds_id'),
}

// NodeTopItem
model NodeTopItem {
  // 主机名称
  node: string(name='node', example='node'),
  // 应用TopN统计值，有可能有小数，使用前转换为数值
  value: string(name='value', example='15'),
}

// TraasAppGroupDto
model TraasAppGroupDto {
  // uuid
  uuid: string(name='uuid', example='uuid'),
  // name
  name: string(name='name', example='name'),
  // display_name
  displayName?: string(name='display_name', example='display_name'),
  // parent_uuid
  parentUuid?: string(name='parent_uuid', example='parent_uuid'),
  // layer
  layer?: long(name='layer', example='layer'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid', example='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name', example='tenant_name'),
  // outside_id
  outsideId?: string(name='outside_id', example='outside_id'),
  // outside_parent_id
  outsideParentId?: string(name='outside_parent_id', example='outside_parent_id'),
  // source_from
  sourceFrom: string(name='source_from', example='source_from'),
  // extension
  extension?: string(name='extension', example='extension'),
  // gmt_create
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmt_modified
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// AlarmHistoryStatsDTOsKeySet
model AlarmHistoryStatsDTOsKeySet {
  // key
  key: string(name='key', example='key'),
  // value
  value: [ AlarmHistoryStatsDTO ](name='value', example=''),
}

// AlarmHistoryListKeySet
model AlarmHistoryListKeySet {
  // key
  key: string(name='key', example='key'),
  // AlarmHistoryListKeySet
  value: [ AlarmHistory ](name='value', example='AlarmHistoryListKeySet'),
}

// PontusTrendRequest
model PontusTrendRequest {
  // token
  token: string(name='token', example='token'),
  // metric_table
  metricTable: string(name='metric_table', example='metric_table'),
  // site_env
  siteEnv: string(name='site_env', example='site_env'),
  // view_id
  viewId: string(name='view_id', example='view_id'),
  // period_type
  periodType: string(name='period_type', example='period_type'),
  // extraDimNames
  extraDimNames: [ string ](name='extra_dim_names', example='extraDimNames'),
  // metric_filter
  metricFilter: string(name='metric_filter', example='metric_filter'),
  // start
  start: long(name='start', example='start'),
  // end
  end: long(name='end', example='end'),
  // dim_conditions_list
  dimConditionsList: [ KeySet ](name='dim_conditions_list', example='dim_conditions_list'),
  // dim_expression
  dimExpression: KeySet(name='dim_expression', example='dim_expression'),
  // dim_expression_list
  dimExpressionList: [ KeySet ](name='dim_expression_list', example='dim_expression_list'),
}

// MonitorUser
model MonitorUser {
  // 用户来源
  identityType: string(name='identity_type', example='IAM'),
  // 用户上的权限
  superViewer: boolean(name='super_viewer', example='true, false'),
  // 是否为超级管理员
  superAdmin: boolean(name='super_admin', example='true, false'),
  // 显示名，花名 
  nickName: string(name='nick_name', example='花名'),
  // emp_id
  empId: string(name='emp_id', example='57551'),
  // id
  id: long(name='id', example='96971'),
  // 登录名，等于_id, _id实在太难辨别了，域帐号  yerui.yr
  loginName: string(name='login_name', example='yerui.yr'),
  // 展示名称
  displayName: string(name='display_name', example='test'),
  // 兼容UniversalRead里返回的userDisplayName
  userDisplayName: string(name='user_display_name', example='test'),
  // 真名
  realName: string(name='real_name', example='test'),
  // phone_num
  phoneNum: string(name='phone_num', example='18111111111'),
  // email
  email: string(name='email', example='xxxx@xx.com'),
  // enterprise_id（金融云专属）
  enterpriseId: string(name='enterprise_id', example='1'),
  // token
  token: string(name='token', example='test'),
  // 一方化标记位
  isFromAliyun: boolean(name='is_from_aliyun', example='true, false'),
}

//  
model XPrometheusQuery {
  //  
  port: long(name='port', example=' '),
  //  
  ip?: string(name='ip', example=' '),
  //  
  path: string(name='path', example='/metrics'),
  //  
  target?: XTarget(name='target', example=' '),
}

// 统计方式
model Cal {
  // 统计功能
  fun: string(name='fun', example='count'),
  // 值对象
  val?: UniqueDim(name='val', example=''),
  // 值对象备份
  valBak?: UniqueDim(name='val_bak', example=''),
  // topn
  topn?: long(name='topn', example='0'),
  // 所包含的值
  containVals?: ContainVals(name='contain_vals', example=''),
}

// OpsmetaSchema
model OpsmetaSchema {
  // envs
  envs: [ string ](name='envs', example='envs'),
  // idc
  idc: OpsFilter(name='idc', example='idc'),
  // ldc
  ldc: OpsFilter(name='ldc', example='ldc'),
  // server
  server: OpsFilter(name='server', example='server'),
}

// dashboard query
model XDashboardQuery {
  //  
  uuid?: string(name='uuid', example=' '),
  //  
  parentUuid?: string(name='parent_uuid', example=' '),
  //  
  name?: string(name='name', example=' '),
}

// FolderPath
model FolderPath {
  // id
  id: long(name='id', example='id'),
  // name
  name: string(name='name', example='name'),
  // v
  type: string(name='type', example='type'),
}

// KV对
model KeyValuePair {
  // key
  key?: string(name='key', example='key'),
  // value
  value?: string(name='value', example='value'),
}

// oneconsole需要的workspace
model OneConsoleWorkspace {
  // ws id
  id: string(name='id', example='ws id'),
  // identity
  identity: string(name='identity', example='identity'),
  // name
  name: string(name='name', example='name'),
}

// DatasourceCRULResponseCURequest
model XDatasourceCRULResponseCURequest {
  //  
  apiVersion?: string(name='api_version', example=' '),
  //  
  metadata: XResource(name='metadata', example=''),
  //  
  spec: XSpec(name='spec', example=' '),
}

// 告警历史对象
model UnifiedAlarmHistoryVO {
  // 主键
  id: long(name='id', example='1'),
  // 事件id
  eventId: string(name='event_id', example='""'),
  // 告警规则id
  alarmRuleId: long(name='alarm_rule_id', example='1'),
  // 告警规则唯一标识
  uniqueIdentity: string(name='unique_identity', example='123_0'),
  // 告警规则名字
  alarmRuleName: string(name='alarm_rule_name', example='""'),
  // 告警等级
  alarmLevel: long(name='alarm_level', example='1'),
  // 告警时间
  alarmTime: long(name='alarm_time', example='2021-5-27 10:08:52'),
  // 告警内容
  alarmContent: string(name='alarm_content', example='""'),
  // 告警对象
  alarmTarget: string(name='alarm_target', example='""'),
  // 触发状态
  status: long(name='status', example='0'),
  // 租户id
  tenantId: long(name='tenant_id', example='1'),
  // 工作区id
  workspaceId: long(name='workspace_id', example='3'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2021-12-1 15:22:01'),
  // 修改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2021-12-1 15:22:01'),
  // type
  alarmTargetType?: string(name='alarm_target_type', example='""'),
  // 告警详情
  alarmDetail: string(name='alarm_detail', example='[{"tags":[]}]'),
  // 数据源名称
  dataSourceName?: string(name='data_source_name', example='PQL'),
  // 数据源跳转url
  alarmUrl?: string(name='alarm_url', example='/business/product/multiMinute/preview/2000021'),
  // 告警类型
  alarmType?: string(name='alarm_type', example='[自定义配置,应用监控]'),
  // 目标对象是否已经删除
  alarmTargetDeleted?: boolean(name='alarm_target_deleted', example='true, false'),
}

// 应用TopN信息
model AppTopItem {
  // 应用名
  appName: string(name='app_name', example='RMS-rmsalarm'),
  // 应用TopN统计值，有可能有小数，使用前转换为数值
  value: string(name='value', example='15'),
}

// stats
model XSiteExportStats {
  //  
  alert?: long(name='alert', example=''),
  //  
  alertDatasource?: long(name='alert_datasource', example=''),
  //  
  dashboard?: long(name='dashboard', example=''),
  //  
  dashboardDatasource?: long(name='dashboard_datasource', example=''),
  //  
  datasource?: long(name='datasource', example=''),
  // 通知对象的数量
  alarmSubscriberCount?: long(name='alarm_subscriber_count', example='1'),
}

// trace span
model TraceSpan {
  // 组件类型
  component?: string(name='component', example='SOFARPC'),
  // 毫秒耗时
  duration?: long(name='duration', example='5000'),
  // 服务描述信息
  info?: string(name='info', example='服务描述信息'),
  // span kind, CLIENT SERVER PRODUCER CONSUMER
  kind?: string(name='kind', example='kind'),
  // local endpoint ip
  localIp?: string(name='local_ip', example='192.168.1.2'),
  // local endpoint service name
  localServiceName?: string(name='local_service_name', example='web'),
  // local idc name
  localIdcName?: string(name='local_idc_name', example='idc'),
  // local cell name
  localCellName?: string(name='local_cell_name', example='cell'),
  // name
  name?: string(name='name', example='name'),
  // parent_id
  parentId?: string(name='parent_id', example='parent_id'),
  // remote endpoint ip
  remoteIp?: string(name='remote_ip', example='192.168.1.3'),
  // remote endpoint service name
  remoteServiceName?: string(name='remote_service_name', example='shop'),
  // remote idc name
  remoteIdcName?: string(name='remote_idc_name', example='idc'),
  // remote cell name
  remoteCellName?: string(name='remote_cell_name', example='cell'),
  // span_id
  spanId?: string(name='span_id', example='span_id'),
  // 开始时间, 毫秒时间戳
  startTime?: long(name='start_time', example=''),
  // 状态码
  status?: string(name='status', example='00'),
  // span tags, 是关于span的键值对
  tags?: [ KeySet ](name='tags', example=''),
  // trace id
  traceId?: string(name='trace_id', example='trace id'),
}

// Spm
model Spm {
  // resultDim
  resultDim?: UniqueDim(name='result_dim', example=''),
  // costDim
  costDim?: UniqueDim(name='cost_dim', example=''),
  // countDim
  countDim?: UniqueDim(name='count_dim', example=''),
}

// StackExpression
model StackExpression {
  // states
  states: [ StackState ](name='states', example='states'),
  // andor
  andor: boolean(name='andor', example='true, false'),
}

// Metrics 中具体时间点的数据
model TimeSeriesMetricsPoint {
  // 时间戳 (毫秒)
  timestamp?: long(name='timestamp', example='1574664720333'),
  // Metrics 某时间点的具体值
  value?: [ TimeSeriesMetricsField ](name='value', example='[{"key":"callCount","value":102},{"key":"errorCount","value":1},{"key":"rps","value":12.01}]'),
}

// StatusDO
model StatusDO {
  // creater
  creater: string(name='creater', example='creater'),
  // create_time
  createTime: long(name='create_time', example='create_time'),
  // operator
  operator: string(name='operator', example='operator'),
  // update_time
  updateTime: long(name='update_time', example='update_time'),
  // status_desc
  statusDesc: string(name='status_desc', example='status_desc'),
  // compute_close
  computeClose: boolean(name='compute_close', example='true,false'),
  // degrade_reason
  degradeReason: string(name='degrade_reason', example='degrade_reason'),
  // degrade_operator
  degradeOperator: string(name='degrade_operator', example='degrade_operator'),
  // degrade_time
  degradeTime: string(name='degrade_time', example='degrade_time'),
  // degrade_time_v2
  degradeTimeV2: long(name='degrade_time_v2', example='degrade_time_v2'),
}

// AlarmNotifyStats
model AlarmNotifyStats {
  // alarm_time
  alarmTime: long(name='alarm_time', example='alarm_time'),
  // count
  count: long(name='count', example='count'),
  // notify_channel
  notifyChannel: string(name='notify_channel', example='notify_channel'),
}

// LongListKeySet
model LongListKeySet {
  // key
  key: string(name='key', example='test'),
  // value
  value: [ string ](name='value', example='[1,2]'),
}

// datasource query
model XDatasourceQuery {
  //  
  uuid?: string(name='uuid', example='uuid'),
  //  
  parentUuid?: string(name='parent_uuid', example=' '),
  //  
  name?: string(name='name', example=' '),
  //  
  enabled?: boolean(name='enabled', example='true, false'),
  //  
  targetResourceKind?: string(name='target_resource_kind', example=' '),
  //  
  targetResourceName?: string(name='target_resource_name', example=' '),
  //  
  ruleType?: string(name='rule_type', example=' '),
  //  
  createdBy?: string(name='created_by', example=' '),
}

// 菜单
model Menu {
  // id
  id: string(name='id', example='test'),
}

// AlarmPkgDO
model AlarmPkgDO {
  // biz_groupby_name
  bizGroupbyName: string(name='biz_groupby_name', example='biz_groupby_name'),
  // id
  id: long(name='id', example='id'),
  // name
  name: string(name='name', example='name'),
  // stack_metric_group_metric_table
  stackMetricGroupMetricTable: string(name='stack_metric_group_metric_table', example='stack_metric_group_metric_table'),
  // tag_value
  tagValue: string(name='tag_value', example='tag_value'),
  // uuid
  uuid: string(name='uuid', example='uuid'),
  // alarm
  alarm: AlarmDO(name='alarm', example='alarm'),
  // top_alarm
  topAlarm: TopAlarmDO(name='top_alarm', example='top_alarm'),
}

// AlarmTypeStatsVO
model AlarmTypeStatsVO {
  // custom_plugin
  customPlugin: long(name='custom_plugin', example='custom_plugin'),
  // meta_group
  metaGroup: long(name='meta_group', example='meta_group'),
  // stack_universal_table
  stackUniversalTable: long(name='stack_universal_table', example='stack_universal_table'),
}

// SaveSchema
model SaveSchema {
  // capacity
  capacity: long(name='capacity', example='capacity'),
  // reserved
  reserved: string(name='reserved', example='reserved'),
  // max_key_size
  maxKeySize: long(name='max_key_size', example='max_key_size'),
}

// AlarmHistoryDTO
model AlarmHistoryDTO {
  // id
  id: long(name='id', example='id'),
  // alarm_rule_name
  alarmRuleName: string(name='alarm_rule_name', example='alarm_rule_name'),
  // msg
  msg: string(name='msg', example='msg'),
  // alarm_pkg_id
  alarmPkgId: long(name='alarm_pkg_id', example='alarm_pkg_id'),
  // custom_plugin_id
  customPluginId: long(name='custom_plugin_id', example='custom_plugin_id'),
  // meta_group_id
  metaGroupId: long(name='meta_group_id', example='meta_group_id'),
  // stack_universal_tableId
  stackUniversalTableId: string(name='stack_universal_table_id', example='stack_universal_tableId'),
  // tag_value_id
  tagValueId: long(name='tag_value_id', example='tag_value_id'),
  // tenant_id
  tenantId: long(name='tenant_id', example='tenant_id'),
  // workspace_id
  workspaceId: long(name='workspace_id', example='workspace_id'),
  // biz_domain_id
  bizDomainId: long(name='biz_domain_id', example='biz_domain_id'),
  // alarm_time
  alarmTime: long(name='alarm_time', example='alarm_time'),
  // alarm_level
  alarmLevel: long(name='alarm_level', example='alarm_level'),
  // stack_id
  stackId: long(name='stack_id', example='stack_id'),
  // stack_entity_id
  stackEntityId: long(name='stack_entity_id', example='stack_entity_id'),
  // stack_monitor_item_name
  stackMonitorItemName: string(name='stack_monitor_item_name', example='stack_monitor_item_name'),
  // alarm_source_type
  alarmSourceType: string(name='alarm_source_type', example='alarm_source_type'),
  // biz_id
  bizId: long(name='biz_id', example='biz_id'),
  // biz_groupby_name
  bizGroupbyName: string(name='biz_groupby_name', example='biz_groupby_name'),
  // multi_alarm_id
  multiAlarmId: long(name='multi_alarm_id', example='multi_alarm_id'),
  // context
  context: [ KeySet ](name='context', example='context'),
}

// dashboard
model XDashboardCRULResponseCURequest {
  // API版本
  apiVersion?: string(name='api_version', example='v2'),
  // Dashboard元数据信息
  metadata: XResource(name='metadata', example=''),
  // Dashboard配置JSON字符串。
  // Dashboard目录不需要填写
  config?: string(name='config', example='{"xxx":xxx}'),
}

// OPS分组方式
model OpsGroupBy {
  // 是否按环境分组
  env?: boolean(name='env', example='true, false'),
  // 是否按部署单元分组
  deployUnit?: boolean(name='deploy_unit', example='true, false'),
  // 是否按应用分组
  app?: boolean(name='app', example='true, false'),
  // 是否按idc分组
  idc?: boolean(name='idc', example='true, false'),
  // 是否按ldc分组
  ldc?: boolean(name='ldc', example='true, false'),
  // 是否按server分组
  server?: boolean(name='server', example='true, false'),
  // 附加信息
  extra?: string(name='extra', example='附加信息example'),
}

// 告警统计信息
model AlarmCountInfo {
  // 自定义监控告警数量
  customPluginCount: long(name='custom_plugin_count', example='15'),
  // 应用组告警数量
  appGroupCount: long(name='app_group_count', example='5'),
  // 应用监控告警数量
  appCount: long(name='app_count', example='8'),
}

// 自定义监控日志
model Log {
  // 应用名列表
  apps: [ string ](name='apps', example=''),
  // 采集日志文件
  path: string(name='path', example='/home/admin/logs/test.log'),
  // 日志编码
  charset?: string(name='charset', example='UTF-8'),
  // 日志限制流量，单位KB/min
  agentLimitKB?: long(name='agent_limit_k_b', example='5'),
  // 日志路径软连接描述
  symlinkPath?: string(name='symlink_path', example='/home/admin/logs'),
}

// 实体拓扑节点
model TraasEntityTopoNode {
  // name
  name: string(name='name', example='name'),
  // field
  field: string(name='field', example='field'),
}

// AlarmLevelStatsVO
model AlarmLevelStatsVO {
  // l0
  l0: long(name='l0', example='l0'),
  // l1
  l1: long(name='l1', example='l1'),
  // l2
  l2: long(name='l2', example='l2'),
}

// 用户组
model UserGroup {
  // ID
  id: long(name='id', example='15'),
  // 通知组名称
  name: string(name='name', example='日志通知'),
  // 最后修改人
  modifier: string(name='modifier', example='antcloudcore@antfin.com'),
  // 最后修改时间
  gmtModified: long(name='gmt_modified', example='1611845221912'),
  // 用户组关联关系
  relations: [ UserGroupRelation ](name='relations', example=''),
  // 全局订阅
  scopeGlobal?: boolean(name='scope_global', example='true, false'),
  // 0、当前workspace有效；
  // 1、租户有效；
  validScope?: long(name='valid_scope', example='0,1'),
  // 当前用户组的告警规则定阅数量
  subscribeCount?: long(name='subscribe_count', example='0'),
}

// PageQuery
model PageQuery {
  // page_size
  pageSize: long(name='page_size', example='page_size'),
  // page_index
  pageIndex: long(name='page_index', example='page_index'),
  // cur_index
  curIndex: long(name='cur_index', example='cur_index'),
}

//  
model XTableData {
  //  
  tags?: [ XStringKeyValue ](name='tags', example=''),
  //  
  metricValues?: [ XTimeMetricsValue ](name='metric_values', example=''),
}

// 统一告警规则
model UnifiedAlarmRuleVO {
  // 主键
  id?: long(name='id', example=''),
  // 告警规则名称
  name?: string(name='name', example='“xx告警”'),
  // 分类 用于区分pql规则和自定义规则
  category?: string(name='category', example='“自定义”或者"pql"'),
  // 规则配置
  ruleConfig?: string(name='rule_config', example='规则配置'),
  // 告警等级
  level?: long(name='level', example='0:p0 1:p1 以此类推'),
  // 检测频率
  step?: long(name='step', example='123'),
  // 触发周期
  pendingHit?: long(name='pending_hit', example='123'),
  // 恢复周期
  recoveredHit?: long(name='recovered_hit', example='123'),
  // 静默时间
  silenceTime?: long(name='silence_time', example=''),
  // 时区
  timeZone?: string(name='time_zone', example='“localhost”'),
  // 应急处理人
  emergency?: string(name='emergency', example='“未信”'),
  // 应急处理链接
  emergencyUrl?: string(name='emergency_url', example='"www.xx.com"'),
  // 指标无数据触发告警 是个开关 1:打开 0:关闭
  alarmEmpty?: long(name='alarm_empty', example=''),
  // 告警触发时通知 1:勾选 0:不勾选
  notifyFiring?: long(name='notify_firing', example='1:勾选 0:不勾选'),
  // 告警恢复时通知 1:勾选 0:不勾选
  notifyRecovered?: long(name='notify_recovered', example='1:勾选 0:不勾选'),
  // 告警无数据时通知 1:勾选 0:不勾选
  notifyEmpty?: long(name='notify_empty', example='1:勾选 0:不勾选'),
  // 通知渠道
  channels?: string(name='channels', example='"["ddWebhook","sms","phone","email"]"'),
  // 通知模板id
  notifyTplId?: long(name='notify_tpl_id', example=''),
  // 通知时间
  notifyTimeFilter?: string(name='notify_time_filter', example='1622016126752'),
  // 暂停开始时间
  suspendedStartTime?: long(name='suspended_start_time', example='1622016126752'),
  // 暂停结束时间
  suspendedEndTime?: long(name='suspended_end_time', example='1622016126759'),
  // 暂停的原因
  suspendedReason?: string(name='suspended_reason', example='"暂停的原因"'),
  // 唯一 ID，保证迁移前后不变
  uniqueIdentity?: string(name='unique_identity', example='uuid'),
  // 标识告警规则迁移之前的 ID
  sourceId?: string(name='source_id', example='123'),
  // 启停状态 开关
  status?: long(name='status', example='0:闭合 1:打开'),
  // 软删除
  deleted?: long(name='deleted', example='0:不删除 1:删除'),
  // 租户id
  tenantId?: long(name='tenant_id', example='1'),
  // 工作空间id
  workspaceId?: long(name='workspace_id', example='3'),
  // 创建人
  creator?: string(name='creator', example='autcloudadmin'),
  // 修改人
  modifier?: string(name='modifier', example='autcloudadmin'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2021-12-1 15:22:01'),
  // 修改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2021-12-1 15:22:01'),
  // 告警状态
  alarmStatus?: long(name='alarm_status', example='0'),
  // 告警条件简介
  conditionsDes?: [ string ](name='conditions_des', example=''),
  // 告警类型
  alarmType?: string(name='alarm_type', example='[自定义配置,应用监控]'),
  // 告警数据源跳转url
  alarmUrl?: string(name='alarm_url', example='/business/product/multiMinute/preview/2000021'),
  // 数据源名称
  dataSourceName?: string(name='data_source_name', example='PQL'),
  // 目标对象是否删除
  alarmTargetDeleted?: boolean(name='alarm_target_deleted', example='true, false'),
}

// 能登陆监控的用户
model MonitorUserDO {
  // 登录名
  loginName: string(name='login_name', example='yerui.yr'),
  // 昵称(花名或显示名)
  nickName: string(name='nick_name', example='花名'),
  // 手机号码
  phoneNum: string(name='phone_num', example='18810552566'),
  // 真名
  realName: string(name='real_name', example='郑明明'),
  // 一方化标记位
  fromAliyun: boolean(name='from_aliyun', example='true, false'),
  // 是否未超级管理员
  superAdmin: boolean(name='super_admin', example='true, false'),
  // 用户上的权限
  superViewer: boolean(name='super_viewer', example='true, false'),
  // super_admin或者super_viewer
  isSuper: boolean(name='is_super', example='true, false'),
  // 用户 ID
  id: long(name='id', example='123'),
  // 用户来源
  identityType: string(name='identity_type', example='IAM'),
}

// 工作空间
model Workspace {
  // ID
  id: long(name='id', example='1'),
  // 名称
  name: string(name='name', example='FIN-DEV-AKE2.0'),
  // 展示名称
  displayName: string(name='display_name', example='FIN-DEV-AKE2.0'),
  // 租户ID
  tenantId: long(name='tenant_id', example='1'),
  // outsideWsId
  outsideWsId: string(name='outside_ws_id', example='73080000000058'),
  // outsideTenantId
  outsideTenantId: string(name='outside_tenant_id', example='0000000004'),
}

// UserAuthRsp
model UserAuthRsp {
  // powers
  powers: [ LongListKeySet ](name='powers', example='powers'),
  // bd_powers
  bdPowers: [ LongListKeySet ](name='bd_powers', example='bd_powers'),
  // w_powers
  wPowers: [ LongListKeySet ](name='w_powers', example='w_powers'),
  // t_powers
  tPowers: [ LongListKeySet ](name='t_powers', example='t_powers'),
  // super_admin
  superAdmin: boolean(name='super_admin', example='true, false'),
  // super_view
  superView: boolean(name='super_view', example='true, false'),
  // biz_domains
  bizDomains: [ BizDomain ](name='biz_domains', example='biz_domains'),
  // auth_url
  authUrl: string(name='auth_url', example='auth_url'),
}

// ModelTreeNode
model ModelTreeNode {
  // name
  name: string(name='name', example='name'),
  // id
  id: long(name='id', example='id'),
  // plugin_name
  pluginName: string(name='plugin_name', example='plugin_name'),
  // type
  type: string(name='type', example='type'),
}

// 文件夹实体类
model FolderDO {
  // 文件夹ID
  id: long(name='id', example='123'),
  // 文件夹名称
  name: string(name='name', example='test'),
  // 父目录 ID
  parentFolderId: string(name='parent_folder_id', example='-1'),
  // 排序号
  sortIndex?: string(name='sort_index', example='3'),
  // 监控租户 ID
  tenantId: long(name='tenant_id', example='1'),
  // 监控工作空间 ID
  workspaceId: string(name='workspace_id', example='3'),
  // 创建者
  creater: string(name='creater', example='rms'),
  // 创建时间
  gmtCreate: long(name='gmt_create', example=''),
  // 修改时间
  gmtModified: long(name='gmt_modified', example=''),
  // 修改者
  modifier: string(name='modifier', example='rms'),
  // 是否告警
  alarmed: boolean(name='alarmed', example='true, false'),
  // 是否置顶
  top: boolean(name='top', example='true, false'),
}

// 统一告警订阅
model UnifiedAlarmSubVO {
  // 主键
  id?: long(name='id', example='123'),
  // 告警规则id
  alarmRuleId?: long(name='alarm_rule_id', example='123'),
  // 告警模板id
  alarmTplId?: long(name='alarm_tpl_id', example='123'),
  // 订阅者的类型
  subscriberType?: string(name='subscriber_type', example='subscriber_type:"webhook"或者subscriber_type:"通知组"'),
  // 订阅者
  subscriber?: string(name='subscriber', example='subscriber:"赤远"或者subscriber:"xxx告警组"或者subscriber:"xxx(webhook)"'),
  // 订阅者名称
  subscriberName?: string(name='subscriber_name', example='chiyuan'),
  // 租户id
  tenantId?: long(name='tenant_id', example='123'),
  // 工作空间id
  workspaceId?: long(name='workspace_id', example='123'),
  // 创建人,可以理解为当前登录用户
  creator?: string(name='creator', example='autcloudadmin'),
  // 修改人,同creator
  modifier?: string(name='modifier', example='autcloudadmin'),
  // 创建日期
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2021-5-27 10:08:52'),
  // 修改日期
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2021-5-27 10:08:52'),
  // 静默时间
  silenceTime?: long(name='silence_time', example=''),
  // 通知渠道
  channel?: string(name='channel', example='""'),
  // 订阅者来源
  subscriberSource?: string(name='subscriber_source', example='LOCAL, IAM'),
}

// IpFileOs
model IpFileOs {
  // error_msg
  errorMsg: string(name='error_msg', example='error_msg'),
  // ip
  ip: string(name='ip', example='ip'),
  // next_file_id
  nextFileId: string(name='next_file_id', example='next_file_id'),
  // next_offset
  nextOffset: long(name='next_offset', example='next_offset'),
  // uuid
  uuid: string(name='uuid', example='uuid'),
}

// 自定义监控指标DO
model CustomPluginDO {
  // ID
  id?: long(name='id', example='11223344'),
  // 自定义监控名称
  name: string(name='name', example='the monitor name'),
  // 监控类型id
  pluginId: long(name='plugin_id', example='15'),
  // 监控类型
  pluginType: string(name='plugin_type', example='singleMinute'),
  // 父级文件夹 ID
  parentFolderId: long(name='parent_folder_id', example='15'),
  // 创建者
  creater?: string(name='creater', example='rmstest01'),
  // 最后修改者
  modifier?: string(name='modifier', example='rmstest01'),
  // 创建时间 - 时间戳
  gmtCreate?: long(name='gmt_create', example='1609213282986'),
  // 最后修改时间 - 时间戳
  gmtModified?: long(name='gmt_modified', example='1609322431811'),
  // 是否有报警
  alarmed?: boolean(name='alarmed', example='true, false'),
  // 日志
  log?: Log(name='log', example=''),
  // 存储信息
  saveSchema?: SaveSchema(name='save_schema', example=''),
  // 采集元数据过滤项
  opsmetaSchema?: OpsmetaSchema(name='opsmeta_schema', example=''),
  // 属性扩展包
  spm?: Spm(name='spm', example=''),
  // 告警套餐列表
  alarmPkgs?: [ AlarmPkgDO ](name='alarm_pkgs', example=''),
  // 日志筛选黑名单
  blackFilters?: [ Filter ](name='black_filters', example=''),
  // 日志筛选白名单
  whiteFilters?: [ Filter ](name='white_filters', example=''),
  // OPS分组方式
  opsGroupBy?: OpsGroupBy(name='ops_group_by', example=''),
  // 统计方式
  cal?: Cal(name='cal', example=''),
  // 配置状态
  status?: StatusDO(name='status', example=''),
  // top预警
  topAlarm?: TopAlarmDO(name='top_alarm', example=''),
  // 分组规则
  groupBy?: [ Filter ](name='group_by', example=''),
  // 状态描述信息
  statusDesc?: string(name='status_desc', example='该自定义监控指标的状态描述'),
  // 是否需要动态key
  dkNeed?: boolean(name='dk_need', example='true, false'),
  // 推荐的动态key列表, 分号间隔
  dks?: string(name='dks', example='console;mq'),
  // 是否需要大盘显示基线
  baselineNeed?: boolean(name='baseline_need', example='true, false'),
  // 是否需要快速刷入实时缓存
  flushBasin?: boolean(name='flush_basin', example='true, false'),
  // 所属应用
  xflushApps?: string(name='xflush_apps', example='wyp-rms'),
  // script (JSON String格式)
  scriptNew?: string(name='script_new', example='{"reports":[{"colspan":"50","chartConfig":{"cols":[]},"dsMetas":{"freshTerm":30.0,"dss":[]},"name":"the_reporter_name","chartType":"lineChart","outLink":"","chartHeight":"12"}],"tags":[]}'),
  // 是否开启
  isOpen?: boolean(name='is_open', example='true, false'),
  // 插件类型别名
  pluginTypeAlias: string(name='plugin_type_alias', example='SM'),
}

// 告警消息历史
model UnifiedAlarmNotifyHistoryVO {
  // 主键
  id?: long(name='id', example=''),
  // 告警历史id
  alarmHistoryId?: long(name='alarm_history_id', example=''),
  // 告警事件id
  alarmEventId?: string(name='alarm_event_id', example='""'),
  // 告警规则id
  alarmRuleId?: long(name='alarm_rule_id', example=''),
  // 告警等级
  alarmLevel?: long(name='alarm_level', example=''),
  // 告警静默期
  alarmSilenceTime?: long(name='alarm_silence_time', example=''),
  // 告警时间
  alarmTime?: long(name='alarm_time', example=''),
  // 通知渠道
  channel?: string(name='channel', example='通知渠道'),
  // 订阅人的类型
  subscriberType?: string(name='subscriber_type', example='“webhook”或者"loginer"或者"xxx组"'),
  // 订阅人
  subscriber?: string(name='subscriber', example='""'),
  // 聚合条数
  aggCount?: long(name='agg_count', example=''),
  // 通知状态
  status?: long(name='status', example='0 ：失败 1：成功'),
  // 租户id
  tenantId?: long(name='tenant_id', example='1'),
  // 工作空间id
  workspaceId?: long(name='workspace_id', example='3'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2021-12-1 15:22:01'),
  // 修改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2021-12-1 15:22:01'),
  // 消息内容
  notifyContent?: string(name='notify_content', example='""'),
  // 告警规则名
  alarmRuleName?: string(name='alarm_rule_name', example='""'),
  // 订阅人
  subscriberName?: string(name='subscriber_name', example='""'),
  // 订阅者来源
  subscriberSource?: string(name='subscriber_source', example='LOCAL, IAM'),
  // 告警消息的状态
  alarmStatus?: long(name='alarm_status', example='1'),
  // 告警类型
  alarmType?: string(name='alarm_type', example='[自定义配置,应用监控]'),
  // 告警数据源跳转url
  alarmUrl?: string(name='alarm_url', example='/business/product/multiMinute/preview/2000021'),
  // 数据源名称
  dataSourceName?: string(name='data_source_name', example='1'),
  // 目标对象是否删除
  alarmTargetDeleted?: boolean(name='alarm_target_deleted', example='true, false'),
  // 描述消息发送错误原因
  errorMessage?: string(name='error_message', example='钉钉机器人不存在'),
  // 告警消息的日志跟踪字段
  traceId?: string(name='trace_id', example='322_1633675560000_446501871'),
}

// TraasAppDto
model TraasAppDto {
  // uuid
  uuid: string(name='uuid', example='uuid'),
  // name
  name: string(name='name', example='name'),
  // display_name
  displayName?: string(name='display_name', example='display_name'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid', example='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name', example='tenant_name'),
  // outside_id
  outsideId?: string(name='outside_id', example='outside_id'),
  // source_from
  sourceFrom: string(name='source_from', example='source_from'),
  // extension
  extension?: string(name='extension', example='extension'),
  // gmt_create
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example=''),
  // gmt_modified
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example=''),
  // 应用所属的上层所有祖先分组
  ancestorAppGroups?: [ TraasAppGroupDto ](name='ancestor_app_groups', example=''),
  // app_group_uuid
  appGroupUuid?: string(name='app_group_uuid', example='app_group_uuid'),
  // app_group_name
  appGroupName?: string(name='app_group_name', example='app_group_name'),
  // app_server_count
  appServerCount?: long(name='app_server_count', example='app_server_count'),
}

// UniversalBodyCmd
model UniversalBodyCmd {
  // body
  body: string(name='body', example='body'),
  // id
  id: long(name='id', example='id'),
  // model_name
  modelName: string(name='model_name', example='model_name'),
  // op
  op: string(name='op', example='op'),
  // parse_long_text
  parseLongText: boolean(name='parse_long_text', example='true,false'),
  // page_size
  pageSize: long(name='page_size', example='page_size'),
  // page_index
  pageIndex: long(name='page_index', example='page_index'),
  // cur_index
  curIndex: long(name='cur_index', example='cur_index'),
}

// 链路查询结果的关键字段取值集
model TraceQuerySummary {
  // local endpoint ip
  localIp?: [ string ](name='local_ip', example=''),
  // local endpoint service name
  localServiceName?: [ string ](name='local_service_name', example=''),
  // remote endpoint ip
  remoteIp?: [ string ](name='remote_ip', example=''),
  // remote endpoint service name
  remoteServiceName?: [ string ](name='remote_service_name', example=''),
  // 状态
  status?: [ string ](name='status', example=''),
}

// FolderRequestCmd
model FolderRequestCmd {
  // custom_plugin_id
  customPluginId: long(name='custom_plugin_id', example='custom_plugin_id'),
  // folder_id
  folderId: long(name='folder_id', example='folder_id'),
  // include_me
  includeMe: boolean(name='include_me', example='true,false'),
  // include_plugin_name
  includePluginName: boolean(name='include_plugin_name', example='true,false'),
}

// AlarmTypeStatsVOKeySet
model AlarmTypeStatsVOKeySet {
  // key
  key: string(name='key', example='key'),
  // value
  value: AlarmTypeStatsVO(name='value', example='value'),
}

// 钉钉机器人
model DingDingRobot {
  // 钉钉机器人名称
  name: string(name='name', example='奥特曼'),
  // 钉钉机器人token
  token: string(name='token', example='11111'),
  // 钉钉机器人ID
  id?: long(name='id', example='1'),
  // 是否全局有效
  scopeGlobal?: boolean(name='scope_global', example='true, false'),
  // 订阅类型：0、当前workspace有效； 1、当前租户有效
  validScope?: long(name='valid_scope', example='1'),
  // 订阅告警规则数量
  subscribeCount?: long(name='subscribe_count', example='1'),
}

// agent实例信息
model AgentInstance {
  // agent版本
  version: string(name='version', example='v1.0'),
  // agent 采集对象的唯一标识符
  collectId: string(name='collect_id', example='127.0.0.1@test'),
  // app 名称
  appName?: string(name='app_name', example='metaservice'),
  // IP 地址
  ip: string(name='ip', example='127.0.0.1'),
  // hostname 名称
  hostname?: string(name='hostname', example='localhost'),
  // 租户 ID
  tenantId: long(name='tenant_id', example='1'),
  // 工作空间 ID
  workspaceId: long(name='workspace_id', example='3'),
  // agent 状态
  status: long(name='status', example='1'),
  // 容器/ECS
  deployType: string(name='deploy_type', example='MACHINE'),
  // agent 附加信息
  extraInfo?: string(name='extra_info', example='{"clockOffset: 2"}'),
  // 更新时间
  gmtModified?: long(name='gmt_modified', example='123456'),
  // 是否开启告警标志
  label: long(name='label', example='0，1'),
}

// time series
model XMetricResponse {
  // timeseries
  result: [ XMetricData ](name='result', example='[{"metric":[{"key":"","value":""}],"value":{"timestamp":1,"value:"""}}]'),
  // result type
  resultType: string(name='result_type', example='vector'),
}

// Agent版本策略
model AgentVersionStrategy {
  // agent 地址
  url: string(name='url', example='acs-reg.alipay.com/pontusagent'),
  // agent 版本号
  version: string(name='version', example='1.2.0'),
  // 0 容器，1经典
  type: long(name='type', example='0'),
  // 0 生效，1失效
  status: long(name='status', example='0'),
  // agent 版本内容
  content?: string(name='content', example='“”'),
  // 生效范围
  scope: string(name='scope', example='WORKSPACE'),
  // 生效范围的唯一标识
  scopeIdentity: string(name='scope_identity', example='123'),
  // 创建时间
  gmtCreate: long(name='gmt_create', example=''),
  // 修改时间
  gmtModified: long(name='gmt_modified', example=''),
}

// 时间点 - 告警统计信息 KeySet
model AlarmCountInfoKeySet {
  // 键值 (时间戳字符串)
  key: string(name='key', example='1611922920000'),
  // 某一时刻对应的告警统计信息
  value: AlarmCountInfo(name='value', example=''),
}

// CallErrorMessage
model CallErrorMessage {
  // error_code
  errorCode: string(name='error_code', example='error_code'),
  // message
  message: string(name='message', example='message'),
  // cause
  cause?: string(name='cause', example='cause'),
}

// AppStats
model AppStats {
  // app_list
  appList: [ string ](name='app_list', example='app_list'),
  // page_query
  pageQuery: PageQuery(name='page_query', example='page_query'),
}

// AlarmOverviewDTO
model AlarmOverviewDTO {
  // level1_alarm_count
  level1AlarmCount: long(name='level1_alarm_count', example='level1_alarm_count'),
  // level2_alarm_count
  level2AlarmCount: long(name='level2_alarm_count', example='level2_alarm_count'),
  // level3_alarm_count
  level3AlarmCount: long(name='level3_alarm_count', example='level3_alarm_count'),
  // alarm_sub_count
  alarmSubCount: long(name='alarm_sub_count', example='alarm_sub_count'),
  // alarm_pkg_count
  alarmPkgCount: long(name='alarm_pkg_count', example='alarm_pkg_count'),
  // recent_alarms
  recentAlarms: [ AlarmHistoryDTO ](name='recent_alarms', example='recent_alarms'),
}

//  
model XPrometheusData {
  //  
  metrics?: [ XExpression ](name='metrics', example=' '),
  //  
  query?: XPrometheusQuery(name='query', example=' '),
}

// RequestParams
model RequestParams {
  // req_type
  reqType: string(name='req_type', example='req_type'),
  // condition
  condition: Condition(name='condition', example='condition'),
  // dimCondition
  dimCondition: PontusTrendRequest(name='dim_condition', example='dimCondition'),
  // tenant
  tenant: string(name='tenant', example='tenant'),
  // zones
  zones: string(name='zones', example='zones'),
  // from_front
  fromFront: boolean(name='from_front', example='from_front'),
  // fuzzy
  fuzzy: boolean(name='fuzzy', example='fuzzy'),
  // validKeyCount
  validKeyCount: long(name='valid_key_count', example='validKeyCount'),
  // can_switch
  canSwitch: boolean(name='can_switch', example='can_switch'),
}

// AlarmAppStats
model AlarmAppStats {
  // app
  app: string(name='app', example='app'),
  // alarm_level
  alarmLevel: long(name='alarm_level', example='alarm_level'),
  // count
  count: long(name='count', example='count'),
  // stack_universal_table_id
  stackUniversalTableId: string(name='stack_universal_table_id', example='stack_universal_table_id'),
}

// 实体拓扑边
model TraasEntityTopoEdge {
  // source_node
  sourceNode: TraasEntityTopoNode(name='source_node', example=''),
  // target_node
  targetNode: TraasEntityTopoNode(name='target_node', example=''),
  // relation
  relation: string(name='relation', example='1:n'),
}

// WebHook结构体
model AlarmWebHook {
  // 主键 ID
  id: long(name='id', example='15'),
  // 名称
  name: string(name='name', example='testcase'),
  // url
  url: string(name='url', example='url'),
  // method (POST, GET等)
  method: string(name='method', example='GET'),
  // headers
  headers?: [ KeySet ](name='headers', example=''),
  // params
  params?: [ KeySet ](name='params', example=''),
  // config
  config?: [ KeySet ](name='config', example=''),
  // body_template
  bodyTemplate?: string(name='body_template', example='{"alarm_title":${real_title}}'),
  // 是否该 scope 内全局
  scopeGlobal?: boolean(name='scope_global', example='true, false'),
  // creator
  creator?: string(name='creator', example='the creator'),
  // modifier
  modifier?: string(name='modifier', example='the modifier'),
  // gmtCreate
  gmtCreate?: long(name='gmt_create', example=''),
  // gmtModified
  gmtModified?: long(name='gmt_modified', example=''),
  // webhook订阅的规则数量
  subscribeCount?: long(name='subscribe_count', example='0'),
  // 当前租户有效还是当前workspace有效
  validScope?: long(name='valid_scope', example='0,1'),
}

// 总览页应用统计信息
model AppOverviewDTO {
  // 应用总数
  totalAppCount: long(name='total_app_count', example='105'),
  // 正常运行应用数
  normalAppCount: long(name='normal_app_count', example='100'),
  // 告警应用数
  alarmAppCount: long(name='alarm_app_count', example='5'),
  // 自定义监控配置数
  customPluginCount: long(name='custom_plugin_count', example=''),
  // 告警规则配置数
  alarmRuleCount: long(name='alarm_rule_count', example=''),
  // 告警模板配置数
  alarmTplCount: long(name='alarm_tpl_count', example=''),
  // 日志路径数
  logConfigCount: long(name='log_config_count', example=''),
  // mem top排序应用
  memTopApps: [ AppTopItem ](name='mem_top_apps', example=''),
  // cpu top排序应用
  cpuTopApps: [ AppTopItem ](name='cpu_top_apps', example=''),
  // 磁盘 top排序应用
  diskTopApps: [ AppTopItem ](name='disk_top_apps', example=''),
  // 告警top排序应用
  alarmTopApps?: [ AppTopItem ](name='alarm_top_apps', example=''),
  // error top排序应用
  errorTopApps?: [ AppTopItem ](name='error_top_apps', example=''),
}

// 权限
model AuthDO {
  // ID
  id: long(name='id', example='1'),
  // 登录名
  userLoginName: string(name='user_login_name', example='luyou.yl'),
  // 权限码
  auth: string(name='auth', example='EDIT'),
  // 权限的资源类型
  resourceType: string(name='resource_type', example='FOLDER'),
  // 权限的资源ID (如果FOLDER或CUSTOM_PLUGIN，需要自行转成Number类型)
  resourceId: string(name='resource_id', example='15'),
}

// 时间统计
model EventStat {
  // 告警时间
  alarmTime?: long(name='alarm_time', example=''),
  // 告警等级
  alarmLevel?: long(name='alarm_level', example=''),
  // 告警统计数
  count?: long(name='count', example=''),
}

// APP配置
model AppSetting {
  // 租户ID
  tenantId: long(name='tenant_id', example='123'),
  // 工作空间ID
  workspaceId: long(name='workspace_id', example='123'),
  // 配置信息
  setting?: string(name='setting', example='{"xxx":"xxx"}'),
  // 应用名称
  appName: string(name='app_name', example='monitorprod'),
  // 应用监控是否开启采集
  collectEnable: boolean(name='collect_enable', example='true, false'),
}

// 链路搜索页面的tags配置项
model TraceSpanSearchTagConfig {
  // 字段的key
  key?: string(name='key', example='key'),
  // 中文标签
  name?: string(name='name', example='name'),
  // 是否支持多选
  multiple?: boolean(name='multiple', example='multiple'),
  // 如果该数组非空, 那么表明用户只能从数组给定的值中进行选择, 否则意味着用户可以随意填写.
  values?: [ string ](name='values', example=''),
}

//  
model XSiteExport {
  //  
  dashboards?: [ XDashboardQuery ](name='dashboards', example=''),
  //  
  datasources?: [ XDatasourceQuery ](name='datasources', example=''),
  // alert uuids
  alerts?: [ string ](name='alerts', example=' '),
}

// 总览页配置信息统计
model ConfigOverviewDto {
  // 自定义监控配置数
  customPluginCount: long(name='custom_plugin_count', example='custom_plugin_count'),
  // 告警规则配置数
  alarmRuleCount: long(name='alarm_rule_count', example=''),
  // 告警规则配置数
  alarmTplCount: long(name='alarm_tpl_count', example=''),
}

// 应用监控 - 单个应用
model MonitorApp {
  // 应用 ID
  id: long(name='id', example='1000305'),
  // 应用展示名称
  displayName: string(name='display_name', example='rmstest'),
  // 来源
  sourceFrom: string(name='source_from', example='uniMeta'),
  // 应用描述
  description?: string(name='description', example='description of the app'),
  // 拼接好的stack_universal_table_id
  stackUniversalTableId?: string(name='stack_universal_table_id', example='sofacloud*sofa_app*1*1*apconsole'),
}

// 应用告警规则总数
model AppAlarmRuleCount {
  // 应用名称
  appName: string(name='app_name', example='RMS-monitorprod'),
  // 应用告警规则总数
  alarmRuleCount: long(name='alarm_rule_count', example='1'),
}

// 物理机信息
model MtmNc {
  // id
  id: long(name='id', example='id'),
  // 创建时间
  gmtCreate: long(name='gmt_create', example='创建时间'),
  // 修改时间
  gmtModified: long(name='gmt_modified', example='修改时间'),
  // 主机名
  hostname: string(name='hostname', example='主机名'),
  // ip
  ip: string(name='ip', example='ip'),
  // sn
  sn: string(name='sn', example='sn'),
  // 分组
  nodeGroup: string(name='node_group', example='分组'),
  // cpu_num
  cpuNum: long(name='cpu_num', example='cpu_num'),
  // 内存 M
  memMega: long(name='mem_mega', example='内存 M'),
  // 磁盘 M
  diskMega: long(name='disk_mega', example='磁盘 M'),
  // 物理机房
  idc: string(name='idc', example='物理机房'),
  // 状态
  status: string(name='status', example='状态'),
  // 机型
  smName: string(name='sm_name', example='机型'),
  // 采集ip
  collectIp: string(name='collect_ip', example='采集ip'),
  // idc 机房
  idcName: string(name='idc_name', example='idc 机房'),
  // sigma 集群
  cluster: string(name='cluster', example='sigma 集群'),
}

// metric query
model XMetricQuery {
  //  
  timeout?: long(name='timeout', example=''),
  // start timestamp
  start?: long(name='start', example=''),
  // end timestamp
  end?: long(name='end', example=' '),
  // value step
  step?: long(name='step', example=''),
  // instant time
  time?: long(name='time', example=' '),
  // query clause
  query?: string(name='query', example=' '),
  //  
  queryMetadatas?: [ XMetricQueryMetadata ](name='query_metadatas', example=' '),
  //  
  datasourceUuid?: string(name='datasource_uuid', example=' '),
  //  
  metricName?: string(name='metric_name', example=' '),
  //  
  tableName?: string(name='table_name', example=' '),
  //  
  conditions?: [ XCondition ](name='conditions', example=' '),
  //  
  tag?: string(name='tag', example=' '),
  //  
  tenantId?: long(name='tenant_id', example=''),
  //  
  workspaceId?: long(name='workspace_id', example=''),
  //  
  datasourceType?: string(name='datasource_type', example=' '),
  //  
  nullValueType?: string(name='null_value_type', example='NULL_AS_NULL'),
}

// 统一告警规则模板
model UnifiedAlarmTplVO {
  // 主键
  id?: long(name='id', example=''),
  // 模板名称
  name?: string(name='name', example='""'),
  // 用于区分规则模板和消息模板
  category?: string(name='category', example='"rule" "notify"'),
  // 规则配置
  ruleConfig?: string(name='rule_config', example='详见UnifiedAlarmRuleDO模型中的RuleConfig字段'),
  // 告警等级
  level?: long(name='level', example='0:p0 1:p1 以此类推'),
  // 检测频率
  step?: long(name='step', example=''),
  // 触发周期
  pendingHit?: long(name='pending_hit', example=''),
  // 恢复周期
  recoveredHit?: long(name='recovered_hit', example=''),
  // 静默时间
  silenceTime?: long(name='silence_time', example=''),
  // 时区
  timeZone?: string(name='time_zone', example='“localhost”'),
  // 应急处理人
  emergency?: string(name='emergency', example='“weix”'),
  // 应急处理链接
  emergencyUrl?: string(name='emergency_url', example='“www.xxx.com”'),
  // 无数据告警 这是个开关
  alarmEmpty?: long(name='alarm_empty', example=''),
  // 告警触发时通知 开关
  notifyFiring?: long(name='notify_firing', example=''),
  // 告警恢复时通知 开关
  notifyRecovered?: long(name='notify_recovered', example=''),
  // 告警无数据时通知 开关
  notifyEmpty?: long(name='notify_empty', example=''),
  // 通知渠道
  channels?: string(name='channels', example='“”'),
  // 通知模板id
  notifyTplId?: long(name='notify_tpl_id', example=''),
  // 通知时间
  notifyTimeFilter?: string(name='notify_time_filter', example='""'),
  // 生效范围
  scope?: string(name='scope', example='"tenant"'),
  // 如scope为租户 则值为tenant_id
  scopeIdentity?: long(name='scope_identity', example=''),
  // 订阅关系的对象
  alarmSub?: string(name='alarm_sub', example='前端将订阅关系对象转string'),
  // 租户id
  tenantId?: long(name='tenant_id', example='1'),
  // 工作空间id
  workspaceId?: long(name='workspace_id', example='3'),
  // 创建人
  creator?: string(name='creator', example='autcloudadmin'),
  // 修改人
  modifier?: string(name='modifier', example='autcloudadmin'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2021-12-1 15:22:01'),
  // 修改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2021-5-27 10:08:52'),
  // 状态
  status?: long(name='status', example='1'),
}

// TraasCellDto
model TraasCellDto {
  // uuid
  uuid: string(name='uuid', example='uuid'),
  // name
  name: string(name='name', example='name'),
  // display_name
  displayName?: string(name='display_name', example='display_name'),
  // tenant_name
  tenantUuid: string(name='tenant_uuid', example='tenant_name'),
  // tenant_name
  tenantName: string(name='tenant_name', example='tenant_name'),
  // workspace_uuid
  workspaceUuid: string(name='workspace_uuid', example='workspace_uuid'),
  // workspace_name
  workspaceName: string(name='workspace_name', example='workspace_name'),
  // zone_uuid
  zoneUuid: string(name='zone_uuid', example='zone_uuid'),
  // zone_name
  zoneName: string(name='zone_name', example='zone_name'),
  // outside_id
  outsideId: string(name='outside_id', example='outside_id'),
  // source_from
  sourceFrom: string(name='source_from', example='source_from'),
  // extension
  extension: string(name='extension', example='extension'),
  // gmt_create
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmt_modified
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// TraasAppServerDto
model TraasAppServerDto {
  // uuid
  uuid: string(name='uuid', example='uuid'),
  // hostname
  hostname: string(name='hostname', example='hostname'),
  // ip
  ip: string(name='ip', example='ip'),
  // collect_id
  collectId: string(name='collect_id', example='collect_id'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid', example='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name', example='tenant_name'),
  // workspace_uuid
  workspaceUuid?: string(name='workspace_uuid', example='workspace_uuid'),
  // workspace_name
  workspaceName?: string(name='workspace_name', example='workspace_name'),
  // cell_uuid
  cellUuid?: string(name='cell_uuid', example='cell_uuid'),
  // zone_uuid
  zoneUuid?: string(name='zone_uuid', example='zone_uuid'),
  // app_uuid
  appUuid?: string(name='app_uuid', example='app_uuid'),
  // app_name
  appName?: string(name='app_name', example='app_name'),
  // app_service_uuid
  appServiceUuid?: string(name='app_service_uuid', example='app_service_uuid'),
  // vm_uuid
  vmUuid?: string(name='vm_uuid', example='vm_uuid'),
  // pod_uuid
  podUuid?: string(name='pod_uuid', example='pod_uuid'),
  // outside_id
  outsideId?: string(name='outside_id', example='outside_id'),
  // source_from
  sourceFrom: string(name='source_from', example='source_from'),
  // extension
  extension?: string(name='extension', example='extension'),
  // status
  status: boolean(name='status', example='true, false'),
  // host_ip
  hostIp: string(name='host_ip', example='host_ip'),
  // gmt_create
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmt_modified
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// 指标
model UnifiedAlarmMetric {
  // 指标
  metric: string(name='metric', example='cpu_util'),
  // 指标数据
  data: [ MetricData ](name='data', example=''),
}

// 用户操作记录
model UserOplogDO {
  // 操作记录ID
  id: long(name='id', example='315'),
  // 表名
  tableName: string(name='table_name', example='stackGeneratedConfig'),
  // 表实体对应ID
  tableEntityId: long(name='table_entity_id', example='8'),
  // 操作类型(可以是CREATE、UPDATE、DELETE)
  opType: string(name='op_type', example='CREATE'),
  // 操作时间 (直接取日志创建时间)
  gmtCreate: long(name='gmt_create', example='1617245480725'),
  // 操作人
  creater: string(name='creater', example='the login name'),
  // tableName+table_entity_id，方便查询
  combineQuery: string(name='combine_query', example='workspace-3'),
  // 实体类型
  entityType?: string(name='entity_type', example='cms'),
  // 名称
  name?: string(name='name', example='the cms name'),
  // 操作前的内容 (JSON String)
  opBeforeContext?: string(name='op_before_context', example='{"id":3,"name":"FIN-DEV-AKE2.0","displayName":"FIN-DEV-AKE2.0","outsideWsId":"73040000000007","tenantId":1,"outsideTenantId":"paas_outsidetenant_id"}'),
  // 操作后的内容 (JSON String)
  opAfterContext?: string(name='op_after_context', example='{"id":3,"name":"FIN-DEV-AKE2.0","displayName":"FIN-DEV-AKE2.0","outsideWsId":"73040000000007","tenantId":1,"outsideTenantId":"paas_outsidetenant_id"}'),
}

// LongKeySet
model LongKeySet {
  // key
  key: string(name='key', example='key'),
  // value
  value: long(name='value', example='value'),
}

// AppAlarmStats
model AppAlarmStats {
  // app_name
  appName: string(name='app_name', example='app_name'),
  // count
  count: long(name='count', example='count'),
}

// TokenConfig
model TokenConfig {
  // token
  token?: string(name='token', example='11'),
  // 创建时间
  gmtCreate?: string(name='gmt_create', example='2018-10-10 10:10:00'),
  // 修改时间
  gmtModified?: string(name='gmt_modified', example='2018-10-10 10:10:00'),
  // last_editor
  lastEditor?: string(name='last_editor', example='1'),
}

// 监控告警传输对象
model AlarmSubDTO {
  // ID
  id: long(name='id', example='15'),
  // 告警展示名称
  displayName: string(name='display_name', example='中间件云产品'),
  // 修改人
  modifier: string(name='modifier', example='antcloudcore@antfin.com'),
  // 修改时间
  gmtModified: long(name='gmt_modified', example='1610357282854'),
  // 告警订阅类型(folder、customplugin)
  subscriptionType: string(name='subscription_type', example='folder'),
  // 通知组列表
  userGroups?: [ UserGroup ](name='user_groups', example=''),
  // 联系人登录名数组
  userLoginNames?: [ string ](name='user_login_names', example=''),
}

// 拓扑节点
model TopologyNode {
  // 应用名
  app?: string(name='app', example='web'),
  // 节点类型: APP DB MQ CACHE
  type?: string(name='type', example='APP'),
  // 节点id
  id?: string(name='id', example='id'),
}

//  
model XSiteExportData {
  //  
  dashboards?: [ XDashboardCRULResponseCURequest ](name='dashboards', example=''),
  //  
  datasources?: [ XDatasourceCRULResponseCURequest ](name='datasources', example=''),
  //  
  alerts?: [ UnifiedAlarmRuleVO ](name='alerts', example=''),
  //  
  stats?: XSiteExportStats(name='stats', example=''),
  // 自定义告警的BASE64编码
  alarmRulesV2Custom?: string(name='alarm_rules_v2_custom', example='AAAA'),
}

// AlarmHistoryListKeySetMap
model AlarmHistoryListKeySetMap {
  // key
  key: string(name='key', example='key'),
  // value
  entity: [ AlarmHistoryListKeySet ](name='entity', example='value'),
}

// 主机元数据
model TraasHostMachineDto {
  // uuid
  uuid: string(name='uuid', example='uuid'),
  // hostname
  hostname: string(name='hostname', example='hostname'),
  // ip
  ip: string(name='ip', example='ip'),
  // collect_ip
  collectIp: string(name='collect_ip', example='collect_ip'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid', example='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name', example='tenant_name'),
  // workspace_uuid
  workspaceUuid?: string(name='workspace_uuid', example='workspace_uuid'),
  // workspace_name
  workspaceName?: string(name='workspace_name', example='workspace_name'),
  // zone_uuid
  zoneUuid?: string(name='zone_uuid', example='zone_uuid'),
  // zone_name
  zoneName?: string(name='zone_name', example='zone_name'),
  // outside_id
  outsideId?: string(name='outside_id', example='outside_id'),
  // source_from
  sourceFrom: string(name='source_from', example='source_from'),
  // extension
  extension?: string(name='extension', example='extension'),
  // gmt_create
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmt_modified
  gmtModified?: string(name='gmt_modified', example='gmt_modified'),
}

// drm 推送配置地址
model SiteWithDrm {
  // 站点名称
  siteName: string(name='site_name', example='test'),
  // 端点
  endpoint: string(name='endpoint', example='test'),
  // ldc
  ldcs: [ string ](name='ldcs', example=''),
}

// 单链路树状图树节点
model TraceTreeItem {
  // 应用名
  app?: string(name='app', example='web'),
  // 组件类型
  component?: string(name='component', example='SOFAPRC'),
  // 耗时, 毫秒
  duration?: long(name='duration', example='5000'),
  // 本地应用机房信息
  idcName?: string(name='idc_name', example='idc'),
  // 描述信息
  info?: string(name='info', example='info'),
  // ip
  ip?: string(name='ip', example='192.168.1.2'),
  // 对应的span的类型 枚举类型 CLIENT SERVER CONSUMER PRODUCER
  kind?: string(name='kind', example='CLIENT'),
  // parent span id
  parentId?: string(name='parent_id', example='0'),
  // 请求体字节大小, 如果取不到就为-1
  requestSize?: long(name='request_size', example='100'),
  // 响应体大小, 如果取不到就为-1
  responseSize?: long(name='response_size', example='1024'),
  // span id
  spanId?: string(name='span_id', example='0.1'),
  // 开始时间, 毫秒时间戳
  startTime?: long(name='start_time', example=''),
  // 状态码，0或者00代表成功
  status?: string(name='status', example='00'),
  // 键值对
  tags?: [ KeySet ](name='tags', example=''),
  // 节点的id, 没有业务语义, 用于帮助前端还原树状结构
  treeId?: string(name='tree_id', example='"1"'),
  // 父节点的id, 如果为0表示这是一个顶级节点, 没有业务语义, 用于帮助前端还原树状结构
  treeParentId?: string(name='tree_parent_id', example='"0"'),
  // 方法名
  name?: string(name='name', example='test'),
  // 本地应用所属单元
  cellName?: string(name='cell_name', example='cell'),
  // 远端应用名
  remoteApp?: string(name='remote_app', example='remote_app'),
  // 远端应用ip
  remoteIp?: string(name='remote_ip', example='127.0.0.1'),
  // 远端应用机房信息
  remoteIdcName?: string(name='remote_idc_name', example='idc'),
  // 远端应用所属单元
  remoteCellName?: string(name='remote_cell_name', example='cell'),
  // 代表是否本节点数据缺失
  missing?: boolean(name='missing', example='true, false'),
  // 代表是否有子节点
  hasChildren?: boolean(name='has_children', example='true, false'),
}

// agent版本
model AgentVersion {
  // 版本号
  version: string(name='version', example='v1.0'),
  // 存储url
  url: string(name='url', example='http://xxxx'),
}

// PluginModelDO
model PluginModelDO {
  // id
  id: long(name='id', example='id'),
  // parent_folder_id
  parentFolderId: long(name='parent_folder_id', example='parent_folder_id'),
  // plugin_id
  pluginId: long(name='plugin_id', example='plugin_id'),
  // plugin_type
  pluginType: string(name='plugin_type', example='plugin_type'),
  // name
  name: string(name='name', example='name'),
  // xflush_apps
  xflushApps: string(name='xflush_apps', example='xflush_apps'),
  // stack_expression
  stackExpression: StackExpression(name='stack_expression', example='stack_expression'),
  // cal_conf
  calConf: string(name='cal_conf', example='cal_conf'),
  // opsmeta_schema
  opsmetaSchema: OpsmetaSchema(name='opsmeta_schema', example='opsmeta_schema'),
  // save_schema
  saveSchema: SaveSchema(name='save_schema', example='save_schema'),
  // status
  status: StatusDO(name='status', example='status'),
  // outside_domain_id
  outsideDomainId: long(name='outside_domain_id', example='outside_domain_id'),
  // old_folder_id
  oldFolderId: long(name='old_folder_id', example='old_folder_id'),
  // tenant_id
  tenantId: long(name='tenant_id', example='tenant_id'),
  // workspace_id
  workspaceId: long(name='workspace_id', example='workspace_id'),
  // biz_domain_id
  bizDomainId: long(name='biz_domain_id', example='biz_domain_id'),
  // creater
  creater: string(name='creater', example='creater'),
  // gmt_create
  gmtCreate: long(name='gmt_create', example='gmt_create'),
  // modifier
  modifier: string(name='modifier', example='modifier'),
  // gmt_modified
  gmtModified: long(name='gmt_modified', example='gmt_modified'),
  // alarm_pkgs
  alarmPkgs: [ AlarmPkgDO ](name='alarm_pkgs', example='alarm_pkgs'),
  // noc
  noc: string(name='noc', example='noc'),
  // position
  position: string(name='position', example='position'),
  // alarmed
  alarmed: boolean(name='alarmed', example='true, false'),
  // recent_alarm_history_id
  recentAlarmHistoryId: string(name='recent_alarm_history_id', example='recent_alarm_history_id'),
  // recent_alarm
  recentAlarm: long(name='recent_alarm', example='recent_alarm'),
  // key_cms
  keyCms: boolean(name='key_cms', example='true, false'),
  // key_cms_sort
  keyCmsSort: long(name='key_cms_sort', example='key_cms_sort'),
  // status_desc
  statusDesc: string(name='status_desc', example='status_desc'),
  // data_from
  dataFrom: long(name='data_from', example='data_from'),
  // data_to
  dataTo: long(name='data_to', example='data_to'),
  // from_source
  fromSource: string(name='from_source', example='from_source'),
}

// TraasAppTagDto
model TraasAppTagDto {
  // uuid
  uuid: string(name='uuid', example='uuid'),
  // tag_value
  tagValue?: string(name='tag_value', example='tag_value'),
  // tag_key
  tagKey: string(name='tag_key', example='tag_key'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid', example='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name', example='tenant_name'),
  // app_uuid
  appUuid?: string(name='app_uuid', example='app_uuid'),
  // app_name
  appName?: string(name='app_name', example='app_name'),
  // outside_id
  outsideId?: string(name='outside_id', example='outside_id'),
  // source_from
  sourceFrom: string(name='source_from', example='source_from'),
  // extension
  extension?: string(name='extension', example='extension'),
  // gmt_create
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmt_modified
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// 告警历史时间页面显示对象
model UnifiedAlarmEventVO {
  // 告警事件id
  alarmEventId?: string(name='alarm_event_id', example='""'),
  // 告警内容
  alarmContent?: string(name='alarm_content', example='"告警内容"'),
  // 告警等级
  alarmLevel?: long(name='alarm_level', example='1'),
  // 触发状态
  status?: long(name='status', example='1'),
  // 告警对象
  alarmTarget?: string(name='alarm_target', example='"告警对象"'),
  // 告警产生时间
  alarmStartTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='alarm_start_time', example='2021-12-1 15:22:01'),
  // 告警恢复时间
  alarmRecoverTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='alarm_recover_time', example='2021-12-1 15:22:01'),
  // 分组的告警历史集合
  alarmHistoryList?: [ UnifiedAlarmHistoryVO ](name='alarm_history_list', example='分组的告警历史集合'),
  // 历史id
  alarmHistoryId?: long(name='alarm_history_id', example='213'),
  // type
  alarmTargetType?: string(name='alarm_target_type', example='""'),
  // 告警类型
  alarmType?: string(name='alarm_type', example='[自定义配置,应用监控]'),
  // 数据源跳转url
  alarmUrl?: string(name='alarm_url', example='/business/product/multiMinute/preview/2000021'),
  // 数据源名称
  dataSourceName?: string(name='data_source_name', example='PQL'),
  // 目标对象是否已经删除
  alarmTargetDeleted?: boolean(name='alarm_target_deleted', example='true, false'),
  // 静默剩余时间
  silenceRemainTime?: long(name='silence_remain_time', example='1'),
  // 告警规则ID
  alarmRuleId?: long(name='alarm_rule_id', example='1'),
}

// traasmeta zone
model TraasZoneDto {
  // uuid
  uuid: string(name='uuid', example='uuid'),
  // name
  name: string(name='name', example='name'),
  // display_name
  displayName?: string(name='display_name', example='display_name'),
  // outside_id
  outsideId?: string(name='outside_id', example='outside_id'),
  // source_from
  sourceFrom: string(name='source_from', example='source_from'),
  // extension
  extension?: string(name='extension', example='extension'),
  // region_uuid
  regionUuid: string(name='region_uuid', example='region_uuid'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid', example='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name', example='tenant_name'),
  // gmt_create
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmt_modified
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// traasmeta tenant
model TraasTenantDto {
  // uuid
  uuid: string(name='uuid', example='uuid'),
  // name
  name: string(name='name', example='name'),
  // display_name
  displayName?: string(name='display_name', example='display_name'),
  // outside_id
  outsideId?: string(name='outside_id', example='outside_id'),
  // source_from
  sourceFrom: string(name='source_from', example='source_from'),
  // extension
  extension?: string(name='extension', example='extension'),
}

//  
model XKeyJson {
  //  
  key: string(name='key', example=' '),
  // json string
  json: string(name='json', example=' '),
}

// 告警规则绑定关系
model UnifiedAlarmRuleBindingVO {
  // 租户 ID
  tenantId: long(name='tenant_id', example='12'),
  // 工作空间 ID
  workspaceId: long(name='workspace_id', example='123'),
  // 监控对象类型
  alarmTargetType: string(name='alarm_target_type', example='APP'),
  // 监控对象名称
  alarmTargetIdentity?: string(name='alarm_target_identity', example='monitorprod'),
  // 告警规则 ID
  alarmRuleId: long(name='alarm_rule_id', example='12345'),
  // 数据源类型
  datasourceType?: string(name='datasource_type', example='CUSTOM'),
  // 数据源 ID
  datasource?: string(name='datasource', example='SPM@@625'),
  // 告警规则详情
  alarmRule?: UnifiedAlarmRuleVO(name='alarm_rule', example=''),
}

// 链路详情的拓扑节点
model TraceDetailTopologyItem {
  // 节点的id, 没有业务语义, 用于帮助前端还原树状结构
  treeId?: string(name='tree_id', example='"1"'),
  // 父节点的id, 如果为0表示这是一个顶级节点, 没有业务语义, 用于帮助前端还原树状结构
  treeParentId?: string(name='tree_parent_id', example='"0"'),
  // 应用名
  app?: string(name='app', example='app'),
  // 应用ip
  ip?: string(name='ip', example='192.168.1.2'),
  // 客户端是否经过mesh
  hasClientMesh?: boolean(name='has_client_mesh', example='true, false'),
  // 服务端是否经过mesh
  hasServerMesh?: boolean(name='has_server_mesh', example='true, false'),
  // 数据中心
  idcName?: string(name='idc_name', example='idc'),
  // 单元名
  cellName?: string(name='cell_name', example='cell'),
  // 方法名
  name?: string(name='name', example='test'),
  // 客户端开始时间, 毫秒时间戳
  clientStartTime?: long(name='client_start_time', example=''),
  // 服务端开始时间, 毫秒时间戳
  serverStartTime?: long(name='server_start_time', example=''),
  // 客户端毫秒耗时
  clientDuration?: long(name='client_duration', example=''),
  // 服务端毫秒耗时
  serverDuration?: long(name='server_duration', example=''),
  // 客户端状态码
  clientStatus?: string(name='client_status', example='00'),
  // 服务端状态码
  serverStatus?: string(name='server_status', example='00'),
  // 客户端组件类型
  clientComponent?: string(name='client_component', example='SOFARPC'),
  // 服务端组件类型
  serverComponent?: string(name='server_component', example='SOFARPC'),
  // 整体状态码
  status?: string(name='status', example='00'),
  // 健康度耗时配置
  apdexThreshold?: string(name='apdex_threshold', example='500.0'),
  // 健康度
  apdexStatus?: string(name='apdex_status', example='RED'),
  // 健康度数值
  apdexValue?: string(name='apdex_value', example='"1.00T"'),
}

// 栈告警套餐配置
model StackAlarmRule {
  // ID
  id: long(name='id', example='15'),
  // 告警套餐配置
  config: string(name='config', example='{\"alarmPkgs\":[]}'),
  // 栈 ID
  stackId: long(name='stack_id', example='1'),
  // 指标 ID (如pv对应的ID)
  stackMetricId: long(name='stack_metric_id', example='5'),
  // 关联报警relation (如果未关联，默认为-1)
  stackRelationId: long(name='stack_relation_id', example='-1'),
  // 实体对象复合 ID
  stackUniversalTableId: string(name='stack_universal_table_id', example='sofacloud*sofa_app*1*3*MS-antscheduler'),
}

// 技术栈产品配置
model StackGeneratedConfig {
  // 配置 ID
  id: long(name='id', example='11223344'),
  // 所属技术栈 ID
  stackId: long(name='stack_id', example='11223344'),
  // 技术栈名称
  stackName: string(name='stack_name', example='sofacloud'),
  // 技术栈版本
  stackVersion: string(name='stack_version', example='4.2'),
  // 栈的一个实体对象 ID
  stackEntityId: long(name='stack_entity_id', example='15'),
  // 栈的一个实体对象名称
  stackEntityName: string(name='stack_entity_name', example='sofa_app'),
  // 实体的一个监控项 ID
  stackMonitorItemId: long(name='stack_monitor_item_id', example='20'),
  // 实体的一个监控项名称
  stackMonitorItemName: string(name='stack_monitor_item_name', example='dalPressure'),
  // 栈实体
  stackUniversalTableId: string(name='stack_universal_table_id', example='sofacloud*sofa_app*1*8*ACVIP-acvip'),
  // xflush应用名称
  xflushApp: string(name='xflush_app', example='ACVIP-acvip'),
  // 是否迁移过来
  xflushMove: boolean(name='xflush_move', example='true, false'),
  // xflush_type
  xflushType: string(name='xflush_type', example='dalPressure'),
  // 是否开启
  isOpen: boolean(name='is_open', example='true, false'),
  // 存储规则(JSON String, 使用前需要解析)
  storageConfig: string(name='storage_config', example='{"capacity":10,"maxKeySize":1000,"time":10080}'),
  // 是否自定义
  useCustom: boolean(name='use_custom', example='true, false'),
  // xflush配置(JSON String, 使用前需要解析)
  xflushConfig?: string(name='xflush_config', example='{"alarms":[{"view":"server","id":"1","tagValue":"PROD","frequency":0,"silentMinute":"1","timeZone":"localhost","timeZoneCustom":false}],"saveSchema":{"maxKeySize":1000,"capacity":10}}'),
}

// 链路搜索的数据库配置
model TraceSpanSearchDbConfig {
  // tracer插件名
  tracerPluginName: string(name='tracer_plugin_name', example='datasource'),
  // 数据源tag key
  datasourceKey: string(name='datasource_key', example='db.endpoint'),
  // 数据库tag key
  databaseKey: string(name='database_key', example='db.database'),
  // 支持的数据库类型列表
  supportedDbTypes: [ string ](name='supported_db_types', example=''),
}

// TraasWorkspaceGroupDto
model TraasWorkspaceGroupDto {
  // uuid
  uuid: string(name='uuid', example='uuid'),
  // uuid
  name: string(name='name', example='uuid'),
  // display_name
  displayName?: string(name='display_name', example='display_name'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid', example='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name', example='tenant_name'),
  // outside_id
  outsideId?: string(name='outside_id', example='outside_id'),
  // source_from
  sourceFrom: string(name='source_from', example='source_from'),
  // extension
  extension?: string(name='extension', example='extension'),
  // gmt_create
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmt_modified
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// 实体字段
model TraasEntityFieldDto {
  // name
  name: string(name='name', example='name'),
  // display_name
  displayName: string(name='display_name', example='display_name'),
}

// 链路工作空间配置
model TraceWorkspaceSetting {
  // 工作空间名
  workspaceName: string(name='workspace_name', example='workspace_name'),
  // 是否开启采样率，false代表全采
  sampleEnabled?: boolean(name='sample_enabled', example='true, false'),
  // 采样率
  sampleRate?: string(name='sample_rate', example='"0.1"'),
  // 是否开启链路
  traceEnabled?: boolean(name='trace_enabled', example='true, false'),
  // 是否开启异常链路全采样
  errorTraceEnabled?: boolean(name='error_trace_enabled', example='true, false'),
  // 是否开启链路瘦身
  narrowSpanEnabled?: boolean(name='narrow_span_enabled', example='true, false'),
}

// 拓扑边
model TopologyEdge {
  // id
  id?: string(name='id', example='id'),
  // source节点的id
  source?: string(name='source', example='1'),
  // target节点的id
  target?: string(name='target', example='2'),
}

// 技术栈信息，用于查询告警规则、历史。
model AlarmStackInfo {
  // 是应用监控，还是自定义监控
  datasourceType?: string(name='datasource_type', example='["CUSTOM","STACK","TABLE]'),
  // 数据源
  datasource?: string(name='datasource', example='MM@@2000464'),
  // 应用类型
  alarmTargetType?: string(name='alarm_target_type', example='["APP","HOST"]'),
  // 应用名称
  alarmTargetIdentify?: string(name='alarm_target_identify', example='RMS-monitorprod'),
}

// AlarmLevelStatsVOKeySet
model AlarmLevelStatsVOKeySet {
  // key
  key: string(name='key', example='key'),
  // value
  value: AlarmLevelStatsVO(name='value', example='value'),
}

// app详情
model AppMeta {
  // workspace_id
  workspaceId: long(name='workspace_id', example='1'),
  // 应用名
  appName: string(name='app_name', example='test'),
  // app_id
  appId: long(name='app_id', example='1'),
}

// 阿里云开通信息
model AliyunOpenState {
  // 阿里云用户ID
  aliyunUserId: long(name='aliyun_user_id', example='123'),
  // 阿里云实例ID
  aliyunInstanceId: string(name='aliyun_instance_id', example='123'),
  // 监控租户ID
  tenantId: long(name='tenant_id', example='2'),
  // 监控租户名称
  tenantName: string(name='tenant_name', example='ABCDEF'),
  // 创建时间
  gmtCreate: long(name='gmt_create', example=''),
  // 修改时间
  gmtModified: long(name='gmt_modified', example=''),
  // 开通状态，0未开通，1开通
  state: long(name='state', example='1'),
}

// 用户资源收藏状态
model UserFavoriteVO {
  // 收藏资源 ID
  resourceId: string(name='resource_id', example='123'),
  // 收藏资源类型
  resourceType: string(name='resource_type', example='folder'),
  // 用户收藏的 ID
  userFavoriteId: long(name='user_favorite_id', example='123'),
}

// 单链路紧凑树状图树节点
model TraceCompactTreeItem {
  // 方法名
  name?: string(name='name', example='test'),
  // 节点的id, 没有业务语义, 用于帮助前端还原树状结构
  treeId?: string(name='tree_id', example='"1"'),
  // 父节点的id, 如果为0表示这是一个顶级节点, 没有业务语义, 用于帮助前端还原树状结构
  treeParentId?: string(name='tree_parent_id', example='"0"'),
  // 客户端span是否缺失
  clientMissing?: boolean(name='client_missing', example='true, false'),
  // 服务端span是否缺失
  serverMissing?: boolean(name='server_missing', example='true, false'),
  // 客户端是否经过mesh
  hasClientMesh?: boolean(name='has_client_mesh', example='true, false'),
  // 服务端是否经过mesh
  hasServerMesh?: boolean(name='has_server_mesh', example='true, false'),
  // 是否包含子节点
  hasChildren?: boolean(name='has_children', example='true, false'),
  // 客户端应用名
  clientApp?: string(name='client_app', example='app'),
  // 服务端应用名
  serverApp?: string(name='server_app', example='app'),
  // 客户端 ip
  clientIp?: string(name='client_ip', example='192.168.1.2'),
  // 服务端 ip
  serverIp?: string(name='server_ip', example='192.168.1.3'),
  // 客户端 idc
  clientIdcName?: string(name='client_idc_name', example='idc'),
  // 服务端 idc
  serverIdcName?: string(name='server_idc_name', example='idc'),
  // 客户端 cell
  clientCellName?: string(name='client_cell_name', example='cell'),
  // 服务端 cell
  serverCellName?: string(name='server_cell_name', example='cell'),
  // 客户端开始时间, 毫秒时间戳
  clientStartTime?: long(name='client_start_time', example=''),
  // 服务端开始时间, 毫秒时间戳
  serverStartTime?: long(name='server_start_time', example=''),
  // 客户端毫秒耗时
  clientDuration?: long(name='client_duration', example=''),
  // 服务端毫秒耗时
  serverDuration?: long(name='server_duration', example=''),
  // 客户端状态码
  clientStatus?: string(name='client_status', example='00'),
  // 服务端状态码
  serverStatus?: string(name='server_status', example='00'),
  // 客户端组件类型
  clientComponent?: string(name='client_component', example='SOFARPC'),
  // 服务端组件类型
  serverComponent?: string(name='server_component', example='SOFARPC'),
  // 客户端span
  clientSpan?: TraceSpan(name='client_span', example=''),
  // 服务端span
  serverSpan?: TraceSpan(name='server_span', example=''),
  // 整体状态码
  status?: string(name='status', example='00'),
  // 健康度耗时配置
  apdexThreshold?: string(name='apdex_threshold', example='500.0'),
  // 健康度
  apdexStatus?: string(name='apdex_status', example='RED'),
}

// 技术栈监控项
model StackMonitorItem {
  // 监控项 ID
  id: long(name='id', example='1'),
  // 技术栈 ID
  stackId: long(name='stack_id', example='1'),
  // 名称，必须是英文
  name: string(name='name', example='cal'),
  // 显示名
  displayName: string(name='display_name', example='调用缓存服务'),
  // 能否自定义
  canCustom: boolean(name='can_custom', example='true, false'),
  // 管理实体 ID
  manageEntityId: long(name='manage_entity_id', example='1'),
  // metric类型(dependency、error、service、resource等)
  metricType?: string(name='metric_type', example='dependency'),
  // 配置(JSON String, 使用前需要解析)
  config?: string(name='config', example='{"sourceDim":"sofacloud#sofa_server","express":"sofacloud#sofa_server.app"}'),
  // 标题
  title?: string(name='title', example='nodeResource'),
}

// ErrorRealte
model ErrorRealte {
  // ips
  ips: [ string ](name='ips', example='ips'),
  // log_paths
  logPaths: [ string ](name='log_paths', example='log_paths'),
}

// NodeOverviewDTO
model NodeOverviewDTO {
  // 磁盘 top排序应用
  diskTopNodes: [ NodeTopItem ](name='disk_top_nodes', example=''),
  // 	
  // cpu top排序应用
  cpuTopNodes: [ NodeTopItem ](name='cpu_top_nodes', example='cpu_top_apps'),
  // mem top排序应用
  memTopNodes: [ NodeTopItem ](name='mem_top_nodes', example='mem_top_apps'),
}

// InitInfo
model InitInfo {
  // auth_url
  authUrl: string(name='auth_url', example='auth_url'),
  // user
  user: MonitorUser(name='user', example='user'),
  // nav_head
  navHead: NavContent(name='nav_head', example='nav_head'),
}

// SpiConfig
model SpiConfig {
  // end_point或token
  endPoint?: string(name='end_point', example='http://1.1.1.1/app'),
  // 创建时间
  gmtCreate?: string(name='gmt_create', example='2018-10-10 10:10:00'),
  // 修改时间
  gmtModified?: string(name='gmt_modified', example='2018-10-10 10:10:00 '),
  // last_editor
  lastEditor?: string(name='last_editor', example='1'),
  // 字段格式
  fieldNamingStrategy?: string(name='field_naming_strategy', example='CamelCase'),
  // 云厂商类型
  cloudVendorType?: string(name='cloud_vendor_type', example='alicloud'),
}

// 测试演示
model AlarmTest {
  // 工作空间名称
  workspaceName: string(name='workspace_name', example='test'),
  // 告警规则id 
  alarmRuleId: long(name='alarm_rule_id', example='test'),
}

// FolderPaths
model FolderPaths {
  // paths
  paths: [ FolderPath ](name='paths', example='paths'),
}

// AlarmNotifyStatsKeySet
model AlarmNotifyStatsKeySet {
  // key
  key: string(name='key', example='key'),
  // value
  value: AlarmNotifyStats(name='value', example='value'),
}

// traasmeta region
model TraasRegionDto {
  // uuid
  uuid: string(name='uuid', example='uuid'),
  // name
  name: string(name='name', example='name'),
  // display_name
  displayName?: string(name='display_name', example='display_name'),
  // outside_id
  outsideId?: string(name='outside_id', example='outside_id'),
  // source_from
  sourceFrom: string(name='source_from', example='source_from'),
  // extension
  extension?: string(name='extension', example='extension'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid', example='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name', example='tenant_name'),
  // gmt_create
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmt_modified
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// 只包含一个string value的结构体, 用于解决阿里云POP OpenAPI的限制问题.
model StringValue {
  // value
  value?: string(name='value', example='value'),
}

// OpsDataCheck
model OpsDataCheck {
  // id
  id: long(name='id', example='1'),
  // 指标名称
  targetName: string(name='target_name', example='系统指标'),
  // 指标类型
  targetType: string(name='target_type', example='CUSTOM'),
  // 0：异常 1：正常
  status: long(name='status', example='状态'),
  // check_result
  checkResult: string(name='check_result', example='{"checkPoints":[{"threshold":95.0,"expect":2,"actual":2,"attend":100.0,"checkType":"attend"}],"errMsg":"{}"}'),
}

// 统一告警传输对象
model UnifiedAlarmSubDTO {
  // 订阅者id
  subscriber: string(name='subscriber', example='123'),
  // 订阅者类型
  subscriberType: string(name='subscriber_type', example='""'),
  // 订阅者来源
  subscriberSource: string(name='subscriber_source', example='LOCAL, IAM'),
  // 告警对象的名称
  subscriberName: string(name='subscriber_name', example='god'),
}

// 菜单配置
model MenuConfig {
  // 是否需要在顶部菜单展示各个入口
  showTopNavPages: boolean(name='show_top_nav_pages', example='true, false'),
  // 需要隐藏的菜单
  hideMenus: [ Menu ](name='hide_menus', example=''),
}

// x
model XTableResponse {
  //  
  resultType: string(name='result_type', example=' '),
  //  
  result: [ XTableData ](name='result', example=''),
}

// OpsCheckResult
model OpsCheckResult {
  // 应用名
  app: string(name='app', example='checkservice'),
  // 实际实例数
  actualInstanceNum: long(name='actual_instance_num', example='1'),
  // 预期实例数
  expectInstanceNum: long(name='expect_instance_num', example='2'),
  // 应用监控指标健康数
  appHealthyNum: long(name='app_healthy_num', example='1'),
  // 	
  // 应用监控指标异常数
  appUnhealthyNum: long(name='app_unhealthy_num', example='1'),
  // 自定义监控指标健康数
  customHealthyNum: long(name='custom_healthy_num', example='1'),
  // 自定义监控指标异常数
  customUnhealthyNum: long(name='custom_unhealthy_num', example='1'),
  // id
  id: long(name='id', example='1'),
  // 规则状态 0：已关闭 1：已开启
  ruleStatus: long(name='rule_status', example='0'),
  // rule_id
  ruleId?: string(name='rule_id', example='1'),
}

// WorkspaceSettingDetail
model WorkspaceSettingDetail {
  // old_alarm_lang
  oldAlarmLang?: string(name='old_alarm_lang', example='zh'),
  // 旧版告警开关
  oldAlarmEnable?: boolean(name='old_alarm_enable', example='true, false'),
  // unified_alarm_lang
  unifiedAlarmLang?: string(name='unified_alarm_lang', example='zh'),
  // unified_alarm_enable
  unifiedAlarmEnable?: boolean(name='unified_alarm_enable', example='true, false'),
  // trace_enable
  traceEnable?: boolean(name='trace_enable', example='true, false'),
  // 监控诊断开关
  diagnoseEnable?: boolean(name='diagnose_enable', example='true, false'),
}

// 告警对象
model AlarmTarget {
  // 告警对象标识:
  targetIdentity?: string(name='target_identity', example='应用名称、主机IP、pod name'),
  // 告警对象类型
  targetType?: string(name='target_type', example='app、host、pod'),
}

// OneConsoleRegion
model OneConsoleRegion {
  // region id
  id: string(name='id', example='region id'),
  // identity
  identity: string(name='identity', example='identity'),
  // name
  name: string(name='name', example='name'),
  // workspaces
  workspaces: [ OneConsoleWorkspace ](name='workspaces', example=''),
}

// AlarmHistoryStatsVO
model AlarmHistoryStatsVO {
  // trends
  trends: [ AlarmHistoryStatsDTOsKeySet ](name='trends', example='trends'),
}

// TraasWorkspaceDto
model TraasWorkspaceDto {
  // uuid
  uuid: string(name='uuid', example='uuid'),
  // name
  name: string(name='name', example='name'),
  // display_name
  displayName?: string(name='display_name', example='display_name'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid', example='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name', example='tenant_name'),
  // workspace_group_uuid
  workspaceGroupUuid?: string(name='workspace_group_uuid', example='workspace_group_uuid'),
  // region_uuid
  regionUuid?: string(name='region_uuid', example='region_uuid'),
  // zone_uuids
  zoneUuids?: [ string ](name='zone_uuids', example='zone_uuids'),
  // outside_id
  outsideId?: string(name='outside_id', example='outside_id'),
  // source_from
  sourceFrom: string(name='source_from', example='source_from'),
  // extension
  extension?: string(name='extension', example='extension'),
  // gmt_create
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmt_modified
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// 告警订阅结构体
model AlarmSub {
  // 主键 ID
  id: long(name='id', example='15'),
  // 用户登录名
  userLoginName?: string(name='user_login_name', example='the userLoginName'),
  // 告警组 ID
  userGroupId?: long(name='user_group_id', example='3'),
  // the notifyChannel
  notifyChannel?: string(name='notify_channel', example='the notifyChannel'),
  // 告警套餐 ID
  alarmPkgId?: long(name='alarm_pkg_id', example=''),
  // 自定义监控 ID
  customPluginId?: long(name='custom_plugin_id', example=''),
  // the stackAlarmRuleId
  stackAlarmRuleId?: long(name='stack_alarm_rule_id', example='the stackAlarmRuleId'),
  // 文件夹 ID
  folderId?: long(name='folder_id', example=''),
  // the metaGroupId
  metaGroupId?: long(name='meta_group_id', example=''),
  // 技术栈实体
  stackUniversalTableId?: string(name='stack_universal_table_id', example='sofacloud*sofa_app*1*3*RMS-rmsalarm'),
  // 创建时间
  gmtCreate: long(name='gmt_create', example=''),
  // 修改时间
  gmtModified?: long(name='gmt_modified', example=''),
  // 创建者
  creater: string(name='creater', example='creator'),
  // 修改人
  modifier?: string(name='modifier', example='modifier'),
  // 告警级别
  alarmLevel: long(name='alarm_level', example=''),
  // 降频通知开关
  notifyReduceSwitch: long(name='notify_reduce_switch', example=''),
  // web hook id
  alarmHttpWebHookId?: long(name='alarm_http_web_hook_id', example=''),
}

// 拉取日志的返回对象
model LogTail {
  // 代理IP
  agent: string(name='agent', example='11.124.63.126'),
  // 应用名
  app: string(name='app', example='RMS-monitorprod'),
  // 日志行数据
  lines: [ string ](name='lines', example='[""]'),
  // collectId
  nc: string(name='nc', example='100.88.106.208'),
}

// 时序指标数据, 相当于一条时间线
model TimeSeriesMetrics {
  // 开始时间, 毫秒时间戳
  startTime?: long(name='start_time', example='1574664720333'),
  // 结束时间, 毫秒时间戳
  endTime?: long(name='end_time', example='1574670361400'),
  // 标识 metrics，类似 sql 查询条件
  tags?: [ KeyValuePair ](name='tags', example='[{"key": "app", "value": "foo"}]'),
  // 指标的分类
  type?: string(name='type', example='db'),
  // Metrics 多个 point 的集合
  values?: [ TimeSeriesMetricsPoint ](name='values', example='{"values":[{"timestamp":1574664720333,"value":[{"key":"callCount","value":102},{"key":"errorCount","value":1},{"key":"rps","value":12.01}]}]}'),
}

model QueryRmsAgentloglocateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_id
  appId: string(name='app_id'),
  // batch_ip_files
  batchIpFiles: [ IpFileOs ](name='batch_ip_files'),
  // charset_str
  charsetStr: string(name='charset_str'),
  // error_msg
  errorMsg: string(name='error_msg'),
  // ips
  ips: [ string ](name='ips'),
  // ip_file
  ipFile: IpFileOs(name='ip_file'),
  // is_batch
  isBatch: boolean(name='is_batch'),
  // log_path
  logPath: string(name='log_path'),
  // log_paths
  logPaths: [ string ](name='log_paths'),
  // time
  time: long(name='time'),
}

model QueryRmsAgentloglocateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // success
  success?: boolean(name='success'),
  // error_message
  errorMessage?: CallErrorMessage(name='error_message'),
  // result
  result?: string(name='result'),
}

/**
 * Description: /agent/logLocate
 * Summary: /agent/logLocate
 */
async function queryRmsAgentloglocate(request: QueryRmsAgentloglocateRequest): QueryRmsAgentloglocateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsAgentloglocateEx(request, headers, runtime);
}

/**
 * Description: /agent/logLocate
 * Summary: /agent/logLocate
 */
async function queryRmsAgentloglocateEx(request: QueryRmsAgentloglocateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsAgentloglocateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.agentloglocate.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsAgenttailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // tenant_id
  tenantId: string(name='tenant_id'),
  // app_name
  appName: string(name='app_name'),
  // prefer_host
  preferHost: string(name='prefer_host'),
  // full_path
  fullPath: string(name='full_path'),
  // scan_dirs
  scanDirs: [ string ](name='scan_dirs'),
  // need_bytes
  needBytes: long(name='need_bytes'),
  // line_break_str
  lineBreakStr: string(name='line_break_str'),
  // extra_suffixs
  extraSuffixs: [ string ](name='extra_suffixs'),
  // charset_str
  charsetStr: string(name='charset_str'),
}

model QueryRmsAgenttailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // success
  success?: boolean(name='success'),
  // error_message
  errorMessage?: CallErrorMessage(name='error_message'),
  // result
  result?: string(name='result'),
}

/**
 * Description: /agent/tail
 * Summary: /agent/tail
 */
async function queryRmsAgenttail(request: QueryRmsAgenttailRequest): QueryRmsAgenttailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsAgenttailEx(request, headers, runtime);
}

/**
 * Description: /agent/tail
 * Summary: /agent/tail
 */
async function queryRmsAgenttailEx(request: QueryRmsAgenttailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsAgenttailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.agenttail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsAgentbrowserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_name
  appName: string(name='app_name'),
  // extra_suffixs
  extraSuffixs: [ string ](name='extra_suffixs'),
  // scan_dirs
  scanDirs: [ string ](name='scan_dirs'),
  // prefer_host
  preferHost: string(name='prefer_host'),
  // tenant_id
  tenantId: string(name='tenant_id'),
}

model QueryRmsAgentbrowserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // success
  success?: boolean(name='success'),
  // error_message
  errorMessage?: CallErrorMessage(name='error_message'),
  // result
  result?: string(name='result'),
}

/**
 * Description: /agent/browser
 * Summary: /agent/browser
 */
async function queryRmsAgentbrowser(request: QueryRmsAgentbrowserRequest): QueryRmsAgentbrowserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsAgentbrowserEx(request, headers, runtime);
}

/**
 * Description: /agent/browser
 * Summary: /agent/browser
 */
async function queryRmsAgentbrowserEx(request: QueryRmsAgentbrowserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsAgentbrowserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.agentbrowser.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsAlarmhistorytypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // from
  from: long(name='from'),
  // to
  to: long(name='to'),
}

model QueryRmsAlarmhistorytypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ AlarmTypeStatsVOKeySet ](name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: rms.alarmhistorytype.query
 * Summary: alarmTypeStats
 */
async function queryRmsAlarmhistorytype(request: QueryRmsAlarmhistorytypeRequest): QueryRmsAlarmhistorytypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsAlarmhistorytypeEx(request, headers, runtime);
}

/**
 * Description: rms.alarmhistorytype.query
 * Summary: alarmTypeStats
 */
async function queryRmsAlarmhistorytypeEx(request: QueryRmsAlarmhistorytypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsAlarmhistorytypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.alarmhistorytype.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsAlarmhistorylevelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // from
  from: long(name='from'),
  // to
  to: long(name='to'),
}

model QueryRmsAlarmhistorylevelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ AlarmLevelStatsVOKeySet ](name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: alarmLevelStats
 * Summary: alarmLevelStats
 */
async function queryRmsAlarmhistorylevel(request: QueryRmsAlarmhistorylevelRequest): QueryRmsAlarmhistorylevelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsAlarmhistorylevelEx(request, headers, runtime);
}

/**
 * Description: alarmLevelStats
 * Summary: alarmLevelStats
 */
async function queryRmsAlarmhistorylevelEx(request: QueryRmsAlarmhistorylevelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsAlarmhistorylevelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.alarmhistorylevel.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsNotifyhistoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // from
  from: long(name='from'),
  // login_name
  loginName: string(name='login_name'),
  // to
  to: long(name='to'),
}

model QueryRmsNotifyhistoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ AlarmNotifyStats ](name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /stats/notify/history
 * Summary: notifyHistoryStatsV2
 */
async function queryRmsNotifyhistory(request: QueryRmsNotifyhistoryRequest): QueryRmsNotifyhistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsNotifyhistoryEx(request, headers, runtime);
}

/**
 * Description: /stats/notify/history
 * Summary: notifyHistoryStatsV2
 */
async function queryRmsNotifyhistoryEx(request: QueryRmsNotifyhistoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsNotifyhistoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.notifyhistory.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsStackentityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model QueryRmsStackentityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ LongKeySet ](name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /stats/stack/entity
 * Summary: stackEntityStats
 */
async function queryRmsStackentity(request: QueryRmsStackentityRequest): QueryRmsStackentityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsStackentityEx(request, headers, runtime);
}

/**
 * Description: /stats/stack/entity
 * Summary: stackEntityStats
 */
async function queryRmsStackentityEx(request: QueryRmsStackentityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsStackentityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.stackentity.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsAlarmhistoryappcountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_list
  appList: AppStats(name='app_list'),
  // from
  from: long(name='from'),
  // to
  to: long(name='to'),
}

model QueryRmsAlarmhistoryappcountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ AlarmAppStats ](name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /stats/alarm/history/appCount
 * Summary: alarmHistoryAppCount
 */
async function queryRmsAlarmhistoryappcount(request: QueryRmsAlarmhistoryappcountRequest): QueryRmsAlarmhistoryappcountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsAlarmhistoryappcountEx(request, headers, runtime);
}

/**
 * Description: /stats/alarm/history/appCount
 * Summary: alarmHistoryAppCount
 */
async function queryRmsAlarmhistoryappcountEx(request: QueryRmsAlarmhistoryappcountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsAlarmhistoryappcountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.alarmhistoryappcount.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsAlarmhistoryappstatsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_list
  appList: AppStats(name='app_list'),
  // from
  from: long(name='from'),
  // to
  to: long(name='to'),
}

model QueryRmsAlarmhistoryappstatsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ AlarmHistoryListKeySetMap ](name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /alarm/history/appStats
 * Summary: alarmHistoryAppStats
 */
async function queryRmsAlarmhistoryappstats(request: QueryRmsAlarmhistoryappstatsRequest): QueryRmsAlarmhistoryappstatsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsAlarmhistoryappstatsEx(request, headers, runtime);
}

/**
 * Description: /alarm/history/appStats
 * Summary: alarmHistoryAppStats
 */
async function queryRmsAlarmhistoryappstatsEx(request: QueryRmsAlarmhistoryappstatsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsAlarmhistoryappstatsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.alarmhistoryappstats.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsAppstatspageableRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_list
  appList: AppStats(name='app_list'),
  // from
  from: long(name='from'),
  // to
  to: long(name='to'),
}

model QueryRmsAppstatspageableResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ AlarmHistoryListKeySetMap ](name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /alarm/history/appStatsPageable
 * Summary: appstatspageable
 */
async function queryRmsAppstatspageable(request: QueryRmsAppstatspageableRequest): QueryRmsAppstatspageableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsAppstatspageableEx(request, headers, runtime);
}

/**
 * Description: /alarm/history/appStatsPageable
 * Summary: appstatspageable
 */
async function queryRmsAppstatspageableEx(request: QueryRmsAppstatspageableRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsAppstatspageableResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.appstatspageable.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsLogreaderrorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app
  app: string(name='app'),
  // time
  time: long(name='time'),
}

model QueryRmsLogreaderrorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ErrorRealte(name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /logread/error
 * Summary: /logread/error
 */
async function queryRmsLogreaderror(request: QueryRmsLogreaderrorRequest): QueryRmsLogreaderrorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsLogreaderrorEx(request, headers, runtime);
}

/**
 * Description: /logread/error
 * Summary: /logread/error
 */
async function queryRmsLogreaderrorEx(request: QueryRmsLogreaderrorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsLogreaderrorResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.logreaderror.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsUniversalreadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cmds
  cmds: [ UniversalBodyCmd ](name='cmds'),
  // rid
  rid?: string(name='rid'),
}

model QueryRmsUniversalreadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ string ](name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /universal/read
 * Summary: /universal/read
 */
async function queryRmsUniversalread(request: QueryRmsUniversalreadRequest): QueryRmsUniversalreadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsUniversalreadEx(request, headers, runtime);
}

/**
 * Description: /universal/read
 * Summary: /universal/read
 */
async function queryRmsUniversalreadEx(request: QueryRmsUniversalreadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsUniversalreadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.universalread.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsUniversalwriteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cmds
  cmds: [ UniversalBodyCmd ](name='cmds'),
  // rid
  rid: string(name='rid'),
}

model QueryRmsUniversalwriteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ string ](name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /universal/write
 * Summary: /universal/write
 */
async function queryRmsUniversalwrite(request: QueryRmsUniversalwriteRequest): QueryRmsUniversalwriteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsUniversalwriteEx(request, headers, runtime);
}

/**
 * Description: /universal/write
 * Summary: /universal/write
 */
async function queryRmsUniversalwriteEx(request: QueryRmsUniversalwriteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsUniversalwriteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.universalwrite.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateRmsPluginRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // body
  body: string(name='body'),
  // file_id
  fileId: long(name='file_id'),
  // id
  id: long(name='id'),
  // outside_bizdomain
  outsideBizdomain: string(name='outside_bizdomain'),
  // plugin_id
  pluginId: long(name='plugin_id'),
  // table
  table: string(name='table'),
}

model CreateRmsPluginResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /modeling/plugin/create
 * Summary: create
 */
async function createRmsPlugin(request: CreateRmsPluginRequest): CreateRmsPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createRmsPluginEx(request, headers, runtime);
}

/**
 * Description: /modeling/plugin/create
 * Summary: create
 */
async function createRmsPluginEx(request: CreateRmsPluginRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRmsPluginResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.plugin.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteRmsPluginRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // body
  body: string(name='body'),
  // file_id
  fileId: long(name='file_id'),
  // id
  id: long(name='id'),
  // outside_bizdomain
  outsideBizdomain: string(name='outside_bizdomain'),
  // plugin_id
  pluginId: long(name='plugin_id'),
  // table
  table: string(name='table'),
}

model DeleteRmsPluginResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /modeling/plugin/delete
 * Summary: delete
 */
async function deleteRmsPlugin(request: DeleteRmsPluginRequest): DeleteRmsPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteRmsPluginEx(request, headers, runtime);
}

/**
 * Description: /modeling/plugin/delete
 * Summary: delete
 */
async function deleteRmsPluginEx(request: DeleteRmsPluginRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteRmsPluginResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.plugin.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CloseRmsPluginRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // body
  body: string(name='body'),
  // file_id
  fileId: long(name='file_id'),
  // id
  id: long(name='id'),
  // outside_bizdomain
  outsideBizdomain: string(name='outside_bizdomain'),
  // plugin_id
  pluginId: long(name='plugin_id'),
  // table
  table: string(name='table'),
}

model CloseRmsPluginResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /modeling/plugin/close
 * Summary: close
 */
async function closeRmsPlugin(request: CloseRmsPluginRequest): CloseRmsPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return closeRmsPluginEx(request, headers, runtime);
}

/**
 * Description: /modeling/plugin/close
 * Summary: close
 */
async function closeRmsPluginEx(request: CloseRmsPluginRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloseRmsPluginResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.plugin.close', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OpenRmsPluginRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // body
  body: string(name='body'),
  // file_id
  fileId: long(name='file_id'),
  // id
  id: long(name='id'),
  // outside_bizdomain
  outsideBizdomain: string(name='outside_bizdomain'),
  // plugin_id
  pluginId: long(name='plugin_id'),
  // table
  table: string(name='table'),
}

model OpenRmsPluginResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /modeling/plugin/open
 * Summary: open
 */
async function openRmsPlugin(request: OpenRmsPluginRequest): OpenRmsPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openRmsPluginEx(request, headers, runtime);
}

/**
 * Description: /modeling/plugin/open
 * Summary: open
 */
async function openRmsPluginEx(request: OpenRmsPluginRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenRmsPluginResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.plugin.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateRmsPluginRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // body
  body: string(name='body'),
  // file_id
  fileId: long(name='file_id'),
  // id
  id: long(name='id'),
  // outside_bizdomain
  outsideBizdomain: string(name='outside_bizdomain'),
  // plugin_id
  pluginId: long(name='plugin_id'),
  // table
  table: string(name='table'),
}

model UpdateRmsPluginResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /modeling/plugin/update
 * Summary: update
 */
async function updateRmsPlugin(request: UpdateRmsPluginRequest): UpdateRmsPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateRmsPluginEx(request, headers, runtime);
}

/**
 * Description: /modeling/plugin/update
 * Summary: update
 */
async function updateRmsPluginEx(request: UpdateRmsPluginRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateRmsPluginResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.plugin.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsPluginbytypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // body
  body: string(name='body'),
  // file_id
  fileId: long(name='file_id'),
  // id
  id: long(name='id'),
  // outside_bizdomain
  outsideBizdomain: string(name='outside_bizdomain'),
  // plugin_id
  pluginId: long(name='plugin_id'),
  // table
  table: string(name='table'),
}

model QueryRmsPluginbytypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ PluginModelDO ](name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /modeling/plugin/queryByPluginType
 * Summary: queryByPluginType
 */
async function queryRmsPluginbytype(request: QueryRmsPluginbytypeRequest): QueryRmsPluginbytypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsPluginbytypeEx(request, headers, runtime);
}

/**
 * Description: /modeling/plugin/queryByPluginType
 * Summary: queryByPluginType
 */
async function queryRmsPluginbytypeEx(request: QueryRmsPluginbytypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsPluginbytypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.pluginbytype.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsPluginbyfolderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // body
  body: string(name='body'),
  // file_id
  fileId: long(name='file_id'),
  // id
  id: long(name='id'),
  // outside_bizdomain
  outsideBizdomain: string(name='outside_bizdomain'),
  // plugin_id
  pluginId: long(name='plugin_id'),
  // table
  table: string(name='table'),
}

model QueryRmsPluginbyfolderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ModelTreeNode ](name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /modeling/plugin/queryByFolder
 * Summary: queryByFolder
 */
async function queryRmsPluginbyfolder(request: QueryRmsPluginbyfolderRequest): QueryRmsPluginbyfolderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsPluginbyfolderEx(request, headers, runtime);
}

/**
 * Description: /modeling/plugin/queryByFolder
 * Summary: queryByFolder
 */
async function queryRmsPluginbyfolderEx(request: QueryRmsPluginbyfolderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsPluginbyfolderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.pluginbyfolder.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsPluginRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // body
  body: string(name='body'),
  // file_id
  fileId: long(name='file_id'),
  // id
  id: long(name='id'),
  // outside_bizdomain
  outsideBizdomain: string(name='outside_bizdomain'),
  // plugin_id
  pluginId: long(name='plugin_id'),
  // table
  table: string(name='table'),
}

model QueryRmsPluginResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: PluginModelDO(name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /modeling/plugin/query
 * Summary: query
 */
async function queryRmsPlugin(request: QueryRmsPluginRequest): QueryRmsPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsPluginEx(request, headers, runtime);
}

/**
 * Description: /modeling/plugin/query
 * Summary: query
 */
async function queryRmsPluginEx(request: QueryRmsPluginRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsPluginResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.plugin.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsPlugintestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // body
  body: string(name='body'),
  // file_id
  fileId: long(name='file_id'),
  // id
  id: long(name='id'),
  // outside_bizdomain
  outsideBizdomain: string(name='outside_bizdomain'),
  // plugin_id
  pluginId: long(name='plugin_id'),
  // table
  table: string(name='table'),
}

model QueryRmsPlugintestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: Threshold(name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /modeling/plugin/querytest
 * Summary: querytest
 */
async function queryRmsPlugintest(request: QueryRmsPlugintestRequest): QueryRmsPlugintestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsPlugintestEx(request, headers, runtime);
}

/**
 * Description: /modeling/plugin/querytest
 * Summary: querytest
 */
async function queryRmsPlugintestEx(request: QueryRmsPlugintestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsPlugintestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.plugintest.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsPathRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // requests
  requests: [ FolderRequestCmd ](name='requests'),
}

model QueryRmsPathResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ FolderPaths ](name='data'),
  // error_code
  errorCode?: string(name='error_code'),
  // rid
  rid?: string(name='rid'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /modeling/folder/path
 * Summary: queryPath
 */
async function queryRmsPath(request: QueryRmsPathRequest): QueryRmsPathResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsPathEx(request, headers, runtime);
}

/**
 * Description: /modeling/folder/path
 * Summary: queryPath
 */
async function queryRmsPathEx(request: QueryRmsPathRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsPathResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.path.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecRmsUniversalcleankeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // req_params
  reqParams: [ KeySet ](name='req_params'),
  // tenant_id
  tenantId: string(name='tenant_id'),
}

model ExecRmsUniversalcleankeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // error_message
  errorMessage?: CallErrorMessage(name='error_message'),
  // part_suc
  partSuc?: boolean(name='part_suc'),
  // result
  result?: string(name='result'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: /{tenantId}/webapi/cleankey
 * Summary: cleankey
 */
async function execRmsUniversalcleankey(request: ExecRmsUniversalcleankeyRequest): ExecRmsUniversalcleankeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execRmsUniversalcleankeyEx(request, headers, runtime);
}

/**
 * Description: /{tenantId}/webapi/cleankey
 * Summary: cleankey
 */
async function execRmsUniversalcleankeyEx(request: ExecRmsUniversalcleankeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecRmsUniversalcleankeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.universalcleankey.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsUniversalRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // post_body
  postBody: string(name='post_body'),
  // tenant_id
  tenantId: string(name='tenant_id'),
}

model QueryRmsUniversalResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: /{tenantId}/universalQuery
 * Summary: universalQuery
 */
async function queryRmsUniversal(request: QueryRmsUniversalRequest): QueryRmsUniversalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsUniversalEx(request, headers, runtime);
}

/**
 * Description: /{tenantId}/universalQuery
 * Summary: universalQuery
 */
async function queryRmsUniversalEx(request: QueryRmsUniversalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsUniversalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.universal.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRmsTracespanRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 如果指定了app, 那么是 localServiceName or remoteServiceName 的效果, 任何一个命中了都行
  app?: string(name='app'),
  // 最大的毫秒开始时间戳
  endTime?: long(name='end_time'),
  // 万能扩展字段
  extensions?: [ KeySet ](name='extensions'),
  // 最大毫秒耗时
  maxDuration?: long(name='max_duration'),
  // 最小毫秒耗时
  minDuration?: long(name='min_duration'),
  // 分页号
  pageNumber?: long(name='page_number'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 搜索的毫秒开始时间戳
  startTime?: long(name='start_time'),
  // 结果码
  status?: string(name='status'),
  // 用来动态传递一些tags或条件匹配, 有一些key是保留的, 服务端会进行特殊解释, 其他的则会认为是要对tags做精确匹配.
  tags?: [ KeySet ](name='tags'),
  // 按traceId搜索时会用到 此时其他条件自动失效
  traceId?: string(name='trace_id'),
  // workspace_id
  workspaceId?: long(name='workspace_id'),
}

model QueryRmsTracespanResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页号
  pageNumber?: long(name='page_number'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 搜索出的spans, 查无结果时为空数组
  spans?: [ TraceSpan ](name='spans'),
  // 总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: 链路搜索
 * Summary: 链路搜索
 */
async function queryRmsTracespan(request: QueryRmsTracespanRequest): QueryRmsTracespanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRmsTracespanEx(request, headers, runtime);
}

/**
 * Description: 链路搜索
 * Summary: 链路搜索
 */
async function queryRmsTracespanEx(request: QueryRmsTracespanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRmsTracespanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.tracespan.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetRmsTracespanqueryconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model GetRmsTracespanqueryconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 支持的tags列表
  tagConfigs?: [ TraceSpanSearchTagConfig ](name='tag_configs'),
}

/**
 * Description: 查询链路搜索页面的配置
 * Summary: 查询链路搜索页面的配置
 */
async function getRmsTracespanqueryconfig(request: GetRmsTracespanqueryconfigRequest): GetRmsTracespanqueryconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getRmsTracespanqueryconfigEx(request, headers, runtime);
}

/**
 * Description: 查询链路搜索页面的配置
 * Summary: 查询链路搜索页面的配置
 */
async function getRmsTracespanqueryconfigEx(request: GetRmsTracespanqueryconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRmsTracespanqueryconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.tracespanqueryconfig.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DescribeRmsTracetreeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // trace_id
  traceId: string(name='trace_id'),
}

model DescribeRmsTracetreeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 树状图结构体
  // 找不到数据时 trace_tree_items 为空数组, 并不会报错
  traceTreeItems?: [ TraceTreeItem ](name='trace_tree_items'),
}

/**
 * Description: 单链路树状图查询
 * Summary: 单链路树状图查询
 */
async function describeRmsTracetree(request: DescribeRmsTracetreeRequest): DescribeRmsTracetreeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return describeRmsTracetreeEx(request, headers, runtime);
}

/**
 * Description: 单链路树状图查询
 * Summary: 单链路树状图查询
 */
async function describeRmsTracetreeEx(request: DescribeRmsTracetreeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeRmsTracetreeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.tracetree.describe', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackSpiCompletecommodityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 南天门的请求体都是做成json字符串放在data字段里
  data?: string(name='data'),
}

model CallbackSpiCompletecommodityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // code
  code?: string(name='code'),
  // data
  data?: string(name='data'),
  // message
  message?: string(name='message'),
  // synchro
  synchro?: string(name='synchro'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: 南天门 - 商品补全接口
 * Summary: 南天门 - 商品补全接口
 */
async function callbackSpiCompletecommodity(request: CallbackSpiCompletecommodityRequest): CallbackSpiCompletecommodityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackSpiCompletecommodityEx(request, headers, runtime);
}

/**
 * Description: 南天门 - 商品补全接口
 * Summary: 南天门 - 商品补全接口
 */
async function callbackSpiCompletecommodityEx(request: CallbackSpiCompletecommodityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackSpiCompletecommodityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.spi.completecommodity.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackSpiPayordercallbackRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 南天门支付后回调请求, 见 http://help.aliyun-inc.com/internaldoc/detail/134798.html?spm=ntm.workbench-devPlatform-extendPoint.0.0.42a919afQhBhEB.
  data?: string(name='data'),
}

model CallbackSpiPayordercallbackResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // code
  code?: string(name='code'),
  // data
  data?: string(name='data'),
  // message
  message?: string(name='message'),
  // synchro
  synchro?: string(name='synchro'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: 南天门 - 支付后回调
 * Summary: 南天门 - 支付后回调
 */
async function callbackSpiPayordercallback(request: CallbackSpiPayordercallbackRequest): CallbackSpiPayordercallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackSpiPayordercallbackEx(request, headers, runtime);
}

/**
 * Description: 南天门 - 支付后回调
 * Summary: 南天门 - 支付后回调
 */
async function callbackSpiPayordercallbackEx(request: CallbackSpiPayordercallbackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackSpiPayordercallbackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.spi.payordercallback.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackSpiCompleteorderparamRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // data
  data?: string(name='data'),
}

model CallbackSpiCompleteorderparamResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // code
  code?: string(name='code'),
  // data
  data?: string(name='data'),
  // message
  message?: string(name='message'),
  // synchro
  synchro?: string(name='synchro'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: 南天门 - 补全订单
 * Summary: 南天门 - 补全订单
 */
async function callbackSpiCompleteorderparam(request: CallbackSpiCompleteorderparamRequest): CallbackSpiCompleteorderparamResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackSpiCompleteorderparamEx(request, headers, runtime);
}

/**
 * Description: 南天门 - 补全订单
 * Summary: 南天门 - 补全订单
 */
async function callbackSpiCompleteorderparamEx(request: CallbackSpiCompleteorderparamRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackSpiCompleteorderparamResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.spi.completeorderparam.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackSpiVerifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // data
  data?: string(name='data'),
}

model CallbackSpiVerifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // code
  code?: string(name='code'),
  // data
  data?: string(name='data'),
  // message
  message?: string(name='message'),
  // synchro
  synchro?: string(name='synchro'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: 南天门 - 订单校验回调
 * Summary: 南天门 - 订单校验回调
 */
async function callbackSpiVerify(request: CallbackSpiVerifyRequest): CallbackSpiVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackSpiVerifyEx(request, headers, runtime);
}

/**
 * Description: 南天门 - 订单校验回调
 * Summary: 南天门 - 订单校验回调
 */
async function callbackSpiVerifyEx(request: CallbackSpiVerifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackSpiVerifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.spi.verify.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackSpiRefundRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // data
  data?: string(name='data'),
}

model CallbackSpiRefundResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // code
  code?: string(name='code'),
  // data
  data?: string(name='data'),
  // message
  message?: string(name='message'),
  // synchro
  synchro?: string(name='synchro'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: 南天门 - 退款
 * Summary: 南天门 - 退款
 */
async function callbackSpiRefund(request: CallbackSpiRefundRequest): CallbackSpiRefundResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackSpiRefundEx(request, headers, runtime);
}

/**
 * Description: 南天门 - 退款
 * Summary: 南天门 - 退款
 */
async function callbackSpiRefundEx(request: CallbackSpiRefundRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackSpiRefundResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.spi.refund.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackSpiLifecycleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // data
  data?: string(name='data'),
}

model CallbackSpiLifecycleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // code
  code?: string(name='code'),
  // data
  data?: string(name='data'),
  // message
  message?: string(name='message'),
  // a synchro
  synchro?: string(name='synchro'),
  // success
  success?: boolean(name='success'),
}

/**
 * Description: 南天门 - 商品实例生命周期回调
 * Summary: 南天门 - 商品实例生命周期回调
 */
async function callbackSpiLifecycle(request: CallbackSpiLifecycleRequest): CallbackSpiLifecycleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackSpiLifecycleEx(request, headers, runtime);
}

/**
 * Description: 南天门 - 商品实例生命周期回调
 * Summary: 南天门 - 商品实例生命周期回调
 */
async function callbackSpiLifecycleEx(request: CallbackSpiLifecycleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackSpiLifecycleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.spi.lifecycle.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DescribeRmsTimeseriesmetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // sum或none
  aggregator: string(name='aggregator'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
  // metrics字段名称
  metrics: [ StringValue ](name='metrics'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 扩展字段tags
  tags?: [ KeyValuePair ](name='tags'),
  // metrics类型
  type: string(name='type'),
  // workspace_id或workspace_name选填一个
  workspaceId?: long(name='workspace_id'),
  // workspace_id或workspace_name选填一个
  workspaceName?: string(name='workspace_name'),
}

model DescribeRmsTimeseriesmetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // metrics reulsts
  results?: [ TimeSeriesMetrics ](name='results'),
}

/**
 * Description: 查询时序指标
 * Summary: 查询时序指标
 */
async function describeRmsTimeseriesmetrics(request: DescribeRmsTimeseriesmetricsRequest): DescribeRmsTimeseriesmetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return describeRmsTimeseriesmetricsEx(request, headers, runtime);
}

/**
 * Description: 查询时序指标
 * Summary: 查询时序指标
 */
async function describeRmsTimeseriesmetricsEx(request: DescribeRmsTimeseriesmetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeRmsTimeseriesmetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.timeseriesmetrics.describe', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DescribeRmsTopologyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 结束毫秒时间戳
  endTime?: long(name='end_time'),
  // 开始毫秒时间戳
  startTime?: long(name='start_time'),
  // workspace_id或workspace_name二选一
  workspaceId?: long(name='workspace_id'),
  // workspace_id或workspace_name二选一
  workspaceName?: string(name='workspace_name'),
}

model DescribeRmsTopologyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 拓扑节点
  nodes?: [ TopologyNode ](name='nodes'),
  // 拓扑边
  edges?: [ TopologyEdge ](name='edges'),
  // 节点性能指标
  nodeMetrics?: [ TimeSeriesMetrics ](name='node_metrics'),
  // 边性能指标
  edgeMetrics?: [ TimeSeriesMetrics ](name='edge_metrics'),
}

/**
 * Description: 获取调用拓扑
 * Summary: 获取调用拓扑
 */
async function describeRmsTopology(request: DescribeRmsTopologyRequest): DescribeRmsTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return describeRmsTopologyEx(request, headers, runtime);
}

/**
 * Description: 获取调用拓扑
 * Summary: 获取调用拓扑
 */
async function describeRmsTopologyEx(request: DescribeRmsTopologyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeRmsTopologyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.rms.topology.describe', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 开始时间
  start: long(name='start'),
  // 结束时间
  end: long(name='end'),
  // 插件类型
  plugin: string(name='plugin'),
  // 监控指标 ID
  dsId: string(name='ds_id'),
  // contentType
  contentType?: string(name='content_type'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // //采集频率
  periodType?: string(name='period_type'),
  // 查询目标列
  fields?: [ string ](name='fields'),
  // 查询条件
  where?: [ KeySet ](name='where'),
}

model QueryMetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询数据结果
  result?: string(name='result'),
}

/**
 * Description: 监控指标数据查询
 * Summary: 监控指标数据查询
 */
async function queryMetrics(request: QueryMetricsRequest): QueryMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMetricsEx(request, headers, runtime);
}

/**
 * Description: 监控指标数据查询
 * Summary: 监控指标数据查询
 */
async function queryMetricsEx(request: QueryMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.metrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceSpanRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 搜索的毫秒开始时间戳
  startTime: long(name='start_time'),
  // 最大的毫秒开始时间戳
  endTime: long(name='end_time'),
  // 按traceId搜索时会用到 此时其他条件自动失效
  traceId?: string(name='trace_id'),
  // 如果指定了app, 那么是 localServiceName or remoteServiceName 的效果, 任何一个命中了都行
  app?: string(name='app'),
  // 最小毫秒耗时
  minDuration?: long(name='min_duration'),
  // 最大毫秒耗时
  maxDuration?: long(name='max_duration'),
  // 分页号
  currentPage?: long(name='current_page'),
  // 每页记录条数
  pageSize?: long(name='page_size'),
  // 用来动态传递一些tags或条件匹配, 有一些key是保留的, 服务端会进行特殊解释, 其他的则会认为是要对tags做精确匹配.
  tags?: [ KeySet ](name='tags'),
  // 总页数，小于0或不填代表第一次查询，用来获取总页数
  totalPage?: long(name='total_page'),
  // 总数，小于0或不填代表第一次查询，用来获取总数
  totalSize?: long(name='total_size'),
  // 排序字段
  sortBy?: string(name='sort_by'),
  // 排序是否逆序
  sortReverse?: boolean(name='sort_reverse'),
  // 传递需要过滤的字段
  filter?: TraceQuerySummary(name='filter'),
}

model QueryTraceSpanResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页号
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 查询总数
  totalSize?: long(name='total_size'),
  // 查询总页数
  totalPage?: long(name='total_page'),
  // 搜索出的spans, 查无结果时为空数组
  spans?: [ TraceSpan ](name='spans'),
  // 链路查询结果的关键字段取值集
  summary?: TraceQuerySummary(name='summary'),
}

/**
 * Description: 链路Span查询搜索
 * Summary: 链路查询
 */
async function queryTraceSpan(request: QueryTraceSpanRequest): QueryTraceSpanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceSpanEx(request, headers, runtime);
}

/**
 * Description: 链路Span查询搜索
 * Summary: 链路查询
 */
async function queryTraceSpanEx(request: QueryTraceSpanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceSpanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.span.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppNameRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 实际SQL查询时LIMIT的第一个字段
  currentPage?: long(name='current_page'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
}

model ListAppNameResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用名称列表
  appNames?: [ string ](name='app_names'),
}

/**
 * Description: 获取应用列表
 * Summary: 获取应用列表
 */
async function listAppName(request: ListAppNameRequest): ListAppNameResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppNameEx(request, headers, runtime);
}

/**
 * Description: 获取应用列表
 * Summary: 获取应用列表
 */
async function listAppNameEx(request: ListAppNameRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppNameResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.app.name.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCustompluginRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 自定义监控指标详细信息 (嵌套对象)
  customPlugin: CustomPluginDO(name='custom_plugin'),
}

model CreateCustompluginResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建自定义监控指标
 * Summary: 创建自定义监控指标
 */
async function createCustomplugin(request: CreateCustompluginRequest): CreateCustompluginResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCustompluginEx(request, headers, runtime);
}

/**
 * Description: 创建自定义监控指标
 * Summary: 创建自定义监控指标
 */
async function createCustompluginEx(request: CreateCustompluginRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCustompluginResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.customplugin.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteCustompluginRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 监控产品类型
  pluginType: string(name='plugin_type'),
  // id
  id: long(name='id'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
}

model DeleteCustompluginResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除自定义监控指标
 * Summary: 删除自定义监控指标
 */
async function deleteCustomplugin(request: DeleteCustompluginRequest): DeleteCustompluginResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteCustompluginEx(request, headers, runtime);
}

/**
 * Description: 删除自定义监控指标
 * Summary: 删除自定义监控指标
 */
async function deleteCustompluginEx(request: DeleteCustompluginRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteCustompluginResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.customplugin.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFolderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 文件夹名称
  name: string(name='name'),
  // 父级文件夹id
  parentFolderId: long(name='parent_folder_id'),
}

model CreateFolderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文件夹 ID
  folderId?: long(name='folder_id'),
}

/**
 * Description: 自定义监控 - 添加文件夹
 * Summary: 自定义监控 - 添加文件夹
 */
async function createFolder(request: CreateFolderRequest): CreateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFolderEx(request, headers, runtime);
}

/**
 * Description: 自定义监控 - 添加文件夹
 * Summary: 自定义监控 - 添加文件夹
 */
async function createFolderEx(request: CreateFolderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFolderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.folder.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateFolderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 文件夹id
  id: long(name='id'),
  // 文件夹新名称
  name: string(name='name'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
}

model UpdateFolderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自定义监控 - 文件夹更新
 * Summary: 自定义监控 - 文件夹更新
 */
async function updateFolder(request: UpdateFolderRequest): UpdateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateFolderEx(request, headers, runtime);
}

/**
 * Description: 自定义监控 - 文件夹更新
 * Summary: 自定义监控 - 文件夹更新
 */
async function updateFolderEx(request: UpdateFolderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFolderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.folder.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
}

model QueryTraceConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链路配置
  tags?: [ TraceSpanSearchTagConfig ](name='tags'),
  // 链路搜索的大类
  categories?: [ string ](name='categories'),
  // 数据库配置
  dbconfigs?: [ TraceSpanSearchDbConfig ](name='dbconfigs'),
  // 消息队列的kind取值范围
  mqkinds?: [ string ](name='mqkinds'),
}

/**
 * Description: 链路查询时可选参数的配置查询
 * Summary: 链路查询时可选参数的配置查询
 */
async function queryTraceConfig(request: QueryTraceConfigRequest): QueryTraceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceConfigEx(request, headers, runtime);
}

/**
 * Description: 链路查询时可选参数的配置查询
 * Summary: 链路查询时可选参数的配置查询
 */
async function queryTraceConfigEx(request: QueryTraceConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.config.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFolderPathRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 自定义监控 ID 
  customPluginId?: long(name='custom_plugin_id'),
  // 文件夹 ID
  folderId: long(name='folder_id'),
  // 是否包含插件名
  includePluginName: boolean(name='include_plugin_name'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
}

model QueryFolderPathResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文件夹路径
  paths?: [ FolderPath ](name='paths'),
}

/**
 * Description: 查询文件夹路径
 * Summary: 查询文件夹路径
 */
async function queryFolderPath(request: QueryFolderPathRequest): QueryFolderPathResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFolderPathEx(request, headers, runtime);
}

/**
 * Description: 查询文件夹路径
 * Summary: 查询文件夹路径
 */
async function queryFolderPathEx(request: QueryFolderPathRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFolderPathResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.folder.path.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceDetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // traceId
  traceId: string(name='trace_id'),
  // 备选的入口ip
  backupEntryip?: string(name='backup_entryip'),
  // 是否为第一次查询
  firstQuery: boolean(name='first_query'),
}

model QueryTraceDetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 节点
  items?: [ TraceTreeItem ](name='items'),
  // 描述整体链路的额外信息，比span总数，应用总数之类的
  attributes?: [ KeySet ](name='attributes'),
}

/**
 * Description: 查询链路详情
 * Summary: 查询链路详情
 */
async function queryTraceDetail(request: QueryTraceDetailRequest): QueryTraceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceDetailEx(request, headers, runtime);
}

/**
 * Description: 查询链路详情
 * Summary: 查询链路详情
 */
async function queryTraceDetailEx(request: QueryTraceDetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceDetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.detail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceTopologyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
  // trace_id
  traceId?: string(name='trace_id'),
  // app
  app?: string(name='app'),
}

model QueryTraceTopologyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 拓扑节点
  nodes?: [ TopologyNode ](name='nodes'),
  // 拓扑边
  edges?: [ TopologyEdge ](name='edges'),
  // 节点性能指标
  nodeMetrics?: [ TimeSeriesMetrics ](name='node_metrics'),
  // 边性能指标
  edgeMetrics?: [ TimeSeriesMetrics ](name='edge_metrics'),
}

/**
 * Description: 获取链路拓扑图
 * Summary: 获取链路拓扑图
 */
async function queryTraceTopology(request: QueryTraceTopologyRequest): QueryTraceTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceTopologyEx(request, headers, runtime);
}

/**
 * Description: 获取链路拓扑图
 * Summary: 获取链路拓扑图
 */
async function queryTraceTopologyEx(request: QueryTraceTopologyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceTopologyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.topology.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceMetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // sum或none
  aggregator: string(name='aggregator'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // metrics字段名称
  metrics: [ string ](name='metrics'),
  // 扩展字段tags
  tags?: [ KeyValuePair ](name='tags'),
  // metrics类型
  type: string(name='type'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
}

model QueryTraceMetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // metrics reulsts
  result?: TimeSeriesMetrics(name='result'),
}

/**
 * Description: 查询链路关联指标
 * Summary: 查询链路关联指标
 */
async function queryTraceMetrics(request: QueryTraceMetricsRequest): QueryTraceMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceMetricsEx(request, headers, runtime);
}

/**
 * Description: 查询链路关联指标
 * Summary: 查询链路关联指标
 */
async function queryTraceMetricsEx(request: QueryTraceMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceMetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.metrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetCustompluginRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 自定义监控指标 ID
  id: long(name='id'),
  // 类型
  pluginType: string(name='plugin_type'),
}

model GetCustompluginResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 自定义监控指标详情
  customPlugin?: CustomPluginDO(name='custom_plugin'),
}

/**
 * Description: 获取自定义监控指标详情
 * Summary: 获取自定义监控指标详情
 */
async function getCustomplugin(request: GetCustompluginRequest): GetCustompluginResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getCustompluginEx(request, headers, runtime);
}

/**
 * Description: 获取自定义监控指标详情
 * Summary: 获取自定义监控指标详情
 */
async function getCustompluginEx(request: GetCustompluginRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCustompluginResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.customplugin.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 应用名称模糊搜索
  keyword?: string(name='keyword'),
  // 应用名称列表 
  appNames?: [ string ](name='app_names'),
  // 为true时表示查询我的应用
  onlyMine?: boolean(name='only_mine'),
}

model QueryAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用列表
  apps?: [ MonitorApp ](name='apps'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 总记录数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询应用监控
 * Summary: 查询应用监控
 */
async function queryApp(request: QueryAppRequest): QueryAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppEx(request, headers, runtime);
}

/**
 * Description: 查询应用监控
 * Summary: 查询应用监控
 */
async function queryAppEx(request: QueryAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.app.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetUserFavoriteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 收藏资源类型
  resourceType: string(name='resource_type'),
  //  收藏资源 ID
  resourceId: string(name='resource_id'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
}

model GetUserFavoriteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否收藏
  status?: boolean(name='status'),
}

/**
 * Description: 获取用户收藏资源状态
 * Summary: 获取用户收藏资源状态
 */
async function getUserFavorite(request: GetUserFavoriteRequest): GetUserFavoriteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getUserFavoriteEx(request, headers, runtime);
}

/**
 * Description: 获取用户收藏资源状态
 * Summary: 获取用户收藏资源状态
 */
async function getUserFavoriteEx(request: GetUserFavoriteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetUserFavoriteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.user.favorite.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFolderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 父目录 ID
  parentFolderId: long(name='parent_folder_id'),
}

model QueryFolderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文件夹列表
  folders?: [ FolderDO ](name='folders'),
}

/**
 * Description: 查询文件夹列表
 * Summary: 查询文件夹列表
 */
async function queryFolder(request: QueryFolderRequest): QueryFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFolderEx(request, headers, runtime);
}

/**
 * Description: 查询文件夹列表
 * Summary: 查询文件夹列表
 */
async function queryFolderEx(request: QueryFolderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFolderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.folder.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCustompluginRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 父级文件夹 ID
  parentFolderId: long(name='parent_folder_id'),
  // 插件类型
  pluginType?: string(name='plugin_type'),
  // 当前页码
  currentPage?: long(name='current_page'),
  // 每页大小
  pageSize?: long(name='page_size'),
}

model QueryCustompluginResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 自定义指标监控配置列表
  customPlugins?: [ CustomPluginDO ](name='custom_plugins'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 总记录数
  totalCount?: long(name='total_count'),
}

/**
 * Description:  查询自定义监控配置列表
 * Summary:  查询自定义监控配置列表
 */
async function queryCustomplugin(request: QueryCustompluginRequest): QueryCustompluginResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCustompluginEx(request, headers, runtime);
}

/**
 * Description:  查询自定义监控配置列表
 * Summary:  查询自定义监控配置列表
 */
async function queryCustompluginEx(request: QueryCustompluginRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCustompluginResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.customplugin.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUserFavoriteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 收藏资源 ID 列表
  resourceIds: [ string ](name='resource_ids'),
  // 收藏资源类型
  resourceType: string(name='resource_type'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
}

model QueryUserFavoriteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户收藏的资源列表
  favorites?: [ UserFavoriteVO ](name='favorites'),
}

/**
 * Description: 查询用户收藏列表
 * Summary: 查询用户收藏列表
 */
async function queryUserFavorite(request: QueryUserFavoriteRequest): QueryUserFavoriteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUserFavoriteEx(request, headers, runtime);
}

/**
 * Description: 查询用户收藏列表
 * Summary: 查询用户收藏列表
 */
async function queryUserFavoriteEx(request: QueryUserFavoriteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUserFavoriteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.user.favorite.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAlarmPauseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model QueryAlarmPauseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 告警暂停列表查询
 * Summary: 告警暂停列表查询
 */
async function queryAlarmPause(request: QueryAlarmPauseRequest): QueryAlarmPauseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAlarmPauseEx(request, headers, runtime);
}

/**
 * Description: 告警暂停列表查询
 * Summary: 告警暂停列表查询
 */
async function queryAlarmPauseEx(request: QueryAlarmPauseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAlarmPauseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.pause.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CountAlarmAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 开始时间 - 时间戳
  start: long(name='start'),
  // 结束时间 - 时间戳
  end: long(name='end'),
  // 应用名称模糊搜索
  appName?: string(name='app_name'),
}

model CountAlarmAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 告警应用
  alarmApps?: [ AlarmAppStats ](name='alarm_apps'),
}

/**
 * Description: 获取告警应用统计信息
 * Summary: 获取告警应用统计信息
 */
async function countAlarmApp(request: CountAlarmAppRequest): CountAlarmAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return countAlarmAppEx(request, headers, runtime);
}

/**
 * Description: 获取告警应用统计信息
 * Summary: 获取告警应用统计信息
 */
async function countAlarmAppEx(request: CountAlarmAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountAlarmAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.app.count', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAlarmApprelationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 开始时间 - 时间戳
  from: long(name='from'),
  // 结束时间 - 时间戳
  to: long(name='to'),
  // 应用名称
  appName?: string(name='app_name'),
}

model QueryAlarmApprelationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 告警应用关联信息
  result?: [ AlarmHistoryListKeySetMap ](name='result'),
}

/**
 * Description: 查询告警应用关联Map
 * Summary: 查询告警应用关联Map
 */
async function queryAlarmApprelation(request: QueryAlarmApprelationRequest): QueryAlarmApprelationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAlarmApprelationEx(request, headers, runtime);
}

/**
 * Description: 查询告警应用关联Map
 * Summary: 查询告警应用关联Map
 */
async function queryAlarmApprelationEx(request: QueryAlarmApprelationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAlarmApprelationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.apprelation.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryStackGeneratedconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名列表
  appNames?: [ string ](name='app_names'),
}

model BatchqueryStackGeneratedconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 技术栈配置列表
  generatedConfigs?: [ StackGeneratedConfig ](name='generated_configs'),
}

/**
 * Description: 批量查询栈配置
 * Summary: 批量查询栈配置
 */
async function batchqueryStackGeneratedconfig(request: BatchqueryStackGeneratedconfigRequest): BatchqueryStackGeneratedconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryStackGeneratedconfigEx(request, headers, runtime);
}

/**
 * Description: 批量查询栈配置
 * Summary: 批量查询栈配置
 */
async function batchqueryStackGeneratedconfigEx(request: BatchqueryStackGeneratedconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryStackGeneratedconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.stack.generatedconfig.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDashboardRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 大盘类型：MINE(我的大盘)、CORE(关键大盘)
  dashboardType: string(name='dashboard_type'),
}

model ListDashboardResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 大盘列表
  dashboards?: [ PluginModelDO ](name='dashboards'),
}

/**
 * Description: 获取大盘列表
 * Summary: 获取大盘列表
 */
async function listDashboard(request: ListDashboardRequest): ListDashboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDashboardEx(request, headers, runtime);
}

/**
 * Description: 获取大盘列表
 * Summary: 获取大盘列表
 */
async function listDashboardEx(request: ListDashboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDashboardResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.dashboard.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStackGeneratedconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 栈实体对象复合ID
  stackUniversalTableId: string(name='stack_universal_table_id'),
}

model QueryStackGeneratedconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 栈配置列表
  generatedConfigs?: [ StackGeneratedConfig ](name='generated_configs'),
}

/**
 * Description: 查询技术栈配置详情
 * Summary: 查询技术栈配置详情
 */
async function queryStackGeneratedconfig(request: QueryStackGeneratedconfigRequest): QueryStackGeneratedconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStackGeneratedconfigEx(request, headers, runtime);
}

/**
 * Description: 查询技术栈配置详情
 * Summary: 查询技术栈配置详情
 */
async function queryStackGeneratedconfigEx(request: QueryStackGeneratedconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStackGeneratedconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.stack.generatedconfig.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStackMonitoritemRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 技术栈 ID
  stackId: long(name='stack_id'),
}

model QueryStackMonitoritemResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 监控项列表
  monitorItems?: [ StackMonitorItem ](name='monitor_items'),
}

/**
 * Description: 查询监控项
 * Summary: 查询监控项
 */
async function queryStackMonitoritem(request: QueryStackMonitoritemRequest): QueryStackMonitoritemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStackMonitoritemEx(request, headers, runtime);
}

/**
 * Description: 查询监控项
 * Summary: 查询监控项
 */
async function queryStackMonitoritemEx(request: QueryStackMonitoritemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStackMonitoritemResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.stack.monitoritem.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUsergroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 联系人登录名称数组
  userLoginNames?: string(name='user_login_names'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 通知组名称
  keyword?: string(name='keyword'),
  // 是否只查询当前操作者的
  onlyCurrentStaff?: boolean(name='only_current_staff'),
}

model QueryUsergroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 通知组列表
  userGroups?: [ UserGroup ](name='user_groups'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 总记录数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 分页查询通知组
 * Summary: 分页查询通知组
 */
async function queryUsergroup(request: QueryUsergroupRequest): QueryUsergroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUsergroupEx(request, headers, runtime);
}

/**
 * Description: 分页查询通知组
 * Summary: 分页查询通知组
 */
async function queryUsergroupEx(request: QueryUsergroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUsergroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.usergroup.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateUsergroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 通知组名称
  name: string(name='name'),
  // 钉钉机器人token数组
  dingtalkWebhooks?: [ string ](name='dingtalk_webhooks'),
  // 联系人登录名称数组
  userLoginNames?: [ string ](name='user_login_names'),
  // 0、当前workspace有效；
  // 1、当前租户有效
  validScope?: long(name='valid_scope'),
  // 钉钉机器人
  dingDingRobots?: [ string ](name='ding_ding_robots'),
}

model CreateUsergroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 通知组 ID
  groupId?: long(name='group_id'),
}

/**
 * Description: 创建通知组
 * Summary: 创建通知组
 */
async function createUsergroup(request: CreateUsergroupRequest): CreateUsergroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createUsergroupEx(request, headers, runtime);
}

/**
 * Description: 创建通知组
 * Summary: 创建通知组
 */
async function createUsergroupEx(request: CreateUsergroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateUsergroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.usergroup.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateUsergroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 通知组 ID
  id: long(name='id'),
  // 通知组名称
  name: string(name='name'),
  // 钉钉机器人token数组
  dingtalkWebhooks?: [ string ](name='dingtalk_webhooks'),
  // 联系人登录名称数组
  userLoginNames?: [ string ](name='user_login_names'),
  // 全局订阅
  scopeGlobal?: boolean(name='scope_global'),
  // 0、当前workspace有效；
  // 1、租户有效；
  validScope?: long(name='valid_scope'),
  // 钉钉机器人
  dingDingRobots?: [ string ](name='ding_ding_robots'),
}

model UpdateUsergroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新通知组
 * Summary: 更新通知组
 */
async function updateUsergroup(request: UpdateUsergroupRequest): UpdateUsergroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateUsergroupEx(request, headers, runtime);
}

/**
 * Description: 更新通知组
 * Summary: 更新通知组
 */
async function updateUsergroupEx(request: UpdateUsergroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateUsergroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.usergroup.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteUsergroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 通知组 ID
  id: long(name='id'),
}

model DeleteUsergroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除通知组
 * Summary: 删除通知组
 */
async function deleteUsergroup(request: DeleteUsergroupRequest): DeleteUsergroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteUsergroupEx(request, headers, runtime);
}

/**
 * Description: 删除通知组
 * Summary: 删除通知组
 */
async function deleteUsergroupEx(request: DeleteUsergroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteUsergroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.usergroup.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAlarmTrendRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 开始时间
  start: long(name='start'),
  // 结束时间
  end: long(name='end'),
  // 告警类型 (固定传入自定义、应用、应用组3个告警类型)
  alarmTypes: [ string ](name='alarm_types'),
}

model QueryAlarmTrendResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回数据
  data?: [ AlarmCountInfoKeySet ](name='data'),
}

/**
 * Description: 查询过去某一时段内的告警趋势(包含自定义、应用、应用组的告警数量)
 * Summary: 查询过去某一时段内的告警趋势
 */
async function queryAlarmTrend(request: QueryAlarmTrendRequest): QueryAlarmTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAlarmTrendEx(request, headers, runtime);
}

/**
 * Description: 查询过去某一时段内的告警趋势(包含自定义、应用、应用组的告警数量)
 * Summary: 查询过去某一时段内的告警趋势
 */
async function queryAlarmTrendEx(request: QueryAlarmTrendRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAlarmTrendResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.trend.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAlarmHistoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 开始时间
  start: long(name='start'),
  // 结束时间
  end: long(name='end'),
  // 是否查询所有告警类型
  allTypes: boolean(name='all_types'),
  // 告警类型数组
  alarmTypes?: [ string ](name='alarm_types'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // dsid
  dsid?: long(name='dsid'),
}

model QueryAlarmHistoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 告警历史数组
  alarmHistorys?: [ AlarmHistory ](name='alarm_historys'),
  // 总记录数
  totalCount?: long(name='total_count'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面大小
  pageSize?: long(name='page_size'),
}

/**
 * Description: 查询过去某一时段的告警详情
 * Summary: 查询过去某一时段的告警详情
 */
async function queryAlarmHistory(request: QueryAlarmHistoryRequest): QueryAlarmHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAlarmHistoryEx(request, headers, runtime);
}

/**
 * Description: 查询过去某一时段的告警详情
 * Summary: 查询过去某一时段的告警详情
 */
async function queryAlarmHistoryEx(request: QueryAlarmHistoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAlarmHistoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.history.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAlarmSubscriptionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 是否只查询我的订阅
  onlyMine?: boolean(name='only_mine'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面大小
  pageSize?: long(name='page_size'),
}

model QueryAlarmSubscriptionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 告警订阅数组
  alarmSubscriptions?: [ AlarmSubDTO ](name='alarm_subscriptions'),
  // 总记录数
  totalCount?: long(name='total_count'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面大小
  pageSize?: long(name='page_size'),
}

/**
 * Description: 查询告警订阅
 * Summary: 查询告警订阅
 */
async function queryAlarmSubscription(request: QueryAlarmSubscriptionRequest): QueryAlarmSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAlarmSubscriptionEx(request, headers, runtime);
}

/**
 * Description: 查询告警订阅
 * Summary: 查询告警订阅
 */
async function queryAlarmSubscriptionEx(request: QueryAlarmSubscriptionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAlarmSubscriptionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.subscription.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStackAlarmruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 栈实体对象复合ID
  stackUniversalTableId: string(name='stack_universal_table_id'),
}

model QueryStackAlarmruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 告警套餐配置数组
  alarmRules?: [ StackAlarmRule ](name='alarm_rules'),
}

/**
 * Description: 查询某个应用监控的告警套餐
 * Summary: 查询某个应用监控的告警套餐
 */
async function queryStackAlarmrule(request: QueryStackAlarmruleRequest): QueryStackAlarmruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStackAlarmruleEx(request, headers, runtime);
}

/**
 * Description: 查询某个应用监控的告警套餐
 * Summary: 查询某个应用监控的告警套餐
 */
async function queryStackAlarmruleEx(request: QueryStackAlarmruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStackAlarmruleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.stack.alarmrule.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateCustompluginRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 自定义监控指标详细信息 (嵌套对象)
  customPlugin: CustomPluginDO(name='custom_plugin'),
}

model UpdateCustompluginResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 修改自定义监控指标
 * Summary: 修改自定义监控指标
 */
async function updateCustomplugin(request: UpdateCustompluginRequest): UpdateCustompluginResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateCustompluginEx(request, headers, runtime);
}

/**
 * Description: 修改自定义监控指标
 * Summary: 修改自定义监控指标
 */
async function updateCustompluginEx(request: UpdateCustompluginRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateCustompluginResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.customplugin.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAgentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 当前页码
  currentPage?: long(name='current_page'),
  // agent部署类型：容器CONTAINER、经典MACHINE
  deployType?: string(name='deploy_type'),
  // 模糊搜索关键字
  keyword?: string(name='keyword'),
  // app 模糊搜索关键字
  appKeyword?: string(name='app_keyword'),
  // 服务 IP 模糊搜索关键字
  serviceIpKeyword?: string(name='service_ip_keyword'),
  // 主机 IP 模糊搜索关键字
  hostIpKeyword?: string(name='host_ip_keyword'),
  // agent 状态
  status?: long(name='status'),
}

model QueryAgentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // agent 实例列表
  agentInstances?: [ AgentInstance ](name='agent_instances'),
  // agent 实例总数
  totalCount?: long(name='total_count'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 当前页码
  currentPage?: long(name='current_page'),
}

/**
 * Description: 查询 agent 安装信息列表
 * Summary: 查询 agent 安装信息列表
 */
async function queryAgent(request: QueryAgentRequest): QueryAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAgentEx(request, headers, runtime);
}

/**
 * Description: 查询 agent 安装信息列表
 * Summary: 查询 agent 安装信息列表
 */
async function queryAgentEx(request: QueryAgentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAgentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.agent.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InstallAgentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 需要安装 agent 的目标列表
  collectIds?: [ string ](name='collect_ids'),
  // 0 容器，1经典
  type?: long(name='type'),
}

model InstallAgentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 安装 agent 组件
 * Summary: 安装 agent 组件
 */
async function installAgent(request: InstallAgentRequest): InstallAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return installAgentEx(request, headers, runtime);
}

/**
 * Description: 安装 agent 组件
 * Summary: 安装 agent 组件
 */
async function installAgentEx(request: InstallAgentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InstallAgentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.agent.install', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAgentVersionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // agent 机器对应的唯一标识
  collectId?: string(name='collect_id'),
}

model GetAgentVersionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // agent版本信息
  agentVersion?: AgentVersion(name='agent_version'),
}

/**
 * Description: 获取需要安装的 agent 版本
 * Summary: 获取需要安装的 agent 版本
 */
async function getAgentVersion(request: GetAgentVersionRequest): GetAgentVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAgentVersionEx(request, headers, runtime);
}

/**
 * Description: 获取需要安装的 agent 版本
 * Summary: 获取需要安装的 agent 版本
 */
async function getAgentVersionEx(request: GetAgentVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAgentVersionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.agent.version.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableAgentVersionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // agent版本号
  agentVersion: string(name='agent_version'),
  // agent存储url
  agentUrl: string(name='agent_url'),
}

model EnableAgentVersionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 版本信息
  agentVersion?: AgentVersion(name='agent_version'),
}

/**
 * Description:  设置默认最新agent版本
 * Summary:  设置默认最新agent版本
 */
async function enableAgentVersion(request: EnableAgentVersionRequest): EnableAgentVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableAgentVersionEx(request, headers, runtime);
}

/**
 * Description:  设置默认最新agent版本
 * Summary:  设置默认最新agent版本
 */
async function enableAgentVersionEx(request: EnableAgentVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableAgentVersionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.agent.version.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
}

model GetWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 工作空间
  workspace?: Workspace(name='workspace'),
}

/**
 * Description: 获取当前工作空间
 * Summary: 获取当前工作空间
 */
async function getWorkspace(request: GetWorkspaceRequest): GetWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 获取当前工作空间
 * Summary: 获取当前工作空间
 */
async function getWorkspaceEx(request: GetWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.workspace.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model GetTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 租户
  tenant?: Tenant(name='tenant'),
}

/**
 * Description: 获取当前租户
 * Summary: 获取当前租户
 */
async function getTenant(request: GetTenantRequest): GetTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTenantEx(request, headers, runtime);
}

/**
 * Description: 获取当前租户
 * Summary: 获取当前租户
 */
async function getTenantEx(request: GetTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.tenant.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryKernelstackGeneratedconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 不带租户id和workspaceId的universalTableId后缀
  simpleTableId: string(name='simple_table_id'),
}

model QueryKernelstackGeneratedconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 栈配置列表
  generatedConfigs?: [ StackGeneratedConfig ](name='generated_configs'),
}

/**
 * Description: 查询核心态监控配置
 * Summary: 查询核心态监控配置
 */
async function queryKernelstackGeneratedconfig(request: QueryKernelstackGeneratedconfigRequest): QueryKernelstackGeneratedconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryKernelstackGeneratedconfigEx(request, headers, runtime);
}

/**
 * Description: 查询核心态监控配置
 * Summary: 查询核心态监控配置
 */
async function queryKernelstackGeneratedconfigEx(request: QueryKernelstackGeneratedconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryKernelstackGeneratedconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.kernelstack.generatedconfig.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAliyunStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model GetAliyunStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 阿里云开通状态
  status?: AliyunOpenState(name='status'),
}

/**
 * Description: 获取阿里云开通状态
 * Summary: 获取阿里云开通状态
 */
async function getAliyunStatus(request: GetAliyunStatusRequest): GetAliyunStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAliyunStatusEx(request, headers, runtime);
}

/**
 * Description: 获取阿里云开通状态
 * Summary: 获取阿里云开通状态
 */
async function getAliyunStatusEx(request: GetAliyunStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAliyunStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.aliyun.status.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OpenWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 工作空间展示名称
  workspaceDisplayName?: string(name='workspace_display_name'),
}

model OpenWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 工作空间信息
  workspace?: Workspace(name='workspace'),
}

/**
 * Description: 监控工作空间开通
 * Summary: 监控工作空间开通
 */
async function openWorkspace(request: OpenWorkspaceRequest): OpenWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 监控工作空间开通
 * Summary: 监控工作空间开通
 */
async function openWorkspaceEx(request: OpenWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.workspace.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateStackGeneratedconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 待修改的技术栈配置
  generatedConfig: StackGeneratedConfig(name='generated_config'),
}

model UpdateStackGeneratedconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新技术栈配置
 * Summary: 更新技术栈配置
 */
async function updateStackGeneratedconfig(request: UpdateStackGeneratedconfigRequest): UpdateStackGeneratedconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateStackGeneratedconfigEx(request, headers, runtime);
}

/**
 * Description: 更新技术栈配置
 * Summary: 更新技术栈配置
 */
async function updateStackGeneratedconfigEx(request: UpdateStackGeneratedconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateStackGeneratedconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.stack.generatedconfig.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 用户名(支持模糊搜索)
  keyword: string(name='keyword'),
}

model QueryUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户列表
  users?: [ MonitorUserDO ](name='users'),
}

/**
 * Description: 查询用户列表
 * Summary: 查询用户列表
 */
async function queryUser(request: QueryUserRequest): QueryUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUserEx(request, headers, runtime);
}

/**
 * Description: 查询用户列表
 * Summary: 查询用户列表
 */
async function queryUserEx(request: QueryUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.user.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAuthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 权限码
  auth: string(name='auth'),
  // 资源类型（取值范围：CUSTOM_PLUGIN(自定义监控)、FOLDER(文件夹)、UNIVERSAL_TABLE(用户应用)）
  resourceType: string(name='resource_type'),
  // 资源ID列表
  resourceIds: [ string ](name='resource_ids'),
}

model ListAuthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 权限列表
  data?: [ AuthDO ](name='data'),
}

/**
 * Description: 获取用户权限列表
 * Summary: 获取用户权限列表
 */
async function listAuth(request: ListAuthRequest): ListAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAuthEx(request, headers, runtime);
}

/**
 * Description: 获取用户权限列表
 * Summary: 获取用户权限列表
 */
async function listAuthEx(request: ListAuthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAuthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.auth.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteAuthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 待删除的权限ID
  id: long(name='id'),
}

model DeleteAuthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除用户权限
 * Summary: 删除用户权限
 */
async function deleteAuth(request: DeleteAuthRequest): DeleteAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteAuthEx(request, headers, runtime);
}

/**
 * Description: 删除用户权限
 * Summary: 删除用户权限
 */
async function deleteAuthEx(request: DeleteAuthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAuthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.auth.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAuthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 权限码
  auth: string(name='auth'),
  // 用户名列表
  userNames: [ string ](name='user_names'),
  // 权限的资源类型（取值范围：CUSTOM_PLUGIN(自定义监控)、FOLDER(文件夹)、UNIVERSAL_TABLE(用户应用)）
  resourceType: string(name='resource_type'),
  // 权限对应的资源ID
  resourceId: string(name='resource_id'),
}

model CreateAuthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新建用户权限
 * Summary: 新建用户权限
 */
async function createAuth(request: CreateAuthRequest): CreateAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAuthEx(request, headers, runtime);
}

/**
 * Description: 新建用户权限
 * Summary: 新建用户权限
 */
async function createAuthEx(request: CreateAuthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAuthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.auth.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateUserFavoriteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 收藏资源类型（取值范围：CUSTOM_PLUGIN(自定义监控)、FOLDER(文件夹)、UNIVERSAL_TABLE(用户应用)）
  resourceType: string(name='resource_type'),
  // 收藏资源ID列表，需要是相同类型下的ID (如果是自定义监控或文件夹，为数值类型，如果是用户应用，是复杂组合字符串)
  resourceIds: [ string ](name='resource_ids'),
}

model BatchcreateUserFavoriteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用户添加收藏资源(可以收藏自定义监控、文件夹、用户应用)
 * Summary: 用户添加收藏资源
 */
async function batchcreateUserFavorite(request: BatchcreateUserFavoriteRequest): BatchcreateUserFavoriteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateUserFavoriteEx(request, headers, runtime);
}

/**
 * Description: 用户添加收藏资源(可以收藏自定义监控、文件夹、用户应用)
 * Summary: 用户添加收藏资源
 */
async function batchcreateUserFavoriteEx(request: BatchcreateUserFavoriteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateUserFavoriteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.user.favorite.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteUserFavoriteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 资源类型
  resourceType: string(name='resource_type'),
  // 已收藏资源ID列表（文件夹，传入文件夹ID；自定义监控，传入自定义监控ID；应用，传入universal_table_id）
  resourceIds: [ string ](name='resource_ids'),
}

model BatchdeleteUserFavoriteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量取消收藏
 * Summary: 批量取消收藏
 */
async function batchdeleteUserFavorite(request: BatchdeleteUserFavoriteRequest): BatchdeleteUserFavoriteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteUserFavoriteEx(request, headers, runtime);
}

/**
 * Description: 批量取消收藏
 * Summary: 批量取消收藏
 */
async function batchdeleteUserFavoriteEx(request: BatchdeleteUserFavoriteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteUserFavoriteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.user.favorite.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUserOperationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 开始时间
  start: long(name='start'),
  // 结束时间
  end: long(name='end'),
  // 表名
  tableName: string(name='table_name'),
  // 表实体对应ID
  tableEntityId: long(name='table_entity_id'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 当前页
  currentPage?: long(name='current_page'),
}

model QueryUserOperationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作日志列表
  operations?: [ UserOplogDO ](name='operations'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 总记录数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 分页查询用户的操作历史
 * Summary: 查询用户的操作历史
 */
async function queryUserOperation(request: QueryUserOperationRequest): QueryUserOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUserOperationEx(request, headers, runtime);
}

/**
 * Description: 分页查询用户的操作历史
 * Summary: 查询用户的操作历史
 */
async function queryUserOperationEx(request: QueryUserOperationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUserOperationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.user.operation.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAlarmSubscriptionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 告警等级 (-1表示全部订阅)
  alarmLevel: long(name='alarm_level'),
  // 是否开启通知降频 (0 - 关闭，1 - 开启)
  notifyReduceSwitch: long(name='notify_reduce_switch'),
  // 资源类型（取值范围：CUSTOM_PLUGIN(自定义监控)、FOLDER(文件夹)、UNIVERSAL_TABLE(用户应用)）
  resourceType: string(name='resource_type'),
  // 资源 ID
  resourceId: string(name='resource_id'),
  // 用户登录名列表
  userLoginNames?: [ string ](name='user_login_names'),
  // 用户组 ID列表
  userGroupIds?: [ long ](name='user_group_ids'),
  // http web hook id列表
  alarmWebHookIds?: [ long ](name='alarm_web_hook_ids'),
}

model CreateAlarmSubscriptionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增告警订阅
 * Summary: 新增告警订阅
 */
async function createAlarmSubscription(request: CreateAlarmSubscriptionRequest): CreateAlarmSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAlarmSubscriptionEx(request, headers, runtime);
}

/**
 * Description: 新增告警订阅
 * Summary: 新增告警订阅
 */
async function createAlarmSubscriptionEx(request: CreateAlarmSubscriptionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAlarmSubscriptionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.subscription.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteAlarmSubscriptionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 待删除的告警订阅 ID
  id: long(name='id'),
}

model DeleteAlarmSubscriptionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 取消告警订阅 (删除)
 * Summary: 取消告警订阅
 */
async function deleteAlarmSubscription(request: DeleteAlarmSubscriptionRequest): DeleteAlarmSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteAlarmSubscriptionEx(request, headers, runtime);
}

/**
 * Description: 取消告警订阅 (删除)
 * Summary: 取消告警订阅
 */
async function deleteAlarmSubscriptionEx(request: DeleteAlarmSubscriptionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAlarmSubscriptionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.subscription.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PauseAlarmRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 告警暂停开始时间
  start: long(name='start'),
  // 告警暂停结束时间
  end: long(name='end'),
  // 告警关闭原因
  reason: string(name='reason'),
  // 资源类型（取值范围：CUSTOM_PLUGIN(自定义监控)、FOLDER(文件夹)、UNIVERSAL_TABLE(用户应用)）
  resourceType: string(name='resource_type'),
  // 资源 ID
  resourceId: string(name='resource_id'),
}

model PauseAlarmResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 暂停告警
 * Summary: 暂停告警
 */
async function pauseAlarm(request: PauseAlarmRequest): PauseAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pauseAlarmEx(request, headers, runtime);
}

/**
 * Description: 暂停告警
 * Summary: 暂停告警
 */
async function pauseAlarmEx(request: PauseAlarmRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PauseAlarmResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.pause', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ResumeAlarmRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 待恢复的告警 ID
  id: long(name='id'),
}

model ResumeAlarmResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 恢复告警
 * Summary: 恢复告警
 */
async function resumeAlarm(request: ResumeAlarmRequest): ResumeAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return resumeAlarmEx(request, headers, runtime);
}

/**
 * Description: 恢复告警
 * Summary: 恢复告警
 */
async function resumeAlarmEx(request: ResumeAlarmRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeAlarmResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.resume', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetLogTailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // the preferHost
  preferHost?: string(name='prefer_host'),
  // 日志完整路径
  fullPath?: string(name='full_path'),
  // 扫描路径
  scanDirs?: [ string ](name='scan_dirs'),
}

model GetLogTailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回对象
  logTail?: LogTail(name='log_tail'),
}

/**
 * Description: 拉取日志，返回LogTail
 * Summary: 拉取日志
 */
async function getLogTail(request: GetLogTailRequest): GetLogTailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getLogTailEx(request, headers, runtime);
}

/**
 * Description: 拉取日志，返回LogTail
 * Summary: 拉取日志
 */
async function getLogTailEx(request: GetLogTailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetLogTailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.log.tail.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetLogBrowserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 扫描根目录
  scanDirs: [ string ](name='scan_dirs'),
  // preferHost
  preferHost?: string(name='prefer_host'),
}

model GetLogBrowserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果，JSON String
  result?: string(name='result'),
}

/**
 * Description: 获取文件浏览结果
 * Summary: 获取文件浏览结果
 */
async function getLogBrowser(request: GetLogBrowserRequest): GetLogBrowserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getLogBrowserEx(request, headers, runtime);
}

/**
 * Description: 获取文件浏览结果
 * Summary: 获取文件浏览结果
 */
async function getLogBrowserEx(request: GetLogBrowserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetLogBrowserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.log.browser.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteFolderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 主键 ID
  id: long(name='id'),
}

model DeleteFolderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 按ID删除文件夹
 * Summary: 删除文件夹
 */
async function deleteFolder(request: DeleteFolderRequest): DeleteFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteFolderEx(request, headers, runtime);
}

/**
 * Description: 按ID删除文件夹
 * Summary: 删除文件夹
 */
async function deleteFolderEx(request: DeleteFolderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFolderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.folder.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppOverviewRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 查询截止时间，unix timestamp in ms
  endTime: long(name='end_time'),
  // 查询开始时间，unix timestamp in ms
  startTime?: long(name='start_time'),
}

model GetAppOverviewResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  data?: AppOverviewDTO(name='data'),
}

/**
 * Description: 获取总览页应用统计信息
 * Summary: 获取总览页应用统计信息
 */
async function getAppOverview(request: GetAppOverviewRequest): GetAppOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppOverviewEx(request, headers, runtime);
}

/**
 * Description: 获取总览页应用统计信息
 * Summary: 获取总览页应用统计信息
 */
async function getAppOverviewEx(request: GetAppOverviewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppOverviewResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.app.overview.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnifiedalarmHistoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 开始时间
  start: long(name='start'),
  // 结束时间
  end: long(name='end'),
  // 当前页码
  currentPage?: long(name='current_page'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 应用 / 主机
  alarmTargetType?: string(name='alarm_target_type'),
  // 告警对象
  alarmTarget?: string(name='alarm_target'),
  // 告警级别
  alarmLevel?: long(name='alarm_level'),
  // 触发状态
  status?: long(name='status'),
  // 根据应用过滤告警历史
  alarmStackInfo?: AlarmStackInfo(name='alarm_stack_info'),
}

model QueryUnifiedalarmHistoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 告警历史列表
  alarmHistories?: [ UnifiedAlarmHistoryVO ](name='alarm_histories'),
  // 总数
  totalCount?: long(name='total_count'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 每页大小
  pageSize?: long(name='page_size'),
}

/**
 * Description: 查询统一告警历史记录
 * Summary: 查询统一告警历史记录
 */
async function queryUnifiedalarmHistory(request: QueryUnifiedalarmHistoryRequest): QueryUnifiedalarmHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnifiedalarmHistoryEx(request, headers, runtime);
}

/**
 * Description: 查询统一告警历史记录
 * Summary: 查询统一告警历史记录
 */
async function queryUnifiedalarmHistoryEx(request: QueryUnifiedalarmHistoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnifiedalarmHistoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.history.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAlarmTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 告警规则的唯一名称
  alarmUniqueName: string(name='alarm_unique_name'),
  // 类型
  type?: string(name='type'),
}

model GetAlarmTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据结果
  result?: string(name='result'),
  // 测试
  alarmContext?: [ AlarmTest ](name='alarm_context'),
}

/**
 * Description: 测试演示
 * Summary: 测试演示
 */
async function getAlarmTest(request: GetAlarmTestRequest): GetAlarmTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAlarmTestEx(request, headers, runtime);
}

/**
 * Description: 测试演示
 * Summary: 测试演示
 */
async function getAlarmTestEx(request: GetAlarmTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAlarmTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.test.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAlarmwebhookRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // createOrModifyByMe
  createOrModifyByMe: boolean(name='create_or_modify_by_me'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // webhook名称
  name?: string(name='name'),
  // 修改人
  modifier?: string(name='modifier'),
  // ID列表
  ids?: [ long ](name='ids'),
  // 是否只查询当前操作者的
  onlyCurrentStaff?: boolean(name='only_current_staff'),
}

model QueryAlarmwebhookResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // webhook列表
  webHooks?: [ AlarmWebHook ](name='web_hooks'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 总记录数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 获取webhook列表
 * Summary: 获取webhook列表
 */
async function queryAlarmwebhook(request: QueryAlarmwebhookRequest): QueryAlarmwebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAlarmwebhookEx(request, headers, runtime);
}

/**
 * Description: 获取webhook列表
 * Summary: 获取webhook列表
 */
async function queryAlarmwebhookEx(request: QueryAlarmwebhookRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAlarmwebhookResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarmwebhook.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateUnifiedalarmRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 告警规则名称
  name: string(name='name'),
  // 标识符 区分规则是自定义规则还是pql规则
  category: string(name='category'),
  // 规则配置
  ruleConfig: string(name='rule_config'),
  // 指标无数据触发告警 这是个开关 1表示打开 0表示闭合
  alarmNodata: long(name='alarm_nodata'),
  // 告警等级
  level: long(name='level'),
  // 应急处理人
  emergency?: string(name='emergency'),
  // 应急处理链接
  emergencyUrl?: string(name='emergency_url'),
  // 触发周期
  pendingHit: long(name='pending_hit'),
  // 恢复周期
  recoveredHit: long(name='recovered_hit'),
  // 检测频率
  step: long(name='step'),
  // 通知渠道
  channels: [ string ](name='channels'),
  // 通知对象
  notifyTarget?: [ UnifiedAlarmSubDTO ](name='notify_target'),
  // 静默时间
  silenceTime: long(name='silence_time'),
  // 告警触发时通知 1:勾选 0:不勾选
  notifyFiring: long(name='notify_firing'),
  // 告警恢复时通知 1:勾选 0:不勾选
  notifyRecovered: long(name='notify_recovered'),
  // 告警无数据时通知 1:勾选 0:不勾选
  notifyNodata: long(name='notify_nodata'),
  // 通知时间
  notifyTimeFilter?: TimeFilter(name='notify_time_filter'),
  // 工作区名
  workspaceName: string(name='workspace_name'),
}

model CreateUnifiedalarmRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建告警规则
 * Summary: 创建告警规则
 */
async function createUnifiedalarmRule(request: CreateUnifiedalarmRuleRequest): CreateUnifiedalarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createUnifiedalarmRuleEx(request, headers, runtime);
}

/**
 * Description: 创建告警规则
 * Summary: 创建告警规则
 */
async function createUnifiedalarmRuleEx(request: CreateUnifiedalarmRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateUnifiedalarmRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.rule.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateUnifiedalarmRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 主键
  id: long(name='id'),
  // 规则名称
  name: string(name='name'),
  // 规则分类
  category: string(name='category'),
  // 规则配置
  ruleConfig: string(name='rule_config'),
  // 指标无数据时触发告警
  alarmNodata: long(name='alarm_nodata'),
  // 告警等级
  level: long(name='level'),
  // 应急处理人
  emergency?: string(name='emergency'),
  // 应急处理链接
  emergencyUrl?: string(name='emergency_url'),
  // 触发周期
  pendingHit: long(name='pending_hit'),
  // 恢复周期
  recoveredHit: long(name='recovered_hit'),
  // 检测频率
  step: long(name='step'),
  // 通知渠道 
  channels: [ string ](name='channels'),
  // 通知对象
  notifyTarget?: [ UnifiedAlarmSubDTO ](name='notify_target'),
  // 静默时间
  silenceTime: long(name='silence_time'),
  // 告警触发时通知 
  notifyFiring: long(name='notify_firing'),
  // 告警恢复时通知
  notifyRecovered: long(name='notify_recovered'),
  // 告警无数据时通知
  notifyNodata: long(name='notify_nodata'),
  // 通知时间
  notifyTimeFilter?: TimeFilter(name='notify_time_filter'),
  // 启停状态
  status?: string(name='status'),
  // 暂停开始时间
  suspendedStartTime?: long(name='suspended_start_time'),
  // 告警结束时间
  suspendedEndTime?: long(name='suspended_end_time'),
  // 暂停原因
  suspendedReason?: string(name='suspended_reason'),
  // 工作空间名
  workspaceName: string(name='workspace_name'),
}

model UpdateUnifiedalarmRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新告警规则
 * Summary: 更新告警规则
 */
async function updateUnifiedalarmRule(request: UpdateUnifiedalarmRuleRequest): UpdateUnifiedalarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateUnifiedalarmRuleEx(request, headers, runtime);
}

/**
 * Description: 更新告警规则
 * Summary: 更新告警规则
 */
async function updateUnifiedalarmRuleEx(request: UpdateUnifiedalarmRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateUnifiedalarmRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.rule.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnifiedalarmRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 告警规则名称模糊搜索
  keyword?: string(name='keyword'),
  // 告警等级
  level?: long(name='level'),
  // 告警对象
  alarmTarget?: AlarmTarget(name='alarm_target'),
  // 启停状态
  ruleStatus?: long(name='rule_status'),
  // 告警状态
  alarmStatus?: long(name='alarm_status'),
  // 只看我
  onlyMe?: boolean(name='only_me'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面尺寸
  pageSize?: long(name='page_size'),
  // 工作区名
  workspaceName: string(name='workspace_name'),
  // 告警规则id
  ruleId?: long(name='rule_id'),
  // 告警唯一标识
  ruleUniqueIdentity?: string(name='rule_unique_identity'),
  // 标识符 区分规则是自定义规则还是pql规则
  category: string(name='category'),
  //  
  refDatasourceType?: string(name='ref_datasource_type'),
  // 根据用户组过滤
  filterUserGroup?: long(name='filter_user_group'),
  // 根据webhook过滤
  filterWebhook?: long(name='filter_webhook'),
  // 钉钉机器人过滤
  filterDingRobot?: long(name='filter_ding_robot'),
  // 根据应栈信息对告警规则做过滤
  alarmStackInfo?: AlarmStackInfo(name='alarm_stack_info'),
  // CUSTOM,STACK,HOST
  dataSourceType?: string(name='data_source_type'),
  // 过滤的告警级别
  levels?: [ long ](name='levels'),
  // 告警事件id
  alarmEventId?: string(name='alarm_event_id'),
}

model QueryUnifiedalarmRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 告警规则列表
  alarmRules?: [ UnifiedAlarmRuleVO ](name='alarm_rules'),
  // 总记录数
  totalCount?: long(name='total_count'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面尺寸
  pageSize?: long(name='page_size'),
}

/**
 * Description: 查询告警规则列表
 * Summary: 查询告警规则列表
 */
async function queryUnifiedalarmRule(request: QueryUnifiedalarmRuleRequest): QueryUnifiedalarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnifiedalarmRuleEx(request, headers, runtime);
}

/**
 * Description: 查询告警规则列表
 * Summary: 查询告警规则列表
 */
async function queryUnifiedalarmRuleEx(request: QueryUnifiedalarmRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnifiedalarmRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.rule.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetUnifiedalarmRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 告警规则id
  id: long(name='id'),
  // 工作空间名
  workspaceName: string(name='workspace_name'),
}

model GetUnifiedalarmRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 告警规则详情
  alarmRule?: UnifiedAlarmRuleVO(name='alarm_rule'),
}

/**
 * Description: 查询告警规则详情
 * Summary: 查询告警规则详情
 */
async function getUnifiedalarmRule(request: GetUnifiedalarmRuleRequest): GetUnifiedalarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getUnifiedalarmRuleEx(request, headers, runtime);
}

/**
 * Description: 查询告警规则详情
 * Summary: 查询告警规则详情
 */
async function getUnifiedalarmRuleEx(request: GetUnifiedalarmRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetUnifiedalarmRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.rule.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteUnifiedalarmRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 告警规则 id
  id: long(name='id'),
  // 工作空间名
  workspaceName: string(name='workspace_name'),
}

model DeleteUnifiedalarmRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除告警规则
 * Summary: 删除告警规则
 */
async function deleteUnifiedalarmRule(request: DeleteUnifiedalarmRuleRequest): DeleteUnifiedalarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteUnifiedalarmRuleEx(request, headers, runtime);
}

/**
 * Description: 删除告警规则
 * Summary: 删除告警规则
 */
async function deleteUnifiedalarmRuleEx(request: DeleteUnifiedalarmRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteUnifiedalarmRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.rule.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnifiedalarmNotifyhistoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 发送状态
  status?: long(name='status'),
  // 通知渠道
  channel?: string(name='channel'),
  // 通知人id
  subscriber?: string(name='subscriber'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面尺寸
  pageSize?: long(name='page_size'),
  // 工作区名
  workspaceName: string(name='workspace_name'),
  // 事件id
  eventId?: string(name='event_id'),
  // 开始时间
  startTime: long(name='start_time'),
  // 结束时间
  endTime: long(name='end_time'),
  // 查询告警内容
  keyword?: string(name='keyword'),
  // 告警规则 ID
  alarmRuleId?: long(name='alarm_rule_id'),
  // 告警状态
  alarmStatus?: long(name='alarm_status'),
  // 根据应用过滤告警历史
  alarmStackInfo?: AlarmStackInfo(name='alarm_stack_info'),
  // 是否根据通知对象过滤
  alarmSubscribers?: [ UnifiedAlarmSubDTO ](name='alarm_subscribers'),
}

model QueryUnifiedalarmNotifyhistoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总记录数
  totalCount?: long(name='total_count'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面尺寸
  pageSize?: long(name='page_size'),
  // 响应结果
  alarmNotifyHistories?: [ UnifiedAlarmNotifyHistoryVO ](name='alarm_notify_histories'),
  // 告警通知历史中对应的通知对象
  alarmNotifySubs?: [ UnifiedAlarmSubDTO ](name='alarm_notify_subs'),
}

/**
 * Description: 查询告警消息历史
 * Summary: 查询告警消息历史
 */
async function queryUnifiedalarmNotifyhistory(request: QueryUnifiedalarmNotifyhistoryRequest): QueryUnifiedalarmNotifyhistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnifiedalarmNotifyhistoryEx(request, headers, runtime);
}

/**
 * Description: 查询告警消息历史
 * Summary: 查询告警消息历史
 */
async function queryUnifiedalarmNotifyhistoryEx(request: QueryUnifiedalarmNotifyhistoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnifiedalarmNotifyhistoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.notifyhistory.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateUnifiedalarmSubRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 通知对象 可能有多个
  alarmSubs: [ UnifiedAlarmSubDTO ](name='alarm_subs'),
  // 告警规则id集合
  alarmRuleIds?: [ long ](name='alarm_rule_ids'),
  // 是否全部订阅
  subAll?: boolean(name='sub_all'),
  // 工作区名
  workspaceName: string(name='workspace_name'),
  // 订阅成员是新增吗？新增时，不做旧的订阅关系做覆盖
  isAppend?: boolean(name='is_append'),
}

model BatchcreateUnifiedalarmSubResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量订阅告警
 * Summary: 批量订阅告警
 */
async function batchcreateUnifiedalarmSub(request: BatchcreateUnifiedalarmSubRequest): BatchcreateUnifiedalarmSubResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateUnifiedalarmSubEx(request, headers, runtime);
}

/**
 * Description: 批量订阅告警
 * Summary: 批量订阅告警
 */
async function batchcreateUnifiedalarmSubEx(request: BatchcreateUnifiedalarmSubRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateUnifiedalarmSubResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.sub.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteUnifiedalarmSubRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 通知对象 可能为多个
  alarmSub: UnifiedAlarmSubDTO(name='alarm_sub'),
  // 规则id集合
  ruleId: long(name='rule_id'),
  // 工作区名
  workspaceName: string(name='workspace_name'),
}

model DeleteUnifiedalarmSubResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 取消订阅
 * Summary: 批量取消订阅
 */
async function deleteUnifiedalarmSub(request: DeleteUnifiedalarmSubRequest): DeleteUnifiedalarmSubResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteUnifiedalarmSubEx(request, headers, runtime);
}

/**
 * Description: 取消订阅
 * Summary: 批量取消订阅
 */
async function deleteUnifiedalarmSubEx(request: DeleteUnifiedalarmSubRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteUnifiedalarmSubResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.sub.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnifiedalarmSubRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 通知人
  subscriber?: string(name='subscriber'),
  // 通知人的类型
  subscriberType?: string(name='subscriber_type'),
  // 是否包含我 
  onlyMe?: boolean(name='only_me'),
  // 工作区名
  workspaceName: string(name='workspace_name'),
  // 规则id 
  alarmRuleId?: long(name='alarm_rule_id'),
  // 模板id
  alarmTplId?: long(name='alarm_tpl_id'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面尺寸
  pageSize?: long(name='page_size'),
  // 订阅人来源
  subscriberSource?: string(name='subscriber_source'),
}

model QueryUnifiedalarmSubResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 告警订阅关系列表
  alarmSubs?: [ UnifiedAlarmSubVO ](name='alarm_subs'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面尺寸
  pageSize?: long(name='page_size'),
  // 总记录数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询告警订阅关系列表
 * Summary: 查询告警订阅关系列表
 */
async function queryUnifiedalarmSub(request: QueryUnifiedalarmSubRequest): QueryUnifiedalarmSubResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnifiedalarmSubEx(request, headers, runtime);
}

/**
 * Description: 查询告警订阅关系列表
 * Summary: 查询告警订阅关系列表
 */
async function queryUnifiedalarmSubEx(request: QueryUnifiedalarmSubRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnifiedalarmSubResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.sub.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateUnifiedalarmTplRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 模板名称
  name: string(name='name'),
  // 区分自定义还是pql
  category: string(name='category'),
  // 规则配置
  ruleConfig: string(name='rule_config'),
  // 告警等级
  level: long(name='level'),
  // 应急处理人
  emergency?: string(name='emergency'),
  // 应急处理链接
  emergencyUrl?: string(name='emergency_url'),
  // 触发周期
  pendingHit: long(name='pending_hit'),
  // 恢复周期
  recoveredHit: long(name='recovered_hit'),
  // 检测频率
  step: long(name='step'),
  // 通知渠道
  channels: [ string ](name='channels'),
  // 通知对象
  alarmSubs?: [ UnifiedAlarmSubDTO ](name='alarm_subs'),
  // 静默期
  silenceTime: long(name='silence_time'),
  // 告警触发时通知
  notifyFiring: long(name='notify_firing'),
  // 告警恢复时通知
  notifyRecovered: long(name='notify_recovered'),
  // 告警无数据时通知
  notifyNodata: long(name='notify_nodata'),
  // 通知时间
  notifyTimeFilter?: TimeFilter(name='notify_time_filter'),
  // 工作区名
  workspaceName: string(name='workspace_name'),
  // 指标无数据触发告警 这是个开关 1表示打开 0表示闭合
  alarmNodata: long(name='alarm_nodata'),
}

model CreateUnifiedalarmTplResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true 成功 false 失败
  result?: boolean(name='result'),
}

/**
 * Description: 创建告警规则模板
 * Summary: 创建告警规则模板
 */
async function createUnifiedalarmTpl(request: CreateUnifiedalarmTplRequest): CreateUnifiedalarmTplResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createUnifiedalarmTplEx(request, headers, runtime);
}

/**
 * Description: 创建告警规则模板
 * Summary: 创建告警规则模板
 */
async function createUnifiedalarmTplEx(request: CreateUnifiedalarmTplRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateUnifiedalarmTplResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.tpl.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateUnifiedalarmTplRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 主键
  id: long(name='id'),
  // 模板名称
  name: string(name='name'),
  // 区分自定义还是pql
  category: string(name='category'),
  // 规则配置
  ruleConfig: string(name='rule_config'),
  // 告警等级
  level: long(name='level'),
  // 应急处理人
  emergency?: string(name='emergency'),
  // 应急处理链接
  emergencyUrl?: string(name='emergency_url'),
  // 触发周期
  pendingHit: long(name='pending_hit'),
  // 恢复周期
  recoveredHit: long(name='recovered_hit'),
  // 检测频率
  step: long(name='step'),
  // 通知渠道
  channels: [ string ](name='channels'),
  // 通知对象 可能有多个
  alarmSubs?: [ UnifiedAlarmSubDTO ](name='alarm_subs'),
  // 静默期
  silenceTime: long(name='silence_time'),
  // 告警触发时通知
  notifyFiring: long(name='notify_firing'),
  // 告警恢复时通知
  notifyRecovered: long(name='notify_recovered'),
  // 告警无数据时通知
  notifyNodata: long(name='notify_nodata'),
  // 通知时间
  notifyTimeFilter?: TimeFilter(name='notify_time_filter'),
  // 工作空间名
  workspaceName: string(name='workspace_name'),
}

model UpdateUnifiedalarmTplResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新告警规则模板
 * Summary: 更新告警规则模板
 */
async function updateUnifiedalarmTpl(request: UpdateUnifiedalarmTplRequest): UpdateUnifiedalarmTplResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateUnifiedalarmTplEx(request, headers, runtime);
}

/**
 * Description: 更新告警规则模板
 * Summary: 更新告警规则模板
 */
async function updateUnifiedalarmTplEx(request: UpdateUnifiedalarmTplRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateUnifiedalarmTplResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.tpl.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnifiedalarmTplRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 当前页
  // 
  currentPage?: long(name='current_page'),
  // 页面尺寸
  pageSize?: long(name='page_size'),
  // 工作区名
  workspaceName: string(name='workspace_name'),
}

model QueryUnifiedalarmTplResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 告警模板集合
  alarmTpls?: [ UnifiedAlarmTplVO ](name='alarm_tpls'),
  // 总记录数
  totalCount?: long(name='total_count'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面尺寸
  pageSize?: long(name='page_size'),
}

/**
 * Description: 查询告警规则模板列表
 * Summary: 查询告警规则模板列表
 */
async function queryUnifiedalarmTpl(request: QueryUnifiedalarmTplRequest): QueryUnifiedalarmTplResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnifiedalarmTplEx(request, headers, runtime);
}

/**
 * Description: 查询告警规则模板列表
 * Summary: 查询告警规则模板列表
 */
async function queryUnifiedalarmTplEx(request: QueryUnifiedalarmTplRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnifiedalarmTplResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.tpl.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetUnifiedalarmTplRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 主键
  id: long(name='id'),
  // 工作空间名
  workspaceName: string(name='workspace_name'),
}

model GetUnifiedalarmTplResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 告警规则模板详情
  alarmTpl?: UnifiedAlarmTplVO(name='alarm_tpl'),
}

/**
 * Description: 查询告警规则模板详情
 * Summary: 查询告警规则模板详情
 */
async function getUnifiedalarmTpl(request: GetUnifiedalarmTplRequest): GetUnifiedalarmTplResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getUnifiedalarmTplEx(request, headers, runtime);
}

/**
 * Description: 查询告警规则模板详情
 * Summary: 查询告警规则模板详情
 */
async function getUnifiedalarmTplEx(request: GetUnifiedalarmTplRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetUnifiedalarmTplResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.tpl.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteUnifiedalarmTplRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 主键
  id: long(name='id'),
  // 工作空间名
  workspaceName: string(name='workspace_name'),
}

model DeleteUnifiedalarmTplResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除告警规则模板
 * Summary: 删除告警规则模板
 */
async function deleteUnifiedalarmTpl(request: DeleteUnifiedalarmTplRequest): DeleteUnifiedalarmTplResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteUnifiedalarmTplEx(request, headers, runtime);
}

/**
 * Description: 删除告警规则模板
 * Summary: 删除告警规则模板
 */
async function deleteUnifiedalarmTplEx(request: DeleteUnifiedalarmTplRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteUnifiedalarmTplResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.tpl.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SwitchUnifiedalarmRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 主键
  id: long(name='id'),
  // 告警开始时间
  suspendStartTime?: long(name='suspend_start_time'),
  // 告警结束时间
  suspendedEndTime?: long(name='suspended_end_time'),
  // 告警暂停原因
  suspendedReason?: string(name='suspended_reason'),
  // 启停状态
  status: long(name='status'),
  // 工作空间名
  workspaceName: string(name='workspace_name'),
  // 批量暂停与恢复
  ids?: [ long ](name='ids'),
}

model SwitchUnifiedalarmRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 暂停/开启告警规则
 * Summary: 暂停告警规则
 */
async function switchUnifiedalarmRule(request: SwitchUnifiedalarmRuleRequest): SwitchUnifiedalarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return switchUnifiedalarmRuleEx(request, headers, runtime);
}

/**
 * Description: 暂停/开启告警规则
 * Summary: 暂停告警规则
 */
async function switchUnifiedalarmRuleEx(request: SwitchUnifiedalarmRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SwitchUnifiedalarmRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.rule.switch', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAlarmSubscriptionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 资源类型
  resourceType: string(name='resource_type'),
  // 资源ID
  resourceId: string(name='resource_id'),
}

model ListAlarmSubscriptionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 告警订阅列表
  alarmSubs?: [ AlarmSub ](name='alarm_subs'),
}

/**
 * Description: 根据资源类型获取告警订阅列表
 * Summary: 获取告警订阅列表
 */
async function listAlarmSubscription(request: ListAlarmSubscriptionRequest): ListAlarmSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAlarmSubscriptionEx(request, headers, runtime);
}

/**
 * Description: 根据资源类型获取告警订阅列表
 * Summary: 获取告警订阅列表
 */
async function listAlarmSubscriptionEx(request: ListAlarmSubscriptionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAlarmSubscriptionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.subscription.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAlarmSubscriptionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 告警订阅主键 ID
  id: long(name='id'),
  // 告警级别
  alarmLevel: long(name='alarm_level'),
  // 降频通知开关
  notifyReduceSwitch: long(name='notify_reduce_switch'),
}

model UpdateAlarmSubscriptionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新告警订阅
 * Summary: 更新告警订阅
 */
async function updateAlarmSubscription(request: UpdateAlarmSubscriptionRequest): UpdateAlarmSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAlarmSubscriptionEx(request, headers, runtime);
}

/**
 * Description: 更新告警订阅
 * Summary: 更新告警订阅
 */
async function updateAlarmSubscriptionEx(request: UpdateAlarmSubscriptionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAlarmSubscriptionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.subscription.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListCustompluginRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 插件类型
  pluginType?: string(name='plugin_type'),
  // 过滤类型
  filterType?: string(name='filter_type'),
  // 过滤条件，如app名称
  filter?: string(name='filter'),
}

model ListCustompluginResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 自定义指标监控配置列表
  customPlugins?: [ CustomPluginDO ](name='custom_plugins'),
}

/**
 * Description: 查询 custom plugin 列表
 * Summary: 查询 custom plugin 列表
 */
async function listCustomplugin(request: ListCustompluginRequest): ListCustompluginResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listCustompluginEx(request, headers, runtime);
}

/**
 * Description: 查询 custom plugin 列表
 * Summary: 查询 custom plugin 列表
 */
async function listCustompluginEx(request: ListCustompluginRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCustompluginResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.customplugin.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnifiedalarmEventRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作区
  workspaceName: string(name='workspace_name'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面尺寸
  pageSize?: long(name='page_size'),
  // 告警等级
  alarmLevel?: long(name='alarm_level'),
  // 触发状态
  status?: long(name='status'),
  // 告警对象类型
  alarmTargetType?: string(name='alarm_target_type'),
  // 模糊查询字段
  keyword?: string(name='keyword'),
  // 开始时间
  startTime?: long(name='start_time'),
  // 结束时间
  endTime?: long(name='end_time'),
  // 告警规则 ID
  alarmRuleId?: long(name='alarm_rule_id'),
  // 根据应用栈过滤
  alarmStackInfo?: AlarmStackInfo(name='alarm_stack_info'),
  // 查询告警事件产生时间所在区间的开始时间
  fireStartTime?: long(name='fire_start_time'),
  // 查询告警事件产生时间所在区间的结束时间
  fireEndTime?: long(name='fire_end_time'),
  // 查询告警事件恢复时间所在区间的开始时间
  recoveredStartTime?: long(name='recovered_start_time'),
  // 查询告警事件恢复时间所在区间的结束时间
  recoveredEndTime?: long(name='recovered_end_time'),
}

model QueryUnifiedalarmEventResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 告警事件列表
  unifiedAlarmEventList?: [ UnifiedAlarmEventVO ](name='unified_alarm_event_list'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面尺寸
  pageSize?: long(name='page_size'),
  // 总记录数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询事件列表
 * Summary: 查询事件列表
 */
async function queryUnifiedalarmEvent(request: QueryUnifiedalarmEventRequest): QueryUnifiedalarmEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnifiedalarmEventEx(request, headers, runtime);
}

/**
 * Description: 查询事件列表
 * Summary: 查询事件列表
 */
async function queryUnifiedalarmEventEx(request: QueryUnifiedalarmEventRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnifiedalarmEventResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.event.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnifiedalarmMetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 告警规则唯一标识
  ruleUniqueIdentity?: string(name='rule_unique_identity'),
  // metrics查询唯一id
  muid?: string(name='muid'),
  // 维度筛选
  tags?: [ KeySet ](name='tags'),
  // 开始时间
  start: long(name='start'),
  // 结束时间
  end: long(name='end'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
}

model QueryUnifiedalarmMetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 指标数据
  results?: [ UnifiedAlarmMetric ](name='results'),
}

/**
 * Description: 告警指标查询
 * Summary: 告警指标查询
 */
async function queryUnifiedalarmMetrics(request: QueryUnifiedalarmMetricsRequest): QueryUnifiedalarmMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnifiedalarmMetricsEx(request, headers, runtime);
}

/**
 * Description: 告警指标查询
 * Summary: 告警指标查询
 */
async function queryUnifiedalarmMetricsEx(request: QueryUnifiedalarmMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnifiedalarmMetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.metrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateUnifiedalarmHistoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // json格式上下文信息
  context: string(name='context'),
}

model BatchcreateUnifiedalarmHistoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量创建告警历史
 * Summary: 批量创建告警历史
 */
async function batchcreateUnifiedalarmHistory(request: BatchcreateUnifiedalarmHistoryRequest): BatchcreateUnifiedalarmHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateUnifiedalarmHistoryEx(request, headers, runtime);
}

/**
 * Description: 批量创建告警历史
 * Summary: 批量创建告警历史
 */
async function batchcreateUnifiedalarmHistoryEx(request: BatchcreateUnifiedalarmHistoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateUnifiedalarmHistoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.history.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateUnifiedalarmRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 模板 ID
  tplId: long(name='tpl_id'),
  // 监控对象名称列表
  alarmTargets: [ AlarmTarget ](name='alarm_targets'),
}

model BatchcreateUnifiedalarmRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 根据模板批量创建规则
 * Summary: 根据模板批量创建规则
 */
async function batchcreateUnifiedalarmRule(request: BatchcreateUnifiedalarmRuleRequest): BatchcreateUnifiedalarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateUnifiedalarmRuleEx(request, headers, runtime);
}

/**
 * Description: 根据模板批量创建规则
 * Summary: 根据模板批量创建规则
 */
async function batchcreateUnifiedalarmRuleEx(request: BatchcreateUnifiedalarmRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateUnifiedalarmRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.rule.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnifiedalarmEventstatRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 告警等级
  alarmLevel?: long(name='alarm_level'),
  // 触发状态
  status?: long(name='status'),
  // 时间戳
  startTime: long(name='start_time'),
  // 时间戳
  endTime: long(name='end_time'),
  // 工作空间名
  workspaceName: string(name='workspace_name'),
  // 模糊查询告警内容
  keyword?: string(name='keyword'),
  // 告警规则 ID
  alarmRuleId?: long(name='alarm_rule_id'),
  // alarm_target_type
  alarmTargetType?: string(name='alarm_target_type'),
  // 根据应用过滤
  alarmStackInfo?: AlarmStackInfo(name='alarm_stack_info'),
}

model QueryUnifiedalarmEventstatResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 历史事件统计
  alarmHistoryList?: [ EventStat ](name='alarm_history_list'),
  // 时间分段
  timeSlots?: [ long ](name='time_slots'),
}

/**
 * Description: 告警事件统计信息
 * Summary: 告警事件统计信息
 */
async function queryUnifiedalarmEventstat(request: QueryUnifiedalarmEventstatRequest): QueryUnifiedalarmEventstatResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnifiedalarmEventstatEx(request, headers, runtime);
}

/**
 * Description: 告警事件统计信息
 * Summary: 告警事件统计信息
 */
async function queryUnifiedalarmEventstatEx(request: QueryUnifiedalarmEventstatRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnifiedalarmEventstatResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.eventstat.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnifiedalarmNotifystatRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 开始时间
  startTime: long(name='start_time'),
  // 结束时间
  endTime: long(name='end_time'),
  // 发送状态
  status?: long(name='status'),
  // 通知渠道
  channel?: string(name='channel'),
  // 模糊查询通知内容
  keyword?: string(name='keyword'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 告警规则 ID
  alarmRuleId?: long(name='alarm_rule_id'),
  // 事件ID
  eventId?: string(name='event_id'),
  // 根据应用过滤
  alarmStackInfo?: AlarmStackInfo(name='alarm_stack_info'),
}

model QueryUnifiedalarmNotifystatResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 统计通知历史
  notifyStatList?: [ EventStat ](name='notify_stat_list'),
  // 时间分段
  timeSlots?: [ long ](name='time_slots'),
}

/**
 * Description: 通知历史统计
 * Summary: 通知历史统计
 */
async function queryUnifiedalarmNotifystat(request: QueryUnifiedalarmNotifystatRequest): QueryUnifiedalarmNotifystatResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnifiedalarmNotifystatEx(request, headers, runtime);
}

/**
 * Description: 通知历史统计
 * Summary: 通知历史统计
 */
async function queryUnifiedalarmNotifystatEx(request: QueryUnifiedalarmNotifystatRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnifiedalarmNotifystatResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.notifystat.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMetaNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 	
  // 工作空间
  workspaceName: string(name='workspace_name'),
}

model QueryMetaNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 物理机信息
  mtmNcs?: [ MtmNc ](name='mtm_ncs'),
}

/**
 * Description: 查询主机ip列表
 * Summary: 查询主机ip列表
 */
async function queryMetaNode(request: QueryMetaNodeRequest): QueryMetaNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMetaNodeEx(request, headers, runtime);
}

/**
 * Description: 查询主机ip列表
 * Summary: 查询主机ip列表
 */
async function queryMetaNodeEx(request: QueryMetaNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMetaNodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.meta.node.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteUnifiedalarmRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // id
  idsRepeatList: [ long ](name='ids_repeat_list'),
}

model BatchdeleteUnifiedalarmRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量删除告警规则
 * Summary: 批量删除告警规则
 */
async function batchdeleteUnifiedalarmRule(request: BatchdeleteUnifiedalarmRuleRequest): BatchdeleteUnifiedalarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteUnifiedalarmRuleEx(request, headers, runtime);
}

/**
 * Description: 批量删除告警规则
 * Summary: 批量删除告警规则
 */
async function batchdeleteUnifiedalarmRuleEx(request: BatchdeleteUnifiedalarmRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteUnifiedalarmRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.rule.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateXdashboardRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace name
  workspaceName: string(name='workspace_name'),
  // request data
  data: XDashboardCRULResponseCURequest(name='data'),
}

model CreateXdashboardResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // response data
  data?: XDashboardCRULResponseCURequest(name='data'),
}

/**
 * Description: dashboard创建
 * Summary: dashboard创建
 */
async function createXdashboard(request: CreateXdashboardRequest): CreateXdashboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createXdashboardEx(request, headers, runtime);
}

/**
 * Description: dashboard创建
 * Summary: dashboard创建
 */
async function createXdashboardEx(request: CreateXdashboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateXdashboardResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdashboard.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateXdashboardRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // external workspace name
  workspaceName: string(name='workspace_name'),
  // update
  data: XDashboardCRULResponseCURequest(name='data'),
}

model UpdateXdashboardResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // dashboard body
  data?: XDashboardCRULResponseCURequest(name='data'),
}

/**
 * Description: dashboard更新
 * Summary: dashboard更新
 */
async function updateXdashboard(request: UpdateXdashboardRequest): UpdateXdashboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateXdashboardEx(request, headers, runtime);
}

/**
 * Description: dashboard更新
 * Summary: dashboard更新
 */
async function updateXdashboardEx(request: UpdateXdashboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateXdashboardResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdashboard.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXdashboardRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName: string(name='workspace_name'),
  //   
  data: XDashboardQuery(name='data'),
}

model QueryXdashboardResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // dashboard body
  data?: [ XDashboardCRULResponseCURequest ](name='data'),
}

/**
 * Description: dashboard查询
 * Summary: dashboard查询
 */
async function queryXdashboard(request: QueryXdashboardRequest): QueryXdashboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXdashboardEx(request, headers, runtime);
}

/**
 * Description: dashboard查询
 * Summary: dashboard查询
 */
async function queryXdashboardEx(request: QueryXdashboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXdashboardResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdashboard.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListXdashboardDirectoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName: string(name='workspace_name'),
  // uuid必填
  data: XResource(name='data'),
}

model ListXdashboardDirectoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // dashboard body list
  data?: [ XDashboardCRULResponseCURequest ](name='data'),
}

/**
 * Description: dashboard目录列表
 * Summary: dashboard目录列表
 */
async function listXdashboardDirectory(request: ListXdashboardDirectoryRequest): ListXdashboardDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listXdashboardDirectoryEx(request, headers, runtime);
}

/**
 * Description: dashboard目录列表
 * Summary: dashboard目录列表
 */
async function listXdashboardDirectoryEx(request: ListXdashboardDirectoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListXdashboardDirectoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdashboard.directory.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteXdashboardRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName: string(name='workspace_name'),
  // 其中uuid和type必填
  data: XResource(name='data'),
}

model DeleteXdashboardResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 删除成功资源列表
  data?: [ XResource ](name='data'),
}

/**
 * Description: dashboard删除。
单个dashboard删除或者整个目录删除
 * Summary: dashboard删除
 */
async function deleteXdashboard(request: DeleteXdashboardRequest): DeleteXdashboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteXdashboardEx(request, headers, runtime);
}

/**
 * Description: dashboard删除。
单个dashboard删除或者整个目录删除
 * Summary: dashboard删除
 */
async function deleteXdashboardEx(request: DeleteXdashboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteXdashboardResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdashboard.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXmetricInstantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName: string(name='workspace_name'),
  //  time 必填
  data: XMetricQuery(name='data'),
}

model QueryXmetricInstantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: XMetricResponse(name='data'),
}

/**
 * Description: instant query
 * Summary: instant query
 */
async function queryXmetricInstant(request: QueryXmetricInstantRequest): QueryXmetricInstantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXmetricInstantEx(request, headers, runtime);
}

/**
 * Description: instant query
 * Summary: instant query
 */
async function queryXmetricInstantEx(request: QueryXmetricInstantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXmetricInstantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xmetric.instant.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXmetricRangeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName: string(name='workspace_name'),
  //  start end 必填
  data: XMetricQuery(name='data'),
}

model QueryXmetricRangeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //   
  data?: XMetricResponse(name='data'),
}

/**
 * Description: range query
 * Summary: range query
 */
async function queryXmetricRange(request: QueryXmetricRangeRequest): QueryXmetricRangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXmetricRangeEx(request, headers, runtime);
}

/**
 * Description: range query
 * Summary: range query
 */
async function queryXmetricRangeEx(request: QueryXmetricRangeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXmetricRangeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xmetric.range.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXmetricdatasourceInstantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName: string(name='workspace_name'),
  //   
  data: XMetricQuery(name='data'),
}

model QueryXmetricdatasourceInstantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: XMetricResponse(name='data'),
}

/**
 * Description: datasource metric
 * Summary: datasource metric
 */
async function queryXmetricdatasourceInstant(request: QueryXmetricdatasourceInstantRequest): QueryXmetricdatasourceInstantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXmetricdatasourceInstantEx(request, headers, runtime);
}

/**
 * Description: datasource metric
 * Summary: datasource metric
 */
async function queryXmetricdatasourceInstantEx(request: QueryXmetricdatasourceInstantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXmetricdatasourceInstantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xmetricdatasource.instant.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXmetricdatasourceRangeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName: string(name='workspace_name'),
  //  
  data: XMetricQuery(name='data'),
}

model QueryXmetricdatasourceRangeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: XTableResponse(name='data'),
}

/**
 * Description: datasource metric
 * Summary: datasource metric
 */
async function queryXmetricdatasourceRange(request: QueryXmetricdatasourceRangeRequest): QueryXmetricdatasourceRangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXmetricdatasourceRangeEx(request, headers, runtime);
}

/**
 * Description: datasource metric
 * Summary: datasource metric
 */
async function queryXmetricdatasourceRangeEx(request: QueryXmetricdatasourceRangeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXmetricdatasourceRangeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xmetricdatasource.range.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXmetrictagKeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName: string(name='workspace_name'),
  //  
  data: XMetricQuery(name='data'),
}

model QueryXmetrictagKeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // tag keys
  data?: [ XMetricInfo ](name='data'),
}

/**
 * Description: metric tag keys
 * Summary: metric tag keys
 */
async function queryXmetrictagKey(request: QueryXmetrictagKeyRequest): QueryXmetrictagKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXmetrictagKeyEx(request, headers, runtime);
}

/**
 * Description: metric tag keys
 * Summary: metric tag keys
 */
async function queryXmetrictagKeyEx(request: QueryXmetrictagKeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXmetrictagKeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xmetrictag.key.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXmetrictagValueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName: string(name='workspace_name'),
  //  
  data: XMetricQuery(name='data'),
}

model QueryXmetrictagValueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: [ string ](name='data'),
}

/**
 * Description: metric tag values
 * Summary: metric tag values
 */
async function queryXmetrictagValue(request: QueryXmetrictagValueRequest): QueryXmetrictagValueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXmetrictagValueEx(request, headers, runtime);
}

/**
 * Description: metric tag values
 * Summary: metric tag values
 */
async function queryXmetrictagValueEx(request: QueryXmetrictagValueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXmetrictagValueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xmetrictag.value.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListLogserviceDesenstypesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model ListLogserviceDesenstypesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可配置的脱敏类型
  desensTypes?: [ string ](name='desens_types'),
}

/**
 * Description: 日志脱敏类型列表查询
 * Summary: 日志脱敏类型列表查询
 */
async function listLogserviceDesenstypes(request: ListLogserviceDesenstypesRequest): ListLogserviceDesenstypesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listLogserviceDesenstypesEx(request, headers, runtime);
}

/**
 * Description: 日志脱敏类型列表查询
 * Summary: 日志脱敏类型列表查询
 */
async function listLogserviceDesenstypesEx(request: ListLogserviceDesenstypesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListLogserviceDesenstypesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.logservice.desenstypes.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetLogserviceDesensconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
}

model GetLogserviceDesensconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 已配置的脱敏类型
  desensTypes?: [ string ](name='desens_types'),
}

/**
 * Description: 日志脱敏配置查询
 * Summary: 日志脱敏配置查询
 */
async function getLogserviceDesensconfig(request: GetLogserviceDesensconfigRequest): GetLogserviceDesensconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getLogserviceDesensconfigEx(request, headers, runtime);
}

/**
 * Description: 日志脱敏配置查询
 * Summary: 日志脱敏配置查询
 */
async function getLogserviceDesensconfigEx(request: GetLogserviceDesensconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetLogserviceDesensconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.logservice.desensconfig.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateLogserviceDesensconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 需配置的脱敏类型
  desensTypes: [ string ](name='desens_types'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
}

model UpdateLogserviceDesensconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 日志脱敏配置更新
 * Summary: 日志脱敏配置更新
 */
async function updateLogserviceDesensconfig(request: UpdateLogserviceDesensconfigRequest): UpdateLogserviceDesensconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateLogserviceDesensconfigEx(request, headers, runtime);
}

/**
 * Description: 日志脱敏配置更新
 * Summary: 日志脱敏配置更新
 */
async function updateLogserviceDesensconfigEx(request: UpdateLogserviceDesensconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateLogserviceDesensconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.logservice.desensconfig.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
}

model DetailUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // auth_url
  authUrl?: string(name='auth_url'),
  // user
  user?: MonitorUser(name='user'),
  // nav_head
  navHead?: NavContent(name='nav_head'),
}

/**
 * Description: 获取登录用户信息
 * Summary: 获取登录用户信息
 */
async function detailUser(request: DetailUserRequest): DetailUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailUserEx(request, headers, runtime);
}

/**
 * Description: 获取登录用户信息
 * Summary: 获取登录用户信息
 */
async function detailUserEx(request: DetailUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.user.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
  // login_name
  loginName: string(name='login_name'),
}

model AuthUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // powers
  powers?: [ LongListKeySet ](name='powers'),
  // bd_powers
  bdPowers?: [ LongListKeySet ](name='bd_powers'),
  // w_powers
  wPowers?: [ LongListKeySet ](name='w_powers'),
  // t_powers
  tPowers?: [ LongListKeySet ](name='t_powers'),
  // super_admin
  superAdmin?: boolean(name='super_admin'),
  // super_view
  superView?: boolean(name='super_view'),
  // biz_domains
  bizDomains?: [ BizDomain ](name='biz_domains'),
  // auth_url
  authUrl?: string(name='auth_url'),
}

/**
 * Description: 通过登录名获取鉴权
 * Summary: 通过登录名获取鉴权
 */
async function authUser(request: AuthUserRequest): AuthUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authUserEx(request, headers, runtime);
}

/**
 * Description: 通过登录名获取鉴权
 * Summary: 通过登录名获取鉴权
 */
async function authUserEx(request: AuthUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.user.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLogpathMetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用名
  appName: string(name='app_name'),
  // 日志路径
  fullpath: string(name='fullpath'),
  // 工作空间名
  workspaceName: string(name='workspace_name'),
  // 监控数据起始时间
  start: long(name='start'),
  // 监控数据结束时间
  end: long(name='end'),
}

model QueryLogpathMetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回数据
  results?: [ string ](name='results'),
}

/**
 * Description: 获取持久化日志路径级别的监控数据
 * Summary: 持久化日志监控
 */
async function queryLogpathMetrics(request: QueryLogpathMetricsRequest): QueryLogpathMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLogpathMetricsEx(request, headers, runtime);
}

/**
 * Description: 获取持久化日志路径级别的监控数据
 * Summary: 持久化日志监控
 */
async function queryLogpathMetricsEx(request: QueryLogpathMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLogpathMetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.logpath.metrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXmetricNameRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName: string(name='workspace_name'),
  //  
  data: XMetricQuery(name='data'),
}

model QueryXmetricNameResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: [ XMetricInfo ](name='data'),
}

/**
 * Description: query metric names
 * Summary: query metric names
 */
async function queryXmetricName(request: QueryXmetricNameRequest): QueryXmetricNameResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXmetricNameEx(request, headers, runtime);
}

/**
 * Description: query metric names
 * Summary: query metric names
 */
async function queryXmetricNameEx(request: QueryXmetricNameRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXmetricNameResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xmetric.name.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAlarmwebhookRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作区名
  workspaceName: string(name='workspace_name'),
  // web hook 名称
  name: string(name='name'),
  // web hook http url
  url: string(name='url'),
  // web hook http method
  httpMethod: string(name='http_method'),
  // web hook http headers
  headers?: [ KeySet ](name='headers'),
  // web hook http params
  params?: [ KeySet ](name='params'),
  // 配置项（timeOut，retryCount）
  config?: [ KeySet ](name='config'),
  // body_template
  bodyTemplate?: string(name='body_template'),
  // scope_global
  scopeGlobal: boolean(name='scope_global'),
  // 当前workspace有效，还是当前租户有效
  validScope: long(name='valid_scope'),
}

model CreateAlarmwebhookResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建alarmwebhook
 * Summary: 创建alarmwebhook
 */
async function createAlarmwebhook(request: CreateAlarmwebhookRequest): CreateAlarmwebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAlarmwebhookEx(request, headers, runtime);
}

/**
 * Description: 创建alarmwebhook
 * Summary: 创建alarmwebhook
 */
async function createAlarmwebhookEx(request: CreateAlarmwebhookRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAlarmwebhookResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarmwebhook.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateXdatasourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName?: string(name='workspace_name'),
  //  
  data: XDatasourceCRULResponseCURequest(name='data'),
}

model CreateXdatasourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: XDatasourceCRULResponseCURequest(name='data'),
}

/**
 * Description: datasource 创建
 * Summary: datasource 创建
 */
async function createXdatasource(request: CreateXdatasourceRequest): CreateXdatasourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createXdatasourceEx(request, headers, runtime);
}

/**
 * Description: datasource 创建
 * Summary: datasource 创建
 */
async function createXdatasourceEx(request: CreateXdatasourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateXdatasourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdatasource.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateXdatasourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName?: string(name='workspace_name'),
  //  
  data: XDatasourceCRULResponseCURequest(name='data'),
}

model UpdateXdatasourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: XDatasourceCRULResponseCURequest(name='data'),
}

/**
 * Description:  
 * Summary: datasource update
 */
async function updateXdatasource(request: UpdateXdatasourceRequest): UpdateXdatasourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateXdatasourceEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary: datasource update
 */
async function updateXdatasourceEx(request: UpdateXdatasourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateXdatasourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdatasource.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetXdatasourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName?: string(name='workspace_name'),
  //  
  data: XResource(name='data'),
}

model GetXdatasourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: XDatasourceCRULResponseCURequest(name='data'),
}

/**
 * Description:  
 * Summary:  
 */
async function getXdatasource(request: GetXdatasourceRequest): GetXdatasourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getXdatasourceEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary:  
 */
async function getXdatasourceEx(request: GetXdatasourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetXdatasourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdatasource.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteXdatasourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName?: string(name='workspace_name'),
  //  
  data: XResource(name='data'),
}

model DeleteXdatasourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //   
  data?: [ XResource ](name='data'),
}

/**
 * Description:  
 * Summary:  
 */
async function deleteXdatasource(request: DeleteXdatasourceRequest): DeleteXdatasourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteXdatasourceEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary:  
 */
async function deleteXdatasourceEx(request: DeleteXdatasourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteXdatasourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdatasource.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListXdatasourceDirectoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName?: string(name='workspace_name'),
  //  
  data: XResource(name='data'),
}

model ListXdatasourceDirectoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: [ XDatasourceCRULResponseCURequest ](name='data'),
}

/**
 * Description:  
 * Summary:  
 */
async function listXdatasourceDirectory(request: ListXdatasourceDirectoryRequest): ListXdatasourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listXdatasourceDirectoryEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary:  
 */
async function listXdatasourceDirectoryEx(request: ListXdatasourceDirectoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListXdatasourceDirectoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdatasource.directory.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAlarmwebhookRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
  // id
  id: long(name='id'),
  // name
  name: string(name='name'),
  // web hook http url
  url: string(name='url'),
  // web hook http method
  httpMethod: string(name='http_method'),
  // headers
  headers?: [ KeySet ](name='headers'),
  // params
  params?: [ KeySet ](name='params'),
  // config
  config?: [ KeySet ](name='config'),
  // body_template
  bodyTemplate?: string(name='body_template'),
  // scope_global
  scopeGlobal: boolean(name='scope_global'),
}

model UpdateAlarmwebhookResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新alarmwebhook
 * Summary: 更新alarmwebhook
 */
async function updateAlarmwebhook(request: UpdateAlarmwebhookRequest): UpdateAlarmwebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAlarmwebhookEx(request, headers, runtime);
}

/**
 * Description: 更新alarmwebhook
 * Summary: 更新alarmwebhook
 */
async function updateAlarmwebhookEx(request: UpdateAlarmwebhookRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAlarmwebhookResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarmwebhook.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteAlarmwebhookRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
  // id
  id: long(name='id'),
}

model DeleteAlarmwebhookResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除alarmwebhook
 * Summary: 删除alarmwebhook
 */
async function deleteAlarmwebhook(request: DeleteAlarmwebhookRequest): DeleteAlarmwebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteAlarmwebhookEx(request, headers, runtime);
}

/**
 * Description: 删除alarmwebhook
 * Summary: 删除alarmwebhook
 */
async function deleteAlarmwebhookEx(request: DeleteAlarmwebhookRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAlarmwebhookResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarmwebhook.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXdatasourceTableRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName: string(name='workspace_name'),
  //  
  data: XMetricQuery(name='data'),
}

model QueryXdatasourceTableResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: XMetricQuery(name='data'),
}

/**
 * Description: datasource table
 * Summary: datasource table
 */
async function queryXdatasourceTable(request: QueryXdatasourceTableRequest): QueryXdatasourceTableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXdatasourceTableEx(request, headers, runtime);
}

/**
 * Description: datasource table
 * Summary: datasource table
 */
async function queryXdatasourceTableEx(request: QueryXdatasourceTableRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXdatasourceTableResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdatasource.table.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAlarmOverviewRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 	
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // end_time
  endTime: long(name='end_time'),
  // alarm_type
  alarmType: string(name='alarm_type'),
}

model GetAlarmOverviewResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // AlarmOverviewDTO
  data?: AlarmOverviewDTO(name='data'),
}

/**
 * Description: 告警总览
 * Summary: 告警总览
 */
async function getAlarmOverview(request: GetAlarmOverviewRequest): GetAlarmOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAlarmOverviewEx(request, headers, runtime);
}

/**
 * Description: 告警总览
 * Summary: 告警总览
 */
async function getAlarmOverviewEx(request: GetAlarmOverviewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAlarmOverviewResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.overview.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppAlarmstatsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // end_time
  endTime: long(name='end_time'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
}

model QueryAppAlarmstatsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ AppAlarmStats ](name='data'),
}

/**
 * Description: 查询应用的告警数据
 * Summary: 查询应用的告警数据
 */
async function queryAppAlarmstats(request: QueryAppAlarmstatsRequest): QueryAppAlarmstatsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppAlarmstatsEx(request, headers, runtime);
}

/**
 * Description: 查询应用的告警数据
 * Summary: 查询应用的告警数据
 */
async function queryAppAlarmstatsEx(request: QueryAppAlarmstatsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppAlarmstatsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.app.alarmstats.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAlarmhistoryAlarmtrendsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // alarm_type
  alarmType: string(name='alarm_type'),
  // group_by
  groupBy: string(name='group_by'),
  // from
  from: long(name='from'),
  // to
  to: long(name='to'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
}

model QueryAlarmhistoryAlarmtrendsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: AlarmHistoryStatsVO(name='data'),
}

/**
 * Description: 告警趋势
 * Summary: 告警趋势
 */
async function queryAlarmhistoryAlarmtrends(request: QueryAlarmhistoryAlarmtrendsRequest): QueryAlarmhistoryAlarmtrendsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAlarmhistoryAlarmtrendsEx(request, headers, runtime);
}

/**
 * Description: 告警趋势
 * Summary: 告警趋势
 */
async function queryAlarmhistoryAlarmtrendsEx(request: QueryAlarmhistoryAlarmtrendsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAlarmhistoryAlarmtrendsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarmhistory.alarmtrends.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetWorkspaceConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
}

model GetWorkspaceConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否拥有kubeconfig
  hasKubeconfig?: boolean(name='has_kubeconfig'),
}

/**
 * Description: 获取workspace的配置
 * Summary: 获取workspace的配置
 */
async function getWorkspaceConfig(request: GetWorkspaceConfigRequest): GetWorkspaceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getWorkspaceConfigEx(request, headers, runtime);
}

/**
 * Description: 获取workspace的配置
 * Summary: 获取workspace的配置
 */
async function getWorkspaceConfigEx(request: GetWorkspaceConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkspaceConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.workspace.config.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetAgentVersionstrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 0 容器，1经典
  type: long(name='type'),
  // TENANT、WORKSPACE
  scope: string(name='scope'),
  // agent 地址，容器为镜像地址，经典为 OSS 地址
  agentUrl: string(name='agent_url'),
  // 版本号
  agentVersion: string(name='agent_version'),
}

model SetAgentVersionstrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: Agent版本策略配置
 * Summary: Agent版本策略配置
 */
async function setAgentVersionstrategy(request: SetAgentVersionstrategyRequest): SetAgentVersionstrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setAgentVersionstrategyEx(request, headers, runtime);
}

/**
 * Description: Agent版本策略配置
 * Summary: Agent版本策略配置
 */
async function setAgentVersionstrategyEx(request: SetAgentVersionstrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetAgentVersionstrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.agent.versionstrategy.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAgentVersionstrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 0 容器，1经典
  type: long(name='type'),
}

model GetAgentVersionstrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // agent 版本策略
  agentVersionStrategy?: AgentVersionStrategy(name='agent_version_strategy'),
}

/**
 * Description: 获取agent版本策略详情
 * Summary: 获取agent版本策略详情
 */
async function getAgentVersionstrategy(request: GetAgentVersionstrategyRequest): GetAgentVersionstrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAgentVersionstrategyEx(request, headers, runtime);
}

/**
 * Description: 获取agent版本策略详情
 * Summary: 获取agent版本策略详情
 */
async function getAgentVersionstrategyEx(request: GetAgentVersionstrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAgentVersionstrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.agent.versionstrategy.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSystemTimeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model GetSystemTimeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务器系统时间
  time?: long(name='time'),
}

/**
 * Description: 获取服务器系统时间
 * Summary: 获取服务器系统时间
 */
async function getSystemTime(request: GetSystemTimeRequest): GetSystemTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSystemTimeEx(request, headers, runtime);
}

/**
 * Description: 获取服务器系统时间
 * Summary: 获取服务器系统时间
 */
async function getSystemTimeEx(request: GetSystemTimeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSystemTimeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.system.time.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecXdatasourceMoveRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName: string(name='workspace_name'),
  //  
  data: [ XResource ](name='data'),
}

model ExecXdatasourceMoveResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: [ XResource ](name='data'),
}

/**
 * Description: move datasource
 * Summary: move datasource
 */
async function execXdatasourceMove(request: ExecXdatasourceMoveRequest): ExecXdatasourceMoveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execXdatasourceMoveEx(request, headers, runtime);
}

/**
 * Description: move datasource
 * Summary: move datasource
 */
async function execXdatasourceMoveEx(request: ExecXdatasourceMoveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecXdatasourceMoveResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdatasource.move.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXmetadataTagRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName: string(name='workspace_name'),
  //   
  data: XTarget(name='data'),
}

model QueryXmetadataTagResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: XRule(name='data'),
}

/**
 * Description: metadata default tags
 * Summary: default tags
 */
async function queryXmetadataTag(request: QueryXmetadataTagRequest): QueryXmetadataTagResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXmetadataTagEx(request, headers, runtime);
}

/**
 * Description: metadata default tags
 * Summary: default tags
 */
async function queryXmetadataTagEx(request: QueryXmetadataTagRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXmetadataTagResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xmetadata.tag.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXdatasourceSearchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName: string(name='workspace_name'),
  //  
  name?: string(name='name'),
  //  
  enabled?: boolean(name='enabled'),
  //  
  targetResourceKind?: string(name='target_resource_kind'),
  //  
  targetResourceName?: string(name='target_resource_name'),
  //  
  ruleType?: string(name='rule_type'),
  //  
  createdBy?: string(name='created_by'),
  //  
  parentUuid?: string(name='parent_uuid'),
  //  
  datasourceType?: string(name='datasource_type'),
}

model QueryXdatasourceSearchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: [ XDatasourceCRULResponseCURequest ](name='data'),
}

/**
 * Description: search datasource
 * Summary: search datasource
 */
async function queryXdatasourceSearch(request: QueryXdatasourceSearchRequest): QueryXdatasourceSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXdatasourceSearchEx(request, headers, runtime);
}

/**
 * Description: search datasource
 * Summary: search datasource
 */
async function queryXdatasourceSearchEx(request: QueryXdatasourceSearchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXdatasourceSearchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdatasource.search.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySetupConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName?: string(name='workspace_name'),
  //  
  key: string(name='key'),
}

model QuerySetupConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // key jsonString
  data?: XKeyJson(name='data'),
}

/**
 * Description:  
 * Summary: query setup config
 */
async function querySetupConfig(request: QuerySetupConfigRequest): QuerySetupConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySetupConfigEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary: query setup config
 */
async function querySetupConfigEx(request: QuerySetupConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySetupConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.setup.config.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSetupConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName?: string(name='workspace_name'),
  //  
  data: XKeyJson(name='data'),
}

model UpdateSetupConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: XKeyJson(name='data'),
}

/**
 * Description:  
 * Summary: update or insert 
 */
async function updateSetupConfig(request: UpdateSetupConfigRequest): UpdateSetupConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSetupConfigEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary: update or insert 
 */
async function updateSetupConfigEx(request: UpdateSetupConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSetupConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.setup.config.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSetupConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName?: string(name='workspace_name'),
  //  
  key: string(name='key'),
}

model DeleteSetupConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: XKeyJson(name='data'),
}

/**
 * Description:  
 * Summary: delete config
 */
async function deleteSetupConfig(request: DeleteSetupConfigRequest): DeleteSetupConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSetupConfigEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary: delete config
 */
async function deleteSetupConfigEx(request: DeleteSetupConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSetupConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.setup.config.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateWorkspaceSettingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
  // workspace_setting_detail
  workspaceSettingDetail: WorkspaceSettingDetail(name='workspace_setting_detail'),
}

model UpdateWorkspaceSettingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 告警开关配置更新
 * Summary: 告警开关配置更新
 */
async function updateWorkspaceSetting(request: UpdateWorkspaceSettingRequest): UpdateWorkspaceSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateWorkspaceSettingEx(request, headers, runtime);
}

/**
 * Description: 告警开关配置更新
 * Summary: 告警开关配置更新
 */
async function updateWorkspaceSettingEx(request: UpdateWorkspaceSettingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateWorkspaceSettingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.workspace.setting.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExportXsiteConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName?: string(name='workspace_name'),
  //  
  data: XSiteExport(name='data'),
}

model ExportXsiteConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: XSiteExportData(name='data'),
}

/**
 * Description:  
 * Summary:  
 */
async function exportXsiteConfig(request: ExportXsiteConfigRequest): ExportXsiteConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return exportXsiteConfigEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary:  
 */
async function exportXsiteConfigEx(request: ExportXsiteConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExportXsiteConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xsite.config.export', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportXsiteConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName?: string(name='workspace_name'),
  //  
  data: XSiteExportData(name='data'),
  // 替换前的字符串
  origin?: string(name='origin'),
  // 替换后的字符串
  replaced?: string(name='replaced'),
}

model ImportXsiteConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: [ XResource ](name='data'),
}

/**
 * Description:  
 * Summary: import
 */
async function importXsiteConfig(request: ImportXsiteConfigRequest): ImportXsiteConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importXsiteConfigEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary: import
 */
async function importXsiteConfigEx(request: ImportXsiteConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportXsiteConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xsite.config.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXdatasourceTreeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName?: string(name='workspace_name'),
  //  
  data?: XDatasourceQuery(name='data'),
}

model QueryXdatasourceTreeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: [ XDatasourceCRULResponseCURequest ](name='data'),
}

/**
 * Description:  
 * Summary: tree
 */
async function queryXdatasourceTree(request: QueryXdatasourceTreeRequest): QueryXdatasourceTreeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXdatasourceTreeEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary: tree
 */
async function queryXdatasourceTreeEx(request: QueryXdatasourceTreeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXdatasourceTreeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdatasource.tree.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXdashboardTreeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName?: string(name='workspace_name'),
  //  
  data: XDashboardQuery(name='data'),
}

model QueryXdashboardTreeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: [ XDashboardCRULResponseCURequest ](name='data'),
}

/**
 * Description:  
 * Summary:  
 */
async function queryXdashboardTree(request: QueryXdashboardTreeRequest): QueryXdashboardTreeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXdashboardTreeEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary:  
 */
async function queryXdashboardTreeEx(request: QueryXdashboardTreeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXdashboardTreeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdashboard.tree.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetXdashboardRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName?: string(name='workspace_name'),
  //  
  data: XResource(name='data'),
}

model GetXdashboardResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: XDashboardCRULResponseCURequest(name='data'),
}

/**
 * Description:  
 * Summary: dashboard查询
 */
async function getXdashboard(request: GetXdashboardRequest): GetXdashboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getXdashboardEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary: dashboard查询
 */
async function getXdashboardEx(request: GetXdashboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetXdashboardResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdashboard.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXdatasourcePrometheusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName?: string(name='workspace_name'),
  //  
  data: XPrometheusQuery(name='data'),
}

model QueryXdatasourcePrometheusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: XPrometheusData(name='data'),
}

/**
 * Description:  
 * Summary: prometheus metrics
 */
async function queryXdatasourcePrometheus(request: QueryXdatasourcePrometheusRequest): QueryXdatasourcePrometheusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXdatasourcePrometheusEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary: prometheus metrics
 */
async function queryXdatasourcePrometheusEx(request: QueryXdatasourcePrometheusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXdatasourcePrometheusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xdatasource.prometheus.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetNodeOverviewRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 查询开始时间，unix timestamp in ms
  startTime?: long(name='start_time'),
  // 	
  // 查询截止时间，unix timestamp in ms
  endTime: long(name='end_time'),
}

model GetNodeOverviewResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  data?: NodeOverviewDTO(name='data'),
}

/**
 * Description:  获取总览页主机统计信息
 * Summary:  获取总览页主机统计信息
 */
async function getNodeOverview(request: GetNodeOverviewRequest): GetNodeOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getNodeOverviewEx(request, headers, runtime);
}

/**
 * Description:  获取总览页主机统计信息
 * Summary:  获取总览页主机统计信息
 */
async function getNodeOverviewEx(request: GetNodeOverviewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetNodeOverviewResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.node.overview.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetConfigOverviewRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
}

model GetConfigOverviewResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总览页配置统计信息
  data?: ConfigOverviewDto(name='data'),
}

/**
 * Description: 总览页配置信息统计
 * Summary: 总览页配置信息统计
 */
async function getConfigOverview(request: GetConfigOverviewRequest): GetConfigOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getConfigOverviewEx(request, headers, runtime);
}

/**
 * Description: 总览页配置信息统计
 * Summary: 总览页配置信息统计
 */
async function getConfigOverviewEx(request: GetConfigOverviewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetConfigOverviewResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.config.overview.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetWorkspaceSettingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
}

model GetWorkspaceSettingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 工作空间配置
  workspaceSettingDetail?: WorkspaceSettingDetail(name='workspace_setting_detail'),
}

/**
 * Description: 获取workspace具体配置
 * Summary: 获取workspace具体配置
 */
async function getWorkspaceSetting(request: GetWorkspaceSettingRequest): GetWorkspaceSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getWorkspaceSettingEx(request, headers, runtime);
}

/**
 * Description: 获取workspace具体配置
 * Summary: 获取workspace具体配置
 */
async function getWorkspaceSettingEx(request: GetWorkspaceSettingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkspaceSettingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.workspace.setting.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListTraceWorkspacesettingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间，用来鉴权
  workspaceName: string(name='workspace_name'),
}

model ListTraceWorkspacesettingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 工作空间配置
  traceWorkspaceSettings?: [ TraceWorkspaceSetting ](name='trace_workspace_settings'),
}

/**
 * Description: 获取链路工作空间配置
 * Summary: 获取链路工作空间配置
 */
async function listTraceWorkspacesetting(request: ListTraceWorkspacesettingRequest): ListTraceWorkspacesettingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listTraceWorkspacesettingEx(request, headers, runtime);
}

/**
 * Description: 获取链路工作空间配置
 * Summary: 获取链路工作空间配置
 */
async function listTraceWorkspacesettingEx(request: ListTraceWorkspacesettingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTraceWorkspacesettingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.workspacesetting.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTraceWorkspacesettingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间配置
  traceWorkspaceSettings: [ TraceWorkspaceSetting ](name='trace_workspace_settings'),
  // 工作空间，用来鉴权
  workspaceName: string(name='workspace_name'),
}

model UpdateTraceWorkspacesettingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 链路工作空间配置更新
 * Summary: 链路工作空间配置更新
 */
async function updateTraceWorkspacesetting(request: UpdateTraceWorkspacesettingRequest): UpdateTraceWorkspacesettingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTraceWorkspacesettingEx(request, headers, runtime);
}

/**
 * Description: 链路工作空间配置更新
 * Summary: 链路工作空间配置更新
 */
async function updateTraceWorkspacesettingEx(request: UpdateTraceWorkspacesettingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTraceWorkspacesettingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.workspacesetting.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppSettingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
}

model ListAppSettingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // APP配置列表
  appSettings?: [ AppSetting ](name='app_settings'),
}

/**
 * Description: APP配置列表
 * Summary: APP配置列表
 */
async function listAppSetting(request: ListAppSettingRequest): ListAppSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppSettingEx(request, headers, runtime);
}

/**
 * Description: APP配置列表
 * Summary: APP配置列表
 */
async function listAppSettingEx(request: ListAppSettingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppSettingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.app.setting.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAppSettingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 是否开启应用监控采集
  collectEnable: boolean(name='collect_enable'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 配置信息
  setting?: string(name='setting'),
  // 应用名称
  appName: string(name='app_name'),
}

model UpdateAppSettingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建APP配置信息
 * Summary: 创建APP配置信息
 */
async function updateAppSetting(request: UpdateAppSettingRequest): UpdateAppSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAppSettingEx(request, headers, runtime);
}

/**
 * Description: 创建APP配置信息
 * Summary: 创建APP配置信息
 */
async function updateAppSettingEx(request: UpdateAppSettingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAppSettingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.app.setting.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppSettingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 应用名称
  appName: string(name='app_name'),
}

model GetAppSettingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // APP配置
  appSetting?: AppSetting(name='app_setting'),
}

/**
 * Description: 获取APP配置信息
 * Summary: 获取APP配置信息
 */
async function getAppSetting(request: GetAppSettingRequest): GetAppSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppSettingEx(request, headers, runtime);
}

/**
 * Description: 获取APP配置信息
 * Summary: 获取APP配置信息
 */
async function getAppSettingEx(request: GetAppSettingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppSettingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.app.setting.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnifiedalarmEventdetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作区名
  workspaceName: string(name='workspace_name'),
  // event id
  eventId: string(name='event_id'),
  // 告警规则 ID
  alarmRuleId?: long(name='alarm_rule_id'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 按page_size做记录切分。
  pageSize?: long(name='page_size'),
}

model QueryUnifiedalarmEventdetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 总记录数
  totalCount?: long(name='total_count'),
  // 页面尺寸
  pageSize?: long(name='page_size'),
  // 告警消息列表
  alarmHistoryList?: [ UnifiedAlarmHistoryVO ](name='alarm_history_list'),
}

/**
 * Description: 查询某一告警事件相关的告警列表
 * Summary: 查询某一告警事件相关的告警列表
 */
async function queryUnifiedalarmEventdetail(request: QueryUnifiedalarmEventdetailRequest): QueryUnifiedalarmEventdetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnifiedalarmEventdetailEx(request, headers, runtime);
}

/**
 * Description: 查询某一告警事件相关的告警列表
 * Summary: 查询某一告警事件相关的告警列表
 */
async function queryUnifiedalarmEventdetailEx(request: QueryUnifiedalarmEventdetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnifiedalarmEventdetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.eventdetail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnifiedalarmMonitorlistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 租户名称
  tenantId: long(name='tenant_id'),
  // 应用名称
  appName: string(name='app_name'),
  // 查询哪个技术栈下的告警指标。
  stackId: long(name='stack_id'),
}

model QueryUnifiedalarmMonitorlistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 缺省的监控指标。
  stackMonitorList?: [ StackMonitorItem ](name='stack_monitor_list'),
  // 用户定制的告警项。
  customPluginList?: [ CustomPluginDO ](name='custom_plugin_list'),
}

/**
 * Description: 查询应用的告警指标清单
 * Summary: 查询应用的告警指标清单
 */
async function queryUnifiedalarmMonitorlist(request: QueryUnifiedalarmMonitorlistRequest): QueryUnifiedalarmMonitorlistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnifiedalarmMonitorlistEx(request, headers, runtime);
}

/**
 * Description: 查询应用的告警指标清单
 * Summary: 查询应用的告警指标清单
 */
async function queryUnifiedalarmMonitorlistEx(request: QueryUnifiedalarmMonitorlistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnifiedalarmMonitorlistResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.monitorlist.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryXmetricTableRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  workspaceName: string(name='workspace_name'),
  //  
  data: XMetricQuery(name='data'),
}

model QueryXmetricTableResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  data?: XTableResponse(name='data'),
}

/**
 * Description:  
 * Summary:  
 */
async function queryXmetricTable(request: QueryXmetricTableRequest): QueryXmetricTableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryXmetricTableEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary:  
 */
async function queryXmetricTableEx(request: QueryXmetricTableRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryXmetricTableResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.xmetric.table.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceAppsqlmetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
}

model QueryTraceAppsqlmetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
}

/**
 * Description: 查询应用的SQL调用指标
 * Summary: 查询应用的SQL调用指标
 */
async function queryTraceAppsqlmetrics(request: QueryTraceAppsqlmetricsRequest): QueryTraceAppsqlmetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceAppsqlmetricsEx(request, headers, runtime);
}

/**
 * Description: 查询应用的SQL调用指标
 * Summary: 查询应用的SQL调用指标
 */
async function queryTraceAppsqlmetricsEx(request: QueryTraceAppsqlmetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceAppsqlmetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.appsqlmetrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceAppsqlstatRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
  // 排序字段
  sortBy?: string(name='sort_by'),
  // 排序是否逆序
  sortReverse?: boolean(name='sort_reverse'),
  // 分页页数
  pageNumber?: long(name='page_number'),
  // 每页记录条数
  pageSize?: long(name='page_size'),
}

model QueryTraceAppsqlstatResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
  // 分页号
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 查询总数
  totalSize?: long(name='total_size'),
  // 查询总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: 查询应用的SQL请求调用明细
 * Summary: 查询应用的SQL请求调用明细
 */
async function queryTraceAppsqlstat(request: QueryTraceAppsqlstatRequest): QueryTraceAppsqlstatResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceAppsqlstatEx(request, headers, runtime);
}

/**
 * Description: 查询应用的SQL请求调用明细
 * Summary: 查询应用的SQL请求调用明细
 */
async function queryTraceAppsqlstatEx(request: QueryTraceAppsqlstatRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceAppsqlstatResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.appsqlstat.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceAppnosqlmetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
}

model QueryTraceAppnosqlmetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
}

/**
 * Description: 查询应用的NoSQL调用指标
 * Summary: 查询应用的NoSQL调用指标
 */
async function queryTraceAppnosqlmetrics(request: QueryTraceAppnosqlmetricsRequest): QueryTraceAppnosqlmetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceAppnosqlmetricsEx(request, headers, runtime);
}

/**
 * Description: 查询应用的NoSQL调用指标
 * Summary: 查询应用的NoSQL调用指标
 */
async function queryTraceAppnosqlmetricsEx(request: QueryTraceAppnosqlmetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceAppnosqlmetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.appnosqlmetrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceAppmqconsumemetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
}

model QueryTraceAppmqconsumemetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
}

/**
 * Description: 查询应用的MQ消费调用指标
 * Summary: 查询应用的MQ消费调用指标
 */
async function queryTraceAppmqconsumemetrics(request: QueryTraceAppmqconsumemetricsRequest): QueryTraceAppmqconsumemetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceAppmqconsumemetricsEx(request, headers, runtime);
}

/**
 * Description: 查询应用的MQ消费调用指标
 * Summary: 查询应用的MQ消费调用指标
 */
async function queryTraceAppmqconsumemetricsEx(request: QueryTraceAppmqconsumemetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceAppmqconsumemetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.appmqconsumemetrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceApprpcclientmetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
}

model QueryTraceApprpcclientmetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
}

/**
 * Description: 查询应用的RPC客户端调用指标
 * Summary: 查询应用的RPC客户端调用指标
 */
async function queryTraceApprpcclientmetrics(request: QueryTraceApprpcclientmetricsRequest): QueryTraceApprpcclientmetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceApprpcclientmetricsEx(request, headers, runtime);
}

/**
 * Description: 查询应用的RPC客户端调用指标
 * Summary: 查询应用的RPC客户端调用指标
 */
async function queryTraceApprpcclientmetricsEx(request: QueryTraceApprpcclientmetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceApprpcclientmetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.apprpcclientmetrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceApprpcservermetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
}

model QueryTraceApprpcservermetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
}

/**
 * Description: 查询应用的RPC服务端指标
 * Summary:  查询应用的RPC服务端指标
 */
async function queryTraceApprpcservermetrics(request: QueryTraceApprpcservermetricsRequest): QueryTraceApprpcservermetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceApprpcservermetricsEx(request, headers, runtime);
}

/**
 * Description: 查询应用的RPC服务端指标
 * Summary:  查询应用的RPC服务端指标
 */
async function queryTraceApprpcservermetricsEx(request: QueryTraceApprpcservermetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceApprpcservermetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.apprpcservermetrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceApphttpclientmetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
}

model QueryTraceApphttpclientmetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
}

/**
 * Description: 查询应用的HTTP客户端调用指标
 * Summary: 查询应用的HTTP客户端调用指标
 */
async function queryTraceApphttpclientmetrics(request: QueryTraceApphttpclientmetricsRequest): QueryTraceApphttpclientmetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceApphttpclientmetricsEx(request, headers, runtime);
}

/**
 * Description: 查询应用的HTTP客户端调用指标
 * Summary: 查询应用的HTTP客户端调用指标
 */
async function queryTraceApphttpclientmetricsEx(request: QueryTraceApphttpclientmetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceApphttpclientmetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.apphttpclientmetrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceApphttpservermetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
}

model QueryTraceApphttpservermetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
}

/**
 * Description: 查询应用的HTTP服务端指标
 * Summary: 查询应用的HTTP服务端指标
 */
async function queryTraceApphttpservermetrics(request: QueryTraceApphttpservermetricsRequest): QueryTraceApphttpservermetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceApphttpservermetricsEx(request, headers, runtime);
}

/**
 * Description: 查询应用的HTTP服务端指标
 * Summary: 查询应用的HTTP服务端指标
 */
async function queryTraceApphttpservermetricsEx(request: QueryTraceApphttpservermetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceApphttpservermetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.apphttpservermetrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceAppnosqlstatRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
  // 排序字段
  sortBy?: string(name='sort_by'),
  // 排序是否逆序
  sortReverse?: boolean(name='sort_reverse'),
  // 分页页数
  pageNumber?: long(name='page_number'),
  // 每页记录条数
  pageSize?: long(name='page_size'),
}

model QueryTraceAppnosqlstatResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
  // 分页号
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 查询总数
  totalSize?: long(name='total_size'),
  // 查询总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: 查询应用的NoSQL请求调用明细
 * Summary: 查询应用的NoSQL请求调用明细
 */
async function queryTraceAppnosqlstat(request: QueryTraceAppnosqlstatRequest): QueryTraceAppnosqlstatResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceAppnosqlstatEx(request, headers, runtime);
}

/**
 * Description: 查询应用的NoSQL请求调用明细
 * Summary: 查询应用的NoSQL请求调用明细
 */
async function queryTraceAppnosqlstatEx(request: QueryTraceAppnosqlstatRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceAppnosqlstatResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.appnosqlstat.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceAppmqconsumestatRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
  // 排序字段
  sortBy?: string(name='sort_by'),
  // 排序是否逆序
  sortReverse?: boolean(name='sort_reverse'),
  // 分页页数
  pageNumber?: long(name='page_number'),
  // 每页记录条数
  pageSize?: long(name='page_size'),
}

model QueryTraceAppmqconsumestatResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
  // 分页号
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 查询总数
  totalSize?: long(name='total_size'),
  // 查询总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: 查询应用的MQ消费调用明细
 * Summary: 查询应用的MQ消费调用明细
 */
async function queryTraceAppmqconsumestat(request: QueryTraceAppmqconsumestatRequest): QueryTraceAppmqconsumestatResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceAppmqconsumestatEx(request, headers, runtime);
}

/**
 * Description: 查询应用的MQ消费调用明细
 * Summary: 查询应用的MQ消费调用明细
 */
async function queryTraceAppmqconsumestatEx(request: QueryTraceAppmqconsumestatRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceAppmqconsumestatResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.appmqconsumestat.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceApphttpclientstatRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
  // 排序字段
  sortBy?: string(name='sort_by'),
  // 排序是否逆序
  sortReverse?: boolean(name='sort_reverse'),
  // 分页页数
  pageNumber?: long(name='page_number'),
  // 每页记录条数
  pageSize?: long(name='page_size'),
}

model QueryTraceApphttpclientstatResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
  // 分页号
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 查询总数
  totalSize?: long(name='total_size'),
  // 查询总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: 查询应用的HTTP客户端请求调用明细
 * Summary: 查询应用的HTTP客户端请求调用明细
 */
async function queryTraceApphttpclientstat(request: QueryTraceApphttpclientstatRequest): QueryTraceApphttpclientstatResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceApphttpclientstatEx(request, headers, runtime);
}

/**
 * Description: 查询应用的HTTP客户端请求调用明细
 * Summary: 查询应用的HTTP客户端请求调用明细
 */
async function queryTraceApphttpclientstatEx(request: QueryTraceApphttpclientstatRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceApphttpclientstatResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.apphttpclientstat.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceApphttpserverstatRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
  // 排序字段
  sortBy?: string(name='sort_by'),
  // 排序是否逆序
  sortReverse?: boolean(name='sort_reverse'),
  // 分页页数
  pageNumber?: long(name='page_number'),
  // 每页记录条数
  pageSize?: long(name='page_size'),
}

model QueryTraceApphttpserverstatResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
  // 分页号
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 查询总数
  totalSize?: long(name='total_size'),
  // 查询总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: 查询应用的HTTP服务端调用明细
 * Summary: 查询应用的HTTP服务端调用明细
 */
async function queryTraceApphttpserverstat(request: QueryTraceApphttpserverstatRequest): QueryTraceApphttpserverstatResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceApphttpserverstatEx(request, headers, runtime);
}

/**
 * Description: 查询应用的HTTP服务端调用明细
 * Summary: 查询应用的HTTP服务端调用明细
 */
async function queryTraceApphttpserverstatEx(request: QueryTraceApphttpserverstatRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceApphttpserverstatResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.apphttpserverstat.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceApprpcclientstatRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
  // 排序字段
  sortBy?: string(name='sort_by'),
  // 排序是否逆序
  sortReverse?: boolean(name='sort_reverse'),
  // 分页页数
  pageNumber?: long(name='page_number'),
  // 每页记录条数
  pageSize?: long(name='page_size'),
}

model QueryTraceApprpcclientstatResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
  // 分页号
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 查询总数
  totalSize?: long(name='total_size'),
  // 查询总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: 查询应用的RPC客户端请求调用明细
 * Summary: 查询应用的RPC客户端请求调用明细
 */
async function queryTraceApprpcclientstat(request: QueryTraceApprpcclientstatRequest): QueryTraceApprpcclientstatResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceApprpcclientstatEx(request, headers, runtime);
}

/**
 * Description: 查询应用的RPC客户端请求调用明细
 * Summary: 查询应用的RPC客户端请求调用明细
 */
async function queryTraceApprpcclientstatEx(request: QueryTraceApprpcclientstatRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceApprpcclientstatResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.apprpcclientstat.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceApprpcserverstatRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
  // 排序字段
  sortBy?: string(name='sort_by'),
  // 排序是否逆序
  sortReverse?: boolean(name='sort_reverse'),
  // 分页页数
  pageNumber?: long(name='page_number'),
  // 每页记录条数
  pageSize?: long(name='page_size'),
}

model QueryTraceApprpcserverstatResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
  // 分页号
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 查询总数
  totalSize?: long(name='total_size'),
  // 查询总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: 查询应用的RPC服务端调用明细
 * Summary: 查询应用的RPC服务端调用明细
 */
async function queryTraceApprpcserverstat(request: QueryTraceApprpcserverstatRequest): QueryTraceApprpcserverstatResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceApprpcserverstatEx(request, headers, runtime);
}

/**
 * Description: 查询应用的RPC服务端调用明细
 * Summary: 查询应用的RPC服务端调用明细
 */
async function queryTraceApprpcserverstatEx(request: QueryTraceApprpcserverstatRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceApprpcserverstatResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.apprpcserverstat.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTraceWorkspacesettingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
}

model GetTraceWorkspacesettingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 工作空间配置
  traceWorkspaceSetting?: TraceWorkspaceSetting(name='trace_workspace_setting'),
}

/**
 * Description: 获取链路单工作空间配置
 * Summary: 获取链路单工作空间配置
 */
async function getTraceWorkspacesetting(request: GetTraceWorkspacesettingRequest): GetTraceWorkspacesettingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTraceWorkspacesettingEx(request, headers, runtime);
}

/**
 * Description: 获取链路单工作空间配置
 * Summary: 获取链路单工作空间配置
 */
async function getTraceWorkspacesettingEx(request: GetTraceWorkspacesettingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTraceWorkspacesettingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.workspacesetting.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceAppmqproducemetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
}

model QueryTraceAppmqproducemetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
}

/**
 * Description: 查询应用的MQ生产调用指标
 * Summary: 查询应用的MQ生产调用指标
 */
async function queryTraceAppmqproducemetrics(request: QueryTraceAppmqproducemetricsRequest): QueryTraceAppmqproducemetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceAppmqproducemetricsEx(request, headers, runtime);
}

/**
 * Description: 查询应用的MQ生产调用指标
 * Summary: 查询应用的MQ生产调用指标
 */
async function queryTraceAppmqproducemetricsEx(request: QueryTraceAppmqproducemetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceAppmqproducemetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.appmqproducemetrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceAppmqproducestatRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
  // 排序字段
  sortBy?: string(name='sort_by'),
  // 排序是否逆序
  sortReverse?: boolean(name='sort_reverse'),
  // 分页页数
  pageNumber?: long(name='page_number'),
  // 每页记录条数
  pageSize?: long(name='page_size'),
}

model QueryTraceAppmqproducestatResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
  // 分页号
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 查询总数
  totalSize?: long(name='total_size'),
  // 查询总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: 查询应用的MQ生产调用明细
 * Summary: 查询应用的MQ生产调用明细
 */
async function queryTraceAppmqproducestat(request: QueryTraceAppmqproducestatRequest): QueryTraceAppmqproducestatResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceAppmqproducestatEx(request, headers, runtime);
}

/**
 * Description: 查询应用的MQ生产调用明细
 * Summary: 查询应用的MQ生产调用明细
 */
async function queryTraceAppmqproducestatEx(request: QueryTraceAppmqproducestatRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceAppmqproducestatResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.appmqproducestat.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetMeasurementStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model GetMeasurementStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 计量计费是否开启
  measurementEnable?: boolean(name='measurement_enable'),
}

/**
 * Description: 计量计费是否开启
 * Summary: 计量计费是否开启
 */
async function getMeasurementStatus(request: GetMeasurementStatusRequest): GetMeasurementStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getMeasurementStatusEx(request, headers, runtime);
}

/**
 * Description: 计量计费是否开启
 * Summary: 计量计费是否开启
 */
async function getMeasurementStatusEx(request: GetMeasurementStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMeasurementStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.measurement.status.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLogserviceAppsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 命名空间
  workspaceName: string(name='workspace_name'),
  // 租户名称
  tenantName: string(name='tenant_name'),
}

model QueryLogserviceAppsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspace id
  workspaceId?: long(name='workspace_id'),
  // tenant_id
  tenantId?: long(name='tenant_id'),
  // 总量
  totalCount?: long(name='total_count'),
  // 应用详情列表
  result?: [ AppMeta ](name='result'),
}

/**
 * Description: 日志查询页面获取应用列表
 * Summary: 获取应用列表
 */
async function queryLogserviceApps(request: QueryLogserviceAppsRequest): QueryLogserviceAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLogserviceAppsEx(request, headers, runtime);
}

/**
 * Description: 日志查询页面获取应用列表
 * Summary: 获取应用列表
 */
async function queryLogserviceAppsEx(request: QueryLogserviceAppsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLogserviceAppsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.logservice.apps.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceApphttpserverstatusmetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
}

model QueryTraceApphttpserverstatusmetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
}

/**
 * Description: 查询应用的HTTP服务端状态指标
 * Summary: 查询应用的HTTP服务端状态指标
 */
async function queryTraceApphttpserverstatusmetrics(request: QueryTraceApphttpserverstatusmetricsRequest): QueryTraceApphttpserverstatusmetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceApphttpserverstatusmetricsEx(request, headers, runtime);
}

/**
 * Description: 查询应用的HTTP服务端状态指标
 * Summary: 查询应用的HTTP服务端状态指标
 */
async function queryTraceApphttpserverstatusmetricsEx(request: QueryTraceApphttpserverstatusmetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceApphttpserverstatusmetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.apphttpserverstatusmetrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppAlarmrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 指标栈ID
  stackId: long(name='stack_id'),
  // 应用名称
  appName: string(name='app_name'),
  // 查询所有，还是查询当前设置的告警指标。
  all: boolean(name='all'),
}

model QueryAppAlarmrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 技术栈指标
  stackMetrics?: [ StackMonitorItem ](name='stack_metrics'),
  // 应用自定义指标
  customPlugins?: [ CustomPluginDO ](name='custom_plugins'),
}

/**
 * Description: 查询应用的告警指标，或应用已经配置。
 * Summary: 查询应用的告警指标清单
 */
async function queryAppAlarmrules(request: QueryAppAlarmrulesRequest): QueryAppAlarmrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppAlarmrulesEx(request, headers, runtime);
}

/**
 * Description: 查询应用的告警指标，或应用已经配置。
 * Summary: 查询应用的告警指标清单
 */
async function queryAppAlarmrulesEx(request: QueryAppAlarmrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppAlarmrulesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.app.alarmrules.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceCompactdetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // traceId
  traceId: string(name='trace_id'),
}

model QueryTraceCompactdetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 节点
  items?: [ TraceCompactTreeItem ](name='items'),
  // 描述整体链路的额外信息，比span总数，应用总数之类的
  attributes?: [ KeySet ](name='attributes'),
}

/**
 * Description: 查询链路紧凑详情
 * Summary: 查询链路紧凑详情
 */
async function queryTraceCompactdetail(request: QueryTraceCompactdetailRequest): QueryTraceCompactdetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceCompactdetailEx(request, headers, runtime);
}

/**
 * Description: 查询链路紧凑详情
 * Summary: 查询链路紧凑详情
 */
async function queryTraceCompactdetailEx(request: QueryTraceCompactdetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceCompactdetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.compactdetail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceAppexceptionmetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
}

model QueryTraceAppexceptionmetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
}

/**
 * Description: 查询应用的异常调用指标
 * Summary: 查询应用的异常调用指标
 */
async function queryTraceAppexceptionmetrics(request: QueryTraceAppexceptionmetricsRequest): QueryTraceAppexceptionmetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceAppexceptionmetricsEx(request, headers, runtime);
}

/**
 * Description: 查询应用的异常调用指标
 * Summary: 查询应用的异常调用指标
 */
async function queryTraceAppexceptionmetricsEx(request: QueryTraceAppexceptionmetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceAppexceptionmetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.appexceptionmetrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceAppexceptionstatRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // 开始毫秒时间戳
  startTime: long(name='start_time'),
  // 结束毫秒时间戳
  endTime: long(name='end_time'),
  // 排序字段
  sortBy?: string(name='sort_by'),
  // 排序是否逆序
  sortReverse?: boolean(name='sort_reverse'),
  // 分页页数
  pageNumber?: long(name='page_number'),
  // 每页记录条数
  pageSize?: long(name='page_size'),
}

model QueryTraceAppexceptionstatResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: [ TimeSeriesMetrics ](name='result'),
  // 分页号
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 查询总数
  totalSize?: long(name='total_size'),
  // 查询总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: 查询应用的异常请求调用明细
 * Summary: 查询应用的异常请求调用明细
 */
async function queryTraceAppexceptionstat(request: QueryTraceAppexceptionstatRequest): QueryTraceAppexceptionstatResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceAppexceptionstatEx(request, headers, runtime);
}

/**
 * Description: 查询应用的异常请求调用明细
 * Summary: 查询应用的异常请求调用明细
 */
async function queryTraceAppexceptionstatEx(request: QueryTraceAppexceptionstatRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceAppexceptionstatResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.appexceptionstat.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnifiedalarmRulebindingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 告警对象类型：APP应用，HOST主机
  alarmTargetType?: string(name='alarm_target_type'),
  // 告警对象名称
  alarmTargetIdentity?: string(name='alarm_target_identity'),
  // 告警规则ID
  alarmRuleId?: long(name='alarm_rule_id'),
  // 数据源 ID
  datasource?: string(name='datasource'),
  // 数据源类型：CUSTOM自定义监控，STACK技术栈监控
  datasourceType?: string(name='datasource_type'),
  // 监控指标 URL
  url?: string(name='url'),
}

model QueryUnifiedalarmRulebindingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 告警规则绑定列表
  ruleBindings?: [ UnifiedAlarmRuleBindingVO ](name='rule_bindings'),
}

/**
 * Description: 查询告警绑定关系
 * Summary: 罗予
 */
async function queryUnifiedalarmRulebinding(request: QueryUnifiedalarmRulebindingRequest): QueryUnifiedalarmRulebindingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnifiedalarmRulebindingEx(request, headers, runtime);
}

/**
 * Description: 查询告警绑定关系
 * Summary: 罗予
 */
async function queryUnifiedalarmRulebindingEx(request: QueryUnifiedalarmRulebindingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnifiedalarmRulebindingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.unifiedalarm.rulebinding.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOpsCheckRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 	
  // 页面大小
  pageSize?: long(name='page_size'),
  // 应用名
  app?: string(name='app'),
  // 应用监控指标状态 0：异常 1：正常 不传：全部
  appStatus?: long(name='app_status'),
  // 自定义监控指标状态 0：异常 1：正常 不传：全部
  customStatus?: long(name='custom_status'),
}

model QueryOpsCheckResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ops_check_results
  opsCheckResults?: [ OpsCheckResult ](name='ops_check_results'),
  // total_count
  totalCount?: long(name='total_count'),
  // current_page
  currentPage?: long(name='current_page'),
  // 页面大小
  pageSize?: long(name='page_size'),
}

/**
 * Description: 监控数据诊断列表查询
 * Summary: 监控数据诊断列表查询
 */
async function queryOpsCheck(request: QueryOpsCheckRequest): QueryOpsCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOpsCheckEx(request, headers, runtime);
}

/**
 * Description: 监控数据诊断列表查询
 * Summary: 监控数据诊断列表查询
 */
async function queryOpsCheckEx(request: QueryOpsCheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOpsCheckResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.ops.check.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOpsAppcheckRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 应用名称
  app: string(name='app'),
  // 0：异常 1：正常
  status?: long(name='status'),
}

model QueryOpsAppcheckResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用诊断
  opsDataChecks?: [ OpsDataCheck ](name='ops_data_checks'),
}

/**
 * Description: 应用诊断
 * Summary: 应用诊断
 */
async function queryOpsAppcheck(request: QueryOpsAppcheckRequest): QueryOpsAppcheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOpsAppcheckEx(request, headers, runtime);
}

/**
 * Description: 应用诊断
 * Summary: 应用诊断
 */
async function queryOpsAppcheckEx(request: QueryOpsAppcheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOpsAppcheckResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.ops.appcheck.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAlarmDingdingrobotRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作区名
  workspaceName: string(name='workspace_name'),
  // 钉钉机器人列表
  robots: [ DingDingRobot ](name='robots'),
}

model CreateAlarmDingdingrobotResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 添加钉钉机器人
 * Summary: 添加钉钉机器人
 */
async function createAlarmDingdingrobot(request: CreateAlarmDingdingrobotRequest): CreateAlarmDingdingrobotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAlarmDingdingrobotEx(request, headers, runtime);
}

/**
 * Description: 添加钉钉机器人
 * Summary: 添加钉钉机器人
 */
async function createAlarmDingdingrobotEx(request: CreateAlarmDingdingrobotRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAlarmDingdingrobotResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.dingdingrobot.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAlarmDingdingrobotRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作区名
  workspaceName: string(name='workspace_name'),
  // 只看当前用户创建的钉钉机器人
  onlyCurrentStaff?: boolean(name='only_current_staff'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面尺寸
  pageSize?: long(name='page_size'),
  // 机器人名称
  name?: string(name='name'),
  // 根据token过滤
  token?: string(name='token'),
}

model QueryAlarmDingdingrobotResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 钉钉机器人列表
  robots?: [ DingDingRobot ](name='robots'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 总记录数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询钉钉机器人
 * Summary: 查询钉钉机器人
 */
async function queryAlarmDingdingrobot(request: QueryAlarmDingdingrobotRequest): QueryAlarmDingdingrobotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAlarmDingdingrobotEx(request, headers, runtime);
}

/**
 * Description: 查询钉钉机器人
 * Summary: 查询钉钉机器人
 */
async function queryAlarmDingdingrobotEx(request: QueryAlarmDingdingrobotRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAlarmDingdingrobotResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.dingdingrobot.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteAlarmDingdingrobotRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作区名
  workspaceName: string(name='workspace_name'),
  // 要删除的机器人列表
  robots: [ DingDingRobot ](name='robots'),
}

model DeleteAlarmDingdingrobotResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除钉钉机器人
 * Summary: 删除钉钉机器人
 */
async function deleteAlarmDingdingrobot(request: DeleteAlarmDingdingrobotRequest): DeleteAlarmDingdingrobotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteAlarmDingdingrobotEx(request, headers, runtime);
}

/**
 * Description: 删除钉钉机器人
 * Summary: 删除钉钉机器人
 */
async function deleteAlarmDingdingrobotEx(request: DeleteAlarmDingdingrobotRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAlarmDingdingrobotResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.dingdingrobot.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAlarmDingdingrobotRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作区名
  workspaceName: string(name='workspace_name'),
  // 更新的机器人清单
  robots: [ DingDingRobot ](name='robots'),
}

model UpdateAlarmDingdingrobotResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新钉钉机器人
 * Summary: 更新钉钉机器人
 */
async function updateAlarmDingdingrobot(request: UpdateAlarmDingdingrobotRequest): UpdateAlarmDingdingrobotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAlarmDingdingrobotEx(request, headers, runtime);
}

/**
 * Description: 更新钉钉机器人
 * Summary: 更新钉钉机器人
 */
async function updateAlarmDingdingrobotEx(request: UpdateAlarmDingdingrobotRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAlarmDingdingrobotResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.alarm.dingdingrobot.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppsAlarmrulecountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 查询app清单
  apps: [ string ](name='apps'),
}

model QueryAppsAlarmrulecountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用告警规则数清单
  appAlarmRuleCounts?: [ AppAlarmRuleCount ](name='app_alarm_rule_counts'),
}

/**
 * Description: 查询应用告警统计
 * Summary: 查询应用告警统计
 */
async function queryAppsAlarmrulecount(request: QueryAppsAlarmrulecountRequest): QueryAppsAlarmrulecountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppsAlarmrulecountEx(request, headers, runtime);
}

/**
 * Description: 查询应用告警统计
 * Summary: 查询应用告警统计
 */
async function queryAppsAlarmrulecountEx(request: QueryAppsAlarmrulecountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppsAlarmrulecountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.apps.alarmrulecount.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppsUnifiedalarmstatsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 告警开始时间
  startTime?: long(name='start_time'),
  // 告警结束时间
  endTime: long(name='end_time'),
}

model QueryAppsUnifiedalarmstatsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 正在告警的所有应用状态
  appAlarmStatus?: [ AppAlarmStats ](name='app_alarm_status'),
  // 总应用数
  totalAppCount?: long(name='total_app_count'),
  // 正在告警的应用数
  alarmAppCount?: long(name='alarm_app_count'),
}

/**
 * Description: 根据app维度查询统一告警状态
 * Summary: 根据app维度查询统一告警状态
 */
async function queryAppsUnifiedalarmstats(request: QueryAppsUnifiedalarmstatsRequest): QueryAppsUnifiedalarmstatsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppsUnifiedalarmstatsEx(request, headers, runtime);
}

/**
 * Description: 根据app维度查询统一告警状态
 * Summary: 根据app维度查询统一告警状态
 */
async function queryAppsUnifiedalarmstatsEx(request: QueryAppsUnifiedalarmstatsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppsUnifiedalarmstatsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.apps.unifiedalarmstats.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SwitchOpsAlarmRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // DATA_OPS： 诊断告警
  // AGENT：agent告警
  // 
  alarmTargetType: string(name='alarm_target_type'),
  // 1：开启告警
  // 0：暂停告警
  status: long(name='status'),
  // 应用
  alarmTargetIdentity?: string(name='alarm_target_identity'),
}

model SwitchOpsAlarmResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 开启监控数据诊断告警
 * Summary: 开启监控数据诊断告警
 */
async function switchOpsAlarm(request: SwitchOpsAlarmRequest): SwitchOpsAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return switchOpsAlarmEx(request, headers, runtime);
}

/**
 * Description: 开启监控数据诊断告警
 * Summary: 开启监控数据诊断告警
 */
async function switchOpsAlarmEx(request: SwitchOpsAlarmRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SwitchOpsAlarmResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.ops.alarm.switch', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllTraasmetaTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model AllTraasmetaTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // tenants
  tenants?: [ TraasTenantDto ](name='tenants'),
}

/**
 * Description: 获取所有租户
 * Summary: 获取所有租户
 */
async function allTraasmetaTenant(request: AllTraasmetaTenantRequest): AllTraasmetaTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allTraasmetaTenantEx(request, headers, runtime);
}

/**
 * Description: 获取所有租户
 * Summary: 获取所有租户
 */
async function allTraasmetaTenantEx(request: AllTraasmetaTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllTraasmetaTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.tenant.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllTraasmetaRegionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model AllTraasmetaRegionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // regions
  regions?: [ TraasRegionDto ](name='regions'),
}

/**
 * Description: 获取所有region
 * Summary: 获取所有region
 */
async function allTraasmetaRegion(request: AllTraasmetaRegionRequest): AllTraasmetaRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allTraasmetaRegionEx(request, headers, runtime);
}

/**
 * Description: 获取所有region
 * Summary: 获取所有region
 */
async function allTraasmetaRegionEx(request: AllTraasmetaRegionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllTraasmetaRegionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.region.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryTraasmetaTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 当前页
  currentPage?: long(name='current_page'),
}

model PagequeryTraasmetaTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // tenants
  tenants?: [ TraasTenantDto ](name='tenants'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 租户分页查询
 * Summary: 租户分页查询
 */
async function pagequeryTraasmetaTenant(request: PagequeryTraasmetaTenantRequest): PagequeryTraasmetaTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryTraasmetaTenantEx(request, headers, runtime);
}

/**
 * Description: 租户分页查询
 * Summary: 租户分页查询
 */
async function pagequeryTraasmetaTenantEx(request: PagequeryTraasmetaTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryTraasmetaTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.tenant.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTraasmetaTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
  // name
  name?: string(name='name'),
}

model GetTraasmetaTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // tenant
  tenant?: TraasTenantDto(name='tenant'),
}

/**
 * Description: 获取单个租户
 * Summary: 获取单个租户
 */
async function getTraasmetaTenant(request: GetTraasmetaTenantRequest): GetTraasmetaTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTraasmetaTenantEx(request, headers, runtime);
}

/**
 * Description: 获取单个租户
 * Summary: 获取单个租户
 */
async function getTraasmetaTenantEx(request: GetTraasmetaTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTraasmetaTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.tenant.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraasmetaTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // name
  name?: string(name='name'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
}

model QueryTraasmetaTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // tenants
  tenants?: [ TraasTenantDto ](name='tenants'),
}

/**
 * Description: 租户查询
 * Summary: 租户查询
 */
async function queryTraasmetaTenant(request: QueryTraasmetaTenantRequest): QueryTraasmetaTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraasmetaTenantEx(request, headers, runtime);
}

/**
 * Description: 租户查询
 * Summary: 租户查询
 */
async function queryTraasmetaTenantEx(request: QueryTraasmetaTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraasmetaTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.tenant.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryTraasmetaTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid数组
  uuids?: [ string ](name='uuids'),
  // names
  names?: [ string ](name='names'),
}

model BatchqueryTraasmetaTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // tenants
  tenants?: [ TraasTenantDto ](name='tenants'),
}

/**
 * Description: 批量查询租户
 * Summary: 批量查询租户
 */
async function batchqueryTraasmetaTenant(request: BatchqueryTraasmetaTenantRequest): BatchqueryTraasmetaTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryTraasmetaTenantEx(request, headers, runtime);
}

/**
 * Description: 批量查询租户
 * Summary: 批量查询租户
 */
async function batchqueryTraasmetaTenantEx(request: BatchqueryTraasmetaTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryTraasmetaTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.tenant.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTraasmetaTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // tenant name
  name: string(name='name'),
  // display_name
  displayName?: string(name='display_name'),
  // outsideId
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom?: string(name='source_from'),
}

model CreateTraasmetaTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // tenant
  tenant?: TraasTenantDto(name='tenant'),
}

/**
 * Description: 创建tenant
 * Summary: 创建tenant
 */
async function createTraasmetaTenant(request: CreateTraasmetaTenantRequest): CreateTraasmetaTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTraasmetaTenantEx(request, headers, runtime);
}

/**
 * Description: 创建tenant
 * Summary: 创建tenant
 */
async function createTraasmetaTenantEx(request: CreateTraasmetaTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTraasmetaTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.tenant.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateTraasmetaTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 租户列表
  tenants: [ TraasTenantDto ](name='tenants'),
}

model BatchcreateTraasmetaTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // tenants
  tenants?: [ TraasTenantDto ](name='tenants'),
}

/**
 * Description: 批量创建租户
 * Summary: 批量创建租户
 */
async function batchcreateTraasmetaTenant(request: BatchcreateTraasmetaTenantRequest): BatchcreateTraasmetaTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateTraasmetaTenantEx(request, headers, runtime);
}

/**
 * Description: 批量创建租户
 * Summary: 批量创建租户
 */
async function batchcreateTraasmetaTenantEx(request: BatchcreateTraasmetaTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateTraasmetaTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.tenant.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTraasmetaTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
  // display_name
  displayName: string(name='display_name'),
  // outside_id
  outsideId: string(name='outside_id'),
}

model UpdateTraasmetaTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // tenant
  tenant?: TraasTenantDto(name='tenant'),
}

/**
 * Description: 更新租户
 * Summary: 更新租户
 */
async function updateTraasmetaTenant(request: UpdateTraasmetaTenantRequest): UpdateTraasmetaTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTraasmetaTenantEx(request, headers, runtime);
}

/**
 * Description: 更新租户
 * Summary: 更新租户
 */
async function updateTraasmetaTenantEx(request: UpdateTraasmetaTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTraasmetaTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.tenant.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteTraasmetaTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
}

model DeleteTraasmetaTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除租户
 * Summary: 删除租户
 */
async function deleteTraasmetaTenant(request: DeleteTraasmetaTenantRequest): DeleteTraasmetaTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteTraasmetaTenantEx(request, headers, runtime);
}

/**
 * Description: 删除租户
 * Summary: 删除租户
 */
async function deleteTraasmetaTenantEx(request: DeleteTraasmetaTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTraasmetaTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.tenant.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteTraasmetaTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids: [ string ](name='uuids'),
}

model BatchdeleteTraasmetaTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量删除租户
 * Summary: 批量删除租户
 */
async function batchdeleteTraasmetaTenant(request: BatchdeleteTraasmetaTenantRequest): BatchdeleteTraasmetaTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteTraasmetaTenantEx(request, headers, runtime);
}

/**
 * Description: 批量删除租户
 * Summary: 批量删除租户
 */
async function batchdeleteTraasmetaTenantEx(request: BatchdeleteTraasmetaTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteTraasmetaTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.tenant.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTraasmetaRegionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // name
  name?: string(name='name'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model GetTraasmetaRegionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // traasregiondto
  region?: TraasRegionDto(name='region'),
}

/**
 * Description: 获取单个地域
 * Summary: 获取单个地域
 */
async function getTraasmetaRegion(request: GetTraasmetaRegionRequest): GetTraasmetaRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTraasmetaRegionEx(request, headers, runtime);
}

/**
 * Description: 获取单个地域
 * Summary: 获取单个地域
 */
async function getTraasmetaRegionEx(request: GetTraasmetaRegionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTraasmetaRegionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.region.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllTraasmetaZoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model AllTraasmetaZoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // zones
  zones?: [ TraasZoneDto ](name='zones'),
}

/**
 * Description: 获取所有机房
 * Summary: 获取所有机房
 */
async function allTraasmetaZone(request: AllTraasmetaZoneRequest): AllTraasmetaZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allTraasmetaZoneEx(request, headers, runtime);
}

/**
 * Description: 获取所有机房
 * Summary: 获取所有机房
 */
async function allTraasmetaZoneEx(request: AllTraasmetaZoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllTraasmetaZoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.zone.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTraasmetaZoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // name
  name?: string(name='name'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model GetTraasmetaZoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // zone
  zone?: TraasZoneDto(name='zone'),
}

/**
 * Description: 获取单个机房
 * Summary: 获取单个机房
 */
async function getTraasmetaZone(request: GetTraasmetaZoneRequest): GetTraasmetaZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTraasmetaZoneEx(request, headers, runtime);
}

/**
 * Description: 获取单个机房
 * Summary: 获取单个机房
 */
async function getTraasmetaZoneEx(request: GetTraasmetaZoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTraasmetaZoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.zone.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTraasmetaRegionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // name
  name: string(name='name'),
  // display_name
  displayName?: string(name='display_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model CreateTraasmetaRegionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // region
  region?: TraasRegionDto(name='region'),
}

/**
 * Description: 创建单个地域
 * Summary: 创建单个地域
 */
async function createTraasmetaRegion(request: CreateTraasmetaRegionRequest): CreateTraasmetaRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTraasmetaRegionEx(request, headers, runtime);
}

/**
 * Description: 创建单个地域
 * Summary: 创建单个地域
 */
async function createTraasmetaRegionEx(request: CreateTraasmetaRegionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTraasmetaRegionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.region.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAgentLabelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 唯一标识数组
  collectIds: [ string ](name='collect_ids'),
  // 标记是否开启告警
  // 1：开启告警
  // 0：关闭告警
  label: long(name='label'),
}

model UpdateAgentLabelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量修改agent是否开启告警标记
 * Summary: agent批量打标
 */
async function updateAgentLabel(request: UpdateAgentLabelRequest): UpdateAgentLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAgentLabelEx(request, headers, runtime);
}

/**
 * Description: 批量修改agent是否开启告警标记
 * Summary: agent批量打标
 */
async function updateAgentLabelEx(request: UpdateAgentLabelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAgentLabelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.agent.label.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTraasmetaZoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // name
  name: string(name='name'),
  // display_name
  displayName?: string(name='display_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
  // region_uuid
  regionUuid: string(name='region_uuid'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model CreateTraasmetaZoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // zone
  zone?: TraasZoneDto(name='zone'),
}

/**
 * Description: 创建单个机房
 * Summary: 创建单个机房
 */
async function createTraasmetaZone(request: CreateTraasmetaZoneRequest): CreateTraasmetaZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTraasmetaZoneEx(request, headers, runtime);
}

/**
 * Description: 创建单个机房
 * Summary: 创建单个机房
 */
async function createTraasmetaZoneEx(request: CreateTraasmetaZoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTraasmetaZoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.zone.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteTraasmetaRegionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
}

model DeleteTraasmetaRegionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除单个地域
 * Summary: 删除单个地域
 */
async function deleteTraasmetaRegion(request: DeleteTraasmetaRegionRequest): DeleteTraasmetaRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteTraasmetaRegionEx(request, headers, runtime);
}

/**
 * Description: 删除单个地域
 * Summary: 删除单个地域
 */
async function deleteTraasmetaRegionEx(request: DeleteTraasmetaRegionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTraasmetaRegionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.region.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteTraasmetaZoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
}

model DeleteTraasmetaZoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除单个机房
 * Summary: 删除单个机房
 */
async function deleteTraasmetaZone(request: DeleteTraasmetaZoneRequest): DeleteTraasmetaZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteTraasmetaZoneEx(request, headers, runtime);
}

/**
 * Description: 删除单个机房
 * Summary: 删除单个机房
 */
async function deleteTraasmetaZoneEx(request: DeleteTraasmetaZoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTraasmetaZoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.zone.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTraasmetaRegionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
  // display_name
  displayName?: string(name='display_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // extension
  extension?: string(name='extension'),
  // name
  name?: string(name='name'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model UpdateTraasmetaRegionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // region
  region?: TraasRegionDto(name='region'),
}

/**
 * Description: 更新单个地域
 * Summary: 更新单个地域
 */
async function updateTraasmetaRegion(request: UpdateTraasmetaRegionRequest): UpdateTraasmetaRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTraasmetaRegionEx(request, headers, runtime);
}

/**
 * Description: 更新单个地域
 * Summary: 更新单个地域
 */
async function updateTraasmetaRegionEx(request: UpdateTraasmetaRegionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTraasmetaRegionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.region.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTraasmetaZoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
  // name
  name?: string(name='name'),
  // display_name
  displayName?: string(name='display_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // extension
  extension?: string(name='extension'),
  // region_uuid
  regionUuid?: string(name='region_uuid'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model UpdateTraasmetaZoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // zone
  zone?: TraasZoneDto(name='zone'),
}

/**
 * Description: 更新单个机房
 * Summary: 更新单个机房
 */
async function updateTraasmetaZone(request: UpdateTraasmetaZoneRequest): UpdateTraasmetaZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTraasmetaZoneEx(request, headers, runtime);
}

/**
 * Description: 更新单个机房
 * Summary: 更新单个机房
 */
async function updateTraasmetaZoneEx(request: UpdateTraasmetaZoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTraasmetaZoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.zone.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraasmetaRegionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // name
  name?: string(name='name'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model QueryTraasmetaRegionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // regions
  // 
  regions?: [ TraasRegionDto ](name='regions'),
}

/**
 * Description: 地域查询
 * Summary: 地域查询
 */
async function queryTraasmetaRegion(request: QueryTraasmetaRegionRequest): QueryTraasmetaRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraasmetaRegionEx(request, headers, runtime);
}

/**
 * Description: 地域查询
 * Summary: 地域查询
 */
async function queryTraasmetaRegionEx(request: QueryTraasmetaRegionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraasmetaRegionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.region.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraasmetaZoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // name
  name?: string(name='name'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model QueryTraasmetaZoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // zones
  // 
  zones?: [ TraasZoneDto ](name='zones'),
}

/**
 * Description: 机房查询
 * Summary: 机房查询
 */
async function queryTraasmetaZone(request: QueryTraasmetaZoneRequest): QueryTraasmetaZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraasmetaZoneEx(request, headers, runtime);
}

/**
 * Description: 机房查询
 * Summary: 机房查询
 */
async function queryTraasmetaZoneEx(request: QueryTraasmetaZoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraasmetaZoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.zone.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryTraasmetaRegionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 	
  // 当前页
  currentPage?: long(name='current_page'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
  // name
  name?: string(name='name'),
}

model PagequeryTraasmetaRegionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // regions
  regions?: [ TraasRegionDto ](name='regions'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 地域分页查询
 * Summary: 地域分页查询
 */
async function pagequeryTraasmetaRegion(request: PagequeryTraasmetaRegionRequest): PagequeryTraasmetaRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryTraasmetaRegionEx(request, headers, runtime);
}

/**
 * Description: 地域分页查询
 * Summary: 地域分页查询
 */
async function pagequeryTraasmetaRegionEx(request: PagequeryTraasmetaRegionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryTraasmetaRegionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.region.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryTraasmetaZoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 当前页
  currentPage?: long(name='current_page'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
  // name
  name?: string(name='name'),
}

model PagequeryTraasmetaZoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // zones
  zones?: [ TraasZoneDto ](name='zones'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 机房分页查询
 * Summary: 机房分页查询
 */
async function pagequeryTraasmetaZone(request: PagequeryTraasmetaZoneRequest): PagequeryTraasmetaZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryTraasmetaZoneEx(request, headers, runtime);
}

/**
 * Description: 机房分页查询
 * Summary: 机房分页查询
 */
async function pagequeryTraasmetaZoneEx(request: PagequeryTraasmetaZoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryTraasmetaZoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.zone.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryTraasmetaRegionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids?: [ string ](name='uuids'),
  // names
  names?: [ string ](name='names'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model BatchqueryTraasmetaRegionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // regions
  regions?: [ TraasRegionDto ](name='regions'),
}

/**
 * Description: 批量查询地域
 * Summary: 批量查询地域
 */
async function batchqueryTraasmetaRegion(request: BatchqueryTraasmetaRegionRequest): BatchqueryTraasmetaRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryTraasmetaRegionEx(request, headers, runtime);
}

/**
 * Description: 批量查询地域
 * Summary: 批量查询地域
 */
async function batchqueryTraasmetaRegionEx(request: BatchqueryTraasmetaRegionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryTraasmetaRegionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.region.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateTraasmetaRegionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // regions
  regions: [ TraasRegionDto ](name='regions'),
}

model BatchcreateTraasmetaRegionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // regions
  regions?: [ TraasRegionDto ](name='regions'),
}

/**
 * Description: 批量创建地域
 * Summary: 批量创建地域
 */
async function batchcreateTraasmetaRegion(request: BatchcreateTraasmetaRegionRequest): BatchcreateTraasmetaRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateTraasmetaRegionEx(request, headers, runtime);
}

/**
 * Description: 批量创建地域
 * Summary: 批量创建地域
 */
async function batchcreateTraasmetaRegionEx(request: BatchcreateTraasmetaRegionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateTraasmetaRegionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.region.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateTraasmetaZoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // zones
  zones: [ TraasZoneDto ](name='zones'),
}

model BatchcreateTraasmetaZoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // zones
  zones?: [ TraasZoneDto ](name='zones'),
}

/**
 * Description: 批量创建机房
 * Summary: 批量创建机房
 */
async function batchcreateTraasmetaZone(request: BatchcreateTraasmetaZoneRequest): BatchcreateTraasmetaZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateTraasmetaZoneEx(request, headers, runtime);
}

/**
 * Description: 批量创建机房
 * Summary: 批量创建机房
 */
async function batchcreateTraasmetaZoneEx(request: BatchcreateTraasmetaZoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateTraasmetaZoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.zone.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryTraasmetaZoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids?: [ string ](name='uuids'),
  // names
  names?: [ string ](name='names'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model BatchqueryTraasmetaZoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // zones
  zones?: [ TraasZoneDto ](name='zones'),
}

/**
 * Description: 批量查询机房
 * Summary: 批量查询机房
 */
async function batchqueryTraasmetaZone(request: BatchqueryTraasmetaZoneRequest): BatchqueryTraasmetaZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryTraasmetaZoneEx(request, headers, runtime);
}

/**
 * Description: 批量查询机房
 * Summary: 批量查询机房
 */
async function batchqueryTraasmetaZoneEx(request: BatchqueryTraasmetaZoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryTraasmetaZoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.zone.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteTraasmetaRegionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids: [ string ](name='uuids'),
}

model BatchdeleteTraasmetaRegionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量删除地域
 * Summary: 批量删除地域
 */
async function batchdeleteTraasmetaRegion(request: BatchdeleteTraasmetaRegionRequest): BatchdeleteTraasmetaRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteTraasmetaRegionEx(request, headers, runtime);
}

/**
 * Description: 批量删除地域
 * Summary: 批量删除地域
 */
async function batchdeleteTraasmetaRegionEx(request: BatchdeleteTraasmetaRegionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteTraasmetaRegionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.region.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteTraasmetaZoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids: [ string ](name='uuids'),
}

model BatchdeleteTraasmetaZoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量删除机房
 * Summary: 批量删除机房
 */
async function batchdeleteTraasmetaZone(request: BatchdeleteTraasmetaZoneRequest): BatchdeleteTraasmetaZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteTraasmetaZoneEx(request, headers, runtime);
}

/**
 * Description: 批量删除机房
 * Summary: 批量删除机房
 */
async function batchdeleteTraasmetaZoneEx(request: BatchdeleteTraasmetaZoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteTraasmetaZoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.zone.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllTraasmetaAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model AllTraasmetaAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // appdto
  apps?: [ TraasAppDto ](name='apps'),
}

/**
 * Description: 获取所有应用
 * Summary: 获取所有应用
 */
async function allTraasmetaApp(request: AllTraasmetaAppRequest): AllTraasmetaAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allTraasmetaAppEx(request, headers, runtime);
}

/**
 * Description: 获取所有应用
 * Summary: 获取所有应用
 */
async function allTraasmetaAppEx(request: AllTraasmetaAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllTraasmetaAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.app.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllTraasmetaAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model AllTraasmetaAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // appgroupsdto
  appGroups?: [ TraasAppGroupDto ](name='app_groups'),
}

/**
 * Description: 获取所有应用分组
 * Summary: 获取所有应用分组
 */
async function allTraasmetaAppgroup(request: AllTraasmetaAppgroupRequest): AllTraasmetaAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allTraasmetaAppgroupEx(request, headers, runtime);
}

/**
 * Description: 获取所有应用分组
 * Summary: 获取所有应用分组
 */
async function allTraasmetaAppgroupEx(request: AllTraasmetaAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllTraasmetaAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appgroup.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllTraasmetaAppserverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model AllTraasmetaAppserverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_servers
  appServers?: [ TraasAppServerDto ](name='app_servers'),
}

/**
 * Description: 获取所有应用服务器
 * Summary: 获取所有应用服务器
 */
async function allTraasmetaAppserver(request: AllTraasmetaAppserverRequest): AllTraasmetaAppserverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allTraasmetaAppserverEx(request, headers, runtime);
}

/**
 * Description: 获取所有应用服务器
 * Summary: 获取所有应用服务器
 */
async function allTraasmetaAppserverEx(request: AllTraasmetaAppserverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllTraasmetaAppserverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appserver.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllTraasmetaApptagRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model AllTraasmetaApptagResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_tags
  appTags?: [ TraasAppTagDto ](name='app_tags'),
}

/**
 * Description: 获取所有应用标签
 * Summary: 获取所有应用标签
 */
async function allTraasmetaApptag(request: AllTraasmetaApptagRequest): AllTraasmetaApptagResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allTraasmetaApptagEx(request, headers, runtime);
}

/**
 * Description: 获取所有应用标签
 * Summary: 获取所有应用标签
 */
async function allTraasmetaApptagEx(request: AllTraasmetaApptagRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllTraasmetaApptagResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.apptag.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllTraasmetaWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model AllTraasmetaWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspaces
  workspaces?: [ TraasWorkspaceDto ](name='workspaces'),
}

/**
 * Description: 获取所有工作空间
 * Summary: 获取所有工作空间
 */
async function allTraasmetaWorkspace(request: AllTraasmetaWorkspaceRequest): AllTraasmetaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allTraasmetaWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 获取所有工作空间
 * Summary: 获取所有工作空间
 */
async function allTraasmetaWorkspaceEx(request: AllTraasmetaWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllTraasmetaWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspace.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllTraasmetaWorkspacegroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model AllTraasmetaWorkspacegroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspace_groups
  workspaceGroups?: [ TraasWorkspaceGroupDto ](name='workspace_groups'),
}

/**
 * Description: 获取所有工作空间组
 * Summary: 获取所有工作空间组
 */
async function allTraasmetaWorkspacegroup(request: AllTraasmetaWorkspacegroupRequest): AllTraasmetaWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allTraasmetaWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 获取所有工作空间组
 * Summary: 获取所有工作空间组
 */
async function allTraasmetaWorkspacegroupEx(request: AllTraasmetaWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllTraasmetaWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspacegroup.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateTraasmetaWorkspacegroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_groups
  workspaceGroups: [ TraasWorkspaceGroupDto ](name='workspace_groups'),
}

model BatchcreateTraasmetaWorkspacegroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspace_groups
  workspaceGroups?: [ TraasWorkspaceGroupDto ](name='workspace_groups'),
}

/**
 * Description: 批量创建工作空间组
 * Summary: 批量创建工作空间组
 */
async function batchcreateTraasmetaWorkspacegroup(request: BatchcreateTraasmetaWorkspacegroupRequest): BatchcreateTraasmetaWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateTraasmetaWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 批量创建工作空间组
 * Summary: 批量创建工作空间组
 */
async function batchcreateTraasmetaWorkspacegroupEx(request: BatchcreateTraasmetaWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateTraasmetaWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspacegroup.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateTraasmetaAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // apps
  apps: [ TraasAppDto ](name='apps'),
}

model BatchcreateTraasmetaAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // apps
  apps?: [ TraasAppDto ](name='apps'),
}

/**
 * Description: 批量创建应用
 * Summary: 批量创建应用
 */
async function batchcreateTraasmetaApp(request: BatchcreateTraasmetaAppRequest): BatchcreateTraasmetaAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateTraasmetaAppEx(request, headers, runtime);
}

/**
 * Description: 批量创建应用
 * Summary: 批量创建应用
 */
async function batchcreateTraasmetaAppEx(request: BatchcreateTraasmetaAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateTraasmetaAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.app.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateTraasmetaAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_groups
  appGroups: [ TraasAppGroupDto ](name='app_groups'),
}

model BatchcreateTraasmetaAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_groups
  appGroups?: [ TraasAppGroupDto ](name='app_groups'),
}

/**
 * Description: 批量创建应用组
 * Summary: 批量创建应用组
 */
async function batchcreateTraasmetaAppgroup(request: BatchcreateTraasmetaAppgroupRequest): BatchcreateTraasmetaAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateTraasmetaAppgroupEx(request, headers, runtime);
}

/**
 * Description: 批量创建应用组
 * Summary: 批量创建应用组
 */
async function batchcreateTraasmetaAppgroupEx(request: BatchcreateTraasmetaAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateTraasmetaAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appgroup.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateTraasmetaAppserverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_servers
  appServers: [ TraasAppServerDto ](name='app_servers'),
}

model BatchcreateTraasmetaAppserverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_servers
  appServers?: [ TraasAppServerDto ](name='app_servers'),
}

/**
 * Description: 批量创建应用服务器
 * Summary: 批量创建应用服务器
 */
async function batchcreateTraasmetaAppserver(request: BatchcreateTraasmetaAppserverRequest): BatchcreateTraasmetaAppserverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateTraasmetaAppserverEx(request, headers, runtime);
}

/**
 * Description: 批量创建应用服务器
 * Summary: 批量创建应用服务器
 */
async function batchcreateTraasmetaAppserverEx(request: BatchcreateTraasmetaAppserverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateTraasmetaAppserverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appserver.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateTraasmetaApptagRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_tags
  appTags: [ TraasAppTagDto ](name='app_tags'),
}

model BatchcreateTraasmetaApptagResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_tags
  appTags?: [ TraasAppTagDto ](name='app_tags'),
}

/**
 * Description: 批量创建应用标签
 * Summary: 批量创建应用标签
 */
async function batchcreateTraasmetaApptag(request: BatchcreateTraasmetaApptagRequest): BatchcreateTraasmetaApptagResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateTraasmetaApptagEx(request, headers, runtime);
}

/**
 * Description: 批量创建应用标签
 * Summary: 批量创建应用标签
 */
async function batchcreateTraasmetaApptagEx(request: BatchcreateTraasmetaApptagRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateTraasmetaApptagResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.apptag.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateTraasmetaWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspaces
  workspaces: [ TraasWorkspaceDto ](name='workspaces'),
}

model BatchcreateTraasmetaWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspaces
  workspaces?: [ TraasWorkspaceDto ](name='workspaces'),
}

/**
 * Description: 批量创建工作空间
 * Summary: 批量创建工作空间
 */
async function batchcreateTraasmetaWorkspace(request: BatchcreateTraasmetaWorkspaceRequest): BatchcreateTraasmetaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateTraasmetaWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 批量创建工作空间
 * Summary: 批量创建工作空间
 */
async function batchcreateTraasmetaWorkspaceEx(request: BatchcreateTraasmetaWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateTraasmetaWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspace.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteTraasmetaAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids: [ string ](name='uuids'),
}

model BatchdeleteTraasmetaAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量删除应用
 * Summary: 批量删除应用
 */
async function batchdeleteTraasmetaApp(request: BatchdeleteTraasmetaAppRequest): BatchdeleteTraasmetaAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteTraasmetaAppEx(request, headers, runtime);
}

/**
 * Description: 批量删除应用
 * Summary: 批量删除应用
 */
async function batchdeleteTraasmetaAppEx(request: BatchdeleteTraasmetaAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteTraasmetaAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.app.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteTraasmetaWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids: [ string ](name='uuids'),
}

model BatchdeleteTraasmetaWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量删除工作空间
 * Summary: 批量删除工作空间
 */
async function batchdeleteTraasmetaWorkspace(request: BatchdeleteTraasmetaWorkspaceRequest): BatchdeleteTraasmetaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteTraasmetaWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 批量删除工作空间
 * Summary: 批量删除工作空间
 */
async function batchdeleteTraasmetaWorkspaceEx(request: BatchdeleteTraasmetaWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteTraasmetaWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspace.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteTraasmetaApptagRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids: [ string ](name='uuids'),
}

model BatchdeleteTraasmetaApptagResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量删除应用标签
 * Summary: 批量删除应用标签
 */
async function batchdeleteTraasmetaApptag(request: BatchdeleteTraasmetaApptagRequest): BatchdeleteTraasmetaApptagResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteTraasmetaApptagEx(request, headers, runtime);
}

/**
 * Description: 批量删除应用标签
 * Summary: 批量删除应用标签
 */
async function batchdeleteTraasmetaApptagEx(request: BatchdeleteTraasmetaApptagRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteTraasmetaApptagResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.apptag.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteTraasmetaAppserverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids: [ string ](name='uuids'),
}

model BatchdeleteTraasmetaAppserverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量删除应用服务器
 * Summary: 批量删除应用服务器
 */
async function batchdeleteTraasmetaAppserver(request: BatchdeleteTraasmetaAppserverRequest): BatchdeleteTraasmetaAppserverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteTraasmetaAppserverEx(request, headers, runtime);
}

/**
 * Description: 批量删除应用服务器
 * Summary: 批量删除应用服务器
 */
async function batchdeleteTraasmetaAppserverEx(request: BatchdeleteTraasmetaAppserverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteTraasmetaAppserverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appserver.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteTraasmetaAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids: [ string ](name='uuids'),
}

model BatchdeleteTraasmetaAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量删除应用组
 * Summary: 批量删除应用组
 */
async function batchdeleteTraasmetaAppgroup(request: BatchdeleteTraasmetaAppgroupRequest): BatchdeleteTraasmetaAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteTraasmetaAppgroupEx(request, headers, runtime);
}

/**
 * Description: 批量删除应用组
 * Summary: 批量删除应用组
 */
async function batchdeleteTraasmetaAppgroupEx(request: BatchdeleteTraasmetaAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteTraasmetaAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appgroup.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteTraasmetaWorkspacegroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids: [ string ](name='uuids'),
}

model BatchdeleteTraasmetaWorkspacegroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量删除工作空间组
 * Summary: 批量删除工作空间组
 */
async function batchdeleteTraasmetaWorkspacegroup(request: BatchdeleteTraasmetaWorkspacegroupRequest): BatchdeleteTraasmetaWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteTraasmetaWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 批量删除工作空间组
 * Summary: 批量删除工作空间组
 */
async function batchdeleteTraasmetaWorkspacegroupEx(request: BatchdeleteTraasmetaWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteTraasmetaWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspacegroup.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryTraasmetaWorkspacegroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids?: [ string ](name='uuids'),
  // names
  names?: [ string ](name='names'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model BatchqueryTraasmetaWorkspacegroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspace_groups
  workspaceGroups?: [ TraasWorkspaceGroupDto ](name='workspace_groups'),
}

/**
 * Description: 批量查询工作空间组
 * Summary: 批量查询工作空间组
 */
async function batchqueryTraasmetaWorkspacegroup(request: BatchqueryTraasmetaWorkspacegroupRequest): BatchqueryTraasmetaWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryTraasmetaWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 批量查询工作空间组
 * Summary: 批量查询工作空间组
 */
async function batchqueryTraasmetaWorkspacegroupEx(request: BatchqueryTraasmetaWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryTraasmetaWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspacegroup.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryTraasmetaWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids?: [ string ](name='uuids'),
  // names
  names?: [ string ](name='names'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model BatchqueryTraasmetaWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspaces
  workspaces?: [ TraasWorkspaceDto ](name='workspaces'),
}

/**
 * Description: 批量查询工作空间
 * Summary: 批量查询工作空间
 */
async function batchqueryTraasmetaWorkspace(request: BatchqueryTraasmetaWorkspaceRequest): BatchqueryTraasmetaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryTraasmetaWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 批量查询工作空间
 * Summary: 批量查询工作空间
 */
async function batchqueryTraasmetaWorkspaceEx(request: BatchqueryTraasmetaWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryTraasmetaWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspace.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryTraasmetaApptagRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids?: [ string ](name='uuids'),
  // app_names
  appNames?: [ string ](name='app_names'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // tag_keys
  tagKeys?: [ string ](name='tag_keys'),
}

model BatchqueryTraasmetaApptagResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_tags
  appTags?: [ TraasAppTagDto ](name='app_tags'),
}

/**
 * Description: 批量查询应用标签
 * Summary: 批量查询应用标签
 */
async function batchqueryTraasmetaApptag(request: BatchqueryTraasmetaApptagRequest): BatchqueryTraasmetaApptagResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryTraasmetaApptagEx(request, headers, runtime);
}

/**
 * Description: 批量查询应用标签
 * Summary: 批量查询应用标签
 */
async function batchqueryTraasmetaApptagEx(request: BatchqueryTraasmetaApptagRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryTraasmetaApptagResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.apptag.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryTraasmetaAppserverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids?: [ string ](name='uuids'),
  // hostnames
  hostnames?: [ string ](name='hostnames'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // ips
  ips?: [ string ](name='ips'),
  // app_names
  appNames?: [ string ](name='app_names'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
}

model BatchqueryTraasmetaAppserverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_servers
  appServers?: [ TraasAppServerDto ](name='app_servers'),
}

/**
 * Description: 批量查询应用服务器
 * Summary: 批量查询应用服务器
 */
async function batchqueryTraasmetaAppserver(request: BatchqueryTraasmetaAppserverRequest): BatchqueryTraasmetaAppserverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryTraasmetaAppserverEx(request, headers, runtime);
}

/**
 * Description: 批量查询应用服务器
 * Summary: 批量查询应用服务器
 */
async function batchqueryTraasmetaAppserverEx(request: BatchqueryTraasmetaAppserverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryTraasmetaAppserverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appserver.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryTraasmetaAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids?: [ string ](name='uuids'),
  // names
  names?: [ string ](name='names'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model BatchqueryTraasmetaAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_groups
  appGroups?: [ TraasAppGroupDto ](name='app_groups'),
}

/**
 * Description: 批量查询应用组
 * Summary: 批量查询应用组
 */
async function batchqueryTraasmetaAppgroup(request: BatchqueryTraasmetaAppgroupRequest): BatchqueryTraasmetaAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryTraasmetaAppgroupEx(request, headers, runtime);
}

/**
 * Description: 批量查询应用组
 * Summary: 批量查询应用组
 */
async function batchqueryTraasmetaAppgroupEx(request: BatchqueryTraasmetaAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryTraasmetaAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appgroup.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryTraasmetaAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids?: [ string ](name='uuids'),
  // names
  names?: [ string ](name='names'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model BatchqueryTraasmetaAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // apps
  apps?: [ TraasAppDto ](name='apps'),
}

/**
 * Description: 批量查询应用
 * Summary: 批量查询应用
 */
async function batchqueryTraasmetaApp(request: BatchqueryTraasmetaAppRequest): BatchqueryTraasmetaAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryTraasmetaAppEx(request, headers, runtime);
}

/**
 * Description: 批量查询应用
 * Summary: 批量查询应用
 */
async function batchqueryTraasmetaAppEx(request: BatchqueryTraasmetaAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryTraasmetaAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.app.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteTraasmetaAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
}

model DeleteTraasmetaAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除单个应用
 * Summary: 删除单个应用
 */
async function deleteTraasmetaApp(request: DeleteTraasmetaAppRequest): DeleteTraasmetaAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteTraasmetaAppEx(request, headers, runtime);
}

/**
 * Description: 删除单个应用
 * Summary: 删除单个应用
 */
async function deleteTraasmetaAppEx(request: DeleteTraasmetaAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTraasmetaAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.app.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteTraasmetaAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
}

model DeleteTraasmetaAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除单个应用组
 * Summary: 删除单个应用组
 */
async function deleteTraasmetaAppgroup(request: DeleteTraasmetaAppgroupRequest): DeleteTraasmetaAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteTraasmetaAppgroupEx(request, headers, runtime);
}

/**
 * Description: 删除单个应用组
 * Summary: 删除单个应用组
 */
async function deleteTraasmetaAppgroupEx(request: DeleteTraasmetaAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTraasmetaAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appgroup.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteTraasmetaAppserverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
}

model DeleteTraasmetaAppserverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除单个应用服务器
 * Summary: 删除单个应用服务器
 */
async function deleteTraasmetaAppserver(request: DeleteTraasmetaAppserverRequest): DeleteTraasmetaAppserverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteTraasmetaAppserverEx(request, headers, runtime);
}

/**
 * Description: 删除单个应用服务器
 * Summary: 删除单个应用服务器
 */
async function deleteTraasmetaAppserverEx(request: DeleteTraasmetaAppserverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTraasmetaAppserverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appserver.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteTraasmetaApptagRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
}

model DeleteTraasmetaApptagResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除单个应用标签
 * Summary: 删除单个应用标签
 */
async function deleteTraasmetaApptag(request: DeleteTraasmetaApptagRequest): DeleteTraasmetaApptagResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteTraasmetaApptagEx(request, headers, runtime);
}

/**
 * Description: 删除单个应用标签
 * Summary: 删除单个应用标签
 */
async function deleteTraasmetaApptagEx(request: DeleteTraasmetaApptagRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTraasmetaApptagResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.apptag.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteTraasmetaWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
}

model DeleteTraasmetaWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除单个工作空间
 * Summary: 删除单个工作空间
 */
async function deleteTraasmetaWorkspace(request: DeleteTraasmetaWorkspaceRequest): DeleteTraasmetaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteTraasmetaWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 删除单个工作空间
 * Summary: 删除单个工作空间
 */
async function deleteTraasmetaWorkspaceEx(request: DeleteTraasmetaWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTraasmetaWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspace.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteTraasmetaWorkspacegroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
}

model DeleteTraasmetaWorkspacegroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除单个工作空间组
 * Summary: 删除单个工作空间组
 */
async function deleteTraasmetaWorkspacegroup(request: DeleteTraasmetaWorkspacegroupRequest): DeleteTraasmetaWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteTraasmetaWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 删除单个工作空间组
 * Summary: 删除单个工作空间组
 */
async function deleteTraasmetaWorkspacegroupEx(request: DeleteTraasmetaWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTraasmetaWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspacegroup.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTraasmetaAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // name
  name?: string(name='name'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model GetTraasmetaAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app
  app?: TraasAppDto(name='app'),
}

/**
 * Description: 获取单个应用
 * Summary: 获取单个应用
 */
async function getTraasmetaApp(request: GetTraasmetaAppRequest): GetTraasmetaAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTraasmetaAppEx(request, headers, runtime);
}

/**
 * Description: 获取单个应用
 * Summary: 获取单个应用
 */
async function getTraasmetaAppEx(request: GetTraasmetaAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTraasmetaAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.app.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTraasmetaAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // name
  name?: string(name='name'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model GetTraasmetaAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_group
  appGroup?: TraasAppGroupDto(name='app_group'),
}

/**
 * Description: 获取单个应用组
 * Summary: 获取单个应用组
 */
async function getTraasmetaAppgroup(request: GetTraasmetaAppgroupRequest): GetTraasmetaAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTraasmetaAppgroupEx(request, headers, runtime);
}

/**
 * Description: 获取单个应用组
 * Summary: 获取单个应用组
 */
async function getTraasmetaAppgroupEx(request: GetTraasmetaAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTraasmetaAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appgroup.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTraasmetaAppserverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // ip
  ip?: string(name='ip'),
  // app_name
  appName?: string(name='app_name'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
}

model GetTraasmetaAppserverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_server
  appServer?: TraasAppServerDto(name='app_server'),
}

/**
 * Description: 获取单个应用服务器
 * Summary: 获取单个应用服务器
 */
async function getTraasmetaAppserver(request: GetTraasmetaAppserverRequest): GetTraasmetaAppserverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTraasmetaAppserverEx(request, headers, runtime);
}

/**
 * Description: 获取单个应用服务器
 * Summary: 获取单个应用服务器
 */
async function getTraasmetaAppserverEx(request: GetTraasmetaAppserverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTraasmetaAppserverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appserver.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTraasmetaApptagRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // app_name
  appName?: string(name='app_name'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // tag_key
  tagKey?: string(name='tag_key'),
}

model GetTraasmetaApptagResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_tag
  appTag?: TraasAppTagDto(name='app_tag'),
}

/**
 * Description: 获取单个应用标签
 * Summary: 获取单个应用标签
 */
async function getTraasmetaApptag(request: GetTraasmetaApptagRequest): GetTraasmetaApptagResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTraasmetaApptagEx(request, headers, runtime);
}

/**
 * Description: 获取单个应用标签
 * Summary: 获取单个应用标签
 */
async function getTraasmetaApptagEx(request: GetTraasmetaApptagRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTraasmetaApptagResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.apptag.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTraasmetaWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // name
  name?: string(name='name'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model GetTraasmetaWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspace
  workspace?: TraasWorkspaceDto(name='workspace'),
}

/**
 * Description: 获取单个工作空间
 * Summary: 获取单个工作空间
 */
async function getTraasmetaWorkspace(request: GetTraasmetaWorkspaceRequest): GetTraasmetaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTraasmetaWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 获取单个工作空间
 * Summary: 获取单个工作空间
 */
async function getTraasmetaWorkspaceEx(request: GetTraasmetaWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTraasmetaWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspace.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTraasmetaWorkspacegroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // name
  name?: string(name='name'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model GetTraasmetaWorkspacegroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspace_group
  workspaceGroup?: TraasWorkspaceGroupDto(name='workspace_group'),
}

/**
 * Description: 获取单个工作空间组
 * Summary: 获取单个工作空间组
 */
async function getTraasmetaWorkspacegroup(request: GetTraasmetaWorkspacegroupRequest): GetTraasmetaWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTraasmetaWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 获取单个工作空间组
 * Summary: 获取单个工作空间组
 */
async function getTraasmetaWorkspacegroupEx(request: GetTraasmetaWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTraasmetaWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspacegroup.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryTraasmetaWorkspacegroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 每页大小
  pageSize: long(name='page_size'),
  // 当前页
  currentPage: long(name='current_page'),
  // 
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  // 
  tenantName?: string(name='tenant_name'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
  // name
  name?: string(name='name'),
}

model PagequeryTraasmetaWorkspacegroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspace_groups
  workspaceGroups?: [ TraasWorkspaceGroupDto ](name='workspace_groups'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 	
  // 总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 工作空间组分页查询
 * Summary: 工作空间组分页查询
 */
async function pagequeryTraasmetaWorkspacegroup(request: PagequeryTraasmetaWorkspacegroupRequest): PagequeryTraasmetaWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryTraasmetaWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 工作空间组分页查询
 * Summary: 工作空间组分页查询
 */
async function pagequeryTraasmetaWorkspacegroupEx(request: PagequeryTraasmetaWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryTraasmetaWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspacegroup.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryTraasmetaWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 每页大小
  pageSize: long(name='page_size'),
  // 当前页
  currentPage: long(name='current_page'),
  // 
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  // 
  tenantName?: string(name='tenant_name'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
  // name
  name?: string(name='name'),
}

model PagequeryTraasmetaWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspaces
  workspaces?: [ TraasWorkspaceDto ](name='workspaces'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 	
  // 总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 工作空间分页查询
 * Summary: 工作空间分页查询
 */
async function pagequeryTraasmetaWorkspace(request: PagequeryTraasmetaWorkspaceRequest): PagequeryTraasmetaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryTraasmetaWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 工作空间分页查询
 * Summary: 工作空间分页查询
 */
async function pagequeryTraasmetaWorkspaceEx(request: PagequeryTraasmetaWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryTraasmetaWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspace.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryTraasmetaApptagRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 每页大小
  pageSize: long(name='page_size'),
  // 当前页
  currentPage: long(name='current_page'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // app_name
  appName?: string(name='app_name'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
}

model PagequeryTraasmetaApptagResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_tags
  appTags?: [ TraasAppTagDto ](name='app_tags'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 	
  // 总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 应用标签分页查询
 * Summary: 应用标签分页查询
 */
async function pagequeryTraasmetaApptag(request: PagequeryTraasmetaApptagRequest): PagequeryTraasmetaApptagResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryTraasmetaApptagEx(request, headers, runtime);
}

/**
 * Description: 应用标签分页查询
 * Summary: 应用标签分页查询
 */
async function pagequeryTraasmetaApptagEx(request: PagequeryTraasmetaApptagRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryTraasmetaApptagResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.apptag.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryTraasmetaAppserverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 每页大小
  pageSize: long(name='page_size'),
  // 当前页
  currentPage: long(name='current_page'),
  // 
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  // 
  tenantName?: string(name='tenant_name'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
  // host_ip
  hostIp?: string(name='host_ip'),
  // app_name
  appName?: string(name='app_name'),
  // ip
  ip?: string(name='ip'),
  // hotsname
  hotsname?: string(name='hotsname'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
}

model PagequeryTraasmetaAppserverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_servers
  appServers?: [ TraasAppServerDto ](name='app_servers'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 	
  // 总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 应用服务器分页查询
 * Summary: 应用服务器分页查询
 */
async function pagequeryTraasmetaAppserver(request: PagequeryTraasmetaAppserverRequest): PagequeryTraasmetaAppserverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryTraasmetaAppserverEx(request, headers, runtime);
}

/**
 * Description: 应用服务器分页查询
 * Summary: 应用服务器分页查询
 */
async function pagequeryTraasmetaAppserverEx(request: PagequeryTraasmetaAppserverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryTraasmetaAppserverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appserver.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryTraasmetaAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 每页大小
  pageSize: long(name='page_size'),
  // 当前页
  currentPage: long(name='current_page'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  // 
  tenantName?: string(name='tenant_name'),
  // name
  name?: string(name='name'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
}

model PagequeryTraasmetaAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_groups
  appGroups?: [ TraasAppGroupDto ](name='app_groups'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 	
  // 总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 应用组分页查询
 * Summary: 应用组分页查询
 */
async function pagequeryTraasmetaAppgroup(request: PagequeryTraasmetaAppgroupRequest): PagequeryTraasmetaAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryTraasmetaAppgroupEx(request, headers, runtime);
}

/**
 * Description: 应用组分页查询
 * Summary: 应用组分页查询
 */
async function pagequeryTraasmetaAppgroupEx(request: PagequeryTraasmetaAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryTraasmetaAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appgroup.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryTraasmetaAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 每页大小
  pageSize: long(name='page_size'),
  // 当前页
  currentPage: long(name='current_page'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  // 
  tenantName?: string(name='tenant_name'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
  // name
  // 
  name?: string(name='name'),
  // app_group_name
  appGroupName?: string(name='app_group_name'),
}

model PagequeryTraasmetaAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // apps
  apps?: [ TraasAppDto ](name='apps'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 	
  // 总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 应用分页查询
 * Summary: 应用分页查询
 */
async function pagequeryTraasmetaApp(request: PagequeryTraasmetaAppRequest): PagequeryTraasmetaAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryTraasmetaAppEx(request, headers, runtime);
}

/**
 * Description: 应用分页查询
 * Summary: 应用分页查询
 */
async function pagequeryTraasmetaAppEx(request: PagequeryTraasmetaAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryTraasmetaAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.app.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraasmetaWorkspacegroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // name
  name?: string(name='name'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model QueryTraasmetaWorkspacegroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspace_groups
  workspaceGroups?: [ TraasWorkspaceGroupDto ](name='workspace_groups'),
}

/**
 * Description: 工作空间组查询
 * Summary: 工作空间组查询
 */
async function queryTraasmetaWorkspacegroup(request: QueryTraasmetaWorkspacegroupRequest): QueryTraasmetaWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraasmetaWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 工作空间组查询
 * Summary: 工作空间组查询
 */
async function queryTraasmetaWorkspacegroupEx(request: QueryTraasmetaWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraasmetaWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspacegroup.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraasmetaWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // name
  name?: string(name='name'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model QueryTraasmetaWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspaces
  workspaces?: [ TraasWorkspaceDto ](name='workspaces'),
}

/**
 * Description: 工作空间查询
 * Summary: 工作空间查询
 */
async function queryTraasmetaWorkspace(request: QueryTraasmetaWorkspaceRequest): QueryTraasmetaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraasmetaWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 工作空间查询
 * Summary: 工作空间查询
 */
async function queryTraasmetaWorkspaceEx(request: QueryTraasmetaWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraasmetaWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspace.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraasmetaApptagRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // app_name
  appName?: string(name='app_name'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // tag_key
  tagKey?: string(name='tag_key'),
}

model QueryTraasmetaApptagResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_tags
  appTags?: [ TraasAppTagDto ](name='app_tags'),
}

/**
 * Description: 应用标签查询
 * Summary: 应用标签查询
 */
async function queryTraasmetaApptag(request: QueryTraasmetaApptagRequest): QueryTraasmetaApptagResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraasmetaApptagEx(request, headers, runtime);
}

/**
 * Description: 应用标签查询
 * Summary: 应用标签查询
 */
async function queryTraasmetaApptagEx(request: QueryTraasmetaApptagRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraasmetaApptagResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.apptag.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraasmetaAppserverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // hostname
  hostname?: string(name='hostname'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
  // app_name
  appName?: string(name='app_name'),
  // ip
  ip?: string(name='ip'),
}

model QueryTraasmetaAppserverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_servers
  appServers?: [ TraasAppServerDto ](name='app_servers'),
}

/**
 * Description: 应用服务器查询
 * Summary: 应用服务器查询
 */
async function queryTraasmetaAppserver(request: QueryTraasmetaAppserverRequest): QueryTraasmetaAppserverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraasmetaAppserverEx(request, headers, runtime);
}

/**
 * Description: 应用服务器查询
 * Summary: 应用服务器查询
 */
async function queryTraasmetaAppserverEx(request: QueryTraasmetaAppserverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraasmetaAppserverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appserver.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraasmetaAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // name
  name?: string(name='name'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model QueryTraasmetaAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_groups
  appGroups?: [ TraasAppGroupDto ](name='app_groups'),
}

/**
 * Description: 应用组查询
 * Summary: 应用组查询
 */
async function queryTraasmetaAppgroup(request: QueryTraasmetaAppgroupRequest): QueryTraasmetaAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraasmetaAppgroupEx(request, headers, runtime);
}

/**
 * Description: 应用组查询
 * Summary: 应用组查询
 */
async function queryTraasmetaAppgroupEx(request: QueryTraasmetaAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraasmetaAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appgroup.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraasmetaAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // name
  name?: string(name='name'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model QueryTraasmetaAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // apps
  apps?: [ TraasAppDto ](name='apps'),
}

/**
 * Description: 应用查询
 * Summary: 应用查询
 */
async function queryTraasmetaApp(request: QueryTraasmetaAppRequest): QueryTraasmetaAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraasmetaAppEx(request, headers, runtime);
}

/**
 * Description: 应用查询
 * Summary: 应用查询
 */
async function queryTraasmetaAppEx(request: QueryTraasmetaAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraasmetaAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.app.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTraasmetaAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
  // name
  name?: string(name='name'),
  // display_name
  displayName?: string(name='display_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom?: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model UpdateTraasmetaAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app
  app?: TraasAppDto(name='app'),
}

/**
 * Description: 更新单个应用
 * Summary: 更新单个应用
 */
async function updateTraasmetaApp(request: UpdateTraasmetaAppRequest): UpdateTraasmetaAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTraasmetaAppEx(request, headers, runtime);
}

/**
 * Description: 更新单个应用
 * Summary: 更新单个应用
 */
async function updateTraasmetaAppEx(request: UpdateTraasmetaAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTraasmetaAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.app.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTraasmetaAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // name
  name: string(name='name'),
  // display_name
  displayName?: string(name='display_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model CreateTraasmetaAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app
  app?: TraasAppDto(name='app'),
}

/**
 * Description: 创建单个应用
 * Summary: 创建单个应用
 */
async function createTraasmetaApp(request: CreateTraasmetaAppRequest): CreateTraasmetaAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTraasmetaAppEx(request, headers, runtime);
}

/**
 * Description: 创建单个应用
 * Summary: 创建单个应用
 */
async function createTraasmetaAppEx(request: CreateTraasmetaAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTraasmetaAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.app.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTraasmetaWorkspacegroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
  // name
  name?: string(name='name'),
  // display_name
  displayName?: string(name='display_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom?: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model UpdateTraasmetaWorkspacegroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // tenant_name
  workspaceGroup?: TraasWorkspaceGroupDto(name='workspace_group'),
}

/**
 * Description: 更新单个工作空间组
 * Summary: 更新单个工作空间组
 */
async function updateTraasmetaWorkspacegroup(request: UpdateTraasmetaWorkspacegroupRequest): UpdateTraasmetaWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTraasmetaWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 更新单个工作空间组
 * Summary: 更新单个工作空间组
 */
async function updateTraasmetaWorkspacegroupEx(request: UpdateTraasmetaWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTraasmetaWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspacegroup.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTraasmetaAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
  // name
  name?: string(name='name'),
  // display_name
  displayName?: string(name='display_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom?: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // parent_uuid
  parentUuid?: string(name='parent_uuid'),
  // layer
  layer?: long(name='layer'),
  // outside_parent_id
  outsideParentId?: string(name='outside_parent_id'),
}

model UpdateTraasmetaAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_group
  appGroup?: TraasAppGroupDto(name='app_group'),
}

/**
 * Description: 更新单个应用组
 * Summary: 更新单个应用组
 */
async function updateTraasmetaAppgroup(request: UpdateTraasmetaAppgroupRequest): UpdateTraasmetaAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTraasmetaAppgroupEx(request, headers, runtime);
}

/**
 * Description: 更新单个应用组
 * Summary: 更新单个应用组
 */
async function updateTraasmetaAppgroupEx(request: UpdateTraasmetaAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTraasmetaAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appgroup.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTraasmetaAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // name
  name: string(name='name'),
  // display_name
  displayName?: string(name='display_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // parent_uuid
  parentUuid?: string(name='parent_uuid'),
  // layer
  layer?: long(name='layer'),
  // outside_parent_id
  outsideParentId?: string(name='outside_parent_id'),
}

model CreateTraasmetaAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_group
  appGroup?: TraasAppGroupDto(name='app_group'),
}

/**
 * Description: 创建单个应用组
 * Summary: 创建单个应用组
 */
async function createTraasmetaAppgroup(request: CreateTraasmetaAppgroupRequest): CreateTraasmetaAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTraasmetaAppgroupEx(request, headers, runtime);
}

/**
 * Description: 创建单个应用组
 * Summary: 创建单个应用组
 */
async function createTraasmetaAppgroupEx(request: CreateTraasmetaAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTraasmetaAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appgroup.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTraasmetaWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // name
  name: string(name='name'),
  // display_name
  displayName?: string(name='display_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // workspace_group_uuid
  workspaceGroupUuid?: string(name='workspace_group_uuid'),
  // region_uuid
  regionUuid?: string(name='region_uuid'),
  // zone_uuid
  zoneUuid?: string(name='zone_uuid'),
}

model CreateTraasmetaWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // zone_uuid
  workspace?: TraasWorkspaceDto(name='workspace'),
}

/**
 * Description: 创建单个工作空间
 * Summary: 创建单个工作空间
 */
async function createTraasmetaWorkspace(request: CreateTraasmetaWorkspaceRequest): CreateTraasmetaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTraasmetaWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 创建单个工作空间
 * Summary: 创建单个工作空间
 */
async function createTraasmetaWorkspaceEx(request: CreateTraasmetaWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTraasmetaWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspace.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTraasmetaWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
  // name
  name?: string(name='name'),
  // display_name
  displayName?: string(name='display_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom?: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // workspace_group_uuid
  workspaceGroupUuid?: string(name='workspace_group_uuid'),
  // region_uuid
  regionUuid?: string(name='region_uuid'),
  // zone_uuid
  zoneUuid?: string(name='zone_uuid'),
}

model UpdateTraasmetaWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // zone_uuid
  workspace?: TraasWorkspaceDto(name='workspace'),
}

/**
 * Description: 更新单个工作空间
 * Summary: 更新单个工作空间
 */
async function updateTraasmetaWorkspace(request: UpdateTraasmetaWorkspaceRequest): UpdateTraasmetaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTraasmetaWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 更新单个工作空间
 * Summary: 更新单个工作空间
 */
async function updateTraasmetaWorkspaceEx(request: UpdateTraasmetaWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTraasmetaWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspace.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTraasmetaApptagRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
  // tag_key
  tagKey?: string(name='tag_key'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom?: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // app_uuid
  appUuid?: string(name='app_uuid'),
  // app_name
  appName?: string(name='app_name'),
  // tag_value
  tagValue?: string(name='tag_value'),
}

model UpdateTraasmetaApptagResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_tag
  appTag?: TraasAppTagDto(name='app_tag'),
}

/**
 * Description: 更新单个应用标签
 * Summary: 更新单个应用标签
 */
async function updateTraasmetaApptag(request: UpdateTraasmetaApptagRequest): UpdateTraasmetaApptagResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTraasmetaApptagEx(request, headers, runtime);
}

/**
 * Description: 更新单个应用标签
 * Summary: 更新单个应用标签
 */
async function updateTraasmetaApptagEx(request: UpdateTraasmetaApptagRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTraasmetaApptagResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.apptag.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTraasmetaApptagRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // tag_key
  tagKey: string(name='tag_key'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // tag_value
  tagValue?: string(name='tag_value'),
  // app_uuid
  appUuid?: string(name='app_uuid'),
  // app_name
  appName?: string(name='app_name'),
}

model CreateTraasmetaApptagResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_tag
  appTag?: TraasAppTagDto(name='app_tag'),
}

/**
 * Description: 创建单个应用标签
 * Summary: 创建单个应用标签
 */
async function createTraasmetaApptag(request: CreateTraasmetaApptagRequest): CreateTraasmetaApptagResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTraasmetaApptagEx(request, headers, runtime);
}

/**
 * Description: 创建单个应用标签
 * Summary: 创建单个应用标签
 */
async function createTraasmetaApptagEx(request: CreateTraasmetaApptagRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTraasmetaApptagResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.apptag.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTraasmetaAppserverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // hostname
  hostname: string(name='hostname'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // ip
  ip?: string(name='ip'),
  // host_ip
  hostIp?: string(name='host_ip'),
  // collect_id
  collectId?: string(name='collect_id'),
  // status
  status?: boolean(name='status'),
  // workspace_uuid
  workspaceUuid?: string(name='workspace_uuid'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
  // cell_uuid
  cellUuid?: string(name='cell_uuid'),
  // zone_uuid
  zoneUuid?: string(name='zone_uuid'),
  // app_uuid
  appUuid?: string(name='app_uuid'),
  // app_name
  appName?: string(name='app_name'),
  // app_service_uuid
  appServiceUuid?: string(name='app_service_uuid'),
  // vm_uuid
  vmUuid?: string(name='vm_uuid'),
  // pod_uuid
  podUuid?: string(name='pod_uuid'),
}

model CreateTraasmetaAppserverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_server
  appServer?: TraasAppServerDto(name='app_server'),
}

/**
 * Description: 创建单个应用服务器
 * Summary: 创建单个应用服务器
 */
async function createTraasmetaAppserver(request: CreateTraasmetaAppserverRequest): CreateTraasmetaAppserverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTraasmetaAppserverEx(request, headers, runtime);
}

/**
 * Description: 创建单个应用服务器
 * Summary: 创建单个应用服务器
 */
async function createTraasmetaAppserverEx(request: CreateTraasmetaAppserverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTraasmetaAppserverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appserver.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTraasmetaAppserverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
  // hostname
  hostname?: string(name='hostname'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom?: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // ip
  ip?: string(name='ip'),
  // host_ip
  hostIp?: string(name='host_ip'),
  // collect_id
  collectId?: string(name='collect_id'),
  // status
  status?: boolean(name='status'),
  // workspace_uuid
  workspaceUuid?: string(name='workspace_uuid'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
  // cell_uuid
  cellUuid?: string(name='cell_uuid'),
  // zone_uuid
  zoneUuid?: string(name='zone_uuid'),
  // app_uuid
  appUuid?: string(name='app_uuid'),
  // app_name
  appName?: string(name='app_name'),
  // app_service_uuid
  appServiceUuid?: string(name='app_service_uuid'),
  // vm_uuid
  vmUuid?: string(name='vm_uuid'),
  // pod_uuid
  podUuid?: string(name='pod_uuid'),
}

model UpdateTraasmetaAppserverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app_server
  appServer?: TraasAppServerDto(name='app_server'),
}

/**
 * Description: 更新单个应用服务器
 * Summary: 更新单个应用服务器
 */
async function updateTraasmetaAppserver(request: UpdateTraasmetaAppserverRequest): UpdateTraasmetaAppserverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTraasmetaAppserverEx(request, headers, runtime);
}

/**
 * Description: 更新单个应用服务器
 * Summary: 更新单个应用服务器
 */
async function updateTraasmetaAppserverEx(request: UpdateTraasmetaAppserverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTraasmetaAppserverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.appserver.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSetupModelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
}

model GetSetupModelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 主站试点的产品是否打开
  betaPlugin?: boolean(name='beta_plugin'),
  // showBizDomain
  showBizDomain?: boolean(name='show_biz_domain'),
  // drm 推送的地址列表, 如果为空，前端默认主站，如果不为空，按照配置来渲染
  siteDrms?: [ SiteWithDrm ](name='site_drms'),
  // 是不是租户总览用空间总览
  tenantUseWsOverview?: boolean(name='tenant_use_ws_overview'),
  // iaas监控开关
  iaasMonitor?: boolean(name='iaas_monitor'),
  // 应用监控的技术栈
  appStack?: string(name='app_stack'),
  // 应用监控的技术栈实体
  appStackEntity?: string(name='app_stack_entity'),
  // 站点
  siteEnv?: string(name='site_env'),
  // useNewAlarmConfig
  useNewAlarmConfig?: boolean(name='use_new_alarm_config'),
  // goc推送开关
  gocPushOpen?: boolean(name='goc_push_open'),
  // 是否打开高级产品配置，脚本、联合计算等
  advCustomPluinOpen?: boolean(name='adv_custom_pluin_open'),
  // 导航是否鉴权
  navAuth?: boolean(name='nav_auth'),
  // unFocusPageShutFresh
  unFocusPageShutFresh?: boolean(name='un_focus_page_shut_fresh'),
  // lineChartIncreFresh
  lineChartIncreFresh?: boolean(name='line_chart_incre_fresh'),
  // ws开关
  showWs?: boolean(name='show_ws'),
  // Tenant开关
  showTenant?: boolean(name='show_tenant'),
  // searchEagleEye
  searchEagleEye?: boolean(name='search_eagle_eye'),
  // 系统指标默认显示的周期
  sysMetricInterval?: string(name='sys_metric_interval'),
  // uuidWithWorkspace
  uuidWithWorkspace?: boolean(name='uuid_with_workspace'),
  // 封网变更标志
  blockChange?: boolean(name='block_change'),
  // bizEditors
  bizEditors?: [ string ](name='biz_editors'),
  // 数据接口还使用fiber接口的租户
  useFiberDataTenants?: [ string ](name='use_fiber_data_tenants'),
  // 平台运维技术栈（前端利用这个值来判断将哪些技术栈展示在平台运维版块）
  platformMonitorStackNames?: [ string ](name='platform_monitor_stack_names'),
  // 菜单配置
  menuConfig?: MenuConfig(name='menu_config'),
  // 是否开启秒级监控配置，默认关闭
  secondMonitorEnable?: boolean(name='second_monitor_enable'),
  // 是否允许前端显示应用分组
  showAppGroup?: boolean(name='show_app_group'),
  // 是否禁用老版告警
  disableOldAlarm?: boolean(name='disable_old_alarm'),
  // frontDatasource
  frontDatasource?: string(name='front_datasource'),
  // frontDashboard
  frontDashboard?: string(name='front_dashboard'),
  // showAllChartType
  showAllChartType?: string(name='show_all_chart_type'),
  // showImportReplace
  showImportReplace?: string(name='show_import_replace'),
}

/**
 * Description: 获取SetupModel
 * Summary: 获取SetupModel
 */
async function getSetupModel(request: GetSetupModelRequest): GetSetupModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSetupModelEx(request, headers, runtime);
}

/**
 * Description: 获取SetupModel
 * Summary: 获取SetupModel
 */
async function getSetupModelEx(request: GetSetupModelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSetupModelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.setup.model.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTraasmetaWorkspacegroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // name
  name: string(name='name'),
  // display_name
  displayName?: string(name='display_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model CreateTraasmetaWorkspacegroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspace_group
  workspaceGroup?: TraasWorkspaceGroupDto(name='workspace_group'),
}

/**
 * Description: 创建单个工作空间组
 * Summary: 创建单个工作空间组
 */
async function createTraasmetaWorkspacegroup(request: CreateTraasmetaWorkspacegroupRequest): CreateTraasmetaWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTraasmetaWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 创建单个工作空间组
 * Summary: 创建单个工作空间组
 */
async function createTraasmetaWorkspacegroupEx(request: CreateTraasmetaWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTraasmetaWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.workspacegroup.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTraasmetaCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
  // name
  name?: string(name='name'),
}

model GetTraasmetaCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cell
  cell?: TraasCellDto(name='cell'),
}

/**
 * Description: 获取单个cell
 * Summary: 获取单个cell
 */
async function getTraasmetaCell(request: GetTraasmetaCellRequest): GetTraasmetaCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTraasmetaCellEx(request, headers, runtime);
}

/**
 * Description: 获取单个cell
 * Summary: 获取单个cell
 */
async function getTraasmetaCellEx(request: GetTraasmetaCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTraasmetaCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.cell.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryTraasmetaCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // page_size
  pageSize: long(name='page_size'),
  // current_page
  currentPage: long(name='current_page'),
  // cell name
  name?: string(name='name'),
  // workspace name
  workspaceName?: string(name='workspace_name'),
  // workspace uuid
  workspaceUuid?: string(name='workspace_uuid'),
}

model PagequeryTraasmetaCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cells
  cells?: [ TraasCellDto ](name='cells'),
  // page size
  pageSize?: long(name='page_size'),
  // current page
  currentPage?: long(name='current_page'),
  // total count
  totalCount?: string(name='total_count'),
}

/**
 * Description: 分页查询
 * Summary: 分页查询
 */
async function pagequeryTraasmetaCell(request: PagequeryTraasmetaCellRequest): PagequeryTraasmetaCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryTraasmetaCellEx(request, headers, runtime);
}

/**
 * Description: 分页查询
 * Summary: 分页查询
 */
async function pagequeryTraasmetaCellEx(request: PagequeryTraasmetaCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryTraasmetaCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.cell.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTraasmetaHostmachineRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
  // ip
  ip?: string(name='ip'),
  // workspace_uuid
  workspaceUuid?: string(name='workspace_uuid'),
}

model GetTraasmetaHostmachineResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // host_machine
  hostMachine?: TraasHostMachineDto(name='host_machine'),
}

/**
 * Description: 获取单个主机
 * Summary: 获取单个主机
 */
async function getTraasmetaHostmachine(request: GetTraasmetaHostmachineRequest): GetTraasmetaHostmachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTraasmetaHostmachineEx(request, headers, runtime);
}

/**
 * Description: 获取单个主机
 * Summary: 获取单个主机
 */
async function getTraasmetaHostmachineEx(request: GetTraasmetaHostmachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTraasmetaHostmachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.hostmachine.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryTraasmetaHostmachineRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // page_size
  pageSize: long(name='page_size'),
  // currentPage
  currentPage: long(name='current_page'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
  // workspace_uuid
  workspaceUuid?: string(name='workspace_uuid'),
  // hostname
  hostname?: string(name='hostname'),
  // ip
  ip?: string(name='ip'),
}

model PagequeryTraasmetaHostmachineResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // host_machines
  hostMachines?: [ TraasHostMachineDto ](name='host_machines'),
  // page_size
  pageSize?: long(name='page_size'),
  // current_page
  currentPage?: long(name='current_page'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 分页查询主机
 * Summary: 分页查询主机
 */
async function pagequeryTraasmetaHostmachine(request: PagequeryTraasmetaHostmachineRequest): PagequeryTraasmetaHostmachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryTraasmetaHostmachineEx(request, headers, runtime);
}

/**
 * Description: 分页查询主机
 * Summary: 分页查询主机
 */
async function pagequeryTraasmetaHostmachineEx(request: PagequeryTraasmetaHostmachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryTraasmetaHostmachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.hostmachine.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceDetailtopologyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // trace_id
  traceId: string(name='trace_id'),
}

model QueryTraceDetailtopologyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 拓扑节点
  items?: [ TraceDetailTopologyItem ](name='items'),
}

/**
 * Description: 获取单链路详细拓扑
 * Summary: 获取单链路详细拓扑
 */
async function queryTraceDetailtopology(request: QueryTraceDetailtopologyRequest): QueryTraceDetailtopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceDetailtopologyEx(request, headers, runtime);
}

/**
 * Description: 获取单链路详细拓扑
 * Summary: 获取单链路详细拓扑
 */
async function queryTraceDetailtopologyEx(request: QueryTraceDetailtopologyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceDetailtopologyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.trace.detailtopology.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveTenantconfigSpiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // configKey参数名称
  entityName: string(name='entity_name'),
  // end_point
  endPoint: string(name='end_point'),
  // 默认为CamelCase
  fieldNamingStrategy?: string(name='field_naming_strategy'),
  // 云厂商类型
  cloudVendorType?: string(name='cloud_vendor_type'),
}

model SaveTenantconfigSpiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: spi配置-保存spi
 * Summary: spi配置-保存spi
 */
async function saveTenantconfigSpi(request: SaveTenantconfigSpiRequest): SaveTenantconfigSpiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveTenantconfigSpiEx(request, headers, runtime);
}

/**
 * Description: spi配置-保存spi
 * Summary: spi配置-保存spi
 */
async function saveTenantconfigSpiEx(request: SaveTenantconfigSpiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveTenantconfigSpiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.tenantconfig.spi.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTenantconfigSpiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 模块名称
  entityName: string(name='entity_name'),
}

model QueryTenantconfigSpiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // entity_name
  entityName?: string(name='entity_name'),
  // spi_config
  configValue?: SpiConfig(name='config_value'),
}

/**
 * Description: spi配置-查询spi
 * Summary: spi配置-查询spi
 */
async function queryTenantconfigSpi(request: QueryTenantconfigSpiRequest): QueryTenantconfigSpiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTenantconfigSpiEx(request, headers, runtime);
}

/**
 * Description: spi配置-查询spi
 * Summary: spi配置-查询spi
 */
async function queryTenantconfigSpiEx(request: QueryTenantconfigSpiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTenantconfigSpiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.tenantconfig.spi.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListOneconsoleWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model ListOneconsoleWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ OneConsoleRegion ](name='data'),
}

/**
 * Description: 获取当前用户能够访问的workspace
 * Summary: 获取当前用户能够访问的workspace
 */
async function listOneconsoleWorkspace(request: ListOneconsoleWorkspaceRequest): ListOneconsoleWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listOneconsoleWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 获取当前用户能够访问的workspace
 * Summary: 获取当前用户能够访问的workspace
 */
async function listOneconsoleWorkspaceEx(request: ListOneconsoleWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListOneconsoleWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.oneconsole.workspace.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteTenantconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // 模块名称
  entityName: string(name='entity_name'),
}

model DeleteTenantconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: spi配置-删除
 * Summary: spi配置-删除
 */
async function deleteTenantconfig(request: DeleteTenantconfigRequest): DeleteTenantconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteTenantconfigEx(request, headers, runtime);
}

/**
 * Description: spi配置-删除
 * Summary: spi配置-删除
 */
async function deleteTenantconfigEx(request: DeleteTenantconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTenantconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.tenantconfig.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTenantconfigTokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // configKey对应值
  entityName: string(name='entity_name'),
}

model QueryTenantconfigTokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // token_config
  configValue?: TokenConfig(name='config_value'),
  // entity_name
  entityName?: string(name='entity_name'),
}

/**
 * Description: spi配置-查询token
 * Summary: spi配置-查询token
 */
async function queryTenantconfigToken(request: QueryTenantconfigTokenRequest): QueryTenantconfigTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTenantconfigTokenEx(request, headers, runtime);
}

/**
 * Description: spi配置-查询token
 * Summary: spi配置-查询token
 */
async function queryTenantconfigTokenEx(request: QueryTenantconfigTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTenantconfigTokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.tenantconfig.token.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveTenantconfigTokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceName: string(name='workspace_name'),
  // configKey对应值
  entityName: string(name='entity_name'),
  // token值
  token: string(name='token'),
}

model SaveTenantconfigTokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: spi配置-保存token
 * Summary: spi配置-保存token
 */
async function saveTenantconfigToken(request: SaveTenantconfigTokenRequest): SaveTenantconfigTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveTenantconfigTokenEx(request, headers, runtime);
}

/**
 * Description: spi配置-保存token
 * Summary: spi配置-保存token
 */
async function saveTenantconfigTokenEx(request: SaveTenantconfigTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveTenantconfigTokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.tenantconfig.token.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraasmetaEntityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // entity_name
  entityName: string(name='entity_name'),
  // 工作空间名称
  workspaceName?: string(name='workspace_name'),
}

model QueryTraasmetaEntityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实体名称
  name?: string(name='name'),
  // 展示名称
  displayName?: string(name='display_name'),
  // 实体所属分组名称
  groupName?: string(name='group_name'),
  // 实例所属分组展示名称
  groupDisplayName?: string(name='group_display_name'),
}

/**
 * Description: 查询元数据实体基本信息
 * Summary: 查询元数据实体基本信息
 */
async function queryTraasmetaEntity(request: QueryTraasmetaEntityRequest): QueryTraasmetaEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraasmetaEntityEx(request, headers, runtime);
}

/**
 * Description: 查询元数据实体基本信息
 * Summary: 查询元数据实体基本信息
 */
async function queryTraasmetaEntityEx(request: QueryTraasmetaEntityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraasmetaEntityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.entity.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListTraasmetaEntityfieldRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 实体名称
  entityName: string(name='entity_name'),
}

model ListTraasmetaEntityfieldResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // fields
  fields?: [ TraasEntityFieldDto ](name='fields'),
}

/**
 * Description: 获取实体字段列表
 * Summary: 获取实体字段列表
 */
async function listTraasmetaEntityfield(request: ListTraasmetaEntityfieldRequest): ListTraasmetaEntityfieldResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listTraasmetaEntityfieldEx(request, headers, runtime);
}

/**
 * Description: 获取实体字段列表
 * Summary: 获取实体字段列表
 */
async function listTraasmetaEntityfieldEx(request: ListTraasmetaEntityfieldRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTraasmetaEntityfieldResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.entityfield.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraasmetaEntitytopoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // entity_name
  entityName: string(name='entity_name'),
}

model QueryTraasmetaEntitytopoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // edges
  edges?: [ TraasEntityTopoEdge ](name='edges'),
}

/**
 * Description: 查询实体拓扑
 * Summary: 查询实体拓扑
 */
async function queryTraasmetaEntitytopo(request: QueryTraasmetaEntitytopoRequest): QueryTraasmetaEntitytopoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraasmetaEntitytopoEx(request, headers, runtime);
}

/**
 * Description: 查询实体拓扑
 * Summary: 查询实体拓扑
 */
async function queryTraasmetaEntitytopoEx(request: QueryTraasmetaEntitytopoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraasmetaEntitytopoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.entitytopo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllTraasmetaHostmachineRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model AllTraasmetaHostmachineResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // hosts
  hosts?: [ TraasHostMachineDto ](name='hosts'),
}

/**
 * Description: 获取所有主机
 * Summary: 获取所有主机
 */
async function allTraasmetaHostmachine(request: AllTraasmetaHostmachineRequest): AllTraasmetaHostmachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allTraasmetaHostmachineEx(request, headers, runtime);
}

/**
 * Description: 获取所有主机
 * Summary: 获取所有主机
 */
async function allTraasmetaHostmachineEx(request: AllTraasmetaHostmachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllTraasmetaHostmachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.hostmachine.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateTraasmetaHostmachineRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // hosts
  hosts: [ TraasHostMachineDto ](name='hosts'),
}

model BatchcreateTraasmetaHostmachineResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // hosts
  hosts?: [ TraasHostMachineDto ](name='hosts'),
}

/**
 * Description: 批量创建主机
 * Summary: 批量创建主机
 */
async function batchcreateTraasmetaHostmachine(request: BatchcreateTraasmetaHostmachineRequest): BatchcreateTraasmetaHostmachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateTraasmetaHostmachineEx(request, headers, runtime);
}

/**
 * Description: 批量创建主机
 * Summary: 批量创建主机
 */
async function batchcreateTraasmetaHostmachineEx(request: BatchcreateTraasmetaHostmachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateTraasmetaHostmachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.hostmachine.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteTraasmetaHostmachineRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids: [ string ](name='uuids'),
}

model BatchdeleteTraasmetaHostmachineResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量删除主机
 * Summary: 批量删除主机
 */
async function batchdeleteTraasmetaHostmachine(request: BatchdeleteTraasmetaHostmachineRequest): BatchdeleteTraasmetaHostmachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteTraasmetaHostmachineEx(request, headers, runtime);
}

/**
 * Description: 批量删除主机
 * Summary: 批量删除主机
 */
async function batchdeleteTraasmetaHostmachineEx(request: BatchdeleteTraasmetaHostmachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteTraasmetaHostmachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.hostmachine.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryTraasmetaHostmachineRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids?: [ string ](name='uuids'),
  // ips
  ips?: [ string ](name='ips'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // workspace_uuid
  workspaceUuid?: string(name='workspace_uuid'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
}

model BatchqueryTraasmetaHostmachineResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // hosts
  hosts?: [ TraasHostMachineDto ](name='hosts'),
}

/**
 * Description: 批量查询主机
 * Summary: 批量查询主机
 */
async function batchqueryTraasmetaHostmachine(request: BatchqueryTraasmetaHostmachineRequest): BatchqueryTraasmetaHostmachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryTraasmetaHostmachineEx(request, headers, runtime);
}

/**
 * Description: 批量查询主机
 * Summary: 批量查询主机
 */
async function batchqueryTraasmetaHostmachineEx(request: BatchqueryTraasmetaHostmachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryTraasmetaHostmachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.hostmachine.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTraasmetaHostmachineRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // hostname
  hostname: string(name='hostname'),
  // ip
  ip: string(name='ip'),
  // collect_id
  collectId: string(name='collect_id'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // workspace_uuid
  workspaceUuid?: string(name='workspace_uuid'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
  // zone_uuid
  zoneUuid?: string(name='zone_uuid'),
  // zone_name
  zoneName?: string(name='zone_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
}

model CreateTraasmetaHostmachineResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // host
  host?: TraasHostMachineDto(name='host'),
}

/**
 * Description: 创建单个主机
 * Summary: 创建单个主机
 */
async function createTraasmetaHostmachine(request: CreateTraasmetaHostmachineRequest): CreateTraasmetaHostmachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTraasmetaHostmachineEx(request, headers, runtime);
}

/**
 * Description: 创建单个主机
 * Summary: 创建单个主机
 */
async function createTraasmetaHostmachineEx(request: CreateTraasmetaHostmachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTraasmetaHostmachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.hostmachine.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteTraasmetaHostmachineRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
}

model DeleteTraasmetaHostmachineResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除主机
 * Summary: 删除主机
 */
async function deleteTraasmetaHostmachine(request: DeleteTraasmetaHostmachineRequest): DeleteTraasmetaHostmachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteTraasmetaHostmachineEx(request, headers, runtime);
}

/**
 * Description: 删除主机
 * Summary: 删除主机
 */
async function deleteTraasmetaHostmachineEx(request: DeleteTraasmetaHostmachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTraasmetaHostmachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.hostmachine.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraasmetaHostmachineRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // ip
  ip?: string(name='ip'),
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // workspace_uuid
  workspaceUuid?: string(name='workspace_uuid'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
}

model QueryTraasmetaHostmachineResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // hosts
  hosts?: [ TraasHostMachineDto ](name='hosts'),
}

/**
 * Description: 查询主机
 * Summary: 查询主机
 */
async function queryTraasmetaHostmachine(request: QueryTraasmetaHostmachineRequest): QueryTraasmetaHostmachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraasmetaHostmachineEx(request, headers, runtime);
}

/**
 * Description: 查询主机
 * Summary: 查询主机
 */
async function queryTraasmetaHostmachineEx(request: QueryTraasmetaHostmachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraasmetaHostmachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.hostmachine.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTraasmetaHostmachineRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
  // hostname
  hostname?: string(name='hostname'),
  // collect_id
  collectId?: string(name='collect_id'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // workspace_uuid
  workspaceUuid?: string(name='workspace_uuid'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
  // zone_uuid
  zoneUuid?: string(name='zone_uuid'),
  // zone_name
  zoneName?: string(name='zone_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom?: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
  // ip
  ip?: string(name='ip'),
}

model UpdateTraasmetaHostmachineResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // host
  host?: TraasHostMachineDto(name='host'),
}

/**
 * Description: 更新主机
 * Summary: 更新主机
 */
async function updateTraasmetaHostmachine(request: UpdateTraasmetaHostmachineRequest): UpdateTraasmetaHostmachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTraasmetaHostmachineEx(request, headers, runtime);
}

/**
 * Description: 更新主机
 * Summary: 更新主机
 */
async function updateTraasmetaHostmachineEx(request: UpdateTraasmetaHostmachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTraasmetaHostmachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.hostmachine.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateTraasmetaCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cells
  cells: [ TraasCellDto ](name='cells'),
}

model BatchcreateTraasmetaCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cells
  cells?: [ TraasCellDto ](name='cells'),
}

/**
 * Description: 批量创建cell
 * Summary: 批量创建cell
 */
async function batchcreateTraasmetaCell(request: BatchcreateTraasmetaCellRequest): BatchcreateTraasmetaCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateTraasmetaCellEx(request, headers, runtime);
}

/**
 * Description: 批量创建cell
 * Summary: 批量创建cell
 */
async function batchcreateTraasmetaCellEx(request: BatchcreateTraasmetaCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateTraasmetaCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.cell.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteTraasmetaCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids: [ string ](name='uuids'),
}

model BatchdeleteTraasmetaCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量删除cell
 * Summary: 批量删除cell
 */
async function batchdeleteTraasmetaCell(request: BatchdeleteTraasmetaCellRequest): BatchdeleteTraasmetaCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteTraasmetaCellEx(request, headers, runtime);
}

/**
 * Description: 批量删除cell
 * Summary: 批量删除cell
 */
async function batchdeleteTraasmetaCellEx(request: BatchdeleteTraasmetaCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteTraasmetaCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.cell.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryTraasmetaCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuids
  uuids?: [ string ](name='uuids'),
  // names
  names?: [ string ](name='names'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // workspace_uuid
  workspaceUuid?: string(name='workspace_uuid'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
}

model BatchqueryTraasmetaCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cells
  cells?: [ TraasCellDto ](name='cells'),
}

/**
 * Description: 批量查询cell
 * Summary: 批量查询cell
 */
async function batchqueryTraasmetaCell(request: BatchqueryTraasmetaCellRequest): BatchqueryTraasmetaCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryTraasmetaCellEx(request, headers, runtime);
}

/**
 * Description: 批量查询cell
 * Summary: 批量查询cell
 */
async function batchqueryTraasmetaCellEx(request: BatchqueryTraasmetaCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryTraasmetaCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.cell.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTraasmetaCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
  // name
  name?: string(name='name'),
  // display_name
  displayName?: string(name='display_name'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // workspace_uuid
  workspaceUuid?: string(name='workspace_uuid'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
  // zone_uuid
  zoneUuid?: string(name='zone_uuid'),
  // zone_name
  zoneName?: string(name='zone_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom?: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
}

model UpdateTraasmetaCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cell
  cell?: TraasCellDto(name='cell'),
}

/**
 * Description: 更新cell
 * Summary: 更新cell
 */
async function updateTraasmetaCell(request: UpdateTraasmetaCellRequest): UpdateTraasmetaCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTraasmetaCellEx(request, headers, runtime);
}

/**
 * Description: 更新cell
 * Summary: 更新cell
 */
async function updateTraasmetaCellEx(request: UpdateTraasmetaCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTraasmetaCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.cell.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTraasmetaCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // name
  name: string(name='name'),
  // display_name
  displayName?: string(name='display_name'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // workspace_uuid
  workspaceUuid?: string(name='workspace_uuid'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
  // zone_uuid
  zoneUuid?: string(name='zone_uuid'),
  // zone_name
  zoneName?: string(name='zone_name'),
  // outside_id
  outsideId?: string(name='outside_id'),
  // source_from
  sourceFrom: string(name='source_from'),
  // extension
  extension?: string(name='extension'),
}

model CreateTraasmetaCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cell
  cell?: TraasCellDto(name='cell'),
}

/**
 * Description: 创建单个cell
 * Summary: 创建单个cell
 */
async function createTraasmetaCell(request: CreateTraasmetaCellRequest): CreateTraasmetaCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTraasmetaCellEx(request, headers, runtime);
}

/**
 * Description: 创建单个cell
 * Summary: 创建单个cell
 */
async function createTraasmetaCellEx(request: CreateTraasmetaCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTraasmetaCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.cell.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteTraasmetaCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid: string(name='uuid'),
}

model DeleteTraasmetaCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除单个cell
 * Summary: 删除单个cell
 */
async function deleteTraasmetaCell(request: DeleteTraasmetaCellRequest): DeleteTraasmetaCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteTraasmetaCellEx(request, headers, runtime);
}

/**
 * Description: 删除单个cell
 * Summary: 删除单个cell
 */
async function deleteTraasmetaCellEx(request: DeleteTraasmetaCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTraasmetaCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.cell.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllTraasmetaCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model AllTraasmetaCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cells
  cells?: [ TraasCellDto ](name='cells'),
}

/**
 * Description: 获取所有cell
 * Summary: 获取所有cell
 */
async function allTraasmetaCell(request: AllTraasmetaCellRequest): AllTraasmetaCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allTraasmetaCellEx(request, headers, runtime);
}

/**
 * Description: 获取所有cell
 * Summary: 获取所有cell
 */
async function allTraasmetaCellEx(request: AllTraasmetaCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllTraasmetaCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.cell.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraasmetaCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // uuid
  uuid?: string(name='uuid'),
  // name
  name?: string(name='name'),
  // 	
  // 是否是模糊搜索，默认为false
  search: boolean(name='search'),
  // tenant_uuid
  tenantUuid?: string(name='tenant_uuid'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // workspace_uuid
  workspaceUuid?: string(name='workspace_uuid'),
  // workspace_name
  workspaceName?: string(name='workspace_name'),
}

model QueryTraasmetaCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cells
  cells?: [ TraasCellDto ](name='cells'),
}

/**
 * Description: 查询cell
 * Summary: 查询cell
 */
async function queryTraasmetaCell(request: QueryTraasmetaCellRequest): QueryTraasmetaCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraasmetaCellEx(request, headers, runtime);
}

/**
 * Description: 查询cell
 * Summary: 查询cell
 */
async function queryTraasmetaCellEx(request: QueryTraasmetaCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraasmetaCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.monitor.traasmeta.cell.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

