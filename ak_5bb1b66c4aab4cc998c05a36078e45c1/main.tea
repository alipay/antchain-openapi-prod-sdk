import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.0',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 键值对，兼容map用
model NameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

// 核身产品
model GwValidateProduct {
  // 核审产品码，支持多种核身产品。
  // ZK_FACE_VERIFY：人脸识别
  productCode: string(name='product_code', example='ZK_FACE_VERIFY'),
  // 产品渲染方式：H5、NATIVE 或 PC
  group: string(name='group', example='H5、NATIVE 或 PC'),
  // 核身产品参数，因网关限制，暂只支持Map<String,String>
  productParams?: [ NameValuePair ](name='product_params', example=''),
}

// 客户认证结果
model CustomerAuthResult {
  // 账户ID
  accId?: string(name='acc_id', example='xxx'),
  // 返回code 0:核验成功 1:企业信息有误 2:企业非正常营业
  code: string(name='code', example='0'),
  // 客户ID
  customerId?: string(name='customer_id', example='xxx'),
  // 客户did
  did?: string(name='did', example='xxx'),
  // 验证状态
  enterpriseStatus?: string(name='enterprise_status', example='营业'),
  // 开业时间
  openTime: string(name='open_time', example='2019-09-27/长期'),
  // 认证结果，是否通过
  pass: boolean(name='pass', example='true, false'),
  // 业务ID
  disReqMsgId?: string(name='dis_req_msg_id', example='xxx'),
}

// 核身渲染结果
model GwVerifyViewResult {
  // 核身上下文id
  verifyId: string(name='verify_id', example='xx'),
  // 核审产品码，支持多种核身产品。 ZK_FACE_VERIFY：人脸识别
  productCode: string(name='product_code', example='ZK_FACE_VERIFY'),
  // 核身分组
  group: string(name='group', example='PC'),
  // 返回结果
  responseParams: [ NameValuePair ](name='response_params', example=''),
  // 核身渲染是否调用成功
  success: boolean(name='success', example='true, false'),
  // 返回码
  resultCode?: string(name='result_code', example='xxx'),
  // 返回信息
  resultMsg?: string(name='result_msg', example='xxx'),
}

// 核审场景
model GwVerifyScene {
  // 调用方系统名
  systemName: string(name='system_name', example='appname'),
  // 业务方产品
  bizProduct: string(name='biz_product', example='product'),
  // 业务产品节点
  bizProdNode: string(name='biz_prod_node', example='node'),
  // 业务接入渠道
  accessChannel: string(name='access_channel', example='web'),
  // 业务调用场景的语言版本、CHINESE("中文", "chi")、ENG("英文", "en")
  language: string(name='language', example='chi'),
}

model InitAntchainBbpVerifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 接入场景（主要由接入系统、接入产品、产品节点三部分组成）
  verifyScene: GwVerifyScene(name='verify_scene'),
  // 调用方传入，唯一标识一笔业务，核身平台将bizId与核身token进行绑定，用作防串改校验
  bizId: string(name='biz_id'),
  // 调用方传入，存放业务扩展参数（callback参数也写入此）
  externParams?: [ NameValuePair ](name='extern_params'),
  // 调用方传入，指定核身完成后的回调类型
  callbackEnum?: string(name='callback_enum'),
  // 核身产品列表
  validateFlows: [ GwValidateProduct ](name='validate_flows'),
  // 核身id
  verifyId?: string(name='verify_id'),
  // 核身请求地址url
  verifyUrl?: string(name='verify_url'),
  // 核身处理状态:INITIAL、PROCESSING、SUCCESS、EXPIRED、FAIL
  verifyStatus?: string(name='verify_status'),
  // 可用产品集合
  validProd?: [ GwValidateProduct ](name='valid_prod'),
}

model InitAntchainBbpVerifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核身id
  verifyId?: string(name='verify_id'),
  // 核身请求地址url
  verifyUrl?: string(name='verify_url'),
  // 核身处理状态:INITIAL、PROCESSING、SUCCESS、EXPIRED、FAIL
  verifyStatus?: string(name='verify_status'),
  // 可用产品集合
  validProd?: [ GwValidateProduct ](name='valid_prod'),
}

/**
 * Description: 核身初始化接口
 * Summary: 核身初始化接口
 */
async function initAntchainBbpVerify(request: InitAntchainBbpVerifyRequest): InitAntchainBbpVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initAntchainBbpVerifyEx(request, headers, runtime);
}

/**
 * Description: 核身初始化接口
 * Summary: 核身初始化接口
 */
async function initAntchainBbpVerifyEx(request: InitAntchainBbpVerifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitAntchainBbpVerifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.verify.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAntchainBbpVerifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 核身上下文id
  verifyId: string(name='verify_id'),
  // 核身模块分组
  group: string(name='group'),
  // 核身动作：view-渲染，verify-校验，repeat-重新发送
  productAction: string(name='product_action'),
  // 业务id
  bizId: string(name='biz_id'),
  // 核身渲染结果
  result?: [ GwVerifyViewResult ](name='result'),
}

model StartAntchainBbpVerifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核身渲染结果
  result?: [ GwVerifyViewResult ](name='result'),
}

/**
 * Description: 核身产品渲染接口
 * Summary: 核身产品渲染接口
 */
async function startAntchainBbpVerify(request: StartAntchainBbpVerifyRequest): StartAntchainBbpVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAntchainBbpVerifyEx(request, headers, runtime);
}

/**
 * Description: 核身产品渲染接口
 * Summary: 核身产品渲染接口
 */
async function startAntchainBbpVerifyEx(request: StartAntchainBbpVerifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAntchainBbpVerifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.verify.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckAntchainBbpVerifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 核身上下文id
  verifyId: string(name='verify_id'),
  // 核身模块分组
  group: string(name='group'),
  // 核身动作：view-渲染，verify-校验，repeat-重新发送
  productAction: string(name='product_action'),
  // 业务id
  bizId: string(name='biz_id'),
  // 核身产品码
  productCode: string(name='product_code'),
  // 核身结果枚举：PASS-核身成功，INITIAL-初始化，PROCESS-处理中，FAIL-失败
  status?: string(name='status'),
}

model CheckAntchainBbpVerifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核身结果枚举：PASS-核身成功，INITIAL-初始化，PROCESS-处理中，FAIL-失败
  status?: string(name='status'),
}

/**
 * Description: 核身结果查询
 * Summary: 核身结果查询
 */
async function checkAntchainBbpVerify(request: CheckAntchainBbpVerifyRequest): CheckAntchainBbpVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkAntchainBbpVerifyEx(request, headers, runtime);
}

/**
 * Description: 核身结果查询
 * Summary: 核身结果查询
 */
async function checkAntchainBbpVerifyEx(request: CheckAntchainBbpVerifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckAntchainBbpVerifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.verify.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyAntchainBbpMetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 预留业务code
  bizCode?: string(name='biz_code'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号码
  epCertNo: string(name='ep_cert_no'),
  // 企业证件号码类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum
  epCertNoType: string(name='ep_cert_no_type'),
  // 法人姓名
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 法人证件号码
  legalPersonCertNo?: string(name='legal_person_cert_no'),
  // 法人证件号码类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum
  legalPersonCertNoType?: string(name='legal_person_cert_no_type'),
  // 系统名称
  ownerName?: string(name='owner_name'),
  // 系统租户ID
  ownerUid?: string(name='owner_uid'),
  // 业务唯一ID
  bizId: string(name='biz_id'),
  // 业务渠道，需提前申请产品码
  channel: string(name='channel'),
  // 认证类型：ENTERPRISE-企业, PERSON-个人
  certifyEnum: string(name='certify_enum'),
  // 客户支付宝ID
  alipayUid?: string(name='alipay_uid'),
  // 个人姓名，用于个人认证
  personName?: string(name='person_name'),
  // 个人证件号码
  personCertNo?: string(name='person_cert_no'),
  // 个人证件类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum
  personCertType?: string(name='person_cert_type'),
  // 扩展信息
  extensionInfo?: NameValuePair(name='extension_info'),
  // 要素认证结果
  result?: CustomerAuthResult(name='result'),
}

model VerifyAntchainBbpMetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 要素认证结果
  result?: CustomerAuthResult(name='result'),
}

/**
 * Description: 对企业身份进行认证
 * Summary: 企业四要素认证
 */
async function verifyAntchainBbpMeta(request: VerifyAntchainBbpMetaRequest): VerifyAntchainBbpMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyAntchainBbpMetaEx(request, headers, runtime);
}

/**
 * Description: 对企业身份进行认证
 * Summary: 企业四要素认证
 */
async function verifyAntchainBbpMetaEx(request: VerifyAntchainBbpMetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyAntchainBbpMetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.meta.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

