import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.4.12',
    _prod_code = 'SECURITYTECH',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 风险数据
model RiskData {
  // 模型/标签编号
  resultKey: string(name='result_key', example='·'),
  // 模型分/标签值
  resultValue: string(name='result_value', example='·'),
}

// ekyt响应头
model ResponseHead {
  // 请求唯一标识
  requestId: string(name='request_id', example='91440300892305861T'),
}

// 业务参数
model BizParam {
  // 参数类型枚举，mobile、cert、biz_license
  paramKey: string(name='param_key', example='·'),
  // 值，如加密后的手机号
  paramValue: string(name='param_value', example='·'),
}

// CctSubCheckLabel
model CctSubCheckLabel {
  // sub_label
  subLabel: string(name='sub_label', example='sub_label'),
  // rate
  rate: long(name='rate', example=''),
}

// eKYT风险标签
model RiskModel {
  // 标签名称
  modelName: string(name='model_name', example='ekyt_risk_tag_100'),
  // 风险值
  modelValue: string(name='model_value', example='1'),
  // 风险标签描述
  modelComment: string(name='model_comment', example='中风险'),
}

// 风险结果
model RiskResult {
  // 数据列表
  riskData: [ RiskData ](name='risk_data', example=''),
  // 解决方案编码
  solutionCode: string(name='solution_code', example='·'),
}

// 终端安全-Android应用加固-RuntimeProtectConfig
model RuntimeProtectConfig {
  // 重打包,签名校验,AndroidManifest防篡改,签名文件保护,0为检测到风险退出,1不处理
  antiSignature: long(name='anti_signature', example='.'),
  // 防调试,0为检测到风险退出,1不处理
  antiDebug: long(name='anti_debug', example='.'),
  // 防hook,0为检测到风险退出,1不处理
  antiHook: long(name='anti_hook', example='.'),
  // 防注入,防内存dump,防内存数据修改,读取,0为检测到风险退出,1不处理
  antiInject: long(name='anti_inject', example='.'),
  // 模拟器检查,0为检测到风险退出,1不处理
  antiEmulator: long(name='anti_emulator', example='.'),
  // 防root,0为检测到风险退出,1不处理
  antiRoot: long(name='anti_root', example='.'),
  // 防多开软件运行,0为检测到风险退出,1不处理
  antiMultiApp: long(name='anti_multi_app', example='.'),
}

// 人脸盾结果
model FaceShieldResult {
  // 设备token
  apdidToken: string(name='apdid_token', example='uYxLZlL5YGpLvdwO5+4pyCkjgf3/FF4XxOqzrmG/XY+jyFilhgEAAA=='),
  // 风险等级，-1参数异常，0无风险，1-3表示低、中、高
  riskLevel: long(name='risk_level', example='3'),
  // 风险描述，对风险等级的补充
  riskDesc: string(name='risk_desc', example='本次咨询设备风险水平很高,风险编号:10000010.8.0'),
  // 处理的建议，如PAAS
  sugAction: string(name='sug_action', example='建议直接拦截'),
}

// 两轮车一体机销售信息
model SimSalesInfo {
  // 销售对外业务id
  salesId: string(name='sales_id', example=' '),
}

// 终端安全-Android加固-Response
model FileTokenForUpload {
  // .
  accessId: string(name='access_id', example='.'),
  // dir
  dir: string(name='dir', example='dir'),
  // expire
  expire: string(name='expire', example='expire'),
  // host
  host: string(name='host', example='host'),
  // policy
  policy: string(name='policy', example='policy'),
  // signature
  signature: string(name='signature', example='signature'),
}

// result.resultData
model DeviceRiskReportResultData {
  // webrtc_url
  webrtcUrl: string(name='webrtc_url', example='webrtc_url'),
  // a_dynamic_swi
  aDynamicSwi: string(name='a_dynamic_swi', example='a_dynamic_swi'),
  // dynamic_interval
  dynamicInterval: string(name='dynamic_interval', example='dynamic_interval'),
  // color
  color: string(name='color', example='color'),
  // os
  os: string(name='os', example='os'),
  // dynamic_cmd
  dynamicCmd: string(name='dynamic_cmd', example='dynamic_cmd'),
  // time_interval
  timeInterval: string(name='time_interval', example='time_interval'),
  // dynamic_trace
  dynamicTrace: string(name='dynamic_trace', example='dynamic_trace'),
  // dynamic_num
  dynamicNum: string(name='dynamic_num', example='dynamic_num'),
  // result_type
  resultType: string(name='result_type', example='result_type'),
}

// eKYT人脸核身结果数据
model FaceVerifyResultData {
  // 请求唯一标识Id
  requestId: string(name='request_id', example='111111111111111'),
  // 认证是否通过
  passed: string(name='passed', example='T、F 或 null'),
  // faceOcclusion:面部遮挡信息；true为有面部遮挡，false为无面部遮挡
  materialInfo: string(name='material_info', example='"{\"faceOcclusion\":false}"'),
}

// 光鉴智能凭证结构体
model IdentityData {
  // 风险等级，枚举值： 0：低风险（打扰率＞10%） 1：中风险（5%＜打扰率≤10%） 2：高风险（打扰率≤5%）
  isRisk: string(name='is_risk', example='1'),
  // 风险类型，枚举值及对应含义： ● PS：图片被PS篡改 ● SCREEN_PHOTO：屏幕翻拍 ● SCREENSHOT：截屏图片 ● COLOR_PRINT：彩打复印 ● WATERMARK：水印 ● FACE_SIMILAR：人脸相似 ● BACKGROUND_SIMILAR：背景相似 ● SIGNATURE_SIMILAR：证件手写签名相似 格式：以英文逗号分隔，如样例
  riskType: string(name='risk_type', example='PS,SCREEN_PHOTO'),
  // 附加字段,json格式字符串
  extInfo: string(name='ext_info', example='{ "ps_score": "0.0236", "screen_photo_score": "0.1839"}'),
}

// 安卓加固HardeningTaskResponse
model HardeningTaskResponse {
  // 加固任务的 ID，后续用来轮询调用
  taskId: string(name='task_id', example='task_id'),
  // 加固任务的状态
  status: long(name='status', example=''),
  // 加固后 APK/ABB 的 MD5
  afterMdFive: string(name='after_md_five', example='after_md_five'),
  // 加固后 APK/ABB 的大小
  afterSize: long(name='after_size', example=''),
}

// ETC车辆信息
model EtcVehicleInfo {
  // 车辆id
  vehicleId: string(name='vehicle_id', example='2039029939'),
  // etc申请单号
  orderId: string(name='order_id', example='20212424231413243'),
  // etc平台扣款协议号
  bizAgreementNo: string(name='biz_agreement_no', example='20211232213232'),
  // etc申请单状态
  // ORDER_CREATE:订单创建;ORDER_SYNCED:订单已同步;SUCCESS_ACTIVATE:订单已激活;UNMOUNTING:注销中;UNMOUNTED:已注销;
  orderStatus: string(name='order_status', example='ORDER_CREATE'),
  // 用户ETC设备OBU号，当order_status为SUCCESS_ACTIVATE及以后状态时，必选
  deviceNo?: string(name='device_no', example='32432def'),
  // 代扣签约状态，当传入waybill_no且匹配到对应运单时，deduct_sign_status必选
  // 待签约: WAIT_SIGN
  // 已签约: SIGNED
  // 已解约: UNSIGN
  deductSignStatus?: string(name='deduct_sign_status', example='WAIT_SIGN'),
  // 设备首次激活时间
  firstActivedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='first_actived_time', example='2018-10-10T10:10:00Z'),
  // 合约到期时间
  serviceExp?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='service_exp', example='2018-10-10T10:10:00Z'),
  // etc设备状态，USABLE-设备激活可用（可上高速正常使用）PENDING-设备激活挂起（限制消费） UNUSABLE-设备异常不可用
  deviceStatus?: string(name='device_status', example='USABLE'),
  // 设备状态明细，能清楚说明etc设备此时状态（/卡签注销/卡签挂失/已过户/维修中/黑名单/卡过期/欠费/标签脱落/设备报警/正常/ETC停用等）
  deviceStatusDetail?: string(name='device_status_detail', example='卡签挂起'),
  // 设备状态触发的具体时间
  deviceBizTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='device_biz_time', example='2018-10-10T10:10:00Z'),
}

// eKYT业务响应结果
model IifaaEkytResponse {
  // 响应头
  head: ResponseHead(name='head', example=''),
  // 业务响应结果
  bizRes: string(name='biz_res', example='126dncnceicncwuiooo'),
}

// 业务请求入参，兼容批量调用
model BizQueryParam {
  // 参数列表，数组
  bizParams: [ BizParam ](name='biz_params', example=''),
}

// eKYT可信签约录入准备数据
model TrustSignInitData {
  // 请求唯一标识Id
  requestId: string(name='request_id', example='111111111111111'),
  // 签约秘钥
  signUniqueId: string(name='sign_unique_id', example='g9y47yjs'),
}

// 终端安全-Android应用加固-ClassMethodConfig
model ClassMethodConfig {
  // 加固类名
  className: string(name='class_name', example='class_name'),
  // 方法集合，使用英文逗号分隔
  methods: string(name='methods', example='methods'),
}

// 两轮车一体机订单信息
model SimOrderInfo {
  // 订单ID
  orderId: string(name='order_id', example=' '),
  // 必填	销售id
  salesId: string(name='sales_id', example=' '),
  // 车辆SN号
  sn?: string(name='sn', example=' '),
  // 订单时间，格式yyyy-MM-dd HH:mm:ss
  orderTime: string(name='order_time', example='2025-01-01 00:00:00'),
  // 支付类型，枚举值FULL（全额付款）, INSTALLMENT（分期付款）
  paymentType?: string(name='payment_type', example='FULL'),
  // 支付时间，格式yyyy-MM-dd HH:mm:ss
  paymentTime?: string(name='payment_time', example='2025-01-01 00:00:00'),
  // 总金额，单位元
  totalAmount?: string(name='total_amount', example='1000.00'),
  // 订单状态，枚举值
  // UNPAID（未支付），
  // PAID（已支付），
  // CANCEL（订单取消），
  // PENDING（支付中），
  // FAILED（支付失败）
  status: string(name='status', example='PAID'),
  // 车辆SKU名字
  skuName?: string(name='sku_name', example=' '),
  // 车型
  vehicleModel?: string(name='vehicle_model', example=' '),
  // 颜色
  color?: string(name='color', example=' '),
  // 配件信息，逗号分隔
  accessories?: string(name='accessories', example=' '),
  // 图片json
  images?: string(name='images', example=' '),
}

// 二轮车一体机车辆SKU
model SimSkuInfo {
  // sku对外id
  skuId: string(name='sku_id', example=' '),
  // sku名称
  skuName: string(name='sku_name', example=' '),
  // sku官方指导价：单位为元
  price: string(name='price', example='1000.00'),
  // sku门店优惠价：单位为元
  storePrice: string(name='store_price', example='1000.00'),
  // 车型
  vehicleModel: string(name='vehicle_model', example=' '),
  // 续航里程
  rangeKm: string(name='range_km', example='-'),
  // 关键词，逗号分隔
  keywords: string(name='keywords', example='A,B,C'),
  // 颜色，逗号分隔
  colors: string(name='colors', example='A,B,C'),
  // 配件信息，逗号分隔
  accessories: string(name='accessories', example='A,B,C'),
  // 图片url json
  images: string(name='images', example='{}'),
  // 门店id
  storeId: string(name='store_id', example=' '),
}

// eKYT可信签约查询数据
model TrustSignQueryData {
  // 请求唯一标识Id
  requestId: string(name='request_id', example='111111111111111'),
  // 订单状态
  orderStatus: string(name='order_status', example='SUCCESS'),
  // 签约方案码
  solutionCode: string(name='solution_code', example='011fda32a0046d0e8a8be6b94b367fb3'),
  // 创建时间
  gmtCreate: string(name='gmt_create', example='2024-03-20'),
  // 修改时间
  gmtModified: string(name='gmt_modified', example='2024-03-20'),
  // 签约文件列表
  fileList: [ string ](name='file_list', example=''),
}

// eKYT请求头
model RequestHead {
  // 请求唯一标识
  requestId: string(name='request_id', example='91440300892305861T'),
  // 客户身份标识ID
  secretId: string(name='secret_id', example='91440300892305861T'),
  // 客户签约产品code
  productCode: string(name='product_code', example='RDDB04201PR'),
  // response输出类型，默认json
  formatType?: string(name='format_type', example='"tlv"'),
  // false
  onlineFlag?: boolean(name='online_flag', example='true, false'),
}

// 车队信息结构体
model DcpInfo {
  // 企业入驻租户ID
  dcpTenantId: string(name='dcp_tenant_id', example='LKPFALCN'),
  // 企业名称
  dcpName: string(name='dcp_name', example='曹操出行'),
}

// 保单信息
model InsureInfo {
  // 保单时间
  modifyTime: string(name='modify_time', example='2023-04-23 12:00:01'),
  // 蚂蚁L5产品code
  productCode: string(name='product_code', example='base'),
  // 保险产品code
  insureProduct: string(name='insure_product', example='A'),
  // 保险产品价格
  insurePrice: string(name='insure_price', example='54'),
  // 保险品种
  insureType: string(name='insure_type', example='基础险'),
  // 付款方式
  payType: string(name='pay_type', example='年付'),
  // 保险期数
  insurePeriod: string(name='insure_period', example='12'),
  // 保单状态
  policyStatus: string(name='policy_status', example='生效中'),
  // 操作类型
  operateType: string(name='operate_type', example='投保'),
  // 保司信用代码
  insureCompCreditNo: string(name='insure_comp_credit_no', example='91440300892305861T'),
}

// 设备风险咨询结果
model RiskQueryData {
  // 风险评分
  riskScore: string(name='risk_score', example='.'),
  // 风险标签
  riskLabels: [ string ](name='risk_labels', example='.'),
}

// KeyValue对属性
model KeyValueMap {
  // key-value中的key
  key?: string(maxLength=100, minLength=1, name='key', example='key'),
  // key-value中的value
  value?: string(maxLength=1000, minLength=1, name='value', example='value'),
}

// eKYT人脸核身初始化数据
model FaceVerifyInitData {
  // 请求唯一标识Id
  requestId: string(name='request_id', example='111111111111111'),
  // 可信实人认证的唯一标识
  certifyId: string(name='certify_id', example='cwek23dw24geor89230hf2rw'),
  // 认证流程入口 URL
  certifyUrl: string(name='certify_url', example='https://picker...'),
}

// 设备风险查询data
model DeviceRiskResp {
  // apdid
  apdid: string(name='apdid', example='.'),
  // apdid_token
  apdidToken: string(name='apdid_token', example='.'),
  // risk_level
  riskLevel: long(name='risk_level', example='.'),
  // risk_desc
  riskDesc: string(name='risk_desc', example='.'),
  // sug_action
  sugAction: string(name='sug_action', example='.'),
  // risk_labels
  riskLabels: [ string ](name='risk_labels', example='.'),
}

// 分页器
model Paginator {
  // 当前页
  page: long(name='page', example=''),
  // 单页项数
  itemsPerPage: long(name='items_per_page', example=''),
  // 总项数
  items: long(name='items', example=''),
}

// 内容安全请求体datamap
model CctDataMap {
  // text
  text?: [ string ](name='text', example='text'),
  // PICTURE
  picture?: [ string ](name='picture', example='PICTURE'),
}

// 两轮车一体机门店信息
model SimStoreInfo {
  // 门店对外业务id
  storeId: string(name='store_id', example=' '),
  // 门店名称
  storeName: string(name='store_name', example=' '),
}

// 司机签约信息列表
model SignInfo {
  // 司机证件号
  employeeCertNo: string(name='employee_cert_no', example='310681200001017789'),
  // 灵工卡号
  employeeCardNo: string(name='employee_card_no', example='111222190002309999'),
  // 借贷专户ID，用于后续资金相关操作
  accountBookId: string(name='account_book_id', example='111222190002309999'),
  // 签约状态，枚举值
  // ● SIGNED：已签约【灵工卡状态正常，可入金出金】
  // ● TERMINATED：已解约【不可入金出金】
  status: string(name='status', example='SIGNED'),
  // 签约时间 "yyyy-MM-dd HH:mm:ss"
  signTime?: string(name='sign_time', example='2000-10-10 00:00:00'),
  // 解约时间 "yyyy-MM-dd HH:mm:ss"
  terminateTime?: string(name='terminate_time', example='2000-10-10 00:00:00'),
  // 签约协议生效时间
  effectTime: string(name='effect_time', example='2000-10-10 00:00:00'),
  // 签约协议解约时间
  expireTime: string(name='expire_time', example='2000-10-10 00:00:00'),
  // 月租金额：单位为元
  paymentAmount: string(name='payment_amount', example='100'),
}

// 风险评估结果
model RiskAssessResult {
  // 风险评估结果
  riskValue: string(name='risk_value', example='中风险'),
  // 风险评估分数
  riskScore: string(name='risk_score', example='90'),
  // 风险评估标签
  modelInfos: RiskModel(name='model_infos', example=''),
}

// 内容安全response
model CctDetectCheckLabel {
  // label
  label: string(name='label', example='label'),
  // rate
  rate: long(name='rate', example='rate'),
  // subLabels
  subLabels: [ CctSubCheckLabel ](name='sub_labels', example=''),
  // details
  details: string(name='details', example='details'),
}

// 风险评估响应结果
model RiskAssessData {
  // 响应头
  head: ResponseHead(name='head', example=''),
  // 风险评估结果
  riskResult: string(name='risk_result', example='A238EE36A9E096A97BF49C568EE7D0F4543043E21CE1A9831303EFDD'),
}

// 风险咨询结果
model ResultList {
  // 结果列表
  riskResults: [ RiskResult ](name='risk_results', example=''),
  // 入参列表，数组
  bizParams: [ BizParam ](name='biz_params', example=''),
}

// ETC行程信息
model EtcTripInfo {
  // 发行方扣款订单号
  outOrderId?: string(name='out_order_id', example='56789123456'),
  // 行程开始时间
  tripStartTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='trip_start_time', example='2018-10-10T10:10:00Z'),
  // 行程结束时间
  tripEndTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='trip_end_time', example='2018-10-10T10:10:00Z'),
  // 1、收费站入口名称 2、格式为省份+收费站名，比如“黑龙江瓦盆窑西站”
  startStationName?: string(name='start_station_name', example='黑龙江瓦盆窑西站'),
  // 1、收费站出口名称 2、格式为省份+收费站名，比如“黑龙江瓦盆窑西站”
  endStationName?: string(name='end_station_name', example='黑龙江瓦盆窑西站'),
  // HIGHWAY_TYPE：高速交易场景类型，对应具体交易场景[ETC_HIGHWAY,ETC_HIGHWAY_OPEN] EXPAND_TYPE：拓展消费交易类型，对应具体交易场景 [ETC_PARKING,ETC_GAS,ETC_SERVICE_AREA,ETC_MUNICIPAL_SERVICE]
  subType?: string(name='sub_type', example='HIGHWAY_TYPE'),
  // ETC_HIGHWAY：ETC封闭式高速公路； ETC_HIGHWAY_OPEN：ETC开放式高速公路； ETC_PARKING：ETC停车场； ETC_GAS：ETC加油站； ETC_SERVICE_AREA：ETC服务区； ETC_MUNICIPAL_SERVICE：ETC市政服务
  subScene?: string(name='sub_scene', example='ETC_HIGHWAY'),
  // 商户扣费的总金额：单位为元，精确到小数点后两位
  totalAmount?: string(name='total_amount', example='4.50'),
  // 行程id
  tripId?: string(name='trip_id', example='230390390303'),
  // 交易单号
  tradeNo?: string(name='trade_no', example='20230916988938938393'),
}

// 两轮车一体机营销活动信息
model SimCampaignInfo {
  // 营销活动id
  campaignId: string(name='campaign_id', example=' '),
  // 营销活动名
  campaignName: string(name='campaign_name', example=' '),
  // 营销图片
  imageUrl: string(name='image_url', example=' '),
  // 营销活动内容
  content: string(name='content', example='{}'),
}

model RunGeneralRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务请求数据，json格式
  request: string(name='request'),
  // 要调用的具体的服务名称
  serviceName: string(name='service_name'),
  // 扩展信息
  extInfo?: string(name='ext_info'),
}

model RunGeneralResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务响应数据，json格式
  response?: string(name='response'),
}

/**
 * Description: 安全科技网关通用运行接口
 * Summary: 安全科技网关通用运行接口
 */
async function runGeneral(request: RunGeneralRequest): RunGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return runGeneralEx(request, headers, runtime);
}

/**
 * Description: 安全科技网关通用运行接口
 * Summary: 安全科技网关通用运行接口
 */
async function runGeneralEx(request: RunGeneralRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RunGeneralResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.general.run', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecEkytInsureRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 保险信息list的jsonStr
  insureInfoListStr: string(name='insure_info_list_str'),
  // 对insure_info_list_str的签名
  signature: string(name='signature'),
}

model ExecEkytInsureResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 投保结果list的jsonStr
  data?: string(name='data'),
}

/**
 * Description: 租赁住房保险产品，开放接口
调用方：上海远点网络科技有限公司
 * Summary: 租赁住房保险产品，接口开放给租房平台
 */
async function execEkytInsure(request: ExecEkytInsureRequest): ExecEkytInsureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execEkytInsureEx(request, headers, runtime);
}

/**
 * Description: 租赁住房保险产品，开放接口
调用方：上海远点网络科技有限公司
 * Summary: 租赁住房保险产品，接口开放给租房平台
 */
async function execEkytInsureEx(request: ExecEkytInsureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecEkytInsureResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.ekyt.insure.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDcpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求ID，为32位以内的字母数字组合，由调用方自行生成、保证唯一并留存，以便问题定位。
  outerOrderNo: string(name='outer_order_no'),
  // 扩展信息，预留字段
  externParam?: string(name='extern_param'),
}

model ListDcpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求方租户所关联的所有入驻的车队企业信息列表
  dcpInfoList?: [ DcpInfo ](name='dcp_info_list'),
  // json格式字符串扩展信息，预留字段。
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 获取EKYT平台入驻的车队信息列表
 * Summary: 获取EKYT平台入驻的车队信息列表
 */
async function listDcp(request: ListDcpRequest): ListDcpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDcpEx(request, headers, runtime);
}

/**
 * Description: 获取EKYT平台入驻的车队信息列表
 * Summary: 获取EKYT平台入驻的车队信息列表
 */
async function listDcpEx(request: ListDcpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDcpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.dcp.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDcpAccountbookRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求ID，为32位以内的字母数字组合，由调用方自行生成、保证唯一并留存，以便问题定位。
  outerOrderNo: string(name='outer_order_no'),
  // 企业入驻租户ID
  dcpTenantId: string(name='dcp_tenant_id'),
  // 扩展信息，预留字段
  externParam?: string(name='extern_param'),
}

model ListDcpAccountbookResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求车队企业关联的所有司机签约信息列表
  signInfoList?: [ SignInfo ](name='sign_info_list'),
  // json格式字符串扩展信息，预留字段。
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 获取EKYT平台入驻的司机灵工卡信息列表
 * Summary: 获取EKYT平台入驻的司机灵工卡信息列表
 */
async function listDcpAccountbook(request: ListDcpAccountbookRequest): ListDcpAccountbookResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDcpAccountbookEx(request, headers, runtime);
}

/**
 * Description: 获取EKYT平台入驻的司机灵工卡信息列表
 * Summary: 获取EKYT平台入驻的司机灵工卡信息列表
 */
async function listDcpAccountbookEx(request: ListDcpAccountbookRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDcpAccountbookResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.dcp.accountbook.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEtcVehicleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求ID，为32位以内的字母数字组合，由调用方自行生成、保证唯一并留存，以便问题定位。
  outerOrderNo: string(name='outer_order_no'),
  // 企业侧车辆编号
  corpVehicleId: string(name='corp_vehicle_id'),
  // 车牌号码
  plateNo: string(name='plate_no'),
  // 车牌颜色，枚举值
  // 蓝: BLUE
  // 黄: YELLOW
  // 黑: BLACK
  // 白: WHITE
  // 绿: GREEN
  plateColor: string(name='plate_color'),
  // 企业运单号，唯一值
  waybillNo?: string(name='waybill_no'),
}

model QueryEtcVehicleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求方租户所关联的车辆入驻信息
  etcVehicle?: EtcVehicleInfo(name='etc_vehicle'),
  // json格式字符串扩展信息，预留字段。
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 企业ETC入驻车辆查询
 * Summary: 企业ETC入驻车辆查询
 */
async function queryEtcVehicle(request: QueryEtcVehicleRequest): QueryEtcVehicleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEtcVehicleEx(request, headers, runtime);
}

/**
 * Description: 企业ETC入驻车辆查询
 * Summary: 企业ETC入驻车辆查询
 */
async function queryEtcVehicleEx(request: QueryEtcVehicleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEtcVehicleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.etc.vehicle.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadEtcWaybillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求ID，为32位以内的字母数字组合，由调用方自行生成、保证唯一并留存，以便问题定位。
  outerOrderNo: string(name='outer_order_no'),
  // 企业侧车辆编号
  corpVehicleId: string(name='corp_vehicle_id'),
  // 车牌号码
  plateNo: string(name='plate_no'),
  // 车牌颜色，枚举值
  // 蓝: BLUE
  // 黄: YELLOW
  // 黑: BLACK
  // 白: WHITE
  // 绿: GREEN
  plateColor: string(name='plate_color'),
  // 企业运单号，唯一值
  waybillNo: string(name='waybill_no'),
  // 企业运单状态，枚举值
  // 进行中: IN_PROGRESS
  // 已完成: COMPLETED
  // 已取消: CANCELED
  waybillStatus: string(name='waybill_status'),
  // 运单开始时间
  // 【必选条件】当传入waybill_status，且waybill_status= IN_PROGRESS时必选
  waybillStartTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='waybill_start_time'),
  // 企业运单结束时间
  // 【必选条件】当传入waybill_status，且waybill_status=COMPLETED时必选
  waybillEndTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='waybill_end_time'),
  // 运单开始地址
  // 【必选条件】当传入waybill_status，且waybill_status= IN_PROGRESS时必选
  waybillStartAddress?: string(name='waybill_start_address'),
  // 运单结束地址，运单目的地
  // 【必选条件】当传入waybill_status，且waybill_status=COMPLETED时必选
  waybillEndAddress?: string(name='waybill_end_address'),
  // 运单总费用，单位元，精确到两位小数
  // 【必选条件】当传入waybill_status，且waybill_status=COMPLETED时必选
  waybillFee?: string(name='waybill_fee'),
  // 高速通行费用，单位元，精确到两位小数
  highwayFee?: string(name='highway_fee'),
}

model UploadEtcWaybillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 运单记录号
  bizId?: string(name='biz_id'),
  // json格式字符串扩展信息，预留字段。
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 企业ETC运单上传
 * Summary: 企业ETC运单上传
 */
async function uploadEtcWaybill(request: UploadEtcWaybillRequest): UploadEtcWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadEtcWaybillEx(request, headers, runtime);
}

/**
 * Description: 企业ETC运单上传
 * Summary: 企业ETC运单上传
 */
async function uploadEtcWaybillEx(request: UploadEtcWaybillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadEtcWaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.etc.waybill.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEtcTripRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求ID，为32位以内的字母数字组合，由调用方自行生成、保证唯一并留存，以便问题定位。
  outerOrderNo: string(name='outer_order_no'),
  // 企业侧车辆编号
  corpVehicleId: string(name='corp_vehicle_id'),
  // 车牌号码
  plateNo: string(name='plate_no'),
  // 车牌颜色，蓝: BLUE 黄: YELLOW 黑: BLACK 白: WHITE 绿: GREEN
  plateColor: string(name='plate_color'),
  // 企业运单号，唯一值
  waybillNo: string(name='waybill_no'),
  // 当前页码
  // 【必选条件】当需要进行按时间段（跨度不超过2天）筛选时需要传入，不传入时默认至多返回最新20条数据
  pageNum?: long(name='page_num'),
  // 每页数据条数
  // 【必选条件】当需要进行按时间段（跨度不超过2天）筛选时需要传入，不传入时默认至多返回最新20条数据
  pageSize?: long(name='page_size'),
  // 行程查询开始时间
  // 【必选条件】当需要进行按时间段（跨度不超过2天）筛选时需要传入，不传入时默认至多返回最新20条数据
  startTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_time'),
  // 行程查询结束时间
  // 【必选条件】当需要进行按时间段（跨度不超过2天）筛选时需要传入，不传入时默认至多返回最新20条数据
  // 
  endTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='end_time'),
}

model QueryEtcTripResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总页数
  totalPage?: long(name='total_page'),
  // 总记录数
  totalSize?: long(name='total_size'),
  // 当前页码
  // 
  pageNum?: long(name='page_num'),
  // 每页条数
  pageSize?: long(name='page_size'),
  // 是否还有下一页
  hasNext?: boolean(name='has_next'),
  // 请求方租户所关联的行程单据列表
  tripList?: [ EtcTripInfo ](name='trip_list'),
  // json格式字符串扩展信息，预留字段。
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 企业ETC车辆行程查询
 * Summary: 企业ETC车辆行程查询
 */
async function queryEtcTrip(request: QueryEtcTripRequest): QueryEtcTripResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEtcTripEx(request, headers, runtime);
}

/**
 * Description: 企业ETC车辆行程查询
 * Summary: 企业ETC车辆行程查询
 */
async function queryEtcTripEx(request: QueryEtcTripRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEtcTripResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.etc.trip.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitSimLoginRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备编号
  deviceId: string(name='device_id'),
}

model InitSimLoginResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 支付宝登录url
  url?: string(name='url'),
  // 登录token
  token?: string(name='token'),
}

/**
 * Description: 两轮车一体机获取授权登录地址
 * Summary: 两轮车一体机获取授权登录地址
 */
async function initSimLogin(request: InitSimLoginRequest): InitSimLoginResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initSimLoginEx(request, headers, runtime);
}

/**
 * Description: 两轮车一体机获取授权登录地址
 * Summary: 两轮车一体机获取授权登录地址
 */
async function initSimLoginEx(request: InitSimLoginRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitSimLoginResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.sim.login.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySimLoginRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备编号
  deviceId: string(name='device_id'),
  // 登录态token
  token?: string(name='token'),
}

model QuerySimLoginResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 登录结果
  // NO_RESULT：暂无登录结果
  // EXPIRED：token过期
  // ACTIVATE_OK：激活成功，店长首次登录成功
  // LOGIN_OK：登录成功
  // USER_NOT_EXIST：用户不存在
  // STORE_NOT_ACTIVATED：门店未激活
  loginResult?: string(name='login_result'),
  // 登录结果中文信息
  loginMsg?: string(name='login_msg'),
  // 是否已经激活
  activated?: boolean(name='activated'),
  // 激活时间，格式yyyy-MM-dd HH:mm:ss
  activateTime?: string(name='activate_time'),
  // 登录/激活时间，格式yyyy-MM-dd HH:mm:ss
  loginTime?: string(name='login_time'),
  // 当前登录的门店信息
  storeInfo?: SimStoreInfo(name='store_info'),
  // 当前登录的销售信息
  salesInfo?: SimSalesInfo(name='sales_info'),
}

/**
 * Description: 两轮车一体机查询登录结果
 * Summary: 两轮车一体机查询登录结果
 */
async function querySimLogin(request: QuerySimLoginRequest): QuerySimLoginResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySimLoginEx(request, headers, runtime);
}

/**
 * Description: 两轮车一体机查询登录结果
 * Summary: 两轮车一体机查询登录结果
 */
async function querySimLoginEx(request: QuerySimLoginRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySimLoginResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.sim.login.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSimCampaignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备编号
  deviceId: string(name='device_id'),
}

model ListSimCampaignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 营销活动列表
  campaignList?: [ SimCampaignInfo ](name='campaign_list'),
}

/**
 * Description: 两轮车一体机获取营销活动
 * Summary: 两轮车一体机获取营销活动
 */
async function listSimCampaign(request: ListSimCampaignRequest): ListSimCampaignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSimCampaignEx(request, headers, runtime);
}

/**
 * Description: 两轮车一体机获取营销活动
 * Summary: 两轮车一体机获取营销活动
 */
async function listSimCampaignEx(request: ListSimCampaignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSimCampaignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.sim.campaign.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySimSkuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备编号
  deviceId: string(name='device_id'),
  // 车辆SN，与skuId二选一
  sn?: string(name='sn'),
  // sku对外id列表，与sn二选一
  skuIdList?: [ string ](name='sku_id_list'),
  // 登录态token
  token: string(name='token'),
}

model QuerySimSkuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 车辆SKU，如果查无返回空列表
  skuInfoList?: [ SimSkuInfo ](name='sku_info_list'),
}

/**
 * Description: 两轮车一体机查询车辆SKU
 * Summary: 两轮车一体机查询车辆SKU
 */
async function querySimSku(request: QuerySimSkuRequest): QuerySimSkuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySimSkuEx(request, headers, runtime);
}

/**
 * Description: 两轮车一体机查询车辆SKU
 * Summary: 两轮车一体机查询车辆SKU
 */
async function querySimSkuEx(request: QuerySimSkuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySimSkuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.sim.sku.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSimSkuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备编号
  deviceId: string(name='device_id'),
  // 请求的页数
  pageNo: long(name='page_no'),
  // 单页项数
  pageSize: long(name='page_size'),
  // 登录态token
  token: string(name='token'),
}

model ListSimSkuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页器
  paginator?: Paginator(name='paginator'),
  // 车辆SKU列表
  skuInfoList?: [ SimSkuInfo ](name='sku_info_list'),
}

/**
 * Description: 两轮车一体机列举车辆SKU
 * Summary: 两轮车一体机列举车辆SKU
 */
async function listSimSku(request: ListSimSkuRequest): ListSimSkuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSimSkuEx(request, headers, runtime);
}

/**
 * Description: 两轮车一体机列举车辆SKU
 * Summary: 两轮车一体机列举车辆SKU
 */
async function listSimSkuEx(request: ListSimSkuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSimSkuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.sim.sku.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSimOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备编号
  deviceId: string(name='device_id'),
  // sku id
  skuId: string(name='sku_id'),
  // 车辆sn号
  sn?: string(name='sn'),
  // 颜色
  color: string(name='color'),
  // 登录态token
  token: string(name='token'),
}

model CreateSimOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单号
  orderId?: string(name='order_id'),
  // 支付宝小程序链接
  miniappLink?: string(name='miniapp_link'),
}

/**
 * Description: 两轮车一体机创建订单信息
 * Summary: 两轮车一体机创建订单信息
 */
async function createSimOrder(request: CreateSimOrderRequest): CreateSimOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSimOrderEx(request, headers, runtime);
}

/**
 * Description: 两轮车一体机创建订单信息
 * Summary: 两轮车一体机创建订单信息
 */
async function createSimOrderEx(request: CreateSimOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSimOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.sim.order.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySimOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备编号
  deviceId: string(name='device_id'),
  // 订单号
  orderId: string(name='order_id'),
  // 登录态token
  token: string(name='token'),
}

model QuerySimOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单信息，如果查无返回空对象
  orderInfo?: SimOrderInfo(name='order_info'),
  // 小程序链接
  miniappLink?: string(name='miniapp_link'),
}

/**
 * Description: 两轮车一体机查询订单信息
 * Summary: 两轮车一体机查询订单信息
 */
async function querySimOrder(request: QuerySimOrderRequest): QuerySimOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySimOrderEx(request, headers, runtime);
}

/**
 * Description: 两轮车一体机查询订单信息
 * Summary: 两轮车一体机查询订单信息
 */
async function querySimOrderEx(request: QuerySimOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySimOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.sim.order.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSimOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备编号
  deviceId: string(name='device_id'),
  // 请求的页数
  pageNo: long(name='page_no'),
  // 单页项数
  pageSize: long(name='page_size'),
  // 登录态token
  token: string(name='token'),
}

model ListSimOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页器
  paginator?: Paginator(name='paginator'),
  // 订单信息列表
  orderInfoList?: [ SimOrderInfo ](name='order_info_list'),
}

/**
 * Description: 两轮车一体机列举订单信息
 * Summary: 两轮车一体机列举订单信息
 */
async function listSimOrder(request: ListSimOrderRequest): ListSimOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSimOrderEx(request, headers, runtime);
}

/**
 * Description: 两轮车一体机列举订单信息
 * Summary: 两轮车一体机列举订单信息
 */
async function listSimOrderEx(request: ListSimOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSimOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.sim.order.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelSimOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备编号
  deviceId: string(name='device_id'),
  // 订单号
  orderId: string(name='order_id'),
  // 登录态token
  token: string(name='token'),
}

model CancelSimOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否取消成功
  success?: boolean(name='success'),
  // 更新后订单信息，如果查无返回空对象
  orderInfo?: SimOrderInfo(name='order_info'),
}

/**
 * Description: 两轮车一体机取消订单信息
 * Summary: 两轮车一体机取消订单信息
 */
async function cancelSimOrder(request: CancelSimOrderRequest): CancelSimOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelSimOrderEx(request, headers, runtime);
}

/**
 * Description: 两轮车一体机取消订单信息
 * Summary: 两轮车一体机取消订单信息
 */
async function cancelSimOrderEx(request: CancelSimOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelSimOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.sim.order.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PullSimSkuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求的页数
  pageNo: long(name='page_no'),
  // 单页项数
  pageSize: long(name='page_size'),
}

model PullSimSkuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页器
  paginator?: Paginator(name='paginator'),
  // 车辆SKU列表
  skuInfoList?: [ SimSkuInfo ](name='sku_info_list'),
}

/**
 * Description: 两轮车一体机拉取车辆SKU
 * Summary: 两轮车一体机拉取车辆SKU
 */
async function pullSimSku(request: PullSimSkuRequest): PullSimSkuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pullSimSkuEx(request, headers, runtime);
}

/**
 * Description: 两轮车一体机拉取车辆SKU
 * Summary: 两轮车一体机拉取车辆SKU
 */
async function pullSimSkuEx(request: PullSimSkuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PullSimSkuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.sim.sku.pull', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmSimOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备id
  deviceId: string(name='device_id'),
  // 订单号
  orderId: string(name='order_id'),
  // 登录态token
  token: string(name='token'),
}

model ConfirmSimOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 一体机购车订单支付确认请求
 * Summary: 一体机购车订单支付确认请求
 */
async function confirmSimOrder(request: ConfirmSimOrderRequest): ConfirmSimOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmSimOrderEx(request, headers, runtime);
}

/**
 * Description: 一体机购车订单支付确认请求
 * Summary: 一体机购车订单支付确认请求
 */
async function confirmSimOrderEx(request: ConfirmSimOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmSimOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.sim.order.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBssecpicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName?: string(name='app_name'),
  // 客户名
  clientName: string(name='client_name'),
  // 操作系统
  osType: string(name='os_type'),
  // 包名
  packageName: string(name='package_name'),
  // 签名信息
  certSign?: string(name='cert_sign'),
  // 签名秘钥内容
  appKeyData?: string(name='app_key_data'),
  // 加密秘钥内容
  securityData?: string(name='security_data'),
  // 自定义秘钥内容
  extraData?: string(name='extra_data'),
  // 白盒秘钥内容
  whiteBoxData?: string(name='white_box_data'),
}

model CreateBssecpicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 返回文件名
  fileName?: string(name='file_name'),
  // 返回文件的内容base64
  bodyBase64?: string(name='body_base64'),
}

/**
 * Description: 蓝盾安全图片生成
 * Summary: 蓝盾安全图片生成
 */
async function createBssecpic(request: CreateBssecpicRequest): CreateBssecpicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBssecpicEx(request, headers, runtime);
}

/**
 * Description: 蓝盾安全图片生成
 * Summary: 蓝盾安全图片生成
 */
async function createBssecpicEx(request: CreateBssecpicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBssecpicResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.bssecpic.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBlueshieldSecuritypictureRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName?: string(name='app_name'),
  // 客户名
  clientName: string(name='client_name'),
  // 操作系统
  osType: string(name='os_type'),
  // 包名
  packageName: string(name='package_name'),
  // 签名信息
  certSign?: string(name='cert_sign'),
  // 签名秘钥内容
  appKeyData?: string(name='app_key_data'),
  // 加密秘钥内容
  securityData?: string(name='security_data'),
  // 自定义秘钥内容
  extraData?: string(name='extra_data'),
  // 白盒秘钥内容
  whiteBoxData?: string(name='white_box_data'),
  // raas产品码列表
  raasProducts: string(name='raas_products'),
  // 直接透传的二级租户，可选
  raasSecondTenant?: string(name='raas_second_tenant'),
}

model CreateBlueshieldSecuritypictureResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 执行是否成功
  success?: boolean(name='success'),
  // 生成的图片文件名
  fileName?: string(name='file_name'),
  // body base 64
  bodyBase64?: string(name='body_base64'),
}

/**
 * Description: 蓝盾安全图片生成
 * Summary: 蓝盾安全图片生成
 */
async function createBlueshieldSecuritypicture(request: CreateBlueshieldSecuritypictureRequest): CreateBlueshieldSecuritypictureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBlueshieldSecuritypictureEx(request, headers, runtime);
}

/**
 * Description: 蓝盾安全图片生成
 * Summary: 蓝盾安全图片生成
 */
async function createBlueshieldSecuritypictureEx(request: CreateBlueshieldSecuritypictureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBlueshieldSecuritypictureResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.blueshield.securitypicture.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFaceshieldNativeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 客户id，标识客户来源
  clientId: string(name='client_id'),
  // 设备token
  apdidToken?: string(name='apdid_token'),
  // 切面数据（JSON，详见下方）
  // {
  // 	"sessionId": "zimId"	//人脸的bizID
  //   "rId": "rId"	//在获取活体方法人脸下发的bisToken
  //   "keyInfoHash": "keyInfoHash"	//关键信息hash
  //   "pictureHash": "人脸图片的hash"	//解密出来的人脸图片做hash
  //   "rData": "xxx"	//客户端在zimInit和zimValidate带上去的业务风险数据
  // }
  aopData?: string(name='aop_data'),
  // 否（和切面二选一即可）
  signature?: string(name='signature'),
  // 签名因子（和切面二选一即可）
  signFactor?: string(name='sign_factor'),
  // RaaS租户
  raasProducts: string(name='raas_products'),
  // raas二级租户
  raasSecondTenant?: string(name='raas_second_tenant'),
}

model QueryFaceshieldNativeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true成功，false失败
  success?: boolean(name='success'),
  // 请求码，200成功，其他失败，具体见错误码
  code?: long(name='code'),
  // 错误时的返回信息
  message?: string(name='message'),
  // 请求时传入的，若没有传，则系统自动生成
  requestId?: string(name='request_id'),
  // apdidToken	String	设备token
  // riskLevel	String	风险等级，-1参数异常，0无风险，1-3表示低、中、高
  // riskDesc	String	风险描述，对风险等级的补充
  // sugAction	String	处理的建议，如PAAS
  data?: FaceShieldResult(name='data'),
}

/**
 * Description: 终端安全人脸盾Native查询
 * Summary: 人脸盾Native查询
 */
async function queryFaceshieldNative(request: QueryFaceshieldNativeRequest): QueryFaceshieldNativeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFaceshieldNativeEx(request, headers, runtime);
}

/**
 * Description: 终端安全人脸盾Native查询
 * Summary: 人脸盾Native查询
 */
async function queryFaceshieldNativeEx(request: QueryFaceshieldNativeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFaceshieldNativeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.faceshield.native.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFaceshieldWebRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 客户id，标识客户来源
  clientId: string(name='client_id'),
  // 设备token
  apdidToken?: string(name='apdid_token'),
  // 切面数据（JSON，详见下方）
  aopData?: string(name='aop_data'),
  // RaaS租户
  // 
  raasProducts: string(name='raas_products'),
  // raas二级租户
  // 
  raasSecondTenant?: string(name='raas_second_tenant'),
}

model QueryFaceshieldWebResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true成功，false失败	
  // 
  success?: boolean(name='success'),
  // 请求码，200成功，其他失败，具体见错误码
  // 
  code?: long(name='code'),
  // 错误时的返回信息
  // 
  message?: string(name='message'),
  // 请求时传入的，若没有传，则系统自动生成
  // 
  requestId?: string(name='request_id'),
  // apdidToken String 设备token riskLevel String 风险等级，-1参数异常，0无风险，1-3表示低、中、高 riskDesc String 风险描述，对风险等级的补充 sugAction String 处理的建议，如PAAS
  data?: FaceShieldResult(name='data'),
}

/**
 * Description: 终端安全人脸盾Web查询
 * Summary: 人脸盾Web查询
 */
async function queryFaceshieldWeb(request: QueryFaceshieldWebRequest): QueryFaceshieldWebResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFaceshieldWebEx(request, headers, runtime);
}

/**
 * Description: 终端安全人脸盾Web查询
 * Summary: 人脸盾Web查询
 */
async function queryFaceshieldWebEx(request: QueryFaceshieldWebRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFaceshieldWebResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.faceshield.web.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitIifaaDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 产商code
  corpCode: string(name='corp_code'),
  // 设备类型
  deviceType: string(name='device_type'),
  // 设备信息
  deviceInfo: string(name='device_info'),
  // 产品code
  productCode: string(name='product_code'),
  // 用于加密回传数据的公钥
  pubKey?: string(name='pub_key'),
}

model InitIifaaDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回数据
  data?: string(name='data'),
}

/**
 * Description: 设备激活
 * Summary: 可信设备认证设备初始化，设备激活
 */
async function initIifaaDevice(request: InitIifaaDeviceRequest): InitIifaaDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initIifaaDeviceEx(request, headers, runtime);
}

/**
 * Description: 设备激活
 * Summary: 可信设备认证设备初始化，设备激活
 */
async function initIifaaDeviceEx(request: InitIifaaDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitIifaaDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.iifaa.device.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RecognizeIifaaDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备唯一ID
  tuid: string(name='tuid'),
}

model RecognizeIifaaDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回数据内容
  data?: string(name='data'),
}

/**
 * Description: 可信设备认证风险咨询，获取预认证数据
 * Summary: 可信设备认证风险咨询，获取预认证数据
 */
async function recognizeIifaaDevice(request: RecognizeIifaaDeviceRequest): RecognizeIifaaDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return recognizeIifaaDeviceEx(request, headers, runtime);
}

/**
 * Description: 可信设备认证风险咨询，获取预认证数据
 * Summary: 可信设备认证风险咨询，获取预认证数据
 */
async function recognizeIifaaDeviceEx(request: RecognizeIifaaDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RecognizeIifaaDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.iifaa.device.recognize', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyIifaaDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 待验证的数据
  cipherText: string(name='cipher_text'),
}

model VerifyIifaaDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 验证结果
  data?: string(name='data'),
}

/**
 * Description: 可信设备认证，设备验证
 * Summary: 可信设备认证，设备验证
 */
async function verifyIifaaDevice(request: VerifyIifaaDeviceRequest): VerifyIifaaDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyIifaaDeviceEx(request, headers, runtime);
}

/**
 * Description: 可信设备认证，设备验证
 * Summary: 可信设备认证，设备验证
 */
async function verifyIifaaDeviceEx(request: VerifyIifaaDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyIifaaDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.iifaa.device.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RegisterIifaaCorpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 产商code
  corpCode: string(name='corp_code'),
  // 产商名称
  corpName: string(name='corp_name'),
  // 产商签约code
  productCode: string(name='product_code'),
}

model RegisterIifaaCorpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 产商注册结果
  data?: string(name='data'),
}

/**
 * Description: 可信设备认证，产商注册
 * Summary: 可信设备认证，产商注册
 */
async function registerIifaaCorp(request: RegisterIifaaCorpRequest): RegisterIifaaCorpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return registerIifaaCorpEx(request, headers, runtime);
}

/**
 * Description: 可信设备认证，产商注册
 * Summary: 可信设备认证，产商注册
 */
async function registerIifaaCorpEx(request: RegisterIifaaCorpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RegisterIifaaCorpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.iifaa.corp.register', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeprecateIifaaDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备唯一ID
  tuid: string(name='tuid'),
}

model DeprecateIifaaDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备擦除结果
  data?: string(name='data'),
}

/**
 * Description: 可信设备认证，擦除设备信息
 * Summary: 可信设备认证，擦除设备信息
 */
async function deprecateIifaaDevice(request: DeprecateIifaaDeviceRequest): DeprecateIifaaDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deprecateIifaaDeviceEx(request, headers, runtime);
}

/**
 * Description: 可信设备认证，擦除设备信息
 * Summary: 可信设备认证，擦除设备信息
 */
async function deprecateIifaaDeviceEx(request: DeprecateIifaaDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeprecateIifaaDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.iifaa.device.deprecate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RunXhunterSpiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // json
  request: string(name='request'),
  // XHUNTER_ISV_STANDARD
  serviceName: string(name='service_name'),
  // json
  extInfo?: string(name='ext_info'),
  // raas_products
  raasProducts: string(name='raas_products'),
}

model RunXhunterSpiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // response
  response?: string(name='response'),
}

/**
 * Description: 巡检商业化
 * Summary: 巡检商业化
 */
async function runXhunterSpi(request: RunXhunterSpiRequest): RunXhunterSpiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return runXhunterSpiEx(request, headers, runtime);
}

/**
 * Description: 巡检商业化
 * Summary: 巡检商业化
 */
async function runXhunterSpiEx(request: RunXhunterSpiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RunXhunterSpiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.xhunter.spi.run', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecIifaaInsureRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 保险信息list的jsonStr
  insureInfoListStr: string(name='insure_info_list_str'),
  // 对insure_info_list_str的签名，使用十六进制字符串编码
  signature: string(name='signature'),
}

model ExecIifaaInsureResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 投保结果list的jsonStr
  data?: string(name='data'),
}

/**
 * Description: 租凭住房保险产品，接口开放给租房平台
 * Summary: 租凭住房保险产品，接口开放给租房平台
 */
async function execIifaaInsure(request: ExecIifaaInsureRequest): ExecIifaaInsureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execIifaaInsureEx(request, headers, runtime);
}

/**
 * Description: 租凭住房保险产品，接口开放给租房平台
 * Summary: 租凭住房保险产品，接口开放给租房平台
 */
async function execIifaaInsureEx(request: ExecIifaaInsureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecIifaaInsureResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.iifaa.insure.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCctPictureRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // InfoSecAnalyzeSyncContent json
  request: string(name='request'),
  // RaaS产品码
  raasProducts: string(name='raas_products'),
}

model QueryCctPictureResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // InfoSecAnalyzeSyncContent json
  response?: string(name='response'),
}

/**
 * Description: 内容安全图片同步检测
 * Summary: 内容安全图片同步检测
 */
async function queryCctPicture(request: QueryCctPictureRequest): QueryCctPictureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCctPictureEx(request, headers, runtime);
}

/**
 * Description: 内容安全图片同步检测
 * Summary: 内容安全图片同步检测
 */
async function queryCctPictureEx(request: QueryCctPictureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCctPictureResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.cct.picture.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RecognizeCctAnalyzeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // channel
  channel: string(name='channel'),
  // content_type
  contentType: string(name='content_type'),
  // user_id
  userId: string(name='user_id'),
  // request_id
  requestId: string(name='request_id'),
  // data_map
  dataMap: CctDataMap(name='data_map'),
}

model RecognizeCctAnalyzeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // biz_request_id
  bizRequestId?: string(name='biz_request_id'),
  // suggestion
  suggestion?: string(name='suggestion'),
  // detect_labels
  detectLabels?: [ CctDetectCheckLabel ](name='detect_labels'),
}

/**
 * Description: 内容安全主站同步检测
 * Summary: 内容安全主站同步检测
 */
async function recognizeCctAnalyze(request: RecognizeCctAnalyzeRequest): RecognizeCctAnalyzeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return recognizeCctAnalyzeEx(request, headers, runtime);
}

/**
 * Description: 内容安全主站同步检测
 * Summary: 内容安全主站同步检测
 */
async function recognizeCctAnalyzeEx(request: RecognizeCctAnalyzeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RecognizeCctAnalyzeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.cct.analyze.recognize', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRiskGeneralRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // x
  dataCode: string(name='data_code'),
  // AES加密使用的随机数，对该随机数使用RaaS数据服务的公钥进行加密，随后传入；
  encryptedNonce: string(name='encrypted_nonce'),
  // ISV的终端客户编码、征信机构的终端客户编码、公司内部部门ID，可以定制数据输出。
  customerId?: string(name='customer_id'),
  // 业务请求入参，兼容批量调用
  bizQueryParams: [ BizQueryParam ](name='biz_query_params'),
  // 拓展输入字段,
  extData?: string(name='ext_data'),
  // 用于标记是否获得用户授权。
  // 1:获得授权（默认）
  // 0:未获得授权
  userAuthorization: string(name='user_authorization'),
  // 默认AES128，后续可选SM2等国密
  encryptMethod?: string(name='encrypt_method'),
  // 整个包体加密，二选一
  encryptedBody?: string(name='encrypted_body'),
  // hash_type
  hashType?: string(name='hash_type'),
}

model QueryRiskGeneralResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否计费
  meter?: boolean(name='meter'),
  // 批量调用情况下的计费数量
  meterCount?: long(name='meter_count'),
  // 风险咨询结果的批量查询结果
  resultList?: [ ResultList ](name='result_list'),
  // 拓展输出字段
  extData?: string(name='ext_data'),
  // 是否查得
  found?: boolean(name='found'),
}

/**
 * Description: RAAS数据服务统一接口
 * Summary: RAAS数据服务统一接口
 */
async function queryRiskGeneral(request: QueryRiskGeneralRequest): QueryRiskGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRiskGeneralEx(request, headers, runtime);
}

/**
 * Description: RAAS数据服务统一接口
 * Summary: RAAS数据服务统一接口
 */
async function queryRiskGeneralEx(request: QueryRiskGeneralRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRiskGeneralResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.risk.general.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceriskFingerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // apdid_token
  apdidToken: string(name='apdid_token'),
  // client_id
  clientId?: string(name='client_id'),
  // terminal_type
  terminalType?: string(name='terminal_type'),
}

model QueryDeviceriskFingerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // code
  code?: long(name='code'),
  // message
  message?: string(name='message'),
  // request_id
  requestId?: string(name='request_id'),
  // success
  success?: boolean(name='success'),
  // data
  data?: DeviceRiskResp(name='data'),
}

/**
 * Description: 设备指纹查询
 * Summary: 设备指纹查询
 */
async function queryDeviceriskFinger(request: QueryDeviceriskFingerRequest): QueryDeviceriskFingerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceriskFingerEx(request, headers, runtime);
}

/**
 * Description: 设备指纹查询
 * Summary: 设备指纹查询
 */
async function queryDeviceriskFingerEx(request: QueryDeviceriskFingerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceriskFingerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.devicerisk.finger.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceriskRisklabelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // apdid_token
  apdidToken: string(name='apdid_token'),
  // client_id	
  clientId?: string(name='client_id'),
  // terminal_type
  terminalType?: string(name='terminal_type'),
}

model QueryDeviceriskRisklabelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // code
  code?: long(name='code'),
  // message
  message?: string(name='message'),
  // request_id
  requestId?: string(name='request_id'),
  // success
  success?: boolean(name='success'),
  // data
  data?: DeviceRiskResp(name='data'),
}

/**
 * Description: 风险标签查询
 * Summary: 风险标签查询
 */
async function queryDeviceriskRisklabel(request: QueryDeviceriskRisklabelRequest): QueryDeviceriskRisklabelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceriskRisklabelEx(request, headers, runtime);
}

/**
 * Description: 风险标签查询
 * Summary: 风险标签查询
 */
async function queryDeviceriskRisklabelEx(request: QueryDeviceriskRisklabelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceriskRisklabelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.devicerisk.risklabel.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceriskDeviceriskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // apdid_token
  apdidToken: string(name='apdid_token'),
  // client_id
  clientId?: string(name='client_id'),
  // app_id
  appId?: string(name='app_id'),
  // env_id
  envId?: string(name='env_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // merchant_id
  merchantId?: string(name='merchant_id'),
  // app_name
  appName?: string(name='app_name'),
  // terminal_type
  terminalType?: string(name='terminal_type'),
}

model QueryDeviceriskDeviceriskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // code
  code?: long(name='code'),
  // message
  message?: string(name='message'),
  // request_id
  requestId?: string(name='request_id'),
  // success
  success?: boolean(name='success'),
  // data
  data?: DeviceRiskResp(name='data'),
}

/**
 * Description: 设备风险查询
 * Summary: 设备风险查询
 */
async function queryDeviceriskDevicerisk(request: QueryDeviceriskDeviceriskRequest): QueryDeviceriskDeviceriskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceriskDeviceriskEx(request, headers, runtime);
}

/**
 * Description: 设备风险查询
 * Summary: 设备风险查询
 */
async function queryDeviceriskDeviceriskEx(request: QueryDeviceriskDeviceriskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceriskDeviceriskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.devicerisk.devicerisk.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitDeviceriskReportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // request_data
  requestData: string(name='request_data'),
}

model SubmitDeviceriskReportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // success
  success?: boolean(name='success'),
  // apdid
  apdid?: string(name='apdid'),
  // token
  token?: string(name='token'),
  // current_time
  currentTime?: string(name='current_time'),
  // version
  version?: string(name='version'),
  // vkey_switch
  vkeySwitch?: string(name='vkey_switch'),
  // bug_track_switch
  bugTrackSwitch?: string(name='bug_track_switch'),
  // app_list_ver
  appListVer?: string(name='app_list_ver'),
  // dynamic_key
  dynamicKey?: string(name='dynamic_key'),
  // result_data
  resultData?: DeviceRiskReportResultData(name='result_data'),
}

/**
 * Description: 设备信息上报
 * Summary: 设备信息上报
 */
async function submitDeviceriskReport(request: SubmitDeviceriskReportRequest): SubmitDeviceriskReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitDeviceriskReportEx(request, headers, runtime);
}

/**
 * Description: 设备信息上报
 * Summary: 设备信息上报
 */
async function submitDeviceriskReportEx(request: SubmitDeviceriskReportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitDeviceriskReportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.devicerisk.report.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEkytDriverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 接口请求head
  head: RequestHead(name='head'),
  // 请求业务参数，加密之后的密文信息
  request: string(name='request'),
  // 请求数据签名值
  signature: string(name='signature'),
}

model QueryEkytDriverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 接口响应结果
  success?: boolean(name='success'),
  // 接口响应描述
  message?: string(name='message'),
  // 接口响应数据
  data?: IifaaEkytResponse(name='data'),
}

/**
 * Description: eKYT风险评估服务-出行场景司机
 * Summary: eKYT风险评估服务-出行场景司机
 */
async function queryEkytDriver(request: QueryEkytDriverRequest): QueryEkytDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEkytDriverEx(request, headers, runtime);
}

/**
 * Description: eKYT风险评估服务-出行场景司机
 * Summary: eKYT风险评估服务-出行场景司机
 */
async function queryEkytDriverEx(request: QueryEkytDriverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEkytDriverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.ekyt.driver.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyIifaaDevicekeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求头
  head: RequestHead(name='head'),
  // 业务参数
  request: string(name='request'),
  // 签名
  signature: string(name='signature'),
}

model ApplyIifaaDevicekeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 响应结果
  success?: boolean(name='success'),
  // 结果描述
  message?: string(name='message'),
  // 业务响应结果
  data?: IifaaEkytResponse(name='data'),
}

/**
 * Description: 申请设备设备密钥
 * Summary: 申请设备设备密钥
 */
async function applyIifaaDevicekey(request: ApplyIifaaDevicekeyRequest): ApplyIifaaDevicekeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyIifaaDevicekeyEx(request, headers, runtime);
}

/**
 * Description: 申请设备设备密钥
 * Summary: 申请设备设备密钥
 */
async function applyIifaaDevicekeyEx(request: ApplyIifaaDevicekeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyIifaaDevicekeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.iifaa.devicekey.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceplusRiskqueryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 客户id
  clientId: string(name='client_id'),
  // 场景码
  sceneCode: string(name='scene_code'),
  // 加密电话号码
  phoneNumber: string(name='phone_number'),
  // 电话号码加密类型, 明文: 0; MD5加密: 1; SHA256: 2
  phoneNumberType: string(name='phone_number_type'),
}

model QueryDeviceplusRiskqueryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 返回码
  code?: long(name='code'),
  // 返回信息
  message?: string(name='message'),
  // 供nearx排查的链路业务请求id
  requestId?: string(name='request_id'),
  // 风险咨询信息
  data?: RiskQueryData(name='data'),
}

/**
 * Description: 设备风险咨询
 * Summary: 设备风险咨询
 */
async function queryDeviceplusRiskquery(request: QueryDeviceplusRiskqueryRequest): QueryDeviceplusRiskqueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceplusRiskqueryEx(request, headers, runtime);
}

/**
 * Description: 设备风险咨询
 * Summary: 设备风险咨询
 */
async function queryDeviceplusRiskqueryEx(request: QueryDeviceplusRiskqueryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceplusRiskqueryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.deviceplus.riskquery.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceplusMpaasRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 评分模型id
  modelId: string(name='model_id'),
  // mpaas环境id
  workspaceId: string(name='workspace_id'),
  // mpaas应用id
  appId: string(name='app_id'),
  // 场景码
  sceneCode: string(name='scene_code'),
  // 加密电话号码
  phoneNumber: string(name='phone_number'),
}

model QueryDeviceplusMpaasResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 返回码
  code?: long(name='code'),
  // 返回信息
  message?: string(name='message'),
  // 供nearx排查的链路业务请求id
  requestId?: string(name='request_id'),
  // 风险咨询信息
  data?: RiskQueryData(name='data'),
}

/**
 * Description: 设备风险咨询mpaas
 * Summary: 设备风险咨询mpaas
 */
async function queryDeviceplusMpaas(request: QueryDeviceplusMpaasRequest): QueryDeviceplusMpaasResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceplusMpaasEx(request, headers, runtime);
}

/**
 * Description: 设备风险咨询mpaas
 * Summary: 设备风险咨询mpaas
 */
async function queryDeviceplusMpaasEx(request: QueryDeviceplusMpaasRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceplusMpaasResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.deviceplus.mpaas.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitAshieldPeriodhardeningtaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // APK,ABB 上传后的地址
  fileUrl: string(name='file_url'),
  // 开启so加固
  soProtect?: string(name='so_protect'),
  // 开启so加固后,设置的so加固配置文件,默认对apk中libs目录下所有so进行加固,以逗号分隔
  soProtectConfig?: string(name='so_protect_config'),
  // 开启对assets下的资源文件进行加固
  assetsProtect?: string(name='assets_protect'),
  // 开启assets加固后,指定要对apk中assets目录下的哪些文件做加固,默认对assets下所有的文件进行保护,以逗号分隔
  assetsProtectConfing?: string(name='assets_protect_confing'),
  // 开启运行时保护,需要填写的参数,具体参数见下方,json格式
  runtimeProtectConfig?: RuntimeProtectConfig(name='runtime_protect_config'),
  // 对生命周期函数进行java2jni保护
  enableLifeFunc?: string(name='enable_life_func'),
  // java2jni配置文件
  javatocJniConfig?: [ ClassMethodConfig ](name='javatoc_jni_config'),
  // 扩展信息,json字符串,暂不使用
  extInfo?: string(name='ext_info'),
}

model SubmitAshieldPeriodhardeningtaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求id
  requestId?: string(name='request_id'),
  // 查询是否成功
  resSuccess?: boolean(name='res_success'),
  // SUCCESS为成功,其他为失败
  resCode?: string(name='res_code'),
  // 返回信息描述
  resMessage?: string(name='res_message'),
  // 返回的具体对象
  resData?: HardeningTaskResponse(name='res_data'),
}

/**
 * Description: 终端安全-Android应用加固-启动加固任务(包月)
 * Summary: 启动加固任务(包月)
 */
async function submitAshieldPeriodhardeningtask(request: SubmitAshieldPeriodhardeningtaskRequest): SubmitAshieldPeriodhardeningtaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitAshieldPeriodhardeningtaskEx(request, headers, runtime);
}

/**
 * Description: 终端安全-Android应用加固-启动加固任务(包月)
 * Summary: 启动加固任务(包月)
 */
async function submitAshieldPeriodhardeningtaskEx(request: SubmitAshieldPeriodhardeningtaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitAshieldPeriodhardeningtaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.ashield.periodhardeningtask.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAshieldFiletokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model GetAshieldFiletokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // .
  requestId?: string(name='request_id'),
  // res_success
  resSuccess?: boolean(name='res_success'),
  // res_code
  resCode?: string(name='res_code'),
  // res_message
  resMessage?: string(name='res_message'),
  // .
  resData?: FileTokenForUpload(name='res_data'),
}

/**
 * Description: 终端安全-Android应用加固-获取上传文件的临时URL
 * Summary: 获取上传文件的临时URL
 */
async function getAshieldFiletoken(request: GetAshieldFiletokenRequest): GetAshieldFiletokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAshieldFiletokenEx(request, headers, runtime);
}

/**
 * Description: 终端安全-Android应用加固-获取上传文件的临时URL
 * Summary: 获取上传文件的临时URL
 */
async function getAshieldFiletokenEx(request: GetAshieldFiletokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAshieldFiletokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.ashield.filetoken.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitAshieldHardeningtaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // APK,ABB 上传后的地址
  fileUrl: string(name='file_url'),
  // 开启so加固
  soProtect?: string(name='so_protect'),
  // 开启so加固后,设置的so加固配置文件,默认对apk中libs目录下所有so进行加固,以逗号分隔
  soProtectConfig?: string(name='so_protect_config'),
  // 开启对assets下的资源文件进行加固
  assetsProtect?: string(name='assets_protect'),
  // 开启assets加固后,指定要对apk中assets目录下的哪些文件做加固,默认对assets下所有的文件进行保护,以逗号分隔
  assetsProtectConfing?: string(name='assets_protect_confing'),
  // 开启运行时保护,需要填写的参数,具体参数见下方,json格式
  runtimeProtectConfig?: RuntimeProtectConfig(name='runtime_protect_config'),
  // 对生命周期函数进行java2jni保护
  enableLifeFunc?: string(name='enable_life_func'),
  // java2jni配置文件
  javatocJniConfig?: [ ClassMethodConfig ](name='javatoc_jni_config'),
  // 扩展信息,json字符串,暂不使用
  extInfo?: string(name='ext_info'),
}

model SubmitAshieldHardeningtaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求id
  requestId?: string(name='request_id'),
  // 查询是否成功
  resSuccess?: boolean(name='res_success'),
  // SUCCESS为成功,其他为失败
  resCode?: string(name='res_code'),
  // 返回信息描述
  resMessage?: string(name='res_message'),
  // 返回的具体对象
  resData?: HardeningTaskResponse(name='res_data'),
}

/**
 * Description: 终端安全-Android应用加固-启动加固任务
 * Summary: 启动加固任务(按次计费)
 */
async function submitAshieldHardeningtask(request: SubmitAshieldHardeningtaskRequest): SubmitAshieldHardeningtaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitAshieldHardeningtaskEx(request, headers, runtime);
}

/**
 * Description: 终端安全-Android应用加固-启动加固任务
 * Summary: 启动加固任务(按次计费)
 */
async function submitAshieldHardeningtaskEx(request: SubmitAshieldHardeningtaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitAshieldHardeningtaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.ashield.hardeningtask.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAshieldHardeningtaskprocessRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 加固任务 ID
  taskId: string(name='task_id'),
}

model GetAshieldHardeningtaskprocessResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求id
  requestId?: string(name='request_id'),
  // 查询是否成功
  resSuccess?: boolean(name='res_success'),
  // SUCCESS为成功，其他为失败
  resCode?: string(name='res_code'),
  // 返回信息描述
  resMessage?: string(name='res_message'),
  // 返回的具体对象
  resData?: HardeningTaskResponse(name='res_data'),
}

/**
 * Description: 终端安全-Android应用加固-查询加固任务进度
 * Summary: 查询加固任务进度
 */
async function getAshieldHardeningtaskprocess(request: GetAshieldHardeningtaskprocessRequest): GetAshieldHardeningtaskprocessResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAshieldHardeningtaskprocessEx(request, headers, runtime);
}

/**
 * Description: 终端安全-Android应用加固-查询加固任务进度
 * Summary: 查询加固任务进度
 */
async function getAshieldHardeningtaskprocessEx(request: GetAshieldHardeningtaskprocessRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAshieldHardeningtaskprocessResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.ashield.hardeningtaskprocess.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAshieldHardeningresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 加固任务 ID
  taskId: string(name='task_id'),
}

model GetAshieldHardeningresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求id
  requestId?: string(name='request_id'),
  // 查询是否成功
  resSuccess?: boolean(name='res_success'),
  // SUCCESS为成功，其他为失败
  resCode?: string(name='res_code'),
  // 返回信息描述
  resMessage?: string(name='res_message'),
  // 返回的下载链接
  resData?: string(name='res_data'),
}

/**
 * Description: 终端安全-Android应用加固-查询加固后的产物下载链接
 * Summary: 查询加固后的产物下载链接
 */
async function getAshieldHardeningresult(request: GetAshieldHardeningresultRequest): GetAshieldHardeningresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAshieldHardeningresultEx(request, headers, runtime);
}

/**
 * Description: 终端安全-Android应用加固-查询加固后的产物下载链接
 * Summary: 查询加固后的产物下载链接
 */
async function getAshieldHardeningresultEx(request: GetAshieldHardeningresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAshieldHardeningresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.ashield.hardeningresult.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAshieldHardeninglogRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 加固任务 ID
  taskId: string(name='task_id'),
}

model GetAshieldHardeninglogResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求id
  requestId?: string(name='request_id'),
  // 查询是否成功
  resSuccess?: boolean(name='res_success'),
  // SUCCESS为成功，其他为失败
  resCode?: string(name='res_code'),
  // 返回信息描述
  resMessage?: string(name='res_message'),
  // 返回的下载链接
  resData?: string(name='res_data'),
}

/**
 * Description: 终端安全-Android应用加固-查询加固后的日志下载链接
 * Summary: 查询加固后的日志下载链接
 */
async function getAshieldHardeninglog(request: GetAshieldHardeninglogRequest): GetAshieldHardeninglogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAshieldHardeninglogEx(request, headers, runtime);
}

/**
 * Description: 终端安全-Android应用加固-查询加固后的日志下载链接
 * Summary: 查询加固后的日志下载链接
 */
async function getAshieldHardeninglogEx(request: GetAshieldHardeninglogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAshieldHardeninglogResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.ashield.hardeninglog.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitEkytTrustsignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求头
  head: RequestHead(name='head'),
  // 签约用户信息
  signUser: string(name='sign_user'),
  // 控件key-value
  rectId?: string(name='rect_id'),
  // 签约方案码
  solutionCode: string(name='solution_code'),
  // 发起签约的外部流水号
  outOrderNo: string(name='out_order_no'),
  // 小程序appId
  appId: string(name='app_id'),
  // 用户授权标识
  userAuthorization: string(name='user_authorization'),
  // 扩展信息
  extInfo?: string(name='ext_info'),
}

model InitEkytTrustsignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 响应结果
  success?: boolean(name='success'),
  // 结果描述
  message?: string(name='message'),
  // 可信签约初始化数据
  data?: TrustSignInitData(name='data'),
}

/**
 * Description: eKYT可信签约初始化
 * Summary: eKYT可信签约-初始化
 */
async function initEkytTrustsign(request: InitEkytTrustsignRequest): InitEkytTrustsignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initEkytTrustsignEx(request, headers, runtime);
}

/**
 * Description: eKYT可信签约初始化
 * Summary: eKYT可信签约-初始化
 */
async function initEkytTrustsignEx(request: InitEkytTrustsignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitEkytTrustsignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.ekyt.trustsign.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEkytTrustsignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求头
  head: RequestHead(name='head'),
  // 小程序appId
  appId: string(name='app_id'),
  // 发起签约的外部流水号
  outOrderNo: string(name='out_order_no'),
  // 签约方案码
  solutionCode: string(name='solution_code'),
}

model QueryEkytTrustsignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 响应结果
  success?: boolean(name='success'),
  // 结果描述
  message?: string(name='message'),
  // 可信签约签约单数据
  data?: TrustSignQueryData(name='data'),
}

/**
 * Description: eKYT可信签约签约单查询
 * Summary: eKYT可信签约-签约单查询
 */
async function queryEkytTrustsign(request: QueryEkytTrustsignRequest): QueryEkytTrustsignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEkytTrustsignEx(request, headers, runtime);
}

/**
 * Description: eKYT可信签约签约单查询
 * Summary: eKYT可信签约-签约单查询
 */
async function queryEkytTrustsignEx(request: QueryEkytTrustsignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEkytTrustsignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.ekyt.trustsign.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitEkytFaceverifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求头
  head: RequestHead(name='head'),
  // 姓名
  certName: string(name='cert_name'),
  // 身份证号
  certNo: string(name='cert_no'),
  // 加密方式；0：明文；1：RSA；2：SM2
  encType?: string(name='enc_type'),
  // 商户请求的唯一标识
  outerOrderNo: string(name='outer_order_no'),
}

model InitEkytFaceverifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 响应结果
  success?: boolean(name='success'),
  // 结果描述
  message?: string(name='message'),
  // 人脸核身初始化数据
  data?: FaceVerifyInitData(name='data'),
}

/**
 * Description: eKYT人脸核身初始化
 * Summary: eKYT人脸核身-初始化
 */
async function initEkytFaceverify(request: InitEkytFaceverifyRequest): InitEkytFaceverifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initEkytFaceverifyEx(request, headers, runtime);
}

/**
 * Description: eKYT人脸核身初始化
 * Summary: eKYT人脸核身-初始化
 */
async function initEkytFaceverifyEx(request: InitEkytFaceverifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitEkytFaceverifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.ekyt.faceverify.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEkytFaceverifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求头
  head: RequestHead(name='head'),
  // 可信实人认证的唯一标识
  certifyId: string(name='certify_id'),
  // 商户请求的唯一标识
  outerOrderNo: string(name='outer_order_no'),
}

model QueryEkytFaceverifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 响应结果
  success?: boolean(name='success'),
  // 结果描述
  message?: string(name='message'),
  // 人脸核身结果数据
  data?: FaceVerifyResultData(name='data'),
}

/**
 * Description: eKYT人脸核身结果查询
 * Summary: eKYT人脸核身-结果查询
 */
async function queryEkytFaceverify(request: QueryEkytFaceverifyRequest): QueryEkytFaceverifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEkytFaceverifyEx(request, headers, runtime);
}

/**
 * Description: eKYT人脸核身结果查询
 * Summary: eKYT人脸核身-结果查询
 */
async function queryEkytFaceverifyEx(request: QueryEkytFaceverifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEkytFaceverifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.ekyt.faceverify.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportYhllRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // shopUuid
  shopUuid: string(name='shop_uuid'),
  // 名称
  name: string(name='name'),
  // 描述
  description: string(name='description'),
  // 任务类型
  goodType: string(name='good_type'),
  // 模板名
  templateName: string(name='template_name'),
  // 行业
  industry: string(name='industry'),
  // 地址
  address: string(name='address'),
  // 城市代码
  cityCode: string(name='city_code'),
  // 经度
  longitude?: string(name='longitude'),
  // 纬度
  latitude?: string(name='latitude'),
  // 坐标范围
  coordinateRange?: string(name='coordinate_range'),
  // 总量
  total: long(name='total'),
  // 模板替换符
  placeHolder?: string(name='place_holder'),
  // 补充信息
  extInfo?: string(name='ext_info'),
}

model ImportYhllResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // uuid
  uuid?: string(name='uuid'),
}

/**
 * Description: 友活来了创建任务api
 * Summary: 友活来了创建任务api
 */
async function importYhll(request: ImportYhllRequest): ImportYhllResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importYhllEx(request, headers, runtime);
}

/**
 * Description: 友活来了创建任务api
 * Summary: 友活来了创建任务api
 */
async function importYhllEx(request: ImportYhllRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportYhllResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.yhll.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryYhllRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 城市编码
  cityCode: string(name='city_code'),
  // uuid
  uuid: string(name='uuid'),
  // page size
  pageSize?: long(name='page_size'),
  // page number
  pageNum?: long(name='page_num'),
}

model QueryYhllResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // total
  total?: long(name='total'),
  // open_task_result_list
  openTaskResultList?: string(name='open_task_result_list'),
}

/**
 * Description: 友活来了任务查询api
 * Summary: 友活来了任务查询api
 */
async function queryYhll(request: QueryYhllRequest): QueryYhllResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryYhllEx(request, headers, runtime);
}

/**
 * Description: 友活来了任务查询api
 * Summary: 友活来了任务查询api
 */
async function queryYhllEx(request: QueryYhllRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryYhllResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.yhll.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGuardAskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 会话ID，用于匹配多轮对话上下文
  sessionId: string(maxLength=128, minLength=0, name='session_id'),
  // 数据唯一标识，能够根据该值定位到该条数据
  requestId: string(maxLength=64, minLength=0, name='request_id'),
  // serviceCode
  serviceCode: string(name='service_code'),
  // 当前提问内容，最大长度10000个字符。
  question: string(maxLength=10000, minLength=0, name='question'),
  // 提问内容类型，纯文本: PLAINTEXT，图片url: PICTURE_URL
  questionFormat?: string(maxLength=32, minLength=0, name='question_format'),
  // scene_code
  sceneCode?: string(name='scene_code'),
  // app_code
  appCode?: string(name='app_code'),
  // raas_products
  raasProducts?: string(name='raas_products'),
}

model QueryGuardAskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 检测数据ID
  requestId?: string(name='request_id'),
  // 是否安全无风险，true: 安全无风险，false: 有风险
  safe?: boolean(name='safe'),
  // 安全动作，拦截: BLOCK，安全代答: SECURITY_ANSWER，红色GPT安全代答: REDGPT_ANSWER，安全提示增强: SECURITY_PROMPT
  actionCode?: string(name='action_code'),
  // 安全动作相关文案
  actionMsg?: string(name='action_msg'),
  // 会话动作，终止会话: END_SESSION，撤回提问: RECALL_QUERY
  sessionAction?: string(name='session_action'),
}

/**
 * Description: 天鉴ask接口
 * Summary: 天鉴ask接口
 */
async function queryGuardAsk(request: QueryGuardAskRequest): QueryGuardAskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGuardAskEx(request, headers, runtime);
}

/**
 * Description: 天鉴ask接口
 * Summary: 天鉴ask接口
 */
async function queryGuardAskEx(request: QueryGuardAskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGuardAskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.guard.ask.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGuardAnswerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 会话ID，用于匹配多轮对话上下文
  sessionId: string(maxLength=128, minLength=0, name='session_id'),
  // 数据唯一标识，能够根据该值定位到该条数据
  requestId: string(maxLength=64, minLength=0, name='request_id'),
  // service_code
  serviceCode: string(maxLength=128, minLength=0, name='service_code'),
  // 作为一个人工智能语言模型，我还没有学习到相关信息，不过我觉得梦里啥都有，建议您保持充分的睡眠。
  answer: string(maxLength=10000, minLength=1, name='answer'),
  // 作为一个解梦者，你的任务是解释以下梦境:[上证30000点，没错，是三万不是三千]。根据梦中出现的符号和主题，请提供一份客观且基于事实的解释。
  question?: string(maxLength=800, minLength=1, name='question'),
  // 纯文本: PLAINTEXT，图片url: PICTURE_URL
  questionFormat?: string(maxLength=32, minLength=0, name='question_format'),
  // 纯文本: PLAINTEXT
  // 图片url: PICTURE_URL
  answerFormat?: string(maxLength=32, minLength=0, name='answer_format'),
  // scene_code
  sceneCode?: string(maxLength=128, minLength=1, name='scene_code'),
  // app_code
  appCode?: string(name='app_code'),
  // raas_products
  raasProducts?: string(name='raas_products'),
}

model QueryGuardAnswerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 检测数据ID
  requestId?: string(name='request_id'),
  // 是否安全无风险
  safe?: boolean(name='safe'),
  // 拦截: BLOCK
  // 安全代答: SECURITY_ANSWER
  // 红色GPT安全代答: REDGPT_ANSWER
  // 回答里补充安全提示: SECURITY_TIP
  actionCode?: string(name='action_code'),
  // 安全提示增强的文案、安全代答的回答、回答里补充的安全提示
  actionMsg?: string(name='action_msg'),
  // 终止会话: END_SESSION
  // 撤回提问: RECALL_QUERY
  sessionAction?: string(name='session_action'),
}

/**
 * Description: 天鉴answer接口
 * Summary: 天鉴answer接口
 */
async function queryGuardAnswer(request: QueryGuardAnswerRequest): QueryGuardAnswerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGuardAnswerEx(request, headers, runtime);
}

/**
 * Description: 天鉴answer接口
 * Summary: 天鉴answer接口
 */
async function queryGuardAnswerEx(request: QueryGuardAnswerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGuardAnswerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.guard.answer.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteIifaaDigitalkeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求头
  head: RequestHead(name='head'),
  // 业务参数
  request: string(name='request'),
}

model DeleteIifaaDigitalkeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回值
  data?: boolean(name='data'),
}

/**
 * Description: 开放给设备产商，删除数字钥匙
 * Summary: 删除数字钥匙
 */
async function deleteIifaaDigitalkey(request: DeleteIifaaDigitalkeyRequest): DeleteIifaaDigitalkeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteIifaaDigitalkeyEx(request, headers, runtime);
}

/**
 * Description: 开放给设备产商，删除数字钥匙
 * Summary: 删除数字钥匙
 */
async function deleteIifaaDigitalkeyEx(request: DeleteIifaaDigitalkeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteIifaaDigitalkeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.iifaa.digitalkey.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckOpticalIdentifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // json数据，包含tenantId,sceneId,outBizId,fakeType,certType
  reservedData: string(name='reserved_data'),
  // 图片链接,image_url和image_content 2选1优先选择image_content
  imageUrl?: string(name='image_url'),
  // base64编码的图片,image_url和image_content 2选1，优先选择image_content
  imageContent?: string(name='image_content'),
  // raas产品码
  raasProducts: string(name='raas_products'),
}

model CheckOpticalIdentifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 光鉴智能凭证响应结果
  data?: IdentityData(name='data'),
}

/**
 * Description: 光鉴智能凭证
 * Summary: 光鉴智能凭证
 */
async function checkOpticalIdentify(request: CheckOpticalIdentifyRequest): CheckOpticalIdentifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkOpticalIdentifyEx(request, headers, runtime);
}

/**
 * Description: 光鉴智能凭证
 * Summary: 光鉴智能凭证
 */
async function checkOpticalIdentifyEx(request: CheckOpticalIdentifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckOpticalIdentifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsecuritytech.gateway.optical.identify.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

