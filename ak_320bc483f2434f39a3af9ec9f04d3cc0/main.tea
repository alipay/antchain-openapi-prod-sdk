import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.2.0',
    _prod_code = 'ak_320bc483f2434f39a3af9ec9f04d3cc0',
    _prod_channel = 'saas'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 签署方信息
model SignatoryInfo {
  // 页码信息 （骑缝签署页码为1-2这种，其余情况都是数字）
  posPage: string(name='pos_page', example='1'),
  //  x坐标
  posX: string(name='pos_x', example='111.11'),
  //  y坐标
  posY: string(name='pos_y', example='111.11'),
  // 签署区宽 (默认为100)
  width?: string(name='width', example='100'),
}

// 签署链接类
model SignUrlResp {
  // 0-企业 1-用户
  type: long(name='type', example='0'),
  // 企业名称或用户姓名
  name: string(name='name', example='张三'),
  // 社会信用代码或身份证号
  certNo: string(name='cert_no', example='220111************'),
  // 手动签署url（长链接）
  url?: string(name='url', example='http://alipay.com'),
  // 手动签署url(端链接)
  shortUrl?: string(name='short_url', example='http://alipay.com'),
  // 电子合同签署区id
  signFiledId: string(name='sign_filed_id', example='asdassdsa'),
}

// 退保失败订单信息
model FailOrderInfo {
  // 退保失败订单号
  orderNo: string(name='order_no', example='1311313'),
  // 失败原因
  failReason: string(name='fail_reason', example='超出退保期限'),
}

// 用户签署信息
model SignUserInfo {
  // 身份证号
  idNumber: string(name='id_number', example='220***************'),
  // 姓名
  name: string(name='name', example='张三'),
  // 签署区列表
  signAreaList: [ SignatoryInfo ](name='sign_area_list', example='-'),
}

// 员工信息
model InsureEmployeeInfo {
  // 姓名
  name: string(name='name', example='张三'),
  // 身份证号
  certNo: string(name='cert_no', example='330105XXXXXXXXXXXX'),
  // 手机号
  mobile: string(name='mobile', example='18611111111'),
  // 额外信息
  extraMsg: string(name='extra_msg', example='-'),
}

// 签署发起返回类
model ContractSignResponse {
  // 流程id
  flowId: string(name='flow_id', example='asdasd'),
  // 签署链接数组
  signUrlList: [ SignUrlResp ](name='sign_url_list', example='-'),
}

// 签约企业信息
model SignEnterpriseInfo {
  // 公司名称
  organizationName: string(name='organization_name', example='某某公司'),
  // 社会统一信用代码
  uscc: string(name='uscc', example='123435'),
  // 法人姓名
  name: string(name='name', example='张三'),
  // 法人身份证号码
  idNumber: string(name='id_number', example='12344545'),
  // 签署模式0、自动签署1、手动签署（用户只能手动）
  // 
  signType: long(name='sign_type', example='0'),
  // 签署区列表
  signAreaList: [ SignatoryInfo ](name='sign_area_list', example='-'),
}

// 保险产品类
model InsureProductInfo {
  // 产品名称
  name: string(name='name', example='雇主责任险-通用24小时十万版'),
  // 产品id
  productId: string(name='product_id', example='PP2023010500106845'),
  // 险种编码: 
  // ACCIDENT: 意外险
  // EMPLOYER: 雇主险
  insuranceTypeCode: string(name='insurance_type_code', example='ACCIDENT'),
  // 推荐编码
  recomFlowNo?: string(name='recom_flow_no', example='AF2023051705052635767237'),
  // 最低价格（分）
  premium?: long(name='premium', example='100'),
  // 保额（分）
  sumInsured?: long(name='sum_insured', example='30000000'),
}

// 键值对
model XNameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

model SignAntsaasStaffingcContractSendRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要确保唯一（定位订单）
  outBizNo: string(name='out_biz_no'),
  // 合同或模版文件
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId?: string(name='file_id'),
  // 合同类型（1合同文件 2合同模板）
  contractType: long(name='contract_type'),
  // 合同名称, 必须带上文件名后缀。 .dpf .doc .docx
  contractName: string(name='contract_name'),
  // 合同文件类型 （pdf、word）
  contractFileType: string(name='contract_file_type'),
  // 合同模版参数，json格式，以key value格式存储，合同类型属于模板必填
  simpleFormFields?: string(name='simple_form_fields'),
  // 签署平台（ALIPAY或H5）
  signPlatform: string(name='sign_platform'),
  // 合同用户信息列表
  signUserList: [ SignUserInfo ](name='sign_user_list'),
  // 合同企业信息列表
  signEnterpriseList: [ SignEnterpriseInfo ](name='sign_enterprise_list'),
}

model SignAntsaasStaffingcContractSendResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发起签约返回结果
  response?: ContractSignResponse(name='response'),
}

/**
 * Description: 发起签约调用接口
 * Summary: 发起签约
 */
async function signAntsaasStaffingcContractSend(request: SignAntsaasStaffingcContractSendRequest): SignAntsaasStaffingcContractSendResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return signAntsaasStaffingcContractSendEx(request, headers, runtime);
}

/**
 * Description: 发起签约调用接口
 * Summary: 发起签约
 */
async function signAntsaasStaffingcContractSendEx(request: SignAntsaasStaffingcContractSendRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SignAntsaasStaffingcContractSendResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'antsaas.staffingc.contract.send.sign',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var signAntsaasStaffingcContractSendResponse = new SignAntsaasStaffingcContractSendResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return signAntsaasStaffingcContractSendResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'antsaas.staffingc.contract.send.sign', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntsaasStaffingcContractSignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程id
  flowId: string(name='flow_id'),
}

model QueryAntsaasStaffingcContractSignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 流程id
  flowId?: string(name='flow_id'),
  // 文件有效截止日期
  contractValidity?: long(name='contract_validity'),
  // 流程描述
  flowDesc?: string(name='flow_desc'),
  // 流程开始时间
  flowStartTime?: string(name='flow_start_time'),
  // 流程结束时间
  flowEndTime?: string(name='flow_end_time'),
  // 流程状态（0-草稿、1-签署中、2-完成、3-撤销、4-终止、5-过期、6-删除、7-拒签）
  flowStatus?: long(name='flow_status'),
  // 合同文件id
  fileId?: string(name='file_id'),
  // 合同文件名称
  fileName?: string(name='file_name'),
  // 合同文件下载地址（1小时内有效）
  fileUrl?: string(name='file_url'),
  // 如果未签署，将返回签署链接
  signUrlList?: [ SignUrlResp ](name='sign_url_list'),
}

/**
 * Description: 签约结果查询
 * Summary: 查询签约结果
 */
async function queryAntsaasStaffingcContractSign(request: QueryAntsaasStaffingcContractSignRequest): QueryAntsaasStaffingcContractSignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntsaasStaffingcContractSignEx(request, headers, runtime);
}

/**
 * Description: 签约结果查询
 * Summary: 查询签约结果
 */
async function queryAntsaasStaffingcContractSignEx(request: QueryAntsaasStaffingcContractSignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntsaasStaffingcContractSignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsaas.staffingc.contract.sign.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntsaasStaffingcEpcertificationUrlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 一次认证的唯一标识,在商户调用认证初始化接口的时候获取
  // (如果接口创建接口发生未知异常，可使用out_biz_no替代，查询状态）
  bizNo: string(name='biz_no'),
}

model QueryAntsaasStaffingcEpcertificationUrlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // // 响应为表单格式，可嵌入页面，具体以返回的结果为准
  resultBody?: string(name='result_body'),
  // 订单号（但入参为out_biz_no时传入）
  bizNo?: string(name='biz_no'),
}

/**
 * Description: 企业认证授权url查询接口
 * Summary: 企业认证授权url查询接口
 */
async function queryAntsaasStaffingcEpcertificationUrl(request: QueryAntsaasStaffingcEpcertificationUrlRequest): QueryAntsaasStaffingcEpcertificationUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntsaasStaffingcEpcertificationUrlEx(request, headers, runtime);
}

/**
 * Description: 企业认证授权url查询接口
 * Summary: 企业认证授权url查询接口
 */
async function queryAntsaasStaffingcEpcertificationUrlEx(request: QueryAntsaasStaffingcEpcertificationUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntsaasStaffingcEpcertificationUrlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsaas.staffingc.epcertification.url.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntsaasStaffingcEpcertificationAuthorizeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要保证唯一，外部订单号
  outBizNo: string(name='out_biz_no'),
  // 企业全称
  epName: string(name='ep_name'),
  // 统一社会信用代码或营业执照注册号
  epCertNo: string(name='ep_cert_no'),
  // 认证完成后，跳转到指定url地址
  returnUrl?: string(name='return_url'),
}

model CreateAntsaasStaffingcEpcertificationAuthorizeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 一次认证的唯一标识
  bizNo?: string(name='biz_no'),
}

/**
 * Description: 企业认证创建接口
 * Summary: 企业认证创建接口
 */
async function createAntsaasStaffingcEpcertificationAuthorize(request: CreateAntsaasStaffingcEpcertificationAuthorizeRequest): CreateAntsaasStaffingcEpcertificationAuthorizeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntsaasStaffingcEpcertificationAuthorizeEx(request, headers, runtime);
}

/**
 * Description: 企业认证创建接口
 * Summary: 企业认证创建接口
 */
async function createAntsaasStaffingcEpcertificationAuthorizeEx(request: CreateAntsaasStaffingcEpcertificationAuthorizeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntsaasStaffingcEpcertificationAuthorizeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsaas.staffingc.epcertification.authorize.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntsaasStaffingcEpcertificationRiskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 一次认证的唯一标识,在调用认证初始化接口的时候获取
  bizNo: string(name='biz_no'),
  // 企业全称
  epName: string(name='ep_name'),
  // 统一社会信用代码或营业执照注册号
  epCertNo: string(name='ep_cert_no'),
}

model QueryAntsaasStaffingcEpcertificationRiskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证状态，取值如下： SUCCESS，代表成功 INIT，代表初始化 CERTIFYING，代表认证中 FAIL，代表失败
  certifyStatus?: string(name='certify_status'),
  // 授权状态，从用户授权开始计时，时间窗口3天 取值如下： SUCCESS，代表用户已授权 FAIL，代表用户未授权或授权失效
  authStatus?: string(name='auth_status'),
  // 企业全称，字段auth_status为SUCCESS时返回
  epName?: string(name='ep_name'),
  // 统一社会信用代码或营业执照注册号，字段auth_status为SUCCESS时返回
  epCertNo?: string(name='ep_cert_no'),
  // 法人认证姓名，字段auth_status为SUCCESS时返回
  userName?: string(name='user_name'),
  // 法人认证身份证号
  certifyPersonCardNoPostfix?: string(name='certify_person_card_no_postfix'),
  // 认证失败原因列表，当certify_status=FAIL时返回
  certifyFailReasons?: [ string ](name='certify_fail_reasons'),
  // 认证风险识别结果集合
  // 枚举值
  // 低风险认证: CERTIFICATION_LOW_RISK
  // 中风险认证: CERTIFICATION_MID_RISK2
  // 高风险认证: CERTIFICATION_HIGH_RISK
  // 批量注册: ONE_ADDR_MULTI_COMP
  // 经营异常: OPERATION_ABNORMAL
  // 交叉任职: CROSS_POSITION
  // 涉嫌洗钱: SUSPECTED_MONEY_LAUNDERING
  // 空壳公司: SHELL_COMPANY
  // 失信被执行: BREACH_PROMISE_EXECUTION
  // 严重违法失信: SERIOUS_BREACH_TRUST
  // 行政处罚: ADMINISTRATIVE_SANCTION
  // 司法冻结: JUDICIAL_FREEZE
  // 违规违禁: VIOLATION_BAN
  // 信贷逾期: CREDIT_OVERDUE
  // 多头借贷: LONG_BORROWING
  // 疑似欺诈: SUSPECTED_FRAUD
  // 疑似涉赌博: SUSPECTED_GAMBLING
  // 企业芝麻证: LI_XIN_CERTIFICATE
  riskIdentifyResult?: [ string ](name='risk_identify_result'),
  // 空壳企业等级，描述企业空壳程度。
  // 枚举值
  // 优秀企业，没有空壳企业的常见特征，且有很多正向特征证明其正常经营: A+
  // 较为优秀的企业，没有空壳企业的常见特征，且有较多正向特征证明其正常经营: A
  // 较为优秀的企业，几乎没有空壳企业的常见特征，或者有较多正向特征证明其正常经营: B
  // 普通企业，一般没有空壳企业的常见特征，或者有很少量能反映其正常经营的数据: M+
  // 普通企业或者新注册的企业，一般没有空壳企业的常见特征，但是也没有太多能反映其在正常生产经营的数据: M
  // 普通企业，一般没有明显空壳企业的常见特征，也没有太多能反映其在正常生产经营的数据，可能和空壳企业有少量交集: M-
  // 较差企业，有部分空壳企业特征，可能有较少能反映其在正常生产经营的数据。建议这部分企业酌情考虑风险: C+
  // 差企业，有较多空壳企业特征，几乎没有能反映其在正常生产经营的数据: C
  // 差企业，有很多明显空壳企业特征，几乎没有能反映其在正常生产经营的数据: D
  shellCompanyLevel?: string(name='shell_company_level'),
}

/**
 * Description: 企业认证风险查询接口
 * Summary: 企业认证风险查询接口
 */
async function queryAntsaasStaffingcEpcertificationRisk(request: QueryAntsaasStaffingcEpcertificationRiskRequest): QueryAntsaasStaffingcEpcertificationRiskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntsaasStaffingcEpcertificationRiskEx(request, headers, runtime);
}

/**
 * Description: 企业认证风险查询接口
 * Summary: 企业认证风险查询接口
 */
async function queryAntsaasStaffingcEpcertificationRiskEx(request: QueryAntsaasStaffingcEpcertificationRiskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntsaasStaffingcEpcertificationRiskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsaas.staffingc.epcertification.risk.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyAntsaasStaffingcInsureSignurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  enterpriseName: string(name='enterprise_name'),
  // 社会信用代码
  socialCreditCode: string(name='social_credit_code'),
  // 签约支付宝账号（企业支付宝是邮箱）
  authAccount: string(name='auth_account'),
  // 联系手机号（用于接收投保失败等短信通知）
  mobile?: string(name='mobile'),
  // 外部业务号(64长度以内）
  // 
  outBizNo: string(name='out_biz_no'),
}

model ApplyAntsaasStaffingcInsureSignurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签约地址
  signUrl?: string(name='sign_url'),
}

/**
 * Description: 获取保险签约认证连接
 * Summary: 获取保险签约认证连接
 */
async function applyAntsaasStaffingcInsureSignurl(request: ApplyAntsaasStaffingcInsureSignurlRequest): ApplyAntsaasStaffingcInsureSignurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyAntsaasStaffingcInsureSignurlEx(request, headers, runtime);
}

/**
 * Description: 获取保险签约认证连接
 * Summary: 获取保险签约认证连接
 */
async function applyAntsaasStaffingcInsureSignurlEx(request: ApplyAntsaasStaffingcInsureSignurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyAntsaasStaffingcInsureSignurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsaas.staffingc.insure.signurl.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAntsaasStaffingcInsureProductRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  enterpriseName: string(name='enterprise_name'),
  // 统一社会信用代码
  socialCreditCode: string(name='social_credit_code'),
  // 保险场景码: 
  // FLEXIBLE_EMPLOYMENT-日单（实时生效）
  // INITIATIVE_EMPLOYMENT-长期（次日0点生效）
  bizCode: string(name='biz_code'),
  // 险种编码:
  //  ACCIDENT: 意外险
  //  EMPLOYER_LIABILITY: 雇主险
  insuranceTypeCode: string(name='insurance_type_code'),
}

model ListAntsaasStaffingcInsureProductResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 保险产品列表
  productList?: [ InsureProductInfo ](name='product_list'),
}

/**
 * Description: 查询可投保的保险产品
 * Summary: 查询可投保的保险产品
 */
async function listAntsaasStaffingcInsureProduct(request: ListAntsaasStaffingcInsureProductRequest): ListAntsaasStaffingcInsureProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAntsaasStaffingcInsureProductEx(request, headers, runtime);
}

/**
 * Description: 查询可投保的保险产品
 * Summary: 查询可投保的保险产品
 */
async function listAntsaasStaffingcInsureProductEx(request: ListAntsaasStaffingcInsureProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAntsaasStaffingcInsureProductResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsaas.staffingc.insure.product.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntsaasStaffingcInsurePriceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  enterpriseName: string(name='enterprise_name'),
  // 统一社会信用代码
  socialCreditCode: string(name='social_credit_code'),
  // 产品ID
  productId: string(name='product_id'),
  // 职业编码: 
  // default-1-一类职业;
  // default-2-二类职业;
  // default-3-三类职业;
  // default-4-四类职业;
  jobCode: string(name='job_code'),
  // 周期：
  // 1D、
  // 30D、
  // 360D
  period: string(name='period'),
}

model QueryAntsaasStaffingcInsurePriceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 价格
  price?: long(name='price'),
}

/**
 * Description: 查询保险产品价格相关信息
 * Summary: 查询保险产品价格相关信息
 */
async function queryAntsaasStaffingcInsurePrice(request: QueryAntsaasStaffingcInsurePriceRequest): QueryAntsaasStaffingcInsurePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntsaasStaffingcInsurePriceEx(request, headers, runtime);
}

/**
 * Description: 查询保险产品价格相关信息
 * Summary: 查询保险产品价格相关信息
 */
async function queryAntsaasStaffingcInsurePriceEx(request: QueryAntsaasStaffingcInsurePriceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntsaasStaffingcInsurePriceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsaas.staffingc.insure.price.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendAntsaasStaffingcInsureRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部业务号（幂等、异步通知回传）
  outBizNo: string(name='out_biz_no'),
  // 企业名称
  enterpriseName: string(name='enterprise_name'),
  // 统一社会信用代码
  socialCreditCode: string(name='social_credit_code'),
  // 保险场景码: 
  // FLEXIBLE_EMPLOYMENT-日单（实时生效）
  // INITIATIVE_EMPLOYMENT- 长期（次日0点生效）
  bizCode: string(name='biz_code'),
  // 投保的险种编码:
  // ACCIDENT: 意外险,
  // EMPLOYER_LIABILITY: 雇主险
  insuranceTypeCode: string(name='insurance_type_code'),
  // 产品ID
  productId: string(name='product_id'),
  // 职业编码: 
  // default-1-一类职业; 
  // default-2-二类职业;
  // default-3-三类职业;
  // default-4-四类职业;
  // default-5-五类职业（雇主险60万和80万保额暂不支持）
  jobCode: string(name='job_code'),
  // 保障周期：30D、360D（bizCode为长期时必传）
  period?: string(name='period'),
  // 推荐编码
  recomFlowNo?: string(name='recom_flow_no'),
  // 地址（bizCode为日单必传）
  address?: string(name='address'),
  // 投保人列表，extra_msg需传递out_sub_biz_no，外部明细业务号（投保结果通知会回传，自行定义）
  employeeList: [ InsureEmployeeInfo ](name='employee_list'),
}

model SendAntsaasStaffingcInsureResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 投保失败人员信息，extra_msg会返回failReason，投保失败原因
  failEmployeeList?: [ InsureEmployeeInfo ](name='fail_employee_list'),
}

/**
 * Description: 执行投保
 * Summary: 执行投保
 */
async function sendAntsaasStaffingcInsure(request: SendAntsaasStaffingcInsureRequest): SendAntsaasStaffingcInsureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendAntsaasStaffingcInsureEx(request, headers, runtime);
}

/**
 * Description: 执行投保
 * Summary: 执行投保
 */
async function sendAntsaasStaffingcInsureEx(request: SendAntsaasStaffingcInsureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendAntsaasStaffingcInsureResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsaas.staffingc.insure.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendAntsaasStaffingcInsureRefundRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部业务号
  outBizNo: string(name='out_biz_no'),
  // 企业名称
  enterpriseName: string(name='enterprise_name'),
  // 统一社会信用代码
  socialCreditCode: string(name='social_credit_code'),
  // 退保订单号列表
  orderNoList: [ long ](name='order_no_list'),
}

model SendAntsaasStaffingcInsureRefundResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 失败原因列表
  failOrderInfoList?: [ FailOrderInfo ](name='fail_order_info_list'),
}

/**
 * Description: 退保接口
 * Summary: 退保接口
 */
async function sendAntsaasStaffingcInsureRefund(request: SendAntsaasStaffingcInsureRefundRequest): SendAntsaasStaffingcInsureRefundResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendAntsaasStaffingcInsureRefundEx(request, headers, runtime);
}

/**
 * Description: 退保接口
 * Summary: 退保接口
 */
async function sendAntsaasStaffingcInsureRefundEx(request: SendAntsaasStaffingcInsureRefundRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendAntsaasStaffingcInsureRefundResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antsaas.staffingc.insure.refund.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 上传文件作用的openapi method
  apiCode: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ XNameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntcloudGatewayxFileUploadEx(request, headers, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

