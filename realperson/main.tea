import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.3.6',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 音频元数据
model AudioMeta {
  // 采样率
  sampleFreq?: long(name='sample_freq', example='16000'),
  // 音频道数
  channelsNum?: long(name='channels_num', example='1'),
  // 音频数据采样点所占位数
  bits?: long(name='bits', example='16'),
  // 语音信道分离标识
  channel?: long(name='channel', example='0'),
}

// 音频文件
model Audio {
  // 音频文件名称（单次请求保持唯一）
  token?: string(name='token', example='81995a7fa2bfc132eb69cdc2028f0619.wav'),
  // 待认证的音频文件，base64编码格式
  rawData?: string(name='raw_data', example='/9j/238sn382l23f4 '),
  // 音频文件OSS地址
  audioUrl?: string(name='audio_url', example='https://xxxxxx.oss-cn-shanghai.aliyuncs.com/12345.wav'),
}

// 键值对
model XNameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

model QueryFacevrfServerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实人认证唯一标识
  certifyId: string(name='certify_id'),
  // 预留扩展业务参数
  externParam?: string(name='extern_param'),
  // 认证材料（如人脸图像）的哈希
  materialHash?: string(name='material_hash'),
  // 外部唯一标识。用于定位。
  // 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 场景ID
  sceneId: string(name='scene_id'),
}

model QueryFacevrfServerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证的主体信息，一般的认证场景返回为空
  identityInfo?: string(name='identity_info'),
  // 认证主体附件信息，一般的认证场景都是返回空
  materialInfo?: string(name='material_info'),
  // 认证材料哈希是否匹配
  materialMatched?: string(name='material_matched'),
  // 是否通过，通过为T，不通过为F
  passed?: string(name='passed'),
  // 业务失败原因
  reason?: string(name='reason'),
}

/**
 * Description: 查询认证的结果和相关信息
 * Summary: 认证查询
 */
async function queryFacevrfServer(request: QueryFacevrfServerRequest): QueryFacevrfServerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFacevrfServerEx(request, headers, runtime);
}

/**
 * Description: 查询认证的结果和相关信息
 * Summary: 认证查询
 */
async function queryFacevrfServerEx(request: QueryFacevrfServerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFacevrfServerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.facevrf.server.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFacevrfServerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证模式码
  bizCode: string(name='biz_code'),
  // h5认证完成后，服务端回调此地址通知商户认证结果
  callbackUrl?: string(name='callback_url'),
  // 真实姓名
  certName: string(name='cert_name'),
  // 证件号码
  certNo: string(name='cert_no'),
  // 证件类型，如身份证
  certType: string(name='cert_type'),
  // 预留扩展参数
  externParam?: string(name='extern_param'),
  // 自定义比对源人脸图像，base64编码格式
  facialPictureRef?: string(name='facial_picture_ref'),
  // 身份信息来源类型，如证件
  identityType: string(name='identity_type'),
  // metainfo 环境参数，需要通过客户端 SDK 获取
  metaInfo?: string(name='meta_info'),
  // 外部唯一标识。用于定位。
  // 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 回跳地址
  returnUrl?: string(name='return_url'),
  // 场景ID
  sceneId: string(name='scene_id'),
  // 商户自定义的用户ID
  userId?: string(name='user_id'),
  // 用户的IP
  userIp?: string(name='user_ip'),
  // 用户的手机号
  userMobile?: string(name='user_mobile'),
  // callbackUrl回调时是否需要重试，默认false(不需要重试)
  callbackNeedRetry?: boolean(name='callback_need_retry'),
}

model CreateFacevrfServerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实人认证唯一标识
  certifyId?: string(name='certify_id'),
  // 认证地址。只在特定场景返回。
  certifyUrl?: string(name='certify_url'),
}

/**
 * Description: 服务端认证创建，传入认证信息，获取认证ID（和url）
 * Summary: 认证创建
 */
async function createFacevrfServer(request: CreateFacevrfServerRequest): CreateFacevrfServerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFacevrfServerEx(request, headers, runtime);
}

/**
 * Description: 服务端认证创建，传入认证信息，获取认证ID（和url）
 * Summary: 认证创建
 */
async function createFacevrfServerEx(request: CreateFacevrfServerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFacevrfServerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.facevrf.server.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecFacevrfServerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 真实姓名
  certName: string(name='cert_name'),
  // 证件号码
  certNo: string(name='cert_no'),
  // 证件类型，如身份证
  certType: string(name='cert_type'),
  // 预留扩展参数
  externParam?: string(name='extern_param'),
  // 自定义比对源人脸图像，base64编码格式
  facialPictureRef?: string(name='facial_picture_ref'),
  // 身份信息来源类型，如证件
  identityType: string(name='identity_type'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 场景ID
  sceneId: string(name='scene_id'),
  // 商户自定义的用户ID
  userId?: string(name='user_id'),
  // 用户的IP
  userIp?: string(name='user_ip'),
  // 用户的手机号（或其哈希值）
  userMobile?: string(name='user_mobile'),
  // 待认证的人脸图像，base64编码格式
  facialPictureAuth: string(name='facial_picture_auth'),
}

model ExecFacevrfServerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证ID
  certifyId?: string(name='certify_id'),
  // 是否通过，通过为T，不通过为F
  passed?: string(name='passed'),
  // 业务失败原因
  reason?: string(name='reason'),
}

/**
 * Description: 纯服务端比对，直接输入待比对的图片，返回比对结果
 * Summary: 纯服务端比对
 */
async function execFacevrfServer(request: ExecFacevrfServerRequest): ExecFacevrfServerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execFacevrfServerEx(request, headers, runtime);
}

/**
 * Description: 纯服务端比对，直接输入待比对的图片，返回比对结果
 * Summary: 纯服务端比对
 */
async function execFacevrfServerEx(request: ExecFacevrfServerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecFacevrfServerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.facevrf.server.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetFacevrfEvidenceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 某次刷脸的certifyId
  certifyId: string(name='certify_id'),
}

model GetFacevrfEvidenceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 刷脸的certifyId，原样返回
  certifyId?: string(name='certify_id'),
  // 统一证据ID，非SUCCESS状态为null，可在控制台中持统一证据ID验证pdf文件的正确性，法院方也可用此统一证据ID在司法链控制台进行核验pdf文件的正确性。
  onchainId?: string(name='onchain_id'),
  // 上链状态，`SUCCESS`表示成功、`INIT`表示正在上链
  onchainStatus?: string(name='onchain_status'),
  // pdf存证是否已经过期，不支持超过6个月的存证获取
  pdfExpired?: boolean(name='pdf_expired'),
  // 存证pdf文件内容的base64
  pdfContent?: string(name='pdf_content'),
}

/**
 * Description: 传入某次刷脸的certifyID，获得刷脸存证的pdf文件和司法脸统一证据ID，这两份数据可以在司法链的控制台中进行核验存证是否被记录在区块链上从而证实其真实可信。
 * Summary: 商户获取司法链上刷脸存证和统一证据ID
 */
async function getFacevrfEvidence(request: GetFacevrfEvidenceRequest): GetFacevrfEvidenceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getFacevrfEvidenceEx(request, headers, runtime);
}

/**
 * Description: 传入某次刷脸的certifyID，获得刷脸存证的pdf文件和司法脸统一证据ID，这两份数据可以在司法链的控制台中进行核验存证是否被记录在区块链上从而证实其真实可信。
 * Summary: 商户获取司法链上刷脸存证和统一证据ID
 */
async function getFacevrfEvidenceEx(request: GetFacevrfEvidenceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFacevrfEvidenceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.facevrf.evidence.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckIndividualidTwometaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 姓名
  certName: string(name='cert_name'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // map结果的json数据格式，预留字段
  externParam?: string(name='extern_param'),
  // 认证子类型
  scene?: string(name='scene'),
}

model CheckIndividualidTwometaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true:匹配成功  false：匹配失败
  match?: string(name='match'),
  // 扩展信息，预留字段
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 个人二要素认证
 * Summary: 个人二要素认证
 */
async function checkIndividualidTwometa(request: CheckIndividualidTwometaRequest): CheckIndividualidTwometaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkIndividualidTwometaEx(request, headers, runtime);
}

/**
 * Description: 个人二要素认证
 * Summary: 个人二要素认证
 */
async function checkIndividualidTwometaEx(request: CheckIndividualidTwometaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckIndividualidTwometaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.individualid.twometa.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckIndividualidThreemetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 姓名
  certName: string(name='cert_name'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // 手机号码
  mobile: string(name='mobile'),
  // map结果的json数据格式，预留字段
  // 
  externParam?: string(name='extern_param'),
}

model CheckIndividualidThreemetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true:匹配成功 false：匹配失败
  match?: string(name='match'),
  // 扩展信息，预留字段
  // 
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 个人三要素认证
 * Summary: 个人三要素认证
 */
async function checkIndividualidThreemeta(request: CheckIndividualidThreemetaRequest): CheckIndividualidThreemetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkIndividualidThreemetaEx(request, headers, runtime);
}

/**
 * Description: 个人三要素认证
 * Summary: 个人三要素认证
 */
async function checkIndividualidThreemetaEx(request: CheckIndividualidThreemetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckIndividualidThreemetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.individualid.threemeta.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckIndividualidFourmetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 姓名
  // 
  certName: string(name='cert_name'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // 手机号码
  mobile: string(name='mobile'),
  // 银行卡号
  bankCard: string(name='bank_card'),
  // map结果的json数据格式，预留字段
  // 
  externParam?: string(name='extern_param'),
}

model CheckIndividualidFourmetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true:匹配成功 false：匹配失败
  // 
  match?: string(name='match'),
  // 扩展信息，预留字段
  // 
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 个人四要素认证
 * Summary: 个人四要素认证
 */
async function checkIndividualidFourmeta(request: CheckIndividualidFourmetaRequest): CheckIndividualidFourmetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkIndividualidFourmetaEx(request, headers, runtime);
}

/**
 * Description: 个人四要素认证
 * Summary: 个人四要素认证
 */
async function checkIndividualidFourmetaEx(request: CheckIndividualidFourmetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckIndividualidFourmetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.individualid.fourmeta.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckRouteThreemetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 姓名
  certName: string(name='cert_name'),
  // 身份证号
  certNo: string(name='cert_no'),
  // 手机号
  mobile: string(name='mobile'),
  // 使用场景
  scene: string(name='scene'),
  // map结果的json数据格式，预留字段
  externParam?: string(name='extern_param'),
}

model CheckRouteThreemetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true:匹配成功 false：匹配失败
  match?: string(name='match'),
  // 扩展信息，预留字段
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 个人三要素认证（场景路由）
 * Summary: 个人三要素认证（场景路由）
 */
async function checkRouteThreemeta(request: CheckRouteThreemetaRequest): CheckRouteThreemetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkRouteThreemetaEx(request, headers, runtime);
}

/**
 * Description: 个人三要素认证（场景路由）
 * Summary: 个人三要素认证（场景路由）
 */
async function checkRouteThreemetaEx(request: CheckRouteThreemetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckRouteThreemetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.route.threemeta.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateVoiceprintServermodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 商户自定义的用户ID
  userId: string(name='user_id'),
  // 音频文件流
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId?: string(name='file_id'),
  // 音频元数据
  audioMeta: AudioMeta(name='audio_meta'),
  // 音频文件集合
  audios: [ Audio ](name='audios'),
  // 预留扩展参数
  externParam?: string(name='extern_param'),
}

model CreateVoiceprintServermodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 扩展信息，预留字段
  externInfo?: string(name='extern_info'),
  // 产品结果明细，不影响决策
  resultCodeSub?: string(name='result_code_sub'),
  // result_code_sub对应的文案
  resultMsgSub?: string(name='result_msg_sub'),
}

/**
 * Description: 纯服务端声纹注册
 * Summary: 纯服务端声纹注册
 */
async function createVoiceprintServermode(request: CreateVoiceprintServermodeRequest): CreateVoiceprintServermodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createVoiceprintServermodeEx(request, headers, runtime);
}

/**
 * Description: 纯服务端声纹注册
 * Summary: 纯服务端声纹注册
 */
async function createVoiceprintServermodeEx(request: CreateVoiceprintServermodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateVoiceprintServermodeResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'di.realperson.voiceprint.servermode.create',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var createVoiceprintServermodeResponse = new CreateVoiceprintServermodeResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return createVoiceprintServermodeResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.voiceprint.servermode.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyVoiceprintServermodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 商户自定义的用户ID
  userId: string(name='user_id'),
  // 音频文件，base64编码格式
  // 
  audioAuth?: string(name='audio_auth'),
  // 音频文件OSS地址
  audioUrl?: string(name='audio_url'),
  // 音频元数据
  audioMeta: AudioMeta(name='audio_meta'),
  // 预留扩展参数
  externParam?: string(name='extern_param'),
}

model VerifyVoiceprintServermodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 声纹认证唯一ID
  certifyId?: string(name='certify_id'),
  // 扩展信息，预留字段
  externInfo?: string(name='extern_info'),
  // 产品结果明细，不影响决策
  resultCodeSub?: string(name='result_code_sub'),
  // result_code_sub对应的文案
  resultMsgSub?: string(name='result_msg_sub'),
}

/**
 * Description: 纯服务端声纹比对
 * Summary: 纯服务端声纹比对
 */
async function verifyVoiceprintServermode(request: VerifyVoiceprintServermodeRequest): VerifyVoiceprintServermodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyVoiceprintServermodeEx(request, headers, runtime);
}

/**
 * Description: 纯服务端声纹比对
 * Summary: 纯服务端声纹比对
 */
async function verifyVoiceprintServermodeEx(request: VerifyVoiceprintServermodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyVoiceprintServermodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.voiceprint.servermode.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckRouteTwometaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 姓名
  certName: string(name='cert_name'),
  // 身份证号
  certNo: string(name='cert_no'),
  // 使用场景
  scene: string(name='scene'),
  // map结果的json数据格式，预留字段
  // 
  externParam?: string(name='extern_param'),
}

model CheckRouteTwometaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true:匹配成功 false：匹配失败
  // 
  match?: string(name='match'),
  // 扩展信息，预留字段
  // 
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 个人二要素认证（场景路由）
 * Summary: 个人二要素认证（场景路由）
 */
async function checkRouteTwometa(request: CheckRouteTwometaRequest): CheckRouteTwometaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkRouteTwometaEx(request, headers, runtime);
}

/**
 * Description: 个人二要素认证（场景路由）
 * Summary: 个人二要素认证（场景路由）
 */
async function checkRouteTwometaEx(request: CheckRouteTwometaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckRouteTwometaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.route.twometa.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 上传文件作用的openapi method
  apiCode: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ XNameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntcloudGatewayxFileUploadEx(request, headers, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

