import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.15.3',
    _prod_code = 'REALPERSON',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 音频元数据
model AudioMeta {
  // 采样率
  sampleFreq?: long(name='sample_freq', example='16000'),
  // 音频道数
  channelsNum?: long(name='channels_num', example='1'),
  // 音频数据采样点所占位数
  bits?: long(name='bits', example='16'),
  // 语音信道分离标识
  channel?: long(name='channel', example='0'),
}

// 音频文件
model Audio {
  // 音频文件名称（单次请求保持唯一）
  token?: string(name='token', example='81995a7fa2bfc132eb69cdc2028f0619.wav'),
  // 待认证的音频文件，base64编码格式
  rawData?: string(name='raw_data', example='/9j/238sn382l23f4 '),
  // 音频文件OSS地址
  audioUrl?: string(name='audio_url', example='https://xxxxxx.oss-cn-shanghai.aliyuncs.com/12345.wav'),
}

// 键值对
model XNameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

model QueryFacevrfServerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实人认证唯一标识
  certifyId: string(name='certify_id'),
  // 预留扩展业务参数
  externParam?: string(name='extern_param'),
  // 认证材料（如人脸图像）的哈希
  materialHash?: string(name='material_hash'),
  // 外部唯一标识。用于定位。
  // 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 场景ID
  sceneId: string(name='scene_id'),
}

model QueryFacevrfServerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证的主体信息，一般的认证场景返回为空
  identityInfo?: string(name='identity_info'),
  // 认证主体附件信息，一般的认证场景都是返回空
  materialInfo?: string(name='material_info'),
  // 认证材料哈希是否匹配
  materialMatched?: string(name='material_matched'),
  // 是否通过，通过为T，不通过为F
  passed?: string(name='passed'),
  // 业务失败原因
  reason?: string(name='reason'),
}

/**
 * Description: 查询认证的结果和相关信息
 * Summary: 认证查询
 */
async function queryFacevrfServer(request: QueryFacevrfServerRequest): QueryFacevrfServerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFacevrfServerEx(request, headers, runtime);
}

/**
 * Description: 查询认证的结果和相关信息
 * Summary: 认证查询
 */
async function queryFacevrfServerEx(request: QueryFacevrfServerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFacevrfServerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.facevrf.server.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFacevrfServerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证模式码
  bizCode: string(name='biz_code'),
  // h5认证完成后，服务端回调此地址通知商户认证结果
  callbackUrl?: string(name='callback_url'),
  // 真实姓名
  certName: string(name='cert_name'),
  // 证件号码
  certNo: string(name='cert_no'),
  // cert_name、cert_no两个字段的传入模式。0：明文1：密文
  encType?: string(name='enc_type'),
  // 证件类型，如身份证
  certType: string(name='cert_type'),
  // 预留扩展参数
  externParam?: string(name='extern_param'),
  // 自定义比对源人脸图像，base64编码格式
  facialPictureRef?: string(name='facial_picture_ref'),
  // 身份信息来源类型，如证件
  identityType: string(name='identity_type'),
  // metainfo 环境参数，需要通过客户端 SDK 获取
  metaInfo?: string(name='meta_info'),
  // 外部唯一标识。用于定位。
  // 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 回跳地址
  returnUrl?: string(name='return_url'),
  // 场景ID
  sceneId: string(name='scene_id'),
  // 商户自定义的用户ID
  userId?: string(name='user_id'),
  // 用户的IP
  userIp?: string(name='user_ip'),
  // 用户的手机号
  userMobile?: string(name='user_mobile'),
  // callbackUrl回调时是否需要重试，默认false(不需要重试)
  callbackNeedRetry?: boolean(name='callback_need_retry'),
  // 活体检测的类型
  model?: string(name='model'),
}

model CreateFacevrfServerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实人认证唯一标识
  certifyId?: string(name='certify_id'),
  // 认证地址。只在特定场景返回。
  certifyUrl?: string(name='certify_url'),
}

/**
 * Description: 服务端认证创建，传入认证信息，获取认证ID（和url）
 * Summary: 认证创建
 */
async function createFacevrfServer(request: CreateFacevrfServerRequest): CreateFacevrfServerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFacevrfServerEx(request, headers, runtime);
}

/**
 * Description: 服务端认证创建，传入认证信息，获取认证ID（和url）
 * Summary: 认证创建
 */
async function createFacevrfServerEx(request: CreateFacevrfServerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFacevrfServerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.facevrf.server.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecFacevrfServerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 真实姓名
  certName: string(name='cert_name'),
  // 证件号码
  certNo: string(name='cert_no'),
  // cert_name、cert_no两个字段的传入模式0：明文1：密文
  encType?: string(name='enc_type'),
  // 证件类型，如身份证
  certType: string(name='cert_type'),
  // 预留扩展参数
  externParam?: string(name='extern_param'),
  // 自定义比对源人脸图像，base64编码格式
  facialPictureRef?: string(name='facial_picture_ref'),
  // 身份信息来源类型，如证件
  identityType: string(name='identity_type'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 场景ID
  sceneId: string(name='scene_id'),
  // 商户自定义的用户ID
  userId?: string(name='user_id'),
  // 用户的IP
  userIp?: string(name='user_ip'),
  // 用户的手机号（或其哈希值）
  userMobile?: string(name='user_mobile'),
  // 待认证的人脸图像，base64编码格式
  facialPictureAuth: string(name='facial_picture_auth'),
}

model ExecFacevrfServerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证ID
  certifyId?: string(name='certify_id'),
  // 是否通过，通过为T，不通过为F
  passed?: string(name='passed'),
  // 业务失败原因
  reason?: string(name='reason'),
  // 认证主体附件信息，包含共计类型等
  materialInfo?: string(name='material_info'),
}

/**
 * Description: 纯服务端比对，直接输入待比对的图片，返回比对结果
 * Summary: 纯服务端比对
 */
async function execFacevrfServer(request: ExecFacevrfServerRequest): ExecFacevrfServerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execFacevrfServerEx(request, headers, runtime);
}

/**
 * Description: 纯服务端比对，直接输入待比对的图片，返回比对结果
 * Summary: 纯服务端比对
 */
async function execFacevrfServerEx(request: ExecFacevrfServerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecFacevrfServerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.facevrf.server.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetFacevrfEvidenceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 某次刷脸的certifyId
  certifyId: string(name='certify_id'),
}

model GetFacevrfEvidenceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 刷脸的certifyId，原样返回
  certifyId?: string(name='certify_id'),
  // 统一证据ID，非SUCCESS状态为null，可在控制台中持统一证据ID验证pdf文件的正确性，法院方也可用此统一证据ID在司法链控制台进行核验pdf文件的正确性。
  onchainId?: string(name='onchain_id'),
  // 上链状态，`SUCCESS`表示成功、`INIT`表示正在上链
  onchainStatus?: string(name='onchain_status'),
  // pdf存证是否已经过期，不支持超过6个月的存证获取
  pdfExpired?: boolean(name='pdf_expired'),
  // 存证pdf文件内容的base64
  pdfContent?: string(name='pdf_content'),
}

/**
 * Description: 传入某次刷脸的certifyID，获得刷脸存证的pdf文件和司法脸统一证据ID，这两份数据可以在司法链的控制台中进行核验存证是否被记录在区块链上从而证实其真实可信。
 * Summary: 商户获取司法链上刷脸存证和统一证据ID
 */
async function getFacevrfEvidence(request: GetFacevrfEvidenceRequest): GetFacevrfEvidenceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getFacevrfEvidenceEx(request, headers, runtime);
}

/**
 * Description: 传入某次刷脸的certifyID，获得刷脸存证的pdf文件和司法脸统一证据ID，这两份数据可以在司法链的控制台中进行核验存证是否被记录在区块链上从而证实其真实可信。
 * Summary: 商户获取司法链上刷脸存证和统一证据ID
 */
async function getFacevrfEvidenceEx(request: GetFacevrfEvidenceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFacevrfEvidenceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.facevrf.evidence.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckIndividualidTwometaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 姓名
  certName: string(name='cert_name'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // map结果的json数据格式，预留字段
  externParam?: string(name='extern_param'),
  // 认证子类型
  scene?: string(name='scene'),
}

model CheckIndividualidTwometaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true:匹配成功  false：匹配失败
  match?: string(name='match'),
  // 扩展信息，预留字段
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 个人二要素认证
 * Summary: 个人二要素认证
 */
async function checkIndividualidTwometa(request: CheckIndividualidTwometaRequest): CheckIndividualidTwometaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkIndividualidTwometaEx(request, headers, runtime);
}

/**
 * Description: 个人二要素认证
 * Summary: 个人二要素认证
 */
async function checkIndividualidTwometaEx(request: CheckIndividualidTwometaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckIndividualidTwometaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.individualid.twometa.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckIndividualidThreemetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 姓名
  certName: string(name='cert_name'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // 手机号码
  mobile: string(name='mobile'),
  // map结果的json数据格式，预留字段
  // 
  externParam?: string(name='extern_param'),
}

model CheckIndividualidThreemetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true:匹配成功 false：匹配失败
  match?: string(name='match'),
  // 扩展信息，预留字段
  // 
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 个人三要素认证
 * Summary: 个人三要素认证
 */
async function checkIndividualidThreemeta(request: CheckIndividualidThreemetaRequest): CheckIndividualidThreemetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkIndividualidThreemetaEx(request, headers, runtime);
}

/**
 * Description: 个人三要素认证
 * Summary: 个人三要素认证
 */
async function checkIndividualidThreemetaEx(request: CheckIndividualidThreemetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckIndividualidThreemetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.individualid.threemeta.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckIndividualidFourmetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 姓名
  // 
  certName: string(name='cert_name'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // 手机号码
  mobile: string(name='mobile'),
  // 银行卡号
  bankCard: string(name='bank_card'),
  // map结果的json数据格式，预留字段
  // 
  externParam?: string(name='extern_param'),
  // 证件类型： 1：居民身份证（默认值） 2：军官证 3：护照 4：回乡证 5：台胞证 6：警官证 7：士兵证 99：其他
  certType?: string(name='cert_type'),
}

model CheckIndividualidFourmetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true:匹配成功 false：匹配失败
  // 
  match?: string(name='match'),
  // 扩展信息，预留字段
  // 
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 个人四要素认证
 * Summary: 个人四要素认证
 */
async function checkIndividualidFourmeta(request: CheckIndividualidFourmetaRequest): CheckIndividualidFourmetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkIndividualidFourmetaEx(request, headers, runtime);
}

/**
 * Description: 个人四要素认证
 * Summary: 个人四要素认证
 */
async function checkIndividualidFourmetaEx(request: CheckIndividualidFourmetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckIndividualidFourmetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.individualid.fourmeta.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckRouteThreemetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 姓名
  certName: string(name='cert_name'),
  // 身份证号
  certNo: string(name='cert_no'),
  // 手机号
  mobile: string(name='mobile'),
  // 使用场景
  scene: string(name='scene'),
  // 三要素的加密方式，NONE/MD5/SHA256
  reqEncType?: string(name='req_enc_type'),
  // map结果的json数据格式，预留字段
  externParam?: string(name='extern_param'),
}

model CheckRouteThreemetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true:匹配成功 false：匹配失败
  match?: string(name='match'),
  // 扩展信息，预留字段
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 个人三要素认证（场景路由）
 * Summary: 个人三要素认证（场景路由）
 */
async function checkRouteThreemeta(request: CheckRouteThreemetaRequest): CheckRouteThreemetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkRouteThreemetaEx(request, headers, runtime);
}

/**
 * Description: 个人三要素认证（场景路由）
 * Summary: 个人三要素认证（场景路由）
 */
async function checkRouteThreemetaEx(request: CheckRouteThreemetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckRouteThreemetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.route.threemeta.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateVoiceprintServermodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 商户自定义的用户ID
  userId: string(name='user_id'),
  // 音频文件流
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId?: string(name='file_id'),
  // 音频元数据
  audioMeta: AudioMeta(name='audio_meta'),
  // 音频文件集合
  audios: [ Audio ](name='audios'),
  // 预留扩展参数
  externParam?: string(name='extern_param'),
}

model CreateVoiceprintServermodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 扩展信息，预留字段
  externInfo?: string(name='extern_info'),
  // 产品结果明细，不影响决策
  resultCodeSub?: string(name='result_code_sub'),
  // result_code_sub对应的文案
  resultMsgSub?: string(name='result_msg_sub'),
}

/**
 * Description: 纯服务端声纹注册
 * Summary: 纯服务端声纹注册
 */
async function createVoiceprintServermode(request: CreateVoiceprintServermodeRequest): CreateVoiceprintServermodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createVoiceprintServermodeEx(request, headers, runtime);
}

/**
 * Description: 纯服务端声纹注册
 * Summary: 纯服务端声纹注册
 */
async function createVoiceprintServermodeEx(request: CreateVoiceprintServermodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateVoiceprintServermodeResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'di.realperson.voiceprint.servermode.create',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var createVoiceprintServermodeResponse = new CreateVoiceprintServermodeResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return createVoiceprintServermodeResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.voiceprint.servermode.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyVoiceprintServermodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 商户自定义的用户ID
  userId: string(name='user_id'),
  // 音频文件，base64编码格式
  // 
  audioAuth?: string(name='audio_auth'),
  // 音频文件OSS地址
  audioUrl?: string(name='audio_url'),
  // 音频元数据
  audioMeta: AudioMeta(name='audio_meta'),
  // 预留扩展参数
  externParam?: string(name='extern_param'),
}

model VerifyVoiceprintServermodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 声纹认证唯一ID
  certifyId?: string(name='certify_id'),
  // 扩展信息，预留字段
  externInfo?: string(name='extern_info'),
  // 产品结果明细，不影响决策
  resultCodeSub?: string(name='result_code_sub'),
  // result_code_sub对应的文案
  resultMsgSub?: string(name='result_msg_sub'),
}

/**
 * Description: 纯服务端声纹比对
 * Summary: 纯服务端声纹比对
 */
async function verifyVoiceprintServermode(request: VerifyVoiceprintServermodeRequest): VerifyVoiceprintServermodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyVoiceprintServermodeEx(request, headers, runtime);
}

/**
 * Description: 纯服务端声纹比对
 * Summary: 纯服务端声纹比对
 */
async function verifyVoiceprintServermodeEx(request: VerifyVoiceprintServermodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyVoiceprintServermodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.voiceprint.servermode.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckRouteTwometaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 姓名
  certName: string(name='cert_name'),
  // 身份证号
  certNo: string(name='cert_no'),
  // 使用场景
  scene: string(name='scene'),
  // map结果的json数据格式，预留字段
  // 
  externParam?: string(name='extern_param'),
}

model CheckRouteTwometaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true:匹配成功 false：匹配失败
  // 
  match?: string(name='match'),
  // 扩展信息，预留字段
  // 
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 个人二要素认证（场景路由）
 * Summary: 个人二要素认证（场景路由）
 */
async function checkRouteTwometa(request: CheckRouteTwometaRequest): CheckRouteTwometaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkRouteTwometaEx(request, headers, runtime);
}

/**
 * Description: 个人二要素认证（场景路由）
 * Summary: 个人二要素认证（场景路由）
 */
async function checkRouteTwometaEx(request: CheckRouteTwometaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckRouteTwometaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.route.twometa.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMobileRiskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo: string(name='outer_order_no'),
  // 设备身份临时标识
  apdidToken: string(name='apdid_token'),
  // 接口使用场景，不同场景下接口返回字段集合会有差异，可缺省
  scene?: string(name='scene'),
}

model QueryMobileRiskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备相关数据，默认只返回apdid，由Map<String,String>序列化
  deviceInfo?: string(name='device_info'),
  // 设备风险标签，由Map<String,String>序列化
  riskInfo?: string(name='risk_info'),
}

/**
 * Description: 通过移动设备身份临时标识查询该设备相关的设备风险信息的服务
 * Summary: 移动风险设备查询
 */
async function queryMobileRisk(request: QueryMobileRiskRequest): QueryMobileRiskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMobileRiskEx(request, headers, runtime);
}

/**
 * Description: 通过移动设备身份临时标识查询该设备相关的设备风险信息的服务
 * Summary: 移动风险设备查询
 */
async function queryMobileRiskEx(request: QueryMobileRiskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMobileRiskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.mobile.risk.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailFacevrfServerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实人认证唯一标识
  certifyId: string(name='certify_id'),
  // 预留扩展业务参数
  externParam?: string(name='extern_param'),
}

model DetailFacevrfServerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // PASS：认证通过
  // FAIL：认证不通过
  // NO_RECODE：无认证记录
  // PROCESSING：认证中
  state?: string(name='state'),
  // 认证人信息，包括姓名和身份证号，不加密
  // state为PASS/FAIL/PROCESSING时为JSON字符串，为NO_RECORD时为空
  identityInfo?: string(name='identity_info'),
  // 预留扩展结果
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 通过认证ID查询认证人、认证时间等相关信息，供智科内部使用
 * Summary: 查询认证人、认证时间等相关信息
 */
async function detailFacevrfServer(request: DetailFacevrfServerRequest): DetailFacevrfServerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailFacevrfServerEx(request, headers, runtime);
}

/**
 * Description: 通过认证ID查询认证人、认证时间等相关信息，供智科内部使用
 * Summary: 查询认证人、认证时间等相关信息
 */
async function detailFacevrfServerEx(request: DetailFacevrfServerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailFacevrfServerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.facevrf.server.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckAnticheatPersonalRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部请求id
  outerOrderNo: string(name='outer_order_no'),
  // 主体姓名
  certName?: string(name='cert_name'),
  // 主体身份证号
  certNo: string(name='cert_no'),
  // 受雇企业
  companyName: string(name='company_name'),
  // 组织机构代码
  companyNo?: string(name='company_no'),
  // 扩展字段，json格式
  externParam?: string(name='extern_param'),
}

model CheckAnticheatPersonalResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 风险等级
  riskLevel?: string(name='risk_level'),
  // 风险等级文字描述
  riskLevelDesc?: string(name='risk_level_desc'),
  // 扩展信息
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 临工场景等场景下，通过主体的社保缴纳情况进行的反欺诈校验
 * Summary: 个人反欺诈风险校验
 */
async function checkAnticheatPersonal(request: CheckAnticheatPersonalRequest): CheckAnticheatPersonalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkAnticheatPersonalEx(request, headers, runtime);
}

/**
 * Description: 临工场景等场景下，通过主体的社保缴纳情况进行的反欺诈校验
 * Summary: 个人反欺诈风险校验
 */
async function checkAnticheatPersonalEx(request: CheckAnticheatPersonalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckAnticheatPersonalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.anticheat.personal.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckTwometaHashRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // hash后的身份证号，不区分大小写，使用的hash算法参考hash_type字段
  certNoHash: string(name='cert_no_hash'),
  // hash后的姓名，不区分大小写，使用的hash类型参考hash_type
  certNameHash: string(name='cert_name_hash'),
  // 本次核验id
  outerOrderId: string(name='outer_order_id'),
  // 支持的hash类型
  hashType: string(name='hash_type'),
  // json格式的扩展字段
  externInfo?: string(name='extern_info'),
}

model CheckTwometaHashResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 二要素支持hash主体信息
 * Summary: 个人二要素核验支持hash的主体信息
 */
async function checkTwometaHash(request: CheckTwometaHashRequest): CheckTwometaHashResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkTwometaHashEx(request, headers, runtime);
}

/**
 * Description: 二要素支持hash主体信息
 * Summary: 个人二要素核验支持hash的主体信息
 */
async function checkTwometaHashEx(request: CheckTwometaHashRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckTwometaHashResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.twometa.hash.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryThreemetaOnlinetimeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部请求id
  outerOrderNo: string(name='outer_order_no'),
  // 姓名
  certName: string(name='cert_name'),
  // 身份证号
  certNo: string(name='cert_no'),
  // 手机号码
  phoneNo: string(name='phone_no'),
  // 是否区分运营商
  divCarrier?: boolean(name='div_carrier'),
  // 运营商类型
  carrier?: string(name='carrier'),
  // 扩展参数
  externParam?: string(name='extern_param'),
}

model QueryThreemetaOnlinetimeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 在网时长标准码，规则：
  // 1: [0,3)表示在⽹时⻓是 0~3 个⽉
  // 2: [3,6)表示在⽹时⻓是 3~6 个⽉
  // 3: [6,12)表示在⽹时⻓是 6~12 个⽉
  // 4: [12,24)表示在⽹时⻓是 12~24 ⽉
  // 5: [24,+)表示在⽹时⻓是 24个⽉及以上
  lengthCode?: string(name='length_code'),
  // 扩展信息，json格式
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 对接运营商等数据源查询手机号码的在网时长
 * Summary: 三要素在网时长查询接口
 */
async function queryThreemetaOnlinetime(request: QueryThreemetaOnlinetimeRequest): QueryThreemetaOnlinetimeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryThreemetaOnlinetimeEx(request, headers, runtime);
}

/**
 * Description: 对接运营商等数据源查询手机号码的在网时长
 * Summary: 三要素在网时长查询接口
 */
async function queryThreemetaOnlinetimeEx(request: QueryThreemetaOnlinetimeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryThreemetaOnlinetimeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.threemeta.onlinetime.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitFacevrfZimRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务参数
  bizData?: string(name='biz_data'),
  // 渠道
  channel?: string(name='channel'),
  // 商户
  merchant?: string(name='merchant'),
  // 环境参数
  metaInfo: string(name='meta_info'),
  // 产品节点
  produceNode?: string(name='produce_node'),
  // 产品名称
  productName?: string(name='product_name'),
  // 实人认证id
  // 
  zimId: string(name='zim_id'),
  // 身份信息参数
  // 
  zimPrincipal?: string(name='zim_principal'),
}

model InitFacevrfZimResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 预留扩展结果
  // 
  extParams?: string(name='ext_params'),
  // 描述
  message?: string(name='message'),
  // 协议
  protocol?: string(name='protocol'),
  // 返回码
  retCode?: string(name='ret_code'),
  // 明细返回码
  retCodeSub?: string(name='ret_code_sub'),
  // 明细返回码对应的文案
  retMessageSub?: string(name='ret_message_sub'),
  // 实人认证id
  zimId?: string(name='zim_id'),
}

/**
 * Description: 客户端初始化认证(OEM专用)
 * Summary: 客户端初始化认证(OEM专用)
 */
async function initFacevrfZim(request: InitFacevrfZimRequest): InitFacevrfZimResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initFacevrfZimEx(request, headers, runtime);
}

/**
 * Description: 客户端初始化认证(OEM专用)
 * Summary: 客户端初始化认证(OEM专用)
 */
async function initFacevrfZimEx(request: InitFacevrfZimRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitFacevrfZimResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.facevrf.zim.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyFacevrfZimRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 扩展信息,Map的json格式
  externParam?: string(name='extern_param'),
  // 人脸业务参数
  zimData: string(name='zim_data'),
  // 7501f6c2dd57e06fe0d4202d3aaab58e
  zimId: string(name='zim_id'),
}

model VerifyFacevrfZimResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 预留扩展结果
  extParams?: string(name='ext_params'),
  // ""
  hasNext?: string(name='has_next'),
  // ""
  nextProtocol?: string(name='next_protocol'),
  // 产品返回明细码
  productRetCode?: string(name='product_ret_code'),
  // 明细返回码
  retCodeSub?: string(name='ret_code_sub'),
  // 明细返回码对应的文案
  retMessageSub?: string(name='ret_message_sub'),
  // 验证返回明细码
  validationRetCode?: string(name='validation_ret_code'),
}

/**
 * Description: 客户端人脸验证(OEM专用)
 * Summary: 客户端人脸验证(OEM专用)
 */
async function verifyFacevrfZim(request: VerifyFacevrfZimRequest): VerifyFacevrfZimResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyFacevrfZimEx(request, headers, runtime);
}

/**
 * Description: 客户端人脸验证(OEM专用)
 * Summary: 客户端人脸验证(OEM专用)
 */
async function verifyFacevrfZimEx(request: VerifyFacevrfZimRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyFacevrfZimResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.facevrf.zim.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RecognizeDocIndividualcardRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 长度不超过32位的0-9A-Za-z字符串。
  // 外部请求ID，由调用方自行生成并自行保证唯一，以便问题定位。
  outOrderNo: string(name='out_order_no'),
  // 待识别的卡类型。取值约束：ID_CARD（身份证）;EEP_TO_ML_CARD（港澳来往大陆通行证）;BANK_CARD（银行卡）
  ocrType: string(name='ocr_type'),
  // 传入的图片是base64编码的图片还是图片的URL。取值约束：BASE64（类型为base64）；URL（暂不支持）
  dataType: string(name='data_type'),
  // 传入的图片的具体内容，需要与data_type的选择保持一致。
  dataContent: string(name='data_content'),
  // 入参data_content是否经AES加密。不填默认不加密。取值约束：0（不加密）；1（加密）
  reqEncType?: string(name='req_enc_type'),
  // 出参ocr_info是否经AES加密。不填默认不加密。取值约束：0（不加密）；1（加密）
  respEncType?: string(name='resp_enc_type'),
  // 经过公钥RSA加密的AES密钥，用于对出参ocr_info加密。当req_enc_type = 1或resp_enc_type = 1时必填。
  encToken?: string(name='enc_token'),
  // 是否启用防伪检测，如果启用，出参会输出riskInfo字段。不填默认不启用防伪。取值约束：0（不启用）；1（启用）
  riskInfoType?: string(name='risk_info_type'),
  // 扩展信息JSON串。
  externParam?: string(name='extern_param'),
}

model RecognizeDocIndividualcardResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果码
  retCode?: string(name='ret_code'),
  // 错误码
  retCodeSub?: string(name='ret_code_sub'),
  // 错误信息
  retMessageSub?: string(name='ret_message_sub'),
  // 识别结果，为JSON串。如果入参resp_enc_type=1则是经过AES加密后的JSON串。
  ocrInfo?: string(name='ocr_info'),
  // 防伪结果，为JSON串。如果入参resp_enc_type=1则是经过AES加密后的JSON串。
  // 如果不启用防伪，则不返回该字段。
  riskInfo?: string(name='risk_info'),
  // 扩展信息JSON串。
  extInfo?: string(name='ext_info'),
}

/**
 * Description: 卡证OCR
 * Summary: 卡证OCR
 */
async function recognizeDocIndividualcard(request: RecognizeDocIndividualcardRequest): RecognizeDocIndividualcardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return recognizeDocIndividualcardEx(request, headers, runtime);
}

/**
 * Description: 卡证OCR
 * Summary: 卡证OCR
 */
async function recognizeDocIndividualcardEx(request: RecognizeDocIndividualcardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RecognizeDocIndividualcardResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.doc.individualcard.recognize', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckThreemetaBankcardRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部请求ID，由调用方自行生成并自行保证唯一，以便问题定位。
  outerOrderNo: string(name='outer_order_no'),
  // 姓名
  certName: string(name='cert_name'),
  // 身份证号
  certNo: string(name='cert_no'),
  // 银行卡号
  bankCard: string(name='bank_card'),
  // 扩展信息，Map的json格式
  externParam?: string(name='extern_param'),
  // 证件类型： 1：居民身份证（默认值） 2：军官证 3：护照 4：回乡证 5：台胞证 6：警官证 7：士兵证 99：其他
  certType?: string(name='cert_type'),
}

model CheckThreemetaBankcardResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true:匹配成功 false：匹配失败
  match?: string(name='match'),
  // 扩展信息，Map的json格式。
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 个人银行卡三要素
 * Summary: 个人银行卡三要素
 */
async function checkThreemetaBankcard(request: CheckThreemetaBankcardRequest): CheckThreemetaBankcardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkThreemetaBankcardEx(request, headers, runtime);
}

/**
 * Description: 个人银行卡三要素
 * Summary: 个人银行卡三要素
 */
async function checkThreemetaBankcardEx(request: CheckThreemetaBankcardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckThreemetaBankcardResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.threemeta.bankcard.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeepsecRiskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区分不同应用
  appName: string(name='app_name'),
  // app_key
  appKey?: string(name='app_key'),
  // 业务数据集合，包括业务数据如zimId，Map<String,String>
  bizData: string(name='biz_data'),
  // 风险数据集合，包括加密的R风险数据、设备染色数据，Map<String, String>
  riskData: string(name='risk_data'),
}

model QueryDeepsecRiskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否调用成功
  success?: boolean(name='success'),
  // 业务返回码
  code?: string(name='code'),
  // message	返回信息
  message?: string(name='message'),
  // 设备风险标签
  riskInfo?: string(name='risk_info'),
  // 设备染色风险标签
  dcRisk?: string(name='dc_risk'),
  // 业务风险标签
  bizRisk?: string(name='biz_risk'),
  // 设备元数据
  deviceInfo?: string(name='device_info'),
}

/**
 * Description: deepsec终端安全风险标签查询
 * Summary: deepsec终端安全风险标签查询
 */
async function queryDeepsecRisk(request: QueryDeepsecRiskRequest): QueryDeepsecRiskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeepsecRiskEx(request, headers, runtime);
}

/**
 * Description: deepsec终端安全风险标签查询
 * Summary: deepsec终端安全风险标签查询
 */
async function queryDeepsecRiskEx(request: QueryDeepsecRiskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeepsecRiskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.deepsec.risk.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeepsecTsbmrqRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用来源
  appId?: string(name='app_id'),
  // 环境id
  envId?: string(name='env_id'),
  // request id
  requestId?: string(name='request_id'),
  // 租户
  tenantId: string(name='tenant_id'),
  // 商户id
  merchantId: string(name='merchant_id'),
  // 应用来源名称, 也被用作渠道名称
  appName?: string(name='app_name'),
  // 是否测试流量, 测试流量会在处理过程中有特殊处理
  testFlow?: boolean(name='test_flow'),
  // apdidToken
  apdidToken: string(name='apdid_token'),
}

model QueryDeepsecTsbmrqResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备信息
  deviceInfo?: string(name='device_info'),
  // 风险信息标签
  riskInfo?: string(name='risk_info'),
  // 业务message
  message?: string(name='message'),
}

/**
 * Description: deepsec终端安全api，用于apdid查询
 * Summary: tsbmrq设备id查询入口
 */
async function queryDeepsecTsbmrq(request: QueryDeepsecTsbmrqRequest): QueryDeepsecTsbmrqResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeepsecTsbmrqEx(request, headers, runtime);
}

/**
 * Description: deepsec终端安全api，用于apdid查询
 * Summary: tsbmrq设备id查询入口
 */
async function queryDeepsecTsbmrqEx(request: QueryDeepsecTsbmrqRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeepsecTsbmrqResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.deepsec.tsbmrq.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryThreemetaPhonereuseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部请求ID，由调用方自行生成并自行保证唯一，以便问题定位。
  outerOrderNo: string(name='outer_order_no'),
  // 手机号
  mobile: string(name='mobile'),
  // 日期
  date: string(name='date'),
  // 运营商类型
  carrier?: string(name='carrier'),
  // 扩展参数
  externParam?: string(name='extern_param'),
}

model QueryThreemetaPhonereuseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否二次放号
  phoneReuse?: string(name='phone_reuse'),
  // 扩展参数
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 个人运营商二次放号
 * Summary: 个人运营商二次放号
 */
async function queryThreemetaPhonereuse(request: QueryThreemetaPhonereuseRequest): QueryThreemetaPhonereuseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryThreemetaPhonereuseEx(request, headers, runtime);
}

/**
 * Description: 个人运营商二次放号
 * Summary: 个人运营商二次放号
 */
async function queryThreemetaPhonereuseEx(request: QueryThreemetaPhonereuseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryThreemetaPhonereuseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.threemeta.phonereuse.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTscenterDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备token
  apdidToken?: string(name='apdid_token'),
  // appname
  appName?: string(name='app_name'),
  // app key client
  appKeyClient?: string(name='app_key_client'),
  // app key server
  appKeyServer?: string(name='app_key_server'),
}

model QueryTscenterDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备信息字符串
  deviceInfo?: string(name='device_info'),
}

/**
 * Description: 查询设备信息
 * Summary: 设备信息查询for蚁盾
 */
async function queryTscenterDevice(request: QueryTscenterDeviceRequest): QueryTscenterDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTscenterDeviceEx(request, headers, runtime);
}

/**
 * Description: 查询设备信息
 * Summary: 设备信息查询for蚁盾
 */
async function queryTscenterDeviceEx(request: QueryTscenterDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTscenterDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.tscenter.device.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEducationInfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部请求ID，为32位以内的字母数字组合，由调用方自行生成、保证唯一并留存，以便问题定位。
  outerOrderNo: string(name='outer_order_no'),
  // 身份证号
  certNo: string(name='cert_no'),
  // 姓名
  certName: string(name='cert_name'),
  // 用户是否授权
  authorized: boolean(name='authorized'),
  // 扩展信息，预留字段
  externParam?: string(name='extern_param'),
}

model QueryEducationInfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 学历信息
  educationInfo?: string(name='education_info'),
  // 扩展信息，预留字段
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 学历验证
 * Summary: 学历验证
 */
async function queryEducationInfo(request: QueryEducationInfoRequest): QueryEducationInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEducationInfoEx(request, headers, runtime);
}

/**
 * Description: 学历验证
 * Summary: 学历验证
 */
async function queryEducationInfoEx(request: QueryEducationInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEducationInfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.education.info.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDemoInfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // token
  token: string(name='token'),
}

model QueryDemoInfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // record json
  record?: string(name='record'),
}

/**
 * Description: demo用记录查询
 * Summary: demo用记录查询
 */
async function queryDemoInfo(request: QueryDemoInfoRequest): QueryDemoInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDemoInfoEx(request, headers, runtime);
}

/**
 * Description: demo用记录查询
 * Summary: demo用记录查询
 */
async function queryDemoInfoEx(request: QueryDemoInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDemoInfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.demo.info.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckBankcardTwometaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 	外部请求ID，为32位以内的字母数字组合，由调用方自行生成、保证唯一并留存，以便问题定位。
  outerOrderNo: string(name='outer_order_no'),
  // 要素入参模式： 1：银行卡号+姓名 2：银行卡号+证件号 3：银行卡号+手机号
  metaMode: string(name='meta_mode'),
  // 证件类型： 1：居民身份证（默认值） 2：军官证 3：护照 4：回乡证 5：台胞证 6：警官证 7：士兵证 99：其他
  certType?: string(name='cert_type'),
  // 银行卡号
  bankCard: string(name='bank_card'),
  // 手机号码
  mobile?: string(name='mobile'),
  // 姓名
  certName?: string(name='cert_name'),
  // 证件号
  certNo?: string(name='cert_no'),
  // 扩展信息，预留字段
  externParam?: string(name='extern_param'),
}

model CheckBankcardTwometaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 扩展信息，为JSONObject。
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 个人银行卡二要素
 * Summary: 个人银行卡二要素
 */
async function checkBankcardTwometa(request: CheckBankcardTwometaRequest): CheckBankcardTwometaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkBankcardTwometaEx(request, headers, runtime);
}

/**
 * Description: 个人银行卡二要素
 * Summary: 个人银行卡二要素
 */
async function checkBankcardTwometaEx(request: CheckBankcardTwometaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckBankcardTwometaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.bankcard.twometa.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckCarrierTwometaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部请求ID，为32位以内的字母数字组合，由调用方自行生成、保证唯一并留存，以便问题定位。
  outerOrderNo: string(name='outer_order_no'),
  // 要素入参模式：
  // 1：手机号+姓名
  // 2：手机号+身份证号
  metaMode: string(name='meta_mode'),
  // 手机号码
  mobile: string(name='mobile'),
  // 姓名
  certName?: string(name='cert_name'),
  // 身份证号
  certNo?: string(name='cert_no'),
  // 运营商类型：
  // CHINA_TELECOM；
  // CHINA_MOBILE；
  // CHINA_UNICOM
  carrier?: string(name='carrier'),
  // 扩展信息，预留字段
  externParam: string(name='extern_param'),
}

model CheckCarrierTwometaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 扩展信息，为JSONObject。
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 个人运营商二要素
 * Summary: 个人运营商二要素
 */
async function checkCarrierTwometa(request: CheckCarrierTwometaRequest): CheckCarrierTwometaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkCarrierTwometaEx(request, headers, runtime);
}

/**
 * Description: 个人运营商二要素
 * Summary: 个人运营商二要素
 */
async function checkCarrierTwometaEx(request: CheckCarrierTwometaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckCarrierTwometaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.carrier.twometa.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateNfcServerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 证件类型，ID_CARD，PASSPORT
  certType: string(name='cert_type'),
  // 证件号码
  certNo?: string(name='cert_no'),
  // 证件姓名
  certName?: string(name='cert_name'),
  // 出生日期
  birthday?: string(name='birthday'),
  // 证件有效期
  validateDate?: string(name='validate_date'),
  // 护照要素录入模式 NONE MANUAL TRANS
  mode?: string(name='mode'),
  // 扩展参数
  // {"syntheticEdoc":"Y"     是否合成证件图"}
  // {"obtainDocPhoto":"Y"    是否获取高清人像"}
  externParam?: string(name='extern_param'),
  // metainfo 环境参数，需要通过客户端 SDK 获取
  metaInfo: string(name='meta_info'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面...
  outerOrderNo: string(name='outer_order_no'),
  // 场景ID
  sceneId: string(name='scene_id'),
  // 商户自定义的用户ID
  userId?: string(name='user_id'),
}

model CreateNfcServerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实人认证唯一标识
  certifyId?: string(name='certify_id'),
}

/**
 * Description: NFC实证
 * Summary: NFC实证
 */
async function createNfcServer(request: CreateNfcServerRequest): CreateNfcServerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createNfcServerEx(request, headers, runtime);
}

/**
 * Description: NFC实证
 * Summary: NFC实证
 */
async function createNfcServerEx(request: CreateNfcServerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateNfcServerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.nfc.server.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNfcServerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实人认证唯一标识
  certifyId: string(name='certify_id'),
  // 预留扩展业务参数
  externParam?: string(name='extern_param'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面...
  outerOrderNo: string(name='outer_order_no'),
  // 场景ID
  sceneId: string(name='scene_id'),
}

model QueryNfcServerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否通过，通过为T，不通过为F
  passed?: string(name='passed'),
  // 业务失败原因
  reason?: string(name='reason'),
  // 认证主体附件信息，一般的认证场景都是返回空
  materialInfo?: string(name='material_info'),
}

/**
 * Description: NFC实证
 * Summary: NFC实证
 */
async function queryNfcServer(request: QueryNfcServerRequest): QueryNfcServerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNfcServerEx(request, headers, runtime);
}

/**
 * Description: NFC实证
 * Summary: NFC实证
 */
async function queryNfcServerEx(request: QueryNfcServerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNfcServerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.nfc.server.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySocialriskDetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求ID，为32位以内的字母数字组合，由调用方自行生成、保证唯一并留存，以便问题定位和授权抽查。
  outerOrderNo: string(name='outer_order_no'),
  // 入参加密模式：
  // NONE：不加密；
  // RSA：RSA加密；
  // SM2：SM2加密。
  encType: string(name='enc_type'),
  // 姓名（根据enc_type决定加密方式）
  certName: string(name='cert_name'),
  // 身份证号（根据enc_type决定加密方式）
  certNo: string(name='cert_no'),
  // 扩展信息，预留字段
  externParam?: string(name='extern_param'),
}

model QuerySocialriskDetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 风险信息，为JSONObject.
  riskInfo?: string(name='risk_info'),
  // 扩展信息，预留字段。
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 社会安全风险
 * Summary: 社会安全风险
 */
async function querySocialriskDetail(request: QuerySocialriskDetailRequest): QuerySocialriskDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySocialriskDetailEx(request, headers, runtime);
}

/**
 * Description: 社会安全风险
 * Summary: 社会安全风险
 */
async function querySocialriskDetailEx(request: QuerySocialriskDetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySocialriskDetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.socialrisk.detail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 上传文件作用的openapi method
  apiCode: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ XNameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntcloudGatewayxFileUploadEx(request, headers, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

