import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.0',
    _prod_code = 'ak_2abe765c32934341bd9bb6cc1c8ff589',
    _prod_channel = 'saas'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 订单包含的单个商品模型
model OrderGoodsModel {
  // 商品 id
  productId: string(maxLength=50, minLength=0, name='product_id', example='1'),
  // 商品版本，每个商品的编码+版本 唯一确认一个产品信息，必须为自然数，如"0","1","10"等
  productVersion: long(name='product_version', example='1'),
  // 商品名称
  productName: string(maxLength=50, minLength=0, name='product_name', example='测试洗面奶'),
  // 商品价格,精确到分，即 1234 表示 12.34 元
  productPrice: long(name='product_price', example='1234'),
  // 商品(3C产品)的设备 id
  productImeiId: string(maxLength=200, minLength=0, name='product_imei_id', example='xxx'),
  // 链上采购供应商租户 id，提供商品方的金融科技租户 id，否则平台自己名称
  supplierId: string(maxLength=50, minLength=0, name='supplier_id', example='001'),
  // 商品数量，不能为空，且大于 0
  productNumber: long(name='product_number', example='1'),
}

// 订单还款计划
model PromiseInfo {
  // 订单 id
  orderId: string(maxLength=50, minLength=1, name='order_id', example='order_v1_test_0918_001'),
  // 宽限期，精确到 毫秒，产生罚息的延迟时间范围。
  dateLimit: long(minimum=0, name='date_limit', example='1000'),
  // 应付租金时间，格式为 2019-08-31 12:00:00
  // yyyy-MM-dd HH:mm:ss
  payDateList: [ string ](name='pay_date_list', example='[_2019-08-31 12:00:00_, _2019-08-31 12:00:00_]'),
  // 租期
  payPeriod: long(minimum=1, name='pay_period', example='12'),
  // 应付租金，精确到分，即 1234 表示 12.34 元
  payMoneyList: [ long ](name='pay_money_list', example='[1234, 1234]'),
  // 租赁公司支付宝 UID
  leaseAlipayUid: string(maxLength=50, minLength=1, name='lease_alipay_uid', example='2088******'),
}

// 同步订单中的下单人信息
model UserSyncInfo {
  // 外部同步的订单 id
  orderId: string(maxLength=50, minLength=1, name='order_id', example='order_v1_test_0918_001'),
  // 用户登录名，租赁平台会员ID/若支付宝ID必传
  loginId: string(maxLength=50, minLength=1, name='login_id', example='2088*****'),
  // 户登录名类型 1.商户会员2.支付宝3.其他
  loginType: long(name='login_type', example='1'),
  // 用户登录时间 格式为2019-08-31 12:00:00
  loginTime: string(maxLength=32, minLength=1, name='login_time', example='2019-08-31 12:00:00'),
  // 租赁人姓名，这里是用户通过公钥加密后的密文
  userName: string(maxLength=500, minLength=1, name='user_name', example='张三'),
  // 租赁人身份证，这里是用户通过公钥加密后的密文
  userId: string(maxLength=500, minLength=1, name='user_id', example='42110******1290437'),
  // 承租人手机号，这里是用户通过公钥加密后的密文
  userPhoneNumber: string(maxLength=500, minLength=1, name='user_phone_number', example='157****8924'),
  // 身份认证类型 1支付宝实人，2芝麻实人，3非蚂蚁实人
  userType: string(maxLength=2, minLength=1, name='user_type', example='1'),
  // 支付宝账号信息
  alipayUid: string(maxLength=64, minLength=1, name='alipay_uid', example='2088****'),
  // 出租企业名称
  leaseCorpName: string(maxLength=50, minLength=1, name='lease_corp_name', example='深圳市爱租机科技有限公司'),
  // 出租企业统一社会信用代码
  leaseCorpId: string(maxLength=50, minLength=0, name='lease_corp_id', example='xxxx'),
  // 出租法定代表人姓名
  leaseCorpOwnerName: string(maxLength=50, minLength=1, name='lease_corp_owner_name', example='张三'),
  // 1.企业用户 2.个人用户
  lesseeType: long(name='lessee_type', example='1'),
  // 营业执照对应的名称
  leasedEnterprise?: string(maxLength=50, minLength=1, name='leased_enterprise', example='爱租机'),
  // 租赁⼈身份证照⽚正⾯地址
  userImageUrl?: string(maxLength=1000, minLength=0, name='user_image_url', example='https://www.nicholsfleet.com/images/uploads/blog/ledwell_rollback.jpg'),
  // 租赁⼈身份证照⽚反⾯地址
  userBackImageUrl?: string(maxLength=1000, minLength=0, name='user_back_image_url', example='https://www.nicholsfleet.com/images/uploads/blog/ledwell_rollback.jpg'),
  // 平台注册的电话，这里是用户通过公钥加密后的密文
  registeredTelephoneNumber?: string(maxLength=500, minLength=0, name='registered_telephone_number', example='180****9196'),
  // 承租企业实际控制人（股东/法人）身份证号
  actualControllerId?: string(maxLength=500, minLength=0, name='actual_controller_id', example='1063**********0098'),
  // 承租企业实际控制人（股东/法人）手机号。若为企业类型必填，字段长度：不超过 500
  actualControllerNumber?: string(name='actual_controller_number', example='191****9091'),
  // 承租企业实际控制人（股东/法人）姓名，若为企业类型必填
  actualControllerName?: string(maxLength=1000, minLength=0, name='actual_controller_name', example='张三'),
  // 承租企业实际控制人（股东/法人）身份证正面地址，若为企业类型必填
  actualControllerImageUrl?: string(maxLength=50, minLength=0, name='actual_controller_image_url', example='https://www.nicholsfleet.com/images/uploads/blog/ledwell_rollback.jpg'),
  // 承租企业实际控制人（股东/法人）身份证反面地址
  actualControllerBackImageUrl?: string(maxLength=1000, minLength=0, name='actual_controller_back_image_url', example='https://www.nicholsfleet.com/images/uploads/blog/ledwell_rollback.jpg'),
  // 承租企业实际控制人（股东/法人）手机号
  actualControllerTelephoneNumber?: string(maxLength=12, minLength=0, name='actual_controller_telephone_number', example='151****1313'),
  // 承租企业统⼀社会信⽤代码
  businessLicenseNumber?: string(maxLength=50, minLength=0, name='business_license_number', example='xxxx'),
  // 承租企业统一社会信用代码
  businesslicenseUrl?: string(name='businesslicense_url', example='xxxx'),
  // 承租企业法定代表人姓名
  legalRepresentative?: string(maxLength=20, minLength=0, name='legal_representative', example='张三'),
  //  资方定义的其他额外字段，以json形式传递
  extraInfo?: string(maxLength=2000, minLength=0, name='extra_info', example='{"discount":9}'),
}

// 主订单信息
model OrderInfo {
  // 订单 id
  orderId: string(maxLength=50, minLength=1, name='order_id', example='order_v1_test_0918_001'),
  // 订单创建时间，格式为2019-08-31 12:00:00
  orderCreateTime: string(name='order_create_time', example='2019-08-31 12:00:00'),
  // 订单支付时间，格式为 2019-08-31 12:00:00
  orderPayTime: string(name='order_pay_time', example='2019-08-31 12:00:00'),
  // 订单支付 id
  orderPayId: string(maxLength=50, minLength=1, name='order_pay_id', example='330102'),
  // 订单支付类型；1:预授权，2:信用套餐，3:支付宝代扣，4:其他，5:网商直付通代扣，6:网商委托代扣
  orderPayType: long(name='order_pay_type', example='1'),
  // 订单支付主题
  orderPaySubject: string(maxLength=500, minLength=1, name='order_pay_subject', example='集成测试订单'),
  // 租期，单位：月
  rentTerm: long(minimum=1, name='rent_term', example='1'),
  // 月租金 精确到分，即 1234 表示 12.34 元
  rentPricePerMonth: long(name='rent_price_per_month', example='1234'),
  // 到期买断价 精确到分，即 1234 表示 12.34 元
  buyOutPrice: long(name='buy_out_price', example='1234'),
  // 租赁合同,需要客户自己提供合并的 url
  leaseContractUrl: string(maxLength=1000, minLength=1, name='lease_contract_url', example='https://www.alipay.com'),
  // 仓库类型；1: 实体仓 2: 虚拟仓
  storeType: long(name='store_type', example='1'),
  // 承租人收货地址
  userAddress: string(maxLength=100, minLength=1, name='user_address', example=' 四川省成都市高新区益州大道中段1999号成都银泰城F1'),
  // 供应商在金融科技对应的租户 id，若填写此字段，则会走供应商模式
  supplierIsvAccount: string(maxLength=100, minLength=1, name='supplier_isv_account', example='TEST_TNT'),
  // 省份编码
  provinceCode: string(name='province_code', example='510000'),
  // 城市编码
  cityCode: string(name='city_code', example='654221'),
  // 地区码
  districtCode: string(name='district_code', example='520526'),
  // 到期形式；1:到期买断 2:到期归还
  dueMode: long(name='due_mode', example='1'),
  // 租赁合同 id，可用作幂等
  contractId?: string(maxLength=100, minLength=0, name='contract_id', example='001'),
  // 租金总额，精确到分，即 1234 表示 12.34 元
  totalRentMoney: long(name='total_rent_money', example='1234'),
  // 保险单号
  insuranceNumber?: string(maxLength=100, minLength=0, name='insurance_number', example='0098493'),
  // 保险地址
  insuranceUrl?: string(maxLength=1000, minLength=0, name='insurance_url', example='四川省成都市'),
  // 蚁盾分数
  yidunScore?: long(name='yidun_score', example='83'),
  // 网商直付通模式的代扣协议号，订单类型为网商直付通模式为必填
  agreementNo?: string(maxLength=100, minLength=0, name='agreement_no', example='764827372'),
  // 直付通代扣受理订单号，订单类型为网商直付通模式为必填
  agreementOrderId?: string(maxLength=100, minLength=0, name='agreement_order_id', example='xxxx'),
  // 首付款金额, 精确到分，即 1234 表示 12.34 元，订单类型为网商直付通模式为必填
  downPayment?: long(name='down_payment', example='1234'),
  // 订单付款内容描述
  orderPayBody?: string(maxLength=500, minLength=0, name='order_pay_body', example='集成测试订单内容'),
  // 额外信息
  extraInfo?: string(name='extra_info', example='{"discount":8}'),
}

// 订单商品信息
model GoodsInfo {
  // 订单 id
  orderId: string(maxLength=50, minLength=1, name='order_id', example='order_v1_test_0918_001'),
  // 租赁机构自己的金融科技租户 id，如果是代理模式此处需要为被代理机构的金融科技租户 id
  leaseId?: string(maxLength=50, minLength=0, name='lease_id', example='xxx'),
  // 订单包含的商品信息列表
  goodsList: [ OrderGoodsModel ](name='goods_list', example=''),
}

model SyncAntchainAtoTradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务字段，具体传入信息需参考文档
  // 传入格式需为json字符串
  bizContent: string(name='biz_content'),
  // 接口执行类型
  // 
  type: string(name='type'),
  // 操作类型
  operationType?: string(name='operation_type'),
}

model SyncAntchainAtoTradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // resp信息
  responseData?: string(name='response_data'),
}

/**
 * Description: 对账saas交易信息同步接口
 * Summary: 对账saas交易信息同步接口
 */
async function syncAntchainAtoTrade(request: SyncAntchainAtoTradeRequest): SyncAntchainAtoTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncAntchainAtoTradeEx(request, headers, runtime);
}

/**
 * Description: 对账saas交易信息同步接口
 * Summary: 对账saas交易信息同步接口
 */
async function syncAntchainAtoTradeEx(request: SyncAntchainAtoTradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncAntchainAtoTradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.trade.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAntchainAtoTradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询信息，必须遵循json字符串格式
  bizContent: string(name='biz_content'),
  // 接口类型
  type: string(name='type'),
}

model GetAntchainAtoTradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回的查询值
  responseData?: string(name='response_data'),
}

/**
 * Description: 获取详情
 * Summary: 获取详情
 */
async function getAntchainAtoTrade(request: GetAntchainAtoTradeRequest): GetAntchainAtoTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAntchainAtoTradeEx(request, headers, runtime);
}

/**
 * Description: 获取详情
 * Summary: 获取详情
 */
async function getAntchainAtoTradeEx(request: GetAntchainAtoTradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAntchainAtoTradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.trade.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntchainAtoRealpersonFacevrfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 真实姓名
  certName: string(name='cert_name'),
  // 证件号码
  certNo: string(name='cert_no'),
  // 身份信息来源类型，当前仅支持证件（CERT_INFO）
  identityType: string(name='identity_type'),
  // 证件类型，当前仅支持身份证（IDENTITY_CARD）
  certType: string(name='cert_type'),
  // 商户请求的唯一标识。
  // 
  // 值为 32 位长度的字母数字组合。其中，前面几位字符是商户自定义的简称，中间几位可以使用一段时间，后段可以使用一个随机或递增序列。该值也可以使用 UUID。
  outerOrderNo: string(name='outer_order_no'),
  // 认证结束回跳地址
  returnUrl: string(name='return_url'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
}

model CreateAntchainAtoRealpersonFacevrfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务返回字段，JSON格式
  data?: string(name='data'),
}

/**
 * Description: 可信身份认证，创建认证
 * Summary: 创建认证
 */
async function createAntchainAtoRealpersonFacevrf(request: CreateAntchainAtoRealpersonFacevrfRequest): CreateAntchainAtoRealpersonFacevrfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntchainAtoRealpersonFacevrfEx(request, headers, runtime);
}

/**
 * Description: 可信身份认证，创建认证
 * Summary: 创建认证
 */
async function createAntchainAtoRealpersonFacevrfEx(request: CreateAntchainAtoRealpersonFacevrfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntchainAtoRealpersonFacevrfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.realperson.facevrf.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntchainAtoRealpersonFacevrfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 可信实人认证的唯一标识
  certifyId: string(name='certify_id'),
  // 商户请求的唯一标识。
  // 
  // 值为 32 位长度的字母数字组合。其中，前面几位字符是商户自定义的简称，中间几位可以使用一段时间，后段可以使用一个随机或递增序列。该值也可以使用 UUID。
  outerOrderNo: string(name='outer_order_no'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
}

model QueryAntchainAtoRealpersonFacevrfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务返回字段，JSON格式
  data?: string(name='data'),
}

/**
 * Description: 查询认证的结果和相关信息
 * Summary: 查询认证结果
 */
async function queryAntchainAtoRealpersonFacevrf(request: QueryAntchainAtoRealpersonFacevrfRequest): QueryAntchainAtoRealpersonFacevrfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntchainAtoRealpersonFacevrfEx(request, headers, runtime);
}

/**
 * Description: 查询认证的结果和相关信息
 * Summary: 查询认证结果
 */
async function queryAntchainAtoRealpersonFacevrfEx(request: QueryAntchainAtoRealpersonFacevrfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntchainAtoRealpersonFacevrfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.realperson.facevrf.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllAntchainAtoSignTemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model AllAntchainAtoSignTemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // List<Object>格式，详细参考：
  // [
  //         {
  //             "templateCode": "TEST_001",
  //             "tenantId": "BIPCCOQY",
  //             "agreementType": "SERVICE_LEASE",
  //             "fileName": "测试模板之协议签署证明",
  //             "templateId": "f28038577d664015bfc1034c4a125121",
  //             "fieldArgs": "{\"sceneName\":\"测试协议合同签署\",\"title\":\"这是一份证明协议\"}",
  //             "userPos": "[{\"required\":true,\"posPage\":\"1\",\"posX\":\"162.44\",\"posY\":\"425\"}]",
  //             "orgPos": "[{\"required\":true,\"posPage\":\"1\",\"posX\":\"449.99\",\"posY\":\"420.03\"}]"
  //         }
  //     ]
  templateList?: string(name='template_list'),
}

/**
 * Description: 电子合同签署的合同模板查询服务
 * Summary: 电子合同签署的合同模板查询服务
 */
async function allAntchainAtoSignTemplate(request: AllAntchainAtoSignTemplateRequest): AllAntchainAtoSignTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allAntchainAtoSignTemplateEx(request, headers, runtime);
}

/**
 * Description: 电子合同签署的合同模板查询服务
 * Summary: 电子合同签署的合同模板查询服务
 */
async function allAntchainAtoSignTemplateEx(request: AllAntchainAtoSignTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllAntchainAtoSignTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.sign.template.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitAntchainAtoSignFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单号
  orderId: string(name='order_id'),
  // 合同在用户签署完成以后是否自动落签完成签署，true-自动落签并结束；false-手工落签并通过接口完成落签。如果不自动落签，则需要调用另外一个落签接口来完成最终的签署的落签。
  autoSign: boolean(name='auto_sign'),
  // CRED_PSN_CH_IDCARD： 大陆身份证
  // CRED_PSN_CH_TWCARD：台湾来往大陆通行证
  // CRED_PSN_CH_MACAO"：澳门来往大陆通行证
  // CRED_PSN_CH_HONGKONG：香港来往大陆通行证
  // CRED_PSN_PASSPORT：护照
  userIdType: string(name='user_id_type'),
  // 用户证件号，需要采用RSA加密传输
  userIdNumber: string(name='user_id_number'),
  // 姓名，需要采用RSA加密传输
  userName: string(name='user_name'),
  // 用户手机号，可不传；传的话需要采用RSA加密传输
  userMobile?: string(name='user_mobile'),
  // 用户的电子邮箱，可不传；传的话需要采用RSA加密传输
  userEmail?: string(name='user_email'),
  // 签署有效期，时间戳，例如：new Date().getTime()
  signValidity?: string(name='sign_validity'),
  // 1-短信；2-邮件
  flowNotifyType?: string(name='flow_notify_type'),
  // 业务场景，电子合同签署协议的时候的标题
  businessScene: string(name='business_scene'),
  // 签署完成跳转链接
  signedRedirectUrl?: string(name='signed_redirect_url'),
  // 签署的电子合同模板信息，List<Object>的JSON格式，Object如下：
  // {
  // templateId:__, // String格式
  // templateArgs: {
  //     "模板参数key":"模板参数值", // 必须为String
  //   }
  // }
  templateList: string(name='template_list'),
  // 用户的支付宝uid
  alipayUserId: string(maxLength=20, minLength=12, name='alipay_user_id'),
  // 公司名称
  merchantName: string(maxLength=256, minLength=2, name='merchant_name'),
  // 商户签署区域标识。对应在合同模板的机构签署区域中的tag值(如果合同模板的签署区域的tag值为空，则可以不传这个参数)。必须完全对应，否则在多方签署的情况下根据tag找到不到对应的签署机构，会出错。
  merchantTag?: string(maxLength=32, minLength=0, name='merchant_tag'),
  // 电子合同签署顺序，如果只有1方企业签署，传入1即可。如果是多方，并且需要设置签署顺序，则需要将这个值以及thirdSigner中的signOrder做一个签署顺序。
  merchantSignOrder?: long(maximum=10000, minimum=1, name='merchant_sign_order'),
  // CRED_ORG_USCC：统一社会信用代码，CRED_ORG_REGCODE：工商注册号，只支持这两个值
  merchantIdType: string(maxLength=20, minLength=6, name='merchant_id_type'),
  // 商户证件号，需要采用RSA加密传输
  merchantIdNumber: string(maxLength=1000, minLength=4, name='merchant_id_number'),
  // 法人姓名，需要RSA加密传输
  merchantLegalName?: string(name='merchant_legal_name'),
  // 法人证件号，需要采用RSA加密传输
  merchantLegalIdNumber?: string(name='merchant_legal_id_number'),
  // 多方签署的其他参与方的签署信息，json的array格式，参考：[{"tag":"zf_a","orgName":"上海网络科技有限公司","orgIdType":"CRED_ORG_REGCODE","orgIdNumber":"12098760923","orgLegalName":"王大浪","orgLegalIdNumber":"107120196708289012"}]，其中：orgIdNumber、orgLegalName、orgLegalIdNumber需要加密传输。
  thirdSigner?: string(maxLength=2000, minLength=0, name='third_signer'),
}

model SubmitAntchainAtoSignFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签署合同单号
  signNo?: string(name='sign_no'),
  // 电子签署流程ID
  flowId?: string(name='flow_id'),
  // 签署用户ID
  accountId?: string(name='account_id'),
}

/**
 * Description: 提交电子合同的签署流程
 * Summary: 提交电子合同的签署流程
 */
async function submitAntchainAtoSignFlow(request: SubmitAntchainAtoSignFlowRequest): SubmitAntchainAtoSignFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitAntchainAtoSignFlowEx(request, headers, runtime);
}

/**
 * Description: 提交电子合同的签署流程
 * Summary: 提交电子合同的签署流程
 */
async function submitAntchainAtoSignFlowEx(request: SubmitAntchainAtoSignFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitAntchainAtoSignFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.sign.flow.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAntchainAtoSignFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署合同单号
  signNo: string(name='sign_no'),
}

model GetAntchainAtoSignFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签署合同单号
  signNo?: string(name='sign_no'),
  // 订单号
  orderId?: string(name='order_id'),
  // 签署用户ID
  accountId?: string(name='account_id'),
  // 状态：DRAFT - 草稿； SIGNING - 签署中； FINISH - 签署完成；UNDO - 撤销； TERMINATE - 终止； EXPIRE - 过期； REJECTED - 拒签； CANCELLED - 解约
  // 
  status?: string(name='status'),
  // 签署流程ID
  flowId?: string(name='flow_id'),
  // 签署文件列表，参考：
  // _[{"fileItemNo":"10090801000001699892007791144960","agreementType":"COMMON","fileName":"xxx合同","fileSize":228530,"signAccountId":"fe2eb3814c4e49edba2bc012f790771f","fileId":"2c7684461a0f4d33bc02f6d77f7b3937","downloadUrl":"https://dev.oss-cn-shanghai.aliyuncs.com/ag/ord/xxx/16939683744483057_%E6%B5%8B%E8%AF%95%E6%A8%A1%E6%9D%BF%E4%B9%8B%E5%8D%8F%E8%AE%AE%E7%AD%BE%E7%BD%B2%E8%AF%81%E6%98%8E.pdf?Expires=1693971989&OSSAccessKeyId=LTAI5tR3hHiaXPAh8YsY9Dce&Signature=i%2FfAgDem33guI%2F0KjIFj24XZNCc%3D"}]_
  docList?: string(name='doc_list'),
  // 业务场景，主要用于签署合同的标题描述
  businessScene?: string(name='business_scene'),
  // 签署合同中的订单的uid。
  alipayUserId?: string(name='alipay_user_id'),
}

/**
 * Description: 查询签署流程详情
 * Summary: 查询签署流程详情
 */
async function getAntchainAtoSignFlow(request: GetAntchainAtoSignFlowRequest): GetAntchainAtoSignFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAntchainAtoSignFlowEx(request, headers, runtime);
}

/**
 * Description: 查询签署流程详情
 * Summary: 查询签署流程详情
 */
async function getAntchainAtoSignFlowEx(request: GetAntchainAtoSignFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAntchainAtoSignFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.sign.flow.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncAntchainAtoFundSplittingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资方订单号
  fundNo: string(maxLength=50, minLength=1, name='fund_no'),
  // 商户的订单号
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 商户的数科租户ID
  merchantTenantId: string(maxLength=50, minLength=1, name='merchant_tenant_id'),
  // 第几期，例如：2表示第二期
  termNum: long(name='term_num'),
  // 扣款时间， yyyy-MM-dd HH:mm:ss 格式
  deductionTime: string(name='deduction_time'),
  // 扣款金额，单位精确到分， 例如：12462300为124623.00元
  deductionAmount: long(name='deduction_amount'),
  // 商户分账金额，单位精确到分，比如：666601 = 6666.01元
  merchantSplitAmount: long(name='merchant_split_amount'),
  // 资方分账金额，单位精确到分。比如：666610 = 6666.10元
  fundSplitAmount: long(name='fund_split_amount'),
  // 其他参与方分账信息，JSON格式的数组，样例：
  // [{"participants":"参与方A","amount":666600,"accountNo":"777223","accountType":"ICBC"}]
  otherSplitInfo?: string(name='other_split_info'),
}

model SyncAntchainAtoFundSplittingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 流水同步描述信息
  responseData?: string(name='response_data'),
}

/**
 * Description: 分账流水同步
 * Summary: 分账流水同步
 */
async function syncAntchainAtoFundSplitting(request: SyncAntchainAtoFundSplittingRequest): SyncAntchainAtoFundSplittingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncAntchainAtoFundSplittingEx(request, headers, runtime);
}

/**
 * Description: 分账流水同步
 * Summary: 分账流水同步
 */
async function syncAntchainAtoFundSplittingEx(request: SyncAntchainAtoFundSplittingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncAntchainAtoFundSplittingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.splitting.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncAntchainAtoFundOrderfinancialRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单号
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 商户在数科的租户ID
  merchantTenantId: string(maxLength=50, minLength=1, name='merchant_tenant_id'),
  // 订单融资唯一标识
  applicationId: string(maxLength=128, minLength=1, name='application_id'),
  // 订单融资状态：1-成功；2-失败
  status: long(name='status'),
  // 融资结果描述，长度不超过64
  reason?: string(maxLength=64, name='reason'),
  // 额外信息
  extras?: string(name='extras'),
}

model SyncAntchainAtoFundOrderfinancialResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果描述信息
  responseData?: string(name='response_data'),
}

/**
 * Description: 提供给融资资金方，用以订单融资结果同步
 * Summary: 订单融资结果同步
 */
async function syncAntchainAtoFundOrderfinancial(request: SyncAntchainAtoFundOrderfinancialRequest): SyncAntchainAtoFundOrderfinancialResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncAntchainAtoFundOrderfinancialEx(request, headers, runtime);
}

/**
 * Description: 提供给融资资金方，用以订单融资结果同步
 * Summary: 订单融资结果同步
 */
async function syncAntchainAtoFundOrderfinancialEx(request: SyncAntchainAtoFundOrderfinancialRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncAntchainAtoFundOrderfinancialResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.orderfinancial.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAntchainAtoFundRepaymentplanRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id，不可为空
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 商户在数科注册的tenantId，不可为空
  merchantTenantId: string(maxLength=50, minLength=1, name='merchant_tenant_id'),
  // 用户的支付宝uid
  alipayUid: string(maxLength=50, minLength=1, name='alipay_uid'),
}

model GetAntchainAtoFundRepaymentplanResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单id
  orderId?: string(name='order_id'),
  // 宽限期，精确到毫秒
  limit?: long(name='limit'),
  // 应付租金时间，格式为yyyy-MM-dd HH:mm:ss
  payDateList?: string(name='pay_date_list'),
  // 租期
  payPeriod?: long(name='pay_period'),
  // 应付租金，精确到分，即1234表示12.34元
  payMoneyList?: string(name='pay_money_list'),
  // 租赁公司支付宝UID
  leaseAlipayUid?: string(name='lease_alipay_uid'),
}

/**
 * Description: 将返回订单实人认证通过后的、商家同步的还款计划
 * Summary: 获取商家同步的还款计划
 */
async function getAntchainAtoFundRepaymentplan(request: GetAntchainAtoFundRepaymentplanRequest): GetAntchainAtoFundRepaymentplanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAntchainAtoFundRepaymentplanEx(request, headers, runtime);
}

/**
 * Description: 将返回订单实人认证通过后的、商家同步的还款计划
 * Summary: 获取商家同步的还款计划
 */
async function getAntchainAtoFundRepaymentplanEx(request: GetAntchainAtoFundRepaymentplanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAntchainAtoFundRepaymentplanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.repaymentplan.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncAntchainAtoFundWithholdingcontractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单号
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 商家在数科注册的租户id
  merchantTenantId: string(maxLength=50, minLength=1, name='merchant_tenant_id'),
  // 代扣协议号
  withholdingContractId: string(maxLength=100, minLength=1, name='withholding_contract_id'),
  // json的字符串，存储额外信息
  extraInfo?: string(name='extra_info'),
}

model SyncAntchainAtoFundWithholdingcontractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存储成功
  responseData?: string(name='response_data'),
}

/**
 * Description: 同步租赁订单的代扣协议
 * Summary: 同步租赁订单的代扣协议
 */
async function syncAntchainAtoFundWithholdingcontract(request: SyncAntchainAtoFundWithholdingcontractRequest): SyncAntchainAtoFundWithholdingcontractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncAntchainAtoFundWithholdingcontractEx(request, headers, runtime);
}

/**
 * Description: 同步租赁订单的代扣协议
 * Summary: 同步租赁订单的代扣协议
 */
async function syncAntchainAtoFundWithholdingcontractEx(request: SyncAntchainAtoFundWithholdingcontractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncAntchainAtoFundWithholdingcontractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.withholdingcontract.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncAntchainAtoFundOrderfulfillmentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商户id
  merchantTenantId: string(maxLength=50, minLength=1, name='merchant_tenant_id'),
  // 订单id
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 租期编号
  leaseTermIndex: long(name='lease_term_index'),
  // 租金归还状态，
  // 1.足额归还
  // 2.部分归还
  // 3.未归还，
  // 4退租,
  // 5该订单整个生命周期已完结
  rentalReturnState: long(name='rental_return_state'),
  // 租金归还金额,精确到分，即1234表示12.34元
  rentalMoney: long(name='rental_money'),
  // 归还时间，格式为"2019-07-31 12:00:00"
  returnTime: string(name='return_time'),
  // 归还方式，
  // 1.预授权代扣
  // 2.支付宝代扣
  // 3.主动还款
  // 4.其他
  // 5.网商直付通
  // 6.网商委托代扣
  returnWay: long(name='return_way'),
  // 还款凭证类型，
  // 1.支付宝
  // 2.平台代收（客户主动还款）
  // 3.其他
  // 6.网商银行
  returnVoucherType: long(name='return_voucher_type'),
  // 还款凭证编号，不超过128字符，1.支付宝流水号
  returnVoucherSerial: string(maxLength=128, minLength=1, name='return_voucher_serial'),
  // 手续费，如通过预授权、代扣的方式规划，必填，单位为分
  // 1234代表12.34元
  charge: long(name='charge'),
  // 剩余归还期数
  remainTerm: long(name='remain_term'),
}

model SyncAntchainAtoFundOrderfulfillmentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 添加成功
  responseData?: string(name='response_data'),
}

/**
 * Description: 资方回传一条订单还款履约信息
 * Summary: 同步订单还款履约信息
 */
async function syncAntchainAtoFundOrderfulfillment(request: SyncAntchainAtoFundOrderfulfillmentRequest): SyncAntchainAtoFundOrderfulfillmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncAntchainAtoFundOrderfulfillmentEx(request, headers, runtime);
}

/**
 * Description: 资方回传一条订单还款履约信息
 * Summary: 同步订单还款履约信息
 */
async function syncAntchainAtoFundOrderfulfillmentEx(request: SyncAntchainAtoFundOrderfulfillmentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncAntchainAtoFundOrderfulfillmentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.orderfulfillment.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAntchainAtoFundOrderfulfillmentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(maxLength=50, name='order_id'),
  // 租赁订单所属商家租户id
  merchantTenantId: string(maxLength=50, name='merchant_tenant_id'),
}

model GetAntchainAtoFundOrderfulfillmentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单履约信息的列表数组
  // List<OrderFulfillment> 的jsonArray.toString
  orderFulfillmentDataList?: string(name='order_fulfillment_data_list'),
}

/**
 * Description: 获取订单的履约信息
 * Summary: 获取订单的履约信息
 */
async function getAntchainAtoFundOrderfulfillment(request: GetAntchainAtoFundOrderfulfillmentRequest): GetAntchainAtoFundOrderfulfillmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAntchainAtoFundOrderfulfillmentEx(request, headers, runtime);
}

/**
 * Description: 获取订单的履约信息
 * Summary: 获取订单的履约信息
 */
async function getAntchainAtoFundOrderfulfillmentEx(request: GetAntchainAtoFundOrderfulfillmentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAntchainAtoFundOrderfulfillmentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.orderfulfillment.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntchainAtoWithholdSignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
  // 支付宝商户id，使用签约能力前时候进行向平台申请
  alipayMerchantId: string(name='alipay_merchant_id'),
  // 支付宝商户名称，会展示在支付并签约界面
  alipayMerchantName: string(name='alipay_merchant_name'),
  // 支付宝商户服务名称，会展示在支付并签约界面
  alipayMerchantServiceName: string(name='alipay_merchant_service_name'),
  // 支付宝商户服务描述，会展示在支付并签约界面
  alipayMerchantServiceDescription: string(name='alipay_merchant_service_description'),
}

model CreateAntchainAtoWithholdSignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签约字符串
  signStr?: string(name='sign_str'),
}

/**
 * Description: 代扣签约
 * Summary: 代扣签约
 */
async function createAntchainAtoWithholdSign(request: CreateAntchainAtoWithholdSignRequest): CreateAntchainAtoWithholdSignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntchainAtoWithholdSignEx(request, headers, runtime);
}

/**
 * Description: 代扣签约
 * Summary: 代扣签约
 */
async function createAntchainAtoWithholdSignEx(request: CreateAntchainAtoWithholdSignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntchainAtoWithholdSignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.withhold.sign.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntchainAtoWithholdSignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
}

model QueryAntchainAtoWithholdSignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 协议当前状态
  // 1. UNSIGNED：未签约
  // 2. SIGNED：已签约；
  // 3. TERMINATED：已解约
  status?: string(name='status'),
  // 协议签署时间
  signTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='sign_time'),
  // 协议生效时间
  validTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='valid_time'),
  // 协议失效时间
  invalidTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='invalid_time'),
}

/**
 * Description: 代扣签约查询
 * Summary: 代扣签约查询
 */
async function queryAntchainAtoWithholdSign(request: QueryAntchainAtoWithholdSignRequest): QueryAntchainAtoWithholdSignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntchainAtoWithholdSignEx(request, headers, runtime);
}

/**
 * Description: 代扣签约查询
 * Summary: 代扣签约查询
 */
async function queryAntchainAtoWithholdSignEx(request: QueryAntchainAtoWithholdSignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntchainAtoWithholdSignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.withhold.sign.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncAntchainAtoTradeFullRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 购买用户信息
  userInfo: UserSyncInfo(name='user_info'),
  // 主订单信息
  orderInfo: OrderInfo(name='order_info'),
  // 订单包含的商品信息列表
  goodsInfo: GoodsInfo(name='goods_info'),
  // 订单还款计划
  promiseInfo: PromiseInfo(name='promise_info'),
}

model SyncAntchainAtoTradeFullResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 同步成功
  responseData?: string(name='response_data'),
}

/**
 * Description: 同步商家的订单信息，包含下单人信息、订单信息、订单关联的商品信息以及订单绑定的还款计划。
 * Summary: 同步商家的订单信息
 */
async function syncAntchainAtoTradeFull(request: SyncAntchainAtoTradeFullRequest): SyncAntchainAtoTradeFullResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncAntchainAtoTradeFullEx(request, headers, runtime);
}

/**
 * Description: 同步商家的订单信息，包含下单人信息、订单信息、订单关联的商品信息以及订单绑定的还款计划。
 * Summary: 同步商家的订单信息
 */
async function syncAntchainAtoTradeFullEx(request: SyncAntchainAtoTradeFullRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncAntchainAtoTradeFullResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.trade.full.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

