import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.2.19',
    _prod_code = 'YUQING',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 钉钉链接消息
model Link {
  // 文字
  text?: string(name='text', example='文字'),
  // 标题
  title?: string(name='title', example='标题'),
  // 图片地址
  picUrl?: string(name='pic_url', example='图片地址'),
  // 链接
  messageUrl?: string(name='message_url', example='链接'),
}

// 钉钉点击
model Btn {
  // 标题
  title?: string(name='title', example='标题'),
  // 动作地址
  actionUrl?: string(name='action_url', example='动作地址'),
}

// 與情信息扩展字段
model YuqingMessageExtInfo {
  // 媒体地域
  mediaAreaCountry?: string(name='media_area_country', example='媒体地域-国家'),
  // 媒体地域省份
  mediaAreaProvince?: string(name='media_area_province', example='北京'),
  // 媒体地域-市
  mediaAreaCity?: string(name='media_area_city', example='北京'),
  // 内容风险
  generalModel?: string(name='general_model', example='内容风险'),
}

// 消息填充内容
model Pair {
  // key
  key: string(name='key', example='key'),
  // value
  value: string(name='value', example='value'),
}

// 热搜结构体
model HotspotMessage {
  // 热搜/热榜/话题 对应用户id (可能为空)
  userId: string(name='user_id', example='1'),
  // 在榜总时间
  totalExistTimestamp: long(name='total_exist_timestamp', example='1'),
  // 下榜时间
  lastExistDateFormat: string(name='last_exist_date_format', example='XXX'),
  // 爬虫爬取的时间
  crawlerTimeFmt: string(name='crawler_time_fmt', example='XXX'),
  // 第一次上榜的格式化时间
  firstExistDateFormat: string(name='first_exist_date_format', example='XXX'),
  // 最高排名的总时长
  maxRankTotalTimestamp: long(name='max_rank_total_timestamp', example='1'),
  // 跟随量
  followersCount: long(name='followers_count', example='1'),
  // 在榜单中的最高排名
  maxRank: long(name='max_rank', example='在榜单中的最高排名'),
  // 阅读量
  readsCount: long(name='reads_count', example='1'),
  // 评论数
  commentsCount: long(name='comments_count', example='1'),
  // 标题，例如话题的标题就是话题本身
  docTitle: string(name='doc_title', example='XXX'),
  // 首次上榜排名
  firstRank: long(name='first_rank', example='1'),
  // 原创人数
  originalCount: long(name='original_count', example='1'),
  // 主持人
  presenterName: string(name='presenter_name', example='XXX'),
  // 热搜在热搜榜的位置
  rank: long(name='rank', example='1'),
  // 热点媒体类型
  mediaType: string(name='media_type', example='XXX'),
  // 文档id
  docId: string(name='doc_id', example='XXX'),
  // 类型
  type: string(name='type', example='XXX'),
  // 热度值
  hotValue: long(name='hot_value', example='1'),
  // 内容，热榜数据中存在着文章，热文就是有内容的
  docContent: string(name='doc_content', example='XXX'),
  // 热搜/热榜/话题 对应用户名称 (可能为空)
  screenName: string(name='screen_name', example='XXX'),
  // 热点媒体子类型
  mediaSubType: string(name='media_sub_type', example='XXX'),
  // 讨论量
  discussesCount: long(name='discusses_count', example='1'),
  // 分类
  category: string(name='category', example='XXX'),
  // 视频量
  videoCount: long(name='video_count', example='1'),
  // 最高排名的格式化总时长
  maxRankTotalTimeFormat: string(name='max_rank_total_time_format', example='XXX'),
  // 省
  province: string(name='province', example='XXX'),
  // 在榜格式化的总时间
  totalExistTimeFormat: string(name='total_exist_time_format', example='XXX'),
  // 第一次上最高排名的时间
  firstTopExistTimestamp: long(name='first_top_exist_timestamp', example='1'),
  // 链接地址
  docUrl?: string(name='doc_url', example='XXX'),
  // 最大的热度值
  maxHotValue: long(name='max_hot_value', example='1'),
  // 市
  city: string(name='city', example='北京'),
  // 最后一次上榜的时间
  lastExistTimestamp: long(name='last_exist_timestamp', example='1'),
  // 第一次上最高排名的时间
  firstTopExistDateFormat: string(name='first_top_exist_date_format', example='XXX'),
  // 下榜排名
  lastRank: long(name='last_rank', example='1'),
  // 首次上榜热度
  firstHotValue: long(name='first_hot_value', example='1'),
  // 热搜类型
  hotspotType: string(name='hotspot_type', example='XXX'),
  // 第一次上榜的时间
  firstXxistTimestamp: long(name='first_xxist_timestamp', example='1'),
}

// 钉钉Markdown
model Markdown {
  // 标题
  title?: string(name='title', example='标题'),
  // 内容
  text?: string(name='text', example='内容'),
}

// 钉钉At
model At {
  // @手机号
  atMobiles?: [ string ](name='at_mobiles', example='@手机号'),
  // @用户ID
  atUserIds?: [ string ](name='at_user_ids', example='@用户ID'),
  // @所有人
  isAtAll?: boolean(name='is_at_all', example='true, false'),
}

// YuqingMessage
model YuqingMessage {
  // 作者头像地址
  authorAvatarUrl?: string(name='author_avatar_url', example='作者头像地址'),
  // 粉丝数
  authorFollowersCount?: long(name='author_followers_count', example='粉丝数'),
  // 好友数
  authorFriendsCount?: long(name='author_friends_count', example='好友数'),
  // 作者id
  authorId?: string(name='author_id', example='作者id'),
  // 作者名称
  authorName?: string(name='author_name', example='作者名称'),
  // 发文数
  authorStatusesCount?: long(name='author_statuses_count', example='发文数'),
  // 作者认证类型
  authorVerifyType?: string(name='author_verify_type', example='作者认证类型'),
  // 舆情文章被抓取的时间戳
  createTime?: long(name='create_time', example='舆情文章被抓取的时间戳'),
  // 文章正文内容
  docContent?: string(name='doc_content', example='文章正文内容'),
  // 文章摘要
  docContentBrief?: string(name='doc_content_brief', example='文章摘要'),
  // 文章内容签名，如果是转发微博或者其他有父内容的doc，计算的是父文章的得分。一般用于去重，相同的doc_content_sign说明内容相同
  docContentSign?: string(name='doc_content_sign', example='文章内容签名，如果是转发微博或者其他有父内容的doc，计算的是父文章的得分。一般用于去重，相同的doc_content_sign说明内容相同'),
  // 文章唯一docId
  docId?: string(name='doc_id', example='文章唯一docId'),
  // 文章自身的内容签名，转发微博计算的是转发内容的contentSign，与父微博无关
  docSelfContentSign?: string(name='doc_self_content_sign', example='文章自身的内容签名，转发微博计算的是转发内容的contentSign，与父微博无关'),
  // 文章标题
  docTitle?: string(name='doc_title', example='文章标题'),
  // 原文地址
  docUrl?: string(name='doc_url', example='原文地址'),
  // 情感的正负面，-1代表负面，1代表非负面
  emotionType?: long(name='emotion_type', example='情感的正负面，-1代表负面，1代表非负面'),
  // 命中的搜索词列表
  highlightKeywords?: [ string ](name='highlight_keywords', example='命中的搜索词列表'),
  // 媒体类型，枚举值
  mediaType?: string(name='media_type', example='媒体类型，枚举值'),
  // 舆情消息类型:转发,评论/回复, 原文,群聊等
  messageType?: string(name='message_type', example='舆情消息类型:转发,评论/回复, 原文,群聊等'),
  // 文章的父docId，如被转发的文章docId
  parentDocId?: string(name='parent_doc_id', example='文章的父docId，如被转发的文章docId'),
  // 舆情文章的发布时间戳
  publishTime?: long(name='publish_time', example='舆情文章的发布时间戳'),
  // 相关性得分
  relevanceScore?: string(name='relevance_score', example='相关性得分'),
  // 相似文章数
  similarNumber?: long(name='similar_number', example='相似文章数'),
  // 微博评论id
  weiboCommentId?: string(name='weibo_comment_id', example='微博评论id'),
  // 微博消息id
  weiboMid?: string(name='weibo_mid', example='微博消息id'),
  // 传播得分，0-10
  propagationScore?: string(name='propagation_score', example='10'),
  // 情感得分
  emotionScore?: string(name='emotion_score', example='10.1'),
  // 影响力得分
  influenceScore?: string(name='influence_score', example='10.2'),
  // 提级地域列表
  docAreas?: [ string ](name='doc_areas', example=''),
  // 媒体名称
  mediaName?: string(name='media_name', example='微博'),
  // 扩展信息
  extInfo?: YuqingMessageExtInfo(name='ext_info', example=''),
  // 文章转载自
  docReprintName?: string(name='doc_reprint_name', example='文章转载自'),
  // 视频列表地址
  contentVideoUrls?: string(name='content_video_urls', example='视频列表地址'),
  // 图片列表地址
  contentImageUrls?: string(name='content_image_urls', example='图片列表地址'),
  // 图片识别出来的文本
  contentImageText?: string(name='content_image_text', example='图片识别出来的文本'),
  // 音频列表地址
  contentAudioUrls?: string(name='content_audio_urls', example='音频列表地址'),
  // 音频识别出来的文本
  contentAudioText?: string(name='content_audio_text', example='音频识别出来的文本'),
  // 视频识别出来的文本
  contentVideoText?: string(name='content_video_text', example='视频识别出来的文本'),
  // 文章转发数
  docRepostsCount?: long(name='doc_reposts_count', example='1'),
  // 文章评论数
  docCommentsCount?: long(name='doc_comments_count', example='1'),
  // 文章点赞数
  docLikesCount?: long(name='doc_likes_count', example='1'),
  // 文章阅读数
  docReadsCount?: long(name='doc_reads_count', example='1'),
  // 回答数
  docAnswersCount?: long(name='doc_answers_count', example='1'),
}

// 钉钉动作卡片
model ActionCard {
  // 标题
  title?: string(name='title', example='标题'),
  // 内容
  text?: string(name='text', example='内容'),
  // btn_orientation
  btnOrientation?: string(name='btn_orientation', example='btn_orientation'),
  // 简单标题
  singleTitle?: string(name='single_title', example='简单标题'),
  // 简单地址
  singleUrl?: string(name='single_url', example='简单地址'),
  // 点击
  btns?: [ Btn ](name='btns', example='点击'),
}

// 钉钉FeedCard
model FeedCard {
  // 卡片流
  links?: [ Link ](name='links', example='卡片流'),
}

// 钉钉文字消息
model Text {
  // 内容
  content?: string(name='content', example='内容'),
}

// 其他过滤条件
model FieldCondition {
  // 字段名称
  fieldName: string(name='field_name', example='名称'),
  // 复杂查询下，嵌套子条件字段jsonPath
  nestFieldPath?: string(name='nest_field_path', example='$.'),
  // 复杂查询下，嵌套子条件字段值
  nestFieldValue?: [ long ](name='nest_field_value', example=''),
  // 操作符
  operateType: string(name='operate_type', example='IN'),
  // 关键字	
  value: string(name='value', example='字段值'),
}

// 钉钉消息体
model DingTalkContent {
  // webHook
  webHook?: string(name='web_hook', example='webHook'),
  // 消息类型
  msgtype?: string(name='msgtype', example='消息类型'),
  // 文字
  text?: Text(name='text', example='文字'),
  // 链接
  link?: Link(name='link', example='链接'),
  // markdown
  markdown?: Markdown(name='markdown', example='markdown'),
  // actionCard
  actionCard?: ActionCard(name='action_card', example='actionCard'),
  // feedCard
  feedCard?: FeedCard(name='feed_card', example='feedCard'),
  // at
  at?: At(name='at', example='at'),
}

// 预警消息体
model Alarm {
  // 人工打的标签
  tags?: [ string ](name='tags', example='["tag"]'),
  // 预警内容摘要
  content?: string(name='content', example='预警内容摘要'),
  // 预警时间戳
  alarmTimestamp?: long(name='alarm_timestamp', example='1670463939'),
  // 舆情项目id
  projectId?: long(name='project_id', example='1'),
  // 修改人
  modifierName?: string(name='modifier_name', example='小黄'),
  // 消息标题
  title?: string(name='title', example='消息标题'),
  // 消息id
  id?: long(name='id', example='1'),
  // 作者名称
  authorName?: string(name='author_name', example='作者名称'),
  // 预警规则id
  alarmRuleId?: long(name='alarm_rule_id', example='1'),
  // 预警规则类型
  type?: string(name='type', example='预警规则类型'),
  // 修改时间戳
  gmtModifiedTimestamp?: long(name='gmt_modified_timestamp', example='1670463939'),
  // 完整消息
  message?: YuqingMessage(name='message', example=''),
  // project
  projectName?: string(name='project_name', example='project'),
  // alarm_rule_name
  alarmRuleName?: string(name='alarm_rule_name', example='name'),
  // alarm_level
  alarmLevel?: string(name='alarm_level', example='1'),
  // doc_media_type
  docMediaType?: string(name='doc_media_type', example='1'),
  // status
  status?: string(name='status', example='1'),
}

// 深度分析配置
model AnalysisConfig {
  // 文章ID
  docId?: string(name='doc_id', example='1'),
  // 文章URL
  url?: string(name='url', example='http://XXX'),
  // 项目ID
  projectId?: long(name='project_id', example='1'),
  // 模板ID
  filterId?: long(name='filter_id', example=''),
  // 关键词列表
  posKeywordList?: [ string ](name='pos_keyword_list', example=''),
  // 开始时间
  publishTimeStart?: long(name='publish_time_start', example=''),
  // 结束时间
  publishTimeEnd?: long(name='publish_time_end', example=''),
  // URL列表
  urlList?: [ string ](name='url_list', example=''),
}

// 热搜任务结构体
model HotspotTask {
  // 任务ID
  taskId: string(name='task_id', example='1'),
  // 数量
  count: long(name='count', example=''),
  // 当前页
  pageNow: long(name='page_now', example=''),
  // 每页数量
  pageSize: long(name='page_size', example=''),
  // 数据
  pages: [ HotspotMessage ](name='pages', example=''),
}

// 查询结构体
model SearchCondition {
  // 搭配词
  assKeywordList?: [ string ](name='ass_keyword_list', example='搭配词'),
  // 被@的用户名称
  atAuthorNameList?: [ string ](name='at_author_name_list', example='被@的用户名称'),
  // 作者名称
  authorNameList?: [ string ](name='author_name_list', example='作者名称'),
  // 评论级别，1：100以内，2：100-1k，3：1k-1w以内，4：1w-10w，5，10w+
  commentsLevel?: long(name='comments_level', example='评论级别，1：100以内，2：100-1k，3：1k-1w以内，4：1w-10w，5，10w+'),
  // 内容长度级别，1：100以内，2：100-1k，3：1k-1w以内，4：1w-10w，5，10w+
  contentLenLevel?: string(name='content_len_level', example='内容长度级别，1：100以内，2：100-1k，3：1k-1w以内，4：1w-10w，5，10w+'),
  // 抓取截止时间
  createTimeEnd?: long(name='create_time_end', example='抓取截止时间'),
  // 抓取起始时间
  createTimeStart?: long(name='create_time_start', example='抓取起始时间'),
  // 文章签名
  docContentSign?: string(name='doc_content_sign', example='文章签名'),
  // 舆情文章唯一docId
  docIdList?: [ string ](name='doc_id_list', example='舆情文章唯一docId'),
  // 是否去重
  duplicateRemoval?: boolean(name='duplicate_removal', example='true, false'),
  // 情感类型，1非负，-1负面
  emotionType?: long(name='emotion_type', example='情感类型，1非负，-1负面'),
  // 是否高亮关键词
  enableKeywordHighlight?: boolean(name='enable_keyword_highlight', example='true, false'),
  // 排除被@的用户名称
  excludeAtAuthorNameList?: [ string ](name='exclude_at_author_name_list', example='排除被@的用户名称'),
  // 排除作者名称
  excludeAuthorNameList?: [ string ](name='exclude_author_name_list', example='排除作者名称'),
  // 排除网站域名
  excludeHostNameList?: [ string ](name='exclude_host_name_list', example='排除网站域名'),
  // 排除关键词标签Id列表
  excludeKeywordTagIds?: [ long ](name='exclude_keyword_tag_ids', example='排除关键词标签Id列表'),
  // 排除词
  excludeKeywordList?: [ string ](name='exclude_keyword_list', example='排除词'),
  // 标题排除词
  excludeKeywordListInTitle?: [ string ](name='exclude_keyword_list_in_title', example='标题排除词'),
  // 排除媒体库id列表
  excludeMediaLibraryIdList?: [ long ](name='exclude_media_library_id_list', example='排除媒体库id列表'),
  // 排除媒体名称
  excludeMediaNameList?: [ string ](name='exclude_media_name_list', example='排除媒体名称'),
  // 排除媒体类型，枚举值
  excludeMediaTypeList?: [ string ](name='exclude_media_type_list', example='排除媒体类型，枚举值'),
  // 排除消息类型，枚举值
  excludeMessageTypeList?: [ string ](name='exclude_message_type_list', example='排除消息类型，枚举值'),
  // 文章是否含有图片
  hasImage?: boolean(name='has_image', example='true, false'),
  // 是否含有视频
  hasVideo?: boolean(name='has_video', example='true, false'),
  // 网站域名
  hostNameList?: [ string ](name='host_name_list', example='网站域名'),
  // 关键词标签Id列表
  keywordTagIds?: [ long ](name='keyword_tag_ids', example='关键词标签Id列表'),
  // 点赞级别，1：100以内，2：100-1k，3：1k-1w以内，4：1w-10w，5，10w+
  likesLevel?: long(name='likes_level', example='点赞级别，1：100以内，2：100-1k，3：1k-1w以内，4：1w-10w，5，10w+'),
  // 媒体库id列表
  mediaLibraryIdList?: [ long ](name='media_library_id_list', example='媒体库id列表'),
  // 媒体名称
  mediaNameList?: [ string ](name='media_name_list', example='媒体名称'),
  // 体类型，枚举值
  mediaTypeList?: [ string ](name='media_type_list', example='体类型，枚举值'),
  // 消息类型，枚举值
  messageTypeList?: [ string ](name='message_type_list', example='消息类型，枚举值'),
  // 当前页
  pageNow?: long(name='page_now', example='当前页'),
  // 页大小
  pageSize?: long(name='page_size', example='页大小'),
  // 舆情父文章的docId，一般用于查看某篇文章的评论
  parentDocId?: string(name='parent_doc_id', example='舆情父文章的docId，一般用于查看某篇文章的评论'),
  // 关键词
  posKeywordList?: [ string ](name='pos_keyword_list', example='关键词'),
  // 标题关键词
  posKeywordListInTitle?: [ string ](name='pos_keyword_list_in_title', example='标题关键词'),
  // 截止发布时间
  publishTimeEnd?: long(name='publish_time_end', example='截止发布时间'),
  // 起始发布时间
  publishTimeStart?: long(name='publish_time_start', example='起始发布时间'),
  // 阅读级别，1：100以内，2：100-1k，3：1k-1w以内，4：1w-10w，5，10w+
  readsLevel?: long(name='reads_level', example='阅读级别，1：100以内，2：100-1k，3：1k-1w以内，4：1w-10w，5，10w+'),
  // 相关性等级，1：低，2：中，3：高，4：低级别以上
  relevanceLevel?: long(name='relevance_level', example='相关性等级，1：低，2：中，3：高，4：低级别以上'),
  // 转发级别，1：100以内，2：100-1k，3：1k-1w以内，4：1w-10w，5，10w+
  repostLevel?: long(name='repost_level', example='转发级别，1：100以内，2：100-1k，3：1k-1w以内，4：1w-10w，5，10w+'),
  // 排序字段
  sortBy?: string(name='sort_by', example='排序字段'),
  // 指定正反向排序
  sortByDirection?: string(name='sort_by_direction', example='指定正反向排序'),
  // #话题
  topicList?: [ string ](name='topic_list', example='#话题'),
  // 舆情文章截止更新时间
  updateTimeEnd?: long(name='update_time_end', example='舆情文章截止更新时间'),
  // 舆情文章起始更新时间
  updateTimeStart?: long(name='update_time_start', example='舆情文章起始更新时间'),
  // field_conditions
  fieldConditions?: [ FieldCondition ](name='field_conditions', example=''),
  // 项目ID
  projectId?: string(name='project_id', example='1'),
}

// 项目
model Project {
  // 项目名字
  name: string(name='name', example='项目A'),
  // 作者名称
  authorNameList?: [ string ](name='author_name_list', example='["a","b"]'),
  // 关键词
  posKeywordList: [ string ](name='pos_keyword_list', example='["key"]'),
  // 标题包含词列表
  posKeywordListInTitle?: [ string ](name='pos_keyword_list_in_title', example='["key"]'),
  // 排除关键词标签列表
  excludeKeywordTagIds?: string(name='exclude_keyword_tag_ids', example='["key"]'),
  // 修改人uid
  uidModified?: string(name='uid_modified', example='2088XX'),
  // 提级用户名，如@xxx
  atAuthorNameList?: [ string ](name='at_author_name_list', example='["小黄"]'),
  // 排除词
  excludeKeywordList?: [ string ](name='exclude_keyword_list', example='["排除"]'),
  // 项目的分析页面id，关联hbase中的自定义页面表
  analyseCpId?: long(name='analyse_cp_id', example='1'),
  // 关键词标签列表
  keywordTagIds?: [ string ](name='keyword_tag_ids', example='["tag"]'),
  // 搭配词
  assKeywordList?: [ string ](name='ass_keyword_list', example='["key"]'),
  // 项目ID
  id?: long(name='id', example='1'),
  // 默认搜索模板id
  defaultFilterId?: long(name='default_filter_id', example='1'),
  // 创建人名称
  unameCreate?: string(name='uname_create', example='小黄'),
  // 父项目id
  parentId?: long(name='parent_id', example='1'),
  // 创建时间
  gmtCreate?: long(name='gmt_create', example='1668081173781'),
  // 修改人名称
  unameModified?: string(name='uname_modified', example='小黄'),
  // 修改时间
  gmtModified?: long(name='gmt_modified', example='1668081173780'),
  // 项目分组id
  projectGroupId?: long(name='project_group_id', example='1'),
  // 父文章id
  parentDocId?: long(name='parent_doc_id', example='1'),
  // 文章id列表
  docIdList?: [ string ](name='doc_id_list', example='["1"]'),
  // 话题词列表
  topicList?: [ string ](name='topic_list', example='["key"]'),
  // 创建人UID
  uidCreate?: string(name='uid_create', example='2088XX'),
}

// 短信消息体
model SmsContent {
  // 模板
  serviceCode?: string(name='service_code', example='ant_dtech_saas'),
  // 手机号
  mobile: string(name='mobile', example='1881066XXXX'),
  // 开发者ID
  developerId?: string(name='developer_id', example='developer_id'),
  // 填充内容
  arguments?: [ Pair ](name='arguments', example='arguments'),
}

// 邮箱数据
model EmailContent {
  // code
  serviceCode?: string(name='service_code', example='ant_dtech_saas'),
  // 开发者Id
  developerId?: string(name='developer_id', example='developer_id'),
  // 邮箱
  email: string(name='email', example='94xx@qq.com'),
  // 参数
  arguments?: [ Pair ](name='arguments', example=''),
}

// 商品规格
model CommoditySpec {
  // 规格项枚举值
  specKey?: string(name='spec_key', example='规格项枚举值'),
  // 规格项默认值
  value?: string(name='value', example='规格项默认值'),
}

model QueryMessagesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询条件
  searchCondition: SearchCondition(name='search_condition'),
  // 请求ID
  requestId?: string(name='request_id'),
  // team_hash_id
  teamHashId?: string(name='team_hash_id'),
}

model QueryMessagesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数量
  totalCount?: long(name='total_count'),
  // 舆情列表
  yuqingMessages?: [ YuqingMessage ](name='yuqing_messages'),
}

/**
 * Description: 查询舆情列表
 * Summary: 查询舆情列表
 */
async function queryMessages(request: QueryMessagesRequest): QueryMessagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMessagesEx(request, headers, runtime);
}

/**
 * Description: 查询舆情列表
 * Summary: 查询舆情列表
 */
async function queryMessagesEx(request: QueryMessagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMessagesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.messages.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveAnalysisSubmitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 分析类型
  analyseType: string(name='analyse_type'),
  // 查询条件
  searchCondition: SearchCondition(name='search_condition'),
  // team_hash_id
  teamHashId: string(name='team_hash_id'),
}

model SaveAnalysisSubmitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分析任务ID
  analysisId?: long(name='analysis_id'),
  // 其他
  resultJson?: string(name='result_json'),
}

/**
 * Description: 舆情分析任务提交
 * Summary: 舆情分析任务提交
 */
async function saveAnalysisSubmit(request: SaveAnalysisSubmitRequest): SaveAnalysisSubmitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveAnalysisSubmitEx(request, headers, runtime);
}

/**
 * Description: 舆情分析任务提交
 * Summary: 舆情分析任务提交
 */
async function saveAnalysisSubmitEx(request: SaveAnalysisSubmitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveAnalysisSubmitResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.analysis.submit.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAnalysisQueryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 分析任务ID
  analysisId: long(name='analysis_id'),
  // team_hash_id
  teamHashId?: string(name='team_hash_id'),
}

model QueryAnalysisQueryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分析任务ID
  analysisId?: long(name='analysis_id'),
  // 分析内容
  resultJson?: string(name='result_json'),
}

/**
 * Description: 舆情分析任务查询
 * Summary: 舆情分析任务查询
 */
async function queryAnalysisQuery(request: QueryAnalysisQueryRequest): QueryAnalysisQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAnalysisQueryEx(request, headers, runtime);
}

/**
 * Description: 舆情分析任务查询
 * Summary: 舆情分析任务查询
 */
async function queryAnalysisQueryEx(request: QueryAnalysisQueryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAnalysisQueryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.analysis.query.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveProductOpenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务号
  bizNo?: string(name='biz_no'),
  // 租户 ID
  tenantId?: string(name='tenant_id'),
  // 实例 ID，兼容老模型的 tntInstId
  instanceId?: string(name='instance_id'),
  // 产品编码
  productCode?: string(name='product_code'),
  // 模块唯一标识
  moduleKey?: string(name='module_key'),
  // 操作类型
  operate?: string(name='operate'),
  // 操作来源渠道
  channel?: string(name='channel'),
  // 规格
  commoditySpecs?: [ CommoditySpec ](name='commodity_specs'),
}

model SaveProductOpenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 废弃
 * Summary: 废弃
 */
async function saveProductOpen(request: SaveProductOpenRequest): SaveProductOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveProductOpenEx(request, headers, runtime);
}

/**
 * Description: 废弃
 * Summary: 废弃
 */
async function saveProductOpenEx(request: SaveProductOpenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveProductOpenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.product.open.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveProductTopRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务号
  bizNo?: string(name='biz_no'),
  // 租户 ID
  tenantId?: string(name='tenant_id'),
  // 实例 ID，兼容老模型的 tntInstId
  instanceId?: string(name='instance_id'),
  // 产品编码
  productCode?: string(name='product_code'),
  // 模块唯一标识
  moduleKey?: string(name='module_key'),
  // 操作类型
  operate?: string(name='operate'),
  // 操作来源渠道
  channel?: string(name='channel'),
}

model SaveProductTopResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 废弃
 * Summary: 废弃
 */
async function saveProductTop(request: SaveProductTopRequest): SaveProductTopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveProductTopEx(request, headers, runtime);
}

/**
 * Description: 废弃
 * Summary: 废弃
 */
async function saveProductTopEx(request: SaveProductTopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveProductTopResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.product.top.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetProductOperateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求入参
  inputJson: string(name='input_json'),
  // 操作类型
  operateType: string(name='operate_type'),
}

model SetProductOperateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 输出返回
  outputJson?: string(name='output_json'),
}

/**
 * Description: 产品操作接口
 * Summary: 产品操作接口
 */
async function setProductOperate(request: SetProductOperateRequest): SetProductOperateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setProductOperateEx(request, headers, runtime);
}

/**
 * Description: 产品操作接口
 * Summary: 产品操作接口
 */
async function setProductOperateEx(request: SetProductOperateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetProductOperateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.product.operate.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendProductNoticeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 提醒类型
  noticeType: string(name='notice_type'),
  // 租户ID
  tenantUid: string(name='tenant_uid'),
  // 钉钉结构体
  dingTalkContent?: DingTalkContent(name='ding_talk_content'),
  // 短信内容
  smsContent?: SmsContent(name='sms_content'),
  // email结构体
  emailContent?: EmailContent(name='email_content'),
}

model SendProductNoticeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 推送返回
  operateResult?: boolean(name='operate_result'),
}

/**
 * Description: 发送提醒
 * Summary: 发送提醒
 */
async function sendProductNotice(request: SendProductNoticeRequest): SendProductNoticeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendProductNoticeEx(request, headers, runtime);
}

/**
 * Description: 发送提醒
 * Summary: 发送提醒
 */
async function sendProductNoticeEx(request: SendProductNoticeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendProductNoticeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.product.notice.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveDeepanalysisSubmitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 深度分析类型
  toolType: string(name='tool_type'),
  // 任务名称
  name: string(name='name'),
  // 深度分析配置
  config: AnalysisConfig(name='config'),
}

model SaveDeepanalysisSubmitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 深度分析任务ID
  analysisId?: long(name='analysis_id'),
  // 其他返回
  resultJson?: string(name='result_json'),
}

/**
 * Description: 创建深度分析
 * Summary: 创建深度分析
 */
async function saveDeepanalysisSubmit(request: SaveDeepanalysisSubmitRequest): SaveDeepanalysisSubmitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveDeepanalysisSubmitEx(request, headers, runtime);
}

/**
 * Description: 创建深度分析
 * Summary: 创建深度分析
 */
async function saveDeepanalysisSubmitEx(request: SaveDeepanalysisSubmitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveDeepanalysisSubmitResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.deepanalysis.submit.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeepanalysisQueryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 深度分析任务ID
  analysisId: long(name='analysis_id'),
}

model QueryDeepanalysisQueryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 深度分析任务ID
  analysisId?: long(name='analysis_id'),
  // 分析内容
  resultJson?: string(name='result_json'),
}

/**
 * Description: 查询深度分析
 * Summary: 查询深度分析
 */
async function queryDeepanalysisQuery(request: QueryDeepanalysisQueryRequest): QueryDeepanalysisQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeepanalysisQueryEx(request, headers, runtime);
}

/**
 * Description: 查询深度分析
 * Summary: 查询深度分析
 */
async function queryDeepanalysisQueryEx(request: QueryDeepanalysisQueryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeepanalysisQueryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.deepanalysis.query.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetMessageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求ID
  requestId?: string(name='request_id'),
  // team_hash_id
  teamHashId?: string(name='team_hash_id'),
  // 文档唯一ID
  docId: string(name='doc_id'),
}

model GetMessageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 與情内容
  yuqingMessage?: YuqingMessage(name='yuqing_message'),
}

/**
 * Description: 获取单个與情
 * Summary: 获取单个
 */
async function getMessage(request: GetMessageRequest): GetMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getMessageEx(request, headers, runtime);
}

/**
 * Description: 获取单个與情
 * Summary: 获取单个
 */
async function getMessageEx(request: GetMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMessageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.message.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 父亲项目的id: 负数表示不限
  parentId?: long(name='parent_id'),
  // uid
  uid?: string(name='uid'),
  // 排序字段名称，如gmt_create
  orderBy?: string(name='order_by'),
  // 请求ID
  requestId?: string(name='request_id'),
  // 名称
  name?: string(name='name'),
  // 指定ID
  ids?: [ long ](name='ids'),
  // 当前页
  currentPage: long(name='current_page'),
  // 所在项目组ID
  projectGroupId?: long(name='project_group_id'),
  // 页面大小
  pageSize: long(name='page_size'),
  // 排序方式：DESC降序，ASC升序
  sortType?: string(name='sort_type'),
}

model QueryProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 页面内容
  pages?: [ Project ](name='pages'),
  // 总条数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询與情项目
 * Summary: 查询與情项目
 */
async function queryProject(request: QueryProjectRequest): QueryProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryProjectEx(request, headers, runtime);
}

/**
 * Description: 查询與情项目
 * Summary: 查询與情项目
 */
async function queryProjectEx(request: QueryProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.project.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 创建内容
  createParam: Project(name='create_param'),
  // requestId
  requestId?: string(name='request_id'),
}

model CreateProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建项目
 * Summary: 创建项目
 */
async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createProjectEx(request, headers, runtime);
}

/**
 * Description: 创建项目
 * Summary: 创建项目
 */
async function createProjectEx(request: CreateProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.project.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 项目ID
  id: long(name='id'),
}

model DeleteProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 新增主键
  id?: long(name='id'),
}

/**
 * Description: 删除项目
 * Summary: 删除项目
 */
async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteProjectEx(request, headers, runtime);
}

/**
 * Description: 删除项目
 * Summary: 删除项目
 */
async function deleteProjectEx(request: DeleteProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.project.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAlarmRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 规则id列表
  alarmRuleIds?: [ long ](name='alarm_rule_ids'),
  // 排序字段名称，如gmt_create
  orderBy?: string(name='order_by'),
  // 是否用更新时间筛选
  isQueryUpdateTime?: boolean(name='is_query_update_time'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 舆情项目id列表
  projectIds?: [ long ](name='project_ids'),
  // 预警时间下限
  endTime?: long(name='end_time'),
  // 预警等级，如：P0
  levels?: string(name='levels'),
  // 预警时间上限
  startTime?: long(name='start_time'),
  // 预警规则类型
  type?: string(name='type'),
  // 预警消息id
  ids?: [ long ](name='ids'),
  // 标签id
  tagIds?: [ long ](name='tag_ids'),
  // 媒体类型
  docMediaType?: string(name='doc_media_type'),
  // 消息状态，如：FINISHED
  status?: [ string ](name='status'),
  // 文章docId列表
  docIdList?: [ string ](name='doc_id_list'),
  // 排序方向，DESC降序，ASC升序
  sortType?: string(name='sort_type'),
  // requestId
  requestId?: string(name='request_id'),
}

model QueryAlarmResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 预警消息
  pages?: [ Alarm ](name='pages'),
  // 总条数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询预警消息列表
 * Summary: 查询预警消息列表
 */
async function queryAlarm(request: QueryAlarmRequest): QueryAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAlarmEx(request, headers, runtime);
}

/**
 * Description: 查询预警消息列表
 * Summary: 查询预警消息列表
 */
async function queryAlarmEx(request: QueryAlarmRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAlarmResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.alarm.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryHotspotMessageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 标题包含XX
  titleIncludingWordsIdx?: string(name='title_including_words_idx'),
  // 正向关键词（短语匹配）
  posKeywords?: string(name='pos_keywords'),
  // 标题完全相等的检索条件，与attributes.display_title字段对应
  wholeKeywords?: string(name='whole_keywords'),
  // 排序方式： 正序(+)、倒序(-)
  sortByDirection?: string(name='sort_by_direction'),
  // 省份
  provinces?: string(name='provinces'),
  // 爬取时间的最小值（含）
  crawlerTimeStartFilter?: long(name='crawler_time_start_filter'),
  // 页大小
  pageSize: long(name='page_size'),
  // [媒体子类型
  mediaSubType?: [ string ](name='media_sub_type'),
  // 是否不指定关键词进行查询：\n 默认false，表示需要指定关键词来查询
  queryWithoutKeyword?: boolean(name='query_without_keyword'),
  // 指定的id列表
  docIds?: [ string ](name='doc_ids'),
  // 城市
  cities?: [ string ](name='cities'),
  // 爬取时间的最大值（不含）
  crawlerTimeEndFilter?: long(name='crawler_time_end_filter'),
  // 是否要进行关键词高亮显示
  enableKeywordHighlight?: boolean(name='enable_keyword_highlight'),
  // d当前页
  pageNow: long(name='page_now'),
  // 是否当前在榜 true表示在榜，false或null表示不限
  fileId?: boolean(name='file_id'),
  // 排序字段
  sortBy?: string(name='sort_by'),
  // 是否当前在榜
  active?: boolean(name='active'),
}

model QueryHotspotMessageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 热搜数据
  pages?: [ HotspotMessage ](name='pages'),
  // 总条数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 根据接口获取热搜数据
 * Summary: 與情热搜接口
 */
async function queryHotspotMessage(request: QueryHotspotMessageRequest): QueryHotspotMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryHotspotMessageEx(request, headers, runtime);
}

/**
 * Description: 根据接口获取热搜数据
 * Summary: 與情热搜接口
 */
async function queryHotspotMessageEx(request: QueryHotspotMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryHotspotMessageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.hotspot.message.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitMessagesHistoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询条件
  searchCondition: SearchCondition(name='search_condition'),
  // 请求ID
  requestId?: string(name='request_id'),
  // team_hash_id
  teamHashId?: string(name='team_hash_id'),
}

model SubmitMessagesHistoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询ID
  submitId?: string(name='submit_id'),
}

/**
 * Description: 與情历史数据异步查询接口
 * Summary: 與情历史数据异步查询接口
 */
async function submitMessagesHistory(request: SubmitMessagesHistoryRequest): SubmitMessagesHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitMessagesHistoryEx(request, headers, runtime);
}

/**
 * Description: 與情历史数据异步查询接口
 * Summary: 與情历史数据异步查询接口
 */
async function submitMessagesHistoryEx(request: SubmitMessagesHistoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitMessagesHistoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.messages.history.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetMessagesHistoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 历史数据提交的产物
  submitId: string(name='submit_id'),
  // request_id
  requestId?: string(name='request_id'),
  // page_now
  pageNow: long(name='page_now'),
  // page_size
  pageSize: long(name='page_size'),
}

model GetMessagesHistoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总数
  totalCount?: long(name='total_count'),
  // yuqing_messages
  yuqingMessages?: [ YuqingMessage ](name='yuqing_messages'),
}

/**
 * Description: 获取历史與情消息
 * Summary: 获取历史與情消息
 */
async function getMessagesHistory(request: GetMessagesHistoryRequest): GetMessagesHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getMessagesHistoryEx(request, headers, runtime);
}

/**
 * Description: 获取历史與情消息
 * Summary: 获取历史與情消息
 */
async function getMessagesHistoryEx(request: GetMessagesHistoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMessagesHistoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.messages.history.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitHotspotTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 媒体类型
  mediaSubTypes: [ string ](name='media_sub_types'),
  // 任务过期时间,单位秒
  expiredTime: long(name='expired_time'),
  // 排序方式： 正序(+)、倒序(-)
  sortByDirection?: string(name='sort_by_direction'),
  // 排序字段
  sortBy?: string(name='sort_by'),
  // 爬取开始时间过滤
  crawlerTimeStartFilter?: long(name='crawler_time_start_filter'),
  // 爬取结束时间过滤
  crawlerTimeEndFilter?: long(name='crawler_time_end_filter'),
}

model SubmitHotspotTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务ID
  taskIds?: [ string ](name='task_ids'),
}

/**
 * Description: 提交实时热搜任务
 * Summary: 提交实时热搜任务
 */
async function submitHotspotTask(request: SubmitHotspotTaskRequest): SubmitHotspotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitHotspotTaskEx(request, headers, runtime);
}

/**
 * Description: 提交实时热搜任务
 * Summary: 提交实时热搜任务
 */
async function submitHotspotTaskEx(request: SubmitHotspotTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitHotspotTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.hotspot.task.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetHotspotTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务ID
  taskIds: [ string ](name='task_ids'),
}

model GetHotspotTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务的结果
  hotspotTasks?: [ HotspotTask ](name='hotspot_tasks'),
}

/**
 * Description: 获取实时热搜任务结果
 * Summary: 获取实时热搜任务结果
 */
async function getHotspotTask(request: GetHotspotTaskRequest): GetHotspotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getHotspotTaskEx(request, headers, runtime);
}

/**
 * Description: 获取实时热搜任务结果
 * Summary: 获取实时热搜任务结果
 */
async function getHotspotTaskEx(request: GetHotspotTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetHotspotTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.hotspot.task.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetStsTokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务类型
  bizType: string(name='biz_type'),
}

model GetStsTokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // AK
  accessKeyId?: string(name='access_key_id'),
  // SK
  accessKeySecret?: string(name='access_key_secret'),
  // stsToken
  securityToken?: string(name='security_token'),
}

/**
 * Description: 获取stsToken，作用于通用SAAS业务
 * Summary: 获取stsToken
 */
async function getStsToken(request: GetStsTokenRequest): GetStsTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getStsTokenEx(request, headers, runtime);
}

/**
 * Description: 获取stsToken，作用于通用SAAS业务
 * Summary: 获取stsToken
 */
async function getStsTokenEx(request: GetStsTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetStsTokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.sts.token.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateCommonInterfaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 入参JSON
  paramJson: string(name='param_json'),
  // 接口名称
  interfaceName: string(name='interface_name'),
  // 请求ID
  requestId?: string(name='request_id'),
}

model OperateCommonInterfaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回JSON
  resultJson?: string(name='result_json'),
}

/**
 * Description: 通用操作接口
 * Summary: 通用操作接口
 */
async function operateCommonInterface(request: OperateCommonInterfaceRequest): OperateCommonInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateCommonInterfaceEx(request, headers, runtime);
}

/**
 * Description: 通用操作接口
 * Summary: 通用操作接口
 */
async function operateCommonInterfaceEx(request: OperateCommonInterfaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateCommonInterfaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.yuqing.common.interface.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

