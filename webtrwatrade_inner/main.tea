import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.5',
    _prod_code = 'WEBTRWATRADE_INNER',
    _prod_channel = 'default'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 多币种金额
model MultiCurrencyMoney {
  // 金额，以分为单位
  cent: string(name='cent', example='100'),
  // 币种编码
  currency: string(name='currency', example='HKD'),
  // 金额，以元为单位，保留2位小数
  amount: string(name='amount', example='1.00'),
}

//   内部投资者报表数据
model InvestmentReportInner {
  // 预期收益
  // 
  estimatedAnnualized: MultiCurrencyMoney(name='estimated_annualized', example='23.45 '),
  // 实际收益率（Annual Yield）
  // 
  actualAnnualizedYield: string(name='actual_annualized_yield', example='12.34'),
  // 预期收益率（Expect Yield）
  estimatedAnnualizedYield: string(name='estimated_annualized_yield', example='12.34'),
  // 毛利吻合率（Gross Profit Conformity）
  matchRate: string(name='match_rate', example='12.34'),
  // 投资金额（Investment Allocation）
  investmentAmount: MultiCurrencyMoney(name='investment_amount', example='12.34'),
  // 实际收益
  actualAnnualized: MultiCurrencyMoney(name='actual_annualized', example='12.34'),
  // 资产抵押率（Collateral Ratio）
  collateralRate: string(name='collateral_rate', example='12.34'),
  // 数据日期
  dt: string(name='dt', example='20250214'),
}

model QueryPlatformInvestmentreportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 可信产业资产项目批次id
  projectExternalId: string(name='project_external_id'),
}

model QueryPlatformInvestmentreportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 内部投资者报表数据
  data?: InvestmentReportInner(name='data'),
}

/**
 * Description: 投资者报表查询
 * Summary: 投资者报表查询
 */
async function queryPlatformInvestmentreport(request: QueryPlatformInvestmentreportRequest): QueryPlatformInvestmentreportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPlatformInvestmentreportEx(request, headers, runtime);
}

/**
 * Description: 投资者报表查询
 * Summary: 投资者报表查询
 */
async function queryPlatformInvestmentreportEx(request: QueryPlatformInvestmentreportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPlatformInvestmentreportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.webtrwatradeinner.platform.investmentreport.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPlatformInvestmentreportbypackageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 可信产业资产项目批次id
  projectExternalId: string(name='project_external_id'),
  // 资产包id
  assetPackageId: string(name='asset_package_id'),
}

model QueryPlatformInvestmentreportbypackageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 内部投资者报表数据(资产包维度)
  data?: InvestmentReportInner(name='data'),
}

/**
 * Description: 投资者报表查询(资产包维度)
 * Summary: 投资者报表查询(资产包维度)
 */
async function queryPlatformInvestmentreportbypackage(request: QueryPlatformInvestmentreportbypackageRequest): QueryPlatformInvestmentreportbypackageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPlatformInvestmentreportbypackageEx(request, headers, runtime);
}

/**
 * Description: 投资者报表查询(资产包维度)
 * Summary: 投资者报表查询(资产包维度)
 */
async function queryPlatformInvestmentreportbypackageEx(request: QueryPlatformInvestmentreportbypackageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPlatformInvestmentreportbypackageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.webtrwatradeinner.platform.investmentreportbypackage.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

