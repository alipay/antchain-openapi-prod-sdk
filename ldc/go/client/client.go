// This file is auto-generated, don't edit it. Thanks.
package client

import (
	rpcutil "github.com/alibabacloud-go/tea-rpc-utils/service"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
	antchainutil "github.com/antchain-openapi-sdk-go/antchain-util/service"
)

/**
 * Model for initing client
 */
type Config struct {
	// accesskey id
	AccessKeyId *string `json:"accessKeyId,omitempty" xml:"accessKeyId,omitempty"`
	// accesskey secret
	AccessKeySecret *string `json:"accessKeySecret,omitempty" xml:"accessKeySecret,omitempty"`
	// security token
	SecurityToken *string `json:"securityToken,omitempty" xml:"securityToken,omitempty"`
	// http protocol
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// read timeout
	ReadTimeout *int `json:"readTimeout,omitempty" xml:"readTimeout,omitempty"`
	// connect timeout
	ConnectTimeout *int `json:"connectTimeout,omitempty" xml:"connectTimeout,omitempty"`
	// http proxy
	HttpProxy *string `json:"httpProxy,omitempty" xml:"httpProxy,omitempty"`
	// https proxy
	HttpsProxy *string `json:"httpsProxy,omitempty" xml:"httpsProxy,omitempty"`
	// endpoint
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	// proxy white list
	NoProxy *string `json:"noProxy,omitempty" xml:"noProxy,omitempty"`
	// max idle conns
	MaxIdleConns *int `json:"maxIdleConns,omitempty" xml:"maxIdleConns,omitempty"`
	// user agent
	UserAgent *string `json:"userAgent,omitempty" xml:"userAgent,omitempty"`
	// socks5 proxy
	Socks5Proxy *string `json:"socks5Proxy,omitempty" xml:"socks5Proxy,omitempty"`
	// socks5 network
	Socks5NetWork *string `json:"socks5NetWork,omitempty" xml:"socks5NetWork,omitempty"`
	// 长链接最大空闲时长
	MaxIdleTimeMillis *int `json:"maxIdleTimeMillis,omitempty" xml:"maxIdleTimeMillis,omitempty"`
	// 长链接最大连接时长
	KeepAliveDurationMillis *int `json:"keepAliveDurationMillis,omitempty" xml:"keepAliveDurationMillis,omitempty"`
	// 最大连接数（长链接最大总数）
	MaxRequests *int `json:"maxRequests,omitempty" xml:"maxRequests,omitempty"`
	// 每个目标主机的最大连接数（分主机域名的长链接最大总数
	MaxRequestsPerHost *int `json:"maxRequestsPerHost,omitempty" xml:"maxRequestsPerHost,omitempty"`
}

func (s Config) String() string {
	return tea.Prettify(s)
}

func (s Config) GoString() string {
	return s.String()
}

func (s *Config) SetAccessKeyId(v string) *Config {
	s.AccessKeyId = &v
	return s
}

func (s *Config) SetAccessKeySecret(v string) *Config {
	s.AccessKeySecret = &v
	return s
}

func (s *Config) SetSecurityToken(v string) *Config {
	s.SecurityToken = &v
	return s
}

func (s *Config) SetProtocol(v string) *Config {
	s.Protocol = &v
	return s
}

func (s *Config) SetReadTimeout(v int) *Config {
	s.ReadTimeout = &v
	return s
}

func (s *Config) SetConnectTimeout(v int) *Config {
	s.ConnectTimeout = &v
	return s
}

func (s *Config) SetHttpProxy(v string) *Config {
	s.HttpProxy = &v
	return s
}

func (s *Config) SetHttpsProxy(v string) *Config {
	s.HttpsProxy = &v
	return s
}

func (s *Config) SetEndpoint(v string) *Config {
	s.Endpoint = &v
	return s
}

func (s *Config) SetNoProxy(v string) *Config {
	s.NoProxy = &v
	return s
}

func (s *Config) SetMaxIdleConns(v int) *Config {
	s.MaxIdleConns = &v
	return s
}

func (s *Config) SetUserAgent(v string) *Config {
	s.UserAgent = &v
	return s
}

func (s *Config) SetSocks5Proxy(v string) *Config {
	s.Socks5Proxy = &v
	return s
}

func (s *Config) SetSocks5NetWork(v string) *Config {
	s.Socks5NetWork = &v
	return s
}

func (s *Config) SetMaxIdleTimeMillis(v int) *Config {
	s.MaxIdleTimeMillis = &v
	return s
}

func (s *Config) SetKeepAliveDurationMillis(v int) *Config {
	s.KeepAliveDurationMillis = &v
	return s
}

func (s *Config) SetMaxRequests(v int) *Config {
	s.MaxRequests = &v
	return s
}

func (s *Config) SetMaxRequestsPerHost(v int) *Config {
	s.MaxRequestsPerHost = &v
	return s
}

// label of all k8s resource
type Label struct {
	// label key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// label value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s Label) String() string {
	return tea.Prettify(s)
}

func (s Label) GoString() string {
	return s.String()
}

func (s *Label) SetKey(v string) *Label {
	s.Key = &v
	return s
}

func (s *Label) SetValue(v string) *Label {
	s.Value = &v
	return s
}

// label selector requirement struct
type LabelSelectorRequirement struct {
	// label key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// label match operator
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// label match values
	Values []*string `json:"values,omitempty" xml:"values,omitempty" require:"true" type:"Repeated"`
}

func (s LabelSelectorRequirement) String() string {
	return tea.Prettify(s)
}

func (s LabelSelectorRequirement) GoString() string {
	return s.String()
}

func (s *LabelSelectorRequirement) SetKey(v string) *LabelSelectorRequirement {
	s.Key = &v
	return s
}

func (s *LabelSelectorRequirement) SetOperator(v string) *LabelSelectorRequirement {
	s.Operator = &v
	return s
}

func (s *LabelSelectorRequirement) SetValues(v []*string) *LabelSelectorRequirement {
	s.Values = v
	return s
}

// V1NodeSelectorRequirement
type NodeSelectorRequirement struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// operator
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// values
	Values []*string `json:"values,omitempty" xml:"values,omitempty" require:"true" type:"Repeated"`
}

func (s NodeSelectorRequirement) String() string {
	return tea.Prettify(s)
}

func (s NodeSelectorRequirement) GoString() string {
	return s.String()
}

func (s *NodeSelectorRequirement) SetKey(v string) *NodeSelectorRequirement {
	s.Key = &v
	return s
}

func (s *NodeSelectorRequirement) SetOperator(v string) *NodeSelectorRequirement {
	s.Operator = &v
	return s
}

func (s *NodeSelectorRequirement) SetValues(v []*string) *NodeSelectorRequirement {
	s.Values = v
	return s
}

// k8s label selector
type LabelSelector struct {
	// matchExpressions is a list of label selector requirements.
	MatchExpressions []*LabelSelectorRequirement `json:"match_expressions,omitempty" xml:"match_expressions,omitempty" type:"Repeated"`
	// matchLabels is a map of {key,value} pairs
	MatchLabels []*Label `json:"match_labels,omitempty" xml:"match_labels,omitempty" type:"Repeated"`
}

func (s LabelSelector) String() string {
	return tea.Prettify(s)
}

func (s LabelSelector) GoString() string {
	return s.String()
}

func (s *LabelSelector) SetMatchExpressions(v []*LabelSelectorRequirement) *LabelSelector {
	s.MatchExpressions = v
	return s
}

func (s *LabelSelector) SetMatchLabels(v []*Label) *LabelSelector {
	s.MatchLabels = v
	return s
}

// nodeSelectorterm
type NodeSelectorTerm struct {
	// A list of node selector requirements by node labels.
	//
	MatchExpressions []*NodeSelectorRequirement `json:"match_expressions,omitempty" xml:"match_expressions,omitempty" type:"Repeated"`
	// A list of node selector requirements by node fields.
	//
	MatchFields []*NodeSelectorRequirement `json:"match_fields,omitempty" xml:"match_fields,omitempty" require:"true" type:"Repeated"`
}

func (s NodeSelectorTerm) String() string {
	return tea.Prettify(s)
}

func (s NodeSelectorTerm) GoString() string {
	return s.String()
}

func (s *NodeSelectorTerm) SetMatchExpressions(v []*NodeSelectorRequirement) *NodeSelectorTerm {
	s.MatchExpressions = v
	return s
}

func (s *NodeSelectorTerm) SetMatchFields(v []*NodeSelectorRequirement) *NodeSelectorTerm {
	s.MatchFields = v
	return s
}

// tcp方式的健康检查配置。
type TcpSocketAction struct {
	// 健康检查端口。
	Port *string `json:"port,omitempty" xml:"port,omitempty" require:"true"`
}

func (s TcpSocketAction) String() string {
	return tea.Prettify(s)
}

func (s TcpSocketAction) GoString() string {
	return s.String()
}

func (s *TcpSocketAction) SetPort(v string) *TcpSocketAction {
	s.Port = &v
	return s
}

// 命令行方式的健康检查配置。
type ExecAction struct {
	// 执行健康检查的命令。
	Command *string `json:"command,omitempty" xml:"command,omitempty" require:"true"`
}

func (s ExecAction) String() string {
	return tea.Prettify(s)
}

func (s ExecAction) GoString() string {
	return s.String()
}

func (s *ExecAction) SetCommand(v string) *ExecAction {
	s.Command = &v
	return s
}

// http方式的健康检查配置
type HttpGetAction struct {
	// 健康检查url地址。
	Path *string `json:"path,omitempty" xml:"path,omitempty" require:"true"`
	// 健康检查端口。
	Port *string `json:"port,omitempty" xml:"port,omitempty" require:"true"`
	// 协议类型，http/https。
	Scheme *string `json:"scheme,omitempty" xml:"scheme,omitempty" require:"true"`
}

func (s HttpGetAction) String() string {
	return tea.Prettify(s)
}

func (s HttpGetAction) GoString() string {
	return s.String()
}

func (s *HttpGetAction) SetPath(v string) *HttpGetAction {
	s.Path = &v
	return s
}

func (s *HttpGetAction) SetPort(v string) *HttpGetAction {
	s.Port = &v
	return s
}

func (s *HttpGetAction) SetScheme(v string) *HttpGetAction {
	s.Scheme = &v
	return s
}

// V1PodAffinityTerm
type PodAffinityTerm struct {
	// labelSelctor
	LabelSelector *LabelSelector `json:"label_selector,omitempty" xml:"label_selector,omitempty" require:"true"`
	// namespaces
	Namespaces []*string `json:"namespaces,omitempty" xml:"namespaces,omitempty" require:"true" type:"Repeated"`
}

func (s PodAffinityTerm) String() string {
	return tea.Prettify(s)
}

func (s PodAffinityTerm) GoString() string {
	return s.String()
}

func (s *PodAffinityTerm) SetLabelSelector(v *LabelSelector) *PodAffinityTerm {
	s.LabelSelector = v
	return s
}

func (s *PodAffinityTerm) SetNamespaces(v []*string) *PodAffinityTerm {
	s.Namespaces = v
	return s
}

// 健康检查探针
//
type HealthCheckProbe struct {
	// 基于命令行类型的探针必填
	ExecAction *ExecAction `json:"exec_action,omitempty" xml:"exec_action,omitempty"`
	// 探针运行失败阈值
	//
	FailureThreshold *int64 `json:"failure_threshold,omitempty" xml:"failure_threshold,omitempty" require:"true"`
	// 基于HTTP GET请求的探针必填
	//
	HttpGetAction *HttpGetAction `json:"http_get_action,omitempty" xml:"http_get_action,omitempty"`
	// 探针初始运行延迟时间
	//
	InitialDelaySeconds *int64 `json:"initial_delay_seconds,omitempty" xml:"initial_delay_seconds,omitempty" require:"true"`
	// 探针运行间隔时间
	//
	PeriodSeconds *int64 `json:"period_seconds,omitempty" xml:"period_seconds,omitempty" require:"true"`
	// 探针运行成功阈值
	//
	SuccessThreshold *int64 `json:"success_threshold,omitempty" xml:"success_threshold,omitempty" require:"true"`
	// 基于TCP连接的探针必填
	//
	TcpSocketAction *TcpSocketAction `json:"tcp_socket_action,omitempty" xml:"tcp_socket_action,omitempty"`
	// 探针运行超时时间
	//
	TimeOutSeconds *int64 `json:"time_out_seconds,omitempty" xml:"time_out_seconds,omitempty" require:"true"`
}

func (s HealthCheckProbe) String() string {
	return tea.Prettify(s)
}

func (s HealthCheckProbe) GoString() string {
	return s.String()
}

func (s *HealthCheckProbe) SetExecAction(v *ExecAction) *HealthCheckProbe {
	s.ExecAction = v
	return s
}

func (s *HealthCheckProbe) SetFailureThreshold(v int64) *HealthCheckProbe {
	s.FailureThreshold = &v
	return s
}

func (s *HealthCheckProbe) SetHttpGetAction(v *HttpGetAction) *HealthCheckProbe {
	s.HttpGetAction = v
	return s
}

func (s *HealthCheckProbe) SetInitialDelaySeconds(v int64) *HealthCheckProbe {
	s.InitialDelaySeconds = &v
	return s
}

func (s *HealthCheckProbe) SetPeriodSeconds(v int64) *HealthCheckProbe {
	s.PeriodSeconds = &v
	return s
}

func (s *HealthCheckProbe) SetSuccessThreshold(v int64) *HealthCheckProbe {
	s.SuccessThreshold = &v
	return s
}

func (s *HealthCheckProbe) SetTcpSocketAction(v *TcpSocketAction) *HealthCheckProbe {
	s.TcpSocketAction = v
	return s
}

func (s *HealthCheckProbe) SetTimeOutSeconds(v int64) *HealthCheckProbe {
	s.TimeOutSeconds = &v
	return s
}

// 表示容器的环境变量来源。
type EnvVarSource struct {
	// 对应的ConfigMap或Secret名称。
	ObjectName *string `json:"object_name,omitempty" xml:"object_name,omitempty" require:"true"`
	// 对应的Object类型。
	// 取值：ConfigMap | Secret
	ObjectType *string `json:"object_type,omitempty" xml:"object_type,omitempty" require:"true"`
	// 引用的ConfigMap或则Secret的key。
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
}

func (s EnvVarSource) String() string {
	return tea.Prettify(s)
}

func (s EnvVarSource) GoString() string {
	return s.String()
}

func (s *EnvVarSource) SetObjectName(v string) *EnvVarSource {
	s.ObjectName = &v
	return s
}

func (s *EnvVarSource) SetObjectType(v string) *EnvVarSource {
	s.ObjectType = &v
	return s
}

func (s *EnvVarSource) SetKey(v string) *EnvVarSource {
	s.Key = &v
	return s
}

// EmptyDir based volume.
type EmptyDirVolumeSource struct {
	// 存储介质。
	Medium *string `json:"medium,omitempty" xml:"medium,omitempty" require:"true"`
	// volume name。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 存储大小。
	SizeLimit *string `json:"size_limit,omitempty" xml:"size_limit,omitempty" require:"true"`
}

func (s EmptyDirVolumeSource) String() string {
	return tea.Prettify(s)
}

func (s EmptyDirVolumeSource) GoString() string {
	return s.String()
}

func (s *EmptyDirVolumeSource) SetMedium(v string) *EmptyDirVolumeSource {
	s.Medium = &v
	return s
}

func (s *EmptyDirVolumeSource) SetName(v string) *EmptyDirVolumeSource {
	s.Name = &v
	return s
}

func (s *EmptyDirVolumeSource) SetSizeLimit(v string) *EmptyDirVolumeSource {
	s.SizeLimit = &v
	return s
}

// V1NodeSelector
type NodeSelector struct {
	// node selector terms
	NodeSelectorTerms []*NodeSelectorTerm `json:"node_selector_terms,omitempty" xml:"node_selector_terms,omitempty" require:"true" type:"Repeated"`
}

func (s NodeSelector) String() string {
	return tea.Prettify(s)
}

func (s NodeSelector) GoString() string {
	return s.String()
}

func (s *NodeSelector) SetNodeSelectorTerms(v []*NodeSelectorTerm) *NodeSelector {
	s.NodeSelectorTerms = v
	return s
}

// k8s prefer schedule term
type PreferredSchedulingTerm struct {
	// A null or empty node selector term matches no objects
	Preference *NodeSelectorTerm `json:"preference,omitempty" xml:"preference,omitempty"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	//
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty" require:"true"`
}

func (s PreferredSchedulingTerm) String() string {
	return tea.Prettify(s)
}

func (s PreferredSchedulingTerm) GoString() string {
	return s.String()
}

func (s *PreferredSchedulingTerm) SetPreference(v *NodeSelectorTerm) *PreferredSchedulingTerm {
	s.Preference = v
	return s
}

func (s *PreferredSchedulingTerm) SetWeight(v int64) *PreferredSchedulingTerm {
	s.Weight = &v
	return s
}

// volume mount of PersistentVolumeClaim.
type PersistentVolumeClaimSource struct {
	// 引用的PVC名称。
	PvcName *string `json:"pvc_name,omitempty" xml:"pvc_name,omitempty" require:"true"`
}

func (s PersistentVolumeClaimSource) String() string {
	return tea.Prettify(s)
}

func (s PersistentVolumeClaimSource) GoString() string {
	return s.String()
}

func (s *PersistentVolumeClaimSource) SetPvcName(v string) *PersistentVolumeClaimSource {
	s.PvcName = &v
	return s
}

// V1WeightedPodAffinityTerm
type WeightedPodAffinityTerm struct {
	// Pod Affinity Term
	PodAffinityTerm *PodAffinityTerm `json:"pod_affinity_term,omitempty" xml:"pod_affinity_term,omitempty" require:"true"`
	// weight
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty" require:"true"`
}

func (s WeightedPodAffinityTerm) String() string {
	return tea.Prettify(s)
}

func (s WeightedPodAffinityTerm) GoString() string {
	return s.String()
}

func (s *WeightedPodAffinityTerm) SetPodAffinityTerm(v *PodAffinityTerm) *WeightedPodAffinityTerm {
	s.PodAffinityTerm = v
	return s
}

func (s *WeightedPodAffinityTerm) SetWeight(v int64) *WeightedPodAffinityTerm {
	s.Weight = &v
	return s
}

// 基于configmap&secret的volume。
type ConfigmapSecretVolumeSource struct {
	// 引用volume名称。
	VolumeRefName *string `json:"volume_ref_name,omitempty" xml:"volume_ref_name,omitempty" require:"true"`
}

func (s ConfigmapSecretVolumeSource) String() string {
	return tea.Prettify(s)
}

func (s ConfigmapSecretVolumeSource) GoString() string {
	return s.String()
}

func (s *ConfigmapSecretVolumeSource) SetVolumeRefName(v string) *ConfigmapSecretVolumeSource {
	s.VolumeRefName = &v
	return s
}

// 本地磁盘volume。
type LocalDiskVolumeSource struct {
	// 主机路径。
	HostDirectoryPath *string `json:"host_directory_path,omitempty" xml:"host_directory_path,omitempty" require:"true"`
	// 是否允许创建。
	CreateIfNotPresent *bool `json:"create_if_not_present,omitempty" xml:"create_if_not_present,omitempty" require:"true"`
}

func (s LocalDiskVolumeSource) String() string {
	return tea.Prettify(s)
}

func (s LocalDiskVolumeSource) GoString() string {
	return s.String()
}

func (s *LocalDiskVolumeSource) SetHostDirectoryPath(v string) *LocalDiskVolumeSource {
	s.HostDirectoryPath = &v
	return s
}

func (s *LocalDiskVolumeSource) SetCreateIfNotPresent(v bool) *LocalDiskVolumeSource {
	s.CreateIfNotPresent = &v
	return s
}

// V1PodDNSConfigOption， PodDNSConfigOption defines DNS resolver options of a pod.
//
//
type PodDNSConfigOption struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s PodDNSConfigOption) String() string {
	return tea.Prettify(s)
}

func (s PodDNSConfigOption) GoString() string {
	return s.String()
}

func (s *PodDNSConfigOption) SetName(v string) *PodDNSConfigOption {
	s.Name = &v
	return s
}

func (s *PodDNSConfigOption) SetValue(v string) *PodDNSConfigOption {
	s.Value = &v
	return s
}

// 容器生命周期hook。
type LifecycleHook struct {
	// 启动后执行命令。
	PostStartExec *ExecAction `json:"post_start_exec,omitempty" xml:"post_start_exec,omitempty"`
	// 启动后执行http get。
	PostStartHttp *HttpGetAction `json:"post_start_http,omitempty" xml:"post_start_http,omitempty"`
	// 启动后执行TCP请求。
	PostStartTcp *TcpSocketAction `json:"post_start_tcp,omitempty" xml:"post_start_tcp,omitempty"`
	// 停止前执行命令。
	PreStopExec *ExecAction `json:"pre_stop_exec,omitempty" xml:"pre_stop_exec,omitempty"`
	// 停止前http get。
	PreStopHttp *HttpGetAction `json:"pre_stop_http,omitempty" xml:"pre_stop_http,omitempty"`
	// 停止前TCP请求。
	PreStopTcp *TcpSocketAction `json:"pre_stop_tcp,omitempty" xml:"pre_stop_tcp,omitempty"`
}

func (s LifecycleHook) String() string {
	return tea.Prettify(s)
}

func (s LifecycleHook) GoString() string {
	return s.String()
}

func (s *LifecycleHook) SetPostStartExec(v *ExecAction) *LifecycleHook {
	s.PostStartExec = v
	return s
}

func (s *LifecycleHook) SetPostStartHttp(v *HttpGetAction) *LifecycleHook {
	s.PostStartHttp = v
	return s
}

func (s *LifecycleHook) SetPostStartTcp(v *TcpSocketAction) *LifecycleHook {
	s.PostStartTcp = v
	return s
}

func (s *LifecycleHook) SetPreStopExec(v *ExecAction) *LifecycleHook {
	s.PreStopExec = v
	return s
}

func (s *LifecycleHook) SetPreStopHttp(v *HttpGetAction) *LifecycleHook {
	s.PreStopHttp = v
	return s
}

func (s *LifecycleHook) SetPreStopTcp(v *TcpSocketAction) *LifecycleHook {
	s.PreStopTcp = v
	return s
}

// Pod container VolumeMount info。
type VolumeMount struct {
	// 引用Configmap&Secret的存储。
	ConfigmapSecretVolumeSource *ConfigmapSecretVolumeSource `json:"configmap_secret_volume_source,omitempty" xml:"configmap_secret_volume_source,omitempty"`
	// 基于empty dir的存储。
	EmptyDirVolumeSource *EmptyDirVolumeSource `json:"empty_dir_volume_source,omitempty" xml:"empty_dir_volume_source,omitempty"`
	// 基于本地磁盘的存储资源。
	LocalDiskVolumeSource *LocalDiskVolumeSource `json:"local_disk_volume_source,omitempty" xml:"local_disk_volume_source,omitempty"`
	// 容器内挂载路径。
	MountPath *string `json:"mount_path,omitempty" xml:"mount_path,omitempty" require:"true"`
	// 引用的volume名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 是否只读。
	ReadOnly *bool `json:"read_only,omitempty" xml:"read_only,omitempty" require:"true"`
	// 容器内挂载路径子路径。
	SubPath *string `json:"sub_path,omitempty" xml:"sub_path,omitempty"`
	// 数据卷类型，取值 LOCAL_STORAGE：主机挂载， CONFIGMAP：配置项， SECRET：保密字典
	VolumeSourceCategoryType *string `json:"volume_source_category_type,omitempty" xml:"volume_source_category_type,omitempty" require:"true"`
	// 引用的PVC信息。
	PvcSource *PersistentVolumeClaimSource `json:"pvc_source,omitempty" xml:"pvc_source,omitempty" require:"true"`
}

func (s VolumeMount) String() string {
	return tea.Prettify(s)
}

func (s VolumeMount) GoString() string {
	return s.String()
}

func (s *VolumeMount) SetConfigmapSecretVolumeSource(v *ConfigmapSecretVolumeSource) *VolumeMount {
	s.ConfigmapSecretVolumeSource = v
	return s
}

func (s *VolumeMount) SetEmptyDirVolumeSource(v *EmptyDirVolumeSource) *VolumeMount {
	s.EmptyDirVolumeSource = v
	return s
}

func (s *VolumeMount) SetLocalDiskVolumeSource(v *LocalDiskVolumeSource) *VolumeMount {
	s.LocalDiskVolumeSource = v
	return s
}

func (s *VolumeMount) SetMountPath(v string) *VolumeMount {
	s.MountPath = &v
	return s
}

func (s *VolumeMount) SetName(v string) *VolumeMount {
	s.Name = &v
	return s
}

func (s *VolumeMount) SetReadOnly(v bool) *VolumeMount {
	s.ReadOnly = &v
	return s
}

func (s *VolumeMount) SetSubPath(v string) *VolumeMount {
	s.SubPath = &v
	return s
}

func (s *VolumeMount) SetVolumeSourceCategoryType(v string) *VolumeMount {
	s.VolumeSourceCategoryType = &v
	return s
}

func (s *VolumeMount) SetPvcSource(v *PersistentVolumeClaimSource) *VolumeMount {
	s.PvcSource = v
	return s
}

// 表示容器的环境变量。
type EnvVar struct {
	// 环境变量名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 环境变量value。
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	// 环境变量的取值来源。
	ValueFrom *EnvVarSource `json:"value_from,omitempty" xml:"value_from,omitempty"`
	// EnvVar类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s EnvVar) String() string {
	return tea.Prettify(s)
}

func (s EnvVar) GoString() string {
	return s.String()
}

func (s *EnvVar) SetName(v string) *EnvVar {
	s.Name = &v
	return s
}

func (s *EnvVar) SetValue(v string) *EnvVar {
	s.Value = &v
	return s
}

func (s *EnvVar) SetValueFrom(v *EnvVarSource) *EnvVar {
	s.ValueFrom = v
	return s
}

func (s *EnvVar) SetType(v string) *EnvVar {
	s.Type = &v
	return s
}

// Node affinity is a group of node affinity scheduling rules.
type NodeAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions
	PreferredDuringSchedulingIgnoredDuringExecution []*PreferredSchedulingTerm `json:"preferred_during_scheduling_ignored_during_execution,omitempty" xml:"preferred_during_scheduling_ignored_during_execution,omitempty" type:"Repeated"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node
	RequiredDuringDchedulingIgnoredDuringExecution *NodeSelector `json:"required_during_dcheduling_ignored_during_execution,omitempty" xml:"required_during_dcheduling_ignored_during_execution,omitempty" require:"true"`
}

func (s NodeAffinity) String() string {
	return tea.Prettify(s)
}

func (s NodeAffinity) GoString() string {
	return s.String()
}

func (s *NodeAffinity) SetPreferredDuringSchedulingIgnoredDuringExecution(v []*PreferredSchedulingTerm) *NodeAffinity {
	s.PreferredDuringSchedulingIgnoredDuringExecution = v
	return s
}

func (s *NodeAffinity) SetRequiredDuringDchedulingIgnoredDuringExecution(v *NodeSelector) *NodeAffinity {
	s.RequiredDuringDchedulingIgnoredDuringExecution = v
	return s
}

// 弹性扩缩容规则策略
type HPAScalePolicy struct {
	// 枚举型：
	// - pods：按pod个数扩缩容；
	// - percent：基于当前副本数的百分比扩缩容。
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 当type为percent时，value值为增长副本数的百分比，900%表示在原先副本数的基础上增加9倍（单位：%）；当type为pods时，value值为增加的副本数目（单位：个）。
	Value *int64 `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// 每次扩缩容动作间隔时间：600表示每10分钟操作一次
	PeriodSeconds *int64 `json:"period_seconds,omitempty" xml:"period_seconds,omitempty"`
}

func (s HPAScalePolicy) String() string {
	return tea.Prettify(s)
}

func (s HPAScalePolicy) GoString() string {
	return s.String()
}

func (s *HPAScalePolicy) SetType(v string) *HPAScalePolicy {
	s.Type = &v
	return s
}

func (s *HPAScalePolicy) SetValue(v int64) *HPAScalePolicy {
	s.Value = &v
	return s
}

func (s *HPAScalePolicy) SetPeriodSeconds(v int64) *HPAScalePolicy {
	s.PeriodSeconds = &v
	return s
}

// 环境变量配置覆盖。
type EnvVarOverride struct {
	// 部署单元名称。
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// 环境变量名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 环境变量取值。
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s EnvVarOverride) String() string {
	return tea.Prettify(s)
}

func (s EnvVarOverride) GoString() string {
	return s.String()
}

func (s *EnvVarOverride) SetCell(v string) *EnvVarOverride {
	s.Cell = &v
	return s
}

func (s *EnvVarOverride) SetName(v string) *EnvVarOverride {
	s.Name = &v
	return s
}

func (s *EnvVarOverride) SetValue(v string) *EnvVarOverride {
	s.Value = &v
	return s
}

// 健康检查配置
//
type HealthCheckConfig struct {
	// liveness 检查
	//
	LivenessProbe *HealthCheckProbe `json:"liveness_probe,omitempty" xml:"liveness_probe,omitempty"`
	// readiness 检查
	//
	ReadinessProbe *HealthCheckProbe `json:"readiness_probe,omitempty" xml:"readiness_probe,omitempty"`
}

func (s HealthCheckConfig) String() string {
	return tea.Prettify(s)
}

func (s HealthCheckConfig) GoString() string {
	return s.String()
}

func (s *HealthCheckConfig) SetLivenessProbe(v *HealthCheckProbe) *HealthCheckConfig {
	s.LivenessProbe = v
	return s
}

func (s *HealthCheckConfig) SetReadinessProbe(v *HealthCheckProbe) *HealthCheckConfig {
	s.ReadinessProbe = v
	return s
}

// PodAffinity
type PodAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions.
	PreferredDuringSchedulingIgnoredDuringExecution []*WeightedPodAffinityTerm `json:"preferred_during_scheduling_ignored_during_execution,omitempty" xml:"preferred_during_scheduling_ignored_during_execution,omitempty" type:"Repeated"`
	// f the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node.
	RequiredDuringDchedulingIgnoredDuringExecution []*PodAffinityTerm `json:"required_during_dcheduling_ignored_during_execution,omitempty" xml:"required_during_dcheduling_ignored_during_execution,omitempty" require:"true" type:"Repeated"`
}

func (s PodAffinity) String() string {
	return tea.Prettify(s)
}

func (s PodAffinity) GoString() string {
	return s.String()
}

func (s *PodAffinity) SetPreferredDuringSchedulingIgnoredDuringExecution(v []*WeightedPodAffinityTerm) *PodAffinity {
	s.PreferredDuringSchedulingIgnoredDuringExecution = v
	return s
}

func (s *PodAffinity) SetRequiredDuringDchedulingIgnoredDuringExecution(v []*PodAffinityTerm) *PodAffinity {
	s.RequiredDuringDchedulingIgnoredDuringExecution = v
	return s
}

// 日志配置实体
type LogConfigEntity struct {
	// 配置名称
	ConfigName *string `json:"config_name,omitempty" xml:"config_name,omitempty" require:"true"`
	// 输入类型
	InputType *string `json:"input_type,omitempty" xml:"input_type,omitempty" require:"true"`
	// 日志库名称
	LogstoreName *string `json:"logstore_name,omitempty" xml:"logstore_name,omitempty" require:"true"`
	// 日志目录
	LogPath *string `json:"log_path,omitempty" xml:"log_path,omitempty" require:"true"`
	// file_pattern
	FilePattern *string `json:"file_pattern,omitempty" xml:"file_pattern,omitempty"`
}

func (s LogConfigEntity) String() string {
	return tea.Prettify(s)
}

func (s LogConfigEntity) GoString() string {
	return s.String()
}

func (s *LogConfigEntity) SetConfigName(v string) *LogConfigEntity {
	s.ConfigName = &v
	return s
}

func (s *LogConfigEntity) SetInputType(v string) *LogConfigEntity {
	s.InputType = &v
	return s
}

func (s *LogConfigEntity) SetLogstoreName(v string) *LogConfigEntity {
	s.LogstoreName = &v
	return s
}

func (s *LogConfigEntity) SetLogPath(v string) *LogConfigEntity {
	s.LogPath = &v
	return s
}

func (s *LogConfigEntity) SetFilePattern(v string) *LogConfigEntity {
	s.FilePattern = &v
	return s
}

// PodAntiAffinity
type PodAntiAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions.
	PreferredDuringSchedulingIgnoredDuringExecution []*WeightedPodAffinityTerm `json:"preferred_during_scheduling_ignored_during_execution,omitempty" xml:"preferred_during_scheduling_ignored_during_execution,omitempty" type:"Repeated"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node
	RequiredDuringSchedulingIgnoredDuringExecution []*PodAffinityTerm `json:"required_during_scheduling_ignored_during_execution,omitempty" xml:"required_during_scheduling_ignored_during_execution,omitempty" type:"Repeated"`
}

func (s PodAntiAffinity) String() string {
	return tea.Prettify(s)
}

func (s PodAntiAffinity) GoString() string {
	return s.String()
}

func (s *PodAntiAffinity) SetPreferredDuringSchedulingIgnoredDuringExecution(v []*WeightedPodAffinityTerm) *PodAntiAffinity {
	s.PreferredDuringSchedulingIgnoredDuringExecution = v
	return s
}

func (s *PodAntiAffinity) SetRequiredDuringSchedulingIgnoredDuringExecution(v []*PodAffinityTerm) *PodAntiAffinity {
	s.RequiredDuringSchedulingIgnoredDuringExecution = v
	return s
}

// 弹性伸缩指标目标值类型
type HPABasedElasticConfigMetricTargetResourceValue struct {
	// 数值
	Value *int64 `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// 数值单位:
	// Byte, Ki, Mi, Gi, Ti, Pi
	// m, C
	Unit *string `json:"unit,omitempty" xml:"unit,omitempty" require:"true"`
}

func (s HPABasedElasticConfigMetricTargetResourceValue) String() string {
	return tea.Prettify(s)
}

func (s HPABasedElasticConfigMetricTargetResourceValue) GoString() string {
	return s.String()
}

func (s *HPABasedElasticConfigMetricTargetResourceValue) SetValue(v int64) *HPABasedElasticConfigMetricTargetResourceValue {
	s.Value = &v
	return s
}

func (s *HPABasedElasticConfigMetricTargetResourceValue) SetUnit(v string) *HPABasedElasticConfigMetricTargetResourceValue {
	s.Unit = &v
	return s
}

// MapStringToStringEntity
type MapStringToString struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s MapStringToString) String() string {
	return tea.Prettify(s)
}

func (s MapStringToString) GoString() string {
	return s.String()
}

func (s *MapStringToString) SetKey(v string) *MapStringToString {
	s.Key = &v
	return s
}

func (s *MapStringToString) SetValue(v string) *MapStringToString {
	s.Value = &v
	return s
}

// Container Spec 字段 Override 对象
type FieldOverride struct {
	// 部署单元名称
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// 字段名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 字段值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s FieldOverride) String() string {
	return tea.Prettify(s)
}

func (s FieldOverride) GoString() string {
	return s.String()
}

func (s *FieldOverride) SetCell(v string) *FieldOverride {
	s.Cell = &v
	return s
}

func (s *FieldOverride) SetName(v string) *FieldOverride {
	s.Name = &v
	return s
}

func (s *FieldOverride) SetValue(v string) *FieldOverride {
	s.Value = &v
	return s
}

// container state running
type ContainerStateRunning struct {
	// container启动时间
	StartedAt *string `json:"started_at,omitempty" xml:"started_at,omitempty" require:"true"`
}

func (s ContainerStateRunning) String() string {
	return tea.Prettify(s)
}

func (s ContainerStateRunning) GoString() string {
	return s.String()
}

func (s *ContainerStateRunning) SetStartedAt(v string) *ContainerStateRunning {
	s.StartedAt = &v
	return s
}

// PodNodeSelector
type PodNodeSelector struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s PodNodeSelector) String() string {
	return tea.Prettify(s)
}

func (s PodNodeSelector) GoString() string {
	return s.String()
}

func (s *PodNodeSelector) SetKey(v string) *PodNodeSelector {
	s.Key = &v
	return s
}

func (s *PodNodeSelector) SetValue(v string) *PodNodeSelector {
	s.Value = &v
	return s
}

// affinity MatchExpression
type MatchExpression struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// operator
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// values
	Values []*string `json:"values,omitempty" xml:"values,omitempty" type:"Repeated"`
}

func (s MatchExpression) String() string {
	return tea.Prettify(s)
}

func (s MatchExpression) GoString() string {
	return s.String()
}

func (s *MatchExpression) SetKey(v string) *MatchExpression {
	s.Key = &v
	return s
}

func (s *MatchExpression) SetOperator(v string) *MatchExpression {
	s.Operator = &v
	return s
}

func (s *MatchExpression) SetValues(v []*string) *MatchExpression {
	s.Values = v
	return s
}

// 弹性扩缩容高级配置规则
type HPAScaleRule struct {
	// 冷却窗口时间
	StabilizationWindowSeconds *int64 `json:"stabilization_window_seconds,omitempty" xml:"stabilization_window_seconds,omitempty"`
	// 扩缩容策略
	Policies []*HPAScalePolicy `json:"policies,omitempty" xml:"policies,omitempty" type:"Repeated"`
}

func (s HPAScaleRule) String() string {
	return tea.Prettify(s)
}

func (s HPAScaleRule) GoString() string {
	return s.String()
}

func (s *HPAScaleRule) SetStabilizationWindowSeconds(v int64) *HPAScaleRule {
	s.StabilizationWindowSeconds = &v
	return s
}

func (s *HPAScaleRule) SetPolicies(v []*HPAScalePolicy) *HPAScaleRule {
	s.Policies = v
	return s
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type Toleration struct {
	// 取值：NoExecute、PreferNoSchedule、NoSchedule
	Effect *string `json:"effect,omitempty" xml:"effect,omitempty" require:"true"`
	// Key is the taint key that the toleration applies to.
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 取值：Equal、Exists
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint.
	TolerationSeconds *int64 `json:"toleration_seconds,omitempty" xml:"toleration_seconds,omitempty"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s Toleration) String() string {
	return tea.Prettify(s)
}

func (s Toleration) GoString() string {
	return s.String()
}

func (s *Toleration) SetEffect(v string) *Toleration {
	s.Effect = &v
	return s
}

func (s *Toleration) SetKey(v string) *Toleration {
	s.Key = &v
	return s
}

func (s *Toleration) SetOperator(v string) *Toleration {
	s.Operator = &v
	return s
}

func (s *Toleration) SetTolerationSeconds(v int64) *Toleration {
	s.TolerationSeconds = &v
	return s
}

func (s *Toleration) SetValue(v string) *Toleration {
	s.Value = &v
	return s
}

// Affinity is a group of affinity scheduling rules.
type Affinity struct {
	// Describes node affinity scheduling rules for the pod.
	//
	NodeAffinity *NodeAffinity `json:"node_affinity,omitempty" xml:"node_affinity,omitempty"`
	// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
	PodAffinity *PodAffinity `json:"pod_affinity,omitempty" xml:"pod_affinity,omitempty"`
	// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
	//
	PodAntiAffinity *PodAntiAffinity `json:"pod_anti_affinity,omitempty" xml:"pod_anti_affinity,omitempty"`
}

func (s Affinity) String() string {
	return tea.Prettify(s)
}

func (s Affinity) GoString() string {
	return s.String()
}

func (s *Affinity) SetNodeAffinity(v *NodeAffinity) *Affinity {
	s.NodeAffinity = v
	return s
}

func (s *Affinity) SetPodAffinity(v *PodAffinity) *Affinity {
	s.PodAffinity = v
	return s
}

func (s *Affinity) SetPodAntiAffinity(v *PodAntiAffinity) *Affinity {
	s.PodAntiAffinity = v
	return s
}

// container state terminated
type ContainerStateTerminated struct {
	// container id
	ContainerId *string `json:"container_id,omitempty" xml:"container_id,omitempty" require:"true"`
	// exit code
	ExitCode *int64 `json:"exit_code,omitempty" xml:"exit_code,omitempty" require:"true"`
	// container结束时间
	FinishedAt *string `json:"finished_at,omitempty" xml:"finished_at,omitempty" require:"true"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// reason
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty" require:"true"`
	// signal
	Signal *string `json:"signal,omitempty" xml:"signal,omitempty" require:"true"`
	// container start time
	StartedAt *string `json:"started_at,omitempty" xml:"started_at,omitempty" require:"true"`
}

func (s ContainerStateTerminated) String() string {
	return tea.Prettify(s)
}

func (s ContainerStateTerminated) GoString() string {
	return s.String()
}

func (s *ContainerStateTerminated) SetContainerId(v string) *ContainerStateTerminated {
	s.ContainerId = &v
	return s
}

func (s *ContainerStateTerminated) SetExitCode(v int64) *ContainerStateTerminated {
	s.ExitCode = &v
	return s
}

func (s *ContainerStateTerminated) SetFinishedAt(v string) *ContainerStateTerminated {
	s.FinishedAt = &v
	return s
}

func (s *ContainerStateTerminated) SetMessage(v string) *ContainerStateTerminated {
	s.Message = &v
	return s
}

func (s *ContainerStateTerminated) SetReason(v string) *ContainerStateTerminated {
	s.Reason = &v
	return s
}

func (s *ContainerStateTerminated) SetSignal(v string) *ContainerStateTerminated {
	s.Signal = &v
	return s
}

func (s *ContainerStateTerminated) SetStartedAt(v string) *ContainerStateTerminated {
	s.StartedAt = &v
	return s
}

// k8s resource annotations
type Annotation struct {
	// annotation key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// annotation value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s Annotation) String() string {
	return tea.Prettify(s)
}

func (s Annotation) GoString() string {
	return s.String()
}

func (s *Annotation) SetKey(v string) *Annotation {
	s.Key = &v
	return s
}

func (s *Annotation) SetValue(v string) *Annotation {
	s.Value = &v
	return s
}

// 弹性伸缩指标目标值
type HPABasedElasticConfigMetricTarget struct {
	// 支持两种类型：AverageValue，Utilization
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// value
	Value *HPABasedElasticConfigMetricTargetResourceValue `json:"value,omitempty" xml:"value,omitempty"`
	// 利用率
	Utilization *int64 `json:"utilization,omitempty" xml:"utilization,omitempty"`
}

func (s HPABasedElasticConfigMetricTarget) String() string {
	return tea.Prettify(s)
}

func (s HPABasedElasticConfigMetricTarget) GoString() string {
	return s.String()
}

func (s *HPABasedElasticConfigMetricTarget) SetType(v string) *HPABasedElasticConfigMetricTarget {
	s.Type = &v
	return s
}

func (s *HPABasedElasticConfigMetricTarget) SetValue(v *HPABasedElasticConfigMetricTargetResourceValue) *HPABasedElasticConfigMetricTarget {
	s.Value = v
	return s
}

func (s *HPABasedElasticConfigMetricTarget) SetUtilization(v int64) *HPABasedElasticConfigMetricTarget {
	s.Utilization = &v
	return s
}

// ResourceValue
type ResourceValue struct {
	// value
	Value *int64 `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// Ki、Mi、Gi、Ti、Pi、m、c
	Unit *string `json:"unit,omitempty" xml:"unit,omitempty" require:"true"`
}

func (s ResourceValue) String() string {
	return tea.Prettify(s)
}

func (s ResourceValue) GoString() string {
	return s.String()
}

func (s *ResourceValue) SetValue(v int64) *ResourceValue {
	s.Value = &v
	return s
}

func (s *ResourceValue) SetUnit(v string) *ResourceValue {
	s.Unit = &v
	return s
}

// pod volume info.
type Volume struct {
	// 主机目录[仅针对HostPath类型volume有效]
	HostPath *string `json:"host_path,omitempty" xml:"host_path,omitempty"`
	// Volume名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 关联的资源名称。
	RefResourceName *string `json:"ref_resource_name,omitempty" xml:"ref_resource_name,omitempty"`
	//  LOCAL_STORAGE：主机挂载|CONFIGMAP：配置项|SECRET：保密字典
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// Volume是否只读
	ReadOnly *bool `json:"read_only,omitempty" xml:"read_only,omitempty"`
}

func (s Volume) String() string {
	return tea.Prettify(s)
}

func (s Volume) GoString() string {
	return s.String()
}

func (s *Volume) SetHostPath(v string) *Volume {
	s.HostPath = &v
	return s
}

func (s *Volume) SetName(v string) *Volume {
	s.Name = &v
	return s
}

func (s *Volume) SetRefResourceName(v string) *Volume {
	s.RefResourceName = &v
	return s
}

func (s *Volume) SetType(v string) *Volume {
	s.Type = &v
	return s
}

func (s *Volume) SetReadOnly(v bool) *Volume {
	s.ReadOnly = &v
	return s
}

// container state waiting
type ContainerStateWaiting struct {
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// reason
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty" require:"true"`
}

func (s ContainerStateWaiting) String() string {
	return tea.Prettify(s)
}

func (s ContainerStateWaiting) GoString() string {
	return s.String()
}

func (s *ContainerStateWaiting) SetMessage(v string) *ContainerStateWaiting {
	s.Message = &v
	return s
}

func (s *ContainerStateWaiting) SetReason(v string) *ContainerStateWaiting {
	s.Reason = &v
	return s
}

// PodAffinityTermEntity
type PodAffinityTermEntity struct {
	// label_selector
	LabelSelector []*MapStringToString `json:"label_selector,omitempty" xml:"label_selector,omitempty" type:"Repeated"`
	// namespaces
	Namespaces []*string `json:"namespaces,omitempty" xml:"namespaces,omitempty" type:"Repeated"`
	// topology_key
	TopologyKey *string `json:"topology_key,omitempty" xml:"topology_key,omitempty"`
}

func (s PodAffinityTermEntity) String() string {
	return tea.Prettify(s)
}

func (s PodAffinityTermEntity) GoString() string {
	return s.String()
}

func (s *PodAffinityTermEntity) SetLabelSelector(v []*MapStringToString) *PodAffinityTermEntity {
	s.LabelSelector = v
	return s
}

func (s *PodAffinityTermEntity) SetNamespaces(v []*string) *PodAffinityTermEntity {
	s.Namespaces = v
	return s
}

func (s *PodAffinityTermEntity) SetTopologyKey(v string) *PodAffinityTermEntity {
	s.TopologyKey = &v
	return s
}

// 容器配置。
type ContainerSpec struct {
	// 最大CPU限制，格式 1/1m。
	CpuLimit *string `json:"cpu_limit,omitempty" xml:"cpu_limit,omitempty" require:"true"`
	// 最少需要的CPU核数，格式 1/1m。
	CpuRequest *string `json:"cpu_request,omitempty" xml:"cpu_request,omitempty" require:"true"`
	// 启动命令。
	EntryPoints []*string `json:"entry_points,omitempty" xml:"entry_points,omitempty" type:"Repeated"`
	// 环境变量。
	Envs []*EnvVar `json:"envs,omitempty" xml:"envs,omitempty" type:"Repeated"`
	// 容器环境变量配置覆盖。
	EnvOverrides []*EnvVarOverride `json:"env_overrides,omitempty" xml:"env_overrides,omitempty" type:"Repeated"`
	// 健康检查配置
	//
	HealthCheckConfig *HealthCheckConfig `json:"health_check_config,omitempty" xml:"health_check_config,omitempty"`
	// 地址，格式形如 repository:tag。
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// 镜像构建名。
	ImageBuildName *string `json:"image_build_name,omitempty" xml:"image_build_name,omitempty"`
	// image pull secret
	ImagePullSecret *string `json:"image_pull_secret,omitempty" xml:"image_pull_secret,omitempty"`
	// 镜像来源，构建/普通镜像。
	ImageSource *string `json:"image_source,omitempty" xml:"image_source,omitempty" require:"true"`
	// 生命周期钩子。
	LifecycleHook *LifecycleHook `json:"lifecycle_hook,omitempty" xml:"lifecycle_hook,omitempty"`
	// 日志服务配置
	LogConfigs []*LogConfigEntity `json:"log_configs,omitempty" xml:"log_configs,omitempty" type:"Repeated"`
	// 最大内存限制，单位 Byte/Ki/Mi/Gi/Ti/Pi。
	MemoryLimit *string `json:"memory_limit,omitempty" xml:"memory_limit,omitempty" require:"true"`
	// 最小需要的内存大小，单位 Byte/Ki/Mi/Gi/Ti/Pi。
	MemoryRequest *string `json:"memory_request,omitempty" xml:"memory_request,omitempty" require:"true"`
	// 容器名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 重启策略。
	RestartPolicy *string `json:"restart_policy,omitempty" xml:"restart_policy,omitempty" require:"true"`
	// 容器类型。
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 存储卷
	//
	VolumeMounts []*VolumeMount `json:"volume_mounts,omitempty" xml:"volume_mounts,omitempty" type:"Repeated"`
	// volumeMountV2, json格式，方便扩展, 与volumes_str搭配使用，启用后废弃volume_mount字段
	// {
	// 	"volumeMounts": [{
	// 		"mountPath": "/container/config",
	// 		"name": "aarm-base-configmap-volume",
	// 		"readOnly": true
	// 	}, {
	// 		"mountPath": "/container/scrt",
	// 		"name": "panling-secret-volume",
	// 		"readOnly": true
	// 	}, {
	// 		"mountPath": "/container/pvc",
	// 		"name": "afa-public-data-pv",
	// 		"readOnly": true
	// 	}, {
	// 		"mountPath": "/container/local",
	// 		"name": "container-local-host-volume",
	// 		"readOnly": true
	// 	}]
	// }
	// 这里会兼容原来OpenAPI传过来的volume_mount字段
	VolumeMountsStr *string `json:"volume_mounts_str,omitempty" xml:"volume_mounts_str,omitempty"`
	// 与volume_mounts_str搭配使用，描述pod的volume部分
	// {
	// 	"volumes": [{
	// 			"configMap": {
	// 				"defaultMode": 256,
	// 				"name": "aarm-base"
	// 			},
	// 			"name": "aarm-base-configmap-volume"
	// 		},
	// 		{
	// 			"name": "panling-secret-volume",
	// 			"secret": {
	// 				"defaultMode": 256,
	// 				"secretName": "panling"
	// 			}
	// 		},
	// 		{
	// 			"name": "afa-public-data-pv",
	// 			"persistentVolumeClaim": {
	// 				"claimName": "afa-public-data"
	// 			}
	// 		},
	// 		{
	// 			"hostPath": {
	// 				"path": "/local"
	// 			},
	// 			"name": "container-local-host-volume"
	// 		}
	// 	]
	// }
	VolumesStr *string `json:"volumes_str,omitempty" xml:"volumes_str,omitempty"`
	// 基础字段覆盖
	FieldOverrides []*FieldOverride `json:"field_overrides,omitempty" xml:"field_overrides,omitempty" type:"Repeated"`
}

func (s ContainerSpec) String() string {
	return tea.Prettify(s)
}

func (s ContainerSpec) GoString() string {
	return s.String()
}

func (s *ContainerSpec) SetCpuLimit(v string) *ContainerSpec {
	s.CpuLimit = &v
	return s
}

func (s *ContainerSpec) SetCpuRequest(v string) *ContainerSpec {
	s.CpuRequest = &v
	return s
}

func (s *ContainerSpec) SetEntryPoints(v []*string) *ContainerSpec {
	s.EntryPoints = v
	return s
}

func (s *ContainerSpec) SetEnvs(v []*EnvVar) *ContainerSpec {
	s.Envs = v
	return s
}

func (s *ContainerSpec) SetEnvOverrides(v []*EnvVarOverride) *ContainerSpec {
	s.EnvOverrides = v
	return s
}

func (s *ContainerSpec) SetHealthCheckConfig(v *HealthCheckConfig) *ContainerSpec {
	s.HealthCheckConfig = v
	return s
}

func (s *ContainerSpec) SetImage(v string) *ContainerSpec {
	s.Image = &v
	return s
}

func (s *ContainerSpec) SetImageBuildName(v string) *ContainerSpec {
	s.ImageBuildName = &v
	return s
}

func (s *ContainerSpec) SetImagePullSecret(v string) *ContainerSpec {
	s.ImagePullSecret = &v
	return s
}

func (s *ContainerSpec) SetImageSource(v string) *ContainerSpec {
	s.ImageSource = &v
	return s
}

func (s *ContainerSpec) SetLifecycleHook(v *LifecycleHook) *ContainerSpec {
	s.LifecycleHook = v
	return s
}

func (s *ContainerSpec) SetLogConfigs(v []*LogConfigEntity) *ContainerSpec {
	s.LogConfigs = v
	return s
}

func (s *ContainerSpec) SetMemoryLimit(v string) *ContainerSpec {
	s.MemoryLimit = &v
	return s
}

func (s *ContainerSpec) SetMemoryRequest(v string) *ContainerSpec {
	s.MemoryRequest = &v
	return s
}

func (s *ContainerSpec) SetName(v string) *ContainerSpec {
	s.Name = &v
	return s
}

func (s *ContainerSpec) SetRestartPolicy(v string) *ContainerSpec {
	s.RestartPolicy = &v
	return s
}

func (s *ContainerSpec) SetType(v string) *ContainerSpec {
	s.Type = &v
	return s
}

func (s *ContainerSpec) SetVolumeMounts(v []*VolumeMount) *ContainerSpec {
	s.VolumeMounts = v
	return s
}

func (s *ContainerSpec) SetVolumeMountsStr(v string) *ContainerSpec {
	s.VolumeMountsStr = &v
	return s
}

func (s *ContainerSpec) SetVolumesStr(v string) *ContainerSpec {
	s.VolumesStr = &v
	return s
}

func (s *ContainerSpec) SetFieldOverrides(v []*FieldOverride) *ContainerSpec {
	s.FieldOverrides = v
	return s
}

// PodReadinessGate contains the reference to a pod condition
type PodReadinessGate struct {
	// ConditionType refers to a condition in the pod s condition list with matching type.
	ConditionType *string `json:"condition_type,omitempty" xml:"condition_type,omitempty" require:"true"`
}

func (s PodReadinessGate) String() string {
	return tea.Prettify(s)
}

func (s PodReadinessGate) GoString() string {
	return s.String()
}

func (s *PodReadinessGate) SetConditionType(v string) *PodReadinessGate {
	s.ConditionType = &v
	return s
}

// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod s hosts file.
type HostAlias struct {
	// Hostnames for the above IP address.
	Hostnames []*string `json:"hostnames,omitempty" xml:"hostnames,omitempty" type:"Repeated"`
	// IP address of the host file entry.
	//
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
}

func (s HostAlias) String() string {
	return tea.Prettify(s)
}

func (s HostAlias) GoString() string {
	return s.String()
}

func (s *HostAlias) SetHostnames(v []*string) *HostAlias {
	s.Hostnames = v
	return s
}

func (s *HostAlias) SetIp(v string) *HostAlias {
	s.Ip = &v
	return s
}

// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
type PodDNSConfig struct {
	// A list of DNS name server IP addresses
	Nameservers []*string `json:"nameservers,omitempty" xml:"nameservers,omitempty" type:"Repeated"`
	// A list of DNS resolver options.
	Options []*PodDNSConfigOption `json:"options,omitempty" xml:"options,omitempty" type:"Repeated"`
	// A list of DNS search domains for host-name lookup
	Searches []*string `json:"searches,omitempty" xml:"searches,omitempty" require:"true" type:"Repeated"`
}

func (s PodDNSConfig) String() string {
	return tea.Prettify(s)
}

func (s PodDNSConfig) GoString() string {
	return s.String()
}

func (s *PodDNSConfig) SetNameservers(v []*string) *PodDNSConfig {
	s.Nameservers = v
	return s
}

func (s *PodDNSConfig) SetOptions(v []*PodDNSConfigOption) *PodDNSConfig {
	s.Options = v
	return s
}

func (s *PodDNSConfig) SetSearches(v []*string) *PodDNSConfig {
	s.Searches = v
	return s
}

// Specification of the desired behavior of the pod.
type PodSpec struct {
	// Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers
	ActiveDeadlineSeconds *int64 `json:"active_deadline_seconds,omitempty" xml:"active_deadline_seconds,omitempty"`
	// If specified, the pod s scheduling constraints
	//
	Affinity *Affinity `json:"affinity,omitempty" xml:"affinity,omitempty"`
	// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
	//
	AutomountServiceAccountToken *bool `json:"automount_service_account_token,omitempty" xml:"automount_service_account_token,omitempty"`
	// List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
	//
	Containers []*ContainerSpec `json:"containers,omitempty" xml:"containers,omitempty" require:"true" type:"Repeated"`
	// Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
	DnsConfig *PodDNSConfig `json:"dns_config,omitempty" xml:"dns_config,omitempty"`
	// Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are  ClusterFirstWithHostNet ,  ClusterFirst ,  Default  or  None . DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to  ClusterFirstWithHostNet .
	DnsPolicy *string `json:"dns_policy,omitempty" xml:"dns_policy,omitempty"`
	// EnableServiceLinks indicates whether information about services should be injected into pod s environment variables, matching the syntax of Docker links. Optional: Defaults to true.
	//
	EnableServiceLinks *bool `json:"enable_service_links,omitempty" xml:"enable_service_links,omitempty"`
	// HostAliases is an optional list of hosts and IPs that will be injected into the pod s hosts file if specified. This is only valid for non-hostNetwork pods.
	HostAliases *HostAlias `json:"host_aliases,omitempty" xml:"host_aliases,omitempty"`
	// Use the host s ipc namespace. Optional: Default to false.
	//
	HostIpc *bool `json:"host_ipc,omitempty" xml:"host_ipc,omitempty"`
	// Host networking requested for this pod. Use the host s network namespace. If this option is set, the ports that will be used must be specified. Default to false.
	//
	HostNetwork *bool `json:"host_network,omitempty" xml:"host_network,omitempty"`
	// Use the host s pid namespace. Optional: Default to false.
	//
	HostPid *bool `json:"host_pid,omitempty" xml:"host_pid,omitempty"`
	// Specifies the hostname of the Pod If not specified, the pod s hostname will be set to a system-defined value.
	//
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty"`
	// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec
	ImagePullSecrets []*string `json:"image_pull_secrets,omitempty" xml:"image_pull_secrets,omitempty" type:"Repeated"`
	// List of initialization containers belonging to the pod
	InitContainers []*ContainerSpec `json:"init_containers,omitempty" xml:"init_containers,omitempty" type:"Repeated"`
	// NodeName is a request to schedule this pod onto a specific node.
	NodeName *string `json:"node_name,omitempty" xml:"node_name,omitempty"`
	// NodeSelector is a selector which must be true for the pod to fit on a node
	NodeSelector []*PodNodeSelector `json:"node_selector,omitempty" xml:"node_selector,omitempty" type:"Repeated"`
	// The priority value. Various system components use this field to find the priority of the pod.
	Priority *int64 `json:"priority,omitempty" xml:"priority,omitempty"`
	// If specified, indicates the pod s priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority
	PriorityClassName *string `json:"priority_class_name,omitempty" xml:"priority_class_name,omitempty"`
	// If specified, all readiness gates will be evaluated for pod readiness
	ReadinessGates *PodReadinessGate `json:"readiness_gates,omitempty" xml:"readiness_gates,omitempty"`
	// Restart policy for all containers within the pod
	RestartPolicy *string `json:"restart_policy,omitempty" xml:"restart_policy,omitempty"`
	// ServiceAccountName is the name of the ServiceAccount to use to run this pod
	ServiceAccountName *string `json:"service_account_name,omitempty" xml:"service_account_name,omitempty"`
	// If specified, the pod s tolerations.
	//
	Tolerations []*Toleration `json:"tolerations,omitempty" xml:"tolerations,omitempty" type:"Repeated"`
	// List of volumes that can be mounted by containers belonging to the pod
	Volumes []*Volume `json:"volumes,omitempty" xml:"volumes,omitempty" type:"Repeated"`
}

func (s PodSpec) String() string {
	return tea.Prettify(s)
}

func (s PodSpec) GoString() string {
	return s.String()
}

func (s *PodSpec) SetActiveDeadlineSeconds(v int64) *PodSpec {
	s.ActiveDeadlineSeconds = &v
	return s
}

func (s *PodSpec) SetAffinity(v *Affinity) *PodSpec {
	s.Affinity = v
	return s
}

func (s *PodSpec) SetAutomountServiceAccountToken(v bool) *PodSpec {
	s.AutomountServiceAccountToken = &v
	return s
}

func (s *PodSpec) SetContainers(v []*ContainerSpec) *PodSpec {
	s.Containers = v
	return s
}

func (s *PodSpec) SetDnsConfig(v *PodDNSConfig) *PodSpec {
	s.DnsConfig = v
	return s
}

func (s *PodSpec) SetDnsPolicy(v string) *PodSpec {
	s.DnsPolicy = &v
	return s
}

func (s *PodSpec) SetEnableServiceLinks(v bool) *PodSpec {
	s.EnableServiceLinks = &v
	return s
}

func (s *PodSpec) SetHostAliases(v *HostAlias) *PodSpec {
	s.HostAliases = v
	return s
}

func (s *PodSpec) SetHostIpc(v bool) *PodSpec {
	s.HostIpc = &v
	return s
}

func (s *PodSpec) SetHostNetwork(v bool) *PodSpec {
	s.HostNetwork = &v
	return s
}

func (s *PodSpec) SetHostPid(v bool) *PodSpec {
	s.HostPid = &v
	return s
}

func (s *PodSpec) SetHostname(v string) *PodSpec {
	s.Hostname = &v
	return s
}

func (s *PodSpec) SetImagePullSecrets(v []*string) *PodSpec {
	s.ImagePullSecrets = v
	return s
}

func (s *PodSpec) SetInitContainers(v []*ContainerSpec) *PodSpec {
	s.InitContainers = v
	return s
}

func (s *PodSpec) SetNodeName(v string) *PodSpec {
	s.NodeName = &v
	return s
}

func (s *PodSpec) SetNodeSelector(v []*PodNodeSelector) *PodSpec {
	s.NodeSelector = v
	return s
}

func (s *PodSpec) SetPriority(v int64) *PodSpec {
	s.Priority = &v
	return s
}

func (s *PodSpec) SetPriorityClassName(v string) *PodSpec {
	s.PriorityClassName = &v
	return s
}

func (s *PodSpec) SetReadinessGates(v *PodReadinessGate) *PodSpec {
	s.ReadinessGates = v
	return s
}

func (s *PodSpec) SetRestartPolicy(v string) *PodSpec {
	s.RestartPolicy = &v
	return s
}

func (s *PodSpec) SetServiceAccountName(v string) *PodSpec {
	s.ServiceAccountName = &v
	return s
}

func (s *PodSpec) SetTolerations(v []*Toleration) *PodSpec {
	s.Tolerations = v
	return s
}

func (s *PodSpec) SetVolumes(v []*Volume) *PodSpec {
	s.Volumes = v
	return s
}

// pod detail info
type PodDetailInfo struct {
	// 集群名称
	//
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// pod created time
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 已经具备的finalizers
	Finalizers []*string `json:"finalizers,omitempty" xml:"finalizers,omitempty" type:"Repeated"`
	// pod的生命周期当前阶段
	LifecycleStage *string `json:"lifecycle_stage,omitempty" xml:"lifecycle_stage,omitempty"`
	// pod name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// pod namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// pod ip
	PodIp *string `json:"pod_ip,omitempty" xml:"pod_ip,omitempty" require:"true"`
	// pod的版本
	Revision *string `json:"revision,omitempty" xml:"revision,omitempty"`
	// pod status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// pod uid
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty"`
	// 描述Pod当前状态的信息
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s PodDetailInfo) String() string {
	return tea.Prettify(s)
}

func (s PodDetailInfo) GoString() string {
	return s.String()
}

func (s *PodDetailInfo) SetCluster(v string) *PodDetailInfo {
	s.Cluster = &v
	return s
}

func (s *PodDetailInfo) SetCreatedTime(v string) *PodDetailInfo {
	s.CreatedTime = &v
	return s
}

func (s *PodDetailInfo) SetFinalizers(v []*string) *PodDetailInfo {
	s.Finalizers = v
	return s
}

func (s *PodDetailInfo) SetLifecycleStage(v string) *PodDetailInfo {
	s.LifecycleStage = &v
	return s
}

func (s *PodDetailInfo) SetName(v string) *PodDetailInfo {
	s.Name = &v
	return s
}

func (s *PodDetailInfo) SetNamespace(v string) *PodDetailInfo {
	s.Namespace = &v
	return s
}

func (s *PodDetailInfo) SetPodIp(v string) *PodDetailInfo {
	s.PodIp = &v
	return s
}

func (s *PodDetailInfo) SetRevision(v string) *PodDetailInfo {
	s.Revision = &v
	return s
}

func (s *PodDetailInfo) SetStatus(v string) *PodDetailInfo {
	s.Status = &v
	return s
}

func (s *PodDetailInfo) SetUid(v string) *PodDetailInfo {
	s.Uid = &v
	return s
}

func (s *PodDetailInfo) SetMessage(v string) *PodDetailInfo {
	s.Message = &v
	return s
}

// PodAffinityConfigEntity
type PodAffinityConfig struct {
	// anti_affinity
	AntiAffinity *bool `json:"anti_affinity,omitempty" xml:"anti_affinity,omitempty"`
	// pod_affinity_term
	PodAffinityTerm *PodAffinityTermEntity `json:"pod_affinity_term,omitempty" xml:"pod_affinity_term,omitempty"`
	// requested
	Requested *bool `json:"requested,omitempty" xml:"requested,omitempty"`
	// weight
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty"`
}

func (s PodAffinityConfig) String() string {
	return tea.Prettify(s)
}

func (s PodAffinityConfig) GoString() string {
	return s.String()
}

func (s *PodAffinityConfig) SetAntiAffinity(v bool) *PodAffinityConfig {
	s.AntiAffinity = &v
	return s
}

func (s *PodAffinityConfig) SetPodAffinityTerm(v *PodAffinityTermEntity) *PodAffinityConfig {
	s.PodAffinityTerm = v
	return s
}

func (s *PodAffinityConfig) SetRequested(v bool) *PodAffinityConfig {
	s.Requested = &v
	return s
}

func (s *PodAffinityConfig) SetWeight(v int64) *PodAffinityConfig {
	s.Weight = &v
	return s
}

// 某一部署单元或集群对应的副本数。
type ReplicaCount struct {
	// 副本数量是部署单元维度还是集群维度。目前只支持Cell
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 部署单元名称或集群名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 对应副本数量。
	Count *int64 `json:"count,omitempty" xml:"count,omitempty" require:"true"`
}

func (s ReplicaCount) String() string {
	return tea.Prettify(s)
}

func (s ReplicaCount) GoString() string {
	return s.String()
}

func (s *ReplicaCount) SetType(v string) *ReplicaCount {
	s.Type = &v
	return s
}

func (s *ReplicaCount) SetName(v string) *ReplicaCount {
	s.Name = &v
	return s
}

func (s *ReplicaCount) SetCount(v int64) *ReplicaCount {
	s.Count = &v
	return s
}

// MapResourceNameToValue
type MapResourceNameToValue struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value *ResourceValue `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s MapResourceNameToValue) String() string {
	return tea.Prettify(s)
}

func (s MapResourceNameToValue) GoString() string {
	return s.String()
}

func (s *MapResourceNameToValue) SetKey(v string) *MapResourceNameToValue {
	s.Key = &v
	return s
}

func (s *MapResourceNameToValue) SetValue(v *ResourceValue) *MapResourceNameToValue {
	s.Value = v
	return s
}

// 弹性伸缩指标
type HPABasedElasticConfigMetric struct {
	// 指标名称：
	// CPU，Memory，QPS，RT
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 目标值
	Target *HPABasedElasticConfigMetricTarget `json:"target,omitempty" xml:"target,omitempty" require:"true"`
}

func (s HPABasedElasticConfigMetric) String() string {
	return tea.Prettify(s)
}

func (s HPABasedElasticConfigMetric) GoString() string {
	return s.String()
}

func (s *HPABasedElasticConfigMetric) SetName(v string) *HPABasedElasticConfigMetric {
	s.Name = &v
	return s
}

func (s *HPABasedElasticConfigMetric) SetTarget(v *HPABasedElasticConfigMetricTarget) *HPABasedElasticConfigMetric {
	s.Target = v
	return s
}

// node affinity entity
type NodeAffinityConfig struct {
	// match_expressions
	MatchExpressions []*MatchExpression `json:"match_expressions,omitempty" xml:"match_expressions,omitempty" type:"Repeated"`
	// requested
	Requested *bool `json:"requested,omitempty" xml:"requested,omitempty"`
	// weight
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty"`
}

func (s NodeAffinityConfig) String() string {
	return tea.Prettify(s)
}

func (s NodeAffinityConfig) GoString() string {
	return s.String()
}

func (s *NodeAffinityConfig) SetMatchExpressions(v []*MatchExpression) *NodeAffinityConfig {
	s.MatchExpressions = v
	return s
}

func (s *NodeAffinityConfig) SetRequested(v bool) *NodeAffinityConfig {
	s.Requested = &v
	return s
}

func (s *NodeAffinityConfig) SetWeight(v int64) *NodeAffinityConfig {
	s.Weight = &v
	return s
}

// k8s meta元数据
type ObjectMeta struct {
	// k8s meta annotation
	Annotations []*Annotation `json:"annotations,omitempty" xml:"annotations,omitempty" type:"Repeated"`
	// 创建时间戳
	CreationTimestamp *string `json:"creation_timestamp,omitempty" xml:"creation_timestamp,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// k8s meta labels
	Labels []*Label `json:"labels,omitempty" xml:"labels,omitempty" require:"true" type:"Repeated"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
}

func (s ObjectMeta) String() string {
	return tea.Prettify(s)
}

func (s ObjectMeta) GoString() string {
	return s.String()
}

func (s *ObjectMeta) SetAnnotations(v []*Annotation) *ObjectMeta {
	s.Annotations = v
	return s
}

func (s *ObjectMeta) SetCreationTimestamp(v string) *ObjectMeta {
	s.CreationTimestamp = &v
	return s
}

func (s *ObjectMeta) SetLabels(v []*Label) *ObjectMeta {
	s.Labels = v
	return s
}

func (s *ObjectMeta) SetName(v string) *ObjectMeta {
	s.Name = &v
	return s
}

func (s *ObjectMeta) SetNamespace(v string) *ObjectMeta {
	s.Namespace = &v
	return s
}

// LoadBalancer监听。
type LoadBalancerListener struct {
	// 负载均衡实例后端使用的端口。
	// 取值：1-65535。
	BackendServerPort *int64 `json:"backend_server_port,omitempty" xml:"backend_server_port,omitempty" require:"true"`
	// 监听的带宽峰值，取值：
	// -1：不限制带宽峰值。
	// 1~5120：监听的带宽峰值，所有监听的带宽峰值之和不能超过实例的带宽峰值。
	BandWidth *int64 `json:"band_width,omitempty" xml:"band_width,omitempty"`
	// CA证书ID。
	// 若既上传CA证书又上传服务器证书，即采用双向认证。
	// 若用户只上传服务器证书，即为单向认证。
	CaCertificateId *string `json:"ca_certificate_id,omitempty" xml:"ca_certificate_id,omitempty"`
	// 服务器上配置的Cookie。
	// 长度为1~200个字符，只能包含ASCII英文字母和数字字符，不能包含逗号、分号或空格，也不能以开头。
	Cookie *string `json:"cookie,omitempty" xml:"cookie,omitempty"`
	// Cookie超时时间
	CookieTimeout *int64 `json:"cookie_timeout,omitempty" xml:"cookie_timeout,omitempty"`
	// 连接超时时间（秒）
	EstablishedTimeout *int64 `json:"established_timeout,omitempty" xml:"established_timeout,omitempty"`
	// 健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。
	// 取值: 2-10。
	HealthyThreshold *int64 `json:"healthy_threshold,omitempty" xml:"healthy_threshold,omitempty"`
	// 是否开启健康检查。
	// 取值：ON | OFF。
	HealthCheck *string `json:"health_check,omitempty" xml:"health_check,omitempty"`
	// 健康检查端口。
	HealthCheckConnectPort *int64 `json:"health_check_connect_port,omitempty" xml:"health_check_connect_port,omitempty"`
	// 健康检查链接超时时间。
	HealthCheckConnectTimeout *int64 `json:"health_check_connect_timeout,omitempty" xml:"health_check_connect_timeout,omitempty"`
	// 用于健康检查的域名。取值：
	// ip： 后端服务器的私网IP。当指定了IP或该参数未指定时，负载均衡会使用各后端服务器的私网IP当做健康检查使用的域名。
	// domain：域名长度为1-80，只能包含字母、数字、点号（.）和连字符（-）。
	HealthCheckDomain *string `json:"health_check_domain,omitempty" xml:"health_check_domain,omitempty"`
	// 健康检查正常的HTTP状态码，多个状态码用逗号分隔。
	// 默认值为http_2xx。
	HealthCheckHttpCode *string `json:"health_check_http_code,omitempty" xml:"health_check_http_code,omitempty"`
	// 健康检查的时间间隔。
	// 取值:1-50（秒）。
	HealthCheckInterval *int64 `json:"health_check_interval,omitempty" xml:"health_check_interval,omitempty"`
	// 健康检查threshold。
	HealthCheckThreshold *int64 `json:"health_check_threshold,omitempty" xml:"health_check_threshold,omitempty"`
	// 接收来自运行状况检查的响应需要等待的时间。如果后端ECS在指定的时间内没有正确响应，则判定为健康检查失败。
	// 取值：1-300（秒）。
	HealthCheckTimeout *int64 `json:"health_check_timeout,omitempty" xml:"health_check_timeout,omitempty"`
	// 用于健康检查的URI。
	// 当TCP监听需要使用HTTP健康检查时可配置此参数，如不配置则按TCP健康检查。
	HealthCheckUri *string `json:"health_check_uri,omitempty" xml:"health_check_uri,omitempty"`
	// 负载均衡实例前端使用的端口。
	// 取值：1-65535。
	ListenerPort *int64 `json:"listener_port,omitempty" xml:"listener_port,omitempty"`
	// TCP 会话保持的超时时间（秒）
	PersistenceTimeout *int64 `json:"persistence_timeout,omitempty" xml:"persistence_timeout,omitempty"`
	// 监听使用协议。
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// 负载均衡策略（RR 轮询 | WLC 最小连接数）
	Scheduler *string `json:"scheduler,omitempty" xml:"scheduler,omitempty"`
	// 0不开会话保持 / 1植入Cookie / 2重写Cookie。
	// 开启会话保持功能后，负载均衡会把来自同一客户端的访问请求分发到同一台后端服务器上进行处理。
	// HTTP协议会话保持基于Cookie。负载均衡提供了两种Cookie处理方式：
	// 植入Cookie：您只需要指定Cookie的过期时间。
	// 客户端第一次访问时，负载均衡会在返回请求中植入Cookie（即在HTTP/HTTPS响应报文中插入SERVERID），下次客户端携带此Cookie访问，负载均衡服务会将请求定向转发给之前记录到的后端服务器上。
	// 重写Cookie：可以根据需要指定HTTPS/HTTP响应中插入的Cookie。您需要在后端服务器上维护该Cookie的过期时间和生存时间。
	// 负载均衡服务发现用户自定义了Cookie，将会对原来的Cookie进行重写，下次客户端携带新的Cookie访问，负载均衡服务会将请求定向转发给之前记录到的后端服务器
	SessionStickyType *int64 `json:"session_sticky_type,omitempty" xml:"session_sticky_type,omitempty" require:"true"`
	// 健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。
	// 取值：2-10。
	UnhealthyThreshold *int64 `json:"unhealthy_threshold,omitempty" xml:"unhealthy_threshold,omitempty"`
	// 是否开启通过 X-Forwarded-For 的方式获取来访者真实 IP
	XforwardFor *bool `json:"xforward_for,omitempty" xml:"xforward_for,omitempty"`
	// 统一接入域名
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty"`
	// 统一接入转发路径
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
}

func (s LoadBalancerListener) String() string {
	return tea.Prettify(s)
}

func (s LoadBalancerListener) GoString() string {
	return s.String()
}

func (s *LoadBalancerListener) SetBackendServerPort(v int64) *LoadBalancerListener {
	s.BackendServerPort = &v
	return s
}

func (s *LoadBalancerListener) SetBandWidth(v int64) *LoadBalancerListener {
	s.BandWidth = &v
	return s
}

func (s *LoadBalancerListener) SetCaCertificateId(v string) *LoadBalancerListener {
	s.CaCertificateId = &v
	return s
}

func (s *LoadBalancerListener) SetCookie(v string) *LoadBalancerListener {
	s.Cookie = &v
	return s
}

func (s *LoadBalancerListener) SetCookieTimeout(v int64) *LoadBalancerListener {
	s.CookieTimeout = &v
	return s
}

func (s *LoadBalancerListener) SetEstablishedTimeout(v int64) *LoadBalancerListener {
	s.EstablishedTimeout = &v
	return s
}

func (s *LoadBalancerListener) SetHealthyThreshold(v int64) *LoadBalancerListener {
	s.HealthyThreshold = &v
	return s
}

func (s *LoadBalancerListener) SetHealthCheck(v string) *LoadBalancerListener {
	s.HealthCheck = &v
	return s
}

func (s *LoadBalancerListener) SetHealthCheckConnectPort(v int64) *LoadBalancerListener {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *LoadBalancerListener) SetHealthCheckConnectTimeout(v int64) *LoadBalancerListener {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *LoadBalancerListener) SetHealthCheckDomain(v string) *LoadBalancerListener {
	s.HealthCheckDomain = &v
	return s
}

func (s *LoadBalancerListener) SetHealthCheckHttpCode(v string) *LoadBalancerListener {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *LoadBalancerListener) SetHealthCheckInterval(v int64) *LoadBalancerListener {
	s.HealthCheckInterval = &v
	return s
}

func (s *LoadBalancerListener) SetHealthCheckThreshold(v int64) *LoadBalancerListener {
	s.HealthCheckThreshold = &v
	return s
}

func (s *LoadBalancerListener) SetHealthCheckTimeout(v int64) *LoadBalancerListener {
	s.HealthCheckTimeout = &v
	return s
}

func (s *LoadBalancerListener) SetHealthCheckUri(v string) *LoadBalancerListener {
	s.HealthCheckUri = &v
	return s
}

func (s *LoadBalancerListener) SetListenerPort(v int64) *LoadBalancerListener {
	s.ListenerPort = &v
	return s
}

func (s *LoadBalancerListener) SetPersistenceTimeout(v int64) *LoadBalancerListener {
	s.PersistenceTimeout = &v
	return s
}

func (s *LoadBalancerListener) SetProtocol(v string) *LoadBalancerListener {
	s.Protocol = &v
	return s
}

func (s *LoadBalancerListener) SetScheduler(v string) *LoadBalancerListener {
	s.Scheduler = &v
	return s
}

func (s *LoadBalancerListener) SetSessionStickyType(v int64) *LoadBalancerListener {
	s.SessionStickyType = &v
	return s
}

func (s *LoadBalancerListener) SetUnhealthyThreshold(v int64) *LoadBalancerListener {
	s.UnhealthyThreshold = &v
	return s
}

func (s *LoadBalancerListener) SetXforwardFor(v bool) *LoadBalancerListener {
	s.XforwardFor = &v
	return s
}

func (s *LoadBalancerListener) SetDomain(v string) *LoadBalancerListener {
	s.Domain = &v
	return s
}

func (s *LoadBalancerListener) SetPath(v string) *LoadBalancerListener {
	s.Path = &v
	return s
}

// container state
type ContainerState struct {
	// container running state
	Running *ContainerStateRunning `json:"running,omitempty" xml:"running,omitempty" require:"true"`
	// container terminated state
	Terminated *ContainerStateTerminated `json:"terminated,omitempty" xml:"terminated,omitempty" require:"true"`
	// container waiting state
	Waiting *ContainerStateWaiting `json:"waiting,omitempty" xml:"waiting,omitempty" require:"true"`
}

func (s ContainerState) String() string {
	return tea.Prettify(s)
}

func (s ContainerState) GoString() string {
	return s.String()
}

func (s *ContainerState) SetRunning(v *ContainerStateRunning) *ContainerState {
	s.Running = v
	return s
}

func (s *ContainerState) SetTerminated(v *ContainerStateTerminated) *ContainerState {
	s.Terminated = v
	return s
}

func (s *ContainerState) SetWaiting(v *ContainerStateWaiting) *ContainerState {
	s.Waiting = v
	return s
}

// 每个cell副本数map
type CellReplicasMap struct {
	// cell name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 副本数
	Replicas *int64 `json:"replicas,omitempty" xml:"replicas,omitempty" require:"true"`
}

func (s CellReplicasMap) String() string {
	return tea.Prettify(s)
}

func (s CellReplicasMap) GoString() string {
	return s.String()
}

func (s *CellReplicasMap) SetName(v string) *CellReplicasMap {
	s.Name = &v
	return s
}

func (s *CellReplicasMap) SetReplicas(v int64) *CellReplicasMap {
	s.Replicas = &v
	return s
}

// deployment strategy rolling update
type RollingUpdateDeployment struct {
	// The maximum number of pods that can be scheduled above the desired number of pods.
	MaxSurge *string `json:"max_surge,omitempty" xml:"max_surge,omitempty"`
	// The maximum number of pods that can be unavailable during the update.
	MaxUnavailable *string `json:"max_unavailable,omitempty" xml:"max_unavailable,omitempty"`
}

func (s RollingUpdateDeployment) String() string {
	return tea.Prettify(s)
}

func (s RollingUpdateDeployment) GoString() string {
	return s.String()
}

func (s *RollingUpdateDeployment) SetMaxSurge(v string) *RollingUpdateDeployment {
	s.MaxSurge = &v
	return s
}

func (s *RollingUpdateDeployment) SetMaxUnavailable(v string) *RollingUpdateDeployment {
	s.MaxUnavailable = &v
	return s
}

// 扩缩容策略高级配置项
type HPAScaleBehavior struct {
	// 扩容高级规则
	ScaleUp *HPAScaleRule `json:"scale_up,omitempty" xml:"scale_up,omitempty"`
	// 缩容高级规则
	ScaleDown *HPAScaleRule `json:"scale_down,omitempty" xml:"scale_down,omitempty"`
}

func (s HPAScaleBehavior) String() string {
	return tea.Prettify(s)
}

func (s HPAScaleBehavior) GoString() string {
	return s.String()
}

func (s *HPAScaleBehavior) SetScaleUp(v *HPAScaleRule) *HPAScaleBehavior {
	s.ScaleUp = v
	return s
}

func (s *HPAScaleBehavior) SetScaleDown(v *HPAScaleRule) *HPAScaleBehavior {
	s.ScaleDown = v
	return s
}

// App配置依赖
type AppReleaseConfigDependOn struct {
	// 类型
	Kind *string `json:"kind,omitempty" xml:"kind,omitempty" require:"true"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s AppReleaseConfigDependOn) String() string {
	return tea.Prettify(s)
}

func (s AppReleaseConfigDependOn) GoString() string {
	return s.String()
}

func (s *AppReleaseConfigDependOn) SetKind(v string) *AppReleaseConfigDependOn {
	s.Kind = &v
	return s
}

func (s *AppReleaseConfigDependOn) SetName(v string) *AppReleaseConfigDependOn {
	s.Name = &v
	return s
}

// 单元服务器(pod)信息
type CellServer struct {
	// 单元名字
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// server或pod组
	Servers []*string `json:"servers,omitempty" xml:"servers,omitempty" type:"Repeated"`
	// cell中host的数量
	Count *int64 `json:"count,omitempty" xml:"count,omitempty" require:"true"`
}

func (s CellServer) String() string {
	return tea.Prettify(s)
}

func (s CellServer) GoString() string {
	return s.String()
}

func (s *CellServer) SetCell(v string) *CellServer {
	s.Cell = &v
	return s
}

func (s *CellServer) SetServers(v []*string) *CellServer {
	s.Servers = v
	return s
}

func (s *CellServer) SetCount(v int64) *CellServer {
	s.Count = &v
	return s
}

// Deployment PodTemplateSpec
type PodTemplateSpec struct {
	// k8s Standard object s metadata.
	Metadata *ObjectMeta `json:"metadata,omitempty" xml:"metadata,omitempty" require:"true"`
	// Specification of the desired behavior of the pod.
	Spec *PodSpec `json:"spec,omitempty" xml:"spec,omitempty" require:"true"`
}

func (s PodTemplateSpec) String() string {
	return tea.Prettify(s)
}

func (s PodTemplateSpec) GoString() string {
	return s.String()
}

func (s *PodTemplateSpec) SetMetadata(v *ObjectMeta) *PodTemplateSpec {
	s.Metadata = v
	return s
}

func (s *PodTemplateSpec) SetSpec(v *PodSpec) *PodTemplateSpec {
	s.Spec = v
	return s
}

// DeploymentCondition describes the state of a deployment at a certain point.
type DeploymentCondition struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `json:"last_transition_time,omitempty" xml:"last_transition_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// The last time this condition was updated.
	//
	LastUpdateTime *string `json:"last_update_time,omitempty" xml:"last_update_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// A human readable message indicating details about the transition.
	//
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// The reason for the condition s last transition.
	//
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// Type of deployment condition.
	//
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s DeploymentCondition) String() string {
	return tea.Prettify(s)
}

func (s DeploymentCondition) GoString() string {
	return s.String()
}

func (s *DeploymentCondition) SetLastTransitionTime(v string) *DeploymentCondition {
	s.LastTransitionTime = &v
	return s
}

func (s *DeploymentCondition) SetLastUpdateTime(v string) *DeploymentCondition {
	s.LastUpdateTime = &v
	return s
}

func (s *DeploymentCondition) SetMessage(v string) *DeploymentCondition {
	s.Message = &v
	return s
}

func (s *DeploymentCondition) SetReason(v string) *DeploymentCondition {
	s.Reason = &v
	return s
}

func (s *DeploymentCondition) SetStatus(v string) *DeploymentCondition {
	s.Status = &v
	return s
}

func (s *DeploymentCondition) SetType(v string) *DeploymentCondition {
	s.Type = &v
	return s
}

// 容器服务访问配置端口映射。
type ServicePortMapping struct {
	// 访问配置前端端口。
	Port *int64 `json:"port,omitempty" xml:"port,omitempty" require:"true"`
	// 访问配置协议。
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty" require:"true"`
	// 访问配置后端端口。
	TargetPort *int64 `json:"target_port,omitempty" xml:"target_port,omitempty" require:"true"`
}

func (s ServicePortMapping) String() string {
	return tea.Prettify(s)
}

func (s ServicePortMapping) GoString() string {
	return s.String()
}

func (s *ServicePortMapping) SetPort(v int64) *ServicePortMapping {
	s.Port = &v
	return s
}

func (s *ServicePortMapping) SetProtocol(v string) *ServicePortMapping {
	s.Protocol = &v
	return s
}

func (s *ServicePortMapping) SetTargetPort(v int64) *ServicePortMapping {
	s.TargetPort = &v
	return s
}

// 一个计算容器上正在执行的任务。
type OpsComputerTask struct {
	// 任务描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 执行详情。如果任务成功，为执行日志；如果任务失败，为错误信息
	ExecuteDetails *string `json:"execute_details,omitempty" xml:"execute_details,omitempty"`
	// 任务结束时间
	FinishTime *string `json:"finish_time,omitempty" xml:"finish_time,omitempty"`
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 任务开始时间
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty"`
	// 任务状态。取值列表： EXECUTING：执行中； SUCCESS：执行成功； FAILED：执行失败
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s OpsComputerTask) String() string {
	return tea.Prettify(s)
}

func (s OpsComputerTask) GoString() string {
	return s.String()
}

func (s *OpsComputerTask) SetDescription(v string) *OpsComputerTask {
	s.Description = &v
	return s
}

func (s *OpsComputerTask) SetExecuteDetails(v string) *OpsComputerTask {
	s.ExecuteDetails = &v
	return s
}

func (s *OpsComputerTask) SetFinishTime(v string) *OpsComputerTask {
	s.FinishTime = &v
	return s
}

func (s *OpsComputerTask) SetName(v string) *OpsComputerTask {
	s.Name = &v
	return s
}

func (s *OpsComputerTask) SetStartTime(v string) *OpsComputerTask {
	s.StartTime = &v
	return s
}

func (s *OpsComputerTask) SetStatus(v string) *OpsComputerTask {
	s.Status = &v
	return s
}

// 统一接入listener需要配置转发规则。
type LoadBalancerListenerWithRule struct {
	// 统一接入域名。
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// 负载均衡监听。
	Listener *LoadBalancerListener `json:"listener,omitempty" xml:"listener,omitempty" require:"true"`
	// 转发路径。
	Path *string `json:"path,omitempty" xml:"path,omitempty" require:"true"`
	// 权重。
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty"`
}

func (s LoadBalancerListenerWithRule) String() string {
	return tea.Prettify(s)
}

func (s LoadBalancerListenerWithRule) GoString() string {
	return s.String()
}

func (s *LoadBalancerListenerWithRule) SetDomain(v string) *LoadBalancerListenerWithRule {
	s.Domain = &v
	return s
}

func (s *LoadBalancerListenerWithRule) SetListener(v *LoadBalancerListener) *LoadBalancerListenerWithRule {
	s.Listener = v
	return s
}

func (s *LoadBalancerListenerWithRule) SetPath(v string) *LoadBalancerListenerWithRule {
	s.Path = &v
	return s
}

func (s *LoadBalancerListenerWithRule) SetWeight(v int64) *LoadBalancerListenerWithRule {
	s.Weight = &v
	return s
}

// 镜像中心账户信息
type RegistryAccout struct {
	// registry email url
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// registry password
	Password *string `json:"password,omitempty" xml:"password,omitempty" require:"true"`
	// registry url
	Registry *string `json:"registry,omitempty" xml:"registry,omitempty" require:"true"`
	// registry username
	Username *string `json:"username,omitempty" xml:"username,omitempty" require:"true"`
}

func (s RegistryAccout) String() string {
	return tea.Prettify(s)
}

func (s RegistryAccout) GoString() string {
	return s.String()
}

func (s *RegistryAccout) SetEmail(v string) *RegistryAccout {
	s.Email = &v
	return s
}

func (s *RegistryAccout) SetPassword(v string) *RegistryAccout {
	s.Password = &v
	return s
}

func (s *RegistryAccout) SetRegistry(v string) *RegistryAccout {
	s.Registry = &v
	return s
}

func (s *RegistryAccout) SetUsername(v string) *RegistryAccout {
	s.Username = &v
	return s
}

// container status
type ContainerStatus struct {
	// container id
	ContainerId *string `json:"container_id,omitempty" xml:"container_id,omitempty" require:"true"`
	// image
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// 上一次启动时间
	LastStartTime *string `json:"last_start_time,omitempty" xml:"last_start_time,omitempty" require:"true"`
	// container name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 是否ready
	Ready *bool `json:"ready,omitempty" xml:"ready,omitempty" require:"true"`
	// 重启次数
	RestartCount *int64 `json:"restart_count,omitempty" xml:"restart_count,omitempty" require:"true"`
	// container state
	State *ContainerState `json:"state,omitempty" xml:"state,omitempty" require:"true"`
}

func (s ContainerStatus) String() string {
	return tea.Prettify(s)
}

func (s ContainerStatus) GoString() string {
	return s.String()
}

func (s *ContainerStatus) SetContainerId(v string) *ContainerStatus {
	s.ContainerId = &v
	return s
}

func (s *ContainerStatus) SetImage(v string) *ContainerStatus {
	s.Image = &v
	return s
}

func (s *ContainerStatus) SetLastStartTime(v string) *ContainerStatus {
	s.LastStartTime = &v
	return s
}

func (s *ContainerStatus) SetName(v string) *ContainerStatus {
	s.Name = &v
	return s
}

func (s *ContainerStatus) SetReady(v bool) *ContainerStatus {
	s.Ready = &v
	return s
}

func (s *ContainerStatus) SetRestartCount(v int64) *ContainerStatus {
	s.RestartCount = &v
	return s
}

func (s *ContainerStatus) SetState(v *ContainerState) *ContainerStatus {
	s.State = v
	return s
}

// ResourceRequirementConfig
type ResourceRequirementConfig struct {
	// limits
	Limits []*MapResourceNameToValue `json:"limits,omitempty" xml:"limits,omitempty" type:"Repeated"`
	// requests
	Requests []*MapResourceNameToValue `json:"requests,omitempty" xml:"requests,omitempty" type:"Repeated"`
}

func (s ResourceRequirementConfig) String() string {
	return tea.Prettify(s)
}

func (s ResourceRequirementConfig) GoString() string {
	return s.String()
}

func (s *ResourceRequirementConfig) SetLimits(v []*MapResourceNameToValue) *ResourceRequirementConfig {
	s.Limits = v
	return s
}

func (s *ResourceRequirementConfig) SetRequests(v []*MapResourceNameToValue) *ResourceRequirementConfig {
	s.Requests = v
	return s
}

// 应用发布单个cell发布进度详情
type AppDeployCell struct {
	// 单元名字
	CellName *string `json:"cell_name,omitempty" xml:"cell_name,omitempty" require:"true"`
	// 执行到当前cell的pod总数
	Partition *int64 `json:"partition,omitempty" xml:"partition,omitempty" require:"true"`
	// 当前分组发布的pod数
	ReleaseCount *int64 `json:"release_count,omitempty" xml:"release_count,omitempty" require:"true"`
	// 当前cell发布的pod列表
	PodList []*PodDetailInfo `json:"pod_list,omitempty" xml:"pod_list,omitempty" require:"true" type:"Repeated"`
}

func (s AppDeployCell) String() string {
	return tea.Prettify(s)
}

func (s AppDeployCell) GoString() string {
	return s.String()
}

func (s *AppDeployCell) SetCellName(v string) *AppDeployCell {
	s.CellName = &v
	return s
}

func (s *AppDeployCell) SetPartition(v int64) *AppDeployCell {
	s.Partition = &v
	return s
}

func (s *AppDeployCell) SetReleaseCount(v int64) *AppDeployCell {
	s.ReleaseCount = &v
	return s
}

func (s *AppDeployCell) SetPodList(v []*PodDetailInfo) *AppDeployCell {
	s.PodList = v
	return s
}

// AffinityEntity
type AffinityEntity struct {
	// NodeAffinityConfig list
	NodeAffinity []*NodeAffinityConfig `json:"node_affinity,omitempty" xml:"node_affinity,omitempty" type:"Repeated"`
	// pod_affinity list
	PodAffinity []*PodAffinityConfig `json:"pod_affinity,omitempty" xml:"pod_affinity,omitempty" type:"Repeated"`
}

func (s AffinityEntity) String() string {
	return tea.Prettify(s)
}

func (s AffinityEntity) GoString() string {
	return s.String()
}

func (s *AffinityEntity) SetNodeAffinity(v []*NodeAffinityConfig) *AffinityEntity {
	s.NodeAffinity = v
	return s
}

func (s *AffinityEntity) SetPodAffinity(v []*PodAffinityConfig) *AffinityEntity {
	s.PodAffinity = v
	return s
}

// 固定副本数弹性配置。
type FixedReplicaElasticConfig struct {
	// 各部署单元/集群的副本数配置。
	Replicas []*ReplicaCount `json:"replicas,omitempty" xml:"replicas,omitempty" require:"true" type:"Repeated"`
}

func (s FixedReplicaElasticConfig) String() string {
	return tea.Prettify(s)
}

func (s FixedReplicaElasticConfig) GoString() string {
	return s.String()
}

func (s *FixedReplicaElasticConfig) SetReplicas(v []*ReplicaCount) *FixedReplicaElasticConfig {
	s.Replicas = v
	return s
}

// 基于弹性伸缩的应用服务配置
type HPABasedElasticConfig struct {
	// pod要发布的部署单元及每个部署单元副本数的映射关系列表
	Cells []*CellReplicasMap `json:"cells,omitempty" xml:"cells,omitempty" require:"true" type:"Repeated"`
	// 最小副本数
	MinReplica *int64 `json:"min_replica,omitempty" xml:"min_replica,omitempty" require:"true"`
	// 最大副本数
	MaxReplica *int64 `json:"max_replica,omitempty" xml:"max_replica,omitempty" require:"true"`
	// 弹性伸缩指标列表
	Metrics []*HPABasedElasticConfigMetric `json:"metrics,omitempty" xml:"metrics,omitempty" require:"true" type:"Repeated"`
	// 扩缩容规则高级配置
	Behavior *HPAScaleBehavior `json:"behavior,omitempty" xml:"behavior,omitempty"`
}

func (s HPABasedElasticConfig) String() string {
	return tea.Prettify(s)
}

func (s HPABasedElasticConfig) GoString() string {
	return s.String()
}

func (s *HPABasedElasticConfig) SetCells(v []*CellReplicasMap) *HPABasedElasticConfig {
	s.Cells = v
	return s
}

func (s *HPABasedElasticConfig) SetMinReplica(v int64) *HPABasedElasticConfig {
	s.MinReplica = &v
	return s
}

func (s *HPABasedElasticConfig) SetMaxReplica(v int64) *HPABasedElasticConfig {
	s.MaxReplica = &v
	return s
}

func (s *HPABasedElasticConfig) SetMetrics(v []*HPABasedElasticConfigMetric) *HPABasedElasticConfig {
	s.Metrics = v
	return s
}

func (s *HPABasedElasticConfig) SetBehavior(v *HPAScaleBehavior) *HPABasedElasticConfig {
	s.Behavior = v
	return s
}

// The deployment strategy to use to replace existing pods with new ones.
type DeploymentStrategy struct {
	// Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
	RollingUpdate *RollingUpdateDeployment `json:"rolling_update,omitempty" xml:"rolling_update,omitempty"`
	// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s DeploymentStrategy) String() string {
	return tea.Prettify(s)
}

func (s DeploymentStrategy) GoString() string {
	return s.String()
}

func (s *DeploymentStrategy) SetRollingUpdate(v *RollingUpdateDeployment) *DeploymentStrategy {
	s.RollingUpdate = v
	return s
}

func (s *DeploymentStrategy) SetType(v string) *DeploymentStrategy {
	s.Type = &v
	return s
}

// 部署单元内Pods
type CellPods struct {
	// 部署单元名称
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// pod标识列表
	PodNames []*string `json:"pod_names,omitempty" xml:"pod_names,omitempty" require:"true" type:"Repeated"`
}

func (s CellPods) String() string {
	return tea.Prettify(s)
}

func (s CellPods) GoString() string {
	return s.String()
}

func (s *CellPods) SetCell(v string) *CellPods {
	s.Cell = &v
	return s
}

func (s *CellPods) SetPodNames(v []*string) *CellPods {
	s.PodNames = v
	return s
}

// 容器信息
type ContainerInfo struct {
	// 容器id
	ContainerId *string `json:"container_id,omitempty" xml:"container_id,omitempty" require:"true"`
	// 容器镜像
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// 最后启动时间
	LastStartTime *string `json:"last_start_time,omitempty" xml:"last_start_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 容器镜像
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 重启次数
	RestartCount *int64 `json:"restart_count,omitempty" xml:"restart_count,omitempty" require:"true"`
	// 容器运行状态
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// 容器spec配置。
	Spec *ContainerSpec `json:"spec,omitempty" xml:"spec,omitempty" require:"true"`
}

func (s ContainerInfo) String() string {
	return tea.Prettify(s)
}

func (s ContainerInfo) GoString() string {
	return s.String()
}

func (s *ContainerInfo) SetContainerId(v string) *ContainerInfo {
	s.ContainerId = &v
	return s
}

func (s *ContainerInfo) SetImage(v string) *ContainerInfo {
	s.Image = &v
	return s
}

func (s *ContainerInfo) SetLastStartTime(v string) *ContainerInfo {
	s.LastStartTime = &v
	return s
}

func (s *ContainerInfo) SetName(v string) *ContainerInfo {
	s.Name = &v
	return s
}

func (s *ContainerInfo) SetRestartCount(v int64) *ContainerInfo {
	s.RestartCount = &v
	return s
}

func (s *ContainerInfo) SetState(v string) *ContainerInfo {
	s.State = &v
	return s
}

func (s *ContainerInfo) SetSpec(v *ContainerSpec) *ContainerInfo {
	s.Spec = v
	return s
}

// sidecar运维流程任务
type SidecarOpsMachineTask struct {
	// 分组ID
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 执行状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 扩展属性 - JSON string
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 执行信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 任务名称
	Target *string `json:"target,omitempty" xml:"target,omitempty"`
	// 开始时间
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 结束时间
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 任务描述
	TargetDesc *string `json:"target_desc,omitempty" xml:"target_desc,omitempty"`
	// 状态描述
	StatusDesc *string `json:"status_desc,omitempty" xml:"status_desc,omitempty"`
}

func (s SidecarOpsMachineTask) String() string {
	return tea.Prettify(s)
}

func (s SidecarOpsMachineTask) GoString() string {
	return s.String()
}

func (s *SidecarOpsMachineTask) SetId(v string) *SidecarOpsMachineTask {
	s.Id = &v
	return s
}

func (s *SidecarOpsMachineTask) SetStatus(v string) *SidecarOpsMachineTask {
	s.Status = &v
	return s
}

func (s *SidecarOpsMachineTask) SetProperties(v string) *SidecarOpsMachineTask {
	s.Properties = &v
	return s
}

func (s *SidecarOpsMachineTask) SetMessage(v string) *SidecarOpsMachineTask {
	s.Message = &v
	return s
}

func (s *SidecarOpsMachineTask) SetTarget(v string) *SidecarOpsMachineTask {
	s.Target = &v
	return s
}

func (s *SidecarOpsMachineTask) SetStartTime(v string) *SidecarOpsMachineTask {
	s.StartTime = &v
	return s
}

func (s *SidecarOpsMachineTask) SetEndTime(v string) *SidecarOpsMachineTask {
	s.EndTime = &v
	return s
}

func (s *SidecarOpsMachineTask) SetTargetDesc(v string) *SidecarOpsMachineTask {
	s.TargetDesc = &v
	return s
}

func (s *SidecarOpsMachineTask) SetStatusDesc(v string) *SidecarOpsMachineTask {
	s.StatusDesc = &v
	return s
}

// 描述本地spanner集群一组容器的详细信息
type LocalSubClusterDetail struct {
	// 可用实例数
	Available *int64 `json:"available,omitempty" xml:"available,omitempty"`
	// 期望实例数
	Desired *int64 `json:"desired,omitempty" xml:"desired,omitempty"`
	// 容器镜像地址
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// 发布容器带的标签
	Labels []*Label `json:"labels,omitempty" xml:"labels,omitempty" type:"Repeated"`
	// 可能存在的错误信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 健康实例数
	Ready *int64 `json:"ready,omitempty" xml:"ready,omitempty"`
	// 实际sub cluster 状态
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// 已更新实例数
	Updated *int64 `json:"updated,omitempty" xml:"updated,omitempty"`
	// 容器版本
	Version *string `json:"version,omitempty" xml:"version,omitempty" require:"true"`
}

func (s LocalSubClusterDetail) String() string {
	return tea.Prettify(s)
}

func (s LocalSubClusterDetail) GoString() string {
	return s.String()
}

func (s *LocalSubClusterDetail) SetAvailable(v int64) *LocalSubClusterDetail {
	s.Available = &v
	return s
}

func (s *LocalSubClusterDetail) SetDesired(v int64) *LocalSubClusterDetail {
	s.Desired = &v
	return s
}

func (s *LocalSubClusterDetail) SetImage(v string) *LocalSubClusterDetail {
	s.Image = &v
	return s
}

func (s *LocalSubClusterDetail) SetLabels(v []*Label) *LocalSubClusterDetail {
	s.Labels = v
	return s
}

func (s *LocalSubClusterDetail) SetMessage(v string) *LocalSubClusterDetail {
	s.Message = &v
	return s
}

func (s *LocalSubClusterDetail) SetReady(v int64) *LocalSubClusterDetail {
	s.Ready = &v
	return s
}

func (s *LocalSubClusterDetail) SetState(v string) *LocalSubClusterDetail {
	s.State = &v
	return s
}

func (s *LocalSubClusterDetail) SetUpdated(v int64) *LocalSubClusterDetail {
	s.Updated = &v
	return s
}

func (s *LocalSubClusterDetail) SetVersion(v string) *LocalSubClusterDetail {
	s.Version = &v
	return s
}

// 统一接入实例的https entry status
type HttpsEntryStatus struct {
	// 统一接入实例https entry分配到的spanner 后端端口
	BackendPort *int64 `json:"backend_port,omitempty" xml:"backend_port,omitempty"`
	// 统一接入实例对应的service分配到的节点端口
	NodePort *int64 `json:"node_port,omitempty" xml:"node_port,omitempty"`
}

func (s HttpsEntryStatus) String() string {
	return tea.Prettify(s)
}

func (s HttpsEntryStatus) GoString() string {
	return s.String()
}

func (s *HttpsEntryStatus) SetBackendPort(v int64) *HttpsEntryStatus {
	s.BackendPort = &v
	return s
}

func (s *HttpsEntryStatus) SetNodePort(v int64) *HttpsEntryStatus {
	s.NodePort = &v
	return s
}

// 容器服务弹性配置。
type ElasticConfig struct {
	// 固定副本数配置。
	FixedReplica *FixedReplicaElasticConfig `json:"fixed_replica,omitempty" xml:"fixed_replica,omitempty"`
	// 弹性伸缩配置
	Hpa *HPABasedElasticConfig `json:"hpa,omitempty" xml:"hpa,omitempty"`
	// 弹性配置模式：
	// FIXED 固定副本数
	// HPA 弹性伸缩
	Mode *string `json:"mode,omitempty" xml:"mode,omitempty"`
}

func (s ElasticConfig) String() string {
	return tea.Prettify(s)
}

func (s ElasticConfig) GoString() string {
	return s.String()
}

func (s *ElasticConfig) SetFixedReplica(v *FixedReplicaElasticConfig) *ElasticConfig {
	s.FixedReplica = v
	return s
}

func (s *ElasticConfig) SetHpa(v *HPABasedElasticConfig) *ElasticConfig {
	s.Hpa = v
	return s
}

func (s *ElasticConfig) SetMode(v string) *ElasticConfig {
	s.Mode = &v
	return s
}

// 有状态应用数据卷模板配置
type VolumeClaimConfig struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// storage_class
	StorageClass *string `json:"storage_class,omitempty" xml:"storage_class,omitempty"`
	// resourceRequirementConfig
	ResourceRequirementConfig *ResourceRequirementConfig `json:"resource_requirement_config,omitempty" xml:"resource_requirement_config,omitempty"`
}

func (s VolumeClaimConfig) String() string {
	return tea.Prettify(s)
}

func (s VolumeClaimConfig) GoString() string {
	return s.String()
}

func (s *VolumeClaimConfig) SetName(v string) *VolumeClaimConfig {
	s.Name = &v
	return s
}

func (s *VolumeClaimConfig) SetStorageClass(v string) *VolumeClaimConfig {
	s.StorageClass = &v
	return s
}

func (s *VolumeClaimConfig) SetResourceRequirementConfig(v *ResourceRequirementConfig) *VolumeClaimConfig {
	s.ResourceRequirementConfig = v
	return s
}

// SidecarConfig
type SidecarConfig struct {
	// Sidercar 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// FEATURE_GATES
	FeatureGates *string `json:"feature_gates,omitempty" xml:"feature_gates,omitempty"`
	// 扩展字段
	Ext *string `json:"ext,omitempty" xml:"ext,omitempty"`
}

func (s SidecarConfig) String() string {
	return tea.Prettify(s)
}

func (s SidecarConfig) GoString() string {
	return s.String()
}

func (s *SidecarConfig) SetName(v string) *SidecarConfig {
	s.Name = &v
	return s
}

func (s *SidecarConfig) SetFeatureGates(v string) *SidecarConfig {
	s.FeatureGates = &v
	return s
}

func (s *SidecarConfig) SetExt(v string) *SidecarConfig {
	s.Ext = &v
	return s
}

// 配置项数据
type ConfigMapData struct {
	// configmap data key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// configmap data value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s ConfigMapData) String() string {
	return tea.Prettify(s)
}

func (s ConfigMapData) GoString() string {
	return s.String()
}

func (s *ConfigMapData) SetKey(v string) *ConfigMapData {
	s.Key = &v
	return s
}

func (s *ConfigMapData) SetValue(v string) *ConfigMapData {
	s.Value = &v
	return s
}

// 应用发布任务，发布详情可操作(跳过、确认、重试等)单元
type AppDeployTask struct {
	// 操作code
	ActionCode *string `json:"action_code,omitempty" xml:"action_code,omitempty" require:"true"`
	// 当前任务的发布单元列表
	AppDeployCells []*AppDeployCell `json:"app_deploy_cells,omitempty" xml:"app_deploy_cells,omitempty" require:"true" type:"Repeated"`
	// 是否支持确认操作
	ConfirmSupported *bool `json:"confirm_supported,omitempty" xml:"confirm_supported,omitempty" require:"true"`
	// 上下文数据，json字符串
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 是否支持跳过操作
	IgnoreSupported *bool `json:"ignore_supported,omitempty" xml:"ignore_supported,omitempty" require:"true"`
	// 是否支持重试操作
	RetrySupported *bool `json:"retry_supported,omitempty" xml:"retry_supported,omitempty" require:"true"`
	// 当前状态
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// 开始时间。
	StartedTime *string `json:"started_time,omitempty" xml:"started_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 结束时间。
	FinishedTime *string `json:"finished_time,omitempty" xml:"finished_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// message detail
	MessageDetail *string `json:"message_detail,omitempty" xml:"message_detail,omitempty"`
}

func (s AppDeployTask) String() string {
	return tea.Prettify(s)
}

func (s AppDeployTask) GoString() string {
	return s.String()
}

func (s *AppDeployTask) SetActionCode(v string) *AppDeployTask {
	s.ActionCode = &v
	return s
}

func (s *AppDeployTask) SetAppDeployCells(v []*AppDeployCell) *AppDeployTask {
	s.AppDeployCells = v
	return s
}

func (s *AppDeployTask) SetConfirmSupported(v bool) *AppDeployTask {
	s.ConfirmSupported = &v
	return s
}

func (s *AppDeployTask) SetData(v string) *AppDeployTask {
	s.Data = &v
	return s
}

func (s *AppDeployTask) SetId(v string) *AppDeployTask {
	s.Id = &v
	return s
}

func (s *AppDeployTask) SetIgnoreSupported(v bool) *AppDeployTask {
	s.IgnoreSupported = &v
	return s
}

func (s *AppDeployTask) SetRetrySupported(v bool) *AppDeployTask {
	s.RetrySupported = &v
	return s
}

func (s *AppDeployTask) SetState(v string) *AppDeployTask {
	s.State = &v
	return s
}

func (s *AppDeployTask) SetStartedTime(v string) *AppDeployTask {
	s.StartedTime = &v
	return s
}

func (s *AppDeployTask) SetFinishedTime(v string) *AppDeployTask {
	s.FinishedTime = &v
	return s
}

func (s *AppDeployTask) SetMessageDetail(v string) *AppDeployTask {
	s.MessageDetail = &v
	return s
}

// DeploymentSpec
type DeploymentSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing
	MinReadySeconds *int64 `json:"min_ready_seconds,omitempty" xml:"min_ready_seconds,omitempty"`
	// Indicates that the deployment is paused.
	//
	Paused *bool `json:"paused,omitempty" xml:"paused,omitempty"`
	// he maximum time in seconds for a deployment to make progress before it is considered to be failed.
	ProgressDeadlineSeconds *int64 `json:"progress_deadline_seconds,omitempty" xml:"progress_deadline_seconds,omitempty"`
	// Number of desired pods.
	Replicas *int64 `json:"replicas,omitempty" xml:"replicas,omitempty" require:"true"`
	// The number of old ReplicaSets to retain to allow rollback.
	RevisionHistoryLimit *int64 `json:"revision_history_limit,omitempty" xml:"revision_history_limit,omitempty"`
	// Label selector for pods.
	Selector *LabelSelector `json:"selector,omitempty" xml:"selector,omitempty"`
	// The deployment strategy to use to replace existing pods with new ones.
	//
	Strategy *DeploymentStrategy `json:"strategy,omitempty" xml:"strategy,omitempty"`
	// Template describes the pods that will be created.
	Template *PodTemplateSpec `json:"template,omitempty" xml:"template,omitempty" require:"true"`
}

func (s DeploymentSpec) String() string {
	return tea.Prettify(s)
}

func (s DeploymentSpec) GoString() string {
	return s.String()
}

func (s *DeploymentSpec) SetMinReadySeconds(v int64) *DeploymentSpec {
	s.MinReadySeconds = &v
	return s
}

func (s *DeploymentSpec) SetPaused(v bool) *DeploymentSpec {
	s.Paused = &v
	return s
}

func (s *DeploymentSpec) SetProgressDeadlineSeconds(v int64) *DeploymentSpec {
	s.ProgressDeadlineSeconds = &v
	return s
}

func (s *DeploymentSpec) SetReplicas(v int64) *DeploymentSpec {
	s.Replicas = &v
	return s
}

func (s *DeploymentSpec) SetRevisionHistoryLimit(v int64) *DeploymentSpec {
	s.RevisionHistoryLimit = &v
	return s
}

func (s *DeploymentSpec) SetSelector(v *LabelSelector) *DeploymentSpec {
	s.Selector = v
	return s
}

func (s *DeploymentSpec) SetStrategy(v *DeploymentStrategy) *DeploymentSpec {
	s.Strategy = v
	return s
}

func (s *DeploymentSpec) SetTemplate(v *PodTemplateSpec) *DeploymentSpec {
	s.Template = v
	return s
}

// 运维操作中的应用
type OpsApplication struct {
	// 应用名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 应用发布版本（部分运维操作可能不包含版本信息，为null）
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
	// 应用（服务）当前运维状态。取值列表： INITING：初始化中； INIT_FAILED：初始化失败； INITED：初始化完成； EXECUTING：执行中； SUCCESS：执行成功； FAILED：执行失败； ROLLBACKED：已回滚； CANCELED：已取消
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s OpsApplication) String() string {
	return tea.Prettify(s)
}

func (s OpsApplication) GoString() string {
	return s.String()
}

func (s *OpsApplication) SetName(v string) *OpsApplication {
	s.Name = &v
	return s
}

func (s *OpsApplication) SetVersion(v string) *OpsApplication {
	s.Version = &v
	return s
}

func (s *OpsApplication) SetStatus(v string) *OpsApplication {
	s.Status = &v
	return s
}

// 统一接入实例http entry status
type HttpEntryStatus struct {
	// 此entry分配到的spanner后端端口（l7 listener 端口）
	BackendPort *int64 `json:"backend_port,omitempty" xml:"backend_port,omitempty"`
	// 此entry对应service分配到的节点端口
	NodePort *int64 `json:"node_port,omitempty" xml:"node_port,omitempty"`
}

func (s HttpEntryStatus) String() string {
	return tea.Prettify(s)
}

func (s HttpEntryStatus) GoString() string {
	return s.String()
}

func (s *HttpEntryStatus) SetBackendPort(v int64) *HttpEntryStatus {
	s.BackendPort = &v
	return s
}

func (s *HttpEntryStatus) SetNodePort(v int64) *HttpEntryStatus {
	s.NodePort = &v
	return s
}

// 解决方案应用发布配置
type AppReleaseConfig struct {
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 应用镜像
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// 应用依赖信息
	DependsOn []*AppReleaseConfigDependOn `json:"depends_on,omitempty" xml:"depends_on,omitempty" require:"true" type:"Repeated"`
	// 完整yaml配置信息
	YamlContent *string `json:"yaml_content,omitempty" xml:"yaml_content,omitempty"`
}

func (s AppReleaseConfig) String() string {
	return tea.Prettify(s)
}

func (s AppReleaseConfig) GoString() string {
	return s.String()
}

func (s *AppReleaseConfig) SetName(v string) *AppReleaseConfig {
	s.Name = &v
	return s
}

func (s *AppReleaseConfig) SetImage(v string) *AppReleaseConfig {
	s.Image = &v
	return s
}

func (s *AppReleaseConfig) SetDependsOn(v []*AppReleaseConfigDependOn) *AppReleaseConfig {
	s.DependsOn = v
	return s
}

func (s *AppReleaseConfig) SetYamlContent(v string) *AppReleaseConfig {
	s.YamlContent = &v
	return s
}

// V1FederatedDeploymentStatusTopologies
type FederatedDeploymentStatusTopologies struct {
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// time
	Time *string `json:"time,omitempty" xml:"time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s FederatedDeploymentStatusTopologies) String() string {
	return tea.Prettify(s)
}

func (s FederatedDeploymentStatusTopologies) GoString() string {
	return s.String()
}

func (s *FederatedDeploymentStatusTopologies) SetMessage(v string) *FederatedDeploymentStatusTopologies {
	s.Message = &v
	return s
}

func (s *FederatedDeploymentStatusTopologies) SetName(v string) *FederatedDeploymentStatusTopologies {
	s.Name = &v
	return s
}

func (s *FederatedDeploymentStatusTopologies) SetStatus(v string) *FederatedDeploymentStatusTopologies {
	s.Status = &v
	return s
}

func (s *FederatedDeploymentStatusTopologies) SetTime(v string) *FederatedDeploymentStatusTopologies {
	s.Time = &v
	return s
}

// DeploymentStatus
type DeploymentStatus struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
	//
	AvailableReplicas *int64 `json:"available_replicas,omitempty" xml:"available_replicas,omitempty" require:"true"`
	// Represents the latest available observations of a deployment s current state.
	//
	Conditions []*DeploymentCondition `json:"conditions,omitempty" xml:"conditions,omitempty" require:"true" type:"Repeated"`
	// The generation observed by the deployment controller.
	//
	ObservedGeneration *int64 `json:"observed_generation,omitempty" xml:"observed_generation,omitempty"`
	// Total number of ready pods targeted by this deployment.
	//
	ReadyReplicas *int64 `json:"ready_replicas,omitempty" xml:"ready_replicas,omitempty" require:"true"`
	// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
	//
	Replicas *int64 `json:"replicas,omitempty" xml:"replicas,omitempty" require:"true"`
	// Total number of unavailable pods targeted by this deployment.
	UnavailableReplicas *int64 `json:"unavailable_replicas,omitempty" xml:"unavailable_replicas,omitempty" require:"true"`
	// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
	UpdatedReplicas *int64 `json:"updated_replicas,omitempty" xml:"updated_replicas,omitempty" require:"true"`
}

func (s DeploymentStatus) String() string {
	return tea.Prettify(s)
}

func (s DeploymentStatus) GoString() string {
	return s.String()
}

func (s *DeploymentStatus) SetAvailableReplicas(v int64) *DeploymentStatus {
	s.AvailableReplicas = &v
	return s
}

func (s *DeploymentStatus) SetConditions(v []*DeploymentCondition) *DeploymentStatus {
	s.Conditions = v
	return s
}

func (s *DeploymentStatus) SetObservedGeneration(v int64) *DeploymentStatus {
	s.ObservedGeneration = &v
	return s
}

func (s *DeploymentStatus) SetReadyReplicas(v int64) *DeploymentStatus {
	s.ReadyReplicas = &v
	return s
}

func (s *DeploymentStatus) SetReplicas(v int64) *DeploymentStatus {
	s.Replicas = &v
	return s
}

func (s *DeploymentStatus) SetUnavailableReplicas(v int64) *DeploymentStatus {
	s.UnavailableReplicas = &v
	return s
}

func (s *DeploymentStatus) SetUpdatedReplicas(v int64) *DeploymentStatus {
	s.UpdatedReplicas = &v
	return s
}

// pod状态
type PodStatus struct {
	// 节点ip
	HostIp *string `json:"host_ip,omitempty" xml:"host_ip,omitempty"`
	// pod状态
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// podip
	PodIp *string `json:"pod_ip,omitempty" xml:"pod_ip,omitempty"`
	// pod container status
	ContainerStatuses []*ContainerStatus `json:"container_statuses,omitempty" xml:"container_statuses,omitempty" require:"true" type:"Repeated"`
}

func (s PodStatus) String() string {
	return tea.Prettify(s)
}

func (s PodStatus) GoString() string {
	return s.String()
}

func (s *PodStatus) SetHostIp(v string) *PodStatus {
	s.HostIp = &v
	return s
}

func (s *PodStatus) SetPhase(v string) *PodStatus {
	s.Phase = &v
	return s
}

func (s *PodStatus) SetPodIp(v string) *PodStatus {
	s.PodIp = &v
	return s
}

func (s *PodStatus) SetContainerStatuses(v []*ContainerStatus) *PodStatus {
	s.ContainerStatuses = v
	return s
}

// fed image pull Secret override
type FedImagePullSecretOverride struct {
	// override data
	Data *RegistryAccout `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// cell name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// cell name override
	NameOverride *string `json:"name_override,omitempty" xml:"name_override,omitempty" require:"true"`
}

func (s FedImagePullSecretOverride) String() string {
	return tea.Prettify(s)
}

func (s FedImagePullSecretOverride) GoString() string {
	return s.String()
}

func (s *FedImagePullSecretOverride) SetData(v *RegistryAccout) *FedImagePullSecretOverride {
	s.Data = v
	return s
}

func (s *FedImagePullSecretOverride) SetName(v string) *FedImagePullSecretOverride {
	s.Name = &v
	return s
}

func (s *FedImagePullSecretOverride) SetNameOverride(v string) *FedImagePullSecretOverride {
	s.NameOverride = &v
	return s
}

// 运维变更对象
type OperationChangeInstance struct {
	// 主机名
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty"`
	// 部署单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// 资源ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s OperationChangeInstance) String() string {
	return tea.Prettify(s)
}

func (s OperationChangeInstance) GoString() string {
	return s.String()
}

func (s *OperationChangeInstance) SetHostname(v string) *OperationChangeInstance {
	s.Hostname = &v
	return s
}

func (s *OperationChangeInstance) SetCell(v string) *OperationChangeInstance {
	s.Cell = &v
	return s
}

func (s *OperationChangeInstance) SetIp(v string) *OperationChangeInstance {
	s.Ip = &v
	return s
}

func (s *OperationChangeInstance) SetId(v string) *OperationChangeInstance {
	s.Id = &v
	return s
}

// 一个正在进行运维操作的计算容器。
type OpsComputer struct {
	// 计算容器id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 计算容器内网ip
	InnerIp *string `json:"inner_ip,omitempty" xml:"inner_ip,omitempty"`
	// 计算容器名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 计算容器当前运维状态。取值列表： INITED：初始化完成； EXECUTING：执行中； SUCCESS：执行成功； FAILED：执行失败； CANCELED：已取消； IGNORED：已忽略
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 计算容器上执行的任务信息。任务信息列表中包含正在执行和执行完成的任务。
	Tasks []*OpsComputerTask `json:"tasks,omitempty" xml:"tasks,omitempty" type:"Repeated"`
	// 展示机器失败的摘要信息
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s OpsComputer) String() string {
	return tea.Prettify(s)
}

func (s OpsComputer) GoString() string {
	return s.String()
}

func (s *OpsComputer) SetId(v string) *OpsComputer {
	s.Id = &v
	return s
}

func (s *OpsComputer) SetInnerIp(v string) *OpsComputer {
	s.InnerIp = &v
	return s
}

func (s *OpsComputer) SetName(v string) *OpsComputer {
	s.Name = &v
	return s
}

func (s *OpsComputer) SetStatus(v string) *OpsComputer {
	s.Status = &v
	return s
}

func (s *OpsComputer) SetTasks(v []*OpsComputerTask) *OpsComputer {
	s.Tasks = v
	return s
}

func (s *OpsComputer) SetResultMsg(v string) *OpsComputer {
	s.ResultMsg = &v
	return s
}

// Container环境变量集群override
type EnvVarClusterOverride struct {
	// 环境变量名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 环境变量取值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// Pod容器名称
	ContainerName *string `json:"container_name,omitempty" xml:"container_name,omitempty" require:"true"`
}

func (s EnvVarClusterOverride) String() string {
	return tea.Prettify(s)
}

func (s EnvVarClusterOverride) GoString() string {
	return s.String()
}

func (s *EnvVarClusterOverride) SetName(v string) *EnvVarClusterOverride {
	s.Name = &v
	return s
}

func (s *EnvVarClusterOverride) SetValue(v string) *EnvVarClusterOverride {
	s.Value = &v
	return s
}

func (s *EnvVarClusterOverride) SetContainerName(v string) *EnvVarClusterOverride {
	s.ContainerName = &v
	return s
}

// Secret数据
type SecretData struct {
	// secret data key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// secret data value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s SecretData) String() string {
	return tea.Prettify(s)
}

func (s SecretData) GoString() string {
	return s.String()
}

func (s *SecretData) SetKey(v string) *SecretData {
	s.Key = &v
	return s
}

func (s *SecretData) SetValue(v string) *SecretData {
	s.Value = &v
	return s
}

// 容器服务运维
type OpsContainerService struct {
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 容器服务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 待操作目标pods列表
	SelectedPods []*CellPods `json:"selected_pods,omitempty" xml:"selected_pods,omitempty" type:"Repeated"`
}

func (s OpsContainerService) String() string {
	return tea.Prettify(s)
}

func (s OpsContainerService) GoString() string {
	return s.String()
}

func (s *OpsContainerService) SetNamespace(v string) *OpsContainerService {
	s.Namespace = &v
	return s
}

func (s *OpsContainerService) SetName(v string) *OpsContainerService {
	s.Name = &v
	return s
}

func (s *OpsContainerService) SetSelectedPods(v []*CellPods) *OpsContainerService {
	s.SelectedPods = v
	return s
}

// LoadBalancer类型Service。
type LoadBalancerService struct {
	// 域名。
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty"`
	// 负载均衡实例监听列表。
	Listeners []*LoadBalancerListener `json:"listeners,omitempty" xml:"listeners,omitempty" require:"true" type:"Repeated"`
	// 关联的负载均衡实例的ID。
	LoadBalancerIaasId *string `json:"load_balancer_iaas_id,omitempty" xml:"load_balancer_iaas_id,omitempty"`
	// LoadBalancer类型service关联负载均衡实例名称。
	LoadBalancerName *string `json:"load_balancer_name,omitempty" xml:"load_balancer_name,omitempty"`
	// LoadBalancer类型service名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// Spanner集群名称。
	SpannerClusterId *string `json:"spanner_cluster_id,omitempty" xml:"spanner_cluster_id,omitempty"`
	// 负载均衡实例的网络类型（internet | intranet | office | multidomain）
	AddressType *string `json:"address_type,omitempty" xml:"address_type,omitempty"`
	// 该服务在每个 cell 下要复用的负载均衡实例 ID
	CellSlbIaasIdMap []*MapStringToString `json:"cell_slb_iaas_id_map,omitempty" xml:"cell_slb_iaas_id_map,omitempty" type:"Repeated"`
	// custom address type模式下，指定各cell负载均衡vip
	CellLbVipMap []*MapStringToString `json:"cell_lb_vip_map,omitempty" xml:"cell_lb_vip_map,omitempty" type:"Repeated"`
	// 是否使用联邦负载均衡实例
	UseFedLoadbalancer *bool `json:"use_fed_loadbalancer,omitempty" xml:"use_fed_loadbalancer,omitempty"`
	// 联邦负载均衡实例名称
	FedLoadbalancerName *string `json:"fed_loadbalancer_name,omitempty" xml:"fed_loadbalancer_name,omitempty"`
}

func (s LoadBalancerService) String() string {
	return tea.Prettify(s)
}

func (s LoadBalancerService) GoString() string {
	return s.String()
}

func (s *LoadBalancerService) SetDomain(v string) *LoadBalancerService {
	s.Domain = &v
	return s
}

func (s *LoadBalancerService) SetListeners(v []*LoadBalancerListener) *LoadBalancerService {
	s.Listeners = v
	return s
}

func (s *LoadBalancerService) SetLoadBalancerIaasId(v string) *LoadBalancerService {
	s.LoadBalancerIaasId = &v
	return s
}

func (s *LoadBalancerService) SetLoadBalancerName(v string) *LoadBalancerService {
	s.LoadBalancerName = &v
	return s
}

func (s *LoadBalancerService) SetName(v string) *LoadBalancerService {
	s.Name = &v
	return s
}

func (s *LoadBalancerService) SetSpannerClusterId(v string) *LoadBalancerService {
	s.SpannerClusterId = &v
	return s
}

func (s *LoadBalancerService) SetAddressType(v string) *LoadBalancerService {
	s.AddressType = &v
	return s
}

func (s *LoadBalancerService) SetCellSlbIaasIdMap(v []*MapStringToString) *LoadBalancerService {
	s.CellSlbIaasIdMap = v
	return s
}

func (s *LoadBalancerService) SetCellLbVipMap(v []*MapStringToString) *LoadBalancerService {
	s.CellLbVipMap = v
	return s
}

func (s *LoadBalancerService) SetUseFedLoadbalancer(v bool) *LoadBalancerService {
	s.UseFedLoadbalancer = &v
	return s
}

func (s *LoadBalancerService) SetFedLoadbalancerName(v string) *LoadBalancerService {
	s.FedLoadbalancerName = &v
	return s
}

// 统一接入配置。
type IngressConfig struct {
	// 统一接入域名。
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty"`
	// 监听及转发规则配置。
	Listeners []*LoadBalancerListenerWithRule `json:"listeners,omitempty" xml:"listeners,omitempty" type:"Repeated"`
	// 关联的负载均衡实例的ID。
	LoadBalancerIaasId *string `json:"load_balancer_iaas_id,omitempty" xml:"load_balancer_iaas_id,omitempty"`
	// 关联负载均衡实例名称。
	LoadBalancerName *string `json:"load_balancer_name,omitempty" xml:"load_balancer_name,omitempty"`
	// 负载均衡网络类型。
	LoadBalancerType *string `json:"load_balancer_type,omitempty" xml:"load_balancer_type,omitempty"`
	// ingress名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// Spanner集群名称。
	SpannerClusterId *string `json:"spanner_cluster_id,omitempty" xml:"spanner_cluster_id,omitempty"`
	// 统一接入协议（http|https）
	UnifiedAccessEntries []*string `json:"unified_access_entries,omitempty" xml:"unified_access_entries,omitempty" type:"Repeated"`
	// 与统一接入协议相对应的统一接入实例入端口列表
	UnifiedAccessEntryPorts []*int64 `json:"unified_access_entry_ports,omitempty" xml:"unified_access_entry_ports,omitempty" type:"Repeated"`
	// 所属统一接入实例
	UnifiedAccessInstanceName *string `json:"unified_access_instance_name,omitempty" xml:"unified_access_instance_name,omitempty"`
	// 统一接入实例联邦负载均衡id
	UnifiedAccessInstanceFederatedId *string `json:"unified_access_instance_federated_id,omitempty" xml:"unified_access_instance_federated_id,omitempty"`
	// 监听及转发规则配置 V2
	ListenersV2 []*LoadBalancerListener `json:"listeners_v2,omitempty" xml:"listeners_v2,omitempty" type:"Repeated"`
	// 统一接入路由模式（LDC|NONLDC）
	UnifiedAccessRouteRule *string `json:"unified_access_route_rule,omitempty" xml:"unified_access_route_rule,omitempty"`
}

func (s IngressConfig) String() string {
	return tea.Prettify(s)
}

func (s IngressConfig) GoString() string {
	return s.String()
}

func (s *IngressConfig) SetDomain(v string) *IngressConfig {
	s.Domain = &v
	return s
}

func (s *IngressConfig) SetListeners(v []*LoadBalancerListenerWithRule) *IngressConfig {
	s.Listeners = v
	return s
}

func (s *IngressConfig) SetLoadBalancerIaasId(v string) *IngressConfig {
	s.LoadBalancerIaasId = &v
	return s
}

func (s *IngressConfig) SetLoadBalancerName(v string) *IngressConfig {
	s.LoadBalancerName = &v
	return s
}

func (s *IngressConfig) SetLoadBalancerType(v string) *IngressConfig {
	s.LoadBalancerType = &v
	return s
}

func (s *IngressConfig) SetName(v string) *IngressConfig {
	s.Name = &v
	return s
}

func (s *IngressConfig) SetSpannerClusterId(v string) *IngressConfig {
	s.SpannerClusterId = &v
	return s
}

func (s *IngressConfig) SetUnifiedAccessEntries(v []*string) *IngressConfig {
	s.UnifiedAccessEntries = v
	return s
}

func (s *IngressConfig) SetUnifiedAccessEntryPorts(v []*int64) *IngressConfig {
	s.UnifiedAccessEntryPorts = v
	return s
}

func (s *IngressConfig) SetUnifiedAccessInstanceName(v string) *IngressConfig {
	s.UnifiedAccessInstanceName = &v
	return s
}

func (s *IngressConfig) SetUnifiedAccessInstanceFederatedId(v string) *IngressConfig {
	s.UnifiedAccessInstanceFederatedId = &v
	return s
}

func (s *IngressConfig) SetListenersV2(v []*LoadBalancerListener) *IngressConfig {
	s.ListenersV2 = v
	return s
}

func (s *IngressConfig) SetUnifiedAccessRouteRule(v string) *IngressConfig {
	s.UnifiedAccessRouteRule = &v
	return s
}

// 解决方案拓展Linke配置
type UnireleaseSolutionExtInfoLinkeInfo struct {
	// linke发布窗口
	ReleaseWindow *string `json:"release_window,omitempty" xml:"release_window,omitempty" require:"true"`
	// ["EI61640467"]
	Iterations []*string `json:"iterations,omitempty" xml:"iterations,omitempty" require:"true" type:"Repeated"`
	// 发布接口人列表,要求为域账号
	Publisher []*string `json:"publisher,omitempty" xml:"publisher,omitempty" type:"Repeated"`
	// inke发布Id
	ReleaseId *string `json:"release_id,omitempty" xml:"release_id,omitempty"`
}

func (s UnireleaseSolutionExtInfoLinkeInfo) String() string {
	return tea.Prettify(s)
}

func (s UnireleaseSolutionExtInfoLinkeInfo) GoString() string {
	return s.String()
}

func (s *UnireleaseSolutionExtInfoLinkeInfo) SetReleaseWindow(v string) *UnireleaseSolutionExtInfoLinkeInfo {
	s.ReleaseWindow = &v
	return s
}

func (s *UnireleaseSolutionExtInfoLinkeInfo) SetIterations(v []*string) *UnireleaseSolutionExtInfoLinkeInfo {
	s.Iterations = v
	return s
}

func (s *UnireleaseSolutionExtInfoLinkeInfo) SetPublisher(v []*string) *UnireleaseSolutionExtInfoLinkeInfo {
	s.Publisher = v
	return s
}

func (s *UnireleaseSolutionExtInfoLinkeInfo) SetReleaseId(v string) *UnireleaseSolutionExtInfoLinkeInfo {
	s.ReleaseId = &v
	return s
}

// 容器服务部署配置。
type DeployConfig struct {
	// 节点亲和性配置
	Affinity *AffinityEntity `json:"affinity,omitempty" xml:"affinity,omitempty"`
	// annotations
	Annotations *string `json:"annotations,omitempty" xml:"annotations,omitempty"`
	// 用户自定义标签，将会在pod上生效
	CustomLabels *string `json:"custom_labels,omitempty" xml:"custom_labels,omitempty"`
	// 最小分组数
	GroupCount *int64 `json:"group_count,omitempty" xml:"group_count,omitempty"`
	// 容器服务部署分组策略。
	GroupStrategy *string `json:"group_strategy,omitempty" xml:"group_strategy,omitempty"`
	// labels
	Labels *string `json:"labels,omitempty" xml:"labels,omitempty"`
	// 单个分组最大Pod数量。
	MaxGroupCapacity *int64 `json:"max_group_capacity,omitempty" xml:"max_group_capacity,omitempty"`
	// 是否需要beta confirm。
	NeedBeta *bool `json:"need_beta,omitempty" xml:"need_beta,omitempty"`
	// 是否需要分组确认。
	NeedConfirm *bool `json:"need_confirm,omitempty" xml:"need_confirm,omitempty"`
	// 已废弃
	EnableSofaMesh *bool `json:"enable_sofa_mesh,omitempty" xml:"enable_sofa_mesh,omitempty"`
	// 只支持InPlace
	UpgradeStrategy *string `json:"upgrade_strategy,omitempty" xml:"upgrade_strategy,omitempty"`
	// 分组确认策略，FIRST：第一个分组需要确认，EACH：每个分组都需要确认（默认）
	ConfirmStrategy *string `json:"confirm_strategy,omitempty" xml:"confirm_strategy,omitempty"`
}

func (s DeployConfig) String() string {
	return tea.Prettify(s)
}

func (s DeployConfig) GoString() string {
	return s.String()
}

func (s *DeployConfig) SetAffinity(v *AffinityEntity) *DeployConfig {
	s.Affinity = v
	return s
}

func (s *DeployConfig) SetAnnotations(v string) *DeployConfig {
	s.Annotations = &v
	return s
}

func (s *DeployConfig) SetCustomLabels(v string) *DeployConfig {
	s.CustomLabels = &v
	return s
}

func (s *DeployConfig) SetGroupCount(v int64) *DeployConfig {
	s.GroupCount = &v
	return s
}

func (s *DeployConfig) SetGroupStrategy(v string) *DeployConfig {
	s.GroupStrategy = &v
	return s
}

func (s *DeployConfig) SetLabels(v string) *DeployConfig {
	s.Labels = &v
	return s
}

func (s *DeployConfig) SetMaxGroupCapacity(v int64) *DeployConfig {
	s.MaxGroupCapacity = &v
	return s
}

func (s *DeployConfig) SetNeedBeta(v bool) *DeployConfig {
	s.NeedBeta = &v
	return s
}

func (s *DeployConfig) SetNeedConfirm(v bool) *DeployConfig {
	s.NeedConfirm = &v
	return s
}

func (s *DeployConfig) SetEnableSofaMesh(v bool) *DeployConfig {
	s.EnableSofaMesh = &v
	return s
}

func (s *DeployConfig) SetUpgradeStrategy(v string) *DeployConfig {
	s.UpgradeStrategy = &v
	return s
}

func (s *DeployConfig) SetConfirmStrategy(v string) *DeployConfig {
	s.ConfirmStrategy = &v
	return s
}

// 集群内ClusterIP类型Service。
type ClusterIpService struct {
	// 对应ClusterIP service名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// ClusterIP service暴露的端口列表。
	Ports []*ServicePortMapping `json:"ports,omitempty" xml:"ports,omitempty" type:"Repeated"`
}

func (s ClusterIpService) String() string {
	return tea.Prettify(s)
}

func (s ClusterIpService) GoString() string {
	return s.String()
}

func (s *ClusterIpService) SetName(v string) *ClusterIpService {
	s.Name = &v
	return s
}

func (s *ClusterIpService) SetPorts(v []*ServicePortMapping) *ClusterIpService {
	s.Ports = v
	return s
}

// 发布批次对象
type ReleaseBatchObj struct {
	// 第一个批次
	BatchNum *int64 `json:"batch_num,omitempty" xml:"batch_num,omitempty" require:"true"`
	// 单元内服务数组
	CellServers []*CellServer `json:"cell_servers,omitempty" xml:"cell_servers,omitempty" require:"true" type:"Repeated"`
}

func (s ReleaseBatchObj) String() string {
	return tea.Prettify(s)
}

func (s ReleaseBatchObj) GoString() string {
	return s.String()
}

func (s *ReleaseBatchObj) SetBatchNum(v int64) *ReleaseBatchObj {
	s.BatchNum = &v
	return s
}

func (s *ReleaseBatchObj) SetCellServers(v []*CellServer) *ReleaseBatchObj {
	s.CellServers = v
	return s
}

// sidecar 模版
type SidecarTemplate struct {
	// sidecar模版id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	//
	// 模板生效范围
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty" require:"true"`
	// sidecar名称
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty" require:"true"`
	// sidecar模版版本
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty" require:"true"`
	// sidercar模版
	Template *string `json:"template,omitempty" xml:"template,omitempty" require:"true"`
	// 这个字段是lhc专用，表示此模板的来源，META为sidecar元数据来源，XFLUSH为系统模板
	// 本结构体同时还暂时兼容了调用sidecar元数据openapi的使用，后期会只用于LHC用途，届时会去掉sidecar元数据接口的字段。
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// workspace_group_id
	WorkspaceGroupId *string `json:"workspace_group_id,omitempty" xml:"workspace_group_id,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s SidecarTemplate) String() string {
	return tea.Prettify(s)
}

func (s SidecarTemplate) GoString() string {
	return s.String()
}

func (s *SidecarTemplate) SetId(v string) *SidecarTemplate {
	s.Id = &v
	return s
}

func (s *SidecarTemplate) SetRegionId(v string) *SidecarTemplate {
	s.RegionId = &v
	return s
}

func (s *SidecarTemplate) SetScope(v string) *SidecarTemplate {
	s.Scope = &v
	return s
}

func (s *SidecarTemplate) SetSidecarName(v string) *SidecarTemplate {
	s.SidecarName = &v
	return s
}

func (s *SidecarTemplate) SetSidecarVersion(v string) *SidecarTemplate {
	s.SidecarVersion = &v
	return s
}

func (s *SidecarTemplate) SetTemplate(v string) *SidecarTemplate {
	s.Template = &v
	return s
}

func (s *SidecarTemplate) SetType(v string) *SidecarTemplate {
	s.Type = &v
	return s
}

func (s *SidecarTemplate) SetWorkspaceGroupId(v string) *SidecarTemplate {
	s.WorkspaceGroupId = &v
	return s
}

func (s *SidecarTemplate) SetWorkspaceId(v string) *SidecarTemplate {
	s.WorkspaceId = &v
	return s
}

// 容器健康检查-ReadinessProbe。
type ReadinessProbe struct {
	// 命令行方式的健康监测配置。
	ExecAction *ExecAction `json:"exec_action,omitempty" xml:"exec_action,omitempty"`
	// 不健康阈值。
	FailureThreshold *int64 `json:"failure_threshold,omitempty" xml:"failure_threshold,omitempty" require:"true"`
	// http方式的健康监测配置。
	HttpGetAction *HttpGetAction `json:"http_get_action,omitempty" xml:"http_get_action,omitempty"`
	// 首次检查延时。
	InitialDelaySeconds *int64 `json:"initial_delay_seconds,omitempty" xml:"initial_delay_seconds,omitempty" require:"true"`
	// 不健康阈值。
	PeriodSeconds *int64 `json:"period_seconds,omitempty" xml:"period_seconds,omitempty" require:"true"`
	// 健康阈值。
	SuccessThreshold *int64 `json:"success_threshold,omitempty" xml:"success_threshold,omitempty" require:"true"`
	// tcp方式的健康监测配置。
	TcpSocketAction *TcpSocketAction `json:"tcp_socket_action,omitempty" xml:"tcp_socket_action,omitempty"`
	// 检查超时。
	TimeoutSeconds *int64 `json:"timeout_seconds,omitempty" xml:"timeout_seconds,omitempty" require:"true"`
}

func (s ReadinessProbe) String() string {
	return tea.Prettify(s)
}

func (s ReadinessProbe) GoString() string {
	return s.String()
}

func (s *ReadinessProbe) SetExecAction(v *ExecAction) *ReadinessProbe {
	s.ExecAction = v
	return s
}

func (s *ReadinessProbe) SetFailureThreshold(v int64) *ReadinessProbe {
	s.FailureThreshold = &v
	return s
}

func (s *ReadinessProbe) SetHttpGetAction(v *HttpGetAction) *ReadinessProbe {
	s.HttpGetAction = v
	return s
}

func (s *ReadinessProbe) SetInitialDelaySeconds(v int64) *ReadinessProbe {
	s.InitialDelaySeconds = &v
	return s
}

func (s *ReadinessProbe) SetPeriodSeconds(v int64) *ReadinessProbe {
	s.PeriodSeconds = &v
	return s
}

func (s *ReadinessProbe) SetSuccessThreshold(v int64) *ReadinessProbe {
	s.SuccessThreshold = &v
	return s
}

func (s *ReadinessProbe) SetTcpSocketAction(v *TcpSocketAction) *ReadinessProbe {
	s.TcpSocketAction = v
	return s
}

func (s *ReadinessProbe) SetTimeoutSeconds(v int64) *ReadinessProbe {
	s.TimeoutSeconds = &v
	return s
}

// service端口映射
type ServicePort struct {
	// 此端口映射名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// service端口映射在k8s层面的协议名，包括"TCP", "UDP", and "SCTP".
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// service端口映射前端端口
	Port *int64 `json:"port,omitempty" xml:"port,omitempty" require:"true"`
	// service分配到的节点端口
	NodePort *int64 `json:"node_port,omitempty" xml:"node_port,omitempty"`
	// 后端端口，这里仅支持整数类型
	TargetPort *int64 `json:"target_port,omitempty" xml:"target_port,omitempty"`
}

func (s ServicePort) String() string {
	return tea.Prettify(s)
}

func (s ServicePort) GoString() string {
	return s.String()
}

func (s *ServicePort) SetName(v string) *ServicePort {
	s.Name = &v
	return s
}

func (s *ServicePort) SetProtocol(v string) *ServicePort {
	s.Protocol = &v
	return s
}

func (s *ServicePort) SetPort(v int64) *ServicePort {
	s.Port = &v
	return s
}

func (s *ServicePort) SetNodePort(v int64) *ServicePort {
	s.NodePort = &v
	return s
}

func (s *ServicePort) SetTargetPort(v int64) *ServicePort {
	s.TargetPort = &v
	return s
}

// 容器应用服务部署
type ContainerServiceDeployment struct {
	// 容器服务名称。
	ContainerServiceName *string `json:"container_service_name,omitempty" xml:"container_service_name,omitempty" require:"true"`
	// 容器服务版本号。
	ContainerServiceRevision *string `json:"container_service_revision,omitempty" xml:"container_service_revision,omitempty" require:"true"`
	// 依赖的容器应用服务名称。
	DependContainerServiceNames []*string `json:"depend_container_service_names,omitempty" xml:"depend_container_service_names,omitempty" require:"true" type:"Repeated"`
	// 限定需要发布的部署单元
	RestrictedCells []*string `json:"restricted_cells,omitempty" xml:"restricted_cells,omitempty" type:"Repeated"`
	// 自定义发布批次
	Batches []*ReleaseBatchObj `json:"batches,omitempty" xml:"batches,omitempty" type:"Repeated"`
	// 默认ByIndex
	UpgradePolicy *string `json:"upgrade_policy,omitempty" xml:"upgrade_policy,omitempty"`
}

func (s ContainerServiceDeployment) String() string {
	return tea.Prettify(s)
}

func (s ContainerServiceDeployment) GoString() string {
	return s.String()
}

func (s *ContainerServiceDeployment) SetContainerServiceName(v string) *ContainerServiceDeployment {
	s.ContainerServiceName = &v
	return s
}

func (s *ContainerServiceDeployment) SetContainerServiceRevision(v string) *ContainerServiceDeployment {
	s.ContainerServiceRevision = &v
	return s
}

func (s *ContainerServiceDeployment) SetDependContainerServiceNames(v []*string) *ContainerServiceDeployment {
	s.DependContainerServiceNames = v
	return s
}

func (s *ContainerServiceDeployment) SetRestrictedCells(v []*string) *ContainerServiceDeployment {
	s.RestrictedCells = v
	return s
}

func (s *ContainerServiceDeployment) SetBatches(v []*ReleaseBatchObj) *ContainerServiceDeployment {
	s.Batches = v
	return s
}

func (s *ContainerServiceDeployment) SetUpgradePolicy(v string) *ContainerServiceDeployment {
	s.UpgradePolicy = &v
	return s
}

// 联邦负载均衡实例对应的local lb实例信息（per cell)
type LocalLoadBalancer struct {
	// local lb所在部署单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// local lb实例对应的iaas id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// local lb实例对应的vip
	Vip *string `json:"vip,omitempty" xml:"vip,omitempty"`
	// 当前cell lb的phase
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
	// 空代表无错误信息，非空时即报错信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s LocalLoadBalancer) String() string {
	return tea.Prettify(s)
}

func (s LocalLoadBalancer) GoString() string {
	return s.String()
}

func (s *LocalLoadBalancer) SetCell(v string) *LocalLoadBalancer {
	s.Cell = &v
	return s
}

func (s *LocalLoadBalancer) SetIaasId(v string) *LocalLoadBalancer {
	s.IaasId = &v
	return s
}

func (s *LocalLoadBalancer) SetVip(v string) *LocalLoadBalancer {
	s.Vip = &v
	return s
}

func (s *LocalLoadBalancer) SetPhase(v string) *LocalLoadBalancer {
	s.Phase = &v
	return s
}

func (s *LocalLoadBalancer) SetMessage(v string) *LocalLoadBalancer {
	s.Message = &v
	return s
}

// master cluster info
type MasterCluster struct {
	// master cluster name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// workspace id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// workspace name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// region id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// region name
	RegionName *string `json:"region_name,omitempty" xml:"region_name,omitempty"`
	// zone id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty" require:"true"`
	// zone name
	ZoneName *string `json:"zone_name,omitempty" xml:"zone_name,omitempty"`
}

func (s MasterCluster) String() string {
	return tea.Prettify(s)
}

func (s MasterCluster) GoString() string {
	return s.String()
}

func (s *MasterCluster) SetName(v string) *MasterCluster {
	s.Name = &v
	return s
}

func (s *MasterCluster) SetWorkspaceId(v string) *MasterCluster {
	s.WorkspaceId = &v
	return s
}

func (s *MasterCluster) SetWorkspaceName(v string) *MasterCluster {
	s.WorkspaceName = &v
	return s
}

func (s *MasterCluster) SetRegionId(v string) *MasterCluster {
	s.RegionId = &v
	return s
}

func (s *MasterCluster) SetRegionName(v string) *MasterCluster {
	s.RegionName = &v
	return s
}

func (s *MasterCluster) SetZoneId(v string) *MasterCluster {
	s.ZoneId = &v
	return s
}

func (s *MasterCluster) SetZoneName(v string) *MasterCluster {
	s.ZoneName = &v
	return s
}

// 应用服务下相关对象的元信息
type ContainerServiceObjectMeta struct {
	// UID
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 部署单元名称
	CellDisplayName *string `json:"cell_display_name,omitempty" xml:"cell_display_name,omitempty" require:"true"`
	// 集群名称
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// 创建时间
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" require:"true"`
}

func (s ContainerServiceObjectMeta) String() string {
	return tea.Prettify(s)
}

func (s ContainerServiceObjectMeta) GoString() string {
	return s.String()
}

func (s *ContainerServiceObjectMeta) SetUid(v string) *ContainerServiceObjectMeta {
	s.Uid = &v
	return s
}

func (s *ContainerServiceObjectMeta) SetNamespace(v string) *ContainerServiceObjectMeta {
	s.Namespace = &v
	return s
}

func (s *ContainerServiceObjectMeta) SetName(v string) *ContainerServiceObjectMeta {
	s.Name = &v
	return s
}

func (s *ContainerServiceObjectMeta) SetCellDisplayName(v string) *ContainerServiceObjectMeta {
	s.CellDisplayName = &v
	return s
}

func (s *ContainerServiceObjectMeta) SetCluster(v string) *ContainerServiceObjectMeta {
	s.Cluster = &v
	return s
}

func (s *ContainerServiceObjectMeta) SetCreatedTime(v string) *ContainerServiceObjectMeta {
	s.CreatedTime = &v
	return s
}

// 异构机房部署单元
type SiteCell struct {
	// 异构机房名
	SiteName *string `json:"site_name,omitempty" xml:"site_name,omitempty" require:"true"`
	// 部署单元名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 地域
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
}

func (s SiteCell) String() string {
	return tea.Prettify(s)
}

func (s SiteCell) GoString() string {
	return s.String()
}

func (s *SiteCell) SetSiteName(v string) *SiteCell {
	s.SiteName = &v
	return s
}

func (s *SiteCell) SetName(v string) *SiteCell {
	s.Name = &v
	return s
}

func (s *SiteCell) SetRegion(v string) *SiteCell {
	s.Region = &v
	return s
}

// 统一接入实例详细信息
type UnifiedAccessInstanceLocalDetailInfo struct {
	// 所属集群名称
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
	// 所在可用区，即AZ信息
	DataCenter *string `json:"data_center,omitempty" xml:"data_center,omitempty" require:"true"`
	// local实例详细信息显示，包含错误状态信息等
	MessageDetails *string `json:"message_details,omitempty" xml:"message_details,omitempty"`
	// local实例状态描述：创建中、创建成功、创建失败
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// vip信息
	Vip *string `json:"vip,omitempty" xml:"vip,omitempty" require:"true"`
	// http entry的状态
	HttpEntryStatus *HttpEntryStatus `json:"http_entry_status,omitempty" xml:"http_entry_status,omitempty"`
	// https entry的状态
	HttpsEntryStatus *HttpsEntryStatus `json:"https_entry_status,omitempty" xml:"https_entry_status,omitempty"`
}

func (s UnifiedAccessInstanceLocalDetailInfo) String() string {
	return tea.Prettify(s)
}

func (s UnifiedAccessInstanceLocalDetailInfo) GoString() string {
	return s.String()
}

func (s *UnifiedAccessInstanceLocalDetailInfo) SetClusterName(v string) *UnifiedAccessInstanceLocalDetailInfo {
	s.ClusterName = &v
	return s
}

func (s *UnifiedAccessInstanceLocalDetailInfo) SetDataCenter(v string) *UnifiedAccessInstanceLocalDetailInfo {
	s.DataCenter = &v
	return s
}

func (s *UnifiedAccessInstanceLocalDetailInfo) SetMessageDetails(v string) *UnifiedAccessInstanceLocalDetailInfo {
	s.MessageDetails = &v
	return s
}

func (s *UnifiedAccessInstanceLocalDetailInfo) SetStatus(v string) *UnifiedAccessInstanceLocalDetailInfo {
	s.Status = &v
	return s
}

func (s *UnifiedAccessInstanceLocalDetailInfo) SetVip(v string) *UnifiedAccessInstanceLocalDetailInfo {
	s.Vip = &v
	return s
}

func (s *UnifiedAccessInstanceLocalDetailInfo) SetHttpEntryStatus(v *HttpEntryStatus) *UnifiedAccessInstanceLocalDetailInfo {
	s.HttpEntryStatus = v
	return s
}

func (s *UnifiedAccessInstanceLocalDetailInfo) SetHttpsEntryStatus(v *HttpsEntryStatus) *UnifiedAccessInstanceLocalDetailInfo {
	s.HttpsEntryStatus = v
	return s
}

// http接入方式
type HttpEntry struct {
	// 端口
	Port *int64 `json:"port,omitempty" xml:"port,omitempty" require:"true"`
	// 是否使用websocket连接方式
	WebsocketConnect *bool `json:"websocket_connect,omitempty" xml:"websocket_connect,omitempty" require:"true"`
}

func (s HttpEntry) String() string {
	return tea.Prettify(s)
}

func (s HttpEntry) GoString() string {
	return s.String()
}

func (s *HttpEntry) SetPort(v int64) *HttpEntry {
	s.Port = &v
	return s
}

func (s *HttpEntry) SetWebsocketConnect(v bool) *HttpEntry {
	s.WebsocketConnect = &v
	return s
}

// Service 状态
type ServiceStatus struct {
	// 负载均衡地址
	LoadBalancerIp *string `json:"load_balancer_ip,omitempty" xml:"load_balancer_ip,omitempty"`
}

func (s ServiceStatus) String() string {
	return tea.Prettify(s)
}

func (s ServiceStatus) GoString() string {
	return s.String()
}

func (s *ServiceStatus) SetLoadBalancerIp(v string) *ServiceStatus {
	s.LoadBalancerIp = &v
	return s
}

// 灾备信息
type DisasterInfo struct {
	// 同城灾备单元(组)
	LocalFailoverTarget *string `json:"local_failover_target,omitempty" xml:"local_failover_target,omitempty" require:"true"`
	// 异地灾备单元(组)
	RemoteFailoverTarget *string `json:"remote_failover_target,omitempty" xml:"remote_failover_target,omitempty" require:"true"`
	// 逻辑单元&部署单元名称
	Source *string `json:"source,omitempty" xml:"source,omitempty" require:"true"`
	// 容灾类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 正常容灾状态。
	DisasterRecoveryState *string `json:"disaster_recovery_state,omitempty" xml:"disaster_recovery_state,omitempty" require:"true"`
	// 压测容灾状态。
	PressDisasterRecoveryState *string `json:"press_disaster_recovery_state,omitempty" xml:"press_disaster_recovery_state,omitempty" require:"true"`
}

func (s DisasterInfo) String() string {
	return tea.Prettify(s)
}

func (s DisasterInfo) GoString() string {
	return s.String()
}

func (s *DisasterInfo) SetLocalFailoverTarget(v string) *DisasterInfo {
	s.LocalFailoverTarget = &v
	return s
}

func (s *DisasterInfo) SetRemoteFailoverTarget(v string) *DisasterInfo {
	s.RemoteFailoverTarget = &v
	return s
}

func (s *DisasterInfo) SetSource(v string) *DisasterInfo {
	s.Source = &v
	return s
}

func (s *DisasterInfo) SetType(v string) *DisasterInfo {
	s.Type = &v
	return s
}

func (s *DisasterInfo) SetDisasterRecoveryState(v string) *DisasterInfo {
	s.DisasterRecoveryState = &v
	return s
}

func (s *DisasterInfo) SetPressDisasterRecoveryState(v string) *DisasterInfo {
	s.PressDisasterRecoveryState = &v
	return s
}

// 应用服务示例
type AppService struct {
	// 应用服务实例名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s AppService) String() string {
	return tea.Prettify(s)
}

func (s AppService) GoString() string {
	return s.String()
}

func (s *AppService) SetName(v string) *AppService {
	s.Name = &v
	return s
}

func (s *AppService) SetWorkspace(v string) *AppService {
	s.Workspace = &v
	return s
}

// sidecar运维任务上下文
type SidecarOperationTaskContext struct {
	// sidecar开启特性
	EnabledFeatures *string `json:"enabled_features,omitempty" xml:"enabled_features,omitempty"`
	// sidecar类型
	SidecarTypes []*string `json:"sidecar_types,omitempty" xml:"sidecar_types,omitempty" require:"true" type:"Repeated"`
	// sidecar版本
	SidecarVersionMap *string `json:"sidecar_version_map,omitempty" xml:"sidecar_version_map,omitempty" require:"true"`
	// sidecar支持特性
	SupportedFeatures *string `json:"supported_features,omitempty" xml:"supported_features,omitempty"`
	// 变更资源列表
	ChangeInstances []*OperationChangeInstance `json:"change_instances,omitempty" xml:"change_instances,omitempty" require:"true" type:"Repeated"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
}

func (s SidecarOperationTaskContext) String() string {
	return tea.Prettify(s)
}

func (s SidecarOperationTaskContext) GoString() string {
	return s.String()
}

func (s *SidecarOperationTaskContext) SetEnabledFeatures(v string) *SidecarOperationTaskContext {
	s.EnabledFeatures = &v
	return s
}

func (s *SidecarOperationTaskContext) SetSidecarTypes(v []*string) *SidecarOperationTaskContext {
	s.SidecarTypes = v
	return s
}

func (s *SidecarOperationTaskContext) SetSidecarVersionMap(v string) *SidecarOperationTaskContext {
	s.SidecarVersionMap = &v
	return s
}

func (s *SidecarOperationTaskContext) SetSupportedFeatures(v string) *SidecarOperationTaskContext {
	s.SupportedFeatures = &v
	return s
}

func (s *SidecarOperationTaskContext) SetChangeInstances(v []*OperationChangeInstance) *SidecarOperationTaskContext {
	s.ChangeInstances = v
	return s
}

func (s *SidecarOperationTaskContext) SetAppName(v string) *SidecarOperationTaskContext {
	s.AppName = &v
	return s
}

// 集群事件
type KubernetesEvents struct {
	// 事件发生时间
	CreationTimestamp *string `json:"creation_timestamp,omitempty" xml:"creation_timestamp,omitempty" require:"true"`
	// 事件数目
	Count *int64 `json:"count,omitempty" xml:"count,omitempty" require:"true"`
	// 事件内容
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s KubernetesEvents) String() string {
	return tea.Prettify(s)
}

func (s KubernetesEvents) GoString() string {
	return s.String()
}

func (s *KubernetesEvents) SetCreationTimestamp(v string) *KubernetesEvents {
	s.CreationTimestamp = &v
	return s
}

func (s *KubernetesEvents) SetCount(v int64) *KubernetesEvents {
	s.Count = &v
	return s
}

func (s *KubernetesEvents) SetMessage(v string) *KubernetesEvents {
	s.Message = &v
	return s
}

// pod信息
type PodInfo struct {
	// 部署单元名称
	CellDisplayName *string `json:"cell_display_name,omitempty" xml:"cell_display_name,omitempty" require:"true"`
	// 集群名称
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// pod containers info
	Containers []*ContainerInfo `json:"containers,omitempty" xml:"containers,omitempty" require:"true" type:"Repeated"`
	// create time
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" require:"true"`
	// pod 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 命名空间名称
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// pod状态
	Status *PodStatus `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// pod uid
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty" require:"true"`
	// Pod volume信息。
	Volumes []*Volume `json:"volumes,omitempty" xml:"volumes,omitempty" type:"Repeated"`
}

func (s PodInfo) String() string {
	return tea.Prettify(s)
}

func (s PodInfo) GoString() string {
	return s.String()
}

func (s *PodInfo) SetCellDisplayName(v string) *PodInfo {
	s.CellDisplayName = &v
	return s
}

func (s *PodInfo) SetCluster(v string) *PodInfo {
	s.Cluster = &v
	return s
}

func (s *PodInfo) SetContainers(v []*ContainerInfo) *PodInfo {
	s.Containers = v
	return s
}

func (s *PodInfo) SetCreatedTime(v string) *PodInfo {
	s.CreatedTime = &v
	return s
}

func (s *PodInfo) SetName(v string) *PodInfo {
	s.Name = &v
	return s
}

func (s *PodInfo) SetNamespace(v string) *PodInfo {
	s.Namespace = &v
	return s
}

func (s *PodInfo) SetStatus(v *PodStatus) *PodInfo {
	s.Status = v
	return s
}

func (s *PodInfo) SetUid(v string) *PodInfo {
	s.Uid = &v
	return s
}

func (s *PodInfo) SetVolumes(v []*Volume) *PodInfo {
	s.Volumes = v
	return s
}

// Workspace info
//
type Workspace struct {
	// workspace id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// workspace name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s Workspace) String() string {
	return tea.Prettify(s)
}

func (s Workspace) GoString() string {
	return s.String()
}

func (s *Workspace) SetId(v string) *Workspace {
	s.Id = &v
	return s
}

func (s *Workspace) SetName(v string) *Workspace {
	s.Name = &v
	return s
}

// 应用发布分组，一个分组一般包含前置任务(可多个)、发布任务(一个)、后置任务(可多个)
type AppDeployGroup struct {
	// 发布任务
	DeployTask *AppDeployTask `json:"deploy_task,omitempty" xml:"deploy_task,omitempty" require:"true"`
	// 后置任务列表
	PostTasks []*AppDeployTask `json:"post_tasks,omitempty" xml:"post_tasks,omitempty" require:"true" type:"Repeated"`
	// 前置任务列表
	PreTasks []*AppDeployTask `json:"pre_tasks,omitempty" xml:"pre_tasks,omitempty" require:"true" type:"Repeated"`
}

func (s AppDeployGroup) String() string {
	return tea.Prettify(s)
}

func (s AppDeployGroup) GoString() string {
	return s.String()
}

func (s *AppDeployGroup) SetDeployTask(v *AppDeployTask) *AppDeployGroup {
	s.DeployTask = v
	return s
}

func (s *AppDeployGroup) SetPostTasks(v []*AppDeployTask) *AppDeployGroup {
	s.PostTasks = v
	return s
}

func (s *AppDeployGroup) SetPreTasks(v []*AppDeployTask) *AppDeployGroup {
	s.PreTasks = v
	return s
}

// 拓展配置
type UnireleaseSolutionExtInfo struct {
	// Linke配置信息
	LinkeInfo *UnireleaseSolutionExtInfoLinkeInfo `json:"linke_info,omitempty" xml:"linke_info,omitempty" require:"true"`
}

func (s UnireleaseSolutionExtInfo) String() string {
	return tea.Prettify(s)
}

func (s UnireleaseSolutionExtInfo) GoString() string {
	return s.String()
}

func (s *UnireleaseSolutionExtInfo) SetLinkeInfo(v *UnireleaseSolutionExtInfoLinkeInfo) *UnireleaseSolutionExtInfo {
	s.LinkeInfo = v
	return s
}

// 统一接入实例接入settings （vip, id, etc.)
type EntrySettings struct {
	// 是否自定义uai entry
	Customized *bool `json:"customized,omitempty" xml:"customized,omitempty"`
	// 统一接入实例每个datacenter的用户自定义入口负载均衡实例id列表
	EntryIds []*MapStringToString `json:"entry_ids,omitempty" xml:"entry_ids,omitempty" type:"Repeated"`
	// 统一接入实例每个datacenter用户自定义入口负载均衡实例的vip
	EntryVips []*MapStringToString `json:"entry_vips,omitempty" xml:"entry_vips,omitempty" type:"Repeated"`
}

func (s EntrySettings) String() string {
	return tea.Prettify(s)
}

func (s EntrySettings) GoString() string {
	return s.String()
}

func (s *EntrySettings) SetCustomized(v bool) *EntrySettings {
	s.Customized = &v
	return s
}

func (s *EntrySettings) SetEntryIds(v []*MapStringToString) *EntrySettings {
	s.EntryIds = v
	return s
}

func (s *EntrySettings) SetEntryVips(v []*MapStringToString) *EntrySettings {
	s.EntryVips = v
	return s
}

// FedSecret cluster override
type FedSecretOverride struct {
	// fed secret data override
	Data []*SecretData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
	// cluster name
	//
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// name cell override
	NameOverride *string `json:"name_override,omitempty" xml:"name_override,omitempty" require:"true"`
}

func (s FedSecretOverride) String() string {
	return tea.Prettify(s)
}

func (s FedSecretOverride) GoString() string {
	return s.String()
}

func (s *FedSecretOverride) SetData(v []*SecretData) *FedSecretOverride {
	s.Data = v
	return s
}

func (s *FedSecretOverride) SetName(v string) *FedSecretOverride {
	s.Name = &v
	return s
}

func (s *FedSecretOverride) SetNameOverride(v string) *FedSecretOverride {
	s.NameOverride = &v
	return s
}

// 运维容器服务列表
type OpsContainerServiceGroup struct {
	// 运维容器服务列表
	ContainerServices []*OpsContainerService `json:"container_services,omitempty" xml:"container_services,omitempty" require:"true" type:"Repeated"`
}

func (s OpsContainerServiceGroup) String() string {
	return tea.Prettify(s)
}

func (s OpsContainerServiceGroup) GoString() string {
	return s.String()
}

func (s *OpsContainerServiceGroup) SetContainerServices(v []*OpsContainerService) *OpsContainerServiceGroup {
	s.ContainerServices = v
	return s
}

// 联邦负载均衡实例与应用服务之间的关联关系，以及占用端口情况。
type FedLoadBalancerContainerServiceRel struct {
	// 应用服务名字
	ContainerServiceName *string `json:"container_service_name,omitempty" xml:"container_service_name,omitempty" require:"true"`
	// 应用服务命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 联邦负载均衡实例当前已被占用的端口
	OccupiedPorts []*int64 `json:"occupied_ports,omitempty" xml:"occupied_ports,omitempty" require:"true" type:"Repeated"`
}

func (s FedLoadBalancerContainerServiceRel) String() string {
	return tea.Prettify(s)
}

func (s FedLoadBalancerContainerServiceRel) GoString() string {
	return s.String()
}

func (s *FedLoadBalancerContainerServiceRel) SetContainerServiceName(v string) *FedLoadBalancerContainerServiceRel {
	s.ContainerServiceName = &v
	return s
}

func (s *FedLoadBalancerContainerServiceRel) SetNamespace(v string) *FedLoadBalancerContainerServiceRel {
	s.Namespace = &v
	return s
}

func (s *FedLoadBalancerContainerServiceRel) SetOccupiedPorts(v []*int64) *FedLoadBalancerContainerServiceRel {
	s.OccupiedPorts = v
	return s
}

// 容器服务配置。
type ContainerServiceConfig struct {
	// 容器服务业务实时监控路径。
	BizMonitorPaths []*string `json:"biz_monitor_paths,omitempty" xml:"biz_monitor_paths,omitempty" type:"Repeated"`
	// 内网访问配置。
	ClusterIpServices []*ClusterIpService `json:"cluster_ip_services,omitempty" xml:"cluster_ip_services,omitempty" type:"Repeated"`
	// 容器配置。
	ContainerSpecs []*ContainerSpec `json:"container_specs,omitempty" xml:"container_specs,omitempty" require:"true" type:"Repeated"`
	// 容器服务部署配置。
	DeployConfig *DeployConfig `json:"deploy_config,omitempty" xml:"deploy_config,omitempty" require:"true"`
	// 弹性配置。
	ElasticConfig *ElasticConfig `json:"elastic_config,omitempty" xml:"elastic_config,omitempty" require:"true"`
	// 容器服务是否开启业务实时监控。
	EnableBizMonitor *bool `json:"enable_biz_monitor,omitempty" xml:"enable_biz_monitor,omitempty"`
	// 容器服务是否开启日志监控。
	EnableLogConfig *bool `json:"enable_log_config,omitempty" xml:"enable_log_config,omitempty"`
	// 容器服务是否开启SofaMesh。
	EnableSofaMesh *bool `json:"enable_sofa_mesh,omitempty" xml:"enable_sofa_mesh,omitempty"`
	// 统一接入配置。
	Ingresses []*IngressConfig `json:"ingresses,omitempty" xml:"ingresses,omitempty" type:"Repeated"`
	// 内网负载均衡访问配置（旧版）
	InnerLoadBalancerServices []*LoadBalancerService `json:"inner_load_balancer_services,omitempty" xml:"inner_load_balancer_services,omitempty" type:"Repeated"`
	// 公网访问负载均衡配置（旧版）
	PublicLoadBalancerServices []*LoadBalancerService `json:"public_load_balancer_services,omitempty" xml:"public_load_balancer_services,omitempty" type:"Repeated"`
	// sidecar 模版配置
	SidecarConfigs []*SidecarTemplate `json:"sidecar_configs,omitempty" xml:"sidecar_configs,omitempty" type:"Repeated"`
	// 容器服务关联的Pod是否使用宿主机网络。
	UseHostNetwork *bool `json:"use_host_network,omitempty" xml:"use_host_network,omitempty"`
	// 负载均衡配置
	LoadBalancerServices []*LoadBalancerService `json:"load_balancer_services,omitempty" xml:"load_balancer_services,omitempty" type:"Repeated"`
	// volumeClaimConfigs
	VolumeClaimConfigs []*VolumeClaimConfig `json:"volume_claim_configs,omitempty" xml:"volume_claim_configs,omitempty" type:"Repeated"`
	// 容忍度配置
	Tolerations []*Toleration `json:"tolerations,omitempty" xml:"tolerations,omitempty" type:"Repeated"`
	// 启用的sidercar列表，只针对首次发布生效
	Sidercars []*SidecarConfig `json:"sidercars,omitempty" xml:"sidercars,omitempty" type:"Repeated"`
}

func (s ContainerServiceConfig) String() string {
	return tea.Prettify(s)
}

func (s ContainerServiceConfig) GoString() string {
	return s.String()
}

func (s *ContainerServiceConfig) SetBizMonitorPaths(v []*string) *ContainerServiceConfig {
	s.BizMonitorPaths = v
	return s
}

func (s *ContainerServiceConfig) SetClusterIpServices(v []*ClusterIpService) *ContainerServiceConfig {
	s.ClusterIpServices = v
	return s
}

func (s *ContainerServiceConfig) SetContainerSpecs(v []*ContainerSpec) *ContainerServiceConfig {
	s.ContainerSpecs = v
	return s
}

func (s *ContainerServiceConfig) SetDeployConfig(v *DeployConfig) *ContainerServiceConfig {
	s.DeployConfig = v
	return s
}

func (s *ContainerServiceConfig) SetElasticConfig(v *ElasticConfig) *ContainerServiceConfig {
	s.ElasticConfig = v
	return s
}

func (s *ContainerServiceConfig) SetEnableBizMonitor(v bool) *ContainerServiceConfig {
	s.EnableBizMonitor = &v
	return s
}

func (s *ContainerServiceConfig) SetEnableLogConfig(v bool) *ContainerServiceConfig {
	s.EnableLogConfig = &v
	return s
}

func (s *ContainerServiceConfig) SetEnableSofaMesh(v bool) *ContainerServiceConfig {
	s.EnableSofaMesh = &v
	return s
}

func (s *ContainerServiceConfig) SetIngresses(v []*IngressConfig) *ContainerServiceConfig {
	s.Ingresses = v
	return s
}

func (s *ContainerServiceConfig) SetInnerLoadBalancerServices(v []*LoadBalancerService) *ContainerServiceConfig {
	s.InnerLoadBalancerServices = v
	return s
}

func (s *ContainerServiceConfig) SetPublicLoadBalancerServices(v []*LoadBalancerService) *ContainerServiceConfig {
	s.PublicLoadBalancerServices = v
	return s
}

func (s *ContainerServiceConfig) SetSidecarConfigs(v []*SidecarTemplate) *ContainerServiceConfig {
	s.SidecarConfigs = v
	return s
}

func (s *ContainerServiceConfig) SetUseHostNetwork(v bool) *ContainerServiceConfig {
	s.UseHostNetwork = &v
	return s
}

func (s *ContainerServiceConfig) SetLoadBalancerServices(v []*LoadBalancerService) *ContainerServiceConfig {
	s.LoadBalancerServices = v
	return s
}

func (s *ContainerServiceConfig) SetVolumeClaimConfigs(v []*VolumeClaimConfig) *ContainerServiceConfig {
	s.VolumeClaimConfigs = v
	return s
}

func (s *ContainerServiceConfig) SetTolerations(v []*Toleration) *ContainerServiceConfig {
	s.Tolerations = v
	return s
}

func (s *ContainerServiceConfig) SetSidercars(v []*SidecarConfig) *ContainerServiceConfig {
	s.Sidercars = v
	return s
}

// 容器健康检查-LivenessProbe。
type LivenessProbe struct {
	// 命令行方式的健康监测配置。
	ExecAction *ExecAction `json:"exec_action,omitempty" xml:"exec_action,omitempty"`
	// 不健康阈值。
	FailureThreshold *int64 `json:"failure_threshold,omitempty" xml:"failure_threshold,omitempty" require:"true"`
	// http方式的健康监测配置。
	HttpGetAction *HttpGetAction `json:"http_get_action,omitempty" xml:"http_get_action,omitempty"`
	// 首次检查延时。
	InitialDelaySeconds *int64 `json:"initial_delay_seconds,omitempty" xml:"initial_delay_seconds,omitempty" require:"true"`
	// 检查间隔。
	PeriodSeconds *int64 `json:"period_seconds,omitempty" xml:"period_seconds,omitempty" require:"true"`
	// 健康阈值。
	//
	SuccessThreshold *int64 `json:"success_threshold,omitempty" xml:"success_threshold,omitempty" require:"true"`
	// tcp方式的健康监测配置。
	TcpSocketAction *TcpSocketAction `json:"tcp_socket_action,omitempty" xml:"tcp_socket_action,omitempty"`
	// 检查超时。
	TimeoutSeconds *int64 `json:"timeout_seconds,omitempty" xml:"timeout_seconds,omitempty" require:"true"`
}

func (s LivenessProbe) String() string {
	return tea.Prettify(s)
}

func (s LivenessProbe) GoString() string {
	return s.String()
}

func (s *LivenessProbe) SetExecAction(v *ExecAction) *LivenessProbe {
	s.ExecAction = v
	return s
}

func (s *LivenessProbe) SetFailureThreshold(v int64) *LivenessProbe {
	s.FailureThreshold = &v
	return s
}

func (s *LivenessProbe) SetHttpGetAction(v *HttpGetAction) *LivenessProbe {
	s.HttpGetAction = v
	return s
}

func (s *LivenessProbe) SetInitialDelaySeconds(v int64) *LivenessProbe {
	s.InitialDelaySeconds = &v
	return s
}

func (s *LivenessProbe) SetPeriodSeconds(v int64) *LivenessProbe {
	s.PeriodSeconds = &v
	return s
}

func (s *LivenessProbe) SetSuccessThreshold(v int64) *LivenessProbe {
	s.SuccessThreshold = &v
	return s
}

func (s *LivenessProbe) SetTcpSocketAction(v *TcpSocketAction) *LivenessProbe {
	s.TcpSocketAction = v
	return s
}

func (s *LivenessProbe) SetTimeoutSeconds(v int64) *LivenessProbe {
	s.TimeoutSeconds = &v
	return s
}

// https连接
type HttpsEntry struct {
	// 端口
	Port *int64 `json:"port,omitempty" xml:"port,omitempty" require:"true"`
	// 是否使用websocket连接方式
	WebsocketConnect *bool `json:"websocket_connect,omitempty" xml:"websocket_connect,omitempty" require:"true"`
	// CA证书ID
	CaCertificateId *string `json:"ca_certificate_id,omitempty" xml:"ca_certificate_id,omitempty" require:"true"`
}

func (s HttpsEntry) String() string {
	return tea.Prettify(s)
}

func (s HttpsEntry) GoString() string {
	return s.String()
}

func (s *HttpsEntry) SetPort(v int64) *HttpsEntry {
	s.Port = &v
	return s
}

func (s *HttpsEntry) SetWebsocketConnect(v bool) *HttpsEntry {
	s.WebsocketConnect = &v
	return s
}

func (s *HttpsEntry) SetCaCertificateId(v string) *HttpsEntry {
	s.CaCertificateId = &v
	return s
}

// k8s v1Deployment
type Deployment struct {
	// Standard object metadata.
	//
	Metadata *ObjectMeta `json:"metadata,omitempty" xml:"metadata,omitempty" require:"true"`
	// Specification of the desired behavior of the Deployment.
	//
	Spec *DeploymentSpec `json:"spec,omitempty" xml:"spec,omitempty" require:"true"`
	// Most recently observed status of the Deployment.
	//
	Status *DeploymentStatus `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s Deployment) String() string {
	return tea.Prettify(s)
}

func (s Deployment) GoString() string {
	return s.String()
}

func (s *Deployment) SetMetadata(v *ObjectMeta) *Deployment {
	s.Metadata = v
	return s
}

func (s *Deployment) SetSpec(v *DeploymentSpec) *Deployment {
	s.Spec = v
	return s
}

func (s *Deployment) SetStatus(v *DeploymentStatus) *Deployment {
	s.Status = v
	return s
}

// 一组执行运维操作的应用，同一个组中的应用将并行执行操作。
type OpsApplicationGroup struct {
	// 此运维应用组中包含的应用列表
	Applications []*OpsApplication `json:"applications,omitempty" xml:"applications,omitempty" type:"Repeated"`
}

func (s OpsApplicationGroup) String() string {
	return tea.Prettify(s)
}

func (s OpsApplicationGroup) GoString() string {
	return s.String()
}

func (s *OpsApplicationGroup) SetApplications(v []*OpsApplication) *OpsApplicationGroup {
	s.Applications = v
	return s
}

// cluster overview info
type ClusterOverviewInfo struct {
	// available cpu core
	AvailableCPU *int64 `json:"available_c_p_u,omitempty" xml:"available_c_p_u,omitempty"`
	// available disk
	AvailableDisk *int64 `json:"available_disk,omitempty" xml:"available_disk,omitempty"`
	// available memory
	AvailableMemory *int64 `json:"available_memory,omitempty" xml:"available_memory,omitempty"`
	// available Node Number
	AvailableNodeNumber *int64 `json:"available_node_number,omitempty" xml:"available_node_number,omitempty"`
	// total cpu core number
	TotalCPU *int64 `json:"total_c_p_u,omitempty" xml:"total_c_p_u,omitempty"`
	// total disk
	TotalDisk *int64 `json:"total_disk,omitempty" xml:"total_disk,omitempty"`
	// total memory
	TotalMemory *int64 `json:"total_memory,omitempty" xml:"total_memory,omitempty"`
	// total node number
	TotalNodeNumber *int64 `json:"total_node_number,omitempty" xml:"total_node_number,omitempty"`
}

func (s ClusterOverviewInfo) String() string {
	return tea.Prettify(s)
}

func (s ClusterOverviewInfo) GoString() string {
	return s.String()
}

func (s *ClusterOverviewInfo) SetAvailableCPU(v int64) *ClusterOverviewInfo {
	s.AvailableCPU = &v
	return s
}

func (s *ClusterOverviewInfo) SetAvailableDisk(v int64) *ClusterOverviewInfo {
	s.AvailableDisk = &v
	return s
}

func (s *ClusterOverviewInfo) SetAvailableMemory(v int64) *ClusterOverviewInfo {
	s.AvailableMemory = &v
	return s
}

func (s *ClusterOverviewInfo) SetAvailableNodeNumber(v int64) *ClusterOverviewInfo {
	s.AvailableNodeNumber = &v
	return s
}

func (s *ClusterOverviewInfo) SetTotalCPU(v int64) *ClusterOverviewInfo {
	s.TotalCPU = &v
	return s
}

func (s *ClusterOverviewInfo) SetTotalDisk(v int64) *ClusterOverviewInfo {
	s.TotalDisk = &v
	return s
}

func (s *ClusterOverviewInfo) SetTotalMemory(v int64) *ClusterOverviewInfo {
	s.TotalMemory = &v
	return s
}

func (s *ClusterOverviewInfo) SetTotalNodeNumber(v int64) *ClusterOverviewInfo {
	s.TotalNodeNumber = &v
	return s
}

// fed k8s resource cluster state map
type ClusterState struct {
	// 集群名称
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
	// k8s resource state
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
}

func (s ClusterState) String() string {
	return tea.Prettify(s)
}

func (s ClusterState) GoString() string {
	return s.String()
}

func (s *ClusterState) SetClusterName(v string) *ClusterState {
	s.ClusterName = &v
	return s
}

func (s *ClusterState) SetState(v string) *ClusterState {
	s.State = &v
	return s
}

// 统一解决方案App信息
type UnireleaseSolutionApp struct {
	// 应用名称
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
	// 应用依赖信息
	DependsOn []*string `json:"depends_on,omitempty" xml:"depends_on,omitempty" require:"true" type:"Repeated"`
	// 应用发布配置
	ReleaseConfig *AppReleaseConfig `json:"release_config,omitempty" xml:"release_config,omitempty" require:"true"`
	// 中间件配置
	MiddlewareConfig []*string `json:"middleware_config,omitempty" xml:"middleware_config,omitempty" require:"true" type:"Repeated"`
	// 机构/租户信息
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty" require:"true"`
}

func (s UnireleaseSolutionApp) String() string {
	return tea.Prettify(s)
}

func (s UnireleaseSolutionApp) GoString() string {
	return s.String()
}

func (s *UnireleaseSolutionApp) SetApp(v string) *UnireleaseSolutionApp {
	s.App = &v
	return s
}

func (s *UnireleaseSolutionApp) SetDependsOn(v []*string) *UnireleaseSolutionApp {
	s.DependsOn = v
	return s
}

func (s *UnireleaseSolutionApp) SetReleaseConfig(v *AppReleaseConfig) *UnireleaseSolutionApp {
	s.ReleaseConfig = v
	return s
}

func (s *UnireleaseSolutionApp) SetMiddlewareConfig(v []*string) *UnireleaseSolutionApp {
	s.MiddlewareConfig = v
	return s
}

func (s *UnireleaseSolutionApp) SetTenant(v string) *UnireleaseSolutionApp {
	s.Tenant = &v
	return s
}

// fed image pull secret list
type FedImagePullSecretOverrideList struct {
	// fed image pull secret overrides
	List []*FedImagePullSecretOverride `json:"list,omitempty" xml:"list,omitempty" require:"true" type:"Repeated"`
}

func (s FedImagePullSecretOverrideList) String() string {
	return tea.Prettify(s)
}

func (s FedImagePullSecretOverrideList) GoString() string {
	return s.String()
}

func (s *FedImagePullSecretOverrideList) SetList(v []*FedImagePullSecretOverride) *FedImagePullSecretOverrideList {
	s.List = v
	return s
}

// zone info
type ZoneInfo struct {
	// zone identity
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// zone name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 所属region信息。
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// zone display name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
}

func (s ZoneInfo) String() string {
	return tea.Prettify(s)
}

func (s ZoneInfo) GoString() string {
	return s.String()
}

func (s *ZoneInfo) SetId(v string) *ZoneInfo {
	s.Id = &v
	return s
}

func (s *ZoneInfo) SetName(v string) *ZoneInfo {
	s.Name = &v
	return s
}

func (s *ZoneInfo) SetRegion(v string) *ZoneInfo {
	s.Region = &v
	return s
}

func (s *ZoneInfo) SetDisplayName(v string) *ZoneInfo {
	s.DisplayName = &v
	return s
}

// Federated Deployment Status
type FederatedDeploymentStatus struct {
	// Federated Deployment Conditions
	Conditions []*DeploymentCondition `json:"conditions,omitempty" xml:"conditions,omitempty" require:"true" type:"Repeated"`
	// V1FederatedDeploymentStatus Topologies
	Topologies []*FederatedDeploymentStatusTopologies `json:"topologies,omitempty" xml:"topologies,omitempty" require:"true" type:"Repeated"`
}

func (s FederatedDeploymentStatus) String() string {
	return tea.Prettify(s)
}

func (s FederatedDeploymentStatus) GoString() string {
	return s.String()
}

func (s *FederatedDeploymentStatus) SetConditions(v []*DeploymentCondition) *FederatedDeploymentStatus {
	s.Conditions = v
	return s
}

func (s *FederatedDeploymentStatus) SetTopologies(v []*FederatedDeploymentStatusTopologies) *FederatedDeploymentStatus {
	s.Topologies = v
	return s
}

// UID 分片范围
type UidRange struct {
	// UID 起始值
	Start *int64 `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// UID 终止值
	End *int64 `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// 弹性
	Elastic *bool `json:"elastic,omitempty" xml:"elastic,omitempty"`
}

func (s UidRange) String() string {
	return tea.Prettify(s)
}

func (s UidRange) GoString() string {
	return s.String()
}

func (s *UidRange) SetStart(v int64) *UidRange {
	s.Start = &v
	return s
}

func (s *UidRange) SetEnd(v int64) *UidRange {
	s.End = &v
	return s
}

func (s *UidRange) SetElastic(v bool) *UidRange {
	s.Elastic = &v
	return s
}

// FedDeployment cluster override
type FedDeploymentClusterOverride struct {
	// 集群名称
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// 集群Deployment replica数量
	Replica *int64 `json:"replica,omitempty" xml:"replica,omitempty" require:"true"`
	// 环境变量配置覆盖
	EnvVarOverride []*EnvVarClusterOverride `json:"env_var_override,omitempty" xml:"env_var_override,omitempty" require:"true" type:"Repeated"`
}

func (s FedDeploymentClusterOverride) String() string {
	return tea.Prettify(s)
}

func (s FedDeploymentClusterOverride) GoString() string {
	return s.String()
}

func (s *FedDeploymentClusterOverride) SetCluster(v string) *FedDeploymentClusterOverride {
	s.Cluster = &v
	return s
}

func (s *FedDeploymentClusterOverride) SetReplica(v int64) *FedDeploymentClusterOverride {
	s.Replica = &v
	return s
}

func (s *FedDeploymentClusterOverride) SetEnvVarOverride(v []*EnvVarClusterOverride) *FedDeploymentClusterOverride {
	s.EnvVarOverride = v
	return s
}

// 集群部署单元状态
type ClusteCellStatus struct {
	// 集群名称
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// 部署单元名称
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// Cell资源状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s ClusteCellStatus) String() string {
	return tea.Prettify(s)
}

func (s ClusteCellStatus) GoString() string {
	return s.String()
}

func (s *ClusteCellStatus) SetCluster(v string) *ClusteCellStatus {
	s.Cluster = &v
	return s
}

func (s *ClusteCellStatus) SetCell(v string) *ClusteCellStatus {
	s.Cell = &v
	return s
}

func (s *ClusteCellStatus) SetStatus(v string) *ClusteCellStatus {
	s.Status = &v
	return s
}

// 部署单元对应的流量规则
type CellFlow struct {
	// 部署单元名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 蓝绿着色。
	// BLUE：蓝
	// GREEN：绿
	// 非着色单元为 null
	Color *string `json:"color,omitempty" xml:"color,omitempty"`
	// 部署单元所占单元组的流量比。
	Percent *int64 `json:"percent,omitempty" xml:"percent,omitempty" require:"true" maximum:"100" minimum:"0"`
}

func (s CellFlow) String() string {
	return tea.Prettify(s)
}

func (s CellFlow) GoString() string {
	return s.String()
}

func (s *CellFlow) SetName(v string) *CellFlow {
	s.Name = &v
	return s
}

func (s *CellFlow) SetColor(v string) *CellFlow {
	s.Color = &v
	return s
}

func (s *CellFlow) SetPercent(v int64) *CellFlow {
	s.Percent = &v
	return s
}

// 容器服务发布信息
type ContainerServiceReleaseInfo struct {
	// 发布单id
	CreatedPlanId *string `json:"created_plan_id,omitempty" xml:"created_plan_id,omitempty"`
	// 发布开始时间
	LatestDeploymentStartTime *string `json:"latest_deployment_start_time,omitempty" xml:"latest_deployment_start_time,omitempty"`
	// 发布完成时间
	LatestDeploymentEndTime *string `json:"latest_deployment_end_time,omitempty" xml:"latest_deployment_end_time,omitempty"`
}

func (s ContainerServiceReleaseInfo) String() string {
	return tea.Prettify(s)
}

func (s ContainerServiceReleaseInfo) GoString() string {
	return s.String()
}

func (s *ContainerServiceReleaseInfo) SetCreatedPlanId(v string) *ContainerServiceReleaseInfo {
	s.CreatedPlanId = &v
	return s
}

func (s *ContainerServiceReleaseInfo) SetLatestDeploymentStartTime(v string) *ContainerServiceReleaseInfo {
	s.LatestDeploymentStartTime = &v
	return s
}

func (s *ContainerServiceReleaseInfo) SetLatestDeploymentEndTime(v string) *ContainerServiceReleaseInfo {
	s.LatestDeploymentEndTime = &v
	return s
}

// 发布单|应用执行进度，按状态区分
type AppDeployPodStateSummary struct {
	// 执行对象ID
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 执行对象状态
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// 总计
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
	// 执行中个数
	Executing *int64 `json:"executing,omitempty" xml:"executing,omitempty" require:"true"`
	// 成功数
	Succeeded *int64 `json:"succeeded,omitempty" xml:"succeeded,omitempty" require:"true"`
	// 等待个数
	Waiting *int64 `json:"waiting,omitempty" xml:"waiting,omitempty" require:"true"`
	// 失败个数
	Failed *int64 `json:"failed,omitempty" xml:"failed,omitempty" require:"true"`
	// 初始化个数
	//
	Inited *int64 `json:"inited,omitempty" xml:"inited,omitempty" require:"true"`
	// 阻塞个数
	Blocked *int64 `json:"blocked,omitempty" xml:"blocked,omitempty" require:"true"`
}

func (s AppDeployPodStateSummary) String() string {
	return tea.Prettify(s)
}

func (s AppDeployPodStateSummary) GoString() string {
	return s.String()
}

func (s *AppDeployPodStateSummary) SetId(v string) *AppDeployPodStateSummary {
	s.Id = &v
	return s
}

func (s *AppDeployPodStateSummary) SetState(v string) *AppDeployPodStateSummary {
	s.State = &v
	return s
}

func (s *AppDeployPodStateSummary) SetTotal(v int64) *AppDeployPodStateSummary {
	s.Total = &v
	return s
}

func (s *AppDeployPodStateSummary) SetExecuting(v int64) *AppDeployPodStateSummary {
	s.Executing = &v
	return s
}

func (s *AppDeployPodStateSummary) SetSucceeded(v int64) *AppDeployPodStateSummary {
	s.Succeeded = &v
	return s
}

func (s *AppDeployPodStateSummary) SetWaiting(v int64) *AppDeployPodStateSummary {
	s.Waiting = &v
	return s
}

func (s *AppDeployPodStateSummary) SetFailed(v int64) *AppDeployPodStateSummary {
	s.Failed = &v
	return s
}

func (s *AppDeployPodStateSummary) SetInited(v int64) *AppDeployPodStateSummary {
	s.Inited = &v
	return s
}

func (s *AppDeployPodStateSummary) SetBlocked(v int64) *AppDeployPodStateSummary {
	s.Blocked = &v
	return s
}

// spanner集群单元信息
type SpannerClusterUnitInfo struct {
	// 单元IP地址
	Address *string `json:"address,omitempty" xml:"address,omitempty" require:"true"`
	// 所属集群id
	ClusterId *string `json:"cluster_id,omitempty" xml:"cluster_id,omitempty" require:"true"`
	// 容器id
	ContainerId *string `json:"container_id,omitempty" xml:"container_id,omitempty" require:"true"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModify *string `json:"gmt_modify,omitempty" xml:"gmt_modify,omitempty" require:"true"`
	// 集群单元状态 ： 1-下线状态 2- 上线状态 3-删除状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 扩展信息，json字符串格式
	ExtendProperties *string `json:"extend_properties,omitempty" xml:"extend_properties,omitempty"`
}

func (s SpannerClusterUnitInfo) String() string {
	return tea.Prettify(s)
}

func (s SpannerClusterUnitInfo) GoString() string {
	return s.String()
}

func (s *SpannerClusterUnitInfo) SetAddress(v string) *SpannerClusterUnitInfo {
	s.Address = &v
	return s
}

func (s *SpannerClusterUnitInfo) SetClusterId(v string) *SpannerClusterUnitInfo {
	s.ClusterId = &v
	return s
}

func (s *SpannerClusterUnitInfo) SetContainerId(v string) *SpannerClusterUnitInfo {
	s.ContainerId = &v
	return s
}

func (s *SpannerClusterUnitInfo) SetGmtCreate(v string) *SpannerClusterUnitInfo {
	s.GmtCreate = &v
	return s
}

func (s *SpannerClusterUnitInfo) SetGmtModify(v string) *SpannerClusterUnitInfo {
	s.GmtModify = &v
	return s
}

func (s *SpannerClusterUnitInfo) SetStatus(v int64) *SpannerClusterUnitInfo {
	s.Status = &v
	return s
}

func (s *SpannerClusterUnitInfo) SetExtendProperties(v string) *SpannerClusterUnitInfo {
	s.ExtendProperties = &v
	return s
}

// sidecar运维对象 - 机器（computer|pod）
type SidecarOpsMachine struct {
	// 机器运维流程ID
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 运维机器名称
	Target *string `json:"target,omitempty" xml:"target,omitempty" require:"true"`
	// 执行状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 执行状态描述
	StatusDesc *string `json:"status_desc,omitempty" xml:"status_desc,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 执行消息日志
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 机器sidecar运维任务列表
	SubTargets []*SidecarOpsMachineTask `json:"sub_targets,omitempty" xml:"sub_targets,omitempty" require:"true" type:"Repeated"`
}

func (s SidecarOpsMachine) String() string {
	return tea.Prettify(s)
}

func (s SidecarOpsMachine) GoString() string {
	return s.String()
}

func (s *SidecarOpsMachine) SetId(v string) *SidecarOpsMachine {
	s.Id = &v
	return s
}

func (s *SidecarOpsMachine) SetTarget(v string) *SidecarOpsMachine {
	s.Target = &v
	return s
}

func (s *SidecarOpsMachine) SetStatus(v string) *SidecarOpsMachine {
	s.Status = &v
	return s
}

func (s *SidecarOpsMachine) SetStatusDesc(v string) *SidecarOpsMachine {
	s.StatusDesc = &v
	return s
}

func (s *SidecarOpsMachine) SetProperties(v string) *SidecarOpsMachine {
	s.Properties = &v
	return s
}

func (s *SidecarOpsMachine) SetMessage(v string) *SidecarOpsMachine {
	s.Message = &v
	return s
}

func (s *SidecarOpsMachine) SetSubTargets(v []*SidecarOpsMachineTask) *SidecarOpsMachine {
	s.SubTargets = v
	return s
}

// 部署参数
type OpsParam struct {
	// 部署参数键值
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 部署参数值
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s OpsParam) String() string {
	return tea.Prettify(s)
}

func (s OpsParam) GoString() string {
	return s.String()
}

func (s *OpsParam) SetKey(v string) *OpsParam {
	s.Key = &v
	return s
}

func (s *OpsParam) SetValue(v string) *OpsParam {
	s.Value = &v
	return s
}

// 统一接入实例关联的应用服务信息
type UnifiedAccessInstanceContainerServiceInfo struct {
	// 应用服务名称
	ContainerServiceName *string `json:"container_service_name,omitempty" xml:"container_service_name,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
}

func (s UnifiedAccessInstanceContainerServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s UnifiedAccessInstanceContainerServiceInfo) GoString() string {
	return s.String()
}

func (s *UnifiedAccessInstanceContainerServiceInfo) SetContainerServiceName(v string) *UnifiedAccessInstanceContainerServiceInfo {
	s.ContainerServiceName = &v
	return s
}

func (s *UnifiedAccessInstanceContainerServiceInfo) SetNamespace(v string) *UnifiedAccessInstanceContainerServiceInfo {
	s.Namespace = &v
	return s
}

// fed configmap override struct
type FedConfigmapOverride struct {
	// fed configmap data override
	Data []*ConfigMapData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
	// cluster name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// name cell  override
	NameOverride *string `json:"name_override,omitempty" xml:"name_override,omitempty" require:"true"`
}

func (s FedConfigmapOverride) String() string {
	return tea.Prettify(s)
}

func (s FedConfigmapOverride) GoString() string {
	return s.String()
}

func (s *FedConfigmapOverride) SetData(v []*ConfigMapData) *FedConfigmapOverride {
	s.Data = v
	return s
}

func (s *FedConfigmapOverride) SetName(v string) *FedConfigmapOverride {
	s.Name = &v
	return s
}

func (s *FedConfigmapOverride) SetNameOverride(v string) *FedConfigmapOverride {
	s.NameOverride = &v
	return s
}

// 应用分组概要信息
type AppGroupSimpleView struct {
	// 应用id列表
	AppIdList []*string `json:"app_id_list,omitempty" xml:"app_id_list,omitempty" require:"true" type:"Repeated"`
	// 服务分组id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 状态
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
}

func (s AppGroupSimpleView) String() string {
	return tea.Prettify(s)
}

func (s AppGroupSimpleView) GoString() string {
	return s.String()
}

func (s *AppGroupSimpleView) SetAppIdList(v []*string) *AppGroupSimpleView {
	s.AppIdList = v
	return s
}

func (s *AppGroupSimpleView) SetId(v string) *AppGroupSimpleView {
	s.Id = &v
	return s
}

func (s *AppGroupSimpleView) SetState(v string) *AppGroupSimpleView {
	s.State = &v
	return s
}

// 本地 spanner cluster 详细信息
type LocalSpannerClusterDetail struct {
	// 可用区
	Az *string `json:"az,omitempty" xml:"az,omitempty" require:"true"`
	// 本地集群名称
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
	// 可能存在的错误信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 集群状态
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
	// spanner cluster 集群id
	SpannerClusterId *string `json:"spanner_cluster_id,omitempty" xml:"spanner_cluster_id,omitempty"`
	// 描述spanner cluster健康状态
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 若干组容器信息
	SubClustersDetails []*LocalSubClusterDetail `json:"sub_clusters_details,omitempty" xml:"sub_clusters_details,omitempty" type:"Repeated"`
}

func (s LocalSpannerClusterDetail) String() string {
	return tea.Prettify(s)
}

func (s LocalSpannerClusterDetail) GoString() string {
	return s.String()
}

func (s *LocalSpannerClusterDetail) SetAz(v string) *LocalSpannerClusterDetail {
	s.Az = &v
	return s
}

func (s *LocalSpannerClusterDetail) SetClusterName(v string) *LocalSpannerClusterDetail {
	s.ClusterName = &v
	return s
}

func (s *LocalSpannerClusterDetail) SetMessage(v string) *LocalSpannerClusterDetail {
	s.Message = &v
	return s
}

func (s *LocalSpannerClusterDetail) SetPhase(v string) *LocalSpannerClusterDetail {
	s.Phase = &v
	return s
}

func (s *LocalSpannerClusterDetail) SetSpannerClusterId(v string) *LocalSpannerClusterDetail {
	s.SpannerClusterId = &v
	return s
}

func (s *LocalSpannerClusterDetail) SetState(v string) *LocalSpannerClusterDetail {
	s.State = &v
	return s
}

func (s *LocalSpannerClusterDetail) SetSubClustersDetails(v []*LocalSubClusterDetail) *LocalSpannerClusterDetail {
	s.SubClustersDetails = v
	return s
}

// 查询返回spanner cluster的详细信息
type QuerySpannerClusterDetail struct {
	// 用于描述联邦spanner 集群内容器实例采用内网还是外网
	AddressType *string `json:"address_type,omitempty" xml:"address_type,omitempty" require:"true"`
	// cpu 核数
	Cpu *int64 `json:"cpu,omitempty" xml:"cpu,omitempty"`
	// 创建时间
	CreateTimestamp *string `json:"create_timestamp,omitempty" xml:"create_timestamp,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 盘大小
	Disk *int64 `json:"disk,omitempty" xml:"disk,omitempty"`
	// 将cpu,mem,disk按照单位拼接起来
	Flavor *string `json:"flavor,omitempty" xml:"flavor,omitempty" require:"true"`
	// 描述集群容器是否采用了host网络
	//
	HostNetwork *bool `json:"host_network,omitempty" xml:"host_network,omitempty" require:"true"`
	// 集群id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true" maxLength:"256"`
	// 关联的实例数
	Instances *int64 `json:"instances,omitempty" xml:"instances,omitempty" require:"true"`
	// mem 大小
	Mem *int64 `json:"mem,omitempty" xml:"mem,omitempty"`
	// 可能存在的错误信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 集群名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true" maxLength:"63"`
	// 描述集群状态
	//
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true" maxLength:"63"`
	// 租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty" require:"true"`
	// 最后更新的时间戳
	UpdateTimestamp *string `json:"update_timestamp,omitempty" xml:"update_timestamp,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 期望集群状态
	ExpectClusterState *string `json:"expect_cluster_state,omitempty" xml:"expect_cluster_state,omitempty"`
}

func (s QuerySpannerClusterDetail) String() string {
	return tea.Prettify(s)
}

func (s QuerySpannerClusterDetail) GoString() string {
	return s.String()
}

func (s *QuerySpannerClusterDetail) SetAddressType(v string) *QuerySpannerClusterDetail {
	s.AddressType = &v
	return s
}

func (s *QuerySpannerClusterDetail) SetCpu(v int64) *QuerySpannerClusterDetail {
	s.Cpu = &v
	return s
}

func (s *QuerySpannerClusterDetail) SetCreateTimestamp(v string) *QuerySpannerClusterDetail {
	s.CreateTimestamp = &v
	return s
}

func (s *QuerySpannerClusterDetail) SetDisk(v int64) *QuerySpannerClusterDetail {
	s.Disk = &v
	return s
}

func (s *QuerySpannerClusterDetail) SetFlavor(v string) *QuerySpannerClusterDetail {
	s.Flavor = &v
	return s
}

func (s *QuerySpannerClusterDetail) SetHostNetwork(v bool) *QuerySpannerClusterDetail {
	s.HostNetwork = &v
	return s
}

func (s *QuerySpannerClusterDetail) SetId(v string) *QuerySpannerClusterDetail {
	s.Id = &v
	return s
}

func (s *QuerySpannerClusterDetail) SetInstances(v int64) *QuerySpannerClusterDetail {
	s.Instances = &v
	return s
}

func (s *QuerySpannerClusterDetail) SetMem(v int64) *QuerySpannerClusterDetail {
	s.Mem = &v
	return s
}

func (s *QuerySpannerClusterDetail) SetMessage(v string) *QuerySpannerClusterDetail {
	s.Message = &v
	return s
}

func (s *QuerySpannerClusterDetail) SetName(v string) *QuerySpannerClusterDetail {
	s.Name = &v
	return s
}

func (s *QuerySpannerClusterDetail) SetState(v string) *QuerySpannerClusterDetail {
	s.State = &v
	return s
}

func (s *QuerySpannerClusterDetail) SetTenant(v string) *QuerySpannerClusterDetail {
	s.Tenant = &v
	return s
}

func (s *QuerySpannerClusterDetail) SetUpdateTimestamp(v string) *QuerySpannerClusterDetail {
	s.UpdateTimestamp = &v
	return s
}

func (s *QuerySpannerClusterDetail) SetWorkspaceGroup(v string) *QuerySpannerClusterDetail {
	s.WorkspaceGroup = &v
	return s
}

func (s *QuerySpannerClusterDetail) SetExpectClusterState(v string) *QuerySpannerClusterDetail {
	s.ExpectClusterState = &v
	return s
}

// 部署单元
type Cell struct {
	// 所属逻辑单元名称[单元化模式特有]。
	CellGroup *string `json:"cell_group,omitempty" xml:"cell_group,omitempty"`
	// 蓝绿着色信息[单元化模式特有]。
	Color *string `json:"color,omitempty" xml:"color,omitempty"`
	// 创建时间。
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 部署单元标识，创建之后不允许修改。
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// 是否灰度[单元化模式特有]。
	IsGray *bool `json:"is_gray,omitempty" xml:"is_gray,omitempty"`
	// 部署单元名称，主要用作页面展示。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 压测权重
	PressWeight *int64 `json:"press_weight,omitempty" xml:"press_weight,omitempty"`
	// 部署单元类型[单元化模式特有]。
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 默认权重[单元化模式特有]。
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty"`
	// 所属工作空间名称。
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// 所属机房信息。
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty" require:"true"`
	// cell名称，与name一样，为了兼容已有代码
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// 所属cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
}

func (s Cell) String() string {
	return tea.Prettify(s)
}

func (s Cell) GoString() string {
	return s.String()
}

func (s *Cell) SetCellGroup(v string) *Cell {
	s.CellGroup = &v
	return s
}

func (s *Cell) SetColor(v string) *Cell {
	s.Color = &v
	return s
}

func (s *Cell) SetCreatedTime(v string) *Cell {
	s.CreatedTime = &v
	return s
}

func (s *Cell) SetIdentity(v string) *Cell {
	s.Identity = &v
	return s
}

func (s *Cell) SetIsGray(v bool) *Cell {
	s.IsGray = &v
	return s
}

func (s *Cell) SetName(v string) *Cell {
	s.Name = &v
	return s
}

func (s *Cell) SetPressWeight(v int64) *Cell {
	s.PressWeight = &v
	return s
}

func (s *Cell) SetType(v string) *Cell {
	s.Type = &v
	return s
}

func (s *Cell) SetWeight(v int64) *Cell {
	s.Weight = &v
	return s
}

func (s *Cell) SetWorkspace(v string) *Cell {
	s.Workspace = &v
	return s
}

func (s *Cell) SetZone(v string) *Cell {
	s.Zone = &v
	return s
}

func (s *Cell) SetDisplayName(v string) *Cell {
	s.DisplayName = &v
	return s
}

func (s *Cell) SetCluster(v string) *Cell {
	s.Cluster = &v
	return s
}

// 发布|运维分组执行进度
type OpsGroupTaskProgress struct {
	// 任务码
	ActionCode *string `json:"action_code,omitempty" xml:"action_code,omitempty" require:"true"`
	// 任务名称
	ActionName *string `json:"action_name,omitempty" xml:"action_name,omitempty" require:"true"`
	// 任务状态
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// 任务开始时间
	StartedTime *string `json:"started_time,omitempty" xml:"started_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 任务结束时间
	FinishedTime *string `json:"finished_time,omitempty" xml:"finished_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s OpsGroupTaskProgress) String() string {
	return tea.Prettify(s)
}

func (s OpsGroupTaskProgress) GoString() string {
	return s.String()
}

func (s *OpsGroupTaskProgress) SetActionCode(v string) *OpsGroupTaskProgress {
	s.ActionCode = &v
	return s
}

func (s *OpsGroupTaskProgress) SetActionName(v string) *OpsGroupTaskProgress {
	s.ActionName = &v
	return s
}

func (s *OpsGroupTaskProgress) SetState(v string) *OpsGroupTaskProgress {
	s.State = &v
	return s
}

func (s *OpsGroupTaskProgress) SetStartedTime(v string) *OpsGroupTaskProgress {
	s.StartedTime = &v
	return s
}

func (s *OpsGroupTaskProgress) SetFinishedTime(v string) *OpsGroupTaskProgress {
	s.FinishedTime = &v
	return s
}

// UID 分片
type UidShard struct {
	// UID 起始值
	MinUid *int64 `json:"min_uid,omitempty" xml:"min_uid,omitempty" require:"true"`
	// UID 终止值
	MaxUid *int64 `json:"max_uid,omitempty" xml:"max_uid,omitempty" require:"true"`
}

func (s UidShard) String() string {
	return tea.Prettify(s)
}

func (s UidShard) GoString() string {
	return s.String()
}

func (s *UidShard) SetMinUid(v int64) *UidShard {
	s.MinUid = &v
	return s
}

func (s *UidShard) SetMaxUid(v int64) *UidShard {
	s.MaxUid = &v
	return s
}

// 应用信息。
type AppInfo struct {
	// buildpack版本。
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
	// 应用描述。
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 应用id。
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 应用名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 应用owner。
	Owner *string `json:"owner,omitempty" xml:"owner,omitempty" require:"true"`
	// 技术栈。
	TechstackIdentity *string `json:"techstack_identity,omitempty" xml:"techstack_identity,omitempty" require:"true"`
	// ownerId
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty"`
}

func (s AppInfo) String() string {
	return tea.Prettify(s)
}

func (s AppInfo) GoString() string {
	return s.String()
}

func (s *AppInfo) SetBuildpackVersion(v string) *AppInfo {
	s.BuildpackVersion = &v
	return s
}

func (s *AppInfo) SetDescription(v string) *AppInfo {
	s.Description = &v
	return s
}

func (s *AppInfo) SetId(v string) *AppInfo {
	s.Id = &v
	return s
}

func (s *AppInfo) SetName(v string) *AppInfo {
	s.Name = &v
	return s
}

func (s *AppInfo) SetOwner(v string) *AppInfo {
	s.Owner = &v
	return s
}

func (s *AppInfo) SetTechstackIdentity(v string) *AppInfo {
	s.TechstackIdentity = &v
	return s
}

func (s *AppInfo) SetOwnerId(v string) *AppInfo {
	s.OwnerId = &v
	return s
}

// 一个运维操作单元。
type OpsUnit struct {
	// 单元所属部署区
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 包含在此单元中进行运维操作的计算容器列表
	Computers []*OpsComputer `json:"computers,omitempty" xml:"computers,omitempty" type:"Repeated"`
	// 单元所属地域
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// 单元所属可用区
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty"`
}

func (s OpsUnit) String() string {
	return tea.Prettify(s)
}

func (s OpsUnit) GoString() string {
	return s.String()
}

func (s *OpsUnit) SetCell(v string) *OpsUnit {
	s.Cell = &v
	return s
}

func (s *OpsUnit) SetComputers(v []*OpsComputer) *OpsUnit {
	s.Computers = v
	return s
}

func (s *OpsUnit) SetRegion(v string) *OpsUnit {
	s.Region = &v
	return s
}

func (s *OpsUnit) SetZone(v string) *OpsUnit {
	s.Zone = &v
	return s
}

// 容器应用服务运维
type ContainerServiceOperation struct {
	// 容器服务名称。
	ContainerServiceName *string `json:"container_service_name,omitempty" xml:"container_service_name,omitempty" require:"true"`
	// 依赖的容器应用服务名称。
	DependContainerServiceNames []*string `json:"depend_container_service_names,omitempty" xml:"depend_container_service_names,omitempty" type:"Repeated"`
	// 待操作目标pods列表
	SelectedPods []*CellPods `json:"selected_pods,omitempty" xml:"selected_pods,omitempty" type:"Repeated"`
	// 自定义发布批次
	Batches []*ReleaseBatchObj `json:"batches,omitempty" xml:"batches,omitempty" type:"Repeated"`
	// 缩放副本数量，扩缩容时使用
	ScaleReplicas []*ReplicaCount `json:"scale_replicas,omitempty" xml:"scale_replicas,omitempty" type:"Repeated"`
}

func (s ContainerServiceOperation) String() string {
	return tea.Prettify(s)
}

func (s ContainerServiceOperation) GoString() string {
	return s.String()
}

func (s *ContainerServiceOperation) SetContainerServiceName(v string) *ContainerServiceOperation {
	s.ContainerServiceName = &v
	return s
}

func (s *ContainerServiceOperation) SetDependContainerServiceNames(v []*string) *ContainerServiceOperation {
	s.DependContainerServiceNames = v
	return s
}

func (s *ContainerServiceOperation) SetSelectedPods(v []*CellPods) *ContainerServiceOperation {
	s.SelectedPods = v
	return s
}

func (s *ContainerServiceOperation) SetBatches(v []*ReleaseBatchObj) *ContainerServiceOperation {
	s.Batches = v
	return s
}

func (s *ContainerServiceOperation) SetScaleReplicas(v []*ReplicaCount) *ContainerServiceOperation {
	s.ScaleReplicas = v
	return s
}

// 部署单元权重
type CellWeightInfo struct {
	// 部署单元所属工作空间
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// 部署单元名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 部署单元所占单元组流量比重
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty" require:"true"`
}

func (s CellWeightInfo) String() string {
	return tea.Prettify(s)
}

func (s CellWeightInfo) GoString() string {
	return s.String()
}

func (s *CellWeightInfo) SetWorkspace(v string) *CellWeightInfo {
	s.Workspace = &v
	return s
}

func (s *CellWeightInfo) SetName(v string) *CellWeightInfo {
	s.Name = &v
	return s
}

func (s *CellWeightInfo) SetWeight(v int64) *CellWeightInfo {
	s.Weight = &v
	return s
}

// 一个运维应用操作链。一个操作链中包含一个顺序的运维应用组列表，这些运维应用组将依次串行的执行运维操作。不同的操作链将并行执行。
type OpsApplicationChain struct {
	// 此运维应用链中包含的应用组列表
	Groups []*OpsApplicationGroup `json:"groups,omitempty" xml:"groups,omitempty" type:"Repeated"`
}

func (s OpsApplicationChain) String() string {
	return tea.Prettify(s)
}

func (s OpsApplicationChain) GoString() string {
	return s.String()
}

func (s *OpsApplicationChain) SetGroups(v []*OpsApplicationGroup) *OpsApplicationChain {
	s.Groups = v
	return s
}

// 弹性场景
type ElasticScene struct {
	// 场景名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 弹性场景状态，有效值（VALID，INVALID）
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 弹性场景ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
}

func (s ElasticScene) String() string {
	return tea.Prettify(s)
}

func (s ElasticScene) GoString() string {
	return s.String()
}

func (s *ElasticScene) SetName(v string) *ElasticScene {
	s.Name = &v
	return s
}

func (s *ElasticScene) SetStatus(v string) *ElasticScene {
	s.Status = &v
	return s
}

func (s *ElasticScene) SetId(v int64) *ElasticScene {
	s.Id = &v
	return s
}

// node event
type NodeEvent struct {
	// event count
	Count *int64 `json:"count,omitempty" xml:"count,omitempty" require:"true"`
	// event message
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// event modified time
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// event reason
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty" require:"true"`
	// event type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s NodeEvent) String() string {
	return tea.Prettify(s)
}

func (s NodeEvent) GoString() string {
	return s.String()
}

func (s *NodeEvent) SetCount(v int64) *NodeEvent {
	s.Count = &v
	return s
}

func (s *NodeEvent) SetMessage(v string) *NodeEvent {
	s.Message = &v
	return s
}

func (s *NodeEvent) SetModifiedTime(v string) *NodeEvent {
	s.ModifiedTime = &v
	return s
}

func (s *NodeEvent) SetReason(v string) *NodeEvent {
	s.Reason = &v
	return s
}

func (s *NodeEvent) SetType(v string) *NodeEvent {
	s.Type = &v
	return s
}

// OB租户信息
type OBTenant struct {
	// 租户描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 扩展属性，序列化后的JSON字符串
	ExtendProperties *string `json:"extend_properties,omitempty" xml:"extend_properties,omitempty"`
	// 唯一标识
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 租户名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 租户类型（单库GZONE|分片库RZONE）：存放对应业务库
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 租户对应uid分段，用于存放对应的业务分片库
	Uids []*int64 `json:"uids,omitempty" xml:"uids,omitempty" type:"Repeated"`
	// 工作空间组唯一标识
	WorkspaceGroupId *string `json:"workspace_group_id,omitempty" xml:"workspace_group_id,omitempty" require:"true"`
	// 创建日期
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 修改时间
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s OBTenant) String() string {
	return tea.Prettify(s)
}

func (s OBTenant) GoString() string {
	return s.String()
}

func (s *OBTenant) SetDescription(v string) *OBTenant {
	s.Description = &v
	return s
}

func (s *OBTenant) SetExtendProperties(v string) *OBTenant {
	s.ExtendProperties = &v
	return s
}

func (s *OBTenant) SetId(v string) *OBTenant {
	s.Id = &v
	return s
}

func (s *OBTenant) SetName(v string) *OBTenant {
	s.Name = &v
	return s
}

func (s *OBTenant) SetType(v string) *OBTenant {
	s.Type = &v
	return s
}

func (s *OBTenant) SetUids(v []*int64) *OBTenant {
	s.Uids = v
	return s
}

func (s *OBTenant) SetWorkspaceGroupId(v string) *OBTenant {
	s.WorkspaceGroupId = &v
	return s
}

func (s *OBTenant) SetCreatedTime(v string) *OBTenant {
	s.CreatedTime = &v
	return s
}

func (s *OBTenant) SetModifiedTime(v string) *OBTenant {
	s.ModifiedTime = &v
	return s
}

// Kubernetes Event
type KubeEvent struct {
	// 事件类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 发布次数
	Count *int64 `json:"count,omitempty" xml:"count,omitempty" require:"true"`
	// 事件原因
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty" require:"true"`
	// 事件内容
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// 更新时间
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s KubeEvent) String() string {
	return tea.Prettify(s)
}

func (s KubeEvent) GoString() string {
	return s.String()
}

func (s *KubeEvent) SetType(v string) *KubeEvent {
	s.Type = &v
	return s
}

func (s *KubeEvent) SetCount(v int64) *KubeEvent {
	s.Count = &v
	return s
}

func (s *KubeEvent) SetReason(v string) *KubeEvent {
	s.Reason = &v
	return s
}

func (s *KubeEvent) SetMessage(v string) *KubeEvent {
	s.Message = &v
	return s
}

func (s *KubeEvent) SetModifiedTime(v string) *KubeEvent {
	s.ModifiedTime = &v
	return s
}

// region info
type RegionInfo struct {
	// region name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s RegionInfo) String() string {
	return tea.Prettify(s)
}

func (s RegionInfo) GoString() string {
	return s.String()
}

func (s *RegionInfo) SetName(v string) *RegionInfo {
	s.Name = &v
	return s
}

// zone list of workspace
type ZoneOfWorkspace struct {
	// workspace id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// workspace name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// zone list of workspace
	Zones []*ZoneInfo `json:"zones,omitempty" xml:"zones,omitempty" require:"true" type:"Repeated"`
	// region name
	RegionName *string `json:"region_name,omitempty" xml:"region_name,omitempty" require:"true"`
	// region id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
}

func (s ZoneOfWorkspace) String() string {
	return tea.Prettify(s)
}

func (s ZoneOfWorkspace) GoString() string {
	return s.String()
}

func (s *ZoneOfWorkspace) SetWorkspaceId(v string) *ZoneOfWorkspace {
	s.WorkspaceId = &v
	return s
}

func (s *ZoneOfWorkspace) SetWorkspaceName(v string) *ZoneOfWorkspace {
	s.WorkspaceName = &v
	return s
}

func (s *ZoneOfWorkspace) SetZones(v []*ZoneInfo) *ZoneOfWorkspace {
	s.Zones = v
	return s
}

func (s *ZoneOfWorkspace) SetRegionName(v string) *ZoneOfWorkspace {
	s.RegionName = &v
	return s
}

func (s *ZoneOfWorkspace) SetRegionId(v string) *ZoneOfWorkspace {
	s.RegionId = &v
	return s
}

// Service 信息
type ServiceInfo struct {
	// 元信息
	Meta *ContainerServiceObjectMeta `json:"meta,omitempty" xml:"meta,omitempty" require:"true"`
	// Service 类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 负载均衡服务的网络类型（internet | intranet | office | multidomain）
	LoadBalancerAddressType *string `json:"load_balancer_address_type,omitempty" xml:"load_balancer_address_type,omitempty"`
	// Service 状态
	Status *ServiceStatus `json:"status,omitempty" xml:"status,omitempty"`
	// service端口映射列表
	Ports []*ServicePort `json:"ports,omitempty" xml:"ports,omitempty" type:"Repeated"`
}

func (s ServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s ServiceInfo) GoString() string {
	return s.String()
}

func (s *ServiceInfo) SetMeta(v *ContainerServiceObjectMeta) *ServiceInfo {
	s.Meta = v
	return s
}

func (s *ServiceInfo) SetType(v string) *ServiceInfo {
	s.Type = &v
	return s
}

func (s *ServiceInfo) SetLoadBalancerAddressType(v string) *ServiceInfo {
	s.LoadBalancerAddressType = &v
	return s
}

func (s *ServiceInfo) SetStatus(v *ServiceStatus) *ServiceInfo {
	s.Status = v
	return s
}

func (s *ServiceInfo) SetPorts(v []*ServicePort) *ServiceInfo {
	s.Ports = v
	return s
}

// uid 信息
type UidInfo struct {
	// UID
	Uid *int64 `json:"uid,omitempty" xml:"uid,omitempty" require:"true"`
	// 当前分组
	CurrentGroup *string `json:"current_group,omitempty" xml:"current_group,omitempty" require:"true"`
	// 默认分组
	DefaultGroup *string `json:"default_group,omitempty" xml:"default_group,omitempty" require:"true"`
	// 是否弹性
	Elastic *bool `json:"elastic,omitempty" xml:"elastic,omitempty"`
	// 是否压测
	Press *bool `json:"press,omitempty" xml:"press,omitempty"`
	// 是否灰度
	Gray *bool `json:"gray,omitempty" xml:"gray,omitempty"`
}

func (s UidInfo) String() string {
	return tea.Prettify(s)
}

func (s UidInfo) GoString() string {
	return s.String()
}

func (s *UidInfo) SetUid(v int64) *UidInfo {
	s.Uid = &v
	return s
}

func (s *UidInfo) SetCurrentGroup(v string) *UidInfo {
	s.CurrentGroup = &v
	return s
}

func (s *UidInfo) SetDefaultGroup(v string) *UidInfo {
	s.DefaultGroup = &v
	return s
}

func (s *UidInfo) SetElastic(v bool) *UidInfo {
	s.Elastic = &v
	return s
}

func (s *UidInfo) SetPress(v bool) *UidInfo {
	s.Press = &v
	return s
}

func (s *UidInfo) SetGray(v bool) *UidInfo {
	s.Gray = &v
	return s
}

// fed configmap struct
type FedConfigmap struct {
	// fed configmap annotations
	Annotations []*Annotation `json:"annotations,omitempty" xml:"annotations,omitempty" require:"true" type:"Repeated"`
	// Fed资源集群Cell状态
	CellStatus []*ClusteCellStatus `json:"cell_status,omitempty" xml:"cell_status,omitempty" type:"Repeated"`
	// fed clusters
	Clusters []*string `json:"clusters,omitempty" xml:"clusters,omitempty" require:"true" type:"Repeated"`
	// 创建时间
	CreateTimeStamp *string `json:"create_time_stamp,omitempty" xml:"create_time_stamp,omitempty" require:"true"`
	// fed configmap data
	Data []*ConfigMapData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
	// fed configmap labels
	Labels []*Label `json:"labels,omitempty" xml:"labels,omitempty" require:"true" type:"Repeated"`
	// fed configmap name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// fed configmap namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// fed configmap override
	Overrides []*FedConfigmapOverride `json:"overrides,omitempty" xml:"overrides,omitempty" require:"true" type:"Repeated"`
	// 原因
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
	// propagation状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s FedConfigmap) String() string {
	return tea.Prettify(s)
}

func (s FedConfigmap) GoString() string {
	return s.String()
}

func (s *FedConfigmap) SetAnnotations(v []*Annotation) *FedConfigmap {
	s.Annotations = v
	return s
}

func (s *FedConfigmap) SetCellStatus(v []*ClusteCellStatus) *FedConfigmap {
	s.CellStatus = v
	return s
}

func (s *FedConfigmap) SetClusters(v []*string) *FedConfigmap {
	s.Clusters = v
	return s
}

func (s *FedConfigmap) SetCreateTimeStamp(v string) *FedConfigmap {
	s.CreateTimeStamp = &v
	return s
}

func (s *FedConfigmap) SetData(v []*ConfigMapData) *FedConfigmap {
	s.Data = v
	return s
}

func (s *FedConfigmap) SetLabels(v []*Label) *FedConfigmap {
	s.Labels = v
	return s
}

func (s *FedConfigmap) SetName(v string) *FedConfigmap {
	s.Name = &v
	return s
}

func (s *FedConfigmap) SetNamespace(v string) *FedConfigmap {
	s.Namespace = &v
	return s
}

func (s *FedConfigmap) SetOverrides(v []*FedConfigmapOverride) *FedConfigmap {
	s.Overrides = v
	return s
}

func (s *FedConfigmap) SetReason(v string) *FedConfigmap {
	s.Reason = &v
	return s
}

func (s *FedConfigmap) SetStatus(v string) *FedConfigmap {
	s.Status = &v
	return s
}

// 弹性规则
type ElasticRuleView struct {
	// ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// 弹性类型，有效值：SERVICE，MSGBROKER
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 弹性值
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 关联应用
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 状态，有效值：VALID（线上生效），PRESS（仅压测生效），INVALID（无效状态）
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 场景 ID
	SceneId *int64 `json:"scene_id,omitempty" xml:"scene_id,omitempty" require:"true"`
}

func (s ElasticRuleView) String() string {
	return tea.Prettify(s)
}

func (s ElasticRuleView) GoString() string {
	return s.String()
}

func (s *ElasticRuleView) SetId(v int64) *ElasticRuleView {
	s.Id = &v
	return s
}

func (s *ElasticRuleView) SetType(v string) *ElasticRuleView {
	s.Type = &v
	return s
}

func (s *ElasticRuleView) SetName(v string) *ElasticRuleView {
	s.Name = &v
	return s
}

func (s *ElasticRuleView) SetAppName(v string) *ElasticRuleView {
	s.AppName = &v
	return s
}

func (s *ElasticRuleView) SetStatus(v string) *ElasticRuleView {
	s.Status = &v
	return s
}

func (s *ElasticRuleView) SetOperator(v string) *ElasticRuleView {
	s.Operator = &v
	return s
}

func (s *ElasticRuleView) SetSceneId(v int64) *ElasticRuleView {
	s.SceneId = &v
	return s
}

// fed namespace
type FedNamespace struct {
	// fed namespace annotations
	Annotations []*Annotation `json:"annotations,omitempty" xml:"annotations,omitempty" require:"true" type:"Repeated"`
	// fed namespace clusters
	Clusters []*string `json:"clusters,omitempty" xml:"clusters,omitempty" require:"true" type:"Repeated"`
	// fed namespace cluster state map
	ClusterStateMap []*ClusterState `json:"cluster_state_map,omitempty" xml:"cluster_state_map,omitempty" require:"true" type:"Repeated"`
	// fed namespace labels
	Labels []*Label `json:"labels,omitempty" xml:"labels,omitempty" require:"true" type:"Repeated"`
	// fed namespace name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// Fed CRD namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 创建时间
	CreateTimeStamp *string `json:"create_time_stamp,omitempty" xml:"create_time_stamp,omitempty" require:"true"`
	// fed 资源的状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 导致 fed 资源处于该状态的原因
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
}

func (s FedNamespace) String() string {
	return tea.Prettify(s)
}

func (s FedNamespace) GoString() string {
	return s.String()
}

func (s *FedNamespace) SetAnnotations(v []*Annotation) *FedNamespace {
	s.Annotations = v
	return s
}

func (s *FedNamespace) SetClusters(v []*string) *FedNamespace {
	s.Clusters = v
	return s
}

func (s *FedNamespace) SetClusterStateMap(v []*ClusterState) *FedNamespace {
	s.ClusterStateMap = v
	return s
}

func (s *FedNamespace) SetLabels(v []*Label) *FedNamespace {
	s.Labels = v
	return s
}

func (s *FedNamespace) SetName(v string) *FedNamespace {
	s.Name = &v
	return s
}

func (s *FedNamespace) SetNamespace(v string) *FedNamespace {
	s.Namespace = &v
	return s
}

func (s *FedNamespace) SetCreateTimeStamp(v string) *FedNamespace {
	s.CreateTimeStamp = &v
	return s
}

func (s *FedNamespace) SetStatus(v string) *FedNamespace {
	s.Status = &v
	return s
}

func (s *FedNamespace) SetReason(v string) *FedNamespace {
	s.Reason = &v
	return s
}

// LksServiceProcessLog
type ServiceProcessLog struct {
	// Logs属性
	Attributes *string `json:"attributes,omitempty" xml:"attributes,omitempty" require:"true"`
	// 错误追溯
	ErrorStackTraces *string `json:"error_stack_traces,omitempty" xml:"error_stack_traces,omitempty" require:"true"`
	// 发布阶段，INIT，PARSE， EXECUTE
	ExecPhase *string `json:"exec_phase,omitempty" xml:"exec_phase,omitempty" require:"true"`
	// 关联对象类型，RPV2，RP_STAGE，POD
	InvObjectKind *string `json:"inv_object_kind,omitempty" xml:"inv_object_kind,omitempty" require:"true"`
	// 对应object的name
	InvObjectName *string `json:"inv_object_name,omitempty" xml:"inv_object_name,omitempty" require:"true"`
	// 对应object的namespace
	InvObjectNamespace *string `json:"inv_object_namespace,omitempty" xml:"inv_object_namespace,omitempty" require:"true"`
	// log_time
	LogTime *string `json:"log_time,omitempty" xml:"log_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// Logs详情
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// Logs原因
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty" require:"true"`
	// 关联的ldc_plan id
	RefPlan *string `json:"ref_plan,omitempty" xml:"ref_plan,omitempty" require:"true"`
	// 关联的lks_service id
	RefService *string `json:"ref_service,omitempty" xml:"ref_service,omitempty" require:"true"`
	// Logs的来源，ldcconsole，orch_event，opsware_event
	Source *string `json:"source,omitempty" xml:"source,omitempty" require:"true"`
}

func (s ServiceProcessLog) String() string {
	return tea.Prettify(s)
}

func (s ServiceProcessLog) GoString() string {
	return s.String()
}

func (s *ServiceProcessLog) SetAttributes(v string) *ServiceProcessLog {
	s.Attributes = &v
	return s
}

func (s *ServiceProcessLog) SetErrorStackTraces(v string) *ServiceProcessLog {
	s.ErrorStackTraces = &v
	return s
}

func (s *ServiceProcessLog) SetExecPhase(v string) *ServiceProcessLog {
	s.ExecPhase = &v
	return s
}

func (s *ServiceProcessLog) SetInvObjectKind(v string) *ServiceProcessLog {
	s.InvObjectKind = &v
	return s
}

func (s *ServiceProcessLog) SetInvObjectName(v string) *ServiceProcessLog {
	s.InvObjectName = &v
	return s
}

func (s *ServiceProcessLog) SetInvObjectNamespace(v string) *ServiceProcessLog {
	s.InvObjectNamespace = &v
	return s
}

func (s *ServiceProcessLog) SetLogTime(v string) *ServiceProcessLog {
	s.LogTime = &v
	return s
}

func (s *ServiceProcessLog) SetMessage(v string) *ServiceProcessLog {
	s.Message = &v
	return s
}

func (s *ServiceProcessLog) SetReason(v string) *ServiceProcessLog {
	s.Reason = &v
	return s
}

func (s *ServiceProcessLog) SetRefPlan(v string) *ServiceProcessLog {
	s.RefPlan = &v
	return s
}

func (s *ServiceProcessLog) SetRefService(v string) *ServiceProcessLog {
	s.RefService = &v
	return s
}

func (s *ServiceProcessLog) SetSource(v string) *ServiceProcessLog {
	s.Source = &v
	return s
}

// 添加antvipdomain请求
type AntvipDomain struct {
	// 应用名称
	Application *string `json:"application,omitempty" xml:"application,omitempty" require:"true"`
	// 部署单元cell名称
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// 健康检查端口，非必填项
	HealthCheckDefaultPort *int64 `json:"health_check_default_port,omitempty" xml:"health_check_default_port,omitempty"`
	// 健康检查类型，默认为TCP
	HealthCheckType *string `json:"health_check_type,omitempty" xml:"health_check_type,omitempty"`
}

func (s AntvipDomain) String() string {
	return tea.Prettify(s)
}

func (s AntvipDomain) GoString() string {
	return s.String()
}

func (s *AntvipDomain) SetApplication(v string) *AntvipDomain {
	s.Application = &v
	return s
}

func (s *AntvipDomain) SetCell(v string) *AntvipDomain {
	s.Cell = &v
	return s
}

func (s *AntvipDomain) SetHealthCheckDefaultPort(v int64) *AntvipDomain {
	s.HealthCheckDefaultPort = &v
	return s
}

func (s *AntvipDomain) SetHealthCheckType(v string) *AntvipDomain {
	s.HealthCheckType = &v
	return s
}

// 流量权重定义
type ServiceWeight struct {
	// 统一接入名称
	IngressName *string `json:"ingress_name,omitempty" xml:"ingress_name,omitempty" require:"true"`
	// 蓝区流量权重，取值0-100
	Blue *int64 `json:"blue,omitempty" xml:"blue,omitempty" require:"true"`
	// 绿区流量权重，取值0-100
	Green *int64 `json:"green,omitempty" xml:"green,omitempty" require:"true"`
	// 状态：succeed、updating、fail
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 错误信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s ServiceWeight) String() string {
	return tea.Prettify(s)
}

func (s ServiceWeight) GoString() string {
	return s.String()
}

func (s *ServiceWeight) SetIngressName(v string) *ServiceWeight {
	s.IngressName = &v
	return s
}

func (s *ServiceWeight) SetBlue(v int64) *ServiceWeight {
	s.Blue = &v
	return s
}

func (s *ServiceWeight) SetGreen(v int64) *ServiceWeight {
	s.Green = &v
	return s
}

func (s *ServiceWeight) SetStatus(v string) *ServiceWeight {
	s.Status = &v
	return s
}

func (s *ServiceWeight) SetMessage(v string) *ServiceWeight {
	s.Message = &v
	return s
}

// FedConfigMapOverride 列表
type FedConfigMapOverrideList struct {
	// fed configmap override list
	List []*FedConfigmapOverride `json:"list,omitempty" xml:"list,omitempty" require:"true" type:"Repeated"`
}

func (s FedConfigMapOverrideList) String() string {
	return tea.Prettify(s)
}

func (s FedConfigMapOverrideList) GoString() string {
	return s.String()
}

func (s *FedConfigMapOverrideList) SetList(v []*FedConfigmapOverride) *FedConfigMapOverrideList {
	s.List = v
	return s
}

// fed image pull secret
type FedImagePullSecret struct {
	// annotations
	Annotations []*string `json:"annotations,omitempty" xml:"annotations,omitempty" type:"Repeated"`
	// image pull secret registry account info
	Data *RegistryAccout `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// labels
	Labels []*string `json:"labels,omitempty" xml:"labels,omitempty" type:"Repeated"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// namesapce
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// cell overrides
	Overrides *FedImagePullSecretOverrideList `json:"overrides,omitempty" xml:"overrides,omitempty" require:"true"`
	// workspace group name
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
	// cell list
	Cells []*string `json:"cells,omitempty" xml:"cells,omitempty" require:"true" type:"Repeated"`
}

func (s FedImagePullSecret) String() string {
	return tea.Prettify(s)
}

func (s FedImagePullSecret) GoString() string {
	return s.String()
}

func (s *FedImagePullSecret) SetAnnotations(v []*string) *FedImagePullSecret {
	s.Annotations = v
	return s
}

func (s *FedImagePullSecret) SetData(v *RegistryAccout) *FedImagePullSecret {
	s.Data = v
	return s
}

func (s *FedImagePullSecret) SetLabels(v []*string) *FedImagePullSecret {
	s.Labels = v
	return s
}

func (s *FedImagePullSecret) SetName(v string) *FedImagePullSecret {
	s.Name = &v
	return s
}

func (s *FedImagePullSecret) SetNamespace(v string) *FedImagePullSecret {
	s.Namespace = &v
	return s
}

func (s *FedImagePullSecret) SetOverrides(v *FedImagePullSecretOverrideList) *FedImagePullSecret {
	s.Overrides = v
	return s
}

func (s *FedImagePullSecret) SetWorkspaceGroupName(v string) *FedImagePullSecret {
	s.WorkspaceGroupName = &v
	return s
}

func (s *FedImagePullSecret) SetCells(v []*string) *FedImagePullSecret {
	s.Cells = v
	return s
}

// master clusters info of each zone
type MasterClustersOfZone struct {
	// master clusters of specific zone
	Clusters []*MasterCluster `json:"clusters,omitempty" xml:"clusters,omitempty" require:"true" type:"Repeated"`
	// zone name
	ZoneName *string `json:"zone_name,omitempty" xml:"zone_name,omitempty" require:"true"`
	// if the az has imported cluster
	HasImported *bool `json:"has_imported,omitempty" xml:"has_imported,omitempty" require:"true"`
}

func (s MasterClustersOfZone) String() string {
	return tea.Prettify(s)
}

func (s MasterClustersOfZone) GoString() string {
	return s.String()
}

func (s *MasterClustersOfZone) SetClusters(v []*MasterCluster) *MasterClustersOfZone {
	s.Clusters = v
	return s
}

func (s *MasterClustersOfZone) SetZoneName(v string) *MasterClustersOfZone {
	s.ZoneName = &v
	return s
}

func (s *MasterClustersOfZone) SetHasImported(v bool) *MasterClustersOfZone {
	s.HasImported = &v
	return s
}

// 容器应用服务基础信息。
type ContainerServiceBasicInfo struct {
	// 镜像构建id。
	AppBuild *string `json:"app_build,omitempty" xml:"app_build,omitempty"`
	// 应用id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// 应用名称。
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 创建时间。
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 当前最新镜像。
	CurrentImage *string `json:"current_image,omitempty" xml:"current_image,omitempty"`
	// 发布中的版本。
	DeployingRevision *string `json:"deploying_revision,omitempty" xml:"deploying_revision,omitempty"`
	// 发布部署状态。
	DeploymentStatus *string `json:"deployment_status,omitempty" xml:"deployment_status,omitempty"`
	// container service描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 当前应用服务草稿对应的版本号。
	DraftedRevision *string `json:"drafted_revision,omitempty" xml:"drafted_revision,omitempty"`
	// 草稿更新时间。
	DraftedTime *string `json:"drafted_time,omitempty" xml:"drafted_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 最近一次发布的版本。
	LastDeployedRevision *string `json:"last_deployed_revision,omitempty" xml:"last_deployed_revision,omitempty"`
	// 最近一次发布的结束时间。
	LastDeployEndTime *string `json:"last_deploy_end_time,omitempty" xml:"last_deploy_end_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 最近一次关联的发布单。
	LastDeployPlanId *string `json:"last_deploy_plan_id,omitempty" xml:"last_deploy_plan_id,omitempty"`
	// 最近一次发布的开始时间。
	LastDeployStartTime *string `json:"last_deploy_start_time,omitempty" xml:"last_deploy_start_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 容器服务元数据状态。
	MetadataStatus *string `json:"metadata_status,omitempty" xml:"metadata_status,omitempty" require:"true"`
	// 创建时间。
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 容器应用服务名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 所属命名空间名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 负责人。
	Owner *string `json:"owner,omitempty" xml:"owner,omitempty" require:"true"`
	// 容器服务的Pod列表。
	PodList []*PodInfo `json:"pod_list,omitempty" xml:"pod_list,omitempty" require:"true" type:"Repeated"`
	// 更新中pod数量
	ProcessingCount *string `json:"processing_count,omitempty" xml:"processing_count,omitempty"`
	// replicas数量
	Replicas *string `json:"replicas,omitempty" xml:"replicas,omitempty" require:"true"`
	// runding pod数量
	RunningCount *string `json:"running_count,omitempty" xml:"running_count,omitempty"`
	// 运行时版本。
	RuntimeRevision *string `json:"runtime_revision,omitempty" xml:"runtime_revision,omitempty"`
	// 所属工作空间组名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 容器服务Service列表。
	ServiceList []*LoadBalancerService `json:"service_list,omitempty" xml:"service_list,omitempty" type:"Repeated"`
}

func (s ContainerServiceBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ContainerServiceBasicInfo) GoString() string {
	return s.String()
}

func (s *ContainerServiceBasicInfo) SetAppBuild(v string) *ContainerServiceBasicInfo {
	s.AppBuild = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetAppId(v string) *ContainerServiceBasicInfo {
	s.AppId = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetAppName(v string) *ContainerServiceBasicInfo {
	s.AppName = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetCreatedTime(v string) *ContainerServiceBasicInfo {
	s.CreatedTime = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetCurrentImage(v string) *ContainerServiceBasicInfo {
	s.CurrentImage = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetDeployingRevision(v string) *ContainerServiceBasicInfo {
	s.DeployingRevision = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetDeploymentStatus(v string) *ContainerServiceBasicInfo {
	s.DeploymentStatus = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetDescription(v string) *ContainerServiceBasicInfo {
	s.Description = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetDraftedRevision(v string) *ContainerServiceBasicInfo {
	s.DraftedRevision = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetDraftedTime(v string) *ContainerServiceBasicInfo {
	s.DraftedTime = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetLastDeployedRevision(v string) *ContainerServiceBasicInfo {
	s.LastDeployedRevision = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetLastDeployEndTime(v string) *ContainerServiceBasicInfo {
	s.LastDeployEndTime = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetLastDeployPlanId(v string) *ContainerServiceBasicInfo {
	s.LastDeployPlanId = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetLastDeployStartTime(v string) *ContainerServiceBasicInfo {
	s.LastDeployStartTime = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetMetadataStatus(v string) *ContainerServiceBasicInfo {
	s.MetadataStatus = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetModifiedTime(v string) *ContainerServiceBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetName(v string) *ContainerServiceBasicInfo {
	s.Name = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetNamespace(v string) *ContainerServiceBasicInfo {
	s.Namespace = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetOwner(v string) *ContainerServiceBasicInfo {
	s.Owner = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetPodList(v []*PodInfo) *ContainerServiceBasicInfo {
	s.PodList = v
	return s
}

func (s *ContainerServiceBasicInfo) SetProcessingCount(v string) *ContainerServiceBasicInfo {
	s.ProcessingCount = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetReplicas(v string) *ContainerServiceBasicInfo {
	s.Replicas = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetRunningCount(v string) *ContainerServiceBasicInfo {
	s.RunningCount = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetRuntimeRevision(v string) *ContainerServiceBasicInfo {
	s.RuntimeRevision = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetWorkspaceGroup(v string) *ContainerServiceBasicInfo {
	s.WorkspaceGroup = &v
	return s
}

func (s *ContainerServiceBasicInfo) SetServiceList(v []*LoadBalancerService) *ContainerServiceBasicInfo {
	s.ServiceList = v
	return s
}

// V1ReleasePlanSpec appService
type ReleasePlanSpecAppService struct {
	// 依赖的应用服务名字列表
	Dependencies []*string `json:"dependencies,omitempty" xml:"dependencies,omitempty" require:"true" type:"Repeated"`
	// 应用服务名字
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// container service revision
	Revision *string `json:"revision,omitempty" xml:"revision,omitempty" require:"true"`
}

func (s ReleasePlanSpecAppService) String() string {
	return tea.Prettify(s)
}

func (s ReleasePlanSpecAppService) GoString() string {
	return s.String()
}

func (s *ReleasePlanSpecAppService) SetDependencies(v []*string) *ReleasePlanSpecAppService {
	s.Dependencies = v
	return s
}

func (s *ReleasePlanSpecAppService) SetName(v string) *ReleasePlanSpecAppService {
	s.Name = &v
	return s
}

func (s *ReleasePlanSpecAppService) SetRevision(v string) *ReleasePlanSpecAppService {
	s.Revision = &v
	return s
}

// 应用发布进度
type AppDeployProgress struct {
	// 应用发布所需要组件列表
	ComponentList []*string `json:"component_list,omitempty" xml:"component_list,omitempty" require:"true" type:"Repeated"`
	// 应用发布分组列表
	ExecuteGroups []*AppDeployGroup `json:"execute_groups,omitempty" xml:"execute_groups,omitempty" require:"true" type:"Repeated"`
	// 结束时间
	FinishTime *string `json:"finish_time,omitempty" xml:"finish_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 应用id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 当前应用是否是一个回滚的应用
	IsRollBack *bool `json:"is_roll_back,omitempty" xml:"is_roll_back,omitempty" require:"true"`
	// 发布进度pod状态统计数据
	PodStateSummary *AppDeployPodStateSummary `json:"pod_state_summary,omitempty" xml:"pod_state_summary,omitempty" require:"true"`
	// 后置任务列表
	PostTasks []*AppDeployTask `json:"post_tasks,omitempty" xml:"post_tasks,omitempty" require:"true" type:"Repeated"`
	// 前置任务列表
	PreTasks []*AppDeployTask `json:"pre_tasks,omitempty" xml:"pre_tasks,omitempty" require:"true" type:"Repeated"`
	// 当前服务关联的一个回滚服务的id，如果该值不为空则表示当前服务被回滚过
	RollBackServiceId *string `json:"roll_back_service_id,omitempty" xml:"roll_back_service_id,omitempty"`
	// 开始时间
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 当前发布状态
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// 容器服务命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
}

func (s AppDeployProgress) String() string {
	return tea.Prettify(s)
}

func (s AppDeployProgress) GoString() string {
	return s.String()
}

func (s *AppDeployProgress) SetComponentList(v []*string) *AppDeployProgress {
	s.ComponentList = v
	return s
}

func (s *AppDeployProgress) SetExecuteGroups(v []*AppDeployGroup) *AppDeployProgress {
	s.ExecuteGroups = v
	return s
}

func (s *AppDeployProgress) SetFinishTime(v string) *AppDeployProgress {
	s.FinishTime = &v
	return s
}

func (s *AppDeployProgress) SetId(v string) *AppDeployProgress {
	s.Id = &v
	return s
}

func (s *AppDeployProgress) SetIsRollBack(v bool) *AppDeployProgress {
	s.IsRollBack = &v
	return s
}

func (s *AppDeployProgress) SetPodStateSummary(v *AppDeployPodStateSummary) *AppDeployProgress {
	s.PodStateSummary = v
	return s
}

func (s *AppDeployProgress) SetPostTasks(v []*AppDeployTask) *AppDeployProgress {
	s.PostTasks = v
	return s
}

func (s *AppDeployProgress) SetPreTasks(v []*AppDeployTask) *AppDeployProgress {
	s.PreTasks = v
	return s
}

func (s *AppDeployProgress) SetRollBackServiceId(v string) *AppDeployProgress {
	s.RollBackServiceId = &v
	return s
}

func (s *AppDeployProgress) SetStartTime(v string) *AppDeployProgress {
	s.StartTime = &v
	return s
}

func (s *AppDeployProgress) SetState(v string) *AppDeployProgress {
	s.State = &v
	return s
}

func (s *AppDeployProgress) SetNamespace(v string) *AppDeployProgress {
	s.Namespace = &v
	return s
}

// 应用摘要信息
type AppSimpleInfo struct {
	// 应用id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// 应用分组名字
	AppInstanceGroupName *string `json:"app_instance_group_name,omitempty" xml:"app_instance_group_name,omitempty" require:"true"`
	// 应用名字
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 执行者
	Executor *string `json:"executor,omitempty" xml:"executor,omitempty" require:"true"`
	// 结束时间
	FinishTime *string `json:"finish_time,omitempty" xml:"finish_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 分组个数
	GroupNum *int64 `json:"group_num,omitempty" xml:"group_num,omitempty" require:"true"`
	// 分组策略
	GroupStrategy *string `json:"group_strategy,omitempty" xml:"group_strategy,omitempty" require:"true"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	// 操作类型
	OperationType *string `json:"operation_type,omitempty" xml:"operation_type,omitempty" require:"true"`
	// 发布版本号
	Revision *string `json:"revision,omitempty" xml:"revision,omitempty" require:"true"`
	// 回滚revision
	RollbackRevision *string `json:"rollback_revision,omitempty" xml:"rollback_revision,omitempty"`
	// 是否可单独执行
	StandaloneExecutable *bool `json:"standalone_executable,omitempty" xml:"standalone_executable,omitempty" require:"true"`
	// 开始时间
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 应用状态
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// Pod 数量
	PodCount *int64 `json:"pod_count,omitempty" xml:"pod_count,omitempty"`
	// 回滚原因
	RollbackReason *string `json:"rollback_reason,omitempty" xml:"rollback_reason,omitempty"`
	// 依赖的应用服务名
	DependContainerServiceNames []*string `json:"depend_container_service_names,omitempty" xml:"depend_container_service_names,omitempty" type:"Repeated"`
}

func (s AppSimpleInfo) String() string {
	return tea.Prettify(s)
}

func (s AppSimpleInfo) GoString() string {
	return s.String()
}

func (s *AppSimpleInfo) SetAppId(v string) *AppSimpleInfo {
	s.AppId = &v
	return s
}

func (s *AppSimpleInfo) SetAppInstanceGroupName(v string) *AppSimpleInfo {
	s.AppInstanceGroupName = &v
	return s
}

func (s *AppSimpleInfo) SetAppName(v string) *AppSimpleInfo {
	s.AppName = &v
	return s
}

func (s *AppSimpleInfo) SetExecutor(v string) *AppSimpleInfo {
	s.Executor = &v
	return s
}

func (s *AppSimpleInfo) SetFinishTime(v string) *AppSimpleInfo {
	s.FinishTime = &v
	return s
}

func (s *AppSimpleInfo) SetGroupNum(v int64) *AppSimpleInfo {
	s.GroupNum = &v
	return s
}

func (s *AppSimpleInfo) SetGroupStrategy(v string) *AppSimpleInfo {
	s.GroupStrategy = &v
	return s
}

func (s *AppSimpleInfo) SetId(v string) *AppSimpleInfo {
	s.Id = &v
	return s
}

func (s *AppSimpleInfo) SetNamespace(v string) *AppSimpleInfo {
	s.Namespace = &v
	return s
}

func (s *AppSimpleInfo) SetOperationType(v string) *AppSimpleInfo {
	s.OperationType = &v
	return s
}

func (s *AppSimpleInfo) SetRevision(v string) *AppSimpleInfo {
	s.Revision = &v
	return s
}

func (s *AppSimpleInfo) SetRollbackRevision(v string) *AppSimpleInfo {
	s.RollbackRevision = &v
	return s
}

func (s *AppSimpleInfo) SetStandaloneExecutable(v bool) *AppSimpleInfo {
	s.StandaloneExecutable = &v
	return s
}

func (s *AppSimpleInfo) SetStartTime(v string) *AppSimpleInfo {
	s.StartTime = &v
	return s
}

func (s *AppSimpleInfo) SetState(v string) *AppSimpleInfo {
	s.State = &v
	return s
}

func (s *AppSimpleInfo) SetPodCount(v int64) *AppSimpleInfo {
	s.PodCount = &v
	return s
}

func (s *AppSimpleInfo) SetRollbackReason(v string) *AppSimpleInfo {
	s.RollbackReason = &v
	return s
}

func (s *AppSimpleInfo) SetDependContainerServiceNames(v []*string) *AppSimpleInfo {
	s.DependContainerServiceNames = v
	return s
}

// 弹性子规则
type ElasticSubRuleView struct {
	// 弹性子规则ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 所属APP
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 关联的弹性规则ID
	ElasticRuleId *int64 `json:"elastic_rule_id,omitempty" xml:"elastic_rule_id,omitempty" require:"true"`
	// 父节点
	ParentId *int64 `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// 值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// 是否使用默认eid，默认 false
	UseDefaultEid *bool `json:"use_default_eid,omitempty" xml:"use_default_eid,omitempty"`
	// 状态，有效值：VALID（线上生效），PRESS（仅压测生效），INVALID（无效状态）
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 规则类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 场景ID
	SceneId *int64 `json:"scene_id,omitempty" xml:"scene_id,omitempty" require:"true"`
}

func (s ElasticSubRuleView) String() string {
	return tea.Prettify(s)
}

func (s ElasticSubRuleView) GoString() string {
	return s.String()
}

func (s *ElasticSubRuleView) SetId(v int64) *ElasticSubRuleView {
	s.Id = &v
	return s
}

func (s *ElasticSubRuleView) SetAppName(v string) *ElasticSubRuleView {
	s.AppName = &v
	return s
}

func (s *ElasticSubRuleView) SetElasticRuleId(v int64) *ElasticSubRuleView {
	s.ElasticRuleId = &v
	return s
}

func (s *ElasticSubRuleView) SetParentId(v int64) *ElasticSubRuleView {
	s.ParentId = &v
	return s
}

func (s *ElasticSubRuleView) SetValue(v string) *ElasticSubRuleView {
	s.Value = &v
	return s
}

func (s *ElasticSubRuleView) SetUseDefaultEid(v bool) *ElasticSubRuleView {
	s.UseDefaultEid = &v
	return s
}

func (s *ElasticSubRuleView) SetStatus(v string) *ElasticSubRuleView {
	s.Status = &v
	return s
}

func (s *ElasticSubRuleView) SetType(v string) *ElasticSubRuleView {
	s.Type = &v
	return s
}

func (s *ElasticSubRuleView) SetSceneId(v int64) *ElasticSubRuleView {
	s.SceneId = &v
	return s
}

// cell info
type CellInfo struct {
	// cell display name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
}

func (s CellInfo) String() string {
	return tea.Prettify(s)
}

func (s CellInfo) GoString() string {
	return s.String()
}

func (s *CellInfo) SetDisplayName(v string) *CellInfo {
	s.DisplayName = &v
	return s
}

// cloudconfig
type CloudConfigEntity struct {
	// 配置详情
	CloudConfig *string `json:"cloud_config,omitempty" xml:"cloud_config,omitempty" require:"true"`
	// 操作时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 操作类型
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// admin
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
}

func (s CloudConfigEntity) String() string {
	return tea.Prettify(s)
}

func (s CloudConfigEntity) GoString() string {
	return s.String()
}

func (s *CloudConfigEntity) SetCloudConfig(v string) *CloudConfigEntity {
	s.CloudConfig = &v
	return s
}

func (s *CloudConfigEntity) SetGmtCreate(v string) *CloudConfigEntity {
	s.GmtCreate = &v
	return s
}

func (s *CloudConfigEntity) SetOperation(v string) *CloudConfigEntity {
	s.Operation = &v
	return s
}

func (s *CloudConfigEntity) SetOperator(v string) *CloudConfigEntity {
	s.Operator = &v
	return s
}

// 统一接入实例监听配置（http/https）
type UnifiedAccessInstanceListener struct {
	// CA证书ID。 若既上传CA证书又上传服务器证书，即采用双向认证。 若用户只上传服务器证书，即为单向认证。
	CaCertificateId *string `json:"ca_certificate_id,omitempty" xml:"ca_certificate_id,omitempty"`
	// 统一接入实例监听端口。 取值：1-65535。
	ListenerPort *int64 `json:"listener_port,omitempty" xml:"listener_port,omitempty" require:"true"`
	// 协议类型，目前支持http和https两种
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty" require:"true"`
	// 是否使用websocket连接方式
	WebsocketConnect *bool `json:"websocket_connect,omitempty" xml:"websocket_connect,omitempty" require:"true"`
}

func (s UnifiedAccessInstanceListener) String() string {
	return tea.Prettify(s)
}

func (s UnifiedAccessInstanceListener) GoString() string {
	return s.String()
}

func (s *UnifiedAccessInstanceListener) SetCaCertificateId(v string) *UnifiedAccessInstanceListener {
	s.CaCertificateId = &v
	return s
}

func (s *UnifiedAccessInstanceListener) SetListenerPort(v int64) *UnifiedAccessInstanceListener {
	s.ListenerPort = &v
	return s
}

func (s *UnifiedAccessInstanceListener) SetProtocol(v string) *UnifiedAccessInstanceListener {
	s.Protocol = &v
	return s
}

func (s *UnifiedAccessInstanceListener) SetWebsocketConnect(v bool) *UnifiedAccessInstanceListener {
	s.WebsocketConnect = &v
	return s
}

// fed configmap override list
type FedSecretOverrideList struct {
	// fed configmap override list
	List []*FedSecretOverride `json:"list,omitempty" xml:"list,omitempty" require:"true" type:"Repeated"`
}

func (s FedSecretOverrideList) String() string {
	return tea.Prettify(s)
}

func (s FedSecretOverrideList) GoString() string {
	return s.String()
}

func (s *FedSecretOverrideList) SetList(v []*FedSecretOverride) *FedSecretOverrideList {
	s.List = v
	return s
}

// 负载均衡实例。
type LoadBalancerInstance struct {
	// 负责均衡iaas id。
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty" require:"true"`
	// 监听器。
	Listeners []*LoadBalancerListener `json:"listeners,omitempty" xml:"listeners,omitempty" require:"true" type:"Repeated"`
	// 负载均衡名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 负责均衡PAAS id。
	PaasId *string `json:"paas_id,omitempty" xml:"paas_id,omitempty"`
	// 负责均衡类型。
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 负载均衡vip地址。
	VipAddresses []*string `json:"vip_addresses,omitempty" xml:"vip_addresses,omitempty" type:"Repeated"`
	// 统一接入域名。
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
}

func (s LoadBalancerInstance) String() string {
	return tea.Prettify(s)
}

func (s LoadBalancerInstance) GoString() string {
	return s.String()
}

func (s *LoadBalancerInstance) SetIaasId(v string) *LoadBalancerInstance {
	s.IaasId = &v
	return s
}

func (s *LoadBalancerInstance) SetListeners(v []*LoadBalancerListener) *LoadBalancerInstance {
	s.Listeners = v
	return s
}

func (s *LoadBalancerInstance) SetName(v string) *LoadBalancerInstance {
	s.Name = &v
	return s
}

func (s *LoadBalancerInstance) SetPaasId(v string) *LoadBalancerInstance {
	s.PaasId = &v
	return s
}

func (s *LoadBalancerInstance) SetType(v string) *LoadBalancerInstance {
	s.Type = &v
	return s
}

func (s *LoadBalancerInstance) SetVipAddresses(v []*string) *LoadBalancerInstance {
	s.VipAddresses = v
	return s
}

func (s *LoadBalancerInstance) SetDomain(v string) *LoadBalancerInstance {
	s.Domain = &v
	return s
}

// 可用区
type Zone struct {
	// 数据中心名
	DataCenter *string `json:"data_center,omitempty" xml:"data_center,omitempty" require:"true"`
	// 可用区展示名
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// 可用区名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 所属地域
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 可用区id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty" require:"true"`
	// 地域id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
}

func (s Zone) String() string {
	return tea.Prettify(s)
}

func (s Zone) GoString() string {
	return s.String()
}

func (s *Zone) SetDataCenter(v string) *Zone {
	s.DataCenter = &v
	return s
}

func (s *Zone) SetDisplayName(v string) *Zone {
	s.DisplayName = &v
	return s
}

func (s *Zone) SetName(v string) *Zone {
	s.Name = &v
	return s
}

func (s *Zone) SetRegion(v string) *Zone {
	s.Region = &v
	return s
}

func (s *Zone) SetZoneId(v string) *Zone {
	s.ZoneId = &v
	return s
}

func (s *Zone) SetRegionId(v string) *Zone {
	s.RegionId = &v
	return s
}

// namespace detail
type NamespaceDetail struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// labels
	Labels []*Label `json:"labels,omitempty" xml:"labels,omitempty" type:"Repeated"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// created time
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s NamespaceDetail) String() string {
	return tea.Prettify(s)
}

func (s NamespaceDetail) GoString() string {
	return s.String()
}

func (s *NamespaceDetail) SetName(v string) *NamespaceDetail {
	s.Name = &v
	return s
}

func (s *NamespaceDetail) SetLabels(v []*Label) *NamespaceDetail {
	s.Labels = v
	return s
}

func (s *NamespaceDetail) SetStatus(v string) *NamespaceDetail {
	s.Status = &v
	return s
}

func (s *NamespaceDetail) SetCreatedTime(v string) *NamespaceDetail {
	s.CreatedTime = &v
	return s
}

// 发布(运维)单状态汇总数据
type LdcPlanStateCount struct {
	// 发布单状态类型
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// 数量
	Count *int64 `json:"count,omitempty" xml:"count,omitempty" require:"true"`
}

func (s LdcPlanStateCount) String() string {
	return tea.Prettify(s)
}

func (s LdcPlanStateCount) GoString() string {
	return s.String()
}

func (s *LdcPlanStateCount) SetState(v string) *LdcPlanStateCount {
	s.State = &v
	return s
}

func (s *LdcPlanStateCount) SetCount(v int64) *LdcPlanStateCount {
	s.Count = &v
	return s
}

// network info
type NetworkInfo struct {
	// networt description
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
}

func (s NetworkInfo) String() string {
	return tea.Prettify(s)
}

func (s NetworkInfo) GoString() string {
	return s.String()
}

func (s *NetworkInfo) SetDescription(v string) *NetworkInfo {
	s.Description = &v
	return s
}

// 联邦无状态工作负载
type FederatedDeployment struct {
	// Standard object metadata.
	//
	Metadata *ObjectMeta `json:"metadata,omitempty" xml:"metadata,omitempty" require:"true"`
	// Federated Deployment Override
	Overrides []*FedDeploymentClusterOverride `json:"overrides,omitempty" xml:"overrides,omitempty" require:"true" type:"Repeated"`
	// Federated Deployment Template
	Template *Deployment `json:"template,omitempty" xml:"template,omitempty" require:"true"`
	// 联邦无状态工作负载状态
	Status *FederatedDeploymentStatus `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s FederatedDeployment) String() string {
	return tea.Prettify(s)
}

func (s FederatedDeployment) GoString() string {
	return s.String()
}

func (s *FederatedDeployment) SetMetadata(v *ObjectMeta) *FederatedDeployment {
	s.Metadata = v
	return s
}

func (s *FederatedDeployment) SetOverrides(v []*FedDeploymentClusterOverride) *FederatedDeployment {
	s.Overrides = v
	return s
}

func (s *FederatedDeployment) SetTemplate(v *Deployment) *FederatedDeployment {
	s.Template = v
	return s
}

func (s *FederatedDeployment) SetStatus(v *FederatedDeploymentStatus) *FederatedDeployment {
	s.Status = v
	return s
}

// AKS集群cluster
type Cluster struct {
	// 集群创建时间
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// env
	Env *string `json:"env,omitempty" xml:"env,omitempty" require:"true"`
	// 集群是否健康
	IsHealthy *bool `json:"is_healthy,omitempty" xml:"is_healthy,omitempty" require:"true"`
	// 集群名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// region name
	//
	RegionName *string `json:"region_name,omitempty" xml:"region_name,omitempty" require:"true"`
	// 独占
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 集群版本
	Version *string `json:"version,omitempty" xml:"version,omitempty" require:"true"`
	// 环境名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// 机房名称
	ZoneName *string `json:"zone_name,omitempty" xml:"zone_name,omitempty" require:"true"`
}

func (s Cluster) String() string {
	return tea.Prettify(s)
}

func (s Cluster) GoString() string {
	return s.String()
}

func (s *Cluster) SetCreatedTime(v string) *Cluster {
	s.CreatedTime = &v
	return s
}

func (s *Cluster) SetEnv(v string) *Cluster {
	s.Env = &v
	return s
}

func (s *Cluster) SetIsHealthy(v bool) *Cluster {
	s.IsHealthy = &v
	return s
}

func (s *Cluster) SetName(v string) *Cluster {
	s.Name = &v
	return s
}

func (s *Cluster) SetRegionName(v string) *Cluster {
	s.RegionName = &v
	return s
}

func (s *Cluster) SetType(v string) *Cluster {
	s.Type = &v
	return s
}

func (s *Cluster) SetVersion(v string) *Cluster {
	s.Version = &v
	return s
}

func (s *Cluster) SetWorkspace(v string) *Cluster {
	s.Workspace = &v
	return s
}

func (s *Cluster) SetZoneName(v string) *Cluster {
	s.ZoneName = &v
	return s
}

// container_services list
type SontainerServicesList struct {
	// ContainerServiceDeployment
	List []*ContainerServiceDeployment `json:"list,omitempty" xml:"list,omitempty" require:"true" type:"Repeated"`
}

func (s SontainerServicesList) String() string {
	return tea.Prettify(s)
}

func (s SontainerServicesList) GoString() string {
	return s.String()
}

func (s *SontainerServicesList) SetList(v []*ContainerServiceDeployment) *SontainerServicesList {
	s.List = v
	return s
}

// sidecar元数据
type SideCar struct {
	// region id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// sidecar description
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// sidecar生效范围：workspace、workspace_group、region
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty" require:"true"`
	// sidecar_name
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty" require:"true"`
	// workspace_group_id
	WorkspaceGroupId *string `json:"workspace_group_id,omitempty" xml:"workspace_group_id,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s SideCar) String() string {
	return tea.Prettify(s)
}

func (s SideCar) GoString() string {
	return s.String()
}

func (s *SideCar) SetRegionId(v string) *SideCar {
	s.RegionId = &v
	return s
}

func (s *SideCar) SetDescription(v string) *SideCar {
	s.Description = &v
	return s
}

func (s *SideCar) SetScope(v string) *SideCar {
	s.Scope = &v
	return s
}

func (s *SideCar) SetSidecarName(v string) *SideCar {
	s.SidecarName = &v
	return s
}

func (s *SideCar) SetWorkspaceGroupId(v string) *SideCar {
	s.WorkspaceGroupId = &v
	return s
}

func (s *SideCar) SetWorkspaceId(v string) *SideCar {
	s.WorkspaceId = &v
	return s
}

// cluster info
type ClusterInfo struct {
	// created time
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// env
	Env *string `json:"env,omitempty" xml:"env,omitempty"`
	// cluster is healthy or not
	IsHealthy *bool `json:"is_healthy,omitempty" xml:"is_healthy,omitempty" require:"true"`
	// cluster name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// cluster overview info
	OverviewInfo *ClusterOverviewInfo `json:"overview_info,omitempty" xml:"overview_info,omitempty" require:"true"`
	// region name
	RegionName *string `json:"region_name,omitempty" xml:"region_name,omitempty"`
	// 独占 or 共享
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// version
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
	// zone name
	ZoneName *string `json:"zone_name,omitempty" xml:"zone_name,omitempty"`
	// workspace名称[如果存在]。
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s ClusterInfo) GoString() string {
	return s.String()
}

func (s *ClusterInfo) SetCreatedTime(v string) *ClusterInfo {
	s.CreatedTime = &v
	return s
}

func (s *ClusterInfo) SetEnv(v string) *ClusterInfo {
	s.Env = &v
	return s
}

func (s *ClusterInfo) SetIsHealthy(v bool) *ClusterInfo {
	s.IsHealthy = &v
	return s
}

func (s *ClusterInfo) SetName(v string) *ClusterInfo {
	s.Name = &v
	return s
}

func (s *ClusterInfo) SetOverviewInfo(v *ClusterOverviewInfo) *ClusterInfo {
	s.OverviewInfo = v
	return s
}

func (s *ClusterInfo) SetRegionName(v string) *ClusterInfo {
	s.RegionName = &v
	return s
}

func (s *ClusterInfo) SetType(v string) *ClusterInfo {
	s.Type = &v
	return s
}

func (s *ClusterInfo) SetVersion(v string) *ClusterInfo {
	s.Version = &v
	return s
}

func (s *ClusterInfo) SetZoneName(v string) *ClusterInfo {
	s.ZoneName = &v
	return s
}

func (s *ClusterInfo) SetWorkspace(v string) *ClusterInfo {
	s.Workspace = &v
	return s
}

// cell weight info list.
type CellWeightInfoList struct {
	// weight info list.
	Data []*CellWeightInfo `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s CellWeightInfoList) String() string {
	return tea.Prettify(s)
}

func (s CellWeightInfoList) GoString() string {
	return s.String()
}

func (s *CellWeightInfoList) SetData(v []*CellWeightInfo) *CellWeightInfoList {
	s.Data = v
	return s
}

// 云原生技术栈版本
type NativeTechStackVersion struct {
	// 版本描述
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 用户扩展的自定义Dockerfile指令
	ExtendCommands []*string `json:"extend_commands,omitempty" xml:"extend_commands,omitempty" require:"true" type:"Repeated"`
	// 版本扩展信息，e.g 公共环境变量
	ExtendProperties *string `json:"extend_properties,omitempty" xml:"extend_properties,omitempty" require:"true"`
	// 基础镜像存放地址
	FromImage *string `json:"from_image,omitempty" xml:"from_image,omitempty" require:"true"`
	// 唯一标识ID
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 可见范围：全局可见|租户内可见
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty" require:"true"`
	// 所属技术栈
	TechStack *string `json:"tech_stack,omitempty" xml:"tech_stack,omitempty" require:"true"`
	// 所属技术栈标识id
	TechStackId *string `json:"tech_stack_id,omitempty" xml:"tech_stack_id,omitempty" require:"true"`
	// 技术栈版本
	Version *string `json:"version,omitempty" xml:"version,omitempty" require:"true"`
	// 创建时间（UTC）
	UtcCreated *string `json:"utc_created,omitempty" xml:"utc_created,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 最近修改时间（UTC）
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s NativeTechStackVersion) String() string {
	return tea.Prettify(s)
}

func (s NativeTechStackVersion) GoString() string {
	return s.String()
}

func (s *NativeTechStackVersion) SetDescription(v string) *NativeTechStackVersion {
	s.Description = &v
	return s
}

func (s *NativeTechStackVersion) SetExtendCommands(v []*string) *NativeTechStackVersion {
	s.ExtendCommands = v
	return s
}

func (s *NativeTechStackVersion) SetExtendProperties(v string) *NativeTechStackVersion {
	s.ExtendProperties = &v
	return s
}

func (s *NativeTechStackVersion) SetFromImage(v string) *NativeTechStackVersion {
	s.FromImage = &v
	return s
}

func (s *NativeTechStackVersion) SetId(v string) *NativeTechStackVersion {
	s.Id = &v
	return s
}

func (s *NativeTechStackVersion) SetScope(v string) *NativeTechStackVersion {
	s.Scope = &v
	return s
}

func (s *NativeTechStackVersion) SetTechStack(v string) *NativeTechStackVersion {
	s.TechStack = &v
	return s
}

func (s *NativeTechStackVersion) SetTechStackId(v string) *NativeTechStackVersion {
	s.TechStackId = &v
	return s
}

func (s *NativeTechStackVersion) SetVersion(v string) *NativeTechStackVersion {
	s.Version = &v
	return s
}

func (s *NativeTechStackVersion) SetUtcCreated(v string) *NativeTechStackVersion {
	s.UtcCreated = &v
	return s
}

func (s *NativeTechStackVersion) SetUtcModified(v string) *NativeTechStackVersion {
	s.UtcModified = &v
	return s
}

// 容器服务service信息。
type NativeServiceView struct {
	// 服务名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 服务类型。
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 负载均衡实例id。
	LoadBalancerId *string `json:"load_balancer_id,omitempty" xml:"load_balancer_id,omitempty"`
	// VIP地址信息。
	VipAddresses []*string `json:"vip_addresses,omitempty" xml:"vip_addresses,omitempty" type:"Repeated"`
	// VIP地址信息类型。
	VipAddressType *string `json:"vip_address_type,omitempty" xml:"vip_address_type,omitempty"`
	// ClusterIP信息。
	ClusterIp *string `json:"cluster_ip,omitempty" xml:"cluster_ip,omitempty"`
	// 创建时间。
	CreatedTimestamp *string `json:"created_timestamp,omitempty" xml:"created_timestamp,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 修改时间。
	ModifiedTimestamp *string `json:"modified_timestamp,omitempty" xml:"modified_timestamp,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s NativeServiceView) String() string {
	return tea.Prettify(s)
}

func (s NativeServiceView) GoString() string {
	return s.String()
}

func (s *NativeServiceView) SetName(v string) *NativeServiceView {
	s.Name = &v
	return s
}

func (s *NativeServiceView) SetType(v string) *NativeServiceView {
	s.Type = &v
	return s
}

func (s *NativeServiceView) SetLoadBalancerId(v string) *NativeServiceView {
	s.LoadBalancerId = &v
	return s
}

func (s *NativeServiceView) SetVipAddresses(v []*string) *NativeServiceView {
	s.VipAddresses = v
	return s
}

func (s *NativeServiceView) SetVipAddressType(v string) *NativeServiceView {
	s.VipAddressType = &v
	return s
}

func (s *NativeServiceView) SetClusterIp(v string) *NativeServiceView {
	s.ClusterIp = &v
	return s
}

func (s *NativeServiceView) SetCreatedTimestamp(v string) *NativeServiceView {
	s.CreatedTimestamp = &v
	return s
}

func (s *NativeServiceView) SetModifiedTimestamp(v string) *NativeServiceView {
	s.ModifiedTimestamp = &v
	return s
}

// 容器应用服务版本信息。
type ContainerServiceRevision struct {
	// 应用信息。
	AppInfo *AppInfo `json:"app_info,omitempty" xml:"app_info,omitempty" require:"true"`
	// 容器服务配置。
	ContainerServiceConfig *ContainerServiceConfig `json:"container_service_config,omitempty" xml:"container_service_config,omitempty" require:"true"`
	// 容器服务服务名称。
	ContainerServiceName *string `json:"container_service_name,omitempty" xml:"container_service_name,omitempty" require:"true"`
	// 容器服务发布信息
	ContainerServiceReleaseInfo *ContainerServiceReleaseInfo `json:"container_service_release_info,omitempty" xml:"container_service_release_info,omitempty"`
	// 创建时间。
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 发布状态。
	DeployStatus *string `json:"deploy_status,omitempty" xml:"deploy_status,omitempty"`
	// container service description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 关联的最近一次发布单。
	LastPlanId *string `json:"last_plan_id,omitempty" xml:"last_plan_id,omitempty"`
	// 元数据状态。
	MetaStatus *string `json:"meta_status,omitempty" xml:"meta_status,omitempty"`
	// 更新时间。
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 所属命名空间名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 版本提交人。
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 版本备注。
	Remarks *string `json:"remarks,omitempty" xml:"remarks,omitempty"`
	// 版本号。
	Revision *string `json:"revision,omitempty" xml:"revision,omitempty" require:"true"`
}

func (s ContainerServiceRevision) String() string {
	return tea.Prettify(s)
}

func (s ContainerServiceRevision) GoString() string {
	return s.String()
}

func (s *ContainerServiceRevision) SetAppInfo(v *AppInfo) *ContainerServiceRevision {
	s.AppInfo = v
	return s
}

func (s *ContainerServiceRevision) SetContainerServiceConfig(v *ContainerServiceConfig) *ContainerServiceRevision {
	s.ContainerServiceConfig = v
	return s
}

func (s *ContainerServiceRevision) SetContainerServiceName(v string) *ContainerServiceRevision {
	s.ContainerServiceName = &v
	return s
}

func (s *ContainerServiceRevision) SetContainerServiceReleaseInfo(v *ContainerServiceReleaseInfo) *ContainerServiceRevision {
	s.ContainerServiceReleaseInfo = v
	return s
}

func (s *ContainerServiceRevision) SetCreatedTime(v string) *ContainerServiceRevision {
	s.CreatedTime = &v
	return s
}

func (s *ContainerServiceRevision) SetDeployStatus(v string) *ContainerServiceRevision {
	s.DeployStatus = &v
	return s
}

func (s *ContainerServiceRevision) SetDescription(v string) *ContainerServiceRevision {
	s.Description = &v
	return s
}

func (s *ContainerServiceRevision) SetLastPlanId(v string) *ContainerServiceRevision {
	s.LastPlanId = &v
	return s
}

func (s *ContainerServiceRevision) SetMetaStatus(v string) *ContainerServiceRevision {
	s.MetaStatus = &v
	return s
}

func (s *ContainerServiceRevision) SetModifiedTime(v string) *ContainerServiceRevision {
	s.ModifiedTime = &v
	return s
}

func (s *ContainerServiceRevision) SetNamespace(v string) *ContainerServiceRevision {
	s.Namespace = &v
	return s
}

func (s *ContainerServiceRevision) SetOperator(v string) *ContainerServiceRevision {
	s.Operator = &v
	return s
}

func (s *ContainerServiceRevision) SetRemarks(v string) *ContainerServiceRevision {
	s.Remarks = &v
	return s
}

func (s *ContainerServiceRevision) SetRevision(v string) *ContainerServiceRevision {
	s.Revision = &v
	return s
}

// ContainerServiceOperationList
type ContainerServiceOperationList struct {
	// ContainerServiceOperationList
	List []*ContainerServiceOperation `json:"list,omitempty" xml:"list,omitempty" require:"true" type:"Repeated"`
}

func (s ContainerServiceOperationList) String() string {
	return tea.Prettify(s)
}

func (s ContainerServiceOperationList) GoString() string {
	return s.String()
}

func (s *ContainerServiceOperationList) SetList(v []*ContainerServiceOperation) *ContainerServiceOperationList {
	s.List = v
	return s
}

// Linke解决方案返回结果数据
type LinkeReleaseData struct {
	// Linke release ID
	ReleaseId *string `json:"release_id,omitempty" xml:"release_id,omitempty" require:"true"`
}

func (s LinkeReleaseData) String() string {
	return tea.Prettify(s)
}

func (s LinkeReleaseData) GoString() string {
	return s.String()
}

func (s *LinkeReleaseData) SetReleaseId(v string) *LinkeReleaseData {
	s.ReleaseId = &v
	return s
}

// 系统url
type SystemURL struct {
	// 平台名称
	PlatformName *string `json:"platform_name,omitempty" xml:"platform_name,omitempty" require:"true"`
	// url
	Url *string `json:"url,omitempty" xml:"url,omitempty" require:"true"`
	// 上线问配置
	Context *string `json:"context,omitempty" xml:"context,omitempty"`
}

func (s SystemURL) String() string {
	return tea.Prettify(s)
}

func (s SystemURL) GoString() string {
	return s.String()
}

func (s *SystemURL) SetPlatformName(v string) *SystemURL {
	s.PlatformName = &v
	return s
}

func (s *SystemURL) SetUrl(v string) *SystemURL {
	s.Url = &v
	return s
}

func (s *SystemURL) SetContext(v string) *SystemURL {
	s.Context = &v
	return s
}

// MasterClusterInfoForWorkspaces
type MasterClusterInfoForWorkspaces struct {
	// master cluster info
	MasterClusterInfo *MasterCluster `json:"master_cluster_info,omitempty" xml:"master_cluster_info,omitempty" require:"true"`
	// workspace ids
	WorkspaceIds []*string `json:"workspace_ids,omitempty" xml:"workspace_ids,omitempty" require:"true" type:"Repeated"`
}

func (s MasterClusterInfoForWorkspaces) String() string {
	return tea.Prettify(s)
}

func (s MasterClusterInfoForWorkspaces) GoString() string {
	return s.String()
}

func (s *MasterClusterInfoForWorkspaces) SetMasterClusterInfo(v *MasterCluster) *MasterClusterInfoForWorkspaces {
	s.MasterClusterInfo = v
	return s
}

func (s *MasterClusterInfoForWorkspaces) SetWorkspaceIds(v []*string) *MasterClusterInfoForWorkspaces {
	s.WorkspaceIds = v
	return s
}

// Region info
type Region struct {
	// region id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// region name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// workspace list
	Workspaces []*Workspace `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s Region) String() string {
	return tea.Prettify(s)
}

func (s Region) GoString() string {
	return s.String()
}

func (s *Region) SetId(v string) *Region {
	s.Id = &v
	return s
}

func (s *Region) SetName(v string) *Region {
	s.Name = &v
	return s
}

func (s *Region) SetWorkspaces(v []*Workspace) *Region {
	s.Workspaces = v
	return s
}

// Pod Overview Info
type PodOverviewInfo struct {
	// pod number
	PodNumber *int64 `json:"pod_number,omitempty" xml:"pod_number,omitempty"`
	// unhealthy pod number
	UnhealthyPodNumber *int64 `json:"unhealthy_pod_number,omitempty" xml:"unhealthy_pod_number,omitempty"`
}

func (s PodOverviewInfo) String() string {
	return tea.Prettify(s)
}

func (s PodOverviewInfo) GoString() string {
	return s.String()
}

func (s *PodOverviewInfo) SetPodNumber(v int64) *PodOverviewInfo {
	s.PodNumber = &v
	return s
}

func (s *PodOverviewInfo) SetUnhealthyPodNumber(v int64) *PodOverviewInfo {
	s.UnhealthyPodNumber = &v
	return s
}

// 健康检查配置。
type HealthCheckConfigInfo struct {
	// 容器健康检查配置liveness probe。
	LivenessProbe *LivenessProbe `json:"liveness_probe,omitempty" xml:"liveness_probe,omitempty"`
	// 容器健康检查配置readiness probe。
	ReadinessProbe *ReadinessProbe `json:"readiness_probe,omitempty" xml:"readiness_probe,omitempty"`
}

func (s HealthCheckConfigInfo) String() string {
	return tea.Prettify(s)
}

func (s HealthCheckConfigInfo) GoString() string {
	return s.String()
}

func (s *HealthCheckConfigInfo) SetLivenessProbe(v *LivenessProbe) *HealthCheckConfigInfo {
	s.LivenessProbe = v
	return s
}

func (s *HealthCheckConfigInfo) SetReadinessProbe(v *ReadinessProbe) *HealthCheckConfigInfo {
	s.ReadinessProbe = v
	return s
}

// fed secret struct
//
type FedSecret struct {
	// fed secret annotations
	//
	Annotations []*Annotation `json:"annotations,omitempty" xml:"annotations,omitempty" type:"Repeated"`
	// FedSecret Cell Cluster Status
	CellStatus []*ClusteCellStatus `json:"cell_status,omitempty" xml:"cell_status,omitempty" require:"true" type:"Repeated"`
	// fed clusters
	//
	Clusters []*string `json:"clusters,omitempty" xml:"clusters,omitempty" require:"true" type:"Repeated"`
	// 创建时间
	CreateTimeStamp *string `json:"create_time_stamp,omitempty" xml:"create_time_stamp,omitempty" require:"true"`
	// fed secret data
	//
	Data []*SecretData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
	// fed secret labels
	//
	Labels []*Label `json:"labels,omitempty" xml:"labels,omitempty" type:"Repeated"`
	// fed secret name
	//
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// fed secret namespace
	//
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// fed secret override
	//
	Overrides []*FedSecretOverride `json:"overrides,omitempty" xml:"overrides,omitempty" require:"true" type:"Repeated"`
	// 原因描述
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
	// FedSecret同步状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// opaque
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s FedSecret) String() string {
	return tea.Prettify(s)
}

func (s FedSecret) GoString() string {
	return s.String()
}

func (s *FedSecret) SetAnnotations(v []*Annotation) *FedSecret {
	s.Annotations = v
	return s
}

func (s *FedSecret) SetCellStatus(v []*ClusteCellStatus) *FedSecret {
	s.CellStatus = v
	return s
}

func (s *FedSecret) SetClusters(v []*string) *FedSecret {
	s.Clusters = v
	return s
}

func (s *FedSecret) SetCreateTimeStamp(v string) *FedSecret {
	s.CreateTimeStamp = &v
	return s
}

func (s *FedSecret) SetData(v []*SecretData) *FedSecret {
	s.Data = v
	return s
}

func (s *FedSecret) SetLabels(v []*Label) *FedSecret {
	s.Labels = v
	return s
}

func (s *FedSecret) SetName(v string) *FedSecret {
	s.Name = &v
	return s
}

func (s *FedSecret) SetNamespace(v string) *FedSecret {
	s.Namespace = &v
	return s
}

func (s *FedSecret) SetOverrides(v []*FedSecretOverride) *FedSecret {
	s.Overrides = v
	return s
}

func (s *FedSecret) SetReason(v string) *FedSecret {
	s.Reason = &v
	return s
}

func (s *FedSecret) SetStatus(v string) *FedSecret {
	s.Status = &v
	return s
}

func (s *FedSecret) SetType(v string) *FedSecret {
	s.Type = &v
	return s
}

// 应用信息
type Application struct {
	// 应用部署时指定的自定义参数
	CustomParams []*OpsParam `json:"custom_params,omitempty" xml:"custom_params,omitempty" type:"Repeated"`
	// 应用部署时依赖的应用名称，只允许取此次调用参数中列出的应用。不允许形成循环依赖。
	Depends []*string `json:"depends,omitempty" xml:"depends,omitempty" type:"Repeated"`
	// 应用名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 指定应用下的应用服务实例
	Services []*AppService `json:"services,omitempty" xml:"services,omitempty" type:"Repeated"`
	// 应用包版本
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
}

func (s Application) String() string {
	return tea.Prettify(s)
}

func (s Application) GoString() string {
	return s.String()
}

func (s *Application) SetCustomParams(v []*OpsParam) *Application {
	s.CustomParams = v
	return s
}

func (s *Application) SetDepends(v []*string) *Application {
	s.Depends = v
	return s
}

func (s *Application) SetName(v string) *Application {
	s.Name = &v
	return s
}

func (s *Application) SetServices(v []*AppService) *Application {
	s.Services = v
	return s
}

func (s *Application) SetVersion(v string) *Application {
	s.Version = &v
	return s
}

// Ingress 信息
type IngressInfo struct {
	// 元信息
	Meta *ContainerServiceObjectMeta `json:"meta,omitempty" xml:"meta,omitempty" require:"true"`
	// 所属统一接入实例名称
	UnifiedAccessInstanceName *string `json:"unified_access_instance_name,omitempty" xml:"unified_access_instance_name,omitempty"`
}

func (s IngressInfo) String() string {
	return tea.Prettify(s)
}

func (s IngressInfo) GoString() string {
	return s.String()
}

func (s *IngressInfo) SetMeta(v *ContainerServiceObjectMeta) *IngressInfo {
	s.Meta = v
	return s
}

func (s *IngressInfo) SetUnifiedAccessInstanceName(v string) *IngressInfo {
	s.UnifiedAccessInstanceName = &v
	return s
}

// 应用分组概要信息列表
type AppGroupSimpleViewList struct {
	// 应用分组列表
	AppGroupList []*AppGroupSimpleView `json:"app_group_list,omitempty" xml:"app_group_list,omitempty" require:"true" type:"Repeated"`
}

func (s AppGroupSimpleViewList) String() string {
	return tea.Prettify(s)
}

func (s AppGroupSimpleViewList) GoString() string {
	return s.String()
}

func (s *AppGroupSimpleViewList) SetAppGroupList(v []*AppGroupSimpleView) *AppGroupSimpleViewList {
	s.AppGroupList = v
	return s
}

// Spanner集群信息
type SpannerClusterInfo struct {
	// 容器的CPU个数
	ContainerCpu *int64 `json:"container_cpu,omitempty" xml:"container_cpu,omitempty" require:"true"`
	// 容器是否独占CPU
	ContainerCpuExclusive *bool `json:"container_cpu_exclusive,omitempty" xml:"container_cpu_exclusive,omitempty" require:"true"`
	// 容器所在物理机节点的标签
	ContainerDeviceType *string `json:"container_device_type,omitempty" xml:"container_device_type,omitempty" require:"true"`
	// 容器的磁盘大小
	ContainerDisk *int64 `json:"container_disk,omitempty" xml:"container_disk,omitempty" require:"true"`
	// 容器的内存大小(G)
	ContainerMem *int64 `json:"container_mem,omitempty" xml:"container_mem,omitempty" require:"true"`
	// 容器网络
	ContainerNetwork *string `json:"container_network,omitempty" xml:"container_network,omitempty" require:"true"`
	// 创建时间
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 扩展属性，json字符串
	ExtendProperties *string `json:"extend_properties,omitempty" xml:"extend_properties,omitempty"`
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 修改时间
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 集群名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 集群的状态： 1 运行状态  2 维护状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 集群单元信息
	UnitInfos []*SpannerClusterUnitInfo `json:"unit_infos,omitempty" xml:"unit_infos,omitempty" require:"true" type:"Repeated"`
	// 0 表示集群单元类型为容器
	UnitType *int64 `json:"unit_type,omitempty" xml:"unit_type,omitempty" require:"true"`
	// 已使用的端口
	UsedPorts []*int64 `json:"used_ports,omitempty" xml:"used_ports,omitempty" type:"Repeated"`
	// internet/intranet/multidomain/office
	AddressType *string `json:"address_type,omitempty" xml:"address_type,omitempty" require:"true"`
}

func (s SpannerClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s SpannerClusterInfo) GoString() string {
	return s.String()
}

func (s *SpannerClusterInfo) SetContainerCpu(v int64) *SpannerClusterInfo {
	s.ContainerCpu = &v
	return s
}

func (s *SpannerClusterInfo) SetContainerCpuExclusive(v bool) *SpannerClusterInfo {
	s.ContainerCpuExclusive = &v
	return s
}

func (s *SpannerClusterInfo) SetContainerDeviceType(v string) *SpannerClusterInfo {
	s.ContainerDeviceType = &v
	return s
}

func (s *SpannerClusterInfo) SetContainerDisk(v int64) *SpannerClusterInfo {
	s.ContainerDisk = &v
	return s
}

func (s *SpannerClusterInfo) SetContainerMem(v int64) *SpannerClusterInfo {
	s.ContainerMem = &v
	return s
}

func (s *SpannerClusterInfo) SetContainerNetwork(v string) *SpannerClusterInfo {
	s.ContainerNetwork = &v
	return s
}

func (s *SpannerClusterInfo) SetCreatedTime(v string) *SpannerClusterInfo {
	s.CreatedTime = &v
	return s
}

func (s *SpannerClusterInfo) SetExtendProperties(v string) *SpannerClusterInfo {
	s.ExtendProperties = &v
	return s
}

func (s *SpannerClusterInfo) SetId(v string) *SpannerClusterInfo {
	s.Id = &v
	return s
}

func (s *SpannerClusterInfo) SetModifiedTime(v string) *SpannerClusterInfo {
	s.ModifiedTime = &v
	return s
}

func (s *SpannerClusterInfo) SetName(v string) *SpannerClusterInfo {
	s.Name = &v
	return s
}

func (s *SpannerClusterInfo) SetStatus(v int64) *SpannerClusterInfo {
	s.Status = &v
	return s
}

func (s *SpannerClusterInfo) SetUnitInfos(v []*SpannerClusterUnitInfo) *SpannerClusterInfo {
	s.UnitInfos = v
	return s
}

func (s *SpannerClusterInfo) SetUnitType(v int64) *SpannerClusterInfo {
	s.UnitType = &v
	return s
}

func (s *SpannerClusterInfo) SetUsedPorts(v []*int64) *SpannerClusterInfo {
	s.UsedPorts = v
	return s
}

func (s *SpannerClusterInfo) SetAddressType(v string) *SpannerClusterInfo {
	s.AddressType = &v
	return s
}

// the uid shard list.
type UidShardList struct {
	// the uid shard list.
	Data []*UidShard `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s UidShardList) String() string {
	return tea.Prettify(s)
}

func (s UidShardList) GoString() string {
	return s.String()
}

func (s *UidShardList) SetData(v []*UidShard) *UidShardList {
	s.Data = v
	return s
}

// 部署单元组的流量规则
type UnitFlow struct {
	// 部署单元组的名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 部署单元组的类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 该部署单元组下的部署单元流量规则
	CellFlows []*CellFlow `json:"cell_flows,omitempty" xml:"cell_flows,omitempty" require:"true" type:"Repeated"`
	// 该部署单元组下的部署单元 uid 分配
	UidRanges []*UidRange `json:"uid_ranges,omitempty" xml:"uid_ranges,omitempty" require:"true" type:"Repeated"`
	// 是否弹性部署单元组
	Elastic *bool `json:"elastic,omitempty" xml:"elastic,omitempty" require:"true"`
}

func (s UnitFlow) String() string {
	return tea.Prettify(s)
}

func (s UnitFlow) GoString() string {
	return s.String()
}

func (s *UnitFlow) SetName(v string) *UnitFlow {
	s.Name = &v
	return s
}

func (s *UnitFlow) SetType(v string) *UnitFlow {
	s.Type = &v
	return s
}

func (s *UnitFlow) SetCellFlows(v []*CellFlow) *UnitFlow {
	s.CellFlows = v
	return s
}

func (s *UnitFlow) SetUidRanges(v []*UidRange) *UnitFlow {
	s.UidRanges = v
	return s
}

func (s *UnitFlow) SetElastic(v bool) *UnitFlow {
	s.Elastic = &v
	return s
}

// 发布解决方案
type UnireleaseSolution struct {
	// 发布单ID
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 发布单标题
	Title *string `json:"title,omitempty" xml:"title,omitempty" require:"true"`
	// 解决方案平台源
	SourceSystem *string `json:"source_system,omitempty" xml:"source_system,omitempty" require:"true"`
	// 发布类型，容器/经典
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 需求人/操作者
	Submitter *string `json:"submitter,omitempty" xml:"submitter,omitempty" require:"true"`
	// 解决方案状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 解决方案提出时间
	TimeStamp *string `json:"time_stamp,omitempty" xml:"time_stamp,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 是否自动执行
	AutoExecute *bool `json:"auto_execute,omitempty" xml:"auto_execute,omitempty" require:"true"`
	// 环境信息
	Env *string `json:"env,omitempty" xml:"env,omitempty" require:"true"`
	// 变更人员
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 解决方案拓展信息
	ExtInfo *UnireleaseSolutionExtInfo `json:"ext_info,omitempty" xml:"ext_info,omitempty" require:"true"`
	// 解决方案包含的应用配置信息
	Apps []*UnireleaseSolutionApp `json:"apps,omitempty" xml:"apps,omitempty" require:"true" type:"Repeated"`
}

func (s UnireleaseSolution) String() string {
	return tea.Prettify(s)
}

func (s UnireleaseSolution) GoString() string {
	return s.String()
}

func (s *UnireleaseSolution) SetId(v string) *UnireleaseSolution {
	s.Id = &v
	return s
}

func (s *UnireleaseSolution) SetTitle(v string) *UnireleaseSolution {
	s.Title = &v
	return s
}

func (s *UnireleaseSolution) SetSourceSystem(v string) *UnireleaseSolution {
	s.SourceSystem = &v
	return s
}

func (s *UnireleaseSolution) SetType(v string) *UnireleaseSolution {
	s.Type = &v
	return s
}

func (s *UnireleaseSolution) SetSubmitter(v string) *UnireleaseSolution {
	s.Submitter = &v
	return s
}

func (s *UnireleaseSolution) SetStatus(v string) *UnireleaseSolution {
	s.Status = &v
	return s
}

func (s *UnireleaseSolution) SetTimeStamp(v string) *UnireleaseSolution {
	s.TimeStamp = &v
	return s
}

func (s *UnireleaseSolution) SetAutoExecute(v bool) *UnireleaseSolution {
	s.AutoExecute = &v
	return s
}

func (s *UnireleaseSolution) SetEnv(v string) *UnireleaseSolution {
	s.Env = &v
	return s
}

func (s *UnireleaseSolution) SetOperator(v string) *UnireleaseSolution {
	s.Operator = &v
	return s
}

func (s *UnireleaseSolution) SetExtInfo(v *UnireleaseSolutionExtInfo) *UnireleaseSolution {
	s.ExtInfo = v
	return s
}

func (s *UnireleaseSolution) SetApps(v []*UnireleaseSolutionApp) *UnireleaseSolution {
	s.Apps = v
	return s
}

// 联邦负载均衡实例属性
type FedLoadBalancer struct {
	// 联邦负载均衡实例名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 地址类型，比如公网、内网
	AddrType *string `json:"addr_type,omitempty" xml:"addr_type,omitempty" require:"true"`
	// 联邦负载均衡实例的状态，由多个local 负载均衡实例的状态汇聚计算而来
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 创建时间
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 关联的应用服务情况
	ContainerServicesInfo []*FedLoadBalancerContainerServiceRel `json:"container_services_info,omitempty" xml:"container_services_info,omitempty" type:"Repeated"`
	// local lb实例信息
	LocalLoadbalancerInstances []*LocalLoadBalancer `json:"local_loadbalancer_instances,omitempty" xml:"local_loadbalancer_instances,omitempty" type:"Repeated"`
}

func (s FedLoadBalancer) String() string {
	return tea.Prettify(s)
}

func (s FedLoadBalancer) GoString() string {
	return s.String()
}

func (s *FedLoadBalancer) SetName(v string) *FedLoadBalancer {
	s.Name = &v
	return s
}

func (s *FedLoadBalancer) SetAddrType(v string) *FedLoadBalancer {
	s.AddrType = &v
	return s
}

func (s *FedLoadBalancer) SetState(v string) *FedLoadBalancer {
	s.State = &v
	return s
}

func (s *FedLoadBalancer) SetCreateTime(v string) *FedLoadBalancer {
	s.CreateTime = &v
	return s
}

func (s *FedLoadBalancer) SetContainerServicesInfo(v []*FedLoadBalancerContainerServiceRel) *FedLoadBalancer {
	s.ContainerServicesInfo = v
	return s
}

func (s *FedLoadBalancer) SetLocalLoadbalancerInstances(v []*LocalLoadBalancer) *FedLoadBalancer {
	s.LocalLoadbalancerInstances = v
	return s
}

// ReleasePipeline ref event
type RpReleaseEvent struct {
	// 集群名
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// 结束时间
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 事件关联的对象类型
	//
	InvObjKind *string `json:"inv_obj_kind,omitempty" xml:"inv_obj_kind,omitempty" require:"true"`
	// 事件关联对象名字
	//
	InvObjName *string `json:"inv_obj_name,omitempty" xml:"inv_obj_name,omitempty" require:"true"`
	// 事件关联对象的namespace
	//
	InvObjNamespace *string `json:"inv_obj_namespace,omitempty" xml:"inv_obj_namespace,omitempty" require:"true"`
	// 事件关联对象版本
	//
	InvObjVersion *string `json:"inv_obj_version,omitempty" xml:"inv_obj_version,omitempty" require:"true"`
	// 事件详情
	//
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// 事件原因
	//
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty" require:"true"`
	// 事件来源组件
	//
	SourceComp *string `json:"source_comp,omitempty" xml:"source_comp,omitempty" require:"true"`
	// start_time
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s RpReleaseEvent) String() string {
	return tea.Prettify(s)
}

func (s RpReleaseEvent) GoString() string {
	return s.String()
}

func (s *RpReleaseEvent) SetCluster(v string) *RpReleaseEvent {
	s.Cluster = &v
	return s
}

func (s *RpReleaseEvent) SetEndTime(v string) *RpReleaseEvent {
	s.EndTime = &v
	return s
}

func (s *RpReleaseEvent) SetInvObjKind(v string) *RpReleaseEvent {
	s.InvObjKind = &v
	return s
}

func (s *RpReleaseEvent) SetInvObjName(v string) *RpReleaseEvent {
	s.InvObjName = &v
	return s
}

func (s *RpReleaseEvent) SetInvObjNamespace(v string) *RpReleaseEvent {
	s.InvObjNamespace = &v
	return s
}

func (s *RpReleaseEvent) SetInvObjVersion(v string) *RpReleaseEvent {
	s.InvObjVersion = &v
	return s
}

func (s *RpReleaseEvent) SetMessage(v string) *RpReleaseEvent {
	s.Message = &v
	return s
}

func (s *RpReleaseEvent) SetReason(v string) *RpReleaseEvent {
	s.Reason = &v
	return s
}

func (s *RpReleaseEvent) SetSourceComp(v string) *RpReleaseEvent {
	s.SourceComp = &v
	return s
}

func (s *RpReleaseEvent) SetStartTime(v string) *RpReleaseEvent {
	s.StartTime = &v
	return s
}

// 前后置任务
type OpsPrePostTask struct {
	//
	//           任务类型。
	//           中间件任务：
	//           MESSAGE_BROKER_TOPIC：消息中间件TOPIC；
	//           MESSAGE_BROKER_TOPIC_SUB：消息中间件绑定关系；
	//           DRM_RESOURCE：DRM资源；
	//           SCHEDULER_TASK：定时任务；
	//           其他类型任务待定。
	//
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	//
	//           操作类型。取值列表：
	//           CREATE：新建；
	//           UPDATE：更新；
	//           DELETE：删除；
	//           UNDEFINED：未定义；
	//
	OperationType *string `json:"operation_type,omitempty" xml:"operation_type,omitempty"`
	//
	//           任务详情，JSON字符串
	//
	Detail *string `json:"detail,omitempty" xml:"detail,omitempty"`
	//
	//           任务状态。取值列表：EXECUTING：执行中；SUCCEEDED：执行成功；FAILED：执行失败；IGNORED：已忽略
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s OpsPrePostTask) String() string {
	return tea.Prettify(s)
}

func (s OpsPrePostTask) GoString() string {
	return s.String()
}

func (s *OpsPrePostTask) SetType(v string) *OpsPrePostTask {
	s.Type = &v
	return s
}

func (s *OpsPrePostTask) SetOperationType(v string) *OpsPrePostTask {
	s.OperationType = &v
	return s
}

func (s *OpsPrePostTask) SetDetail(v string) *OpsPrePostTask {
	s.Detail = &v
	return s
}

func (s *OpsPrePostTask) SetStatus(v string) *OpsPrePostTask {
	s.Status = &v
	return s
}

// secured Group Info
type SecuredGroupInfo struct {
	// secured group name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s SecuredGroupInfo) String() string {
	return tea.Prettify(s)
}

func (s SecuredGroupInfo) GoString() string {
	return s.String()
}

func (s *SecuredGroupInfo) SetName(v string) *SecuredGroupInfo {
	s.Name = &v
	return s
}

// 统一接入实例信息
type UnifiedAccessInstanceInfo struct {
	// 统一接入实例创建的时间
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 关联的Spanner逻辑集群名称，一个逻辑集群由很多个local集群组成
	SpannerCluster *string `json:"spanner_cluster,omitempty" xml:"spanner_cluster,omitempty" require:"true"`
	// 关联的应用服务信息
	UnifiedAccessInstanceContainerServiceInfos []*UnifiedAccessInstanceContainerServiceInfo `json:"unified_access_instance_container_service_infos,omitempty" xml:"unified_access_instance_container_service_infos,omitempty" type:"Repeated"`
	// https协议配置
	UnifiedAccessInstanceHttpsEntry *HttpsEntry `json:"unified_access_instance_https_entry,omitempty" xml:"unified_access_instance_https_entry,omitempty"`
	// http协议配置
	UnifiedAccessInstanceHttpEntry *HttpEntry `json:"unified_access_instance_http_entry,omitempty" xml:"unified_access_instance_http_entry,omitempty" require:"true"`
	// 统一接入实例ID
	UnifiedAccessInstanceId *string `json:"unified_access_instance_id,omitempty" xml:"unified_access_instance_id,omitempty" require:"true"`
	// 本地集群详细信息
	UnifiedAccessInstanceLocalDetailInfos []*UnifiedAccessInstanceLocalDetailInfo `json:"unified_access_instance_local_detail_infos,omitempty" xml:"unified_access_instance_local_detail_infos,omitempty" require:"true" type:"Repeated"`
	// 统一接入实例详细信息显示，包含错误状态信息等
	UnifiedAccessInstanceMessageDetails *string `json:"unified_access_instance_message_details,omitempty" xml:"unified_access_instance_message_details,omitempty"`
	// 统一接入实例名称
	UnifiedAccessInstanceName *string `json:"unified_access_instance_name,omitempty" xml:"unified_access_instance_name,omitempty" require:"true"`
	// 统一接入实例状态描述：创建中、创建成功、创建失败
	UnifiedAccessInstanceStatus *string `json:"unified_access_instance_status,omitempty" xml:"unified_access_instance_status,omitempty" require:"true"`
	// 统一接入实例网络类型，内网（intranet），公网（internet）
	UnifiedAccessInstanceType *string `json:"unified_access_instance_type,omitempty" xml:"unified_access_instance_type,omitempty" require:"true"`
	// custom模式下，用户自定义entryId以及entryVip信息
	EntrySettings *EntrySettings `json:"entry_settings,omitempty" xml:"entry_settings,omitempty"`
}

func (s UnifiedAccessInstanceInfo) String() string {
	return tea.Prettify(s)
}

func (s UnifiedAccessInstanceInfo) GoString() string {
	return s.String()
}

func (s *UnifiedAccessInstanceInfo) SetCreatedTime(v string) *UnifiedAccessInstanceInfo {
	s.CreatedTime = &v
	return s
}

func (s *UnifiedAccessInstanceInfo) SetSpannerCluster(v string) *UnifiedAccessInstanceInfo {
	s.SpannerCluster = &v
	return s
}

func (s *UnifiedAccessInstanceInfo) SetUnifiedAccessInstanceContainerServiceInfos(v []*UnifiedAccessInstanceContainerServiceInfo) *UnifiedAccessInstanceInfo {
	s.UnifiedAccessInstanceContainerServiceInfos = v
	return s
}

func (s *UnifiedAccessInstanceInfo) SetUnifiedAccessInstanceHttpsEntry(v *HttpsEntry) *UnifiedAccessInstanceInfo {
	s.UnifiedAccessInstanceHttpsEntry = v
	return s
}

func (s *UnifiedAccessInstanceInfo) SetUnifiedAccessInstanceHttpEntry(v *HttpEntry) *UnifiedAccessInstanceInfo {
	s.UnifiedAccessInstanceHttpEntry = v
	return s
}

func (s *UnifiedAccessInstanceInfo) SetUnifiedAccessInstanceId(v string) *UnifiedAccessInstanceInfo {
	s.UnifiedAccessInstanceId = &v
	return s
}

func (s *UnifiedAccessInstanceInfo) SetUnifiedAccessInstanceLocalDetailInfos(v []*UnifiedAccessInstanceLocalDetailInfo) *UnifiedAccessInstanceInfo {
	s.UnifiedAccessInstanceLocalDetailInfos = v
	return s
}

func (s *UnifiedAccessInstanceInfo) SetUnifiedAccessInstanceMessageDetails(v string) *UnifiedAccessInstanceInfo {
	s.UnifiedAccessInstanceMessageDetails = &v
	return s
}

func (s *UnifiedAccessInstanceInfo) SetUnifiedAccessInstanceName(v string) *UnifiedAccessInstanceInfo {
	s.UnifiedAccessInstanceName = &v
	return s
}

func (s *UnifiedAccessInstanceInfo) SetUnifiedAccessInstanceStatus(v string) *UnifiedAccessInstanceInfo {
	s.UnifiedAccessInstanceStatus = &v
	return s
}

func (s *UnifiedAccessInstanceInfo) SetUnifiedAccessInstanceType(v string) *UnifiedAccessInstanceInfo {
	s.UnifiedAccessInstanceType = &v
	return s
}

func (s *UnifiedAccessInstanceInfo) SetEntrySettings(v *EntrySettings) *UnifiedAccessInstanceInfo {
	s.EntrySettings = v
	return s
}

// 弹性信息
type ElasticInfoView struct {
	// 全局弹性状态，有效值：NORMAL，ELASTIC
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 弹性值
	ElasticValues []*string `json:"elastic_values,omitempty" xml:"elastic_values,omitempty" type:"Repeated"`
	// 是否压测
	Press *bool `json:"press,omitempty" xml:"press,omitempty"`
}

func (s ElasticInfoView) String() string {
	return tea.Prettify(s)
}

func (s ElasticInfoView) GoString() string {
	return s.String()
}

func (s *ElasticInfoView) SetStatus(v string) *ElasticInfoView {
	s.Status = &v
	return s
}

func (s *ElasticInfoView) SetElasticValues(v []*string) *ElasticInfoView {
	s.ElasticValues = v
	return s
}

func (s *ElasticInfoView) SetPress(v bool) *ElasticInfoView {
	s.Press = &v
	return s
}

// kubernetes集群事件信息
type ClusterEvents struct {
	// 集群名称
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// 集群事件
	Events []*KubernetesEvents `json:"events,omitempty" xml:"events,omitempty" require:"true" type:"Repeated"`
}

func (s ClusterEvents) String() string {
	return tea.Prettify(s)
}

func (s ClusterEvents) GoString() string {
	return s.String()
}

func (s *ClusterEvents) SetCluster(v string) *ClusterEvents {
	s.Cluster = &v
	return s
}

func (s *ClusterEvents) SetEvents(v []*KubernetesEvents) *ClusterEvents {
	s.Events = v
	return s
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReference struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s LocalObjectReference) String() string {
	return tea.Prettify(s)
}

func (s LocalObjectReference) GoString() string {
	return s.String()
}

func (s *LocalObjectReference) SetName(v string) *LocalObjectReference {
	s.Name = &v
	return s
}

// 发布单摘要信息
type PlanSimpleView struct {
	// 发布单涉及的应用个数
	AppCount *int64 `json:"app_count,omitempty" xml:"app_count,omitempty" require:"true"`
	// 创建时间
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 执行人
	Executor *string `json:"executor,omitempty" xml:"executor,omitempty" require:"true"`
	// 结束时间
	FinishedTime *string `json:"finished_time,omitempty" xml:"finished_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 发布单id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 运维单类型
	Mode *string `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
	// 发布单标题
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 开始时间
	StartedTime *string `json:"started_time,omitempty" xml:"started_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 发布单状态
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// 发布单号
	TimeSeriesId *string `json:"time_series_id,omitempty" xml:"time_series_id,omitempty" require:"true"`
	// 发布单类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 工作空间组id
	WorkspaceGroupId *string `json:"workspace_group_id,omitempty" xml:"workspace_group_id,omitempty"`
	// Pod 数量
	PodCount *int64 `json:"pod_count,omitempty" xml:"pod_count,omitempty"`
}

func (s PlanSimpleView) String() string {
	return tea.Prettify(s)
}

func (s PlanSimpleView) GoString() string {
	return s.String()
}

func (s *PlanSimpleView) SetAppCount(v int64) *PlanSimpleView {
	s.AppCount = &v
	return s
}

func (s *PlanSimpleView) SetCreatedTime(v string) *PlanSimpleView {
	s.CreatedTime = &v
	return s
}

func (s *PlanSimpleView) SetExecutor(v string) *PlanSimpleView {
	s.Executor = &v
	return s
}

func (s *PlanSimpleView) SetFinishedTime(v string) *PlanSimpleView {
	s.FinishedTime = &v
	return s
}

func (s *PlanSimpleView) SetId(v string) *PlanSimpleView {
	s.Id = &v
	return s
}

func (s *PlanSimpleView) SetMode(v string) *PlanSimpleView {
	s.Mode = &v
	return s
}

func (s *PlanSimpleView) SetName(v string) *PlanSimpleView {
	s.Name = &v
	return s
}

func (s *PlanSimpleView) SetStartedTime(v string) *PlanSimpleView {
	s.StartedTime = &v
	return s
}

func (s *PlanSimpleView) SetState(v string) *PlanSimpleView {
	s.State = &v
	return s
}

func (s *PlanSimpleView) SetTimeSeriesId(v string) *PlanSimpleView {
	s.TimeSeriesId = &v
	return s
}

func (s *PlanSimpleView) SetType(v string) *PlanSimpleView {
	s.Type = &v
	return s
}

func (s *PlanSimpleView) SetWorkspaceGroupId(v string) *PlanSimpleView {
	s.WorkspaceGroupId = &v
	return s
}

func (s *PlanSimpleView) SetPodCount(v int64) *PlanSimpleView {
	s.PodCount = &v
	return s
}

// 发布单|应用执行进度，按状态区分
type ExecuteProgress struct {
	// 阻塞个数
	Blocked *int64 `json:"blocked,omitempty" xml:"blocked,omitempty" require:"true"`
	// 执行中个数
	Executing *int64 `json:"executing,omitempty" xml:"executing,omitempty" require:"true"`
	// 失败个数
	Failed *int64 `json:"failed,omitempty" xml:"failed,omitempty" require:"true"`
	// 执行对象ID
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 初始化机器个数
	Inited *int64 `json:"inited,omitempty" xml:"inited,omitempty" require:"true"`
	// 执行对象状态
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// 成功个数
	Success *int64 `json:"success,omitempty" xml:"success,omitempty" require:"true"`
	// 总计
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
	// 等待中个数
	Waiting *int64 `json:"waiting,omitempty" xml:"waiting,omitempty" require:"true"`
}

func (s ExecuteProgress) String() string {
	return tea.Prettify(s)
}

func (s ExecuteProgress) GoString() string {
	return s.String()
}

func (s *ExecuteProgress) SetBlocked(v int64) *ExecuteProgress {
	s.Blocked = &v
	return s
}

func (s *ExecuteProgress) SetExecuting(v int64) *ExecuteProgress {
	s.Executing = &v
	return s
}

func (s *ExecuteProgress) SetFailed(v int64) *ExecuteProgress {
	s.Failed = &v
	return s
}

func (s *ExecuteProgress) SetId(v string) *ExecuteProgress {
	s.Id = &v
	return s
}

func (s *ExecuteProgress) SetInited(v int64) *ExecuteProgress {
	s.Inited = &v
	return s
}

func (s *ExecuteProgress) SetState(v string) *ExecuteProgress {
	s.State = &v
	return s
}

func (s *ExecuteProgress) SetSuccess(v int64) *ExecuteProgress {
	s.Success = &v
	return s
}

func (s *ExecuteProgress) SetTotal(v int64) *ExecuteProgress {
	s.Total = &v
	return s
}

func (s *ExecuteProgress) SetWaiting(v int64) *ExecuteProgress {
	s.Waiting = &v
	return s
}

// 逻辑单元
type CellGroup struct {
	// 包含部署单元列表。
	Cells []*Cell `json:"cells,omitempty" xml:"cells,omitempty" require:"true" type:"Repeated"`
	// 机房名称。
	Datacenter *string `json:"datacenter,omitempty" xml:"datacenter,omitempty"`
	// 默认全局域
	DefaultGzone *string `json:"default_gzone,omitempty" xml:"default_gzone,omitempty"`
	// 逻辑单元灾备信息
	DisasterInfo []*DisasterInfo `json:"disaster_info,omitempty" xml:"disaster_info,omitempty" require:"true" type:"Repeated"`
	// 修改时间
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 逻辑单元名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 逻辑单元类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 所属地域：CZone Group 必填
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
}

func (s CellGroup) String() string {
	return tea.Prettify(s)
}

func (s CellGroup) GoString() string {
	return s.String()
}

func (s *CellGroup) SetCells(v []*Cell) *CellGroup {
	s.Cells = v
	return s
}

func (s *CellGroup) SetDatacenter(v string) *CellGroup {
	s.Datacenter = &v
	return s
}

func (s *CellGroup) SetDefaultGzone(v string) *CellGroup {
	s.DefaultGzone = &v
	return s
}

func (s *CellGroup) SetDisasterInfo(v []*DisasterInfo) *CellGroup {
	s.DisasterInfo = v
	return s
}

func (s *CellGroup) SetModifiedTime(v string) *CellGroup {
	s.ModifiedTime = &v
	return s
}

func (s *CellGroup) SetName(v string) *CellGroup {
	s.Name = &v
	return s
}

func (s *CellGroup) SetOperator(v string) *CellGroup {
	s.Operator = &v
	return s
}

func (s *CellGroup) SetType(v string) *CellGroup {
	s.Type = &v
	return s
}

func (s *CellGroup) SetRegion(v string) *CellGroup {
	s.Region = &v
	return s
}

// 发布版本信息
type ReleaseVersion struct {
	// 镜像
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
}

func (s ReleaseVersion) String() string {
	return tea.Prettify(s)
}

func (s ReleaseVersion) GoString() string {
	return s.String()
}

func (s *ReleaseVersion) SetImage(v string) *ReleaseVersion {
	s.Image = &v
	return s
}

// MasterClusterForWorkspaces
type MasterClusterForWorkspaces struct {
	// workspace id
	WorkspaceId []*string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true" type:"Repeated"`
	// master cluster info to init minion cluster
	MasterClusterInfo *MasterCluster `json:"master_cluster_info,omitempty" xml:"master_cluster_info,omitempty" require:"true"`
}

func (s MasterClusterForWorkspaces) String() string {
	return tea.Prettify(s)
}

func (s MasterClusterForWorkspaces) GoString() string {
	return s.String()
}

func (s *MasterClusterForWorkspaces) SetWorkspaceId(v []*string) *MasterClusterForWorkspaces {
	s.WorkspaceId = v
	return s
}

func (s *MasterClusterForWorkspaces) SetMasterClusterInfo(v *MasterCluster) *MasterClusterForWorkspaces {
	s.MasterClusterInfo = v
	return s
}

// 运维容器服务分组依赖链
type OpsContainerServiceChain struct {
	// 运维容器分组列表
	Groups []*OpsContainerServiceGroup `json:"groups,omitempty" xml:"groups,omitempty" require:"true" type:"Repeated"`
}

func (s OpsContainerServiceChain) String() string {
	return tea.Prettify(s)
}

func (s OpsContainerServiceChain) GoString() string {
	return s.String()
}

func (s *OpsContainerServiceChain) SetGroups(v []*OpsContainerServiceGroup) *OpsContainerServiceChain {
	s.Groups = v
	return s
}

// 站点信息
type PushSite struct {
	// 是否当前站点
	Current *bool `json:"current,omitempty" xml:"current,omitempty" require:"true"`
	// 站点描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 站点唯一标识
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 接口类型，可选（RPC，REST）
	InterfaceType *string `json:"interface_type,omitempty" xml:"interface_type,omitempty" require:"true"`
	// 站点 DRM endpoints
	InterfaceUrls []*string `json:"interface_urls,omitempty" xml:"interface_urls,omitempty" type:"Repeated"`
	// 站点名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 站点部署单元
	SiteCells []*SiteCell `json:"site_cells,omitempty" xml:"site_cells,omitempty" type:"Repeated"`
	// 站点类型，可选（MAIN，ISOMERISM）
	SiteType *string `json:"site_type,omitempty" xml:"site_type,omitempty" require:"true"`
}

func (s PushSite) String() string {
	return tea.Prettify(s)
}

func (s PushSite) GoString() string {
	return s.String()
}

func (s *PushSite) SetCurrent(v bool) *PushSite {
	s.Current = &v
	return s
}

func (s *PushSite) SetDescription(v string) *PushSite {
	s.Description = &v
	return s
}

func (s *PushSite) SetId(v int64) *PushSite {
	s.Id = &v
	return s
}

func (s *PushSite) SetInterfaceType(v string) *PushSite {
	s.InterfaceType = &v
	return s
}

func (s *PushSite) SetInterfaceUrls(v []*string) *PushSite {
	s.InterfaceUrls = v
	return s
}

func (s *PushSite) SetName(v string) *PushSite {
	s.Name = &v
	return s
}

func (s *PushSite) SetSiteCells(v []*SiteCell) *PushSite {
	s.SiteCells = v
	return s
}

func (s *PushSite) SetSiteType(v string) *PushSite {
	s.SiteType = &v
	return s
}

// 集群状态信息
type ClusterStatus struct {
	// 集群名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 集群资源概览
	OverviewInfo *ClusterOverviewInfo `json:"overview_info,omitempty" xml:"overview_info,omitempty" require:"true"`
}

func (s ClusterStatus) String() string {
	return tea.Prettify(s)
}

func (s ClusterStatus) GoString() string {
	return s.String()
}

func (s *ClusterStatus) SetName(v string) *ClusterStatus {
	s.Name = &v
	return s
}

func (s *ClusterStatus) SetOverviewInfo(v *ClusterOverviewInfo) *ClusterStatus {
	s.OverviewInfo = v
	return s
}

// drm 推送记录
type DrmOpsRecord struct {
	// 应用
	Apps []*string `json:"apps,omitempty" xml:"apps,omitempty" type:"Repeated"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 推送时间
	PushTime *string `json:"push_time,omitempty" xml:"push_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 推送结果，包括（SUCCESS，FAILED，INVALID_REQUEST，NO_RECORD，SYSTEM_EXCEPTION，PARAM_QUERY_ERROR，PARAM_INVALID）
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty" require:"true"`
	// 结果信息
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 推送目标
	Targets []*string `json:"targets,omitempty" xml:"targets,omitempty" type:"Repeated"`
	// 推送值
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	// 规则类型
	RuleType *string `json:"rule_type,omitempty" xml:"rule_type,omitempty" require:"true"`
}

func (s DrmOpsRecord) String() string {
	return tea.Prettify(s)
}

func (s DrmOpsRecord) GoString() string {
	return s.String()
}

func (s *DrmOpsRecord) SetApps(v []*string) *DrmOpsRecord {
	s.Apps = v
	return s
}

func (s *DrmOpsRecord) SetOperator(v string) *DrmOpsRecord {
	s.Operator = &v
	return s
}

func (s *DrmOpsRecord) SetPushTime(v string) *DrmOpsRecord {
	s.PushTime = &v
	return s
}

func (s *DrmOpsRecord) SetResultCode(v string) *DrmOpsRecord {
	s.ResultCode = &v
	return s
}

func (s *DrmOpsRecord) SetResultMsg(v string) *DrmOpsRecord {
	s.ResultMsg = &v
	return s
}

func (s *DrmOpsRecord) SetTargets(v []*string) *DrmOpsRecord {
	s.Targets = v
	return s
}

func (s *DrmOpsRecord) SetValue(v string) *DrmOpsRecord {
	s.Value = &v
	return s
}

func (s *DrmOpsRecord) SetRuleType(v string) *DrmOpsRecord {
	s.RuleType = &v
	return s
}

// 规则推送结果
type PushRuleResult struct {
	// site名字
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// site描述
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
	// 推送成功的zone
	SucceedList []*string `json:"succeed_list,omitempty" xml:"succeed_list,omitempty" type:"Repeated"`
	// 推送失败的zone
	FailedList []*string `json:"failed_list,omitempty" xml:"failed_list,omitempty" type:"Repeated"`
}

func (s PushRuleResult) String() string {
	return tea.Prettify(s)
}

func (s PushRuleResult) GoString() string {
	return s.String()
}

func (s *PushRuleResult) SetName(v string) *PushRuleResult {
	s.Name = &v
	return s
}

func (s *PushRuleResult) SetDesc(v string) *PushRuleResult {
	s.Desc = &v
	return s
}

func (s *PushRuleResult) SetSucceedList(v []*string) *PushRuleResult {
	s.SucceedList = v
	return s
}

func (s *PushRuleResult) SetFailedList(v []*string) *PushRuleResult {
	s.FailedList = v
	return s
}

// sidecar运维机器分组信息
type SidecarOpsMachineGroup struct {
	// 分组ID
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 分组名称
	Target *string `json:"target,omitempty" xml:"target,omitempty"`
	// 状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 执行日志
	Messages *string `json:"messages,omitempty" xml:"messages,omitempty"`
	// sidecar 运维机器列表
	SubTargets []*SidecarOpsMachine `json:"sub_targets,omitempty" xml:"sub_targets,omitempty" require:"true" type:"Repeated"`
}

func (s SidecarOpsMachineGroup) String() string {
	return tea.Prettify(s)
}

func (s SidecarOpsMachineGroup) GoString() string {
	return s.String()
}

func (s *SidecarOpsMachineGroup) SetId(v string) *SidecarOpsMachineGroup {
	s.Id = &v
	return s
}

func (s *SidecarOpsMachineGroup) SetTarget(v string) *SidecarOpsMachineGroup {
	s.Target = &v
	return s
}

func (s *SidecarOpsMachineGroup) SetStatus(v string) *SidecarOpsMachineGroup {
	s.Status = &v
	return s
}

func (s *SidecarOpsMachineGroup) SetProperties(v string) *SidecarOpsMachineGroup {
	s.Properties = &v
	return s
}

func (s *SidecarOpsMachineGroup) SetMessages(v string) *SidecarOpsMachineGroup {
	s.Messages = &v
	return s
}

func (s *SidecarOpsMachineGroup) SetSubTargets(v []*SidecarOpsMachine) *SidecarOpsMachineGroup {
	s.SubTargets = v
	return s
}

// 弹出 UID
type PopOutUid struct {
	// 弹出的 UID 值
	Value *int64 `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// 弹出的目标部署单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
}

func (s PopOutUid) String() string {
	return tea.Prettify(s)
}

func (s PopOutUid) GoString() string {
	return s.String()
}

func (s *PopOutUid) SetValue(v int64) *PopOutUid {
	s.Value = &v
	return s
}

func (s *PopOutUid) SetCell(v string) *PopOutUid {
	s.Cell = &v
	return s
}

// 一个运维操作组
type OpsGroup struct {
	// 运维操作组当前状态。取值列表： INITED：初始化完成； EXECUTING：执行中； SUCCESS：执行成功； FAILED：执行失败； CANCELED：已取消； CONFIRM_WAITING：待确认
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 包含在此运维操作组中的运维单元列表
	Units []*OpsUnit `json:"units,omitempty" xml:"units,omitempty" type:"Repeated"`
	// 运维任务进度列表
	Progresses []*OpsGroupTaskProgress `json:"progresses,omitempty" xml:"progresses,omitempty" type:"Repeated"`
}

func (s OpsGroup) String() string {
	return tea.Prettify(s)
}

func (s OpsGroup) GoString() string {
	return s.String()
}

func (s *OpsGroup) SetStatus(v string) *OpsGroup {
	s.Status = &v
	return s
}

func (s *OpsGroup) SetUnits(v []*OpsUnit) *OpsGroup {
	s.Units = v
	return s
}

func (s *OpsGroup) SetProgresses(v []*OpsGroupTaskProgress) *OpsGroup {
	s.Progresses = v
	return s
}

// 应用发布状态
type AppReleaseStatus struct {
	// 机构名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty" require:"true"`
	// 应用发布状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 应用发布单详情url
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// 应用列表
	Apps []*string `json:"apps,omitempty" xml:"apps,omitempty" require:"true" type:"Repeated"`
}

func (s AppReleaseStatus) String() string {
	return tea.Prettify(s)
}

func (s AppReleaseStatus) GoString() string {
	return s.String()
}

func (s *AppReleaseStatus) SetTenant(v string) *AppReleaseStatus {
	s.Tenant = &v
	return s
}

func (s *AppReleaseStatus) SetStatus(v string) *AppReleaseStatus {
	s.Status = &v
	return s
}

func (s *AppReleaseStatus) SetUrl(v string) *AppReleaseStatus {
	s.Url = &v
	return s
}

func (s *AppReleaseStatus) SetApps(v []*string) *AppReleaseStatus {
	s.Apps = v
	return s
}

// sidecar运维任务
type SidecarOperationTask struct {
	// 业务流水号
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 名称
	Title *string `json:"title,omitempty" xml:"title,omitempty" require:"true"`
	// sidecar运维内容上下文信息
	Context *SidecarOperationTaskContext `json:"context,omitempty" xml:"context,omitempty" require:"true"`
}

func (s SidecarOperationTask) String() string {
	return tea.Prettify(s)
}

func (s SidecarOperationTask) GoString() string {
	return s.String()
}

func (s *SidecarOperationTask) SetBizId(v string) *SidecarOperationTask {
	s.BizId = &v
	return s
}

func (s *SidecarOperationTask) SetOperator(v string) *SidecarOperationTask {
	s.Operator = &v
	return s
}

func (s *SidecarOperationTask) SetTitle(v string) *SidecarOperationTask {
	s.Title = &v
	return s
}

func (s *SidecarOperationTask) SetContext(v *SidecarOperationTaskContext) *SidecarOperationTask {
	s.Context = v
	return s
}

// 应用技术栈
type TechStack struct {
	// 技术栈描述
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 该字段为字符串类型Map，序列化为字符串用于存储扩展信息，e.g： 云原生下打包存放目录 /home/admin/release
	ExtendProperties *string `json:"extend_properties,omitempty" xml:"extend_properties,omitempty" require:"true"`
	// 技术栈id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 技术栈名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 技术栈可见范围，全局可见|租户内可见
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty" require:"true"`
	// 创建时间（UTC）
	UtcCreated *string `json:"utc_created,omitempty" xml:"utc_created,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 最近修改时间（UTC）
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s TechStack) String() string {
	return tea.Prettify(s)
}

func (s TechStack) GoString() string {
	return s.String()
}

func (s *TechStack) SetDescription(v string) *TechStack {
	s.Description = &v
	return s
}

func (s *TechStack) SetExtendProperties(v string) *TechStack {
	s.ExtendProperties = &v
	return s
}

func (s *TechStack) SetId(v string) *TechStack {
	s.Id = &v
	return s
}

func (s *TechStack) SetName(v string) *TechStack {
	s.Name = &v
	return s
}

func (s *TechStack) SetScope(v string) *TechStack {
	s.Scope = &v
	return s
}

func (s *TechStack) SetUtcCreated(v string) *TechStack {
	s.UtcCreated = &v
	return s
}

func (s *TechStack) SetUtcModified(v string) *TechStack {
	s.UtcModified = &v
	return s
}

// 获取单个spanner cluster的详细信息
type GetSpannerClusterDetail struct {
	// 联邦 spanner cluster 详细信息
	ClusterDetail *QuerySpannerClusterDetail `json:"cluster_detail,omitempty" xml:"cluster_detail,omitempty" require:"true"`
	// 若干组本地集群信息
	LocalClusters []*LocalSpannerClusterDetail `json:"local_clusters,omitempty" xml:"local_clusters,omitempty" require:"true" type:"Repeated"`
}

func (s GetSpannerClusterDetail) String() string {
	return tea.Prettify(s)
}

func (s GetSpannerClusterDetail) GoString() string {
	return s.String()
}

func (s *GetSpannerClusterDetail) SetClusterDetail(v *QuerySpannerClusterDetail) *GetSpannerClusterDetail {
	s.ClusterDetail = v
	return s
}

func (s *GetSpannerClusterDetail) SetLocalClusters(v []*LocalSpannerClusterDetail) *GetSpannerClusterDetail {
	s.LocalClusters = v
	return s
}

// OAM应用配置
type OAMApplicationConfiguration struct {
}

func (s OAMApplicationConfiguration) String() string {
	return tea.Prettify(s)
}

func (s OAMApplicationConfiguration) GoString() string {
	return s.String()
}

// node info
type NodeInfo struct {
	// cell name
	CellName *string `json:"cell_name,omitempty" xml:"cell_name,omitempty"`
	// node ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// true
	IsSchedulable *bool `json:"is_schedulable,omitempty" xml:"is_schedulable,omitempty"`
	// number of capacity cpu core
	LimitedCpu *int64 `json:"limited_cpu,omitempty" xml:"limited_cpu,omitempty"`
	// quantity of capacity memory
	LimitedMemory *int64 `json:"limited_memory,omitempty" xml:"limited_memory,omitempty"`
	// node name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// pod number of one node
	PodNumber *string `json:"pod_number,omitempty" xml:"pod_number,omitempty"`
	// node state
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// quantity of used cpu core
	UsedCpu *int64 `json:"used_cpu,omitempty" xml:"used_cpu,omitempty"`
	// quantity of used memory
	UsedMemory *int64 `json:"used_memory,omitempty" xml:"used_memory,omitempty"`
	// zone name
	ZoneName *string `json:"zone_name,omitempty" xml:"zone_name,omitempty"`
	// node labels
	Labels []*Label `json:"labels,omitempty" xml:"labels,omitempty" type:"Repeated"`
	// node annotations
	Annotations []*Annotation `json:"annotations,omitempty" xml:"annotations,omitempty" type:"Repeated"`
	// node created time
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// node system infos
	SystemInfos []*Annotation `json:"system_infos,omitempty" xml:"system_infos,omitempty" type:"Repeated"`
	// max pod amount of node
	MaxPodAmount *int64 `json:"max_pod_amount,omitempty" xml:"max_pod_amount,omitempty"`
	// running pod amount of node
	RunningPodAmount *int64 `json:"running_pod_amount,omitempty" xml:"running_pod_amount,omitempty"`
}

func (s NodeInfo) String() string {
	return tea.Prettify(s)
}

func (s NodeInfo) GoString() string {
	return s.String()
}

func (s *NodeInfo) SetCellName(v string) *NodeInfo {
	s.CellName = &v
	return s
}

func (s *NodeInfo) SetIp(v string) *NodeInfo {
	s.Ip = &v
	return s
}

func (s *NodeInfo) SetIsSchedulable(v bool) *NodeInfo {
	s.IsSchedulable = &v
	return s
}

func (s *NodeInfo) SetLimitedCpu(v int64) *NodeInfo {
	s.LimitedCpu = &v
	return s
}

func (s *NodeInfo) SetLimitedMemory(v int64) *NodeInfo {
	s.LimitedMemory = &v
	return s
}

func (s *NodeInfo) SetName(v string) *NodeInfo {
	s.Name = &v
	return s
}

func (s *NodeInfo) SetPodNumber(v string) *NodeInfo {
	s.PodNumber = &v
	return s
}

func (s *NodeInfo) SetState(v string) *NodeInfo {
	s.State = &v
	return s
}

func (s *NodeInfo) SetUsedCpu(v int64) *NodeInfo {
	s.UsedCpu = &v
	return s
}

func (s *NodeInfo) SetUsedMemory(v int64) *NodeInfo {
	s.UsedMemory = &v
	return s
}

func (s *NodeInfo) SetZoneName(v string) *NodeInfo {
	s.ZoneName = &v
	return s
}

func (s *NodeInfo) SetLabels(v []*Label) *NodeInfo {
	s.Labels = v
	return s
}

func (s *NodeInfo) SetAnnotations(v []*Annotation) *NodeInfo {
	s.Annotations = v
	return s
}

func (s *NodeInfo) SetCreatedTime(v string) *NodeInfo {
	s.CreatedTime = &v
	return s
}

func (s *NodeInfo) SetSystemInfos(v []*Annotation) *NodeInfo {
	s.SystemInfos = v
	return s
}

func (s *NodeInfo) SetMaxPodAmount(v int64) *NodeInfo {
	s.MaxPodAmount = &v
	return s
}

func (s *NodeInfo) SetRunningPodAmount(v int64) *NodeInfo {
	s.RunningPodAmount = &v
	return s
}

// 机构应用发布结果
type TenantAppReleaseData struct {
	// 是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty" require:"true"`
	// 机构名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty" require:"true"`
	// 发布单ID
	ReleaseId *string `json:"release_id,omitempty" xml:"release_id,omitempty" require:"true"`
	// 环境
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s TenantAppReleaseData) String() string {
	return tea.Prettify(s)
}

func (s TenantAppReleaseData) GoString() string {
	return s.String()
}

func (s *TenantAppReleaseData) SetSuccess(v bool) *TenantAppReleaseData {
	s.Success = &v
	return s
}

func (s *TenantAppReleaseData) SetTenant(v string) *TenantAppReleaseData {
	s.Tenant = &v
	return s
}

func (s *TenantAppReleaseData) SetReleaseId(v string) *TenantAppReleaseData {
	s.ReleaseId = &v
	return s
}

func (s *TenantAppReleaseData) SetWorkspaceGroup(v string) *TenantAppReleaseData {
	s.WorkspaceGroup = &v
	return s
}

type BindAppserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty" require:"true"`
	// 应用服务名称
	AppServiceName *string `json:"app_service_name,omitempty" xml:"app_service_name,omitempty" require:"true"`
	// 部署单元名称列表。 n代表第n个应用的名称，n从1开始，最大100。每个部署单元名称最大60个UTF-8字符。如果要输入多个部署单元，使用如下形式：cell_ids.1=RZ01A&cell_ids.2=RZ02B
	CellIds []*string `json:"cell_ids,omitempty" xml:"cell_ids,omitempty" require:"true" type:"Repeated"`
	// 工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s BindAppserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s BindAppserviceRequest) GoString() string {
	return s.String()
}

func (s *BindAppserviceRequest) SetAuthToken(v string) *BindAppserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *BindAppserviceRequest) SetApplicationName(v string) *BindAppserviceRequest {
	s.ApplicationName = &v
	return s
}

func (s *BindAppserviceRequest) SetAppServiceName(v string) *BindAppserviceRequest {
	s.AppServiceName = &v
	return s
}

func (s *BindAppserviceRequest) SetCellIds(v []*string) *BindAppserviceRequest {
	s.CellIds = v
	return s
}

func (s *BindAppserviceRequest) SetWorkspace(v string) *BindAppserviceRequest {
	s.Workspace = &v
	return s
}

type BindAppserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BindAppserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s BindAppserviceResponse) GoString() string {
	return s.String()
}

func (s *BindAppserviceResponse) SetReqMsgId(v string) *BindAppserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BindAppserviceResponse) SetResultCode(v string) *BindAppserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *BindAppserviceResponse) SetResultMsg(v string) *BindAppserviceResponse {
	s.ResultMsg = &v
	return s
}

type UnbindAppserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty" require:"true"`
	// 应用服务名称
	AppServiceName *string `json:"app_service_name,omitempty" xml:"app_service_name,omitempty" require:"true"`
	// 部署单元名称列表。 n代表第n个应用的名称，n从1开始，最大100。每个部署单元名称最大60个UTF-8字符。如果要输入多个部署单元，使用如下形式：cell_ids.1=RZ01A&cell_ids.2=RZ02B
	CellIds []*string `json:"cell_ids,omitempty" xml:"cell_ids,omitempty" require:"true" type:"Repeated"`
	// 工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s UnbindAppserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindAppserviceRequest) GoString() string {
	return s.String()
}

func (s *UnbindAppserviceRequest) SetAuthToken(v string) *UnbindAppserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *UnbindAppserviceRequest) SetApplicationName(v string) *UnbindAppserviceRequest {
	s.ApplicationName = &v
	return s
}

func (s *UnbindAppserviceRequest) SetAppServiceName(v string) *UnbindAppserviceRequest {
	s.AppServiceName = &v
	return s
}

func (s *UnbindAppserviceRequest) SetCellIds(v []*string) *UnbindAppserviceRequest {
	s.CellIds = v
	return s
}

func (s *UnbindAppserviceRequest) SetWorkspace(v string) *UnbindAppserviceRequest {
	s.Workspace = &v
	return s
}

type UnbindAppserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UnbindAppserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindAppserviceResponse) GoString() string {
	return s.String()
}

func (s *UnbindAppserviceResponse) SetReqMsgId(v string) *UnbindAppserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UnbindAppserviceResponse) SetResultCode(v string) *UnbindAppserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *UnbindAppserviceResponse) SetResultMsg(v string) *UnbindAppserviceResponse {
	s.ResultMsg = &v
	return s
}

type CreateAppopsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 执行运维操作的目标应用列表,可通过services指定应用下待运维的应用服务实例. 如果要指定多个应用, 使用如下形式: applications.1.name=app1&applications.2.name=app2&applications.2.services.1.name=app2-sv1&applications.2.services.1.workspace=shdev
	Applications []*Application `json:"applications,omitempty" xml:"applications,omitempty" type:"Repeated"`
	// 是否自动执行运维单, 默认为false.当设置为true是,创建完成并初始化成功后会自动执行该运维单.
	AutoExecution *bool `json:"auto_execution,omitempty" xml:"auto_execution,omitempty"`
	// 执行运维操作的目标机器id列表。如果要输入多个机器，使用如下形式：computers.1.id=000112367&computers.2.id=000112367
	Computers []*string `json:"computers,omitempty" xml:"computers,omitempty" type:"Repeated"`
	// 应用运维的操作类型，取值列表：ONLINE：上线应用，OFFLINE：下线应用，RESTART:重启应用，DEPLOY_STATIC_RESOURCE：部署静态资源
	OpsAction *string `json:"ops_action,omitempty" xml:"ops_action,omitempty" require:"true"`
	// 执行ops_action所需要的参数。
	OpsActionParams []*OpsParam `json:"ops_action_params,omitempty" xml:"ops_action_params,omitempty" type:"Repeated"`
	// 应用运维的维度，有两种取值：APPLICATION和MACHINE。设置为APPLICATION，表示在非应用服务环境下该应用执行该应用运维操作；设置为MACHINE，表示应用下的一台或多台机器执行该应用运维操作。
	OpsDemension *string `json:"ops_demension,omitempty" xml:"ops_demension,omitempty" require:"true"`
	// 应用运维单标题
	Title *string `json:"title,omitempty" xml:"title,omitempty" require:"true"`
	// 工作空间组名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// Map<String, String> 序列化后字符串
	Context *string `json:"context,omitempty" xml:"context,omitempty"`
	// 机器分组策略，默认采用快速分组
	// QUICK         -     快速分组
	// ALL_ONE    - 共分一组
	// EACH_ONE - 每台一组
	//
	GroupStrategy *string `json:"group_strategy,omitempty" xml:"group_strategy,omitempty"`
}

func (s CreateAppopsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAppopsRequest) GoString() string {
	return s.String()
}

func (s *CreateAppopsRequest) SetAuthToken(v string) *CreateAppopsRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAppopsRequest) SetApplications(v []*Application) *CreateAppopsRequest {
	s.Applications = v
	return s
}

func (s *CreateAppopsRequest) SetAutoExecution(v bool) *CreateAppopsRequest {
	s.AutoExecution = &v
	return s
}

func (s *CreateAppopsRequest) SetComputers(v []*string) *CreateAppopsRequest {
	s.Computers = v
	return s
}

func (s *CreateAppopsRequest) SetOpsAction(v string) *CreateAppopsRequest {
	s.OpsAction = &v
	return s
}

func (s *CreateAppopsRequest) SetOpsActionParams(v []*OpsParam) *CreateAppopsRequest {
	s.OpsActionParams = v
	return s
}

func (s *CreateAppopsRequest) SetOpsDemension(v string) *CreateAppopsRequest {
	s.OpsDemension = &v
	return s
}

func (s *CreateAppopsRequest) SetTitle(v string) *CreateAppopsRequest {
	s.Title = &v
	return s
}

func (s *CreateAppopsRequest) SetWorkspaceGroup(v string) *CreateAppopsRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *CreateAppopsRequest) SetContext(v string) *CreateAppopsRequest {
	s.Context = &v
	return s
}

func (s *CreateAppopsRequest) SetGroupStrategy(v string) *CreateAppopsRequest {
	s.GroupStrategy = &v
	return s
}

type CreateAppopsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建完成的运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
}

func (s CreateAppopsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAppopsResponse) GoString() string {
	return s.String()
}

func (s *CreateAppopsResponse) SetReqMsgId(v string) *CreateAppopsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAppopsResponse) SetResultCode(v string) *CreateAppopsResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAppopsResponse) SetResultMsg(v string) *CreateAppopsResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAppopsResponse) SetOperationId(v string) *CreateAppopsResponse {
	s.OperationId = &v
	return s
}

type GetAppopsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
}

func (s GetAppopsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppopsRequest) GoString() string {
	return s.String()
}

func (s *GetAppopsRequest) SetAuthToken(v string) *GetAppopsRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAppopsRequest) SetOperationId(v string) *GetAppopsRequest {
	s.OperationId = &v
	return s
}

type GetAppopsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 此运维操作中所有被操作的应用详情，以操作链的形式体现
	ApplicationChains []*OpsApplicationChain `json:"application_chains,omitempty" xml:"application_chains,omitempty" require:"true" type:"Repeated"`
	// 运维操作执行者
	Executor *string `json:"executor,omitempty" xml:"executor,omitempty" require:"true"`
	// 应用运维的操作类型，取值列表：ONLINE：上线应用，OFFLINE：下线应用，RESTART:重启应用，DEPLOY_STATIC_RESOURCE：部署静态资源
	OpsAction *string `json:"ops_action,omitempty" xml:"ops_action,omitempty" require:"true"`
	// 应用运维的维度，有两种取值：APPLICATION和MACHINE。设置为APPLICATION，表示对整个应用都执行该应用运维操作；设置为MACHINE，表示应用下的一台或多台机器执行改应用运维操作。
	OpsDimension *string `json:"ops_dimension,omitempty" xml:"ops_dimension,omitempty" require:"true"`
	// 部署单状态。取值列表： INITING：初始化中； INIT_FAILED：初始化失败； INITED：初始化完成； EXECUTING：执行中； SUCCESS：执行成功； FAILED：执行失败； CANCELING：取消中； CANCELED：已取消
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 应用运维单标题
	Title *string `json:"title,omitempty" xml:"title,omitempty" require:"true"`
}

func (s GetAppopsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppopsResponse) GoString() string {
	return s.String()
}

func (s *GetAppopsResponse) SetReqMsgId(v string) *GetAppopsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppopsResponse) SetResultCode(v string) *GetAppopsResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppopsResponse) SetResultMsg(v string) *GetAppopsResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppopsResponse) SetApplicationChains(v []*OpsApplicationChain) *GetAppopsResponse {
	s.ApplicationChains = v
	return s
}

func (s *GetAppopsResponse) SetExecutor(v string) *GetAppopsResponse {
	s.Executor = &v
	return s
}

func (s *GetAppopsResponse) SetOpsAction(v string) *GetAppopsResponse {
	s.OpsAction = &v
	return s
}

func (s *GetAppopsResponse) SetOpsDimension(v string) *GetAppopsResponse {
	s.OpsDimension = &v
	return s
}

func (s *GetAppopsResponse) SetStatus(v string) *GetAppopsResponse {
	s.Status = &v
	return s
}

func (s *GetAppopsResponse) SetTitle(v string) *GetAppopsResponse {
	s.Title = &v
	return s
}

type GetAppopsApplicationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 待查询的应用名称，必须是运维单中包含的应用
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty" require:"true"`
	// 运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
}

func (s GetAppopsApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppopsApplicationRequest) GoString() string {
	return s.String()
}

func (s *GetAppopsApplicationRequest) SetAuthToken(v string) *GetAppopsApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAppopsApplicationRequest) SetApplicationName(v string) *GetAppopsApplicationRequest {
	s.ApplicationName = &v
	return s
}

func (s *GetAppopsApplicationRequest) SetOperationId(v string) *GetAppopsApplicationRequest {
	s.OperationId = &v
	return s
}

type GetAppopsApplicationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 此应用下所有计算容器分组运维状态详情
	Groups []*OpsGroup `json:"groups,omitempty" xml:"groups,omitempty" type:"Repeated"`
	// 应用当前运维状态。取值列表：INITING：初始化中；INIT_FAILED：初始化失败；INITED：初始化完成；EXECUTING：执行中；SUCCESS：执行成功；FAILED：执行失败
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s GetAppopsApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppopsApplicationResponse) GoString() string {
	return s.String()
}

func (s *GetAppopsApplicationResponse) SetReqMsgId(v string) *GetAppopsApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppopsApplicationResponse) SetResultCode(v string) *GetAppopsApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppopsApplicationResponse) SetResultMsg(v string) *GetAppopsApplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppopsApplicationResponse) SetGroups(v []*OpsGroup) *GetAppopsApplicationResponse {
	s.Groups = v
	return s
}

func (s *GetAppopsApplicationResponse) SetStatus(v string) *GetAppopsApplicationResponse {
	s.Status = &v
	return s
}

type StartAppopsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布单或运维单time_series_id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
	// 操作人，lks1.23.0才支持
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
}

func (s StartAppopsRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAppopsRequest) GoString() string {
	return s.String()
}

func (s *StartAppopsRequest) SetAuthToken(v string) *StartAppopsRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAppopsRequest) SetOperationId(v string) *StartAppopsRequest {
	s.OperationId = &v
	return s
}

func (s *StartAppopsRequest) SetOperator(v string) *StartAppopsRequest {
	s.Operator = &v
	return s
}

type StartAppopsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartAppopsResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAppopsResponse) GoString() string {
	return s.String()
}

func (s *StartAppopsResponse) SetReqMsgId(v string) *StartAppopsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAppopsResponse) SetResultCode(v string) *StartAppopsResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAppopsResponse) SetResultMsg(v string) *StartAppopsResponse {
	s.ResultMsg = &v
	return s
}

type ReinitAppopsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
}

func (s ReinitAppopsRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitAppopsRequest) GoString() string {
	return s.String()
}

func (s *ReinitAppopsRequest) SetAuthToken(v string) *ReinitAppopsRequest {
	s.AuthToken = &v
	return s
}

func (s *ReinitAppopsRequest) SetOperationId(v string) *ReinitAppopsRequest {
	s.OperationId = &v
	return s
}

type ReinitAppopsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ReinitAppopsResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitAppopsResponse) GoString() string {
	return s.String()
}

func (s *ReinitAppopsResponse) SetReqMsgId(v string) *ReinitAppopsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReinitAppopsResponse) SetResultCode(v string) *ReinitAppopsResponse {
	s.ResultCode = &v
	return s
}

func (s *ReinitAppopsResponse) SetResultMsg(v string) *ReinitAppopsResponse {
	s.ResultMsg = &v
	return s
}

type CancelAppopsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
	// 取消原因。长度不超过100个UTF-8字符
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty" require:"true"`
	// 操作人账号，lks1.23.0才支持
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
}

func (s CancelAppopsRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelAppopsRequest) GoString() string {
	return s.String()
}

func (s *CancelAppopsRequest) SetAuthToken(v string) *CancelAppopsRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelAppopsRequest) SetOperationId(v string) *CancelAppopsRequest {
	s.OperationId = &v
	return s
}

func (s *CancelAppopsRequest) SetReason(v string) *CancelAppopsRequest {
	s.Reason = &v
	return s
}

func (s *CancelAppopsRequest) SetOperator(v string) *CancelAppopsRequest {
	s.Operator = &v
	return s
}

type CancelAppopsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CancelAppopsResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelAppopsResponse) GoString() string {
	return s.String()
}

func (s *CancelAppopsResponse) SetReqMsgId(v string) *CancelAppopsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelAppopsResponse) SetResultCode(v string) *CancelAppopsResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelAppopsResponse) SetResultMsg(v string) *CancelAppopsResponse {
	s.ResultMsg = &v
	return s
}

type RetryAppopsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
	// 操作人账号，lks1.23.0才支持
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
}

func (s RetryAppopsRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryAppopsRequest) GoString() string {
	return s.String()
}

func (s *RetryAppopsRequest) SetAuthToken(v string) *RetryAppopsRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryAppopsRequest) SetOperationId(v string) *RetryAppopsRequest {
	s.OperationId = &v
	return s
}

func (s *RetryAppopsRequest) SetOperator(v string) *RetryAppopsRequest {
	s.Operator = &v
	return s
}

type RetryAppopsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RetryAppopsResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryAppopsResponse) GoString() string {
	return s.String()
}

func (s *RetryAppopsResponse) SetReqMsgId(v string) *RetryAppopsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryAppopsResponse) SetResultCode(v string) *RetryAppopsResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryAppopsResponse) SetResultMsg(v string) *RetryAppopsResponse {
	s.ResultMsg = &v
	return s
}

type GetDeploymentRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
}

func (s GetDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentRequest) GoString() string {
	return s.String()
}

func (s *GetDeploymentRequest) SetAuthToken(v string) *GetDeploymentRequest {
	s.AuthToken = &v
	return s
}

func (s *GetDeploymentRequest) SetOperationId(v string) *GetDeploymentRequest {
	s.OperationId = &v
	return s
}

type GetDeploymentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 操作执行者
	Executor *string `json:"executor,omitempty" xml:"executor,omitempty" require:"true"`
	//
	//                   发布单状态。取值列表：INITING：初始化中；INIT_FAILED：初始化失败；INITED：初始化完成；EXECUTING：执行中；SUCCEEDED：执行成功；FAILED：执行失败；CANCELING：取消中；CANCELED：已取消
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 标题
	Title *string `json:"title,omitempty" xml:"title,omitempty" require:"true"`
	// 此发布部署操作中所有被操作的应用详情，以操作链的形式体现
	ApplicationChains []*OpsApplicationChain `json:"application_chains,omitempty" xml:"application_chains,omitempty" require:"true" type:"Repeated"`
}

func (s GetDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentResponse) GoString() string {
	return s.String()
}

func (s *GetDeploymentResponse) SetReqMsgId(v string) *GetDeploymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetDeploymentResponse) SetResultCode(v string) *GetDeploymentResponse {
	s.ResultCode = &v
	return s
}

func (s *GetDeploymentResponse) SetResultMsg(v string) *GetDeploymentResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetDeploymentResponse) SetExecutor(v string) *GetDeploymentResponse {
	s.Executor = &v
	return s
}

func (s *GetDeploymentResponse) SetStatus(v string) *GetDeploymentResponse {
	s.Status = &v
	return s
}

func (s *GetDeploymentResponse) SetTitle(v string) *GetDeploymentResponse {
	s.Title = &v
	return s
}

func (s *GetDeploymentResponse) SetApplicationChains(v []*OpsApplicationChain) *GetDeploymentResponse {
	s.ApplicationChains = v
	return s
}

type GetDeploymentApplicationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
	// 待查询的应用名称，必须是部署单中包含的应用
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty" require:"true"`
}

func (s GetDeploymentApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentApplicationRequest) GoString() string {
	return s.String()
}

func (s *GetDeploymentApplicationRequest) SetAuthToken(v string) *GetDeploymentApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *GetDeploymentApplicationRequest) SetOperationId(v string) *GetDeploymentApplicationRequest {
	s.OperationId = &v
	return s
}

func (s *GetDeploymentApplicationRequest) SetApplicationName(v string) *GetDeploymentApplicationRequest {
	s.ApplicationName = &v
	return s
}

type GetDeploymentApplicationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	//                   应用当前部署状态。取值列表：INITING：初始化中；INIT_FAILED：初始化失败；INITED：初始化完成；EXECUTING：执行中；SUCCEEDED：执行成功；FAILED：执行失败
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	//
	//                   应用发布版本
	//
	Version *string `json:"version,omitempty" xml:"version,omitempty" require:"true"`
	// 此应用下所有计算容器分组部署状态详情
	Groups []*OpsGroup `json:"groups,omitempty" xml:"groups,omitempty" require:"true" type:"Repeated"`
	// 应用前置任务
	PreTasks []*OpsPrePostTask `json:"pre_tasks,omitempty" xml:"pre_tasks,omitempty" require:"true" type:"Repeated"`
	// 应用后置任务
	PostTasks []*OpsPrePostTask `json:"post_tasks,omitempty" xml:"post_tasks,omitempty" require:"true" type:"Repeated"`
}

func (s GetDeploymentApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentApplicationResponse) GoString() string {
	return s.String()
}

func (s *GetDeploymentApplicationResponse) SetReqMsgId(v string) *GetDeploymentApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetDeploymentApplicationResponse) SetResultCode(v string) *GetDeploymentApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *GetDeploymentApplicationResponse) SetResultMsg(v string) *GetDeploymentApplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetDeploymentApplicationResponse) SetStatus(v string) *GetDeploymentApplicationResponse {
	s.Status = &v
	return s
}

func (s *GetDeploymentApplicationResponse) SetVersion(v string) *GetDeploymentApplicationResponse {
	s.Version = &v
	return s
}

func (s *GetDeploymentApplicationResponse) SetGroups(v []*OpsGroup) *GetDeploymentApplicationResponse {
	s.Groups = v
	return s
}

func (s *GetDeploymentApplicationResponse) SetPreTasks(v []*OpsPrePostTask) *GetDeploymentApplicationResponse {
	s.PreTasks = v
	return s
}

func (s *GetDeploymentApplicationResponse) SetPostTasks(v []*OpsPrePostTask) *GetDeploymentApplicationResponse {
	s.PostTasks = v
	return s
}

type GetDeploymentRollbackRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
	// 待查询的应用名称，必须是部署单中包含的应用
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty" require:"true"`
}

func (s GetDeploymentRollbackRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentRollbackRequest) GoString() string {
	return s.String()
}

func (s *GetDeploymentRollbackRequest) SetAuthToken(v string) *GetDeploymentRollbackRequest {
	s.AuthToken = &v
	return s
}

func (s *GetDeploymentRollbackRequest) SetOperationId(v string) *GetDeploymentRollbackRequest {
	s.OperationId = &v
	return s
}

func (s *GetDeploymentRollbackRequest) SetApplicationName(v string) *GetDeploymentRollbackRequest {
	s.ApplicationName = &v
	return s
}

type GetDeploymentRollbackResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	//                   应用当前部署状态。取值列表：INITING：初始化中；INIT_FAILED：初始化失败；INITED：初始化完成；EXECUTING：执行中；SUCCEEDED：执行成功；FAILED：执行失败
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 应用回滚版本
	Version *string `json:"version,omitempty" xml:"version,omitempty" require:"true"`
	// 此应用下所有计算容器分组部署状态详情
	Groups []*OpsGroup `json:"groups,omitempty" xml:"groups,omitempty" require:"true" type:"Repeated"`
	// 应用前置任务
	PreTasks []*OpsPrePostTask `json:"pre_tasks,omitempty" xml:"pre_tasks,omitempty" require:"true" type:"Repeated"`
	// 应用后置任务
	PostTasks []*OpsPrePostTask `json:"post_tasks,omitempty" xml:"post_tasks,omitempty" require:"true" type:"Repeated"`
}

func (s GetDeploymentRollbackResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentRollbackResponse) GoString() string {
	return s.String()
}

func (s *GetDeploymentRollbackResponse) SetReqMsgId(v string) *GetDeploymentRollbackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetDeploymentRollbackResponse) SetResultCode(v string) *GetDeploymentRollbackResponse {
	s.ResultCode = &v
	return s
}

func (s *GetDeploymentRollbackResponse) SetResultMsg(v string) *GetDeploymentRollbackResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetDeploymentRollbackResponse) SetStatus(v string) *GetDeploymentRollbackResponse {
	s.Status = &v
	return s
}

func (s *GetDeploymentRollbackResponse) SetVersion(v string) *GetDeploymentRollbackResponse {
	s.Version = &v
	return s
}

func (s *GetDeploymentRollbackResponse) SetGroups(v []*OpsGroup) *GetDeploymentRollbackResponse {
	s.Groups = v
	return s
}

func (s *GetDeploymentRollbackResponse) SetPreTasks(v []*OpsPrePostTask) *GetDeploymentRollbackResponse {
	s.PreTasks = v
	return s
}

func (s *GetDeploymentRollbackResponse) SetPostTasks(v []*OpsPrePostTask) *GetDeploymentRollbackResponse {
	s.PostTasks = v
	return s
}

type QueryDeploymentRollbackableRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
	// 待查询的应用名称，必须是部署单中包含的应用
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty" require:"true"`
}

func (s QueryDeploymentRollbackableRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeploymentRollbackableRequest) GoString() string {
	return s.String()
}

func (s *QueryDeploymentRollbackableRequest) SetAuthToken(v string) *QueryDeploymentRollbackableRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDeploymentRollbackableRequest) SetOperationId(v string) *QueryDeploymentRollbackableRequest {
	s.OperationId = &v
	return s
}

func (s *QueryDeploymentRollbackableRequest) SetApplicationName(v string) *QueryDeploymentRollbackableRequest {
	s.ApplicationName = &v
	return s
}

type QueryDeploymentRollbackableResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可回滚的版本
	Versions []*string `json:"versions,omitempty" xml:"versions,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeploymentRollbackableResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeploymentRollbackableResponse) GoString() string {
	return s.String()
}

func (s *QueryDeploymentRollbackableResponse) SetReqMsgId(v string) *QueryDeploymentRollbackableResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDeploymentRollbackableResponse) SetResultCode(v string) *QueryDeploymentRollbackableResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDeploymentRollbackableResponse) SetResultMsg(v string) *QueryDeploymentRollbackableResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDeploymentRollbackableResponse) SetVersions(v []*string) *QueryDeploymentRollbackableResponse {
	s.Versions = v
	return s
}

type RollbackDeploymentApplicationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
	// 待回滚的应用名称，必须是部署单中包含的应用
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty" require:"true"`
	// 应用的回滚版本，如果不指定，默认回滚到最近一次发布成功的版本
	VersionNo *string `json:"version_no,omitempty" xml:"version_no,omitempty"`
	// 回滚时的分组策略，取值为：
	//                              QUICK：快速分组；
	//                              EACH_ONE：每台一组；
	//                              UNIT：按逻辑单元分组；
	//                              CELL：按部署单元分组；
	//                              默认为QUICK
	//
	GroupStrategy *string `json:"group_strategy,omitempty" xml:"group_strategy,omitempty"`
	// 分组数，默认为3
	GroupCount *int `json:"group_count,omitempty" xml:"group_count,omitempty"`
	// 回滚原因
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty" require:"true"`
	// 操作人
	OperatorName *string `json:"operator_name,omitempty" xml:"operator_name,omitempty" require:"true"`
}

func (s RollbackDeploymentApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackDeploymentApplicationRequest) GoString() string {
	return s.String()
}

func (s *RollbackDeploymentApplicationRequest) SetAuthToken(v string) *RollbackDeploymentApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *RollbackDeploymentApplicationRequest) SetOperationId(v string) *RollbackDeploymentApplicationRequest {
	s.OperationId = &v
	return s
}

func (s *RollbackDeploymentApplicationRequest) SetApplicationName(v string) *RollbackDeploymentApplicationRequest {
	s.ApplicationName = &v
	return s
}

func (s *RollbackDeploymentApplicationRequest) SetVersionNo(v string) *RollbackDeploymentApplicationRequest {
	s.VersionNo = &v
	return s
}

func (s *RollbackDeploymentApplicationRequest) SetGroupStrategy(v string) *RollbackDeploymentApplicationRequest {
	s.GroupStrategy = &v
	return s
}

func (s *RollbackDeploymentApplicationRequest) SetGroupCount(v int) *RollbackDeploymentApplicationRequest {
	s.GroupCount = &v
	return s
}

func (s *RollbackDeploymentApplicationRequest) SetReason(v string) *RollbackDeploymentApplicationRequest {
	s.Reason = &v
	return s
}

func (s *RollbackDeploymentApplicationRequest) SetOperatorName(v string) *RollbackDeploymentApplicationRequest {
	s.OperatorName = &v
	return s
}

type RollbackDeploymentApplicationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RollbackDeploymentApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackDeploymentApplicationResponse) GoString() string {
	return s.String()
}

func (s *RollbackDeploymentApplicationResponse) SetReqMsgId(v string) *RollbackDeploymentApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RollbackDeploymentApplicationResponse) SetResultCode(v string) *RollbackDeploymentApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *RollbackDeploymentApplicationResponse) SetResultMsg(v string) *RollbackDeploymentApplicationResponse {
	s.ResultMsg = &v
	return s
}

type PushFlowRouteclientRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 流量类型
	// NORMAL：正常流量
	// PRESS：压测流量
	FlowType *string `json:"flow_type,omitempty" xml:"flow_type,omitempty" require:"true"`
	// 异构机房列表
	IsomerismSites []*string `json:"isomerism_sites,omitempty" xml:"isomerism_sites,omitempty" type:"Repeated"`
	// 操作人
	OperatorName *string `json:"operator_name,omitempty" xml:"operator_name,omitempty" require:"true"`
	// 推送类型
	// DRM：DRM推送
	// JMX：JMX推送
	// SPANNER：SPANNER推送
	PushType *string `json:"push_type,omitempty" xml:"push_type,omitempty" require:"true"`
	// 工作空间
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 部署单元组的流量规则
	UnitFlows []*UnitFlow `json:"unit_flows,omitempty" xml:"unit_flows,omitempty" require:"true" type:"Repeated"`
}

func (s PushFlowRouteclientRequest) String() string {
	return tea.Prettify(s)
}

func (s PushFlowRouteclientRequest) GoString() string {
	return s.String()
}

func (s *PushFlowRouteclientRequest) SetAuthToken(v string) *PushFlowRouteclientRequest {
	s.AuthToken = &v
	return s
}

func (s *PushFlowRouteclientRequest) SetFlowType(v string) *PushFlowRouteclientRequest {
	s.FlowType = &v
	return s
}

func (s *PushFlowRouteclientRequest) SetIsomerismSites(v []*string) *PushFlowRouteclientRequest {
	s.IsomerismSites = v
	return s
}

func (s *PushFlowRouteclientRequest) SetOperatorName(v string) *PushFlowRouteclientRequest {
	s.OperatorName = &v
	return s
}

func (s *PushFlowRouteclientRequest) SetPushType(v string) *PushFlowRouteclientRequest {
	s.PushType = &v
	return s
}

func (s *PushFlowRouteclientRequest) SetWorkspaceGroup(v string) *PushFlowRouteclientRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *PushFlowRouteclientRequest) SetUnitFlows(v []*UnitFlow) *PushFlowRouteclientRequest {
	s.UnitFlows = v
	return s
}

type PushFlowRouteclientResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s PushFlowRouteclientResponse) String() string {
	return tea.Prettify(s)
}

func (s PushFlowRouteclientResponse) GoString() string {
	return s.String()
}

func (s *PushFlowRouteclientResponse) SetReqMsgId(v string) *PushFlowRouteclientResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PushFlowRouteclientResponse) SetResultCode(v string) *PushFlowRouteclientResponse {
	s.ResultCode = &v
	return s
}

func (s *PushFlowRouteclientResponse) SetResultMsg(v string) *PushFlowRouteclientResponse {
	s.ResultMsg = &v
	return s
}

type CreateFederationNamespaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// k8s resource labels
	Labels []*Label `json:"labels,omitempty" xml:"labels,omitempty" type:"Repeated"`
	// FedNamespace名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// workspaceGroup名称
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s CreateFederationNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFederationNamespaceRequest) GoString() string {
	return s.String()
}

func (s *CreateFederationNamespaceRequest) SetAuthToken(v string) *CreateFederationNamespaceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFederationNamespaceRequest) SetLabels(v []*Label) *CreateFederationNamespaceRequest {
	s.Labels = v
	return s
}

func (s *CreateFederationNamespaceRequest) SetName(v string) *CreateFederationNamespaceRequest {
	s.Name = &v
	return s
}

func (s *CreateFederationNamespaceRequest) SetWorkspaceGroupName(v string) *CreateFederationNamespaceRequest {
	s.WorkspaceGroupName = &v
	return s
}

type CreateFederationNamespaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// fed namespace info
	Data *FedNamespace `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateFederationNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFederationNamespaceResponse) GoString() string {
	return s.String()
}

func (s *CreateFederationNamespaceResponse) SetReqMsgId(v string) *CreateFederationNamespaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFederationNamespaceResponse) SetResultCode(v string) *CreateFederationNamespaceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFederationNamespaceResponse) SetResultMsg(v string) *CreateFederationNamespaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateFederationNamespaceResponse) SetData(v *FedNamespace) *CreateFederationNamespaceResponse {
	s.Data = v
	return s
}

type UpdateFederationNamespaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// fed namespace labels
	Labels []*Label `json:"labels,omitempty" xml:"labels,omitempty" type:"Repeated"`
	// Fed Namespace name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// workspace group name
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s UpdateFederationNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFederationNamespaceRequest) GoString() string {
	return s.String()
}

func (s *UpdateFederationNamespaceRequest) SetAuthToken(v string) *UpdateFederationNamespaceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateFederationNamespaceRequest) SetLabels(v []*Label) *UpdateFederationNamespaceRequest {
	s.Labels = v
	return s
}

func (s *UpdateFederationNamespaceRequest) SetName(v string) *UpdateFederationNamespaceRequest {
	s.Name = &v
	return s
}

func (s *UpdateFederationNamespaceRequest) SetWorkspaceGroupName(v string) *UpdateFederationNamespaceRequest {
	s.WorkspaceGroupName = &v
	return s
}

type UpdateFederationNamespaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// fed namespace data
	Data *FedNamespace `json:"data,omitempty" xml:"data,omitempty"`
}

func (s UpdateFederationNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFederationNamespaceResponse) GoString() string {
	return s.String()
}

func (s *UpdateFederationNamespaceResponse) SetReqMsgId(v string) *UpdateFederationNamespaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateFederationNamespaceResponse) SetResultCode(v string) *UpdateFederationNamespaceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateFederationNamespaceResponse) SetResultMsg(v string) *UpdateFederationNamespaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateFederationNamespaceResponse) SetData(v *FedNamespace) *UpdateFederationNamespaceResponse {
	s.Data = v
	return s
}

type GetFederationNamespaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// fed namespace name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// workspace group name
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s GetFederationNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFederationNamespaceRequest) GoString() string {
	return s.String()
}

func (s *GetFederationNamespaceRequest) SetAuthToken(v string) *GetFederationNamespaceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetFederationNamespaceRequest) SetName(v string) *GetFederationNamespaceRequest {
	s.Name = &v
	return s
}

func (s *GetFederationNamespaceRequest) SetWorkspaceGroupName(v string) *GetFederationNamespaceRequest {
	s.WorkspaceGroupName = &v
	return s
}

type GetFederationNamespaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// fed namespace info
	Data *FedNamespace `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetFederationNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFederationNamespaceResponse) GoString() string {
	return s.String()
}

func (s *GetFederationNamespaceResponse) SetReqMsgId(v string) *GetFederationNamespaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetFederationNamespaceResponse) SetResultCode(v string) *GetFederationNamespaceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetFederationNamespaceResponse) SetResultMsg(v string) *GetFederationNamespaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetFederationNamespaceResponse) SetData(v *FedNamespace) *GetFederationNamespaceResponse {
	s.Data = v
	return s
}

type DeleteFederationNamespaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// fed namespace name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// workspaceGroup Name
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s DeleteFederationNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFederationNamespaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteFederationNamespaceRequest) SetAuthToken(v string) *DeleteFederationNamespaceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteFederationNamespaceRequest) SetName(v string) *DeleteFederationNamespaceRequest {
	s.Name = &v
	return s
}

func (s *DeleteFederationNamespaceRequest) SetWorkspaceGroupName(v string) *DeleteFederationNamespaceRequest {
	s.WorkspaceGroupName = &v
	return s
}

type DeleteFederationNamespaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 删除操作成功或失败
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteFederationNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFederationNamespaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteFederationNamespaceResponse) SetReqMsgId(v string) *DeleteFederationNamespaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteFederationNamespaceResponse) SetResultCode(v string) *DeleteFederationNamespaceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteFederationNamespaceResponse) SetResultMsg(v string) *DeleteFederationNamespaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteFederationNamespaceResponse) SetData(v bool) *DeleteFederationNamespaceResponse {
	s.Data = &v
	return s
}

type CreateFederationConfigmapRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// Cell name list
	Cells []*string `json:"cells,omitempty" xml:"cells,omitempty" require:"true" type:"Repeated"`
	// FedConfigMap data
	Data []*ConfigMapData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
	// FedConfigMap labels
	Labels []*Label `json:"labels,omitempty" xml:"labels,omitempty" type:"Repeated"`
	// FedConfigMap name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// Federation ConfigMap namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// FedCofigmap Cluster Overrides
	Overrides *FedConfigMapOverrideList `json:"overrides,omitempty" xml:"overrides,omitempty"`
	// workspace group 名称
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s CreateFederationConfigmapRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFederationConfigmapRequest) GoString() string {
	return s.String()
}

func (s *CreateFederationConfigmapRequest) SetAuthToken(v string) *CreateFederationConfigmapRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFederationConfigmapRequest) SetCells(v []*string) *CreateFederationConfigmapRequest {
	s.Cells = v
	return s
}

func (s *CreateFederationConfigmapRequest) SetData(v []*ConfigMapData) *CreateFederationConfigmapRequest {
	s.Data = v
	return s
}

func (s *CreateFederationConfigmapRequest) SetLabels(v []*Label) *CreateFederationConfigmapRequest {
	s.Labels = v
	return s
}

func (s *CreateFederationConfigmapRequest) SetName(v string) *CreateFederationConfigmapRequest {
	s.Name = &v
	return s
}

func (s *CreateFederationConfigmapRequest) SetNamespace(v string) *CreateFederationConfigmapRequest {
	s.Namespace = &v
	return s
}

func (s *CreateFederationConfigmapRequest) SetOverrides(v *FedConfigMapOverrideList) *CreateFederationConfigmapRequest {
	s.Overrides = v
	return s
}

func (s *CreateFederationConfigmapRequest) SetWorkspaceGroupName(v string) *CreateFederationConfigmapRequest {
	s.WorkspaceGroupName = &v
	return s
}

type CreateFederationConfigmapResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// FedConfigMap 数据
	Configmap *FedConfigmap `json:"configmap,omitempty" xml:"configmap,omitempty"`
}

func (s CreateFederationConfigmapResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFederationConfigmapResponse) GoString() string {
	return s.String()
}

func (s *CreateFederationConfigmapResponse) SetReqMsgId(v string) *CreateFederationConfigmapResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFederationConfigmapResponse) SetResultCode(v string) *CreateFederationConfigmapResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFederationConfigmapResponse) SetResultMsg(v string) *CreateFederationConfigmapResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateFederationConfigmapResponse) SetConfigmap(v *FedConfigmap) *CreateFederationConfigmapResponse {
	s.Configmap = v
	return s
}

type UpdateFederationConfigmapRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cell list
	Cells []*string `json:"cells,omitempty" xml:"cells,omitempty" require:"true" type:"Repeated"`
	// FedConfigMap data
	Data []*ConfigMapData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
	// FedConfigMap labels
	Labels []*Label `json:"labels,omitempty" xml:"labels,omitempty" type:"Repeated"`
	// FedConfigMap name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// FedConfigMap命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// FedConfigMap overrides
	Overrides *FedConfigMapOverrideList `json:"overrides,omitempty" xml:"overrides,omitempty"`
	// workspaceGroup名称
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s UpdateFederationConfigmapRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFederationConfigmapRequest) GoString() string {
	return s.String()
}

func (s *UpdateFederationConfigmapRequest) SetAuthToken(v string) *UpdateFederationConfigmapRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateFederationConfigmapRequest) SetCells(v []*string) *UpdateFederationConfigmapRequest {
	s.Cells = v
	return s
}

func (s *UpdateFederationConfigmapRequest) SetData(v []*ConfigMapData) *UpdateFederationConfigmapRequest {
	s.Data = v
	return s
}

func (s *UpdateFederationConfigmapRequest) SetLabels(v []*Label) *UpdateFederationConfigmapRequest {
	s.Labels = v
	return s
}

func (s *UpdateFederationConfigmapRequest) SetName(v string) *UpdateFederationConfigmapRequest {
	s.Name = &v
	return s
}

func (s *UpdateFederationConfigmapRequest) SetNamespace(v string) *UpdateFederationConfigmapRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateFederationConfigmapRequest) SetOverrides(v *FedConfigMapOverrideList) *UpdateFederationConfigmapRequest {
	s.Overrides = v
	return s
}

func (s *UpdateFederationConfigmapRequest) SetWorkspaceGroupName(v string) *UpdateFederationConfigmapRequest {
	s.WorkspaceGroupName = &v
	return s
}

type UpdateFederationConfigmapResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// fedconfigmap data
	Configmap *FedConfigmap `json:"configmap,omitempty" xml:"configmap,omitempty"`
}

func (s UpdateFederationConfigmapResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFederationConfigmapResponse) GoString() string {
	return s.String()
}

func (s *UpdateFederationConfigmapResponse) SetReqMsgId(v string) *UpdateFederationConfigmapResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateFederationConfigmapResponse) SetResultCode(v string) *UpdateFederationConfigmapResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateFederationConfigmapResponse) SetResultMsg(v string) *UpdateFederationConfigmapResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateFederationConfigmapResponse) SetConfigmap(v *FedConfigmap) *UpdateFederationConfigmapResponse {
	s.Configmap = v
	return s
}

type GetFederationConfigmapRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// FedConfigmap name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 所属命名空间名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// workspaceGroup 名称
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s GetFederationConfigmapRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFederationConfigmapRequest) GoString() string {
	return s.String()
}

func (s *GetFederationConfigmapRequest) SetAuthToken(v string) *GetFederationConfigmapRequest {
	s.AuthToken = &v
	return s
}

func (s *GetFederationConfigmapRequest) SetName(v string) *GetFederationConfigmapRequest {
	s.Name = &v
	return s
}

func (s *GetFederationConfigmapRequest) SetNamespace(v string) *GetFederationConfigmapRequest {
	s.Namespace = &v
	return s
}

func (s *GetFederationConfigmapRequest) SetWorkspaceGroupName(v string) *GetFederationConfigmapRequest {
	s.WorkspaceGroupName = &v
	return s
}

type GetFederationConfigmapResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// FedConfigMap获取结果
	Configmap *FedConfigmap `json:"configmap,omitempty" xml:"configmap,omitempty"`
}

func (s GetFederationConfigmapResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFederationConfigmapResponse) GoString() string {
	return s.String()
}

func (s *GetFederationConfigmapResponse) SetReqMsgId(v string) *GetFederationConfigmapResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetFederationConfigmapResponse) SetResultCode(v string) *GetFederationConfigmapResponse {
	s.ResultCode = &v
	return s
}

func (s *GetFederationConfigmapResponse) SetResultMsg(v string) *GetFederationConfigmapResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetFederationConfigmapResponse) SetConfigmap(v *FedConfigmap) *GetFederationConfigmapResponse {
	s.Configmap = v
	return s
}

type DeleteFederationConfigmapRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// FedConfigMap name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// workspaceGroupName
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
	// 所属命名空间名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
}

func (s DeleteFederationConfigmapRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFederationConfigmapRequest) GoString() string {
	return s.String()
}

func (s *DeleteFederationConfigmapRequest) SetAuthToken(v string) *DeleteFederationConfigmapRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteFederationConfigmapRequest) SetName(v string) *DeleteFederationConfigmapRequest {
	s.Name = &v
	return s
}

func (s *DeleteFederationConfigmapRequest) SetWorkspaceGroupName(v string) *DeleteFederationConfigmapRequest {
	s.WorkspaceGroupName = &v
	return s
}

func (s *DeleteFederationConfigmapRequest) SetNamespace(v string) *DeleteFederationConfigmapRequest {
	s.Namespace = &v
	return s
}

type DeleteFederationConfigmapResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 删除结果
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteFederationConfigmapResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFederationConfigmapResponse) GoString() string {
	return s.String()
}

func (s *DeleteFederationConfigmapResponse) SetReqMsgId(v string) *DeleteFederationConfigmapResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteFederationConfigmapResponse) SetResultCode(v string) *DeleteFederationConfigmapResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteFederationConfigmapResponse) SetResultMsg(v string) *DeleteFederationConfigmapResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteFederationConfigmapResponse) SetData(v bool) *DeleteFederationConfigmapResponse {
	s.Data = &v
	return s
}

type ListFederationConfigmapRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// List labelSelector
	LabelSelector *string `json:"label_selector,omitempty" xml:"label_selector,omitempty"`
	// aaaa
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// workspace group name
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s ListFederationConfigmapRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFederationConfigmapRequest) GoString() string {
	return s.String()
}

func (s *ListFederationConfigmapRequest) SetAuthToken(v string) *ListFederationConfigmapRequest {
	s.AuthToken = &v
	return s
}

func (s *ListFederationConfigmapRequest) SetLabelSelector(v string) *ListFederationConfigmapRequest {
	s.LabelSelector = &v
	return s
}

func (s *ListFederationConfigmapRequest) SetNamespace(v string) *ListFederationConfigmapRequest {
	s.Namespace = &v
	return s
}

func (s *ListFederationConfigmapRequest) SetWorkspaceGroupName(v string) *ListFederationConfigmapRequest {
	s.WorkspaceGroupName = &v
	return s
}

type ListFederationConfigmapResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// FedConfigMap List
	Configmaps []*FedConfigmap `json:"configmaps,omitempty" xml:"configmaps,omitempty" type:"Repeated"`
}

func (s ListFederationConfigmapResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFederationConfigmapResponse) GoString() string {
	return s.String()
}

func (s *ListFederationConfigmapResponse) SetReqMsgId(v string) *ListFederationConfigmapResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListFederationConfigmapResponse) SetResultCode(v string) *ListFederationConfigmapResponse {
	s.ResultCode = &v
	return s
}

func (s *ListFederationConfigmapResponse) SetResultMsg(v string) *ListFederationConfigmapResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListFederationConfigmapResponse) SetConfigmaps(v []*FedConfigmap) *ListFederationConfigmapResponse {
	s.Configmaps = v
	return s
}

type ListFederationNamespaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// k8s resource label selector
	LabelSelector *string `json:"label_selector,omitempty" xml:"label_selector,omitempty"`
	// workspace group名称
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s ListFederationNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFederationNamespaceRequest) GoString() string {
	return s.String()
}

func (s *ListFederationNamespaceRequest) SetAuthToken(v string) *ListFederationNamespaceRequest {
	s.AuthToken = &v
	return s
}

func (s *ListFederationNamespaceRequest) SetLabelSelector(v string) *ListFederationNamespaceRequest {
	s.LabelSelector = &v
	return s
}

func (s *ListFederationNamespaceRequest) SetWorkspaceGroupName(v string) *ListFederationNamespaceRequest {
	s.WorkspaceGroupName = &v
	return s
}

type ListFederationNamespaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// fed namespace list
	Data []*FedNamespace `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListFederationNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFederationNamespaceResponse) GoString() string {
	return s.String()
}

func (s *ListFederationNamespaceResponse) SetReqMsgId(v string) *ListFederationNamespaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListFederationNamespaceResponse) SetResultCode(v string) *ListFederationNamespaceResponse {
	s.ResultCode = &v
	return s
}

func (s *ListFederationNamespaceResponse) SetResultMsg(v string) *ListFederationNamespaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListFederationNamespaceResponse) SetData(v []*FedNamespace) *ListFederationNamespaceResponse {
	s.Data = v
	return s
}

type QueryContainerserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 容器服务部署状态。取值可以由多个部署状态组成一个JSON数组，不同状态之间用绊脚逗号(,)隔开，取值范围：
	// . WAITING_FOR_DEPLOY: 待发布
	// . INITIALIZING: 初始化中
	// . INITIALIZED: 初始化完成
	// . INITIALIZE_FAILED: 初始化失败
	// . CONFIRM_WAITING: 待确认
	// . CONFIRMED: 已确认
	// . EXECUTING: 发布中
	// . PAUSED: 暂停
	// . CANCELING: 取消中
	// . CANCELED: 已取消
	// . ROLLBACKING: 回滚中
	// . ROLLBACK_PAUSED: 回滚暂停
	// . ROLLBACKED: 已回滚
	// . SUCCEEDED: 发布完成
	// . FAILED: 发布失败
	// . DELETING: 删除中
	// . DELETE_FAILED: 删除失败
	DeploymentStatus []*string `json:"deployment_status,omitempty" xml:"deployment_status,omitempty" type:"Repeated"`
	// 容器服务元数据状态。取值可以由多个元数据状态组成一个JSON数组，不同状态之间用半角逗号（,）隔开。状态取值范围：
	// . DRAFTED: 草稿
	// . CREATING: 创建中
	// . CREATED: 已创建
	// . UPDATING: 更新中
	// . UPDATED: 已更新
	// . DELETING: 删除中
	// . DELETED: 已删除
	// . DEPLOYED: 已发布
	// . CREATE_FAILED: 创建失败
	// . UPDATE_FAILED: 更新失败
	// . DELETE_FAILED: 删除失败
	MetadataStatus []*string `json:"metadata_status,omitempty" xml:"metadata_status,omitempty" type:"Repeated"`
	// 容器应用服务名称，支持使用通配符*进行模糊搜索。
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 当前命名空间名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 实例状态列表的页码。起始值：1。默认值：1 。
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 分页查询时设置的每页行数。最大值：100。默认值：10。
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前工作空间组名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s QueryContainerserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContainerserviceRequest) GoString() string {
	return s.String()
}

func (s *QueryContainerserviceRequest) SetAuthToken(v string) *QueryContainerserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContainerserviceRequest) SetAppName(v string) *QueryContainerserviceRequest {
	s.AppName = &v
	return s
}

func (s *QueryContainerserviceRequest) SetDeploymentStatus(v []*string) *QueryContainerserviceRequest {
	s.DeploymentStatus = v
	return s
}

func (s *QueryContainerserviceRequest) SetMetadataStatus(v []*string) *QueryContainerserviceRequest {
	s.MetadataStatus = v
	return s
}

func (s *QueryContainerserviceRequest) SetName(v string) *QueryContainerserviceRequest {
	s.Name = &v
	return s
}

func (s *QueryContainerserviceRequest) SetNamespace(v string) *QueryContainerserviceRequest {
	s.Namespace = &v
	return s
}

func (s *QueryContainerserviceRequest) SetPageNumber(v int64) *QueryContainerserviceRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryContainerserviceRequest) SetPageSize(v int64) *QueryContainerserviceRequest {
	s.PageSize = &v
	return s
}

func (s *QueryContainerserviceRequest) SetWorkspaceGroup(v string) *QueryContainerserviceRequest {
	s.WorkspaceGroup = &v
	return s
}

type QueryContainerserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 容器应用服务列表。
	ContainerServiceList []*ContainerServiceBasicInfo `json:"container_service_list,omitempty" xml:"container_service_list,omitempty" type:"Repeated"`
	// 实例列表的页码。
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 输入时设置的每页行数。
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询到的容器应用服务总数。
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryContainerserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContainerserviceResponse) GoString() string {
	return s.String()
}

func (s *QueryContainerserviceResponse) SetReqMsgId(v string) *QueryContainerserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContainerserviceResponse) SetResultCode(v string) *QueryContainerserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContainerserviceResponse) SetResultMsg(v string) *QueryContainerserviceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContainerserviceResponse) SetContainerServiceList(v []*ContainerServiceBasicInfo) *QueryContainerserviceResponse {
	s.ContainerServiceList = v
	return s
}

func (s *QueryContainerserviceResponse) SetPageNumber(v int64) *QueryContainerserviceResponse {
	s.PageNumber = &v
	return s
}

func (s *QueryContainerserviceResponse) SetPageSize(v int64) *QueryContainerserviceResponse {
	s.PageSize = &v
	return s
}

func (s *QueryContainerserviceResponse) SetTotalCount(v int64) *QueryContainerserviceResponse {
	s.TotalCount = &v
	return s
}

type ListMulticlusterMasterclusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace group name
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
}

func (s ListMulticlusterMasterclusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMulticlusterMasterclusterRequest) GoString() string {
	return s.String()
}

func (s *ListMulticlusterMasterclusterRequest) SetAuthToken(v string) *ListMulticlusterMasterclusterRequest {
	s.AuthToken = &v
	return s
}

func (s *ListMulticlusterMasterclusterRequest) SetWorkspaceGroup(v string) *ListMulticlusterMasterclusterRequest {
	s.WorkspaceGroup = &v
	return s
}

type ListMulticlusterMasterclusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// master clusters of different zones
	Data []*MasterClustersOfZone `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListMulticlusterMasterclusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMulticlusterMasterclusterResponse) GoString() string {
	return s.String()
}

func (s *ListMulticlusterMasterclusterResponse) SetReqMsgId(v string) *ListMulticlusterMasterclusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListMulticlusterMasterclusterResponse) SetResultCode(v string) *ListMulticlusterMasterclusterResponse {
	s.ResultCode = &v
	return s
}

func (s *ListMulticlusterMasterclusterResponse) SetResultMsg(v string) *ListMulticlusterMasterclusterResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListMulticlusterMasterclusterResponse) SetData(v []*MasterClustersOfZone) *ListMulticlusterMasterclusterResponse {
	s.Data = v
	return s
}

type InitMulticlusterClusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// federation namespace
	FedNamespace *string `json:"fed_namespace,omitempty" xml:"fed_namespace,omitempty"`
	// master cluster info
	MasterClusterInfo []*MasterCluster `json:"master_cluster_info,omitempty" xml:"master_cluster_info,omitempty" require:"true" type:"Repeated"`
	// workspace group name
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s InitMulticlusterClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s InitMulticlusterClusterRequest) GoString() string {
	return s.String()
}

func (s *InitMulticlusterClusterRequest) SetAuthToken(v string) *InitMulticlusterClusterRequest {
	s.AuthToken = &v
	return s
}

func (s *InitMulticlusterClusterRequest) SetFedNamespace(v string) *InitMulticlusterClusterRequest {
	s.FedNamespace = &v
	return s
}

func (s *InitMulticlusterClusterRequest) SetMasterClusterInfo(v []*MasterCluster) *InitMulticlusterClusterRequest {
	s.MasterClusterInfo = v
	return s
}

func (s *InitMulticlusterClusterRequest) SetWorkspaceGroup(v string) *InitMulticlusterClusterRequest {
	s.WorkspaceGroup = &v
	return s
}

type InitMulticlusterClusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// import cluster success or false
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s InitMulticlusterClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s InitMulticlusterClusterResponse) GoString() string {
	return s.String()
}

func (s *InitMulticlusterClusterResponse) SetReqMsgId(v string) *InitMulticlusterClusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitMulticlusterClusterResponse) SetResultCode(v string) *InitMulticlusterClusterResponse {
	s.ResultCode = &v
	return s
}

func (s *InitMulticlusterClusterResponse) SetResultMsg(v string) *InitMulticlusterClusterResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitMulticlusterClusterResponse) SetData(v bool) *InitMulticlusterClusterResponse {
	s.Data = &v
	return s
}

type ListMulticlusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace group name
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s ListMulticlusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMulticlusterRequest) GoString() string {
	return s.String()
}

func (s *ListMulticlusterRequest) SetAuthToken(v string) *ListMulticlusterRequest {
	s.AuthToken = &v
	return s
}

func (s *ListMulticlusterRequest) SetWorkspaceGroup(v string) *ListMulticlusterRequest {
	s.WorkspaceGroup = &v
	return s
}

type ListMulticlusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// minion cluster infos
	Data []*ClusterInfo `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListMulticlusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMulticlusterResponse) GoString() string {
	return s.String()
}

func (s *ListMulticlusterResponse) SetReqMsgId(v string) *ListMulticlusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListMulticlusterResponse) SetResultCode(v string) *ListMulticlusterResponse {
	s.ResultCode = &v
	return s
}

func (s *ListMulticlusterResponse) SetResultMsg(v string) *ListMulticlusterResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListMulticlusterResponse) SetData(v []*ClusterInfo) *ListMulticlusterResponse {
	s.Data = v
	return s
}

type DeleteContainerserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 最近一次草稿版本。
	DraftedRevision *string `json:"drafted_revision,omitempty" xml:"drafted_revision,omitempty"`
	// 最近一次草稿时间
	DraftedTime *string `json:"drafted_time,omitempty" xml:"drafted_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 容器应用服务名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 当前命名空间名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 提交人。
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 所属工作空间组名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s DeleteContainerserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteContainerserviceRequest) GoString() string {
	return s.String()
}

func (s *DeleteContainerserviceRequest) SetAuthToken(v string) *DeleteContainerserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteContainerserviceRequest) SetDraftedRevision(v string) *DeleteContainerserviceRequest {
	s.DraftedRevision = &v
	return s
}

func (s *DeleteContainerserviceRequest) SetDraftedTime(v string) *DeleteContainerserviceRequest {
	s.DraftedTime = &v
	return s
}

func (s *DeleteContainerserviceRequest) SetName(v string) *DeleteContainerserviceRequest {
	s.Name = &v
	return s
}

func (s *DeleteContainerserviceRequest) SetNamespace(v string) *DeleteContainerserviceRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteContainerserviceRequest) SetOperator(v string) *DeleteContainerserviceRequest {
	s.Operator = &v
	return s
}

func (s *DeleteContainerserviceRequest) SetWorkspaceGroup(v string) *DeleteContainerserviceRequest {
	s.WorkspaceGroup = &v
	return s
}

type DeleteContainerserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteContainerserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteContainerserviceResponse) GoString() string {
	return s.String()
}

func (s *DeleteContainerserviceResponse) SetReqMsgId(v string) *DeleteContainerserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteContainerserviceResponse) SetResultCode(v string) *DeleteContainerserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteContainerserviceResponse) SetResultMsg(v string) *DeleteContainerserviceResponse {
	s.ResultMsg = &v
	return s
}

type CreateContainerserviceDeploymentRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 容器服务列表。
	ContainerServices *SontainerServicesList `json:"container_services,omitempty" xml:"container_services,omitempty" require:"true"`
	// 是否自动执行，默认false
	IsAutoExecute *bool `json:"is_auto_execute,omitempty" xml:"is_auto_execute,omitempty"`
	// 所属命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 默认CLOUD_NATIVE_GROUP_RELEASE
	OpsType *string `json:"ops_type,omitempty" xml:"ops_type,omitempty"`
	// operator调用专用字段，ReleasePlan唯一标识
	ReleasePlanUniqueId *string `json:"release_plan_unique_id,omitempty" xml:"release_plan_unique_id,omitempty"`
	// tenant 名字，operator调用专用字段
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// 发布单名称。
	Title *string `json:"title,omitempty" xml:"title,omitempty" require:"true"`
	// 所属工作空间组名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 审批人账号id
	AssigneeIds []*string `json:"assignee_ids,omitempty" xml:"assignee_ids,omitempty" type:"Repeated"`
	// 操作人账号，lks1.23.0才支持
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
}

func (s CreateContainerserviceDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContainerserviceDeploymentRequest) GoString() string {
	return s.String()
}

func (s *CreateContainerserviceDeploymentRequest) SetAuthToken(v string) *CreateContainerserviceDeploymentRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContainerserviceDeploymentRequest) SetContainerServices(v *SontainerServicesList) *CreateContainerserviceDeploymentRequest {
	s.ContainerServices = v
	return s
}

func (s *CreateContainerserviceDeploymentRequest) SetIsAutoExecute(v bool) *CreateContainerserviceDeploymentRequest {
	s.IsAutoExecute = &v
	return s
}

func (s *CreateContainerserviceDeploymentRequest) SetNamespace(v string) *CreateContainerserviceDeploymentRequest {
	s.Namespace = &v
	return s
}

func (s *CreateContainerserviceDeploymentRequest) SetOpsType(v string) *CreateContainerserviceDeploymentRequest {
	s.OpsType = &v
	return s
}

func (s *CreateContainerserviceDeploymentRequest) SetReleasePlanUniqueId(v string) *CreateContainerserviceDeploymentRequest {
	s.ReleasePlanUniqueId = &v
	return s
}

func (s *CreateContainerserviceDeploymentRequest) SetTenantName(v string) *CreateContainerserviceDeploymentRequest {
	s.TenantName = &v
	return s
}

func (s *CreateContainerserviceDeploymentRequest) SetTitle(v string) *CreateContainerserviceDeploymentRequest {
	s.Title = &v
	return s
}

func (s *CreateContainerserviceDeploymentRequest) SetWorkspaceGroup(v string) *CreateContainerserviceDeploymentRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *CreateContainerserviceDeploymentRequest) SetAssigneeIds(v []*string) *CreateContainerserviceDeploymentRequest {
	s.AssigneeIds = v
	return s
}

func (s *CreateContainerserviceDeploymentRequest) SetOperator(v string) *CreateContainerserviceDeploymentRequest {
	s.Operator = &v
	return s
}

type CreateContainerserviceDeploymentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建完成的部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s CreateContainerserviceDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContainerserviceDeploymentResponse) GoString() string {
	return s.String()
}

func (s *CreateContainerserviceDeploymentResponse) SetReqMsgId(v string) *CreateContainerserviceDeploymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContainerserviceDeploymentResponse) SetResultCode(v string) *CreateContainerserviceDeploymentResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContainerserviceDeploymentResponse) SetResultMsg(v string) *CreateContainerserviceDeploymentResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContainerserviceDeploymentResponse) SetOperationId(v string) *CreateContainerserviceDeploymentResponse {
	s.OperationId = &v
	return s
}

type CreateFederationSecretRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cell name list
	Cells []*string `json:"cells,omitempty" xml:"cells,omitempty" require:"true" type:"Repeated"`
	// FedSecret data
	//
	Data []*SecretData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
	// FedSecret labels
	//
	Labels []*Label `json:"labels,omitempty" xml:"labels,omitempty" type:"Repeated"`
	// FedSecret name
	//
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// Federation Secret namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// FedSecret Cluster Overrides
	//
	Overrides *FedSecretOverrideList `json:"overrides,omitempty" xml:"overrides,omitempty"`
	// Fed Secret type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// workspace group 名称
	//
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s CreateFederationSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFederationSecretRequest) GoString() string {
	return s.String()
}

func (s *CreateFederationSecretRequest) SetAuthToken(v string) *CreateFederationSecretRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFederationSecretRequest) SetCells(v []*string) *CreateFederationSecretRequest {
	s.Cells = v
	return s
}

func (s *CreateFederationSecretRequest) SetData(v []*SecretData) *CreateFederationSecretRequest {
	s.Data = v
	return s
}

func (s *CreateFederationSecretRequest) SetLabels(v []*Label) *CreateFederationSecretRequest {
	s.Labels = v
	return s
}

func (s *CreateFederationSecretRequest) SetName(v string) *CreateFederationSecretRequest {
	s.Name = &v
	return s
}

func (s *CreateFederationSecretRequest) SetNamespace(v string) *CreateFederationSecretRequest {
	s.Namespace = &v
	return s
}

func (s *CreateFederationSecretRequest) SetOverrides(v *FedSecretOverrideList) *CreateFederationSecretRequest {
	s.Overrides = v
	return s
}

func (s *CreateFederationSecretRequest) SetType(v string) *CreateFederationSecretRequest {
	s.Type = &v
	return s
}

func (s *CreateFederationSecretRequest) SetWorkspaceGroupName(v string) *CreateFederationSecretRequest {
	s.WorkspaceGroupName = &v
	return s
}

type CreateFederationSecretResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// FedSecret 数据
	//
	Secret *FedSecret `json:"secret,omitempty" xml:"secret,omitempty"`
}

func (s CreateFederationSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFederationSecretResponse) GoString() string {
	return s.String()
}

func (s *CreateFederationSecretResponse) SetReqMsgId(v string) *CreateFederationSecretResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFederationSecretResponse) SetResultCode(v string) *CreateFederationSecretResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFederationSecretResponse) SetResultMsg(v string) *CreateFederationSecretResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateFederationSecretResponse) SetSecret(v *FedSecret) *CreateFederationSecretResponse {
	s.Secret = v
	return s
}

type GetFederationSecretRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// FedSecretname
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 所属命名空间名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// workspaceGroup 名称
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s GetFederationSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFederationSecretRequest) GoString() string {
	return s.String()
}

func (s *GetFederationSecretRequest) SetAuthToken(v string) *GetFederationSecretRequest {
	s.AuthToken = &v
	return s
}

func (s *GetFederationSecretRequest) SetName(v string) *GetFederationSecretRequest {
	s.Name = &v
	return s
}

func (s *GetFederationSecretRequest) SetNamespace(v string) *GetFederationSecretRequest {
	s.Namespace = &v
	return s
}

func (s *GetFederationSecretRequest) SetWorkspaceGroupName(v string) *GetFederationSecretRequest {
	s.WorkspaceGroupName = &v
	return s
}

type GetFederationSecretResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// FedSecret获取结果
	//
	Secret *FedSecret `json:"secret,omitempty" xml:"secret,omitempty"`
}

func (s GetFederationSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFederationSecretResponse) GoString() string {
	return s.String()
}

func (s *GetFederationSecretResponse) SetReqMsgId(v string) *GetFederationSecretResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetFederationSecretResponse) SetResultCode(v string) *GetFederationSecretResponse {
	s.ResultCode = &v
	return s
}

func (s *GetFederationSecretResponse) SetResultMsg(v string) *GetFederationSecretResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetFederationSecretResponse) SetSecret(v *FedSecret) *GetFederationSecretResponse {
	s.Secret = v
	return s
}

type DeleteFederationSecretRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// FedSecret name
	//
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// workspaceGroupName
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
	// 所属命名空间名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
}

func (s DeleteFederationSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFederationSecretRequest) GoString() string {
	return s.String()
}

func (s *DeleteFederationSecretRequest) SetAuthToken(v string) *DeleteFederationSecretRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteFederationSecretRequest) SetName(v string) *DeleteFederationSecretRequest {
	s.Name = &v
	return s
}

func (s *DeleteFederationSecretRequest) SetWorkspaceGroupName(v string) *DeleteFederationSecretRequest {
	s.WorkspaceGroupName = &v
	return s
}

func (s *DeleteFederationSecretRequest) SetNamespace(v string) *DeleteFederationSecretRequest {
	s.Namespace = &v
	return s
}

type DeleteFederationSecretResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 删除结果
	//
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteFederationSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFederationSecretResponse) GoString() string {
	return s.String()
}

func (s *DeleteFederationSecretResponse) SetReqMsgId(v string) *DeleteFederationSecretResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteFederationSecretResponse) SetResultCode(v string) *DeleteFederationSecretResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteFederationSecretResponse) SetResultMsg(v string) *DeleteFederationSecretResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteFederationSecretResponse) SetData(v bool) *DeleteFederationSecretResponse {
	s.Data = &v
	return s
}

type UpdateFederationSecretRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cell list
	Cells []*string `json:"cells,omitempty" xml:"cells,omitempty" require:"true" type:"Repeated"`
	// FedSecret data
	//
	Data []*SecretData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
	// FedSecret labels
	//
	Labels []*Label `json:"labels,omitempty" xml:"labels,omitempty" type:"Repeated"`
	// FedSecret name
	//
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// FedSecret命名空间
	//
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// FedSecret overrides
	//
	Overrides *FedSecretOverrideList `json:"overrides,omitempty" xml:"overrides,omitempty"`
	// workspaceGroup名称
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s UpdateFederationSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFederationSecretRequest) GoString() string {
	return s.String()
}

func (s *UpdateFederationSecretRequest) SetAuthToken(v string) *UpdateFederationSecretRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateFederationSecretRequest) SetCells(v []*string) *UpdateFederationSecretRequest {
	s.Cells = v
	return s
}

func (s *UpdateFederationSecretRequest) SetData(v []*SecretData) *UpdateFederationSecretRequest {
	s.Data = v
	return s
}

func (s *UpdateFederationSecretRequest) SetLabels(v []*Label) *UpdateFederationSecretRequest {
	s.Labels = v
	return s
}

func (s *UpdateFederationSecretRequest) SetName(v string) *UpdateFederationSecretRequest {
	s.Name = &v
	return s
}

func (s *UpdateFederationSecretRequest) SetNamespace(v string) *UpdateFederationSecretRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateFederationSecretRequest) SetOverrides(v *FedSecretOverrideList) *UpdateFederationSecretRequest {
	s.Overrides = v
	return s
}

func (s *UpdateFederationSecretRequest) SetWorkspaceGroupName(v string) *UpdateFederationSecretRequest {
	s.WorkspaceGroupName = &v
	return s
}

type UpdateFederationSecretResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// fedsecret data
	//
	Secret *FedSecret `json:"secret,omitempty" xml:"secret,omitempty"`
}

func (s UpdateFederationSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFederationSecretResponse) GoString() string {
	return s.String()
}

func (s *UpdateFederationSecretResponse) SetReqMsgId(v string) *UpdateFederationSecretResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateFederationSecretResponse) SetResultCode(v string) *UpdateFederationSecretResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateFederationSecretResponse) SetResultMsg(v string) *UpdateFederationSecretResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateFederationSecretResponse) SetSecret(v *FedSecret) *UpdateFederationSecretResponse {
	s.Secret = v
	return s
}

type ListFederationSecretRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// List labelSelector
	//
	LabelSelector *string `json:"label_selector,omitempty" xml:"label_selector,omitempty"`
	// antcloud
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// workspace group name
	//
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s ListFederationSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFederationSecretRequest) GoString() string {
	return s.String()
}

func (s *ListFederationSecretRequest) SetAuthToken(v string) *ListFederationSecretRequest {
	s.AuthToken = &v
	return s
}

func (s *ListFederationSecretRequest) SetLabelSelector(v string) *ListFederationSecretRequest {
	s.LabelSelector = &v
	return s
}

func (s *ListFederationSecretRequest) SetNamespace(v string) *ListFederationSecretRequest {
	s.Namespace = &v
	return s
}

func (s *ListFederationSecretRequest) SetWorkspaceGroupName(v string) *ListFederationSecretRequest {
	s.WorkspaceGroupName = &v
	return s
}

type ListFederationSecretResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// FedSecret List
	SecretList []*FedSecret `json:"secret_list,omitempty" xml:"secret_list,omitempty" type:"Repeated"`
}

func (s ListFederationSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFederationSecretResponse) GoString() string {
	return s.String()
}

func (s *ListFederationSecretResponse) SetReqMsgId(v string) *ListFederationSecretResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListFederationSecretResponse) SetResultCode(v string) *ListFederationSecretResponse {
	s.ResultCode = &v
	return s
}

func (s *ListFederationSecretResponse) SetResultMsg(v string) *ListFederationSecretResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListFederationSecretResponse) SetSecretList(v []*FedSecret) *ListFederationSecretResponse {
	s.SecretList = v
	return s
}

type DescribeContainerserviceRevisionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 容器服务名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 命名空间名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 所属工作空间组名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s DescribeContainerserviceRevisionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerserviceRevisionRequest) GoString() string {
	return s.String()
}

func (s *DescribeContainerserviceRevisionRequest) SetAuthToken(v string) *DescribeContainerserviceRevisionRequest {
	s.AuthToken = &v
	return s
}

func (s *DescribeContainerserviceRevisionRequest) SetName(v string) *DescribeContainerserviceRevisionRequest {
	s.Name = &v
	return s
}

func (s *DescribeContainerserviceRevisionRequest) SetNamespace(v string) *DescribeContainerserviceRevisionRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeContainerserviceRevisionRequest) SetWorkspaceGroup(v string) *DescribeContainerserviceRevisionRequest {
	s.WorkspaceGroup = &v
	return s
}

type DescribeContainerserviceRevisionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 容器服务版本信息。
	Revision *ContainerServiceRevision `json:"revision,omitempty" xml:"revision,omitempty"`
}

func (s DescribeContainerserviceRevisionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerserviceRevisionResponse) GoString() string {
	return s.String()
}

func (s *DescribeContainerserviceRevisionResponse) SetReqMsgId(v string) *DescribeContainerserviceRevisionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DescribeContainerserviceRevisionResponse) SetResultCode(v string) *DescribeContainerserviceRevisionResponse {
	s.ResultCode = &v
	return s
}

func (s *DescribeContainerserviceRevisionResponse) SetResultMsg(v string) *DescribeContainerserviceRevisionResponse {
	s.ResultMsg = &v
	return s
}

func (s *DescribeContainerserviceRevisionResponse) SetRevision(v *ContainerServiceRevision) *DescribeContainerserviceRevisionResponse {
	s.Revision = v
	return s
}

type GetContainerserviceRevisionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 容器应用服务名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 版本号。
	Revision *string `json:"revision,omitempty" xml:"revision,omitempty" require:"true"`
	// 所属工作空间组名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// fed namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
}

func (s GetContainerserviceRevisionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContainerserviceRevisionRequest) GoString() string {
	return s.String()
}

func (s *GetContainerserviceRevisionRequest) SetAuthToken(v string) *GetContainerserviceRevisionRequest {
	s.AuthToken = &v
	return s
}

func (s *GetContainerserviceRevisionRequest) SetName(v string) *GetContainerserviceRevisionRequest {
	s.Name = &v
	return s
}

func (s *GetContainerserviceRevisionRequest) SetRevision(v string) *GetContainerserviceRevisionRequest {
	s.Revision = &v
	return s
}

func (s *GetContainerserviceRevisionRequest) SetWorkspaceGroup(v string) *GetContainerserviceRevisionRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *GetContainerserviceRevisionRequest) SetNamespace(v string) *GetContainerserviceRevisionRequest {
	s.Namespace = &v
	return s
}

type GetContainerserviceRevisionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 容器服务版本信息。
	Revision *ContainerServiceRevision `json:"revision,omitempty" xml:"revision,omitempty"`
}

func (s GetContainerserviceRevisionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContainerserviceRevisionResponse) GoString() string {
	return s.String()
}

func (s *GetContainerserviceRevisionResponse) SetReqMsgId(v string) *GetContainerserviceRevisionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetContainerserviceRevisionResponse) SetResultCode(v string) *GetContainerserviceRevisionResponse {
	s.ResultCode = &v
	return s
}

func (s *GetContainerserviceRevisionResponse) SetResultMsg(v string) *GetContainerserviceRevisionResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetContainerserviceRevisionResponse) SetRevision(v *ContainerServiceRevision) *GetContainerserviceRevisionResponse {
	s.Revision = v
	return s
}

type QueryContainerserviceRevisionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 取值范围： . WAITING_FOR_DEPLOY: 待发布 . INITIALIZING: 初始化中 . INITIALIZED: 初始化完成 . INITIALIZE_FAILED: 初始化失败 . CONFIRM_WAITING: 待确认 . CONFIRMED: 已确认 . EXECUTING: 发布中 . PAUSED: 暂停 . CANCELING: 取消中 . CANCELED: 已取消 . ROLLBACKING: 回滚中 . ROLLBACK_PAUSED: 回滚暂停 . ROLLBACKED: 已回滚 . SUCCEEDED: 发布完成 . FAILED: 发布失败 . DELETING: 删除中 . DELETE_FAILED: 删除失败
	DeploymentStatus []*string `json:"deployment_status,omitempty" xml:"deployment_status,omitempty" type:"Repeated"`
	// 状态取值范围： . DRAFTED: 草稿 . CREATING: 创建中 . CREATED: 已创建 . UPDATING: 更新中 . UPDATED: 已更新 . DELETING: 删除中 . DELETED: 已删除 . DEPLOYED: 已发布 . CREATE_FAILED: 创建失败 . UPDATE_FAILED: 更新失败 . DELETE_FAILED: 删除失败
	MetadataStatus []*string `json:"metadata_status,omitempty" xml:"metadata_status,omitempty" type:"Repeated"`
	// 容器应用服务名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 命名空间名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 容器服务版本列表的页码。起始值：1。默认值：1 。
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 分页查询时设置的每页行数。最大值：100。默认值：10。
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 所属工作空间组名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s QueryContainerserviceRevisionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContainerserviceRevisionRequest) GoString() string {
	return s.String()
}

func (s *QueryContainerserviceRevisionRequest) SetAuthToken(v string) *QueryContainerserviceRevisionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContainerserviceRevisionRequest) SetDeploymentStatus(v []*string) *QueryContainerserviceRevisionRequest {
	s.DeploymentStatus = v
	return s
}

func (s *QueryContainerserviceRevisionRequest) SetMetadataStatus(v []*string) *QueryContainerserviceRevisionRequest {
	s.MetadataStatus = v
	return s
}

func (s *QueryContainerserviceRevisionRequest) SetName(v string) *QueryContainerserviceRevisionRequest {
	s.Name = &v
	return s
}

func (s *QueryContainerserviceRevisionRequest) SetNamespace(v string) *QueryContainerserviceRevisionRequest {
	s.Namespace = &v
	return s
}

func (s *QueryContainerserviceRevisionRequest) SetPageNumber(v int64) *QueryContainerserviceRevisionRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryContainerserviceRevisionRequest) SetPageSize(v int64) *QueryContainerserviceRevisionRequest {
	s.PageSize = &v
	return s
}

func (s *QueryContainerserviceRevisionRequest) SetWorkspaceGroup(v string) *QueryContainerserviceRevisionRequest {
	s.WorkspaceGroup = &v
	return s
}

type QueryContainerserviceRevisionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 版本列表的页码。
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 输入时设置的每页行数。
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 容器服务版本列表。
	RevisionList []*ContainerServiceRevision `json:"revision_list,omitempty" xml:"revision_list,omitempty" type:"Repeated"`
	// 查询到的容器应用版本总数。
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryContainerserviceRevisionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContainerserviceRevisionResponse) GoString() string {
	return s.String()
}

func (s *QueryContainerserviceRevisionResponse) SetReqMsgId(v string) *QueryContainerserviceRevisionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContainerserviceRevisionResponse) SetResultCode(v string) *QueryContainerserviceRevisionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContainerserviceRevisionResponse) SetResultMsg(v string) *QueryContainerserviceRevisionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContainerserviceRevisionResponse) SetPageNumber(v int64) *QueryContainerserviceRevisionResponse {
	s.PageNumber = &v
	return s
}

func (s *QueryContainerserviceRevisionResponse) SetPageSize(v int64) *QueryContainerserviceRevisionResponse {
	s.PageSize = &v
	return s
}

func (s *QueryContainerserviceRevisionResponse) SetRevisionList(v []*ContainerServiceRevision) *QueryContainerserviceRevisionResponse {
	s.RevisionList = v
	return s
}

func (s *QueryContainerserviceRevisionResponse) SetTotalCount(v int64) *QueryContainerserviceRevisionResponse {
	s.TotalCount = &v
	return s
}

type UpdateContainerserviceRevisionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属工作空间组名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 容器应用服务名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 容器应用服务版本号。
	Revision *string `json:"revision,omitempty" xml:"revision,omitempty" require:"true"`
	// 版本备注信息。
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
}

func (s UpdateContainerserviceRevisionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerserviceRevisionRequest) GoString() string {
	return s.String()
}

func (s *UpdateContainerserviceRevisionRequest) SetAuthToken(v string) *UpdateContainerserviceRevisionRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateContainerserviceRevisionRequest) SetWorkspaceGroup(v string) *UpdateContainerserviceRevisionRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *UpdateContainerserviceRevisionRequest) SetName(v string) *UpdateContainerserviceRevisionRequest {
	s.Name = &v
	return s
}

func (s *UpdateContainerserviceRevisionRequest) SetRevision(v string) *UpdateContainerserviceRevisionRequest {
	s.Revision = &v
	return s
}

func (s *UpdateContainerserviceRevisionRequest) SetRemark(v string) *UpdateContainerserviceRevisionRequest {
	s.Remark = &v
	return s
}

type UpdateContainerserviceRevisionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateContainerserviceRevisionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerserviceRevisionResponse) GoString() string {
	return s.String()
}

func (s *UpdateContainerserviceRevisionResponse) SetReqMsgId(v string) *UpdateContainerserviceRevisionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateContainerserviceRevisionResponse) SetResultCode(v string) *UpdateContainerserviceRevisionResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateContainerserviceRevisionResponse) SetResultMsg(v string) *UpdateContainerserviceRevisionResponse {
	s.ResultMsg = &v
	return s
}

type UpdateContainerserviceImageRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 更新镜像的完整地址
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// 容器应用服务名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 容器服务所在命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 操作人。
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 容器应用服务版本。
	Revision *string `json:"revision,omitempty" xml:"revision,omitempty" require:"true"`
	// 所属工作空间组名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s UpdateContainerserviceImageRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerserviceImageRequest) GoString() string {
	return s.String()
}

func (s *UpdateContainerserviceImageRequest) SetAuthToken(v string) *UpdateContainerserviceImageRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateContainerserviceImageRequest) SetImage(v string) *UpdateContainerserviceImageRequest {
	s.Image = &v
	return s
}

func (s *UpdateContainerserviceImageRequest) SetName(v string) *UpdateContainerserviceImageRequest {
	s.Name = &v
	return s
}

func (s *UpdateContainerserviceImageRequest) SetNamespace(v string) *UpdateContainerserviceImageRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateContainerserviceImageRequest) SetOperator(v string) *UpdateContainerserviceImageRequest {
	s.Operator = &v
	return s
}

func (s *UpdateContainerserviceImageRequest) SetRevision(v string) *UpdateContainerserviceImageRequest {
	s.Revision = &v
	return s
}

func (s *UpdateContainerserviceImageRequest) SetWorkspaceGroup(v string) *UpdateContainerserviceImageRequest {
	s.WorkspaceGroup = &v
	return s
}

type UpdateContainerserviceImageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 更新后的容器应用服务版本号。
	Revision *string `json:"revision,omitempty" xml:"revision,omitempty"`
}

func (s UpdateContainerserviceImageResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerserviceImageResponse) GoString() string {
	return s.String()
}

func (s *UpdateContainerserviceImageResponse) SetReqMsgId(v string) *UpdateContainerserviceImageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateContainerserviceImageResponse) SetResultCode(v string) *UpdateContainerserviceImageResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateContainerserviceImageResponse) SetResultMsg(v string) *UpdateContainerserviceImageResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateContainerserviceImageResponse) SetRevision(v string) *UpdateContainerserviceImageResponse {
	s.Revision = &v
	return s
}

type UpdateContainerserviceReplicasRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 扩缩容replica详情
	FixedReplicaElasticConfig *FixedReplicaElasticConfig `json:"fixed_replica_elastic_config,omitempty" xml:"fixed_replica_elastic_config,omitempty" require:"true"`
	// 容器应用服务名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 容器应用服务版本号。
	Revision *string `json:"revision,omitempty" xml:"revision,omitempty" require:"true"`
	// 所属工作空间组名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s UpdateContainerserviceReplicasRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerserviceReplicasRequest) GoString() string {
	return s.String()
}

func (s *UpdateContainerserviceReplicasRequest) SetAuthToken(v string) *UpdateContainerserviceReplicasRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateContainerserviceReplicasRequest) SetFixedReplicaElasticConfig(v *FixedReplicaElasticConfig) *UpdateContainerserviceReplicasRequest {
	s.FixedReplicaElasticConfig = v
	return s
}

func (s *UpdateContainerserviceReplicasRequest) SetName(v string) *UpdateContainerserviceReplicasRequest {
	s.Name = &v
	return s
}

func (s *UpdateContainerserviceReplicasRequest) SetNamespace(v string) *UpdateContainerserviceReplicasRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateContainerserviceReplicasRequest) SetOperator(v string) *UpdateContainerserviceReplicasRequest {
	s.Operator = &v
	return s
}

func (s *UpdateContainerserviceReplicasRequest) SetRevision(v string) *UpdateContainerserviceReplicasRequest {
	s.Revision = &v
	return s
}

func (s *UpdateContainerserviceReplicasRequest) SetWorkspaceGroup(v string) *UpdateContainerserviceReplicasRequest {
	s.WorkspaceGroup = &v
	return s
}

type UpdateContainerserviceReplicasResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建完成的部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s UpdateContainerserviceReplicasResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerserviceReplicasResponse) GoString() string {
	return s.String()
}

func (s *UpdateContainerserviceReplicasResponse) SetReqMsgId(v string) *UpdateContainerserviceReplicasResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateContainerserviceReplicasResponse) SetResultCode(v string) *UpdateContainerserviceReplicasResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateContainerserviceReplicasResponse) SetResultMsg(v string) *UpdateContainerserviceReplicasResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateContainerserviceReplicasResponse) SetOperationId(v string) *UpdateContainerserviceReplicasResponse {
	s.OperationId = &v
	return s
}

type CreateContainerserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属应用名称。
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 必填，且不能重复。保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。ClientToken只支持ASCII字符，且不能超过64个字符。
	ClientToken *string `json:"client_token,omitempty" xml:"client_token,omitempty"`
	// 容器服务配置。
	Config *ContainerServiceConfig `json:"config,omitempty" xml:"config,omitempty" require:"true"`
	// 容器服务描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 容器服务名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 所属命名空间名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 操作人iam账号名，通过pop调用时该参数无效。
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// owner_id（废弃）
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty"`
	// owner_name（废弃）
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 所属工作空间组名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 应用appid
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
}

func (s CreateContainerserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContainerserviceRequest) GoString() string {
	return s.String()
}

func (s *CreateContainerserviceRequest) SetAuthToken(v string) *CreateContainerserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContainerserviceRequest) SetAppName(v string) *CreateContainerserviceRequest {
	s.AppName = &v
	return s
}

func (s *CreateContainerserviceRequest) SetClientToken(v string) *CreateContainerserviceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateContainerserviceRequest) SetConfig(v *ContainerServiceConfig) *CreateContainerserviceRequest {
	s.Config = v
	return s
}

func (s *CreateContainerserviceRequest) SetDescription(v string) *CreateContainerserviceRequest {
	s.Description = &v
	return s
}

func (s *CreateContainerserviceRequest) SetName(v string) *CreateContainerserviceRequest {
	s.Name = &v
	return s
}

func (s *CreateContainerserviceRequest) SetNamespace(v string) *CreateContainerserviceRequest {
	s.Namespace = &v
	return s
}

func (s *CreateContainerserviceRequest) SetOperator(v string) *CreateContainerserviceRequest {
	s.Operator = &v
	return s
}

func (s *CreateContainerserviceRequest) SetOwnerId(v string) *CreateContainerserviceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateContainerserviceRequest) SetOwnerName(v string) *CreateContainerserviceRequest {
	s.OwnerName = &v
	return s
}

func (s *CreateContainerserviceRequest) SetWorkspaceGroup(v string) *CreateContainerserviceRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *CreateContainerserviceRequest) SetAppId(v string) *CreateContainerserviceRequest {
	s.AppId = &v
	return s
}

type CreateContainerserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 容器服务版本号。
	Revision *string `json:"revision,omitempty" xml:"revision,omitempty"`
}

func (s CreateContainerserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContainerserviceResponse) GoString() string {
	return s.String()
}

func (s *CreateContainerserviceResponse) SetReqMsgId(v string) *CreateContainerserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContainerserviceResponse) SetResultCode(v string) *CreateContainerserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContainerserviceResponse) SetResultMsg(v string) *CreateContainerserviceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContainerserviceResponse) SetRevision(v string) *CreateContainerserviceResponse {
	s.Revision = &v
	return s
}

type SaveContainerserviceRevisionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s SaveContainerserviceRevisionRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveContainerserviceRevisionRequest) GoString() string {
	return s.String()
}

func (s *SaveContainerserviceRevisionRequest) SetAuthToken(v string) *SaveContainerserviceRevisionRequest {
	s.AuthToken = &v
	return s
}

type SaveContainerserviceRevisionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SaveContainerserviceRevisionResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveContainerserviceRevisionResponse) GoString() string {
	return s.String()
}

func (s *SaveContainerserviceRevisionResponse) SetReqMsgId(v string) *SaveContainerserviceRevisionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveContainerserviceRevisionResponse) SetResultCode(v string) *SaveContainerserviceRevisionResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveContainerserviceRevisionResponse) SetResultMsg(v string) *SaveContainerserviceRevisionResponse {
	s.ResultMsg = &v
	return s
}

type UpdateContainerserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// 所属应用名称。
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 必填：保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。ClientToken只支持ASCII字符，且不能超过64个字符。
	ClientToken *string `json:"client_token,omitempty" xml:"client_token,omitempty"`
	// 容器服务配置。
	//
	Config *ContainerServiceConfig `json:"config,omitempty" xml:"config,omitempty" require:"true"`
	// 应用服务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 操作人账号
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// 应用负责人id
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty"`
	// 应用负责人名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 工作环境组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
}

func (s UpdateContainerserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerserviceRequest) GoString() string {
	return s.String()
}

func (s *UpdateContainerserviceRequest) SetAuthToken(v string) *UpdateContainerserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateContainerserviceRequest) SetAppId(v string) *UpdateContainerserviceRequest {
	s.AppId = &v
	return s
}

func (s *UpdateContainerserviceRequest) SetAppName(v string) *UpdateContainerserviceRequest {
	s.AppName = &v
	return s
}

func (s *UpdateContainerserviceRequest) SetClientToken(v string) *UpdateContainerserviceRequest {
	s.ClientToken = &v
	return s
}

func (s *UpdateContainerserviceRequest) SetConfig(v *ContainerServiceConfig) *UpdateContainerserviceRequest {
	s.Config = v
	return s
}

func (s *UpdateContainerserviceRequest) SetName(v string) *UpdateContainerserviceRequest {
	s.Name = &v
	return s
}

func (s *UpdateContainerserviceRequest) SetNamespace(v string) *UpdateContainerserviceRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateContainerserviceRequest) SetOperator(v string) *UpdateContainerserviceRequest {
	s.Operator = &v
	return s
}

func (s *UpdateContainerserviceRequest) SetOwnerId(v string) *UpdateContainerserviceRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateContainerserviceRequest) SetOwnerName(v string) *UpdateContainerserviceRequest {
	s.OwnerName = &v
	return s
}

func (s *UpdateContainerserviceRequest) SetWorkspaceGroup(v string) *UpdateContainerserviceRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *UpdateContainerserviceRequest) SetDescription(v string) *UpdateContainerserviceRequest {
	s.Description = &v
	return s
}

type UpdateContainerserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// container service版本号
	Revision *string `json:"revision,omitempty" xml:"revision,omitempty"`
}

func (s UpdateContainerserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerserviceResponse) GoString() string {
	return s.String()
}

func (s *UpdateContainerserviceResponse) SetReqMsgId(v string) *UpdateContainerserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateContainerserviceResponse) SetResultCode(v string) *UpdateContainerserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateContainerserviceResponse) SetResultMsg(v string) *UpdateContainerserviceResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateContainerserviceResponse) SetRevision(v string) *UpdateContainerserviceResponse {
	s.Revision = &v
	return s
}

type ExistContainerserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属工作空间组名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 所属命名空间名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 容器服务名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s ExistContainerserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ExistContainerserviceRequest) GoString() string {
	return s.String()
}

func (s *ExistContainerserviceRequest) SetAuthToken(v string) *ExistContainerserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *ExistContainerserviceRequest) SetWorkspaceGroup(v string) *ExistContainerserviceRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *ExistContainerserviceRequest) SetNamespace(v string) *ExistContainerserviceRequest {
	s.Namespace = &v
	return s
}

func (s *ExistContainerserviceRequest) SetName(v string) *ExistContainerserviceRequest {
	s.Name = &v
	return s
}

type ExistContainerserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 容器服务是否存在。
	// 取值：true | false
	Exist *bool `json:"exist,omitempty" xml:"exist,omitempty"`
}

func (s ExistContainerserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ExistContainerserviceResponse) GoString() string {
	return s.String()
}

func (s *ExistContainerserviceResponse) SetReqMsgId(v string) *ExistContainerserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExistContainerserviceResponse) SetResultCode(v string) *ExistContainerserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *ExistContainerserviceResponse) SetResultMsg(v string) *ExistContainerserviceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExistContainerserviceResponse) SetExist(v bool) *ExistContainerserviceResponse {
	s.Exist = &v
	return s
}

type GetClusterBasicinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cluster name
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
}

func (s GetClusterBasicinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetClusterBasicinfoRequest) GoString() string {
	return s.String()
}

func (s *GetClusterBasicinfoRequest) SetAuthToken(v string) *GetClusterBasicinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *GetClusterBasicinfoRequest) SetClusterName(v string) *GetClusterBasicinfoRequest {
	s.ClusterName = &v
	return s
}

type GetClusterBasicinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cell infos
	CellInfos []*CellInfo `json:"cell_infos,omitempty" xml:"cell_infos,omitempty" type:"Repeated"`
	// created time
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// cluster display name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// network info
	NetworkInfo *NetworkInfo `json:"network_info,omitempty" xml:"network_info,omitempty"`
	// region info
	RegionInfo *RegionInfo `json:"region_info,omitempty" xml:"region_info,omitempty"`
	// secured group infos
	SecuredGroupInfos []*SecuredGroupInfo `json:"secured_group_infos,omitempty" xml:"secured_group_infos,omitempty" type:"Repeated"`
	// cluster status
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// zone info
	ZoneInfo *ZoneInfo `json:"zone_info,omitempty" xml:"zone_info,omitempty"`
}

func (s GetClusterBasicinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetClusterBasicinfoResponse) GoString() string {
	return s.String()
}

func (s *GetClusterBasicinfoResponse) SetReqMsgId(v string) *GetClusterBasicinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetClusterBasicinfoResponse) SetResultCode(v string) *GetClusterBasicinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *GetClusterBasicinfoResponse) SetResultMsg(v string) *GetClusterBasicinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetClusterBasicinfoResponse) SetCellInfos(v []*CellInfo) *GetClusterBasicinfoResponse {
	s.CellInfos = v
	return s
}

func (s *GetClusterBasicinfoResponse) SetCreatedTime(v string) *GetClusterBasicinfoResponse {
	s.CreatedTime = &v
	return s
}

func (s *GetClusterBasicinfoResponse) SetDisplayName(v string) *GetClusterBasicinfoResponse {
	s.DisplayName = &v
	return s
}

func (s *GetClusterBasicinfoResponse) SetNetworkInfo(v *NetworkInfo) *GetClusterBasicinfoResponse {
	s.NetworkInfo = v
	return s
}

func (s *GetClusterBasicinfoResponse) SetRegionInfo(v *RegionInfo) *GetClusterBasicinfoResponse {
	s.RegionInfo = v
	return s
}

func (s *GetClusterBasicinfoResponse) SetSecuredGroupInfos(v []*SecuredGroupInfo) *GetClusterBasicinfoResponse {
	s.SecuredGroupInfos = v
	return s
}

func (s *GetClusterBasicinfoResponse) SetStatus(v string) *GetClusterBasicinfoResponse {
	s.Status = &v
	return s
}

func (s *GetClusterBasicinfoResponse) SetZoneInfo(v *ZoneInfo) *GetClusterBasicinfoResponse {
	s.ZoneInfo = v
	return s
}

type GetClusterOverviewinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cluster name
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
}

func (s GetClusterOverviewinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetClusterOverviewinfoRequest) GoString() string {
	return s.String()
}

func (s *GetClusterOverviewinfoRequest) SetAuthToken(v string) *GetClusterOverviewinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *GetClusterOverviewinfoRequest) SetClusterName(v string) *GetClusterOverviewinfoRequest {
	s.ClusterName = &v
	return s
}

type GetClusterOverviewinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cpu
	LimitedCpu *int64 `json:"limited_cpu,omitempty" xml:"limited_cpu,omitempty"`
	// cpu unit
	LimitedCpuUnit *string `json:"limited_cpu_unit,omitempty" xml:"limited_cpu_unit,omitempty"`
	// memory
	LimitedMemory *int64 `json:"limited_memory,omitempty" xml:"limited_memory,omitempty"`
	// memory unit
	LimitedMemoryUnit *string `json:"limited_memory_unit,omitempty" xml:"limited_memory_unit,omitempty"`
	// pod overview info
	PodOverviewInfo *PodOverviewInfo `json:"pod_overview_info,omitempty" xml:"pod_overview_info,omitempty"`
	// total node number
	TotalNodeNum *string `json:"total_node_num,omitempty" xml:"total_node_num,omitempty"`
	// unhealthy node num
	UnHealthyNodeNum *string `json:"un_healthy_node_num,omitempty" xml:"un_healthy_node_num,omitempty"`
	// used cpu
	UsedCpu *int64 `json:"used_cpu,omitempty" xml:"used_cpu,omitempty"`
	// used cpu unit
	UsedCpuUnit *string `json:"used_cpu_unit,omitempty" xml:"used_cpu_unit,omitempty"`
	// used memory
	UsedMemory *int64 `json:"used_memory,omitempty" xml:"used_memory,omitempty"`
	// used memory unit
	UsedMemoryUnit *string `json:"used_memory_unit,omitempty" xml:"used_memory_unit,omitempty"`
}

func (s GetClusterOverviewinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetClusterOverviewinfoResponse) GoString() string {
	return s.String()
}

func (s *GetClusterOverviewinfoResponse) SetReqMsgId(v string) *GetClusterOverviewinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetClusterOverviewinfoResponse) SetResultCode(v string) *GetClusterOverviewinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *GetClusterOverviewinfoResponse) SetResultMsg(v string) *GetClusterOverviewinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetClusterOverviewinfoResponse) SetLimitedCpu(v int64) *GetClusterOverviewinfoResponse {
	s.LimitedCpu = &v
	return s
}

func (s *GetClusterOverviewinfoResponse) SetLimitedCpuUnit(v string) *GetClusterOverviewinfoResponse {
	s.LimitedCpuUnit = &v
	return s
}

func (s *GetClusterOverviewinfoResponse) SetLimitedMemory(v int64) *GetClusterOverviewinfoResponse {
	s.LimitedMemory = &v
	return s
}

func (s *GetClusterOverviewinfoResponse) SetLimitedMemoryUnit(v string) *GetClusterOverviewinfoResponse {
	s.LimitedMemoryUnit = &v
	return s
}

func (s *GetClusterOverviewinfoResponse) SetPodOverviewInfo(v *PodOverviewInfo) *GetClusterOverviewinfoResponse {
	s.PodOverviewInfo = v
	return s
}

func (s *GetClusterOverviewinfoResponse) SetTotalNodeNum(v string) *GetClusterOverviewinfoResponse {
	s.TotalNodeNum = &v
	return s
}

func (s *GetClusterOverviewinfoResponse) SetUnHealthyNodeNum(v string) *GetClusterOverviewinfoResponse {
	s.UnHealthyNodeNum = &v
	return s
}

func (s *GetClusterOverviewinfoResponse) SetUsedCpu(v int64) *GetClusterOverviewinfoResponse {
	s.UsedCpu = &v
	return s
}

func (s *GetClusterOverviewinfoResponse) SetUsedCpuUnit(v string) *GetClusterOverviewinfoResponse {
	s.UsedCpuUnit = &v
	return s
}

func (s *GetClusterOverviewinfoResponse) SetUsedMemory(v int64) *GetClusterOverviewinfoResponse {
	s.UsedMemory = &v
	return s
}

func (s *GetClusterOverviewinfoResponse) SetUsedMemoryUnit(v string) *GetClusterOverviewinfoResponse {
	s.UsedMemoryUnit = &v
	return s
}

type QueryCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属环境。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s QueryCellRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCellRequest) GoString() string {
	return s.String()
}

func (s *QueryCellRequest) SetAuthToken(v string) *QueryCellRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCellRequest) SetWorkspaceGroup(v string) *QueryCellRequest {
	s.WorkspaceGroup = &v
	return s
}

type QueryCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 部署单元列表。
	CellList []*CellInfo `json:"cell_list,omitempty" xml:"cell_list,omitempty" type:"Repeated"`
}

func (s QueryCellResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCellResponse) GoString() string {
	return s.String()
}

func (s *QueryCellResponse) SetReqMsgId(v string) *QueryCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCellResponse) SetResultCode(v string) *QueryCellResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCellResponse) SetResultMsg(v string) *QueryCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCellResponse) SetCellList(v []*CellInfo) *QueryCellResponse {
	s.CellList = v
	return s
}

type GetClusterPodoverviewRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cluster name
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
	// node name
	NodeName *string `json:"node_name,omitempty" xml:"node_name,omitempty" require:"true"`
	// workspace group name
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty"`
}

func (s GetClusterPodoverviewRequest) String() string {
	return tea.Prettify(s)
}

func (s GetClusterPodoverviewRequest) GoString() string {
	return s.String()
}

func (s *GetClusterPodoverviewRequest) SetAuthToken(v string) *GetClusterPodoverviewRequest {
	s.AuthToken = &v
	return s
}

func (s *GetClusterPodoverviewRequest) SetClusterName(v string) *GetClusterPodoverviewRequest {
	s.ClusterName = &v
	return s
}

func (s *GetClusterPodoverviewRequest) SetNodeName(v string) *GetClusterPodoverviewRequest {
	s.NodeName = &v
	return s
}

func (s *GetClusterPodoverviewRequest) SetWorkspaceGroupName(v string) *GetClusterPodoverviewRequest {
	s.WorkspaceGroupName = &v
	return s
}

type GetClusterPodoverviewResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// pod detail infos
	Data *PodOverviewInfo `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetClusterPodoverviewResponse) String() string {
	return tea.Prettify(s)
}

func (s GetClusterPodoverviewResponse) GoString() string {
	return s.String()
}

func (s *GetClusterPodoverviewResponse) SetReqMsgId(v string) *GetClusterPodoverviewResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetClusterPodoverviewResponse) SetResultCode(v string) *GetClusterPodoverviewResponse {
	s.ResultCode = &v
	return s
}

func (s *GetClusterPodoverviewResponse) SetResultMsg(v string) *GetClusterPodoverviewResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetClusterPodoverviewResponse) SetData(v *PodOverviewInfo) *GetClusterPodoverviewResponse {
	s.Data = v
	return s
}

type ListClusterNodeinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cluster name
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
}

func (s ListClusterNodeinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterNodeinfoRequest) GoString() string {
	return s.String()
}

func (s *ListClusterNodeinfoRequest) SetAuthToken(v string) *ListClusterNodeinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *ListClusterNodeinfoRequest) SetClusterName(v string) *ListClusterNodeinfoRequest {
	s.ClusterName = &v
	return s
}

type ListClusterNodeinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// node infos of specific cluster
	Data []*NodeInfo `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListClusterNodeinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterNodeinfoResponse) GoString() string {
	return s.String()
}

func (s *ListClusterNodeinfoResponse) SetReqMsgId(v string) *ListClusterNodeinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListClusterNodeinfoResponse) SetResultCode(v string) *ListClusterNodeinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *ListClusterNodeinfoResponse) SetResultMsg(v string) *ListClusterNodeinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListClusterNodeinfoResponse) SetData(v []*NodeInfo) *ListClusterNodeinfoResponse {
	s.Data = v
	return s
}

type CreateClusterNamespaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// namespace labels
	Labels []*Label `json:"labels,omitempty" xml:"labels,omitempty" require:"true" type:"Repeated"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// tenant id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// tenant name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty" require:"true"`
	// workspace group id
	WorkspaceGroupId *string `json:"workspace_group_id,omitempty" xml:"workspace_group_id,omitempty" require:"true"`
	// workspace group name
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
	// cluster name to create namespace in
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
}

func (s CreateClusterNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterNamespaceRequest) GoString() string {
	return s.String()
}

func (s *CreateClusterNamespaceRequest) SetAuthToken(v string) *CreateClusterNamespaceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateClusterNamespaceRequest) SetLabels(v []*Label) *CreateClusterNamespaceRequest {
	s.Labels = v
	return s
}

func (s *CreateClusterNamespaceRequest) SetName(v string) *CreateClusterNamespaceRequest {
	s.Name = &v
	return s
}

func (s *CreateClusterNamespaceRequest) SetTenantId(v string) *CreateClusterNamespaceRequest {
	s.TenantId = &v
	return s
}

func (s *CreateClusterNamespaceRequest) SetTenantName(v string) *CreateClusterNamespaceRequest {
	s.TenantName = &v
	return s
}

func (s *CreateClusterNamespaceRequest) SetWorkspaceGroupId(v string) *CreateClusterNamespaceRequest {
	s.WorkspaceGroupId = &v
	return s
}

func (s *CreateClusterNamespaceRequest) SetWorkspaceGroupName(v string) *CreateClusterNamespaceRequest {
	s.WorkspaceGroupName = &v
	return s
}

func (s *CreateClusterNamespaceRequest) SetClusterName(v string) *CreateClusterNamespaceRequest {
	s.ClusterName = &v
	return s
}

type CreateClusterNamespaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// is create namespace succeed
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateClusterNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterNamespaceResponse) GoString() string {
	return s.String()
}

func (s *CreateClusterNamespaceResponse) SetReqMsgId(v string) *CreateClusterNamespaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateClusterNamespaceResponse) SetResultCode(v string) *CreateClusterNamespaceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateClusterNamespaceResponse) SetResultMsg(v string) *CreateClusterNamespaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateClusterNamespaceResponse) SetData(v bool) *CreateClusterNamespaceResponse {
	s.Data = &v
	return s
}

type ListClusterNamespaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// tenant id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// tenant name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty" require:"true"`
	// workspace group id
	WorkspaceGroupId *string `json:"workspace_group_id,omitempty" xml:"workspace_group_id,omitempty" require:"true"`
	// workspace group name
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
	// cluster name
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
}

func (s ListClusterNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterNamespaceRequest) GoString() string {
	return s.String()
}

func (s *ListClusterNamespaceRequest) SetAuthToken(v string) *ListClusterNamespaceRequest {
	s.AuthToken = &v
	return s
}

func (s *ListClusterNamespaceRequest) SetTenantId(v string) *ListClusterNamespaceRequest {
	s.TenantId = &v
	return s
}

func (s *ListClusterNamespaceRequest) SetTenantName(v string) *ListClusterNamespaceRequest {
	s.TenantName = &v
	return s
}

func (s *ListClusterNamespaceRequest) SetWorkspaceGroupId(v string) *ListClusterNamespaceRequest {
	s.WorkspaceGroupId = &v
	return s
}

func (s *ListClusterNamespaceRequest) SetWorkspaceGroupName(v string) *ListClusterNamespaceRequest {
	s.WorkspaceGroupName = &v
	return s
}

func (s *ListClusterNamespaceRequest) SetClusterName(v string) *ListClusterNamespaceRequest {
	s.ClusterName = &v
	return s
}

type ListClusterNamespaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// namespace detail infos
	Data []*NamespaceDetail `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListClusterNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterNamespaceResponse) GoString() string {
	return s.String()
}

func (s *ListClusterNamespaceResponse) SetReqMsgId(v string) *ListClusterNamespaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListClusterNamespaceResponse) SetResultCode(v string) *ListClusterNamespaceResponse {
	s.ResultCode = &v
	return s
}

func (s *ListClusterNamespaceResponse) SetResultMsg(v string) *ListClusterNamespaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListClusterNamespaceResponse) SetData(v []*NamespaceDetail) *ListClusterNamespaceResponse {
	s.Data = v
	return s
}

type QueryClusterNamespaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s QueryClusterNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryClusterNamespaceRequest) GoString() string {
	return s.String()
}

func (s *QueryClusterNamespaceRequest) SetAuthToken(v string) *QueryClusterNamespaceRequest {
	s.AuthToken = &v
	return s
}

type QueryClusterNamespaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s QueryClusterNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryClusterNamespaceResponse) GoString() string {
	return s.String()
}

func (s *QueryClusterNamespaceResponse) SetReqMsgId(v string) *QueryClusterNamespaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryClusterNamespaceResponse) SetResultCode(v string) *QueryClusterNamespaceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryClusterNamespaceResponse) SetResultMsg(v string) *QueryClusterNamespaceResponse {
	s.ResultMsg = &v
	return s
}

type DeleteClusterNamespaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cluster name
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
	// name of namespace
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s DeleteClusterNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterNamespaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteClusterNamespaceRequest) SetAuthToken(v string) *DeleteClusterNamespaceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteClusterNamespaceRequest) SetClusterName(v string) *DeleteClusterNamespaceRequest {
	s.ClusterName = &v
	return s
}

func (s *DeleteClusterNamespaceRequest) SetName(v string) *DeleteClusterNamespaceRequest {
	s.Name = &v
	return s
}

type DeleteClusterNamespaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// is delete namespace success
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteClusterNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterNamespaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteClusterNamespaceResponse) SetReqMsgId(v string) *DeleteClusterNamespaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteClusterNamespaceResponse) SetResultCode(v string) *DeleteClusterNamespaceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteClusterNamespaceResponse) SetResultMsg(v string) *DeleteClusterNamespaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteClusterNamespaceResponse) SetData(v bool) *DeleteClusterNamespaceResponse {
	s.Data = &v
	return s
}

type GetClusterNodeinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cluster name
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
	// node name
	NodeName *string `json:"node_name,omitempty" xml:"node_name,omitempty" require:"true"`
}

func (s GetClusterNodeinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetClusterNodeinfoRequest) GoString() string {
	return s.String()
}

func (s *GetClusterNodeinfoRequest) SetAuthToken(v string) *GetClusterNodeinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *GetClusterNodeinfoRequest) SetClusterName(v string) *GetClusterNodeinfoRequest {
	s.ClusterName = &v
	return s
}

func (s *GetClusterNodeinfoRequest) SetNodeName(v string) *GetClusterNodeinfoRequest {
	s.NodeName = &v
	return s
}

type GetClusterNodeinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// node detail info
	Data *NodeInfo `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetClusterNodeinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetClusterNodeinfoResponse) GoString() string {
	return s.String()
}

func (s *GetClusterNodeinfoResponse) SetReqMsgId(v string) *GetClusterNodeinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetClusterNodeinfoResponse) SetResultCode(v string) *GetClusterNodeinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *GetClusterNodeinfoResponse) SetResultMsg(v string) *GetClusterNodeinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetClusterNodeinfoResponse) SetData(v *NodeInfo) *GetClusterNodeinfoResponse {
	s.Data = v
	return s
}

type CreateFederationImagepullsecretRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cells
	Cells []*string `json:"cells,omitempty" xml:"cells,omitempty" require:"true" type:"Repeated"`
	// labels
	Labels []*Label `json:"labels,omitempty" xml:"labels,omitempty" type:"Repeated"`
	// image pull secret name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// image pull secret namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// fed image pull secret list
	Overrides *FedImagePullSecretOverrideList `json:"overrides,omitempty" xml:"overrides,omitempty" require:"true"`
	// registry account
	RegistryAccount *RegistryAccout `json:"registry_account,omitempty" xml:"registry_account,omitempty" require:"true"`
	// workspace group name
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s CreateFederationImagepullsecretRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFederationImagepullsecretRequest) GoString() string {
	return s.String()
}

func (s *CreateFederationImagepullsecretRequest) SetAuthToken(v string) *CreateFederationImagepullsecretRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFederationImagepullsecretRequest) SetCells(v []*string) *CreateFederationImagepullsecretRequest {
	s.Cells = v
	return s
}

func (s *CreateFederationImagepullsecretRequest) SetLabels(v []*Label) *CreateFederationImagepullsecretRequest {
	s.Labels = v
	return s
}

func (s *CreateFederationImagepullsecretRequest) SetName(v string) *CreateFederationImagepullsecretRequest {
	s.Name = &v
	return s
}

func (s *CreateFederationImagepullsecretRequest) SetNamespace(v string) *CreateFederationImagepullsecretRequest {
	s.Namespace = &v
	return s
}

func (s *CreateFederationImagepullsecretRequest) SetOverrides(v *FedImagePullSecretOverrideList) *CreateFederationImagepullsecretRequest {
	s.Overrides = v
	return s
}

func (s *CreateFederationImagepullsecretRequest) SetRegistryAccount(v *RegistryAccout) *CreateFederationImagepullsecretRequest {
	s.RegistryAccount = v
	return s
}

func (s *CreateFederationImagepullsecretRequest) SetWorkspaceGroupName(v string) *CreateFederationImagepullsecretRequest {
	s.WorkspaceGroupName = &v
	return s
}

type CreateFederationImagepullsecretResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// image pull secret
	Secret *FedSecret `json:"secret,omitempty" xml:"secret,omitempty"`
}

func (s CreateFederationImagepullsecretResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFederationImagepullsecretResponse) GoString() string {
	return s.String()
}

func (s *CreateFederationImagepullsecretResponse) SetReqMsgId(v string) *CreateFederationImagepullsecretResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFederationImagepullsecretResponse) SetResultCode(v string) *CreateFederationImagepullsecretResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFederationImagepullsecretResponse) SetResultMsg(v string) *CreateFederationImagepullsecretResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateFederationImagepullsecretResponse) SetSecret(v *FedSecret) *CreateFederationImagepullsecretResponse {
	s.Secret = v
	return s
}

type ListClusterNodepodRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cluster name
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
	// node name
	NodeName *string `json:"node_name,omitempty" xml:"node_name,omitempty" require:"true"`
	// workspace group name
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s ListClusterNodepodRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterNodepodRequest) GoString() string {
	return s.String()
}

func (s *ListClusterNodepodRequest) SetAuthToken(v string) *ListClusterNodepodRequest {
	s.AuthToken = &v
	return s
}

func (s *ListClusterNodepodRequest) SetClusterName(v string) *ListClusterNodepodRequest {
	s.ClusterName = &v
	return s
}

func (s *ListClusterNodepodRequest) SetNodeName(v string) *ListClusterNodepodRequest {
	s.NodeName = &v
	return s
}

func (s *ListClusterNodepodRequest) SetWorkspaceGroupName(v string) *ListClusterNodepodRequest {
	s.WorkspaceGroupName = &v
	return s
}

type ListClusterNodepodResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// pod infos
	Data []*PodDetailInfo `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListClusterNodepodResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterNodepodResponse) GoString() string {
	return s.String()
}

func (s *ListClusterNodepodResponse) SetReqMsgId(v string) *ListClusterNodepodResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListClusterNodepodResponse) SetResultCode(v string) *ListClusterNodepodResponse {
	s.ResultCode = &v
	return s
}

func (s *ListClusterNodepodResponse) SetResultMsg(v string) *ListClusterNodepodResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListClusterNodepodResponse) SetData(v []*PodDetailInfo) *ListClusterNodepodResponse {
	s.Data = v
	return s
}

type ListClusterNodeeventRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cluster name
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
	// node name
	NodeName *string `json:"node_name,omitempty" xml:"node_name,omitempty" require:"true"`
	// workspace group name
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s ListClusterNodeeventRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterNodeeventRequest) GoString() string {
	return s.String()
}

func (s *ListClusterNodeeventRequest) SetAuthToken(v string) *ListClusterNodeeventRequest {
	s.AuthToken = &v
	return s
}

func (s *ListClusterNodeeventRequest) SetClusterName(v string) *ListClusterNodeeventRequest {
	s.ClusterName = &v
	return s
}

func (s *ListClusterNodeeventRequest) SetNodeName(v string) *ListClusterNodeeventRequest {
	s.NodeName = &v
	return s
}

func (s *ListClusterNodeeventRequest) SetWorkspaceGroupName(v string) *ListClusterNodeeventRequest {
	s.WorkspaceGroupName = &v
	return s
}

type ListClusterNodeeventResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// node events
	Data []*NodeEvent `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListClusterNodeeventResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterNodeeventResponse) GoString() string {
	return s.String()
}

func (s *ListClusterNodeeventResponse) SetReqMsgId(v string) *ListClusterNodeeventResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListClusterNodeeventResponse) SetResultCode(v string) *ListClusterNodeeventResponse {
	s.ResultCode = &v
	return s
}

func (s *ListClusterNodeeventResponse) SetResultMsg(v string) *ListClusterNodeeventResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListClusterNodeeventResponse) SetData(v []*NodeEvent) *ListClusterNodeeventResponse {
	s.Data = v
	return s
}

type QueryOpsplanRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	//
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 发布单创建起始时间
	//
	CreationTimeFrom *string `json:"creation_time_from,omitempty" xml:"creation_time_from,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 发布单创建截止时间
	//
	CreationTimeTo *string `json:"creation_time_to,omitempty" xml:"creation_time_to,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 当前页码，从1开始
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty" require:"true"`
	// 发布单名称前缀
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 运维单类型：REBOOT,ONLINE,OFFLINE
	Mode *string `json:"mode,omitempty" xml:"mode,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true" maximum:"100" minimum:"1"`
	// 发布单id列表
	//
	PlanIds []*string `json:"plan_ids,omitempty" xml:"plan_ids,omitempty" type:"Repeated"`
	// 发布单状态列表
	StateList []*string `json:"state_list,omitempty" xml:"state_list,omitempty" type:"Repeated"`
	// 发布单号
	//
	TimeSeriesId *string `json:"time_series_id,omitempty" xml:"time_series_id,omitempty"`
	// 发布单类型列表， e.g: 分组发布|重启
	//
	Types []*string `json:"types,omitempty" xml:"types,omitempty" require:"true" type:"Repeated"`
	// 工作空间组名称
	//
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s QueryOpsplanRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsplanRequest) GoString() string {
	return s.String()
}

func (s *QueryOpsplanRequest) SetAuthToken(v string) *QueryOpsplanRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOpsplanRequest) SetAppName(v string) *QueryOpsplanRequest {
	s.AppName = &v
	return s
}

func (s *QueryOpsplanRequest) SetCreationTimeFrom(v string) *QueryOpsplanRequest {
	s.CreationTimeFrom = &v
	return s
}

func (s *QueryOpsplanRequest) SetCreationTimeTo(v string) *QueryOpsplanRequest {
	s.CreationTimeTo = &v
	return s
}

func (s *QueryOpsplanRequest) SetCurrentPage(v int64) *QueryOpsplanRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryOpsplanRequest) SetName(v string) *QueryOpsplanRequest {
	s.Name = &v
	return s
}

func (s *QueryOpsplanRequest) SetMode(v string) *QueryOpsplanRequest {
	s.Mode = &v
	return s
}

func (s *QueryOpsplanRequest) SetPageSize(v int64) *QueryOpsplanRequest {
	s.PageSize = &v
	return s
}

func (s *QueryOpsplanRequest) SetPlanIds(v []*string) *QueryOpsplanRequest {
	s.PlanIds = v
	return s
}

func (s *QueryOpsplanRequest) SetStateList(v []*string) *QueryOpsplanRequest {
	s.StateList = v
	return s
}

func (s *QueryOpsplanRequest) SetTimeSeriesId(v string) *QueryOpsplanRequest {
	s.TimeSeriesId = &v
	return s
}

func (s *QueryOpsplanRequest) SetTypes(v []*string) *QueryOpsplanRequest {
	s.Types = v
	return s
}

func (s *QueryOpsplanRequest) SetWorkspaceGroup(v string) *QueryOpsplanRequest {
	s.WorkspaceGroup = &v
	return s
}

type QueryOpsplanResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前页码
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 发布单摘要信息列表
	List []*PlanSimpleView `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 发布单列表起始下标
	StartIndex *int64 `json:"start_index,omitempty" xml:"start_index,omitempty"`
	// 总条数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
}

func (s QueryOpsplanResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsplanResponse) GoString() string {
	return s.String()
}

func (s *QueryOpsplanResponse) SetReqMsgId(v string) *QueryOpsplanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOpsplanResponse) SetResultCode(v string) *QueryOpsplanResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOpsplanResponse) SetResultMsg(v string) *QueryOpsplanResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOpsplanResponse) SetCurrentPage(v int64) *QueryOpsplanResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryOpsplanResponse) SetList(v []*PlanSimpleView) *QueryOpsplanResponse {
	s.List = v
	return s
}

func (s *QueryOpsplanResponse) SetPageSize(v int64) *QueryOpsplanResponse {
	s.PageSize = &v
	return s
}

func (s *QueryOpsplanResponse) SetStartIndex(v int64) *QueryOpsplanResponse {
	s.StartIndex = &v
	return s
}

func (s *QueryOpsplanResponse) SetTotalSize(v int64) *QueryOpsplanResponse {
	s.TotalSize = &v
	return s
}

type QueryOpsplanStatesummaryRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组名称
	//
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 发布单类型列表
	//
	Types []*string `json:"types,omitempty" xml:"types,omitempty" require:"true" type:"Repeated"`
	// 发布单号
	//
	TimeSeriesId *string `json:"time_series_id,omitempty" xml:"time_series_id,omitempty"`
	// 发布单状态列表
	//
	StateList []*string `json:"state_list,omitempty" xml:"state_list,omitempty" type:"Repeated"`
	// 发布单id列表
	//
	PlanIds []*string `json:"plan_ids,omitempty" xml:"plan_ids,omitempty" type:"Repeated"`
	// 发布单名称前缀
	//
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 分页大小
	//
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true" maximum:"100" minimum:"1"`
	// 当前页码，从1开始
	//
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty" require:"true" minimum:"1"`
	// 发布单创建起始时间
	CreationTimeFrom *string `json:"creation_time_from,omitempty" xml:"creation_time_from,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 发布单创建截止时间
	//
	CreationTimeTo *string `json:"creation_time_to,omitempty" xml:"creation_time_to,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 应用名称
	//
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
}

func (s QueryOpsplanStatesummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsplanStatesummaryRequest) GoString() string {
	return s.String()
}

func (s *QueryOpsplanStatesummaryRequest) SetAuthToken(v string) *QueryOpsplanStatesummaryRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOpsplanStatesummaryRequest) SetWorkspaceGroup(v string) *QueryOpsplanStatesummaryRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *QueryOpsplanStatesummaryRequest) SetTypes(v []*string) *QueryOpsplanStatesummaryRequest {
	s.Types = v
	return s
}

func (s *QueryOpsplanStatesummaryRequest) SetTimeSeriesId(v string) *QueryOpsplanStatesummaryRequest {
	s.TimeSeriesId = &v
	return s
}

func (s *QueryOpsplanStatesummaryRequest) SetStateList(v []*string) *QueryOpsplanStatesummaryRequest {
	s.StateList = v
	return s
}

func (s *QueryOpsplanStatesummaryRequest) SetPlanIds(v []*string) *QueryOpsplanStatesummaryRequest {
	s.PlanIds = v
	return s
}

func (s *QueryOpsplanStatesummaryRequest) SetName(v string) *QueryOpsplanStatesummaryRequest {
	s.Name = &v
	return s
}

func (s *QueryOpsplanStatesummaryRequest) SetPageSize(v int64) *QueryOpsplanStatesummaryRequest {
	s.PageSize = &v
	return s
}

func (s *QueryOpsplanStatesummaryRequest) SetCurrentPage(v int64) *QueryOpsplanStatesummaryRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryOpsplanStatesummaryRequest) SetCreationTimeFrom(v string) *QueryOpsplanStatesummaryRequest {
	s.CreationTimeFrom = &v
	return s
}

func (s *QueryOpsplanStatesummaryRequest) SetCreationTimeTo(v string) *QueryOpsplanStatesummaryRequest {
	s.CreationTimeTo = &v
	return s
}

func (s *QueryOpsplanStatesummaryRequest) SetAppName(v string) *QueryOpsplanStatesummaryRequest {
	s.AppName = &v
	return s
}

type QueryOpsplanStatesummaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发布单状态汇总数据
	Data []*LdcPlanStateCount `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryOpsplanStatesummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsplanStatesummaryResponse) GoString() string {
	return s.String()
}

func (s *QueryOpsplanStatesummaryResponse) SetReqMsgId(v string) *QueryOpsplanStatesummaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOpsplanStatesummaryResponse) SetResultCode(v string) *QueryOpsplanStatesummaryResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOpsplanStatesummaryResponse) SetResultMsg(v string) *QueryOpsplanStatesummaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOpsplanStatesummaryResponse) SetData(v []*LdcPlanStateCount) *QueryOpsplanStatesummaryResponse {
	s.Data = v
	return s
}

type QueryOpsplanDetailRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布单id
	TimeSeriesId *string `json:"time_series_id,omitempty" xml:"time_series_id,omitempty" require:"true"`
}

func (s QueryOpsplanDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsplanDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryOpsplanDetailRequest) SetAuthToken(v string) *QueryOpsplanDetailRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOpsplanDetailRequest) SetTimeSeriesId(v string) *QueryOpsplanDetailRequest {
	s.TimeSeriesId = &v
	return s
}

type QueryOpsplanDetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发布单包含的应用数
	AppCount *int64 `json:"app_count,omitempty" xml:"app_count,omitempty"`
	// 应用信息列表
	AppInfos []*AppSimpleInfo `json:"app_infos,omitempty" xml:"app_infos,omitempty" type:"Repeated"`
	// 执行人
	Executor *string `json:"executor,omitempty" xml:"executor,omitempty"`
	// 发布结束时间
	FinishTime *string `json:"finish_time,omitempty" xml:"finish_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 应用分组概要信息列表
	GroupCollectionList []*AppGroupSimpleViewList `json:"group_collection_list,omitempty" xml:"group_collection_list,omitempty" type:"Repeated"`
	// 发布单id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 错误信息
	MessageDetail *string `json:"message_detail,omitempty" xml:"message_detail,omitempty"`
	// 运维单类型
	//
	Mode *string `json:"mode,omitempty" xml:"mode,omitempty"`
	// 发布单标题
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 备注信息
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// 发布开始时间
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 发布单状态
	//
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 发布单号
	TimeSeriesId *string `json:"time_series_id,omitempty" xml:"time_series_id,omitempty"`
	// 发布单类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// pod数量
	PodCount *int64 `json:"pod_count,omitempty" xml:"pod_count,omitempty"`
	// 审批状态：AGREE-同意，REJECTED-拒绝，CANCELED-取消
	ApprovalStatus *string `json:"approval_status,omitempty" xml:"approval_status,omitempty"`
	// 审批详情url
	ApprovalUrl *string `json:"approval_url,omitempty" xml:"approval_url,omitempty"`
}

func (s QueryOpsplanDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsplanDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryOpsplanDetailResponse) SetReqMsgId(v string) *QueryOpsplanDetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetResultCode(v string) *QueryOpsplanDetailResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetResultMsg(v string) *QueryOpsplanDetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetAppCount(v int64) *QueryOpsplanDetailResponse {
	s.AppCount = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetAppInfos(v []*AppSimpleInfo) *QueryOpsplanDetailResponse {
	s.AppInfos = v
	return s
}

func (s *QueryOpsplanDetailResponse) SetExecutor(v string) *QueryOpsplanDetailResponse {
	s.Executor = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetFinishTime(v string) *QueryOpsplanDetailResponse {
	s.FinishTime = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetGroupCollectionList(v []*AppGroupSimpleViewList) *QueryOpsplanDetailResponse {
	s.GroupCollectionList = v
	return s
}

func (s *QueryOpsplanDetailResponse) SetId(v string) *QueryOpsplanDetailResponse {
	s.Id = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetMessageDetail(v string) *QueryOpsplanDetailResponse {
	s.MessageDetail = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetMode(v string) *QueryOpsplanDetailResponse {
	s.Mode = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetName(v string) *QueryOpsplanDetailResponse {
	s.Name = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetRemark(v string) *QueryOpsplanDetailResponse {
	s.Remark = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetStartTime(v string) *QueryOpsplanDetailResponse {
	s.StartTime = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetState(v string) *QueryOpsplanDetailResponse {
	s.State = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetTimeSeriesId(v string) *QueryOpsplanDetailResponse {
	s.TimeSeriesId = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetType(v string) *QueryOpsplanDetailResponse {
	s.Type = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetPodCount(v int64) *QueryOpsplanDetailResponse {
	s.PodCount = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetApprovalStatus(v string) *QueryOpsplanDetailResponse {
	s.ApprovalStatus = &v
	return s
}

func (s *QueryOpsplanDetailResponse) SetApprovalUrl(v string) *QueryOpsplanDetailResponse {
	s.ApprovalUrl = &v
	return s
}

type QueryBuildpackTechstackRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s QueryBuildpackTechstackRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackTechstackRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackTechstackRequest) SetAuthToken(v string) *QueryBuildpackTechstackRequest {
	s.AuthToken = &v
	return s
}

type QueryBuildpackTechstackResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前租户内可见的技术栈分类：包括公共可见以及租户自定义分类
	List []*TechStack `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
}

func (s QueryBuildpackTechstackResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackTechstackResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackTechstackResponse) SetReqMsgId(v string) *QueryBuildpackTechstackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackTechstackResponse) SetResultCode(v string) *QueryBuildpackTechstackResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackTechstackResponse) SetResultMsg(v string) *QueryBuildpackTechstackResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackTechstackResponse) SetList(v []*TechStack) *QueryBuildpackTechstackResponse {
	s.List = v
	return s
}

type QueryBuildpackNativetechstackversionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 技术栈名称。
	// 原则上允许用户定义同名自定义技术栈（e.g,用户创建和全局同名的技术栈SOFA），此时优先获取用户自定义技术栈下技术栈版本；
	TechStack *string `json:"tech_stack,omitempty" xml:"tech_stack,omitempty" require:"true"`
	// 当前页码， 默认值为1
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 一页获取个数，默认值10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" maximum:"100" minimum:"1"`
}

func (s QueryBuildpackNativetechstackversionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackNativetechstackversionRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackNativetechstackversionRequest) SetAuthToken(v string) *QueryBuildpackNativetechstackversionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBuildpackNativetechstackversionRequest) SetTechStack(v string) *QueryBuildpackNativetechstackversionRequest {
	s.TechStack = &v
	return s
}

func (s *QueryBuildpackNativetechstackversionRequest) SetCurrentPage(v int64) *QueryBuildpackNativetechstackversionRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryBuildpackNativetechstackversionRequest) SetPageSize(v int64) *QueryBuildpackNativetechstackversionRequest {
	s.PageSize = &v
	return s
}

type QueryBuildpackNativetechstackversionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 总个数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 云原生技术栈版本列表
	List []*NativeTechStackVersion `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
	// 当前页码
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 一页包含个数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryBuildpackNativetechstackversionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackNativetechstackversionResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackNativetechstackversionResponse) SetReqMsgId(v string) *QueryBuildpackNativetechstackversionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackNativetechstackversionResponse) SetResultCode(v string) *QueryBuildpackNativetechstackversionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackNativetechstackversionResponse) SetResultMsg(v string) *QueryBuildpackNativetechstackversionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackNativetechstackversionResponse) SetTotalCount(v int64) *QueryBuildpackNativetechstackversionResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryBuildpackNativetechstackversionResponse) SetList(v []*NativeTechStackVersion) *QueryBuildpackNativetechstackversionResponse {
	s.List = v
	return s
}

func (s *QueryBuildpackNativetechstackversionResponse) SetCurrentPage(v int64) *QueryBuildpackNativetechstackversionResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryBuildpackNativetechstackversionResponse) SetPageSize(v int64) *QueryBuildpackNativetechstackversionResponse {
	s.PageSize = &v
	return s
}

type UpdateContainerserviceNativebpversionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用服务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 容器服务所在命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 云原生技术栈版本
	NativeBuildPackVersion *string `json:"native_build_pack_version,omitempty" xml:"native_build_pack_version,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 环境名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 容器服务版本
	Revision *string `json:"revision,omitempty" xml:"revision,omitempty" require:"true"`
}

func (s UpdateContainerserviceNativebpversionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerserviceNativebpversionRequest) GoString() string {
	return s.String()
}

func (s *UpdateContainerserviceNativebpversionRequest) SetAuthToken(v string) *UpdateContainerserviceNativebpversionRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateContainerserviceNativebpversionRequest) SetName(v string) *UpdateContainerserviceNativebpversionRequest {
	s.Name = &v
	return s
}

func (s *UpdateContainerserviceNativebpversionRequest) SetNamespace(v string) *UpdateContainerserviceNativebpversionRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateContainerserviceNativebpversionRequest) SetNativeBuildPackVersion(v string) *UpdateContainerserviceNativebpversionRequest {
	s.NativeBuildPackVersion = &v
	return s
}

func (s *UpdateContainerserviceNativebpversionRequest) SetOperator(v string) *UpdateContainerserviceNativebpversionRequest {
	s.Operator = &v
	return s
}

func (s *UpdateContainerserviceNativebpversionRequest) SetWorkspaceGroup(v string) *UpdateContainerserviceNativebpversionRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *UpdateContainerserviceNativebpversionRequest) SetRevision(v string) *UpdateContainerserviceNativebpversionRequest {
	s.Revision = &v
	return s
}

type UpdateContainerserviceNativebpversionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 更新后的容器应用服务版本号
	Revision *string `json:"revision,omitempty" xml:"revision,omitempty"`
}

func (s UpdateContainerserviceNativebpversionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerserviceNativebpversionResponse) GoString() string {
	return s.String()
}

func (s *UpdateContainerserviceNativebpversionResponse) SetReqMsgId(v string) *UpdateContainerserviceNativebpversionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateContainerserviceNativebpversionResponse) SetResultCode(v string) *UpdateContainerserviceNativebpversionResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateContainerserviceNativebpversionResponse) SetResultMsg(v string) *UpdateContainerserviceNativebpversionResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateContainerserviceNativebpversionResponse) SetRevision(v string) *UpdateContainerserviceNativebpversionResponse {
	s.Revision = &v
	return s
}

type LoadContainerserviceDockerfileRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用服务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 应用包地址，可以为相对目录，或者远程可访问存储地址.
	// 用于组装Dockerfile模板中对应的应用包获取地址
	PackageUrl *string `json:"package_url,omitempty" xml:"package_url,omitempty" require:"true"`
	// 环境名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 容器服务所在namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
}

func (s LoadContainerserviceDockerfileRequest) String() string {
	return tea.Prettify(s)
}

func (s LoadContainerserviceDockerfileRequest) GoString() string {
	return s.String()
}

func (s *LoadContainerserviceDockerfileRequest) SetAuthToken(v string) *LoadContainerserviceDockerfileRequest {
	s.AuthToken = &v
	return s
}

func (s *LoadContainerserviceDockerfileRequest) SetName(v string) *LoadContainerserviceDockerfileRequest {
	s.Name = &v
	return s
}

func (s *LoadContainerserviceDockerfileRequest) SetPackageUrl(v string) *LoadContainerserviceDockerfileRequest {
	s.PackageUrl = &v
	return s
}

func (s *LoadContainerserviceDockerfileRequest) SetWorkspaceGroup(v string) *LoadContainerserviceDockerfileRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *LoadContainerserviceDockerfileRequest) SetNamespace(v string) *LoadContainerserviceDockerfileRequest {
	s.Namespace = &v
	return s
}

type LoadContainerserviceDockerfileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Dockerfile指令列表
	Commands []*string `json:"commands,omitempty" xml:"commands,omitempty" type:"Repeated"`
}

func (s LoadContainerserviceDockerfileResponse) String() string {
	return tea.Prettify(s)
}

func (s LoadContainerserviceDockerfileResponse) GoString() string {
	return s.String()
}

func (s *LoadContainerserviceDockerfileResponse) SetReqMsgId(v string) *LoadContainerserviceDockerfileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *LoadContainerserviceDockerfileResponse) SetResultCode(v string) *LoadContainerserviceDockerfileResponse {
	s.ResultCode = &v
	return s
}

func (s *LoadContainerserviceDockerfileResponse) SetResultMsg(v string) *LoadContainerserviceDockerfileResponse {
	s.ResultMsg = &v
	return s
}

func (s *LoadContainerserviceDockerfileResponse) SetCommands(v []*string) *LoadContainerserviceDockerfileResponse {
	s.Commands = v
	return s
}

type CreateBuildpackNativetechstackversionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// ce4456_jdk8_tengine6
	DisplayVersion *string `json:"display_version,omitempty" xml:"display_version,omitempty" require:"true"`
	// 版本描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 完整的镜像地址
	FromImage *string `json:"from_image,omitempty" xml:"from_image,omitempty" require:"true"`
	// 所属技术栈大类
	TechStack *string `json:"tech_stack,omitempty" xml:"tech_stack,omitempty" require:"true"`
	// 技术栈大类对应的id，如不填写，后台默认根据名称校验所属技术栈大类
	TechStackId *string `json:"tech_stack_id,omitempty" xml:"tech_stack_id,omitempty"`
	// 指定该版本可见范围：
	// PUBLIC - 全站点各个租户都可见；
	// TENANT - 仅创建改版本对应的租户内可见
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty" require:"true"`
	// 扩展的Dockerfile指令。
	// 用于在FromImage的基础上扩展Dockerfile指令
	ExtCommands []*string `json:"ext_commands,omitempty" xml:"ext_commands,omitempty" type:"Repeated"`
	// 扩展属性 - 表现为Map<String,String>序列化后的字符串
	ExtendProperties *string `json:"extend_properties,omitempty" xml:"extend_properties,omitempty"`
}

func (s CreateBuildpackNativetechstackversionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBuildpackNativetechstackversionRequest) GoString() string {
	return s.String()
}

func (s *CreateBuildpackNativetechstackversionRequest) SetAuthToken(v string) *CreateBuildpackNativetechstackversionRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBuildpackNativetechstackversionRequest) SetDisplayVersion(v string) *CreateBuildpackNativetechstackversionRequest {
	s.DisplayVersion = &v
	return s
}

func (s *CreateBuildpackNativetechstackversionRequest) SetDescription(v string) *CreateBuildpackNativetechstackversionRequest {
	s.Description = &v
	return s
}

func (s *CreateBuildpackNativetechstackversionRequest) SetFromImage(v string) *CreateBuildpackNativetechstackversionRequest {
	s.FromImage = &v
	return s
}

func (s *CreateBuildpackNativetechstackversionRequest) SetTechStack(v string) *CreateBuildpackNativetechstackversionRequest {
	s.TechStack = &v
	return s
}

func (s *CreateBuildpackNativetechstackversionRequest) SetTechStackId(v string) *CreateBuildpackNativetechstackversionRequest {
	s.TechStackId = &v
	return s
}

func (s *CreateBuildpackNativetechstackversionRequest) SetScope(v string) *CreateBuildpackNativetechstackversionRequest {
	s.Scope = &v
	return s
}

func (s *CreateBuildpackNativetechstackversionRequest) SetExtCommands(v []*string) *CreateBuildpackNativetechstackversionRequest {
	s.ExtCommands = v
	return s
}

func (s *CreateBuildpackNativetechstackversionRequest) SetExtendProperties(v string) *CreateBuildpackNativetechstackversionRequest {
	s.ExtendProperties = &v
	return s
}

type CreateBuildpackNativetechstackversionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建后生成的对象信息
	Data *NativeTechStackVersion `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateBuildpackNativetechstackversionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBuildpackNativetechstackversionResponse) GoString() string {
	return s.String()
}

func (s *CreateBuildpackNativetechstackversionResponse) SetReqMsgId(v string) *CreateBuildpackNativetechstackversionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBuildpackNativetechstackversionResponse) SetResultCode(v string) *CreateBuildpackNativetechstackversionResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBuildpackNativetechstackversionResponse) SetResultMsg(v string) *CreateBuildpackNativetechstackversionResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBuildpackNativetechstackversionResponse) SetData(v *NativeTechStackVersion) *CreateBuildpackNativetechstackversionResponse {
	s.Data = v
	return s
}

type ListMulticlusterZoneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace group name
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s ListMulticlusterZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMulticlusterZoneRequest) GoString() string {
	return s.String()
}

func (s *ListMulticlusterZoneRequest) SetAuthToken(v string) *ListMulticlusterZoneRequest {
	s.AuthToken = &v
	return s
}

func (s *ListMulticlusterZoneRequest) SetWorkspaceGroup(v string) *ListMulticlusterZoneRequest {
	s.WorkspaceGroup = &v
	return s
}

type ListMulticlusterZoneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// zones of workspace group
	Data []*ZoneOfWorkspace `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListMulticlusterZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMulticlusterZoneResponse) GoString() string {
	return s.String()
}

func (s *ListMulticlusterZoneResponse) SetReqMsgId(v string) *ListMulticlusterZoneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListMulticlusterZoneResponse) SetResultCode(v string) *ListMulticlusterZoneResponse {
	s.ResultCode = &v
	return s
}

func (s *ListMulticlusterZoneResponse) SetResultMsg(v string) *ListMulticlusterZoneResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListMulticlusterZoneResponse) SetData(v []*ZoneOfWorkspace) *ListMulticlusterZoneResponse {
	s.Data = v
	return s
}

type ExecOpsplanAppopstaskRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 操作类型
	ControlType *string `json:"control_type,omitempty" xml:"control_type,omitempty" require:"true"`
	// pipeline stage 名字
	ActionCode *string `json:"action_code,omitempty" xml:"action_code,omitempty" require:"true"`
	// 任务id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s ExecOpsplanAppopstaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecOpsplanAppopstaskRequest) GoString() string {
	return s.String()
}

func (s *ExecOpsplanAppopstaskRequest) SetAuthToken(v string) *ExecOpsplanAppopstaskRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecOpsplanAppopstaskRequest) SetControlType(v string) *ExecOpsplanAppopstaskRequest {
	s.ControlType = &v
	return s
}

func (s *ExecOpsplanAppopstaskRequest) SetActionCode(v string) *ExecOpsplanAppopstaskRequest {
	s.ActionCode = &v
	return s
}

func (s *ExecOpsplanAppopstaskRequest) SetId(v string) *ExecOpsplanAppopstaskRequest {
	s.Id = &v
	return s
}

type ExecOpsplanAppopstaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecOpsplanAppopstaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecOpsplanAppopstaskResponse) GoString() string {
	return s.String()
}

func (s *ExecOpsplanAppopstaskResponse) SetReqMsgId(v string) *ExecOpsplanAppopstaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecOpsplanAppopstaskResponse) SetResultCode(v string) *ExecOpsplanAppopstaskResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecOpsplanAppopstaskResponse) SetResultMsg(v string) *ExecOpsplanAppopstaskResponse {
	s.ResultMsg = &v
	return s
}

type QueryOpsplanProgressRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布单序列号
	TimeSeriesId *string `json:"time_series_id,omitempty" xml:"time_series_id,omitempty" require:"true"`
}

func (s QueryOpsplanProgressRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsplanProgressRequest) GoString() string {
	return s.String()
}

func (s *QueryOpsplanProgressRequest) SetAuthToken(v string) *QueryOpsplanProgressRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOpsplanProgressRequest) SetTimeSeriesId(v string) *QueryOpsplanProgressRequest {
	s.TimeSeriesId = &v
	return s
}

type QueryOpsplanProgressResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用执行进度
	AppExecuteProgress []*ExecuteProgress `json:"app_execute_progress,omitempty" xml:"app_execute_progress,omitempty" type:"Repeated"`
	// 发布单进度
	ExecuteProgress *ExecuteProgress `json:"execute_progress,omitempty" xml:"execute_progress,omitempty"`
}

func (s QueryOpsplanProgressResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsplanProgressResponse) GoString() string {
	return s.String()
}

func (s *QueryOpsplanProgressResponse) SetReqMsgId(v string) *QueryOpsplanProgressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOpsplanProgressResponse) SetResultCode(v string) *QueryOpsplanProgressResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOpsplanProgressResponse) SetResultMsg(v string) *QueryOpsplanProgressResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOpsplanProgressResponse) SetAppExecuteProgress(v []*ExecuteProgress) *QueryOpsplanProgressResponse {
	s.AppExecuteProgress = v
	return s
}

func (s *QueryOpsplanProgressResponse) SetExecuteProgress(v *ExecuteProgress) *QueryOpsplanProgressResponse {
	s.ExecuteProgress = v
	return s
}

type QueryOpsplanAppprogressRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s QueryOpsplanAppprogressRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsplanAppprogressRequest) GoString() string {
	return s.String()
}

func (s *QueryOpsplanAppprogressRequest) SetAuthToken(v string) *QueryOpsplanAppprogressRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOpsplanAppprogressRequest) SetId(v string) *QueryOpsplanAppprogressRequest {
	s.Id = &v
	return s
}

type QueryOpsplanAppprogressResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用发布进度详情
	AppDeployProgress *AppDeployProgress `json:"app_deploy_progress,omitempty" xml:"app_deploy_progress,omitempty"`
}

func (s QueryOpsplanAppprogressResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsplanAppprogressResponse) GoString() string {
	return s.String()
}

func (s *QueryOpsplanAppprogressResponse) SetReqMsgId(v string) *QueryOpsplanAppprogressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOpsplanAppprogressResponse) SetResultCode(v string) *QueryOpsplanAppprogressResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOpsplanAppprogressResponse) SetResultMsg(v string) *QueryOpsplanAppprogressResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOpsplanAppprogressResponse) SetAppDeployProgress(v *AppDeployProgress) *QueryOpsplanAppprogressResponse {
	s.AppDeployProgress = v
	return s
}

type ListContainerservicePodRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 容器服务名称
	ContainerServiceName *string `json:"container_service_name,omitempty" xml:"container_service_name,omitempty" require:"true"`
	// namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 工作空间组名称。
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s ListContainerservicePodRequest) String() string {
	return tea.Prettify(s)
}

func (s ListContainerservicePodRequest) GoString() string {
	return s.String()
}

func (s *ListContainerservicePodRequest) SetAuthToken(v string) *ListContainerservicePodRequest {
	s.AuthToken = &v
	return s
}

func (s *ListContainerservicePodRequest) SetContainerServiceName(v string) *ListContainerservicePodRequest {
	s.ContainerServiceName = &v
	return s
}

func (s *ListContainerservicePodRequest) SetNamespace(v string) *ListContainerservicePodRequest {
	s.Namespace = &v
	return s
}

func (s *ListContainerservicePodRequest) SetWorkspaceGroupName(v string) *ListContainerservicePodRequest {
	s.WorkspaceGroupName = &v
	return s
}

type ListContainerservicePodResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// pod信息列表
	PodList []*PodInfo `json:"pod_list,omitempty" xml:"pod_list,omitempty" type:"Repeated"`
}

func (s ListContainerservicePodResponse) String() string {
	return tea.Prettify(s)
}

func (s ListContainerservicePodResponse) GoString() string {
	return s.String()
}

func (s *ListContainerservicePodResponse) SetReqMsgId(v string) *ListContainerservicePodResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListContainerservicePodResponse) SetResultCode(v string) *ListContainerservicePodResponse {
	s.ResultCode = &v
	return s
}

func (s *ListContainerservicePodResponse) SetResultMsg(v string) *ListContainerservicePodResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListContainerservicePodResponse) SetPodList(v []*PodInfo) *ListContainerservicePodResponse {
	s.PodList = v
	return s
}

type ListContainerserviceKubeeventsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s ListContainerserviceKubeeventsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListContainerserviceKubeeventsRequest) GoString() string {
	return s.String()
}

func (s *ListContainerserviceKubeeventsRequest) SetAuthToken(v string) *ListContainerserviceKubeeventsRequest {
	s.AuthToken = &v
	return s
}

type ListContainerserviceKubeeventsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// mock
	Success *string `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListContainerserviceKubeeventsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListContainerserviceKubeeventsResponse) GoString() string {
	return s.String()
}

func (s *ListContainerserviceKubeeventsResponse) SetReqMsgId(v string) *ListContainerserviceKubeeventsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListContainerserviceKubeeventsResponse) SetResultCode(v string) *ListContainerserviceKubeeventsResponse {
	s.ResultCode = &v
	return s
}

func (s *ListContainerserviceKubeeventsResponse) SetResultMsg(v string) *ListContainerserviceKubeeventsResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListContainerserviceKubeeventsResponse) SetSuccess(v string) *ListContainerserviceKubeeventsResponse {
	s.Success = &v
	return s
}

type ListPodEventsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 集群名称
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// Pod名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 所属命名空间名称
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 所属环境名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// pod uid
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty" require:"true"`
}

func (s ListPodEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPodEventsRequest) GoString() string {
	return s.String()
}

func (s *ListPodEventsRequest) SetAuthToken(v string) *ListPodEventsRequest {
	s.AuthToken = &v
	return s
}

func (s *ListPodEventsRequest) SetCluster(v string) *ListPodEventsRequest {
	s.Cluster = &v
	return s
}

func (s *ListPodEventsRequest) SetName(v string) *ListPodEventsRequest {
	s.Name = &v
	return s
}

func (s *ListPodEventsRequest) SetNamespace(v string) *ListPodEventsRequest {
	s.Namespace = &v
	return s
}

func (s *ListPodEventsRequest) SetWorkspaceGroup(v string) *ListPodEventsRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *ListPodEventsRequest) SetUid(v string) *ListPodEventsRequest {
	s.Uid = &v
	return s
}

type ListPodEventsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Pod事件列表
	Events []*KubeEvent `json:"events,omitempty" xml:"events,omitempty" type:"Repeated"`
}

func (s ListPodEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPodEventsResponse) GoString() string {
	return s.String()
}

func (s *ListPodEventsResponse) SetReqMsgId(v string) *ListPodEventsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListPodEventsResponse) SetResultCode(v string) *ListPodEventsResponse {
	s.ResultCode = &v
	return s
}

func (s *ListPodEventsResponse) SetResultMsg(v string) *ListPodEventsResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListPodEventsResponse) SetEvents(v []*KubeEvent) *ListPodEventsResponse {
	s.Events = v
	return s
}

type ListPodContainersRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属环境名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 所属集群名称
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// 所属工作空间名称
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// Pod名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s ListPodContainersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPodContainersRequest) GoString() string {
	return s.String()
}

func (s *ListPodContainersRequest) SetAuthToken(v string) *ListPodContainersRequest {
	s.AuthToken = &v
	return s
}

func (s *ListPodContainersRequest) SetWorkspaceGroup(v string) *ListPodContainersRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *ListPodContainersRequest) SetCluster(v string) *ListPodContainersRequest {
	s.Cluster = &v
	return s
}

func (s *ListPodContainersRequest) SetNamespace(v string) *ListPodContainersRequest {
	s.Namespace = &v
	return s
}

func (s *ListPodContainersRequest) SetName(v string) *ListPodContainersRequest {
	s.Name = &v
	return s
}

type ListPodContainersResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Pod容器列表
	Containers []*ContainerInfo `json:"containers,omitempty" xml:"containers,omitempty" type:"Repeated"`
}

func (s ListPodContainersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPodContainersResponse) GoString() string {
	return s.String()
}

func (s *ListPodContainersResponse) SetReqMsgId(v string) *ListPodContainersResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListPodContainersResponse) SetResultCode(v string) *ListPodContainersResponse {
	s.ResultCode = &v
	return s
}

func (s *ListPodContainersResponse) SetResultMsg(v string) *ListPodContainersResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListPodContainersResponse) SetContainers(v []*ContainerInfo) *ListPodContainersResponse {
	s.Containers = v
	return s
}

type QueryContainerserviceCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// container service name
	ContainerServiceName *string `json:"container_service_name,omitempty" xml:"container_service_name,omitempty" require:"true"`
}

func (s QueryContainerserviceCellRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContainerserviceCellRequest) GoString() string {
	return s.String()
}

func (s *QueryContainerserviceCellRequest) SetAuthToken(v string) *QueryContainerserviceCellRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContainerserviceCellRequest) SetContainerServiceName(v string) *QueryContainerserviceCellRequest {
	s.ContainerServiceName = &v
	return s
}

type QueryContainerserviceCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cell list
	CellList []*CellInfo `json:"cell_list,omitempty" xml:"cell_list,omitempty" type:"Repeated"`
}

func (s QueryContainerserviceCellResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContainerserviceCellResponse) GoString() string {
	return s.String()
}

func (s *QueryContainerserviceCellResponse) SetReqMsgId(v string) *QueryContainerserviceCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContainerserviceCellResponse) SetResultCode(v string) *QueryContainerserviceCellResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContainerserviceCellResponse) SetResultMsg(v string) *QueryContainerserviceCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContainerserviceCellResponse) SetCellList(v []*CellInfo) *QueryContainerserviceCellResponse {
	s.CellList = v
	return s
}

type CreateCellgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属idc
	Datacenter *string `json:"datacenter,omitempty" xml:"datacenter,omitempty"`
	// 默认全局域
	DefaultGzone *string `json:"default_gzone,omitempty" xml:"default_gzone,omitempty"`
	// 逻辑单元名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 逻辑单元类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 所属环境名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人。
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
}

func (s CreateCellgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCellgroupRequest) GoString() string {
	return s.String()
}

func (s *CreateCellgroupRequest) SetAuthToken(v string) *CreateCellgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateCellgroupRequest) SetDatacenter(v string) *CreateCellgroupRequest {
	s.Datacenter = &v
	return s
}

func (s *CreateCellgroupRequest) SetDefaultGzone(v string) *CreateCellgroupRequest {
	s.DefaultGzone = &v
	return s
}

func (s *CreateCellgroupRequest) SetName(v string) *CreateCellgroupRequest {
	s.Name = &v
	return s
}

func (s *CreateCellgroupRequest) SetType(v string) *CreateCellgroupRequest {
	s.Type = &v
	return s
}

func (s *CreateCellgroupRequest) SetWorkspaceGroup(v string) *CreateCellgroupRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *CreateCellgroupRequest) SetOperator(v string) *CreateCellgroupRequest {
	s.Operator = &v
	return s
}

type CreateCellgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateCellgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCellgroupResponse) GoString() string {
	return s.String()
}

func (s *CreateCellgroupResponse) SetReqMsgId(v string) *CreateCellgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateCellgroupResponse) SetResultCode(v string) *CreateCellgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateCellgroupResponse) SetResultMsg(v string) *CreateCellgroupResponse {
	s.ResultMsg = &v
	return s
}

type ListCellgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属环境名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// cell group查询前缀
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s ListCellgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCellgroupRequest) GoString() string {
	return s.String()
}

func (s *ListCellgroupRequest) SetAuthToken(v string) *ListCellgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *ListCellgroupRequest) SetWorkspaceGroup(v string) *ListCellgroupRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *ListCellgroupRequest) SetName(v string) *ListCellgroupRequest {
	s.Name = &v
	return s
}

type ListCellgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 逻辑单元列表
	CellGroupList []*CellGroup `json:"cell_group_list,omitempty" xml:"cell_group_list,omitempty" type:"Repeated"`
}

func (s ListCellgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCellgroupResponse) GoString() string {
	return s.String()
}

func (s *ListCellgroupResponse) SetReqMsgId(v string) *ListCellgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListCellgroupResponse) SetResultCode(v string) *ListCellgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *ListCellgroupResponse) SetResultMsg(v string) *ListCellgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListCellgroupResponse) SetCellGroupList(v []*CellGroup) *ListCellgroupResponse {
	s.CellGroupList = v
	return s
}

type UpdateCellgroupDisasterinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 灾备信息。
	DisasterInfo []*DisasterInfo `json:"disaster_info,omitempty" xml:"disaster_info,omitempty" require:"true" type:"Repeated"`
	// 逻辑单元名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 所属环境名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人。
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
}

func (s UpdateCellgroupDisasterinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCellgroupDisasterinfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateCellgroupDisasterinfoRequest) SetAuthToken(v string) *UpdateCellgroupDisasterinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateCellgroupDisasterinfoRequest) SetDisasterInfo(v []*DisasterInfo) *UpdateCellgroupDisasterinfoRequest {
	s.DisasterInfo = v
	return s
}

func (s *UpdateCellgroupDisasterinfoRequest) SetName(v string) *UpdateCellgroupDisasterinfoRequest {
	s.Name = &v
	return s
}

func (s *UpdateCellgroupDisasterinfoRequest) SetWorkspaceGroup(v string) *UpdateCellgroupDisasterinfoRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *UpdateCellgroupDisasterinfoRequest) SetOperator(v string) *UpdateCellgroupDisasterinfoRequest {
	s.Operator = &v
	return s
}

type UpdateCellgroupDisasterinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateCellgroupDisasterinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCellgroupDisasterinfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateCellgroupDisasterinfoResponse) SetReqMsgId(v string) *UpdateCellgroupDisasterinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateCellgroupDisasterinfoResponse) SetResultCode(v string) *UpdateCellgroupDisasterinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateCellgroupDisasterinfoResponse) SetResultMsg(v string) *UpdateCellgroupDisasterinfoResponse {
	s.ResultMsg = &v
	return s
}

type DeleteCellgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属环境名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 逻辑单元名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s DeleteCellgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCellgroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteCellgroupRequest) SetAuthToken(v string) *DeleteCellgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteCellgroupRequest) SetWorkspaceGroup(v string) *DeleteCellgroupRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *DeleteCellgroupRequest) SetName(v string) *DeleteCellgroupRequest {
	s.Name = &v
	return s
}

type DeleteCellgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteCellgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCellgroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteCellgroupResponse) SetReqMsgId(v string) *DeleteCellgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteCellgroupResponse) SetResultCode(v string) *DeleteCellgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteCellgroupResponse) SetResultMsg(v string) *DeleteCellgroupResponse {
	s.ResultMsg = &v
	return s
}

type ListCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单元名称前缀
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 环境名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s ListCellRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCellRequest) GoString() string {
	return s.String()
}

func (s *ListCellRequest) SetAuthToken(v string) *ListCellRequest {
	s.AuthToken = &v
	return s
}

func (s *ListCellRequest) SetName(v string) *ListCellRequest {
	s.Name = &v
	return s
}

func (s *ListCellRequest) SetWorkspaceGroup(v string) *ListCellRequest {
	s.WorkspaceGroup = &v
	return s
}

type ListCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 部署单元列表
	Cells []*Cell `json:"cells,omitempty" xml:"cells,omitempty" type:"Repeated"`
}

func (s ListCellResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCellResponse) GoString() string {
	return s.String()
}

func (s *ListCellResponse) SetReqMsgId(v string) *ListCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListCellResponse) SetResultCode(v string) *ListCellResponse {
	s.ResultCode = &v
	return s
}

func (s *ListCellResponse) SetResultMsg(v string) *ListCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListCellResponse) SetCells(v []*Cell) *ListCellResponse {
	s.Cells = v
	return s
}

type CreateCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属逻辑单元名称[单元化模式特有]。
	CellGroup *string `json:"cell_group,omitempty" xml:"cell_group,omitempty"`
	// 蓝绿着色信息[单元化模式特有]。
	Color *string `json:"color,omitempty" xml:"color,omitempty"`
	// 部署单元标识。
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// 是否灰度[单元化模式特有]。
	IsGray *bool `json:"is_gray,omitempty" xml:"is_gray,omitempty"`
	// 部署单元名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 部署单元类型[单元化模式特有]。
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 权重[单元化模式特有]。
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty"`
	// 所属环境名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 所属机房。
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty" require:"true"`
	// 所属工作空间名称。
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s CreateCellRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCellRequest) GoString() string {
	return s.String()
}

func (s *CreateCellRequest) SetAuthToken(v string) *CreateCellRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateCellRequest) SetCellGroup(v string) *CreateCellRequest {
	s.CellGroup = &v
	return s
}

func (s *CreateCellRequest) SetColor(v string) *CreateCellRequest {
	s.Color = &v
	return s
}

func (s *CreateCellRequest) SetIdentity(v string) *CreateCellRequest {
	s.Identity = &v
	return s
}

func (s *CreateCellRequest) SetIsGray(v bool) *CreateCellRequest {
	s.IsGray = &v
	return s
}

func (s *CreateCellRequest) SetName(v string) *CreateCellRequest {
	s.Name = &v
	return s
}

func (s *CreateCellRequest) SetType(v string) *CreateCellRequest {
	s.Type = &v
	return s
}

func (s *CreateCellRequest) SetWeight(v int64) *CreateCellRequest {
	s.Weight = &v
	return s
}

func (s *CreateCellRequest) SetWorkspaceGroup(v string) *CreateCellRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *CreateCellRequest) SetZone(v string) *CreateCellRequest {
	s.Zone = &v
	return s
}

func (s *CreateCellRequest) SetWorkspace(v string) *CreateCellRequest {
	s.Workspace = &v
	return s
}

type CreateCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateCellResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCellResponse) GoString() string {
	return s.String()
}

func (s *CreateCellResponse) SetReqMsgId(v string) *CreateCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateCellResponse) SetResultCode(v string) *CreateCellResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateCellResponse) SetResultMsg(v string) *CreateCellResponse {
	s.ResultMsg = &v
	return s
}

type DeleteCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单元名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 所属环境名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 所属工作空间名称。
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s DeleteCellRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCellRequest) GoString() string {
	return s.String()
}

func (s *DeleteCellRequest) SetAuthToken(v string) *DeleteCellRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteCellRequest) SetName(v string) *DeleteCellRequest {
	s.Name = &v
	return s
}

func (s *DeleteCellRequest) SetWorkspaceGroup(v string) *DeleteCellRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *DeleteCellRequest) SetWorkspace(v string) *DeleteCellRequest {
	s.Workspace = &v
	return s
}

type DeleteCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteCellResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCellResponse) GoString() string {
	return s.String()
}

func (s *DeleteCellResponse) SetReqMsgId(v string) *DeleteCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteCellResponse) SetResultCode(v string) *DeleteCellResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteCellResponse) SetResultMsg(v string) *DeleteCellResponse {
	s.ResultMsg = &v
	return s
}

type DeletePodRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属环境名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 命名空间名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 容器应用服务名称。
	ContainerService *string `json:"container_service,omitempty" xml:"container_service,omitempty"`
	// 集群名称。
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// pod名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s DeletePodRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePodRequest) GoString() string {
	return s.String()
}

func (s *DeletePodRequest) SetAuthToken(v string) *DeletePodRequest {
	s.AuthToken = &v
	return s
}

func (s *DeletePodRequest) SetWorkspaceGroup(v string) *DeletePodRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *DeletePodRequest) SetNamespace(v string) *DeletePodRequest {
	s.Namespace = &v
	return s
}

func (s *DeletePodRequest) SetContainerService(v string) *DeletePodRequest {
	s.ContainerService = &v
	return s
}

func (s *DeletePodRequest) SetCluster(v string) *DeletePodRequest {
	s.Cluster = &v
	return s
}

func (s *DeletePodRequest) SetName(v string) *DeletePodRequest {
	s.Name = &v
	return s
}

type DeletePodResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeletePodResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePodResponse) GoString() string {
	return s.String()
}

func (s *DeletePodResponse) SetReqMsgId(v string) *DeletePodResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeletePodResponse) SetResultCode(v string) *DeletePodResponse {
	s.ResultCode = &v
	return s
}

func (s *DeletePodResponse) SetResultMsg(v string) *DeletePodResponse {
	s.ResultMsg = &v
	return s
}

type GetWorkspacegroupTopologyRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属环境(WorkspaceGroup)名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 地域
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
}

func (s GetWorkspacegroupTopologyRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspacegroupTopologyRequest) GoString() string {
	return s.String()
}

func (s *GetWorkspacegroupTopologyRequest) SetAuthToken(v string) *GetWorkspacegroupTopologyRequest {
	s.AuthToken = &v
	return s
}

func (s *GetWorkspacegroupTopologyRequest) SetName(v string) *GetWorkspacegroupTopologyRequest {
	s.Name = &v
	return s
}

func (s *GetWorkspacegroupTopologyRequest) SetRegion(v string) *GetWorkspacegroupTopologyRequest {
	s.Region = &v
	return s
}

type GetWorkspacegroupTopologyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 环境逻辑单元信息。
	CellGroups []*CellGroup `json:"cell_groups,omitempty" xml:"cell_groups,omitempty" type:"Repeated"`
	// 环境(WorkspaceGroup)名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 环境机房信息。
	Zones []*ZoneInfo `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
}

func (s GetWorkspacegroupTopologyResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspacegroupTopologyResponse) GoString() string {
	return s.String()
}

func (s *GetWorkspacegroupTopologyResponse) SetReqMsgId(v string) *GetWorkspacegroupTopologyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetWorkspacegroupTopologyResponse) SetResultCode(v string) *GetWorkspacegroupTopologyResponse {
	s.ResultCode = &v
	return s
}

func (s *GetWorkspacegroupTopologyResponse) SetResultMsg(v string) *GetWorkspacegroupTopologyResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetWorkspacegroupTopologyResponse) SetCellGroups(v []*CellGroup) *GetWorkspacegroupTopologyResponse {
	s.CellGroups = v
	return s
}

func (s *GetWorkspacegroupTopologyResponse) SetName(v string) *GetWorkspacegroupTopologyResponse {
	s.Name = &v
	return s
}

func (s *GetWorkspacegroupTopologyResponse) SetZones(v []*ZoneInfo) *GetWorkspacegroupTopologyResponse {
	s.Zones = v
	return s
}

type UpdateFlowCellweightRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单元组
	CellGroup *string `json:"cell_group,omitempty" xml:"cell_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 是否压测流量，默认 false
	Press *bool `json:"press,omitempty" xml:"press,omitempty"`
	// 部署单元权重信息
	WeightInfoList *CellWeightInfoList `json:"weight_info_list,omitempty" xml:"weight_info_list,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s UpdateFlowCellweightRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowCellweightRequest) GoString() string {
	return s.String()
}

func (s *UpdateFlowCellweightRequest) SetAuthToken(v string) *UpdateFlowCellweightRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateFlowCellweightRequest) SetCellGroup(v string) *UpdateFlowCellweightRequest {
	s.CellGroup = &v
	return s
}

func (s *UpdateFlowCellweightRequest) SetOperator(v string) *UpdateFlowCellweightRequest {
	s.Operator = &v
	return s
}

func (s *UpdateFlowCellweightRequest) SetPress(v bool) *UpdateFlowCellweightRequest {
	s.Press = &v
	return s
}

func (s *UpdateFlowCellweightRequest) SetWeightInfoList(v *CellWeightInfoList) *UpdateFlowCellweightRequest {
	s.WeightInfoList = v
	return s
}

func (s *UpdateFlowCellweightRequest) SetWorkspaceGroup(v string) *UpdateFlowCellweightRequest {
	s.WorkspaceGroup = &v
	return s
}

type UpdateFlowCellweightResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateFlowCellweightResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowCellweightResponse) GoString() string {
	return s.String()
}

func (s *UpdateFlowCellweightResponse) SetReqMsgId(v string) *UpdateFlowCellweightResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateFlowCellweightResponse) SetResultCode(v string) *UpdateFlowCellweightResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateFlowCellweightResponse) SetResultMsg(v string) *UpdateFlowCellweightResponse {
	s.ResultMsg = &v
	return s
}

type UpdateFlowUidrangeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单元组
	CellGroup *string `json:"cell_group,omitempty" xml:"cell_group,omitempty" require:"true"`
	// 是否灰度流量（默认false）
	Gray *bool `json:"gray,omitempty" xml:"gray,omitempty"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 是否压测流量（默认 false）
	Press *bool `json:"press,omitempty" xml:"press,omitempty"`
	// uid 范围
	UidRanges *UidShardList `json:"uid_ranges,omitempty" xml:"uid_ranges,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s UpdateFlowUidrangeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowUidrangeRequest) GoString() string {
	return s.String()
}

func (s *UpdateFlowUidrangeRequest) SetAuthToken(v string) *UpdateFlowUidrangeRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateFlowUidrangeRequest) SetCellGroup(v string) *UpdateFlowUidrangeRequest {
	s.CellGroup = &v
	return s
}

func (s *UpdateFlowUidrangeRequest) SetGray(v bool) *UpdateFlowUidrangeRequest {
	s.Gray = &v
	return s
}

func (s *UpdateFlowUidrangeRequest) SetOperator(v string) *UpdateFlowUidrangeRequest {
	s.Operator = &v
	return s
}

func (s *UpdateFlowUidrangeRequest) SetPress(v bool) *UpdateFlowUidrangeRequest {
	s.Press = &v
	return s
}

func (s *UpdateFlowUidrangeRequest) SetUidRanges(v *UidShardList) *UpdateFlowUidrangeRequest {
	s.UidRanges = v
	return s
}

func (s *UpdateFlowUidrangeRequest) SetWorkspaceGroup(v string) *UpdateFlowUidrangeRequest {
	s.WorkspaceGroup = &v
	return s
}

type UpdateFlowUidrangeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateFlowUidrangeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowUidrangeResponse) GoString() string {
	return s.String()
}

func (s *UpdateFlowUidrangeResponse) SetReqMsgId(v string) *UpdateFlowUidrangeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateFlowUidrangeResponse) SetResultCode(v string) *UpdateFlowUidrangeResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateFlowUidrangeResponse) SetResultMsg(v string) *UpdateFlowUidrangeResponse {
	s.ResultMsg = &v
	return s
}

type EnableFlowElasticuidRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 弹出的 UID 信息
	PopOutUids []*PopOutUid `json:"pop_out_uids,omitempty" xml:"pop_out_uids,omitempty" require:"true" type:"Repeated"`
	// 是否压测流量（默认 false）
	Press *bool `json:"press,omitempty" xml:"press,omitempty"`
	// 是否灰度流量（默认 false）
	Gray *bool `json:"gray,omitempty" xml:"gray,omitempty"`
}

func (s EnableFlowElasticuidRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableFlowElasticuidRequest) GoString() string {
	return s.String()
}

func (s *EnableFlowElasticuidRequest) SetAuthToken(v string) *EnableFlowElasticuidRequest {
	s.AuthToken = &v
	return s
}

func (s *EnableFlowElasticuidRequest) SetWorkspaceGroup(v string) *EnableFlowElasticuidRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *EnableFlowElasticuidRequest) SetOperator(v string) *EnableFlowElasticuidRequest {
	s.Operator = &v
	return s
}

func (s *EnableFlowElasticuidRequest) SetPopOutUids(v []*PopOutUid) *EnableFlowElasticuidRequest {
	s.PopOutUids = v
	return s
}

func (s *EnableFlowElasticuidRequest) SetPress(v bool) *EnableFlowElasticuidRequest {
	s.Press = &v
	return s
}

func (s *EnableFlowElasticuidRequest) SetGray(v bool) *EnableFlowElasticuidRequest {
	s.Gray = &v
	return s
}

type EnableFlowElasticuidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s EnableFlowElasticuidResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableFlowElasticuidResponse) GoString() string {
	return s.String()
}

func (s *EnableFlowElasticuidResponse) SetReqMsgId(v string) *EnableFlowElasticuidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *EnableFlowElasticuidResponse) SetResultCode(v string) *EnableFlowElasticuidResponse {
	s.ResultCode = &v
	return s
}

func (s *EnableFlowElasticuidResponse) SetResultMsg(v string) *EnableFlowElasticuidResponse {
	s.ResultMsg = &v
	return s
}

type DisableFlowElasticuidRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 弹回的 UID 分片
	ResumeUids []*int64 `json:"resume_uids,omitempty" xml:"resume_uids,omitempty" require:"true" type:"Repeated"`
	// 是否压测（默认 false）
	Press *bool `json:"press,omitempty" xml:"press,omitempty"`
	// 是否灰度（默认 false）
	Gray *bool `json:"gray,omitempty" xml:"gray,omitempty"`
}

func (s DisableFlowElasticuidRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableFlowElasticuidRequest) GoString() string {
	return s.String()
}

func (s *DisableFlowElasticuidRequest) SetAuthToken(v string) *DisableFlowElasticuidRequest {
	s.AuthToken = &v
	return s
}

func (s *DisableFlowElasticuidRequest) SetWorkspaceGroup(v string) *DisableFlowElasticuidRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *DisableFlowElasticuidRequest) SetOperator(v string) *DisableFlowElasticuidRequest {
	s.Operator = &v
	return s
}

func (s *DisableFlowElasticuidRequest) SetResumeUids(v []*int64) *DisableFlowElasticuidRequest {
	s.ResumeUids = v
	return s
}

func (s *DisableFlowElasticuidRequest) SetPress(v bool) *DisableFlowElasticuidRequest {
	s.Press = &v
	return s
}

func (s *DisableFlowElasticuidRequest) SetGray(v bool) *DisableFlowElasticuidRequest {
	s.Gray = &v
	return s
}

type DisableFlowElasticuidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DisableFlowElasticuidResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableFlowElasticuidResponse) GoString() string {
	return s.String()
}

func (s *DisableFlowElasticuidResponse) SetReqMsgId(v string) *DisableFlowElasticuidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DisableFlowElasticuidResponse) SetResultCode(v string) *DisableFlowElasticuidResponse {
	s.ResultCode = &v
	return s
}

func (s *DisableFlowElasticuidResponse) SetResultMsg(v string) *DisableFlowElasticuidResponse {
	s.ResultMsg = &v
	return s
}

type ExportFlowRuleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 参与规则生成的应用列表
	Apps []*string `json:"apps,omitempty" xml:"apps,omitempty" type:"Repeated"`
	// 是否灰度（默认 false）
	Gray *bool `json:"gray,omitempty" xml:"gray,omitempty"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 规则类型，支持(ZONE_INFO,ELASTIC_BIZ_RULE,ZONE_COLOR,TAO_BAO_RULE)
	RuleType *string `json:"rule_type,omitempty" xml:"rule_type,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 是否进行规则校验，默认 false
	Check *bool `json:"check,omitempty" xml:"check,omitempty"`
}

func (s ExportFlowRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportFlowRuleRequest) GoString() string {
	return s.String()
}

func (s *ExportFlowRuleRequest) SetAuthToken(v string) *ExportFlowRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *ExportFlowRuleRequest) SetApps(v []*string) *ExportFlowRuleRequest {
	s.Apps = v
	return s
}

func (s *ExportFlowRuleRequest) SetGray(v bool) *ExportFlowRuleRequest {
	s.Gray = &v
	return s
}

func (s *ExportFlowRuleRequest) SetOperator(v string) *ExportFlowRuleRequest {
	s.Operator = &v
	return s
}

func (s *ExportFlowRuleRequest) SetRuleType(v string) *ExportFlowRuleRequest {
	s.RuleType = &v
	return s
}

func (s *ExportFlowRuleRequest) SetWorkspaceGroup(v string) *ExportFlowRuleRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *ExportFlowRuleRequest) SetCheck(v bool) *ExportFlowRuleRequest {
	s.Check = &v
	return s
}

type ExportFlowRuleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 流量规则的 JSON 字符串
	Rule *string `json:"rule,omitempty" xml:"rule,omitempty"`
}

func (s ExportFlowRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportFlowRuleResponse) GoString() string {
	return s.String()
}

func (s *ExportFlowRuleResponse) SetReqMsgId(v string) *ExportFlowRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExportFlowRuleResponse) SetResultCode(v string) *ExportFlowRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *ExportFlowRuleResponse) SetResultMsg(v string) *ExportFlowRuleResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExportFlowRuleResponse) SetRule(v string) *ExportFlowRuleResponse {
	s.Rule = &v
	return s
}

type PushFlowRuleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 包含系统列表
	Apps []*string `json:"apps,omitempty" xml:"apps,omitempty" type:"Repeated"`
	// 是否灰度（默认 false）
	Gray *bool `json:"gray,omitempty" xml:"gray,omitempty"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 站点是否全局推送
	PushAll *bool `json:"push_all,omitempty" xml:"push_all,omitempty"`
	// 规则类型,支持(ZONE_INFO,ELASTIC_BIZ_RULE,ZONE_COLOR,TAO_BAO_RULE)
	RuleType *string `json:"rule_type,omitempty" xml:"rule_type,omitempty" require:"true"`
	// 规则文本
	RuleValue *string `json:"rule_value,omitempty" xml:"rule_value,omitempty" require:"true"`
	// 全量的targets信息
	Targets []*string `json:"targets,omitempty" xml:"targets,omitempty" type:"Repeated"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 是否覆盖其他应用的规则，默认 false
	Override *bool `json:"override,omitempty" xml:"override,omitempty"`
}

func (s PushFlowRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s PushFlowRuleRequest) GoString() string {
	return s.String()
}

func (s *PushFlowRuleRequest) SetAuthToken(v string) *PushFlowRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *PushFlowRuleRequest) SetApps(v []*string) *PushFlowRuleRequest {
	s.Apps = v
	return s
}

func (s *PushFlowRuleRequest) SetGray(v bool) *PushFlowRuleRequest {
	s.Gray = &v
	return s
}

func (s *PushFlowRuleRequest) SetOperator(v string) *PushFlowRuleRequest {
	s.Operator = &v
	return s
}

func (s *PushFlowRuleRequest) SetPushAll(v bool) *PushFlowRuleRequest {
	s.PushAll = &v
	return s
}

func (s *PushFlowRuleRequest) SetRuleType(v string) *PushFlowRuleRequest {
	s.RuleType = &v
	return s
}

func (s *PushFlowRuleRequest) SetRuleValue(v string) *PushFlowRuleRequest {
	s.RuleValue = &v
	return s
}

func (s *PushFlowRuleRequest) SetTargets(v []*string) *PushFlowRuleRequest {
	s.Targets = v
	return s
}

func (s *PushFlowRuleRequest) SetWorkspaceGroup(v string) *PushFlowRuleRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *PushFlowRuleRequest) SetOverride(v bool) *PushFlowRuleRequest {
	s.Override = &v
	return s
}

type PushFlowRuleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否灰度环境
	Gray *bool `json:"gray,omitempty" xml:"gray,omitempty"`
	// 推送结果
	RuleResultList []*PushRuleResult `json:"rule_result_list,omitempty" xml:"rule_result_list,omitempty" type:"Repeated"`
}

func (s PushFlowRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s PushFlowRuleResponse) GoString() string {
	return s.String()
}

func (s *PushFlowRuleResponse) SetReqMsgId(v string) *PushFlowRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PushFlowRuleResponse) SetResultCode(v string) *PushFlowRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *PushFlowRuleResponse) SetResultMsg(v string) *PushFlowRuleResponse {
	s.ResultMsg = &v
	return s
}

func (s *PushFlowRuleResponse) SetGray(v bool) *PushFlowRuleResponse {
	s.Gray = &v
	return s
}

func (s *PushFlowRuleResponse) SetRuleResultList(v []*PushRuleResult) *PushFlowRuleResponse {
	s.RuleResultList = v
	return s
}

type AddFlowElasticruleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// MSGBROKER 需要填写。
	// 弹性规则消息类型事件码。
	// 如果包含所有eventCode，可以用英文星号"*"表示。
	EventCodes []*string `json:"event_codes,omitempty" xml:"event_codes,omitempty" type:"Repeated"`
	// 弹性规则方法名称，RPC类型需要填写。
	// 如果包含所有方法，则填写英文星号"*"
	Methods []*string `json:"methods,omitempty" xml:"methods,omitempty" type:"Repeated"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 弹性规则类型，包括：APP、RPC、MSGBROKER，ANTQ
	RuleType *string `json:"rule_type,omitempty" xml:"rule_type,omitempty" require:"true"`
	// 适用的弹性场景名称
	SceneName *string `json:"scene_name,omitempty" xml:"scene_name,omitempty" require:"true"`
	// 弹性规则服务名称。
	// RPC：对应接口名，例如：com.alipay.cif.facade.AckCodeService:1.0:cif。
	// APP：对应应用名，例如：cif。
	// MSG或ANTQ：对应消息groupId，例如：S-UNIQUERY-SYNC。
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty" require:"true"`
	// 弹性规则状态，有效值：VALID（线上生效）、PRESS（仅压测生效）、INVALID（无效状态）
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// MSGBROKER 和 ANTQ 需要填写。
	// 弹性规则消息类型topic。
	// 如果包含所有topic，可以用英文星号"*"表示。
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
	// 是否使用默认EID（默认 false）
	UseDefaultEid *bool `json:"use_default_eid,omitempty" xml:"use_default_eid,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s AddFlowElasticruleRequest) String() string {
	return tea.Prettify(s)
}

func (s AddFlowElasticruleRequest) GoString() string {
	return s.String()
}

func (s *AddFlowElasticruleRequest) SetAuthToken(v string) *AddFlowElasticruleRequest {
	s.AuthToken = &v
	return s
}

func (s *AddFlowElasticruleRequest) SetAppName(v string) *AddFlowElasticruleRequest {
	s.AppName = &v
	return s
}

func (s *AddFlowElasticruleRequest) SetEventCodes(v []*string) *AddFlowElasticruleRequest {
	s.EventCodes = v
	return s
}

func (s *AddFlowElasticruleRequest) SetMethods(v []*string) *AddFlowElasticruleRequest {
	s.Methods = v
	return s
}

func (s *AddFlowElasticruleRequest) SetOperator(v string) *AddFlowElasticruleRequest {
	s.Operator = &v
	return s
}

func (s *AddFlowElasticruleRequest) SetRuleType(v string) *AddFlowElasticruleRequest {
	s.RuleType = &v
	return s
}

func (s *AddFlowElasticruleRequest) SetSceneName(v string) *AddFlowElasticruleRequest {
	s.SceneName = &v
	return s
}

func (s *AddFlowElasticruleRequest) SetServiceName(v string) *AddFlowElasticruleRequest {
	s.ServiceName = &v
	return s
}

func (s *AddFlowElasticruleRequest) SetStatus(v string) *AddFlowElasticruleRequest {
	s.Status = &v
	return s
}

func (s *AddFlowElasticruleRequest) SetTopic(v string) *AddFlowElasticruleRequest {
	s.Topic = &v
	return s
}

func (s *AddFlowElasticruleRequest) SetUseDefaultEid(v bool) *AddFlowElasticruleRequest {
	s.UseDefaultEid = &v
	return s
}

func (s *AddFlowElasticruleRequest) SetWorkspaceGroup(v string) *AddFlowElasticruleRequest {
	s.WorkspaceGroup = &v
	return s
}

type AddFlowElasticruleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddFlowElasticruleResponse) String() string {
	return tea.Prettify(s)
}

func (s AddFlowElasticruleResponse) GoString() string {
	return s.String()
}

func (s *AddFlowElasticruleResponse) SetReqMsgId(v string) *AddFlowElasticruleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddFlowElasticruleResponse) SetResultCode(v string) *AddFlowElasticruleResponse {
	s.ResultCode = &v
	return s
}

func (s *AddFlowElasticruleResponse) SetResultMsg(v string) *AddFlowElasticruleResponse {
	s.ResultMsg = &v
	return s
}

type UpdateFlowElasticruleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 弹性规则 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 弹性规则服务名称。
	// RPC：对应接口名，例如：com.alipay.cif.facade.AckCodeService:1.0:cif。
	// APP：对应应用名，例如：cif。
	// MSG或ANTQ：对应消息groupId，例如：S-UNIQUERY-SYNC。
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty" require:"true"`
	// 弹性规则状态，可选值 VALID("线上生效")，PRESS("仅压测生效")，INVALID("无效状态");
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s UpdateFlowElasticruleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowElasticruleRequest) GoString() string {
	return s.String()
}

func (s *UpdateFlowElasticruleRequest) SetAuthToken(v string) *UpdateFlowElasticruleRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateFlowElasticruleRequest) SetId(v int64) *UpdateFlowElasticruleRequest {
	s.Id = &v
	return s
}

func (s *UpdateFlowElasticruleRequest) SetOperator(v string) *UpdateFlowElasticruleRequest {
	s.Operator = &v
	return s
}

func (s *UpdateFlowElasticruleRequest) SetServiceName(v string) *UpdateFlowElasticruleRequest {
	s.ServiceName = &v
	return s
}

func (s *UpdateFlowElasticruleRequest) SetStatus(v string) *UpdateFlowElasticruleRequest {
	s.Status = &v
	return s
}

func (s *UpdateFlowElasticruleRequest) SetWorkspaceGroup(v string) *UpdateFlowElasticruleRequest {
	s.WorkspaceGroup = &v
	return s
}

type UpdateFlowElasticruleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateFlowElasticruleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowElasticruleResponse) GoString() string {
	return s.String()
}

func (s *UpdateFlowElasticruleResponse) SetReqMsgId(v string) *UpdateFlowElasticruleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateFlowElasticruleResponse) SetResultCode(v string) *UpdateFlowElasticruleResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateFlowElasticruleResponse) SetResultMsg(v string) *UpdateFlowElasticruleResponse {
	s.ResultMsg = &v
	return s
}

type DeleteFlowElasticruleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 弹性规则 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s DeleteFlowElasticruleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowElasticruleRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowElasticruleRequest) SetAuthToken(v string) *DeleteFlowElasticruleRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteFlowElasticruleRequest) SetId(v int64) *DeleteFlowElasticruleRequest {
	s.Id = &v
	return s
}

func (s *DeleteFlowElasticruleRequest) SetOperator(v string) *DeleteFlowElasticruleRequest {
	s.Operator = &v
	return s
}

func (s *DeleteFlowElasticruleRequest) SetWorkspaceGroup(v string) *DeleteFlowElasticruleRequest {
	s.WorkspaceGroup = &v
	return s
}

type DeleteFlowElasticruleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteFlowElasticruleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowElasticruleResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowElasticruleResponse) SetReqMsgId(v string) *DeleteFlowElasticruleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteFlowElasticruleResponse) SetResultCode(v string) *DeleteFlowElasticruleResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteFlowElasticruleResponse) SetResultMsg(v string) *DeleteFlowElasticruleResponse {
	s.ResultMsg = &v
	return s
}

type AddFlowElasticsubruleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 消息eventCode, MSGBROKER必填
	EventCode *string `json:"event_code,omitempty" xml:"event_code,omitempty"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 父规则ID
	ParentId *int64 `json:"parent_id,omitempty" xml:"parent_id,omitempty" require:"true"`
	// 规则值, RPC必填
	RpcMethod *string `json:"rpc_method,omitempty" xml:"rpc_method,omitempty"`
	// 所属规则类型，可选值：RPC, MSGBROKER, ANTQ, APP
	RuleType *string `json:"rule_type,omitempty" xml:"rule_type,omitempty" require:"true"`
	// VALID("线上生效"), PRESS("仅压测生效"), INVALID("无效状态");
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 消息topic, MSGBROKER和ANTQ必填
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
	// 是否使用默认eid, RPC必填
	UseDefaultEid *bool `json:"use_default_eid,omitempty" xml:"use_default_eid,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s AddFlowElasticsubruleRequest) String() string {
	return tea.Prettify(s)
}

func (s AddFlowElasticsubruleRequest) GoString() string {
	return s.String()
}

func (s *AddFlowElasticsubruleRequest) SetAuthToken(v string) *AddFlowElasticsubruleRequest {
	s.AuthToken = &v
	return s
}

func (s *AddFlowElasticsubruleRequest) SetEventCode(v string) *AddFlowElasticsubruleRequest {
	s.EventCode = &v
	return s
}

func (s *AddFlowElasticsubruleRequest) SetOperator(v string) *AddFlowElasticsubruleRequest {
	s.Operator = &v
	return s
}

func (s *AddFlowElasticsubruleRequest) SetParentId(v int64) *AddFlowElasticsubruleRequest {
	s.ParentId = &v
	return s
}

func (s *AddFlowElasticsubruleRequest) SetRpcMethod(v string) *AddFlowElasticsubruleRequest {
	s.RpcMethod = &v
	return s
}

func (s *AddFlowElasticsubruleRequest) SetRuleType(v string) *AddFlowElasticsubruleRequest {
	s.RuleType = &v
	return s
}

func (s *AddFlowElasticsubruleRequest) SetStatus(v string) *AddFlowElasticsubruleRequest {
	s.Status = &v
	return s
}

func (s *AddFlowElasticsubruleRequest) SetTopic(v string) *AddFlowElasticsubruleRequest {
	s.Topic = &v
	return s
}

func (s *AddFlowElasticsubruleRequest) SetUseDefaultEid(v bool) *AddFlowElasticsubruleRequest {
	s.UseDefaultEid = &v
	return s
}

func (s *AddFlowElasticsubruleRequest) SetWorkspaceGroup(v string) *AddFlowElasticsubruleRequest {
	s.WorkspaceGroup = &v
	return s
}

type AddFlowElasticsubruleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddFlowElasticsubruleResponse) String() string {
	return tea.Prettify(s)
}

func (s AddFlowElasticsubruleResponse) GoString() string {
	return s.String()
}

func (s *AddFlowElasticsubruleResponse) SetReqMsgId(v string) *AddFlowElasticsubruleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddFlowElasticsubruleResponse) SetResultCode(v string) *AddFlowElasticsubruleResponse {
	s.ResultCode = &v
	return s
}

func (s *AddFlowElasticsubruleResponse) SetResultMsg(v string) *AddFlowElasticsubruleResponse {
	s.ResultMsg = &v
	return s
}

type DeleteFlowElasticsubruleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 规则 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteFlowElasticsubruleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowElasticsubruleRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowElasticsubruleRequest) SetAuthToken(v string) *DeleteFlowElasticsubruleRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteFlowElasticsubruleRequest) SetWorkspaceGroup(v string) *DeleteFlowElasticsubruleRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *DeleteFlowElasticsubruleRequest) SetOperator(v string) *DeleteFlowElasticsubruleRequest {
	s.Operator = &v
	return s
}

func (s *DeleteFlowElasticsubruleRequest) SetId(v int64) *DeleteFlowElasticsubruleRequest {
	s.Id = &v
	return s
}

type DeleteFlowElasticsubruleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteFlowElasticsubruleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowElasticsubruleResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowElasticsubruleResponse) SetReqMsgId(v string) *DeleteFlowElasticsubruleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteFlowElasticsubruleResponse) SetResultCode(v string) *DeleteFlowElasticsubruleResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteFlowElasticsubruleResponse) SetResultMsg(v string) *DeleteFlowElasticsubruleResponse {
	s.ResultMsg = &v
	return s
}

type UpdateFlowElasticrulestatusRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 命名空间
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 弹性规则ID列表
	ElasticRuleIds []*int64 `json:"elastic_rule_ids,omitempty" xml:"elastic_rule_ids,omitempty" require:"true" type:"Repeated"`
	// VALID("线上生效"), PRESS("仅压测生效"),  INVALID("无效状态");
	NewStatus *string `json:"new_status,omitempty" xml:"new_status,omitempty" require:"true"`
}

func (s UpdateFlowElasticrulestatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowElasticrulestatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateFlowElasticrulestatusRequest) SetAuthToken(v string) *UpdateFlowElasticrulestatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateFlowElasticrulestatusRequest) SetWorkspaceGroup(v string) *UpdateFlowElasticrulestatusRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *UpdateFlowElasticrulestatusRequest) SetOperator(v string) *UpdateFlowElasticrulestatusRequest {
	s.Operator = &v
	return s
}

func (s *UpdateFlowElasticrulestatusRequest) SetElasticRuleIds(v []*int64) *UpdateFlowElasticrulestatusRequest {
	s.ElasticRuleIds = v
	return s
}

func (s *UpdateFlowElasticrulestatusRequest) SetNewStatus(v string) *UpdateFlowElasticrulestatusRequest {
	s.NewStatus = &v
	return s
}

type UpdateFlowElasticrulestatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateFlowElasticrulestatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowElasticrulestatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateFlowElasticrulestatusResponse) SetReqMsgId(v string) *UpdateFlowElasticrulestatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateFlowElasticrulestatusResponse) SetResultCode(v string) *UpdateFlowElasticrulestatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateFlowElasticrulestatusResponse) SetResultMsg(v string) *UpdateFlowElasticrulestatusResponse {
	s.ResultMsg = &v
	return s
}

type BatchdeleteFlowElasticruleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 弹性规则ID列表
	ElasticRuleIds []*int64 `json:"elastic_rule_ids,omitempty" xml:"elastic_rule_ids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteFlowElasticruleRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteFlowElasticruleRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteFlowElasticruleRequest) SetAuthToken(v string) *BatchdeleteFlowElasticruleRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteFlowElasticruleRequest) SetWorkspaceGroup(v string) *BatchdeleteFlowElasticruleRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *BatchdeleteFlowElasticruleRequest) SetOperator(v string) *BatchdeleteFlowElasticruleRequest {
	s.Operator = &v
	return s
}

func (s *BatchdeleteFlowElasticruleRequest) SetElasticRuleIds(v []*int64) *BatchdeleteFlowElasticruleRequest {
	s.ElasticRuleIds = v
	return s
}

type BatchdeleteFlowElasticruleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteFlowElasticruleResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteFlowElasticruleResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteFlowElasticruleResponse) SetReqMsgId(v string) *BatchdeleteFlowElasticruleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteFlowElasticruleResponse) SetResultCode(v string) *BatchdeleteFlowElasticruleResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteFlowElasticruleResponse) SetResultMsg(v string) *BatchdeleteFlowElasticruleResponse {
	s.ResultMsg = &v
	return s
}

type CreateFlowElasticsceneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 场景名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 场景状态，可选值（VALID，INVALID）
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s CreateFlowElasticsceneRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowElasticsceneRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowElasticsceneRequest) SetAuthToken(v string) *CreateFlowElasticsceneRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFlowElasticsceneRequest) SetWorkspaceGroup(v string) *CreateFlowElasticsceneRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *CreateFlowElasticsceneRequest) SetOperator(v string) *CreateFlowElasticsceneRequest {
	s.Operator = &v
	return s
}

func (s *CreateFlowElasticsceneRequest) SetName(v string) *CreateFlowElasticsceneRequest {
	s.Name = &v
	return s
}

func (s *CreateFlowElasticsceneRequest) SetStatus(v string) *CreateFlowElasticsceneRequest {
	s.Status = &v
	return s
}

type CreateFlowElasticsceneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateFlowElasticsceneResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowElasticsceneResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowElasticsceneResponse) SetReqMsgId(v string) *CreateFlowElasticsceneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFlowElasticsceneResponse) SetResultCode(v string) *CreateFlowElasticsceneResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFlowElasticsceneResponse) SetResultMsg(v string) *CreateFlowElasticsceneResponse {
	s.ResultMsg = &v
	return s
}

type UpdateFlowElasticsceneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 弹性场景 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 弹性场景名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 弹性场景状态，可选值（VALID，INVALID）
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s UpdateFlowElasticsceneRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowElasticsceneRequest) GoString() string {
	return s.String()
}

func (s *UpdateFlowElasticsceneRequest) SetAuthToken(v string) *UpdateFlowElasticsceneRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateFlowElasticsceneRequest) SetWorkspaceGroup(v string) *UpdateFlowElasticsceneRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *UpdateFlowElasticsceneRequest) SetOperator(v string) *UpdateFlowElasticsceneRequest {
	s.Operator = &v
	return s
}

func (s *UpdateFlowElasticsceneRequest) SetId(v int64) *UpdateFlowElasticsceneRequest {
	s.Id = &v
	return s
}

func (s *UpdateFlowElasticsceneRequest) SetName(v string) *UpdateFlowElasticsceneRequest {
	s.Name = &v
	return s
}

func (s *UpdateFlowElasticsceneRequest) SetStatus(v string) *UpdateFlowElasticsceneRequest {
	s.Status = &v
	return s
}

type UpdateFlowElasticsceneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateFlowElasticsceneResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowElasticsceneResponse) GoString() string {
	return s.String()
}

func (s *UpdateFlowElasticsceneResponse) SetReqMsgId(v string) *UpdateFlowElasticsceneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateFlowElasticsceneResponse) SetResultCode(v string) *UpdateFlowElasticsceneResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateFlowElasticsceneResponse) SetResultMsg(v string) *UpdateFlowElasticsceneResponse {
	s.ResultMsg = &v
	return s
}

type DeleteFlowElasticsceneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 弹性规则场景 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteFlowElasticsceneRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowElasticsceneRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowElasticsceneRequest) SetAuthToken(v string) *DeleteFlowElasticsceneRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteFlowElasticsceneRequest) SetWorkspaceGroup(v string) *DeleteFlowElasticsceneRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *DeleteFlowElasticsceneRequest) SetOperator(v string) *DeleteFlowElasticsceneRequest {
	s.Operator = &v
	return s
}

func (s *DeleteFlowElasticsceneRequest) SetId(v int64) *DeleteFlowElasticsceneRequest {
	s.Id = &v
	return s
}

type DeleteFlowElasticsceneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteFlowElasticsceneResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowElasticsceneResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowElasticsceneResponse) SetReqMsgId(v string) *DeleteFlowElasticsceneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteFlowElasticsceneResponse) SetResultCode(v string) *DeleteFlowElasticsceneResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteFlowElasticsceneResponse) SetResultMsg(v string) *DeleteFlowElasticsceneResponse {
	s.ResultMsg = &v
	return s
}

type SetFlowElasticvalueRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 弹性值，对应zdal里的弹性位，比如52，53等
	ElasticValues []*string `json:"elastic_values,omitempty" xml:"elastic_values,omitempty" require:"true" type:"Repeated"`
	// 是否灰度（默认 false）
	Gray *bool `json:"gray,omitempty" xml:"gray,omitempty"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 是否弹性（默认 false）
	Press *bool `json:"press,omitempty" xml:"press,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s SetFlowElasticvalueRequest) String() string {
	return tea.Prettify(s)
}

func (s SetFlowElasticvalueRequest) GoString() string {
	return s.String()
}

func (s *SetFlowElasticvalueRequest) SetAuthToken(v string) *SetFlowElasticvalueRequest {
	s.AuthToken = &v
	return s
}

func (s *SetFlowElasticvalueRequest) SetElasticValues(v []*string) *SetFlowElasticvalueRequest {
	s.ElasticValues = v
	return s
}

func (s *SetFlowElasticvalueRequest) SetGray(v bool) *SetFlowElasticvalueRequest {
	s.Gray = &v
	return s
}

func (s *SetFlowElasticvalueRequest) SetOperator(v string) *SetFlowElasticvalueRequest {
	s.Operator = &v
	return s
}

func (s *SetFlowElasticvalueRequest) SetPress(v bool) *SetFlowElasticvalueRequest {
	s.Press = &v
	return s
}

func (s *SetFlowElasticvalueRequest) SetWorkspaceGroup(v string) *SetFlowElasticvalueRequest {
	s.WorkspaceGroup = &v
	return s
}

type SetFlowElasticvalueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetFlowElasticvalueResponse) String() string {
	return tea.Prettify(s)
}

func (s SetFlowElasticvalueResponse) GoString() string {
	return s.String()
}

func (s *SetFlowElasticvalueResponse) SetReqMsgId(v string) *SetFlowElasticvalueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetFlowElasticvalueResponse) SetResultCode(v string) *SetFlowElasticvalueResponse {
	s.ResultCode = &v
	return s
}

func (s *SetFlowElasticvalueResponse) SetResultMsg(v string) *SetFlowElasticvalueResponse {
	s.ResultMsg = &v
	return s
}

type DisableFlowElasticvalueRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 是否弹性（默认 false）
	Press *bool `json:"press,omitempty" xml:"press,omitempty"`
	// 是否灰度（默认 false）
	Gray *bool `json:"gray,omitempty" xml:"gray,omitempty"`
}

func (s DisableFlowElasticvalueRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableFlowElasticvalueRequest) GoString() string {
	return s.String()
}

func (s *DisableFlowElasticvalueRequest) SetAuthToken(v string) *DisableFlowElasticvalueRequest {
	s.AuthToken = &v
	return s
}

func (s *DisableFlowElasticvalueRequest) SetWorkspaceGroup(v string) *DisableFlowElasticvalueRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *DisableFlowElasticvalueRequest) SetOperator(v string) *DisableFlowElasticvalueRequest {
	s.Operator = &v
	return s
}

func (s *DisableFlowElasticvalueRequest) SetPress(v bool) *DisableFlowElasticvalueRequest {
	s.Press = &v
	return s
}

func (s *DisableFlowElasticvalueRequest) SetGray(v bool) *DisableFlowElasticvalueRequest {
	s.Gray = &v
	return s
}

type DisableFlowElasticvalueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DisableFlowElasticvalueResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableFlowElasticvalueResponse) GoString() string {
	return s.String()
}

func (s *DisableFlowElasticvalueResponse) SetReqMsgId(v string) *DisableFlowElasticvalueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DisableFlowElasticvalueResponse) SetResultCode(v string) *DisableFlowElasticvalueResponse {
	s.ResultCode = &v
	return s
}

func (s *DisableFlowElasticvalueResponse) SetResultMsg(v string) *DisableFlowElasticvalueResponse {
	s.ResultMsg = &v
	return s
}

type CreateFlowSiteRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 推送接口类型，可选值（RPC，REST）
	InterfaceType *string `json:"interface_type,omitempty" xml:"interface_type,omitempty" require:"true"`
	// 推送接口 url
	InterfaceUrls []*string `json:"interface_urls,omitempty" xml:"interface_urls,omitempty" require:"true" type:"Repeated"`
	// 站点名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 站点类型，可选值 MAIN（主站点）， ISOMERISM（异构机房）
	SiteType *string `json:"site_type,omitempty" xml:"site_type,omitempty" require:"true"`
	// opssla uniqueId
	UniqueId *string `json:"unique_id,omitempty" xml:"unique_id,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s CreateFlowSiteRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowSiteRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowSiteRequest) SetAuthToken(v string) *CreateFlowSiteRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFlowSiteRequest) SetDescription(v string) *CreateFlowSiteRequest {
	s.Description = &v
	return s
}

func (s *CreateFlowSiteRequest) SetInterfaceType(v string) *CreateFlowSiteRequest {
	s.InterfaceType = &v
	return s
}

func (s *CreateFlowSiteRequest) SetInterfaceUrls(v []*string) *CreateFlowSiteRequest {
	s.InterfaceUrls = v
	return s
}

func (s *CreateFlowSiteRequest) SetName(v string) *CreateFlowSiteRequest {
	s.Name = &v
	return s
}

func (s *CreateFlowSiteRequest) SetOperator(v string) *CreateFlowSiteRequest {
	s.Operator = &v
	return s
}

func (s *CreateFlowSiteRequest) SetSiteType(v string) *CreateFlowSiteRequest {
	s.SiteType = &v
	return s
}

func (s *CreateFlowSiteRequest) SetUniqueId(v string) *CreateFlowSiteRequest {
	s.UniqueId = &v
	return s
}

func (s *CreateFlowSiteRequest) SetWorkspaceGroup(v string) *CreateFlowSiteRequest {
	s.WorkspaceGroup = &v
	return s
}

type CreateFlowSiteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateFlowSiteResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowSiteResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowSiteResponse) SetReqMsgId(v string) *CreateFlowSiteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFlowSiteResponse) SetResultCode(v string) *CreateFlowSiteResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFlowSiteResponse) SetResultMsg(v string) *CreateFlowSiteResponse {
	s.ResultMsg = &v
	return s
}

type UpdateFlowSiteRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 站点 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 站点名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 站点类型，可选值（MAIN， ISOMERISM）
	SiteType *string `json:"site_type,omitempty" xml:"site_type,omitempty" require:"true"`
	// 接口类型（RPC，REST）
	InterfaceType *string `json:"interface_type,omitempty" xml:"interface_type,omitempty" require:"true"`
	// 推送接口url
	InterfaceUrls []*string `json:"interface_urls,omitempty" xml:"interface_urls,omitempty" require:"true" type:"Repeated"`
	// opssla uniqueId
	UniqueId *string `json:"unique_id,omitempty" xml:"unique_id,omitempty"`
}

func (s UpdateFlowSiteRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowSiteRequest) GoString() string {
	return s.String()
}

func (s *UpdateFlowSiteRequest) SetAuthToken(v string) *UpdateFlowSiteRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateFlowSiteRequest) SetWorkspaceGroup(v string) *UpdateFlowSiteRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *UpdateFlowSiteRequest) SetOperator(v string) *UpdateFlowSiteRequest {
	s.Operator = &v
	return s
}

func (s *UpdateFlowSiteRequest) SetId(v int64) *UpdateFlowSiteRequest {
	s.Id = &v
	return s
}

func (s *UpdateFlowSiteRequest) SetName(v string) *UpdateFlowSiteRequest {
	s.Name = &v
	return s
}

func (s *UpdateFlowSiteRequest) SetDescription(v string) *UpdateFlowSiteRequest {
	s.Description = &v
	return s
}

func (s *UpdateFlowSiteRequest) SetSiteType(v string) *UpdateFlowSiteRequest {
	s.SiteType = &v
	return s
}

func (s *UpdateFlowSiteRequest) SetInterfaceType(v string) *UpdateFlowSiteRequest {
	s.InterfaceType = &v
	return s
}

func (s *UpdateFlowSiteRequest) SetInterfaceUrls(v []*string) *UpdateFlowSiteRequest {
	s.InterfaceUrls = v
	return s
}

func (s *UpdateFlowSiteRequest) SetUniqueId(v string) *UpdateFlowSiteRequest {
	s.UniqueId = &v
	return s
}

type UpdateFlowSiteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateFlowSiteResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowSiteResponse) GoString() string {
	return s.String()
}

func (s *UpdateFlowSiteResponse) SetReqMsgId(v string) *UpdateFlowSiteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateFlowSiteResponse) SetResultCode(v string) *UpdateFlowSiteResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateFlowSiteResponse) SetResultMsg(v string) *UpdateFlowSiteResponse {
	s.ResultMsg = &v
	return s
}

type DeleteFlowSiteRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 站点 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteFlowSiteRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowSiteRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowSiteRequest) SetAuthToken(v string) *DeleteFlowSiteRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteFlowSiteRequest) SetWorkspaceGroup(v string) *DeleteFlowSiteRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *DeleteFlowSiteRequest) SetOperator(v string) *DeleteFlowSiteRequest {
	s.Operator = &v
	return s
}

func (s *DeleteFlowSiteRequest) SetId(v int64) *DeleteFlowSiteRequest {
	s.Id = &v
	return s
}

type DeleteFlowSiteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteFlowSiteResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowSiteResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowSiteResponse) SetReqMsgId(v string) *DeleteFlowSiteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteFlowSiteResponse) SetResultCode(v string) *DeleteFlowSiteResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteFlowSiteResponse) SetResultMsg(v string) *DeleteFlowSiteResponse {
	s.ResultMsg = &v
	return s
}

type CreateOpsplanRestartRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 是否自动执行
	AutoExecute *bool `json:"auto_execute,omitempty" xml:"auto_execute,omitempty"`
	// 运维单扩展信息，jsonStr格式
	Context *string `json:"context,omitempty" xml:"context,omitempty"`
	// 容器服务间依赖顺序。
	// e.g 先发 A，B， 再发C， D
	// {"groups": [{container_services: [{"name": A}, {"name": B}]}, {"container_services": [{"name": C}, {"name": D}]}]}
	Dependency *OpsContainerServiceChain `json:"dependency,omitempty" xml:"dependency,omitempty"`
	// 在具体分组策略下，每个执行单元（部署单元，机房等）内部的分组个数。
	GroupAmount *int64 `json:"group_amount,omitempty" xml:"group_amount,omitempty" require:"true"`
	// 用户可自定义分组发布的顺序，结合具体的分组策略并通过指定具体分组维度对应的名称生效。
	// e.g, 当分组策略为机房时，可以指定先发机房A，再发机房B ["A", "B"]
	GroupOrders []*string `json:"group_orders,omitempty" xml:"group_orders,omitempty" type:"Repeated"`
	// 分组策略（维度）
	// 按部署单元（CELL） - 按部署单元依次重启
	// 按机房（ZONE）- 按机房依次重启
	// 按逻辑单元（UNIT） - 按逻辑单元重启
	// 共分一组（ALL） - 所有容器一起重启，仍遵循分组个数控制
	GroupStrategy *string `json:"group_strategy,omitempty" xml:"group_strategy,omitempty" require:"true"`
	// 是否需要beta卡点
	NeedBeta *bool `json:"need_beta,omitempty" xml:"need_beta,omitempty" require:"true"`
	// 限定操作的部署单元
	RestrictedCells []*string `json:"restricted_cells,omitempty" xml:"restricted_cells,omitempty" type:"Repeated"`
	// 限定操作的机房
	RestrictedZones []*string `json:"restricted_zones,omitempty" xml:"restricted_zones,omitempty" type:"Repeated"`
	// 选定的容器服务列表
	SelectedContainerServices *OpsContainerServiceGroup `json:"selected_container_services,omitempty" xml:"selected_container_services,omitempty" require:"true"`
	// 重启单标题
	Title *string `json:"title,omitempty" xml:"title,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
}

func (s CreateOpsplanRestartRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOpsplanRestartRequest) GoString() string {
	return s.String()
}

func (s *CreateOpsplanRestartRequest) SetAuthToken(v string) *CreateOpsplanRestartRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateOpsplanRestartRequest) SetAutoExecute(v bool) *CreateOpsplanRestartRequest {
	s.AutoExecute = &v
	return s
}

func (s *CreateOpsplanRestartRequest) SetContext(v string) *CreateOpsplanRestartRequest {
	s.Context = &v
	return s
}

func (s *CreateOpsplanRestartRequest) SetDependency(v *OpsContainerServiceChain) *CreateOpsplanRestartRequest {
	s.Dependency = v
	return s
}

func (s *CreateOpsplanRestartRequest) SetGroupAmount(v int64) *CreateOpsplanRestartRequest {
	s.GroupAmount = &v
	return s
}

func (s *CreateOpsplanRestartRequest) SetGroupOrders(v []*string) *CreateOpsplanRestartRequest {
	s.GroupOrders = v
	return s
}

func (s *CreateOpsplanRestartRequest) SetGroupStrategy(v string) *CreateOpsplanRestartRequest {
	s.GroupStrategy = &v
	return s
}

func (s *CreateOpsplanRestartRequest) SetNeedBeta(v bool) *CreateOpsplanRestartRequest {
	s.NeedBeta = &v
	return s
}

func (s *CreateOpsplanRestartRequest) SetRestrictedCells(v []*string) *CreateOpsplanRestartRequest {
	s.RestrictedCells = v
	return s
}

func (s *CreateOpsplanRestartRequest) SetRestrictedZones(v []*string) *CreateOpsplanRestartRequest {
	s.RestrictedZones = v
	return s
}

func (s *CreateOpsplanRestartRequest) SetSelectedContainerServices(v *OpsContainerServiceGroup) *CreateOpsplanRestartRequest {
	s.SelectedContainerServices = v
	return s
}

func (s *CreateOpsplanRestartRequest) SetTitle(v string) *CreateOpsplanRestartRequest {
	s.Title = &v
	return s
}

func (s *CreateOpsplanRestartRequest) SetWorkspaceGroup(v string) *CreateOpsplanRestartRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *CreateOpsplanRestartRequest) SetNamespace(v string) *CreateOpsplanRestartRequest {
	s.Namespace = &v
	return s
}

type CreateOpsplanRestartResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 运维单号
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s CreateOpsplanRestartResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOpsplanRestartResponse) GoString() string {
	return s.String()
}

func (s *CreateOpsplanRestartResponse) SetReqMsgId(v string) *CreateOpsplanRestartResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateOpsplanRestartResponse) SetResultCode(v string) *CreateOpsplanRestartResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateOpsplanRestartResponse) SetResultMsg(v string) *CreateOpsplanRestartResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateOpsplanRestartResponse) SetOperationId(v string) *CreateOpsplanRestartResponse {
	s.OperationId = &v
	return s
}

type UpdateContainerserviceCommentRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// wsg
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// fed namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// container service name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// specific container service revision
	Revision *string `json:"revision,omitempty" xml:"revision,omitempty" require:"true"`
	// 版本注释
	Comment *string `json:"comment,omitempty" xml:"comment,omitempty"`
}

func (s UpdateContainerserviceCommentRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerserviceCommentRequest) GoString() string {
	return s.String()
}

func (s *UpdateContainerserviceCommentRequest) SetAuthToken(v string) *UpdateContainerserviceCommentRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateContainerserviceCommentRequest) SetWorkspaceGroup(v string) *UpdateContainerserviceCommentRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *UpdateContainerserviceCommentRequest) SetNamespace(v string) *UpdateContainerserviceCommentRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateContainerserviceCommentRequest) SetName(v string) *UpdateContainerserviceCommentRequest {
	s.Name = &v
	return s
}

func (s *UpdateContainerserviceCommentRequest) SetRevision(v string) *UpdateContainerserviceCommentRequest {
	s.Revision = &v
	return s
}

func (s *UpdateContainerserviceCommentRequest) SetComment(v string) *UpdateContainerserviceCommentRequest {
	s.Comment = &v
	return s
}

type UpdateContainerserviceCommentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateContainerserviceCommentResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerserviceCommentResponse) GoString() string {
	return s.String()
}

func (s *UpdateContainerserviceCommentResponse) SetReqMsgId(v string) *UpdateContainerserviceCommentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateContainerserviceCommentResponse) SetResultCode(v string) *UpdateContainerserviceCommentResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateContainerserviceCommentResponse) SetResultMsg(v string) *UpdateContainerserviceCommentResponse {
	s.ResultMsg = &v
	return s
}

type RollbackContainerserviceDeploymentRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属工作空间组名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 容器服务名字
	ContainerServiceName *string `json:"container_service_name,omitempty" xml:"container_service_name,omitempty" require:"true"`
	// 所属命名空间名称
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 回滚的版本
	Revision *string `json:"revision,omitempty" xml:"revision,omitempty" require:"true"`
	// 部署单ID
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
	// 操作人账号
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 分组数，默认为3
	GroupCount *int64 `json:"group_count,omitempty" xml:"group_count,omitempty"`
	// 回滚时的分组策略，取值为： QUICK：快速分组； EACH_ONE：每台一组； UNIT：按逻辑单元分组； CELL：按部署单元分组； 默认为CELL
	GroupStrategy *string `json:"group_strategy,omitempty" xml:"group_strategy,omitempty"`
	// 回滚原因
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty" require:"true"`
}

func (s RollbackContainerserviceDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackContainerserviceDeploymentRequest) GoString() string {
	return s.String()
}

func (s *RollbackContainerserviceDeploymentRequest) SetAuthToken(v string) *RollbackContainerserviceDeploymentRequest {
	s.AuthToken = &v
	return s
}

func (s *RollbackContainerserviceDeploymentRequest) SetWorkspaceGroup(v string) *RollbackContainerserviceDeploymentRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *RollbackContainerserviceDeploymentRequest) SetContainerServiceName(v string) *RollbackContainerserviceDeploymentRequest {
	s.ContainerServiceName = &v
	return s
}

func (s *RollbackContainerserviceDeploymentRequest) SetNamespace(v string) *RollbackContainerserviceDeploymentRequest {
	s.Namespace = &v
	return s
}

func (s *RollbackContainerserviceDeploymentRequest) SetRevision(v string) *RollbackContainerserviceDeploymentRequest {
	s.Revision = &v
	return s
}

func (s *RollbackContainerserviceDeploymentRequest) SetOperationId(v string) *RollbackContainerserviceDeploymentRequest {
	s.OperationId = &v
	return s
}

func (s *RollbackContainerserviceDeploymentRequest) SetOperator(v string) *RollbackContainerserviceDeploymentRequest {
	s.Operator = &v
	return s
}

func (s *RollbackContainerserviceDeploymentRequest) SetGroupCount(v int64) *RollbackContainerserviceDeploymentRequest {
	s.GroupCount = &v
	return s
}

func (s *RollbackContainerserviceDeploymentRequest) SetGroupStrategy(v string) *RollbackContainerserviceDeploymentRequest {
	s.GroupStrategy = &v
	return s
}

func (s *RollbackContainerserviceDeploymentRequest) SetReason(v string) *RollbackContainerserviceDeploymentRequest {
	s.Reason = &v
	return s
}

type RollbackContainerserviceDeploymentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RollbackContainerserviceDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackContainerserviceDeploymentResponse) GoString() string {
	return s.String()
}

func (s *RollbackContainerserviceDeploymentResponse) SetReqMsgId(v string) *RollbackContainerserviceDeploymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RollbackContainerserviceDeploymentResponse) SetResultCode(v string) *RollbackContainerserviceDeploymentResponse {
	s.ResultCode = &v
	return s
}

func (s *RollbackContainerserviceDeploymentResponse) SetResultMsg(v string) *RollbackContainerserviceDeploymentResponse {
	s.ResultMsg = &v
	return s
}

type QueryFlowUidinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 是否弹性（默认 false）
	Elastic *bool `json:"elastic,omitempty" xml:"elastic,omitempty"`
	// 是否灰度（默认 false）
	Gray *bool `json:"gray,omitempty" xml:"gray,omitempty"`
	// 是否压测（默认 false）
	Press *bool `json:"press,omitempty" xml:"press,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s QueryFlowUidinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowUidinfoRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowUidinfoRequest) SetAuthToken(v string) *QueryFlowUidinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFlowUidinfoRequest) SetElastic(v bool) *QueryFlowUidinfoRequest {
	s.Elastic = &v
	return s
}

func (s *QueryFlowUidinfoRequest) SetGray(v bool) *QueryFlowUidinfoRequest {
	s.Gray = &v
	return s
}

func (s *QueryFlowUidinfoRequest) SetPress(v bool) *QueryFlowUidinfoRequest {
	s.Press = &v
	return s
}

func (s *QueryFlowUidinfoRequest) SetWorkspaceGroup(v string) *QueryFlowUidinfoRequest {
	s.WorkspaceGroup = &v
	return s
}

type QueryFlowUidinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// UID 列表
	UidInfoList []*UidInfo `json:"uid_info_list,omitempty" xml:"uid_info_list,omitempty" type:"Repeated"`
}

func (s QueryFlowUidinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowUidinfoResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowUidinfoResponse) SetReqMsgId(v string) *QueryFlowUidinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFlowUidinfoResponse) SetResultCode(v string) *QueryFlowUidinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFlowUidinfoResponse) SetResultMsg(v string) *QueryFlowUidinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFlowUidinfoResponse) SetUidInfoList(v []*UidInfo) *QueryFlowUidinfoResponse {
	s.UidInfoList = v
	return s
}

type QueryFlowSiteRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s QueryFlowSiteRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowSiteRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowSiteRequest) SetAuthToken(v string) *QueryFlowSiteRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFlowSiteRequest) SetWorkspaceGroup(v string) *QueryFlowSiteRequest {
	s.WorkspaceGroup = &v
	return s
}

type QueryFlowSiteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前环境的站点列表
	Sites []*PushSite `json:"sites,omitempty" xml:"sites,omitempty" type:"Repeated"`
}

func (s QueryFlowSiteResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowSiteResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowSiteResponse) SetReqMsgId(v string) *QueryFlowSiteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFlowSiteResponse) SetResultCode(v string) *QueryFlowSiteResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFlowSiteResponse) SetResultMsg(v string) *QueryFlowSiteResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFlowSiteResponse) SetSites(v []*PushSite) *QueryFlowSiteResponse {
	s.Sites = v
	return s
}

type GetCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单元名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 所属环境信息。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 所属工作空间名称。
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s GetCellRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCellRequest) GoString() string {
	return s.String()
}

func (s *GetCellRequest) SetAuthToken(v string) *GetCellRequest {
	s.AuthToken = &v
	return s
}

func (s *GetCellRequest) SetName(v string) *GetCellRequest {
	s.Name = &v
	return s
}

func (s *GetCellRequest) SetWorkspaceGroup(v string) *GetCellRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *GetCellRequest) SetWorkspace(v string) *GetCellRequest {
	s.Workspace = &v
	return s
}

type GetCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 部署单元信息。
	Cell *Cell `json:"cell,omitempty" xml:"cell,omitempty"`
}

func (s GetCellResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCellResponse) GoString() string {
	return s.String()
}

func (s *GetCellResponse) SetReqMsgId(v string) *GetCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetCellResponse) SetResultCode(v string) *GetCellResponse {
	s.ResultCode = &v
	return s
}

func (s *GetCellResponse) SetResultMsg(v string) *GetCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetCellResponse) SetCell(v *Cell) *GetCellResponse {
	s.Cell = v
	return s
}

type GetCellgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属环境信息。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 逻辑单元名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s GetCellgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCellgroupRequest) GoString() string {
	return s.String()
}

func (s *GetCellgroupRequest) SetAuthToken(v string) *GetCellgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *GetCellgroupRequest) SetWorkspaceGroup(v string) *GetCellgroupRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *GetCellgroupRequest) SetName(v string) *GetCellgroupRequest {
	s.Name = &v
	return s
}

type GetCellgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 逻辑单元信息。
	CellGroup *CellGroup `json:"cell_group,omitempty" xml:"cell_group,omitempty"`
}

func (s GetCellgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCellgroupResponse) GoString() string {
	return s.String()
}

func (s *GetCellgroupResponse) SetReqMsgId(v string) *GetCellgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetCellgroupResponse) SetResultCode(v string) *GetCellgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *GetCellgroupResponse) SetResultMsg(v string) *GetCellgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetCellgroupResponse) SetCellGroup(v *CellGroup) *GetCellgroupResponse {
	s.CellGroup = v
	return s
}

type UpdateCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 蓝绿着色信息。
	Color *string `json:"color,omitempty" xml:"color,omitempty"`
	// 是否灰度。
	IsGray *bool `json:"is_gray,omitempty" xml:"is_gray,omitempty"`
	// 部署单元名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 默认权重。
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty"`
	// 所属环境信息。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 所属工作空间名称。
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s UpdateCellRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCellRequest) GoString() string {
	return s.String()
}

func (s *UpdateCellRequest) SetAuthToken(v string) *UpdateCellRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateCellRequest) SetColor(v string) *UpdateCellRequest {
	s.Color = &v
	return s
}

func (s *UpdateCellRequest) SetIsGray(v bool) *UpdateCellRequest {
	s.IsGray = &v
	return s
}

func (s *UpdateCellRequest) SetName(v string) *UpdateCellRequest {
	s.Name = &v
	return s
}

func (s *UpdateCellRequest) SetWeight(v int64) *UpdateCellRequest {
	s.Weight = &v
	return s
}

func (s *UpdateCellRequest) SetWorkspaceGroup(v string) *UpdateCellRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *UpdateCellRequest) SetWorkspace(v string) *UpdateCellRequest {
	s.Workspace = &v
	return s
}

type UpdateCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateCellResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCellResponse) GoString() string {
	return s.String()
}

func (s *UpdateCellResponse) SetReqMsgId(v string) *UpdateCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateCellResponse) SetResultCode(v string) *UpdateCellResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateCellResponse) SetResultMsg(v string) *UpdateCellResponse {
	s.ResultMsg = &v
	return s
}

type ListEventsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 集群名
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// 容器名称
	ContainerName *string `json:"container_name,omitempty" xml:"container_name,omitempty"`
	// pod名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	//  pod uid
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty" require:"true"`
	// wsg
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s ListEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEventsRequest) GoString() string {
	return s.String()
}

func (s *ListEventsRequest) SetAuthToken(v string) *ListEventsRequest {
	s.AuthToken = &v
	return s
}

func (s *ListEventsRequest) SetCluster(v string) *ListEventsRequest {
	s.Cluster = &v
	return s
}

func (s *ListEventsRequest) SetContainerName(v string) *ListEventsRequest {
	s.ContainerName = &v
	return s
}

func (s *ListEventsRequest) SetName(v string) *ListEventsRequest {
	s.Name = &v
	return s
}

func (s *ListEventsRequest) SetNamespace(v string) *ListEventsRequest {
	s.Namespace = &v
	return s
}

func (s *ListEventsRequest) SetUid(v string) *ListEventsRequest {
	s.Uid = &v
	return s
}

func (s *ListEventsRequest) SetWorkspaceGroup(v string) *ListEventsRequest {
	s.WorkspaceGroup = &v
	return s
}

type ListEventsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 事件列表
	Events []*KubeEvent `json:"events,omitempty" xml:"events,omitempty" type:"Repeated"`
}

func (s ListEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponse) GoString() string {
	return s.String()
}

func (s *ListEventsResponse) SetReqMsgId(v string) *ListEventsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListEventsResponse) SetResultCode(v string) *ListEventsResponse {
	s.ResultCode = &v
	return s
}

func (s *ListEventsResponse) SetResultMsg(v string) *ListEventsResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListEventsResponse) SetEvents(v []*KubeEvent) *ListEventsResponse {
	s.Events = v
	return s
}

type ListRegionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s ListRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRegionRequest) GoString() string {
	return s.String()
}

func (s *ListRegionRequest) SetAuthToken(v string) *ListRegionRequest {
	s.AuthToken = &v
	return s
}

type ListRegionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 地域列表
	Regions []*Region `json:"regions,omitempty" xml:"regions,omitempty" type:"Repeated"`
}

func (s ListRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRegionResponse) GoString() string {
	return s.String()
}

func (s *ListRegionResponse) SetReqMsgId(v string) *ListRegionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListRegionResponse) SetResultCode(v string) *ListRegionResponse {
	s.ResultCode = &v
	return s
}

func (s *ListRegionResponse) SetResultMsg(v string) *ListRegionResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListRegionResponse) SetRegions(v []*Region) *ListRegionResponse {
	s.Regions = v
	return s
}

type ListZoneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s ListZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s ListZoneRequest) GoString() string {
	return s.String()
}

func (s *ListZoneRequest) SetAuthToken(v string) *ListZoneRequest {
	s.AuthToken = &v
	return s
}

type ListZoneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可用区列表
	Zones []*Zone `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
}

func (s ListZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s ListZoneResponse) GoString() string {
	return s.String()
}

func (s *ListZoneResponse) SetReqMsgId(v string) *ListZoneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListZoneResponse) SetResultCode(v string) *ListZoneResponse {
	s.ResultCode = &v
	return s
}

func (s *ListZoneResponse) SetResultMsg(v string) *ListZoneResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListZoneResponse) SetZones(v []*Zone) *ListZoneResponse {
	s.Zones = v
	return s
}

type QueryPodLogRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 集群名称
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// 容器名称
	// The container for which to stream logs. Defaults to only container if there is one container in the pod. (optional)
	ContainerName *string `json:"container_name,omitempty" xml:"container_name,omitempty"`
	// namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// pod名称
	PodName *string `json:"pod_name,omitempty" xml:"pod_name,omitempty" require:"true"`
	// A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. (optional)
	SinceSeconds *int64 `json:"since_seconds,omitempty" xml:"since_seconds,omitempty"`
	// the number of lines from the end of the logs to show
	TailLines *int64 `json:"tail_lines,omitempty" xml:"tail_lines,omitempty"`
	// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. (optional)
	Timestamps *bool `json:"timestamps,omitempty" xml:"timestamps,omitempty"`
	// cluster对应的aks中minion cluster的id
	MinionClusterId *string `json:"minion_cluster_id,omitempty" xml:"minion_cluster_id,omitempty"`
}

func (s QueryPodLogRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPodLogRequest) GoString() string {
	return s.String()
}

func (s *QueryPodLogRequest) SetAuthToken(v string) *QueryPodLogRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryPodLogRequest) SetCluster(v string) *QueryPodLogRequest {
	s.Cluster = &v
	return s
}

func (s *QueryPodLogRequest) SetContainerName(v string) *QueryPodLogRequest {
	s.ContainerName = &v
	return s
}

func (s *QueryPodLogRequest) SetNamespace(v string) *QueryPodLogRequest {
	s.Namespace = &v
	return s
}

func (s *QueryPodLogRequest) SetPodName(v string) *QueryPodLogRequest {
	s.PodName = &v
	return s
}

func (s *QueryPodLogRequest) SetSinceSeconds(v int64) *QueryPodLogRequest {
	s.SinceSeconds = &v
	return s
}

func (s *QueryPodLogRequest) SetTailLines(v int64) *QueryPodLogRequest {
	s.TailLines = &v
	return s
}

func (s *QueryPodLogRequest) SetTimestamps(v bool) *QueryPodLogRequest {
	s.Timestamps = &v
	return s
}

func (s *QueryPodLogRequest) SetMinionClusterId(v string) *QueryPodLogRequest {
	s.MinionClusterId = &v
	return s
}

type QueryPodLogResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// the logs
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryPodLogResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPodLogResponse) GoString() string {
	return s.String()
}

func (s *QueryPodLogResponse) SetReqMsgId(v string) *QueryPodLogResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryPodLogResponse) SetResultCode(v string) *QueryPodLogResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryPodLogResponse) SetResultMsg(v string) *QueryPodLogResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryPodLogResponse) SetData(v string) *QueryPodLogResponse {
	s.Data = &v
	return s
}

type CreateSpannerClusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 容器的CPU个数(Core)
	ContainerCpu *int64 `json:"container_cpu,omitempty" xml:"container_cpu,omitempty" require:"true"`
	// 容器是否独占CPU
	ContainerCpuExclusive *bool `json:"container_cpu_exclusive,omitempty" xml:"container_cpu_exclusive,omitempty" require:"true"`
	// 容器所在的物理机节点标签
	ContainerDeviceType *string `json:"container_device_type,omitempty" xml:"container_device_type,omitempty" require:"true"`
	// 容器的磁盘大小(G)
	ContainerDisk *int64 `json:"container_disk,omitempty" xml:"container_disk,omitempty" require:"true"`
	// 容器的内存大小（G）
	ContainerMem *int64 `json:"container_mem,omitempty" xml:"container_mem,omitempty" require:"true"`
	// 容器网络
	ContainerNetwork *string `json:"container_network,omitempty" xml:"container_network,omitempty" require:"true"`
	// 集群名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 集群单元类型，默认为 0 :
	// 0 - 容器
	UnitType *int64 `json:"unit_type,omitempty" xml:"unit_type,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 集群网络类型，internet/intranet/multidomain/office
	AddressType *string `json:"address_type,omitempty" xml:"address_type,omitempty" require:"true"`
}

func (s CreateSpannerClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSpannerClusterRequest) GoString() string {
	return s.String()
}

func (s *CreateSpannerClusterRequest) SetAuthToken(v string) *CreateSpannerClusterRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSpannerClusterRequest) SetContainerCpu(v int64) *CreateSpannerClusterRequest {
	s.ContainerCpu = &v
	return s
}

func (s *CreateSpannerClusterRequest) SetContainerCpuExclusive(v bool) *CreateSpannerClusterRequest {
	s.ContainerCpuExclusive = &v
	return s
}

func (s *CreateSpannerClusterRequest) SetContainerDeviceType(v string) *CreateSpannerClusterRequest {
	s.ContainerDeviceType = &v
	return s
}

func (s *CreateSpannerClusterRequest) SetContainerDisk(v int64) *CreateSpannerClusterRequest {
	s.ContainerDisk = &v
	return s
}

func (s *CreateSpannerClusterRequest) SetContainerMem(v int64) *CreateSpannerClusterRequest {
	s.ContainerMem = &v
	return s
}

func (s *CreateSpannerClusterRequest) SetContainerNetwork(v string) *CreateSpannerClusterRequest {
	s.ContainerNetwork = &v
	return s
}

func (s *CreateSpannerClusterRequest) SetName(v string) *CreateSpannerClusterRequest {
	s.Name = &v
	return s
}

func (s *CreateSpannerClusterRequest) SetUnitType(v int64) *CreateSpannerClusterRequest {
	s.UnitType = &v
	return s
}

func (s *CreateSpannerClusterRequest) SetWorkspaceGroup(v string) *CreateSpannerClusterRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *CreateSpannerClusterRequest) SetAddressType(v string) *CreateSpannerClusterRequest {
	s.AddressType = &v
	return s
}

type CreateSpannerClusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 集群id
	ClusterId *string `json:"cluster_id,omitempty" xml:"cluster_id,omitempty"`
}

func (s CreateSpannerClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSpannerClusterResponse) GoString() string {
	return s.String()
}

func (s *CreateSpannerClusterResponse) SetReqMsgId(v string) *CreateSpannerClusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSpannerClusterResponse) SetResultCode(v string) *CreateSpannerClusterResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSpannerClusterResponse) SetResultMsg(v string) *CreateSpannerClusterResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateSpannerClusterResponse) SetClusterId(v string) *CreateSpannerClusterResponse {
	s.ClusterId = &v
	return s
}

type GetSpannerClusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 集群id
	ClusterId *string `json:"cluster_id,omitempty" xml:"cluster_id,omitempty" require:"true"`
}

func (s GetSpannerClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSpannerClusterRequest) GoString() string {
	return s.String()
}

func (s *GetSpannerClusterRequest) SetAuthToken(v string) *GetSpannerClusterRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSpannerClusterRequest) SetWorkspaceGroup(v string) *GetSpannerClusterRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *GetSpannerClusterRequest) SetClusterId(v string) *GetSpannerClusterRequest {
	s.ClusterId = &v
	return s
}

type GetSpannerClusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// spanner 集群信息
	Data *SpannerClusterInfo `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetSpannerClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSpannerClusterResponse) GoString() string {
	return s.String()
}

func (s *GetSpannerClusterResponse) SetReqMsgId(v string) *GetSpannerClusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSpannerClusterResponse) SetResultCode(v string) *GetSpannerClusterResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSpannerClusterResponse) SetResultMsg(v string) *GetSpannerClusterResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSpannerClusterResponse) SetData(v *SpannerClusterInfo) *GetSpannerClusterResponse {
	s.Data = v
	return s
}

type ScaleSpannerClusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 集群id
	ClusterId *string `json:"cluster_id,omitempty" xml:"cluster_id,omitempty" require:"true"`
	// 需要扩容的单元数目
	ContainerCount *int64 `json:"container_count,omitempty" xml:"container_count,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s ScaleSpannerClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ScaleSpannerClusterRequest) GoString() string {
	return s.String()
}

func (s *ScaleSpannerClusterRequest) SetAuthToken(v string) *ScaleSpannerClusterRequest {
	s.AuthToken = &v
	return s
}

func (s *ScaleSpannerClusterRequest) SetClusterId(v string) *ScaleSpannerClusterRequest {
	s.ClusterId = &v
	return s
}

func (s *ScaleSpannerClusterRequest) SetContainerCount(v int64) *ScaleSpannerClusterRequest {
	s.ContainerCount = &v
	return s
}

func (s *ScaleSpannerClusterRequest) SetWorkspaceGroup(v string) *ScaleSpannerClusterRequest {
	s.WorkspaceGroup = &v
	return s
}

type ScaleSpannerClusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 集群id
	ClusterId *string `json:"cluster_id,omitempty" xml:"cluster_id,omitempty"`
}

func (s ScaleSpannerClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ScaleSpannerClusterResponse) GoString() string {
	return s.String()
}

func (s *ScaleSpannerClusterResponse) SetReqMsgId(v string) *ScaleSpannerClusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ScaleSpannerClusterResponse) SetResultCode(v string) *ScaleSpannerClusterResponse {
	s.ResultCode = &v
	return s
}

func (s *ScaleSpannerClusterResponse) SetResultMsg(v string) *ScaleSpannerClusterResponse {
	s.ResultMsg = &v
	return s
}

func (s *ScaleSpannerClusterResponse) SetClusterId(v string) *ScaleSpannerClusterResponse {
	s.ClusterId = &v
	return s
}

type QuerySpannerClusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s QuerySpannerClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySpannerClusterRequest) GoString() string {
	return s.String()
}

func (s *QuerySpannerClusterRequest) SetAuthToken(v string) *QuerySpannerClusterRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySpannerClusterRequest) SetWorkspaceGroup(v string) *QuerySpannerClusterRequest {
	s.WorkspaceGroup = &v
	return s
}

type QuerySpannerClusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// spanner集群列表
	List []*SpannerClusterInfo `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
}

func (s QuerySpannerClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySpannerClusterResponse) GoString() string {
	return s.String()
}

func (s *QuerySpannerClusterResponse) SetReqMsgId(v string) *QuerySpannerClusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySpannerClusterResponse) SetResultCode(v string) *QuerySpannerClusterResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySpannerClusterResponse) SetResultMsg(v string) *QuerySpannerClusterResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySpannerClusterResponse) SetList(v []*SpannerClusterInfo) *QuerySpannerClusterResponse {
	s.List = v
	return s
}

type UpdateSpannerClusterstatusRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 集群id
	ClusterId *string `json:"cluster_id,omitempty" xml:"cluster_id,omitempty" require:"true"`
	// 设置集群的状态： 1 运行状态  2 维护状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s UpdateSpannerClusterstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSpannerClusterstatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateSpannerClusterstatusRequest) SetAuthToken(v string) *UpdateSpannerClusterstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSpannerClusterstatusRequest) SetClusterId(v string) *UpdateSpannerClusterstatusRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdateSpannerClusterstatusRequest) SetStatus(v int64) *UpdateSpannerClusterstatusRequest {
	s.Status = &v
	return s
}

func (s *UpdateSpannerClusterstatusRequest) SetWorkspaceGroup(v string) *UpdateSpannerClusterstatusRequest {
	s.WorkspaceGroup = &v
	return s
}

type UpdateSpannerClusterstatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSpannerClusterstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSpannerClusterstatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateSpannerClusterstatusResponse) SetReqMsgId(v string) *UpdateSpannerClusterstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSpannerClusterstatusResponse) SetResultCode(v string) *UpdateSpannerClusterstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSpannerClusterstatusResponse) SetResultMsg(v string) *UpdateSpannerClusterstatusResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSpannerUnitstatusRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 集群id
	ClusterId *string `json:"cluster_id,omitempty" xml:"cluster_id,omitempty" require:"true"`
	// 容器id列表
	ContainerIds []*string `json:"container_ids,omitempty" xml:"container_ids,omitempty" require:"true" type:"Repeated"`
	// 集群单元状态： 1-下线状态 2- 上线状态 3-删除状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s UpdateSpannerUnitstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSpannerUnitstatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateSpannerUnitstatusRequest) SetAuthToken(v string) *UpdateSpannerUnitstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSpannerUnitstatusRequest) SetWorkspaceGroup(v string) *UpdateSpannerUnitstatusRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *UpdateSpannerUnitstatusRequest) SetClusterId(v string) *UpdateSpannerUnitstatusRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdateSpannerUnitstatusRequest) SetContainerIds(v []*string) *UpdateSpannerUnitstatusRequest {
	s.ContainerIds = v
	return s
}

func (s *UpdateSpannerUnitstatusRequest) SetStatus(v int64) *UpdateSpannerUnitstatusRequest {
	s.Status = &v
	return s
}

type UpdateSpannerUnitstatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSpannerUnitstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSpannerUnitstatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateSpannerUnitstatusResponse) SetReqMsgId(v string) *UpdateSpannerUnitstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSpannerUnitstatusResponse) SetResultCode(v string) *UpdateSpannerUnitstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSpannerUnitstatusResponse) SetResultMsg(v string) *UpdateSpannerUnitstatusResponse {
	s.ResultMsg = &v
	return s
}

type CancelOpsplanServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布单下应用服务对应的发布id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 取消原因
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty" require:"true"`
	// 操作人账号，lks1.23.0才支持
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
}

func (s CancelOpsplanServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelOpsplanServiceRequest) GoString() string {
	return s.String()
}

func (s *CancelOpsplanServiceRequest) SetAuthToken(v string) *CancelOpsplanServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelOpsplanServiceRequest) SetId(v string) *CancelOpsplanServiceRequest {
	s.Id = &v
	return s
}

func (s *CancelOpsplanServiceRequest) SetReason(v string) *CancelOpsplanServiceRequest {
	s.Reason = &v
	return s
}

func (s *CancelOpsplanServiceRequest) SetOperator(v string) *CancelOpsplanServiceRequest {
	s.Operator = &v
	return s
}

type CancelOpsplanServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CancelOpsplanServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelOpsplanServiceResponse) GoString() string {
	return s.String()
}

func (s *CancelOpsplanServiceResponse) SetReqMsgId(v string) *CancelOpsplanServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelOpsplanServiceResponse) SetResultCode(v string) *CancelOpsplanServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelOpsplanServiceResponse) SetResultMsg(v string) *CancelOpsplanServiceResponse {
	s.ResultMsg = &v
	return s
}

type ListSystemUrlRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspaceGroup name
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
}

func (s ListSystemUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSystemUrlRequest) GoString() string {
	return s.String()
}

func (s *ListSystemUrlRequest) SetAuthToken(v string) *ListSystemUrlRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSystemUrlRequest) SetWorkspaceGroup(v string) *ListSystemUrlRequest {
	s.WorkspaceGroup = &v
	return s
}

type ListSystemUrlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 系统配置的url列表
	UrlList []*SystemURL `json:"url_list,omitempty" xml:"url_list,omitempty" type:"Repeated"`
}

func (s ListSystemUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSystemUrlResponse) GoString() string {
	return s.String()
}

func (s *ListSystemUrlResponse) SetReqMsgId(v string) *ListSystemUrlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSystemUrlResponse) SetResultCode(v string) *ListSystemUrlResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSystemUrlResponse) SetResultMsg(v string) *ListSystemUrlResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSystemUrlResponse) SetUrlList(v []*SystemURL) *ListSystemUrlResponse {
	s.UrlList = v
	return s
}

type QueryFlowRecordRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app 名称
	App *string `json:"app,omitempty" xml:"app,omitempty"`
	// 结束时间
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 查询页
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// 页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 推送状态，可选（SUCCESS，FAILED，INVALID_REQUEST，NO_RECORD，SYSTEM_EXCEPTION，PARAM_QUERY_ERROR，PARAM_INVALID）
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 开始时间
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 环境
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 规则类型
	RuleType *string `json:"rule_type,omitempty" xml:"rule_type,omitempty"`
}

func (s QueryFlowRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowRecordRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowRecordRequest) SetAuthToken(v string) *QueryFlowRecordRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFlowRecordRequest) SetApp(v string) *QueryFlowRecordRequest {
	s.App = &v
	return s
}

func (s *QueryFlowRecordRequest) SetEndTime(v string) *QueryFlowRecordRequest {
	s.EndTime = &v
	return s
}

func (s *QueryFlowRecordRequest) SetPageNo(v int64) *QueryFlowRecordRequest {
	s.PageNo = &v
	return s
}

func (s *QueryFlowRecordRequest) SetPageSize(v int64) *QueryFlowRecordRequest {
	s.PageSize = &v
	return s
}

func (s *QueryFlowRecordRequest) SetResultCode(v string) *QueryFlowRecordRequest {
	s.ResultCode = &v
	return s
}

func (s *QueryFlowRecordRequest) SetStartTime(v string) *QueryFlowRecordRequest {
	s.StartTime = &v
	return s
}

func (s *QueryFlowRecordRequest) SetWorkspaceGroup(v string) *QueryFlowRecordRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *QueryFlowRecordRequest) SetRuleType(v string) *QueryFlowRecordRequest {
	s.RuleType = &v
	return s
}

type QueryFlowRecordResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 推送记录
	Data []*DrmOpsRecord `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryFlowRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowRecordResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowRecordResponse) SetReqMsgId(v string) *QueryFlowRecordResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFlowRecordResponse) SetResultCode(v string) *QueryFlowRecordResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFlowRecordResponse) SetResultMsg(v string) *QueryFlowRecordResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFlowRecordResponse) SetCurrentPage(v int64) *QueryFlowRecordResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryFlowRecordResponse) SetData(v []*DrmOpsRecord) *QueryFlowRecordResponse {
	s.Data = v
	return s
}

func (s *QueryFlowRecordResponse) SetPageSize(v int64) *QueryFlowRecordResponse {
	s.PageSize = &v
	return s
}

func (s *QueryFlowRecordResponse) SetTotalCount(v int64) *QueryFlowRecordResponse {
	s.TotalCount = &v
	return s
}

type SaveFlowEnvrelRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 目标环境
	Dest *string `json:"dest,omitempty" xml:"dest,omitempty" require:"true"`
	// 源环境
	Src *string `json:"src,omitempty" xml:"src,omitempty" require:"true"`
	// 关联关系：可选（PROD，GRAY）
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 环境
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
}

func (s SaveFlowEnvrelRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveFlowEnvrelRequest) GoString() string {
	return s.String()
}

func (s *SaveFlowEnvrelRequest) SetAuthToken(v string) *SaveFlowEnvrelRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveFlowEnvrelRequest) SetDest(v string) *SaveFlowEnvrelRequest {
	s.Dest = &v
	return s
}

func (s *SaveFlowEnvrelRequest) SetSrc(v string) *SaveFlowEnvrelRequest {
	s.Src = &v
	return s
}

func (s *SaveFlowEnvrelRequest) SetType(v string) *SaveFlowEnvrelRequest {
	s.Type = &v
	return s
}

func (s *SaveFlowEnvrelRequest) SetWorkspaceGroup(v string) *SaveFlowEnvrelRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *SaveFlowEnvrelRequest) SetOperator(v string) *SaveFlowEnvrelRequest {
	s.Operator = &v
	return s
}

type SaveFlowEnvrelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SaveFlowEnvrelResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveFlowEnvrelResponse) GoString() string {
	return s.String()
}

func (s *SaveFlowEnvrelResponse) SetReqMsgId(v string) *SaveFlowEnvrelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveFlowEnvrelResponse) SetResultCode(v string) *SaveFlowEnvrelResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveFlowEnvrelResponse) SetResultMsg(v string) *SaveFlowEnvrelResponse {
	s.ResultMsg = &v
	return s
}

type DeleteFlowEnvrelRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 目标环境
	Dest *string `json:"dest,omitempty" xml:"dest,omitempty" require:"true"`
	// 源环境
	Src *string `json:"src,omitempty" xml:"src,omitempty" require:"true"`
	// 关联类型（PROD，GRAY）
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 环境
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
}

func (s DeleteFlowEnvrelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowEnvrelRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowEnvrelRequest) SetAuthToken(v string) *DeleteFlowEnvrelRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteFlowEnvrelRequest) SetDest(v string) *DeleteFlowEnvrelRequest {
	s.Dest = &v
	return s
}

func (s *DeleteFlowEnvrelRequest) SetSrc(v string) *DeleteFlowEnvrelRequest {
	s.Src = &v
	return s
}

func (s *DeleteFlowEnvrelRequest) SetType(v string) *DeleteFlowEnvrelRequest {
	s.Type = &v
	return s
}

func (s *DeleteFlowEnvrelRequest) SetWorkspaceGroup(v string) *DeleteFlowEnvrelRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *DeleteFlowEnvrelRequest) SetOperator(v string) *DeleteFlowEnvrelRequest {
	s.Operator = &v
	return s
}

type DeleteFlowEnvrelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteFlowEnvrelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowEnvrelResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowEnvrelResponse) SetReqMsgId(v string) *DeleteFlowEnvrelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteFlowEnvrelResponse) SetResultCode(v string) *DeleteFlowEnvrelResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteFlowEnvrelResponse) SetResultMsg(v string) *DeleteFlowEnvrelResponse {
	s.ResultMsg = &v
	return s
}

type QueryFlowEnvrelRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 环境
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 源环境
	Src *string `json:"src,omitempty" xml:"src,omitempty" require:"true"`
	// 关联类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s QueryFlowEnvrelRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowEnvrelRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowEnvrelRequest) SetAuthToken(v string) *QueryFlowEnvrelRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFlowEnvrelRequest) SetWorkspaceGroup(v string) *QueryFlowEnvrelRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *QueryFlowEnvrelRequest) SetSrc(v string) *QueryFlowEnvrelRequest {
	s.Src = &v
	return s
}

func (s *QueryFlowEnvrelRequest) SetType(v string) *QueryFlowEnvrelRequest {
	s.Type = &v
	return s
}

type QueryFlowEnvrelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 源环境
	Src *string `json:"src,omitempty" xml:"src,omitempty"`
	// 目标环境
	Dest *string `json:"dest,omitempty" xml:"dest,omitempty"`
	// 关联类型（PROD，GRAY）
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 创建时间
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 修改时间
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s QueryFlowEnvrelResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowEnvrelResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowEnvrelResponse) SetReqMsgId(v string) *QueryFlowEnvrelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFlowEnvrelResponse) SetResultCode(v string) *QueryFlowEnvrelResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFlowEnvrelResponse) SetResultMsg(v string) *QueryFlowEnvrelResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFlowEnvrelResponse) SetSrc(v string) *QueryFlowEnvrelResponse {
	s.Src = &v
	return s
}

func (s *QueryFlowEnvrelResponse) SetDest(v string) *QueryFlowEnvrelResponse {
	s.Dest = &v
	return s
}

func (s *QueryFlowEnvrelResponse) SetType(v string) *QueryFlowEnvrelResponse {
	s.Type = &v
	return s
}

func (s *QueryFlowEnvrelResponse) SetCreatedTime(v string) *QueryFlowEnvrelResponse {
	s.CreatedTime = &v
	return s
}

func (s *QueryFlowEnvrelResponse) SetModifiedTime(v string) *QueryFlowEnvrelResponse {
	s.ModifiedTime = &v
	return s
}

type CreateFlowSitecellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 异构机房部署单元
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 异构机房地域
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 异构机房名称
	SiteName *string `json:"site_name,omitempty" xml:"site_name,omitempty" require:"true"`
	// 环境
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
}

func (s CreateFlowSitecellRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowSitecellRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowSitecellRequest) SetAuthToken(v string) *CreateFlowSitecellRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFlowSitecellRequest) SetName(v string) *CreateFlowSitecellRequest {
	s.Name = &v
	return s
}

func (s *CreateFlowSitecellRequest) SetRegion(v string) *CreateFlowSitecellRequest {
	s.Region = &v
	return s
}

func (s *CreateFlowSitecellRequest) SetSiteName(v string) *CreateFlowSitecellRequest {
	s.SiteName = &v
	return s
}

func (s *CreateFlowSitecellRequest) SetWorkspaceGroup(v string) *CreateFlowSitecellRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *CreateFlowSitecellRequest) SetOperator(v string) *CreateFlowSitecellRequest {
	s.Operator = &v
	return s
}

type CreateFlowSitecellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateFlowSitecellResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowSitecellResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowSitecellResponse) SetReqMsgId(v string) *CreateFlowSitecellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFlowSitecellResponse) SetResultCode(v string) *CreateFlowSitecellResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFlowSitecellResponse) SetResultMsg(v string) *CreateFlowSitecellResponse {
	s.ResultMsg = &v
	return s
}

type DeleteFlowSitecellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单元
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 异构机房名
	SiteName *string `json:"site_name,omitempty" xml:"site_name,omitempty" require:"true"`
	// 环境
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
}

func (s DeleteFlowSitecellRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowSitecellRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowSitecellRequest) SetAuthToken(v string) *DeleteFlowSitecellRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteFlowSitecellRequest) SetName(v string) *DeleteFlowSitecellRequest {
	s.Name = &v
	return s
}

func (s *DeleteFlowSitecellRequest) SetSiteName(v string) *DeleteFlowSitecellRequest {
	s.SiteName = &v
	return s
}

func (s *DeleteFlowSitecellRequest) SetWorkspaceGroup(v string) *DeleteFlowSitecellRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *DeleteFlowSitecellRequest) SetOperator(v string) *DeleteFlowSitecellRequest {
	s.Operator = &v
	return s
}

type DeleteFlowSitecellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteFlowSitecellResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowSitecellResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowSitecellResponse) SetReqMsgId(v string) *DeleteFlowSitecellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteFlowSitecellResponse) SetResultCode(v string) *DeleteFlowSitecellResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteFlowSitecellResponse) SetResultMsg(v string) *DeleteFlowSitecellResponse {
	s.ResultMsg = &v
	return s
}

type QueryFlowSitecellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 异构机房名
	SiteName *string `json:"site_name,omitempty" xml:"site_name,omitempty" require:"true"`
	// 环境
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s QueryFlowSitecellRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowSitecellRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowSitecellRequest) SetAuthToken(v string) *QueryFlowSitecellRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFlowSitecellRequest) SetSiteName(v string) *QueryFlowSitecellRequest {
	s.SiteName = &v
	return s
}

func (s *QueryFlowSitecellRequest) SetWorkspaceGroup(v string) *QueryFlowSitecellRequest {
	s.WorkspaceGroup = &v
	return s
}

type QueryFlowSitecellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 部署单元列表
	SiteCells []*SiteCell `json:"site_cells,omitempty" xml:"site_cells,omitempty" type:"Repeated"`
}

func (s QueryFlowSitecellResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowSitecellResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowSitecellResponse) SetReqMsgId(v string) *QueryFlowSitecellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFlowSitecellResponse) SetResultCode(v string) *QueryFlowSitecellResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFlowSitecellResponse) SetResultMsg(v string) *QueryFlowSitecellResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFlowSitecellResponse) SetSiteCells(v []*SiteCell) *QueryFlowSitecellResponse {
	s.SiteCells = v
	return s
}

type GetOpsplanServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 发布单下应用服务对应的发布id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s GetOpsplanServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetOpsplanServiceRequest) GoString() string {
	return s.String()
}

func (s *GetOpsplanServiceRequest) SetAuthToken(v string) *GetOpsplanServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetOpsplanServiceRequest) SetWorkspaceGroup(v string) *GetOpsplanServiceRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *GetOpsplanServiceRequest) SetId(v string) *GetOpsplanServiceRequest {
	s.Id = &v
	return s
}

type GetOpsplanServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发布应用服务详情
	Data *AppSimpleInfo `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetOpsplanServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetOpsplanServiceResponse) GoString() string {
	return s.String()
}

func (s *GetOpsplanServiceResponse) SetReqMsgId(v string) *GetOpsplanServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetOpsplanServiceResponse) SetResultCode(v string) *GetOpsplanServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetOpsplanServiceResponse) SetResultMsg(v string) *GetOpsplanServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetOpsplanServiceResponse) SetData(v *AppSimpleInfo) *GetOpsplanServiceResponse {
	s.Data = v
	return s
}

type QueryFlowRuleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 环境
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 规则类型：ZONE_INFO,ELASTIC_BIZ_RULE,ZONE_COLOR
	RuleType *string `json:"rule_type,omitempty" xml:"rule_type,omitempty" require:"true"`
}

func (s QueryFlowRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowRuleRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowRuleRequest) SetAuthToken(v string) *QueryFlowRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFlowRuleRequest) SetWorkspaceGroup(v string) *QueryFlowRuleRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *QueryFlowRuleRequest) SetRuleType(v string) *QueryFlowRuleRequest {
	s.RuleType = &v
	return s
}

type QueryFlowRuleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 规则文本
	Rule *string `json:"rule,omitempty" xml:"rule,omitempty"`
}

func (s QueryFlowRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowRuleResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowRuleResponse) SetReqMsgId(v string) *QueryFlowRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFlowRuleResponse) SetResultCode(v string) *QueryFlowRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFlowRuleResponse) SetResultMsg(v string) *QueryFlowRuleResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFlowRuleResponse) SetRule(v string) *QueryFlowRuleResponse {
	s.Rule = &v
	return s
}

type CreateFederationDeploymentRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属应用
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
	// clusters
	Clusters []*string `json:"clusters,omitempty" xml:"clusters,omitempty" require:"true" type:"Repeated"`
	// FedDeploymentClusterOverride描述
	ClusterOverrides []*FedDeploymentClusterOverride `json:"cluster_overrides,omitempty" xml:"cluster_overrides,omitempty" type:"Repeated"`
	// DNS配置
	DnsPolicy *string `json:"dns_policy,omitempty" xml:"dns_policy,omitempty"`
	// Host networking requested for this pod
	HostNetwork *bool `json:"host_network,omitempty" xml:"host_network,omitempty"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// Pod模板描述
	PodSpec *PodSpec `json:"pod_spec,omitempty" xml:"pod_spec,omitempty" require:"true"`
	// Deployment 副本数
	Replicas *int64 `json:"replicas,omitempty" xml:"replicas,omitempty" require:"true"`
	// Pod volume list
	Volumes []*Volume `json:"volumes,omitempty" xml:"volumes,omitempty" type:"Repeated"`
	// 环境组名称
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s CreateFederationDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFederationDeploymentRequest) GoString() string {
	return s.String()
}

func (s *CreateFederationDeploymentRequest) SetAuthToken(v string) *CreateFederationDeploymentRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFederationDeploymentRequest) SetApp(v string) *CreateFederationDeploymentRequest {
	s.App = &v
	return s
}

func (s *CreateFederationDeploymentRequest) SetClusters(v []*string) *CreateFederationDeploymentRequest {
	s.Clusters = v
	return s
}

func (s *CreateFederationDeploymentRequest) SetClusterOverrides(v []*FedDeploymentClusterOverride) *CreateFederationDeploymentRequest {
	s.ClusterOverrides = v
	return s
}

func (s *CreateFederationDeploymentRequest) SetDnsPolicy(v string) *CreateFederationDeploymentRequest {
	s.DnsPolicy = &v
	return s
}

func (s *CreateFederationDeploymentRequest) SetHostNetwork(v bool) *CreateFederationDeploymentRequest {
	s.HostNetwork = &v
	return s
}

func (s *CreateFederationDeploymentRequest) SetName(v string) *CreateFederationDeploymentRequest {
	s.Name = &v
	return s
}

func (s *CreateFederationDeploymentRequest) SetNamespace(v string) *CreateFederationDeploymentRequest {
	s.Namespace = &v
	return s
}

func (s *CreateFederationDeploymentRequest) SetPodSpec(v *PodSpec) *CreateFederationDeploymentRequest {
	s.PodSpec = v
	return s
}

func (s *CreateFederationDeploymentRequest) SetReplicas(v int64) *CreateFederationDeploymentRequest {
	s.Replicas = &v
	return s
}

func (s *CreateFederationDeploymentRequest) SetVolumes(v []*Volume) *CreateFederationDeploymentRequest {
	s.Volumes = v
	return s
}

func (s *CreateFederationDeploymentRequest) SetWorkspaceGroupName(v string) *CreateFederationDeploymentRequest {
	s.WorkspaceGroupName = &v
	return s
}

type CreateFederationDeploymentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
}

func (s CreateFederationDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFederationDeploymentResponse) GoString() string {
	return s.String()
}

func (s *CreateFederationDeploymentResponse) SetReqMsgId(v string) *CreateFederationDeploymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFederationDeploymentResponse) SetResultCode(v string) *CreateFederationDeploymentResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFederationDeploymentResponse) SetResultMsg(v string) *CreateFederationDeploymentResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateFederationDeploymentResponse) SetName(v string) *CreateFederationDeploymentResponse {
	s.Name = &v
	return s
}

func (s *CreateFederationDeploymentResponse) SetNamespace(v string) *CreateFederationDeploymentResponse {
	s.Namespace = &v
	return s
}

type QueryLoadbalancerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 负载均衡类型。
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 工作空间组名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 所属namespace名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
}

func (s QueryLoadbalancerRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalancerRequest) GoString() string {
	return s.String()
}

func (s *QueryLoadbalancerRequest) SetAuthToken(v string) *QueryLoadbalancerRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLoadbalancerRequest) SetType(v string) *QueryLoadbalancerRequest {
	s.Type = &v
	return s
}

func (s *QueryLoadbalancerRequest) SetWorkspaceGroup(v string) *QueryLoadbalancerRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *QueryLoadbalancerRequest) SetNamespace(v string) *QueryLoadbalancerRequest {
	s.Namespace = &v
	return s
}

type QueryLoadbalancerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 负载均衡实例列表。
	LoadBalancers []*LoadBalancerInstance `json:"load_balancers,omitempty" xml:"load_balancers,omitempty" type:"Repeated"`
}

func (s QueryLoadbalancerResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalancerResponse) GoString() string {
	return s.String()
}

func (s *QueryLoadbalancerResponse) SetReqMsgId(v string) *QueryLoadbalancerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLoadbalancerResponse) SetResultCode(v string) *QueryLoadbalancerResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLoadbalancerResponse) SetResultMsg(v string) *QueryLoadbalancerResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLoadbalancerResponse) SetLoadBalancers(v []*LoadBalancerInstance) *QueryLoadbalancerResponse {
	s.LoadBalancers = v
	return s
}

type ListContainerserviceServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 容器服务名称
	ContainerServiceName *string `json:"container_service_name,omitempty" xml:"container_service_name,omitempty" require:"true"`
	// 命名空间名称
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 工作空间组名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s ListContainerserviceServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListContainerserviceServiceRequest) GoString() string {
	return s.String()
}

func (s *ListContainerserviceServiceRequest) SetAuthToken(v string) *ListContainerserviceServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *ListContainerserviceServiceRequest) SetContainerServiceName(v string) *ListContainerserviceServiceRequest {
	s.ContainerServiceName = &v
	return s
}

func (s *ListContainerserviceServiceRequest) SetNamespace(v string) *ListContainerserviceServiceRequest {
	s.Namespace = &v
	return s
}

func (s *ListContainerserviceServiceRequest) SetWorkspaceGroup(v string) *ListContainerserviceServiceRequest {
	s.WorkspaceGroup = &v
	return s
}

type ListContainerserviceServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 容器服务 Service 列表
	Services []*ServiceInfo `json:"services,omitempty" xml:"services,omitempty" type:"Repeated"`
}

func (s ListContainerserviceServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListContainerserviceServiceResponse) GoString() string {
	return s.String()
}

func (s *ListContainerserviceServiceResponse) SetReqMsgId(v string) *ListContainerserviceServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListContainerserviceServiceResponse) SetResultCode(v string) *ListContainerserviceServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *ListContainerserviceServiceResponse) SetResultMsg(v string) *ListContainerserviceServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListContainerserviceServiceResponse) SetServices(v []*ServiceInfo) *ListContainerserviceServiceResponse {
	s.Services = v
	return s
}

type ListSidecarRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// scope
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty" require:"true"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// workspace_group_id
	WorkspaceGroupId *string `json:"workspace_group_id,omitempty" xml:"workspace_group_id,omitempty"`
}

func (s ListSidecarRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSidecarRequest) GoString() string {
	return s.String()
}

func (s *ListSidecarRequest) SetAuthToken(v string) *ListSidecarRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSidecarRequest) SetRegionId(v string) *ListSidecarRequest {
	s.RegionId = &v
	return s
}

func (s *ListSidecarRequest) SetScope(v string) *ListSidecarRequest {
	s.Scope = &v
	return s
}

func (s *ListSidecarRequest) SetWorkspace(v string) *ListSidecarRequest {
	s.Workspace = &v
	return s
}

func (s *ListSidecarRequest) SetWorkspaceGroupId(v string) *ListSidecarRequest {
	s.WorkspaceGroupId = &v
	return s
}

type ListSidecarResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// sidecars
	Sidecars []*SideCar `json:"sidecars,omitempty" xml:"sidecars,omitempty" type:"Repeated"`
}

func (s ListSidecarResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSidecarResponse) GoString() string {
	return s.String()
}

func (s *ListSidecarResponse) SetReqMsgId(v string) *ListSidecarResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSidecarResponse) SetResultCode(v string) *ListSidecarResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSidecarResponse) SetResultMsg(v string) *ListSidecarResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSidecarResponse) SetSidecars(v []*SideCar) *ListSidecarResponse {
	s.Sidecars = v
	return s
}

type ListSidecarTemplateRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty" require:"true"`
	// sidecar_name
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty"`
	// sidecar version
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty"`
	// 环境
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// workspace_group_id
	WorkspaceGroupId *string `json:"workspace_group_id,omitempty" xml:"workspace_group_id,omitempty"`
}

func (s ListSidecarTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSidecarTemplateRequest) GoString() string {
	return s.String()
}

func (s *ListSidecarTemplateRequest) SetAuthToken(v string) *ListSidecarTemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSidecarTemplateRequest) SetRegionId(v string) *ListSidecarTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *ListSidecarTemplateRequest) SetScope(v string) *ListSidecarTemplateRequest {
	s.Scope = &v
	return s
}

func (s *ListSidecarTemplateRequest) SetSidecarName(v string) *ListSidecarTemplateRequest {
	s.SidecarName = &v
	return s
}

func (s *ListSidecarTemplateRequest) SetSidecarVersion(v string) *ListSidecarTemplateRequest {
	s.SidecarVersion = &v
	return s
}

func (s *ListSidecarTemplateRequest) SetWorkspace(v string) *ListSidecarTemplateRequest {
	s.Workspace = &v
	return s
}

func (s *ListSidecarTemplateRequest) SetWorkspaceGroupId(v string) *ListSidecarTemplateRequest {
	s.WorkspaceGroupId = &v
	return s
}

type ListSidecarTemplateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// sidecar 模板列表
	SidecarTemplates []*SidecarTemplate `json:"sidecar_templates,omitempty" xml:"sidecar_templates,omitempty" type:"Repeated"`
}

func (s ListSidecarTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSidecarTemplateResponse) GoString() string {
	return s.String()
}

func (s *ListSidecarTemplateResponse) SetReqMsgId(v string) *ListSidecarTemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSidecarTemplateResponse) SetResultCode(v string) *ListSidecarTemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSidecarTemplateResponse) SetResultMsg(v string) *ListSidecarTemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSidecarTemplateResponse) SetSidecarTemplates(v []*SidecarTemplate) *ListSidecarTemplateResponse {
	s.SidecarTemplates = v
	return s
}

type GetSidecarTemplateRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty" require:"true"`
	// sidecar 名称
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty" require:"true"`
	// sidecar 版本
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty" require:"true"`
	// 环境
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// wsg id
	WorkspaceGroupId *string `json:"workspace_group_id,omitempty" xml:"workspace_group_id,omitempty"`
}

func (s GetSidecarTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSidecarTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetSidecarTemplateRequest) SetAuthToken(v string) *GetSidecarTemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSidecarTemplateRequest) SetRegionId(v string) *GetSidecarTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *GetSidecarTemplateRequest) SetScope(v string) *GetSidecarTemplateRequest {
	s.Scope = &v
	return s
}

func (s *GetSidecarTemplateRequest) SetSidecarName(v string) *GetSidecarTemplateRequest {
	s.SidecarName = &v
	return s
}

func (s *GetSidecarTemplateRequest) SetSidecarVersion(v string) *GetSidecarTemplateRequest {
	s.SidecarVersion = &v
	return s
}

func (s *GetSidecarTemplateRequest) SetWorkspace(v string) *GetSidecarTemplateRequest {
	s.Workspace = &v
	return s
}

func (s *GetSidecarTemplateRequest) SetWorkspaceGroupId(v string) *GetSidecarTemplateRequest {
	s.WorkspaceGroupId = &v
	return s
}

type GetSidecarTemplateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// sidecar 版本详情
	SidecarTemplate *SidecarTemplate `json:"sidecar_template,omitempty" xml:"sidecar_template,omitempty"`
}

func (s GetSidecarTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSidecarTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetSidecarTemplateResponse) SetReqMsgId(v string) *GetSidecarTemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSidecarTemplateResponse) SetResultCode(v string) *GetSidecarTemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSidecarTemplateResponse) SetResultMsg(v string) *GetSidecarTemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSidecarTemplateResponse) SetSidecarTemplate(v *SidecarTemplate) *GetSidecarTemplateResponse {
	s.SidecarTemplate = v
	return s
}

type GetFederationDeploymentRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// FedDeployment名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// workspaceGroup 名称
	//
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s GetFederationDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFederationDeploymentRequest) GoString() string {
	return s.String()
}

func (s *GetFederationDeploymentRequest) SetAuthToken(v string) *GetFederationDeploymentRequest {
	s.AuthToken = &v
	return s
}

func (s *GetFederationDeploymentRequest) SetName(v string) *GetFederationDeploymentRequest {
	s.Name = &v
	return s
}

func (s *GetFederationDeploymentRequest) SetWorkspaceGroupName(v string) *GetFederationDeploymentRequest {
	s.WorkspaceGroupName = &v
	return s
}

type GetFederationDeploymentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 联邦无状态工作负载
	Data *FederatedDeployment `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetFederationDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFederationDeploymentResponse) GoString() string {
	return s.String()
}

func (s *GetFederationDeploymentResponse) SetReqMsgId(v string) *GetFederationDeploymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetFederationDeploymentResponse) SetResultCode(v string) *GetFederationDeploymentResponse {
	s.ResultCode = &v
	return s
}

func (s *GetFederationDeploymentResponse) SetResultMsg(v string) *GetFederationDeploymentResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetFederationDeploymentResponse) SetData(v *FederatedDeployment) *GetFederationDeploymentResponse {
	s.Data = v
	return s
}

type ListFederationDeploymentRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 环境组名称
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s ListFederationDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFederationDeploymentRequest) GoString() string {
	return s.String()
}

func (s *ListFederationDeploymentRequest) SetAuthToken(v string) *ListFederationDeploymentRequest {
	s.AuthToken = &v
	return s
}

func (s *ListFederationDeploymentRequest) SetNamespace(v string) *ListFederationDeploymentRequest {
	s.Namespace = &v
	return s
}

func (s *ListFederationDeploymentRequest) SetWorkspaceGroupName(v string) *ListFederationDeploymentRequest {
	s.WorkspaceGroupName = &v
	return s
}

type ListFederationDeploymentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// FederatedDeploymment列表
	Data []*FederatedDeployment `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListFederationDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFederationDeploymentResponse) GoString() string {
	return s.String()
}

func (s *ListFederationDeploymentResponse) SetReqMsgId(v string) *ListFederationDeploymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListFederationDeploymentResponse) SetResultCode(v string) *ListFederationDeploymentResponse {
	s.ResultCode = &v
	return s
}

func (s *ListFederationDeploymentResponse) SetResultMsg(v string) *ListFederationDeploymentResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListFederationDeploymentResponse) SetData(v []*FederatedDeployment) *ListFederationDeploymentResponse {
	s.Data = v
	return s
}

type DeleteFederationDeploymentRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// FedDeployment名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 环境组名称
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s DeleteFederationDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFederationDeploymentRequest) GoString() string {
	return s.String()
}

func (s *DeleteFederationDeploymentRequest) SetAuthToken(v string) *DeleteFederationDeploymentRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteFederationDeploymentRequest) SetName(v string) *DeleteFederationDeploymentRequest {
	s.Name = &v
	return s
}

func (s *DeleteFederationDeploymentRequest) SetWorkspaceGroupName(v string) *DeleteFederationDeploymentRequest {
	s.WorkspaceGroupName = &v
	return s
}

type DeleteFederationDeploymentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 删除成功标志
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteFederationDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFederationDeploymentResponse) GoString() string {
	return s.String()
}

func (s *DeleteFederationDeploymentResponse) SetReqMsgId(v string) *DeleteFederationDeploymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteFederationDeploymentResponse) SetResultCode(v string) *DeleteFederationDeploymentResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteFederationDeploymentResponse) SetResultMsg(v string) *DeleteFederationDeploymentResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteFederationDeploymentResponse) SetSuccess(v bool) *DeleteFederationDeploymentResponse {
	s.Success = &v
	return s
}

type SetFlowDefaultuidRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 环境
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 是否压测，默认 false
	Press *bool `json:"press,omitempty" xml:"press,omitempty"`
}

func (s SetFlowDefaultuidRequest) String() string {
	return tea.Prettify(s)
}

func (s SetFlowDefaultuidRequest) GoString() string {
	return s.String()
}

func (s *SetFlowDefaultuidRequest) SetAuthToken(v string) *SetFlowDefaultuidRequest {
	s.AuthToken = &v
	return s
}

func (s *SetFlowDefaultuidRequest) SetWorkspaceGroup(v string) *SetFlowDefaultuidRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *SetFlowDefaultuidRequest) SetPress(v bool) *SetFlowDefaultuidRequest {
	s.Press = &v
	return s
}

type SetFlowDefaultuidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetFlowDefaultuidResponse) String() string {
	return tea.Prettify(s)
}

func (s SetFlowDefaultuidResponse) GoString() string {
	return s.String()
}

func (s *SetFlowDefaultuidResponse) SetReqMsgId(v string) *SetFlowDefaultuidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetFlowDefaultuidResponse) SetResultCode(v string) *SetFlowDefaultuidResponse {
	s.ResultCode = &v
	return s
}

func (s *SetFlowDefaultuidResponse) SetResultMsg(v string) *SetFlowDefaultuidResponse {
	s.ResultMsg = &v
	return s
}

type StartOpsplanServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用服务发布ID
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 操作人账号，lks1.23.0才支持
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
}

func (s StartOpsplanServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartOpsplanServiceRequest) GoString() string {
	return s.String()
}

func (s *StartOpsplanServiceRequest) SetAuthToken(v string) *StartOpsplanServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *StartOpsplanServiceRequest) SetId(v string) *StartOpsplanServiceRequest {
	s.Id = &v
	return s
}

func (s *StartOpsplanServiceRequest) SetWorkspaceGroup(v string) *StartOpsplanServiceRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *StartOpsplanServiceRequest) SetOperator(v string) *StartOpsplanServiceRequest {
	s.Operator = &v
	return s
}

type StartOpsplanServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartOpsplanServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartOpsplanServiceResponse) GoString() string {
	return s.String()
}

func (s *StartOpsplanServiceResponse) SetReqMsgId(v string) *StartOpsplanServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartOpsplanServiceResponse) SetResultCode(v string) *StartOpsplanServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *StartOpsplanServiceResponse) SetResultMsg(v string) *StartOpsplanServiceResponse {
	s.ResultMsg = &v
	return s
}

type ConfirmOpsplanServicerollbackRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用服务发布id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s ConfirmOpsplanServicerollbackRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmOpsplanServicerollbackRequest) GoString() string {
	return s.String()
}

func (s *ConfirmOpsplanServicerollbackRequest) SetAuthToken(v string) *ConfirmOpsplanServicerollbackRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmOpsplanServicerollbackRequest) SetId(v string) *ConfirmOpsplanServicerollbackRequest {
	s.Id = &v
	return s
}

func (s *ConfirmOpsplanServicerollbackRequest) SetWorkspaceGroup(v string) *ConfirmOpsplanServicerollbackRequest {
	s.WorkspaceGroup = &v
	return s
}

type ConfirmOpsplanServicerollbackResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ConfirmOpsplanServicerollbackResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmOpsplanServicerollbackResponse) GoString() string {
	return s.String()
}

func (s *ConfirmOpsplanServicerollbackResponse) SetReqMsgId(v string) *ConfirmOpsplanServicerollbackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmOpsplanServicerollbackResponse) SetResultCode(v string) *ConfirmOpsplanServicerollbackResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmOpsplanServicerollbackResponse) SetResultMsg(v string) *ConfirmOpsplanServicerollbackResponse {
	s.ResultMsg = &v
	return s
}

type RetryOpsplanServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用服务发布id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 操作人账号，lks1.23.0才支持
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
}

func (s RetryOpsplanServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryOpsplanServiceRequest) GoString() string {
	return s.String()
}

func (s *RetryOpsplanServiceRequest) SetAuthToken(v string) *RetryOpsplanServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryOpsplanServiceRequest) SetId(v string) *RetryOpsplanServiceRequest {
	s.Id = &v
	return s
}

func (s *RetryOpsplanServiceRequest) SetOperator(v string) *RetryOpsplanServiceRequest {
	s.Operator = &v
	return s
}

type RetryOpsplanServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RetryOpsplanServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryOpsplanServiceResponse) GoString() string {
	return s.String()
}

func (s *RetryOpsplanServiceResponse) SetReqMsgId(v string) *RetryOpsplanServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryOpsplanServiceResponse) SetResultCode(v string) *RetryOpsplanServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryOpsplanServiceResponse) SetResultMsg(v string) *RetryOpsplanServiceResponse {
	s.ResultMsg = &v
	return s
}

type QueryFlowElasticsceneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 环境
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s QueryFlowElasticsceneRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowElasticsceneRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowElasticsceneRequest) SetAuthToken(v string) *QueryFlowElasticsceneRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFlowElasticsceneRequest) SetWorkspaceGroup(v string) *QueryFlowElasticsceneRequest {
	s.WorkspaceGroup = &v
	return s
}

type QueryFlowElasticsceneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 弹性场景列表
	Scenes []*ElasticScene `json:"scenes,omitempty" xml:"scenes,omitempty" type:"Repeated"`
}

func (s QueryFlowElasticsceneResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowElasticsceneResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowElasticsceneResponse) SetReqMsgId(v string) *QueryFlowElasticsceneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFlowElasticsceneResponse) SetResultCode(v string) *QueryFlowElasticsceneResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFlowElasticsceneResponse) SetResultMsg(v string) *QueryFlowElasticsceneResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFlowElasticsceneResponse) SetScenes(v []*ElasticScene) *QueryFlowElasticsceneResponse {
	s.Scenes = v
	return s
}

type QueryFlowElasticruleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 环境
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 规则名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 所属类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 所属应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 场景名称
	SceneName *string `json:"scene_name,omitempty" xml:"scene_name,omitempty"`
	// 分页大小，默认 10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页，默认 1
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
}

func (s QueryFlowElasticruleRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowElasticruleRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowElasticruleRequest) SetAuthToken(v string) *QueryFlowElasticruleRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFlowElasticruleRequest) SetWorkspaceGroup(v string) *QueryFlowElasticruleRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *QueryFlowElasticruleRequest) SetName(v string) *QueryFlowElasticruleRequest {
	s.Name = &v
	return s
}

func (s *QueryFlowElasticruleRequest) SetType(v string) *QueryFlowElasticruleRequest {
	s.Type = &v
	return s
}

func (s *QueryFlowElasticruleRequest) SetAppName(v string) *QueryFlowElasticruleRequest {
	s.AppName = &v
	return s
}

func (s *QueryFlowElasticruleRequest) SetSceneName(v string) *QueryFlowElasticruleRequest {
	s.SceneName = &v
	return s
}

func (s *QueryFlowElasticruleRequest) SetPageSize(v int64) *QueryFlowElasticruleRequest {
	s.PageSize = &v
	return s
}

func (s *QueryFlowElasticruleRequest) SetPageNo(v int64) *QueryFlowElasticruleRequest {
	s.PageNo = &v
	return s
}

type QueryFlowElasticruleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 弹性规则列表
	ElasticRules []*ElasticRuleView `json:"elastic_rules,omitempty" xml:"elastic_rules,omitempty" type:"Repeated"`
	// 总数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
	// 当前页
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryFlowElasticruleResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowElasticruleResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowElasticruleResponse) SetReqMsgId(v string) *QueryFlowElasticruleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFlowElasticruleResponse) SetResultCode(v string) *QueryFlowElasticruleResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFlowElasticruleResponse) SetResultMsg(v string) *QueryFlowElasticruleResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFlowElasticruleResponse) SetElasticRules(v []*ElasticRuleView) *QueryFlowElasticruleResponse {
	s.ElasticRules = v
	return s
}

func (s *QueryFlowElasticruleResponse) SetTotal(v int64) *QueryFlowElasticruleResponse {
	s.Total = &v
	return s
}

func (s *QueryFlowElasticruleResponse) SetPageNo(v int64) *QueryFlowElasticruleResponse {
	s.PageNo = &v
	return s
}

func (s *QueryFlowElasticruleResponse) SetPageSize(v int64) *QueryFlowElasticruleResponse {
	s.PageSize = &v
	return s
}

type QueryFlowElasticsubruleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 环境
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 弹性规则ID
	ElasticRuleId *int64 `json:"elastic_rule_id,omitempty" xml:"elastic_rule_id,omitempty" require:"true"`
}

func (s QueryFlowElasticsubruleRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowElasticsubruleRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowElasticsubruleRequest) SetAuthToken(v string) *QueryFlowElasticsubruleRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFlowElasticsubruleRequest) SetWorkspaceGroup(v string) *QueryFlowElasticsubruleRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *QueryFlowElasticsubruleRequest) SetElasticRuleId(v int64) *QueryFlowElasticsubruleRequest {
	s.ElasticRuleId = &v
	return s
}

type QueryFlowElasticsubruleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 子规则列表
	SubRules []*ElasticSubRuleView `json:"sub_rules,omitempty" xml:"sub_rules,omitempty" type:"Repeated"`
}

func (s QueryFlowElasticsubruleResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowElasticsubruleResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowElasticsubruleResponse) SetReqMsgId(v string) *QueryFlowElasticsubruleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFlowElasticsubruleResponse) SetResultCode(v string) *QueryFlowElasticsubruleResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFlowElasticsubruleResponse) SetResultMsg(v string) *QueryFlowElasticsubruleResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFlowElasticsubruleResponse) SetSubRules(v []*ElasticSubRuleView) *QueryFlowElasticsubruleResponse {
	s.SubRules = v
	return s
}

type QueryFlowElasticvalueRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 环境
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s QueryFlowElasticvalueRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowElasticvalueRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowElasticvalueRequest) SetAuthToken(v string) *QueryFlowElasticvalueRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFlowElasticvalueRequest) SetWorkspaceGroup(v string) *QueryFlowElasticvalueRequest {
	s.WorkspaceGroup = &v
	return s
}

type QueryFlowElasticvalueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 弹性信息
	ElasticInfo []*ElasticInfoView `json:"elastic_info,omitempty" xml:"elastic_info,omitempty" type:"Repeated"`
}

func (s QueryFlowElasticvalueResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowElasticvalueResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowElasticvalueResponse) SetReqMsgId(v string) *QueryFlowElasticvalueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFlowElasticvalueResponse) SetResultCode(v string) *QueryFlowElasticvalueResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFlowElasticvalueResponse) SetResultMsg(v string) *QueryFlowElasticvalueResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFlowElasticvalueResponse) SetElasticInfo(v []*ElasticInfoView) *QueryFlowElasticvalueResponse {
	s.ElasticInfo = v
	return s
}

type ListSystemSwitchRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s ListSystemSwitchRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSystemSwitchRequest) GoString() string {
	return s.String()
}

func (s *ListSystemSwitchRequest) SetAuthToken(v string) *ListSystemSwitchRequest {
	s.AuthToken = &v
	return s
}

type ListSystemSwitchResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 开关集合jarrya son string
	Switches *string `json:"switches,omitempty" xml:"switches,omitempty"`
}

func (s ListSystemSwitchResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSystemSwitchResponse) GoString() string {
	return s.String()
}

func (s *ListSystemSwitchResponse) SetReqMsgId(v string) *ListSystemSwitchResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSystemSwitchResponse) SetResultCode(v string) *ListSystemSwitchResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSystemSwitchResponse) SetResultMsg(v string) *ListSystemSwitchResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSystemSwitchResponse) SetSwitches(v string) *ListSystemSwitchResponse {
	s.Switches = &v
	return s
}

type LoadBuildpackDockerfileRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 技术栈大版本
	TechStack *string `json:"tech_stack,omitempty" xml:"tech_stack,omitempty" require:"true"`
	// 云原生技术栈版本
	TechStackVersion *string `json:"tech_stack_version,omitempty" xml:"tech_stack_version,omitempty" require:"true"`
	// 应用包地址，可以为相对目录，或者远程可访问存储地址. 用于组装Dockerfile模板中对应的应用包获取地址
	PackageUrl *string `json:"package_url,omitempty" xml:"package_url,omitempty" require:"true"`
}

func (s LoadBuildpackDockerfileRequest) String() string {
	return tea.Prettify(s)
}

func (s LoadBuildpackDockerfileRequest) GoString() string {
	return s.String()
}

func (s *LoadBuildpackDockerfileRequest) SetAuthToken(v string) *LoadBuildpackDockerfileRequest {
	s.AuthToken = &v
	return s
}

func (s *LoadBuildpackDockerfileRequest) SetTechStack(v string) *LoadBuildpackDockerfileRequest {
	s.TechStack = &v
	return s
}

func (s *LoadBuildpackDockerfileRequest) SetTechStackVersion(v string) *LoadBuildpackDockerfileRequest {
	s.TechStackVersion = &v
	return s
}

func (s *LoadBuildpackDockerfileRequest) SetPackageUrl(v string) *LoadBuildpackDockerfileRequest {
	s.PackageUrl = &v
	return s
}

type LoadBuildpackDockerfileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Dockerfile指令列表
	Commands []*string `json:"commands,omitempty" xml:"commands,omitempty" type:"Repeated"`
}

func (s LoadBuildpackDockerfileResponse) String() string {
	return tea.Prettify(s)
}

func (s LoadBuildpackDockerfileResponse) GoString() string {
	return s.String()
}

func (s *LoadBuildpackDockerfileResponse) SetReqMsgId(v string) *LoadBuildpackDockerfileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *LoadBuildpackDockerfileResponse) SetResultCode(v string) *LoadBuildpackDockerfileResponse {
	s.ResultCode = &v
	return s
}

func (s *LoadBuildpackDockerfileResponse) SetResultMsg(v string) *LoadBuildpackDockerfileResponse {
	s.ResultMsg = &v
	return s
}

func (s *LoadBuildpackDockerfileResponse) SetCommands(v []*string) *LoadBuildpackDockerfileResponse {
	s.Commands = v
	return s
}

type CreateOpsplanPodofflineRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 是否自动执行
	AutoExecute *bool `json:"auto_execute,omitempty" xml:"auto_execute,omitempty"`
	// 运维单扩展信息，jsonStr格式
	Context *string `json:"context,omitempty" xml:"context,omitempty"`
	// 容器服务间依赖顺序。 e.g 先发 A，B， 再发C， D {"groups": [{container_services: [{"name": A}, {"name": B}]}, {"container_services": [{"name": C}, {"name": D}]}]}
	Dependency *OpsContainerServiceChain `json:"dependency,omitempty" xml:"dependency,omitempty"`
	// 在具体分组策略下，每个执行单元（部署单元，机房等）内部的分组个数。
	GroupAmount *int64 `json:"group_amount,omitempty" xml:"group_amount,omitempty" require:"true"`
	// 用户可自定义分组发布的顺序，结合具体的分组策略并通过指定具体分组维度对应的名称生效。 e.g, 当分组策略为机房时，可以指定先发机房A，再发机房B ["A", "B"]
	GroupOrders []*string `json:"group_orders,omitempty" xml:"group_orders,omitempty" type:"Repeated"`
	// 分组策略（维度）：
	// - 按部署单元（CELL），按部署单元依次缩容；
	// - 按机房（ZONE），按机房依次缩容；
	// - 按逻辑单元（UNIT），按逻辑单元缩容；
	// - 共分一组（ALL），所有容器一起缩容，仍遵循分组个数控制；
	GroupStrategy *string `json:"group_strategy,omitempty" xml:"group_strategy,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 是否需要beta卡点
	NeedBeta *bool `json:"need_beta,omitempty" xml:"need_beta,omitempty" require:"true"`
	// 限定操作的部署单元
	RestrictedCells []*string `json:"restricted_cells,omitempty" xml:"restricted_cells,omitempty" type:"Repeated"`
	// 限定操作的机房
	RestrictedZones []*string `json:"restricted_zones,omitempty" xml:"restricted_zones,omitempty" type:"Repeated"`
	// 选定的容器服务列表
	SelectedContainerServices *OpsContainerServiceGroup `json:"selected_container_services,omitempty" xml:"selected_container_services,omitempty" require:"true"`
	// 缩容指定pod的标题
	Title *string `json:"title,omitempty" xml:"title,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s CreateOpsplanPodofflineRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOpsplanPodofflineRequest) GoString() string {
	return s.String()
}

func (s *CreateOpsplanPodofflineRequest) SetAuthToken(v string) *CreateOpsplanPodofflineRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateOpsplanPodofflineRequest) SetAutoExecute(v bool) *CreateOpsplanPodofflineRequest {
	s.AutoExecute = &v
	return s
}

func (s *CreateOpsplanPodofflineRequest) SetContext(v string) *CreateOpsplanPodofflineRequest {
	s.Context = &v
	return s
}

func (s *CreateOpsplanPodofflineRequest) SetDependency(v *OpsContainerServiceChain) *CreateOpsplanPodofflineRequest {
	s.Dependency = v
	return s
}

func (s *CreateOpsplanPodofflineRequest) SetGroupAmount(v int64) *CreateOpsplanPodofflineRequest {
	s.GroupAmount = &v
	return s
}

func (s *CreateOpsplanPodofflineRequest) SetGroupOrders(v []*string) *CreateOpsplanPodofflineRequest {
	s.GroupOrders = v
	return s
}

func (s *CreateOpsplanPodofflineRequest) SetGroupStrategy(v string) *CreateOpsplanPodofflineRequest {
	s.GroupStrategy = &v
	return s
}

func (s *CreateOpsplanPodofflineRequest) SetNamespace(v string) *CreateOpsplanPodofflineRequest {
	s.Namespace = &v
	return s
}

func (s *CreateOpsplanPodofflineRequest) SetNeedBeta(v bool) *CreateOpsplanPodofflineRequest {
	s.NeedBeta = &v
	return s
}

func (s *CreateOpsplanPodofflineRequest) SetRestrictedCells(v []*string) *CreateOpsplanPodofflineRequest {
	s.RestrictedCells = v
	return s
}

func (s *CreateOpsplanPodofflineRequest) SetRestrictedZones(v []*string) *CreateOpsplanPodofflineRequest {
	s.RestrictedZones = v
	return s
}

func (s *CreateOpsplanPodofflineRequest) SetSelectedContainerServices(v *OpsContainerServiceGroup) *CreateOpsplanPodofflineRequest {
	s.SelectedContainerServices = v
	return s
}

func (s *CreateOpsplanPodofflineRequest) SetTitle(v string) *CreateOpsplanPodofflineRequest {
	s.Title = &v
	return s
}

func (s *CreateOpsplanPodofflineRequest) SetWorkspaceGroup(v string) *CreateOpsplanPodofflineRequest {
	s.WorkspaceGroup = &v
	return s
}

type CreateOpsplanPodofflineResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 运维单号
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s CreateOpsplanPodofflineResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOpsplanPodofflineResponse) GoString() string {
	return s.String()
}

func (s *CreateOpsplanPodofflineResponse) SetReqMsgId(v string) *CreateOpsplanPodofflineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateOpsplanPodofflineResponse) SetResultCode(v string) *CreateOpsplanPodofflineResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateOpsplanPodofflineResponse) SetResultMsg(v string) *CreateOpsplanPodofflineResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateOpsplanPodofflineResponse) SetOperationId(v string) *CreateOpsplanPodofflineResponse {
	s.OperationId = &v
	return s
}

type CreateDbflowObtenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 租户扩展属性，格式为序列化后的json字符串
	ExtendProperties *string `json:"extend_properties,omitempty" xml:"extend_properties,omitempty"`
	// OB租户名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 用于存放对应的业务库租户类型：单库类型或分片库
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 租户存放的uid段，用于存放对应业务分片库
	Uids []*int64 `json:"uids,omitempty" xml:"uids,omitempty" type:"Repeated"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s CreateDbflowObtenantRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDbflowObtenantRequest) GoString() string {
	return s.String()
}

func (s *CreateDbflowObtenantRequest) SetAuthToken(v string) *CreateDbflowObtenantRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDbflowObtenantRequest) SetDescription(v string) *CreateDbflowObtenantRequest {
	s.Description = &v
	return s
}

func (s *CreateDbflowObtenantRequest) SetExtendProperties(v string) *CreateDbflowObtenantRequest {
	s.ExtendProperties = &v
	return s
}

func (s *CreateDbflowObtenantRequest) SetName(v string) *CreateDbflowObtenantRequest {
	s.Name = &v
	return s
}

func (s *CreateDbflowObtenantRequest) SetType(v string) *CreateDbflowObtenantRequest {
	s.Type = &v
	return s
}

func (s *CreateDbflowObtenantRequest) SetUids(v []*int64) *CreateDbflowObtenantRequest {
	s.Uids = v
	return s
}

func (s *CreateDbflowObtenantRequest) SetWorkspaceGroup(v string) *CreateDbflowObtenantRequest {
	s.WorkspaceGroup = &v
	return s
}

type CreateDbflowObtenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateDbflowObtenantResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDbflowObtenantResponse) GoString() string {
	return s.String()
}

func (s *CreateDbflowObtenantResponse) SetReqMsgId(v string) *CreateDbflowObtenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDbflowObtenantResponse) SetResultCode(v string) *CreateDbflowObtenantResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDbflowObtenantResponse) SetResultMsg(v string) *CreateDbflowObtenantResponse {
	s.ResultMsg = &v
	return s
}

type QueryDbflowObtenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 租户类型GZONE|RZONE，分别用于存放单库或分片库
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 租户名称前缀
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 当前页码，默认为1
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 单页个数，默认为10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryDbflowObtenantRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDbflowObtenantRequest) GoString() string {
	return s.String()
}

func (s *QueryDbflowObtenantRequest) SetAuthToken(v string) *QueryDbflowObtenantRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDbflowObtenantRequest) SetWorkspaceGroup(v string) *QueryDbflowObtenantRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *QueryDbflowObtenantRequest) SetType(v string) *QueryDbflowObtenantRequest {
	s.Type = &v
	return s
}

func (s *QueryDbflowObtenantRequest) SetName(v string) *QueryDbflowObtenantRequest {
	s.Name = &v
	return s
}

func (s *QueryDbflowObtenantRequest) SetPageNumber(v int64) *QueryDbflowObtenantRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryDbflowObtenantRequest) SetPageSize(v int64) *QueryDbflowObtenantRequest {
	s.PageSize = &v
	return s
}

type QueryDbflowObtenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 租户列表
	List []*OBTenant `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
	// 当前页码
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 单页个数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总计
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryDbflowObtenantResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDbflowObtenantResponse) GoString() string {
	return s.String()
}

func (s *QueryDbflowObtenantResponse) SetReqMsgId(v string) *QueryDbflowObtenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDbflowObtenantResponse) SetResultCode(v string) *QueryDbflowObtenantResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDbflowObtenantResponse) SetResultMsg(v string) *QueryDbflowObtenantResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDbflowObtenantResponse) SetList(v []*OBTenant) *QueryDbflowObtenantResponse {
	s.List = v
	return s
}

func (s *QueryDbflowObtenantResponse) SetPageNumber(v int64) *QueryDbflowObtenantResponse {
	s.PageNumber = &v
	return s
}

func (s *QueryDbflowObtenantResponse) SetPageSize(v int64) *QueryDbflowObtenantResponse {
	s.PageSize = &v
	return s
}

func (s *QueryDbflowObtenantResponse) SetTotalCount(v int64) *QueryDbflowObtenantResponse {
	s.TotalCount = &v
	return s
}

type UpdateDbflowObtenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// OB租户唯一标识
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// OB租户名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 用于存放对应的业务库租户类型：单库类型或分片库
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 租户描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 对应uid分片段，用于存放对应分片库
	Uids []*int64 `json:"uids,omitempty" xml:"uids,omitempty" type:"Repeated"`
	// 租户扩展属性，格式为序列化后的json字符串
	ExtendProperties *string `json:"extend_properties,omitempty" xml:"extend_properties,omitempty"`
}

func (s UpdateDbflowObtenantRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDbflowObtenantRequest) GoString() string {
	return s.String()
}

func (s *UpdateDbflowObtenantRequest) SetAuthToken(v string) *UpdateDbflowObtenantRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDbflowObtenantRequest) SetWorkspaceGroup(v string) *UpdateDbflowObtenantRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *UpdateDbflowObtenantRequest) SetId(v string) *UpdateDbflowObtenantRequest {
	s.Id = &v
	return s
}

func (s *UpdateDbflowObtenantRequest) SetName(v string) *UpdateDbflowObtenantRequest {
	s.Name = &v
	return s
}

func (s *UpdateDbflowObtenantRequest) SetType(v string) *UpdateDbflowObtenantRequest {
	s.Type = &v
	return s
}

func (s *UpdateDbflowObtenantRequest) SetDescription(v string) *UpdateDbflowObtenantRequest {
	s.Description = &v
	return s
}

func (s *UpdateDbflowObtenantRequest) SetUids(v []*int64) *UpdateDbflowObtenantRequest {
	s.Uids = v
	return s
}

func (s *UpdateDbflowObtenantRequest) SetExtendProperties(v string) *UpdateDbflowObtenantRequest {
	s.ExtendProperties = &v
	return s
}

type UpdateDbflowObtenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDbflowObtenantResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDbflowObtenantResponse) GoString() string {
	return s.String()
}

func (s *UpdateDbflowObtenantResponse) SetReqMsgId(v string) *UpdateDbflowObtenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDbflowObtenantResponse) SetResultCode(v string) *UpdateDbflowObtenantResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDbflowObtenantResponse) SetResultMsg(v string) *UpdateDbflowObtenantResponse {
	s.ResultMsg = &v
	return s
}

type DeleteDbflowObtenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 租户唯一标识
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteDbflowObtenantRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDbflowObtenantRequest) GoString() string {
	return s.String()
}

func (s *DeleteDbflowObtenantRequest) SetAuthToken(v string) *DeleteDbflowObtenantRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDbflowObtenantRequest) SetWorkspaceGroup(v string) *DeleteDbflowObtenantRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *DeleteDbflowObtenantRequest) SetId(v string) *DeleteDbflowObtenantRequest {
	s.Id = &v
	return s
}

type DeleteDbflowObtenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDbflowObtenantResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDbflowObtenantResponse) GoString() string {
	return s.String()
}

func (s *DeleteDbflowObtenantResponse) SetReqMsgId(v string) *DeleteDbflowObtenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDbflowObtenantResponse) SetResultCode(v string) *DeleteDbflowObtenantResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDbflowObtenantResponse) SetResultMsg(v string) *DeleteDbflowObtenantResponse {
	s.ResultMsg = &v
	return s
}

type UpdateBuildpackNativetechstackversionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 技术栈类别
	TechStack *string `json:"tech_stack,omitempty" xml:"tech_stack,omitempty" require:"true"`
	// 云原生技术栈版本名称
	TechStackVersion *string `json:"tech_stack_version,omitempty" xml:"tech_stack_version,omitempty" require:"true"`
	// 基础镜像名称
	FromImage *string `json:"from_image,omitempty" xml:"from_image,omitempty" require:"true"`
	// 版本描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 扩展指令列表
	ExtCommands []*string `json:"ext_commands,omitempty" xml:"ext_commands,omitempty" type:"Repeated"`
	// 扩展属性 - 表现为Map<String,String>序列化后的字符串
	ExtendProperties *string `json:"extend_properties,omitempty" xml:"extend_properties,omitempty"`
}

func (s UpdateBuildpackNativetechstackversionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuildpackNativetechstackversionRequest) GoString() string {
	return s.String()
}

func (s *UpdateBuildpackNativetechstackversionRequest) SetAuthToken(v string) *UpdateBuildpackNativetechstackversionRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateBuildpackNativetechstackversionRequest) SetTechStack(v string) *UpdateBuildpackNativetechstackversionRequest {
	s.TechStack = &v
	return s
}

func (s *UpdateBuildpackNativetechstackversionRequest) SetTechStackVersion(v string) *UpdateBuildpackNativetechstackversionRequest {
	s.TechStackVersion = &v
	return s
}

func (s *UpdateBuildpackNativetechstackversionRequest) SetFromImage(v string) *UpdateBuildpackNativetechstackversionRequest {
	s.FromImage = &v
	return s
}

func (s *UpdateBuildpackNativetechstackversionRequest) SetDescription(v string) *UpdateBuildpackNativetechstackversionRequest {
	s.Description = &v
	return s
}

func (s *UpdateBuildpackNativetechstackversionRequest) SetExtCommands(v []*string) *UpdateBuildpackNativetechstackversionRequest {
	s.ExtCommands = v
	return s
}

func (s *UpdateBuildpackNativetechstackversionRequest) SetExtendProperties(v string) *UpdateBuildpackNativetechstackversionRequest {
	s.ExtendProperties = &v
	return s
}

type UpdateBuildpackNativetechstackversionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateBuildpackNativetechstackversionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuildpackNativetechstackversionResponse) GoString() string {
	return s.String()
}

func (s *UpdateBuildpackNativetechstackversionResponse) SetReqMsgId(v string) *UpdateBuildpackNativetechstackversionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateBuildpackNativetechstackversionResponse) SetResultCode(v string) *UpdateBuildpackNativetechstackversionResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateBuildpackNativetechstackversionResponse) SetResultMsg(v string) *UpdateBuildpackNativetechstackversionResponse {
	s.ResultMsg = &v
	return s
}

type ListWorkspacegroupRegionsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace group 名称
	//
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty" require:"true"`
}

func (s ListWorkspacegroupRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacegroupRegionsRequest) GoString() string {
	return s.String()
}

func (s *ListWorkspacegroupRegionsRequest) SetAuthToken(v string) *ListWorkspacegroupRegionsRequest {
	s.AuthToken = &v
	return s
}

func (s *ListWorkspacegroupRegionsRequest) SetWorkspaceGroupName(v string) *ListWorkspacegroupRegionsRequest {
	s.WorkspaceGroupName = &v
	return s
}

type ListWorkspacegroupRegionsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// region列表
	Regions []*Region `json:"regions,omitempty" xml:"regions,omitempty" type:"Repeated"`
}

func (s ListWorkspacegroupRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacegroupRegionsResponse) GoString() string {
	return s.String()
}

func (s *ListWorkspacegroupRegionsResponse) SetReqMsgId(v string) *ListWorkspacegroupRegionsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListWorkspacegroupRegionsResponse) SetResultCode(v string) *ListWorkspacegroupRegionsResponse {
	s.ResultCode = &v
	return s
}

func (s *ListWorkspacegroupRegionsResponse) SetResultMsg(v string) *ListWorkspacegroupRegionsResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListWorkspacegroupRegionsResponse) SetRegions(v []*Region) *ListWorkspacegroupRegionsResponse {
	s.Regions = v
	return s
}

type ListClusterInfoRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace group name
	//
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s ListClusterInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInfoRequest) GoString() string {
	return s.String()
}

func (s *ListClusterInfoRequest) SetAuthToken(v string) *ListClusterInfoRequest {
	s.AuthToken = &v
	return s
}

func (s *ListClusterInfoRequest) SetWorkspaceGroup(v string) *ListClusterInfoRequest {
	s.WorkspaceGroup = &v
	return s
}

type ListClusterInfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 集群列表
	Data []*Cluster `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListClusterInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInfoResponse) GoString() string {
	return s.String()
}

func (s *ListClusterInfoResponse) SetReqMsgId(v string) *ListClusterInfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListClusterInfoResponse) SetResultCode(v string) *ListClusterInfoResponse {
	s.ResultCode = &v
	return s
}

func (s *ListClusterInfoResponse) SetResultMsg(v string) *ListClusterInfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListClusterInfoResponse) SetData(v []*Cluster) *ListClusterInfoResponse {
	s.Data = v
	return s
}

type ListClusterOverviewRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace group name
	//
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s ListClusterOverviewRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOverviewRequest) GoString() string {
	return s.String()
}

func (s *ListClusterOverviewRequest) SetAuthToken(v string) *ListClusterOverviewRequest {
	s.AuthToken = &v
	return s
}

func (s *ListClusterOverviewRequest) SetWorkspaceGroup(v string) *ListClusterOverviewRequest {
	s.WorkspaceGroup = &v
	return s
}

type ListClusterOverviewResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 集群资源概览信息
	Data []*ClusterStatus `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListClusterOverviewResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOverviewResponse) GoString() string {
	return s.String()
}

func (s *ListClusterOverviewResponse) SetReqMsgId(v string) *ListClusterOverviewResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListClusterOverviewResponse) SetResultCode(v string) *ListClusterOverviewResponse {
	s.ResultCode = &v
	return s
}

func (s *ListClusterOverviewResponse) SetResultMsg(v string) *ListClusterOverviewResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListClusterOverviewResponse) SetData(v []*ClusterStatus) *ListClusterOverviewResponse {
	s.Data = v
	return s
}

type ListCertificatesRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s ListCertificatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCertificatesRequest) GoString() string {
	return s.String()
}

func (s *ListCertificatesRequest) SetAuthToken(v string) *ListCertificatesRequest {
	s.AuthToken = &v
	return s
}

type ListCertificatesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 证书列表。
	Certificates []*string `json:"certificates,omitempty" xml:"certificates,omitempty" type:"Repeated"`
}

func (s ListCertificatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCertificatesResponse) GoString() string {
	return s.String()
}

func (s *ListCertificatesResponse) SetReqMsgId(v string) *ListCertificatesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListCertificatesResponse) SetResultCode(v string) *ListCertificatesResponse {
	s.ResultCode = &v
	return s
}

func (s *ListCertificatesResponse) SetResultMsg(v string) *ListCertificatesResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListCertificatesResponse) SetCertificates(v []*string) *ListCertificatesResponse {
	s.Certificates = v
	return s
}

type ListLoadbalancerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 命名空间名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
}

func (s ListLoadbalancerRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLoadbalancerRequest) GoString() string {
	return s.String()
}

func (s *ListLoadbalancerRequest) SetAuthToken(v string) *ListLoadbalancerRequest {
	s.AuthToken = &v
	return s
}

func (s *ListLoadbalancerRequest) SetWorkspaceGroup(v string) *ListLoadbalancerRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *ListLoadbalancerRequest) SetNamespace(v string) *ListLoadbalancerRequest {
	s.Namespace = &v
	return s
}

type ListLoadbalancerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 已经被使用的lb iaas ids。
	BoundIaasIds []*string `json:"bound_iaas_ids,omitempty" xml:"bound_iaas_ids,omitempty" type:"Repeated"`
}

func (s ListLoadbalancerResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLoadbalancerResponse) GoString() string {
	return s.String()
}

func (s *ListLoadbalancerResponse) SetReqMsgId(v string) *ListLoadbalancerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListLoadbalancerResponse) SetResultCode(v string) *ListLoadbalancerResponse {
	s.ResultCode = &v
	return s
}

func (s *ListLoadbalancerResponse) SetResultMsg(v string) *ListLoadbalancerResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListLoadbalancerResponse) SetBoundIaasIds(v []*string) *ListLoadbalancerResponse {
	s.BoundIaasIds = v
	return s
}

type GetCloudconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s GetCloudconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCloudconfigRequest) GoString() string {
	return s.String()
}

func (s *GetCloudconfigRequest) SetAuthToken(v string) *GetCloudconfigRequest {
	s.AuthToken = &v
	return s
}

type GetCloudconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cluod_config raw txt
	CloudConfig *string `json:"cloud_config,omitempty" xml:"cloud_config,omitempty"`
}

func (s GetCloudconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCloudconfigResponse) GoString() string {
	return s.String()
}

func (s *GetCloudconfigResponse) SetReqMsgId(v string) *GetCloudconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetCloudconfigResponse) SetResultCode(v string) *GetCloudconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *GetCloudconfigResponse) SetResultMsg(v string) *GetCloudconfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetCloudconfigResponse) SetCloudConfig(v string) *GetCloudconfigResponse {
	s.CloudConfig = &v
	return s
}

type UpdateCloudconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cloud_config json描述
	CloudConfig *string `json:"cloud_config,omitempty" xml:"cloud_config,omitempty" require:"true"`
	// UPDATE或ROLLBACK
	Option *string `json:"option,omitempty" xml:"option,omitempty" require:"true"`
}

func (s UpdateCloudconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCloudconfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateCloudconfigRequest) SetAuthToken(v string) *UpdateCloudconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateCloudconfigRequest) SetCloudConfig(v string) *UpdateCloudconfigRequest {
	s.CloudConfig = &v
	return s
}

func (s *UpdateCloudconfigRequest) SetOption(v string) *UpdateCloudconfigRequest {
	s.Option = &v
	return s
}

type UpdateCloudconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateCloudconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCloudconfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateCloudconfigResponse) SetReqMsgId(v string) *UpdateCloudconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateCloudconfigResponse) SetResultCode(v string) *UpdateCloudconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateCloudconfigResponse) SetResultMsg(v string) *UpdateCloudconfigResponse {
	s.ResultMsg = &v
	return s
}

type ListCloudconfigHistoryRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s ListCloudconfigHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCloudconfigHistoryRequest) GoString() string {
	return s.String()
}

func (s *ListCloudconfigHistoryRequest) SetAuthToken(v string) *ListCloudconfigHistoryRequest {
	s.AuthToken = &v
	return s
}

type ListCloudconfigHistoryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 配置历史列表
	ConfigLists []*CloudConfigEntity `json:"config_lists,omitempty" xml:"config_lists,omitempty" type:"Repeated"`
}

func (s ListCloudconfigHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCloudconfigHistoryResponse) GoString() string {
	return s.String()
}

func (s *ListCloudconfigHistoryResponse) SetReqMsgId(v string) *ListCloudconfigHistoryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListCloudconfigHistoryResponse) SetResultCode(v string) *ListCloudconfigHistoryResponse {
	s.ResultCode = &v
	return s
}

func (s *ListCloudconfigHistoryResponse) SetResultMsg(v string) *ListCloudconfigHistoryResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListCloudconfigHistoryResponse) SetConfigLists(v []*CloudConfigEntity) *ListCloudconfigHistoryResponse {
	s.ConfigLists = v
	return s
}

type CreateSidecarOperationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 环境信息，对应workspace_group名称
	Env *string `json:"env,omitempty" xml:"env,omitempty" require:"true"`
	// sidecar运维动作：
	// 接入 open
	// 升级 upgrade
	ServiceKey *string `json:"service_key,omitempty" xml:"service_key,omitempty" require:"true"`
	// sidecar运维请求体
	ExecuteTaskRequest *SidecarOperationTask `json:"execute_task_request,omitempty" xml:"execute_task_request,omitempty" require:"true"`
}

func (s CreateSidecarOperationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSidecarOperationRequest) GoString() string {
	return s.String()
}

func (s *CreateSidecarOperationRequest) SetAuthToken(v string) *CreateSidecarOperationRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSidecarOperationRequest) SetEnv(v string) *CreateSidecarOperationRequest {
	s.Env = &v
	return s
}

func (s *CreateSidecarOperationRequest) SetServiceKey(v string) *CreateSidecarOperationRequest {
	s.ServiceKey = &v
	return s
}

func (s *CreateSidecarOperationRequest) SetExecuteTaskRequest(v *SidecarOperationTask) *CreateSidecarOperationRequest {
	s.ExecuteTaskRequest = v
	return s
}

type CreateSidecarOperationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// sidecar运维ID
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
	// 跳转链接
	ChangeUrl *string `json:"change_url,omitempty" xml:"change_url,omitempty"`
	// 是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateSidecarOperationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSidecarOperationResponse) GoString() string {
	return s.String()
}

func (s *CreateSidecarOperationResponse) SetReqMsgId(v string) *CreateSidecarOperationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSidecarOperationResponse) SetResultCode(v string) *CreateSidecarOperationResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSidecarOperationResponse) SetResultMsg(v string) *CreateSidecarOperationResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateSidecarOperationResponse) SetOperationId(v string) *CreateSidecarOperationResponse {
	s.OperationId = &v
	return s
}

func (s *CreateSidecarOperationResponse) SetChangeUrl(v string) *CreateSidecarOperationResponse {
	s.ChangeUrl = &v
	return s
}

func (s *CreateSidecarOperationResponse) SetSuccess(v bool) *CreateSidecarOperationResponse {
	s.Success = &v
	return s
}

type RetrySidecarOperationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// operation ID
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
}

func (s RetrySidecarOperationRequest) String() string {
	return tea.Prettify(s)
}

func (s RetrySidecarOperationRequest) GoString() string {
	return s.String()
}

func (s *RetrySidecarOperationRequest) SetAuthToken(v string) *RetrySidecarOperationRequest {
	s.AuthToken = &v
	return s
}

func (s *RetrySidecarOperationRequest) SetOperationId(v string) *RetrySidecarOperationRequest {
	s.OperationId = &v
	return s
}

type RetrySidecarOperationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 跳转链接
	ChangeUrl *string `json:"change_url,omitempty" xml:"change_url,omitempty"`
	// sidecar运维请求ID
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
	// 是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s RetrySidecarOperationResponse) String() string {
	return tea.Prettify(s)
}

func (s RetrySidecarOperationResponse) GoString() string {
	return s.String()
}

func (s *RetrySidecarOperationResponse) SetReqMsgId(v string) *RetrySidecarOperationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetrySidecarOperationResponse) SetResultCode(v string) *RetrySidecarOperationResponse {
	s.ResultCode = &v
	return s
}

func (s *RetrySidecarOperationResponse) SetResultMsg(v string) *RetrySidecarOperationResponse {
	s.ResultMsg = &v
	return s
}

func (s *RetrySidecarOperationResponse) SetChangeUrl(v string) *RetrySidecarOperationResponse {
	s.ChangeUrl = &v
	return s
}

func (s *RetrySidecarOperationResponse) SetOperationId(v string) *RetrySidecarOperationResponse {
	s.OperationId = &v
	return s
}

func (s *RetrySidecarOperationResponse) SetSuccess(v bool) *RetrySidecarOperationResponse {
	s.Success = &v
	return s
}

type CancelSidecarOperationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// Opeartion ID
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
}

func (s CancelSidecarOperationRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelSidecarOperationRequest) GoString() string {
	return s.String()
}

func (s *CancelSidecarOperationRequest) SetAuthToken(v string) *CancelSidecarOperationRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelSidecarOperationRequest) SetOperationId(v string) *CancelSidecarOperationRequest {
	s.OperationId = &v
	return s
}

type CancelSidecarOperationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 跳转链接
	ChangeUrl *string `json:"change_url,omitempty" xml:"change_url,omitempty"`
	// sidecar运维请求
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
	// 是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CancelSidecarOperationResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelSidecarOperationResponse) GoString() string {
	return s.String()
}

func (s *CancelSidecarOperationResponse) SetReqMsgId(v string) *CancelSidecarOperationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelSidecarOperationResponse) SetResultCode(v string) *CancelSidecarOperationResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelSidecarOperationResponse) SetResultMsg(v string) *CancelSidecarOperationResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelSidecarOperationResponse) SetChangeUrl(v string) *CancelSidecarOperationResponse {
	s.ChangeUrl = &v
	return s
}

func (s *CancelSidecarOperationResponse) SetOperationId(v string) *CancelSidecarOperationResponse {
	s.OperationId = &v
	return s
}

func (s *CancelSidecarOperationResponse) SetSuccess(v bool) *CancelSidecarOperationResponse {
	s.Success = &v
	return s
}

type UpdateServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cluster name to apply a service
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
	// a string service yaml
	RawTemplate *string `json:"raw_template,omitempty" xml:"raw_template,omitempty" require:"true"`
	// xxx
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
}

func (s UpdateServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateServiceRequest) GoString() string {
	return s.String()
}

func (s *UpdateServiceRequest) SetAuthToken(v string) *UpdateServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateServiceRequest) SetClusterName(v string) *UpdateServiceRequest {
	s.ClusterName = &v
	return s
}

func (s *UpdateServiceRequest) SetRawTemplate(v string) *UpdateServiceRequest {
	s.RawTemplate = &v
	return s
}

func (s *UpdateServiceRequest) SetOperator(v string) *UpdateServiceRequest {
	s.Operator = &v
	return s
}

type UpdateServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateServiceResponse) GoString() string {
	return s.String()
}

func (s *UpdateServiceResponse) SetReqMsgId(v string) *UpdateServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateServiceResponse) SetResultCode(v string) *UpdateServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateServiceResponse) SetResultMsg(v string) *UpdateServiceResponse {
	s.ResultMsg = &v
	return s
}

type CreateGpaasReleaseRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// aig
	AppInstanceGroup *string `json:"app_instance_group,omitempty" xml:"app_instance_group,omitempty" require:"true"`
	// 应用名字
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 发布批次分组
	Batches []*ReleaseBatchObj `json:"batches,omitempty" xml:"batches,omitempty" require:"true" type:"Repeated"`
	// 是否是第一次发布
	IsFirstRelease *bool `json:"is_first_release,omitempty" xml:"is_first_release,omitempty" require:"true"`
	// operator
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 发布单名字，或者说标题
	ReleaseName *string `json:"release_name,omitempty" xml:"release_name,omitempty" require:"true"`
	// 发布版本信息，包括镜像等
	ReleaseVersion *ReleaseVersion `json:"release_version,omitempty" xml:"release_version,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s CreateGpaasReleaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateGpaasReleaseRequest) GoString() string {
	return s.String()
}

func (s *CreateGpaasReleaseRequest) SetAuthToken(v string) *CreateGpaasReleaseRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateGpaasReleaseRequest) SetAppInstanceGroup(v string) *CreateGpaasReleaseRequest {
	s.AppInstanceGroup = &v
	return s
}

func (s *CreateGpaasReleaseRequest) SetAppName(v string) *CreateGpaasReleaseRequest {
	s.AppName = &v
	return s
}

func (s *CreateGpaasReleaseRequest) SetBatches(v []*ReleaseBatchObj) *CreateGpaasReleaseRequest {
	s.Batches = v
	return s
}

func (s *CreateGpaasReleaseRequest) SetIsFirstRelease(v bool) *CreateGpaasReleaseRequest {
	s.IsFirstRelease = &v
	return s
}

func (s *CreateGpaasReleaseRequest) SetOperator(v string) *CreateGpaasReleaseRequest {
	s.Operator = &v
	return s
}

func (s *CreateGpaasReleaseRequest) SetReleaseName(v string) *CreateGpaasReleaseRequest {
	s.ReleaseName = &v
	return s
}

func (s *CreateGpaasReleaseRequest) SetReleaseVersion(v *ReleaseVersion) *CreateGpaasReleaseRequest {
	s.ReleaseVersion = v
	return s
}

func (s *CreateGpaasReleaseRequest) SetWorkspaceGroup(v string) *CreateGpaasReleaseRequest {
	s.WorkspaceGroup = &v
	return s
}

type CreateGpaasReleaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发布单id
	ReleaseId *string `json:"release_id,omitempty" xml:"release_id,omitempty"`
}

func (s CreateGpaasReleaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateGpaasReleaseResponse) GoString() string {
	return s.String()
}

func (s *CreateGpaasReleaseResponse) SetReqMsgId(v string) *CreateGpaasReleaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateGpaasReleaseResponse) SetResultCode(v string) *CreateGpaasReleaseResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateGpaasReleaseResponse) SetResultMsg(v string) *CreateGpaasReleaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateGpaasReleaseResponse) SetReleaseId(v string) *CreateGpaasReleaseResponse {
	s.ReleaseId = &v
	return s
}

type QuerySidecarOperationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 运维单号
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty" require:"true"`
	// 是否带运维单执行详情
	WithDetail *bool `json:"with_detail,omitempty" xml:"with_detail,omitempty"`
}

func (s QuerySidecarOperationRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySidecarOperationRequest) GoString() string {
	return s.String()
}

func (s *QuerySidecarOperationRequest) SetAuthToken(v string) *QuerySidecarOperationRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySidecarOperationRequest) SetOperationId(v string) *QuerySidecarOperationRequest {
	s.OperationId = &v
	return s
}

func (s *QuerySidecarOperationRequest) SetWithDetail(v bool) *QuerySidecarOperationRequest {
	s.WithDetail = &v
	return s
}

type QuerySidecarOperationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// 是否结束
	Finished *bool `json:"finished,omitempty" xml:"finished,omitempty"`
	// 执行状态
	OperationStatus *string `json:"operation_status,omitempty" xml:"operation_status,omitempty"`
	// 执行详情
	TargetProcesses []*string `json:"target_processes,omitempty" xml:"target_processes,omitempty" type:"Repeated"`
	// 发布分组执行详情
	ProcessDetailList []*SidecarOpsMachineGroup `json:"process_detail_list,omitempty" xml:"process_detail_list,omitempty" type:"Repeated"`
	// 扩展信息
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
}

func (s QuerySidecarOperationResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySidecarOperationResponse) GoString() string {
	return s.String()
}

func (s *QuerySidecarOperationResponse) SetReqMsgId(v string) *QuerySidecarOperationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySidecarOperationResponse) SetResultCode(v string) *QuerySidecarOperationResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySidecarOperationResponse) SetResultMsg(v string) *QuerySidecarOperationResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySidecarOperationResponse) SetSuccess(v bool) *QuerySidecarOperationResponse {
	s.Success = &v
	return s
}

func (s *QuerySidecarOperationResponse) SetFinished(v bool) *QuerySidecarOperationResponse {
	s.Finished = &v
	return s
}

func (s *QuerySidecarOperationResponse) SetOperationStatus(v string) *QuerySidecarOperationResponse {
	s.OperationStatus = &v
	return s
}

func (s *QuerySidecarOperationResponse) SetTargetProcesses(v []*string) *QuerySidecarOperationResponse {
	s.TargetProcesses = v
	return s
}

func (s *QuerySidecarOperationResponse) SetProcessDetailList(v []*SidecarOpsMachineGroup) *QuerySidecarOperationResponse {
	s.ProcessDetailList = v
	return s
}

func (s *QuerySidecarOperationResponse) SetProperties(v string) *QuerySidecarOperationResponse {
	s.Properties = &v
	return s
}

type ListKubernetesResourcesRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属工作空间组名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 标签选择器。
	LabelSelector *string `json:"label_selector,omitempty" xml:"label_selector,omitempty"`
	// kubernetes资源路径。
	Path *string `json:"path,omitempty" xml:"path,omitempty" require:"true"`
	// 命名空间名称。
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
}

func (s ListKubernetesResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListKubernetesResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListKubernetesResourcesRequest) SetAuthToken(v string) *ListKubernetesResourcesRequest {
	s.AuthToken = &v
	return s
}

func (s *ListKubernetesResourcesRequest) SetWorkspaceGroup(v string) *ListKubernetesResourcesRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *ListKubernetesResourcesRequest) SetLabelSelector(v string) *ListKubernetesResourcesRequest {
	s.LabelSelector = &v
	return s
}

func (s *ListKubernetesResourcesRequest) SetPath(v string) *ListKubernetesResourcesRequest {
	s.Path = &v
	return s
}

func (s *ListKubernetesResourcesRequest) SetNamespace(v string) *ListKubernetesResourcesRequest {
	s.Namespace = &v
	return s
}

type ListKubernetesResourcesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// "item1","item2"
	Items []*string `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
	// 资源总数。
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ListKubernetesResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListKubernetesResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListKubernetesResourcesResponse) SetReqMsgId(v string) *ListKubernetesResourcesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListKubernetesResourcesResponse) SetResultCode(v string) *ListKubernetesResourcesResponse {
	s.ResultCode = &v
	return s
}

func (s *ListKubernetesResourcesResponse) SetResultMsg(v string) *ListKubernetesResourcesResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListKubernetesResourcesResponse) SetItems(v []*string) *ListKubernetesResourcesResponse {
	s.Items = v
	return s
}

func (s *ListKubernetesResourcesResponse) SetTotalCount(v int64) *ListKubernetesResourcesResponse {
	s.TotalCount = &v
	return s
}

type QueryReleasepipelinestageEventRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布单发布分组的id，对应ReleasePipeline中的stage
	StageId *string `json:"stage_id,omitempty" xml:"stage_id,omitempty" require:"true"`
}

func (s QueryReleasepipelinestageEventRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryReleasepipelinestageEventRequest) GoString() string {
	return s.String()
}

func (s *QueryReleasepipelinestageEventRequest) SetAuthToken(v string) *QueryReleasepipelinestageEventRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryReleasepipelinestageEventRequest) SetStageId(v string) *QueryReleasepipelinestageEventRequest {
	s.StageId = &v
	return s
}

type QueryReleasepipelinestageEventResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 事件列表
	EventList []*RpReleaseEvent `json:"event_list,omitempty" xml:"event_list,omitempty" type:"Repeated"`
	// ReleasePipelineStage id
	StageId *string `json:"stage_id,omitempty" xml:"stage_id,omitempty"`
	// 返回列表中类型和对象摘要
	TypeInsSummary *string `json:"type_ins_summary,omitempty" xml:"type_ins_summary,omitempty"`
}

func (s QueryReleasepipelinestageEventResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryReleasepipelinestageEventResponse) GoString() string {
	return s.String()
}

func (s *QueryReleasepipelinestageEventResponse) SetReqMsgId(v string) *QueryReleasepipelinestageEventResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryReleasepipelinestageEventResponse) SetResultCode(v string) *QueryReleasepipelinestageEventResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryReleasepipelinestageEventResponse) SetResultMsg(v string) *QueryReleasepipelinestageEventResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryReleasepipelinestageEventResponse) SetEventList(v []*RpReleaseEvent) *QueryReleasepipelinestageEventResponse {
	s.EventList = v
	return s
}

func (s *QueryReleasepipelinestageEventResponse) SetStageId(v string) *QueryReleasepipelinestageEventResponse {
	s.StageId = &v
	return s
}

func (s *QueryReleasepipelinestageEventResponse) SetTypeInsSummary(v string) *QueryReleasepipelinestageEventResponse {
	s.TypeInsSummary = &v
	return s
}

type GetSlsProjectnameRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_group
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s GetSlsProjectnameRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSlsProjectnameRequest) GoString() string {
	return s.String()
}

func (s *GetSlsProjectnameRequest) SetAuthToken(v string) *GetSlsProjectnameRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSlsProjectnameRequest) SetWorkspaceGroup(v string) *GetSlsProjectnameRequest {
	s.WorkspaceGroup = &v
	return s
}

type GetSlsProjectnameResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// sls projectName
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty"`
}

func (s GetSlsProjectnameResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSlsProjectnameResponse) GoString() string {
	return s.String()
}

func (s *GetSlsProjectnameResponse) SetReqMsgId(v string) *GetSlsProjectnameResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSlsProjectnameResponse) SetResultCode(v string) *GetSlsProjectnameResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSlsProjectnameResponse) SetResultMsg(v string) *GetSlsProjectnameResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSlsProjectnameResponse) SetProjectName(v string) *GetSlsProjectnameResponse {
	s.ProjectName = &v
	return s
}

type QueryReleasepipelineEventRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布单对应的service id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
}

func (s QueryReleasepipelineEventRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryReleasepipelineEventRequest) GoString() string {
	return s.String()
}

func (s *QueryReleasepipelineEventRequest) SetAuthToken(v string) *QueryReleasepipelineEventRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryReleasepipelineEventRequest) SetServiceId(v string) *QueryReleasepipelineEventRequest {
	s.ServiceId = &v
	return s
}

type QueryReleasepipelineEventResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 事件列表
	EventList []*RpReleaseEvent `json:"event_list,omitempty" xml:"event_list,omitempty" type:"Repeated"`
	// ReleasePipeline service_id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// 返回列表中类型和对象摘要
	TypeInsSummary *string `json:"type_ins_summary,omitempty" xml:"type_ins_summary,omitempty"`
}

func (s QueryReleasepipelineEventResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryReleasepipelineEventResponse) GoString() string {
	return s.String()
}

func (s *QueryReleasepipelineEventResponse) SetReqMsgId(v string) *QueryReleasepipelineEventResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryReleasepipelineEventResponse) SetResultCode(v string) *QueryReleasepipelineEventResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryReleasepipelineEventResponse) SetResultMsg(v string) *QueryReleasepipelineEventResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryReleasepipelineEventResponse) SetEventList(v []*RpReleaseEvent) *QueryReleasepipelineEventResponse {
	s.EventList = v
	return s
}

func (s *QueryReleasepipelineEventResponse) SetServiceId(v string) *QueryReleasepipelineEventResponse {
	s.ServiceId = &v
	return s
}

func (s *QueryReleasepipelineEventResponse) SetTypeInsSummary(v string) *QueryReleasepipelineEventResponse {
	s.TypeInsSummary = &v
	return s
}

type QueryPodEventRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布单对应的service_id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
	// POD对应的u_id
	UId *string `json:"u_id,omitempty" xml:"u_id,omitempty" require:"true"`
}

func (s QueryPodEventRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPodEventRequest) GoString() string {
	return s.String()
}

func (s *QueryPodEventRequest) SetAuthToken(v string) *QueryPodEventRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryPodEventRequest) SetServiceId(v string) *QueryPodEventRequest {
	s.ServiceId = &v
	return s
}

func (s *QueryPodEventRequest) SetUId(v string) *QueryPodEventRequest {
	s.UId = &v
	return s
}

type QueryPodEventResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 事件列表
	EventList []*RpReleaseEvent `json:"event_list,omitempty" xml:"event_list,omitempty" type:"Repeated"`
	// 发布单对应的service_id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// POD对应的uid
	UId *string `json:"u_id,omitempty" xml:"u_id,omitempty"`
}

func (s QueryPodEventResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPodEventResponse) GoString() string {
	return s.String()
}

func (s *QueryPodEventResponse) SetReqMsgId(v string) *QueryPodEventResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryPodEventResponse) SetResultCode(v string) *QueryPodEventResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryPodEventResponse) SetResultMsg(v string) *QueryPodEventResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryPodEventResponse) SetEventList(v []*RpReleaseEvent) *QueryPodEventResponse {
	s.EventList = v
	return s
}

func (s *QueryPodEventResponse) SetServiceId(v string) *QueryPodEventResponse {
	s.ServiceId = &v
	return s
}

func (s *QueryPodEventResponse) SetUId(v string) *QueryPodEventResponse {
	s.UId = &v
	return s
}

type QueryServiceProcesslogRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 观测对象类型，RPV2，RP_STAGE，POD
	ObjectKind *string `json:"object_kind,omitempty" xml:"object_kind,omitempty" require:"true"`
	// 观测对象名称
	ObjectName *string `json:"object_name,omitempty" xml:"object_name,omitempty" require:"true"`
	// 发布单对应的service_id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
	// 发布单id
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty" require:"true"`
}

func (s QueryServiceProcesslogRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceProcesslogRequest) GoString() string {
	return s.String()
}

func (s *QueryServiceProcesslogRequest) SetAuthToken(v string) *QueryServiceProcesslogRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryServiceProcesslogRequest) SetObjectKind(v string) *QueryServiceProcesslogRequest {
	s.ObjectKind = &v
	return s
}

func (s *QueryServiceProcesslogRequest) SetObjectName(v string) *QueryServiceProcesslogRequest {
	s.ObjectName = &v
	return s
}

func (s *QueryServiceProcesslogRequest) SetServiceId(v string) *QueryServiceProcesslogRequest {
	s.ServiceId = &v
	return s
}

func (s *QueryServiceProcesslogRequest) SetPlanId(v string) *QueryServiceProcesslogRequest {
	s.PlanId = &v
	return s
}

type QueryServiceProcesslogResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Log列表
	LogList []*ServiceProcessLog `json:"log_list,omitempty" xml:"log_list,omitempty" type:"Repeated"`
}

func (s QueryServiceProcesslogResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceProcesslogResponse) GoString() string {
	return s.String()
}

func (s *QueryServiceProcesslogResponse) SetReqMsgId(v string) *QueryServiceProcesslogResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryServiceProcesslogResponse) SetResultCode(v string) *QueryServiceProcesslogResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryServiceProcesslogResponse) SetResultMsg(v string) *QueryServiceProcesslogResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryServiceProcesslogResponse) SetLogList(v []*ServiceProcessLog) *QueryServiceProcesslogResponse {
	s.LogList = v
	return s
}

type QueryAppServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 根据应用名称查询，不能为空，不支持一次性查询所有应用，是精准查询，不支持模糊匹配
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 容器服务名
	ContainerServiceName *string `json:"container_service_name,omitempty" xml:"container_service_name,omitempty"`
	// 当前页码，从1开始，默认为1
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 部署状态
	DeploymentStates []*string `json:"deployment_states,omitempty" xml:"deployment_states,omitempty" type:"Repeated"`
	// 所属命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	// 排序规则数组，默认为 UTC_CREATED_DESC，即 根据创建时间降序排序
	Order *string `json:"order,omitempty" xml:"order,omitempty"`
	// 分页大小，默认为10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询类型，支持精准查询、模糊查询、前缀模糊查询，这里默认为模糊查询；查询类型针对字段 container_service_name
	QueryType *string `json:"query_type,omitempty" xml:"query_type,omitempty"`
	// 工作空间组id列表
	WorkspaceGroupNames []*string `json:"workspace_group_names,omitempty" xml:"workspace_group_names,omitempty" type:"Repeated"`
}

func (s QueryAppServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppServiceRequest) GoString() string {
	return s.String()
}

func (s *QueryAppServiceRequest) SetAuthToken(v string) *QueryAppServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppServiceRequest) SetAppName(v string) *QueryAppServiceRequest {
	s.AppName = &v
	return s
}

func (s *QueryAppServiceRequest) SetContainerServiceName(v string) *QueryAppServiceRequest {
	s.ContainerServiceName = &v
	return s
}

func (s *QueryAppServiceRequest) SetCurrentPage(v int64) *QueryAppServiceRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryAppServiceRequest) SetDeploymentStates(v []*string) *QueryAppServiceRequest {
	s.DeploymentStates = v
	return s
}

func (s *QueryAppServiceRequest) SetNamespace(v string) *QueryAppServiceRequest {
	s.Namespace = &v
	return s
}

func (s *QueryAppServiceRequest) SetOrder(v string) *QueryAppServiceRequest {
	s.Order = &v
	return s
}

func (s *QueryAppServiceRequest) SetPageSize(v int64) *QueryAppServiceRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAppServiceRequest) SetQueryType(v string) *QueryAppServiceRequest {
	s.QueryType = &v
	return s
}

func (s *QueryAppServiceRequest) SetWorkspaceGroupNames(v []*string) *QueryAppServiceRequest {
	s.WorkspaceGroupNames = v
	return s
}

type QueryAppServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前应用关联的容器服务列表
	ContainerServiceList []*ContainerServiceBasicInfo `json:"container_service_list,omitempty" xml:"container_service_list,omitempty" type:"Repeated"`
	// 当前页码，从1开始，默认为1
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 分页大小，默认为10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
}

func (s QueryAppServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppServiceResponse) GoString() string {
	return s.String()
}

func (s *QueryAppServiceResponse) SetReqMsgId(v string) *QueryAppServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppServiceResponse) SetResultCode(v string) *QueryAppServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppServiceResponse) SetResultMsg(v string) *QueryAppServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppServiceResponse) SetContainerServiceList(v []*ContainerServiceBasicInfo) *QueryAppServiceResponse {
	s.ContainerServiceList = v
	return s
}

func (s *QueryAppServiceResponse) SetCurrentPage(v int64) *QueryAppServiceResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryAppServiceResponse) SetPageSize(v int64) *QueryAppServiceResponse {
	s.PageSize = &v
	return s
}

func (s *QueryAppServiceResponse) SetTotalSize(v int64) *QueryAppServiceResponse {
	s.TotalSize = &v
	return s
}

type QueryAppPlanRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称，精准查询
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 当前页码，从1开始，默认为1
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 排序规则，默认为 UTC_CREATED_DESC，即 根据创建时间降序排序
	Order *string `json:"order,omitempty" xml:"order,omitempty"`
	// 分页大小，默认为10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 状态筛选列表
	States []*string `json:"states,omitempty" xml:"states,omitempty" type:"Repeated"`
	// 查询指定发布单 timeseries_id 列表
	TimeseriesIds []*string `json:"timeseries_ids,omitempty" xml:"timeseries_ids,omitempty" type:"Repeated"`
	// 工作空间组id列表
	WorkspaceGroupNames []*string `json:"workspace_group_names,omitempty" xml:"workspace_group_names,omitempty" type:"Repeated"`
}

func (s QueryAppPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppPlanRequest) GoString() string {
	return s.String()
}

func (s *QueryAppPlanRequest) SetAuthToken(v string) *QueryAppPlanRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppPlanRequest) SetAppName(v string) *QueryAppPlanRequest {
	s.AppName = &v
	return s
}

func (s *QueryAppPlanRequest) SetCurrentPage(v int64) *QueryAppPlanRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryAppPlanRequest) SetOrder(v string) *QueryAppPlanRequest {
	s.Order = &v
	return s
}

func (s *QueryAppPlanRequest) SetPageSize(v int64) *QueryAppPlanRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAppPlanRequest) SetStates(v []*string) *QueryAppPlanRequest {
	s.States = v
	return s
}

func (s *QueryAppPlanRequest) SetTimeseriesIds(v []*string) *QueryAppPlanRequest {
	s.TimeseriesIds = v
	return s
}

func (s *QueryAppPlanRequest) SetWorkspaceGroupNames(v []*string) *QueryAppPlanRequest {
	s.WorkspaceGroupNames = v
	return s
}

type QueryAppPlanResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前页码，从1开始，默认为1
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 分页大小，默认为10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 发布单列表
	PlanList []*PlanSimpleView `json:"plan_list,omitempty" xml:"plan_list,omitempty" type:"Repeated"`
	// 发布单数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
}

func (s QueryAppPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppPlanResponse) GoString() string {
	return s.String()
}

func (s *QueryAppPlanResponse) SetReqMsgId(v string) *QueryAppPlanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppPlanResponse) SetResultCode(v string) *QueryAppPlanResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppPlanResponse) SetResultMsg(v string) *QueryAppPlanResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppPlanResponse) SetCurrentPage(v int64) *QueryAppPlanResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryAppPlanResponse) SetPageSize(v int64) *QueryAppPlanResponse {
	s.PageSize = &v
	return s
}

func (s *QueryAppPlanResponse) SetPlanList(v []*PlanSimpleView) *QueryAppPlanResponse {
	s.PlanList = v
	return s
}

func (s *QueryAppPlanResponse) SetTotalSize(v int64) *QueryAppPlanResponse {
	s.TotalSize = &v
	return s
}

type CreateUnifiedaccessinstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 关联的Spanner逻辑集群名称，一个逻辑集群由很多个local集群组成
	SpannerCluster *string `json:"spanner_cluster,omitempty" xml:"spanner_cluster,omitempty" require:"true"`
	// https协议配置
	UnifiedAccessInstanceHttpsEntry *HttpsEntry `json:"unified_access_instance_https_entry,omitempty" xml:"unified_access_instance_https_entry,omitempty"`
	// http协议配置
	UnifiedAccessInstanceHttpEntry *HttpEntry `json:"unified_access_instance_http_entry,omitempty" xml:"unified_access_instance_http_entry,omitempty" require:"true"`
	// 统一接入实例名称
	UnifiedAccessInstanceName *string `json:"unified_access_instance_name,omitempty" xml:"unified_access_instance_name,omitempty" require:"true"`
	// 统一接入网络类型，内网（intranet），公网（internet）
	UnifiedAccessInstanceType *string `json:"unified_access_instance_type,omitempty" xml:"unified_access_instance_type,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 用户自定义实例entry相关信息（vip/id），datacenter粒度
	EntrySettings *EntrySettings `json:"entry_settings,omitempty" xml:"entry_settings,omitempty"`
}

func (s CreateUnifiedaccessinstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUnifiedaccessinstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateUnifiedaccessinstanceRequest) SetAuthToken(v string) *CreateUnifiedaccessinstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateUnifiedaccessinstanceRequest) SetSpannerCluster(v string) *CreateUnifiedaccessinstanceRequest {
	s.SpannerCluster = &v
	return s
}

func (s *CreateUnifiedaccessinstanceRequest) SetUnifiedAccessInstanceHttpsEntry(v *HttpsEntry) *CreateUnifiedaccessinstanceRequest {
	s.UnifiedAccessInstanceHttpsEntry = v
	return s
}

func (s *CreateUnifiedaccessinstanceRequest) SetUnifiedAccessInstanceHttpEntry(v *HttpEntry) *CreateUnifiedaccessinstanceRequest {
	s.UnifiedAccessInstanceHttpEntry = v
	return s
}

func (s *CreateUnifiedaccessinstanceRequest) SetUnifiedAccessInstanceName(v string) *CreateUnifiedaccessinstanceRequest {
	s.UnifiedAccessInstanceName = &v
	return s
}

func (s *CreateUnifiedaccessinstanceRequest) SetUnifiedAccessInstanceType(v string) *CreateUnifiedaccessinstanceRequest {
	s.UnifiedAccessInstanceType = &v
	return s
}

func (s *CreateUnifiedaccessinstanceRequest) SetWorkspaceGroup(v string) *CreateUnifiedaccessinstanceRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *CreateUnifiedaccessinstanceRequest) SetEntrySettings(v *EntrySettings) *CreateUnifiedaccessinstanceRequest {
	s.EntrySettings = v
	return s
}

type CreateUnifiedaccessinstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateUnifiedaccessinstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUnifiedaccessinstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateUnifiedaccessinstanceResponse) SetReqMsgId(v string) *CreateUnifiedaccessinstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateUnifiedaccessinstanceResponse) SetResultCode(v string) *CreateUnifiedaccessinstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateUnifiedaccessinstanceResponse) SetResultMsg(v string) *CreateUnifiedaccessinstanceResponse {
	s.ResultMsg = &v
	return s
}

type QueryUnifiedaccessinstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 可以用来过滤实例
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty"`
}

func (s QueryUnifiedaccessinstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedaccessinstanceRequest) GoString() string {
	return s.String()
}

func (s *QueryUnifiedaccessinstanceRequest) SetAuthToken(v string) *QueryUnifiedaccessinstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnifiedaccessinstanceRequest) SetWorkspaceGroup(v string) *QueryUnifiedaccessinstanceRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *QueryUnifiedaccessinstanceRequest) SetInstanceName(v string) *QueryUnifiedaccessinstanceRequest {
	s.InstanceName = &v
	return s
}

type QueryUnifiedaccessinstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 统一接入实例列表信息
	List []*UnifiedAccessInstanceInfo `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
}

func (s QueryUnifiedaccessinstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnifiedaccessinstanceResponse) GoString() string {
	return s.String()
}

func (s *QueryUnifiedaccessinstanceResponse) SetReqMsgId(v string) *QueryUnifiedaccessinstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnifiedaccessinstanceResponse) SetResultCode(v string) *QueryUnifiedaccessinstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnifiedaccessinstanceResponse) SetResultMsg(v string) *QueryUnifiedaccessinstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnifiedaccessinstanceResponse) SetList(v []*UnifiedAccessInstanceInfo) *QueryUnifiedaccessinstanceResponse {
	s.List = v
	return s
}

type GetUnifiedaccessinstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 统一接入实例名称
	UnifiedAccessInstanceName *string `json:"unified_access_instance_name,omitempty" xml:"unified_access_instance_name,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s GetUnifiedaccessinstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUnifiedaccessinstanceRequest) GoString() string {
	return s.String()
}

func (s *GetUnifiedaccessinstanceRequest) SetAuthToken(v string) *GetUnifiedaccessinstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetUnifiedaccessinstanceRequest) SetUnifiedAccessInstanceName(v string) *GetUnifiedaccessinstanceRequest {
	s.UnifiedAccessInstanceName = &v
	return s
}

func (s *GetUnifiedaccessinstanceRequest) SetWorkspaceGroup(v string) *GetUnifiedaccessinstanceRequest {
	s.WorkspaceGroup = &v
	return s
}

type GetUnifiedaccessinstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 统一接入实例信息
	Data *UnifiedAccessInstanceInfo `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetUnifiedaccessinstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUnifiedaccessinstanceResponse) GoString() string {
	return s.String()
}

func (s *GetUnifiedaccessinstanceResponse) SetReqMsgId(v string) *GetUnifiedaccessinstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetUnifiedaccessinstanceResponse) SetResultCode(v string) *GetUnifiedaccessinstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetUnifiedaccessinstanceResponse) SetResultMsg(v string) *GetUnifiedaccessinstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetUnifiedaccessinstanceResponse) SetData(v *UnifiedAccessInstanceInfo) *GetUnifiedaccessinstanceResponse {
	s.Data = v
	return s
}

type DeleteUnifiedaccessinstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 统一接入实例名称
	UnifiedAccessInstanceName *string `json:"unified_access_instance_name,omitempty" xml:"unified_access_instance_name,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s DeleteUnifiedaccessinstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUnifiedaccessinstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteUnifiedaccessinstanceRequest) SetAuthToken(v string) *DeleteUnifiedaccessinstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteUnifiedaccessinstanceRequest) SetUnifiedAccessInstanceName(v string) *DeleteUnifiedaccessinstanceRequest {
	s.UnifiedAccessInstanceName = &v
	return s
}

func (s *DeleteUnifiedaccessinstanceRequest) SetWorkspaceGroup(v string) *DeleteUnifiedaccessinstanceRequest {
	s.WorkspaceGroup = &v
	return s
}

type DeleteUnifiedaccessinstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteUnifiedaccessinstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUnifiedaccessinstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteUnifiedaccessinstanceResponse) SetReqMsgId(v string) *DeleteUnifiedaccessinstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteUnifiedaccessinstanceResponse) SetResultCode(v string) *DeleteUnifiedaccessinstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteUnifiedaccessinstanceResponse) SetResultMsg(v string) *DeleteUnifiedaccessinstanceResponse {
	s.ResultMsg = &v
	return s
}

type UpdateUnifiedaccessinstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 统一接入实例信息
	Data *UnifiedAccessInstanceInfo `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s UpdateUnifiedaccessinstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateUnifiedaccessinstanceRequest) GoString() string {
	return s.String()
}

func (s *UpdateUnifiedaccessinstanceRequest) SetAuthToken(v string) *UpdateUnifiedaccessinstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateUnifiedaccessinstanceRequest) SetData(v *UnifiedAccessInstanceInfo) *UpdateUnifiedaccessinstanceRequest {
	s.Data = v
	return s
}

func (s *UpdateUnifiedaccessinstanceRequest) SetWorkspaceGroup(v string) *UpdateUnifiedaccessinstanceRequest {
	s.WorkspaceGroup = &v
	return s
}

type UpdateUnifiedaccessinstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateUnifiedaccessinstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateUnifiedaccessinstanceResponse) GoString() string {
	return s.String()
}

func (s *UpdateUnifiedaccessinstanceResponse) SetReqMsgId(v string) *UpdateUnifiedaccessinstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateUnifiedaccessinstanceResponse) SetResultCode(v string) *UpdateUnifiedaccessinstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateUnifiedaccessinstanceResponse) SetResultMsg(v string) *UpdateUnifiedaccessinstanceResponse {
	s.ResultMsg = &v
	return s
}

type ExecUnireleasespiRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 请求方法
	RequestMethod *string `json:"request_method,omitempty" xml:"request_method,omitempty" require:"true"`
	// 请求参数的 JSON 字符串
	RequestParam *string `json:"request_param,omitempty" xml:"request_param,omitempty" require:"true"`
}

func (s ExecUnireleasespiRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecUnireleasespiRequest) GoString() string {
	return s.String()
}

func (s *ExecUnireleasespiRequest) SetAuthToken(v string) *ExecUnireleasespiRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecUnireleasespiRequest) SetRequestMethod(v string) *ExecUnireleasespiRequest {
	s.RequestMethod = &v
	return s
}

func (s *ExecUnireleasespiRequest) SetRequestParam(v string) *ExecUnireleasespiRequest {
	s.RequestParam = &v
	return s
}

type ExecUnireleasespiResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 请求结果的 JSON 字符串
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ExecUnireleasespiResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecUnireleasespiResponse) GoString() string {
	return s.String()
}

func (s *ExecUnireleasespiResponse) SetReqMsgId(v string) *ExecUnireleasespiResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecUnireleasespiResponse) SetResultCode(v string) *ExecUnireleasespiResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecUnireleasespiResponse) SetResultMsg(v string) *ExecUnireleasespiResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecUnireleasespiResponse) SetResult(v string) *ExecUnireleasespiResponse {
	s.Result = &v
	return s
}

type CreateFedspannerclusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 用于描述联邦spanner 集群内容器实例采用内网还是外网
	AddressType *string `json:"address_type,omitempty" xml:"address_type,omitempty" require:"true"`
	// 用于描述联邦spanner 集群内容器实例 cpu大小， 单位core
	Cpu *string `json:"cpu,omitempty" xml:"cpu,omitempty" require:"true"`
	// 用于描述联邦spanner 集群内容器实例disk大小， 单位Gi
	Disk *string `json:"disk,omitempty" xml:"disk,omitempty" require:"true"`
	// 用于描述联邦spanner 集群内容器实例的网络是否采用host网络
	HostNetwork *bool `json:"host_network,omitempty" xml:"host_network,omitempty" require:"true"`
	// 用于描述联邦spanner 集群内容器实例mem 大小， 单位 Gi
	Mem *string `json:"mem,omitempty" xml:"mem,omitempty" require:"true"`
	// 用于描述联邦spanner 集群名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 描述集群初始状态
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// 定义了container的spec信息，包含多版本，镜像，副本数，标签等
	SubClustersConfig *string `json:"sub_clusters_config,omitempty" xml:"sub_clusters_config,omitempty" require:"true"`
	// 工作空间组信息
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s CreateFedspannerclusterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFedspannerclusterRequest) GoString() string {
	return s.String()
}

func (s *CreateFedspannerclusterRequest) SetAuthToken(v string) *CreateFedspannerclusterRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFedspannerclusterRequest) SetAddressType(v string) *CreateFedspannerclusterRequest {
	s.AddressType = &v
	return s
}

func (s *CreateFedspannerclusterRequest) SetCpu(v string) *CreateFedspannerclusterRequest {
	s.Cpu = &v
	return s
}

func (s *CreateFedspannerclusterRequest) SetDisk(v string) *CreateFedspannerclusterRequest {
	s.Disk = &v
	return s
}

func (s *CreateFedspannerclusterRequest) SetHostNetwork(v bool) *CreateFedspannerclusterRequest {
	s.HostNetwork = &v
	return s
}

func (s *CreateFedspannerclusterRequest) SetMem(v string) *CreateFedspannerclusterRequest {
	s.Mem = &v
	return s
}

func (s *CreateFedspannerclusterRequest) SetName(v string) *CreateFedspannerclusterRequest {
	s.Name = &v
	return s
}

func (s *CreateFedspannerclusterRequest) SetState(v string) *CreateFedspannerclusterRequest {
	s.State = &v
	return s
}

func (s *CreateFedspannerclusterRequest) SetSubClustersConfig(v string) *CreateFedspannerclusterRequest {
	s.SubClustersConfig = &v
	return s
}

func (s *CreateFedspannerclusterRequest) SetWorkspaceGroup(v string) *CreateFedspannerclusterRequest {
	s.WorkspaceGroup = &v
	return s
}

type CreateFedspannerclusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// fed集群名称
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty"`
}

func (s CreateFedspannerclusterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFedspannerclusterResponse) GoString() string {
	return s.String()
}

func (s *CreateFedspannerclusterResponse) SetReqMsgId(v string) *CreateFedspannerclusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFedspannerclusterResponse) SetResultCode(v string) *CreateFedspannerclusterResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFedspannerclusterResponse) SetResultMsg(v string) *CreateFedspannerclusterResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateFedspannerclusterResponse) SetClusterName(v string) *CreateFedspannerclusterResponse {
	s.ClusterName = &v
	return s
}

type QueryFedspannerclusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 集群名称，模糊匹配
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s QueryFedspannerclusterRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFedspannerclusterRequest) GoString() string {
	return s.String()
}

func (s *QueryFedspannerclusterRequest) SetAuthToken(v string) *QueryFedspannerclusterRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFedspannerclusterRequest) SetClusterName(v string) *QueryFedspannerclusterRequest {
	s.ClusterName = &v
	return s
}

func (s *QueryFedspannerclusterRequest) SetWorkspaceGroup(v string) *QueryFedspannerclusterRequest {
	s.WorkspaceGroup = &v
	return s
}

type QueryFedspannerclusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询集群列表时的简略信息
	Data []*QuerySpannerClusterDetail `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryFedspannerclusterResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFedspannerclusterResponse) GoString() string {
	return s.String()
}

func (s *QueryFedspannerclusterResponse) SetReqMsgId(v string) *QueryFedspannerclusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFedspannerclusterResponse) SetResultCode(v string) *QueryFedspannerclusterResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFedspannerclusterResponse) SetResultMsg(v string) *QueryFedspannerclusterResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFedspannerclusterResponse) SetData(v []*QuerySpannerClusterDetail) *QueryFedspannerclusterResponse {
	s.Data = v
	return s
}

type GetFedspannerclusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// fed集群名称
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true" maxLength:"256"`
}

func (s GetFedspannerclusterRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFedspannerclusterRequest) GoString() string {
	return s.String()
}

func (s *GetFedspannerclusterRequest) SetAuthToken(v string) *GetFedspannerclusterRequest {
	s.AuthToken = &v
	return s
}

func (s *GetFedspannerclusterRequest) SetClusterName(v string) *GetFedspannerclusterRequest {
	s.ClusterName = &v
	return s
}

func (s *GetFedspannerclusterRequest) SetWorkspaceGroup(v string) *GetFedspannerclusterRequest {
	s.WorkspaceGroup = &v
	return s
}

type GetFedspannerclusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 获取单个联邦 spanner集群详细信息，包含所含的本地集群信息
	Data *GetSpannerClusterDetail `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetFedspannerclusterResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFedspannerclusterResponse) GoString() string {
	return s.String()
}

func (s *GetFedspannerclusterResponse) SetReqMsgId(v string) *GetFedspannerclusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetFedspannerclusterResponse) SetResultCode(v string) *GetFedspannerclusterResponse {
	s.ResultCode = &v
	return s
}

func (s *GetFedspannerclusterResponse) SetResultMsg(v string) *GetFedspannerclusterResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetFedspannerclusterResponse) SetData(v *GetSpannerClusterDetail) *GetFedspannerclusterResponse {
	s.Data = v
	return s
}

type ListFedspannerclusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 集群名称
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s ListFedspannerclusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFedspannerclusterRequest) GoString() string {
	return s.String()
}

func (s *ListFedspannerclusterRequest) SetAuthToken(v string) *ListFedspannerclusterRequest {
	s.AuthToken = &v
	return s
}

func (s *ListFedspannerclusterRequest) SetClusterName(v string) *ListFedspannerclusterRequest {
	s.ClusterName = &v
	return s
}

func (s *ListFedspannerclusterRequest) SetWorkspaceGroup(v string) *ListFedspannerclusterRequest {
	s.WorkspaceGroup = &v
	return s
}

type ListFedspannerclusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// list 集群列表
	Data []*QuerySpannerClusterDetail `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListFedspannerclusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFedspannerclusterResponse) GoString() string {
	return s.String()
}

func (s *ListFedspannerclusterResponse) SetReqMsgId(v string) *ListFedspannerclusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListFedspannerclusterResponse) SetResultCode(v string) *ListFedspannerclusterResponse {
	s.ResultCode = &v
	return s
}

func (s *ListFedspannerclusterResponse) SetResultMsg(v string) *ListFedspannerclusterResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListFedspannerclusterResponse) SetData(v []*QuerySpannerClusterDetail) *ListFedspannerclusterResponse {
	s.Data = v
	return s
}

type DeleteFedspannerclusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// fed spanner cluster name
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s DeleteFedspannerclusterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFedspannerclusterRequest) GoString() string {
	return s.String()
}

func (s *DeleteFedspannerclusterRequest) SetAuthToken(v string) *DeleteFedspannerclusterRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteFedspannerclusterRequest) SetClusterName(v string) *DeleteFedspannerclusterRequest {
	s.ClusterName = &v
	return s
}

func (s *DeleteFedspannerclusterRequest) SetWorkspaceGroup(v string) *DeleteFedspannerclusterRequest {
	s.WorkspaceGroup = &v
	return s
}

type DeleteFedspannerclusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteFedspannerclusterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFedspannerclusterResponse) GoString() string {
	return s.String()
}

func (s *DeleteFedspannerclusterResponse) SetReqMsgId(v string) *DeleteFedspannerclusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteFedspannerclusterResponse) SetResultCode(v string) *DeleteFedspannerclusterResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteFedspannerclusterResponse) SetResultMsg(v string) *DeleteFedspannerclusterResponse {
	s.ResultMsg = &v
	return s
}

type BatchdeleteFedspannerclusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 批量指定fed集群名称
	ClusterNames []*string `json:"cluster_names,omitempty" xml:"cluster_names,omitempty" require:"true" type:"Repeated"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s BatchdeleteFedspannerclusterRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteFedspannerclusterRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteFedspannerclusterRequest) SetAuthToken(v string) *BatchdeleteFedspannerclusterRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteFedspannerclusterRequest) SetClusterNames(v []*string) *BatchdeleteFedspannerclusterRequest {
	s.ClusterNames = v
	return s
}

func (s *BatchdeleteFedspannerclusterRequest) SetWorkspaceGroup(v string) *BatchdeleteFedspannerclusterRequest {
	s.WorkspaceGroup = &v
	return s
}

type BatchdeleteFedspannerclusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteFedspannerclusterResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteFedspannerclusterResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteFedspannerclusterResponse) SetReqMsgId(v string) *BatchdeleteFedspannerclusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteFedspannerclusterResponse) SetResultCode(v string) *BatchdeleteFedspannerclusterResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteFedspannerclusterResponse) SetResultMsg(v string) *BatchdeleteFedspannerclusterResponse {
	s.ResultMsg = &v
	return s
}

type UpdateFedspannerclusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 用于描述联邦spanner 集群内容器实例采用内网还是外网
	AddressType *string `json:"address_type,omitempty" xml:"address_type,omitempty" require:"true"`
	// 集群名称
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
	// 用于描述联邦spanner 集群内容器实例 cpu大小， 单位core
	Cpu *string `json:"cpu,omitempty" xml:"cpu,omitempty" require:"true"`
	// 用于描述联邦spanner 集群内容器实例disk大小， 单位Gi
	Disk *string `json:"disk,omitempty" xml:"disk,omitempty" require:"true"`
	// 用于描述联邦spanner 集群内容器实例的网络是否采用host网络
	HostNetwork *bool `json:"host_network,omitempty" xml:"host_network,omitempty" require:"true"`
	// 用于描述联邦spanner 集群内容器实例mem 大小， 单位 Gi
	Mem *string `json:"mem,omitempty" xml:"mem,omitempty" require:"true"`
	// 用于描述联邦spanner 集群名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 描述集群状态
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// 定义了sub cluster的config信息，包含多版本，镜像，副本数，标签等
	SubClustersConfig *string `json:"sub_clusters_config,omitempty" xml:"sub_clusters_config,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s UpdateFedspannerclusterRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFedspannerclusterRequest) GoString() string {
	return s.String()
}

func (s *UpdateFedspannerclusterRequest) SetAuthToken(v string) *UpdateFedspannerclusterRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateFedspannerclusterRequest) SetAddressType(v string) *UpdateFedspannerclusterRequest {
	s.AddressType = &v
	return s
}

func (s *UpdateFedspannerclusterRequest) SetClusterName(v string) *UpdateFedspannerclusterRequest {
	s.ClusterName = &v
	return s
}

func (s *UpdateFedspannerclusterRequest) SetCpu(v string) *UpdateFedspannerclusterRequest {
	s.Cpu = &v
	return s
}

func (s *UpdateFedspannerclusterRequest) SetDisk(v string) *UpdateFedspannerclusterRequest {
	s.Disk = &v
	return s
}

func (s *UpdateFedspannerclusterRequest) SetHostNetwork(v bool) *UpdateFedspannerclusterRequest {
	s.HostNetwork = &v
	return s
}

func (s *UpdateFedspannerclusterRequest) SetMem(v string) *UpdateFedspannerclusterRequest {
	s.Mem = &v
	return s
}

func (s *UpdateFedspannerclusterRequest) SetName(v string) *UpdateFedspannerclusterRequest {
	s.Name = &v
	return s
}

func (s *UpdateFedspannerclusterRequest) SetState(v string) *UpdateFedspannerclusterRequest {
	s.State = &v
	return s
}

func (s *UpdateFedspannerclusterRequest) SetSubClustersConfig(v string) *UpdateFedspannerclusterRequest {
	s.SubClustersConfig = &v
	return s
}

func (s *UpdateFedspannerclusterRequest) SetWorkspaceGroup(v string) *UpdateFedspannerclusterRequest {
	s.WorkspaceGroup = &v
	return s
}

type UpdateFedspannerclusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateFedspannerclusterResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFedspannerclusterResponse) GoString() string {
	return s.String()
}

func (s *UpdateFedspannerclusterResponse) SetReqMsgId(v string) *UpdateFedspannerclusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateFedspannerclusterResponse) SetResultCode(v string) *UpdateFedspannerclusterResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateFedspannerclusterResponse) SetResultMsg(v string) *UpdateFedspannerclusterResponse {
	s.ResultMsg = &v
	return s
}

type CreateReleaseplanRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 创建发布单需要的应用服务信息
	AppServices []*ReleasePlanSpecAppService `json:"app_services,omitempty" xml:"app_services,omitempty" require:"true" type:"Repeated"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 是否自动执行
	IsAutoExecute *bool `json:"is_auto_execute,omitempty" xml:"is_auto_execute,omitempty"`
	// 发布单标题
	Title *string `json:"title,omitempty" xml:"title,omitempty" require:"true"`
	// 默认CLOUD_NATIVE_GROUP_RELEASE
	OpsType *string `json:"ops_type,omitempty" xml:"ops_type,omitempty"`
}

func (s CreateReleaseplanRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateReleaseplanRequest) GoString() string {
	return s.String()
}

func (s *CreateReleaseplanRequest) SetAuthToken(v string) *CreateReleaseplanRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateReleaseplanRequest) SetAppServices(v []*ReleasePlanSpecAppService) *CreateReleaseplanRequest {
	s.AppServices = v
	return s
}

func (s *CreateReleaseplanRequest) SetNamespace(v string) *CreateReleaseplanRequest {
	s.Namespace = &v
	return s
}

func (s *CreateReleaseplanRequest) SetWorkspaceGroup(v string) *CreateReleaseplanRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *CreateReleaseplanRequest) SetIsAutoExecute(v bool) *CreateReleaseplanRequest {
	s.IsAutoExecute = &v
	return s
}

func (s *CreateReleaseplanRequest) SetTitle(v string) *CreateReleaseplanRequest {
	s.Title = &v
	return s
}

func (s *CreateReleaseplanRequest) SetOpsType(v string) *CreateReleaseplanRequest {
	s.OpsType = &v
	return s
}

type CreateReleaseplanResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发布单的唯一标识，可以认为是timeSeriesId
	PlanUniqueId *string `json:"plan_unique_id,omitempty" xml:"plan_unique_id,omitempty"`
}

func (s CreateReleaseplanResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateReleaseplanResponse) GoString() string {
	return s.String()
}

func (s *CreateReleaseplanResponse) SetReqMsgId(v string) *CreateReleaseplanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateReleaseplanResponse) SetResultCode(v string) *CreateReleaseplanResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateReleaseplanResponse) SetResultMsg(v string) *CreateReleaseplanResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateReleaseplanResponse) SetPlanUniqueId(v string) *CreateReleaseplanResponse {
	s.PlanUniqueId = &v
	return s
}

type UpdateFedspannerclusterStatusRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// fed spanner cluster 集群名称
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
	// 期望的集群状态
	ClusterStatus *string `json:"cluster_status,omitempty" xml:"cluster_status,omitempty" require:"true"`
}

func (s UpdateFedspannerclusterStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFedspannerclusterStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateFedspannerclusterStatusRequest) SetAuthToken(v string) *UpdateFedspannerclusterStatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateFedspannerclusterStatusRequest) SetWorkspaceGroup(v string) *UpdateFedspannerclusterStatusRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *UpdateFedspannerclusterStatusRequest) SetClusterName(v string) *UpdateFedspannerclusterStatusRequest {
	s.ClusterName = &v
	return s
}

func (s *UpdateFedspannerclusterStatusRequest) SetClusterStatus(v string) *UpdateFedspannerclusterStatusRequest {
	s.ClusterStatus = &v
	return s
}

type UpdateFedspannerclusterStatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateFedspannerclusterStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFedspannerclusterStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateFedspannerclusterStatusResponse) SetReqMsgId(v string) *UpdateFedspannerclusterStatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateFedspannerclusterStatusResponse) SetResultCode(v string) *UpdateFedspannerclusterStatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateFedspannerclusterStatusResponse) SetResultMsg(v string) *UpdateFedspannerclusterStatusResponse {
	s.ResultMsg = &v
	return s
}

type AddAntvipDomainRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 应用名称
	Application *string `json:"application,omitempty" xml:"application,omitempty" require:"true"`
	// 要添加的部署单元名称列表
	Cells []*string `json:"cells,omitempty" xml:"cells,omitempty" require:"true" type:"Repeated"`
	// 健康检查类型，默认为TCP
	HealthCheckType *string `json:"health_check_type,omitempty" xml:"health_check_type,omitempty"`
	// 健康检查端口，非必填项
	HealthCheckDefaultPort *int64 `json:"health_check_default_port,omitempty" xml:"health_check_default_port,omitempty"`
}

func (s AddAntvipDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAntvipDomainRequest) GoString() string {
	return s.String()
}

func (s *AddAntvipDomainRequest) SetAuthToken(v string) *AddAntvipDomainRequest {
	s.AuthToken = &v
	return s
}

func (s *AddAntvipDomainRequest) SetWorkspaceGroup(v string) *AddAntvipDomainRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *AddAntvipDomainRequest) SetApplication(v string) *AddAntvipDomainRequest {
	s.Application = &v
	return s
}

func (s *AddAntvipDomainRequest) SetCells(v []*string) *AddAntvipDomainRequest {
	s.Cells = v
	return s
}

func (s *AddAntvipDomainRequest) SetHealthCheckType(v string) *AddAntvipDomainRequest {
	s.HealthCheckType = &v
	return s
}

func (s *AddAntvipDomainRequest) SetHealthCheckDefaultPort(v int64) *AddAntvipDomainRequest {
	s.HealthCheckDefaultPort = &v
	return s
}

type AddAntvipDomainResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建的antvip域名全称
	VipDomains []*string `json:"vip_domains,omitempty" xml:"vip_domains,omitempty" type:"Repeated"`
}

func (s AddAntvipDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAntvipDomainResponse) GoString() string {
	return s.String()
}

func (s *AddAntvipDomainResponse) SetReqMsgId(v string) *AddAntvipDomainResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddAntvipDomainResponse) SetResultCode(v string) *AddAntvipDomainResponse {
	s.ResultCode = &v
	return s
}

func (s *AddAntvipDomainResponse) SetResultMsg(v string) *AddAntvipDomainResponse {
	s.ResultMsg = &v
	return s
}

func (s *AddAntvipDomainResponse) SetVipDomains(v []*string) *AddAntvipDomainResponse {
	s.VipDomains = v
	return s
}

type DeleteAntvipDomainRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 应用名称
	Application *string `json:"application,omitempty" xml:"application,omitempty" require:"true"`
	// 部署单元cell名称
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
}

func (s DeleteAntvipDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntvipDomainRequest) GoString() string {
	return s.String()
}

func (s *DeleteAntvipDomainRequest) SetAuthToken(v string) *DeleteAntvipDomainRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteAntvipDomainRequest) SetWorkspaceGroup(v string) *DeleteAntvipDomainRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *DeleteAntvipDomainRequest) SetApplication(v string) *DeleteAntvipDomainRequest {
	s.Application = &v
	return s
}

func (s *DeleteAntvipDomainRequest) SetCell(v string) *DeleteAntvipDomainRequest {
	s.Cell = &v
	return s
}

type DeleteAntvipDomainResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteAntvipDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntvipDomainResponse) GoString() string {
	return s.String()
}

func (s *DeleteAntvipDomainResponse) SetReqMsgId(v string) *DeleteAntvipDomainResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteAntvipDomainResponse) SetResultCode(v string) *DeleteAntvipDomainResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteAntvipDomainResponse) SetResultMsg(v string) *DeleteAntvipDomainResponse {
	s.ResultMsg = &v
	return s
}

type ListContainerserviceIngressRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 容器服务名称
	ContainerServiceName *string `json:"container_service_name,omitempty" xml:"container_service_name,omitempty" require:"true"`
	// 命名空间名称
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 工作空间组名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s ListContainerserviceIngressRequest) String() string {
	return tea.Prettify(s)
}

func (s ListContainerserviceIngressRequest) GoString() string {
	return s.String()
}

func (s *ListContainerserviceIngressRequest) SetAuthToken(v string) *ListContainerserviceIngressRequest {
	s.AuthToken = &v
	return s
}

func (s *ListContainerserviceIngressRequest) SetContainerServiceName(v string) *ListContainerserviceIngressRequest {
	s.ContainerServiceName = &v
	return s
}

func (s *ListContainerserviceIngressRequest) SetNamespace(v string) *ListContainerserviceIngressRequest {
	s.Namespace = &v
	return s
}

func (s *ListContainerserviceIngressRequest) SetWorkspaceGroup(v string) *ListContainerserviceIngressRequest {
	s.WorkspaceGroup = &v
	return s
}

type ListContainerserviceIngressResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 容器服务 Ingress 列表
	Ingresses []*IngressInfo `json:"ingresses,omitempty" xml:"ingresses,omitempty" type:"Repeated"`
}

func (s ListContainerserviceIngressResponse) String() string {
	return tea.Prettify(s)
}

func (s ListContainerserviceIngressResponse) GoString() string {
	return s.String()
}

func (s *ListContainerserviceIngressResponse) SetReqMsgId(v string) *ListContainerserviceIngressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListContainerserviceIngressResponse) SetResultCode(v string) *ListContainerserviceIngressResponse {
	s.ResultCode = &v
	return s
}

func (s *ListContainerserviceIngressResponse) SetResultMsg(v string) *ListContainerserviceIngressResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListContainerserviceIngressResponse) SetIngresses(v []*IngressInfo) *ListContainerserviceIngressResponse {
	s.Ingresses = v
	return s
}

type CreateContainerserviceOperationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 容器服务列表。
	ContainerServices *ContainerServiceOperationList `json:"container_services,omitempty" xml:"container_services,omitempty" require:"true"`
	// 分组策略：ALL_ONE、EACH_ONE、CELL，默认EACH_ONE
	GroupStrategy *string `json:"group_strategy,omitempty" xml:"group_strategy,omitempty"`
	// 是否自动执行，默认false
	IsAutoExecute *bool `json:"is_auto_execute,omitempty" xml:"is_auto_execute,omitempty"`
	// 是否需要beta卡点，默认 true
	IsNeedBeta *bool `json:"is_need_beta,omitempty" xml:"is_need_beta,omitempty"`
	// 所属命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 运维类型：重启等
	OpsMode *string `json:"ops_mode,omitempty" xml:"ops_mode,omitempty" require:"true"`
	// 默认值：CLOUD_NATIVE_OPERATION
	OpsType *string `json:"ops_type,omitempty" xml:"ops_type,omitempty"`
	// 运维单名称
	Title *string `json:"title,omitempty" xml:"title,omitempty" require:"true"`
	// 所属工作空间组名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 在具体分组策略下，每个执行单元（部署单元，机房等）内部的分组个数。
	GroupAmount *int64 `json:"group_amount,omitempty" xml:"group_amount,omitempty"`
	// 审批人账号id，暂时不支持
	AssigneeIds []*string `json:"assignee_ids,omitempty" xml:"assignee_ids,omitempty" type:"Repeated"`
	// 操作人账号，lks1.23.0才支持
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
}

func (s CreateContainerserviceOperationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContainerserviceOperationRequest) GoString() string {
	return s.String()
}

func (s *CreateContainerserviceOperationRequest) SetAuthToken(v string) *CreateContainerserviceOperationRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContainerserviceOperationRequest) SetContainerServices(v *ContainerServiceOperationList) *CreateContainerserviceOperationRequest {
	s.ContainerServices = v
	return s
}

func (s *CreateContainerserviceOperationRequest) SetGroupStrategy(v string) *CreateContainerserviceOperationRequest {
	s.GroupStrategy = &v
	return s
}

func (s *CreateContainerserviceOperationRequest) SetIsAutoExecute(v bool) *CreateContainerserviceOperationRequest {
	s.IsAutoExecute = &v
	return s
}

func (s *CreateContainerserviceOperationRequest) SetIsNeedBeta(v bool) *CreateContainerserviceOperationRequest {
	s.IsNeedBeta = &v
	return s
}

func (s *CreateContainerserviceOperationRequest) SetNamespace(v string) *CreateContainerserviceOperationRequest {
	s.Namespace = &v
	return s
}

func (s *CreateContainerserviceOperationRequest) SetOpsMode(v string) *CreateContainerserviceOperationRequest {
	s.OpsMode = &v
	return s
}

func (s *CreateContainerserviceOperationRequest) SetOpsType(v string) *CreateContainerserviceOperationRequest {
	s.OpsType = &v
	return s
}

func (s *CreateContainerserviceOperationRequest) SetTitle(v string) *CreateContainerserviceOperationRequest {
	s.Title = &v
	return s
}

func (s *CreateContainerserviceOperationRequest) SetWorkspaceGroup(v string) *CreateContainerserviceOperationRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *CreateContainerserviceOperationRequest) SetGroupAmount(v int64) *CreateContainerserviceOperationRequest {
	s.GroupAmount = &v
	return s
}

func (s *CreateContainerserviceOperationRequest) SetAssigneeIds(v []*string) *CreateContainerserviceOperationRequest {
	s.AssigneeIds = v
	return s
}

func (s *CreateContainerserviceOperationRequest) SetOperator(v string) *CreateContainerserviceOperationRequest {
	s.Operator = &v
	return s
}

type CreateContainerserviceOperationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建完成的部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s CreateContainerserviceOperationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContainerserviceOperationResponse) GoString() string {
	return s.String()
}

func (s *CreateContainerserviceOperationResponse) SetReqMsgId(v string) *CreateContainerserviceOperationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContainerserviceOperationResponse) SetResultCode(v string) *CreateContainerserviceOperationResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContainerserviceOperationResponse) SetResultMsg(v string) *CreateContainerserviceOperationResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContainerserviceOperationResponse) SetOperationId(v string) *CreateContainerserviceOperationResponse {
	s.OperationId = &v
	return s
}

type ListMulticlusterEventsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 环境组名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	// 容器服务名称
	ContainerService *string `json:"container_service,omitempty" xml:"container_service,omitempty"`
}

func (s ListMulticlusterEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMulticlusterEventsRequest) GoString() string {
	return s.String()
}

func (s *ListMulticlusterEventsRequest) SetAuthToken(v string) *ListMulticlusterEventsRequest {
	s.AuthToken = &v
	return s
}

func (s *ListMulticlusterEventsRequest) SetWorkspaceGroup(v string) *ListMulticlusterEventsRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *ListMulticlusterEventsRequest) SetNamespace(v string) *ListMulticlusterEventsRequest {
	s.Namespace = &v
	return s
}

func (s *ListMulticlusterEventsRequest) SetContainerService(v string) *ListMulticlusterEventsRequest {
	s.ContainerService = &v
	return s
}

type ListMulticlusterEventsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// kubernetes集群事件信息
	Data []*ClusterEvents `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListMulticlusterEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMulticlusterEventsResponse) GoString() string {
	return s.String()
}

func (s *ListMulticlusterEventsResponse) SetReqMsgId(v string) *ListMulticlusterEventsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListMulticlusterEventsResponse) SetResultCode(v string) *ListMulticlusterEventsResponse {
	s.ResultCode = &v
	return s
}

func (s *ListMulticlusterEventsResponse) SetResultMsg(v string) *ListMulticlusterEventsResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListMulticlusterEventsResponse) SetData(v []*ClusterEvents) *ListMulticlusterEventsResponse {
	s.Data = v
	return s
}

type ApplyContainerserviceDeploymentRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布单time_series_id
	TimeSeriesId *string `json:"time_series_id,omitempty" xml:"time_series_id,omitempty" require:"true"`
	// 审批人账号id
	AssigneeIds []*string `json:"assignee_ids,omitempty" xml:"assignee_ids,omitempty" type:"Repeated"`
}

func (s ApplyContainerserviceDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyContainerserviceDeploymentRequest) GoString() string {
	return s.String()
}

func (s *ApplyContainerserviceDeploymentRequest) SetAuthToken(v string) *ApplyContainerserviceDeploymentRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyContainerserviceDeploymentRequest) SetTimeSeriesId(v string) *ApplyContainerserviceDeploymentRequest {
	s.TimeSeriesId = &v
	return s
}

func (s *ApplyContainerserviceDeploymentRequest) SetAssigneeIds(v []*string) *ApplyContainerserviceDeploymentRequest {
	s.AssigneeIds = v
	return s
}

type ApplyContainerserviceDeploymentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 审批状态
	ApprovalStatus *string `json:"approval_status,omitempty" xml:"approval_status,omitempty"`
	// 审批详情页面地址
	ApprovalUrl *string `json:"approval_url,omitempty" xml:"approval_url,omitempty"`
}

func (s ApplyContainerserviceDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyContainerserviceDeploymentResponse) GoString() string {
	return s.String()
}

func (s *ApplyContainerserviceDeploymentResponse) SetReqMsgId(v string) *ApplyContainerserviceDeploymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyContainerserviceDeploymentResponse) SetResultCode(v string) *ApplyContainerserviceDeploymentResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyContainerserviceDeploymentResponse) SetResultMsg(v string) *ApplyContainerserviceDeploymentResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyContainerserviceDeploymentResponse) SetApprovalStatus(v string) *ApplyContainerserviceDeploymentResponse {
	s.ApprovalStatus = &v
	return s
}

func (s *ApplyContainerserviceDeploymentResponse) SetApprovalUrl(v string) *ApplyContainerserviceDeploymentResponse {
	s.ApprovalUrl = &v
	return s
}

type UpdateIngressTrafficweightRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 流量权重列表
	ServiceWeights []*ServiceWeight `json:"service_weights,omitempty" xml:"service_weights,omitempty" require:"true" type:"Repeated"`
	// service id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
}

func (s UpdateIngressTrafficweightRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateIngressTrafficweightRequest) GoString() string {
	return s.String()
}

func (s *UpdateIngressTrafficweightRequest) SetAuthToken(v string) *UpdateIngressTrafficweightRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateIngressTrafficweightRequest) SetServiceWeights(v []*ServiceWeight) *UpdateIngressTrafficweightRequest {
	s.ServiceWeights = v
	return s
}

func (s *UpdateIngressTrafficweightRequest) SetServiceId(v string) *UpdateIngressTrafficweightRequest {
	s.ServiceId = &v
	return s
}

type UpdateIngressTrafficweightResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateIngressTrafficweightResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateIngressTrafficweightResponse) GoString() string {
	return s.String()
}

func (s *UpdateIngressTrafficweightResponse) SetReqMsgId(v string) *UpdateIngressTrafficweightResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateIngressTrafficweightResponse) SetResultCode(v string) *UpdateIngressTrafficweightResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateIngressTrafficweightResponse) SetResultMsg(v string) *UpdateIngressTrafficweightResponse {
	s.ResultMsg = &v
	return s
}

type GetOpsplanBluedetailRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// antcloud.ldc.opsplan.detail.query 接口返回的 group_collection_list. app_group_list.id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
}

func (s GetOpsplanBluedetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetOpsplanBluedetailRequest) GoString() string {
	return s.String()
}

func (s *GetOpsplanBluedetailRequest) SetAuthToken(v string) *GetOpsplanBluedetailRequest {
	s.AuthToken = &v
	return s
}

func (s *GetOpsplanBluedetailRequest) SetServiceId(v string) *GetOpsplanBluedetailRequest {
	s.ServiceId = &v
	return s
}

type GetOpsplanBluedetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// pod信息列表
	PodList []*PodInfo `json:"pod_list,omitempty" xml:"pod_list,omitempty" type:"Repeated"`
}

func (s GetOpsplanBluedetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetOpsplanBluedetailResponse) GoString() string {
	return s.String()
}

func (s *GetOpsplanBluedetailResponse) SetReqMsgId(v string) *GetOpsplanBluedetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetOpsplanBluedetailResponse) SetResultCode(v string) *GetOpsplanBluedetailResponse {
	s.ResultCode = &v
	return s
}

func (s *GetOpsplanBluedetailResponse) SetResultMsg(v string) *GetOpsplanBluedetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetOpsplanBluedetailResponse) SetPodList(v []*PodInfo) *GetOpsplanBluedetailResponse {
	s.PodList = v
	return s
}

type ListIngressTrafficweightRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// lks_service_id，antcloud.ldc.opsplan.detail.query 接口返回的 group_collection_list. app_group_list.id，和查询应用服务发布单详情的id一样
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
}

func (s ListIngressTrafficweightRequest) String() string {
	return tea.Prettify(s)
}

func (s ListIngressTrafficweightRequest) GoString() string {
	return s.String()
}

func (s *ListIngressTrafficweightRequest) SetAuthToken(v string) *ListIngressTrafficweightRequest {
	s.AuthToken = &v
	return s
}

func (s *ListIngressTrafficweightRequest) SetServiceId(v string) *ListIngressTrafficweightRequest {
	s.ServiceId = &v
	return s
}

type ListIngressTrafficweightResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 流量权重列表
	ServiceWeights []*ServiceWeight `json:"service_weights,omitempty" xml:"service_weights,omitempty" type:"Repeated"`
}

func (s ListIngressTrafficweightResponse) String() string {
	return tea.Prettify(s)
}

func (s ListIngressTrafficweightResponse) GoString() string {
	return s.String()
}

func (s *ListIngressTrafficweightResponse) SetReqMsgId(v string) *ListIngressTrafficweightResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListIngressTrafficweightResponse) SetResultCode(v string) *ListIngressTrafficweightResponse {
	s.ResultCode = &v
	return s
}

func (s *ListIngressTrafficweightResponse) SetResultMsg(v string) *ListIngressTrafficweightResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListIngressTrafficweightResponse) SetServiceWeights(v []*ServiceWeight) *ListIngressTrafficweightResponse {
	s.ServiceWeights = v
	return s
}

type CreateOamserviceApplicationconfigurationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// ApplicationConfiguration yaml字符串
	Yamlcontent *string `json:"yamlcontent,omitempty" xml:"yamlcontent,omitempty" require:"true"`
}

func (s CreateOamserviceApplicationconfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOamserviceApplicationconfigurationRequest) GoString() string {
	return s.String()
}

func (s *CreateOamserviceApplicationconfigurationRequest) SetAuthToken(v string) *CreateOamserviceApplicationconfigurationRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateOamserviceApplicationconfigurationRequest) SetYamlcontent(v string) *CreateOamserviceApplicationconfigurationRequest {
	s.Yamlcontent = &v
	return s
}

type CreateOamserviceApplicationconfigurationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	Applicationconfiguraion *OAMApplicationConfiguration `json:"applicationconfiguraion,omitempty" xml:"applicationconfiguraion,omitempty"`
}

func (s CreateOamserviceApplicationconfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOamserviceApplicationconfigurationResponse) GoString() string {
	return s.String()
}

func (s *CreateOamserviceApplicationconfigurationResponse) SetReqMsgId(v string) *CreateOamserviceApplicationconfigurationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateOamserviceApplicationconfigurationResponse) SetResultCode(v string) *CreateOamserviceApplicationconfigurationResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateOamserviceApplicationconfigurationResponse) SetResultMsg(v string) *CreateOamserviceApplicationconfigurationResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateOamserviceApplicationconfigurationResponse) SetApplicationconfiguraion(v *OAMApplicationConfiguration) *CreateOamserviceApplicationconfigurationResponse {
	s.Applicationconfiguraion = v
	return s
}

type CreateFedloadbalancerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 联邦负载均衡实例名称，RFC1035 主机名规范 [a-z]([-a-z0-9]*[a-z0-9])?
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true" maxLength:"63" minLength:"1"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 地址类型，例如公网、内网
	AddrType *string `json:"addr_type,omitempty" xml:"addr_type,omitempty" require:"true"`
	// 指定负载均衡规格大小
	Spec *string `json:"spec,omitempty" xml:"spec,omitempty"`
	// 联邦负载均衡实例对应的部署单元列表
	Cells []*string `json:"cells,omitempty" xml:"cells,omitempty" require:"true" type:"Repeated"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s CreateFedloadbalancerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFedloadbalancerRequest) GoString() string {
	return s.String()
}

func (s *CreateFedloadbalancerRequest) SetAuthToken(v string) *CreateFedloadbalancerRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFedloadbalancerRequest) SetName(v string) *CreateFedloadbalancerRequest {
	s.Name = &v
	return s
}

func (s *CreateFedloadbalancerRequest) SetNamespace(v string) *CreateFedloadbalancerRequest {
	s.Namespace = &v
	return s
}

func (s *CreateFedloadbalancerRequest) SetAddrType(v string) *CreateFedloadbalancerRequest {
	s.AddrType = &v
	return s
}

func (s *CreateFedloadbalancerRequest) SetSpec(v string) *CreateFedloadbalancerRequest {
	s.Spec = &v
	return s
}

func (s *CreateFedloadbalancerRequest) SetCells(v []*string) *CreateFedloadbalancerRequest {
	s.Cells = v
	return s
}

func (s *CreateFedloadbalancerRequest) SetWorkspaceGroup(v string) *CreateFedloadbalancerRequest {
	s.WorkspaceGroup = &v
	return s
}

type CreateFedloadbalancerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 联邦负载均衡名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s CreateFedloadbalancerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFedloadbalancerResponse) GoString() string {
	return s.String()
}

func (s *CreateFedloadbalancerResponse) SetReqMsgId(v string) *CreateFedloadbalancerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFedloadbalancerResponse) SetResultCode(v string) *CreateFedloadbalancerResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFedloadbalancerResponse) SetResultMsg(v string) *CreateFedloadbalancerResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateFedloadbalancerResponse) SetName(v string) *CreateFedloadbalancerResponse {
	s.Name = &v
	return s
}

type UpdateFedloadbalancerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 联邦负载均衡实例名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 联邦负载均衡实例所在命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 地址类型，例如公网、内网
	AddrType *string `json:"addr_type,omitempty" xml:"addr_type,omitempty" require:"true"`
	// 指定负载均衡规格
	Spec *string `json:"spec,omitempty" xml:"spec,omitempty"`
	// 联邦负载均衡实例对应的部署单元列表
	Cells []*string `json:"cells,omitempty" xml:"cells,omitempty" require:"true" type:"Repeated"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s UpdateFedloadbalancerRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFedloadbalancerRequest) GoString() string {
	return s.String()
}

func (s *UpdateFedloadbalancerRequest) SetAuthToken(v string) *UpdateFedloadbalancerRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateFedloadbalancerRequest) SetName(v string) *UpdateFedloadbalancerRequest {
	s.Name = &v
	return s
}

func (s *UpdateFedloadbalancerRequest) SetNamespace(v string) *UpdateFedloadbalancerRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateFedloadbalancerRequest) SetAddrType(v string) *UpdateFedloadbalancerRequest {
	s.AddrType = &v
	return s
}

func (s *UpdateFedloadbalancerRequest) SetSpec(v string) *UpdateFedloadbalancerRequest {
	s.Spec = &v
	return s
}

func (s *UpdateFedloadbalancerRequest) SetCells(v []*string) *UpdateFedloadbalancerRequest {
	s.Cells = v
	return s
}

func (s *UpdateFedloadbalancerRequest) SetWorkspaceGroup(v string) *UpdateFedloadbalancerRequest {
	s.WorkspaceGroup = &v
	return s
}

type UpdateFedloadbalancerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateFedloadbalancerResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFedloadbalancerResponse) GoString() string {
	return s.String()
}

func (s *UpdateFedloadbalancerResponse) SetReqMsgId(v string) *UpdateFedloadbalancerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateFedloadbalancerResponse) SetResultCode(v string) *UpdateFedloadbalancerResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateFedloadbalancerResponse) SetResultMsg(v string) *UpdateFedloadbalancerResponse {
	s.ResultMsg = &v
	return s
}

type ListFedloadbalancerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 支持模糊搜索
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 页数
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s ListFedloadbalancerRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFedloadbalancerRequest) GoString() string {
	return s.String()
}

func (s *ListFedloadbalancerRequest) SetAuthToken(v string) *ListFedloadbalancerRequest {
	s.AuthToken = &v
	return s
}

func (s *ListFedloadbalancerRequest) SetWorkspaceGroup(v string) *ListFedloadbalancerRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *ListFedloadbalancerRequest) SetNamespace(v string) *ListFedloadbalancerRequest {
	s.Namespace = &v
	return s
}

func (s *ListFedloadbalancerRequest) SetName(v string) *ListFedloadbalancerRequest {
	s.Name = &v
	return s
}

func (s *ListFedloadbalancerRequest) SetPageNumber(v int64) *ListFedloadbalancerRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFedloadbalancerRequest) SetPageSize(v int64) *ListFedloadbalancerRequest {
	s.PageSize = &v
	return s
}

type ListFedloadbalancerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 联邦负载均衡实例列表
	FedLoadbalancerList []*FedLoadBalancer `json:"fed_loadbalancer_list,omitempty" xml:"fed_loadbalancer_list,omitempty" type:"Repeated"`
	// 查询到的联邦负载均衡实例总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ListFedloadbalancerResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFedloadbalancerResponse) GoString() string {
	return s.String()
}

func (s *ListFedloadbalancerResponse) SetReqMsgId(v string) *ListFedloadbalancerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListFedloadbalancerResponse) SetResultCode(v string) *ListFedloadbalancerResponse {
	s.ResultCode = &v
	return s
}

func (s *ListFedloadbalancerResponse) SetResultMsg(v string) *ListFedloadbalancerResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListFedloadbalancerResponse) SetFedLoadbalancerList(v []*FedLoadBalancer) *ListFedloadbalancerResponse {
	s.FedLoadbalancerList = v
	return s
}

func (s *ListFedloadbalancerResponse) SetTotalCount(v int64) *ListFedloadbalancerResponse {
	s.TotalCount = &v
	return s
}

type DeleteFedloadbalancerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 联邦负载均衡实例的名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s DeleteFedloadbalancerRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFedloadbalancerRequest) GoString() string {
	return s.String()
}

func (s *DeleteFedloadbalancerRequest) SetAuthToken(v string) *DeleteFedloadbalancerRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteFedloadbalancerRequest) SetWorkspaceGroup(v string) *DeleteFedloadbalancerRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *DeleteFedloadbalancerRequest) SetNamespace(v string) *DeleteFedloadbalancerRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteFedloadbalancerRequest) SetName(v string) *DeleteFedloadbalancerRequest {
	s.Name = &v
	return s
}

type DeleteFedloadbalancerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteFedloadbalancerResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFedloadbalancerResponse) GoString() string {
	return s.String()
}

func (s *DeleteFedloadbalancerResponse) SetReqMsgId(v string) *DeleteFedloadbalancerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteFedloadbalancerResponse) SetResultCode(v string) *DeleteFedloadbalancerResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteFedloadbalancerResponse) SetResultMsg(v string) *DeleteFedloadbalancerResponse {
	s.ResultMsg = &v
	return s
}

type GetFedloadbalancerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 联邦负载均衡名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s GetFedloadbalancerRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFedloadbalancerRequest) GoString() string {
	return s.String()
}

func (s *GetFedloadbalancerRequest) SetAuthToken(v string) *GetFedloadbalancerRequest {
	s.AuthToken = &v
	return s
}

func (s *GetFedloadbalancerRequest) SetWorkspaceGroup(v string) *GetFedloadbalancerRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *GetFedloadbalancerRequest) SetNamespace(v string) *GetFedloadbalancerRequest {
	s.Namespace = &v
	return s
}

func (s *GetFedloadbalancerRequest) SetName(v string) *GetFedloadbalancerRequest {
	s.Name = &v
	return s
}

type GetFedloadbalancerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 联邦负载均衡实例信息
	FedLoadbalancer *FedLoadBalancer `json:"fed_loadbalancer,omitempty" xml:"fed_loadbalancer,omitempty"`
}

func (s GetFedloadbalancerResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFedloadbalancerResponse) GoString() string {
	return s.String()
}

func (s *GetFedloadbalancerResponse) SetReqMsgId(v string) *GetFedloadbalancerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetFedloadbalancerResponse) SetResultCode(v string) *GetFedloadbalancerResponse {
	s.ResultCode = &v
	return s
}

func (s *GetFedloadbalancerResponse) SetResultMsg(v string) *GetFedloadbalancerResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetFedloadbalancerResponse) SetFedLoadbalancer(v *FedLoadBalancer) *GetFedloadbalancerResponse {
	s.FedLoadbalancer = v
	return s
}

type ImportUnireleaseSolutionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// Line迭代发布Json String
	Release *string `json:"release,omitempty" xml:"release,omitempty" require:"true"`
	// 机构列表信息；如果不填默认是所有机构统一发布
	Tenants []*string `json:"tenants,omitempty" xml:"tenants,omitempty" type:"Repeated"`
}

func (s ImportUnireleaseSolutionRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportUnireleaseSolutionRequest) GoString() string {
	return s.String()
}

func (s *ImportUnireleaseSolutionRequest) SetAuthToken(v string) *ImportUnireleaseSolutionRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportUnireleaseSolutionRequest) SetRelease(v string) *ImportUnireleaseSolutionRequest {
	s.Release = &v
	return s
}

func (s *ImportUnireleaseSolutionRequest) SetTenants(v []*string) *ImportUnireleaseSolutionRequest {
	s.Tenants = v
	return s
}

type ImportUnireleaseSolutionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Linke迭代发布返回
	Data *LinkeReleaseData `json:"data,omitempty" xml:"data,omitempty"`
	// 返回结果
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ImportUnireleaseSolutionResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportUnireleaseSolutionResponse) GoString() string {
	return s.String()
}

func (s *ImportUnireleaseSolutionResponse) SetReqMsgId(v string) *ImportUnireleaseSolutionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportUnireleaseSolutionResponse) SetResultCode(v string) *ImportUnireleaseSolutionResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportUnireleaseSolutionResponse) SetResultMsg(v string) *ImportUnireleaseSolutionResponse {
	s.ResultMsg = &v
	return s
}

func (s *ImportUnireleaseSolutionResponse) SetData(v *LinkeReleaseData) *ImportUnireleaseSolutionResponse {
	s.Data = v
	return s
}

func (s *ImportUnireleaseSolutionResponse) SetSuccess(v bool) *ImportUnireleaseSolutionResponse {
	s.Success = &v
	return s
}

type ListUnireleaseSolutionsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 当前页
	Page *string `json:"page,omitempty" xml:"page,omitempty" require:"true"`
	// 页大小
	PageSize *string `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 发布单状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 发布单开始时间
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 发布单结束时间
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// 发布名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s ListUnireleaseSolutionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUnireleaseSolutionsRequest) GoString() string {
	return s.String()
}

func (s *ListUnireleaseSolutionsRequest) SetAuthToken(v string) *ListUnireleaseSolutionsRequest {
	s.AuthToken = &v
	return s
}

func (s *ListUnireleaseSolutionsRequest) SetPage(v string) *ListUnireleaseSolutionsRequest {
	s.Page = &v
	return s
}

func (s *ListUnireleaseSolutionsRequest) SetPageSize(v string) *ListUnireleaseSolutionsRequest {
	s.PageSize = &v
	return s
}

func (s *ListUnireleaseSolutionsRequest) SetStatus(v string) *ListUnireleaseSolutionsRequest {
	s.Status = &v
	return s
}

func (s *ListUnireleaseSolutionsRequest) SetStartTime(v string) *ListUnireleaseSolutionsRequest {
	s.StartTime = &v
	return s
}

func (s *ListUnireleaseSolutionsRequest) SetEndTime(v string) *ListUnireleaseSolutionsRequest {
	s.EndTime = &v
	return s
}

func (s *ListUnireleaseSolutionsRequest) SetOperator(v string) *ListUnireleaseSolutionsRequest {
	s.Operator = &v
	return s
}

func (s *ListUnireleaseSolutionsRequest) SetName(v string) *ListUnireleaseSolutionsRequest {
	s.Name = &v
	return s
}

type ListUnireleaseSolutionsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 解决方案列表返回
	Data []*UnireleaseSolution `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListUnireleaseSolutionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUnireleaseSolutionsResponse) GoString() string {
	return s.String()
}

func (s *ListUnireleaseSolutionsResponse) SetReqMsgId(v string) *ListUnireleaseSolutionsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListUnireleaseSolutionsResponse) SetResultCode(v string) *ListUnireleaseSolutionsResponse {
	s.ResultCode = &v
	return s
}

func (s *ListUnireleaseSolutionsResponse) SetResultMsg(v string) *ListUnireleaseSolutionsResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListUnireleaseSolutionsResponse) SetData(v []*UnireleaseSolution) *ListUnireleaseSolutionsResponse {
	s.Data = v
	return s
}

type GetUnireleaseSolutionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 解决方案发布ID
	UnireleaseId *string `json:"unirelease_id,omitempty" xml:"unirelease_id,omitempty" require:"true"`
}

func (s GetUnireleaseSolutionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUnireleaseSolutionRequest) GoString() string {
	return s.String()
}

func (s *GetUnireleaseSolutionRequest) SetAuthToken(v string) *GetUnireleaseSolutionRequest {
	s.AuthToken = &v
	return s
}

func (s *GetUnireleaseSolutionRequest) SetUnireleaseId(v string) *GetUnireleaseSolutionRequest {
	s.UnireleaseId = &v
	return s
}

type GetUnireleaseSolutionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 解决方案详情
	Data *UnireleaseSolution `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetUnireleaseSolutionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUnireleaseSolutionResponse) GoString() string {
	return s.String()
}

func (s *GetUnireleaseSolutionResponse) SetReqMsgId(v string) *GetUnireleaseSolutionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetUnireleaseSolutionResponse) SetResultCode(v string) *GetUnireleaseSolutionResponse {
	s.ResultCode = &v
	return s
}

func (s *GetUnireleaseSolutionResponse) SetResultMsg(v string) *GetUnireleaseSolutionResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetUnireleaseSolutionResponse) SetData(v *UnireleaseSolution) *GetUnireleaseSolutionResponse {
	s.Data = v
	return s
}

type GetUnireleaseStatusRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 解决方案发布单ID
	UnireleaseId *string `json:"unirelease_id,omitempty" xml:"unirelease_id,omitempty" require:"true"`
}

func (s GetUnireleaseStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUnireleaseStatusRequest) GoString() string {
	return s.String()
}

func (s *GetUnireleaseStatusRequest) SetAuthToken(v string) *GetUnireleaseStatusRequest {
	s.AuthToken = &v
	return s
}

func (s *GetUnireleaseStatusRequest) SetUnireleaseId(v string) *GetUnireleaseStatusRequest {
	s.UnireleaseId = &v
	return s
}

type GetUnireleaseStatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用发布状态
	ReleaseStatuses []*AppReleaseStatus `json:"release_statuses,omitempty" xml:"release_statuses,omitempty" type:"Repeated"`
}

func (s GetUnireleaseStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUnireleaseStatusResponse) GoString() string {
	return s.String()
}

func (s *GetUnireleaseStatusResponse) SetReqMsgId(v string) *GetUnireleaseStatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetUnireleaseStatusResponse) SetResultCode(v string) *GetUnireleaseStatusResponse {
	s.ResultCode = &v
	return s
}

func (s *GetUnireleaseStatusResponse) SetResultMsg(v string) *GetUnireleaseStatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetUnireleaseStatusResponse) SetReleaseStatuses(v []*AppReleaseStatus) *GetUnireleaseStatusResponse {
	s.ReleaseStatuses = v
	return s
}

type ExecUnireleasePipelinesRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布单ID
	ReleaseId *string `json:"release_id,omitempty" xml:"release_id,omitempty" require:"true"`
	// 租户/机构名称列表，不填默认当前机构所有租户
	Tenants []*string `json:"tenants,omitempty" xml:"tenants,omitempty" type:"Repeated"`
}

func (s ExecUnireleasePipelinesRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecUnireleasePipelinesRequest) GoString() string {
	return s.String()
}

func (s *ExecUnireleasePipelinesRequest) SetAuthToken(v string) *ExecUnireleasePipelinesRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecUnireleasePipelinesRequest) SetReleaseId(v string) *ExecUnireleasePipelinesRequest {
	s.ReleaseId = &v
	return s
}

func (s *ExecUnireleasePipelinesRequest) SetTenants(v []*string) *ExecUnireleasePipelinesRequest {
	s.Tenants = v
	return s
}

type ExecUnireleasePipelinesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 机构应用发布结果数据
	Data []*TenantAppReleaseData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ExecUnireleasePipelinesResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecUnireleasePipelinesResponse) GoString() string {
	return s.String()
}

func (s *ExecUnireleasePipelinesResponse) SetReqMsgId(v string) *ExecUnireleasePipelinesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecUnireleasePipelinesResponse) SetResultCode(v string) *ExecUnireleasePipelinesResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecUnireleasePipelinesResponse) SetResultMsg(v string) *ExecUnireleasePipelinesResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecUnireleasePipelinesResponse) SetData(v []*TenantAppReleaseData) *ExecUnireleasePipelinesResponse {
	s.Data = v
	return s
}

type Client struct {
	Endpoint                *string
	RegionId                *string
	AccessKeyId             *string
	AccessKeySecret         *string
	Protocol                *string
	UserAgent               *string
	ReadTimeout             *int
	ConnectTimeout          *int
	HttpProxy               *string
	HttpsProxy              *string
	Socks5Proxy             *string
	Socks5NetWork           *string
	NoProxy                 *string
	MaxIdleConns            *int
	SecurityToken           *string
	MaxIdleTimeMillis       *int
	KeepAliveDurationMillis *int
	MaxRequests             *int
	MaxRequestsPerHost      *int
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
func NewClient(config *Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *Config) (_err error) {
	if tea.BoolValue(util.IsUnset(tea.ToMap(config))) {
		_err = tea.NewSDKError(map[string]interface{}{
			"code":    "ParameterMissing",
			"message": "'config' can not be unset",
		})
		return _err
	}

	client.AccessKeyId = config.AccessKeyId
	client.AccessKeySecret = config.AccessKeySecret
	client.SecurityToken = config.SecurityToken
	client.Endpoint = config.Endpoint
	client.Protocol = config.Protocol
	client.UserAgent = config.UserAgent
	client.ReadTimeout = util.DefaultNumber(config.ReadTimeout, tea.Int(20000))
	client.ConnectTimeout = util.DefaultNumber(config.ConnectTimeout, tea.Int(20000))
	client.HttpProxy = config.HttpProxy
	client.HttpsProxy = config.HttpsProxy
	client.NoProxy = config.NoProxy
	client.Socks5Proxy = config.Socks5Proxy
	client.Socks5NetWork = config.Socks5NetWork
	client.MaxIdleConns = util.DefaultNumber(config.MaxIdleConns, tea.Int(60000))
	client.MaxIdleTimeMillis = util.DefaultNumber(config.MaxIdleTimeMillis, tea.Int(5))
	client.KeepAliveDurationMillis = util.DefaultNumber(config.KeepAliveDurationMillis, tea.Int(5000))
	client.MaxRequests = util.DefaultNumber(config.MaxRequests, tea.Int(100))
	client.MaxRequestsPerHost = util.DefaultNumber(config.MaxRequestsPerHost, tea.Int(100))
	return nil
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
func (client *Client) DoRequest(version *string, action *string, protocol *string, method *string, pathname *string, request map[string]interface{}, headers map[string]*string, runtime *util.RuntimeOptions) (_result map[string]interface{}, _err error) {
	_err = tea.Validate(runtime)
	if _err != nil {
		return _result, _err
	}
	_runtime := map[string]interface{}{
		"timeouted":               "retry",
		"readTimeout":             tea.IntValue(util.DefaultNumber(runtime.ReadTimeout, client.ReadTimeout)),
		"connectTimeout":          tea.IntValue(util.DefaultNumber(runtime.ConnectTimeout, client.ConnectTimeout)),
		"httpProxy":               tea.StringValue(util.DefaultString(runtime.HttpProxy, client.HttpProxy)),
		"httpsProxy":              tea.StringValue(util.DefaultString(runtime.HttpsProxy, client.HttpsProxy)),
		"noProxy":                 tea.StringValue(util.DefaultString(runtime.NoProxy, client.NoProxy)),
		"maxIdleConns":            tea.IntValue(util.DefaultNumber(runtime.MaxIdleConns, client.MaxIdleConns)),
		"maxIdleTimeMillis":       tea.IntValue(client.MaxIdleTimeMillis),
		"keepAliveDurationMillis": tea.IntValue(client.KeepAliveDurationMillis),
		"maxRequests":             tea.IntValue(client.MaxRequests),
		"maxRequestsPerHost":      tea.IntValue(client.MaxRequestsPerHost),
		"retry": map[string]interface{}{
			"retryable":   tea.BoolValue(runtime.Autoretry),
			"maxAttempts": tea.IntValue(util.DefaultNumber(runtime.MaxAttempts, tea.Int(3))),
		},
		"backoff": map[string]interface{}{
			"policy": tea.StringValue(util.DefaultString(runtime.BackoffPolicy, tea.String("no"))),
			"period": tea.IntValue(util.DefaultNumber(runtime.BackoffPeriod, tea.Int(1))),
		},
		"ignoreSSL": tea.BoolValue(runtime.IgnoreSSL),
	}

	_resp := make(map[string]interface{})
	for _retryTimes := 0; tea.BoolValue(tea.AllowRetry(_runtime["retry"], tea.Int(_retryTimes))); _retryTimes++ {
		if _retryTimes > 0 {
			_backoffTime := tea.GetBackoffTime(_runtime["backoff"], tea.Int(_retryTimes))
			if tea.IntValue(_backoffTime) > 0 {
				tea.Sleep(_backoffTime)
			}
		}

		_resp, _err = func() (map[string]interface{}, error) {
			request_ := tea.NewRequest()
			request_.Protocol = util.DefaultString(client.Protocol, protocol)
			request_.Method = method
			request_.Pathname = pathname
			request_.Query = map[string]*string{
				"method":           action,
				"version":          version,
				"sign_type":        tea.String("HmacSHA1"),
				"req_time":         antchainutil.GetTimestamp(),
				"req_msg_id":       antchainutil.GetNonce(),
				"access_key":       client.AccessKeyId,
				"base_sdk_version": tea.String("TeaSDK-2.0"),
				"sdk_version":      tea.String("1.11.1"),
			}
			if !tea.BoolValue(util.Empty(client.SecurityToken)) {
				request_.Query["security_token"] = client.SecurityToken
			}

			request_.Headers = tea.Merge(map[string]*string{
				"host":       util.DefaultString(client.Endpoint, tea.String("openapi.antchain.antgroup.com")),
				"user-agent": util.GetUserAgent(client.UserAgent),
			}, headers)
			tmp := util.AnyifyMapValue(rpcutil.Query(request))
			request_.Body = tea.ToReader(util.ToFormString(tmp))
			request_.Headers["content-type"] = tea.String("application/x-www-form-urlencoded")
			signedParam := tea.Merge(request_.Query,
				rpcutil.Query(request))
			request_.Query["sign"] = antchainutil.GetSignature(signedParam, client.AccessKeySecret)
			response_, _err := tea.DoRequest(request_, _runtime)
			if _err != nil {
				return _result, _err
			}
			raw, _err := util.ReadAsString(response_.Body)
			if _err != nil {
				return _result, _err
			}

			obj := util.ParseJSON(raw)
			res := util.AssertAsMap(obj)
			resp := util.AssertAsMap(res["response"])
			if tea.BoolValue(antchainutil.HasError(raw, client.AccessKeySecret)) {
				_err = tea.NewSDKError(map[string]interface{}{
					"message": resp["result_msg"],
					"data":    resp,
					"code":    resp["result_code"],
				})
				return _result, _err
			}

			_result = resp
			return _result, _err
		}()
		if !tea.BoolValue(tea.Retryable(_err)) {
			break
		}
	}

	return _resp, _err
}

/**
 * Description: 关联单元化应用服务实例
 * Summary: 关联单元化应用服务实例
 */
func (client *Client) BindAppservice(request *BindAppserviceRequest) (_result *BindAppserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BindAppserviceResponse{}
	_body, _err := client.BindAppserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 关联单元化应用服务实例
 * Summary: 关联单元化应用服务实例
 */
func (client *Client) BindAppserviceEx(request *BindAppserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BindAppserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BindAppserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.appservice.bind"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 解除关联的单元化应用服务实例
 * Summary: 解除关联的单元化应用服务实例
 */
func (client *Client) UnbindAppservice(request *UnbindAppserviceRequest) (_result *UnbindAppserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UnbindAppserviceResponse{}
	_body, _err := client.UnbindAppserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 解除关联的单元化应用服务实例
 * Summary: 解除关联的单元化应用服务实例
 */
func (client *Client) UnbindAppserviceEx(request *UnbindAppserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UnbindAppserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnbindAppserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.appservice.unbind"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建一个应用运维单，以对一组应用执行一次运维操作
 * Summary: 创建一个应用运维单
 */
func (client *Client) CreateAppops(request *CreateAppopsRequest) (_result *CreateAppopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAppopsResponse{}
	_body, _err := client.CreateAppopsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建一个应用运维单，以对一组应用执行一次运维操作
 * Summary: 创建一个应用运维单
 */
func (client *Client) CreateAppopsEx(request *CreateAppopsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAppopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAppopsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.appops.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询一个已经创建成功的部署操作
 * Summary: 查询一个已经创建成功的部署操作。
 */
func (client *Client) GetAppops(request *GetAppopsRequest) (_result *GetAppopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppopsResponse{}
	_body, _err := client.GetAppopsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询一个已经创建成功的部署操作
 * Summary: 查询一个已经创建成功的部署操作。
 */
func (client *Client) GetAppopsEx(request *GetAppopsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppopsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.appops.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询一个运维操作中某个应用的详情
 * Summary: 查询一个运维操作中某个应用的详情
 */
func (client *Client) GetAppopsApplication(request *GetAppopsApplicationRequest) (_result *GetAppopsApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppopsApplicationResponse{}
	_body, _err := client.GetAppopsApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询一个运维操作中某个应用的详情
 * Summary: 查询一个运维操作中某个应用的详情
 */
func (client *Client) GetAppopsApplicationEx(request *GetAppopsApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppopsApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppopsApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.appops.application.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开始执行一个已经创建成功的运维操作。如果此运维单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始执行一个已经创建成功的运维操作。
 */
func (client *Client) StartAppops(request *StartAppopsRequest) (_result *StartAppopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAppopsResponse{}
	_body, _err := client.StartAppopsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开始执行一个已经创建成功的运维操作。如果此运维单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始执行一个已经创建成功的运维操作。
 */
func (client *Client) StartAppopsEx(request *StartAppopsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAppopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAppopsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.appops.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重新初始化一个初始化失败的运维单。当运维单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化一个初始化失败的运维单。
 */
func (client *Client) ReinitAppops(request *ReinitAppopsRequest) (_result *ReinitAppopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReinitAppopsResponse{}
	_body, _err := client.ReinitAppopsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重新初始化一个初始化失败的运维单。当运维单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化一个初始化失败的运维单。
 */
func (client *Client) ReinitAppopsEx(request *ReinitAppopsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReinitAppopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReinitAppopsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.appops.reinit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对一个运维单执行取消操作。 当运维单处于以下状态时可执行取消操作： INITED：初始化完成 INIT_FAILED：初始化失败
 * Summary: 对一个运维单执行取消操作。
 */
func (client *Client) CancelAppops(request *CancelAppopsRequest) (_result *CancelAppopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelAppopsResponse{}
	_body, _err := client.CancelAppopsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对一个运维单执行取消操作。 当运维单处于以下状态时可执行取消操作： INITED：初始化完成 INIT_FAILED：初始化失败
 * Summary: 对一个运维单执行取消操作。
 */
func (client *Client) CancelAppopsEx(request *CancelAppopsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelAppopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelAppopsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.appops.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对一个运维操作中所有运维失败的分组进行重试操作。 当运维单处于以下状态时可执行重试操作： - FAILED：执行失败
 * Summary: 重试运维
 */
func (client *Client) RetryAppops(request *RetryAppopsRequest) (_result *RetryAppopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryAppopsResponse{}
	_body, _err := client.RetryAppopsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对一个运维操作中所有运维失败的分组进行重试操作。 当运维单处于以下状态时可执行重试操作： - FAILED：执行失败
 * Summary: 重试运维
 */
func (client *Client) RetryAppopsEx(request *RetryAppopsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryAppopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryAppopsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.appops.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询发布单
 * Summary: 查询发布单
 */
func (client *Client) GetDeployment(request *GetDeploymentRequest) (_result *GetDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetDeploymentResponse{}
	_body, _err := client.GetDeploymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询发布单
 * Summary: 查询发布单
 */
func (client *Client) GetDeploymentEx(request *GetDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.deployment.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询部署单中某个应用的详情
 * Summary: 查询部署单中某个应用的详情
 */
func (client *Client) GetDeploymentApplication(request *GetDeploymentApplicationRequest) (_result *GetDeploymentApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetDeploymentApplicationResponse{}
	_body, _err := client.GetDeploymentApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询部署单中某个应用的详情
 * Summary: 查询部署单中某个应用的详情
 */
func (client *Client) GetDeploymentApplicationEx(request *GetDeploymentApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetDeploymentApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDeploymentApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.deployment.application.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询部署单中某个应用的回滚详情
 * Summary: 查询部署单中某个应用的回滚详情
 */
func (client *Client) GetDeploymentRollback(request *GetDeploymentRollbackRequest) (_result *GetDeploymentRollbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetDeploymentRollbackResponse{}
	_body, _err := client.GetDeploymentRollbackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询部署单中某个应用的回滚详情
 * Summary: 查询部署单中某个应用的回滚详情
 */
func (client *Client) GetDeploymentRollbackEx(request *GetDeploymentRollbackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetDeploymentRollbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDeploymentRollbackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.deployment.rollback.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询可回滚的版本信息
 * Summary: 查询可回滚的版本信息
 */
func (client *Client) QueryDeploymentRollbackable(request *QueryDeploymentRollbackableRequest) (_result *QueryDeploymentRollbackableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDeploymentRollbackableResponse{}
	_body, _err := client.QueryDeploymentRollbackableEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询可回滚的版本信息
 * Summary: 查询可回滚的版本信息
 */
func (client *Client) QueryDeploymentRollbackableEx(request *QueryDeploymentRollbackableRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDeploymentRollbackableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeploymentRollbackableResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.deployment.rollbackable.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 回滚指定的应用
 * Summary: 回滚指定的应用
 */
func (client *Client) RollbackDeploymentApplication(request *RollbackDeploymentApplicationRequest) (_result *RollbackDeploymentApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RollbackDeploymentApplicationResponse{}
	_body, _err := client.RollbackDeploymentApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 回滚指定的应用
 * Summary: 回滚指定的应用
 */
func (client *Client) RollbackDeploymentApplicationEx(request *RollbackDeploymentApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RollbackDeploymentApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RollbackDeploymentApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.deployment.application.rollback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 推送 LDC 流量规则
 * Summary: 推送 LDC 流量规则
 */
func (client *Client) PushFlowRouteclient(request *PushFlowRouteclientRequest) (_result *PushFlowRouteclientResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PushFlowRouteclientResponse{}
	_body, _err := client.PushFlowRouteclientEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 推送 LDC 流量规则
 * Summary: 推送 LDC 流量规则
 */
func (client *Client) PushFlowRouteclientEx(request *PushFlowRouteclientRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PushFlowRouteclientResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PushFlowRouteclientResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.routeclient.push"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: fedNamespace创建
 * Summary: FedNamespace创建
 */
func (client *Client) CreateFederationNamespace(request *CreateFederationNamespaceRequest) (_result *CreateFederationNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFederationNamespaceResponse{}
	_body, _err := client.CreateFederationNamespaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: fedNamespace创建
 * Summary: FedNamespace创建
 */
func (client *Client) CreateFederationNamespaceEx(request *CreateFederationNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFederationNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFederationNamespaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.namespace.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: FedNamespace更新API
 * Summary: FedNamespace更新
 */
func (client *Client) UpdateFederationNamespace(request *UpdateFederationNamespaceRequest) (_result *UpdateFederationNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFederationNamespaceResponse{}
	_body, _err := client.UpdateFederationNamespaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: FedNamespace更新API
 * Summary: FedNamespace更新
 */
func (client *Client) UpdateFederationNamespaceEx(request *UpdateFederationNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFederationNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateFederationNamespaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.namespace.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个FedNamespace
 * Summary: FedNamespace get
 */
func (client *Client) GetFederationNamespace(request *GetFederationNamespaceRequest) (_result *GetFederationNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetFederationNamespaceResponse{}
	_body, _err := client.GetFederationNamespaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个FedNamespace
 * Summary: FedNamespace get
 */
func (client *Client) GetFederationNamespaceEx(request *GetFederationNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetFederationNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetFederationNamespaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.namespace.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: FedNamespace 删除
 * Summary: FedNamespace 删除
 */
func (client *Client) DeleteFederationNamespace(request *DeleteFederationNamespaceRequest) (_result *DeleteFederationNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFederationNamespaceResponse{}
	_body, _err := client.DeleteFederationNamespaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: FedNamespace 删除
 * Summary: FedNamespace 删除
 */
func (client *Client) DeleteFederationNamespaceEx(request *DeleteFederationNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFederationNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteFederationNamespaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.namespace.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建FedConfigMap
 * Summary: 创建FedConfigMap
 */
func (client *Client) CreateFederationConfigmap(request *CreateFederationConfigmapRequest) (_result *CreateFederationConfigmapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFederationConfigmapResponse{}
	_body, _err := client.CreateFederationConfigmapEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建FedConfigMap
 * Summary: 创建FedConfigMap
 */
func (client *Client) CreateFederationConfigmapEx(request *CreateFederationConfigmapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFederationConfigmapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFederationConfigmapResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.configmap.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: FedConfigMap更新
 * Summary: FedConfigMap更新
 */
func (client *Client) UpdateFederationConfigmap(request *UpdateFederationConfigmapRequest) (_result *UpdateFederationConfigmapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFederationConfigmapResponse{}
	_body, _err := client.UpdateFederationConfigmapEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: FedConfigMap更新
 * Summary: FedConfigMap更新
 */
func (client *Client) UpdateFederationConfigmapEx(request *UpdateFederationConfigmapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFederationConfigmapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateFederationConfigmapResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.configmap.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: FedConfigMap Get
 * Summary: FedConfigMap Get
 */
func (client *Client) GetFederationConfigmap(request *GetFederationConfigmapRequest) (_result *GetFederationConfigmapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetFederationConfigmapResponse{}
	_body, _err := client.GetFederationConfigmapEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: FedConfigMap Get
 * Summary: FedConfigMap Get
 */
func (client *Client) GetFederationConfigmapEx(request *GetFederationConfigmapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetFederationConfigmapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetFederationConfigmapResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.configmap.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: FedConfigMap 删除
 * Summary: FedConfigMap 删除
 */
func (client *Client) DeleteFederationConfigmap(request *DeleteFederationConfigmapRequest) (_result *DeleteFederationConfigmapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFederationConfigmapResponse{}
	_body, _err := client.DeleteFederationConfigmapEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: FedConfigMap 删除
 * Summary: FedConfigMap 删除
 */
func (client *Client) DeleteFederationConfigmapEx(request *DeleteFederationConfigmapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFederationConfigmapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteFederationConfigmapResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.configmap.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: FedConfigMap List
 * Summary: FedConfigMap List
 */
func (client *Client) ListFederationConfigmap(request *ListFederationConfigmapRequest) (_result *ListFederationConfigmapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListFederationConfigmapResponse{}
	_body, _err := client.ListFederationConfigmapEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: FedConfigMap List
 * Summary: FedConfigMap List
 */
func (client *Client) ListFederationConfigmapEx(request *ListFederationConfigmapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListFederationConfigmapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListFederationConfigmapResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.configmap.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: List FeNamespace
 * Summary: List FeNamespace
 */
func (client *Client) ListFederationNamespace(request *ListFederationNamespaceRequest) (_result *ListFederationNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListFederationNamespaceResponse{}
	_body, _err := client.ListFederationNamespaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: List FeNamespace
 * Summary: List FeNamespace
 */
func (client *Client) ListFederationNamespaceEx(request *ListFederationNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListFederationNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListFederationNamespaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.namespace.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询容器应用服务OpenAPI
 * Summary: 查询容器应用服务
 */
func (client *Client) QueryContainerservice(request *QueryContainerserviceRequest) (_result *QueryContainerserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContainerserviceResponse{}
	_body, _err := client.QueryContainerserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询容器应用服务OpenAPI
 * Summary: 查询容器应用服务
 */
func (client *Client) QueryContainerserviceEx(request *QueryContainerserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContainerserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContainerserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: get master clusters for each zone
 * Summary: getMasterClusters
 */
func (client *Client) ListMulticlusterMastercluster(request *ListMulticlusterMasterclusterRequest) (_result *ListMulticlusterMasterclusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListMulticlusterMasterclusterResponse{}
	_body, _err := client.ListMulticlusterMasterclusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: get master clusters for each zone
 * Summary: getMasterClusters
 */
func (client *Client) ListMulticlusterMasterclusterEx(request *ListMulticlusterMasterclusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListMulticlusterMasterclusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListMulticlusterMasterclusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.multicluster.mastercluster.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: import master clusters
 * Summary: importMasterCluster
 */
func (client *Client) InitMulticlusterCluster(request *InitMulticlusterClusterRequest) (_result *InitMulticlusterClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitMulticlusterClusterResponse{}
	_body, _err := client.InitMulticlusterClusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: import master clusters
 * Summary: importMasterCluster
 */
func (client *Client) InitMulticlusterClusterEx(request *InitMulticlusterClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitMulticlusterClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitMulticlusterClusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.multicluster.cluster.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: list multi clusters
 * Summary: list MultiCluster
 */
func (client *Client) ListMulticluster(request *ListMulticlusterRequest) (_result *ListMulticlusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListMulticlusterResponse{}
	_body, _err := client.ListMulticlusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: list multi clusters
 * Summary: list MultiCluster
 */
func (client *Client) ListMulticlusterEx(request *ListMulticlusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListMulticlusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListMulticlusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.multicluster.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除容器应用服务
 * Summary: 删除容器应用服务
 */
func (client *Client) DeleteContainerservice(request *DeleteContainerserviceRequest) (_result *DeleteContainerserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteContainerserviceResponse{}
	_body, _err := client.DeleteContainerserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除容器应用服务
 * Summary: 删除容器应用服务
 */
func (client *Client) DeleteContainerserviceEx(request *DeleteContainerserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteContainerserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteContainerserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建一个部署单
 * Summary: 创建一个部署单
 */
func (client *Client) CreateContainerserviceDeployment(request *CreateContainerserviceDeploymentRequest) (_result *CreateContainerserviceDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContainerserviceDeploymentResponse{}
	_body, _err := client.CreateContainerserviceDeploymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建一个部署单
 * Summary: 创建一个部署单
 */
func (client *Client) CreateContainerserviceDeploymentEx(request *CreateContainerserviceDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContainerserviceDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContainerserviceDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.deployment.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建FedSecret
 * Summary: 创建FedSecret
 */
func (client *Client) CreateFederationSecret(request *CreateFederationSecretRequest) (_result *CreateFederationSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFederationSecretResponse{}
	_body, _err := client.CreateFederationSecretEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建FedSecret
 * Summary: 创建FedSecret
 */
func (client *Client) CreateFederationSecretEx(request *CreateFederationSecretRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFederationSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFederationSecretResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.secret.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: FedSecret Get
 * Summary: FedSecret Get
 */
func (client *Client) GetFederationSecret(request *GetFederationSecretRequest) (_result *GetFederationSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetFederationSecretResponse{}
	_body, _err := client.GetFederationSecretEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: FedSecret Get
 * Summary: FedSecret Get
 */
func (client *Client) GetFederationSecretEx(request *GetFederationSecretRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetFederationSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetFederationSecretResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.secret.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: FedSecret 删除
 * Summary: FedSecret 删除
 */
func (client *Client) DeleteFederationSecret(request *DeleteFederationSecretRequest) (_result *DeleteFederationSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFederationSecretResponse{}
	_body, _err := client.DeleteFederationSecretEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: FedSecret 删除
 * Summary: FedSecret 删除
 */
func (client *Client) DeleteFederationSecretEx(request *DeleteFederationSecretRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFederationSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteFederationSecretResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.secret.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: FedSecret 更新
 * Summary: FedSecret 更新
 */
func (client *Client) UpdateFederationSecret(request *UpdateFederationSecretRequest) (_result *UpdateFederationSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFederationSecretResponse{}
	_body, _err := client.UpdateFederationSecretEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: FedSecret 更新
 * Summary: FedSecret 更新
 */
func (client *Client) UpdateFederationSecretEx(request *UpdateFederationSecretRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFederationSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateFederationSecretResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.secret.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: FedSecret List
 * Summary: FedSecret List
 */
func (client *Client) ListFederationSecret(request *ListFederationSecretRequest) (_result *ListFederationSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListFederationSecretResponse{}
	_body, _err := client.ListFederationSecretEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: FedSecret List
 * Summary: FedSecret List
 */
func (client *Client) ListFederationSecretEx(request *ListFederationSecretRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListFederationSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListFederationSecretResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.secret.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取容器服务最新发布的版本，包括发布中和发布完成的，不是最新编辑保存的版本。
调antcloud.ldc.containerservice.revision.query获取第一条记录是最新编辑保存的版本。
 * Summary: 获取容器服务最新发布的版本
*/
func (client *Client) DescribeContainerserviceRevision(request *DescribeContainerserviceRevisionRequest) (_result *DescribeContainerserviceRevisionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeContainerserviceRevisionResponse{}
	_body, _err := client.DescribeContainerserviceRevisionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取容器服务最新发布的版本，包括发布中和发布完成的，不是最新编辑保存的版本。
调antcloud.ldc.containerservice.revision.query获取第一条记录是最新编辑保存的版本。
 * Summary: 获取容器服务最新发布的版本
*/
func (client *Client) DescribeContainerserviceRevisionEx(request *DescribeContainerserviceRevisionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeContainerserviceRevisionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeContainerserviceRevisionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.revision.describe"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取某一个版本的配置信息
 * Summary: 获取某一个版本的配置信息
 */
func (client *Client) GetContainerserviceRevision(request *GetContainerserviceRevisionRequest) (_result *GetContainerserviceRevisionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetContainerserviceRevisionResponse{}
	_body, _err := client.GetContainerserviceRevisionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取某一个版本的配置信息
 * Summary: 获取某一个版本的配置信息
 */
func (client *Client) GetContainerserviceRevisionEx(request *GetContainerserviceRevisionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetContainerserviceRevisionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetContainerserviceRevisionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.revision.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询容器服务版本列表
 * Summary: 查询容器服务版本列表
 */
func (client *Client) QueryContainerserviceRevision(request *QueryContainerserviceRevisionRequest) (_result *QueryContainerserviceRevisionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContainerserviceRevisionResponse{}
	_body, _err := client.QueryContainerserviceRevisionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询容器服务版本列表
 * Summary: 查询容器服务版本列表
 */
func (client *Client) QueryContainerserviceRevisionEx(request *QueryContainerserviceRevisionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContainerserviceRevisionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContainerserviceRevisionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.revision.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 为某一版本加上备注
 * Summary: 为某一版本加上备注
 */
func (client *Client) UpdateContainerserviceRevision(request *UpdateContainerserviceRevisionRequest) (_result *UpdateContainerserviceRevisionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateContainerserviceRevisionResponse{}
	_body, _err := client.UpdateContainerserviceRevisionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 为某一版本加上备注
 * Summary: 为某一版本加上备注
 */
func (client *Client) UpdateContainerserviceRevisionEx(request *UpdateContainerserviceRevisionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateContainerserviceRevisionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateContainerserviceRevisionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.revision.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 快速更新镜像
 * Summary: 快速更新镜像
 */
func (client *Client) UpdateContainerserviceImage(request *UpdateContainerserviceImageRequest) (_result *UpdateContainerserviceImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateContainerserviceImageResponse{}
	_body, _err := client.UpdateContainerserviceImageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 快速更新镜像
 * Summary: 快速更新镜像
 */
func (client *Client) UpdateContainerserviceImageEx(request *UpdateContainerserviceImageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateContainerserviceImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateContainerserviceImageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.image.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 快速更新容器服务副本数
 * Summary: 快速更新容器服务副本数
 */
func (client *Client) UpdateContainerserviceReplicas(request *UpdateContainerserviceReplicasRequest) (_result *UpdateContainerserviceReplicasResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateContainerserviceReplicasResponse{}
	_body, _err := client.UpdateContainerserviceReplicasEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 快速更新容器服务副本数
 * Summary: 快速更新容器服务副本数
 */
func (client *Client) UpdateContainerserviceReplicasEx(request *UpdateContainerserviceReplicasRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateContainerserviceReplicasResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateContainerserviceReplicasResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.replicas.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建容器应用服务。
 * Summary: 创建容器应用服务
 */
func (client *Client) CreateContainerservice(request *CreateContainerserviceRequest) (_result *CreateContainerserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContainerserviceResponse{}
	_body, _err := client.CreateContainerserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建容器应用服务。
 * Summary: 创建容器应用服务
 */
func (client *Client) CreateContainerserviceEx(request *CreateContainerserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContainerserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContainerserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 保存容器服务草稿。
 * Summary: 保存容器服务草稿
 */
func (client *Client) SaveContainerserviceRevision(request *SaveContainerserviceRevisionRequest) (_result *SaveContainerserviceRevisionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveContainerserviceRevisionResponse{}
	_body, _err := client.SaveContainerserviceRevisionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 保存容器服务草稿。
 * Summary: 保存容器服务草稿
 */
func (client *Client) SaveContainerserviceRevisionEx(request *SaveContainerserviceRevisionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveContainerserviceRevisionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveContainerserviceRevisionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.revision.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: container service 更新
 * Summary: container service 更新
 */
func (client *Client) UpdateContainerservice(request *UpdateContainerserviceRequest) (_result *UpdateContainerserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateContainerserviceResponse{}
	_body, _err := client.UpdateContainerserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: container service 更新
 * Summary: container service 更新
 */
func (client *Client) UpdateContainerserviceEx(request *UpdateContainerserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateContainerserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateContainerserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 检查对应容器服务是否存在。
 * Summary: 检查对应容器服务是否存在
 */
func (client *Client) ExistContainerservice(request *ExistContainerserviceRequest) (_result *ExistContainerserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExistContainerserviceResponse{}
	_body, _err := client.ExistContainerserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 检查对应容器服务是否存在。
 * Summary: 检查对应容器服务是否存在
 */
func (client *Client) ExistContainerserviceEx(request *ExistContainerserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExistContainerserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExistContainerserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.exist"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: get cluster basic info by name
 * Summary: getClusterBasicInfo
 */
func (client *Client) GetClusterBasicinfo(request *GetClusterBasicinfoRequest) (_result *GetClusterBasicinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetClusterBasicinfoResponse{}
	_body, _err := client.GetClusterBasicinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: get cluster basic info by name
 * Summary: getClusterBasicInfo
 */
func (client *Client) GetClusterBasicinfoEx(request *GetClusterBasicinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetClusterBasicinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetClusterBasicinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cluster.basicinfo.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: get cluster overview info
 * Summary: getClusterOverview
 */
func (client *Client) GetClusterOverviewinfo(request *GetClusterOverviewinfoRequest) (_result *GetClusterOverviewinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetClusterOverviewinfoResponse{}
	_body, _err := client.GetClusterOverviewinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: get cluster overview info
 * Summary: getClusterOverview
 */
func (client *Client) GetClusterOverviewinfoEx(request *GetClusterOverviewinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetClusterOverviewinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetClusterOverviewinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cluster.overviewinfo.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询部署单元。
 * Summary: 查询部署单元
 */
func (client *Client) QueryCell(request *QueryCellRequest) (_result *QueryCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCellResponse{}
	_body, _err := client.QueryCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询部署单元。
 * Summary: 查询部署单元
 */
func (client *Client) QueryCellEx(request *QueryCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cell.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: get pod overview infos of specific cluster
 * Summary: getPodOverviewInfo
 */
func (client *Client) GetClusterPodoverview(request *GetClusterPodoverviewRequest) (_result *GetClusterPodoverviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetClusterPodoverviewResponse{}
	_body, _err := client.GetClusterPodoverviewEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: get pod overview infos of specific cluster
 * Summary: getPodOverviewInfo
 */
func (client *Client) GetClusterPodoverviewEx(request *GetClusterPodoverviewRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetClusterPodoverviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetClusterPodoverviewResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cluster.podoverview.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: list all nodes info of specific cluster
 * Summary: listNodeInfo
 */
func (client *Client) ListClusterNodeinfo(request *ListClusterNodeinfoRequest) (_result *ListClusterNodeinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListClusterNodeinfoResponse{}
	_body, _err := client.ListClusterNodeinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: list all nodes info of specific cluster
 * Summary: listNodeInfo
 */
func (client *Client) ListClusterNodeinfoEx(request *ListClusterNodeinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListClusterNodeinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListClusterNodeinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cluster.nodeinfo.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: create namespace of a specific cluster
 * Summary: createNamespace
 */
func (client *Client) CreateClusterNamespace(request *CreateClusterNamespaceRequest) (_result *CreateClusterNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateClusterNamespaceResponse{}
	_body, _err := client.CreateClusterNamespaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: create namespace of a specific cluster
 * Summary: createNamespace
 */
func (client *Client) CreateClusterNamespaceEx(request *CreateClusterNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateClusterNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateClusterNamespaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cluster.namespace.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: list namespace
 * Summary: list namespace
 */
func (client *Client) ListClusterNamespace(request *ListClusterNamespaceRequest) (_result *ListClusterNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListClusterNamespaceResponse{}
	_body, _err := client.ListClusterNamespaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: list namespace
 * Summary: list namespace
 */
func (client *Client) ListClusterNamespaceEx(request *ListClusterNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListClusterNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListClusterNamespaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cluster.namespace.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: query namespace detail info
 * Summary: query namespace
 */
func (client *Client) QueryClusterNamespace(request *QueryClusterNamespaceRequest) (_result *QueryClusterNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryClusterNamespaceResponse{}
	_body, _err := client.QueryClusterNamespaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: query namespace detail info
 * Summary: query namespace
 */
func (client *Client) QueryClusterNamespaceEx(request *QueryClusterNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryClusterNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryClusterNamespaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cluster.namespace.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: delete namespace of specific cluster
 * Summary: delete namespace
 */
func (client *Client) DeleteClusterNamespace(request *DeleteClusterNamespaceRequest) (_result *DeleteClusterNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteClusterNamespaceResponse{}
	_body, _err := client.DeleteClusterNamespaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: delete namespace of specific cluster
 * Summary: delete namespace
 */
func (client *Client) DeleteClusterNamespaceEx(request *DeleteClusterNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteClusterNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteClusterNamespaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cluster.namespace.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: get node detail info by name
 * Summary: get node detail info
 */
func (client *Client) GetClusterNodeinfo(request *GetClusterNodeinfoRequest) (_result *GetClusterNodeinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetClusterNodeinfoResponse{}
	_body, _err := client.GetClusterNodeinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: get node detail info by name
 * Summary: get node detail info
 */
func (client *Client) GetClusterNodeinfoEx(request *GetClusterNodeinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetClusterNodeinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetClusterNodeinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cluster.nodeinfo.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ImagePullSecret创建
 * Summary: ImagePullSecret创建
 */
func (client *Client) CreateFederationImagepullsecret(request *CreateFederationImagepullsecretRequest) (_result *CreateFederationImagepullsecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFederationImagepullsecretResponse{}
	_body, _err := client.CreateFederationImagepullsecretEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ImagePullSecret创建
 * Summary: ImagePullSecret创建
 */
func (client *Client) CreateFederationImagepullsecretEx(request *CreateFederationImagepullsecretRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFederationImagepullsecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFederationImagepullsecretResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.imagepullsecret.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: list all pods of specific node
 * Summary: listtPodsOfNode
 */
func (client *Client) ListClusterNodepod(request *ListClusterNodepodRequest) (_result *ListClusterNodepodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListClusterNodepodResponse{}
	_body, _err := client.ListClusterNodepodEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: list all pods of specific node
 * Summary: listtPodsOfNode
 */
func (client *Client) ListClusterNodepodEx(request *ListClusterNodepodRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListClusterNodepodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListClusterNodepodResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cluster.nodepod.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: list all events of specific node
 * Summary: listEventOfNode
 */
func (client *Client) ListClusterNodeevent(request *ListClusterNodeeventRequest) (_result *ListClusterNodeeventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListClusterNodeeventResponse{}
	_body, _err := client.ListClusterNodeeventEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: list all events of specific node
 * Summary: listEventOfNode
 */
func (client *Client) ListClusterNodeeventEx(request *ListClusterNodeeventRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListClusterNodeeventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListClusterNodeeventResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cluster.nodeevent.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分页查询发布单列表
 * Summary: 分页查询发布单列表
 */
func (client *Client) QueryOpsplan(request *QueryOpsplanRequest) (_result *QueryOpsplanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOpsplanResponse{}
	_body, _err := client.QueryOpsplanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分页查询发布单列表
 * Summary: 分页查询发布单列表
 */
func (client *Client) QueryOpsplanEx(request *QueryOpsplanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOpsplanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOpsplanResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.opsplan.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分页查询发布单状态概要列表
 * Summary: 分页查询发布单状态概要列表
 */
func (client *Client) QueryOpsplanStatesummary(request *QueryOpsplanStatesummaryRequest) (_result *QueryOpsplanStatesummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOpsplanStatesummaryResponse{}
	_body, _err := client.QueryOpsplanStatesummaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分页查询发布单状态概要列表
 * Summary: 分页查询发布单状态概要列表
 */
func (client *Client) QueryOpsplanStatesummaryEx(request *QueryOpsplanStatesummaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOpsplanStatesummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOpsplanStatesummaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.opsplan.statesummary.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发布/运维单详情查询
 * Summary: 发布/运维单详情查询
 */
func (client *Client) QueryOpsplanDetail(request *QueryOpsplanDetailRequest) (_result *QueryOpsplanDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOpsplanDetailResponse{}
	_body, _err := client.QueryOpsplanDetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发布/运维单详情查询
 * Summary: 发布/运维单详情查询
 */
func (client *Client) QueryOpsplanDetailEx(request *QueryOpsplanDetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOpsplanDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOpsplanDetailResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.opsplan.detail.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询公共技术栈类型，如SOFA|SOFABOOT，包括（如果存在的话）用户自定义技术栈类型，如 MYBANK_SOFA
 * Summary: 查询公共的以及租户内自定义技术栈分类
 */
func (client *Client) QueryBuildpackTechstack(request *QueryBuildpackTechstackRequest) (_result *QueryBuildpackTechstackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackTechstackResponse{}
	_body, _err := client.QueryBuildpackTechstackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询公共技术栈类型，如SOFA|SOFABOOT，包括（如果存在的话）用户自定义技术栈类型，如 MYBANK_SOFA
 * Summary: 查询公共的以及租户内自定义技术栈分类
 */
func (client *Client) QueryBuildpackTechstackEx(request *QueryBuildpackTechstackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackTechstackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackTechstackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.buildpack.techstack.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取指定技术栈类别下全局可见的云原生技术栈版本以及租户内扩展的自定义版本
e.g: ce4456_jdk7_tengine, enhanced_ce4456_jdk7_tengine16
 * Summary: 获取云原生技术栈小版本列表信息
*/
func (client *Client) QueryBuildpackNativetechstackversion(request *QueryBuildpackNativetechstackversionRequest) (_result *QueryBuildpackNativetechstackversionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackNativetechstackversionResponse{}
	_body, _err := client.QueryBuildpackNativetechstackversionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取指定技术栈类别下全局可见的云原生技术栈版本以及租户内扩展的自定义版本
e.g: ce4456_jdk7_tengine, enhanced_ce4456_jdk7_tengine16
 * Summary: 获取云原生技术栈小版本列表信息
*/
func (client *Client) QueryBuildpackNativetechstackversionEx(request *QueryBuildpackNativetechstackversionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackNativetechstackversionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackNativetechstackversionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.buildpack.nativetechstackversion.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新容器应用服务的云原生技术栈版本。
e.g: 更新为 ce44610
 * Summary: 更新容器应用服务对应的云原生技术栈版本
*/
func (client *Client) UpdateContainerserviceNativebpversion(request *UpdateContainerserviceNativebpversionRequest) (_result *UpdateContainerserviceNativebpversionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateContainerserviceNativebpversionResponse{}
	_body, _err := client.UpdateContainerserviceNativebpversionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新容器应用服务的云原生技术栈版本。
e.g: 更新为 ce44610
 * Summary: 更新容器应用服务对应的云原生技术栈版本
*/
func (client *Client) UpdateContainerserviceNativebpversionEx(request *UpdateContainerserviceNativebpversionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateContainerserviceNativebpversionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateContainerserviceNativebpversionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.nativebpversion.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 生成Dockerfile命令列表并获取
 * Summary: 获取容器服务对应的Dockerfile
 */
func (client *Client) LoadContainerserviceDockerfile(request *LoadContainerserviceDockerfileRequest) (_result *LoadContainerserviceDockerfileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &LoadContainerserviceDockerfileResponse{}
	_body, _err := client.LoadContainerserviceDockerfileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 生成Dockerfile命令列表并获取
 * Summary: 获取容器服务对应的Dockerfile
 */
func (client *Client) LoadContainerserviceDockerfileEx(request *LoadContainerserviceDockerfileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *LoadContainerserviceDockerfileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &LoadContainerserviceDockerfileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.dockerfile.load"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建云原生技术栈版本
 * Summary: 创建云原生技术栈版本
 */
func (client *Client) CreateBuildpackNativetechstackversion(request *CreateBuildpackNativetechstackversionRequest) (_result *CreateBuildpackNativetechstackversionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBuildpackNativetechstackversionResponse{}
	_body, _err := client.CreateBuildpackNativetechstackversionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建云原生技术栈版本
 * Summary: 创建云原生技术栈版本
 */
func (client *Client) CreateBuildpackNativetechstackversionEx(request *CreateBuildpackNativetechstackversionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBuildpackNativetechstackversionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBuildpackNativetechstackversionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.buildpack.nativetechstackversion.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: get zonelist of each workspace in a workspace group
 * Summary: getZoneListOfWSG
 */
func (client *Client) ListMulticlusterZone(request *ListMulticlusterZoneRequest) (_result *ListMulticlusterZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListMulticlusterZoneResponse{}
	_body, _err := client.ListMulticlusterZoneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: get zonelist of each workspace in a workspace group
 * Summary: getZoneListOfWSG
 */
func (client *Client) ListMulticlusterZoneEx(request *ListMulticlusterZoneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListMulticlusterZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListMulticlusterZoneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.multicluster.zone.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发布/运维单发布任务操作，发布单任务是发布单可以操作的最小单元，操作类型包括重试、跳过、确认等操作
 * Summary: 发布/运维单发布任务操作
 */
func (client *Client) ExecOpsplanAppopstask(request *ExecOpsplanAppopstaskRequest) (_result *ExecOpsplanAppopstaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecOpsplanAppopstaskResponse{}
	_body, _err := client.ExecOpsplanAppopstaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发布/运维单发布任务操作，发布单任务是发布单可以操作的最小单元，操作类型包括重试、跳过、确认等操作
 * Summary: 发布/运维单发布任务操作
 */
func (client *Client) ExecOpsplanAppopstaskEx(request *ExecOpsplanAppopstaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecOpsplanAppopstaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecOpsplanAppopstaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.opsplan.appopstask.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发布单进度查询，包括发布单状态机应用整体的执行情况以及每个应用内部的执行进度状态汇总
 * Summary: 发布单进度查询
 */
func (client *Client) QueryOpsplanProgress(request *QueryOpsplanProgressRequest) (_result *QueryOpsplanProgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOpsplanProgressResponse{}
	_body, _err := client.QueryOpsplanProgressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发布单进度查询，包括发布单状态机应用整体的执行情况以及每个应用内部的执行进度状态汇总
 * Summary: 发布单进度查询
 */
func (client *Client) QueryOpsplanProgressEx(request *QueryOpsplanProgressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOpsplanProgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOpsplanProgressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.opsplan.progress.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发布(运维)单应进度查询
 * Summary: 发布(运维)单应进度查询
 */
func (client *Client) QueryOpsplanAppprogress(request *QueryOpsplanAppprogressRequest) (_result *QueryOpsplanAppprogressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOpsplanAppprogressResponse{}
	_body, _err := client.QueryOpsplanAppprogressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发布(运维)单应进度查询
 * Summary: 发布(运维)单应进度查询
 */
func (client *Client) QueryOpsplanAppprogressEx(request *QueryOpsplanAppprogressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOpsplanAppprogressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOpsplanAppprogressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.opsplan.appprogress.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 容器服务pod列表
 * Summary: 容器服务pod列表
 */
func (client *Client) ListContainerservicePod(request *ListContainerservicePodRequest) (_result *ListContainerservicePodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListContainerservicePodResponse{}
	_body, _err := client.ListContainerservicePodEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 容器服务pod列表
 * Summary: 容器服务pod列表
 */
func (client *Client) ListContainerservicePodEx(request *ListContainerservicePodRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListContainerservicePodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListContainerservicePodResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.pod.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: To list kubeevents
 * Summary: To list kubeevents
 */
func (client *Client) ListContainerserviceKubeevents(request *ListContainerserviceKubeeventsRequest) (_result *ListContainerserviceKubeeventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListContainerserviceKubeeventsResponse{}
	_body, _err := client.ListContainerserviceKubeeventsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: To list kubeevents
 * Summary: To list kubeevents
 */
func (client *Client) ListContainerserviceKubeeventsEx(request *ListContainerserviceKubeeventsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListContainerserviceKubeeventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListContainerserviceKubeeventsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.kubeevents.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询Pod事件列表
 * Summary: 查询Pod事件列表
 */
func (client *Client) ListPodEvents(request *ListPodEventsRequest) (_result *ListPodEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListPodEventsResponse{}
	_body, _err := client.ListPodEventsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询Pod事件列表
 * Summary: 查询Pod事件列表
 */
func (client *Client) ListPodEventsEx(request *ListPodEventsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListPodEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListPodEventsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.pod.events.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询Pod事件列表
 * Summary: 查询Pod容器列表
 */
func (client *Client) ListPodContainers(request *ListPodContainersRequest) (_result *ListPodContainersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListPodContainersResponse{}
	_body, _err := client.ListPodContainersEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询Pod事件列表
 * Summary: 查询Pod容器列表
 */
func (client *Client) ListPodContainersEx(request *ListPodContainersRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListPodContainersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListPodContainersResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.pod.containers.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: query replica cell
 * Summary: query replica cell
 */
func (client *Client) QueryContainerserviceCell(request *QueryContainerserviceCellRequest) (_result *QueryContainerserviceCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContainerserviceCellResponse{}
	_body, _err := client.QueryContainerserviceCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: query replica cell
 * Summary: query replica cell
 */
func (client *Client) QueryContainerserviceCellEx(request *QueryContainerserviceCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContainerserviceCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContainerserviceCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.cell.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建逻辑单元
 * Summary: 创建逻辑单元
 */
func (client *Client) CreateCellgroup(request *CreateCellgroupRequest) (_result *CreateCellgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCellgroupResponse{}
	_body, _err := client.CreateCellgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建逻辑单元
 * Summary: 创建逻辑单元
 */
func (client *Client) CreateCellgroupEx(request *CreateCellgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCellgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateCellgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cellgroup.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取cellgroup列表
 * Summary: 获取cellgroup列表
 */
func (client *Client) ListCellgroup(request *ListCellgroupRequest) (_result *ListCellgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListCellgroupResponse{}
	_body, _err := client.ListCellgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取cellgroup列表
 * Summary: 获取cellgroup列表
 */
func (client *Client) ListCellgroupEx(request *ListCellgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListCellgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListCellgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cellgroup.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 配置逻辑单元灾备信息
 * Summary: 配置逻辑单元灾备信息
 */
func (client *Client) UpdateCellgroupDisasterinfo(request *UpdateCellgroupDisasterinfoRequest) (_result *UpdateCellgroupDisasterinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateCellgroupDisasterinfoResponse{}
	_body, _err := client.UpdateCellgroupDisasterinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 配置逻辑单元灾备信息
 * Summary: 配置逻辑单元灾备信息
 */
func (client *Client) UpdateCellgroupDisasterinfoEx(request *UpdateCellgroupDisasterinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateCellgroupDisasterinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateCellgroupDisasterinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cellgroup.disasterinfo.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除逻辑单元
 * Summary: 删除逻辑单元
 */
func (client *Client) DeleteCellgroup(request *DeleteCellgroupRequest) (_result *DeleteCellgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteCellgroupResponse{}
	_body, _err := client.DeleteCellgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除逻辑单元
 * Summary: 删除逻辑单元
 */
func (client *Client) DeleteCellgroupEx(request *DeleteCellgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteCellgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteCellgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cellgroup.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询部署单元列表
 * Summary: 查询部署单元列表
 */
func (client *Client) ListCell(request *ListCellRequest) (_result *ListCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListCellResponse{}
	_body, _err := client.ListCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询部署单元列表
 * Summary: 查询部署单元列表
 */
func (client *Client) ListCellEx(request *ListCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cell.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建部署单元。
 * Summary: 创建部署单元
 */
func (client *Client) CreateCell(request *CreateCellRequest) (_result *CreateCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCellResponse{}
	_body, _err := client.CreateCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建部署单元。
 * Summary: 创建部署单元
 */
func (client *Client) CreateCellEx(request *CreateCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cell.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除部署单元。
 * Summary: 删除部署单元
 */
func (client *Client) DeleteCell(request *DeleteCellRequest) (_result *DeleteCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteCellResponse{}
	_body, _err := client.DeleteCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除部署单元。
 * Summary: 删除部署单元
 */
func (client *Client) DeleteCellEx(request *DeleteCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cell.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除pod
 * Summary: 删除pod
 */
func (client *Client) DeletePod(request *DeletePodRequest) (_result *DeletePodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeletePodResponse{}
	_body, _err := client.DeletePodEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除pod
 * Summary: 删除pod
 */
func (client *Client) DeletePodEx(request *DeletePodRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeletePodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeletePodResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.pod.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询环境部署单元拓扑
 * Summary: 查询环境部署单元拓扑
 */
func (client *Client) GetWorkspacegroupTopology(request *GetWorkspacegroupTopologyRequest) (_result *GetWorkspacegroupTopologyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkspacegroupTopologyResponse{}
	_body, _err := client.GetWorkspacegroupTopologyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询环境部署单元拓扑
 * Summary: 查询环境部署单元拓扑
 */
func (client *Client) GetWorkspacegroupTopologyEx(request *GetWorkspacegroupTopologyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkspacegroupTopologyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetWorkspacegroupTopologyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.workspacegroup.topology.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 修改 cell 权重
 * Summary: 修改 cell 权重
 */
func (client *Client) UpdateFlowCellweight(request *UpdateFlowCellweightRequest) (_result *UpdateFlowCellweightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFlowCellweightResponse{}
	_body, _err := client.UpdateFlowCellweightEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 修改 cell 权重
 * Summary: 修改 cell 权重
 */
func (client *Client) UpdateFlowCellweightEx(request *UpdateFlowCellweightRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFlowCellweightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateFlowCellweightResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.cellweight.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: uid 分片调整
 * Summary: uid 分片调整
 */
func (client *Client) UpdateFlowUidrange(request *UpdateFlowUidrangeRequest) (_result *UpdateFlowUidrangeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFlowUidrangeResponse{}
	_body, _err := client.UpdateFlowUidrangeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: uid 分片调整
 * Summary: uid 分片调整
 */
func (client *Client) UpdateFlowUidrangeEx(request *UpdateFlowUidrangeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFlowUidrangeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateFlowUidrangeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.uidrange.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 弹出 UID 到弹性部署单元
 * Summary: 弹出 UID 到弹性部署单元
 */
func (client *Client) EnableFlowElasticuid(request *EnableFlowElasticuidRequest) (_result *EnableFlowElasticuidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &EnableFlowElasticuidResponse{}
	_body, _err := client.EnableFlowElasticuidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 弹出 UID 到弹性部署单元
 * Summary: 弹出 UID 到弹性部署单元
 */
func (client *Client) EnableFlowElasticuidEx(request *EnableFlowElasticuidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *EnableFlowElasticuidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnableFlowElasticuidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticuid.enable"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 弹回 UID 分片
 * Summary: 弹回 UID 分片
 */
func (client *Client) DisableFlowElasticuid(request *DisableFlowElasticuidRequest) (_result *DisableFlowElasticuidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DisableFlowElasticuidResponse{}
	_body, _err := client.DisableFlowElasticuidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 弹回 UID 分片
 * Summary: 弹回 UID 分片
 */
func (client *Client) DisableFlowElasticuidEx(request *DisableFlowElasticuidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DisableFlowElasticuidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DisableFlowElasticuidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticuid.disable"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 导出当前的流量规则
 * Summary: 导出当前的流量规则
 */
func (client *Client) ExportFlowRule(request *ExportFlowRuleRequest) (_result *ExportFlowRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportFlowRuleResponse{}
	_body, _err := client.ExportFlowRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 导出当前的流量规则
 * Summary: 导出当前的流量规则
 */
func (client *Client) ExportFlowRuleEx(request *ExportFlowRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportFlowRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExportFlowRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.rule.export"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 推送流量规则
 * Summary: 推送流量规则
 */
func (client *Client) PushFlowRule(request *PushFlowRuleRequest) (_result *PushFlowRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PushFlowRuleResponse{}
	_body, _err := client.PushFlowRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 推送流量规则
 * Summary: 推送流量规则
 */
func (client *Client) PushFlowRuleEx(request *PushFlowRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PushFlowRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PushFlowRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.rule.push"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建弹性规则
 * Summary: 创建弹性规则
 */
func (client *Client) AddFlowElasticrule(request *AddFlowElasticruleRequest) (_result *AddFlowElasticruleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddFlowElasticruleResponse{}
	_body, _err := client.AddFlowElasticruleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建弹性规则
 * Summary: 创建弹性规则
 */
func (client *Client) AddFlowElasticruleEx(request *AddFlowElasticruleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddFlowElasticruleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddFlowElasticruleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticrule.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新弹性规则
 * Summary: 更新弹性规则
 */
func (client *Client) UpdateFlowElasticrule(request *UpdateFlowElasticruleRequest) (_result *UpdateFlowElasticruleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFlowElasticruleResponse{}
	_body, _err := client.UpdateFlowElasticruleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新弹性规则
 * Summary: 更新弹性规则
 */
func (client *Client) UpdateFlowElasticruleEx(request *UpdateFlowElasticruleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFlowElasticruleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateFlowElasticruleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticrule.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除弹性规则
 * Summary: 删除弹性规则
 */
func (client *Client) DeleteFlowElasticrule(request *DeleteFlowElasticruleRequest) (_result *DeleteFlowElasticruleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFlowElasticruleResponse{}
	_body, _err := client.DeleteFlowElasticruleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除弹性规则
 * Summary: 删除弹性规则
 */
func (client *Client) DeleteFlowElasticruleEx(request *DeleteFlowElasticruleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFlowElasticruleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteFlowElasticruleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticrule.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 添加弹性子规则
 * Summary: 添加弹性子规则
 */
func (client *Client) AddFlowElasticsubrule(request *AddFlowElasticsubruleRequest) (_result *AddFlowElasticsubruleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddFlowElasticsubruleResponse{}
	_body, _err := client.AddFlowElasticsubruleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 添加弹性子规则
 * Summary: 添加弹性子规则
 */
func (client *Client) AddFlowElasticsubruleEx(request *AddFlowElasticsubruleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddFlowElasticsubruleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddFlowElasticsubruleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticsubrule.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除子弹性规则
 * Summary: 删除子弹性规则
 */
func (client *Client) DeleteFlowElasticsubrule(request *DeleteFlowElasticsubruleRequest) (_result *DeleteFlowElasticsubruleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFlowElasticsubruleResponse{}
	_body, _err := client.DeleteFlowElasticsubruleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除子弹性规则
 * Summary: 删除子弹性规则
 */
func (client *Client) DeleteFlowElasticsubruleEx(request *DeleteFlowElasticsubruleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFlowElasticsubruleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteFlowElasticsubruleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticsubrule.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量更新弹性规则状态
 * Summary: 批量更新弹性规则状态
 */
func (client *Client) UpdateFlowElasticrulestatus(request *UpdateFlowElasticrulestatusRequest) (_result *UpdateFlowElasticrulestatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFlowElasticrulestatusResponse{}
	_body, _err := client.UpdateFlowElasticrulestatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量更新弹性规则状态
 * Summary: 批量更新弹性规则状态
 */
func (client *Client) UpdateFlowElasticrulestatusEx(request *UpdateFlowElasticrulestatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFlowElasticrulestatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateFlowElasticrulestatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticrulestatus.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除弹性规则
 * Summary: 批量删除弹性规则
 */
func (client *Client) BatchdeleteFlowElasticrule(request *BatchdeleteFlowElasticruleRequest) (_result *BatchdeleteFlowElasticruleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteFlowElasticruleResponse{}
	_body, _err := client.BatchdeleteFlowElasticruleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除弹性规则
 * Summary: 批量删除弹性规则
 */
func (client *Client) BatchdeleteFlowElasticruleEx(request *BatchdeleteFlowElasticruleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteFlowElasticruleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteFlowElasticruleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticrule.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建弹性场景
 * Summary: 创建弹性场景
 */
func (client *Client) CreateFlowElasticscene(request *CreateFlowElasticsceneRequest) (_result *CreateFlowElasticsceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFlowElasticsceneResponse{}
	_body, _err := client.CreateFlowElasticsceneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建弹性场景
 * Summary: 创建弹性场景
 */
func (client *Client) CreateFlowElasticsceneEx(request *CreateFlowElasticsceneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFlowElasticsceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFlowElasticsceneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticscene.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 修改弹性场景
 * Summary: 修改弹性场景
 */
func (client *Client) UpdateFlowElasticscene(request *UpdateFlowElasticsceneRequest) (_result *UpdateFlowElasticsceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFlowElasticsceneResponse{}
	_body, _err := client.UpdateFlowElasticsceneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 修改弹性场景
 * Summary: 修改弹性场景
 */
func (client *Client) UpdateFlowElasticsceneEx(request *UpdateFlowElasticsceneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFlowElasticsceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateFlowElasticsceneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticscene.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除弹性场景
 * Summary: 删除弹性场景
 */
func (client *Client) DeleteFlowElasticscene(request *DeleteFlowElasticsceneRequest) (_result *DeleteFlowElasticsceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFlowElasticsceneResponse{}
	_body, _err := client.DeleteFlowElasticsceneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除弹性场景
 * Summary: 删除弹性场景
 */
func (client *Client) DeleteFlowElasticsceneEx(request *DeleteFlowElasticsceneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFlowElasticsceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteFlowElasticsceneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticscene.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 配置弹性值
 * Summary: 配置弹性值
 */
func (client *Client) SetFlowElasticvalue(request *SetFlowElasticvalueRequest) (_result *SetFlowElasticvalueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetFlowElasticvalueResponse{}
	_body, _err := client.SetFlowElasticvalueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 配置弹性值
 * Summary: 配置弹性值
 */
func (client *Client) SetFlowElasticvalueEx(request *SetFlowElasticvalueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetFlowElasticvalueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetFlowElasticvalueResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticvalue.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 恢复弹性值
 * Summary: 恢复弹性值
 */
func (client *Client) DisableFlowElasticvalue(request *DisableFlowElasticvalueRequest) (_result *DisableFlowElasticvalueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DisableFlowElasticvalueResponse{}
	_body, _err := client.DisableFlowElasticvalueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 恢复弹性值
 * Summary: 恢复弹性值
 */
func (client *Client) DisableFlowElasticvalueEx(request *DisableFlowElasticvalueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DisableFlowElasticvalueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DisableFlowElasticvalueResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticvalue.disable"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建站点
 * Summary: 创建站点
 */
func (client *Client) CreateFlowSite(request *CreateFlowSiteRequest) (_result *CreateFlowSiteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFlowSiteResponse{}
	_body, _err := client.CreateFlowSiteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建站点
 * Summary: 创建站点
 */
func (client *Client) CreateFlowSiteEx(request *CreateFlowSiteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFlowSiteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFlowSiteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.site.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 修改站点信息
 * Summary: 修改站点信息
 */
func (client *Client) UpdateFlowSite(request *UpdateFlowSiteRequest) (_result *UpdateFlowSiteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFlowSiteResponse{}
	_body, _err := client.UpdateFlowSiteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 修改站点信息
 * Summary: 修改站点信息
 */
func (client *Client) UpdateFlowSiteEx(request *UpdateFlowSiteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFlowSiteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateFlowSiteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.site.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除站点
 * Summary: 删除站点
 */
func (client *Client) DeleteFlowSite(request *DeleteFlowSiteRequest) (_result *DeleteFlowSiteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFlowSiteResponse{}
	_body, _err := client.DeleteFlowSiteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除站点
 * Summary: 删除站点
 */
func (client *Client) DeleteFlowSiteEx(request *DeleteFlowSiteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFlowSiteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteFlowSiteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.site.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 指定应用或指定pods创建重启运维单
 * Summary: 创建重启运维单
 */
func (client *Client) CreateOpsplanRestart(request *CreateOpsplanRestartRequest) (_result *CreateOpsplanRestartResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateOpsplanRestartResponse{}
	_body, _err := client.CreateOpsplanRestartEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 指定应用或指定pods创建重启运维单
 * Summary: 创建重启运维单
 */
func (client *Client) CreateOpsplanRestartEx(request *CreateOpsplanRestartRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateOpsplanRestartResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateOpsplanRestartResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.opsplan.restart.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 容器应用服务revision添加备注
 * Summary: 容器应用服务revision添加备注
 */
func (client *Client) UpdateContainerserviceComment(request *UpdateContainerserviceCommentRequest) (_result *UpdateContainerserviceCommentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateContainerserviceCommentResponse{}
	_body, _err := client.UpdateContainerserviceCommentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 容器应用服务revision添加备注
 * Summary: 容器应用服务revision添加备注
 */
func (client *Client) UpdateContainerserviceCommentEx(request *UpdateContainerserviceCommentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateContainerserviceCommentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateContainerserviceCommentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.comment.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 回滚容器服务到指定版本
 * Summary: 回滚容器服务到指定版本
 */
func (client *Client) RollbackContainerserviceDeployment(request *RollbackContainerserviceDeploymentRequest) (_result *RollbackContainerserviceDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RollbackContainerserviceDeploymentResponse{}
	_body, _err := client.RollbackContainerserviceDeploymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 回滚容器服务到指定版本
 * Summary: 回滚容器服务到指定版本
 */
func (client *Client) RollbackContainerserviceDeploymentEx(request *RollbackContainerserviceDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RollbackContainerserviceDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RollbackContainerserviceDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.deployment.rollback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询 uid 信息
 * Summary: 查询 uid 信息
 */
func (client *Client) QueryFlowUidinfo(request *QueryFlowUidinfoRequest) (_result *QueryFlowUidinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFlowUidinfoResponse{}
	_body, _err := client.QueryFlowUidinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询 uid 信息
 * Summary: 查询 uid 信息
 */
func (client *Client) QueryFlowUidinfoEx(request *QueryFlowUidinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFlowUidinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFlowUidinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.uidinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询站点
 * Summary: 查询站点
 */
func (client *Client) QueryFlowSite(request *QueryFlowSiteRequest) (_result *QueryFlowSiteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFlowSiteResponse{}
	_body, _err := client.QueryFlowSiteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询站点
 * Summary: 查询站点
 */
func (client *Client) QueryFlowSiteEx(request *QueryFlowSiteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFlowSiteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFlowSiteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.site.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询部署单元信息
 * Summary: 查询部署单元信息
 */
func (client *Client) GetCell(request *GetCellRequest) (_result *GetCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetCellResponse{}
	_body, _err := client.GetCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询部署单元信息
 * Summary: 查询部署单元信息
 */
func (client *Client) GetCellEx(request *GetCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cell.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询逻辑单元信息。
 * Summary: 查询逻辑单元信息。
 */
func (client *Client) GetCellgroup(request *GetCellgroupRequest) (_result *GetCellgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetCellgroupResponse{}
	_body, _err := client.GetCellgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询逻辑单元信息。
 * Summary: 查询逻辑单元信息。
 */
func (client *Client) GetCellgroupEx(request *GetCellgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetCellgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetCellgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cellgroup.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新部署单元信息。
 * Summary: 更新部署单元信息。
 */
func (client *Client) UpdateCell(request *UpdateCellRequest) (_result *UpdateCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateCellResponse{}
	_body, _err := client.UpdateCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新部署单元信息。
 * Summary: 更新部署单元信息。
 */
func (client *Client) UpdateCellEx(request *UpdateCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cell.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询Pod/容器事件列表
 * Summary: 查询Pod/容器事件列表
 */
func (client *Client) ListEvents(request *ListEventsRequest) (_result *ListEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListEventsResponse{}
	_body, _err := client.ListEventsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询Pod/容器事件列表
 * Summary: 查询Pod/容器事件列表
 */
func (client *Client) ListEventsEx(request *ListEventsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListEventsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.events.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取地域信息
 * Summary: 获取地域信息
 */
func (client *Client) ListRegion(request *ListRegionRequest) (_result *ListRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRegionResponse{}
	_body, _err := client.ListRegionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取地域信息
 * Summary: 获取地域信息
 */
func (client *Client) ListRegionEx(request *ListRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListRegionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.region.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 可用区列表
 * Summary: 可用区列表
 */
func (client *Client) ListZone(request *ListZoneRequest) (_result *ListZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListZoneResponse{}
	_body, _err := client.ListZoneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 可用区列表
 * Summary: 可用区列表
 */
func (client *Client) ListZoneEx(request *ListZoneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListZoneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.zone.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询pod下container 日志
 * Summary: 查询pod日志
 */
func (client *Client) QueryPodLog(request *QueryPodLogRequest) (_result *QueryPodLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryPodLogResponse{}
	_body, _err := client.QueryPodLogEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询pod下container 日志
 * Summary: 查询pod日志
 */
func (client *Client) QueryPodLogEx(request *QueryPodLogRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryPodLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryPodLogResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.pod.log.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建spanner集群
 * Summary: 创建spanner集群
 */
func (client *Client) CreateSpannerCluster(request *CreateSpannerClusterRequest) (_result *CreateSpannerClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSpannerClusterResponse{}
	_body, _err := client.CreateSpannerClusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建spanner集群
 * Summary: 创建spanner集群
 */
func (client *Client) CreateSpannerClusterEx(request *CreateSpannerClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSpannerClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSpannerClusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.spanner.cluster.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取集群详情
 * Summary: 获取集群详情
 */
func (client *Client) GetSpannerCluster(request *GetSpannerClusterRequest) (_result *GetSpannerClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSpannerClusterResponse{}
	_body, _err := client.GetSpannerClusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取集群详情
 * Summary: 获取集群详情
 */
func (client *Client) GetSpannerClusterEx(request *GetSpannerClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSpannerClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSpannerClusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.spanner.cluster.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 扩容spanner集群
 * Summary: 扩容spanner集群
 */
func (client *Client) ScaleSpannerCluster(request *ScaleSpannerClusterRequest) (_result *ScaleSpannerClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ScaleSpannerClusterResponse{}
	_body, _err := client.ScaleSpannerClusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 扩容spanner集群
 * Summary: 扩容spanner集群
 */
func (client *Client) ScaleSpannerClusterEx(request *ScaleSpannerClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ScaleSpannerClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ScaleSpannerClusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.spanner.cluster.scale"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询集群列表
 * Summary: 查询集群列表
 */
func (client *Client) QuerySpannerCluster(request *QuerySpannerClusterRequest) (_result *QuerySpannerClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySpannerClusterResponse{}
	_body, _err := client.QuerySpannerClusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询集群列表
 * Summary: 查询集群列表
 */
func (client *Client) QuerySpannerClusterEx(request *QuerySpannerClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySpannerClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySpannerClusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.spanner.cluster.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新spanner集群状态
 * Summary: 更新spanner集群状态
 */
func (client *Client) UpdateSpannerClusterstatus(request *UpdateSpannerClusterstatusRequest) (_result *UpdateSpannerClusterstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSpannerClusterstatusResponse{}
	_body, _err := client.UpdateSpannerClusterstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新spanner集群状态
 * Summary: 更新spanner集群状态
 */
func (client *Client) UpdateSpannerClusterstatusEx(request *UpdateSpannerClusterstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSpannerClusterstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSpannerClusterstatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.spanner.clusterstatus.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新集群单元状态
 * Summary: 更新集群单元状态
 */
func (client *Client) UpdateSpannerUnitstatus(request *UpdateSpannerUnitstatusRequest) (_result *UpdateSpannerUnitstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSpannerUnitstatusResponse{}
	_body, _err := client.UpdateSpannerUnitstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新集群单元状态
 * Summary: 更新集群单元状态
 */
func (client *Client) UpdateSpannerUnitstatusEx(request *UpdateSpannerUnitstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSpannerUnitstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSpannerUnitstatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.spanner.unitstatus.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消应用服务发布|运维
 * Summary: 取消应用服务发布|运维
 */
func (client *Client) CancelOpsplanService(request *CancelOpsplanServiceRequest) (_result *CancelOpsplanServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelOpsplanServiceResponse{}
	_body, _err := client.CancelOpsplanServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消应用服务发布|运维
 * Summary: 取消应用服务发布|运维
 */
func (client *Client) CancelOpsplanServiceEx(request *CancelOpsplanServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelOpsplanServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelOpsplanServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.opsplan.service.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询系统配置url
 * Summary: 系统url查询
 */
func (client *Client) ListSystemUrl(request *ListSystemUrlRequest) (_result *ListSystemUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSystemUrlResponse{}
	_body, _err := client.ListSystemUrlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询系统配置url
 * Summary: 系统url查询
 */
func (client *Client) ListSystemUrlEx(request *ListSystemUrlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSystemUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSystemUrlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.system.url.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询流量推送记录
 * Summary: 查询
 */
func (client *Client) QueryFlowRecord(request *QueryFlowRecordRequest) (_result *QueryFlowRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFlowRecordResponse{}
	_body, _err := client.QueryFlowRecordEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询流量推送记录
 * Summary: 查询
 */
func (client *Client) QueryFlowRecordEx(request *QueryFlowRecordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFlowRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFlowRecordResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.record.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 保存环境关联
 * Summary: 保存环境关联
 */
func (client *Client) SaveFlowEnvrel(request *SaveFlowEnvrelRequest) (_result *SaveFlowEnvrelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveFlowEnvrelResponse{}
	_body, _err := client.SaveFlowEnvrelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 保存环境关联
 * Summary: 保存环境关联
 */
func (client *Client) SaveFlowEnvrelEx(request *SaveFlowEnvrelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveFlowEnvrelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveFlowEnvrelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.envrel.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除环境关联
 * Summary: 删除环境关联
 */
func (client *Client) DeleteFlowEnvrel(request *DeleteFlowEnvrelRequest) (_result *DeleteFlowEnvrelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFlowEnvrelResponse{}
	_body, _err := client.DeleteFlowEnvrelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除环境关联
 * Summary: 删除环境关联
 */
func (client *Client) DeleteFlowEnvrelEx(request *DeleteFlowEnvrelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFlowEnvrelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteFlowEnvrelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.envrel.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询关联
 * Summary: 查询关联
 */
func (client *Client) QueryFlowEnvrel(request *QueryFlowEnvrelRequest) (_result *QueryFlowEnvrelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFlowEnvrelResponse{}
	_body, _err := client.QueryFlowEnvrelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询关联
 * Summary: 查询关联
 */
func (client *Client) QueryFlowEnvrelEx(request *QueryFlowEnvrelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFlowEnvrelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFlowEnvrelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.envrel.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建异构机房部署单元
 * Summary: 创建异构机房部署单元
 */
func (client *Client) CreateFlowSitecell(request *CreateFlowSitecellRequest) (_result *CreateFlowSitecellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFlowSitecellResponse{}
	_body, _err := client.CreateFlowSitecellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建异构机房部署单元
 * Summary: 创建异构机房部署单元
 */
func (client *Client) CreateFlowSitecellEx(request *CreateFlowSitecellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFlowSitecellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFlowSitecellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.sitecell.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除异构机房部署单元
 * Summary: 删除异构机房部署单元
 */
func (client *Client) DeleteFlowSitecell(request *DeleteFlowSitecellRequest) (_result *DeleteFlowSitecellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFlowSitecellResponse{}
	_body, _err := client.DeleteFlowSitecellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除异构机房部署单元
 * Summary: 删除异构机房部署单元
 */
func (client *Client) DeleteFlowSitecellEx(request *DeleteFlowSitecellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFlowSitecellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteFlowSitecellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.sitecell.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询异构机房部署单元
 * Summary: 查询异构机房部署单元
 */
func (client *Client) QueryFlowSitecell(request *QueryFlowSitecellRequest) (_result *QueryFlowSitecellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFlowSitecellResponse{}
	_body, _err := client.QueryFlowSitecellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询异构机房部署单元
 * Summary: 查询异构机房部署单元
 */
func (client *Client) QueryFlowSitecellEx(request *QueryFlowSitecellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFlowSitecellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFlowSitecellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.sitecell.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取发布单下应用服务详情
 * Summary: 获取发布单下应用服务详情
 */
func (client *Client) GetOpsplanService(request *GetOpsplanServiceRequest) (_result *GetOpsplanServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetOpsplanServiceResponse{}
	_body, _err := client.GetOpsplanServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取发布单下应用服务详情
 * Summary: 获取发布单下应用服务详情
 */
func (client *Client) GetOpsplanServiceEx(request *GetOpsplanServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetOpsplanServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetOpsplanServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.opsplan.service.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取当前生效的路由规则
 * Summary: 获取当前生效的路由规则
 */
func (client *Client) QueryFlowRule(request *QueryFlowRuleRequest) (_result *QueryFlowRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFlowRuleResponse{}
	_body, _err := client.QueryFlowRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取当前生效的路由规则
 * Summary: 获取当前生效的路由规则
 */
func (client *Client) QueryFlowRuleEx(request *QueryFlowRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFlowRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFlowRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.rule.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建FedDeployment
 * Summary: 创建FedDeployment
 */
func (client *Client) CreateFederationDeployment(request *CreateFederationDeploymentRequest) (_result *CreateFederationDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFederationDeploymentResponse{}
	_body, _err := client.CreateFederationDeploymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建FedDeployment
 * Summary: 创建FedDeployment
 */
func (client *Client) CreateFederationDeploymentEx(request *CreateFederationDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFederationDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFederationDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.deployment.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询负责均衡实例。[底层元数据不具备之前，先放在LHC里实现]
 * Summary: 查询负责均衡实例。
 */
func (client *Client) QueryLoadbalancer(request *QueryLoadbalancerRequest) (_result *QueryLoadbalancerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLoadbalancerResponse{}
	_body, _err := client.QueryLoadbalancerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询负责均衡实例。[底层元数据不具备之前，先放在LHC里实现]
 * Summary: 查询负责均衡实例。
 */
func (client *Client) QueryLoadbalancerEx(request *QueryLoadbalancerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLoadbalancerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLoadbalancerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.loadbalancer.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询容器服务 Service 列表。
 * Summary: 查询容器服务 Service 列表。
 */
func (client *Client) ListContainerserviceService(request *ListContainerserviceServiceRequest) (_result *ListContainerserviceServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListContainerserviceServiceResponse{}
	_body, _err := client.ListContainerserviceServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询容器服务 Service 列表。
 * Summary: 查询容器服务 Service 列表。
 */
func (client *Client) ListContainerserviceServiceEx(request *ListContainerserviceServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListContainerserviceServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListContainerserviceServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.service.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询sidecar元信息列表
 * Summary: 查询sidecar元信息列表
 */
func (client *Client) ListSidecar(request *ListSidecarRequest) (_result *ListSidecarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSidecarResponse{}
	_body, _err := client.ListSidecarEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询sidecar元信息列表
 * Summary: 查询sidecar元信息列表
 */
func (client *Client) ListSidecarEx(request *ListSidecarRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSidecarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSidecarResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.sidecar.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: list template
 * Summary: list template
 */
func (client *Client) ListSidecarTemplate(request *ListSidecarTemplateRequest) (_result *ListSidecarTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSidecarTemplateResponse{}
	_body, _err := client.ListSidecarTemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: list template
 * Summary: list template
 */
func (client *Client) ListSidecarTemplateEx(request *ListSidecarTemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSidecarTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSidecarTemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.sidecar.template.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取sidecar版本详情
 * Summary: 版本详情
 */
func (client *Client) GetSidecarTemplate(request *GetSidecarTemplateRequest) (_result *GetSidecarTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSidecarTemplateResponse{}
	_body, _err := client.GetSidecarTemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取sidecar版本详情
 * Summary: 版本详情
 */
func (client *Client) GetSidecarTemplateEx(request *GetSidecarTemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSidecarTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSidecarTemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.sidecar.template.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取FedDeployment详情
 * Summary: 获取FedDeployment详情
 */
func (client *Client) GetFederationDeployment(request *GetFederationDeploymentRequest) (_result *GetFederationDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetFederationDeploymentResponse{}
	_body, _err := client.GetFederationDeploymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取FedDeployment详情
 * Summary: 获取FedDeployment详情
 */
func (client *Client) GetFederationDeploymentEx(request *GetFederationDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetFederationDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetFederationDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.deployment.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取FederatedDeployment列表信息
 * Summary: 获取FedDeploy列表
 */
func (client *Client) ListFederationDeployment(request *ListFederationDeploymentRequest) (_result *ListFederationDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListFederationDeploymentResponse{}
	_body, _err := client.ListFederationDeploymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取FederatedDeployment列表信息
 * Summary: 获取FedDeploy列表
 */
func (client *Client) ListFederationDeploymentEx(request *ListFederationDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListFederationDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListFederationDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.deployment.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除FedDeployment
 * Summary: 删除FedDeployment
 */
func (client *Client) DeleteFederationDeployment(request *DeleteFederationDeploymentRequest) (_result *DeleteFederationDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFederationDeploymentResponse{}
	_body, _err := client.DeleteFederationDeploymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除FedDeployment
 * Summary: 删除FedDeployment
 */
func (client *Client) DeleteFederationDeploymentEx(request *DeleteFederationDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFederationDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteFederationDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.federation.deployment.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 设置当前uid规则为默认uid规则
 * Summary: 设置当前uid规则为默认uid规则
 */
func (client *Client) SetFlowDefaultuid(request *SetFlowDefaultuidRequest) (_result *SetFlowDefaultuidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetFlowDefaultuidResponse{}
	_body, _err := client.SetFlowDefaultuidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 设置当前uid规则为默认uid规则
 * Summary: 设置当前uid规则为默认uid规则
 */
func (client *Client) SetFlowDefaultuidEx(request *SetFlowDefaultuidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetFlowDefaultuidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetFlowDefaultuidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.defaultuid.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开始执行应用服务发布|运维
 * Summary: 开始执行应用服务发布|运维
 */
func (client *Client) StartOpsplanService(request *StartOpsplanServiceRequest) (_result *StartOpsplanServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartOpsplanServiceResponse{}
	_body, _err := client.StartOpsplanServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开始执行应用服务发布|运维
 * Summary: 开始执行应用服务发布|运维
 */
func (client *Client) StartOpsplanServiceEx(request *StartOpsplanServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartOpsplanServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartOpsplanServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.opsplan.service.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 回滚确认应用服务
 * Summary: 回滚确认应用服务
 */
func (client *Client) ConfirmOpsplanServicerollback(request *ConfirmOpsplanServicerollbackRequest) (_result *ConfirmOpsplanServicerollbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmOpsplanServicerollbackResponse{}
	_body, _err := client.ConfirmOpsplanServicerollbackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 回滚确认应用服务
 * Summary: 回滚确认应用服务
 */
func (client *Client) ConfirmOpsplanServicerollbackEx(request *ConfirmOpsplanServicerollbackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmOpsplanServicerollbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmOpsplanServicerollbackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.opsplan.servicerollback.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重试发布服务
 * Summary: 重试发布服务
 */
func (client *Client) RetryOpsplanService(request *RetryOpsplanServiceRequest) (_result *RetryOpsplanServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryOpsplanServiceResponse{}
	_body, _err := client.RetryOpsplanServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重试发布服务
 * Summary: 重试发布服务
 */
func (client *Client) RetryOpsplanServiceEx(request *RetryOpsplanServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryOpsplanServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryOpsplanServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.opsplan.service.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询弹性场景
 * Summary: 查询弹性场景
 */
func (client *Client) QueryFlowElasticscene(request *QueryFlowElasticsceneRequest) (_result *QueryFlowElasticsceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFlowElasticsceneResponse{}
	_body, _err := client.QueryFlowElasticsceneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询弹性场景
 * Summary: 查询弹性场景
 */
func (client *Client) QueryFlowElasticsceneEx(request *QueryFlowElasticsceneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFlowElasticsceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFlowElasticsceneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticscene.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询弹性规则
 * Summary: 查询弹性规则
 */
func (client *Client) QueryFlowElasticrule(request *QueryFlowElasticruleRequest) (_result *QueryFlowElasticruleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFlowElasticruleResponse{}
	_body, _err := client.QueryFlowElasticruleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询弹性规则
 * Summary: 查询弹性规则
 */
func (client *Client) QueryFlowElasticruleEx(request *QueryFlowElasticruleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFlowElasticruleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFlowElasticruleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticrule.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询弹性子规则
 * Summary: 查询弹性子规则
 */
func (client *Client) QueryFlowElasticsubrule(request *QueryFlowElasticsubruleRequest) (_result *QueryFlowElasticsubruleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFlowElasticsubruleResponse{}
	_body, _err := client.QueryFlowElasticsubruleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询弹性子规则
 * Summary: 查询弹性子规则
 */
func (client *Client) QueryFlowElasticsubruleEx(request *QueryFlowElasticsubruleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFlowElasticsubruleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFlowElasticsubruleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticsubrule.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询当前弹性状态
 * Summary: 查询当前弹性状态
 */
func (client *Client) QueryFlowElasticvalue(request *QueryFlowElasticvalueRequest) (_result *QueryFlowElasticvalueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFlowElasticvalueResponse{}
	_body, _err := client.QueryFlowElasticvalueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询当前弹性状态
 * Summary: 查询当前弹性状态
 */
func (client *Client) QueryFlowElasticvalueEx(request *QueryFlowElasticvalueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFlowElasticvalueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFlowElasticvalueResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.flow.elasticvalue.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开关配置
 * Summary: 开关配置
 */
func (client *Client) ListSystemSwitch(request *ListSystemSwitchRequest) (_result *ListSystemSwitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSystemSwitchResponse{}
	_body, _err := client.ListSystemSwitchEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开关配置
 * Summary: 开关配置
 */
func (client *Client) ListSystemSwitchEx(request *ListSystemSwitchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSystemSwitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSystemSwitchResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.system.switch.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取云原生技术栈对应的Dockerfile
 * Summary: 获取技术栈对应的Dockerfile
 */
func (client *Client) LoadBuildpackDockerfile(request *LoadBuildpackDockerfileRequest) (_result *LoadBuildpackDockerfileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &LoadBuildpackDockerfileResponse{}
	_body, _err := client.LoadBuildpackDockerfileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取云原生技术栈对应的Dockerfile
 * Summary: 获取技术栈对应的Dockerfile
 */
func (client *Client) LoadBuildpackDockerfileEx(request *LoadBuildpackDockerfileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *LoadBuildpackDockerfileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &LoadBuildpackDockerfileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.buildpack.dockerfile.load"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 指定pod创建缩容运维单
 * Summary: 创建pod缩容运维单
 */
func (client *Client) CreateOpsplanPodoffline(request *CreateOpsplanPodofflineRequest) (_result *CreateOpsplanPodofflineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateOpsplanPodofflineResponse{}
	_body, _err := client.CreateOpsplanPodofflineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 指定pod创建缩容运维单
 * Summary: 创建pod缩容运维单
 */
func (client *Client) CreateOpsplanPodofflineEx(request *CreateOpsplanPodofflineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateOpsplanPodofflineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateOpsplanPodofflineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.opsplan.podoffline.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 添加OB租户信息以及对应的uid分片段
 * Summary: 添加OB租户信息
 */
func (client *Client) CreateDbflowObtenant(request *CreateDbflowObtenantRequest) (_result *CreateDbflowObtenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDbflowObtenantResponse{}
	_body, _err := client.CreateDbflowObtenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 添加OB租户信息以及对应的uid分片段
 * Summary: 添加OB租户信息
 */
func (client *Client) CreateDbflowObtenantEx(request *CreateDbflowObtenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDbflowObtenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDbflowObtenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.dbflow.obtenant.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分页查询ob租户列表
 * Summary: 分页查询ob租户列表
 */
func (client *Client) QueryDbflowObtenant(request *QueryDbflowObtenantRequest) (_result *QueryDbflowObtenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDbflowObtenantResponse{}
	_body, _err := client.QueryDbflowObtenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分页查询ob租户列表
 * Summary: 分页查询ob租户列表
 */
func (client *Client) QueryDbflowObtenantEx(request *QueryDbflowObtenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDbflowObtenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDbflowObtenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.dbflow.obtenant.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新OB租户信息，包括uid映射
 * Summary: 更新OB租户信息
 */
func (client *Client) UpdateDbflowObtenant(request *UpdateDbflowObtenantRequest) (_result *UpdateDbflowObtenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDbflowObtenantResponse{}
	_body, _err := client.UpdateDbflowObtenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新OB租户信息，包括uid映射
 * Summary: 更新OB租户信息
 */
func (client *Client) UpdateDbflowObtenantEx(request *UpdateDbflowObtenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDbflowObtenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDbflowObtenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.dbflow.obtenant.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除PaaS中记录的OB租户信息，非实际OB租户删除
 * Summary: 删除PaaS中记录的OB租户信息
 */
func (client *Client) DeleteDbflowObtenant(request *DeleteDbflowObtenantRequest) (_result *DeleteDbflowObtenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDbflowObtenantResponse{}
	_body, _err := client.DeleteDbflowObtenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除PaaS中记录的OB租户信息，非实际OB租户删除
 * Summary: 删除PaaS中记录的OB租户信息
 */
func (client *Client) DeleteDbflowObtenantEx(request *DeleteDbflowObtenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDbflowObtenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDbflowObtenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.dbflow.obtenant.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新原生技术栈版本信息（Dockerfile模板信息）
 * Summary: 更新原生技术栈版本信息
 */
func (client *Client) UpdateBuildpackNativetechstackversion(request *UpdateBuildpackNativetechstackversionRequest) (_result *UpdateBuildpackNativetechstackversionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateBuildpackNativetechstackversionResponse{}
	_body, _err := client.UpdateBuildpackNativetechstackversionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新原生技术栈版本信息（Dockerfile模板信息）
 * Summary: 更新原生技术栈版本信息
 */
func (client *Client) UpdateBuildpackNativetechstackversionEx(request *UpdateBuildpackNativetechstackversionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateBuildpackNativetechstackversionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateBuildpackNativetechstackversionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.buildpack.nativetechstackversion.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取当前环境组的region列表信息
 * Summary: 获取环境组region信息
 */
func (client *Client) ListWorkspacegroupRegions(request *ListWorkspacegroupRegionsRequest) (_result *ListWorkspacegroupRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListWorkspacegroupRegionsResponse{}
	_body, _err := client.ListWorkspacegroupRegionsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取当前环境组的region列表信息
 * Summary: 获取环境组region信息
 */
func (client *Client) ListWorkspacegroupRegionsEx(request *ListWorkspacegroupRegionsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListWorkspacegroupRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListWorkspacegroupRegionsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.workspacegroup.regions.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取集群列表信息
 * Summary: 获取集群列表
 */
func (client *Client) ListClusterInfo(request *ListClusterInfoRequest) (_result *ListClusterInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListClusterInfoResponse{}
	_body, _err := client.ListClusterInfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取集群列表信息
 * Summary: 获取集群列表
 */
func (client *Client) ListClusterInfoEx(request *ListClusterInfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListClusterInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListClusterInfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cluster.info.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取集群资源状态信息
 * Summary: 获取集群资源状态信息
 */
func (client *Client) ListClusterOverview(request *ListClusterOverviewRequest) (_result *ListClusterOverviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListClusterOverviewResponse{}
	_body, _err := client.ListClusterOverviewEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取集群资源状态信息
 * Summary: 获取集群资源状态信息
 */
func (client *Client) ListClusterOverviewEx(request *ListClusterOverviewRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListClusterOverviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListClusterOverviewResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cluster.overview.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询ALB证书信息。
 * Summary: 查询ALB证书信息。
 */
func (client *Client) ListCertificates(request *ListCertificatesRequest) (_result *ListCertificatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListCertificatesResponse{}
	_body, _err := client.ListCertificatesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询ALB证书信息。
 * Summary: 查询ALB证书信息。
 */
func (client *Client) ListCertificatesEx(request *ListCertificatesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListCertificatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListCertificatesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.certificates.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有已被使用的lb iaas id。
 * Summary: 获取所有已被使用的lb iaas id。
 */
func (client *Client) ListLoadbalancer(request *ListLoadbalancerRequest) (_result *ListLoadbalancerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListLoadbalancerResponse{}
	_body, _err := client.ListLoadbalancerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有已被使用的lb iaas id。
 * Summary: 获取所有已被使用的lb iaas id。
 */
func (client *Client) ListLoadbalancerEx(request *ListLoadbalancerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListLoadbalancerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListLoadbalancerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.loadbalancer.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取cloudconfig当前配置
 * Summary: 获取cloudconfig当前配置
 */
func (client *Client) GetCloudconfig(request *GetCloudconfigRequest) (_result *GetCloudconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetCloudconfigResponse{}
	_body, _err := client.GetCloudconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取cloudconfig当前配置
 * Summary: 获取cloudconfig当前配置
 */
func (client *Client) GetCloudconfigEx(request *GetCloudconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetCloudconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetCloudconfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cloudconfig.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新cloudconfig
 * Summary: 更新cloudconfig
 */
func (client *Client) UpdateCloudconfig(request *UpdateCloudconfigRequest) (_result *UpdateCloudconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateCloudconfigResponse{}
	_body, _err := client.UpdateCloudconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新cloudconfig
 * Summary: 更新cloudconfig
 */
func (client *Client) UpdateCloudconfigEx(request *UpdateCloudconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateCloudconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateCloudconfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cloudconfig.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 版本历史
 * Summary: 版本历史
 */
func (client *Client) ListCloudconfigHistory(request *ListCloudconfigHistoryRequest) (_result *ListCloudconfigHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListCloudconfigHistoryResponse{}
	_body, _err := client.ListCloudconfigHistoryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 版本历史
 * Summary: 版本历史
 */
func (client *Client) ListCloudconfigHistoryEx(request *ListCloudconfigHistoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListCloudconfigHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListCloudconfigHistoryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.cloudconfig.history.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: sidecar运维能力创建（接入|升级）
 * Summary: sidecar运维创建（接入|升级）
 */
func (client *Client) CreateSidecarOperation(request *CreateSidecarOperationRequest) (_result *CreateSidecarOperationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSidecarOperationResponse{}
	_body, _err := client.CreateSidecarOperationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: sidecar运维能力创建（接入|升级）
 * Summary: sidecar运维创建（接入|升级）
 */
func (client *Client) CreateSidecarOperationEx(request *CreateSidecarOperationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSidecarOperationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSidecarOperationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.sidecar.operation.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 指定operationId重试sidecar运维
 * Summary: 重试sidecar运维
 */
func (client *Client) RetrySidecarOperation(request *RetrySidecarOperationRequest) (_result *RetrySidecarOperationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetrySidecarOperationResponse{}
	_body, _err := client.RetrySidecarOperationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 指定operationId重试sidecar运维
 * Summary: 重试sidecar运维
 */
func (client *Client) RetrySidecarOperationEx(request *RetrySidecarOperationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetrySidecarOperationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetrySidecarOperationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.sidecar.operation.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消sidecar运维
 * Summary: 取消sidecar运维
 */
func (client *Client) CancelSidecarOperation(request *CancelSidecarOperationRequest) (_result *CancelSidecarOperationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelSidecarOperationResponse{}
	_body, _err := client.CancelSidecarOperationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消sidecar运维
 * Summary: 取消sidecar运维
 */
func (client *Client) CancelSidecarOperationEx(request *CancelSidecarOperationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelSidecarOperationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelSidecarOperationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.sidecar.operation.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: create or update a service
 * Summary: patch a service
 */
func (client *Client) UpdateService(request *UpdateServiceRequest) (_result *UpdateServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateServiceResponse{}
	_body, _err := client.UpdateServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: create or update a service
 * Summary: patch a service
 */
func (client *Client) UpdateServiceEx(request *UpdateServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.service.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 九州通过LHC创建发布单
 * Summary: 九州通过LHC创建发布单
 */
func (client *Client) CreateGpaasRelease(request *CreateGpaasReleaseRequest) (_result *CreateGpaasReleaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateGpaasReleaseResponse{}
	_body, _err := client.CreateGpaasReleaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 九州通过LHC创建发布单
 * Summary: 九州通过LHC创建发布单
 */
func (client *Client) CreateGpaasReleaseEx(request *CreateGpaasReleaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateGpaasReleaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateGpaasReleaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.gpaas.release.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询sidecar运维进度
 * Summary: 查询sidecar运维进度
 */
func (client *Client) QuerySidecarOperation(request *QuerySidecarOperationRequest) (_result *QuerySidecarOperationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySidecarOperationResponse{}
	_body, _err := client.QuerySidecarOperationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询sidecar运维进度
 * Summary: 查询sidecar运维进度
 */
func (client *Client) QuerySidecarOperationEx(request *QuerySidecarOperationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySidecarOperationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySidecarOperationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.sidecar.operation.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询Kubernetes原生资源
 * Summary: 查询Kubernetes原生资源
 */
func (client *Client) ListKubernetesResources(request *ListKubernetesResourcesRequest) (_result *ListKubernetesResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListKubernetesResourcesResponse{}
	_body, _err := client.ListKubernetesResourcesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询Kubernetes原生资源
 * Summary: 查询Kubernetes原生资源
 */
func (client *Client) ListKubernetesResourcesEx(request *ListKubernetesResourcesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListKubernetesResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListKubernetesResourcesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.kubernetes.resources.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ldc发布单发布分组相关k8s事件查询，包括pod，stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关k8s事件查询
 */
func (client *Client) QueryReleasepipelinestageEvent(request *QueryReleasepipelinestageEventRequest) (_result *QueryReleasepipelinestageEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryReleasepipelinestageEventResponse{}
	_body, _err := client.QueryReleasepipelinestageEventEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ldc发布单发布分组相关k8s事件查询，包括pod，stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关k8s事件查询
 */
func (client *Client) QueryReleasepipelinestageEventEx(request *QueryReleasepipelinestageEventRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryReleasepipelinestageEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryReleasepipelinestageEventResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.releasepipelinestage.event.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取projectname
 * Summary: 获取projectname
 */
func (client *Client) GetSlsProjectname(request *GetSlsProjectnameRequest) (_result *GetSlsProjectnameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSlsProjectnameResponse{}
	_body, _err := client.GetSlsProjectnameEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取projectname
 * Summary: 获取projectname
 */
func (client *Client) GetSlsProjectnameEx(request *GetSlsProjectnameRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSlsProjectnameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSlsProjectnameResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.sls.projectname.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ldc发布单发布分组相关k8s事件查询，包括pod，stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关k8s事件查询
 */
func (client *Client) QueryReleasepipelineEvent(request *QueryReleasepipelineEventRequest) (_result *QueryReleasepipelineEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryReleasepipelineEventResponse{}
	_body, _err := client.QueryReleasepipelineEventEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ldc发布单发布分组相关k8s事件查询，包括pod，stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关k8s事件查询
 */
func (client *Client) QueryReleasepipelineEventEx(request *QueryReleasepipelineEventRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryReleasepipelineEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryReleasepipelineEventResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.releasepipeline.event.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ldc发布单发布分组相关k8s事件查询，包括pod，stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关k8s事件查询
 */
func (client *Client) QueryPodEvent(request *QueryPodEventRequest) (_result *QueryPodEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryPodEventResponse{}
	_body, _err := client.QueryPodEventEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ldc发布单发布分组相关k8s事件查询，包括pod，stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关k8s事件查询
 */
func (client *Client) QueryPodEventEx(request *QueryPodEventRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryPodEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryPodEventResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.pod.event.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ldc发布单发布分组相关log查询，包括stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关logs查询
 */
func (client *Client) QueryServiceProcesslog(request *QueryServiceProcesslogRequest) (_result *QueryServiceProcesslogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryServiceProcesslogResponse{}
	_body, _err := client.QueryServiceProcesslogEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ldc发布单发布分组相关log查询，包括stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关logs查询
 */
func (client *Client) QueryServiceProcesslogEx(request *QueryServiceProcesslogRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryServiceProcesslogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryServiceProcesslogResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.service.processlog.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-在应用维度查询容器应用服务
 * Summary: 应用管理-在应用维度查询容器应用服务
 */
func (client *Client) QueryAppService(request *QueryAppServiceRequest) (_result *QueryAppServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppServiceResponse{}
	_body, _err := client.QueryAppServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-在应用维度查询容器应用服务
 * Summary: 应用管理-在应用维度查询容器应用服务
 */
func (client *Client) QueryAppServiceEx(request *QueryAppServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.app.service.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-应用维度查询容器应用服务发布单
 * Summary: 应用管理-应用维度查询容器应用服务发布单
 */
func (client *Client) QueryAppPlan(request *QueryAppPlanRequest) (_result *QueryAppPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppPlanResponse{}
	_body, _err := client.QueryAppPlanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-应用维度查询容器应用服务发布单
 * Summary: 应用管理-应用维度查询容器应用服务发布单
 */
func (client *Client) QueryAppPlanEx(request *QueryAppPlanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppPlanResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.app.plan.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建统一接入实例，支持单元化和非单元化两种模式
 * Summary: 创建统一接入实例
 */
func (client *Client) CreateUnifiedaccessinstance(request *CreateUnifiedaccessinstanceRequest) (_result *CreateUnifiedaccessinstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateUnifiedaccessinstanceResponse{}
	_body, _err := client.CreateUnifiedaccessinstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建统一接入实例，支持单元化和非单元化两种模式
 * Summary: 创建统一接入实例
 */
func (client *Client) CreateUnifiedaccessinstanceEx(request *CreateUnifiedaccessinstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateUnifiedaccessinstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateUnifiedaccessinstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.unifiedaccessinstance.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询统一接入实例列表信息
 * Summary: 查询统一接入实例列表信息
 */
func (client *Client) QueryUnifiedaccessinstance(request *QueryUnifiedaccessinstanceRequest) (_result *QueryUnifiedaccessinstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnifiedaccessinstanceResponse{}
	_body, _err := client.QueryUnifiedaccessinstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询统一接入实例列表信息
 * Summary: 查询统一接入实例列表信息
 */
func (client *Client) QueryUnifiedaccessinstanceEx(request *QueryUnifiedaccessinstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnifiedaccessinstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnifiedaccessinstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.unifiedaccessinstance.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取统一接入单个实例信息
 * Summary: 获取统一接入单个实例信息
 */
func (client *Client) GetUnifiedaccessinstance(request *GetUnifiedaccessinstanceRequest) (_result *GetUnifiedaccessinstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetUnifiedaccessinstanceResponse{}
	_body, _err := client.GetUnifiedaccessinstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取统一接入单个实例信息
 * Summary: 获取统一接入单个实例信息
 */
func (client *Client) GetUnifiedaccessinstanceEx(request *GetUnifiedaccessinstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetUnifiedaccessinstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetUnifiedaccessinstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.unifiedaccessinstance.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除统一接入实例
 * Summary: 删除统一接入实例
 */
func (client *Client) DeleteUnifiedaccessinstance(request *DeleteUnifiedaccessinstanceRequest) (_result *DeleteUnifiedaccessinstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteUnifiedaccessinstanceResponse{}
	_body, _err := client.DeleteUnifiedaccessinstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除统一接入实例
 * Summary: 删除统一接入实例
 */
func (client *Client) DeleteUnifiedaccessinstanceEx(request *DeleteUnifiedaccessinstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteUnifiedaccessinstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteUnifiedaccessinstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.unifiedaccessinstance.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新统一接入实例信息
 * Summary: 更新统一接入实例信息
 */
func (client *Client) UpdateUnifiedaccessinstance(request *UpdateUnifiedaccessinstanceRequest) (_result *UpdateUnifiedaccessinstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateUnifiedaccessinstanceResponse{}
	_body, _err := client.UpdateUnifiedaccessinstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新统一接入实例信息
 * Summary: 更新统一接入实例信息
 */
func (client *Client) UpdateUnifiedaccessinstanceEx(request *UpdateUnifiedaccessinstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateUnifiedaccessinstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateUnifiedaccessinstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.unifiedaccessinstance.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ldc 对接统一发布 openAPI
 * Summary: ldc 对接统一发布 openAPI
 */
func (client *Client) ExecUnireleasespi(request *ExecUnireleasespiRequest) (_result *ExecUnireleasespiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecUnireleasespiResponse{}
	_body, _err := client.ExecUnireleasespiEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ldc 对接统一发布 openAPI
 * Summary: ldc 对接统一发布 openAPI
 */
func (client *Client) ExecUnireleasespiEx(request *ExecUnireleasespiRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecUnireleasespiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecUnireleasespiResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.unireleasespi.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用于创建 fed spanner 集群
 * Summary: 创建 fed spanner 集群
 */
func (client *Client) CreateFedspannercluster(request *CreateFedspannerclusterRequest) (_result *CreateFedspannerclusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFedspannerclusterResponse{}
	_body, _err := client.CreateFedspannerclusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用于创建 fed spanner 集群
 * Summary: 创建 fed spanner 集群
 */
func (client *Client) CreateFedspannerclusterEx(request *CreateFedspannerclusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFedspannerclusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFedspannerclusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.fedspannercluster.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询联邦fed spanner 集群状态信息
 * Summary: 查询 fed spanner 集群
 */
func (client *Client) QueryFedspannercluster(request *QueryFedspannerclusterRequest) (_result *QueryFedspannerclusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFedspannerclusterResponse{}
	_body, _err := client.QueryFedspannerclusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询联邦fed spanner 集群状态信息
 * Summary: 查询 fed spanner 集群
 */
func (client *Client) QueryFedspannerclusterEx(request *QueryFedspannerclusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFedspannerclusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFedspannerclusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.fedspannercluster.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过fed集群 name 获取单个集群详细信息
 * Summary: 获取单个fed spanner 集群信息
 */
func (client *Client) GetFedspannercluster(request *GetFedspannerclusterRequest) (_result *GetFedspannerclusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetFedspannerclusterResponse{}
	_body, _err := client.GetFedspannerclusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过fed集群 name 获取单个集群详细信息
 * Summary: 获取单个fed spanner 集群信息
 */
func (client *Client) GetFedspannerclusterEx(request *GetFedspannerclusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetFedspannerclusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetFedspannerclusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.fedspannercluster.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 展示所有联邦 spanner 集群
 * Summary: 展示所有联邦 spanner 集群
 */
func (client *Client) ListFedspannercluster(request *ListFedspannerclusterRequest) (_result *ListFedspannerclusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListFedspannerclusterResponse{}
	_body, _err := client.ListFedspannerclusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 展示所有联邦 spanner 集群
 * Summary: 展示所有联邦 spanner 集群
 */
func (client *Client) ListFedspannerclusterEx(request *ListFedspannerclusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListFedspannerclusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListFedspannerclusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.fedspannercluster.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除指定fed spanner集群
 * Summary: 删除 联邦spanner集群
 */
func (client *Client) DeleteFedspannercluster(request *DeleteFedspannerclusterRequest) (_result *DeleteFedspannerclusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFedspannerclusterResponse{}
	_body, _err := client.DeleteFedspannerclusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除指定fed spanner集群
 * Summary: 删除 联邦spanner集群
 */
func (client *Client) DeleteFedspannerclusterEx(request *DeleteFedspannerclusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFedspannerclusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteFedspannerclusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.fedspannercluster.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除指定集群
 * Summary: 批量删除 fed spanner 集群
 */
func (client *Client) BatchdeleteFedspannercluster(request *BatchdeleteFedspannerclusterRequest) (_result *BatchdeleteFedspannerclusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteFedspannerclusterResponse{}
	_body, _err := client.BatchdeleteFedspannerclusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除指定集群
 * Summary: 批量删除 fed spanner 集群
 */
func (client *Client) BatchdeleteFedspannerclusterEx(request *BatchdeleteFedspannerclusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteFedspannerclusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteFedspannerclusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.fedspannercluster.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新 fed spanner 集群
 * Summary: 更新 fed spanner 集群
 */
func (client *Client) UpdateFedspannercluster(request *UpdateFedspannerclusterRequest) (_result *UpdateFedspannerclusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFedspannerclusterResponse{}
	_body, _err := client.UpdateFedspannerclusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新 fed spanner 集群
 * Summary: 更新 fed spanner 集群
 */
func (client *Client) UpdateFedspannerclusterEx(request *UpdateFedspannerclusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFedspannerclusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateFedspannerclusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.fedspannercluster.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建发布单
 * Summary: 创建发布单
 */
func (client *Client) CreateReleaseplan(request *CreateReleaseplanRequest) (_result *CreateReleaseplanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateReleaseplanResponse{}
	_body, _err := client.CreateReleaseplanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建发布单
 * Summary: 创建发布单
 */
func (client *Client) CreateReleaseplanEx(request *CreateReleaseplanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateReleaseplanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateReleaseplanResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.releaseplan.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 需要指定fed spanner cluster name 和期望的合法状态
 * Summary: 更新 spanner 集群 状态
 */
func (client *Client) UpdateFedspannerclusterStatus(request *UpdateFedspannerclusterStatusRequest) (_result *UpdateFedspannerclusterStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFedspannerclusterStatusResponse{}
	_body, _err := client.UpdateFedspannerclusterStatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 需要指定fed spanner cluster name 和期望的合法状态
 * Summary: 更新 spanner 集群 状态
 */
func (client *Client) UpdateFedspannerclusterStatusEx(request *UpdateFedspannerclusterStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFedspannerclusterStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateFedspannerclusterStatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.fedspannercluster.status.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 添加antvip域名
 * Summary: 添加antvip域名
 */
func (client *Client) AddAntvipDomain(request *AddAntvipDomainRequest) (_result *AddAntvipDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddAntvipDomainResponse{}
	_body, _err := client.AddAntvipDomainEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 添加antvip域名
 * Summary: 添加antvip域名
 */
func (client *Client) AddAntvipDomainEx(request *AddAntvipDomainRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddAntvipDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddAntvipDomainResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.antvip.domain.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除antvip域名
 * Summary: 删除antvip域名
 */
func (client *Client) DeleteAntvipDomain(request *DeleteAntvipDomainRequest) (_result *DeleteAntvipDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteAntvipDomainResponse{}
	_body, _err := client.DeleteAntvipDomainEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除antvip域名
 * Summary: 删除antvip域名
 */
func (client *Client) DeleteAntvipDomainEx(request *DeleteAntvipDomainRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteAntvipDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteAntvipDomainResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.antvip.domain.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询容器服务 Ingress 列表。
 * Summary: 查询容器服务 Ingress 列表。
 */
func (client *Client) ListContainerserviceIngress(request *ListContainerserviceIngressRequest) (_result *ListContainerserviceIngressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListContainerserviceIngressResponse{}
	_body, _err := client.ListContainerserviceIngressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询容器服务 Ingress 列表。
 * Summary: 查询容器服务 Ingress 列表。
 */
func (client *Client) ListContainerserviceIngressEx(request *ListContainerserviceIngressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListContainerserviceIngressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListContainerserviceIngressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.ingress.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建一个运维单
 * Summary: 创建一个运维单
 */
func (client *Client) CreateContainerserviceOperation(request *CreateContainerserviceOperationRequest) (_result *CreateContainerserviceOperationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContainerserviceOperationResponse{}
	_body, _err := client.CreateContainerserviceOperationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建一个运维单
 * Summary: 创建一个运维单
 */
func (client *Client) CreateContainerserviceOperationEx(request *CreateContainerserviceOperationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContainerserviceOperationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContainerserviceOperationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.operation.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询多集群k8s事件
 * Summary: 查询多集群k8s event
 */
func (client *Client) ListMulticlusterEvents(request *ListMulticlusterEventsRequest) (_result *ListMulticlusterEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListMulticlusterEventsResponse{}
	_body, _err := client.ListMulticlusterEventsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询多集群k8s事件
 * Summary: 查询多集群k8s event
 */
func (client *Client) ListMulticlusterEventsEx(request *ListMulticlusterEventsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListMulticlusterEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListMulticlusterEventsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.multicluster.events.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 部署单提交审批申请
 * Summary: 部署单提交审批申请
 */
func (client *Client) ApplyContainerserviceDeployment(request *ApplyContainerserviceDeploymentRequest) (_result *ApplyContainerserviceDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyContainerserviceDeploymentResponse{}
	_body, _err := client.ApplyContainerserviceDeploymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 部署单提交审批申请
 * Summary: 部署单提交审批申请
 */
func (client *Client) ApplyContainerserviceDeploymentEx(request *ApplyContainerserviceDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyContainerserviceDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyContainerserviceDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.containerservice.deployment.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 蓝绿发布调整Ingress流量权重比例
 * Summary: 蓝绿发布调整Ingress流量权重比例
 */
func (client *Client) UpdateIngressTrafficweight(request *UpdateIngressTrafficweightRequest) (_result *UpdateIngressTrafficweightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateIngressTrafficweightResponse{}
	_body, _err := client.UpdateIngressTrafficweightEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 蓝绿发布调整Ingress流量权重比例
 * Summary: 蓝绿发布调整Ingress流量权重比例
 */
func (client *Client) UpdateIngressTrafficweightEx(request *UpdateIngressTrafficweightRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateIngressTrafficweightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateIngressTrafficweightResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.ingress.trafficweight.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 蓝绿发布查询单蓝区信息
 * Summary: 蓝绿发布查询单蓝区信息
 */
func (client *Client) GetOpsplanBluedetail(request *GetOpsplanBluedetailRequest) (_result *GetOpsplanBluedetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetOpsplanBluedetailResponse{}
	_body, _err := client.GetOpsplanBluedetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 蓝绿发布查询单蓝区信息
 * Summary: 蓝绿发布查询单蓝区信息
 */
func (client *Client) GetOpsplanBluedetailEx(request *GetOpsplanBluedetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetOpsplanBluedetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetOpsplanBluedetailResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.opsplan.bluedetail.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 蓝绿发布查询当前发布单中所有Ingress流量权重及状态
 * Summary: 蓝绿发布查询Ingress流量权重
 */
func (client *Client) ListIngressTrafficweight(request *ListIngressTrafficweightRequest) (_result *ListIngressTrafficweightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListIngressTrafficweightResponse{}
	_body, _err := client.ListIngressTrafficweightEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 蓝绿发布查询当前发布单中所有Ingress流量权重及状态
 * Summary: 蓝绿发布查询Ingress流量权重
 */
func (client *Client) ListIngressTrafficweightEx(request *ListIngressTrafficweightRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListIngressTrafficweightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListIngressTrafficweightResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.ingress.trafficweight.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 基于OAM模型创建包含多应用服务的应用
 * Summary: 创建包含多应用服务的应用
 */
func (client *Client) CreateOamserviceApplicationconfiguration(request *CreateOamserviceApplicationconfigurationRequest) (_result *CreateOamserviceApplicationconfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateOamserviceApplicationconfigurationResponse{}
	_body, _err := client.CreateOamserviceApplicationconfigurationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 基于OAM模型创建包含多应用服务的应用
 * Summary: 创建包含多应用服务的应用
 */
func (client *Client) CreateOamserviceApplicationconfigurationEx(request *CreateOamserviceApplicationconfigurationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateOamserviceApplicationconfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateOamserviceApplicationconfigurationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.oamservice.applicationconfiguration.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用于创建联邦负载均衡实例
 * Summary: 创建联邦负载均衡实例
 */
func (client *Client) CreateFedloadbalancer(request *CreateFedloadbalancerRequest) (_result *CreateFedloadbalancerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFedloadbalancerResponse{}
	_body, _err := client.CreateFedloadbalancerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用于创建联邦负载均衡实例
 * Summary: 创建联邦负载均衡实例
 */
func (client *Client) CreateFedloadbalancerEx(request *CreateFedloadbalancerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFedloadbalancerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFedloadbalancerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.fedloadbalancer.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新联邦负载均衡实例
 * Summary: 更新联邦负载均衡实例
 */
func (client *Client) UpdateFedloadbalancer(request *UpdateFedloadbalancerRequest) (_result *UpdateFedloadbalancerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFedloadbalancerResponse{}
	_body, _err := client.UpdateFedloadbalancerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新联邦负载均衡实例
 * Summary: 更新联邦负载均衡实例
 */
func (client *Client) UpdateFedloadbalancerEx(request *UpdateFedloadbalancerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFedloadbalancerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateFedloadbalancerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.fedloadbalancer.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: list联邦负载均衡实例
 * Summary: list联邦负载均衡实例
 */
func (client *Client) ListFedloadbalancer(request *ListFedloadbalancerRequest) (_result *ListFedloadbalancerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListFedloadbalancerResponse{}
	_body, _err := client.ListFedloadbalancerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: list联邦负载均衡实例
 * Summary: list联邦负载均衡实例
 */
func (client *Client) ListFedloadbalancerEx(request *ListFedloadbalancerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListFedloadbalancerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListFedloadbalancerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.fedloadbalancer.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除联邦负载均衡
 * Summary: 删除联邦负载均衡实例
 */
func (client *Client) DeleteFedloadbalancer(request *DeleteFedloadbalancerRequest) (_result *DeleteFedloadbalancerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFedloadbalancerResponse{}
	_body, _err := client.DeleteFedloadbalancerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除联邦负载均衡
 * Summary: 删除联邦负载均衡实例
 */
func (client *Client) DeleteFedloadbalancerEx(request *DeleteFedloadbalancerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFedloadbalancerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteFedloadbalancerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.fedloadbalancer.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询单个联邦负载均衡实例
 * Summary: 查询单个联邦负载均衡实例
 */
func (client *Client) GetFedloadbalancer(request *GetFedloadbalancerRequest) (_result *GetFedloadbalancerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetFedloadbalancerResponse{}
	_body, _err := client.GetFedloadbalancerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询单个联邦负载均衡实例
 * Summary: 查询单个联邦负载均衡实例
 */
func (client *Client) GetFedloadbalancerEx(request *GetFedloadbalancerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetFedloadbalancerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetFedloadbalancerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.fedloadbalancer.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 导入统一解决方案
 * Summary: 导入统一解决方案
 */
func (client *Client) ImportUnireleaseSolution(request *ImportUnireleaseSolutionRequest) (_result *ImportUnireleaseSolutionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportUnireleaseSolutionResponse{}
	_body, _err := client.ImportUnireleaseSolutionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 导入统一解决方案
 * Summary: 导入统一解决方案
 */
func (client *Client) ImportUnireleaseSolutionEx(request *ImportUnireleaseSolutionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportUnireleaseSolutionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportUnireleaseSolutionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.unirelease.solution.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询解决方案列表
 * Summary: 查询解决方案列表
 */
func (client *Client) ListUnireleaseSolutions(request *ListUnireleaseSolutionsRequest) (_result *ListUnireleaseSolutionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListUnireleaseSolutionsResponse{}
	_body, _err := client.ListUnireleaseSolutionsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询解决方案列表
 * Summary: 查询解决方案列表
 */
func (client *Client) ListUnireleaseSolutionsEx(request *ListUnireleaseSolutionsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListUnireleaseSolutionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListUnireleaseSolutionsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.unirelease.solutions.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询解决方案发布详情
 * Summary: 查询解决方案发布详情
 */
func (client *Client) GetUnireleaseSolution(request *GetUnireleaseSolutionRequest) (_result *GetUnireleaseSolutionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetUnireleaseSolutionResponse{}
	_body, _err := client.GetUnireleaseSolutionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询解决方案发布详情
 * Summary: 查询解决方案发布详情
 */
func (client *Client) GetUnireleaseSolutionEx(request *GetUnireleaseSolutionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetUnireleaseSolutionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetUnireleaseSolutionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.unirelease.solution.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询解决方案发布状态
 * Summary: 查询解决方案发布状态
 */
func (client *Client) GetUnireleaseStatus(request *GetUnireleaseStatusRequest) (_result *GetUnireleaseStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetUnireleaseStatusResponse{}
	_body, _err := client.GetUnireleaseStatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询解决方案发布状态
 * Summary: 查询解决方案发布状态
 */
func (client *Client) GetUnireleaseStatusEx(request *GetUnireleaseStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetUnireleaseStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetUnireleaseStatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.unirelease.status.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 执行机构发布单
 * Summary: 执行机构发布单
 */
func (client *Client) ExecUnireleasePipelines(request *ExecUnireleasePipelinesRequest) (_result *ExecUnireleasePipelinesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecUnireleasePipelinesResponse{}
	_body, _err := client.ExecUnireleasePipelinesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 执行机构发布单
 * Summary: 执行机构发布单
 */
func (client *Client) ExecUnireleasePipelinesEx(request *ExecUnireleasePipelinesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecUnireleasePipelinesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecUnireleasePipelinesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.ldc.unirelease.pipelines.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}
