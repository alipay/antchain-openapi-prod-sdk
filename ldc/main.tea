import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.12.15',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// label selector requirement struct
model LabelSelectorRequirement {
  // label key
  key: string(name='key', example='key'),
  // label match operator
  operator: string(name='operator', example='IN'),
  // label match values
  values: [ string ](name='values', example=''),
}

// label of all k8s resource
model Label {
  // label key
  key: string(name='key', example='labelKey'),
  // label value
  value: string(name='value', example='labelValue'),
}

// k8s label selector
model LabelSelector {
  // matchExpressions is a list of label selector requirements.
  matchExpressions?: [ LabelSelectorRequirement ](name='match_expressions', example=''),
  // matchLabels is a map of {key,value} pairs
  matchLabels?: [ Label ](name='match_labels', example=''),
}

// V1NodeSelectorRequirement
model NodeSelectorRequirement {
  // key
  key: string(name='key', example='key'),
  // operator
  operator: string(name='operator', example='IN'),
  // values
  values: [ string ](name='values', example=''),
}

// nodeSelectorterm
model NodeSelectorTerm {
  // A list of node selector requirements by node labels.
  // 
  matchExpressions?: [ NodeSelectorRequirement ](name='match_expressions', example=''),
  // A list of node selector requirements by node fields.
  // 
  matchFields: [ NodeSelectorRequirement ](name='match_fields', example=''),
}

// http方式的健康检查配置
model HttpGetAction {
  // 健康检查url地址。
  path: string(name='path', example='/checkService'),
  // 健康检查端口。
  port: string(name='port', example='80'),
  // 协议类型，http/https。
  scheme: string(name='scheme', example='http'),
}

// 命令行方式的健康检查配置。
model ExecAction {
  // 执行健康检查的命令。
  command: string(name='command', example='sh /home/admin/checkservice.sh'),
}

// V1PodAffinityTerm
model PodAffinityTerm {
  // labelSelctor
  labelSelector: LabelSelector(name='label_selector', example=''),
  // namespaces
  namespaces: [ string ](name='namespaces', example=''),
}

// tcp方式的健康检查配置。
model TcpSocketAction {
  // 健康检查端口。
  port: string(name='port', example='80'),
}

// V1NodeSelector
model NodeSelector {
  // node selector terms
  nodeSelectorTerms: [ NodeSelectorTerm ](name='node_selector_terms', example=''),
}

// 基于configmap&secret的volume。
model ConfigmapSecretVolumeSource {
  // 引用volume名称。
  volumeRefName: string(name='volume_ref_name', example='test-config'),
}

// volume mount of PersistentVolumeClaim.
model PersistentVolumeClaimSource {
  // 引用的PVC名称。
  pvcName: string(name='pvc_name', example='testpvc'),
}

// V1WeightedPodAffinityTerm
model WeightedPodAffinityTerm {
  // Pod Affinity Term
  podAffinityTerm: PodAffinityTerm(name='pod_affinity_term', example=''),
  // weight
  weight: long(name='weight', example=''),
}

// k8s prefer schedule term
model PreferredSchedulingTerm {
  // A null or empty node selector term matches no objects
  preference?: NodeSelectorTerm(name='preference', example=''),
  // Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
  // 
  weight: long(name='weight', example=''),
}

// 本地磁盘volume。
model LocalDiskVolumeSource {
  // 主机路径。
  hostDirectoryPath: string(name='host_directory_path', example='/tmp'),
  // 是否允许创建。
  createIfNotPresent: boolean(name='create_if_not_present', example='true, false'),
}

// 表示容器的环境变量来源。
model EnvVarSource {
  // 对应的ConfigMap或Secret名称。
  objectName: string(name='object_name', example='app_config'),
  // 对应的Object类型。
  // 取值：ConfigMap | Secret
  objectType: string(name='object_type', example='ConfigMap | Secret'),
  // 引用的ConfigMap或则Secret的key。
  key: string(name='key', example='data'),
}

// EmptyDir based volume.
model EmptyDirVolumeSource {
  // 存储介质。
  medium: string(name='medium', example='memory'),
  // volume name。
  name: string(name='name', example='vol'),
  // 存储大小。
  sizeLimit: string(name='size_limit', example='100g'),
}

// 健康检查探针
// 
model HealthCheckProbe {
  // 基于命令行类型的探针必填
  execAction?: ExecAction(name='exec_action', example=''),
  // 探针运行失败阈值
  // 
  failureThreshold: long(name='failure_threshold', example='1'),
  // 基于HTTP GET请求的探针必填
  // 
  httpGetAction?: HttpGetAction(name='http_get_action', example=''),
  // 探针初始运行延迟时间
  // 
  initialDelaySeconds: long(name='initial_delay_seconds', example='1'),
  // 探针运行间隔时间
  // 
  periodSeconds: long(name='period_seconds', example='1'),
  // 探针运行成功阈值
  // 
  successThreshold: long(name='success_threshold', example='1'),
  // 基于TCP连接的探针必填
  // 
  tcpSocketAction?: TcpSocketAction(name='tcp_socket_action', example=''),
  // 探针运行超时时间
  // 
  timeOutSeconds: long(name='time_out_seconds', example='1'),
}

// PodAntiAffinity
model PodAntiAffinity {
  // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions.
  preferredDuringSchedulingIgnoredDuringExecution?: [ WeightedPodAffinityTerm ](name='preferred_during_scheduling_ignored_during_execution', example=''),
  // If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node
  requiredDuringSchedulingIgnoredDuringExecution?: [ PodAffinityTerm ](name='required_during_scheduling_ignored_during_execution', example=''),
}

// 弹性伸缩指标目标值类型
model HPABasedElasticConfigMetricTargetResourceValue {
  // 数值
  value: long(name='value', example='1'),
  // 数值单位:
  // Byte, Ki, Mi, Gi, Ti, Pi
  // m, C
  unit: string(name='unit', example='Gi'),
}

// Container Spec 字段 Override 对象
model FieldOverride {
  // 部署单元名称
  cell: string(name='cell', example='RZ00A'),
  // 字段名称
  name: string(name='name', example='image'),
  // 字段值
  value: string(name='value', example='nginx:latest'),
}

// 弹性扩缩容规则策略
model HPAScalePolicy {
  // 枚举型：
  // - pods：按pod个数扩缩容；
  // - percent：基于当前副本数的百分比扩缩容。
  type: string(name='type', example='pods'),
  // 当type为percent时，value值为增长副本数的百分比，900%表示在原先副本数的基础上增加9倍（单位：%）；当type为pods时，value值为增加的副本数目（单位：个）。
  value: long(name='value', example='900'),
  // 每次扩缩容动作间隔时间：600表示每10分钟操作一次
  periodSeconds?: long(name='period_seconds', example='600'),
}

// PodAffinity
model PodAffinity {
  // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions.
  preferredDuringSchedulingIgnoredDuringExecution?: [ WeightedPodAffinityTerm ](name='preferred_during_scheduling_ignored_during_execution', example=''),
  // f the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node.
  requiredDuringDchedulingIgnoredDuringExecution: [ PodAffinityTerm ](name='required_during_dcheduling_ignored_during_execution', example=''),
}

// 日志配置实体
model LogConfigEntity {
  // 配置名称
  configName: string(name='config_name', example='sample-logtail-config'),
  // 输入类型
  inputType: string(name='input_type', example='file'),
  // 日志库名称
  logstoreName: string(name='logstore_name', example='sls-test-logstore'),
  // 日志目录
  logPath: string(name='log_path', example='/var/log/httpd/'),
  // file_pattern
  filePattern?: string(name='file_pattern', example='*'),
}

// Node affinity is a group of node affinity scheduling rules.
model NodeAffinity {
  // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions
  preferredDuringSchedulingIgnoredDuringExecution?: [ PreferredSchedulingTerm ](name='preferred_during_scheduling_ignored_during_execution', example=''),
  // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node
  requiredDuringDchedulingIgnoredDuringExecution: NodeSelector(name='required_during_dcheduling_ignored_during_execution', example=''),
}

// 健康检查配置
// 
model HealthCheckConfig {
  // liveness 检查
  // 
  livenessProbe?: HealthCheckProbe(name='liveness_probe', example=''),
  // readiness 检查
  // 
  readinessProbe?: HealthCheckProbe(name='readiness_probe', example=''),
}

// 表示容器的环境变量。
model EnvVar {
  // 环境变量名称。
  name: string(name='name', example='app_name'),
  // 环境变量value。
  value?: string(name='value', example='test-app'),
  // 环境变量的取值来源。
  valueFrom?: EnvVarSource(name='value_from', example='{}'),
  // EnvVar类型
  type?: string(name='type', example='MANUAL, CONFIGMAP, SECRET'),
}

// Pod container VolumeMount info。
model VolumeMount {
  // 引用Configmap&Secret的存储。
  configmapSecretVolumeSource?: ConfigmapSecretVolumeSource(name='configmap_secret_volume_source', example='{}'),
  // 基于empty dir的存储。
  emptyDirVolumeSource?: EmptyDirVolumeSource(name='empty_dir_volume_source', example='{}'),
  // 基于本地磁盘的存储资源。
  localDiskVolumeSource?: LocalDiskVolumeSource(name='local_disk_volume_source', example='{}'),
  // 容器内挂载路径。
  mountPath: string(name='mount_path', example='/home/admin/logs'),
  // 引用的volume名称。
  name?: string(name='name', example='volume mount'),
  // 是否只读。
  readOnly: boolean(name='read_only', example='true, false'),
  // 容器内挂载路径子路径。
  subPath?: string(name='sub_path', example='/home/admin/logs/'),
  // 数据卷类型，取值 LOCAL_STORAGE：主机挂载， CONFIGMAP：配置项， SECRET：保密字典
  volumeSourceCategoryType: string(name='volume_source_category_type', example='LOCAL_STORAGE'),
  // 引用的PVC信息。
  pvcSource?: PersistentVolumeClaimSource(name='pvc_source', example='{}'),
  // 容器内挂载子路径的表达式，与sub_path互斥
  subPathExpr?: string(name='sub_path_expr', example='$(POD_NAME)'),
}

// 环境变量配置覆盖。
model EnvVarOverride {
  // 部署单元名称。
  cell: string(name='cell', example='RZ01A'),
  // 环境变量名称。
  name: string(name='name', example='db_url'),
  // 环境变量取值。
  value: string(name='value', example='test'),
}

// MapStringToStringEntity
model MapStringToString {
  // key
  key: string(name='key', example='key'),
  // value
  value: string(name='value', example='value'),
}

// 容器生命周期hook。
model LifecycleHook {
  // 启动后执行命令。
  postStartExec?: ExecAction(name='post_start_exec', example='{}'),
  // 启动后执行http get。
  postStartHttp?: HttpGetAction(name='post_start_http', example='{}'),
  // 启动后执行TCP请求。
  postStartTcp?: TcpSocketAction(name='post_start_tcp', example='{}'),
  // 停止前执行命令。
  preStopExec?: ExecAction(name='pre_stop_exec', example='{}'),
  // 停止前http get。
  preStopHttp?: HttpGetAction(name='pre_stop_http', example='{}'),
  // 停止前TCP请求。
  preStopTcp?: TcpSocketAction(name='pre_stop_tcp', example='{}'),
}

// V1PodDNSConfigOption， PodDNSConfigOption defines DNS resolver options of a pod.
// 
// 
model PodDNSConfigOption {
  // name
  name?: string(name='name', example='name'),
  // value
  value?: string(name='value', example='value'),
}

// PodAffinityTermEntity
model PodAffinityTermEntity {
  // label_selector
  labelSelector?: [ MapStringToString ](name='label_selector', example=''),
  // namespaces
  namespaces?: [ string ](name='namespaces', example='namespaces'),
  // topology_key
  topologyKey?: string(name='topology_key', example='topology_key'),
}

// affinity MatchExpression
model MatchExpression {
  // key
  key: string(name='key', example='key'),
  // operator
  operator: string(name='operator', example='operator'),
  // values
  values?: [ string ](name='values', example='values'),
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
model Toleration {
  // 取值：NoExecute、PreferNoSchedule、NoSchedule
  effect: string(name='effect', example='PreferNoSchedule and NoExecute.'),
  // Key is the taint key that the toleration applies to.
  key: string(name='key', example='key'),
  // 取值：Equal、Exists
  operator?: string(name='operator', example='Equal'),
  // TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. 
  tolerationSeconds?: long(name='toleration_seconds', example=''),
  // Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
  value?: string(name='value', example='value'),
}

// container state running
model ContainerStateRunning {
  // container启动时间
  startedAt: string(name='started_at', example='2019-12-05'),
}

// k8s resource annotations
model Annotation {
  // annotation key
  key: string(name='key', example='key'),
  // annotation value
  value: string(name='value', example='value'),
}

// 容器配置。
model ContainerSpec {
  // 最大CPU限制，格式 1/1m。
  cpuLimit: string(name='cpu_limit', example='1'),
  // 最少需要的CPU核数，格式 1/1m。
  cpuRequest: string(name='cpu_request', example='100m'),
  // 启动命令。
  entryPoints?: [ string ](name='entry_points', example='[_/bin/bash_]'),
  // 环境变量。
  envs?: [ EnvVar ](name='envs', example='[]'),
  // 容器环境变量配置覆盖。
  envOverrides?: [ EnvVarOverride ](name='env_overrides', example='[{}]'),
  // 健康检查配置
  // 
  healthCheckConfig?: HealthCheckConfig(name='health_check_config', example=''),
  // 地址，格式形如 repository:tag。
  image: string(name='image', example='nginx:latest'),
  // 镜像构建名。
  imageBuildName?: string(name='image_build_name', example='test_build'),
  // image pull secret
  imagePullSecret?: string(name='image_pull_secret', example='secret'),
  // 镜像来源，构建/普通镜像。
  imageSource: string(name='image_source', example='BUILD_CFG/RAW_IMAGE'),
  // 生命周期钩子。
  lifecycleHook?: LifecycleHook(name='lifecycle_hook', example='{}'),
  // 日志服务配置
  logConfigs?: [ LogConfigEntity ](name='log_configs', example=''),
  // 最大内存限制，单位 Byte/Ki/Mi/Gi/Ti/Pi。
  memoryLimit: string(name='memory_limit', example='1G'),
  // 最小需要的内存大小，单位 Byte/Ki/Mi/Gi/Ti/Pi。
  memoryRequest: string(name='memory_request', example='500M'),
  // 容器名称。
  name: string(name='name', example='test'),
  // 重启策略。
  restartPolicy: string(name='restart_policy', example='Always/OnFailure/Never'),
  // 容器类型。
  type: string(name='type', example='APP/INIT/SIDECAR'),
  // 存储卷
  // 
  volumeMounts?: [ VolumeMount ](name='volume_mounts', example=''),
  // volumeMountV2, json格式，方便扩展, 与volumes_str搭配使用，启用后废弃volume_mount字段
  // {
  // 	"volumeMounts": [{
  // 		"mountPath": "/container/config",
  // 		"name": "aarm-base-configmap-volume",
  // 		"readOnly": true
  // 	}, {
  // 		"mountPath": "/container/scrt",
  // 		"name": "panling-secret-volume",
  // 		"readOnly": true
  // 	}, {
  // 		"mountPath": "/container/pvc",
  // 		"name": "afa-public-data-pv",
  // 		"readOnly": true
  // 	}, {
  // 		"mountPath": "/container/local",
  // 		"name": "container-local-host-volume",
  // 		"readOnly": true
  // 	}]
  // }
  // 这里会兼容原来OpenAPI传过来的volume_mount字段
  volumeMountsStr?: string(name='volume_mounts_str', example='{}'),
  // 与volume_mounts_str搭配使用，描述pod的volume部分
  // {
  // 	"volumes": [{
  // 			"configMap": {
  // 				"defaultMode": 256,
  // 				"name": "aarm-base"
  // 			},
  // 			"name": "aarm-base-configmap-volume"
  // 		},
  // 		{
  // 			"name": "panling-secret-volume",
  // 			"secret": {
  // 				"defaultMode": 256,
  // 				"secretName": "panling"
  // 			}
  // 		},
  // 		{
  // 			"name": "afa-public-data-pv",
  // 			"persistentVolumeClaim": {
  // 				"claimName": "afa-public-data"
  // 			}
  // 		},
  // 		{
  // 			"hostPath": {
  // 				"path": "/local"
  // 			},
  // 			"name": "container-local-host-volume"
  // 		}
  // 	]
  // }
  volumesStr?: string(name='volumes_str', example='{}'),
  // 基础字段覆盖
  fieldOverrides?: [ FieldOverride ](name='field_overrides', example=''),
}

// 弹性伸缩指标目标值
model HPABasedElasticConfigMetricTarget {
  // 支持两种类型：AverageValue，Utilization
  type: string(name='type', example='Utilization'),
  // value
  value?: HPABasedElasticConfigMetricTargetResourceValue(name='value', example=''),
  // 利用率
  utilization?: long(name='utilization', example='90'),
}

// PodReadinessGate contains the reference to a pod condition
model PodReadinessGate {
  // ConditionType refers to a condition in the pod_s condition list with matching type.
  conditionType: string(name='condition_type', example='ok'),
}

// 弹性扩缩容高级配置规则
model HPAScaleRule {
  // 冷却窗口时间
  stabilizationWindowSeconds?: long(name='stabilization_window_seconds', example='600'),
  // 扩缩容策略
  policies?: [ HPAScalePolicy ](name='policies', example='[{}]'),
}

// Affinity is a group of affinity scheduling rules.
model Affinity {
  // Describes node affinity scheduling rules for the pod.
  // 
  nodeAffinity?: NodeAffinity(name='node_affinity', example=''),
  // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
  podAffinity?: PodAffinity(name='pod_affinity', example=''),
  // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
  // 
  podAntiAffinity?: PodAntiAffinity(name='pod_anti_affinity', example=''),
}

// container state terminated
model ContainerStateTerminated {
  // container id
  containerId: string(name='container_id', example='docker://020066114b989a2c789c8eeee8bfb1f9b64bfdd2d7d48b3a738fa6f91246cb67'),
  // exit code
  exitCode: long(name='exit_code', example='1'),
  // container结束时间
  finishedAt: string(name='finished_at', example='2019-10-05'),
  // message
  message: string(name='message', example='exit'),
  // reason
  reason: string(name='reason', example='killed by OOM'),
  // signal
  signal: string(name='signal', example='136'),
  // container start time
  startedAt: string(name='started_at', example='2019-12-05'),
}

// ResourceValue
model ResourceValue {
  // value
  value: long(name='value', example='1'),
  // Ki、Mi、Gi、Ti、Pi、m、c
  unit: string(name='unit', example='Gi'),
}

// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod_s hosts file.
model HostAlias {
  // Hostnames for the above IP address.
  hostnames?: [ string ](name='hostnames', example=''),
  // IP address of the host file entry.
  // 
  ip?: string(name='ip', example='192.168.1.1'),
}

// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
model PodDNSConfig {
  // A list of DNS name server IP addresses
  nameservers?: [ string ](name='nameservers', example=''),
  // A list of DNS resolver options. 
  options?: [ PodDNSConfigOption ](name='options', example=''),
  // A list of DNS search domains for host-name lookup
  searches: [ string ](name='searches', example=''),
}

// pod volume info.
model Volume {
  // 主机目录[仅针对HostPath类型volume有效]
  hostPath?: string(name='host_path', example='/home/admin'),
  // Volume名称。
  name: string(name='name', example='test-volume'),
  // 关联的资源名称。
  refResourceName?: string(name='ref_resource_name', example='secret_name'),
  //  LOCAL_STORAGE：主机挂载|CONFIGMAP：配置项|SECRET：保密字典
  type: string(name='type', example='LOCAL_STORAGE/SECRET/CONFIGMAP'),
  // Volume是否只读
  readOnly?: boolean(name='read_only', example='true, false'),
}

// PodNodeSelector
model PodNodeSelector {
  // key
  key: string(name='key', example='key'),
  // value
  value: string(name='value', example='value'),
}

// container state waiting
model ContainerStateWaiting {
  // message
  message: string(name='message', example='msg'),
  // reason
  reason: string(name='reason', example='reason'),
}

// pod detail info
model PodDetailInfo {
  // 集群名称
  // 
  cluster: string(name='cluster', example='prod'),
  // pod created time
  createdTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time', example='2019/10/26 01:35:47'),
  // 已经具备的finalizers
  finalizers?: [ string ](name='finalizers', example='pod.beta1.sigma.ali/cni-allocated'),
  // pod的生命周期当前阶段
  lifecycleStage?: string(name='lifecycle_stage', example='ServiceAvailable, UpgradePrepared, Upgrading, UpgradeFinished'),
  // pod name
  name: string(name='name', example='name'),
  // pod namespace
  namespace: string(name='namespace', example='default'),
  // pod ip
  podIp: string(name='pod_ip', example='11.121.11.12'),
  // pod的版本
  revision?: string(name='revision', example='20191125163053504.j58d67yt'),
  // pod status
  status: string(name='status', example='Running'),
  // pod uid
  uid?: string(name='uid', example='02b6addf-0f5e-11ea-a5a3-02420ba6ade1'),
  // 描述Pod当前状态的信息
  message: string(name='message', example='pod message'),
}

// deployment strategy rolling update
model RollingUpdateDeployment {
  // The maximum number of pods that can be scheduled above the desired number of pods.
  maxSurge?: string(name='max_surge', example='5'),
  // The maximum number of pods that can be unavailable during the update.
  maxUnavailable?: string(name='max_unavailable', example='5'),
}

// 扩缩容策略高级配置项
model HPAScaleBehavior {
  // 扩容高级规则
  scaleUp?: HPAScaleRule(name='scale_up', example=''),
  // 缩容高级规则
  scaleDown?: HPAScaleRule(name='scale_down', example=''),
}

// MapResourceNameToValue
model MapResourceNameToValue {
  // key
  key: string(name='key', example='key'),
  // value
  value: ResourceValue(name='value', example=''),
}

// LoadBalancer监听。
model LoadBalancerListener {
  // 负载均衡实例后端使用的端口。
  // 取值：1-65535。
  backendServerPort: long(name='backend_server_port', example='80'),
  // 监听的带宽峰值，取值：
  // -1：不限制带宽峰值。
  // 1~5120：监听的带宽峰值，所有监听的带宽峰值之和不能超过实例的带宽峰值。
  bandWidth?: long(name='band_width', example='100'),
  // CA证书ID。
  // 若既上传CA证书又上传服务器证书，即采用双向认证。
  // 若用户只上传服务器证书，即为单向认证。
  caCertificateId?: string(name='ca_certificate_id', example='139a00604ad-cn-east-hangzhou-01'),
  // 服务器上配置的Cookie。
  // 长度为1~200个字符，只能包含ASCII英文字母和数字字符，不能包含逗号、分号或空格，也不能以开头。
  cookie?: string(name='cookie', example='SERVERID'),
  // Cookie超时时间
  cookieTimeout?: long(name='cookie_timeout', example='100'),
  // 连接超时时间（秒）
  establishedTimeout?: long(name='established_timeout', example='500'),
  // 健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。
  // 取值: 2-10。
  healthyThreshold?: long(name='healthy_threshold', example='4'),
  // 是否开启健康检查。
  // 取值：ON | OFF。
  healthCheck?: string(name='health_check', example='ON'),
  // 健康检查端口。
  healthCheckConnectPort?: long(name='health_check_connect_port', example='80'),
  // 健康检查链接超时时间。
  healthCheckConnectTimeout?: long(name='health_check_connect_timeout', example='10'),
  // 用于健康检查的域名。取值：
  // ip： 后端服务器的私网IP。当指定了IP或该参数未指定时，负载均衡会使用各后端服务器的私网IP当做健康检查使用的域名。
  // domain：域名长度为1-80，只能包含字母、数字、点号（.）和连字符（-）。
  healthCheckDomain?: string(name='health_check_domain', example='ip'),
  // 健康检查正常的HTTP状态码，多个状态码用逗号分隔。
  // 默认值为http_2xx。
  healthCheckHttpCode?: string(name='health_check_http_code', example='http_2xx'),
  // 健康检查的时间间隔。
  // 取值:1-50（秒）。
  healthCheckInterval?: long(name='health_check_interval', example='3'),
  // 健康检查threshold。
  healthCheckThreshold?: long(name='health_check_threshold', example='10'),
  // 接收来自运行状况检查的响应需要等待的时间。如果后端ECS在指定的时间内没有正确响应，则判定为健康检查失败。
  // 取值：1-300（秒）。
  healthCheckTimeout?: long(name='health_check_timeout', example='3'),
  // 用于健康检查的URI。
  // 当TCP监听需要使用HTTP健康检查时可配置此参数，如不配置则按TCP健康检查。
  healthCheckUri?: string(name='health_check_uri', example='/test/index.html'),
  // 负载均衡实例前端使用的端口。
  // 取值：1-65535。
  listenerPort?: long(name='listener_port', example='80'),
  // TCP 会话保持的超时时间（秒）
  persistenceTimeout?: long(name='persistence_timeout', example='0'),
  // 监听使用协议。
  protocol?: string(name='protocol', example='TCP,UDP,HTTP,HTTPS'),
  // 负载均衡策略（RR 轮询 | WLC 最小连接数）
  scheduler?: string(name='scheduler', example='RR'),
  // 0不开会话保持 / 1植入Cookie / 2重写Cookie。
  // 开启会话保持功能后，负载均衡会把来自同一客户端的访问请求分发到同一台后端服务器上进行处理。
  // HTTP协议会话保持基于Cookie。负载均衡提供了两种Cookie处理方式：
  // 植入Cookie：您只需要指定Cookie的过期时间。
  // 客户端第一次访问时，负载均衡会在返回请求中植入Cookie（即在HTTP/HTTPS响应报文中插入SERVERID），下次客户端携带此Cookie访问，负载均衡服务会将请求定向转发给之前记录到的后端服务器上。
  // 重写Cookie：可以根据需要指定HTTPS/HTTP响应中插入的Cookie。您需要在后端服务器上维护该Cookie的过期时间和生存时间。
  // 负载均衡服务发现用户自定义了Cookie，将会对原来的Cookie进行重写，下次客户端携带新的Cookie访问，负载均衡服务会将请求定向转发给之前记录到的后端服务器
  sessionStickyType: long(name='session_sticky_type', example='0'),
  // 健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。
  // 取值：2-10。
  unhealthyThreshold?: long(name='unhealthy_threshold', example='4'),
  // 是否开启通过 X-Forwarded-For 的方式获取来访者真实 IP
  xforwardFor?: boolean(name='xforward_for', example='true, false'),
  // 统一接入域名
  domain?: string(name='domain', example='alipay.net'),
  // 统一接入转发路径
  path?: string(name='path', example='/urlpath'),
}

// 某一部署单元或集群对应的副本数。
model ReplicaCount {
  // 副本数量是部署单元维度还是集群维度。目前只支持Cell
  type: string(name='type', example='Cell | Cluster'),
  // 部署单元名称或集群名称。
  name: string(name='name', example='CellA'),
  // 对应副本数量。
  count: long(name='count', example='10'),
  // （针对huanyu场景），original_count该单元当前的副本个数（count对应期望的副本个数）
  originalCount?: long(name='original_count', example='5'),
}

// node affinity entity
model NodeAffinityConfig {
  // match_expressions
  matchExpressions?: [ MatchExpression ](name='match_expressions', example=''),
  // requested
  requested?: boolean(name='requested', example='true, false'),
  // weight
  weight?: long(name='weight', example=''),
}

// 每个cell副本数map
model CellReplicasMap {
  // cell name
  name: string(name='name', example='RZ00A'),
  // 副本数
  replicas: long(name='replicas', example='1'),
}

// Specification of the desired behavior of the pod. 
model PodSpec {
  // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers
  activeDeadlineSeconds?: long(name='active_deadline_seconds', example=''),
  // If specified, the pod_s scheduling constraints
  // 
  affinity?: Affinity(name='affinity', example=''),
  // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
  // 
  automountServiceAccountToken?: boolean(name='automount_service_account_token', example='true, false'),
  // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
  // 
  containers: [ ContainerSpec ](name='containers', example=''),
  // Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
  dnsConfig?: PodDNSConfig(name='dns_config', example=''),
  // Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are _ClusterFirstWithHostNet_, _ClusterFirst_, _Default_ or _None_. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to _ClusterFirstWithHostNet_.
  dnsPolicy?: string(name='dns_policy', example='ClusterFirstWithHostNet_, _ClusterFirst_,'),
  // EnableServiceLinks indicates whether information about services should be injected into pod_s environment variables, matching the syntax of Docker links. Optional: Defaults to true.
  // 
  enableServiceLinks?: boolean(name='enable_service_links', example='true, false'),
  // HostAliases is an optional list of hosts and IPs that will be injected into the pod_s hosts file if specified. This is only valid for non-hostNetwork pods.
  hostAliases?: HostAlias(name='host_aliases', example=''),
  // Use the host_s ipc namespace. Optional: Default to false.
  // 
  hostIpc?: boolean(name='host_ipc', example='true, false'),
  // Host networking requested for this pod. Use the host_s network namespace. If this option is set, the ports that will be used must be specified. Default to false.
  // 
  hostNetwork?: boolean(name='host_network', example='true, false'),
  // Use the host_s pid namespace. Optional: Default to false.
  // 
  hostPid?: boolean(name='host_pid', example='true, false'),
  // Specifies the hostname of the Pod If not specified, the pod_s hostname will be set to a system-defined value.
  // 
  hostname?: string(name='hostname', example='hostname'),
  // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec
  imagePullSecrets?: [ string ](name='image_pull_secrets', example=''),
  // List of initialization containers belonging to the pod
  initContainers?: [ ContainerSpec ](name='init_containers', example=''),
  // NodeName is a request to schedule this pod onto a specific node. 
  nodeName?: string(name='node_name', example='nodename'),
  // NodeSelector is a selector which must be true for the pod to fit on a node
  nodeSelector?: [ PodNodeSelector ](name='node_selector', example=''),
  // The priority value. Various system components use this field to find the priority of the pod.
  priority?: long(name='priority', example=''),
  // If specified, indicates the pod_s priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority
  priorityClassName?: string(name='priority_class_name', example='system-node-critical", "system-cluster-critical"'),
  // If specified, all readiness gates will be evaluated for pod readiness
  readinessGates?: PodReadinessGate(name='readiness_gates', example=''),
  // Restart policy for all containers within the pod
  restartPolicy?: string(name='restart_policy', example='Always, OnFailure, Never'),
  // ServiceAccountName is the name of the ServiceAccount to use to run this pod
  serviceAccountName?: string(name='service_account_name', example='default-service-account'),
  // If specified, the pod_s tolerations.
  // 
  tolerations?: [ Toleration ](name='tolerations', example=''),
  // List of volumes that can be mounted by containers belonging to the pod
  volumes?: [ Volume ](name='volumes', example=''),
}

// 弹性伸缩指标
model HPABasedElasticConfigMetric {
  // 指标名称：
  // CPU，Memory，QPS，RT
  name: string(name='name', example='CPU'),
  // 目标值
  target: HPABasedElasticConfigMetricTarget(name='target', example=''),
}

// k8s meta元数据
model ObjectMeta {
  // k8s meta annotation
  annotations?: [ Annotation ](name='annotations', example=''),
  // 创建时间戳
  creationTimestamp?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='creation_timestamp', example='20190801'),
  // k8s meta labels
  labels: [ Label ](name='labels', example=''),
  // 名称
  name?: string(name='name', example='name'),
  // 命名空间
  namespace?: string(name='namespace', example='default'),
}

// PodAffinityConfigEntity
model PodAffinityConfig {
  // anti_affinity
  antiAffinity?: boolean(name='anti_affinity', example='true, false'),
  // pod_affinity_term
  podAffinityTerm?: PodAffinityTermEntity(name='pod_affinity_term', example=''),
  // requested
  requested?: boolean(name='requested', example='true, false'),
  // weight
  weight?: long(name='weight', example=''),
}

// container state
model ContainerState {
  // container running state
  running: ContainerStateRunning(name='running', example='{}'),
  // container terminated state
  terminated: ContainerStateTerminated(name='terminated', example='{}'),
  // container waiting state
  waiting: ContainerStateWaiting(name='waiting', example='{}'),
}

// AffinityEntity
model AffinityEntity {
  // NodeAffinityConfig list
  nodeAffinity?: [ NodeAffinityConfig ](name='node_affinity', example=''),
  // pod_affinity list
  podAffinity?: [ PodAffinityConfig ](name='pod_affinity', example=''),
}

// ResourceRequirementConfig
model ResourceRequirementConfig {
  // limits
  limits?: [ MapResourceNameToValue ](name='limits', example=''),
  // requests
  requests?: [ MapResourceNameToValue ](name='requests', example=''),
}

// 一个计算容器上正在执行的任务。
model OpsComputerTask {
  // 任务描述
  description?: string(name='description', example=''),
  // 执行详情。如果任务成功，为执行日志；如果任务失败，为错误信息
  executeDetails?: string(name='execute_details', example=''),
  // 任务结束时间
  finishTime?: string(name='finish_time', example=''),
  // 任务名称
  name?: string(name='name', example=''),
  // 任务开始时间
  startTime?: string(name='start_time', example=''),
  // 任务状态。取值列表： EXECUTING：执行中； SUCCESS：执行成功； FAILED：执行失败
  status?: string(name='status', example=''),
}

// 镜像中心账户信息
model RegistryAccout {
  // registry email url
  email?: string(name='email', example='aaa@aliapy.com'),
  // registry password
  password: string(name='password', example='123456'),
  // registry url
  registry: string(name='registry', example='registry.com'),
  // registry username
  username: string(name='username', example='admin'),
}

// 基于弹性伸缩的应用服务配置
model HPABasedElasticConfig {
  // pod要发布的部署单元及每个部署单元副本数的映射关系列表
  cells: [ CellReplicasMap ](name='cells', example='[{}]'),
  // 最小副本数
  minReplica: long(name='min_replica', example='1'),
  // 最大副本数
  maxReplica: long(name='max_replica', example='10'),
  // 弹性伸缩指标列表
  metrics: [ HPABasedElasticConfigMetric ](name='metrics', example=''),
  // 扩缩容规则高级配置
  behavior?: HPAScaleBehavior(name='behavior', example=''),
}

// 单元服务器(pod)信息
model CellServer {
  // 单元名字
  cell: string(name='cell', example='gz00c'),
  // server或pod组
  servers?: [ string ](name='servers', example='["huanyu-40-5001", "huanyu-40-5002"]'),
  // cell中host的数量
  count: long(name='count', example='3'),
  // servers列表对应的服务器/pod ip地址列表，目前仅在antcloud.ldc.opsplan.stages.export方法中返回
  serverIps?: [ string ](name='server_ips', example='[]'),
}

// 固定副本数弹性配置。
model FixedReplicaElasticConfig {
  // 各部署单元/集群的副本数配置。
  replicas: [ ReplicaCount ](name='replicas', example='[]'),
}

// 应用发布单个cell发布进度详情
model AppDeployCell {
  // 单元名字
  cellName: string(name='cell_name', example='cz00a'),
  // 执行到当前cell的pod总数
  partition: long(name='partition', example='10'),
  // 当前分组发布的pod数
  releaseCount: long(name='release_count', example='10'),
  // 当前cell发布的pod列表
  podList: [ PodDetailInfo ](name='pod_list', example=''),
}

// DeploymentCondition describes the state of a deployment at a certain point.
model DeploymentCondition {
  // Last time the condition transitioned from one status to another.
  lastTransitionTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='last_transition_time', example='2018-10-10T10:10:00Z'),
  // The last time this condition was updated.
  // 
  lastUpdateTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='last_update_time', example='2018-10-10T10:10:00Z'),
  // A human readable message indicating details about the transition.
  // 
  message?: string(name='message', example='message'),
  // The reason for the condition_s last transition.
  // 
  reason?: string(name='reason', example='reason'),
  // Status of the condition, one of True, False, Unknown.
  // 
  status: string(name='status', example='True, False, Unknown.'),
  // Type of deployment condition.
  // 
  type: string(name='type', example='type'),
}

// 统一接入listener需要配置转发规则。
model LoadBalancerListenerWithRule {
  // 统一接入域名。
  domain: string(name='domain', example='alipay.net'),
  // 负载均衡监听。
  listener: LoadBalancerListener(name='listener', example='{}'),
  // 转发路径。
  path: string(name='path', example='/urlpath'),
  // 权重。
  weight?: long(name='weight', example='50'),
}

// Deployment PodTemplateSpec
model PodTemplateSpec {
  // k8s Standard object_s metadata. 
  metadata: ObjectMeta(name='metadata', example=''),
  // Specification of the desired behavior of the pod.
  spec: PodSpec(name='spec', example=''),
}

// container status
model ContainerStatus {
  // container id
  containerId: string(name='container_id', example='docker://020066114b989a2c789c8eeee8bfb1f9b64bfdd2d7d48b3a738fa6f91246cb67'),
  // image
  image: string(name='image', example='nginx:latest'),
  // 上一次启动时间
  lastStartTime: string(name='last_start_time', example='2019-12-05'),
  // container name
  name: string(name='name', example='nginx'),
  // 是否ready
  ready: boolean(name='ready', example='true, false'),
  // 重启次数
  restartCount: long(name='restart_count', example='1'),
  // container state
  state: ContainerState(name='state', example='{}'),
}

// 统一接入集群子集群覆盖配置项
model SpannerSubClusterOverrides {
  // 机房/可用区
  zone: string(name='zone', example='cn-shanghai-a'),
  // spanner镜像地址
  image: string(name='image', example='xxx.com/soafstack/spanner:1.1.1'),
}

// The deployment strategy to use to replace existing pods with new ones.
model DeploymentStrategy {
  // Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
  rollingUpdate?: RollingUpdateDeployment(name='rolling_update', example=''),
  // Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
  type: string(name='type', example='Recreate'),
}

// 部署单元内Pods
model CellPods {
  // 部署单元名称
  cell: string(name='cell', example='RZ01A'),
  // pod标识列表
  podNames: [ string ](name='pod_names', example='["pod-name-A", "pod-name-B"]'),
}

// 容器服务访问配置端口映射。
model ServicePortMapping {
  // 访问配置前端端口。
  port: long(name='port', example='80'),
  // 访问配置协议。
  protocol: string(name='protocol', example='TCP'),
  // 访问配置后端端口。
  targetPort: long(name='target_port', example='80'),
}

// 统一接入实例http entry status
model HttpEntryStatus {
  // 此entry分配到的spanner后端端口（l7 listener 端口）
  backendPort?: long(name='backend_port', example='4001'),
  // 此entry对应service分配到的节点端口
  nodePort?: long(name='node_port', example='34567'),
}

// 配置项数据
model ConfigMapData {
  // configmap data key
  key: string(name='key', example='key'),
  // configmap data value
  value: string(name='value', example='value'),
}

// 守夜人类型卡点配置
model HasHookConfig {
  // 前置脚本类型，巡检或预案
  preType?: string(name='pre_type', example='01'),
  // 前置巡检或预案id
  preRefId?: string(name='pre_ref_id', example='test'),
  // 前置巡检或预案名称
  preName?: string(name='pre_name', example='test'),
  // 前置巡检或预案参数
  preParam?: string(name='pre_param', example='aaa'),
  // 后置脚本类型，巡检或预案
  postType?: string(name='post_type', example='01'),
  // 后置巡检或预案id
  postRefId?: string(name='post_ref_id', example='test'),
  // 后置巡检或预案参数
  postParam?: string(name='post_param', example='aaa'),
  // 后置巡检或预案名称
  postName?: string(name='post_name', example='test'),
}

// 运维变更对象
model OperationChangeInstance {
  // 主机名
  hostname?: string(name='hostname', example='app-0.domain.alipay.net'),
  // 部署单元
  cell: string(name='cell', example='RZ01A'),
  // ip
  ip?: string(name='ip', example='11.11.11.11'),
  // 资源ID
  id?: string(name='id', example='12345'),
}

// headless service 配置
model HeadlessService {
  // headless service 的名称，不能以-0~-9结尾
  name: string(name='name', example='test-svc'),
}

// Container环境变量集群override
model EnvVarClusterOverride {
  // 环境变量名称
  name: string(name='name', example='db_url'),
  // 环境变量取值
  value: string(name='value', example='test'),
  // Pod容器名称
  containerName: string(name='container_name', example='busybox'),
}

// 容器服务运维
model OpsContainerService {
  // 命名空间
  namespace: string(name='namespace', example='default'),
  // 容器服务名称
  name: string(name='name', example='test'),
  // 待操作目标pods列表
  selectedPods?: [ CellPods ](name='selected_pods', example='[{name: "RZ01A", podNames: ["podA", "podB"]}]'),
}

// 容器服务部署配置。
model DeployConfig {
  // 节点亲和性配置
  affinity?: AffinityEntity(name='affinity', example=''),
  // annotations
  annotations?: string(name='annotations', example='mosn.sidecar.k8s.alipay.com/inject:enabled'),
  // 用户自定义标签，将会在pod上生效
  customLabels?: string(name='custom_labels', example='a=b,c=d'),
  // 最小分组数
  groupCount?: long(name='group_count', example='10'),
  // 容器服务部署分组策略。
  groupStrategy?: string(name='group_strategy', example='Quick'),
  // labels
  labels?: string(name='labels', example='"techStack=SOFA,techStackVersion=v1"'),
  // 单个分组最大Pod数量。
  maxGroupCapacity?: long(name='max_group_capacity', example='10'),
  // 是否需要beta confirm。
  needBeta?: boolean(name='need_beta', example='true, false'),
  // 是否需要分组确认。
  needConfirm?: boolean(name='need_confirm', example='true, false'),
  // 已废弃
  enableSofaMesh?: boolean(name='enable_sofa_mesh', example='true, false'),
  // 只支持InPlace
  upgradeStrategy?: string(name='upgrade_strategy', example='InPlace'),
  // 分组确认策略，FIRST：第一个分组需要确认，EACH：每个分组都需要确认（默认）
  confirmStrategy?: string(name='confirm_strategy', example='FIRST'),
  // pod name 命名规则，lks 1.23.0 开始支持。Default/PersistentSequence
  podNamingPolicy?: string(name='pod_naming_policy', example='Default'),
  // [已废除] 是否开启强制步长控制。对于ALL_ONE, ALL_ONE_CELL_BETA等分组模式，group_count与max_group_capacity字段将生效，提供精细化分组，以满足用户的pod发布并发控制需求
  forceStrideControl?: boolean(name='force_stride_control', example='true, false'),
  // 每个部署单元单批次最大变更pod比例，仅当group_strategy为ALL_CELL_PERCENTAGE时生效
  maxCellPodPercentage?: long(name='max_cell_pod_percentage', example='25, 50'),
}

// 统一接入实例的https entry status
model HttpsEntryStatus {
  // 统一接入实例https entry分配到的spanner 后端端口
  backendPort?: long(name='backend_port', example='4002'),
  // 统一接入实例对应的service分配到的节点端口
  nodePort?: long(name='node_port', example='34568'),
}

// 容器服务弹性配置。
model ElasticConfig {
  // 固定副本数配置。
  fixedReplica?: FixedReplicaElasticConfig(name='fixed_replica', example='{}'),
  // 弹性伸缩配置
  hpa?: HPABasedElasticConfig(name='hpa', example=''),
  // 弹性配置模式：
  // FIXED 固定副本数
  // HPA 弹性伸缩
  mode?: string(name='mode', example='FIXED'),
}

// 统一接入配置。
model IngressConfig {
  // 统一接入域名。
  domain?: string(name='domain', example='sofastack.alipay.net'),
  // 监听及转发规则配置。
  listeners?: [ LoadBalancerListenerWithRule ](name='listeners', example='[{}]'),
  // 关联的负载均衡实例的ID。
  loadBalancerIaasId?: string(name='load_balancer_iaas_id', example='lb-bp1b6c719dfa08ex'),
  // 关联负载均衡实例名称。
  loadBalancerName?: string(name='load_balancer_name', example='test-lb'),
  // 负载均衡网络类型。
  loadBalancerType?: string(name='load_balancer_type', example='INTRANET'),
  // ingress名称。
  name: string(name='name', example='test-ingress'),
  // Spanner集群名称。
  spannerClusterId?: string(name='spanner_cluster_id', example='00000000'),
  // 统一接入协议（http|https）
  unifiedAccessEntries?: [ string ](name='unified_access_entries', example='[http,https]'),
  // 与统一接入协议相对应的统一接入实例入端口列表
  unifiedAccessEntryPorts?: [ long ](name='unified_access_entry_ports', example='[80, 443]'),
  // 所属统一接入实例
  unifiedAccessInstanceName?: string(name='unified_access_instance_name', example='uai1'),
  // 统一接入实例联邦负载均衡id
  unifiedAccessInstanceFederatedId?: string(name='unified_access_instance_federated_id', example='fe22312213ddea'),
  // 监听及转发规则配置 V2
  listenersV2?: [ LoadBalancerListener ](name='listeners_v2', example='[{}]'),
  // 统一接入路由模式（LDC|NONLDC）
  unifiedAccessRouteRule?: string(name='unified_access_route_rule', example='LDC'),
}

// DeploymentStatus
model DeploymentStatus {
  // Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
  // 
  availableReplicas: long(name='available_replicas', example=''),
  // Represents the latest available observations of a deployment_s current state.
  // 
  conditions: [ DeploymentCondition ](name='conditions', example=''),
  // The generation observed by the deployment controller.
  // 
  observedGeneration?: long(name='observed_generation', example='1'),
  // Total number of ready pods targeted by this deployment.
  // 
  readyReplicas: long(name='ready_replicas', example=''),
  // Total number of non-terminated pods targeted by this deployment (their labels match the selector).
  // 
  replicas: long(name='replicas', example=''),
  // Total number of unavailable pods targeted by this deployment. 
  unavailableReplicas: long(name='unavailable_replicas', example=''),
  // Total number of non-terminated pods targeted by this deployment that have the desired template spec.
  updatedReplicas: long(name='updated_replicas', example=''),
}

// V1FederatedDeploymentStatusTopologies
model FederatedDeploymentStatusTopologies {
  // message
  message: string(name='message', example='message'),
  // name
  name: string(name='name', example='name'),
  // status
  status: string(name='status', example='status'),
  // time
  time: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='time', example=''),
}

// api类型自定义卡点配置
model ApiHookConfig {
  // 卡点要调用的api地址
  postUrl: string(name='post_url', example='http://xxx.com/prepost-check'),
  // 授权码
  authKey?: string(name='auth_key', example='1234544'),
  // 接口超时时间，单位ms
  timeout?: string(name='timeout', example='3000'),
  // 查询异步卡点接口执行结果api
  checkUrl?: string(name='check_url', example='http://xxx.com/retrieve-check'),
}

// 集群内ClusterIP类型Service。
model ClusterIpService {
  // 对应ClusterIP service名称。
  name: string(name='name', example='svc'),
  // ClusterIP service暴露的端口列表。
  ports?: [ ServicePortMapping ](name='ports', example='[]'),
}

// 描述本地spanner集群一组容器的详细信息
model LocalSubClusterDetail {
  // 可用实例数
  available?: long(name='available', example='1'),
  // 期望实例数
  desired?: long(name='desired', example='1'),
  // 容器镜像地址
  image: string(name='image', example='nginx:1.0'),
  // 发布容器带的标签
  labels?: [ Label ](name='labels', example='[{"key": "test", "value": "test1"}]'),
  // 可能存在的错误信息
  message?: string(name='message', example='""'),
  // 健康实例数
  ready?: long(name='ready', example='0'),
  // 实际sub cluster 状态
  state: string(name='state', example='online'),
  // 已更新实例数
  updated?: long(name='updated', example='0'),
  // 容器版本
  version: string(name='version', example='v1.1'),
  // 多个机房下的覆盖配置项
  overrides?: [ SpannerSubClusterOverrides ](name='overrides', example=''),
}

// LoadBalancer类型Service。
model LoadBalancerService {
  // 域名。
  domain?: string(name='domain', example='sofa.alipay.net'),
  // 负载均衡实例监听列表。
  listeners: [ LoadBalancerListener ](name='listeners', example='[]'),
  // 关联的负载均衡实例的ID。
  loadBalancerIaasId?: string(name='load_balancer_iaas_id', example='lb-bp1b6c719dfa08ex******'),
  // LoadBalancer类型service关联负载均衡实例名称。
  loadBalancerName?: string(name='load_balancer_name', example='test-lb'),
  // LoadBalancer类型service名称。
  name: string(name='name', example='lb'),
  // Spanner集群名称。
  spannerClusterId?: string(name='spanner_cluster_id', example='00000000'),
  // 负载均衡实例的网络类型（internet | intranet | office | multidomain）
  addressType?: string(name='address_type', example='intranet'),
  // 该服务在每个 cell 下要复用的负载均衡实例 ID
  cellSlbIaasIdMap?: [ MapStringToString ](name='cell_slb_iaas_id_map', example='[{"gz001a":"lb-123456xxx"}]'),
  // custom address type模式下，指定各cell负载均衡vip
  cellLbVipMap?: [ MapStringToString ](name='cell_lb_vip_map', example='[{"rz01a": "121.23.4.5"}, {"rz02a": "202.121.2.3"}]'),
  // 是否使用联邦负载均衡实例
  useFedLoadbalancer?: boolean(name='use_fed_loadbalancer', example='true, false'),
  // 联邦负载均衡实例名称
  fedLoadbalancerName?: string(name='fed_loadbalancer_name', example='fed-lb-example'),
}

// 有状态应用数据卷模板配置
model VolumeClaimConfig {
  // name
  name?: string(name='name', example='name'),
  // storage_class
  storageClass?: string(name='storage_class', example='storage_class'),
  // resourceRequirementConfig
  resourceRequirementConfig?: ResourceRequirementConfig(name='resource_requirement_config', example=''),
}

// Secret数据
model SecretData {
  // secret data key
  key: string(name='key', example='key'),
  // secret data value
  value: string(name='value', example='value'),
}

// 发布批次对象
model ReleaseBatchObj {
  // 第一个批次
  batchNum: long(name='batch_num', example='1'),
  // 单元内服务数组
  cellServers: [ CellServer ](name='cell_servers', example=''),
}

// 运维操作中的应用
model OpsApplication {
  // 应用名称
  name?: string(name='name', example=''),
  // 应用发布版本（部分运维操作可能不包含版本信息，为null）
  version?: string(name='version', example=''),
  // 应用（服务）当前运维状态。取值列表： INITING：初始化中； INIT_FAILED：初始化失败； INITED：初始化完成； EXECUTING：执行中； SUCCESS：执行成功； FAILED：执行失败； ROLLBACKED：已回滚； CANCELED：已取消
  status?: string(name='status', example=''),
}

// DeploymentSpec
model DeploymentSpec {
  // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing
  minReadySeconds?: long(name='min_ready_seconds', example=''),
  // Indicates that the deployment is paused.
  // 
  paused?: boolean(name='paused', example='true, false'),
  // he maximum time in seconds for a deployment to make progress before it is considered to be failed.
  progressDeadlineSeconds?: long(name='progress_deadline_seconds', example=''),
  // Number of desired pods. 
  replicas: long(name='replicas', example=''),
  // The number of old ReplicaSets to retain to allow rollback.
  revisionHistoryLimit?: long(name='revision_history_limit', example=''),
  // Label selector for pods. 
  selector?: LabelSelector(name='selector', example=''),
  // The deployment strategy to use to replace existing pods with new ones.
  // 
  strategy?: DeploymentStrategy(name='strategy', example=''),
  // Template describes the pods that will be created.
  template: PodTemplateSpec(name='template', example=''),
}

// sidecar 模版
model SidecarTemplate {
  // sidecar模版id
  id?: string(name='id', example='000000001'),
  // region_id
  regionId?: string(name='region_id', example='001'),
  // 	
  // 模板生效范围
  scope: string(name='scope', example='workspace_group'),
  // sidecar名称
  sidecarName: string(name='sidecar_name', example='mosn'),
  // sidecar模版版本
  sidecarVersion: string(name='sidecar_version', example='v1'),
  // sidercar模版
  template: string(name='template', example='todo'),
  // 这个字段是lhc专用，表示此模板的来源，META为sidecar元数据来源，XFLUSH为系统模板
  // 本结构体同时还暂时兼容了调用sidecar元数据openapi的使用，后期会只用于LHC用途，届时会去掉sidecar元数据接口的字段。
  type: string(name='type', example='META'),
  // workspace_group_id
  workspaceGroupId?: string(name='workspace_group_id', example='0001'),
  // workspace_id
  workspaceId: string(name='workspace_id', example='001'),
}

// fed image pull Secret override
model FedImagePullSecretOverride {
  // override data
  data: RegistryAccout(name='data', example=''),
  // cell name
  name: string(name='name', example='cellname'),
  // cell name override
  nameOverride: string(name='name_override', example='name-cella'),
}

// 解决方案应用发布配置
model AppReleaseConfig {
  // 名称
  name: string(name='name', example='huanyu'),
  // 应用镜像
  image: string(name='image', example='acs-reg.alipay.com/aloud/app:tag'),
  // commitID
  commitId: string(name='commit_id', example='aad2121sa'),
  // 代码分支
  commitBranch: string(name='commit_branch', example='master'),
}

// V1FederatedAppInstanceRevisionSpecOverridesAppinstance
model ResourceOverride {
  // 部署单元名称，ALL 代表所有部署单元
  cell: string(name='cell', example='RZ00A'),
  // fed 资源路径
  path: string(name='path', example='/spec/template/spec/terminationGracePeriodSeconds'),
  // 值
  value: string(name='value', example='30'),
  // 值的字段类型，支持 string、number、boolean
  type?: string(name='type', example='string'),
}

// 应用发布任务，发布详情可操作(跳过、确认、重试等)单元
model AppDeployTask {
  // 操作code
  actionCode: string(name='action_code', example='CLOUD_NATIVE_DEPLOY'),
  // 当前任务的发布单元列表
  appDeployCells: [ AppDeployCell ](name='app_deploy_cells', example=''),
  // 是否支持确认操作
  confirmSupported: boolean(name='confirm_supported', example='true, false'),
  // 上下文数据，json字符串
  data: string(name='data', example='{"lks_service_id":"0000000104055151","regionId":"empty_region_id","cellStagePartition":"[]","multiClusterContainerServiceRevisionId":"0000000004096001"}'),
  // id
  id: string(name='id', example='0000000103873151'),
  // 是否支持跳过操作
  ignoreSupported: boolean(name='ignore_supported', example='true,false'),
  // 是否支持重试操作
  retrySupported: boolean(name='retry_supported', example='true,false'),
  // 当前状态
  state: string(name='state', example='EXECUTING,SUCCESSED,FAILED等'),
  // 开始时间。
  startedTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='started_time', example='2018-10-10T10:10:00Z'),
  // 结束时间。
  finishedTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='finished_time', example='2018-10-10T10:10:00Z'),
  // message detail
  messageDetail?: string(name='message_detail', example='{"deploymentStatus":{"test0329jf":[]}}'),
  // 任务类型
  taskType?: string(name='task_type', example='opscloud'),
  // 任务显示名称，自定义卡点任务才会有值
  taskDisplayName?: string(name='task_display_name', example='test'),
}

// 容器信息
model ContainerInfo {
  // 容器id
  containerId: string(name='container_id', example='0123456789'),
  // 容器镜像
  image: string(name='image', example='nginx:latest'),
  // 最后启动时间
  lastStartTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='last_start_time', example='2018-10-10T10:10:00Z'),
  // 容器镜像
  name: string(name='name', example='nginx'),
  // 重启次数
  restartCount: long(name='restart_count', example='1'),
  // 容器运行状态
  state: string(name='state', example='运行中'),
  // 容器spec配置。
  spec: ContainerSpec(name='spec', example='{}'),
}

// 解决方案拓展Linke配置
model UnireleaseSolutionExtInfoLinkeInfo {
  // linke发布窗口 
  releaseWindow: string(name='release_window', example='ER61640611'),
  // ["EI61640467"]
  iterations: [ string ](name='iterations', example='linke迭代列表'),
  // 发布接口人列表,要求为域账号
  publisher?: [ string ](name='publisher', example='["dengpeng.zdp"]'),
  // inke发布Id
  releaseId?: string(name='release_id', example='ER10046328_GRAY_202000410'),
}

// 一个正在进行运维操作的计算容器。
model OpsComputer {
  // 计算容器id
  id?: string(name='id', example=''),
  // 计算容器内网ip
  innerIp?: string(name='inner_ip', example=''),
  // 计算容器名称
  name?: string(name='name', example=''),
  // 计算容器当前运维状态。取值列表： INITED：初始化完成； EXECUTING：执行中； SUCCESS：执行成功； FAILED：执行失败； CANCELED：已取消； IGNORED：已忽略
  status?: string(name='status', example=''),
  // 计算容器上执行的任务信息。任务信息列表中包含正在执行和执行完成的任务。
  tasks?: [ OpsComputerTask ](name='tasks', example=''),
  // 展示机器失败的摘要信息
  resultMsg?: string(name='result_msg', example='DISABLE_LB_TRAFFIC failed'),
}

// 灰度发布场景下，给入口流量添加的单个判断规则
model GrayLabelDownstreamRule {
  // 判断入口流量的方式，目前支持通过header或cookie判断
  type: string(name='type', example='header/cookie'),
  // 用于判断的键
  key: string(name='key', example='header1'),
  // 判断条件，目前支持相等或者不相等
  condition: string(name='condition', example='EQUALS, NOT_EQUALS'),
  // 用于判断的值
  value: string(name='value', example='value1'),
}

// pod状态
model PodStatus {
  // 节点ip
  hostIp?: string(name='host_ip', example='100.1.1.2'),
  // pod状态
  phase: string(name='phase', example='Pending'),
  // podip
  podIp?: string(name='pod_ip', example='10.1.1.2'),
  // pod container status
  containerStatuses: [ ContainerStatus ](name='container_statuses', example='[{}]'),
}

// sidecar运维流程任务
model SidecarOpsMachineTask {
  // 分组ID
  id: string(name='id', example='123456'),
  // 执行状态
  status: string(name='status', example='_SUCCEEDED_, _FAILED_'),
  // 扩展属性 - JSON string
  properties?: string(name='properties', example='"{}"'),
  // 执行信息
  message?: string(name='message', example='"test msg"'),
  // 任务名称
  target?: string(name='target', example='test'),
  // 开始时间
  startTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_time', example='2018-10-10T10:10:00Z'),
  // 结束时间
  endTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='end_time', example='2018-10-10T10:10:00Z'),
  // 任务描述
  targetDesc?: string(name='target_desc', example='antvip摘流'),
  // 状态描述
  statusDesc?: string(name='status_desc', example='成功'),
}

// SidecarConfig
model SidecarConfig {
  // Sidercar 名称
  name: string(name='name', example='mosn'),
  // 表达是否修改feature
  changeFeature: boolean(name='change_feature', example='true, false'),
  // FEATURE_GATES
  featureGates?: string(name='feature_gates', example='CloudMultiTenantMode=true,CloudTraceEnabled=true'),
  // 镜像地址
  image: string(name='image', example='reg.docker.alibaba-inc.com/antmesh/mosn:1.23.0-45402f78-nightly_cloud'),
  // 需要修改或自定义新增的sidecar环境变量。
  changeEnvs?: string(name='change_envs', example='MSG_ENCRYPT_ENABLE:false, IS_INJECTED:true'),
  // sidecar的pvc挂载配置
  volumeMounts?: [ VolumeMount ](name='volume_mounts', example=''),
  // 扩展字段
  ext?: string(name='ext', example='ext'),
}

// Workspace info
// 
model Workspace {
  // workspace id
  id: string(name='id', example='0001'),
  // workspace name
  name?: string(name='name', example='workspace01'),
}

// 一组执行运维操作的应用，同一个组中的应用将并行执行操作。
model OpsApplicationGroup {
  // 此运维应用组中包含的应用列表
  applications?: [ OpsApplication ](name='applications', example=''),
}

// 统一解决方案App信息
model UnireleaseSolutionApp {
  // 应用名称
  app: string(name='app', example='antcloud'),
  // 应用依赖信息
  dependsOn: [ string ](name='depends_on', example='["unimetaservice"]'),
  // 应用发布配置
  releaseConfig: AppReleaseConfig(name='release_config', example=''),
  // 中间件配置
  middlewareConfigs: [ string ](name='middleware_configs', example='中间件配置信息，列表内容为OAM类型的yaml列表'),
  // 机构/租户信息
  tenant: string(name='tenant', example='ANTCLOUD'),
}

// 应用服务示例
model AppService {
  // 应用服务实例名称
  name?: string(name='name', example=''),
  // 工作空间名称
  workspace?: string(name='workspace', example=''),
}

// 发布|运维分组执行进度
model OpsGroupTaskProgress {
  // 任务码
  actionCode: string(name='action_code', example='DISABLE_LB_TRAFFIC'),
  // 任务名称
  actionName: string(name='action_name', example='LB摘流'),
  // 任务状态
  state: string(name='state', example='SUCCEEDED'),
  // 任务开始时间
  startedTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='started_time', example='2018-10-10T10:10:00Z'),
  // 任务结束时间
  finishedTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='finished_time', example='2018-10-10T10:10:00Z'),
}

// 灰度发布场景下，给进入的流量加灰度label的规则
model GrayLabelApplyRule {
  // 多个指定条件的计算方式，目前支持AND和OR
  operator: string(name='operator', example='AND, OR'),
  // 入口流量的多个规则，将根据operator进行与、或运算
  downstreamRules: [ GrayLabelDownstreamRule ](name='downstream_rules', example='[{}]'),
}

// FedDeployment cluster override
model FedDeploymentClusterOverride {
  // 集群名称
  cluster: string(name='cluster', example='cluster-name'),
  // 集群Deployment replica数量
  replica: long(name='replica', example=''),
  // 环境变量配置覆盖
  envVarOverride: [ EnvVarClusterOverride ](name='env_var_override', example=''),
}

// 应用信息。
model AppInfo {
  // buildpack版本。
  buildpackVersion?: string(name='buildpack_version', example='version'),
  // 应用描述。
  description?: string(name='description', example='test app'),
  // 应用id。
  id: string(name='id', example='0123456789'),
  // 应用名称。
  name: string(name='name', example='app'),
  // 应用owner。
  owner: string(name='owner', example='张三'),
  // 技术栈。
  techstackIdentity: string(name='techstack_identity', example='Java'),
  // ownerId
  ownerId?: string(name='owner_id', example='1111'),
}

// 拓展配置
model UnireleaseSolutionExtInfo {
  // Linke配置信息
  linkeInfo: UnireleaseSolutionExtInfoLinkeInfo(name='linke_info', example=''),
}

// 应用服务下相关对象的元信息
model ContainerServiceObjectMeta {
  // UID
  uid: string(name='uid', example='3D67a3dd9a-0d05-11ea-a525-02420ba6ad3d'),
  // 命名空间
  namespace: string(name='namespace', example='dev'),
  // 名称
  name: string(name='name', example='abc-123'),
  // 部署单元名称
  cellDisplayName: string(name='cell_display_name', example='RZ001'),
  // 集群名称
  cluster: string(name='cluster', example='dev'),
  // 创建时间
  createdTime: string(name='created_time', example='2019-12-02 17:33:32'),
}

// 容器服务配置。
model ContainerServiceConfig {
  // 容器服务业务实时监控路径。
  bizMonitorPaths?: [ string ](name='biz_monitor_paths', example='["/home/admin/logs"]'),
  // 内网访问配置。
  clusterIpServices?: [ ClusterIpService ](name='cluster_ip_services', example='[]'),
  // 容器配置。
  containerSpecs: [ ContainerSpec ](name='container_specs', example='[]'),
  // 容器服务部署配置。
  deployConfig: DeployConfig(name='deploy_config', example='{}'),
  // 弹性配置。
  elasticConfig: ElasticConfig(name='elastic_config', example='{}'),
  // 容器服务是否开启业务实时监控。
  enableBizMonitor?: boolean(name='enable_biz_monitor', example='true, false'),
  // 容器服务是否开启日志监控。
  enableLogConfig?: boolean(name='enable_log_config', example='true, false'),
  // 容器服务是否开启SofaMesh。
  enableSofaMesh?: boolean(name='enable_sofa_mesh', example='true, false'),
  // 统一接入配置。
  ingresses?: [ IngressConfig ](name='ingresses', example='[{}]'),
  // 内网负载均衡访问配置（旧版）
  innerLoadBalancerServices?: [ LoadBalancerService ](name='inner_load_balancer_services', example='[]'),
  // 公网访问负载均衡配置（旧版）
  publicLoadBalancerServices?: [ LoadBalancerService ](name='public_load_balancer_services', example='[]'),
  // sidecar 模版配置
  sidecarConfigs?: [ SidecarTemplate ](name='sidecar_configs', example=''),
  // 容器服务关联的Pod是否使用宿主机网络。
  useHostNetwork?: boolean(name='use_host_network', example='true, false'),
  // 负载均衡配置
  loadBalancerServices?: [ LoadBalancerService ](name='load_balancer_services', example=''),
  // volumeClaimConfigs
  volumeClaimConfigs?: [ VolumeClaimConfig ](name='volume_claim_configs', example=''),
  // 容忍度配置
  tolerations?: [ Toleration ](name='tolerations', example='[]'),
  // 启用的sidercar列表，只针对首次发布生效
  sidercars?: [ SidecarConfig ](name='sidercars', example='[]'),
  // headless service 配置
  headlessServices?: [ HeadlessService ](name='headless_services', example='[]'),
  // 资源overrides（lks 1.24.0后开始支持）
  resourceOverrides?: [ ResourceOverride ](name='resource_overrides', example='[{}]'),
}

// 部署单元
model Cell {
  // 所属逻辑单元名称[单元化模式特有]。
  cellGroup?: string(name='cell_group', example='RZM0'),
  // 蓝绿着色信息[单元化模式特有]。
  color?: string(name='color', example='Blue'),
  // 创建时间。
  createdTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time', example='2018-10-10T10:10:00Z'),
  // 部署单元标识，创建之后不允许修改。
  identity: string(name='identity', example='RZM0A'),
  // 是否灰度[单元化模式特有]。
  isGray?: boolean(name='is_gray', example='true, false'),
  // 部署单元名称，主要用作页面展示。
  name: string(name='name', example='RZM0A'),
  // 压测权重
  pressWeight?: long(name='press_weight', example='50'),
  // 部署单元类型[单元化模式特有]。
  type?: string(name='type', example='本地域'),
  // 默认权重[单元化模式特有]。
  weight?: long(name='weight', example='5'),
  // 所属工作空间名称。
  workspace: string(name='workspace', example='hz-dev'),
  // 所属机房信息。
  zone: string(name='zone', example='CM10'),
  // cell名称，与name一样，为了兼容已有代码
  displayName: string(name='display_name', example='RZM0A'),
  // 所属cluster
  cluster?: string(name='cluster', example='mayibank-sit'),
}

// 集群部署单元状态
model ClusteCellStatus {
  // 集群名称
  cluster: string(name='cluster', example='cluster-name'),
  // 部署单元名称
  cell: string(name='cell', example='CellA'),
  // Cell资源状态
  status: string(name='status', example='ApplyOverridesFailed'),
  // 详细说明或错误信息
  message?: string(name='message', example='some error message'),
}

// 一个运维操作单元。
model OpsUnit {
  // 单元所属部署区
  cell?: string(name='cell', example=''),
  // 包含在此单元中进行运维操作的计算容器列表
  computers?: [ OpsComputer ](name='computers', example=''),
  // 单元所属地域
  region?: string(name='region', example=''),
  // 单元所属可用区
  zone?: string(name='zone', example=''),
}

// 查询返回spanner cluster的详细信息
model QuerySpannerClusterDetail {
  // 用于描述联邦spanner 集群内容器实例采用内网还是外网 
  addressType: string(name='address_type', example='内网'),
  // cpu 核数
  cpu?: long(name='cpu', example='1'),
  // 创建时间
  createTimestamp?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='create_timestamp', example='2018-10-10T10:10:00Z'),
  // 盘大小
  disk?: long(name='disk', example='20'),
  // 将cpu,mem,disk按照单位拼接起来
  flavor: string(name='flavor', example='1C1G40G'),
  // 描述集群容器是否采用了host网络	
  // 
  hostNetwork: boolean(name='host_network', example='true, false'),
  // 集群id
  id: string(maxLength=256, name='id', example='001'),
  // 关联的实例数
  instances: long(name='instances', example='1'),
  // mem 大小
  mem?: long(name='mem', example='1'),
  // 可能存在的错误信息
  message?: string(name='message', example='""'),
  // 集群名称
  name: string(maxLength=63, name='name', example='hello'),
  // 描述集群状态	
  // 
  state: string(maxLength=63, name='state', example='已上线'),
  // 租户名称
  tenant: string(name='tenant', example='lili'),
  // 最后更新的时间戳
  updateTimestamp?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='update_timestamp', example='2018-10-10T10:10:00Z'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group', example='cn-shangh-01'),
  // 期望集群状态
  expectClusterState?: string(name='expect_cluster_state', example='ONLINE'),
}

// 容器健康检查-ReadinessProbe。
model ReadinessProbe {
  // 命令行方式的健康监测配置。
  execAction?: ExecAction(name='exec_action', example='{}'),
  // 不健康阈值。
  failureThreshold: long(name='failure_threshold', example='2'),
  // http方式的健康监测配置。
  httpGetAction?: HttpGetAction(name='http_get_action', example='{}'),
  // 首次检查延时。
  initialDelaySeconds: long(name='initial_delay_seconds', example='60'),
  // 不健康阈值。
  periodSeconds: long(name='period_seconds', example='3'),
  // 健康阈值。
  successThreshold: long(name='success_threshold', example='1'),
  // tcp方式的健康监测配置。
  tcpSocketAction?: TcpSocketAction(name='tcp_socket_action', example='{}'),
  // 检查超时。
  timeoutSeconds: long(name='timeout_seconds', example='10'),
}

// 运维容器服务列表
model OpsContainerServiceGroup {
  // 运维容器服务列表
  containerServices: [ OpsContainerService ](name='container_services', example='[{"namespace": "default", "name": "CSA"}]'),
}

// fed image pull secret list
model FedImagePullSecretOverrideList {
  // fed image pull secret overrides
  list: [ FedImagePullSecretOverride ](name='list', example=''),
}

// 异构机房部署单元
model SiteCell {
  // 异构机房名
  siteName: string(name='site_name', example='other-site'),
  // 部署单元名
  name: string(name='name', example='cell-a'),
  // 地域
  region: string(name='region', example='杭州'),
}

// pod信息
model PodInfo {
  // 部署单元名称
  cellDisplayName: string(name='cell_display_name', example='rz001'),
  // 集群名称
  cluster: string(name='cluster', example='prod'),
  // pod containers info
  containers: [ ContainerInfo ](name='containers', example='[{}]'),
  // create time
  createdTime: string(name='created_time', example='2019-12-02 17:33:32 '),
  // pod 名称
  name: string(name='name', example='2363455-vxad'),
  // 命名空间名称
  namespace: string(name='namespace', example='dev'),
  // pod状态
  status: PodStatus(name='status', example=''),
  // pod uid
  uid: string(name='uid', example='3D67a3dd9a-0d05-11ea-a525-02420ba6ad3d'),
  // Pod volume信息。
  volumes?: [ Volume ](name='volumes', example='[{}]'),
}

// 联邦负载均衡实例对应的local lb实例信息（per cell)
model LocalLoadBalancer {
  // local lb所在部署单元
  cell: string(name='cell', example='rz01a'),
  // local lb实例对应的iaas id
  iaasId?: string(name='iaas_id', example='lb-bp1thv6gfoaefefeks7tq'),
  // local lb实例对应的vip
  vip?: string(name='vip', example='10.0.0.1'),
  // 当前cell lb的phase
  phase?: string(name='phase', example='LBEnsured, LBFailed'),
  // 空代表无错误信息，非空时即报错信息
  message?: string(name='message', example='"failed to create lb due to xxx" 或者 ""'),
}

// UID 分片范围
model UidRange {
  // UID 起始值
  start: long(name='start', example=''),
  // UID 终止值
  end: long(name='end', example=''),
  // 弹性
  elastic?: boolean(name='elastic', example='true, false'),
}

// 容器应用服务运维
model ContainerServiceOperation {
  // 容器服务名称。
  containerServiceName: string(name='container_service_name', example='nginx'),
  // 依赖的容器应用服务名称。
  dependContainerServiceNames?: [ string ](name='depend_container_service_names', example='[]'),
  // 待操作目标pods列表
  selectedPods?: [ CellPods ](name='selected_pods', example='[]'),
  // 自定义发布批次
  batches?: [ ReleaseBatchObj ](name='batches', example='[]'),
  // 缩放副本数量，扩缩容时使用
  scaleReplicas?: [ ReplicaCount ](name='scale_replicas', example='[]'),
  // 应用服务当前版本
  containerServiceRevision?: string(name='container_service_revision', example='cafe-8789ffsd89fadisrd3'),
  // [huanyu场景使用]，灰度平台pods分批序列化为json的结果
  graycoreBatches?: string(name='graycore_batches', example='[{"podA"}, {"podB, podC"}]'),
}

// 联邦负载均衡实例与应用服务之间的关联关系，以及占用端口情况。
model FedLoadBalancerContainerServiceRel {
  // 应用服务名字
  containerServiceName: string(name='container_service_name', example='app_service_example'),
  // 应用服务命名空间
  namespace: string(name='namespace', example='antcloud-test-default'),
  // 联邦负载均衡实例当前已被占用的端口
  occupiedPorts: [ long ](name='occupied_ports', example='[80, 443, 8080]'),
}

// 应用分组概要信息
model AppGroupSimpleView {
  // 应用id列表
  appIdList: [ string ](name='app_id_list', example='0000000103039151'),
  // 服务分组id
  id: string(name='id', example='0000000103243151'),
  // 状态
  state: string(name='state', example='DEPLOYED'),
}

// cluster overview info
model ClusterOverviewInfo {
  // available cpu core
  availableCPU?: long(name='available_c_p_u', example='1'),
  // available disk
  availableDisk?: long(name='available_disk', example='10'),
  // available memory
  availableMemory?: long(name='available_memory', example='1'),
  // available Node Number
  availableNodeNumber?: long(name='available_node_number', example='1'),
  // total cpu core number
  totalCPU?: long(name='total_c_p_u', example='1'),
  // total disk
  totalDisk?: long(name='total_disk', example='10'),
  // total memory
  totalMemory?: long(name='total_memory', example='1'),
  // total node number
  totalNodeNumber?: long(name='total_node_number', example='1'),
}

// 发布单|应用执行进度，按状态区分
model AppDeployPodStateSummary {
  // 执行对象ID
  id: string(name='id', example='00000000001'),
  // 执行对象状态
  state: string(name='state', example='EXECUTING'),
  // 总计
  total: long(name='total', example='10'),
  // 执行中个数
  executing: long(name='executing', example='10'),
  // 成功数
  succeeded: long(name='succeeded', example='10'),
  // 等待个数
  waiting: long(name='waiting', example='10'),
  // 失败个数
  failed: long(name='failed', example='10'),
  // 初始化个数
  // 
  inited: long(name='inited', example='10'),
  // 阻塞个数
  blocked: long(name='blocked', example='10'),
}

// 具体sidecar的服务配置，包含sidecar名称，版本，feature，image，env，releaseVersion等
model SidecarReleaseInfo {
  // sidecar类型名称
  sidecarName: string(name='sidecar_name', example='odp'),
  // sidecar的发布版本
  sidecarVersion: string(name='sidecar_version', example='0.0.1'),
  // mosn对应打开的feature-gates配置。
  featureGates?: string(name='feature_gates', example='gateway,redis,sofarpc'),
  // 所用的image
  image: string(name='image', example='reg.docker.alibaba-inc.com/antmesh/mosn:1.23.0-45402f78-nightly_cloud'),
  // 应用基线当前所用的自定义env
  changeEnvs?: string(name='change_envs', example='A=a,B=b'),
  // sidecar的发布版本号
  releaseVersion: string(name='release_version', example='1877282423'),
  //  上一次的发布版本号
  lastReleaseVersion?: string(name='last_release_version', example='1719817898'),
}

// 容器应用服务部署
model ContainerServiceDeployment {
  // 容器服务名称。
  containerServiceName: string(name='container_service_name', example='nginx'),
  // 容器服务版本号。
  containerServiceRevision: string(name='container_service_revision', example='nginx.herf93jkd'),
  // 依赖的容器应用服务名称。
  dependContainerServiceNames: [ string ](name='depend_container_service_names', example='[]'),
  // 限定需要发布的部署单元
  restrictedCells?: [ string ](name='restricted_cells', example='[RZ00A]'),
  // 自定义发布批次
  batches?: [ ReleaseBatchObj ](name='batches', example='[]'),
  // 默认ByIndex
  upgradePolicy?: string(name='upgrade_policy', example='ByIndex'),
  // 发布模板名称
  deploymentTemplateName?: string(name='deployment_template_name', example='TEST'),
}

// master cluster info
model MasterCluster {
  // master cluster name
  name: string(name='name', example='masterCluster01'),
  // workspace id
  workspaceId: string(name='workspace_id', example='0000000001'),
  // workspace name
  workspaceName?: string(name='workspace_name', example='wsName'),
  // region id
  regionId: string(name='region_id', example='000000001'),
  // region name
  regionName?: string(name='region_name', example='hangzhou'),
  // zone id
  zoneId: string(name='zone_id', example='0000000001'),
  // zone name
  zoneName?: string(name='zone_name', example='hangzhou-a'),
}

// FedSecret cluster override
model FedSecretOverride {
  // fed secret data override
  data: [ SecretData ](name='data', example=''),
  // cluster name
  // 
  name: string(name='name', example='default'),
  // name cell override
  nameOverride: string(name='name_override', example='cella'),
}

// 统一接入实例接入settings （vip, id, etc.)
model EntrySettings {
  // 是否自定义uai entry
  customized?: boolean(name='customized', example='true, false'),
  // 统一接入实例每个datacenter的用户自定义入口负载均衡实例id列表
  entryIds?: [ MapStringToString ](name='entry_ids', example='["dc-1": "lb-id-1", "dc-2": "lb-id-3"]'),
  // 统一接入实例每个datacenter用户自定义入口负载均衡实例的vip
  entryVips?: [ MapStringToString ](name='entry_vips', example='["dc-1": "202.120.37.116", "dc-2": "202.120.3.31"]'),
}

// 部署参数
model OpsParam {
  // 部署参数键值
  key?: string(name='key', example=''),
  // 部署参数值
  value?: string(name='value', example=''),
}

// 统一接入实例详细信息
model UnifiedAccessInstanceLocalDetailInfo {
  // 所属集群名称
  clusterName: string(name='cluster_name', example='name'),
  // 所在可用区，即AZ信息
  dataCenter: string(name='data_center', example='AZ001'),
  // local实例详细信息显示，包含错误状态信息等
  messageDetails?: string(name='message_details', example='详细信息'),
  // local实例状态描述：创建中、创建成功、创建失败
  status: string(name='status', example='创建中'),
  // vip信息
  vip: string(name='vip', example='1.1.1.1'),
  // http entry的状态
  httpEntryStatus?: HttpEntryStatus(name='http_entry_status', example='{"backendPort": 4001, "nodePort": 34567}'),
  // https entry的状态
  httpsEntryStatus?: HttpsEntryStatus(name='https_entry_status', example='["backendPort": 4002, "nodePort": 34588]'),
}

// zone info
model ZoneInfo {
  // zone identity
  id: string(name='id', example='test-zone'),
  // zone name
  name?: string(name='name', example='上海金融可用区-A'),
  // 所属region信息。
  region?: string(name='region', example='杭州'),
  // zone display name
  displayName: string(name='display_name', example='zone a'),
}

// 部署单元对应的流量规则
model CellFlow {
  // 部署单元名称
  name: string(name='name', example='RZ01A'),
  // 蓝绿着色。
  // BLUE：蓝
  // GREEN：绿
  // 非着色单元为 null
  color?: string(name='color', example='GREEN'),
  // 部署单元所占单元组的流量比。
  percent: long(maximum=100, minimum=0, name='percent', example='100'),
}

// 本地 spanner cluster 详细信息
model LocalSpannerClusterDetail {
  // 可用区
  az: string(name='az', example='cn-shanghai'),
  // 本地集群名称
  clusterName: string(name='cluster_name', example='hello-1'),
  // 可能存在的错误信息
  message?: string(name='message', example='"" or "create failed for missing name field"'),
  // 集群状态
  phase?: string(name='phase', example='online'),
  // spanner cluster 集群id
  spannerClusterId?: string(name='spanner_cluster_id', example='"1234567"'),
  // 描述spanner cluster健康状态
  state?: string(name='state', example='健康'),
  // 若干组容器信息
  subClustersDetails?: [ LocalSubClusterDetail ](name='sub_clusters_details', example=''),
}

// 发布单自定义卡点。暂时不支持
model CustomHook {
  // 卡点范围，目前只支持分批
  hookScope: string(name='hook_scope', example='batch'),
  // 卡点类型：api或has
  hookType: string(name='hook_type', example='api'),
  // 卡点名称
  hookName?: string(name='hook_name', example='TEST1'),
  // 卡点执行策略：each-每个分组，first-第一个分组，last-最后一个分组，custom-自定义分组。
  // 默认每个分组都会执行。
  hookStrategy?: string(name='hook_strategy', example='each'),
  // 自定义批次编号，从0开始。hook_strategy=custom时有效
  customNum?: long(name='custom_num', example='1'),
  // api类型卡点配置，当hook_type=api时不能为空
  apiHookConfig?: ApiHookConfig(name='api_hook_config', example='{}'),
  // 守夜人类型卡点配置，当hook_type=has时不能为空
  hasHookConfig?: HasHookConfig(name='has_hook_config', example='{}'),
  // 【暂不支持】是否允许忽略
  ignoreSupported?: boolean(name='ignore_supported', example='true'),
  // 【暂不支持】任务超时时间，单位毫秒，默认10分钟
  timeoutMillis?: long(name='timeout_millis', example='60000'),
  // 【暂不支持】默认false
  unOverride?: boolean(name='un_override', example='true, false'),
}

// Federated Deployment Status
model FederatedDeploymentStatus {
  // Federated Deployment Conditions
  conditions: [ DeploymentCondition ](name='conditions', example=''),
  // V1FederatedDeploymentStatus Topologies
  topologies: [ FederatedDeploymentStatusTopologies ](name='topologies', example=''),
}

// https连接
model HttpsEntry {
  // 端口
  port: long(name='port', example='443'),
  // 是否使用websocket连接方式
  websocketConnect: boolean(name='websocket_connect', example='true, false'),
  // CA证书ID
  caCertificateId: string(name='ca_certificate_id', example='139a00604ad-cn-east-hangzhou-01'),
}

// service端口映射
model ServicePort {
  // 此端口映射名称
  name: string(name='name', example='http-port-1'),
  // service端口映射在k8s层面的协议名，包括"TCP", "UDP", and "SCTP".
  protocol?: string(name='protocol', example='tcp'),
  // service端口映射前端端口
  port: long(name='port', example='80'),
  // service分配到的节点端口
  nodePort?: long(name='node_port', example='34568'),
  // 后端端口，这里仅支持整数类型
  targetPort?: long(name='target_port', example='8080'),
}

// 集群事件
model KubernetesEvents {
  // 事件发生时间
  creationTimestamp: string(name='creation_timestamp', example='2021-01-22T09:33:31Z'),
  // 事件数目
  count: long(name='count', example='100'),
  // 事件内容
  message: string(name='message', example='message'),
}

// spanner集群单元信息
model SpannerClusterUnitInfo {
  // 单元IP地址
  address: string(name='address', example='11.166.185.233'),
  // 所属集群id
  clusterId: string(name='cluster_id', example='072a69abe6362f140643cedb32b30e7152068ae499b025a31074dab44d77cb2f'),
  // 容器id
  containerId: string(name='container_id', example='4c57a0ffaf3e9e42017b4b169cb7d701d8b3760b9bd1d9415b0404e97232c328'),
  // 创建时间
  gmtCreate: string(name='gmt_create', example='"2019-04-03T17:32:46.351646379+08:00"'),
  // 修改时间
  gmtModify: string(name='gmt_modify', example='"2019-04-03T17:32:46.351646379+08:00"'),
  // 集群单元状态 ： 1-下线状态 2- 上线状态 3-删除状态
  status: long(name='status', example='1，2，3'),
  // 扩展信息，json字符串格式
  extendProperties?: string(name='extend_properties', example='"{\"key\": \"value\"}"'),
}

// 容器健康检查-LivenessProbe。
model LivenessProbe {
  // 命令行方式的健康监测配置。
  execAction?: ExecAction(name='exec_action', example='{}'),
  // 不健康阈值。
  failureThreshold: long(name='failure_threshold', example='2'),
  // http方式的健康监测配置。
  httpGetAction?: HttpGetAction(name='http_get_action', example='{}'),
  // 首次检查延时。
  initialDelaySeconds: long(name='initial_delay_seconds', example='60'),
  // 检查间隔。
  periodSeconds: long(name='period_seconds', example='1'),
  // 健康阈值。
  // 
  successThreshold: long(name='success_threshold', example='1'),
  // tcp方式的健康监测配置。
  tcpSocketAction?: TcpSocketAction(name='tcp_socket_action', example='{}'),
  // 检查超时。
  timeoutSeconds: long(name='timeout_seconds', example='10'),
}

// fed k8s resource cluster state map
model ClusterState {
  // 集群名称
  clusterName: string(name='cluster_name', example='cluster'),
  // k8s resource state
  state: string(name='state', example='Active'),
  // 详细描述或错误信息
  message?: string(name='message', example='some detailed message'),
}

// 容器服务发布信息
model ContainerServiceReleaseInfo {
  // 发布单id
  createdPlanId?: string(name='created_plan_id', example='201912191447563126'),
  // 发布开始时间
  latestDeploymentStartTime?: string(name='latest_deployment_start_time', example='2019-01-01 11:21:11'),
  // 发布完成时间
  latestDeploymentEndTime?: string(name='latest_deployment_end_time', example='2019-01-01 11:21:11'),
}

// Service 状态
model ServiceStatus {
  // 负载均衡地址
  loadBalancerIp?: string(name='load_balancer_ip', example='10.4.0.229'),
}

// k8s v1Deployment
model Deployment {
  // Standard object metadata.
  // 
  metadata: ObjectMeta(name='metadata', example=''),
  // Specification of the desired behavior of the Deployment.
  // 
  spec: DeploymentSpec(name='spec', example=''),
  // Most recently observed status of the Deployment.
  // 
  status: DeploymentStatus(name='status', example=''),
}

// fed configmap override struct
model FedConfigmapOverride {
  // fed configmap data override
  data: [ ConfigMapData ](name='data', example=''),
  // cluster name
  name: string(name='name', example='default'),
  // name cell  override
  nameOverride: string(name='name_override', example='aaa-cella'),
}

// 部署单元权重
model CellWeightInfo {
  // 部署单元所属工作空间
  workspace: string(name='workspace', example='工作空间'),
  // 部署单元名称
  name: string(name='name', example='CellA'),
  // 部署单元所占单元组流量比重
  weight: long(name='weight', example='100'),
}

// 灾备信息
model DisasterInfo {
  // 同城灾备单元(组)
  localFailoverTarget: string(name='local_failover_target', example='RZ02'),
  // 异地灾备单元(组)
  remoteFailoverTarget: string(name='remote_failover_target', example='RZ02'),
  // 逻辑单元&部署单元名称
  source: string(name='source', example='RZ01'),
  // 容灾类型
  type: string(name='type', example='CELL,CELL_GROUP'),
  // 正常容灾状态。
  disasterRecoveryState: string(name='disaster_recovery_state', example='NORML'),
  // 压测容灾状态。
  pressDisasterRecoveryState: string(name='press_disaster_recovery_state', example='LDR'),
}

// 应用发布分组，一个分组一般包含前置任务(可多个)、发布任务(一个)、后置任务(可多个)
model AppDeployGroup {
  // 发布任务
  deployTask: AppDeployTask(name='deploy_task', example=''),
  // 后置任务列表
  postTasks: [ AppDeployTask ](name='post_tasks', example=''),
  // 前置任务列表
  preTasks: [ AppDeployTask ](name='pre_tasks', example=''),
}

// 统一接入实例关联的应用服务信息
model UnifiedAccessInstanceContainerServiceInfo {
  // 应用服务名称
  containerServiceName: string(name='container_service_name', example='name'),
  // 命名空间
  namespace: string(name='namespace', example='namespace'),
}

// sidecar运维任务上下文
model SidecarOperationTaskContext {
  // sidecar开启特性
  enabledFeatures?: string(name='enabled_features', example='"{\"mosn\": [\"msg\"]}"'),
  // sidecar类型
  sidecarTypes: [ string ](name='sidecar_types', example='["mosn", "odp"]'),
  // sidecar版本
  sidecarVersionMap: string(name='sidecar_version_map', example='"{\"mosn\":\"1.9.0_stable\"}"'),
  // sidecar支持特性
  supportedFeatures?: string(name='supported_features', example='"{\"mosn\": [\"msg\", \"zqueue\", \"antq\"]}"'),
  // 变更资源列表
  changeInstances: [ OperationChangeInstance ](name='change_instances', example=''),
  // 应用名称
  appName: string(name='app_name', example='appName'),
}

// UID 分片
model UidShard {
  // UID 起始值
  minUid: long(name='min_uid', example=''),
  // UID 终止值
  maxUid: long(name='max_uid', example=''),
}

// http接入方式
model HttpEntry {
  // 端口
  port: long(name='port', example='80'),
  // 是否使用websocket连接方式
  websocketConnect: boolean(name='websocket_connect', example='true, false'),
}

// sidecar运维对象 - 机器（computer|pod）
model SidecarOpsMachine {
  // 机器运维流程ID
  id: string(name='id', example='12345'),
  // 运维机器名称
  target: string(name='target', example='pod-1'),
  // 执行状态
  status: string(name='status', example='_SUCCEEDED_, _FAILED_'),
  // 执行状态描述
  statusDesc?: string(name='status_desc', example='成功'),
  // 扩展属性
  properties?: string(name='properties', example='"{}"'),
  // 执行消息日志
  message?: string(name='message', example='执行日志 - 12'),
  // 机器sidecar运维任务列表
  subTargets: [ SidecarOpsMachineTask ](name='sub_targets', example='[]'),
}

// LksServiceProcessLog
model ServiceProcessLog {
  // Logs属性
  attributes: string(name='attributes', example='Error'),
  // 错误追溯
  errorStackTraces: string(name='error_stack_traces', example='Init Process'),
  // 发布阶段，INIT，PARSE， EXECUTE
  execPhase: string(name='exec_phase', example='INIT'),
  // 关联对象类型，RPV2，RP_STAGE，POD
  invObjectKind: string(name='inv_object_kind', example='RPv2'),
  // 对应object的name
  invObjectName: string(name='inv_object_name', example='pipeline-0000000000000001'),
  // 对应object的namespace
  invObjectNamespace: string(name='inv_object_namespace', example='default'),
  // log_time
  logTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='log_time', example='2018-10-10T10:10:00Z'),
  // Logs详情
  message: string(name='message', example='pulling image "nginx:1.9.1"'),
  // Logs原因
  reason: string(name='reason', example='Pulling'),
  // 关联的ldc_plan id
  refPlan: string(name='ref_plan', example='0000000000000001'),
  // 关联的lks_service id
  refService: string(name='ref_service', example='0000000000000001'),
  // Logs的来源，ldcconsole，orch_event，opsware_event
  source: string(name='source', example='ldcconsole'),
}

// 一个运维应用操作链。一个操作链中包含一个顺序的运维应用组列表，这些运维应用组将依次串行的执行运维操作。不同的操作链将并行执行。
model OpsApplicationChain {
  // 此运维应用链中包含的应用组列表
  groups?: [ OpsApplicationGroup ](name='groups', example=''),
}

// 应用分组概要信息列表
model AppGroupSimpleViewList {
  // 应用分组列表
  appGroupList: [ AppGroupSimpleView ](name='app_group_list', example=''),
}

// App配置依赖
model AppReleaseConfigDependOn {
  // 类型
  kind: string(name='kind', example='MIDDLEWARE_DRM'),
  // 名称
  name: string(name='name', example='msg-type1'),
}

// 可用区
model Zone {
  // 数据中心名
  dataCenter: string(name='data_center', example='test_idc'),
  // 可用区展示名
  displayName: string(name='display_name', example='测试-杭州-A'),
  // 可用区名
  name: string(name='name', example='cn-hangzhou-a'),
  // 所属地域
  region: string(name='region', example='hangzhou'),
  // 可用区id
  zoneId: string(name='zone_id', example='00000001'),
  // 地域id
  regionId: string(name='region_id', example='000000001'),
}

// drm 推送记录
model DrmOpsRecord {
  // 应用
  apps?: [ string ](name='apps', example=''),
  // 操作人
  operator: string(name='operator', example='zhangsan'),
  // 推送时间
  pushTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='push_time', example='2018-10-10T10:10:00Z'),
  // 推送结果，包括（SUCCESS，FAILED，INVALID_REQUEST，NO_RECORD，SYSTEM_EXCEPTION，PARAM_QUERY_ERROR，PARAM_INVALID）
  resultCode: string(name='result_code', example='SUCCESS'),
  // 结果信息
  resultMsg?: string(name='result_msg', example='成功'),
  // 推送目标
  targets?: [ string ](name='targets', example=''),
  // 推送值
  value?: string(name='value', example='{}'),
  // 规则类型
  ruleType: string(name='rule_type', example='ZONE_INFO'),
}

// 容器应用服务版本信息。
model ContainerServiceRevision {
  // 应用信息。
  appInfo: AppInfo(name='app_info', example='{}'),
  // 容器服务配置。
  containerServiceConfig: ContainerServiceConfig(name='container_service_config', example='{}'),
  // 容器服务服务名称。
  containerServiceName: string(name='container_service_name', example='app-svc'),
  // 容器服务发布信息
  containerServiceReleaseInfo?: ContainerServiceReleaseInfo(name='container_service_release_info', example=''),
  // 创建时间。
  createdTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time', example='2018-10-10T10:10:00Z'),
  // 发布状态。
  deployStatus?: string(name='deploy_status', example='SUCCEED'),
  // container service description
  description?: string(name='description', example='container service description'),
  // 关联的最近一次发布单。
  lastPlanId?: string(name='last_plan_id', example='201905230303580000'),
  // 元数据状态。
  metaStatus?: string(name='meta_status', example='CREATED'),
  // 更新时间。
  modifiedTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='modified_time', example='2018-10-10T10:10:00Z'),
  // 所属命名空间名称。
  namespace: string(name='namespace', example='default'),
  // 版本提交人。
  operator: string(name='operator', example='张三'),
  // 版本备注。
  remarks?: string(name='remarks', example='更新镜像'),
  // 版本号。
  revision: string(name='revision', example='test.tege56tyh878'),
}

// 应用服务的sidecar配置
model AppServiceSidecarReleaseInfo {
  // 服务所属app名称
  appName: string(name='app_name', example='test-app'),
  // 应用服务名
  containerServiceName: string(name='container_service_name', example='sidecar-serivce-demo'),
  // 应用服务所包含的sidecar配置信息，可以有mosn，odp等等不同sidecar类型的配置
  releaseInfos: [ SidecarReleaseInfo ](name='release_infos', example=''),
}

// fed configmap override list
model FedSecretOverrideList {
  // fed configmap override list
  list: [ FedSecretOverride ](name='list', example=''),
}

// 联邦无状态工作负载
model FederatedDeployment {
  // Standard object metadata.
  // 
  metadata: ObjectMeta(name='metadata', example=''),
  // Federated Deployment Override
  overrides: [ FedDeploymentClusterOverride ](name='overrides', example=''),
  // Federated Deployment Template
  template: Deployment(name='template', example=''),
  // 联邦无状态工作负载状态
  status: FederatedDeploymentStatus(name='status', example=''),
}

// region info
model RegionInfo {
  // region name
  name: string(name='name', example='shfin'),
}

// ReleasePipeline ref event
model RpReleaseEvent {
  // 集群名
  cluster: string(name='cluster', example='mayibank-sit '),
  // 结束时间
  endTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='end_time', example='2018-10-10T10:10:00Z'),
  // 事件关联的对象类型
  // 
  invObjKind: string(name='inv_obj_kind', example='Pod'),
  // 事件关联对象名字
  // 
  invObjName: string(name='inv_obj_name', example='Pod123'),
  // 事件关联对象的namespace
  // 
  invObjNamespace: string(name='inv_obj_namespace', example='default'),
  // 事件关联对象版本
  // 
  invObjVersion: string(name='inv_obj_version', example='v1'),
  // 事件详情
  // 
  message: string(name='message', example='pulling image "nginx:1.9.1" '),
  // 事件原因
  // 
  reason: string(name='reason', example='Pulling'),
  // 事件来源组件
  // 
  sourceComp: string(name='source_comp', example='kubelet'),
  // start_time
  startTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_time', example='2018-10-10T10:10:00Z'),
}

// ContainerServiceOperationList
model ContainerServiceOperationList {
  // ContainerServiceOperationList
  list: [ ContainerServiceOperation ](name='list', example=''),
}

// 发布模板
model DeploymentTemplate {
  // 模板编码
  name: string(name='name', example='TEMPLATE_1'),
  // 中文名称
  displayName: string(name='display_name', example='测试模板'),
  // 模板描述
  description?: string(name='description', example='测试模板'),
  // 是否覆盖版本中的发布策略
  overrideDeployConfig: boolean(name='override_deploy_config', example='true, false'),
  // 发布策略
  deployConfig?: DeployConfig(name='deploy_config', example=''),
  // 是否开启变更卡点
  enableCustomHook: boolean(name='enable_custom_hook', example='true, false'),
  // 卡点类型：api或has
  hookType?: string(name='hook_type', example='has'),
  // 自定义卡点配置列表
  // 
  customHooks?: [ CustomHook ](name='custom_hooks', example=''),
  // 操作人
  operator?: string(name='operator', example='admin'),
  // 创建时间
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time', example='2018-10-10T10:10:00Z'),
  // 更新时间
  modifiedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='modified_time', example='2018-10-10T10:10:00Z'),
}

// uid 信息
model UidInfo {
  // UID
  uid: long(name='uid', example=''),
  // 当前分组
  currentGroup: string(name='current_group', example='CellGroupA'),
  // 默认分组
  defaultGroup: string(name='default_group', example='CellGroupB'),
  // 是否弹性
  elastic?: boolean(name='elastic', example='true, false'),
  // 是否压测
  press?: boolean(name='press', example='true, false'),
  // 是否灰度
  gray?: boolean(name='gray', example='true, false'),
}

// 获取单个spanner cluster的详细信息
model GetSpannerClusterDetail {
  // 联邦 spanner cluster 详细信息
  clusterDetail: QuerySpannerClusterDetail(name='cluster_detail', example=''),
  // 若干组本地集群信息
  localClusters: [ LocalSpannerClusterDetail ](name='local_clusters', example=''),
}

// cell weight info list.
model CellWeightInfoList {
  // weight info list.
  data: [ CellWeightInfo ](name='data', example='[{}]'),
}

// fed secret struct
// 
model FedSecret {
  // fed secret annotations
  // 
  annotations?: [ Annotation ](name='annotations', example='fed secret annotations'),
  // FedSecret Cell Cluster Status
  cellStatus: [ ClusteCellStatus ](name='cell_status', example=''),
  // fed clusters
  // 
  clusters: [ string ](name='clusters', example=''),
  // 创建时间
  createTimeStamp: string(name='create_time_stamp', example='2019-10-30T10:18:10Z'),
  // fed secret data
  // 
  data: [ SecretData ](name='data', example=''),
  // fed secret labels
  // 
  labels?: [ Label ](name='labels', example=''),
  // fed secret name
  // 
  name: string(name='name', example='cm'),
  // fed secret namespace
  // 
  namespace: string(name='namespace', example='antstack'),
  // fed secret override
  // 
  overrides: [ FedSecretOverride ](name='overrides', example=''),
  // 原因描述
  reason?: string(name='reason', example='GetKeysInCellFailed'),
  // FedSecret同步状态
  status: string(name='status', example='propagation'),
  // opaque
  type: string(name='type', example='类型'),
}

// 前后置任务
model OpsPrePostTask {
  // 
  //           任务类型。
  //           中间件任务：
  //           MESSAGE_BROKER_TOPIC：消息中间件TOPIC；
  //           MESSAGE_BROKER_TOPIC_SUB：消息中间件绑定关系；
  //           DRM_RESOURCE：DRM资源；
  //           SCHEDULER_TASK：定时任务；
  //           其他类型任务待定。
  //         
  type?: string(name='type', example=''),
  // 
  //           操作类型。取值列表：
  //           CREATE：新建；
  //           UPDATE：更新；
  //           DELETE：删除；
  //           UNDEFINED：未定义；
  //         
  operationType?: string(name='operation_type', example=''),
  // 
  //           任务详情，JSON字符串
  //         
  detail?: string(name='detail', example=''),
  // 
  //           任务状态。取值列表：EXECUTING：执行中；SUCCEEDED：执行成功；FAILED：执行失败；IGNORED：已忽略
  //         
  status?: string(name='status', example=''),
}

// 发布(运维)单状态汇总数据
model LdcPlanStateCount {
  // 发布单状态类型
  state: string(name='state', example='SUCCEEDED,FAILED'),
  // 数量
  count: long(name='count', example='1'),
}

// 发布解决方案
model UnireleaseSolution {
  // 发布单ID
  id: string(name='id', example='1000000000001'),
  // 发布单标题
  title: string(name='title', example='my first release'),
  // 解决方案平台源
  sourceSystem: string(name='source_system', example='LinkE'),
  // 发布类型，容器/经典
  type: string(name='type', example='Container'),
  // 需求人/操作者
  submitter: string(name='submitter', example='zhangsan'),
  // 解决方案状态
  state: string(name='state', example='SUCCEDED'),
  // 解决方案提出时间
  createTimeStamp: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='create_time_stamp', example='2018-10-10T10:10:00Z'),
  // 是否自动执行
  autoExecute: boolean(name='auto_execute', example='true, false'),
  // 环境信息
  env: string(name='env', example='pre/prod'),
  // 变更人员
  operator: string(name='operator', example='zhangsan'),
  // 解决方案拓展信息
  extInfo: UnireleaseSolutionExtInfo(name='ext_info', example='拓展信息'),
  // 解决方案包含的应用配置信息
  apps: [ UnireleaseSolutionApp ](name='apps', example=''),
  // 租户列表
  tenants: [ string ](name='tenants', example=''),
}

// master clusters info of each zone
model MasterClustersOfZone {
  // master clusters of specific zone
  clusters: [ MasterCluster ](name='clusters', example=''),
  // zone name
  zoneName: string(name='zone_name', example='zoneA'),
  // if the az has imported cluster
  hasImported: boolean(name='has_imported', example='true, false'),
}

// 弹出 UID
model PopOutUid {
  // 弹出的 UID 值
  value: long(name='value', example=''),
  // 弹出的目标部署单元
  cell: string(name='cell', example='CellA'),
}

// container_services list
model SontainerServicesList {
  // ContainerServiceDeployment
  list: [ ContainerServiceDeployment ](name='list', example=''),
}

// 联邦负载均衡实例属性
model FedLoadBalancer {
  // 联邦负载均衡实例名称
  name: string(name='name', example='fed-lb-example'),
  // 地址类型，比如公网、内网
  addrType: string(name='addr_type', example='internet, intranet'),
  // 联邦负载均衡实例的状态，由多个local 负载均衡实例的状态汇聚计算而来
  state?: string(name='state', example='success'),
  // 创建时间
  createTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='create_time', example='2018-10-10T10:10:00Z'),
  // 关联的应用服务情况
  containerServicesInfo?: [ FedLoadBalancerContainerServiceRel ](name='container_services_info', example=''),
  // local lb实例信息
  localLoadbalancerInstances?: [ LocalLoadBalancer ](name='local_loadbalancer_instances', example=''),
}

// sidecar元数据
model SideCar {
  // region id
  regionId?: string(name='region_id', example='001'),
  // sidecar description
  description: string(name='description', example='description'),
  // sidecar生效范围：workspace、workspace_group、region
  scope: string(name='scope', example='workspace_group_id'),
  // sidecar_name
  sidecarName: string(name='sidecar_name', example='mosn'),
  // workspace_group_id
  workspaceGroupId?: string(name='workspace_group_id', example='000000000001'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='001'),
}

// 逻辑单元
model CellGroup {
  // 包含部署单元列表。
  cells: [ Cell ](name='cells', example='[{}]'),
  // 机房名称。
  datacenter?: string(name='datacenter', example='CM10'),
  // 默认全局域
  defaultGzone?: string(name='default_gzone', example='GZ00'),
  // 逻辑单元灾备信息
  disasterInfo: [ DisasterInfo ](name='disaster_info', example='[{}]'),
  // 修改时间
  modifiedTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='modified_time', example='2018-10-10T10:10:00Z'),
  // 逻辑单元名称
  name: string(name='name', example='RZ01'),
  // 操作人
  operator: string(name='operator', example='Tony'),
  // 逻辑单元类型
  type: string(name='type', example='RZONE'),
  // 所属地域：CZone Group 必填
  region?: string(name='region', example='hangzhou'),
}

// 云原生技术栈版本
model NativeTechStackVersion {
  // 版本描述
  description: string(name='description', example='蚂蚁SOFA4'),
  // 用户扩展的自定义Dockerfile指令
  extendCommands: [ string ](name='extend_commands', example='["Add http://xxx.tar.gz /tmp", "RUN tar -xvf /tmp/xxx.tar.gz"]'),
  // 版本扩展信息，e.g 公共环境变量
  extendProperties: string(name='extend_properties', example='"{"key": "val"}"'),
  // 基础镜像存放地址
  fromImage: string(name='from_image', example='acs-reg.alipay.com:ce4456_jdk7_tengine16'),
  // 唯一标识ID
  id: string(name='id', example='000000000001'),
  // 可见范围：全局可见|租户内可见
  scope: string(name='scope', example='PUBLIC|TENANT'),
  // 所属技术栈
  techStack: string(name='tech_stack', example='SOFA'),
  // 所属技术栈标识id
  techStackId: string(name='tech_stack_id', example='00000000001'),
  // 技术栈版本
  version: string(name='version', example='ce4456_jdk7_tengine16'),
  // 创建时间（UTC）
  utcCreated: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_created', example='2018-10-10T10:10:00Z'),
  // 最近修改时间（UTC）
  utcModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
}

// cloudconfig
model CloudConfigEntity {
  // 配置详情
  cloudConfig: string(name='cloud_config', example=' {"A":"B"}'),
  // 操作时间
  gmtCreate: string(name='gmt_create', example=' 2020-04-02 22:40:41'),
  // 操作类型
  operation: string(name='operation', example='UPDATE'),
  // admin
  operator: string(name='operator', example='admin'),
}

// 应用信息
model Application {
  // 应用部署时指定的自定义参数
  customParams?: [ OpsParam ](name='custom_params', example=''),
  // 应用部署时依赖的应用名称，只允许取此次调用参数中列出的应用。不允许形成循环依赖。
  depends?: [ string ](name='depends', example=''),
  // 应用名称
  name?: string(name='name', example=''),
  // 指定应用下的应用服务实例
  services?: [ AppService ](name='services', example=''),
  // 应用包版本
  version?: string(name='version', example=''),
}

// Kubernetes Event
model KubeEvent {
  // 事件类型
  type: string(name='type', example='Normal'),
  // 发布次数
  count: long(name='count', example='1'),
  // 事件原因
  reason: string(name='reason', example='Created'),
  // 事件内容
  message: string(name='message', example='Created container'),
  // 更新时间
  modifiedTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='modified_time', example='2018-10-10T10:10:00Z'),
}

// node info
model NodeInfo {
  // cell name
  cellName?: string(name='cell_name', example='cell01'),
  // node ip
  ip?: string(name='ip', example='10.121.11.3'),
  // true
  isSchedulable?: boolean(name='is_schedulable', example='true, false'),
  // number of capacity cpu core
  limitedCpu?: long(name='limited_cpu', example='10'),
  // quantity of capacity memory
  limitedMemory?: long(name='limited_memory', example='10'),
  // node name
  name: string(name='name', example='node01'),
  // pod number of one node
  podNumber?: string(name='pod_number', example='10'),
  // node state
  state?: string(name='state', example='RUNNING'),
  // quantity of used cpu core
  usedCpu?: long(name='used_cpu', example='0'),
  // quantity of used memory
  usedMemory?: long(name='used_memory', example='0'),
  // zone name
  zoneName?: string(name='zone_name', example='zone01'),
  // node labels
  labels?: [ Label ](name='labels', example=''),
  // node annotations
  annotations?: [ Annotation ](name='annotations', example=''),
  // node created time
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time', example='2018-10-10T10:10:00Z'),
  // node system infos
  systemInfos?: [ Annotation ](name='system_infos', example=''),
  // max pod amount of node
  maxPodAmount?: long(name='max_pod_amount', example=''),
  // running pod amount of node
  runningPodAmount?: long(name='running_pod_amount', example=''),
}

// secured Group Info
model SecuredGroupInfo {
  // secured group name
  name: string(name='name', example='sg-test'),
}

// 租户应用发布状态
model TenantAppReleasePipeline {
  // 机构名称
  tenant: string(name='tenant', example='ANTCLOUD'),
  // 环境
  workspaceGroup: string(name='workspace_group', example='ANTCLOUD'),
  // 应用发布releaseId
  releaseId: string(name='release_id', example='1000000000001'),
  // 发布单序列号
  releaseTimeSeriesId: string(name='release_time_series_id', example='1000000000001'),
  // 应用发布状态
  state: string(name='state', example='SUCCEDED'),
  // 应用发布单详情url
  url?: string(name='url', example='http://xxx/xxxx/detail'),
  // 应用列表
  apps: [ string ](name='apps', example=''),
  // 操作人员
  operator: string(name='operator', example='zhangsan'),
  // 发布单ID
  approvePlanId?: string(name='approve_plan_id', example='RRLESAPRV21120211141512810000'),
  // 发布审批单Url
  approvePlanUrl?: string(name='approve_plan_url', example='https://paas.alipay.com/index#/jiuzhou/my/plan/detail?planId=RRLESAPRV21120211141512810000&projectName=ANTCLOUD'),
}

// MasterClusterForWorkspaces
model MasterClusterForWorkspaces {
  // workspace id
  workspaceId: [ string ](name='workspace_id', example='0001'),
  // master cluster info to init minion cluster
  masterClusterInfo: MasterCluster(name='master_cluster_info', example=''),
}

// namespace detail 
model NamespaceDetail {
  // name
  name: string(name='name', example='name'),
  // labels
  labels?: [ Label ](name='labels', example=''),
  // status
  status?: string(name='status', example='success'),
  // created time
  createdTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time', example='2018-10-10T10:10:00Z'),
}

// kubernetes集群事件信息
model ClusterEvents {
  // 集群名称
  cluster: string(name='cluster', example='clusterName'),
  // 集群事件
  events: [ KubernetesEvents ](name='events', example='[{}]'),
}

// 容器服务service信息。
model NativeServiceView {
  // 服务名称。
  name: string(name='name', example='test-svc'),
  // 服务类型。
  type: string(name='type', example='ClusterIP'),
  // 负载均衡实例id。
  loadBalancerId?: string(name='load_balancer_id', example='lb-12345678'),
  // VIP地址信息。
  vipAddresses?: [ string ](name='vip_addresses', example='[""]'),
  // VIP地址信息类型。
  vipAddressType?: string(name='vip_address_type', example='INTERNET'),
  // ClusterIP信息。
  clusterIp?: string(name='cluster_ip', example='127.0.0.1'),
  // 创建时间。
  createdTimestamp: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_timestamp', example='2018-10-10T10:10:00Z'),
  // 修改时间。
  modifiedTimestamp: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='modified_timestamp', example='2018-10-10T10:10:00Z'),
}

// 流量权重定义
model ServiceWeight {
  // 统一接入名称
  ingressName: string(name='ingress_name', example='test'),
  // 蓝区流量权重，取值0-100
  blue: long(name='blue', example='100'),
  // 绿区流量权重，取值0-100
  green: long(name='green', example='0'),
  // 状态：succeed、updating、fail
  status?: string(name='status', example='succeed'),
  // 错误信息
  message?: string(name='message', example='error'),
}

// 健康检查配置。
model HealthCheckConfigInfo {
  // 容器健康检查配置liveness probe。
  livenessProbe?: LivenessProbe(name='liveness_probe', example='{}'),
  // 容器健康检查配置readiness probe。
  readinessProbe?: ReadinessProbe(name='readiness_probe', example='{}'),
}

// 发布单摘要信息
model PlanSimpleView {
  // 发布单涉及的应用个数
  appCount: long(name='app_count', example='1'),
  // 创建时间
  createdTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time', example='2018-10-10T10:10:00Z'),
  // 执行人
  executor: string(name='executor', example='张三'),
  // 结束时间
  finishedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='finished_time', example='2018-10-10T10:10:00Z'),
  // 发布单id
  id: string(name='id', example='0000000103039151'),
  // 运维单类型
  mode: string(name='mode', example='REBOOT,ONLINE,OFFLINE'),
  // 发布单标题
  name: string(name='name', example='ldcconsole-deploy'),
  // 开始时间
  startedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='started_time', example='2018-10-10T10:10:00Z'),
  // 发布单状态
  state: string(name='state', example='FAILED,SUCCEEDED'),
  // 发布单号
  timeSeriesId: string(name='time_series_id', example='ldcdev_201911061102282738'),
  // 发布单类型
  type: string(name='type', example='CLOUD_NATIVE_GROUP_RELEASE'),
  // 工作空间组id
  workspaceGroupId?: string(name='workspace_group_id', example='438d8f51-4347-4a04-5'),
  // Pod 数量
  podCount?: long(name='pod_count', example='1'),
}

// MasterClusterInfoForWorkspaces
model MasterClusterInfoForWorkspaces {
  // master cluster info
  masterClusterInfo: MasterCluster(name='master_cluster_info', example=''),
  // workspace ids
  workspaceIds: [ string ](name='workspace_ids', example=''),
}

// Ingress 信息
model IngressInfo {
  // 元信息
  meta: ContainerServiceObjectMeta(name='meta', example=''),
  // 所属统一接入实例名称
  unifiedAccessInstanceName?: string(name='unified_access_instance_name', example='abc-123'),
}

// 添加antvipdomain请求
model AntvipDomain {
  // 应用名称
  application: string(name='application', example='supergw'),
  // 部署单元cell名称
  cell: string(name='cell', example='RZ01A'),
  // 健康检查端口，非必填项
  healthCheckDefaultPort?: long(name='health_check_default_port', example='12200'),
  // 健康检查类型，默认为TCP
  healthCheckType?: string(name='health_check_type', example='"TCP"'),
}

// V1ReleasePlanSpec appService
model ReleasePlanSpecAppService {
  // 依赖的应用服务名字列表
  dependencies: [ string ](name='dependencies', example=''),
  // 应用服务名字
  name: string(name='name', example='apaks'),
  // container service revision
  revision: string(name='revision', example='20200219202232595.bifgvfw8'),
}

// cluster info
model ClusterInfo {
  // created time
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time', example='2018-10-10T10:10:00Z'),
  // env
  env?: string(name='env', example='dev'),
  // cluster is healthy or not
  isHealthy: boolean(name='is_healthy', example='true, false'),
  // cluster name
  name: string(name='name', example='test'),
  // cluster overview info
  overviewInfo: ClusterOverviewInfo(name='overview_info', example=''),
  // region name
  regionName?: string(name='region_name', example='shfin'),
  // 独占 or 共享
  type?: string(name='type', example='独占'),
  // version
  version?: string(name='version', example='2.0'),
  // zone name
  zoneName?: string(name='zone_name', example='sh-a'),
  // workspace名称[如果存在]。
  workspace?: string(name='workspace', example='dev'),
}

// 包含sidecar template表的主要元信息
model SidecarTemplateMeta {
  // 名称
  sidecarName: string(name='sidecar_name', example='mosn'),
  // sidecar版本
  sidecarVersion: string(name='sidecar_version', example='sidecar版本'),
  // 具体的模板信息
  template: string(name='template', example='sidecar模板'),
  // 工作空间
  workspaceId: string(name='workspace_id', example='xxx'),
  // 工作空间组id
  workspaceGroupId: string(name='workspace_group_id', example='ssss'),
  // 镜像地址
  image: string(name='image', example='reg.docker.alibaba-inc.com/antmesh/mosn:1.23.0-45402f78-nightly_cloud'),
  // 保留扩展
  extension: string(name='extension', example='json string 扩展'),
  // 基线所应用的scope范围
  scope: string(name='scope', example='"gray,prod"'),
}

// AKS集群cluster
model Cluster {
  // 集群创建时间
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time', example='2018-10-10T10:10:00Z'),
  // env
  env: string(name='env', example='env'),
  // 集群是否健康
  isHealthy: boolean(name='is_healthy', example='true, false'),
  // 集群名称
  name: string(name='name', example='test'),
  // region name
  // 
  regionName: string(name='region_name', example='shfin'),
  // 独占
  type?: string(name='type', example='dedicated'),
  // 集群版本
  version: string(name='version', example='1.12'),
  // 环境名称
  workspace: string(name='workspace', example='dev环境名称'),
  // 机房名称
  zoneName: string(name='zone_name', example='sh-a'),
}

// fed namespace
model FedNamespace {
  // fed namespace annotations
  annotations: [ Annotation ](name='annotations', example=''),
  // fed namespace clusters
  clusters: [ string ](name='clusters', example=''),
  // fed namespace cluster state map
  clusterStateMap: [ ClusterState ](name='cluster_state_map', example=''),
  // fed namespace labels
  labels: [ Label ](name='labels', example='labels'),
  // fed namespace name
  name: string(name='name', example='antstack'),
  // Fed CRD namespace
  namespace: string(name='namespace', example='default'),
  // 创建时间
  createTimeStamp: string(name='create_time_stamp', example='2019-10-30T10:18:11Z'),
  // fed 资源的状态
  status?: string(name='status', example='True,False,Deleting'),
  // 导致 fed 资源处于该状态的原因
  reason?: string(name='reason', example='ClusterNotReady'),
}

// 应用摘要信息
model AppSimpleInfo {
  // 应用id
  appId: string(name='app_id', example='0000000003324001'),
  // 应用分组名字
  appInstanceGroupName: string(name='app_instance_group_name', example='testsvc001'),
  // 应用名字
  appName: string(name='app_name', example='testsvc001'),
  // 执行者
  executor: string(name='executor', example='0000070959'),
  // 结束时间
  finishTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='finish_time', example='2018-10-10T10:10:00Z'),
  // 分组个数
  groupNum: long(name='group_num', example='3'),
  // 分组策略
  groupStrategy: string(name='group_strategy', example='CELL'),
  // id
  id: string(name='id', example='0000000003308001'),
  // 命名空间
  namespace?: string(name='namespace', example='dev'),
  // 操作类型
  operationType: string(name='operation_type', example='NORMAL,ROLLBACK'),
  // 发布版本号
  revision: string(name='revision', example='20191107223318149.4wng37w3'),
  // 回滚revision
  rollbackRevision?: string(name='rollback_revision', example='13456'),
  // 是否可单独执行
  standaloneExecutable: boolean(name='standalone_executable', example='true, false'),
  // 开始时间
  startTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_time', example='2018-10-10T10:10:00Z'),
  // 应用状态
  state: string(name='state', example='DEPLOYED'),
  // Pod 数量
  podCount?: long(name='pod_count', example='1'),
  // 回滚原因
  rollbackReason?: string(name='rollback_reason', example='xxx'),
  // 依赖的应用服务名
  dependContainerServiceNames?: [ string ](name='depend_container_service_names', example='testappservice'),
  // 错误信息
  message?: string(name='message', example='ok'),
  // 发布模板名称
  deploymentTemplateName?: string(name='deployment_template_name', example='TEST'),
}

// 应用技术栈
model TechStack {
  // 技术栈描述
  description: string(name='description', example='蚂蚁SOFA4框架'),
  // 该字段为字符串类型Map，序列化为字符串用于存储扩展信息，e.g： 云原生下打包存放目录 /home/admin/release
  extendProperties: string(name='extend_properties', example='技术栈扩展信息'),
  // 技术栈id
  id?: string(name='id', example='0000000000000001'),
  // 技术栈名称
  name: string(name='name', example='SOFA'),
  // 技术栈可见范围，全局可见|租户内可见
  scope: string(name='scope', example='PUBLIC|TENANT'),
  // 创建时间（UTC）
  utcCreated: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_created', example='2018-10-10T10:10:00Z'),
  // 最近修改时间（UTC）
  utcModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
}

// 发布单|应用执行进度，按状态区分
model ExecuteProgress {
  // 阻塞个数
  blocked: long(name='blocked', example='1'),
  // 执行中个数
  executing: long(name='executing', example='1'),
  // 失败个数
  failed: long(name='failed', example='1'),
  // 执行对象ID
  id: string(name='id', example='00000000001'),
  // 初始化机器个数
  inited: long(name='inited', example='10'),
  // 执行对象状态
  state: string(name='state', example='EXECUTING'),
  // 成功个数
  success: long(name='success', example='1'),
  // 总计
  total: long(name='total', example='100'),
  // 等待中个数
  waiting: long(name='waiting', example='1'),
}

// 守夜人预案信息
model EmergencyPlan {
  // 预案id
  id: string(name='id', example='EP202201101723224858'),
  // 预案名称
  name: string(name='name', example='wlftest'),
}

// FedConfigMapOverride 列表
model FedConfigMapOverrideList {
  // fed configmap override list
  list: [ FedConfigmapOverride ](name='list', example=''),
}

// 弹性场景
model ElasticScene {
  // 场景名
  name: string(name='name', example='场景A'),
  // 弹性场景状态，有效值（VALID，INVALID）
  status: string(name='status', example='VALID'),
  // 弹性场景ID
  id?: long(name='id', example='123'),
}

// the uid shard list.
model UidShardList {
  // the uid shard list.
  data: [ UidShard ](name='data', example='[{}]'),
}

// Region info
model Region {
  // region id
  id: string(name='id', example='0001'),
  // region name
  name?: string(name='name', example='region-001'),
  // workspace list
  workspaces?: [ Workspace ](name='workspaces', example=''),
}

// OB租户信息
model OBTenant {
  // 租户描述
  description?: string(name='description', example='test'),
  // 扩展属性，序列化后的JSON字符串
  extendProperties?: string(name='extend_properties', example='"{}"'),
  // 唯一标识
  id: string(name='id', example='123456'),
  // 租户名称
  name: string(name='name', example='ob_tenant1'),
  // 租户类型（单库GZONE|分片库RZONE）：存放对应业务库
  type: string(name='type', example='GZONE|RZONE'),
  // 租户对应uid分段，用于存放对应的业务分片库
  uids?: [ long ](name='uids', example='[0,1,2,...9]'),
  // 工作空间组唯一标识
  workspaceGroupId: string(name='workspace_group_id', example='123456'),
  // 创建日期
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time', example='2018-10-10T10:10:00Z'),
  // 修改时间
  modifiedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='modified_time', example='2018-10-10T10:10:00Z'),
}

// 一个运维操作组
model OpsGroup {
  // 运维操作组当前状态。取值列表： INITED：初始化完成； EXECUTING：执行中； SUCCESS：执行成功； FAILED：执行失败； CANCELED：已取消； CONFIRM_WAITING：待确认
  status?: string(name='status', example=''),
  // 包含在此运维操作组中的运维单元列表
  units?: [ OpsUnit ](name='units', example=''),
  // 运维任务进度列表
  progresses?: [ OpsGroupTaskProgress ](name='progresses', example='[{action_code: "DISABLE_LB_TRAFFIC", action_name: "LB摘流", state: "SUCCEEDED"}]'),
}

// 弹性信息
model ElasticInfoView {
  // 全局弹性状态，有效值：NORMAL，ELASTIC
  status: string(name='status', example='NORMAL'),
  // 弹性值
  elasticValues?: [ string ](name='elastic_values', example=''),
  // 是否压测
  press?: boolean(name='press', example='true, false'),
}

// sidecar升级状态
model SidecarReleaseStatus {
  // 运维单号
  orderNum: string(name='order_num', example='ASDFGH1234'),
  // 部署单元
  cellName: string(name='cell_name', example='rz001'),
  // 所处状态
  status: string(name='status', example='start'),
}

// Service 信息
model ServiceInfo {
  // 元信息
  meta: ContainerServiceObjectMeta(name='meta', example=''),
  // Service 类型
  type: string(name='type', example='LoadBalancer'),
  // 负载均衡服务的网络类型（internet | intranet | office | multidomain）
  loadBalancerAddressType?: string(name='load_balancer_address_type', example='intranet'),
  // Service 状态
  status?: ServiceStatus(name='status', example=''),
  // service端口映射列表
  ports?: [ ServicePort ](name='ports', example='[{}, {}]'),
}

// 部署单元组的流量规则
model UnitFlow {
  // 部署单元组的名称
  name: string(name='name', example='RZ01'),
  // 部署单元组的类型
  type: string(name='type', example='RZG'),
  // 该部署单元组下的部署单元流量规则
  cellFlows: [ CellFlow ](name='cell_flows', example=''),
  // 该部署单元组下的部署单元 uid 分配
  uidRanges: [ UidRange ](name='uid_ranges', example=''),
  // 是否弹性部署单元组
  elastic: boolean(name='elastic', example='true, false'),
}

// 发布版本信息
model ReleaseVersion {
  // 镜像
  image: string(name='image', example='image1'),
}

// 应用发布进度
model AppDeployProgress {
  // 应用发布所需要组件列表
  componentList: [ string ](name='component_list', example=''),
  // 应用发布分组列表
  executeGroups: [ AppDeployGroup ](name='execute_groups', example=''),
  // 结束时间
  finishTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='finish_time', example='2018-10-10T10:10:00Z'),
  // service id
  id: string(name='id', example='0000000103873151'),
  // 当前应用是否是一个回滚的应用
  isRollBack: boolean(name='is_roll_back', example='true,false'),
  // 发布进度pod状态统计数据
  podStateSummary: AppDeployPodStateSummary(name='pod_state_summary', example=''),
  // 后置任务列表
  postTasks: [ AppDeployTask ](name='post_tasks', example=''),
  // 前置任务列表
  preTasks: [ AppDeployTask ](name='pre_tasks', example=''),
  // 当前服务关联的一个回滚服务的id，如果该值不为空则表示当前服务被回滚过
  rollBackServiceId?: string(name='roll_back_service_id', example='0000000103873152'),
  // 开始时间
  startTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_time', example='2018-10-10T10:10:00Z'),
  // 当前发布状态
  state: string(name='state', example='INITIALIZED, EXECUTING,CONFIRM_WAITING, SUCCEEDED, FAILED '),
  // 容器服务命名空间
  namespace: string(name='namespace', example='dev'),
  // 错误信息
  message?: string(name='message', example='ok'),
  // task id
  taskId?: string(name='task_id', example='0000000001218013'),
  // 操作code
  actionCode?: string(name='action_code', example='POD_GROUP_RELEASE'),
}

// Spanner集群信息
model SpannerClusterInfo {
  // 容器的CPU个数
  containerCpu: long(name='container_cpu', example='4'),
  // 容器是否独占CPU
  containerCpuExclusive: boolean(name='container_cpu_exclusive', example='false'),
  // 容器所在物理机节点的标签
  containerDeviceType: string(name='container_device_type', example='server'),
  // 容器的磁盘大小
  containerDisk: long(name='container_disk', example='20'),
  // 容器的内存大小(G)
  containerMem: long(name='container_mem', example='16'),
  // 容器网络
  containerNetwork: string(name='container_network', example='driver:vlan'),
  // 创建时间
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time', example='2018-10-10T10:10:00Z'),
  // 扩展属性，json字符串
  extendProperties?: string(name='extend_properties', example='"{\"key\": \"value\"}"'),
  // ID 
  id: string(name='id', example='072a69abe6362f140643cedb32b30e7152068ae499b025a31074dab44d77cb2f'),
  // 修改时间
  modifiedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='modified_time', example='2018-10-10T10:10:00Z'),
  // 集群名称
  name: string(name='name', example='testover'),
  // 集群的状态： 1 运行状态  2 维护状态
  status: long(name='status', example='1，2'),
  // 集群单元信息
  unitInfos: [ SpannerClusterUnitInfo ](name='unit_infos', example=''),
  // 0 表示集群单元类型为容器
  unitType: long(name='unit_type', example='0'),
  // 已使用的端口
  usedPorts?: [ long ](name='used_ports', example='[7777, 8888]'),
  // internet/intranet/multidomain/office
  addressType: string(name='address_type', example='internet'),
}

// 灰度发布参数
model GrayReleaseConfig {
  // 加到流量上的灰度标签
  grayLabel: string(name='gray_label', example='gray1'),
  // 提供南北流量网关服务的类型
  provider: string(name='provider', example='sofa, spanner'),
  // 给流量添加灰度label的策略，可选byWeight或者byRule
  // 在byWeight模式下，会按照用户指定的比例，给进入的流量加上灰度标签
  // 在byRule模式下，会按照用户指定的规则（条件），给进入的流量加上灰度标签。
  labelApplyPolicy: string(name='label_apply_policy', example='byWeight, byRule'),
  // 给进入的流量添加灰度label的比例，仅当label_apply_policy为byWeight时生效
  weight?: long(name='weight', example='20'),
  // 给进入的流量添加灰度label的规则，仅当label_apply_policy为byRule时生效
  rule?: GrayLabelApplyRule(name='rule', example='{}'),
  // 在各部署单元期望部署的pod个数，若应用服务当前不部署在其中的部署单元，则该不会在该部署单元上为应用进行部署
  scaleReplicas?: [ ReplicaCount ](name='scale_replicas', example='[{}]'),
}

// cell info
model CellInfo {
  // cell display name
  displayName: string(name='display_name', example='部署单元A'),
}

// 运维容器服务分组依赖链
model OpsContainerServiceChain {
  // 运维容器分组列表
  groups: [ OpsContainerServiceGroup ](name='groups', example='[{"container_services": [{"namespace":"default", "name": "test"}]}]'),
}

// network info
model NetworkInfo {
  // networt description
  description: string(name='description', example='虚拟私有云网络'),
}

// sidecar运维机器分组信息
model SidecarOpsMachineGroup {
  // 分组ID
  id: string(name='id', example='12345'),
  // 分组名称
  target?: string(name='target', example='test'),
  // 状态
  status: string(name='status', example='_SUCCEEDED_, _FAILED_'),
  // 扩展属性
  properties?: string(name='properties', example='_{}_'),
  // 执行日志
  messages?: string(name='messages', example='test log'),
  // sidecar 运维机器列表
  subTargets: [ SidecarOpsMachine ](name='sub_targets', example='[{}]'),
}

// 负载均衡实例。
model LoadBalancerInstance {
  // 负责均衡iaas id。
  iaasId: string(name='iaas_id', example='lb-12345678'),
  // 监听器。
  listeners: [ LoadBalancerListener ](name='listeners', example='[{}]'),
  // 负载均衡名称。
  name: string(name='name', example='test-lb'),
  // 负责均衡PAAS id。
  paasId?: string(name='paas_id', example='1234567'),
  // 负责均衡类型。
  type: string(name='type', example='INTERNET'),
  // 负载均衡vip地址。
  vipAddresses?: [ string ](name='vip_addresses', example='[]'),
  // 统一接入域名。
  domain: string(name='domain', example='alipay.net'),
}

// Pod Overview Info
model PodOverviewInfo {
  // pod number
  podNumber?: long(name='pod_number', example='100'),
  // unhealthy pod number
  unhealthyPodNumber?: long(name='unhealthy_pod_number', example=''),
}

// 统一接入实例监听配置（http/https）
model UnifiedAccessInstanceListener {
  // CA证书ID。 若既上传CA证书又上传服务器证书，即采用双向认证。 若用户只上传服务器证书，即为单向认证。
  caCertificateId?: string(name='ca_certificate_id', example='139a00604ad-cn-east-hangzhou-01'),
  // 统一接入实例监听端口。 取值：1-65535。
  listenerPort: long(name='listener_port', example='80'),
  // 协议类型，目前支持http和https两种
  protocol: string(name='protocol', example='http'),
  // 是否使用websocket连接方式
  websocketConnect: boolean(name='websocket_connect', example='true, false'),
}

// node event
model NodeEvent {
  // event count
  count: long(name='count', example='1000'),
  // event message
  message: string(name='message', example='Node 2150535616 status is now: NodeHasSufficientDisk'),
  // event modified time
  modifiedTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='modified_time', example='2018-10-10T10:10:00Z'),
  // event reason
  reason: string(name='reason', example='NodeHasSufficientDisk'),
  // event type
  type: string(name='type', example='Normal'),
}

// Linke解决方案返回结果数据
model LinkeReleaseData {
  // Linke release ID
  releaseId: string(name='release_id', example='ER10046328_GRAY_202000410'),
}

// sidecar运维任务
model SidecarOperationTask {
  // 业务流水号
  bizId: string(name='biz_id', example='biz12345'),
  // 操作人
  operator: string(name='operator', example='张三'),
  // 名称
  title: string(name='title', example='sidecar注入批次 0'),
  // sidecar运维内容上下文信息
  context: SidecarOperationTaskContext(name='context', example=''),
}

// 集群状态信息
model ClusterStatus {
  // 集群名称
  name: string(name='name', example='test'),
  // 集群资源概览
  overviewInfo: ClusterOverviewInfo(name='overview_info', example=''),
}

// 机构应用发布结果
model TenantAppReleaseData {
  // 是否成功
  success: boolean(name='success', example='true, false'),
  // 机构名称
  tenant: string(name='tenant', example='ANTCLOUD'),
  // 发布单ID
  releaseId: string(name='release_id', example='1000000000001'),
  // 环境
  workspaceGroup: string(name='workspace_group', example='dev'),
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
model LocalObjectReference {
  // name
  name: string(name='name', example='name'),
}

// 弹性规则
model ElasticRuleView {
  // ID
  id?: long(name='id', example='123'),
  // 弹性类型，有效值：SERVICE，MSGBROKER
  type: string(name='type', example='SERVICE'),
  // 弹性值
  name: string(name='name', example='test-rule'),
  // 关联应用
  appName: string(name='app_name', example='test-app'),
  // 状态，有效值：VALID（线上生效），PRESS（仅压测生效），INVALID（无效状态）
  status: string(name='status', example='VALID'),
  // 操作人
  operator: string(name='operator', example='zhangsan'),
  // 场景 ID
  sceneId: long(name='scene_id', example='123'),
}

// 弹性子规则
model ElasticSubRuleView {
  // 弹性子规则ID
  id: long(name='id', example='123'),
  // 所属APP
  appName: string(name='app_name', example='test-app'),
  // 关联的弹性规则ID
  elasticRuleId: long(name='elastic_rule_id', example='123'),
  // 父节点
  parentId?: long(name='parent_id', example='123'),
  // 值
  value: string(name='value', example='test-value'),
  // 是否使用默认eid，默认 false
  useDefaultEid?: boolean(name='use_default_eid', example='true, false'),
  // 状态，有效值：VALID（线上生效），PRESS（仅压测生效），INVALID（无效状态）
  status: string(name='status', example='VALID'),
  // 规则类型
  type: string(name='type', example='SERVICE'),
  // 场景ID
  sceneId: long(name='scene_id', example='123'),
}

// 规则推送结果
model PushRuleResult {
  // site名字
  name?: string(name='name', example='my-site'),
  // site描述
  desc?: string(name='desc', example='test'),
  // 推送成功的zone
  succeedList?: [ string ](name='succeed_list', example=''),
  // 推送失败的zone
  failedList?: [ string ](name='failed_list', example=''),
}

// 容器应用服务基础信息。
model ContainerServiceBasicInfo {
  // 镜像构建id。
  appBuild?: string(name='app_build', example='2152208959'),
  // 应用id
  appId: string(name='app_id', example='00000000123'),
  // 应用名称。
  appName: string(name='app_name', example='cashier'),
  // 创建时间。
  createdTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time', example='2018-10-10T10:10:00Z'),
  // 当前最新镜像。
  currentImage?: string(name='current_image', example='nginx:latest'),
  // 发布中的版本。
  deployingRevision?: string(name='deploying_revision', example='test.123gthy678uj'),
  // 发布部署状态。
  deploymentStatus?: string(name='deployment_status', example='SUCCEEDED'),
  // container service描述
  description?: string(name='description', example='container service描述'),
  // 当前应用服务草稿对应的版本号。
  draftedRevision?: string(name='drafted_revision', example='test.12hyh676yh78'),
  // 草稿更新时间。
  draftedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='drafted_time', example='2018-10-10T10:10:00Z'),
  // 最近一次发布的版本。
  lastDeployedRevision?: string(name='last_deployed_revision', example='test.12hgyhu78uji8'),
  // 最近一次发布的结束时间。
  lastDeployEndTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='last_deploy_end_time', example='2018-10-10T10:10:00Z'),
  // 最近一次关联的发布单。
  lastDeployPlanId?: string(name='last_deploy_plan_id', example='201905230303580000'),
  // 最近一次发布的开始时间。
  lastDeployStartTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='last_deploy_start_time', example='2018-10-10T10:10:00Z'),
  // 容器服务元数据状态。
  metadataStatus: string(name='metadata_status', example='DEPLOYED'),
  // 创建时间。
  modifiedTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='modified_time', example='2018-10-10T10:10:00Z'),
  // 容器应用服务名称。
  name: string(name='name', example='app-service'),
  // 所属命名空间名称。
  namespace: string(name='namespace', example='dev'),
  // 负责人。
  owner: string(name='owner', example='张三'),
  // 容器服务的Pod列表。
  podList: [ PodInfo ](name='pod_list', example='[{}]'),
  // 更新中pod数量
  processingCount?: string(name='processing_count', example='4'),
  // replicas数量
  replicas: string(name='replicas', example='16'),
  // runding pod数量
  runningCount?: string(name='running_count', example='5'),
  // 运行时版本。
  runtimeRevision?: string(name='runtime_revision', example='test.123gthy678uj'),
  // 所属工作空间组名称。
  workspaceGroup: string(name='workspace_group', example='dev'),
  // 容器服务Service列表。
  serviceList?: [ LoadBalancerService ](name='service_list', example='[{}]'),
  // message信息
  messageDetail?: string(name='message_detail', example='{"DELETE_CONTAINER_SERVICE":"Failed to xxx"}'),
}

// 系统url
model SystemURL {
  // 平台名称
  platformName: string(name='platform_name', example='auth'),
  // url
  url: string(name='url', example='fee-api.cloud.alipay.com'),
  // 上线问配置
  context?: string(name='context', example='user=admin'),
}

// fed image pull secret 
model FedImagePullSecret {
  // annotations
  annotations?: [ string ](name='annotations', example=''),
  // image pull secret registry account info
  data: RegistryAccout(name='data', example=''),
  // labels
  labels?: [ string ](name='labels', example=''),
  // name
  name: string(name='name', example='name'),
  // namesapce
  namespace: string(name='namespace', example='default'),
  // cell overrides
  overrides: FedImagePullSecretOverrideList(name='overrides', example=''),
  // workspace group name
  workspaceGroupName: string(name='workspace_group_name', example='ANTCLOUD'),
  // cell list
  cells: [ string ](name='cells', example=''),
}

// 查询pod列表的可选参数
model ListPodOption {
  // 根据pod number列举pod的方式：RANGE为范围查询；ARRAY为指定pod number查询；ALL查询全量
  type: string(name='type', example='RANGE | ARRAY | ALL'),
  // [type为RANGE时生效]范围查询的左边界（包含）
  podNumerFrom?: long(name='pod_numer_from', example='0'),
  // [type为RANGE时生效]范围查询的右边界（不包含）
  podNumberTo?: long(name='pod_number_to', example='5'),
  // [type为ARRAY时生效]指定pod number的查询
  podNumbers?: [ long ](name='pod_numbers', example='[0,3,7,2]'),
}

// OAM应用配置
model OAMApplicationConfiguration {
}

// 站点信息
model PushSite {
  // 是否当前站点
  current: boolean(name='current', example='true, false'),
  // 站点描述
  description?: string(name='description', example='blabla'),
  // 站点唯一标识
  id: long(name='id', example='001'),
  // 接口类型，可选（RPC，REST）
  interfaceType: string(name='interface_type', example='RPC'),
  // 站点 DRM endpoints
  interfaceUrls?: [ string ](name='interface_urls', example=''),
  // 站点名称
  name: string(name='name', example='主站'),
  // 站点部署单元
  siteCells?: [ SiteCell ](name='site_cells', example=''),
  // 站点类型，可选（MAIN，ISOMERISM）
  siteType: string(name='site_type', example='MAIN'),
}

// fed configmap struct
model FedConfigmap {
  // fed configmap annotations
  annotations: [ Annotation ](name='annotations', example=''),
  // Fed资源集群Cell状态
  cellStatus?: [ ClusteCellStatus ](name='cell_status', example=''),
  // fed clusters
  clusters: [ string ](name='clusters', example=''),
  // 创建时间
  createTimeStamp: string(name='create_time_stamp', example='2019-10-30T10:18:10Z'),
  // fed configmap data
  data: [ ConfigMapData ](name='data', example=''),
  // fed configmap labels
  labels: [ Label ](name='labels', example=''),
  // fed configmap name
  name: string(name='name', example='cm'),
  // fed configmap namespace
  namespace: string(name='namespace', example='antstack'),
  // fed configmap override
  overrides: [ FedConfigmapOverride ](name='overrides', example=''),
  // 原因
  reason?: string(name='reason', example='GetKeysInCellFailed'),
  // propagation状态
  status?: string(name='status', example='propagation'),
}

// 统一接入实例信息
model UnifiedAccessInstanceInfo {
  // 统一接入实例创建的时间
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time', example='2018-10-10T10:10:00Z'),
  // 关联的Spanner逻辑集群名称，一个逻辑集群由很多个local集群组成
  spannerCluster: string(name='spanner_cluster', example='00000000'),
  // 关联的应用服务信息
  unifiedAccessInstanceContainerServiceInfos?: [ UnifiedAccessInstanceContainerServiceInfo ](name='unified_access_instance_container_service_infos', example=''),
  // https协议配置
  unifiedAccessInstanceHttpsEntry?: HttpsEntry(name='unified_access_instance_https_entry', example=''),
  // http协议配置
  unifiedAccessInstanceHttpEntry: HttpEntry(name='unified_access_instance_http_entry', example=''),
  // 统一接入实例ID
  unifiedAccessInstanceId: string(name='unified_access_instance_id', example='id'),
  // 本地集群详细信息
  unifiedAccessInstanceLocalDetailInfos: [ UnifiedAccessInstanceLocalDetailInfo ](name='unified_access_instance_local_detail_infos', example=''),
  // 统一接入实例详细信息显示，包含错误状态信息等
  unifiedAccessInstanceMessageDetails?: string(name='unified_access_instance_message_details', example='详细信息'),
  // 统一接入实例名称
  unifiedAccessInstanceName: string(name='unified_access_instance_name', example='name'),
  // 统一接入实例状态描述：创建中、创建成功、创建失败
  unifiedAccessInstanceStatus: string(name='unified_access_instance_status', example='创建中'),
  // 统一接入实例网络类型，内网（intranet），公网（internet）
  unifiedAccessInstanceType: string(name='unified_access_instance_type', example='intranet'),
  // custom模式下，用户自定义entryId以及entryVip信息
  entrySettings?: EntrySettings(name='entry_settings', example='{}'),
}

// zone list of workspace
model ZoneOfWorkspace {
  // workspace id
  workspaceId: string(name='workspace_id', example='ws-id'),
  // workspace name
  workspaceName: string(name='workspace_name', example='wsName'),
  // zone list of workspace
  zones: [ ZoneInfo ](name='zones', example=''),
  // region name
  regionName: string(name='region_name', example='shanghai'),
  // region id
  regionId: string(name='region_id', example='00000001'),
}

model BindAppserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用名称
  applicationName: string(name='application_name'),
  // 应用服务名称
  appServiceName: string(name='app_service_name'),
  // 部署单元名称列表。 n代表第n个应用的名称，n从1开始，最大100。每个部署单元名称最大60个UTF-8字符。如果要输入多个部署单元，使用如下形式：cell_ids.1=RZ01A&cell_ids.2=RZ02B
  cellIds: [ string ](name='cell_ids'),
  // 工作空间名称
  workspace: string(name='workspace'),
}

model BindAppserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 关联单元化应用服务实例
 * Summary: 关联单元化应用服务实例
 */
async function bindAppservice(request: BindAppserviceRequest): BindAppserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindAppserviceEx(request, headers, runtime);
}

/**
 * Description: 关联单元化应用服务实例
 * Summary: 关联单元化应用服务实例
 */
async function bindAppserviceEx(request: BindAppserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindAppserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.appservice.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnbindAppserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用名称
  applicationName: string(name='application_name'),
  // 应用服务名称
  appServiceName: string(name='app_service_name'),
  // 部署单元名称列表。 n代表第n个应用的名称，n从1开始，最大100。每个部署单元名称最大60个UTF-8字符。如果要输入多个部署单元，使用如下形式：cell_ids.1=RZ01A&cell_ids.2=RZ02B
  cellIds: [ string ](name='cell_ids'),
  // 工作空间名称
  workspace: string(name='workspace'),
}

model UnbindAppserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 解除关联的单元化应用服务实例
 * Summary: 解除关联的单元化应用服务实例
 */
async function unbindAppservice(request: UnbindAppserviceRequest): UnbindAppserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unbindAppserviceEx(request, headers, runtime);
}

/**
 * Description: 解除关联的单元化应用服务实例
 * Summary: 解除关联的单元化应用服务实例
 */
async function unbindAppserviceEx(request: UnbindAppserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnbindAppserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.appservice.unbind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAppopsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 执行运维操作的目标应用列表,可通过services指定应用下待运维的应用服务实例. 如果要指定多个应用, 使用如下形式: applications.1.name=app1&applications.2.name=app2&applications.2.services.1.name=app2-sv1&applications.2.services.1.workspace=shdev
  applications?: [ Application ](name='applications'),
  // 是否自动执行运维单, 默认为false.当设置为true是,创建完成并初始化成功后会自动执行该运维单.
  autoExecution?: boolean(name='auto_execution'),
  // 执行运维操作的目标机器id列表。如果要输入多个机器，使用如下形式：computers.1.id=000112367&computers.2.id=000112367
  computers?: [ string ](name='computers'),
  // 应用运维的操作类型，取值列表：ONLINE：上线应用，OFFLINE：下线应用，RESTART:重启应用，DEPLOY_STATIC_RESOURCE：部署静态资源
  opsAction: string(name='ops_action'),
  // 执行ops_action所需要的参数。
  opsActionParams?: [ OpsParam ](name='ops_action_params'),
  // 应用运维的维度，有两种取值：APPLICATION和MACHINE。设置为APPLICATION，表示在非应用服务环境下该应用执行该应用运维操作；设置为MACHINE，表示应用下的一台或多台机器执行该应用运维操作。
  opsDemension: string(name='ops_demension'),
  // 应用运维单标题
  title: string(name='title'),
  // 工作空间组名称
  workspaceGroup: string(name='workspace_group'),
  // Map<String, String> 序列化后字符串
  context?: string(name='context'),
  // 机器分组策略，默认采用快速分组
  // QUICK         -     快速分组
  // ALL_ONE    - 共分一组
  // EACH_ONE - 每台一组
  // 
  groupStrategy?: string(name='group_strategy'),
}

model CreateAppopsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建完成的运维单id
  operationId: string(name='operation_id'),
}

/**
 * Description: 创建一个应用运维单，以对一组应用执行一次运维操作
 * Summary: 创建一个应用运维单
 */
async function createAppops(request: CreateAppopsRequest): CreateAppopsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAppopsEx(request, headers, runtime);
}

/**
 * Description: 创建一个应用运维单，以对一组应用执行一次运维操作
 * Summary: 创建一个应用运维单
 */
async function createAppopsEx(request: CreateAppopsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppopsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.appops.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppopsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 运维单id
  operationId: string(name='operation_id'),
}

model GetAppopsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 此运维操作中所有被操作的应用详情，以操作链的形式体现
  applicationChains: [ OpsApplicationChain ](name='application_chains'),
  // 运维操作执行者
  executor: string(name='executor'),
  // 应用运维的操作类型，取值列表：ONLINE：上线应用，OFFLINE：下线应用，RESTART:重启应用，DEPLOY_STATIC_RESOURCE：部署静态资源
  opsAction: string(name='ops_action'),
  // 应用运维的维度，有两种取值：APPLICATION和MACHINE。设置为APPLICATION，表示对整个应用都执行该应用运维操作；设置为MACHINE，表示应用下的一台或多台机器执行改应用运维操作。
  opsDimension: string(name='ops_dimension'),
  // 部署单状态。取值列表： INITING：初始化中； INIT_FAILED：初始化失败； INITED：初始化完成； EXECUTING：执行中； SUCCESS：执行成功； FAILED：执行失败； CANCELING：取消中； CANCELED：已取消
  status: string(name='status'),
  // 应用运维单标题
  title: string(name='title'),
}

/**
 * Description: 查询一个已经创建成功的部署操作
 * Summary: 查询一个已经创建成功的部署操作。
 */
async function getAppops(request: GetAppopsRequest): GetAppopsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppopsEx(request, headers, runtime);
}

/**
 * Description: 查询一个已经创建成功的部署操作
 * Summary: 查询一个已经创建成功的部署操作。
 */
async function getAppopsEx(request: GetAppopsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppopsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.appops.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppopsApplicationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 待查询的应用名称，必须是运维单中包含的应用
  applicationName: string(name='application_name'),
  // 运维单id
  operationId: string(name='operation_id'),
}

model GetAppopsApplicationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 此应用下所有计算容器分组运维状态详情
  groups?: [ OpsGroup ](name='groups'),
  // 应用当前运维状态。取值列表：INITING：初始化中；INIT_FAILED：初始化失败；INITED：初始化完成；EXECUTING：执行中；SUCCESS：执行成功；FAILED：执行失败
  status?: string(name='status'),
}

/**
 * Description: 查询一个运维操作中某个应用的详情
 * Summary: 查询一个运维操作中某个应用的详情
 */
async function getAppopsApplication(request: GetAppopsApplicationRequest): GetAppopsApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppopsApplicationEx(request, headers, runtime);
}

/**
 * Description: 查询一个运维操作中某个应用的详情
 * Summary: 查询一个运维操作中某个应用的详情
 */
async function getAppopsApplicationEx(request: GetAppopsApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppopsApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.appops.application.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAppopsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 发布单或运维单time_series_id
  operationId: string(name='operation_id'),
  // 操作人，lks1.23.0才支持
  operator?: string(name='operator'),
}

model StartAppopsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 开始执行一个已经创建成功的运维操作。如果此运维单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始执行一个已经创建成功的运维操作。
 */
async function startAppops(request: StartAppopsRequest): StartAppopsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAppopsEx(request, headers, runtime);
}

/**
 * Description: 开始执行一个已经创建成功的运维操作。如果此运维单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始执行一个已经创建成功的运维操作。
 */
async function startAppopsEx(request: StartAppopsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAppopsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.appops.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitAppopsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 运维单id
  operationId: string(name='operation_id'),
}

model ReinitAppopsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 重新初始化一个初始化失败的运维单。当运维单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化一个初始化失败的运维单。
 */
async function reinitAppops(request: ReinitAppopsRequest): ReinitAppopsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitAppopsEx(request, headers, runtime);
}

/**
 * Description: 重新初始化一个初始化失败的运维单。当运维单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化一个初始化失败的运维单。
 */
async function reinitAppopsEx(request: ReinitAppopsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitAppopsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.appops.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelAppopsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 运维单id
  operationId: string(name='operation_id'),
  // 取消原因。长度不超过100个UTF-8字符
  reason: string(name='reason'),
  // 操作人账号，lks1.23.0才支持
  operator?: string(name='operator'),
}

model CancelAppopsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 对一个运维单执行取消操作。 当运维单处于以下状态时可执行取消操作： INITED：初始化完成 INIT_FAILED：初始化失败
 * Summary: 对一个运维单执行取消操作。
 */
async function cancelAppops(request: CancelAppopsRequest): CancelAppopsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelAppopsEx(request, headers, runtime);
}

/**
 * Description: 对一个运维单执行取消操作。 当运维单处于以下状态时可执行取消操作： INITED：初始化完成 INIT_FAILED：初始化失败
 * Summary: 对一个运维单执行取消操作。
 */
async function cancelAppopsEx(request: CancelAppopsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelAppopsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.appops.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryAppopsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 运维单id
  operationId: string(name='operation_id'),
  // 操作人账号，lks1.23.0才支持
  operator?: string(name='operator'),
}

model RetryAppopsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 对一个运维操作中所有运维失败的分组进行重试操作。 当运维单处于以下状态时可执行重试操作： - FAILED：执行失败
 * Summary: 重试运维
 */
async function retryAppops(request: RetryAppopsRequest): RetryAppopsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryAppopsEx(request, headers, runtime);
}

/**
 * Description: 对一个运维操作中所有运维失败的分组进行重试操作。 当运维单处于以下状态时可执行重试操作： - FAILED：执行失败
 * Summary: 重试运维
 */
async function retryAppopsEx(request: RetryAppopsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryAppopsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.appops.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDeploymentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 部署单id
  operationId: string(name='operation_id'),
}

model GetDeploymentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作执行者
  executor: string(name='executor'),
  // 
  //                   发布单状态。取值列表：INITING：初始化中；INIT_FAILED：初始化失败；INITED：初始化完成；EXECUTING：执行中；SUCCEEDED：执行成功；FAILED：执行失败；CANCELING：取消中；CANCELED：已取消
  //                 
  status: string(name='status'),
  // 标题
  title: string(name='title'),
  // 此发布部署操作中所有被操作的应用详情，以操作链的形式体现
  applicationChains: [ OpsApplicationChain ](name='application_chains'),
}

/**
 * Description: 查询发布单
 * Summary: 查询发布单
 */
async function getDeployment(request: GetDeploymentRequest): GetDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDeploymentEx(request, headers, runtime);
}

/**
 * Description: 查询发布单
 * Summary: 查询发布单
 */
async function getDeploymentEx(request: GetDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeploymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.deployment.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDeploymentApplicationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 部署单id
  operationId: string(name='operation_id'),
  // 待查询的应用名称，必须是部署单中包含的应用
  applicationName: string(name='application_name'),
}

model GetDeploymentApplicationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 
  //                   应用当前部署状态。取值列表：INITING：初始化中；INIT_FAILED：初始化失败；INITED：初始化完成；EXECUTING：执行中；SUCCEEDED：执行成功；FAILED：执行失败
  //                 
  status: string(name='status'),
  // 
  //                   应用发布版本
  //                 
  version: string(name='version'),
  // 此应用下所有计算容器分组部署状态详情
  groups: [ OpsGroup ](name='groups'),
  // 应用前置任务
  preTasks: [ OpsPrePostTask ](name='pre_tasks'),
  // 应用后置任务
  postTasks: [ OpsPrePostTask ](name='post_tasks'),
}

/**
 * Description: 查询部署单中某个应用的详情
 * Summary: 查询部署单中某个应用的详情
 */
async function getDeploymentApplication(request: GetDeploymentApplicationRequest): GetDeploymentApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDeploymentApplicationEx(request, headers, runtime);
}

/**
 * Description: 查询部署单中某个应用的详情
 * Summary: 查询部署单中某个应用的详情
 */
async function getDeploymentApplicationEx(request: GetDeploymentApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeploymentApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.deployment.application.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDeploymentRollbackRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 部署单id
  operationId: string(name='operation_id'),
  // 待查询的应用名称，必须是部署单中包含的应用
  applicationName: string(name='application_name'),
}

model GetDeploymentRollbackResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 
  //                   应用当前部署状态。取值列表：INITING：初始化中；INIT_FAILED：初始化失败；INITED：初始化完成；EXECUTING：执行中；SUCCEEDED：执行成功；FAILED：执行失败
  //                 
  status: string(name='status'),
  // 应用回滚版本
  version: string(name='version'),
  // 此应用下所有计算容器分组部署状态详情
  groups: [ OpsGroup ](name='groups'),
  // 应用前置任务
  preTasks: [ OpsPrePostTask ](name='pre_tasks'),
  // 应用后置任务
  postTasks: [ OpsPrePostTask ](name='post_tasks'),
}

/**
 * Description: 查询部署单中某个应用的回滚详情
 * Summary: 查询部署单中某个应用的回滚详情
 */
async function getDeploymentRollback(request: GetDeploymentRollbackRequest): GetDeploymentRollbackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDeploymentRollbackEx(request, headers, runtime);
}

/**
 * Description: 查询部署单中某个应用的回滚详情
 * Summary: 查询部署单中某个应用的回滚详情
 */
async function getDeploymentRollbackEx(request: GetDeploymentRollbackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeploymentRollbackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.deployment.rollback.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeploymentRollbackableRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 部署单id
  operationId: string(name='operation_id'),
  // 待查询的应用名称，必须是部署单中包含的应用
  applicationName: string(name='application_name'),
}

model QueryDeploymentRollbackableResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可回滚的版本
  versions: [ string ](name='versions'),
}

/**
 * Description: 查询可回滚的版本信息
 * Summary: 查询可回滚的版本信息
 */
async function queryDeploymentRollbackable(request: QueryDeploymentRollbackableRequest): QueryDeploymentRollbackableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeploymentRollbackableEx(request, headers, runtime);
}

/**
 * Description: 查询可回滚的版本信息
 * Summary: 查询可回滚的版本信息
 */
async function queryDeploymentRollbackableEx(request: QueryDeploymentRollbackableRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeploymentRollbackableResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.deployment.rollbackable.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RollbackDeploymentApplicationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 部署单id
  operationId: string(name='operation_id'),
  // 待回滚的应用名称，必须是部署单中包含的应用
  applicationName: string(name='application_name'),
  // 应用的回滚版本，如果不指定，默认回滚到最近一次发布成功的版本
  versionNo?: string(name='version_no'),
  // 回滚时的分组策略，取值为：
  //                              QUICK：快速分组；
  //                              EACH_ONE：每台一组；
  //                              UNIT：按逻辑单元分组；
  //                              CELL：按部署单元分组；
  //                              默认为QUICK
  //                 
  groupStrategy?: string(name='group_strategy'),
  // 分组数，默认为3
  groupCount?: integer(name='group_count'),
  // 回滚原因
  reason: string(name='reason'),
  // 操作人
  operatorName: string(name='operator_name'),
}

model RollbackDeploymentApplicationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 回滚指定的应用
 * Summary: 回滚指定的应用
 */
async function rollbackDeploymentApplication(request: RollbackDeploymentApplicationRequest): RollbackDeploymentApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return rollbackDeploymentApplicationEx(request, headers, runtime);
}

/**
 * Description: 回滚指定的应用
 * Summary: 回滚指定的应用
 */
async function rollbackDeploymentApplicationEx(request: RollbackDeploymentApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RollbackDeploymentApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.deployment.application.rollback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushFlowRouteclientRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 流量类型
  // NORMAL：正常流量
  // PRESS：压测流量
  flowType: string(name='flow_type'),
  // 异构机房列表
  isomerismSites?: [ string ](name='isomerism_sites'),
  // 操作人
  operatorName: string(name='operator_name'),
  // 推送类型
  // DRM：DRM推送
  // JMX：JMX推送
  // SPANNER：SPANNER推送
  pushType: string(name='push_type'),
  // 工作空间
  workspaceGroup: string(name='workspace_group'),
  // 部署单元组的流量规则
  unitFlows: [ UnitFlow ](name='unit_flows'),
}

model PushFlowRouteclientResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 推送 LDC 流量规则
 * Summary: 推送 LDC 流量规则
 */
async function pushFlowRouteclient(request: PushFlowRouteclientRequest): PushFlowRouteclientResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushFlowRouteclientEx(request, headers, runtime);
}

/**
 * Description: 推送 LDC 流量规则
 * Summary: 推送 LDC 流量规则
 */
async function pushFlowRouteclientEx(request: PushFlowRouteclientRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushFlowRouteclientResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.routeclient.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFederationNamespaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // k8s resource labels
  labels?: [ Label ](name='labels'),
  // FedNamespace名称
  name: string(name='name'),
  // workspaceGroup名称
  workspaceGroupName: string(name='workspace_group_name'),
}

model CreateFederationNamespaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // fed namespace info
  data?: FedNamespace(name='data'),
}

/**
 * Description: fedNamespace创建
 * Summary: FedNamespace创建
 */
async function createFederationNamespace(request: CreateFederationNamespaceRequest): CreateFederationNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFederationNamespaceEx(request, headers, runtime);
}

/**
 * Description: fedNamespace创建
 * Summary: FedNamespace创建
 */
async function createFederationNamespaceEx(request: CreateFederationNamespaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFederationNamespaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.namespace.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateFederationNamespaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // fed namespace labels
  labels?: [ Label ](name='labels'),
  // Fed Namespace name
  name: string(name='name'),
  // workspace group name
  workspaceGroupName: string(name='workspace_group_name'),
}

model UpdateFederationNamespaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // fed namespace data
  data?: FedNamespace(name='data'),
}

/**
 * Description: FedNamespace更新API
 * Summary: FedNamespace更新
 */
async function updateFederationNamespace(request: UpdateFederationNamespaceRequest): UpdateFederationNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateFederationNamespaceEx(request, headers, runtime);
}

/**
 * Description: FedNamespace更新API
 * Summary: FedNamespace更新
 */
async function updateFederationNamespaceEx(request: UpdateFederationNamespaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFederationNamespaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.namespace.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetFederationNamespaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // fed namespace name
  name: string(name='name'),
  // workspace group name
  workspaceGroupName: string(name='workspace_group_name'),
}

model GetFederationNamespaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // fed namespace info
  data?: FedNamespace(name='data'),
}

/**
 * Description: 获取单个FedNamespace 
 * Summary: FedNamespace get
 */
async function getFederationNamespace(request: GetFederationNamespaceRequest): GetFederationNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getFederationNamespaceEx(request, headers, runtime);
}

/**
 * Description: 获取单个FedNamespace 
 * Summary: FedNamespace get
 */
async function getFederationNamespaceEx(request: GetFederationNamespaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFederationNamespaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.namespace.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteFederationNamespaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // fed namespace name
  name: string(name='name'),
  // workspaceGroup Name
  workspaceGroupName: string(name='workspace_group_name'),
}

model DeleteFederationNamespaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 删除操作成功或失败
  data?: boolean(name='data'),
}

/**
 * Description: FedNamespace 删除
 * Summary: FedNamespace 删除
 */
async function deleteFederationNamespace(request: DeleteFederationNamespaceRequest): DeleteFederationNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteFederationNamespaceEx(request, headers, runtime);
}

/**
 * Description: FedNamespace 删除
 * Summary: FedNamespace 删除
 */
async function deleteFederationNamespaceEx(request: DeleteFederationNamespaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFederationNamespaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.namespace.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFederationConfigmapRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // Cell name list
  cells: [ string ](name='cells'),
  // FedConfigMap data
  data: [ ConfigMapData ](name='data'),
  // FedConfigMap labels
  labels?: [ Label ](name='labels'),
  // FedConfigMap name
  name: string(name='name'),
  // Federation ConfigMap namespace
  namespace: string(name='namespace'),
  // FedCofigmap Cluster Overrides
  overrides?: FedConfigMapOverrideList(name='overrides'),
  // workspace group 名称
  workspaceGroupName: string(name='workspace_group_name'),
}

model CreateFederationConfigmapResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // FedConfigMap 数据
  configmap?: FedConfigmap(name='configmap'),
}

/**
 * Description: 创建FedConfigMap
 * Summary: 创建FedConfigMap
 */
async function createFederationConfigmap(request: CreateFederationConfigmapRequest): CreateFederationConfigmapResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFederationConfigmapEx(request, headers, runtime);
}

/**
 * Description: 创建FedConfigMap
 * Summary: 创建FedConfigMap
 */
async function createFederationConfigmapEx(request: CreateFederationConfigmapRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFederationConfigmapResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.configmap.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateFederationConfigmapRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cell list
  cells: [ string ](name='cells'),
  // FedConfigMap data
  data: [ ConfigMapData ](name='data'),
  // FedConfigMap labels
  labels?: [ Label ](name='labels'),
  // FedConfigMap name
  name: string(name='name'),
  // FedConfigMap命名空间
  namespace: string(name='namespace'),
  // FedConfigMap overrides
  overrides?: FedConfigMapOverrideList(name='overrides'),
  // workspaceGroup名称
  workspaceGroupName: string(name='workspace_group_name'),
}

model UpdateFederationConfigmapResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // fedconfigmap data
  configmap?: FedConfigmap(name='configmap'),
}

/**
 * Description: FedConfigMap更新
 * Summary: FedConfigMap更新
 */
async function updateFederationConfigmap(request: UpdateFederationConfigmapRequest): UpdateFederationConfigmapResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateFederationConfigmapEx(request, headers, runtime);
}

/**
 * Description: FedConfigMap更新
 * Summary: FedConfigMap更新
 */
async function updateFederationConfigmapEx(request: UpdateFederationConfigmapRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFederationConfigmapResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.configmap.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetFederationConfigmapRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // FedConfigmap name
  name: string(name='name'),
  // 所属命名空间名称。
  namespace: string(name='namespace'),
  // workspaceGroup 名称
  workspaceGroupName: string(name='workspace_group_name'),
}

model GetFederationConfigmapResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // FedConfigMap获取结果
  configmap?: FedConfigmap(name='configmap'),
}

/**
 * Description: FedConfigMap Get
 * Summary: FedConfigMap Get
 */
async function getFederationConfigmap(request: GetFederationConfigmapRequest): GetFederationConfigmapResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getFederationConfigmapEx(request, headers, runtime);
}

/**
 * Description: FedConfigMap Get
 * Summary: FedConfigMap Get
 */
async function getFederationConfigmapEx(request: GetFederationConfigmapRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFederationConfigmapResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.configmap.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteFederationConfigmapRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // FedConfigMap name
  name: string(name='name'),
  // workspaceGroupName
  workspaceGroupName: string(name='workspace_group_name'),
  // 所属命名空间名称。
  namespace: string(name='namespace'),
}

model DeleteFederationConfigmapResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 删除结果
  data?: boolean(name='data'),
}

/**
 * Description: FedConfigMap 删除
 * Summary: FedConfigMap 删除
 */
async function deleteFederationConfigmap(request: DeleteFederationConfigmapRequest): DeleteFederationConfigmapResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteFederationConfigmapEx(request, headers, runtime);
}

/**
 * Description: FedConfigMap 删除
 * Summary: FedConfigMap 删除
 */
async function deleteFederationConfigmapEx(request: DeleteFederationConfigmapRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFederationConfigmapResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.configmap.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListFederationConfigmapRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // List labelSelector
  labelSelector?: string(name='label_selector'),
  // aaaa
  namespace: string(name='namespace'),
  // workspace group name
  workspaceGroupName: string(name='workspace_group_name'),
}

model ListFederationConfigmapResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // FedConfigMap List
  configmaps?: [ FedConfigmap ](name='configmaps'),
}

/**
 * Description: FedConfigMap List
 * Summary: FedConfigMap List
 */
async function listFederationConfigmap(request: ListFederationConfigmapRequest): ListFederationConfigmapResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listFederationConfigmapEx(request, headers, runtime);
}

/**
 * Description: FedConfigMap List
 * Summary: FedConfigMap List
 */
async function listFederationConfigmapEx(request: ListFederationConfigmapRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFederationConfigmapResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.configmap.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListFederationNamespaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // k8s resource label selector
  labelSelector?: string(name='label_selector'),
  // workspace group名称
  workspaceGroupName: string(name='workspace_group_name'),
}

model ListFederationNamespaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // fed namespace list
  data?: [ FedNamespace ](name='data'),
}

/**
 * Description: List FeNamespace 
 * Summary: List FeNamespace 
 */
async function listFederationNamespace(request: ListFederationNamespaceRequest): ListFederationNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listFederationNamespaceEx(request, headers, runtime);
}

/**
 * Description: List FeNamespace 
 * Summary: List FeNamespace 
 */
async function listFederationNamespaceEx(request: ListFederationNamespaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFederationNamespaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.namespace.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContainerserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属应用名称
  appName?: string(name='app_name'),
  // 容器服务部署状态。取值可以由多个部署状态组成一个JSON数组，不同状态之间用绊脚逗号(,)隔开，取值范围：
  // . WAITING_FOR_DEPLOY: 待发布
  // . INITIALIZING: 初始化中
  // . INITIALIZED: 初始化完成
  // . INITIALIZE_FAILED: 初始化失败
  // . CONFIRM_WAITING: 待确认
  // . CONFIRMED: 已确认
  // . EXECUTING: 发布中
  // . PAUSED: 暂停
  // . CANCELING: 取消中
  // . CANCELED: 已取消
  // . ROLLBACKING: 回滚中
  // . ROLLBACK_PAUSED: 回滚暂停
  // . ROLLBACKED: 已回滚
  // . SUCCEEDED: 发布完成
  // . FAILED: 发布失败
  // . DELETING: 删除中
  // . DELETE_FAILED: 删除失败
  deploymentStatus?: [ string ](name='deployment_status'),
  // 容器服务元数据状态。取值可以由多个元数据状态组成一个JSON数组，不同状态之间用半角逗号（,）隔开。状态取值范围：
  // . DRAFTED: 草稿
  // . CREATING: 创建中
  // . CREATED: 已创建
  // . UPDATING: 更新中
  // . UPDATED: 已更新
  // . DELETING: 删除中
  // . DELETED: 已删除
  // . DEPLOYED: 已发布
  // . CREATE_FAILED: 创建失败
  // . UPDATE_FAILED: 更新失败
  // . DELETE_FAILED: 删除失败
  metadataStatus?: [ string ](name='metadata_status'),
  // 容器应用服务名称，支持使用通配符*进行模糊搜索。
  name?: string(name='name'),
  // 当前命名空间名称。
  namespace: string(name='namespace'),
  // 实例状态列表的页码。起始值：1。默认值：1 。
  pageNumber?: long(name='page_number'),
  // 分页查询时设置的每页行数。最大值：100。默认值：10。
  pageSize?: long(name='page_size'),
  // 当前工作空间组名称。
  workspaceGroup: string(name='workspace_group'),
}

model QueryContainerserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 容器应用服务列表。
  containerServiceList?: [ ContainerServiceBasicInfo ](name='container_service_list'),
  // 实例列表的页码。
  pageNumber?: long(name='page_number'),
  // 输入时设置的每页行数。
  pageSize?: long(name='page_size'),
  // 查询到的容器应用服务总数。
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询容器应用服务OpenAPI
 * Summary: 查询容器应用服务
 */
async function queryContainerservice(request: QueryContainerserviceRequest): QueryContainerserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContainerserviceEx(request, headers, runtime);
}

/**
 * Description: 查询容器应用服务OpenAPI
 * Summary: 查询容器应用服务
 */
async function queryContainerserviceEx(request: QueryContainerserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContainerserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListMulticlusterMasterclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace group name
  workspaceGroup?: string(name='workspace_group'),
}

model ListMulticlusterMasterclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // master clusters of different zones
  data?: [ MasterClustersOfZone ](name='data'),
}

/**
 * Description: get master clusters for each zone
 * Summary: getMasterClusters
 */
async function listMulticlusterMastercluster(request: ListMulticlusterMasterclusterRequest): ListMulticlusterMasterclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listMulticlusterMasterclusterEx(request, headers, runtime);
}

/**
 * Description: get master clusters for each zone
 * Summary: getMasterClusters
 */
async function listMulticlusterMasterclusterEx(request: ListMulticlusterMasterclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMulticlusterMasterclusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.multicluster.mastercluster.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitMulticlusterClusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // federation namespace
  fedNamespace?: string(name='fed_namespace'),
  // master cluster info 
  masterClusterInfo: [ MasterCluster ](name='master_cluster_info'),
  // workspace group name
  workspaceGroup: string(name='workspace_group'),
}

model InitMulticlusterClusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // import cluster success or false
  data?: boolean(name='data'),
}

/**
 * Description: import master clusters
 * Summary: importMasterCluster
 */
async function initMulticlusterCluster(request: InitMulticlusterClusterRequest): InitMulticlusterClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initMulticlusterClusterEx(request, headers, runtime);
}

/**
 * Description: import master clusters
 * Summary: importMasterCluster
 */
async function initMulticlusterClusterEx(request: InitMulticlusterClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitMulticlusterClusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.multicluster.cluster.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListMulticlusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace group name
  workspaceGroup: string(name='workspace_group'),
}

model ListMulticlusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // minion cluster infos
  data?: [ ClusterInfo ](name='data'),
}

/**
 * Description: list multi clusters
 * Summary: list MultiCluster
 */
async function listMulticluster(request: ListMulticlusterRequest): ListMulticlusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listMulticlusterEx(request, headers, runtime);
}

/**
 * Description: list multi clusters
 * Summary: list MultiCluster
 */
async function listMulticlusterEx(request: ListMulticlusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMulticlusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.multicluster.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteContainerserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 最近一次草稿版本。
  draftedRevision?: string(name='drafted_revision'),
  // 最近一次草稿时间
  draftedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='drafted_time'),
  // 容器应用服务名称。
  name: string(name='name'),
  // 当前命名空间名称。
  namespace: string(name='namespace'),
  // 提交人。
  operator: string(name='operator'),
  // 所属工作空间组名称
  workspaceGroup: string(name='workspace_group'),
}

model DeleteContainerserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除容器应用服务
 * Summary: 删除容器应用服务
 */
async function deleteContainerservice(request: DeleteContainerserviceRequest): DeleteContainerserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteContainerserviceEx(request, headers, runtime);
}

/**
 * Description: 删除容器应用服务
 * Summary: 删除容器应用服务
 */
async function deleteContainerserviceEx(request: DeleteContainerserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteContainerserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContainerserviceDeploymentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 容器服务列表。
  containerServices: SontainerServicesList(name='container_services'),
  // 是否自动执行，默认false
  isAutoExecute?: boolean(name='is_auto_execute'),
  // 所属命名空间
  namespace: string(name='namespace'),
  // 默认CLOUD_NATIVE_GROUP_RELEASE
  opsType?: string(name='ops_type'),
  // operator调用专用字段，ReleasePlan唯一标识
  releasePlanUniqueId?: string(name='release_plan_unique_id'),
  // tenant 名字，operator调用专用字段
  tenantName?: string(name='tenant_name'),
  // 发布单名称。
  title: string(name='title'),
  // 所属工作空间组名称。
  workspaceGroup: string(name='workspace_group'),
  // 审批人账号id
  assigneeIds?: [ string ](name='assignee_ids'),
  // 操作人账号，lks1.23.0才支持
  operator?: string(name='operator'),
  // 灰度发布的参数，仅当ops_type为GRAY_RELEASE时生效
  grayReleaseConfig?: GrayReleaseConfig(name='gray_release_config'),
}

model CreateContainerserviceDeploymentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建完成的部署单id
  operationId?: string(name='operation_id'),
}

/**
 * Description: 创建一个部署单
 * Summary: 创建一个部署单
 */
async function createContainerserviceDeployment(request: CreateContainerserviceDeploymentRequest): CreateContainerserviceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContainerserviceDeploymentEx(request, headers, runtime);
}

/**
 * Description: 创建一个部署单
 * Summary: 创建一个部署单
 */
async function createContainerserviceDeploymentEx(request: CreateContainerserviceDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContainerserviceDeploymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.deployment.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFederationSecretRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cell name list
  cells: [ string ](name='cells'),
  // FedSecret data
  // 
  data: [ SecretData ](name='data'),
  // FedSecret labels
  // 
  labels?: [ Label ](name='labels'),
  // FedSecret name
  // 
  name: string(name='name'),
  // Federation Secret namespace
  namespace: string(name='namespace'),
  // FedSecret Cluster Overrides
  // 
  overrides?: FedSecretOverrideList(name='overrides'),
  // Fed Secret type
  type: string(name='type'),
  // workspace group 名称
  // 
  workspaceGroupName: string(name='workspace_group_name'),
}

model CreateFederationSecretResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // FedSecret 数据
  // 
  secret?: FedSecret(name='secret'),
}

/**
 * Description: 创建FedSecret
 * Summary: 创建FedSecret
 */
async function createFederationSecret(request: CreateFederationSecretRequest): CreateFederationSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFederationSecretEx(request, headers, runtime);
}

/**
 * Description: 创建FedSecret
 * Summary: 创建FedSecret
 */
async function createFederationSecretEx(request: CreateFederationSecretRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFederationSecretResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.secret.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetFederationSecretRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // FedSecretname
  name: string(name='name'),
  // 所属命名空间名称。
  namespace: string(name='namespace'),
  // workspaceGroup 名称
  workspaceGroupName: string(name='workspace_group_name'),
}

model GetFederationSecretResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // FedSecret获取结果
  // 
  secret?: FedSecret(name='secret'),
}

/**
 * Description: FedSecret Get
 * Summary: FedSecret Get
 */
async function getFederationSecret(request: GetFederationSecretRequest): GetFederationSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getFederationSecretEx(request, headers, runtime);
}

/**
 * Description: FedSecret Get
 * Summary: FedSecret Get
 */
async function getFederationSecretEx(request: GetFederationSecretRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFederationSecretResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.secret.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteFederationSecretRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // FedSecret name
  // 
  name: string(name='name'),
  // workspaceGroupName
  workspaceGroupName: string(name='workspace_group_name'),
  // 所属命名空间名称。
  namespace: string(name='namespace'),
}

model DeleteFederationSecretResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 删除结果
  // 
  data?: boolean(name='data'),
}

/**
 * Description: FedSecret 删除
 * Summary: FedSecret 删除
 */
async function deleteFederationSecret(request: DeleteFederationSecretRequest): DeleteFederationSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteFederationSecretEx(request, headers, runtime);
}

/**
 * Description: FedSecret 删除
 * Summary: FedSecret 删除
 */
async function deleteFederationSecretEx(request: DeleteFederationSecretRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFederationSecretResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.secret.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateFederationSecretRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cell list
  cells: [ string ](name='cells'),
  // FedSecret data
  // 
  data: [ SecretData ](name='data'),
  // FedSecret labels
  // 
  labels?: [ Label ](name='labels'),
  // FedSecret name
  // 
  name: string(name='name'),
  // FedSecret命名空间
  // 
  namespace: string(name='namespace'),
  // FedSecret overrides
  // 
  overrides?: FedSecretOverrideList(name='overrides'),
  // workspaceGroup名称
  workspaceGroupName: string(name='workspace_group_name'),
}

model UpdateFederationSecretResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // fedsecret data
  // 
  secret?: FedSecret(name='secret'),
}

/**
 * Description: FedSecret 更新
 * Summary: FedSecret 更新
 */
async function updateFederationSecret(request: UpdateFederationSecretRequest): UpdateFederationSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateFederationSecretEx(request, headers, runtime);
}

/**
 * Description: FedSecret 更新
 * Summary: FedSecret 更新
 */
async function updateFederationSecretEx(request: UpdateFederationSecretRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFederationSecretResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.secret.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListFederationSecretRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // List labelSelector
  // 
  labelSelector?: string(name='label_selector'),
  // antcloud
  namespace: string(name='namespace'),
  // workspace group name
  // 
  workspaceGroupName: string(name='workspace_group_name'),
}

model ListFederationSecretResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // FedSecret List
  secretList?: [ FedSecret ](name='secret_list'),
}

/**
 * Description: FedSecret List
 * Summary: FedSecret List
 */
async function listFederationSecret(request: ListFederationSecretRequest): ListFederationSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listFederationSecretEx(request, headers, runtime);
}

/**
 * Description: FedSecret List
 * Summary: FedSecret List
 */
async function listFederationSecretEx(request: ListFederationSecretRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFederationSecretResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.secret.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DescribeContainerserviceRevisionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 容器服务名称。
  name: string(name='name'),
  // 命名空间名称。
  namespace: string(name='namespace'),
  // 所属工作空间组名称。
  workspaceGroup: string(name='workspace_group'),
}

model DescribeContainerserviceRevisionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 容器服务版本信息。
  revision?: ContainerServiceRevision(name='revision'),
}

/**
 * Description: 获取容器服务最新发布的版本，包括发布中和发布完成的，不是最新编辑保存的版本。
调antcloud.ldc.containerservice.revision.query获取第一条记录是最新编辑保存的版本。
 * Summary: 获取容器服务最新发布的版本
 */
async function describeContainerserviceRevision(request: DescribeContainerserviceRevisionRequest): DescribeContainerserviceRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return describeContainerserviceRevisionEx(request, headers, runtime);
}

/**
 * Description: 获取容器服务最新发布的版本，包括发布中和发布完成的，不是最新编辑保存的版本。
调antcloud.ldc.containerservice.revision.query获取第一条记录是最新编辑保存的版本。
 * Summary: 获取容器服务最新发布的版本
 */
async function describeContainerserviceRevisionEx(request: DescribeContainerserviceRevisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeContainerserviceRevisionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.revision.describe', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetContainerserviceRevisionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 容器应用服务名称。
  name: string(name='name'),
  // 版本号。
  revision: string(name='revision'),
  // 所属工作空间组名称。
  workspaceGroup: string(name='workspace_group'),
  // fed namespace
  namespace: string(name='namespace'),
}

model GetContainerserviceRevisionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 容器服务版本信息。
  revision?: ContainerServiceRevision(name='revision'),
}

/**
 * Description: 获取某一个版本的配置信息
 * Summary: 获取某一个版本的配置信息
 */
async function getContainerserviceRevision(request: GetContainerserviceRevisionRequest): GetContainerserviceRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getContainerserviceRevisionEx(request, headers, runtime);
}

/**
 * Description: 获取某一个版本的配置信息
 * Summary: 获取某一个版本的配置信息
 */
async function getContainerserviceRevisionEx(request: GetContainerserviceRevisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetContainerserviceRevisionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.revision.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContainerserviceRevisionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 取值范围： . WAITING_FOR_DEPLOY: 待发布 . INITIALIZING: 初始化中 . INITIALIZED: 初始化完成 . INITIALIZE_FAILED: 初始化失败 . CONFIRM_WAITING: 待确认 . CONFIRMED: 已确认 . EXECUTING: 发布中 . PAUSED: 暂停 . CANCELING: 取消中 . CANCELED: 已取消 . ROLLBACKING: 回滚中 . ROLLBACK_PAUSED: 回滚暂停 . ROLLBACKED: 已回滚 . SUCCEEDED: 发布完成 . FAILED: 发布失败 . DELETING: 删除中 . DELETE_FAILED: 删除失败
  deploymentStatus?: [ string ](name='deployment_status'),
  // 状态取值范围： . DRAFTED: 草稿 . CREATING: 创建中 . CREATED: 已创建 . UPDATING: 更新中 . UPDATED: 已更新 . DELETING: 删除中 . DELETED: 已删除 . DEPLOYED: 已发布 . CREATE_FAILED: 创建失败 . UPDATE_FAILED: 更新失败 . DELETE_FAILED: 删除失败
  metadataStatus?: [ string ](name='metadata_status'),
  // 容器应用服务名称。
  name: string(name='name'),
  // 命名空间名称。
  namespace: string(name='namespace'),
  // 容器服务版本列表的页码。起始值：1。默认值：1 。
  pageNumber?: long(name='page_number'),
  // 分页查询时设置的每页行数。最大值：100。默认值：10。
  pageSize?: long(name='page_size'),
  // 所属工作空间组名称。
  workspaceGroup: string(name='workspace_group'),
  // 可以根据版本号模糊搜索，lks1.25.0开始支持
  revision?: string(name='revision'),
}

model QueryContainerserviceRevisionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 版本列表的页码。
  pageNumber?: long(name='page_number'),
  // 输入时设置的每页行数。
  pageSize?: long(name='page_size'),
  // 容器服务版本列表。
  revisionList?: [ ContainerServiceRevision ](name='revision_list'),
  // 查询到的容器应用版本总数。
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询容器服务版本列表
 * Summary: 查询容器服务版本列表
 */
async function queryContainerserviceRevision(request: QueryContainerserviceRevisionRequest): QueryContainerserviceRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContainerserviceRevisionEx(request, headers, runtime);
}

/**
 * Description: 查询容器服务版本列表
 * Summary: 查询容器服务版本列表
 */
async function queryContainerserviceRevisionEx(request: QueryContainerserviceRevisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContainerserviceRevisionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.revision.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateContainerserviceRevisionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属工作空间组名称。
  workspaceGroup: string(name='workspace_group'),
  // 容器应用服务名称。
  name: string(name='name'),
  // 容器应用服务版本号。
  revision: string(name='revision'),
  // 版本备注信息。
  remark: string(name='remark'),
}

model UpdateContainerserviceRevisionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 为某一版本加上备注
 * Summary: 为某一版本加上备注
 */
async function updateContainerserviceRevision(request: UpdateContainerserviceRevisionRequest): UpdateContainerserviceRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateContainerserviceRevisionEx(request, headers, runtime);
}

/**
 * Description: 为某一版本加上备注
 * Summary: 为某一版本加上备注
 */
async function updateContainerserviceRevisionEx(request: UpdateContainerserviceRevisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateContainerserviceRevisionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.revision.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateContainerserviceImageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 更新镜像的完整地址
  image: string(name='image'),
  // 容器应用服务名称。
  name: string(name='name'),
  // 容器服务所在命名空间
  namespace: string(name='namespace'),
  // 操作人。
  operator?: string(name='operator'),
  // 容器应用服务版本。
  revision: string(name='revision'),
  // 所属工作空间组名称。
  workspaceGroup: string(name='workspace_group'),
}

model UpdateContainerserviceImageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 更新后的容器应用服务版本号。
  revision?: string(name='revision'),
}

/**
 * Description: 快速更新镜像
 * Summary: 快速更新镜像
 */
async function updateContainerserviceImage(request: UpdateContainerserviceImageRequest): UpdateContainerserviceImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateContainerserviceImageEx(request, headers, runtime);
}

/**
 * Description: 快速更新镜像
 * Summary: 快速更新镜像
 */
async function updateContainerserviceImageEx(request: UpdateContainerserviceImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateContainerserviceImageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.image.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateContainerserviceReplicasRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 扩缩容replica详情
  fixedReplicaElasticConfig: FixedReplicaElasticConfig(name='fixed_replica_elastic_config'),
  // 容器应用服务名称。
  name: string(name='name'),
  // namespace
  namespace: string(name='namespace'),
  // 操作人
  operator?: string(name='operator'),
  // 容器应用服务版本号。
  revision: string(name='revision'),
  // 所属工作空间组名称。
  workspaceGroup: string(name='workspace_group'),
}

model UpdateContainerserviceReplicasResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建完成的部署单id
  operationId?: string(name='operation_id'),
}

/**
 * Description: 快速更新容器服务副本数
 * Summary: 快速更新容器服务副本数
 */
async function updateContainerserviceReplicas(request: UpdateContainerserviceReplicasRequest): UpdateContainerserviceReplicasResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateContainerserviceReplicasEx(request, headers, runtime);
}

/**
 * Description: 快速更新容器服务副本数
 * Summary: 快速更新容器服务副本数
 */
async function updateContainerserviceReplicasEx(request: UpdateContainerserviceReplicasRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateContainerserviceReplicasResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.replicas.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContainerserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属应用名称。
  appName: string(name='app_name'),
  // 必填，且不能重复。保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。ClientToken只支持ASCII字符，且不能超过64个字符。
  clientToken?: string(name='client_token'),
  // 容器服务配置。
  config: ContainerServiceConfig(name='config'),
  // 容器服务描述
  description?: string(name='description'),
  // 容器服务名称。
  name: string(name='name'),
  // 所属命名空间名称。
  namespace: string(name='namespace'),
  // 操作人iam账号名，通过pop调用时该参数无效。
  operator: string(name='operator'),
  // owner_id（废弃）
  ownerId?: string(name='owner_id'),
  // owner_name（废弃）
  ownerName?: string(name='owner_name'),
  // 所属工作空间组名称。
  workspaceGroup: string(name='workspace_group'),
  // 应用appid
  appId: string(name='app_id'),
}

model CreateContainerserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 容器服务版本号。
  revision?: string(name='revision'),
}

/**
 * Description: 创建容器应用服务。
 * Summary: 创建容器应用服务
 */
async function createContainerservice(request: CreateContainerserviceRequest): CreateContainerserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContainerserviceEx(request, headers, runtime);
}

/**
 * Description: 创建容器应用服务。
 * Summary: 创建容器应用服务
 */
async function createContainerserviceEx(request: CreateContainerserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContainerserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveContainerserviceRevisionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model SaveContainerserviceRevisionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 保存容器服务草稿。
 * Summary: 保存容器服务草稿
 */
async function saveContainerserviceRevision(request: SaveContainerserviceRevisionRequest): SaveContainerserviceRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveContainerserviceRevisionEx(request, headers, runtime);
}

/**
 * Description: 保存容器服务草稿。
 * Summary: 保存容器服务草稿
 */
async function saveContainerserviceRevisionEx(request: SaveContainerserviceRevisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveContainerserviceRevisionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.revision.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateContainerserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app id
  appId: string(name='app_id'),
  // 所属应用名称。
  appName: string(name='app_name'),
  // 必填：保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。ClientToken只支持ASCII字符，且不能超过64个字符。
  clientToken?: string(name='client_token'),
  // 容器服务配置。
  // 
  config: ContainerServiceConfig(name='config'),
  // 应用服务名称
  name: string(name='name'),
  // 命名空间
  namespace: string(name='namespace'),
  // 操作人账号
  operator?: string(name='operator'),
  // 应用负责人id
  ownerId?: string(name='owner_id'),
  // 应用负责人名称
  ownerName?: string(name='owner_name'),
  // 工作环境组
  workspaceGroup: string(name='workspace_group'),
  // 描述
  description?: string(name='description'),
}

model UpdateContainerserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // container service版本号
  revision?: string(name='revision'),
}

/**
 * Description: container service 更新
 * Summary: container service 更新
 */
async function updateContainerservice(request: UpdateContainerserviceRequest): UpdateContainerserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateContainerserviceEx(request, headers, runtime);
}

/**
 * Description: container service 更新
 * Summary: container service 更新
 */
async function updateContainerserviceEx(request: UpdateContainerserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateContainerserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExistContainerserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属工作空间组名称。
  workspaceGroup: string(name='workspace_group'),
  // 所属命名空间名称。
  namespace: string(name='namespace'),
  // 容器服务名称。
  name: string(name='name'),
}

model ExistContainerserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 容器服务是否存在。
  // 取值：true | false
  exist?: boolean(name='exist'),
}

/**
 * Description: 检查对应容器服务是否存在。
 * Summary: 检查对应容器服务是否存在
 */
async function existContainerservice(request: ExistContainerserviceRequest): ExistContainerserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return existContainerserviceEx(request, headers, runtime);
}

/**
 * Description: 检查对应容器服务是否存在。
 * Summary: 检查对应容器服务是否存在
 */
async function existContainerserviceEx(request: ExistContainerserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExistContainerserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.exist', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetClusterBasicinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cluster name
  clusterName: string(name='cluster_name'),
}

model GetClusterBasicinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cell infos
  cellInfos?: [ CellInfo ](name='cell_infos'),
  // created time
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time'),
  // cluster display name
  displayName?: string(name='display_name'),
  // network info
  networkInfo?: NetworkInfo(name='network_info'),
  // region info
  regionInfo?: RegionInfo(name='region_info'),
  // secured group infos
  securedGroupInfos?: [ SecuredGroupInfo ](name='secured_group_infos'),
  // cluster status
  // 
  status?: string(name='status'),
  // zone info
  zoneInfo?: ZoneInfo(name='zone_info'),
}

/**
 * Description: get cluster basic info by name
 * Summary: getClusterBasicInfo
 */
async function getClusterBasicinfo(request: GetClusterBasicinfoRequest): GetClusterBasicinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getClusterBasicinfoEx(request, headers, runtime);
}

/**
 * Description: get cluster basic info by name
 * Summary: getClusterBasicInfo
 */
async function getClusterBasicinfoEx(request: GetClusterBasicinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetClusterBasicinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cluster.basicinfo.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetClusterOverviewinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cluster name
  clusterName: string(name='cluster_name'),
}

model GetClusterOverviewinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cpu
  limitedCpu?: long(name='limited_cpu'),
  // cpu unit
  limitedCpuUnit?: string(name='limited_cpu_unit'),
  // memory
  limitedMemory?: long(name='limited_memory'),
  // memory unit
  limitedMemoryUnit?: string(name='limited_memory_unit'),
  // pod overview info
  podOverviewInfo?: PodOverviewInfo(name='pod_overview_info'),
  // total node number
  totalNodeNum?: string(name='total_node_num'),
  // unhealthy node num
  unHealthyNodeNum?: string(name='un_healthy_node_num'),
  // used cpu
  usedCpu?: long(name='used_cpu'),
  // used cpu unit
  usedCpuUnit?: string(name='used_cpu_unit'),
  // used memory
  usedMemory?: long(name='used_memory'),
  // used memory unit
  usedMemoryUnit?: string(name='used_memory_unit'),
}

/**
 * Description: get cluster overview info 
 * Summary: getClusterOverview
 */
async function getClusterOverviewinfo(request: GetClusterOverviewinfoRequest): GetClusterOverviewinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getClusterOverviewinfoEx(request, headers, runtime);
}

/**
 * Description: get cluster overview info 
 * Summary: getClusterOverview
 */
async function getClusterOverviewinfoEx(request: GetClusterOverviewinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetClusterOverviewinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cluster.overviewinfo.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属环境。
  workspaceGroup: string(name='workspace_group'),
}

model QueryCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 部署单元列表。
  cellList?: [ CellInfo ](name='cell_list'),
}

/**
 * Description: 查询部署单元。
 * Summary: 查询部署单元
 */
async function queryCell(request: QueryCellRequest): QueryCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCellEx(request, headers, runtime);
}

/**
 * Description: 查询部署单元。
 * Summary: 查询部署单元
 */
async function queryCellEx(request: QueryCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cell.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetClusterPodoverviewRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cluster name
  clusterName: string(name='cluster_name'),
  // node name
  nodeName: string(name='node_name'),
  // workspace group name
  workspaceGroupName?: string(name='workspace_group_name'),
}

model GetClusterPodoverviewResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // pod detail infos
  data?: PodOverviewInfo(name='data'),
}

/**
 * Description: get pod overview infos of specific cluster
 * Summary: getPodOverviewInfo
 */
async function getClusterPodoverview(request: GetClusterPodoverviewRequest): GetClusterPodoverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getClusterPodoverviewEx(request, headers, runtime);
}

/**
 * Description: get pod overview infos of specific cluster
 * Summary: getPodOverviewInfo
 */
async function getClusterPodoverviewEx(request: GetClusterPodoverviewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetClusterPodoverviewResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cluster.podoverview.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListClusterNodeinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cluster name
  clusterName: string(name='cluster_name'),
}

model ListClusterNodeinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // node infos of specific cluster
  data?: [ NodeInfo ](name='data'),
}

/**
 * Description: list all nodes info of specific cluster
 * Summary: listNodeInfo
 */
async function listClusterNodeinfo(request: ListClusterNodeinfoRequest): ListClusterNodeinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listClusterNodeinfoEx(request, headers, runtime);
}

/**
 * Description: list all nodes info of specific cluster
 * Summary: listNodeInfo
 */
async function listClusterNodeinfoEx(request: ListClusterNodeinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListClusterNodeinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cluster.nodeinfo.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateClusterNamespaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // namespace labels
  labels: [ Label ](name='labels'),
  // name
  name: string(name='name'),
  // tenant id
  tenantId: string(name='tenant_id'),
  // tenant name
  tenantName: string(name='tenant_name'),
  // workspace group id
  workspaceGroupId: string(name='workspace_group_id'),
  // workspace group name
  workspaceGroupName: string(name='workspace_group_name'),
  // cluster name to create namespace in
  clusterName: string(name='cluster_name'),
}

model CreateClusterNamespaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // is create namespace succeed
  data?: boolean(name='data'),
}

/**
 * Description: create namespace of a specific cluster
 * Summary: createNamespace
 */
async function createClusterNamespace(request: CreateClusterNamespaceRequest): CreateClusterNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createClusterNamespaceEx(request, headers, runtime);
}

/**
 * Description: create namespace of a specific cluster
 * Summary: createNamespace
 */
async function createClusterNamespaceEx(request: CreateClusterNamespaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateClusterNamespaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cluster.namespace.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListClusterNamespaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // tenant id
  tenantId: string(name='tenant_id'),
  // tenant name
  tenantName: string(name='tenant_name'),
  // workspace group id
  workspaceGroupId: string(name='workspace_group_id'),
  // workspace group name
  workspaceGroupName: string(name='workspace_group_name'),
  // cluster name
  clusterName: string(name='cluster_name'),
}

model ListClusterNamespaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // namespace detail infos
  data?: [ NamespaceDetail ](name='data'),
}

/**
 * Description: list namespace
 * Summary: list namespace
 */
async function listClusterNamespace(request: ListClusterNamespaceRequest): ListClusterNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listClusterNamespaceEx(request, headers, runtime);
}

/**
 * Description: list namespace
 * Summary: list namespace
 */
async function listClusterNamespaceEx(request: ListClusterNamespaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListClusterNamespaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cluster.namespace.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryClusterNamespaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model QueryClusterNamespaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: query namespace detail info
 * Summary: query namespace 
 */
async function queryClusterNamespace(request: QueryClusterNamespaceRequest): QueryClusterNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryClusterNamespaceEx(request, headers, runtime);
}

/**
 * Description: query namespace detail info
 * Summary: query namespace 
 */
async function queryClusterNamespaceEx(request: QueryClusterNamespaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryClusterNamespaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cluster.namespace.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteClusterNamespaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cluster name
  clusterName: string(name='cluster_name'),
  // name of namespace
  name: string(name='name'),
}

model DeleteClusterNamespaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // is delete namespace success
  data?: boolean(name='data'),
}

/**
 * Description: delete namespace of specific cluster
 * Summary: delete namespace
 */
async function deleteClusterNamespace(request: DeleteClusterNamespaceRequest): DeleteClusterNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteClusterNamespaceEx(request, headers, runtime);
}

/**
 * Description: delete namespace of specific cluster
 * Summary: delete namespace
 */
async function deleteClusterNamespaceEx(request: DeleteClusterNamespaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteClusterNamespaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cluster.namespace.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetClusterNodeinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cluster name
  clusterName: string(name='cluster_name'),
  // node name
  nodeName: string(name='node_name'),
}

model GetClusterNodeinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // node detail info
  data?: NodeInfo(name='data'),
}

/**
 * Description: get node detail info by name
 * Summary: get node detail info
 */
async function getClusterNodeinfo(request: GetClusterNodeinfoRequest): GetClusterNodeinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getClusterNodeinfoEx(request, headers, runtime);
}

/**
 * Description: get node detail info by name
 * Summary: get node detail info
 */
async function getClusterNodeinfoEx(request: GetClusterNodeinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetClusterNodeinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cluster.nodeinfo.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFederationImagepullsecretRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cells
  cells: [ string ](name='cells'),
  // labels
  labels?: [ Label ](name='labels'),
  // image pull secret name
  name: string(name='name'),
  // image pull secret namespace
  namespace: string(name='namespace'),
  // fed image pull secret list
  overrides: FedImagePullSecretOverrideList(name='overrides'),
  // registry account
  registryAccount: RegistryAccout(name='registry_account'),
  // workspace group name
  workspaceGroupName: string(name='workspace_group_name'),
}

model CreateFederationImagepullsecretResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // image pull secret
  secret?: FedSecret(name='secret'),
}

/**
 * Description: ImagePullSecret创建
 * Summary: ImagePullSecret创建
 */
async function createFederationImagepullsecret(request: CreateFederationImagepullsecretRequest): CreateFederationImagepullsecretResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFederationImagepullsecretEx(request, headers, runtime);
}

/**
 * Description: ImagePullSecret创建
 * Summary: ImagePullSecret创建
 */
async function createFederationImagepullsecretEx(request: CreateFederationImagepullsecretRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFederationImagepullsecretResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.imagepullsecret.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListClusterNodepodRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cluster name
  clusterName: string(name='cluster_name'),
  // node name
  nodeName: string(name='node_name'),
  // workspace group name
  workspaceGroupName: string(name='workspace_group_name'),
}

model ListClusterNodepodResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // pod infos
  data?: [ PodDetailInfo ](name='data'),
}

/**
 * Description: list all pods of specific node
 * Summary: listtPodsOfNode
 */
async function listClusterNodepod(request: ListClusterNodepodRequest): ListClusterNodepodResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listClusterNodepodEx(request, headers, runtime);
}

/**
 * Description: list all pods of specific node
 * Summary: listtPodsOfNode
 */
async function listClusterNodepodEx(request: ListClusterNodepodRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListClusterNodepodResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cluster.nodepod.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListClusterNodeeventRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cluster name
  clusterName: string(name='cluster_name'),
  // node name
  nodeName: string(name='node_name'),
  // workspace group name
  workspaceGroupName: string(name='workspace_group_name'),
}

model ListClusterNodeeventResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // node events
  data?: [ NodeEvent ](name='data'),
}

/**
 * Description: list all events of specific node
 * Summary: listEventOfNode
 */
async function listClusterNodeevent(request: ListClusterNodeeventRequest): ListClusterNodeeventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listClusterNodeeventEx(request, headers, runtime);
}

/**
 * Description: list all events of specific node
 * Summary: listEventOfNode
 */
async function listClusterNodeeventEx(request: ListClusterNodeeventRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListClusterNodeeventResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cluster.nodeevent.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOpsplanRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用名称
  // 
  appName?: string(name='app_name'),
  // 发布单创建起始时间
  // 
  creationTimeFrom?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='creation_time_from'),
  // 发布单创建截止时间
  // 
  creationTimeTo?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='creation_time_to'),
  // 当前页码，从1开始
  currentPage: long(name='current_page'),
  // 发布单名称前缀
  name?: string(name='name'),
  // 运维单类型：REBOOT,ONLINE,OFFLINE
  mode?: string(name='mode'),
  // 分页大小
  pageSize: long(maximum=100, minimum=1, name='page_size'),
  // 发布单id列表
  // 
  planIds?: [ string ](name='plan_ids'),
  // 发布单状态列表
  stateList?: [ string ](name='state_list'),
  // 发布单号
  // 
  timeSeriesId?: string(name='time_series_id'),
  // 发布单类型列表， e.g: 分组发布|重启
  // 
  types: [ string ](name='types'),
  // 工作空间组名称
  // 
  workspaceGroup: string(name='workspace_group'),
}

model QueryOpsplanResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页码
  currentPage?: long(name='current_page'),
  // 发布单摘要信息列表
  list?: [ PlanSimpleView ](name='list'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 发布单列表起始下标
  startIndex?: long(name='start_index'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 分页查询发布单列表
 * Summary: 分页查询发布单列表
 */
async function queryOpsplan(request: QueryOpsplanRequest): QueryOpsplanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOpsplanEx(request, headers, runtime);
}

/**
 * Description: 分页查询发布单列表
 * Summary: 分页查询发布单列表
 */
async function queryOpsplanEx(request: QueryOpsplanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOpsplanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.opsplan.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOpsplanStatesummaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组名称
  // 
  workspaceGroup: string(name='workspace_group'),
  // 发布单类型列表
  // 
  types: [ string ](name='types'),
  // 发布单号
  // 
  timeSeriesId?: string(name='time_series_id'),
  // 发布单状态列表
  // 
  stateList?: [ string ](name='state_list'),
  // 发布单id列表
  // 
  planIds?: [ string ](name='plan_ids'),
  // 发布单名称前缀
  // 
  name?: string(name='name'),
  // 分页大小
  // 
  pageSize: long(maximum=100, minimum=1, name='page_size'),
  // 当前页码，从1开始
  // 
  currentPage: long(minimum=1, name='current_page'),
  // 发布单创建起始时间
  creationTimeFrom?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='creation_time_from'),
  // 发布单创建截止时间
  // 
  creationTimeTo?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='creation_time_to'),
  // 应用名称
  // 
  appName?: string(name='app_name'),
}

model QueryOpsplanStatesummaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发布单状态汇总数据
  data?: [ LdcPlanStateCount ](name='data'),
}

/**
 * Description: 分页查询发布单状态概要列表
 * Summary: 分页查询发布单状态概要列表
 */
async function queryOpsplanStatesummary(request: QueryOpsplanStatesummaryRequest): QueryOpsplanStatesummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOpsplanStatesummaryEx(request, headers, runtime);
}

/**
 * Description: 分页查询发布单状态概要列表
 * Summary: 分页查询发布单状态概要列表
 */
async function queryOpsplanStatesummaryEx(request: QueryOpsplanStatesummaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOpsplanStatesummaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.opsplan.statesummary.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOpsplanDetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 发布单id
  timeSeriesId: string(name='time_series_id'),
}

model QueryOpsplanDetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发布单包含的应用数
  appCount?: long(name='app_count'),
  // 应用信息列表
  appInfos?: [ AppSimpleInfo ](name='app_infos'),
  // 执行人
  executor?: string(name='executor'),
  // 发布结束时间
  finishTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='finish_time'),
  // 应用分组概要信息列表
  groupCollectionList?: [ AppGroupSimpleViewList ](name='group_collection_list'),
  // 发布单id
  id?: string(name='id'),
  // 错误信息
  messageDetail?: string(name='message_detail'),
  // 运维单类型
  // 
  mode?: string(name='mode'),
  // 发布单标题
  name?: string(name='name'),
  // 备注信息
  remark?: string(name='remark'),
  // 发布开始时间
  startTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_time'),
  // 发布单状态
  // 
  state?: string(name='state'),
  // 发布单号
  timeSeriesId?: string(name='time_series_id'),
  // 发布单类型
  type?: string(name='type'),
  // pod数量
  podCount?: long(name='pod_count'),
  // 审批状态：AGREE-同意，REJECTED-拒绝，CANCELED-取消
  approvalStatus?: string(name='approval_status'),
  // 审批详情url
  approvalUrl?: string(name='approval_url'),
}

/**
 * Description: 发布/运维单详情查询
 * Summary: 发布/运维单详情查询
 */
async function queryOpsplanDetail(request: QueryOpsplanDetailRequest): QueryOpsplanDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOpsplanDetailEx(request, headers, runtime);
}

/**
 * Description: 发布/运维单详情查询
 * Summary: 发布/运维单详情查询
 */
async function queryOpsplanDetailEx(request: QueryOpsplanDetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOpsplanDetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.opsplan.detail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackTechstackRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model QueryBuildpackTechstackResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前租户内可见的技术栈分类：包括公共可见以及租户自定义分类
  list?: [ TechStack ](name='list'),
}

/**
 * Description: 查询公共技术栈类型，如SOFA|SOFABOOT，包括（如果存在的话）用户自定义技术栈类型，如 MYBANK_SOFA
 * Summary: 查询公共的以及租户内自定义技术栈分类
 */
async function queryBuildpackTechstack(request: QueryBuildpackTechstackRequest): QueryBuildpackTechstackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackTechstackEx(request, headers, runtime);
}

/**
 * Description: 查询公共技术栈类型，如SOFA|SOFABOOT，包括（如果存在的话）用户自定义技术栈类型，如 MYBANK_SOFA
 * Summary: 查询公共的以及租户内自定义技术栈分类
 */
async function queryBuildpackTechstackEx(request: QueryBuildpackTechstackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackTechstackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.buildpack.techstack.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackNativetechstackversionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 技术栈名称。
  // 原则上允许用户定义同名自定义技术栈（e.g,用户创建和全局同名的技术栈SOFA），此时优先获取用户自定义技术栈下技术栈版本；
  techStack: string(name='tech_stack'),
  // 当前页码， 默认值为1
  currentPage?: long(name='current_page'),
  // 一页获取个数，默认值10
  pageSize?: long(maximum=100, minimum=1, name='page_size'),
}

model QueryBuildpackNativetechstackversionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总个数
  totalCount?: long(name='total_count'),
  // 云原生技术栈版本列表
  list?: [ NativeTechStackVersion ](name='list'),
  // 当前页码
  currentPage?: long(name='current_page'),
  // 一页包含个数
  pageSize?: long(name='page_size'),
}

/**
 * Description: 获取指定技术栈类别下全局可见的云原生技术栈版本以及租户内扩展的自定义版本
e.g: ce4456_jdk7_tengine, enhanced_ce4456_jdk7_tengine16
 * Summary: 获取云原生技术栈小版本列表信息
 */
async function queryBuildpackNativetechstackversion(request: QueryBuildpackNativetechstackversionRequest): QueryBuildpackNativetechstackversionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackNativetechstackversionEx(request, headers, runtime);
}

/**
 * Description: 获取指定技术栈类别下全局可见的云原生技术栈版本以及租户内扩展的自定义版本
e.g: ce4456_jdk7_tengine, enhanced_ce4456_jdk7_tengine16
 * Summary: 获取云原生技术栈小版本列表信息
 */
async function queryBuildpackNativetechstackversionEx(request: QueryBuildpackNativetechstackversionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackNativetechstackversionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.buildpack.nativetechstackversion.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateContainerserviceNativebpversionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用服务名称
  name: string(name='name'),
  // 容器服务所在命名空间
  namespace: string(name='namespace'),
  // 云原生技术栈版本
  nativeBuildPackVersion: string(name='native_build_pack_version'),
  // 操作人
  operator: string(name='operator'),
  // 环境名称
  workspaceGroup: string(name='workspace_group'),
  // 容器服务版本
  revision: string(name='revision'),
}

model UpdateContainerserviceNativebpversionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 更新后的容器应用服务版本号
  revision?: string(name='revision'),
}

/**
 * Description: 更新容器应用服务的云原生技术栈版本。
e.g: 更新为 ce44610
 * Summary: 更新容器应用服务对应的云原生技术栈版本
 */
async function updateContainerserviceNativebpversion(request: UpdateContainerserviceNativebpversionRequest): UpdateContainerserviceNativebpversionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateContainerserviceNativebpversionEx(request, headers, runtime);
}

/**
 * Description: 更新容器应用服务的云原生技术栈版本。
e.g: 更新为 ce44610
 * Summary: 更新容器应用服务对应的云原生技术栈版本
 */
async function updateContainerserviceNativebpversionEx(request: UpdateContainerserviceNativebpversionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateContainerserviceNativebpversionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.nativebpversion.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model LoadContainerserviceDockerfileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用服务名称
  name: string(name='name'),
  // 应用包地址，可以为相对目录，或者远程可访问存储地址.
  // 用于组装Dockerfile模板中对应的应用包获取地址
  packageUrl: string(name='package_url'),
  // 环境名称
  workspaceGroup: string(name='workspace_group'),
  // 容器服务所在namespace
  namespace: string(name='namespace'),
}

model LoadContainerserviceDockerfileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Dockerfile指令列表
  commands?: [ string ](name='commands'),
}

/**
 * Description: 生成Dockerfile命令列表并获取
 * Summary: 获取容器服务对应的Dockerfile
 */
async function loadContainerserviceDockerfile(request: LoadContainerserviceDockerfileRequest): LoadContainerserviceDockerfileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return loadContainerserviceDockerfileEx(request, headers, runtime);
}

/**
 * Description: 生成Dockerfile命令列表并获取
 * Summary: 获取容器服务对应的Dockerfile
 */
async function loadContainerserviceDockerfileEx(request: LoadContainerserviceDockerfileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): LoadContainerserviceDockerfileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.dockerfile.load', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBuildpackNativetechstackversionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // ce4456_jdk8_tengine6
  displayVersion: string(name='display_version'),
  // 版本描述
  description?: string(name='description'),
  // 完整的镜像地址
  fromImage: string(name='from_image'),
  // 所属技术栈大类
  techStack: string(name='tech_stack'),
  // 技术栈大类对应的id，如不填写，后台默认根据名称校验所属技术栈大类
  techStackId?: string(name='tech_stack_id'),
  // 指定该版本可见范围：
  // PUBLIC - 全站点各个租户都可见；
  // TENANT - 仅创建改版本对应的租户内可见
  scope: string(name='scope'),
  // 扩展的Dockerfile指令。
  // 用于在FromImage的基础上扩展Dockerfile指令
  extCommands?: [ string ](name='ext_commands'),
  // 扩展属性 - 表现为Map<String,String>序列化后的字符串
  extendProperties?: string(name='extend_properties'),
}

model CreateBuildpackNativetechstackversionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建后生成的对象信息
  data?: NativeTechStackVersion(name='data'),
}

/**
 * Description: 创建云原生技术栈版本
 * Summary: 创建云原生技术栈版本
 */
async function createBuildpackNativetechstackversion(request: CreateBuildpackNativetechstackversionRequest): CreateBuildpackNativetechstackversionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBuildpackNativetechstackversionEx(request, headers, runtime);
}

/**
 * Description: 创建云原生技术栈版本
 * Summary: 创建云原生技术栈版本
 */
async function createBuildpackNativetechstackversionEx(request: CreateBuildpackNativetechstackversionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBuildpackNativetechstackversionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.buildpack.nativetechstackversion.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListMulticlusterZoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace group name
  workspaceGroup: string(name='workspace_group'),
}

model ListMulticlusterZoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // zones of workspace group
  data?: [ ZoneOfWorkspace ](name='data'),
}

/**
 * Description: get zonelist of each workspace in a workspace group
 * Summary: getZoneListOfWSG
 */
async function listMulticlusterZone(request: ListMulticlusterZoneRequest): ListMulticlusterZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listMulticlusterZoneEx(request, headers, runtime);
}

/**
 * Description: get zonelist of each workspace in a workspace group
 * Summary: getZoneListOfWSG
 */
async function listMulticlusterZoneEx(request: ListMulticlusterZoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMulticlusterZoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.multicluster.zone.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecOpsplanAppopstaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 操作类型
  controlType: string(name='control_type'),
  // pipeline stage 名字
  actionCode: string(name='action_code'),
  // 任务id
  id: string(name='id'),
  // operator名字
  operator?: string(name='operator'),
  // [huanyu场景使用]，当cancel_plan_flag为true, control_type=CANCEL且action_code=CLOUD_NATIVE_DEPLOY时，整个运维单将被取消
  cancelPlanFlag?: boolean(name='cancel_plan_flag'),
}

model ExecOpsplanAppopstaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 发布/运维单发布任务操作，发布单任务是发布单可以操作的最小单元，操作类型包括重试、跳过、确认等操作
 * Summary: 发布/运维单发布任务操作
 */
async function execOpsplanAppopstask(request: ExecOpsplanAppopstaskRequest): ExecOpsplanAppopstaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execOpsplanAppopstaskEx(request, headers, runtime);
}

/**
 * Description: 发布/运维单发布任务操作，发布单任务是发布单可以操作的最小单元，操作类型包括重试、跳过、确认等操作
 * Summary: 发布/运维单发布任务操作
 */
async function execOpsplanAppopstaskEx(request: ExecOpsplanAppopstaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecOpsplanAppopstaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.opsplan.appopstask.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOpsplanProgressRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 发布单序列号
  timeSeriesId: string(name='time_series_id'),
}

model QueryOpsplanProgressResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用执行进度
  appExecuteProgress?: [ ExecuteProgress ](name='app_execute_progress'),
  // 发布单进度
  executeProgress?: ExecuteProgress(name='execute_progress'),
}

/**
 * Description: 发布单进度查询，包括发布单状态机应用整体的执行情况以及每个应用内部的执行进度状态汇总
 * Summary: 发布单进度查询
 */
async function queryOpsplanProgress(request: QueryOpsplanProgressRequest): QueryOpsplanProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOpsplanProgressEx(request, headers, runtime);
}

/**
 * Description: 发布单进度查询，包括发布单状态机应用整体的执行情况以及每个应用内部的执行进度状态汇总
 * Summary: 发布单进度查询
 */
async function queryOpsplanProgressEx(request: QueryOpsplanProgressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOpsplanProgressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.opsplan.progress.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOpsplanAppprogressRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用id
  id: string(name='id'),
  // 运维单id
  timeSeriesId?: string(name='time_series_id'),
  // 批次stage的id
  stageId?: string(name='stage_id'),
  // [huanyu场景使用] 是否需要返回affected_cell_pods
  needExportCellPods?: boolean(name='need_export_cell_pods'),
  // [huanyu场景使用] 返回给opscloud的变更对象类型。如果为NONE，则不返回变更对象信息
  opscloudChangeTargetType?: string(name='opscloud_change_target_type'),
}

model QueryOpsplanAppprogressResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用发布进度详情
  appDeployProgress?: AppDeployProgress(name='app_deploy_progress'),
  // [huanyu场景使用] 查询涉及的部署单元及pod详情列表
  affectedCellPods?: [ AppDeployCell ](name='affected_cell_pods'),
  // [huanyu场景使用] json格式的变更对象信息列表
  opscloudChangeTargetJsonStr?: string(name='opscloud_change_target_json_str'),
}

/**
 * Description: 发布(运维)单应进度查询
 * Summary: 发布(运维)单应进度查询
 */
async function queryOpsplanAppprogress(request: QueryOpsplanAppprogressRequest): QueryOpsplanAppprogressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOpsplanAppprogressEx(request, headers, runtime);
}

/**
 * Description: 发布(运维)单应进度查询
 * Summary: 发布(运维)单应进度查询
 */
async function queryOpsplanAppprogressEx(request: QueryOpsplanAppprogressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOpsplanAppprogressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.opsplan.appprogress.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListContainerservicePodRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 容器服务名称
  containerServiceName: string(name='container_service_name'),
  // namespace
  namespace: string(name='namespace'),
  // 工作空间组名称。
  workspaceGroupName: string(name='workspace_group_name'),
}

model ListContainerservicePodResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // pod信息列表
  podList?: [ PodInfo ](name='pod_list'),
}

/**
 * Description: 容器服务pod列表
 * Summary: 容器服务pod列表
 */
async function listContainerservicePod(request: ListContainerservicePodRequest): ListContainerservicePodResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listContainerservicePodEx(request, headers, runtime);
}

/**
 * Description: 容器服务pod列表
 * Summary: 容器服务pod列表
 */
async function listContainerservicePodEx(request: ListContainerservicePodRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListContainerservicePodResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.pod.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListContainerserviceKubeeventsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model ListContainerserviceKubeeventsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // mock
  success?: string(name='success'),
}

/**
 * Description: To list kubeevents
 * Summary: To list kubeevents
 */
async function listContainerserviceKubeevents(request: ListContainerserviceKubeeventsRequest): ListContainerserviceKubeeventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listContainerserviceKubeeventsEx(request, headers, runtime);
}

/**
 * Description: To list kubeevents
 * Summary: To list kubeevents
 */
async function listContainerserviceKubeeventsEx(request: ListContainerserviceKubeeventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListContainerserviceKubeeventsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.kubeevents.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListPodEventsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 集群名称
  cluster: string(name='cluster'),
  // Pod名称
  name: string(name='name'),
  // 所属命名空间名称
  namespace: string(name='namespace'),
  // 所属环境名称
  workspaceGroup: string(name='workspace_group'),
  // pod uid
  uid: string(name='uid'),
}

model ListPodEventsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Pod事件列表
  events?: [ KubeEvent ](name='events'),
}

/**
 * Description: 查询Pod事件列表
 * Summary: 查询Pod事件列表
 */
async function listPodEvents(request: ListPodEventsRequest): ListPodEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listPodEventsEx(request, headers, runtime);
}

/**
 * Description: 查询Pod事件列表
 * Summary: 查询Pod事件列表
 */
async function listPodEventsEx(request: ListPodEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPodEventsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.pod.events.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListPodContainersRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属环境名称
  workspaceGroup: string(name='workspace_group'),
  // 所属集群名称
  cluster: string(name='cluster'),
  // 所属工作空间名称
  namespace: string(name='namespace'),
  // Pod名称
  name: string(name='name'),
}

model ListPodContainersResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Pod容器列表
  containers?: [ ContainerInfo ](name='containers'),
}

/**
 * Description: 查询Pod事件列表
 * Summary: 查询Pod容器列表
 */
async function listPodContainers(request: ListPodContainersRequest): ListPodContainersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listPodContainersEx(request, headers, runtime);
}

/**
 * Description: 查询Pod事件列表
 * Summary: 查询Pod容器列表
 */
async function listPodContainersEx(request: ListPodContainersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPodContainersResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.pod.containers.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContainerserviceCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // container service name
  containerServiceName: string(name='container_service_name'),
}

model QueryContainerserviceCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cell list
  cellList?: [ CellInfo ](name='cell_list'),
}

/**
 * Description: query replica cell
 * Summary: query replica cell
 */
async function queryContainerserviceCell(request: QueryContainerserviceCellRequest): QueryContainerserviceCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContainerserviceCellEx(request, headers, runtime);
}

/**
 * Description: query replica cell
 * Summary: query replica cell
 */
async function queryContainerserviceCellEx(request: QueryContainerserviceCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContainerserviceCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.cell.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCellgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属idc
  datacenter?: string(name='datacenter'),
  // 默认全局域
  defaultGzone?: string(name='default_gzone'),
  // 逻辑单元名称
  name: string(name='name'),
  // 逻辑单元类型
  type: string(name='type'),
  // 所属环境名称。
  workspaceGroup: string(name='workspace_group'),
  // 操作人。
  operator: string(name='operator'),
}

model CreateCellgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建逻辑单元
 * Summary: 创建逻辑单元
 */
async function createCellgroup(request: CreateCellgroupRequest): CreateCellgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCellgroupEx(request, headers, runtime);
}

/**
 * Description: 创建逻辑单元
 * Summary: 创建逻辑单元
 */
async function createCellgroupEx(request: CreateCellgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCellgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cellgroup.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListCellgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属环境名称
  workspaceGroup: string(name='workspace_group'),
  // cell group查询前缀
  name?: string(name='name'),
}

model ListCellgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 逻辑单元列表
  cellGroupList?: [ CellGroup ](name='cell_group_list'),
}

/**
 * Description: 获取cellgroup列表
 * Summary: 获取cellgroup列表
 */
async function listCellgroup(request: ListCellgroupRequest): ListCellgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listCellgroupEx(request, headers, runtime);
}

/**
 * Description: 获取cellgroup列表
 * Summary: 获取cellgroup列表
 */
async function listCellgroupEx(request: ListCellgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCellgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cellgroup.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateCellgroupDisasterinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 灾备信息。
  disasterInfo: [ DisasterInfo ](name='disaster_info'),
  // 逻辑单元名称。
  name: string(name='name'),
  // 所属环境名称。
  workspaceGroup: string(name='workspace_group'),
  // 操作人。
  operator: string(name='operator'),
}

model UpdateCellgroupDisasterinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 配置逻辑单元灾备信息
 * Summary: 配置逻辑单元灾备信息
 */
async function updateCellgroupDisasterinfo(request: UpdateCellgroupDisasterinfoRequest): UpdateCellgroupDisasterinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateCellgroupDisasterinfoEx(request, headers, runtime);
}

/**
 * Description: 配置逻辑单元灾备信息
 * Summary: 配置逻辑单元灾备信息
 */
async function updateCellgroupDisasterinfoEx(request: UpdateCellgroupDisasterinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateCellgroupDisasterinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cellgroup.disasterinfo.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteCellgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属环境名称
  workspaceGroup: string(name='workspace_group'),
  // 逻辑单元名称
  name: string(name='name'),
}

model DeleteCellgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除逻辑单元
 * Summary: 删除逻辑单元
 */
async function deleteCellgroup(request: DeleteCellgroupRequest): DeleteCellgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteCellgroupEx(request, headers, runtime);
}

/**
 * Description: 删除逻辑单元
 * Summary: 删除逻辑单元
 */
async function deleteCellgroupEx(request: DeleteCellgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteCellgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cellgroup.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 部署单元名称前缀
  name?: string(name='name'),
  // 环境名称
  workspaceGroup: string(name='workspace_group'),
}

model ListCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 部署单元列表
  cells?: [ Cell ](name='cells'),
}

/**
 * Description: 查询部署单元列表
 * Summary: 查询部署单元列表
 */
async function listCell(request: ListCellRequest): ListCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listCellEx(request, headers, runtime);
}

/**
 * Description: 查询部署单元列表
 * Summary: 查询部署单元列表
 */
async function listCellEx(request: ListCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cell.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属逻辑单元名称[单元化模式特有]。
  cellGroup?: string(name='cell_group'),
  // 蓝绿着色信息[单元化模式特有]。
  color?: string(name='color'),
  // 部署单元标识。
  identity: string(name='identity'),
  // 是否灰度[单元化模式特有]。
  isGray?: boolean(name='is_gray'),
  // 部署单元名称。
  name: string(name='name'),
  // 部署单元类型[单元化模式特有]。
  type?: string(name='type'),
  // 权重[单元化模式特有]。
  weight?: long(name='weight'),
  // 所属环境名称。
  workspaceGroup: string(name='workspace_group'),
  // 所属机房。
  zone: string(name='zone'),
  // 所属工作空间名称。
  workspace: string(name='workspace'),
}

model CreateCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建部署单元。
 * Summary: 创建部署单元
 */
async function createCell(request: CreateCellRequest): CreateCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCellEx(request, headers, runtime);
}

/**
 * Description: 创建部署单元。
 * Summary: 创建部署单元
 */
async function createCellEx(request: CreateCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cell.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 部署单元名称。
  name: string(name='name'),
  // 所属环境名称。
  workspaceGroup: string(name='workspace_group'),
  // 所属工作空间名称。
  workspace: string(name='workspace'),
}

model DeleteCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除部署单元。
 * Summary: 删除部署单元
 */
async function deleteCell(request: DeleteCellRequest): DeleteCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteCellEx(request, headers, runtime);
}

/**
 * Description: 删除部署单元。
 * Summary: 删除部署单元
 */
async function deleteCellEx(request: DeleteCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cell.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeletePodRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属环境名称。
  workspaceGroup: string(name='workspace_group'),
  // 命名空间名称。
  namespace: string(name='namespace'),
  // 容器应用服务名称。
  containerService?: string(name='container_service'),
  // 集群名称。
  cluster: string(name='cluster'),
  // pod名称。
  name: string(name='name'),
}

model DeletePodResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除pod
 * Summary: 删除pod
 */
async function deletePod(request: DeletePodRequest): DeletePodResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deletePodEx(request, headers, runtime);
}

/**
 * Description: 删除pod
 * Summary: 删除pod
 */
async function deletePodEx(request: DeletePodRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePodResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.pod.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetWorkspacegroupTopologyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属环境(WorkspaceGroup)名称。
  name: string(name='name'),
  // 地域
  region: string(name='region'),
}

model GetWorkspacegroupTopologyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 环境逻辑单元信息。
  cellGroups?: [ CellGroup ](name='cell_groups'),
  // 环境(WorkspaceGroup)名称。
  name?: string(name='name'),
  // 环境机房信息。
  zones?: [ ZoneInfo ](name='zones'),
}

/**
 * Description: 查询环境部署单元拓扑
 * Summary: 查询环境部署单元拓扑
 */
async function getWorkspacegroupTopology(request: GetWorkspacegroupTopologyRequest): GetWorkspacegroupTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getWorkspacegroupTopologyEx(request, headers, runtime);
}

/**
 * Description: 查询环境部署单元拓扑
 * Summary: 查询环境部署单元拓扑
 */
async function getWorkspacegroupTopologyEx(request: GetWorkspacegroupTopologyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkspacegroupTopologyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.workspacegroup.topology.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateFlowCellweightRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 部署单元组
  cellGroup: string(name='cell_group'),
  // 操作人
  operator: string(name='operator'),
  // 是否压测流量，默认 false
  press?: boolean(name='press'),
  // 部署单元权重信息
  weightInfoList: CellWeightInfoList(name='weight_info_list'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model UpdateFlowCellweightResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 修改 cell 权重
 * Summary: 修改 cell 权重
 */
async function updateFlowCellweight(request: UpdateFlowCellweightRequest): UpdateFlowCellweightResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateFlowCellweightEx(request, headers, runtime);
}

/**
 * Description: 修改 cell 权重
 * Summary: 修改 cell 权重
 */
async function updateFlowCellweightEx(request: UpdateFlowCellweightRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFlowCellweightResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.cellweight.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateFlowUidrangeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 部署单元组
  cellGroup: string(name='cell_group'),
  // 是否灰度流量（默认false）
  gray?: boolean(name='gray'),
  // 操作人
  operator: string(name='operator'),
  // 是否压测流量（默认 false）
  press?: boolean(name='press'),
  // uid 范围
  uidRanges: UidShardList(name='uid_ranges'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model UpdateFlowUidrangeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: uid 分片调整
 * Summary: uid 分片调整
 */
async function updateFlowUidrange(request: UpdateFlowUidrangeRequest): UpdateFlowUidrangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateFlowUidrangeEx(request, headers, runtime);
}

/**
 * Description: uid 分片调整
 * Summary: uid 分片调整
 */
async function updateFlowUidrangeEx(request: UpdateFlowUidrangeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFlowUidrangeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.uidrange.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableFlowElasticuidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 操作人
  operator: string(name='operator'),
  // 弹出的 UID 信息
  popOutUids: [ PopOutUid ](name='pop_out_uids'),
  // 是否压测流量（默认 false）
  press?: boolean(name='press'),
  // 是否灰度流量（默认 false）
  gray?: boolean(name='gray'),
}

model EnableFlowElasticuidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 弹出 UID 到弹性部署单元
 * Summary: 弹出 UID 到弹性部署单元
 */
async function enableFlowElasticuid(request: EnableFlowElasticuidRequest): EnableFlowElasticuidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableFlowElasticuidEx(request, headers, runtime);
}

/**
 * Description: 弹出 UID 到弹性部署单元
 * Summary: 弹出 UID 到弹性部署单元
 */
async function enableFlowElasticuidEx(request: EnableFlowElasticuidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableFlowElasticuidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticuid.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DisableFlowElasticuidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 操作人
  operator: string(name='operator'),
  // 弹回的 UID 分片
  resumeUids: [ long ](name='resume_uids'),
  // 是否压测（默认 false）
  press?: boolean(name='press'),
  // 是否灰度（默认 false）
  gray?: boolean(name='gray'),
}

model DisableFlowElasticuidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 弹回 UID 分片
 * Summary: 弹回 UID 分片
 */
async function disableFlowElasticuid(request: DisableFlowElasticuidRequest): DisableFlowElasticuidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return disableFlowElasticuidEx(request, headers, runtime);
}

/**
 * Description: 弹回 UID 分片
 * Summary: 弹回 UID 分片
 */
async function disableFlowElasticuidEx(request: DisableFlowElasticuidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableFlowElasticuidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticuid.disable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExportFlowRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 参与规则生成的应用列表
  apps?: [ string ](name='apps'),
  // 是否灰度（默认 false）
  gray?: boolean(name='gray'),
  // 操作人
  operator: string(name='operator'),
  // 规则类型，支持(ZONE_INFO,ELASTIC_BIZ_RULE,ZONE_COLOR,TAO_BAO_RULE)
  ruleType: string(name='rule_type'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 是否进行规则校验，默认 false
  check?: boolean(name='check'),
}

model ExportFlowRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 流量规则的 JSON 字符串
  rule?: string(name='rule'),
}

/**
 * Description: 导出当前的流量规则
 * Summary: 导出当前的流量规则
 */
async function exportFlowRule(request: ExportFlowRuleRequest): ExportFlowRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return exportFlowRuleEx(request, headers, runtime);
}

/**
 * Description: 导出当前的流量规则
 * Summary: 导出当前的流量规则
 */
async function exportFlowRuleEx(request: ExportFlowRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExportFlowRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.rule.export', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushFlowRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 包含系统列表
  apps?: [ string ](name='apps'),
  // 是否灰度（默认 false）
  gray?: boolean(name='gray'),
  // 操作人
  operator: string(name='operator'),
  // 站点是否全局推送
  pushAll?: boolean(name='push_all'),
  // 规则类型,支持(ZONE_INFO,ELASTIC_BIZ_RULE,ZONE_COLOR,TAO_BAO_RULE)
  ruleType: string(name='rule_type'),
  // 规则文本
  ruleValue: string(name='rule_value'),
  // 全量的targets信息
  targets?: [ string ](name='targets'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 是否覆盖其他应用的规则，默认 false
  override?: boolean(name='override'),
}

model PushFlowRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否灰度环境
  gray?: boolean(name='gray'),
  // 推送结果
  ruleResultList?: [ PushRuleResult ](name='rule_result_list'),
}

/**
 * Description: 推送流量规则
 * Summary: 推送流量规则
 */
async function pushFlowRule(request: PushFlowRuleRequest): PushFlowRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushFlowRuleEx(request, headers, runtime);
}

/**
 * Description: 推送流量规则
 * Summary: 推送流量规则
 */
async function pushFlowRuleEx(request: PushFlowRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushFlowRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.rule.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddFlowElasticruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属应用名称
  appName: string(name='app_name'),
  // MSGBROKER 需要填写。
  // 弹性规则消息类型事件码。
  // 如果包含所有eventCode，可以用英文星号"*"表示。
  eventCodes?: [ string ](name='event_codes'),
  // 弹性规则方法名称，RPC类型需要填写。
  // 如果包含所有方法，则填写英文星号"*"
  methods?: [ string ](name='methods'),
  // 操作人
  operator: string(name='operator'),
  // 弹性规则类型，包括：APP、RPC、MSGBROKER，ANTQ
  ruleType: string(name='rule_type'),
  // 适用的弹性场景名称
  sceneName: string(name='scene_name'),
  // 弹性规则服务名称。
  // RPC：对应接口名，例如：com.alipay.cif.facade.AckCodeService:1.0:cif。
  // APP：对应应用名，例如：cif。
  // MSG或ANTQ：对应消息groupId，例如：S-UNIQUERY-SYNC。
  serviceName: string(name='service_name'),
  // 弹性规则状态，有效值：VALID（线上生效）、PRESS（仅压测生效）、INVALID（无效状态）
  status: string(name='status'),
  // MSGBROKER 和 ANTQ 需要填写。
  // 弹性规则消息类型topic。
  // 如果包含所有topic，可以用英文星号"*"表示。
  topic?: string(name='topic'),
  // 是否使用默认EID（默认 false）
  useDefaultEid?: boolean(name='use_default_eid'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model AddFlowElasticruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建弹性规则
 * Summary: 创建弹性规则
 */
async function addFlowElasticrule(request: AddFlowElasticruleRequest): AddFlowElasticruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addFlowElasticruleEx(request, headers, runtime);
}

/**
 * Description: 创建弹性规则
 * Summary: 创建弹性规则
 */
async function addFlowElasticruleEx(request: AddFlowElasticruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddFlowElasticruleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticrule.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateFlowElasticruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 弹性规则 ID
  id: long(name='id'),
  // 操作人
  operator: string(name='operator'),
  // 弹性规则服务名称。
  // RPC：对应接口名，例如：com.alipay.cif.facade.AckCodeService:1.0:cif。
  // APP：对应应用名，例如：cif。
  // MSG或ANTQ：对应消息groupId，例如：S-UNIQUERY-SYNC。
  serviceName: string(name='service_name'),
  // 弹性规则状态，可选值 VALID("线上生效")，PRESS("仅压测生效")，INVALID("无效状态");
  status: string(name='status'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model UpdateFlowElasticruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新弹性规则
 * Summary: 更新弹性规则
 */
async function updateFlowElasticrule(request: UpdateFlowElasticruleRequest): UpdateFlowElasticruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateFlowElasticruleEx(request, headers, runtime);
}

/**
 * Description: 更新弹性规则
 * Summary: 更新弹性规则
 */
async function updateFlowElasticruleEx(request: UpdateFlowElasticruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFlowElasticruleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticrule.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteFlowElasticruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 弹性规则 ID
  id: long(name='id'),
  // 操作人
  operator: string(name='operator'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model DeleteFlowElasticruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除弹性规则
 * Summary: 删除弹性规则
 */
async function deleteFlowElasticrule(request: DeleteFlowElasticruleRequest): DeleteFlowElasticruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteFlowElasticruleEx(request, headers, runtime);
}

/**
 * Description: 删除弹性规则
 * Summary: 删除弹性规则
 */
async function deleteFlowElasticruleEx(request: DeleteFlowElasticruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFlowElasticruleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticrule.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddFlowElasticsubruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 消息eventCode, MSGBROKER必填
  eventCode?: string(name='event_code'),
  // 操作人
  operator: string(name='operator'),
  // 父规则ID
  parentId: long(name='parent_id'),
  // 规则值, RPC必填
  rpcMethod?: string(name='rpc_method'),
  // 所属规则类型，可选值：RPC, MSGBROKER, ANTQ, APP
  ruleType: string(name='rule_type'),
  // VALID("线上生效"), PRESS("仅压测生效"), INVALID("无效状态");
  status: string(name='status'),
  // 消息topic, MSGBROKER和ANTQ必填
  topic?: string(name='topic'),
  // 是否使用默认eid, RPC必填
  useDefaultEid?: boolean(name='use_default_eid'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model AddFlowElasticsubruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 添加弹性子规则
 * Summary: 添加弹性子规则
 */
async function addFlowElasticsubrule(request: AddFlowElasticsubruleRequest): AddFlowElasticsubruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addFlowElasticsubruleEx(request, headers, runtime);
}

/**
 * Description: 添加弹性子规则
 * Summary: 添加弹性子规则
 */
async function addFlowElasticsubruleEx(request: AddFlowElasticsubruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddFlowElasticsubruleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticsubrule.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteFlowElasticsubruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 操作人
  operator: string(name='operator'),
  // 规则 ID
  id: long(name='id'),
}

model DeleteFlowElasticsubruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除子弹性规则
 * Summary: 删除子弹性规则
 */
async function deleteFlowElasticsubrule(request: DeleteFlowElasticsubruleRequest): DeleteFlowElasticsubruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteFlowElasticsubruleEx(request, headers, runtime);
}

/**
 * Description: 删除子弹性规则
 * Summary: 删除子弹性规则
 */
async function deleteFlowElasticsubruleEx(request: DeleteFlowElasticsubruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFlowElasticsubruleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticsubrule.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateFlowElasticrulestatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 命名空间
  workspaceGroup: string(name='workspace_group'),
  // 操作人
  operator: string(name='operator'),
  // 弹性规则ID列表
  elasticRuleIds: [ long ](name='elastic_rule_ids'),
  // VALID("线上生效"), PRESS("仅压测生效"),  INVALID("无效状态");
  newStatus: string(name='new_status'),
}

model UpdateFlowElasticrulestatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量更新弹性规则状态
 * Summary: 批量更新弹性规则状态
 */
async function updateFlowElasticrulestatus(request: UpdateFlowElasticrulestatusRequest): UpdateFlowElasticrulestatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateFlowElasticrulestatusEx(request, headers, runtime);
}

/**
 * Description: 批量更新弹性规则状态
 * Summary: 批量更新弹性规则状态
 */
async function updateFlowElasticrulestatusEx(request: UpdateFlowElasticrulestatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFlowElasticrulestatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticrulestatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteFlowElasticruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 操作人
  operator: string(name='operator'),
  // 弹性规则ID列表
  elasticRuleIds: [ long ](name='elastic_rule_ids'),
}

model BatchdeleteFlowElasticruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量删除弹性规则
 * Summary: 批量删除弹性规则
 */
async function batchdeleteFlowElasticrule(request: BatchdeleteFlowElasticruleRequest): BatchdeleteFlowElasticruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteFlowElasticruleEx(request, headers, runtime);
}

/**
 * Description: 批量删除弹性规则
 * Summary: 批量删除弹性规则
 */
async function batchdeleteFlowElasticruleEx(request: BatchdeleteFlowElasticruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteFlowElasticruleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticrule.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFlowElasticsceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 操作人
  operator: string(name='operator'),
  // 场景名
  name: string(name='name'),
  // 场景状态，可选值（VALID，INVALID）
  status: string(name='status'),
}

model CreateFlowElasticsceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建弹性场景
 * Summary: 创建弹性场景
 */
async function createFlowElasticscene(request: CreateFlowElasticsceneRequest): CreateFlowElasticsceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFlowElasticsceneEx(request, headers, runtime);
}

/**
 * Description: 创建弹性场景
 * Summary: 创建弹性场景
 */
async function createFlowElasticsceneEx(request: CreateFlowElasticsceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFlowElasticsceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticscene.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateFlowElasticsceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 操作人
  operator: string(name='operator'),
  // 弹性场景 ID
  id: long(name='id'),
  // 弹性场景名
  name: string(name='name'),
  // 弹性场景状态，可选值（VALID，INVALID）
  status: string(name='status'),
}

model UpdateFlowElasticsceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 修改弹性场景
 * Summary: 修改弹性场景
 */
async function updateFlowElasticscene(request: UpdateFlowElasticsceneRequest): UpdateFlowElasticsceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateFlowElasticsceneEx(request, headers, runtime);
}

/**
 * Description: 修改弹性场景
 * Summary: 修改弹性场景
 */
async function updateFlowElasticsceneEx(request: UpdateFlowElasticsceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFlowElasticsceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticscene.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteFlowElasticsceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 操作人
  operator: string(name='operator'),
  // 弹性规则场景 ID
  id: long(name='id'),
}

model DeleteFlowElasticsceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除弹性场景
 * Summary: 删除弹性场景
 */
async function deleteFlowElasticscene(request: DeleteFlowElasticsceneRequest): DeleteFlowElasticsceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteFlowElasticsceneEx(request, headers, runtime);
}

/**
 * Description: 删除弹性场景
 * Summary: 删除弹性场景
 */
async function deleteFlowElasticsceneEx(request: DeleteFlowElasticsceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFlowElasticsceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticscene.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetFlowElasticvalueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 弹性值，对应zdal里的弹性位，比如52，53等
  elasticValues: [ string ](name='elastic_values'),
  // 是否灰度（默认 false）
  gray?: boolean(name='gray'),
  // 操作人
  operator: string(name='operator'),
  // 是否弹性（默认 false）
  press?: boolean(name='press'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model SetFlowElasticvalueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 配置弹性值
 * Summary: 配置弹性值
 */
async function setFlowElasticvalue(request: SetFlowElasticvalueRequest): SetFlowElasticvalueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setFlowElasticvalueEx(request, headers, runtime);
}

/**
 * Description: 配置弹性值
 * Summary: 配置弹性值
 */
async function setFlowElasticvalueEx(request: SetFlowElasticvalueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetFlowElasticvalueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticvalue.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DisableFlowElasticvalueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 操作人
  operator: string(name='operator'),
  // 是否弹性（默认 false）
  press?: boolean(name='press'),
  // 是否灰度（默认 false）
  gray?: boolean(name='gray'),
}

model DisableFlowElasticvalueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 恢复弹性值
 * Summary: 恢复弹性值
 */
async function disableFlowElasticvalue(request: DisableFlowElasticvalueRequest): DisableFlowElasticvalueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return disableFlowElasticvalueEx(request, headers, runtime);
}

/**
 * Description: 恢复弹性值
 * Summary: 恢复弹性值
 */
async function disableFlowElasticvalueEx(request: DisableFlowElasticvalueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableFlowElasticvalueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticvalue.disable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFlowSiteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 描述
  description?: string(name='description'),
  // 推送接口类型，可选值（RPC，REST）
  interfaceType: string(name='interface_type'),
  // 推送接口 url
  interfaceUrls: [ string ](name='interface_urls'),
  // 站点名
  name: string(name='name'),
  // 操作人
  operator: string(name='operator'),
  // 站点类型，可选值 MAIN（主站点）， ISOMERISM（异构机房）
  siteType: string(name='site_type'),
  // opssla uniqueId
  uniqueId?: string(name='unique_id'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model CreateFlowSiteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建站点
 * Summary: 创建站点
 */
async function createFlowSite(request: CreateFlowSiteRequest): CreateFlowSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFlowSiteEx(request, headers, runtime);
}

/**
 * Description: 创建站点
 * Summary: 创建站点
 */
async function createFlowSiteEx(request: CreateFlowSiteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFlowSiteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.site.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateFlowSiteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 操作人
  operator: string(name='operator'),
  // 站点 ID
  id: long(name='id'),
  // 站点名
  name: string(name='name'),
  // 描述
  description?: string(name='description'),
  // 站点类型，可选值（MAIN， ISOMERISM）
  siteType: string(name='site_type'),
  // 接口类型（RPC，REST）
  interfaceType: string(name='interface_type'),
  // 推送接口url
  interfaceUrls: [ string ](name='interface_urls'),
  // opssla uniqueId
  uniqueId?: string(name='unique_id'),
}

model UpdateFlowSiteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 修改站点信息
 * Summary: 修改站点信息
 */
async function updateFlowSite(request: UpdateFlowSiteRequest): UpdateFlowSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateFlowSiteEx(request, headers, runtime);
}

/**
 * Description: 修改站点信息
 * Summary: 修改站点信息
 */
async function updateFlowSiteEx(request: UpdateFlowSiteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFlowSiteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.site.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteFlowSiteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 操作人
  operator: string(name='operator'),
  // 站点 ID
  id: long(name='id'),
}

model DeleteFlowSiteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除站点
 * Summary: 删除站点
 */
async function deleteFlowSite(request: DeleteFlowSiteRequest): DeleteFlowSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteFlowSiteEx(request, headers, runtime);
}

/**
 * Description: 删除站点
 * Summary: 删除站点
 */
async function deleteFlowSiteEx(request: DeleteFlowSiteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFlowSiteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.site.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateOpsplanRestartRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 是否自动执行
  autoExecute?: boolean(name='auto_execute'),
  // 运维单扩展信息，jsonStr格式
  context?: string(name='context'),
  // 容器服务间依赖顺序。
  // e.g 先发 A，B， 再发C， D
  // {"groups": [{container_services: [{"name": A}, {"name": B}]}, {"container_services": [{"name": C}, {"name": D}]}]}
  dependency?: OpsContainerServiceChain(name='dependency'),
  // 在具体分组策略下，每个执行单元（部署单元，机房等）内部的分组个数。
  groupAmount: long(name='group_amount'),
  // 用户可自定义分组发布的顺序，结合具体的分组策略并通过指定具体分组维度对应的名称生效。
  // e.g, 当分组策略为机房时，可以指定先发机房A，再发机房B ["A", "B"]
  groupOrders?: [ string ](name='group_orders'),
  // 分组策略（维度）
  // 按部署单元（CELL） - 按部署单元依次重启
  // 按机房（ZONE）- 按机房依次重启
  // 按逻辑单元（UNIT） - 按逻辑单元重启
  // 共分一组（ALL） - 所有容器一起重启，仍遵循分组个数控制
  groupStrategy: string(name='group_strategy'),
  // 是否需要beta卡点
  needBeta: boolean(name='need_beta'),
  // 限定操作的部署单元
  restrictedCells?: [ string ](name='restricted_cells'),
  // 限定操作的机房
  restrictedZones?: [ string ](name='restricted_zones'),
  // 选定的容器服务列表
  selectedContainerServices: OpsContainerServiceGroup(name='selected_container_services'),
  // 重启单标题
  title: string(name='title'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 命名空间
  namespace: string(name='namespace'),
}

model CreateOpsplanRestartResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 运维单号
  operationId?: string(name='operation_id'),
}

/**
 * Description: 指定应用或指定pods创建重启运维单
 * Summary: 创建重启运维单
 */
async function createOpsplanRestart(request: CreateOpsplanRestartRequest): CreateOpsplanRestartResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createOpsplanRestartEx(request, headers, runtime);
}

/**
 * Description: 指定应用或指定pods创建重启运维单
 * Summary: 创建重启运维单
 */
async function createOpsplanRestartEx(request: CreateOpsplanRestartRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateOpsplanRestartResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.opsplan.restart.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateContainerserviceCommentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // wsg
  workspaceGroup: string(name='workspace_group'),
  // fed namespace
  namespace: string(name='namespace'),
  // container service name
  name: string(name='name'),
  // specific container service revision
  revision: string(name='revision'),
  // 版本注释
  comment?: string(name='comment'),
}

model UpdateContainerserviceCommentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 容器应用服务revision添加备注
 * Summary: 容器应用服务revision添加备注
 */
async function updateContainerserviceComment(request: UpdateContainerserviceCommentRequest): UpdateContainerserviceCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateContainerserviceCommentEx(request, headers, runtime);
}

/**
 * Description: 容器应用服务revision添加备注
 * Summary: 容器应用服务revision添加备注
 */
async function updateContainerserviceCommentEx(request: UpdateContainerserviceCommentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateContainerserviceCommentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.comment.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RollbackContainerserviceDeploymentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属工作空间组名称
  workspaceGroup: string(name='workspace_group'),
  // 容器服务名字
  containerServiceName: string(name='container_service_name'),
  // 所属命名空间名称
  namespace: string(name='namespace'),
  // 回滚的版本
  revision: string(name='revision'),
  // 部署单ID
  operationId: string(name='operation_id'),
  // 操作人账号
  operator: string(name='operator'),
  // 分组数，默认为3
  groupCount?: long(name='group_count'),
  // 回滚时的分组策略，取值为： QUICK：快速分组； EACH_ONE：每台一组； UNIT：按逻辑单元分组； CELL：按部署单元分组； 默认为CELL
  groupStrategy?: string(name='group_strategy'),
  // 回滚原因
  reason: string(name='reason'),
}

model RollbackContainerserviceDeploymentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 回滚容器服务到指定版本
 * Summary: 回滚容器服务到指定版本
 */
async function rollbackContainerserviceDeployment(request: RollbackContainerserviceDeploymentRequest): RollbackContainerserviceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return rollbackContainerserviceDeploymentEx(request, headers, runtime);
}

/**
 * Description: 回滚容器服务到指定版本
 * Summary: 回滚容器服务到指定版本
 */
async function rollbackContainerserviceDeploymentEx(request: RollbackContainerserviceDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RollbackContainerserviceDeploymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.deployment.rollback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFlowUidinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 是否弹性（默认 false）
  elastic?: boolean(name='elastic'),
  // 是否灰度（默认 false）
  gray?: boolean(name='gray'),
  // 是否压测（默认 false）
  press?: boolean(name='press'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model QueryFlowUidinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // UID 列表
  uidInfoList?: [ UidInfo ](name='uid_info_list'),
}

/**
 * Description: 查询 uid 信息
 * Summary: 查询 uid 信息
 */
async function queryFlowUidinfo(request: QueryFlowUidinfoRequest): QueryFlowUidinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFlowUidinfoEx(request, headers, runtime);
}

/**
 * Description: 查询 uid 信息
 * Summary: 查询 uid 信息
 */
async function queryFlowUidinfoEx(request: QueryFlowUidinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFlowUidinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.uidinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFlowSiteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model QueryFlowSiteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前环境的站点列表
  sites?: [ PushSite ](name='sites'),
}

/**
 * Description: 查询站点
 * Summary: 查询站点
 */
async function queryFlowSite(request: QueryFlowSiteRequest): QueryFlowSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFlowSiteEx(request, headers, runtime);
}

/**
 * Description: 查询站点
 * Summary: 查询站点
 */
async function queryFlowSiteEx(request: QueryFlowSiteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFlowSiteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.site.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 部署单元名称。
  name: string(name='name'),
  // 所属环境信息。
  workspaceGroup: string(name='workspace_group'),
  // 所属工作空间名称。
  workspace: string(name='workspace'),
}

model GetCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 部署单元信息。
  cell?: Cell(name='cell'),
}

/**
 * Description: 查询部署单元信息
 * Summary: 查询部署单元信息
 */
async function getCell(request: GetCellRequest): GetCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getCellEx(request, headers, runtime);
}

/**
 * Description: 查询部署单元信息
 * Summary: 查询部署单元信息
 */
async function getCellEx(request: GetCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cell.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetCellgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属环境信息。
  workspaceGroup: string(name='workspace_group'),
  // 逻辑单元名称。
  name: string(name='name'),
}

model GetCellgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 逻辑单元信息。
  cellGroup?: CellGroup(name='cell_group'),
}

/**
 * Description: 查询逻辑单元信息。
 * Summary: 查询逻辑单元信息。
 */
async function getCellgroup(request: GetCellgroupRequest): GetCellgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getCellgroupEx(request, headers, runtime);
}

/**
 * Description: 查询逻辑单元信息。
 * Summary: 查询逻辑单元信息。
 */
async function getCellgroupEx(request: GetCellgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCellgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cellgroup.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 蓝绿着色信息。
  color?: string(name='color'),
  // 是否灰度。
  isGray?: boolean(name='is_gray'),
  // 部署单元名称。
  name: string(name='name'),
  // 默认权重。
  weight?: long(name='weight'),
  // 所属环境信息。
  workspaceGroup: string(name='workspace_group'),
  // 所属工作空间名称。
  workspace: string(name='workspace'),
}

model UpdateCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新部署单元信息。
 * Summary: 更新部署单元信息。
 */
async function updateCell(request: UpdateCellRequest): UpdateCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateCellEx(request, headers, runtime);
}

/**
 * Description: 更新部署单元信息。
 * Summary: 更新部署单元信息。
 */
async function updateCellEx(request: UpdateCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cell.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListEventsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 集群名
  cluster: string(name='cluster'),
  // 容器名称
  containerName?: string(name='container_name'),
  // pod名称
  name: string(name='name'),
  // namespace
  namespace: string(name='namespace'),
  //  pod uid
  uid: string(name='uid'),
  // wsg
  workspaceGroup: string(name='workspace_group'),
}

model ListEventsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 事件列表
  events?: [ KubeEvent ](name='events'),
}

/**
 * Description: 查询Pod/容器事件列表
 * Summary: 查询Pod/容器事件列表
 */
async function listEvents(request: ListEventsRequest): ListEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listEventsEx(request, headers, runtime);
}

/**
 * Description: 查询Pod/容器事件列表
 * Summary: 查询Pod/容器事件列表
 */
async function listEventsEx(request: ListEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEventsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.events.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListRegionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model ListRegionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 地域列表
  regions?: [ Region ](name='regions'),
}

/**
 * Description: 获取地域信息
 * Summary: 获取地域信息
 */
async function listRegion(request: ListRegionRequest): ListRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listRegionEx(request, headers, runtime);
}

/**
 * Description: 获取地域信息
 * Summary: 获取地域信息
 */
async function listRegionEx(request: ListRegionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRegionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.region.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListZoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model ListZoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可用区列表
  zones?: [ Zone ](name='zones'),
}

/**
 * Description: 可用区列表
 * Summary: 可用区列表
 */
async function listZone(request: ListZoneRequest): ListZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listZoneEx(request, headers, runtime);
}

/**
 * Description: 可用区列表
 * Summary: 可用区列表
 */
async function listZoneEx(request: ListZoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListZoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.zone.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPodLogRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 集群名称
  cluster: string(name='cluster'),
  // 容器名称
  // The container for which to stream logs. Defaults to only container if there is one container in the pod. (optional)
  containerName?: string(name='container_name'),
  // namespace
  namespace: string(name='namespace'),
  // pod名称
  podName: string(name='pod_name'),
  // A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. (optional)
  sinceSeconds?: long(name='since_seconds'),
  // the number of lines from the end of the logs to show
  tailLines?: long(name='tail_lines'),
  // If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. (optional)
  timestamps?: boolean(name='timestamps'),
  // cluster对应的aks中minion cluster的id
  minionClusterId?: string(name='minion_cluster_id'),
}

model QueryPodLogResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // the logs
  data?: string(name='data'),
}

/**
 * Description: 查询pod下container 日志
 * Summary: 查询pod日志
 */
async function queryPodLog(request: QueryPodLogRequest): QueryPodLogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPodLogEx(request, headers, runtime);
}

/**
 * Description: 查询pod下container 日志
 * Summary: 查询pod日志
 */
async function queryPodLogEx(request: QueryPodLogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPodLogResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.pod.log.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSpannerClusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 容器的CPU个数(Core)
  containerCpu: long(name='container_cpu'),
  // 容器是否独占CPU
  containerCpuExclusive: boolean(name='container_cpu_exclusive'),
  // 容器所在的物理机节点标签
  containerDeviceType: string(name='container_device_type'),
  // 容器的磁盘大小(G)
  containerDisk: long(name='container_disk'),
  // 容器的内存大小（G）
  containerMem: long(name='container_mem'),
  // 容器网络
  containerNetwork: string(name='container_network'),
  // 集群名称
  name: string(name='name'),
  // 集群单元类型，默认为 0 : 
  // 0 - 容器
  unitType?: long(name='unit_type'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 集群网络类型，internet/intranet/multidomain/office
  addressType: string(name='address_type'),
}

model CreateSpannerClusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 集群id
  clusterId?: string(name='cluster_id'),
}

/**
 * Description: 创建spanner集群
 * Summary: 创建spanner集群
 */
async function createSpannerCluster(request: CreateSpannerClusterRequest): CreateSpannerClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSpannerClusterEx(request, headers, runtime);
}

/**
 * Description: 创建spanner集群
 * Summary: 创建spanner集群
 */
async function createSpannerClusterEx(request: CreateSpannerClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSpannerClusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.spanner.cluster.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSpannerClusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 集群id
  clusterId: string(name='cluster_id'),
}

model GetSpannerClusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // spanner 集群信息
  data?: SpannerClusterInfo(name='data'),
}

/**
 * Description: 获取集群详情
 * Summary: 获取集群详情
 */
async function getSpannerCluster(request: GetSpannerClusterRequest): GetSpannerClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSpannerClusterEx(request, headers, runtime);
}

/**
 * Description: 获取集群详情
 * Summary: 获取集群详情
 */
async function getSpannerClusterEx(request: GetSpannerClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSpannerClusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.spanner.cluster.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ScaleSpannerClusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 集群id
  clusterId: string(name='cluster_id'),
  // 需要扩容的单元数目
  containerCount: long(name='container_count'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model ScaleSpannerClusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 集群id
  clusterId?: string(name='cluster_id'),
}

/**
 * Description: 扩容spanner集群
 * Summary: 扩容spanner集群
 */
async function scaleSpannerCluster(request: ScaleSpannerClusterRequest): ScaleSpannerClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return scaleSpannerClusterEx(request, headers, runtime);
}

/**
 * Description: 扩容spanner集群
 * Summary: 扩容spanner集群
 */
async function scaleSpannerClusterEx(request: ScaleSpannerClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ScaleSpannerClusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.spanner.cluster.scale', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySpannerClusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model QuerySpannerClusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // spanner集群列表
  list?: [ SpannerClusterInfo ](name='list'),
}

/**
 * Description: 查询集群列表
 * Summary: 查询集群列表
 */
async function querySpannerCluster(request: QuerySpannerClusterRequest): QuerySpannerClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySpannerClusterEx(request, headers, runtime);
}

/**
 * Description: 查询集群列表
 * Summary: 查询集群列表
 */
async function querySpannerClusterEx(request: QuerySpannerClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySpannerClusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.spanner.cluster.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSpannerClusterstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 集群id
  clusterId: string(name='cluster_id'),
  // 设置集群的状态： 1 运行状态  2 维护状态
  status: long(name='status'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model UpdateSpannerClusterstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新spanner集群状态
 * Summary: 更新spanner集群状态
 */
async function updateSpannerClusterstatus(request: UpdateSpannerClusterstatusRequest): UpdateSpannerClusterstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSpannerClusterstatusEx(request, headers, runtime);
}

/**
 * Description: 更新spanner集群状态
 * Summary: 更新spanner集群状态
 */
async function updateSpannerClusterstatusEx(request: UpdateSpannerClusterstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSpannerClusterstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.spanner.clusterstatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSpannerUnitstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 集群id
  clusterId: string(name='cluster_id'),
  // 容器id列表
  containerIds: [ string ](name='container_ids'),
  // 集群单元状态： 1-下线状态 2- 上线状态 3-删除状态
  status: long(name='status'),
}

model UpdateSpannerUnitstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新集群单元状态
 * Summary: 更新集群单元状态
 */
async function updateSpannerUnitstatus(request: UpdateSpannerUnitstatusRequest): UpdateSpannerUnitstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSpannerUnitstatusEx(request, headers, runtime);
}

/**
 * Description: 更新集群单元状态
 * Summary: 更新集群单元状态
 */
async function updateSpannerUnitstatusEx(request: UpdateSpannerUnitstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSpannerUnitstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.spanner.unitstatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelOpsplanServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 发布单下应用服务对应的发布id
  id?: string(name='id'),
  // 取消原因
  reason: string(name='reason'),
  // 操作人账号，lks1.23.0才支持
  operator?: string(name='operator'),
  // [huanyu场景使用]huanyu变更单唯一id
  huanyuExecNo?: string(name='huanyu_exec_no'),
}

model CancelOpsplanServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 取消应用服务发布|运维
 * Summary: 取消应用服务发布|运维
 */
async function cancelOpsplanService(request: CancelOpsplanServiceRequest): CancelOpsplanServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelOpsplanServiceEx(request, headers, runtime);
}

/**
 * Description: 取消应用服务发布|运维
 * Summary: 取消应用服务发布|运维
 */
async function cancelOpsplanServiceEx(request: CancelOpsplanServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelOpsplanServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.opsplan.service.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSystemUrlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspaceGroup name
  workspaceGroup?: string(name='workspace_group'),
}

model ListSystemUrlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 系统配置的url列表
  urlList?: [ SystemURL ](name='url_list'),
}

/**
 * Description: 查询系统配置url
 * Summary: 系统url查询
 */
async function listSystemUrl(request: ListSystemUrlRequest): ListSystemUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSystemUrlEx(request, headers, runtime);
}

/**
 * Description: 查询系统配置url
 * Summary: 系统url查询
 */
async function listSystemUrlEx(request: ListSystemUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSystemUrlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.system.url.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFlowRecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app 名称
  app?: string(name='app'),
  // 结束时间
  endTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='end_time'),
  // 查询页
  pageNo?: long(name='page_no'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 推送状态，可选（SUCCESS，FAILED，INVALID_REQUEST，NO_RECORD，SYSTEM_EXCEPTION，PARAM_QUERY_ERROR，PARAM_INVALID）
  resultCode?: string(name='result_code'),
  // 开始时间
  startTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_time'),
  // 环境
  workspaceGroup: string(name='workspace_group'),
  // 规则类型
  ruleType?: string(name='rule_type'),
}

model QueryFlowRecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 推送记录
  data?: [ DrmOpsRecord ](name='data'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询流量推送记录
 * Summary: 查询
 */
async function queryFlowRecord(request: QueryFlowRecordRequest): QueryFlowRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFlowRecordEx(request, headers, runtime);
}

/**
 * Description: 查询流量推送记录
 * Summary: 查询
 */
async function queryFlowRecordEx(request: QueryFlowRecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFlowRecordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.record.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveFlowEnvrelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 目标环境
  dest: string(name='dest'),
  // 源环境
  src: string(name='src'),
  // 关联关系：可选（PROD，GRAY）
  type: string(name='type'),
  // 环境
  workspaceGroup: string(name='workspace_group'),
  // 操作人
  operator: string(name='operator'),
}

model SaveFlowEnvrelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 保存环境关联
 * Summary: 保存环境关联
 */
async function saveFlowEnvrel(request: SaveFlowEnvrelRequest): SaveFlowEnvrelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveFlowEnvrelEx(request, headers, runtime);
}

/**
 * Description: 保存环境关联
 * Summary: 保存环境关联
 */
async function saveFlowEnvrelEx(request: SaveFlowEnvrelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveFlowEnvrelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.envrel.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteFlowEnvrelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 目标环境
  dest: string(name='dest'),
  // 源环境
  src: string(name='src'),
  // 关联类型（PROD，GRAY）
  type: string(name='type'),
  // 环境
  workspaceGroup: string(name='workspace_group'),
  // 操作人
  operator: string(name='operator'),
}

model DeleteFlowEnvrelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除环境关联
 * Summary: 删除环境关联
 */
async function deleteFlowEnvrel(request: DeleteFlowEnvrelRequest): DeleteFlowEnvrelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteFlowEnvrelEx(request, headers, runtime);
}

/**
 * Description: 删除环境关联
 * Summary: 删除环境关联
 */
async function deleteFlowEnvrelEx(request: DeleteFlowEnvrelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFlowEnvrelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.envrel.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFlowEnvrelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 环境
  workspaceGroup: string(name='workspace_group'),
  // 源环境
  src: string(name='src'),
  // 关联类型
  type: string(name='type'),
}

model QueryFlowEnvrelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 源环境
  src?: string(name='src'),
  // 目标环境
  dest?: string(name='dest'),
  // 关联类型（PROD，GRAY）
  type?: string(name='type'),
  // 创建时间
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time'),
  // 修改时间
  modifiedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='modified_time'),
}

/**
 * Description: 查询关联
 * Summary: 查询关联
 */
async function queryFlowEnvrel(request: QueryFlowEnvrelRequest): QueryFlowEnvrelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFlowEnvrelEx(request, headers, runtime);
}

/**
 * Description: 查询关联
 * Summary: 查询关联
 */
async function queryFlowEnvrelEx(request: QueryFlowEnvrelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFlowEnvrelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.envrel.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFlowSitecellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 异构机房部署单元
  name: string(name='name'),
  // 异构机房地域
  region: string(name='region'),
  // 异构机房名称
  siteName: string(name='site_name'),
  // 环境
  workspaceGroup: string(name='workspace_group'),
  // 操作人
  operator: string(name='operator'),
}

model CreateFlowSitecellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建异构机房部署单元
 * Summary: 创建异构机房部署单元
 */
async function createFlowSitecell(request: CreateFlowSitecellRequest): CreateFlowSitecellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFlowSitecellEx(request, headers, runtime);
}

/**
 * Description: 创建异构机房部署单元
 * Summary: 创建异构机房部署单元
 */
async function createFlowSitecellEx(request: CreateFlowSitecellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFlowSitecellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.sitecell.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteFlowSitecellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 部署单元
  name: string(name='name'),
  // 异构机房名
  siteName: string(name='site_name'),
  // 环境
  workspaceGroup: string(name='workspace_group'),
  // 操作人
  operator: string(name='operator'),
}

model DeleteFlowSitecellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除异构机房部署单元
 * Summary: 删除异构机房部署单元
 */
async function deleteFlowSitecell(request: DeleteFlowSitecellRequest): DeleteFlowSitecellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteFlowSitecellEx(request, headers, runtime);
}

/**
 * Description: 删除异构机房部署单元
 * Summary: 删除异构机房部署单元
 */
async function deleteFlowSitecellEx(request: DeleteFlowSitecellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFlowSitecellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.sitecell.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFlowSitecellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 异构机房名
  siteName: string(name='site_name'),
  // 环境
  workspaceGroup: string(name='workspace_group'),
}

model QueryFlowSitecellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 部署单元列表
  siteCells?: [ SiteCell ](name='site_cells'),
}

/**
 * Description: 查询异构机房部署单元
 * Summary: 查询异构机房部署单元
 */
async function queryFlowSitecell(request: QueryFlowSitecellRequest): QueryFlowSitecellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFlowSitecellEx(request, headers, runtime);
}

/**
 * Description: 查询异构机房部署单元
 * Summary: 查询异构机房部署单元
 */
async function queryFlowSitecellEx(request: QueryFlowSitecellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFlowSitecellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.sitecell.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetOpsplanServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 发布单下应用服务对应的发布id
  id: string(name='id'),
}

model GetOpsplanServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发布应用服务详情
  data?: AppSimpleInfo(name='data'),
}

/**
 * Description: 获取发布单下应用服务详情
 * Summary: 获取发布单下应用服务详情
 */
async function getOpsplanService(request: GetOpsplanServiceRequest): GetOpsplanServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getOpsplanServiceEx(request, headers, runtime);
}

/**
 * Description: 获取发布单下应用服务详情
 * Summary: 获取发布单下应用服务详情
 */
async function getOpsplanServiceEx(request: GetOpsplanServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetOpsplanServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.opsplan.service.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFlowRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 环境
  workspaceGroup: string(name='workspace_group'),
  // 规则类型：ZONE_INFO,ELASTIC_BIZ_RULE,ZONE_COLOR
  ruleType: string(name='rule_type'),
}

model QueryFlowRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 规则文本
  rule?: string(name='rule'),
}

/**
 * Description: 获取当前生效的路由规则
 * Summary: 获取当前生效的路由规则
 */
async function queryFlowRule(request: QueryFlowRuleRequest): QueryFlowRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFlowRuleEx(request, headers, runtime);
}

/**
 * Description: 获取当前生效的路由规则
 * Summary: 获取当前生效的路由规则
 */
async function queryFlowRuleEx(request: QueryFlowRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFlowRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.rule.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFederationDeploymentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属应用
  app: string(name='app'),
  // clusters
  clusters: [ string ](name='clusters'),
  // FedDeploymentClusterOverride描述
  clusterOverrides?: [ FedDeploymentClusterOverride ](name='cluster_overrides'),
  // DNS配置
  dnsPolicy?: string(name='dns_policy'),
  // Host networking requested for this pod
  hostNetwork?: boolean(name='host_network'),
  // 名称
  name: string(name='name'),
  // 命名空间
  namespace: string(name='namespace'),
  // Pod模板描述
  podSpec: PodSpec(name='pod_spec'),
  // Deployment 副本数
  replicas: long(name='replicas'),
  // Pod volume list
  volumes?: [ Volume ](name='volumes'),
  // 环境组名称
  workspaceGroupName: string(name='workspace_group_name'),
}

model CreateFederationDeploymentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // name
  name?: string(name='name'),
  // 命名空间
  namespace?: string(name='namespace'),
}

/**
 * Description: 创建FedDeployment
 * Summary: 创建FedDeployment
 */
async function createFederationDeployment(request: CreateFederationDeploymentRequest): CreateFederationDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFederationDeploymentEx(request, headers, runtime);
}

/**
 * Description: 创建FedDeployment
 * Summary: 创建FedDeployment
 */
async function createFederationDeploymentEx(request: CreateFederationDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFederationDeploymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.deployment.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadbalancerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 负载均衡类型。
  type: string(name='type'),
  // 工作空间组名称。
  workspaceGroup: string(name='workspace_group'),
  // 所属namespace名称。
  namespace: string(name='namespace'),
}

model QueryLoadbalancerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 负载均衡实例列表。
  loadBalancers?: [ LoadBalancerInstance ](name='load_balancers'),
}

/**
 * Description: 查询负责均衡实例。[底层元数据不具备之前，先放在LHC里实现]
 * Summary: 查询负责均衡实例。
 */
async function queryLoadbalancer(request: QueryLoadbalancerRequest): QueryLoadbalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadbalancerEx(request, headers, runtime);
}

/**
 * Description: 查询负责均衡实例。[底层元数据不具备之前，先放在LHC里实现]
 * Summary: 查询负责均衡实例。
 */
async function queryLoadbalancerEx(request: QueryLoadbalancerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadbalancerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.loadbalancer.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListContainerserviceServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 容器服务名称
  containerServiceName: string(name='container_service_name'),
  // 命名空间名称
  namespace: string(name='namespace'),
  // 工作空间组名称
  workspaceGroup: string(name='workspace_group'),
}

model ListContainerserviceServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 容器服务 Service 列表
  services?: [ ServiceInfo ](name='services'),
}

/**
 * Description: 查询容器服务 Service 列表。
 * Summary: 查询容器服务 Service 列表。
 */
async function listContainerserviceService(request: ListContainerserviceServiceRequest): ListContainerserviceServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listContainerserviceServiceEx(request, headers, runtime);
}

/**
 * Description: 查询容器服务 Service 列表。
 * Summary: 查询容器服务 Service 列表。
 */
async function listContainerserviceServiceEx(request: ListContainerserviceServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListContainerserviceServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.service.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSidecarRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region_id
  regionId?: string(name='region_id'),
  // scope
  scope: string(name='scope'),
  // workspace
  workspace?: string(name='workspace'),
  // workspace_group_id
  workspaceGroupId?: string(name='workspace_group_id'),
}

model ListSidecarResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // sidecars
  sidecars?: [ SideCar ](name='sidecars'),
}

/**
 * Description: 查询sidecar元信息列表
 * Summary: 查询sidecar元信息列表
 */
async function listSidecar(request: ListSidecarRequest): ListSidecarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSidecarEx(request, headers, runtime);
}

/**
 * Description: 查询sidecar元信息列表
 * Summary: 查询sidecar元信息列表
 */
async function listSidecarEx(request: ListSidecarRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSidecarResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecar.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSidecarTemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region_id
  regionId?: string(name='region_id'),
  // sidecar生效范围：workspace、workspace_group、region
  scope: string(name='scope'),
  // sidecar_name
  sidecarName?: string(name='sidecar_name'),
  // sidecar version
  sidecarVersion?: string(name='sidecar_version'),
  // 环境
  workspace?: string(name='workspace'),
  // workspace_group_id
  workspaceGroupId?: string(name='workspace_group_id'),
}

model ListSidecarTemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // sidecar 模板列表
  sidecarTemplates?: [ SidecarTemplate ](name='sidecar_templates'),
}

/**
 * Description: list template
 * Summary: list template
 */
async function listSidecarTemplate(request: ListSidecarTemplateRequest): ListSidecarTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSidecarTemplateEx(request, headers, runtime);
}

/**
 * Description: list template
 * Summary: list template
 */
async function listSidecarTemplateEx(request: ListSidecarTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSidecarTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecar.template.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSidecarTemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region_id
  regionId?: string(name='region_id'),
  // sidecar生效范围：workspace、workspace_group、region
  scope: string(name='scope'),
  // sidecar 名称
  sidecarName: string(name='sidecar_name'),
  // sidecar 版本
  sidecarVersion: string(name='sidecar_version'),
  // 环境
  workspace?: string(name='workspace'),
  // wsg id
  workspaceGroupId?: string(name='workspace_group_id'),
}

model GetSidecarTemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // sidecar 版本详情
  sidecarTemplate?: SidecarTemplate(name='sidecar_template'),
}

/**
 * Description: 获取sidecar版本详情
 * Summary: 版本详情
 */
async function getSidecarTemplate(request: GetSidecarTemplateRequest): GetSidecarTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSidecarTemplateEx(request, headers, runtime);
}

/**
 * Description: 获取sidecar版本详情
 * Summary: 版本详情
 */
async function getSidecarTemplateEx(request: GetSidecarTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSidecarTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecar.template.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetFederationDeploymentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // FedDeployment名称
  name: string(name='name'),
  // workspaceGroup 名称
  // 
  workspaceGroupName: string(name='workspace_group_name'),
}

model GetFederationDeploymentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 联邦无状态工作负载
  data?: FederatedDeployment(name='data'),
}

/**
 * Description: 获取FedDeployment详情
 * Summary: 获取FedDeployment详情
 */
async function getFederationDeployment(request: GetFederationDeploymentRequest): GetFederationDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getFederationDeploymentEx(request, headers, runtime);
}

/**
 * Description: 获取FedDeployment详情
 * Summary: 获取FedDeployment详情
 */
async function getFederationDeploymentEx(request: GetFederationDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFederationDeploymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.deployment.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListFederationDeploymentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // namespace
  namespace: string(name='namespace'),
  // 环境组名称
  workspaceGroupName: string(name='workspace_group_name'),
}

model ListFederationDeploymentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // FederatedDeploymment列表
  data?: [ FederatedDeployment ](name='data'),
}

/**
 * Description: 获取FederatedDeployment列表信息
 * Summary: 获取FedDeploy列表
 */
async function listFederationDeployment(request: ListFederationDeploymentRequest): ListFederationDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listFederationDeploymentEx(request, headers, runtime);
}

/**
 * Description: 获取FederatedDeployment列表信息
 * Summary: 获取FedDeploy列表
 */
async function listFederationDeploymentEx(request: ListFederationDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFederationDeploymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.deployment.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteFederationDeploymentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // FedDeployment名称
  name: string(name='name'),
  // 环境组名称
  workspaceGroupName: string(name='workspace_group_name'),
}

model DeleteFederationDeploymentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 删除成功标志
  success?: boolean(name='success'),
}

/**
 * Description: 删除FedDeployment
 * Summary: 删除FedDeployment
 */
async function deleteFederationDeployment(request: DeleteFederationDeploymentRequest): DeleteFederationDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteFederationDeploymentEx(request, headers, runtime);
}

/**
 * Description: 删除FedDeployment
 * Summary: 删除FedDeployment
 */
async function deleteFederationDeploymentEx(request: DeleteFederationDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFederationDeploymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.federation.deployment.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetFlowDefaultuidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 环境
  workspaceGroup: string(name='workspace_group'),
  // 是否压测，默认 false
  press?: boolean(name='press'),
}

model SetFlowDefaultuidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设置当前uid规则为默认uid规则
 * Summary: 设置当前uid规则为默认uid规则
 */
async function setFlowDefaultuid(request: SetFlowDefaultuidRequest): SetFlowDefaultuidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setFlowDefaultuidEx(request, headers, runtime);
}

/**
 * Description: 设置当前uid规则为默认uid规则
 * Summary: 设置当前uid规则为默认uid规则
 */
async function setFlowDefaultuidEx(request: SetFlowDefaultuidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetFlowDefaultuidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.defaultuid.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartOpsplanServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用服务发布ID
  id: string(name='id'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 操作人账号，lks1.23.0才支持
  operator?: string(name='operator'),
}

model StartOpsplanServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 开始执行应用服务发布|运维
 * Summary: 开始执行应用服务发布|运维
 */
async function startOpsplanService(request: StartOpsplanServiceRequest): StartOpsplanServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startOpsplanServiceEx(request, headers, runtime);
}

/**
 * Description: 开始执行应用服务发布|运维
 * Summary: 开始执行应用服务发布|运维
 */
async function startOpsplanServiceEx(request: StartOpsplanServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartOpsplanServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.opsplan.service.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmOpsplanServicerollbackRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用服务发布id
  id: string(name='id'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model ConfirmOpsplanServicerollbackResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 回滚确认应用服务
 * Summary: 回滚确认应用服务
 */
async function confirmOpsplanServicerollback(request: ConfirmOpsplanServicerollbackRequest): ConfirmOpsplanServicerollbackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmOpsplanServicerollbackEx(request, headers, runtime);
}

/**
 * Description: 回滚确认应用服务
 * Summary: 回滚确认应用服务
 */
async function confirmOpsplanServicerollbackEx(request: ConfirmOpsplanServicerollbackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmOpsplanServicerollbackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.opsplan.servicerollback.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryOpsplanServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用服务发布id
  id: string(name='id'),
  // 操作人账号，lks1.23.0才支持
  operator?: string(name='operator'),
}

model RetryOpsplanServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 重试发布服务
 * Summary: 重试发布服务
 */
async function retryOpsplanService(request: RetryOpsplanServiceRequest): RetryOpsplanServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryOpsplanServiceEx(request, headers, runtime);
}

/**
 * Description: 重试发布服务
 * Summary: 重试发布服务
 */
async function retryOpsplanServiceEx(request: RetryOpsplanServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryOpsplanServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.opsplan.service.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFlowElasticsceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 环境
  workspaceGroup: string(name='workspace_group'),
}

model QueryFlowElasticsceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 弹性场景列表
  scenes?: [ ElasticScene ](name='scenes'),
}

/**
 * Description: 查询弹性场景
 * Summary: 查询弹性场景
 */
async function queryFlowElasticscene(request: QueryFlowElasticsceneRequest): QueryFlowElasticsceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFlowElasticsceneEx(request, headers, runtime);
}

/**
 * Description: 查询弹性场景
 * Summary: 查询弹性场景
 */
async function queryFlowElasticsceneEx(request: QueryFlowElasticsceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFlowElasticsceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticscene.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFlowElasticruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 环境
  workspaceGroup: string(name='workspace_group'),
  // 规则名称
  name?: string(name='name'),
  // 所属类型
  type?: string(name='type'),
  // 所属应用名称
  appName?: string(name='app_name'),
  // 场景名称
  sceneName?: string(name='scene_name'),
  // 分页大小，默认 10
  pageSize?: long(name='page_size'),
  // 当前页，默认 1
  pageNo?: long(name='page_no'),
}

model QueryFlowElasticruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 弹性规则列表
  elasticRules?: [ ElasticRuleView ](name='elastic_rules'),
  // 总数
  total?: long(name='total'),
  // 当前页
  pageNo?: long(name='page_no'),
  // 分页大小
  pageSize?: long(name='page_size'),
}

/**
 * Description: 查询弹性规则
 * Summary: 查询弹性规则
 */
async function queryFlowElasticrule(request: QueryFlowElasticruleRequest): QueryFlowElasticruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFlowElasticruleEx(request, headers, runtime);
}

/**
 * Description: 查询弹性规则
 * Summary: 查询弹性规则
 */
async function queryFlowElasticruleEx(request: QueryFlowElasticruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFlowElasticruleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticrule.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFlowElasticsubruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 环境
  workspaceGroup: string(name='workspace_group'),
  // 弹性规则ID
  elasticRuleId: long(name='elastic_rule_id'),
}

model QueryFlowElasticsubruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 子规则列表
  subRules?: [ ElasticSubRuleView ](name='sub_rules'),
}

/**
 * Description: 查询弹性子规则
 * Summary: 查询弹性子规则
 */
async function queryFlowElasticsubrule(request: QueryFlowElasticsubruleRequest): QueryFlowElasticsubruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFlowElasticsubruleEx(request, headers, runtime);
}

/**
 * Description: 查询弹性子规则
 * Summary: 查询弹性子规则
 */
async function queryFlowElasticsubruleEx(request: QueryFlowElasticsubruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFlowElasticsubruleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticsubrule.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFlowElasticvalueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 环境
  workspaceGroup: string(name='workspace_group'),
}

model QueryFlowElasticvalueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 弹性信息
  elasticInfo?: [ ElasticInfoView ](name='elastic_info'),
}

/**
 * Description: 查询当前弹性状态
 * Summary: 查询当前弹性状态
 */
async function queryFlowElasticvalue(request: QueryFlowElasticvalueRequest): QueryFlowElasticvalueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFlowElasticvalueEx(request, headers, runtime);
}

/**
 * Description: 查询当前弹性状态
 * Summary: 查询当前弹性状态
 */
async function queryFlowElasticvalueEx(request: QueryFlowElasticvalueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFlowElasticvalueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.flow.elasticvalue.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSystemSwitchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model ListSystemSwitchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 开关集合jarrya son string
  switches?: string(name='switches'),
}

/**
 * Description: 开关配置
 * Summary: 开关配置
 */
async function listSystemSwitch(request: ListSystemSwitchRequest): ListSystemSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSystemSwitchEx(request, headers, runtime);
}

/**
 * Description: 开关配置
 * Summary: 开关配置
 */
async function listSystemSwitchEx(request: ListSystemSwitchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSystemSwitchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.system.switch.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model LoadBuildpackDockerfileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 技术栈大版本
  techStack: string(name='tech_stack'),
  // 云原生技术栈版本
  techStackVersion: string(name='tech_stack_version'),
  // 应用包地址，可以为相对目录，或者远程可访问存储地址. 用于组装Dockerfile模板中对应的应用包获取地址
  packageUrl: string(name='package_url'),
}

model LoadBuildpackDockerfileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Dockerfile指令列表
  commands?: [ string ](name='commands'),
}

/**
 * Description: 获取云原生技术栈对应的Dockerfile
 * Summary: 获取技术栈对应的Dockerfile
 */
async function loadBuildpackDockerfile(request: LoadBuildpackDockerfileRequest): LoadBuildpackDockerfileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return loadBuildpackDockerfileEx(request, headers, runtime);
}

/**
 * Description: 获取云原生技术栈对应的Dockerfile
 * Summary: 获取技术栈对应的Dockerfile
 */
async function loadBuildpackDockerfileEx(request: LoadBuildpackDockerfileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): LoadBuildpackDockerfileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.buildpack.dockerfile.load', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateOpsplanPodofflineRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 是否自动执行
  autoExecute?: boolean(name='auto_execute'),
  // 运维单扩展信息，jsonStr格式
  context?: string(name='context'),
  // 容器服务间依赖顺序。 e.g 先发 A，B， 再发C， D {"groups": [{container_services: [{"name": A}, {"name": B}]}, {"container_services": [{"name": C}, {"name": D}]}]}
  dependency?: OpsContainerServiceChain(name='dependency'),
  // 在具体分组策略下，每个执行单元（部署单元，机房等）内部的分组个数。
  groupAmount: long(name='group_amount'),
  // 用户可自定义分组发布的顺序，结合具体的分组策略并通过指定具体分组维度对应的名称生效。 e.g, 当分组策略为机房时，可以指定先发机房A，再发机房B ["A", "B"]
  groupOrders?: [ string ](name='group_orders'),
  // 分组策略（维度）：
  // - 按部署单元（CELL），按部署单元依次缩容；
  // - 按机房（ZONE），按机房依次缩容；
  // - 按逻辑单元（UNIT），按逻辑单元缩容；
  // - 共分一组（ALL），所有容器一起缩容，仍遵循分组个数控制；
  groupStrategy: string(name='group_strategy'),
  // 命名空间
  namespace: string(name='namespace'),
  // 是否需要beta卡点
  needBeta: boolean(name='need_beta'),
  // 限定操作的部署单元
  restrictedCells?: [ string ](name='restricted_cells'),
  // 限定操作的机房
  restrictedZones?: [ string ](name='restricted_zones'),
  // 选定的容器服务列表
  selectedContainerServices: OpsContainerServiceGroup(name='selected_container_services'),
  // 缩容指定pod的标题
  title: string(name='title'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model CreateOpsplanPodofflineResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 运维单号
  operationId?: string(name='operation_id'),
}

/**
 * Description: 指定pod创建缩容运维单
 * Summary: 创建pod缩容运维单
 */
async function createOpsplanPodoffline(request: CreateOpsplanPodofflineRequest): CreateOpsplanPodofflineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createOpsplanPodofflineEx(request, headers, runtime);
}

/**
 * Description: 指定pod创建缩容运维单
 * Summary: 创建pod缩容运维单
 */
async function createOpsplanPodofflineEx(request: CreateOpsplanPodofflineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateOpsplanPodofflineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.opsplan.podoffline.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDbflowObtenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 描述信息
  description?: string(name='description'),
  // 租户扩展属性，格式为序列化后的json字符串
  extendProperties?: string(name='extend_properties'),
  // OB租户名称
  name: string(name='name'),
  // 用于存放对应的业务库租户类型：单库类型或分片库
  type: string(name='type'),
  // 租户存放的uid段，用于存放对应业务分片库
  uids?: [ long ](name='uids'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model CreateDbflowObtenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 添加OB租户信息以及对应的uid分片段
 * Summary: 添加OB租户信息
 */
async function createDbflowObtenant(request: CreateDbflowObtenantRequest): CreateDbflowObtenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDbflowObtenantEx(request, headers, runtime);
}

/**
 * Description: 添加OB租户信息以及对应的uid分片段
 * Summary: 添加OB租户信息
 */
async function createDbflowObtenantEx(request: CreateDbflowObtenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDbflowObtenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.dbflow.obtenant.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDbflowObtenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 租户类型GZONE|RZONE，分别用于存放单库或分片库
  type?: string(name='type'),
  // 租户名称前缀
  name?: string(name='name'),
  // 当前页码，默认为1
  pageNumber?: long(name='page_number'),
  // 单页个数，默认为10
  pageSize?: long(name='page_size'),
}

model QueryDbflowObtenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 租户列表
  list?: [ OBTenant ](name='list'),
  // 当前页码
  pageNumber?: long(name='page_number'),
  // 单页个数
  pageSize?: long(name='page_size'),
  // 总计
  totalCount?: long(name='total_count'),
}

/**
 * Description: 分页查询ob租户列表
 * Summary: 分页查询ob租户列表
 */
async function queryDbflowObtenant(request: QueryDbflowObtenantRequest): QueryDbflowObtenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDbflowObtenantEx(request, headers, runtime);
}

/**
 * Description: 分页查询ob租户列表
 * Summary: 分页查询ob租户列表
 */
async function queryDbflowObtenantEx(request: QueryDbflowObtenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDbflowObtenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.dbflow.obtenant.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDbflowObtenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // OB租户唯一标识
  id: string(name='id'),
  // OB租户名称
  name: string(name='name'),
  // 用于存放对应的业务库租户类型：单库类型或分片库
  type: string(name='type'),
  // 租户描述
  description?: string(name='description'),
  // 对应uid分片段，用于存放对应分片库
  uids?: [ long ](name='uids'),
  // 租户扩展属性，格式为序列化后的json字符串
  extendProperties?: string(name='extend_properties'),
}

model UpdateDbflowObtenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新OB租户信息，包括uid映射
 * Summary: 更新OB租户信息
 */
async function updateDbflowObtenant(request: UpdateDbflowObtenantRequest): UpdateDbflowObtenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDbflowObtenantEx(request, headers, runtime);
}

/**
 * Description: 更新OB租户信息，包括uid映射
 * Summary: 更新OB租户信息
 */
async function updateDbflowObtenantEx(request: UpdateDbflowObtenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDbflowObtenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.dbflow.obtenant.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDbflowObtenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 租户唯一标识
  id: string(name='id'),
}

model DeleteDbflowObtenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除PaaS中记录的OB租户信息，非实际OB租户删除
 * Summary: 删除PaaS中记录的OB租户信息
 */
async function deleteDbflowObtenant(request: DeleteDbflowObtenantRequest): DeleteDbflowObtenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDbflowObtenantEx(request, headers, runtime);
}

/**
 * Description: 删除PaaS中记录的OB租户信息，非实际OB租户删除
 * Summary: 删除PaaS中记录的OB租户信息
 */
async function deleteDbflowObtenantEx(request: DeleteDbflowObtenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDbflowObtenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.dbflow.obtenant.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateBuildpackNativetechstackversionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 技术栈类别
  techStack: string(name='tech_stack'),
  // 云原生技术栈版本名称
  techStackVersion: string(name='tech_stack_version'),
  // 基础镜像名称
  fromImage: string(name='from_image'),
  // 版本描述信息
  description?: string(name='description'),
  // 扩展指令列表
  extCommands?: [ string ](name='ext_commands'),
  // 扩展属性 - 表现为Map<String,String>序列化后的字符串
  extendProperties?: string(name='extend_properties'),
}

model UpdateBuildpackNativetechstackversionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新原生技术栈版本信息（Dockerfile模板信息）
 * Summary: 更新原生技术栈版本信息
 */
async function updateBuildpackNativetechstackversion(request: UpdateBuildpackNativetechstackversionRequest): UpdateBuildpackNativetechstackversionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateBuildpackNativetechstackversionEx(request, headers, runtime);
}

/**
 * Description: 更新原生技术栈版本信息（Dockerfile模板信息）
 * Summary: 更新原生技术栈版本信息
 */
async function updateBuildpackNativetechstackversionEx(request: UpdateBuildpackNativetechstackversionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateBuildpackNativetechstackversionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.buildpack.nativetechstackversion.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListWorkspacegroupRegionsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace group 名称
  // 
  workspaceGroupName: string(name='workspace_group_name'),
}

model ListWorkspacegroupRegionsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // region列表
  regions?: [ Region ](name='regions'),
}

/**
 * Description: 获取当前环境组的region列表信息
 * Summary: 获取环境组region信息
 */
async function listWorkspacegroupRegions(request: ListWorkspacegroupRegionsRequest): ListWorkspacegroupRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listWorkspacegroupRegionsEx(request, headers, runtime);
}

/**
 * Description: 获取当前环境组的region列表信息
 * Summary: 获取环境组region信息
 */
async function listWorkspacegroupRegionsEx(request: ListWorkspacegroupRegionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkspacegroupRegionsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.workspacegroup.regions.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListClusterInfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace group name
  // 
  workspaceGroup: string(name='workspace_group'),
}

model ListClusterInfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 集群列表
  data?: [ Cluster ](name='data'),
}

/**
 * Description: 获取集群列表信息
 * Summary: 获取集群列表
 */
async function listClusterInfo(request: ListClusterInfoRequest): ListClusterInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listClusterInfoEx(request, headers, runtime);
}

/**
 * Description: 获取集群列表信息
 * Summary: 获取集群列表
 */
async function listClusterInfoEx(request: ListClusterInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListClusterInfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cluster.info.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListClusterOverviewRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace group name
  // 
  workspaceGroup: string(name='workspace_group'),
}

model ListClusterOverviewResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 集群资源概览信息
  data?: [ ClusterStatus ](name='data'),
}

/**
 * Description: 获取集群资源状态信息
 * Summary: 获取集群资源状态信息
 */
async function listClusterOverview(request: ListClusterOverviewRequest): ListClusterOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listClusterOverviewEx(request, headers, runtime);
}

/**
 * Description: 获取集群资源状态信息
 * Summary: 获取集群资源状态信息
 */
async function listClusterOverviewEx(request: ListClusterOverviewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListClusterOverviewResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cluster.overview.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListCertificatesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model ListCertificatesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 证书列表。
  certificates?: [ string ](name='certificates'),
}

/**
 * Description: 查询ALB证书信息。
 * Summary: 查询ALB证书信息。
 */
async function listCertificates(request: ListCertificatesRequest): ListCertificatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listCertificatesEx(request, headers, runtime);
}

/**
 * Description: 查询ALB证书信息。
 * Summary: 查询ALB证书信息。
 */
async function listCertificatesEx(request: ListCertificatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCertificatesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.certificates.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListLoadbalancerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组名称。
  workspaceGroup: string(name='workspace_group'),
  // 命名空间名称。
  namespace?: string(name='namespace'),
}

model ListLoadbalancerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 已经被使用的lb iaas ids。
  boundIaasIds?: [ string ](name='bound_iaas_ids'),
}

/**
 * Description: 获取所有已被使用的lb iaas id。
 * Summary: 获取所有已被使用的lb iaas id。
 */
async function listLoadbalancer(request: ListLoadbalancerRequest): ListLoadbalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listLoadbalancerEx(request, headers, runtime);
}

/**
 * Description: 获取所有已被使用的lb iaas id。
 * Summary: 获取所有已被使用的lb iaas id。
 */
async function listLoadbalancerEx(request: ListLoadbalancerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListLoadbalancerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.loadbalancer.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetCloudconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model GetCloudconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cluod_config raw txt
  cloudConfig?: string(name='cloud_config'),
}

/**
 * Description: 获取cloudconfig当前配置
 * Summary: 获取cloudconfig当前配置
 */
async function getCloudconfig(request: GetCloudconfigRequest): GetCloudconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getCloudconfigEx(request, headers, runtime);
}

/**
 * Description: 获取cloudconfig当前配置
 * Summary: 获取cloudconfig当前配置
 */
async function getCloudconfigEx(request: GetCloudconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCloudconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cloudconfig.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateCloudconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cloud_config json描述
  cloudConfig: string(name='cloud_config'),
  // UPDATE或ROLLBACK
  option: string(name='option'),
}

model UpdateCloudconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新cloudconfig
 * Summary: 更新cloudconfig
 */
async function updateCloudconfig(request: UpdateCloudconfigRequest): UpdateCloudconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateCloudconfigEx(request, headers, runtime);
}

/**
 * Description: 更新cloudconfig
 * Summary: 更新cloudconfig
 */
async function updateCloudconfigEx(request: UpdateCloudconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateCloudconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cloudconfig.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListCloudconfigHistoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model ListCloudconfigHistoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 配置历史列表
  configLists?: [ CloudConfigEntity ](name='config_lists'),
}

/**
 * Description: 版本历史
 * Summary: 版本历史
 */
async function listCloudconfigHistory(request: ListCloudconfigHistoryRequest): ListCloudconfigHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listCloudconfigHistoryEx(request, headers, runtime);
}

/**
 * Description: 版本历史
 * Summary: 版本历史
 */
async function listCloudconfigHistoryEx(request: ListCloudconfigHistoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCloudconfigHistoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.cloudconfig.history.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSidecarOperationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 环境信息，对应workspace_group名称
  env: string(name='env'),
  // sidecar运维动作：
  // 接入 open
  // 升级 upgrade
  serviceKey: string(name='service_key'),
  // sidecar运维请求体
  executeTaskRequest: SidecarOperationTask(name='execute_task_request'),
}

model CreateSidecarOperationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // sidecar运维ID
  operationId?: string(name='operation_id'),
  // 跳转链接
  changeUrl?: string(name='change_url'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: sidecar运维能力创建（接入|升级）
 * Summary: sidecar运维创建（接入|升级）
 */
async function createSidecarOperation(request: CreateSidecarOperationRequest): CreateSidecarOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSidecarOperationEx(request, headers, runtime);
}

/**
 * Description: sidecar运维能力创建（接入|升级）
 * Summary: sidecar运维创建（接入|升级）
 */
async function createSidecarOperationEx(request: CreateSidecarOperationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSidecarOperationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecar.operation.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetrySidecarOperationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // operation ID
  operationId: string(name='operation_id'),
}

model RetrySidecarOperationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 跳转链接
  changeUrl?: string(name='change_url'),
  // sidecar运维请求ID
  operationId?: string(name='operation_id'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: 指定operationId重试sidecar运维
 * Summary: 重试sidecar运维
 */
async function retrySidecarOperation(request: RetrySidecarOperationRequest): RetrySidecarOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retrySidecarOperationEx(request, headers, runtime);
}

/**
 * Description: 指定operationId重试sidecar运维
 * Summary: 重试sidecar运维
 */
async function retrySidecarOperationEx(request: RetrySidecarOperationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetrySidecarOperationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecar.operation.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelSidecarOperationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // Opeartion ID 
  operationId: string(name='operation_id'),
}

model CancelSidecarOperationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 跳转链接
  changeUrl?: string(name='change_url'),
  // sidecar运维请求
  operationId?: string(name='operation_id'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: 取消sidecar运维
 * Summary: 取消sidecar运维
 */
async function cancelSidecarOperation(request: CancelSidecarOperationRequest): CancelSidecarOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelSidecarOperationEx(request, headers, runtime);
}

/**
 * Description: 取消sidecar运维
 * Summary: 取消sidecar运维
 */
async function cancelSidecarOperationEx(request: CancelSidecarOperationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelSidecarOperationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecar.operation.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // cluster name to apply a service
  clusterName: string(name='cluster_name'),
  // a string service yaml
  rawTemplate: string(name='raw_template'),
  // xxx
  operator: string(name='operator'),
}

model UpdateServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: create or update a service
 * Summary: patch a service
 */
async function updateService(request: UpdateServiceRequest): UpdateServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateServiceEx(request, headers, runtime);
}

/**
 * Description: create or update a service
 * Summary: patch a service
 */
async function updateServiceEx(request: UpdateServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.service.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateGpaasReleaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // aig
  appInstanceGroup: string(name='app_instance_group'),
  // 应用名字
  appName: string(name='app_name'),
  // 发布批次分组
  batches: [ ReleaseBatchObj ](name='batches'),
  // 是否是第一次发布
  isFirstRelease: boolean(name='is_first_release'),
  // operator
  operator: string(name='operator'),
  // 发布单名字，或者说标题
  releaseName: string(name='release_name'),
  // 发布版本信息，包括镜像等
  releaseVersion: ReleaseVersion(name='release_version'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model CreateGpaasReleaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发布单id
  releaseId?: string(name='release_id'),
}

/**
 * Description: 九州通过LHC创建发布单
 * Summary: 九州通过LHC创建发布单
 */
async function createGpaasRelease(request: CreateGpaasReleaseRequest): CreateGpaasReleaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createGpaasReleaseEx(request, headers, runtime);
}

/**
 * Description: 九州通过LHC创建发布单
 * Summary: 九州通过LHC创建发布单
 */
async function createGpaasReleaseEx(request: CreateGpaasReleaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateGpaasReleaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.gpaas.release.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySidecarOperationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 运维单号
  operationId: string(name='operation_id'),
  // 是否带运维单执行详情
  withDetail?: boolean(name='with_detail'),
}

model QuerySidecarOperationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 是否结束
  finished?: boolean(name='finished'),
  // 执行状态
  operationStatus?: string(name='operation_status'),
  // 执行详情
  targetProcesses?: [ string ](name='target_processes'),
  // 发布分组执行详情
  processDetailList?: [ SidecarOpsMachineGroup ](name='process_detail_list'),
  // 扩展信息
  properties?: string(name='properties'),
}

/**
 * Description: 查询sidecar运维进度
 * Summary: 查询sidecar运维进度
 */
async function querySidecarOperation(request: QuerySidecarOperationRequest): QuerySidecarOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySidecarOperationEx(request, headers, runtime);
}

/**
 * Description: 查询sidecar运维进度
 * Summary: 查询sidecar运维进度
 */
async function querySidecarOperationEx(request: QuerySidecarOperationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySidecarOperationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecar.operation.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListKubernetesResourcesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属工作空间组名称。
  workspaceGroup: string(name='workspace_group'),
  // 标签选择器。
  labelSelector?: string(name='label_selector'),
  // kubernetes资源路径。
  path: string(name='path'),
  // 命名空间名称。
  namespace?: string(name='namespace'),
}

model ListKubernetesResourcesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // "item1","item2"
  items?: [ string ](name='items'),
  // 资源总数。
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询Kubernetes原生资源
 * Summary: 查询Kubernetes原生资源
 */
async function listKubernetesResources(request: ListKubernetesResourcesRequest): ListKubernetesResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listKubernetesResourcesEx(request, headers, runtime);
}

/**
 * Description: 查询Kubernetes原生资源
 * Summary: 查询Kubernetes原生资源
 */
async function listKubernetesResourcesEx(request: ListKubernetesResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListKubernetesResourcesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.kubernetes.resources.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryReleasepipelinestageEventRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 发布单发布分组的id，对应ReleasePipeline中的stage
  stageId: string(name='stage_id'),
}

model QueryReleasepipelinestageEventResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 事件列表
  eventList?: [ RpReleaseEvent ](name='event_list'),
  // ReleasePipelineStage id
  stageId?: string(name='stage_id'),
  // 返回列表中类型和对象摘要
  typeInsSummary?: string(name='type_ins_summary'),
}

/**
 * Description: ldc发布单发布分组相关k8s事件查询，包括pod，stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关k8s事件查询
 */
async function queryReleasepipelinestageEvent(request: QueryReleasepipelinestageEventRequest): QueryReleasepipelinestageEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryReleasepipelinestageEventEx(request, headers, runtime);
}

/**
 * Description: ldc发布单发布分组相关k8s事件查询，包括pod，stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关k8s事件查询
 */
async function queryReleasepipelinestageEventEx(request: QueryReleasepipelinestageEventRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryReleasepipelinestageEventResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.releasepipelinestage.event.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSlsProjectnameRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_group
  workspaceGroup: string(name='workspace_group'),
}

model GetSlsProjectnameResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // sls projectName
  projectName?: string(name='project_name'),
}

/**
 * Description: 获取projectname
 * Summary: 获取projectname
 */
async function getSlsProjectname(request: GetSlsProjectnameRequest): GetSlsProjectnameResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSlsProjectnameEx(request, headers, runtime);
}

/**
 * Description: 获取projectname
 * Summary: 获取projectname
 */
async function getSlsProjectnameEx(request: GetSlsProjectnameRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSlsProjectnameResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sls.projectname.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryReleasepipelineEventRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 发布单对应的service id
  serviceId: string(name='service_id'),
}

model QueryReleasepipelineEventResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 事件列表
  eventList?: [ RpReleaseEvent ](name='event_list'),
  // ReleasePipeline service_id
  serviceId?: string(name='service_id'),
  // 返回列表中类型和对象摘要
  typeInsSummary?: string(name='type_ins_summary'),
}

/**
 * Description: ldc发布单发布分组相关k8s事件查询，包括pod，stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关k8s事件查询
 */
async function queryReleasepipelineEvent(request: QueryReleasepipelineEventRequest): QueryReleasepipelineEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryReleasepipelineEventEx(request, headers, runtime);
}

/**
 * Description: ldc发布单发布分组相关k8s事件查询，包括pod，stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关k8s事件查询
 */
async function queryReleasepipelineEventEx(request: QueryReleasepipelineEventRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryReleasepipelineEventResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.releasepipeline.event.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPodEventRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 发布单对应的service_id
  serviceId: string(name='service_id'),
  // POD对应的u_id
  uId: string(name='u_id'),
}

model QueryPodEventResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 事件列表
  eventList?: [ RpReleaseEvent ](name='event_list'),
  // 发布单对应的service_id
  serviceId?: string(name='service_id'),
  // POD对应的uid
  uId?: string(name='u_id'),
}

/**
 * Description: ldc发布单发布分组相关k8s事件查询，包括pod，stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关k8s事件查询
 */
async function queryPodEvent(request: QueryPodEventRequest): QueryPodEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPodEventEx(request, headers, runtime);
}

/**
 * Description: ldc发布单发布分组相关k8s事件查询，包括pod，stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关k8s事件查询
 */
async function queryPodEventEx(request: QueryPodEventRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPodEventResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.pod.event.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryServiceProcesslogRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 观测对象类型，RPV2，RP_STAGE，POD
  objectKind: string(name='object_kind'),
  // 观测对象名称
  objectName: string(name='object_name'),
  // 发布单对应的service_id
  serviceId: string(name='service_id'),
  // 发布单id
  planId: string(name='plan_id'),
}

model QueryServiceProcesslogResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Log列表
  logList?: [ ServiceProcessLog ](name='log_list'),
}

/**
 * Description: ldc发布单发布分组相关log查询，包括stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关logs查询
 */
async function queryServiceProcesslog(request: QueryServiceProcesslogRequest): QueryServiceProcesslogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryServiceProcesslogEx(request, headers, runtime);
}

/**
 * Description: ldc发布单发布分组相关log查询，包括stage，rpv2等资源相关的事件
 * Summary: ldc发布单相关logs查询
 */
async function queryServiceProcesslogEx(request: QueryServiceProcesslogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryServiceProcesslogResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.service.processlog.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 根据应用名称查询，不能为空，不支持一次性查询所有应用，是精准查询，不支持模糊匹配
  appName: string(name='app_name'),
  // 容器服务名
  containerServiceName?: string(name='container_service_name'),
  // 当前页码，从1开始，默认为1
  currentPage?: long(name='current_page'),
  // 部署状态
  deploymentStates?: [ string ](name='deployment_states'),
  // 所属命名空间
  namespace?: string(name='namespace'),
  // 排序规则数组，默认为 UTC_CREATED_DESC，即 根据创建时间降序排序
  order?: string(name='order'),
  // 分页大小，默认为10
  pageSize?: long(name='page_size'),
  // 查询类型，支持精准查询、模糊查询、前缀模糊查询，这里默认为模糊查询；查询类型针对字段 container_service_name
  queryType?: string(name='query_type'),
  // 工作空间组id列表
  workspaceGroupNames?: [ string ](name='workspace_group_names'),
}

model QueryAppServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前应用关联的容器服务列表
  containerServiceList?: [ ContainerServiceBasicInfo ](name='container_service_list'),
  // 当前页码，从1开始，默认为1
  currentPage?: long(name='current_page'),
  // 分页大小，默认为10
  pageSize?: long(name='page_size'),
  // 总数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 应用管理-在应用维度查询容器应用服务
 * Summary: 应用管理-在应用维度查询容器应用服务
 */
async function queryAppService(request: QueryAppServiceRequest): QueryAppServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppServiceEx(request, headers, runtime);
}

/**
 * Description: 应用管理-在应用维度查询容器应用服务
 * Summary: 应用管理-在应用维度查询容器应用服务
 */
async function queryAppServiceEx(request: QueryAppServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.app.service.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppPlanRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用名称，精准查询
  appName: string(name='app_name'),
  // 当前页码，从1开始，默认为1
  currentPage?: long(name='current_page'),
  // 排序规则，默认为 UTC_CREATED_DESC，即 根据创建时间降序排序
  order?: string(name='order'),
  // 分页大小，默认为10
  pageSize?: long(name='page_size'),
  // 状态筛选列表
  states?: [ string ](name='states'),
  // 查询指定发布单 timeseries_id 列表
  timeseriesIds?: [ string ](name='timeseries_ids'),
  // 工作空间组id列表
  workspaceGroupNames?: [ string ](name='workspace_group_names'),
}

model QueryAppPlanResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页码，从1开始，默认为1
  currentPage?: long(name='current_page'),
  // 分页大小，默认为10
  pageSize?: long(name='page_size'),
  // 发布单列表
  planList?: [ PlanSimpleView ](name='plan_list'),
  // 发布单数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 应用管理-应用维度查询容器应用服务发布单
 * Summary: 应用管理-应用维度查询容器应用服务发布单
 */
async function queryAppPlan(request: QueryAppPlanRequest): QueryAppPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppPlanEx(request, headers, runtime);
}

/**
 * Description: 应用管理-应用维度查询容器应用服务发布单
 * Summary: 应用管理-应用维度查询容器应用服务发布单
 */
async function queryAppPlanEx(request: QueryAppPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppPlanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.app.plan.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateUnifiedaccessinstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 关联的Spanner逻辑集群名称，一个逻辑集群由很多个local集群组成
  spannerCluster: string(name='spanner_cluster'),
  // https协议配置
  unifiedAccessInstanceHttpsEntry?: HttpsEntry(name='unified_access_instance_https_entry'),
  // http协议配置
  unifiedAccessInstanceHttpEntry: HttpEntry(name='unified_access_instance_http_entry'),
  // 统一接入实例名称
  unifiedAccessInstanceName: string(name='unified_access_instance_name'),
  // 统一接入网络类型，内网（intranet），公网（internet）
  unifiedAccessInstanceType: string(name='unified_access_instance_type'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 用户自定义实例entry相关信息（vip/id），datacenter粒度
  entrySettings?: EntrySettings(name='entry_settings'),
}

model CreateUnifiedaccessinstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建统一接入实例，支持单元化和非单元化两种模式
 * Summary: 创建统一接入实例
 */
async function createUnifiedaccessinstance(request: CreateUnifiedaccessinstanceRequest): CreateUnifiedaccessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createUnifiedaccessinstanceEx(request, headers, runtime);
}

/**
 * Description: 创建统一接入实例，支持单元化和非单元化两种模式
 * Summary: 创建统一接入实例
 */
async function createUnifiedaccessinstanceEx(request: CreateUnifiedaccessinstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateUnifiedaccessinstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.unifiedaccessinstance.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnifiedaccessinstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 可以用来过滤实例
  instanceName?: string(name='instance_name'),
}

model QueryUnifiedaccessinstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 统一接入实例列表信息
  list?: [ UnifiedAccessInstanceInfo ](name='list'),
}

/**
 * Description: 查询统一接入实例列表信息
 * Summary: 查询统一接入实例列表信息
 */
async function queryUnifiedaccessinstance(request: QueryUnifiedaccessinstanceRequest): QueryUnifiedaccessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnifiedaccessinstanceEx(request, headers, runtime);
}

/**
 * Description: 查询统一接入实例列表信息
 * Summary: 查询统一接入实例列表信息
 */
async function queryUnifiedaccessinstanceEx(request: QueryUnifiedaccessinstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnifiedaccessinstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.unifiedaccessinstance.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetUnifiedaccessinstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 统一接入实例名称
  unifiedAccessInstanceName: string(name='unified_access_instance_name'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model GetUnifiedaccessinstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 统一接入实例信息
  data?: UnifiedAccessInstanceInfo(name='data'),
}

/**
 * Description: 获取统一接入单个实例信息
 * Summary: 获取统一接入单个实例信息
 */
async function getUnifiedaccessinstance(request: GetUnifiedaccessinstanceRequest): GetUnifiedaccessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getUnifiedaccessinstanceEx(request, headers, runtime);
}

/**
 * Description: 获取统一接入单个实例信息
 * Summary: 获取统一接入单个实例信息
 */
async function getUnifiedaccessinstanceEx(request: GetUnifiedaccessinstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetUnifiedaccessinstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.unifiedaccessinstance.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteUnifiedaccessinstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 统一接入实例名称
  unifiedAccessInstanceName: string(name='unified_access_instance_name'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model DeleteUnifiedaccessinstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除统一接入实例
 * Summary: 删除统一接入实例
 */
async function deleteUnifiedaccessinstance(request: DeleteUnifiedaccessinstanceRequest): DeleteUnifiedaccessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteUnifiedaccessinstanceEx(request, headers, runtime);
}

/**
 * Description: 删除统一接入实例
 * Summary: 删除统一接入实例
 */
async function deleteUnifiedaccessinstanceEx(request: DeleteUnifiedaccessinstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteUnifiedaccessinstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.unifiedaccessinstance.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateUnifiedaccessinstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 统一接入实例信息
  data: UnifiedAccessInstanceInfo(name='data'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model UpdateUnifiedaccessinstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新统一接入实例信息
 * Summary: 更新统一接入实例信息
 */
async function updateUnifiedaccessinstance(request: UpdateUnifiedaccessinstanceRequest): UpdateUnifiedaccessinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateUnifiedaccessinstanceEx(request, headers, runtime);
}

/**
 * Description: 更新统一接入实例信息
 * Summary: 更新统一接入实例信息
 */
async function updateUnifiedaccessinstanceEx(request: UpdateUnifiedaccessinstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateUnifiedaccessinstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.unifiedaccessinstance.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecUnireleasespiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 请求方法
  requestMethod: string(name='request_method'),
  // 请求参数的 JSON 字符串
  requestParam: string(name='request_param'),
}

model ExecUnireleasespiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求结果的 JSON 字符串
  result?: string(name='result'),
}

/**
 * Description: ldc 对接统一发布 openAPI
 * Summary: ldc 对接统一发布 openAPI
 */
async function execUnireleasespi(request: ExecUnireleasespiRequest): ExecUnireleasespiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execUnireleasespiEx(request, headers, runtime);
}

/**
 * Description: ldc 对接统一发布 openAPI
 * Summary: ldc 对接统一发布 openAPI
 */
async function execUnireleasespiEx(request: ExecUnireleasespiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecUnireleasespiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.unireleasespi.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFedspannerclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 用于描述联邦spanner 集群内容器实例采用内网还是外网
  addressType: string(name='address_type'),
  // 用于描述联邦spanner 集群内容器实例 cpu大小， 单位core 
  cpu: string(name='cpu'),
  // 用于描述联邦spanner 集群内容器实例disk大小， 单位Gi 
  disk: string(name='disk'),
  // 用于描述联邦spanner 集群内容器实例的网络是否采用host网络
  hostNetwork: boolean(name='host_network'),
  // 用于描述联邦spanner 集群内容器实例mem 大小， 单位 Gi  
  mem: string(name='mem'),
  // 用于描述联邦spanner 集群名称
  name: string(name='name'),
  // 描述集群初始状态
  state: string(name='state'),
  // 定义了container的spec信息，包含多版本，镜像，副本数，标签等
  subClustersConfig: string(name='sub_clusters_config'),
  // 工作空间组信息
  workspaceGroup: string(name='workspace_group'),
}

model CreateFedspannerclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // fed集群名称
  clusterName?: string(name='cluster_name'),
}

/**
 * Description: 用于创建 fed spanner 集群
 * Summary: 创建 fed spanner 集群
 */
async function createFedspannercluster(request: CreateFedspannerclusterRequest): CreateFedspannerclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFedspannerclusterEx(request, headers, runtime);
}

/**
 * Description: 用于创建 fed spanner 集群
 * Summary: 创建 fed spanner 集群
 */
async function createFedspannerclusterEx(request: CreateFedspannerclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFedspannerclusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.fedspannercluster.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFedspannerclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 集群名称，模糊匹配
  clusterName?: string(name='cluster_name'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model QueryFedspannerclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询集群列表时的简略信息
  data?: [ QuerySpannerClusterDetail ](name='data'),
}

/**
 * Description: 查询联邦fed spanner 集群状态信息
 * Summary: 查询 fed spanner 集群
 */
async function queryFedspannercluster(request: QueryFedspannerclusterRequest): QueryFedspannerclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFedspannerclusterEx(request, headers, runtime);
}

/**
 * Description: 查询联邦fed spanner 集群状态信息
 * Summary: 查询 fed spanner 集群
 */
async function queryFedspannerclusterEx(request: QueryFedspannerclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFedspannerclusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.fedspannercluster.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetFedspannerclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // fed集群名称
  clusterName: string(name='cluster_name'),
  // 工作空间组
  workspaceGroup: string(maxLength=256, name='workspace_group'),
}

model GetFedspannerclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 获取单个联邦 spanner集群详细信息，包含所含的本地集群信息
  data?: GetSpannerClusterDetail(name='data'),
}

/**
 * Description: 通过fed集群 name 获取单个集群详细信息
 * Summary: 获取单个fed spanner 集群信息
 */
async function getFedspannercluster(request: GetFedspannerclusterRequest): GetFedspannerclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getFedspannerclusterEx(request, headers, runtime);
}

/**
 * Description: 通过fed集群 name 获取单个集群详细信息
 * Summary: 获取单个fed spanner 集群信息
 */
async function getFedspannerclusterEx(request: GetFedspannerclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFedspannerclusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.fedspannercluster.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListFedspannerclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 集群名称
  clusterName?: string(name='cluster_name'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model ListFedspannerclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // list 集群列表
  data?: [ QuerySpannerClusterDetail ](name='data'),
}

/**
 * Description: 展示所有联邦 spanner 集群
 * Summary: 展示所有联邦 spanner 集群
 */
async function listFedspannercluster(request: ListFedspannerclusterRequest): ListFedspannerclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listFedspannerclusterEx(request, headers, runtime);
}

/**
 * Description: 展示所有联邦 spanner 集群
 * Summary: 展示所有联邦 spanner 集群
 */
async function listFedspannerclusterEx(request: ListFedspannerclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFedspannerclusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.fedspannercluster.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteFedspannerclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // fed spanner cluster name
  clusterName: string(name='cluster_name'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model DeleteFedspannerclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除指定fed spanner集群
 * Summary: 删除 联邦spanner集群
 */
async function deleteFedspannercluster(request: DeleteFedspannerclusterRequest): DeleteFedspannerclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteFedspannerclusterEx(request, headers, runtime);
}

/**
 * Description: 删除指定fed spanner集群
 * Summary: 删除 联邦spanner集群
 */
async function deleteFedspannerclusterEx(request: DeleteFedspannerclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFedspannerclusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.fedspannercluster.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteFedspannerclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 批量指定fed集群名称
  clusterNames: [ string ](name='cluster_names'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model BatchdeleteFedspannerclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量删除指定集群
 * Summary: 批量删除 fed spanner 集群
 */
async function batchdeleteFedspannercluster(request: BatchdeleteFedspannerclusterRequest): BatchdeleteFedspannerclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteFedspannerclusterEx(request, headers, runtime);
}

/**
 * Description: 批量删除指定集群
 * Summary: 批量删除 fed spanner 集群
 */
async function batchdeleteFedspannerclusterEx(request: BatchdeleteFedspannerclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteFedspannerclusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.fedspannercluster.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateFedspannerclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 用于描述联邦spanner 集群内容器实例采用内网还是外网
  addressType: string(name='address_type'),
  // 集群名称
  clusterName: string(name='cluster_name'),
  // 用于描述联邦spanner 集群内容器实例 cpu大小， 单位core
  cpu: string(name='cpu'),
  // 用于描述联邦spanner 集群内容器实例disk大小， 单位Gi
  disk: string(name='disk'),
  // 用于描述联邦spanner 集群内容器实例的网络是否采用host网络
  hostNetwork: boolean(name='host_network'),
  // 用于描述联邦spanner 集群内容器实例mem 大小， 单位 Gi
  mem: string(name='mem'),
  // 用于描述联邦spanner 集群名称
  name: string(name='name'),
  // 描述集群状态
  state: string(name='state'),
  // 定义了sub cluster的config信息，包含多版本，镜像，副本数，标签等
  subClustersConfig: string(name='sub_clusters_config'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model UpdateFedspannerclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新 fed spanner 集群
 * Summary: 更新 fed spanner 集群
 */
async function updateFedspannercluster(request: UpdateFedspannerclusterRequest): UpdateFedspannerclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateFedspannerclusterEx(request, headers, runtime);
}

/**
 * Description: 更新 fed spanner 集群
 * Summary: 更新 fed spanner 集群
 */
async function updateFedspannerclusterEx(request: UpdateFedspannerclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFedspannerclusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.fedspannercluster.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateReleaseplanRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 创建发布单需要的应用服务信息
  appServices: [ ReleasePlanSpecAppService ](name='app_services'),
  // 命名空间
  namespace: string(name='namespace'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 是否自动执行
  isAutoExecute?: boolean(name='is_auto_execute'),
  // 发布单标题
  title: string(name='title'),
  // 默认CLOUD_NATIVE_GROUP_RELEASE
  opsType?: string(name='ops_type'),
}

model CreateReleaseplanResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发布单的唯一标识，可以认为是timeSeriesId
  planUniqueId?: string(name='plan_unique_id'),
}

/**
 * Description: 创建发布单
 * Summary: 创建发布单
 */
async function createReleaseplan(request: CreateReleaseplanRequest): CreateReleaseplanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createReleaseplanEx(request, headers, runtime);
}

/**
 * Description: 创建发布单
 * Summary: 创建发布单
 */
async function createReleaseplanEx(request: CreateReleaseplanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateReleaseplanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.releaseplan.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateFedspannerclusterStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // fed spanner cluster 集群名称
  clusterName: string(name='cluster_name'),
  // 期望的集群状态
  clusterStatus: string(name='cluster_status'),
}

model UpdateFedspannerclusterStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 需要指定fed spanner cluster name 和期望的合法状态
 * Summary: 更新 spanner 集群 状态
 */
async function updateFedspannerclusterStatus(request: UpdateFedspannerclusterStatusRequest): UpdateFedspannerclusterStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateFedspannerclusterStatusEx(request, headers, runtime);
}

/**
 * Description: 需要指定fed spanner cluster name 和期望的合法状态
 * Summary: 更新 spanner 集群 状态
 */
async function updateFedspannerclusterStatusEx(request: UpdateFedspannerclusterStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFedspannerclusterStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.fedspannercluster.status.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddAntvipDomainRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组名称
  workspaceGroup: string(name='workspace_group'),
  // 应用名称
  application: string(name='application'),
  // 要添加的部署单元名称列表
  cells: [ string ](name='cells'),
  // 健康检查类型，默认为TCP
  healthCheckType?: string(name='health_check_type'),
  // 健康检查端口，非必填项
  healthCheckDefaultPort?: long(name='health_check_default_port'),
}

model AddAntvipDomainResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建的antvip域名全称
  vipDomains?: [ string ](name='vip_domains'),
}

/**
 * Description: 添加antvip域名
 * Summary: 添加antvip域名
 */
async function addAntvipDomain(request: AddAntvipDomainRequest): AddAntvipDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addAntvipDomainEx(request, headers, runtime);
}

/**
 * Description: 添加antvip域名
 * Summary: 添加antvip域名
 */
async function addAntvipDomainEx(request: AddAntvipDomainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddAntvipDomainResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.antvip.domain.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteAntvipDomainRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组名称
  workspaceGroup: string(name='workspace_group'),
  // 应用名称
  application: string(name='application'),
  // 部署单元cell名称
  cell: string(name='cell'),
}

model DeleteAntvipDomainResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除antvip域名
 * Summary: 删除antvip域名
 */
async function deleteAntvipDomain(request: DeleteAntvipDomainRequest): DeleteAntvipDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteAntvipDomainEx(request, headers, runtime);
}

/**
 * Description: 删除antvip域名
 * Summary: 删除antvip域名
 */
async function deleteAntvipDomainEx(request: DeleteAntvipDomainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAntvipDomainResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.antvip.domain.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListContainerserviceIngressRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 容器服务名称
  containerServiceName: string(name='container_service_name'),
  // 命名空间名称
  namespace: string(name='namespace'),
  // 工作空间组名称
  workspaceGroup: string(name='workspace_group'),
}

model ListContainerserviceIngressResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 容器服务 Ingress 列表
  ingresses?: [ IngressInfo ](name='ingresses'),
}

/**
 * Description: 查询容器服务 Ingress 列表。
 * Summary: 查询容器服务 Ingress 列表。
 */
async function listContainerserviceIngress(request: ListContainerserviceIngressRequest): ListContainerserviceIngressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listContainerserviceIngressEx(request, headers, runtime);
}

/**
 * Description: 查询容器服务 Ingress 列表。
 * Summary: 查询容器服务 Ingress 列表。
 */
async function listContainerserviceIngressEx(request: ListContainerserviceIngressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListContainerserviceIngressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.ingress.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContainerserviceOperationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 容器服务列表。	
  containerServices: ContainerServiceOperationList(name='container_services'),
  // 分组策略：ALL_ONE、EACH_ONE、CELL，默认EACH_ONE
  groupStrategy?: string(name='group_strategy'),
  // 是否自动执行，默认false
  isAutoExecute?: boolean(name='is_auto_execute'),
  // 是否需要beta卡点，默认 true
  isNeedBeta?: boolean(name='is_need_beta'),
  // 所属命名空间
  namespace: string(name='namespace'),
  // 运维类型：重启等
  opsMode: string(name='ops_mode'),
  // 默认值：CLOUD_NATIVE_OPERATION
  opsType?: string(name='ops_type'),
  // 运维单名称
  title: string(name='title'),
  // 所属工作空间组名称。
  workspaceGroup: string(name='workspace_group'),
  // 在具体分组策略下，每个执行单元（部署单元，机房等）内部的分组个数。
  groupAmount?: long(name='group_amount'),
  // 审批人账号id，暂时不支持
  assigneeIds?: [ string ](name='assignee_ids'),
  // 操作人账号，lks1.23.0才支持
  operator?: string(name='operator'),
  // [huanyu场景使用]huanyu变更单id
  huanyuExecNo?: string(name='huanyu_exec_no'),
  // 每个批次最大涉及变更的pod个数
  maxGroupCapacity?: long(name='max_group_capacity'),
  // 每个部署单元单批次变更pod数量百分比，仅当group_strategey为ALL_CELL_PERCENTAGE时生效
  maxCellPodPercentage?: long(name='max_cell_pod_percentage'),
}

model CreateContainerserviceOperationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建完成的部署单id	
  operationId?: string(name='operation_id'),
}

/**
 * Description: 创建一个运维单
 * Summary: 创建一个运维单
 */
async function createContainerserviceOperation(request: CreateContainerserviceOperationRequest): CreateContainerserviceOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContainerserviceOperationEx(request, headers, runtime);
}

/**
 * Description: 创建一个运维单
 * Summary: 创建一个运维单
 */
async function createContainerserviceOperationEx(request: CreateContainerserviceOperationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContainerserviceOperationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.operation.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListMulticlusterEventsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 环境组名称
  workspaceGroup: string(name='workspace_group'),
  // 命名空间
  namespace?: string(name='namespace'),
  // 容器服务名称
  containerService?: string(name='container_service'),
}

model ListMulticlusterEventsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // kubernetes集群事件信息
  data?: [ ClusterEvents ](name='data'),
}

/**
 * Description: 查询多集群k8s事件
 * Summary: 查询多集群k8s event
 */
async function listMulticlusterEvents(request: ListMulticlusterEventsRequest): ListMulticlusterEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listMulticlusterEventsEx(request, headers, runtime);
}

/**
 * Description: 查询多集群k8s事件
 * Summary: 查询多集群k8s event
 */
async function listMulticlusterEventsEx(request: ListMulticlusterEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMulticlusterEventsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.multicluster.events.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyContainerserviceDeploymentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 发布单time_series_id
  timeSeriesId: string(name='time_series_id'),
  // 审批人账号id
  assigneeIds?: [ string ](name='assignee_ids'),
}

model ApplyContainerserviceDeploymentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 审批状态
  approvalStatus?: string(name='approval_status'),
  // 审批详情页面地址
  approvalUrl?: string(name='approval_url'),
}

/**
 * Description: 部署单提交审批申请
 * Summary: 部署单提交审批申请
 */
async function applyContainerserviceDeployment(request: ApplyContainerserviceDeploymentRequest): ApplyContainerserviceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyContainerserviceDeploymentEx(request, headers, runtime);
}

/**
 * Description: 部署单提交审批申请
 * Summary: 部署单提交审批申请
 */
async function applyContainerserviceDeploymentEx(request: ApplyContainerserviceDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyContainerserviceDeploymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.deployment.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateIngressTrafficweightRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 流量权重列表
  serviceWeights: [ ServiceWeight ](name='service_weights'),
  // service id
  serviceId: string(name='service_id'),
}

model UpdateIngressTrafficweightResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 蓝绿发布调整Ingress流量权重比例
 * Summary: 蓝绿发布调整Ingress流量权重比例
 */
async function updateIngressTrafficweight(request: UpdateIngressTrafficweightRequest): UpdateIngressTrafficweightResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateIngressTrafficweightEx(request, headers, runtime);
}

/**
 * Description: 蓝绿发布调整Ingress流量权重比例
 * Summary: 蓝绿发布调整Ingress流量权重比例
 */
async function updateIngressTrafficweightEx(request: UpdateIngressTrafficweightRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateIngressTrafficweightResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.ingress.trafficweight.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetOpsplanBluedetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // antcloud.ldc.opsplan.detail.query 接口返回的 group_collection_list. app_group_list.id
  serviceId: string(name='service_id'),
}

model GetOpsplanBluedetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // pod信息列表
  podList?: [ PodInfo ](name='pod_list'),
}

/**
 * Description: 蓝绿发布查询单蓝区信息
 * Summary: 蓝绿发布查询单蓝区信息
 */
async function getOpsplanBluedetail(request: GetOpsplanBluedetailRequest): GetOpsplanBluedetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getOpsplanBluedetailEx(request, headers, runtime);
}

/**
 * Description: 蓝绿发布查询单蓝区信息
 * Summary: 蓝绿发布查询单蓝区信息
 */
async function getOpsplanBluedetailEx(request: GetOpsplanBluedetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetOpsplanBluedetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.opsplan.bluedetail.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListIngressTrafficweightRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // lks_service_id，antcloud.ldc.opsplan.detail.query 接口返回的 group_collection_list. app_group_list.id，和查询应用服务发布单详情的id一样
  serviceId: string(name='service_id'),
}

model ListIngressTrafficweightResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 流量权重列表
  serviceWeights?: [ ServiceWeight ](name='service_weights'),
}

/**
 * Description: 蓝绿发布查询当前发布单中所有Ingress流量权重及状态
 * Summary: 蓝绿发布查询Ingress流量权重
 */
async function listIngressTrafficweight(request: ListIngressTrafficweightRequest): ListIngressTrafficweightResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listIngressTrafficweightEx(request, headers, runtime);
}

/**
 * Description: 蓝绿发布查询当前发布单中所有Ingress流量权重及状态
 * Summary: 蓝绿发布查询Ingress流量权重
 */
async function listIngressTrafficweightEx(request: ListIngressTrafficweightRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListIngressTrafficweightResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.ingress.trafficweight.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateOamserviceApplicationconfigurationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // ApplicationConfiguration yaml字符串
  yamlcontent: string(name='yamlcontent'),
}

model CreateOamserviceApplicationconfigurationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  applicationconfiguraion?: OAMApplicationConfiguration(name='applicationconfiguraion'),
}

/**
 * Description: 基于OAM模型创建包含多应用服务的应用
 * Summary: 创建包含多应用服务的应用
 */
async function createOamserviceApplicationconfiguration(request: CreateOamserviceApplicationconfigurationRequest): CreateOamserviceApplicationconfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createOamserviceApplicationconfigurationEx(request, headers, runtime);
}

/**
 * Description: 基于OAM模型创建包含多应用服务的应用
 * Summary: 创建包含多应用服务的应用
 */
async function createOamserviceApplicationconfigurationEx(request: CreateOamserviceApplicationconfigurationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateOamserviceApplicationconfigurationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.oamservice.applicationconfiguration.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFedloadbalancerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 联邦负载均衡实例名称，RFC1035 主机名规范 [a-z]([-a-z0-9]*[a-z0-9])?
  name: string(maxLength=63, minLength=1, name='name'),
  // 命名空间
  namespace: string(name='namespace'),
  // 地址类型，例如公网、内网
  addrType: string(name='addr_type'),
  // 指定负载均衡规格大小
  spec?: string(name='spec'),
  // 联邦负载均衡实例对应的部署单元列表
  cells: [ string ](name='cells'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model CreateFedloadbalancerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 联邦负载均衡名称
  name?: string(name='name'),
}

/**
 * Description: 用于创建联邦负载均衡实例
 * Summary: 创建联邦负载均衡实例
 */
async function createFedloadbalancer(request: CreateFedloadbalancerRequest): CreateFedloadbalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFedloadbalancerEx(request, headers, runtime);
}

/**
 * Description: 用于创建联邦负载均衡实例
 * Summary: 创建联邦负载均衡实例
 */
async function createFedloadbalancerEx(request: CreateFedloadbalancerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFedloadbalancerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.fedloadbalancer.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateFedloadbalancerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 联邦负载均衡实例名称
  name: string(name='name'),
  // 联邦负载均衡实例所在命名空间
  namespace: string(name='namespace'),
  // 地址类型，例如公网、内网
  addrType: string(name='addr_type'),
  // 指定负载均衡规格
  spec?: string(name='spec'),
  // 联邦负载均衡实例对应的部署单元列表
  cells: [ string ](name='cells'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
}

model UpdateFedloadbalancerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新联邦负载均衡实例
 * Summary: 更新联邦负载均衡实例
 */
async function updateFedloadbalancer(request: UpdateFedloadbalancerRequest): UpdateFedloadbalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateFedloadbalancerEx(request, headers, runtime);
}

/**
 * Description: 更新联邦负载均衡实例
 * Summary: 更新联邦负载均衡实例
 */
async function updateFedloadbalancerEx(request: UpdateFedloadbalancerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFedloadbalancerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.fedloadbalancer.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListFedloadbalancerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 命名空间
  namespace: string(name='namespace'),
  // 支持模糊搜索
  name?: string(name='name'),
  // 页数
  pageNumber?: long(name='page_number'),
  // 分页大小
  pageSize?: long(name='page_size'),
}

model ListFedloadbalancerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 联邦负载均衡实例列表
  fedLoadbalancerList?: [ FedLoadBalancer ](name='fed_loadbalancer_list'),
  // 查询到的联邦负载均衡实例总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: list联邦负载均衡实例
 * Summary: list联邦负载均衡实例
 */
async function listFedloadbalancer(request: ListFedloadbalancerRequest): ListFedloadbalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listFedloadbalancerEx(request, headers, runtime);
}

/**
 * Description: list联邦负载均衡实例
 * Summary: list联邦负载均衡实例
 */
async function listFedloadbalancerEx(request: ListFedloadbalancerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFedloadbalancerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.fedloadbalancer.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteFedloadbalancerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 命名空间
  namespace: string(name='namespace'),
  // 联邦负载均衡实例的名称
  name: string(name='name'),
}

model DeleteFedloadbalancerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除联邦负载均衡
 * Summary: 删除联邦负载均衡实例
 */
async function deleteFedloadbalancer(request: DeleteFedloadbalancerRequest): DeleteFedloadbalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteFedloadbalancerEx(request, headers, runtime);
}

/**
 * Description: 删除联邦负载均衡
 * Summary: 删除联邦负载均衡实例
 */
async function deleteFedloadbalancerEx(request: DeleteFedloadbalancerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFedloadbalancerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.fedloadbalancer.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetFedloadbalancerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 命名空间
  namespace: string(name='namespace'),
  // 联邦负载均衡名称
  name: string(name='name'),
}

model GetFedloadbalancerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 联邦负载均衡实例信息
  fedLoadbalancer?: FedLoadBalancer(name='fed_loadbalancer'),
}

/**
 * Description: 查询单个联邦负载均衡实例
 * Summary: 查询单个联邦负载均衡实例
 */
async function getFedloadbalancer(request: GetFedloadbalancerRequest): GetFedloadbalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getFedloadbalancerEx(request, headers, runtime);
}

/**
 * Description: 查询单个联邦负载均衡实例
 * Summary: 查询单个联邦负载均衡实例
 */
async function getFedloadbalancerEx(request: GetFedloadbalancerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFedloadbalancerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.fedloadbalancer.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportUnireleaseSolutionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // Line迭代发布Json String
  solution: string(name='solution'),
  // 机构列表信息；如果不填默认是所有机构统一发布
  tenants?: [ string ](name='tenants'),
}

model ImportUnireleaseSolutionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  success?: boolean(name='success'),
  // 解决方案ID
  solutionId?: string(name='solution_id'),
}

/**
 * Description: 导入统一解决方案
 * Summary: 导入统一解决方案
 */
async function importUnireleaseSolution(request: ImportUnireleaseSolutionRequest): ImportUnireleaseSolutionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importUnireleaseSolutionEx(request, headers, runtime);
}

/**
 * Description: 导入统一解决方案
 * Summary: 导入统一解决方案
 */
async function importUnireleaseSolutionEx(request: ImportUnireleaseSolutionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportUnireleaseSolutionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.unirelease.solution.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListUnireleaseSolutionsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 当前页
  page: long(name='page'),
  // 页大小
  pageSize: long(name='page_size'),
  // 操作人
  operator?: string(name='operator'),
  // 发布名称
  name?: string(name='name'),
  // 创建时间初始值
  creationTimeFrom?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='creation_time_from'),
  // 创建时间结束值
  creationTimeTo?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='creation_time_to'),
}

model ListUnireleaseSolutionsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 解决方案列表返回
  data?: [ UnireleaseSolution ](name='data'),
  // 总数
  totalSize?: long(name='total_size'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 当前页
  currentPage?: long(name='current_page'),
}

/**
 * Description: 查询解决方案列表
 * Summary: 查询解决方案列表
 */
async function listUnireleaseSolutions(request: ListUnireleaseSolutionsRequest): ListUnireleaseSolutionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listUnireleaseSolutionsEx(request, headers, runtime);
}

/**
 * Description: 查询解决方案列表
 * Summary: 查询解决方案列表
 */
async function listUnireleaseSolutionsEx(request: ListUnireleaseSolutionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUnireleaseSolutionsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.unirelease.solutions.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetUnireleaseSolutionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 解决方案发布ID
  solutionId: string(name='solution_id'),
}

model GetUnireleaseSolutionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 解决方案详情
  data?: UnireleaseSolution(name='data'),
}

/**
 * Description: 查询解决方案发布详情
 * Summary: 查询解决方案发布详情
 */
async function getUnireleaseSolution(request: GetUnireleaseSolutionRequest): GetUnireleaseSolutionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getUnireleaseSolutionEx(request, headers, runtime);
}

/**
 * Description: 查询解决方案发布详情
 * Summary: 查询解决方案发布详情
 */
async function getUnireleaseSolutionEx(request: GetUnireleaseSolutionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetUnireleaseSolutionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.unirelease.solution.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetUnireleasePipelineRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 解决方案发布单ID
  solutionId: string(name='solution_id'),
}

model GetUnireleasePipelineResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // pipeline ID
  id?: string(name='id'),
  // 解决方案ID
  solutionId?: string(name='solution_id'),
  // 发布单状态
  state?: string(name='state'),
  // 应用发布状态
  tenantPipelines?: [ TenantAppReleasePipeline ](name='tenant_pipelines'),
}

/**
 * Description: 查询解决方案发布状态
 * Summary: 查询解决方案发布状态
 */
async function getUnireleasePipeline(request: GetUnireleasePipelineRequest): GetUnireleasePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getUnireleasePipelineEx(request, headers, runtime);
}

/**
 * Description: 查询解决方案发布状态
 * Summary: 查询解决方案发布状态
 */
async function getUnireleasePipelineEx(request: GetUnireleasePipelineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetUnireleasePipelineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.unirelease.pipeline.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecUnireleasePipelinesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 解决方案ID
  solutionId: string(name='solution_id'),
  // 租户/机构名称列表，不填默认当前机构所有租户
  tenants?: [ string ](name='tenants'),
}

model ExecUnireleasePipelinesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 执行成功
  success?: boolean(name='success'),
}

/**
 * Description: 执行机构发布单
 * Summary: 执行机构发布单
 */
async function execUnireleasePipelines(request: ExecUnireleasePipelinesRequest): ExecUnireleasePipelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execUnireleasePipelinesEx(request, headers, runtime);
}

/**
 * Description: 执行机构发布单
 * Summary: 执行机构发布单
 */
async function execUnireleasePipelinesEx(request: ExecUnireleasePipelinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecUnireleasePipelinesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.unirelease.pipelines.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetUnireleaseTenantsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 解决方案Json
  solution: string(name='solution'),
}

model GetUnireleaseTenantsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 解决方案租户列表信息
  tenants?: [ string ](name='tenants'),
}

/**
 * Description: 根据解决方案反查相关租户信息
 * Summary: 根据解决方案反查相关租户信息
 */
async function getUnireleaseTenants(request: GetUnireleaseTenantsRequest): GetUnireleaseTenantsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getUnireleaseTenantsEx(request, headers, runtime);
}

/**
 * Description: 根据解决方案反查相关租户信息
 * Summary: 根据解决方案反查相关租户信息
 */
async function getUnireleaseTenantsEx(request: GetUnireleaseTenantsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetUnireleaseTenantsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.unirelease.tenants.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddContainerserviceMiddlewareconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 命名空间
  namespace: string(name='namespace'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 应用服务名
  containerServiceName: string(name='container_service_name'),
  // 应用服务版本
  containerServiceRevision: string(name='container_service_revision'),
  // 操作人账号
  operator: string(name='operator'),
  // 中间件配置
  middlewareConfigs: [ string ](name='middleware_configs'),
}

model AddContainerserviceMiddlewareconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 添加中间接变更配置
 * Summary: 添加中间接变更配置
 */
async function addContainerserviceMiddlewareconfig(request: AddContainerserviceMiddlewareconfigRequest): AddContainerserviceMiddlewareconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addContainerserviceMiddlewareconfigEx(request, headers, runtime);
}

/**
 * Description: 添加中间接变更配置
 * Summary: 添加中间接变更配置
 */
async function addContainerserviceMiddlewareconfigEx(request: AddContainerserviceMiddlewareconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddContainerserviceMiddlewareconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.middlewareconfig.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExportOpsplanStagesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 容器服务列表
  containerService?: ContainerServiceOperation(name='container_service'),
  // Pod分组策略。
  groupStrategy?: string(name='group_strategy'),
  // 工作空间组名称
  workspaceGroupName?: string(name='workspace_group_name'),
  // 命名空间
  namespace?: string(name='namespace'),
  // 目前支持：REBOOT | REPLACE | DEPLOY | SCALEINOUT，其余默认DEPLOY
  operation?: string(name='operation'),
  // 最小分组数
  groupAmount?: long(name='group_amount'),
  // 每个分组的最大涉及变更pod个数
  maxGroupCapacity?: long(name='max_group_capacity'),
  // 是否开启beta分组，目前仅在扩缩容场景下使用，默认false
  needBeta?: boolean(name='need_beta'),
}

model ExportOpsplanStagesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 计算的分批结果，包含各批次及其Pods
  batches?: [ ReleaseBatchObj ](name='batches'),
}

/**
 * Description: 根据选中的单元、pods计算以及分批策略计算分批结果
 * Summary: 计算分批结果
 */
async function exportOpsplanStages(request: ExportOpsplanStagesRequest): ExportOpsplanStagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return exportOpsplanStagesEx(request, headers, runtime);
}

/**
 * Description: 根据选中的单元、pods计算以及分批策略计算分批结果
 * Summary: 计算分批结果
 */
async function exportOpsplanStagesEx(request: ExportOpsplanStagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExportOpsplanStagesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.opsplan.stages.export', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailAppMetainfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组的label：SIT, DEV, ...
  workspaceGroupLabel?: string(name='workspace_group_label'),
  // 应用名字
  // app:appService在此场景下为1:1，否则会报错
  appName?: string(name='app_name'),
}

model DetailAppMetainfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 工作空间组的名字
  workspaceGroupName?: string(name='workspace_group_name'),
  // 名称空间
  namespace?: string(name='namespace'),
  // 应用服务名字
  containerServiceName?: string(name='container_service_name'),
  // 应用服务当前revision
  containerServiceRevision?: string(name='container_service_revision'),
  // 中间件instanceId
  instanceId?: string(name='instance_id'),
}

/**
 * Description: huanyu场景下，根据tenant, appName, wsgLabel获取wsgName, namespace, containerServiceName, 以及containerServiceRevision
 * Summary: 应用（服务）基础信息
 */
async function detailAppMetainfo(request: DetailAppMetainfoRequest): DetailAppMetainfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailAppMetainfoEx(request, headers, runtime);
}

/**
 * Description: huanyu场景下，根据tenant, appName, wsgLabel获取wsgName, namespace, containerServiceName, 以及containerServiceRevision
 * Summary: 应用（服务）基础信息
 */
async function detailAppMetainfoEx(request: DetailAppMetainfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailAppMetainfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.app.metainfo.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSidecaropsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用名称
  appName: string(name='app_name'),
  // 保证请求幂等性
  clientToken?: string(name='client_token'),
  // 所属命名空间
  namespace: string(name='namespace'),
  // 所属工作空间组
  workspaceGroup: string(name='workspace_group'),
  // sidecar的类型，如mosn，odp
  sidecarConfig: SidecarConfig(name='sidecar_config'),
  // 指定sidecar的基线模板版本进行升级，可选，不填时，默认选中指定sidecar的最新版本进行升级
  sidecarVersion?: string(name='sidecar_version'),
  // 单元名称
  cellName: string(name='cell_name'),
  // 要更新的hostname列表
  serverIdentities: [ string ](name='server_identities'),
  // 工单id
  orderNum: string(name='order_num'),
}

model UpdateSidecaropsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 返回被更新的podNumber list；可用于回滚流程的入参
  updatedPodNumbers?: [ string ](name='updated_pod_numbers'),
}

/**
 * Description: 为指定sidecar更新版本信息，如镜像，feature等
 * Summary: 更新sidecar版本
 */
async function updateSidecarops(request: UpdateSidecaropsRequest): UpdateSidecaropsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSidecaropsEx(request, headers, runtime);
}

/**
 * Description: 为指定sidecar更新版本信息，如镜像，feature等
 * Summary: 更新sidecar版本
 */
async function updateSidecaropsEx(request: UpdateSidecaropsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSidecaropsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecarops.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CountContainerserviceCellreplicasRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用服务名称
  containerServiceName: string(name='container_service_name'),
  // 应用服务的名称空间
  namespace: string(name='namespace'),
  // 工作空间名称
  workspaceGroupName: string(name='workspace_group_name'),
}

model CountContainerserviceCellreplicasResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用服务当前的部署单元，及其部署副本数
  cellReplicasList?: [ ReplicaCount ](name='cell_replicas_list'),
}

/**
 * Description: 查询应用服务当前的部署单元，及部署副本数
 * Summary: 查询应用服务当前的部署单元，及部署副本数
 */
async function countContainerserviceCellreplicas(request: CountContainerserviceCellreplicasRequest): CountContainerserviceCellreplicasResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return countContainerserviceCellreplicasEx(request, headers, runtime);
}

/**
 * Description: 查询应用服务当前的部署单元，及部署副本数
 * Summary: 查询应用服务当前的部署单元，及部署副本数
 */
async function countContainerserviceCellreplicasEx(request: CountContainerserviceCellreplicasRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountContainerserviceCellreplicasResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.cellreplicas.count', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSidecaropsTemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // sidecar类型
  sidecarName: string(name='sidecar_name'),
  // sidecar版本
  sidecarVersion?: string(name='sidecar_version'),
  // 工作空间组
  workspaceGroupId?: string(name='workspace_group_id'),
  // 工作空间组名
  workspaceGroupLabel: string(name='workspace_group_label'),
  // 工作空间
  workspaceId?: string(name='workspace_id'),
  // 镜像地址
  image?: string(name='image'),
  // 可以根据租户名称筛选应用于该租户的基线模板
  tenantName?: string(name='tenant_name'),
}

model ListSidecaropsTemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回的特定类型的sidecar版本信息列表，只取最近的20条
  sidecarTemplates?: [ SidecarTemplateMeta ](name='sidecar_templates'),
}

/**
 * Description: 获取指定类型sidecar的template列表，最多20条。
 * Summary: 获取sidecar的template列表
 */
async function listSidecaropsTemplate(request: ListSidecaropsTemplateRequest): ListSidecaropsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSidecaropsTemplateEx(request, headers, runtime);
}

/**
 * Description: 获取指定类型sidecar的template列表，最多20条。
 * Summary: 获取sidecar的template列表
 */
async function listSidecaropsTemplateEx(request: ListSidecaropsTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSidecaropsTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecarops.template.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSidecaropsConsistencyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用名称
  appName: string(name='app_name'),
  // 请求唯一性验证
  clientToken?: string(name='client_token'),
  // 命名空间
  namespace: string(name='namespace'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 需要更新的cell名称数组
  cellNames: [ string ](name='cell_names'),
  // 需要更新的sidecar属性
  sidecarConfig: SidecarConfig(name='sidecar_config'),
  // 指定sidecar版本进行升级，不填入此字段时，默认使用对应sidecar的最新版本
  sidecarVersion?: string(name='sidecar_version'),
  // 发布单号
  orderNum: string(name='order_num'),
}

model UpdateSidecaropsConsistencyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 已经更新的cell列表
  updatedCells?: [ string ](name='updated_cells'),
}

/**
 * Description: 应用sidecar更新的一致性拉齐，防止发布时扩容导致的部分pod未更新
 * Summary: 应用sidecar更新的一致性拉齐
 */
async function updateSidecaropsConsistency(request: UpdateSidecaropsConsistencyRequest): UpdateSidecaropsConsistencyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSidecaropsConsistencyEx(request, headers, runtime);
}

/**
 * Description: 应用sidecar更新的一致性拉齐，防止发布时扩容导致的部分pod未更新
 * Summary: 应用sidecar更新的一致性拉齐
 */
async function updateSidecaropsConsistencyEx(request: UpdateSidecaropsConsistencyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSidecaropsConsistencyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecarops.consistency.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FinishSidecaropsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用名称
  appName: string(name='app_name'),
  // 请求token
  clientToken?: string(name='client_token'),
  // 命名空间
  namespace: string(name='namespace'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 请求单号
  orderNum: string(name='order_num'),
  // 部署单元列表
  cellNames: [ string ](name='cell_names'),
  // sidecar配置
  sidecarConfig: SidecarConfig(name='sidecar_config'),
}

model FinishSidecaropsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 清除上一个版本的rd，将本次派发的rd置为weight 0
 * Summary: 版本清理
 */
async function finishSidecarops(request: FinishSidecaropsRequest): FinishSidecaropsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return finishSidecaropsEx(request, headers, runtime);
}

/**
 * Description: 清除上一个版本的rd，将本次派发的rd置为weight 0
 * Summary: 版本清理
 */
async function finishSidecaropsEx(request: FinishSidecaropsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FinishSidecaropsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecarops.finish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySidecaropsStateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用名称
  appName: string(name='app_name'),
  // 命名空间
  namespace: string(name='namespace'),
  // 命名空间组名称
  workspaceGroup: string(name='workspace_group'),
  // 需要查询的部署单元列表
  cellNames: [ string ](name='cell_names'),
  // 运维单号
  orderNum: string(name='order_num'),
  // sidecar配置
  sidecarConfig: SidecarConfig(name='sidecar_config'),
}

model QuerySidecaropsStateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // sidecar运维状态列表
  releaseInfo?: [ SidecarReleaseStatus ](name='release_info'),
  // 状态
  state?: string(name='state'),
  // 变更核心所需变更后改动的podIp
  changeTargets?: string(name='change_targets'),
}

/**
 * Description: 查询rd的当前状态。
 * Summary: 查询更新状态
 */
async function querySidecaropsState(request: QuerySidecaropsStateRequest): QuerySidecaropsStateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySidecaropsStateEx(request, headers, runtime);
}

/**
 * Description: 查询rd的当前状态。
 * Summary: 查询更新状态
 */
async function querySidecaropsStateEx(request: QuerySidecaropsStateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySidecaropsStateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecarops.state.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSidecaropsTemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // sidecar名称
  sidecarName: string(name='sidecar_name'),
  // 镜像地址
  image: string(name='image'),
  // 新的模板
  template?: string(name='template'),
  // 基线模板作用域范围，如：["gray", "prod"]，不填时默认全局
  scope?: [ string ](name='scope'),
  // 版本描述
  description?: string(name='description'),
}

model AddSidecaropsTemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 添加特定sidecar类型的基础模板信息，包括镜像地址，tempalte等，会自动更新版本号
 * Summary: 添加sidecar基础模板
 */
async function addSidecaropsTemplate(request: AddSidecaropsTemplateRequest): AddSidecaropsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSidecaropsTemplateEx(request, headers, runtime);
}

/**
 * Description: 添加特定sidecar类型的基础模板信息，包括镜像地址，tempalte等，会自动更新版本号
 * Summary: 添加sidecar基础模板
 */
async function addSidecaropsTemplateEx(request: AddSidecaropsTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSidecaropsTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecarops.template.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySidecaropsReleaseinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用名称（借花场景即为应用服务名）
  appName: string(name='app_name'),
  // sidecar类型
  sidecarType: string(name='sidecar_type'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 命名空间
  namespace: string(name='namespace'),
  // 变更单号
  orderNum?: string(name='order_num'),
  // 应用服务发布sidecar的版本号，每次发布程序会自己分配一个，可用于作为查询key
  releaseVersion?: string(name='release_version'),
}

model QuerySidecaropsReleaseinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 所查询版本的实际sidecarConfig信息
  sidecarConfig?: SidecarConfig(name='sidecar_config'),
  // 应用服务名
  containerServiceName?: string(name='container_service_name'),
  // sidecar模板的版本号，与应用无关
  sidecarVersion?: string(name='sidecar_version'),
  // 发布相关的应用参数，如feature等
  param?: string(name='param'),
  // 发布所处状态
  status?: string(name='status'),
  // 以时间戳生成的发布版本号
  releaseVersion?: string(name='release_version'),
  // 上一个版本号
  lastReleaseVersion?: string(name='last_release_version'),
  // 执行单号，调用方唯一确定一次发布的单号；
  orderNum?: string(name='order_num'),
}

/**
 * Description: 查询应用发布sidecar的记录信息，包括特定发布中，填入的feature，镜像号等。
 * Summary: 查询应用发布sidecar升级的相关记录
 */
async function querySidecaropsReleaseinfo(request: QuerySidecaropsReleaseinfoRequest): QuerySidecaropsReleaseinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySidecaropsReleaseinfoEx(request, headers, runtime);
}

/**
 * Description: 查询应用发布sidecar的记录信息，包括特定发布中，填入的feature，镜像号等。
 * Summary: 查询应用发布sidecar升级的相关记录
 */
async function querySidecaropsReleaseinfoEx(request: QuerySidecaropsReleaseinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySidecaropsReleaseinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecarops.releaseinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitSidecaropsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用服务名称
  containerServiceName: string(name='container_service_name'),
  // 预留用于防止请求重放
  clientToken?: string(name='client_token'),
  // 应用服务所属命名空间
  namespace: string(name='namespace'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 需要被注入的sidecar配置列表，可以同时注入多个
  sidecarConfigs: [ SidecarConfig ](name='sidecar_configs'),
  // 部署单元名称
  cellName: string(name='cell_name'),
  // 要被注入的pod列表，列表元素为pod的名称
  serverIdentities: [ string ](name='server_identities'),
  // 执行单号，所以批次共用同一单号
  orderNum: string(name='order_num'),
}

model InitSidecaropsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 给存量应用服务注入sidecar，应用服务需已经创建
 * Summary: 初始化注入sidecar
 */
async function initSidecarops(request: InitSidecaropsRequest): InitSidecaropsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initSidecaropsEx(request, headers, runtime);
}

/**
 * Description: 给存量应用服务注入sidecar，应用服务需已经创建
 * Summary: 初始化注入sidecar
 */
async function initSidecaropsEx(request: InitSidecaropsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitSidecaropsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecarops.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RebootSidecaropsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用服务名
  containerServiceName: string(name='container_service_name'),
  // 防重放
  clientToken?: string(name='client_token'),
  // 命名空间
  namespace: string(name='namespace'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 部署单元名称
  cellName: string(name='cell_name'),
  // 需要重启的pod列表，元素值为pod的名称
  serverIdentities: [ string ](name='server_identities'),
  // 执行单号
  orderNum: string(name='order_num'),
}

model RebootSidecaropsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 对注入了sidecar的容器进行单重启sidecar的操作，部分情况也会引起整个pod的重建。
 * Summary: 重启sidecar容器
 */
async function rebootSidecarops(request: RebootSidecaropsRequest): RebootSidecaropsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return rebootSidecaropsEx(request, headers, runtime);
}

/**
 * Description: 对注入了sidecar的容器进行单重启sidecar的操作，部分情况也会引起整个pod的重建。
 * Summary: 重启sidecar容器
 */
async function rebootSidecaropsEx(request: RebootSidecaropsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RebootSidecaropsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecarops.reboot', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteContainerserviceRevisionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用服务名称
  name: string(name='name'),
  // 版本号
  revision: string(name='revision'),
  // 所属工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 所属命名空间
  namespace: string(name='namespace'),
  // 操作人账号
  operator: string(name='operator'),
}

model DeleteContainerserviceRevisionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除应用服务服务指定版本，lks1.25.0开始支持
 * Summary: 删除指定版本
 */
async function deleteContainerserviceRevision(request: DeleteContainerserviceRevisionRequest): DeleteContainerserviceRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteContainerserviceRevisionEx(request, headers, runtime);
}

/**
 * Description: 删除应用服务服务指定版本，lks1.25.0开始支持
 * Summary: 删除指定版本
 */
async function deleteContainerserviceRevisionEx(request: DeleteContainerserviceRevisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteContainerserviceRevisionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.revision.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecContainerserviceApihookRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // url地址
  url: string(name='url'),
  // GET/POST
  httpMethod: string(name='http_method'),
  // 请求参数
  queryParams?: string(name='query_params'),
  // 请求body
  body?: string(name='body'),
  // application/x-www-form-urlencoded或application/json
  contentType?: string(name='content_type'),
}

model ExecContainerserviceApihookResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 接口返回结果
  apiResult?: string(name='api_result'),
}

/**
 * Description: 手动执行 customhook 配置的 api，lks1.25.0开始支持
 * Summary: 手动执行 hook 配置的 api
 */
async function execContainerserviceApihook(request: ExecContainerserviceApihookRequest): ExecContainerserviceApihookResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execContainerserviceApihookEx(request, headers, runtime);
}

/**
 * Description: 手动执行 customhook 配置的 api，lks1.25.0开始支持
 * Summary: 手动执行 hook 配置的 api
 */
async function execContainerserviceApihookEx(request: ExecContainerserviceApihookRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecContainerserviceApihookResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.apihook.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySidecaropsAllservicesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 用于label到metaservice换取wsgName
  workspaceGroupLabel: string(name='workspace_group_label'),
}

model QuerySidecaropsAllservicesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 根据wsglabel换到的wsgname
  workspaceGroupName?: string(name='workspace_group_name'),
  // 所属命名空间
  namespace?: string(name='namespace'),
  // 应用服务详细配置信息，主要为sidecar当前在用的参数信息
  servicesSidecarInfo?: [ AppServiceSidecarReleaseInfo ](name='services_sidecar_info'),
  // 不满足升级条件的服务信息，包含服务不唯一应用及正在升级的应用。
  unsatisfiedServicesInfo?: [ AppServiceSidecarReleaseInfo ](name='unsatisfied_services_info'),
}

/**
 * Description: 获取已发布应用服务的sidecar配置，主要用于sidecar全站升级时，当前服务sidecar状态的获取
 * Summary: 获取已发布应用服务配置
 */
async function querySidecaropsAllservices(request: QuerySidecaropsAllservicesRequest): QuerySidecaropsAllservicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySidecaropsAllservicesEx(request, headers, runtime);
}

/**
 * Description: 获取已发布应用服务的sidecar配置，主要用于sidecar全站升级时，当前服务sidecar状态的获取
 * Summary: 获取已发布应用服务配置
 */
async function querySidecaropsAllservicesEx(request: QuerySidecaropsAllservicesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySidecaropsAllservicesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecarops.allservices.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSidecaropsTemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 要更新的sidecar名称
  sidecarName: string(name='sidecar_name'),
  // 指定要更新的sidecar版本
  sidecarVersion?: string(name='sidecar_version'),
  // 根据image筛选要更新的基线
  image?: string(name='image'),
  // 要更新的sidecar模板
  template?: string(name='template'),
  // 要设置成的scope
  scope?: [ string ](name='scope'),
}

model UpdateSidecaropsTemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 可用于更新基线模板的作用范围等
 * Summary: 更新sidecar基线模板
 */
async function updateSidecaropsTemplate(request: UpdateSidecaropsTemplateRequest): UpdateSidecaropsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSidecaropsTemplateEx(request, headers, runtime);
}

/**
 * Description: 可用于更新基线模板的作用范围等
 * Summary: 更新sidecar基线模板
 */
async function updateSidecaropsTemplateEx(request: UpdateSidecaropsTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSidecaropsTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.sidecarops.template.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDeploymentTemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 模板编码
  name: string(name='name'),
  // 中文名称
  displayName: string(name='display_name'),
  // 模板描述
  description?: string(name='description'),
  // 是否覆盖版本中的发布策略
  overrideDeployConfig: boolean(name='override_deploy_config'),
  // 发布策略
  deployConfig?: DeployConfig(name='deploy_config'),
  // 是否开启变更卡点
  enableCustomHook: boolean(name='enable_custom_hook'),
  // 卡点类型：api或has
  hookType?: string(name='hook_type'),
  // 自定义卡点配置列表
  customHooks?: [ CustomHook ](name='custom_hooks'),
  // 操作人
  operator?: string(name='operator'),
}

model CreateDeploymentTemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建发布模板
 * Summary: 创建发布模板
 */
async function createDeploymentTemplate(request: CreateDeploymentTemplateRequest): CreateDeploymentTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDeploymentTemplateEx(request, headers, runtime);
}

/**
 * Description: 创建发布模板
 * Summary: 创建发布模板
 */
async function createDeploymentTemplateEx(request: CreateDeploymentTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDeploymentTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.deployment.template.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnireleaseSolutionfilesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 日期
  date: string(name='date'),
}

model QueryUnireleaseSolutionfilesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发布方案列表
  solutionFiles?: [ string ](name='solution_files'),
}

/**
 * Description: 查询发布方案文件列表
 * Summary: 查询发布方案文件列表
 */
async function queryUnireleaseSolutionfiles(request: QueryUnireleaseSolutionfilesRequest): QueryUnireleaseSolutionfilesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnireleaseSolutionfilesEx(request, headers, runtime);
}

/**
 * Description: 查询发布方案文件列表
 * Summary: 查询发布方案文件列表
 */
async function queryUnireleaseSolutionfilesEx(request: QueryUnireleaseSolutionfilesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnireleaseSolutionfilesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.unirelease.solutionfiles.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetUnireleaseSolutionfileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // Sftp目录：/sftp/linkw/unionpay/date/id/prod/timestamp-solution.json
  // 
  filePath: string(name='file_path'),
}

model GetUnireleaseSolutionfileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发布方案内容，Json文件
  soultionContent?: string(name='soultion_content'),
}

/**
 * Description: 获取发布方案文件内容
 * Summary: 获取发布方案文件内容
 */
async function getUnireleaseSolutionfile(request: GetUnireleaseSolutionfileRequest): GetUnireleaseSolutionfileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getUnireleaseSolutionfileEx(request, headers, runtime);
}

/**
 * Description: 获取发布方案文件内容
 * Summary: 获取发布方案文件内容
 */
async function getUnireleaseSolutionfileEx(request: GetUnireleaseSolutionfileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetUnireleaseSolutionfileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.unirelease.solutionfile.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDeploymentTemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 模板编码
  name: string(name='name'),
  // 中文名称
  displayName: string(name='display_name'),
  // 模板描述
  description?: string(name='description'),
  // 是否覆盖版本中的发布策略
  overrideDeployConfig: boolean(name='override_deploy_config'),
  // 发布策略
  deployConfig?: DeployConfig(name='deploy_config'),
  // 是否开启变更卡点
  enableCustomHook: boolean(name='enable_custom_hook'),
  // 卡点类型：api或has
  hookType?: string(name='hook_type'),
  // 自定义卡点配置列表
  customHooks?: [ CustomHook ](name='custom_hooks'),
  // 操作人
  operator?: string(name='operator'),
}

model UpdateDeploymentTemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新发布模板
 * Summary: 更新发布模板
 */
async function updateDeploymentTemplate(request: UpdateDeploymentTemplateRequest): UpdateDeploymentTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDeploymentTemplateEx(request, headers, runtime);
}

/**
 * Description: 更新发布模板
 * Summary: 更新发布模板
 */
async function updateDeploymentTemplateEx(request: UpdateDeploymentTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDeploymentTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.deployment.template.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDeploymentTemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 模板编码或名称模糊搜索
  name?: string(name='name'),
  // 当前页码，从1开始，默认为1
  pageNumber?: long(name='page_number'),
  // 分页大小，默认为10
  pageSize?: long(name='page_size'),
  // 查询方式，默认FUZZY，模糊查询
  queryType?: string(name='query_type'),
}

model ListDeploymentTemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总数
  totalCount?: long(name='total_count'),
  // 模板列表
  data?: [ DeploymentTemplate ](name='data'),
}

/**
 * Description: 查询发布模板
 * Summary: 查询发布模板
 */
async function listDeploymentTemplate(request: ListDeploymentTemplateRequest): ListDeploymentTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDeploymentTemplateEx(request, headers, runtime);
}

/**
 * Description: 查询发布模板
 * Summary: 查询发布模板
 */
async function listDeploymentTemplateEx(request: ListDeploymentTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDeploymentTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.deployment.template.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDeploymentTemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 模板编码
  name: string(name='name'),
}

model DeleteDeploymentTemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除发布模板
 * Summary: 删除发布模板
 */
async function deleteDeploymentTemplate(request: DeleteDeploymentTemplateRequest): DeleteDeploymentTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDeploymentTemplateEx(request, headers, runtime);
}

/**
 * Description: 删除发布模板
 * Summary: 删除发布模板
 */
async function deleteDeploymentTemplateEx(request: DeleteDeploymentTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDeploymentTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.deployment.template.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListEmergencyPlansRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 预案名称
  name?: string(name='name'),
  // 当前第几页
  pageNumber?: long(name='page_number'),
  // 每页大小
  pageSize?: long(name='page_size'),
}

model ListEmergencyPlansResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总数
  totalCount?: long(name='total_count'),
  // 预案列表
  data?: [ EmergencyPlan ](name='data'),
}

/**
 * Description: 查询守夜人预案列表
 * Summary: 查询守夜人预案列表
 */
async function listEmergencyPlans(request: ListEmergencyPlansRequest): ListEmergencyPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listEmergencyPlansEx(request, headers, runtime);
}

/**
 * Description: 查询守夜人预案列表
 * Summary: 查询守夜人预案列表
 */
async function listEmergencyPlansEx(request: ListEmergencyPlansRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEmergencyPlansResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.emergency.plans.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateContainerserviceGrayreleaseconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 发布单的time series id
  timeSeriesId?: string(name='time_series_id'),
  // lks service id，与plan_id同时传时前者生效。
  lksServiceId?: string(name='lks_service_id'),
  // 灰度规则
  grayReleaseConfig: GrayReleaseConfig(name='gray_release_config'),
}

model UpdateContainerserviceGrayreleaseconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 修改灰度发布规则
 * Summary: 修改灰度发布规则
 */
async function updateContainerserviceGrayreleaseconfig(request: UpdateContainerserviceGrayreleaseconfigRequest): UpdateContainerserviceGrayreleaseconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateContainerserviceGrayreleaseconfigEx(request, headers, runtime);
}

/**
 * Description: 修改灰度发布规则
 * Summary: 修改灰度发布规则
 */
async function updateContainerserviceGrayreleaseconfigEx(request: UpdateContainerserviceGrayreleaseconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateContainerserviceGrayreleaseconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerservice.grayreleaseconfig.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContainerserivceGrayreleaseconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 发布单的time_series_id
  timeSeriesId?: string(name='time_series_id'),
  // lks service的id，如果time_series_id与lks_service_id同时指定，后者生效
  lksServiceId?: string(name='lks_service_id'),
}

model QueryContainerserivceGrayreleaseconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 灰度发布配置
  grayReleaseConfig?: GrayReleaseConfig(name='gray_release_config'),
}

/**
 * Description: 查询（灰度）发布单的灰度发布配置
 * Summary: 查询（灰度）发布单的灰度发布配置
 */
async function queryContainerserivceGrayreleaseconfig(request: QueryContainerserivceGrayreleaseconfigRequest): QueryContainerserivceGrayreleaseconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContainerserivceGrayreleaseconfigEx(request, headers, runtime);
}

/**
 * Description: 查询（灰度）发布单的灰度发布配置
 * Summary: 查询（灰度）发布单的灰度发布配置
 */
async function queryContainerserivceGrayreleaseconfigEx(request: QueryContainerserivceGrayreleaseconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContainerserivceGrayreleaseconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.ldc.containerserivce.grayreleaseconfig.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

