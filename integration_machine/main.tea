import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.18',
    _prod_code = 'INTEGRATION_MACHINE',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 场所信息
model SceneInfo {
  // 场所名称
  sceneName?: string(name='scene_name', example='123'),
  // 场所码
  sceneCode?: string(name='scene_code', example='123'),
}

// 行程信息
model TravelInfo {
  // 行程码信息
  // 1:没去过疫情区，绿码;
  // 2:去过疫情区，红码;
  // 3:其他，黄码;
  // 0:行程信息不全;
  // -1:查询失败
  travelCode?: string(name='travel_code', example='1'),
  // 行程码异常原因
  travelFactor?: string(name='travel_factor', example='123'),
}

// 统计附加额外字段
model StatisticsExtendArg {
  // 字段key
  key: string(name='key', example='totalFace'),
  // 数量
  number: long(name='number', example='100'),
}

// 户籍所在省分布
model IdentityDistributed {
  // 户籍身份证号(前两位标识)
  // 11代表北京市，12天代表天津市，13河北省，14山代表山西省，15内代表蒙古自治区，21代表辽宁省，22代表吉林省，23代表黑龙江省，31代表上海市，32代表江苏省，33代表浙江省，34代表代表安徽省，35代表福建省，36代表江西省，37代表山东省，41代表河南省，42代表湖北省，43代表湖南省，44代表广东省，45代表广西壮族自治区，46代表海南省，50代表重庆市，51代表四川省，52代表贵州省，53代表云南省，54代表西藏自治区，61代表陕西省，62代表甘肃省，63代表青海省，64代表宁夏回族自治区，65代表新疆维吾尔自治区，71代表台湾省，81代表香港特别行政区，82代表澳门特别行政区
  key: string(name='key', example='11'),
  // 户籍所在省分布数量
  number: long(name='number', example='100'),
}

// 抗原信息
model AntigenInfo {
  // 抗原检测状态
  antigenResult?: string(name='antigen_result', example='123'),
  // 抗原检测时间戳
  antigenTimestamp?: long(name='antigen_timestamp', example='1654570807000'),
}

// 核酸信息
model NucleicAcidInfo {
  // 检测类型
  reportType?: string(name='report_type', example='1'),
  // 检测结果
  reportResult?: string(name='report_result', example='24H阳性'),
  // 检测机构
  reportOrganization?: string(name='report_organization', example='123'),
  // 检测时间戳(单位: ms)
  reportTimestamp?: long(name='report_timestamp', example='1654570807000'),
}

// 疫苗接种信息
model VaccinationInfo {
  // 疫苗接种信息：
  // 0:查询失败 
  // 1:未接种
  // 2:已接种一针
  // 3:完成接种
  vaccinationCode?: string(name='vaccination_code', example='1'),
  // 疫苗接种信息
  vaccinationDesc?: string(name='vaccination_desc', example='123'),
  // 疫苗接种时间戳（单位：ms）
  vaccinationTimestamp?: long(name='vaccination_timestamp', example='1654570807000'),
}

// 抗原信息
model AntigenInformation {
  // 抗原结果
  antigenResult: string(name='antigen_result', example='阴性'),
  // 抗原时间
  antigenTime: string(name='antigen_time', example='2022-07-07 12:12:12'),
}

// 核酸信息
model NucleicAcidInformation {
  // 核酸结果
  nucleicAcidResult: string(name='nucleic_acid_result', example='阴性'),
  // 核酸时间
  nucleicAcidTime: string(name='nucleic_acid_time', example='2022-07-07 12:12:12'),
}

// 设备实时通行统计
model DeviceStatistics {
  // 设备SN号
  serialNo: string(name='serial_no', example='12345567745'),
  // 设备状态(初始化:init,在线:online,离线:offline,故障:fault)
  status: string(name='status', example='online'),
  // 通行人次
  total: long(name='total', example='100'),
  // 绿码人次
  green: long(name='green', example='100'),
  // 黄码人次
  yellow: long(name='yellow', example='100'),
  // 红码人次
  red: long(name='red', example='100'),
  // 码值异常人次
  codeErr: long(name='code_err', example='100'),
  // 刷脸人次
  face: long(name='face', example='100'),
  // 刷健康码人次
  healthCode: long(name='health_code', example='100'),
  // 刷身份证人次
  cert: long(name='cert', example='100'),
  // 其他方式人次
  otherMode: long(name='other_mode', example='100'),
  // 通行成功人次
  pass: long(name='pass', example='100'),
  // 通行失败人次
  stop: long(name='stop', example='100'),
  // 平均通行时间(ms)
  avgTime: long(name='avg_time', example='1000'),
  // 疫苗未接种人次
  vaccineNo: long(name='vaccine_no', example='100'),
  // 疫苗接种一针人次
  vaccineFirst: long(name='vaccine_first', example='100'),
  // 疫苗接种两针人次
  vaccineSecond: long(name='vaccine_second', example='100'),
  // 疫苗接种三针人次
  vaccineThird: long(name='vaccine_third', example='100'),
  // 疫苗未查询人次
  vaccineUnknown: long(name='vaccine_unknown', example='100'),
  // 核酸有效期24h人次
  nucleicAcid24h: long(name='nucleic_acid24h', example='100'),
  // 核酸有效期48h人次
  nucleicAcid48h: long(name='nucleic_acid48h', example='100'),
  // 核酸有效期72h人次
  nucleicAcid72h: long(name='nucleic_acid72h', example='100'),
  // 核酸有效期7d人次
  nucleicAcid7d: long(name='nucleic_acid7d', example='100'),
  // 超过7D或无核酸人次
  nucleicAcidOther: long(name='nucleic_acid_other', example='100'),
  // 体温小于35.5人次
  temperatureA: long(name='temperature_a', example='100'),
  // 体温35.5-36度人次
  temperatureB: long(name='temperature_b', example='100'),
  // 体温36.1-36.3度人次
  temperatureC: long(name='temperature_c', example='100'),
  // 体温36.4-36.7度人次
  temperatureD: long(name='temperature_d', example='100'),
  // 体温36.8-37度人次
  temperatureE: long(name='temperature_e', example='100'),
  // 体温37.1-37.5度人次
  temperatureF: long(name='temperature_f', example='100'),
  // 体温37.6-38度人次
  temperatureG: long(name='temperature_g', example='100'),
  // 体温38.1-38.5度人次
  temperatureH: long(name='temperature_h', example='100'),
  // 体温38.6-39度人次
  temperatureI: long(name='temperature_i', example='100'),
  // 体温大于39人次
  temperatureJ: long(name='temperature_j', example='100'),
  // 体温未获取人次
  temperatureK: long(name='temperature_k', example='100'),
  // 户籍所在省分布
  identityDistributedList: [ IdentityDistributed ](name='identity_distributed_list', example=''),
  // 扩展统计字段
  extendArgList: [ StatisticsExtendArg ](name='extend_arg_list', example=''),
}

// 疫苗信息
model VaccinationInformation {
  // 疫苗接种状态(0查询失败 1未接种 2已接种一针 3完成接种)
  vaccinationStatus: string(name='vaccination_status', example='1'),
  // 疫苗接种时间
  vaccinationTime: string(name='vaccination_time', example='2022-07-07 12:12:12'),
}

// 设备参数名称/key/value
model ArgsNameValue {
  // 设备参数名称
  argsName?: string(name='args_name', example='名称'),
  // 设备参数key
  argsKey: string(name='args_key', example='key'),
  // 设备参数value
  argsValue: string(name='args_value', example='value'),
  // 设备参数标识(ip,mac,bizid)
  argsMark?: string(name='args_mark', example='ip'),
}

// 查询健康信息扩展参数
model QueryHealthInfoExtendedArg {
  // 参数名
  argKey?: string(name='arg_key', example='temperature'),
  // 参数值
  argValue?: string(name='arg_value', example='36.5'),
}

// 场所信息
model SceneInformation {
  // 场所地址
  sceneAddress: string(name='scene_address', example='杭州'),
  // 场所ID
  sceneId: string(name='scene_id', example='sdewqw121'),
}

// 通行记录
model HealthInfoLog {
  // 身份证号
  certNo: string(name='cert_no', example='61012*********3421'),
  // 姓名
  certName: string(name='cert_name', example='王*'),
  // 健康码颜色(绿色:1,黄码:2,红码:3,灰码:4)
  healthCode: string(name='health_code', example='1'),
  // 体温
  temperature: string(name='temperature', example='37.5'),
  // 行程信息
  // 
  travelInfo: TravelInfo(name='travel_info', example=''),
  // 核酸信息
  // 
  nucleicAcidInfo: NucleicAcidInfo(name='nucleic_acid_info', example=''),
  // 疫苗信息
  // 
  vaccinationInfo: VaccinationInfo(name='vaccination_info', example=''),
  // 抗原信息
  // 
  antigenInfo: AntigenInfo(name='antigen_info', example=''),
  // 场所信息
  // 
  sceneInfo: SceneInfo(name='scene_info', example=''),
  // 数据源通行状态 0:禁止通行,1:允许通行
  // 
  channelPassState: string(name='channel_pass_state', example='1'),
  // 经度
  // 
  longitude: string(name='longitude', example='39.916527'),
  // 纬度
  latitude: string(name='latitude', example='39.916527'),
  // 通行方式（1:自动刷脸, 2:刷证非1:1, 3:刷证1:1, 4:反扫, 5:刷奥智定制卡, 6:手动刷脸, 99:刷苏州市民卡
  // 
  passMode: string(name='pass_mode', example='反扫 '),
  // 通行时长(单位:毫秒)
  // 
  passDuration: string(name='pass_duration', example='2000'),
  // 通行时间
  // 
  passTime: string(name='pass_time', example='2022-07-07 12:12:12 '),
  // 通行结果(0:禁止通行,1:允许通行)
  // 
  passResult: string(name='pass_result', example='1'),
}

// 健康码信息
model HealthInfo {
  // 健康码编码：
  // 1:绿色 ，
  // 2:黄色 ，
  // 3:红色 ，
  // 4.灰码 。
  healthCode?: string(name='health_code', example='1'),
  // 健康码红色原因
  healthFactor?: string(name='health_factor', example='123'),
}

// 通行日结统计
model HealthStatistics {
  // 统计日期
  statisticsDate: string(name='statistics_date', example='2022-09-01'),
  // 通行总数
  totalCount: long(name='total_count', example='100'),
  // 刷证数
  certCount: long(name='cert_count', example='100'),
  // 刷脸数
  faceCount: long(name='face_count', example='100'),
  // 二维码反扫数
  inverseCount: long(name='inverse_count', example='100'),
  // 正常通行数
  passCount: long(name='pass_count', example='100'),
  // 禁止通行数
  stopCount: long(name='stop_count', example='100'),
}

// 行程信息
model TravelInformation {
  // 1:没去过疫情区，绿码;
  // 2:去过疫情区，红码;
  // 3:其他，黄码;
  // 0:行程信息不全;
  // -1查询失败
  travelCode: string(name='travel_code', example='1'),
  // 行程途径地
  travelPath: string(name='travel_path', example='杭州'),
}

model QueryHealthinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备SN
  serialNo: string(name='serial_no'),
  // 设备厂商
  corpName: string(name='corp_name'),
  // 被查询人姓名
  name: string(name='name'),
  // 被查询人身份证号
  certNo: string(name='cert_no'),
  // 防疫信息类型,枚举值如下：
  // 健康信息 health ,
  // 疫苗信息 vaccination ,
  // 核酸信息 nucleicAcid ,
  // 行程信息 travel ,
  // 抗原信息 antigen ,
  // 场景信息  scene .
  // 需要有多项信息类型时，用"|"分隔开。eg: "health|nucleicAcid"
  healthTypes: string(name='health_types'),
  // 通行记录ID
  passId?: string(name='pass_id'),
  // 获取健康信息所需扩展参数列表：体温（temperature：36.5）
  extensionInfo?: [ QueryHealthInfoExtendedArg ](name='extension_info'),
}

model QueryHealthinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 健康信息
  healthInfo?: HealthInfo(name='health_info'),
  // 核酸信息
  nucleicAcidInfo?: NucleicAcidInfo(name='nucleic_acid_info'),
  // 行程信息
  // 
  travelInfo?: TravelInfo(name='travel_info'),
  // 疫苗接种信息
  vaccinationInfo?: VaccinationInfo(name='vaccination_info'),
  // 抗原信息
  antigenInfo?: AntigenInfo(name='antigen_info'),
  // 场所信息
  sceneInfo?: SceneInfo(name='scene_info'),
  // 通行记录ID
  passId?: string(name='pass_id'),
}

/**
 * Description: 查询防疫健康信息
 * Summary: 查询防疫健康信息
 */
async function queryHealthinfo(request: QueryHealthinfoRequest): QueryHealthinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryHealthinfoEx(request, headers, runtime);
}

/**
 * Description: 查询防疫健康信息
 * Summary: 查询防疫健康信息
 */
async function queryHealthinfoEx(request: QueryHealthinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryHealthinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.antim.healthinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushHealthinfologRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 通行记录ID
  passId: string(name='pass_id'),
  // 设备SN
  serialNo: string(name='serial_no'),
  // 设备厂商
  // 
  corpName: string(name='corp_name'),
  // 通行时长(ms)
  costTime: long(name='cost_time'),
  // 通行结果
  passResult?: string(name='pass_result'),
  // 被查询人姓名
  // 
  name?: string(name='name'),
  // 被查询人身份证号
  certNo?: string(name='cert_no'),
  // 异常类型
  errorType?: string(name='error_type'),
  // 错误码
  errorCode?: string(name='error_code'),
  // 错误信息
  errorMsg?: string(name='error_msg'),
  // 体温
  temperature?: string(name='temperature'),
  // 健康信息
  healthInfo?: HealthInfo(name='health_info'),
  // 核酸信息
  nucleicAcidInfo?: NucleicAcidInfo(name='nucleic_acid_info'),
  // 行程信息
  // 
  travelInfo?: TravelInfo(name='travel_info'),
  // 疫苗接种信息
  vaccinationInfo?: VaccinationInfo(name='vaccination_info'),
  // 抗原信息
  antigenInfo?: AntigenInfo(name='antigen_info'),
  // 场所信息
  // 
  sceneInfo?: SceneInfo(name='scene_info'),
  // 通行方式(1:自动刷脸, 2:刷证非1:1, 3:刷证1:1, 4:反扫, 5:刷奥智定制卡, 6:手动刷脸)
  passMode?: string(name='pass_mode'),
  // 经度
  longitude?: string(name='longitude'),
  // 纬度
  latitude?: string(name='latitude'),
  // 数据源通行状态 0:禁止通行,1:允许通行
  channelPassState?: string(name='channel_pass_state'),
}

model PushHealthinfologResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 通行记录ID
  passId?: string(name='pass_id'),
}

/**
 * Description: 上报通行记录
 * Summary: 上报通行记录
 */
async function pushHealthinfolog(request: PushHealthinfologRequest): PushHealthinfologResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushHealthinfologEx(request, headers, runtime);
}

/**
 * Description: 上报通行记录
 * Summary: 上报通行记录
 */
async function pushHealthinfologEx(request: PushHealthinfologRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushHealthinfologResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.antim.healthinfolog.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetHealthinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备SN
  // 
  serialNo: string(name='serial_no'),
  // 设备厂商
  // 
  corpName: string(name='corp_name'),
  // 健康身份二维码
  qrCode: string(name='qr_code'),
  // 防疫信息类型,枚举值如下： 健康信息 health , 疫苗信息 vaccination , 核酸信息 nucleicAcid , 行程信息 travel , 抗原信息 antigen , 场景信息 scene . 需要有多项信息类型时，用"|"分隔开。eg: "health|nucleicAcid"
  healthTypes: string(name='health_types'),
  // 通行记录ID
  // 
  passId?: string(name='pass_id'),
  // 获取健康信息所需扩展参数列表：体温（temperature：36.5）
  extensionInfo?: [ QueryHealthInfoExtendedArg ](name='extension_info'),
}

model GetHealthinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 健康信息
  // 
  healthInfo?: HealthInfo(name='health_info'),
  // 核酸信息
  // 
  nucleicAcidInfo?: NucleicAcidInfo(name='nucleic_acid_info'),
  // 行程信息
  // 
  travelInfo?: TravelInfo(name='travel_info'),
  // 疫苗接种信息
  // 
  vaccinationInfo?: VaccinationInfo(name='vaccination_info'),
  // 抗原信息
  // 
  antigenInfo?: AntigenInfo(name='antigen_info'),
  // 场所信息
  // 
  sceneInfo?: SceneInfo(name='scene_info'),
  // 被查询人姓名
  name?: string(name='name'),
  // 被查询人身份证号
  // 
  certNo?: string(name='cert_no'),
  // 通行记录ID
  passId?: string(name='pass_id'),
}

/**
 * Description: 健康身份二维码反查防疫健康信息
 * Summary: 健康身份二维码反查防疫健康信息
 */
async function getHealthinfo(request: GetHealthinfoRequest): GetHealthinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getHealthinfoEx(request, headers, runtime);
}

/**
 * Description: 健康身份二维码反查防疫健康信息
 * Summary: 健康身份二维码反查防疫健康信息
 */
async function getHealthinfoEx(request: GetHealthinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetHealthinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.antim.healthinfo.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceargsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备SN
  serialNo: string(name='serial_no'),
  // 设备厂商
  corpName: string(name='corp_name'),
}

model QueryDeviceargsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备参数列表
  argsNameValueList?: [ ArgsNameValue ](name='args_name_value_list'),
}

/**
 * Description: 健康码设备配置参数列表查询
 * Summary: 健康码设备配置参数列表查询
 */
async function queryDeviceargs(request: QueryDeviceargsRequest): QueryDeviceargsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceargsEx(request, headers, runtime);
}

/**
 * Description: 健康码设备配置参数列表查询
 * Summary: 健康码设备配置参数列表查询
 */
async function queryDeviceargsEx(request: QueryDeviceargsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceargsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.antim.deviceargs.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitDeviceargsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备sn
  serialNo: string(name='serial_no'),
  // 设备厂商
  corpName: string(name='corp_name'),
  // 设备参数名称/key/value列表
  argsNameValueList: [ ArgsNameValue ](name='args_name_value_list'),
}

model InitDeviceargsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 健康码设备参数配置初始化
 * Summary: 健康码设备参数配置初始化
 */
async function initDeviceargs(request: InitDeviceargsRequest): InitDeviceargsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initDeviceargsEx(request, headers, runtime);
}

/**
 * Description: 健康码设备参数配置初始化
 * Summary: 健康码设备参数配置初始化
 */
async function initDeviceargsEx(request: InitDeviceargsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitDeviceargsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.antim.deviceargs.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryHealthinfologRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 开始时间(开始时间-结束时间最大时间为7天)
  startTime: string(name='start_time'),
  // 结束时间
  endTime: string(name='end_time'),
  // 页码
  pageNum: long(minimum=1, name='page_num'),
  // 每页条数
  pageSize: long(maximum=500, minimum=1, name='page_size'),
  // 设备号
  serialNo?: string(name='serial_no'),
}

model QueryHealthinfologResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总条数
  total?: long(name='total'),
  // 总页数
  pages?: long(name='pages'),
  // 列表数据
  dataList?: [ HealthInfoLog ](name='data_list'),
}

/**
 * Description: 通行记录查询
 * Summary: 通行记录查询
 */
async function queryHealthinfolog(request: QueryHealthinfologRequest): QueryHealthinfologResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryHealthinfologEx(request, headers, runtime);
}

/**
 * Description: 通行记录查询
 * Summary: 通行记录查询
 */
async function queryHealthinfologEx(request: QueryHealthinfologRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryHealthinfologResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.antim.healthinfolog.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryHealthstatisticsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 开始日期
  startDate: string(name='start_date'),
  // 结束日期(为空或等于开始日期时为查询当天,时间范围最大可查询100天)
  endDate?: string(name='end_date'),
  // 统计类型(通行人数统计：PERSON，通行次数统计：NUMBER)
  type: string(name='type'),
}

model QueryHealthstatisticsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 日结统计数据
  dataList?: [ HealthStatistics ](name='data_list'),
}

/**
 * Description: 通行日结统计查询
 * Summary: 通行日结统计查询
 */
async function queryHealthstatistics(request: QueryHealthstatisticsRequest): QueryHealthstatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryHealthstatisticsEx(request, headers, runtime);
}

/**
 * Description: 通行日结统计查询
 * Summary: 通行日结统计查询
 */
async function queryHealthstatisticsEx(request: QueryHealthstatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryHealthstatisticsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.antim.healthstatistics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDevicestatisticsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备SN号(最大限制100条)
  serialNoList: [ string ](name='serial_no_list'),
  // 厂商名称
  // 为空时:默认值telpo(天波)
  // 可用枚举值:
  // telpo(天波) 
  // hemiao(禾苗)
  cropName?: string(name='crop_name'),
  // 开始时间(精确到ms)
  startTime: long(name='start_time'),
  // 结束时间(精确到ms,时间跨度不能超过24h)
  endTime: long(name='end_time'),
}

model QueryDevicestatisticsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备实时统计
  dataList?: [ DeviceStatistics ](name='data_list'),
}

/**
 * Description: 设备实时通行统计查询
 * Summary: 设备实时通行统计查询
 */
async function queryDevicestatistics(request: QueryDevicestatisticsRequest): QueryDevicestatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDevicestatisticsEx(request, headers, runtime);
}

/**
 * Description: 设备实时通行统计查询
 * Summary: 设备实时通行统计查询
 */
async function queryDevicestatisticsEx(request: QueryDevicestatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDevicestatisticsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.antim.devicestatistics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

