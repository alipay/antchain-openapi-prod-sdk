import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.4.6',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 收益模型
model Revenue {
  // 收益币种，目前仅支持CNY
  currency: string(name='currency', example='CNY'),
  // 收益金额，单位为分
  value: long(name='value', example='100'),
}

// 交易订单信息
model TradeOrder {
  // 订单唯一编号
  orderNo: string(name='order_no', example='f0aa07eb022d0504ba33d0d1bb99e0afee30d810393dcacc022aa220'),
  // 订单原始金额，单位分
  originalTotalAmount: long(name='original_total_amount', example='100'),
  // 订单实付金额，单位分
  actualTotalAmount: long(name='actual_total_amount', example='90'),
  // 数量
  itemCount: long(name='item_count', example='2'),
  // 币种，暂时只支持人民币 CNY
  currency?: string(name='currency', example='CNY'),
}

// 发放区间信息
model Stage {
  // 票数区间上限
  upperLimit: long(name='upper_limit', example='1000'),
  // 票数区间下限
  lowerLimit: long(name='lower_limit', example='500'),
  // 当前区间粉丝粒数量，单位分个
  tokenAmount: long(name='token_amount', example='100'),
  // 当前区间粉丝粒价格，单位分
  tokenPrice: long(name='token_price', example='200'),
}

// 项目
model Project {
  // 项目对应的合约 ID
  contractId?: string(name='contract_id', example='f0aa07eb022d0504ba33d0d1bb99e0afee30d810393dcacc022aa220'),
  // 项目结束时间，精确到毫秒，FILM类型订单必填
  projectEndTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='project_end_time', example='2018-10-10T10:10:00Z'),
  // 项目ID
  projectId: string(name='project_id', example='123456'),
  // 项目名称
  projectName?: string(name='project_name', example='玩具总动员2'),
  // 项目开始时间，精确到毫秒，FILM类型订单必填
  projectStartTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='project_start_time', example='2018-10-10T10:10:00Z'),
  // 项目类型，目前支持FILM：电影，CAR：汽车
  projectType: string(name='project_type', example='FILM | CAR'),
}

// 粉丝粒操作流水
model TokenOperationDetail {
  // 粉丝粒操作流水状态，pending：发放中，confirmed：已到账，canceled：已取消
  status: string(name='status', example='pending | confirmed | canceled '),
  // 粉丝粒数量，单位分个
  tokenAmount: long(name='token_amount', example='100'),
  // 明细发生时间
  time: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='time', example='2018-10-10T10:10:00Z'),
  // 明细信息
  info: string(name='info', example='购票发放'),
  // 唯一业务单号
  bizId: string(name='biz_id', example='23452356345634'),
  // 订单编号
  orderNo: string(name='order_no', example='202008241504423487681310'),
}

// 用户收益明细
model UserRevenueDetail {
  // 累计收益
  accumulativeRevenue: Revenue(name='accumulative_revenue', example=''),
  // 待发放粉丝粒数量，单位分个。
  pendingTokenAmount: long(name='pending_token_amount', example='100'),
  // 作品名称
  projectName: string(name='project_name', example='玩具总动员'),
  // 可兑现粉丝粒数量，单位分个。
  redeemableTokenAmount: long(name='redeemable_token_amount', example='20'),
  // 已兑现粉丝粒数量，单位分个
  redeemedTokenAmount: long(name='redeemed_token_amount', example='12'),
  // 已发放粉丝粒数量，单位分个。
  releasedTokenAmount: long(name='released_token_amount', example='100'),
  // 粉丝粒单价，单位分
  tokenPrice: long(name='token_price', example='61'),
  // 可零收益
  withdrawRevenue: Revenue(name='withdraw_revenue', example=''),
}

// 用户资产明细
model UserAssetDetail {
  // 粉丝粒变化数量，带符号整数，单位分个。
  asset: long(name='asset', example='100'),
  // 资产类型：PRE_ALLOCATION（待发放），RELEASED（已到账），CANCELLED（已取消），REDEEMING（兑现中），REDEEMED（已兑现）
  assetType: string(name='asset_type', example='PRE_ALLOCATION | RELEASED | CANCELLED | REDEEMING | REDEEMED'),
  // 业务单号
  bizNo: string(name='biz_no', example='24435254363465'),
  // 事件时间，时区GMT+8，精确到毫秒。
  eventTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='event_time', example=''),
  // 备注信息
  memo: string(name='memo', example='备注'),
  // 项目名称
  projectName: string(name='project_name', example='玩具总动员'),
  // 收益变化额度，单位为分。
  revenue: Revenue(name='revenue', example='200'),
}

// 用户资产信息
model AssetDetail {
  // Token获得类型
  gainType: string(name='gain_type', example='SHARE | BUY '),
  // Token发放状态
  status: string(name='status', example='PENDING | CONFIRMED'),
  // 购票数
  ticketNumber: long(name='ticket_number', example='2'),
  // Token数，单位为分个，1分个=0.01个
  token: long(name='token', example='1'),
  // Token展示数
  tokenDisplay: string(name='token_display', example='1.41'),
  // 用户昵称
  nickname: string(name='nickname', example='一个没钱的人'),
}

// 订单详情
model Order {
  // 实付金额，单位分
  actualTotalAmount: long(name='actual_total_amount', example='10000'),
  // 币种，目前仅支持 CNY
  currency?: string(name='currency', example='CNY'),
  // 数量
  itemCount: long(name='item_count', example='1'),
  // 唯一订单号
  orderNo: string(name='order_no', example='1234567890'),
  // 订单状态，ORDER_CREATE：订单创建，ORDER_CANCEL：订单取消
  orderStatus: string(name='order_status', example='ORDER_CREATE | ORDER_CANCEL'),
  // 原始金额，单位分
  originalTotalAmount: long(name='original_total_amount', example='10000'),
  // 确认类型，DIRECT：直接发放，TWO_STEP：两部发放。该字段可为空，默认为 TWO_STEP
  confirmType?: string(name='confirm_type', example='DIRECT | TWO_STEP'),
}

// 金额模型
model Money {
  // 金额，单位分
  value: long(name='value', example='100'),
  // 币种，暂只支持人民币CNY
  currency: string(name='currency', example='CNY'),
}

// 当前用户收益
model CurrentRevenue {
  // 币种，当前仅支持CNY
  currency: string(name='currency', example='CNY'),
  // 金额，单位为分
  value: long(name='value', example=''),
}

// 累计全部参与收益
model AccumulativeRevenue {
  // 币种，当前仅支持 CNY
  currency: string(name='currency', example='CNY'),
  // 金额，单位为分
  value: long(name='value', example=''),
}

// 用户结构体
model User {
  // 用户账户，手机号格式为： +区号-手机号，分享码：6位字母，支付宝登录账号：手机号/邮箱
  userIdNo: string(name='user_id_no', example='+86-13000000000 |  AAAAAA | 13000000000 | user@test.com'),
  // 用户账号类型，当前仅支持手机号和分享码，PHONE：手机号，SHARE_CODE：分享码，
  // ALIPAY_LOGON_ID：支付宝登录账号
  userIdType: string(name='user_id_type', example='PHONE | SHARE_CODE | ALIPAY_LOGON_ID'),
}

model QueryCustomerProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 登录支付宝账号，手机号或者邮箱地址
  logonId: string(name='logon_id'),
  // 登录账号类型，PHONE 为手机号，EMAIL 为邮箱地址。
  logonIdType: string(name='logon_id_type'),
}

model QueryCustomerProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 项目列表，元素为项目名称。
  projects?: [ Project ](name='projects'),
}

/**
 * Description: 查询用户参与的所有项目
 * Summary: 用户参与的项目查询
 */
async function queryCustomerProject(request: QueryCustomerProjectRequest): QueryCustomerProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCustomerProjectEx(request, headers, runtime);
}

/**
 * Description: 查询用户参与的所有项目
 * Summary: 用户参与的项目查询
 */
async function queryCustomerProjectEx(request: QueryCustomerProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCustomerProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.customer.project.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCustomerDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资产类型：PRE_ALLOCATION（待发放），RELEASED（已到账），CANCELLED（已取消），REDEEMING（兑现中），REDEEMED（已兑现）
  assetType?: string(name='asset_type'),
  // 合约ID
  contractId?: string(name='contract_id'),
  // 数据类型，ASSET：资产信息， REVENUE：收益信息
  dataType: string(name='data_type'),
  // 截止时间，时区GMT+8，精确到毫秒
  endTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='end_time'),
  // 登录支付宝的账号，手机号或者邮箱
  logonId: string(name='logon_id'),
  // 登录账号类型，PHONE：手机号， EMAIL：邮箱地址
  logonIdType: string(name='logon_id_type'),
  // 排序方式，ASC：升序， DESC：降序，默认按照时间降序
  orderBy?: string(name='order_by'),
  // 页码
  pageNum?: long(name='page_num'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 起始时间，时区GMT+8，精确到毫秒
  startTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_time'),
}

model QueryCustomerDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据类型，ASSET：资产信息， REVENUE：收益信息
  dataType?: string(name='data_type'),
  // 登录支付宝的账号，手机号或者邮箱地址
  logonId?: string(name='logon_id'),
  // 登录账号类型，PHONE：手机号， EMAIL：电子邮箱
  logonIdType?: string(name='logon_id_type'),
  // 页码
  pageNum?: long(name='page_num'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 总数
  totalCount?: long(name='total_count'),
  // 用户资产信息列表
  userAssetDetails?: [ UserAssetDetail ](name='user_asset_details'),
  // 用户收益信息
  userRevenueData?: UserRevenueDetail(name='user_revenue_data'),
  // 用户虚拟唯一标识
  vid?: string(name='vid'),
}

/**
 * Description: 查询用户数据的接口
 * Summary: 用户数据查询接口
 */
async function queryCustomerData(request: QueryCustomerDataRequest): QueryCustomerDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCustomerDataEx(request, headers, runtime);
}

/**
 * Description: 查询用户数据的接口
 * Summary: 用户数据查询接口
 */
async function queryCustomerDataEx(request: QueryCustomerDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCustomerDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.customer.data.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetUserSharecodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 分享者账号，如果账号类型为手机号则格式如 +86-11 位手机号，如果账号类型为支付宝账号，则填写邮箱地址或者 11 位手机号
  sharerId: string(name='sharer_id'),
  // 分享者账号类型，PHONE：手机号，ALIPAY_LOGON_ID：支付宝账号
  sharerIdType: string(name='sharer_id_type'),
}

model GetUserSharecodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分享码
  shareCode?: string(name='share_code'),
}

/**
 * Description: 为用户创建分享码
 * Summary: 用户分享码创建接口
 */
async function getUserSharecode(request: GetUserSharecodeRequest): GetUserSharecodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getUserSharecodeEx(request, headers, runtime);
}

/**
 * Description: 为用户创建分享码
 * Summary: 用户分享码创建接口
 */
async function getUserSharecodeEx(request: GetUserSharecodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetUserSharecodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.user.sharecode.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendUserProjectordermsgRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 购买者
  buyer: User(name='buyer'),
  // 链ID
  chainId: string(name='chain_id'),
  // 订单详情
  order: Order(name='order'),
  // 项目信息
  project: Project(name='project'),
  // 分享者
  sharer: User(name='sharer'),
}

model SendUserProjectordermsgResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 发送用户的项目订单数据
 * Summary: 用户项目订单消息发送接口
 */
async function sendUserProjectordermsg(request: SendUserProjectordermsgRequest): SendUserProjectordermsgResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendUserProjectordermsgEx(request, headers, runtime);
}

/**
 * Description: 发送用户的项目订单数据
 * Summary: 用户项目订单消息发送接口
 */
async function sendUserProjectordermsgEx(request: SendUserProjectordermsgRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendUserProjectordermsgResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.user.projectordermsg.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryProjectInfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 项目ID
  projectId: string(name='project_id'),
}

model QueryProjectInfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 项目名称
  projectName?: string(name='project_name'),
  // 总粉丝粒数，单位分个
  totalTokenAmount?: long(name='total_token_amount'),
  // 未发放粉丝粒数，单位分个
  remainingTokenAmount?: long(name='remaining_token_amount'),
  // 已发放粉丝粒数，单位分个
  releasedTokenAmount?: long(name='released_token_amount'),
  // 已提现粉丝粒数，单位分个
  redeemedTokenAmount?: long(name='redeemed_token_amount'),
  // 总资金金额，单位分
  totalPrizeAmount?: Money(name='total_prize_amount'),
  // 未消耗资金金额，单位分
  unusedPrizeAmount?: Money(name='unused_prize_amount'),
  // 已消耗资金金额，单位分
  usedPrizeAmount?: Money(name='used_prize_amount'),
  // 开始发放时间
  allocationStartTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='allocation_start_time'),
  // 停止发放时间
  allocationEndTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='allocation_end_time'),
  // 开始兑现时间
  redeemStartTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='redeem_start_time'),
  // 停止兑现时间
  redeemEndTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='redeem_end_time'),
  // 发放该项目粉丝粒的订单内票数总和
  ticketNumber?: long(name='ticket_number'),
  // 当前粉丝粒单价，单位分
  currentTokenPrice?: Money(name='current_token_price'),
  // 粉丝粒保底价格，单位分
  minTokenPrice?: Money(name='min_token_price'),
  // 发放区间信息
  currentStage?: Stage(name='current_stage'),
  // 所有发放区间信息
  allStages?: [ Stage ](name='all_stages'),
  // 项目参与用户数
  projectUserNum?: long(name='project_user_num'),
  // 项目订单总数
  projectOrderNum?: long(name='project_order_num'),
  // 项目已售商品总数
  projectItemNum?: long(name='project_item_num'),
}

/**
 * Description: 查询项目信息查询
 * Summary: 项目信息查询接口
 */
async function queryProjectInfo(request: QueryProjectInfoRequest): QueryProjectInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryProjectInfoEx(request, headers, runtime);
}

/**
 * Description: 查询项目信息查询
 * Summary: 项目信息查询接口
 */
async function queryProjectInfoEx(request: QueryProjectInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryProjectInfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.project.info.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUserInfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 项目唯一编码
  projectId: string(name='project_id'),
  // 用户账号信息
  user: User(name='user'),
}

model QueryUserInfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 项目名称
  projectName?: string(name='project_name'),
  // 已获得粉丝粒总数，单位分个
  gainedTokenAmount?: long(name='gained_token_amount'),
  // 当前粉丝粒持有数量，单位分个
  currentTokenAmount?: long(name='current_token_amount'),
  // 已兑现粉丝粒数量，单位分个
  redeemedTokenAmount?: long(name='redeemed_token_amount'),
  // 累计获得奖金
  accumulativeRevenue?: Revenue(name='accumulative_revenue'),
  // 当前可兑奖金
  currentRevenue?: Revenue(name='current_revenue'),
  // 已兑现奖金
  redeemedRevenue?: Revenue(name='redeemed_revenue'),
  // 自购商品数量
  buyAmountFromSelf?: long(name='buy_amount_from_self'),
  // 分享购买商品数量
  buyAmountFromShare?: long(name='buy_amount_from_share'),
}

/**
 * Description: 查询用户信息
 * Summary: 用户信息查询接口
 */
async function queryUserInfo(request: QueryUserInfoRequest): QueryUserInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUserInfoEx(request, headers, runtime);
}

/**
 * Description: 查询用户信息
 * Summary: 用户信息查询接口
 */
async function queryUserInfoEx(request: QueryUserInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUserInfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.user.info.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUserTokenallocationdetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 项目唯一编码
  projectId: string(name='project_id'),
  // 用户账户信息
  user: User(name='user'),
  // 页码
  pageNum: long(name='page_num'),
  // 页面大小
  pageSize: long(name='page_size'),
}

model QueryUserTokenallocationdetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 粉丝粒操作流水
  allocationDetail?: [ TokenOperationDetail ](name='allocation_detail'),
}

/**
 * Description: 查询用户粉丝粒获得明细
 * Summary: 用户粉丝粒获得明细查询接口
 */
async function queryUserTokenallocationdetail(request: QueryUserTokenallocationdetailRequest): QueryUserTokenallocationdetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUserTokenallocationdetailEx(request, headers, runtime);
}

/**
 * Description: 查询用户粉丝粒获得明细
 * Summary: 用户粉丝粒获得明细查询接口
 */
async function queryUserTokenallocationdetailEx(request: QueryUserTokenallocationdetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUserTokenallocationdetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.user.tokenallocationdetail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUserTokenredeemdetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 项目唯一编码
  projectId: string(name='project_id'),
  // 用户账户信息
  user: User(name='user'),
  // 页码
  pageNum: long(name='page_num'),
  // 页面大小
  pageSize: long(name='page_size'),
}

model QueryUserTokenredeemdetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 兑现流水
  redeemDetail?: [ TokenOperationDetail ](name='redeem_detail'),
}

/**
 * Description: 查询用户粉丝粒兑现明细
 * Summary: 用户粉丝粒兑现明细查询接口
 */
async function queryUserTokenredeemdetail(request: QueryUserTokenredeemdetailRequest): QueryUserTokenredeemdetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUserTokenredeemdetailEx(request, headers, runtime);
}

/**
 * Description: 查询用户粉丝粒兑现明细
 * Summary: 用户粉丝粒兑现明细查询接口
 */
async function queryUserTokenredeemdetailEx(request: QueryUserTokenredeemdetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUserTokenredeemdetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.user.tokenredeemdetail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecEventReportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 事件类型，目前支持类型 VISIT：访问事件，TRADE：交易事件，SHARE：分享事件
  eventType: string(name='event_type'),
  // 事件实例编码，目前支持访问事件，VISIT类别包括MINI_HOME_PAGE：访问首页，CONTRACT_DETAIL_OAGE：访问项目详情页，SHARE_LANDING_PAGE：访问分享页，TRADE类别包括TRADE_SUCCESS：购买成功，REFUND_SUCCESS: 退货成功，SHARE类别包括SHARE_FROM_MERCHANT
  eventInstanceCode: string(name='event_instance_code'),
  // 购买人或者访问者
  eventChild?: User(name='event_child'),
  // 分享者
  eventParent?: User(name='event_parent'),
  // 唯一业务单号
  requestId: string(name='request_id'),
  // 项目唯一编号，访问详情页和回流页、购买事件必填
  projectId?: string(name='project_id'),
  // 到账类型，DIRECT：直接到账， TWO_STEP_MANUAL：手动到账，TWO_STEP：定时到账
  confirmType?: string(name='confirm_type'),
  // 到账时间。当到账类型为定时到账时，该字段必填。
  confirmTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='confirm_time'),
  // 交易订单数据
  tradeOrder?: TradeOrder(name='trade_order'),
}

model ExecEventReportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 事件唯一标识
  eventId?: string(name='event_id'),
  // 事件状态，REPORTED：已上报，PROCESSING：处理中，PROCESSED： 处理完毕，NEED_RETRY：需要重试，EVENT_NOT_SUPPORTED：项目暂不支持该事件
  eventStatus?: string(name='event_status'),
  // token状态，TOKEN_SUCCESS：token发放成功，TOKEN_PROCESSING：token发放中，TOKEN_FAILED：token发放失败，NO_NEED_ALLOCATION：无需发放
  tokenStatus?: string(name='token_status'),
  // 购买者/访问者获得token数量
  tokenAmount?: long(name='token_amount'),
  // 提示信息
  message?: string(name='message'),
  // 分享人获得token数
  parentTokenAmount?: long(name='parent_token_amount'),
}

/**
 * Description: 上报事件
 * Summary: 事件上报
 */
async function execEventReport(request: ExecEventReportRequest): ExecEventReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execEventReportEx(request, headers, runtime);
}

/**
 * Description: 上报事件
 * Summary: 事件上报
 */
async function execEventReportEx(request: ExecEventReportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecEventReportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.event.report.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEventInfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 事件唯一标识
  eventId: string(name='event_id'),
}

model QueryEventInfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 事件唯一标识
  eventId?: string(name='event_id'),
  // 事件状态
  eventStatus?: string(name='event_status'),
  // token发放状态
  tokenStatus?: string(name='token_status'),
  // token数量
  tokenAmount?: long(name='token_amount'),
  // 事件上报时间
  eventTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='event_time'),
  // 事件处理结果提示信息
  message?: string(name='message'),
}

/**
 * Description: 查询事件信息
 * Summary: 事件信息查询
 */
async function queryEventInfo(request: QueryEventInfoRequest): QueryEventInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEventInfoEx(request, headers, runtime);
}

/**
 * Description: 查询事件信息
 * Summary: 事件信息查询
 */
async function queryEventInfoEx(request: QueryEventInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEventInfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.event.info.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportNftMetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 在外部渠道的全局唯一id
  projectId: string(name='project_id'),
  // nft资产标题
  title: string(name='title'),
  // 缩略图OSS文件名
  miniImageUrl: string(name='mini_image_url'),
  // 原图地址
  originImageUrl: string(name='origin_image_url'),
  // 创作者
  author: string(name='author'),
  // 作品简介信息文字描述
  description?: string(name='description'),
  // 商品详情页url
  itemUrl: string(name='item_url'),
}

model ImportNftMetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // nft_id资产id
  nftId?: string(name='nft_id'),
}

/**
 * Description: 阿里拍卖nft资产元数据导入
 * Summary: 阿里拍卖nft资产元数据导入
 */
async function importNftMeta(request: ImportNftMetaRequest): ImportNftMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importNftMetaEx(request, headers, runtime);
}

/**
 * Description: 阿里拍卖nft资产元数据导入
 * Summary: 阿里拍卖nft资产元数据导入
 */
async function importNftMetaEx(request: ImportNftMetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportNftMetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.nft.meta.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecNftTransferRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 支付用户uid
  alipayUid: string(name='alipay_uid'),
  // 在外部渠道的全局唯一id
  projectId: string(name='project_id'),
  // 外部订单号（阿里拍卖成功的订单号）
  orderNo: string(name='order_no'),
  // 拍品成交价（单位：分）
  priceCent: long(name='price_cent'),
}

model ExecNftTransferResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 内部流水id
  transferId?: string(name='transfer_id'),
}

/**
 * Description: nft资产订单落库，链上流转
 * Summary: nft资产流转
 */
async function execNftTransfer(request: ExecNftTransferRequest): ExecNftTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execNftTransferEx(request, headers, runtime);
}

/**
 * Description: nft资产订单落库，链上流转
 * Summary: nft资产流转
 */
async function execNftTransferEx(request: ExecNftTransferRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecNftTransferResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.nft.transfer.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetIsvSharecodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 电话号码/邮箱等登陆名
  logonId: string(name='logon_id'),
}

model GetIsvSharecodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的ISV用户邀请码
  shareCode?: string(name='share_code'),
}

/**
 * Description: 外部ISV获取分享码接口
 * Summary: 获得ISV分享码
 */
async function getIsvSharecode(request: GetIsvSharecodeRequest): GetIsvSharecodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getIsvSharecodeEx(request, headers, runtime);
}

/**
 * Description: 外部ISV获取分享码接口
 * Summary: 获得ISV分享码
 */
async function getIsvSharecodeEx(request: GetIsvSharecodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetIsvSharecodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.isv.sharecode.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddProvisionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务单号
  bizId: string(name='biz_id'),
  // 链 ID
  chainId: string(name='chain_id'),
  // 合约 ID
  contractId: string(name='contract_id'),
  // 调用方，例如租户 ID
  source: string(name='source'),
  // 金额，单位为分
  value: long(name='value'),
}

model AddProvisionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 备付金追加接口
 * Summary: 备付金追加接口
 */
async function addProvision(request: AddProvisionRequest): AddProvisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addProvisionEx(request, headers, runtime);
}

/**
 * Description: 备付金追加接口
 * Summary: 备付金追加接口
 */
async function addProvisionEx(request: AddProvisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddProvisionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.provision.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReclaimProvisionExtraprovisionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务单号
  bizId: string(name='biz_id'),
  // 链 ID
  chainId: string(name='chain_id'),
  // 合约 ID
  contractId: string(name='contract_id'),
  // 调用方，例如租户 ID
  source: string(name='source'),
}

model ReclaimProvisionExtraprovisionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 赎回链上多余备付金
 * Summary: 赎回链上多余备付金
 */
async function reclaimProvisionExtraprovision(request: ReclaimProvisionExtraprovisionRequest): ReclaimProvisionExtraprovisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reclaimProvisionExtraprovisionEx(request, headers, runtime);
}

/**
 * Description: 赎回链上多余备付金
 * Summary: 赎回链上多余备付金
 */
async function reclaimProvisionExtraprovisionEx(request: ReclaimProvisionExtraprovisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReclaimProvisionExtraprovisionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.provision.extraprovision.reclaim', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecTokenRedeemRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务单号
  bizId: string(name='biz_id'),
  // 链 ID
  chainId: string(name='chain_id'),
  // 合约 ID
  contractId: string(name='contract_id'),
  // 币种，目前仅支持 CNY
  currency: string(name='currency'),
  // 调用方
  source: string(name='source'),
  // 要兑现的用户VID
  targetUser: string(name='target_user'),
  // Token总金额，token_price*token_number 的结果，单位为分
  tokenAmount: long(name='token_amount'),
  // 兑现的Token数目
  tokenNumber: long(name='token_number'),
  // 兑现的Token单价，单位为分
  tokenPrice: long(name='token_price'),
}

model ExecTokenRedeemResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 链上Token兑现接口
 * Summary: 链上Token兑现接口
 */
async function execTokenRedeem(request: ExecTokenRedeemRequest): ExecTokenRedeemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execTokenRedeemEx(request, headers, runtime);
}

/**
 * Description: 链上Token兑现接口
 * Summary: 链上Token兑现接口
 */
async function execTokenRedeemEx(request: ExecTokenRedeemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecTokenRedeemResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.token.redeem.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTppSharecodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 分享人在淘票票端绑定的支付宝UID
  alipayUid: string(name='alipay_uid'),
}

model GetTppSharecodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 专属邀请码
  shareCode?: string(name='share_code'),
}

/**
 * Description: 针对淘票票的获取专属邀请码获取接口
 * Summary: 淘票票专属邀请码获取接口
 */
async function getTppSharecode(request: GetTppSharecodeRequest): GetTppSharecodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTppSharecodeEx(request, headers, runtime);
}

/**
 * Description: 针对淘票票的获取专属邀请码获取接口
 * Summary: 淘票票专属邀请码获取接口
 */
async function getTppSharecodeEx(request: GetTppSharecodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTppSharecodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.tpp.sharecode.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTppAllinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 支付宝UID
  alipayUid: string(name='alipay_uid'),
  // 排序方式，默认降序
  orderBy?: string(name='order_by'),
  // 页码
  pageId: long(name='page_id'),
  // 页面大小
  pageSize: long(name='page_size'),
}

model QueryTppAllinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 累计全部参与收益
  accumulativeRevenue?: Revenue(name='accumulative_revenue'),
  // 累计参与用书
  accumulativeUsers?: long(name='accumulative_users'),
  // 用户资产详情列表
  assetDetailList?: [ AssetDetail ](name='asset_detail_list'),
  // 用户当前累计收益
  currentAccumulativeRevenue?: Revenue(name='current_accumulative_revenue'),
  // 当前用户收益
  currentRevenue?: Revenue(name='current_revenue'),
}

/**
 * Description: 针对淘票票的查询全部必要信息的接口
 * Summary: 淘票票查询全部必要信息接口
 */
async function queryTppAllinfo(request: QueryTppAllinfoRequest): QueryTppAllinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTppAllinfoEx(request, headers, runtime);
}

/**
 * Description: 针对淘票票的查询全部必要信息的接口
 * Summary: 淘票票查询全部必要信息接口
 */
async function queryTppAllinfoEx(request: QueryTppAllinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTppAllinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.tpp.allinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTppParticipationinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryTppParticipationinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 累计参与用户数
  accumulativeUsers?: long(name='accumulative_users'),
  // 累计全部参与收益
  accumulativeRevenue?: AccumulativeRevenue(name='accumulative_revenue'),
}

/**
 * Description: 针对淘票票的参与信息查询接口
 * Summary: 淘票票参与信息查询接口
 */
async function queryTppParticipationinfo(request: QueryTppParticipationinfoRequest): QueryTppParticipationinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTppParticipationinfoEx(request, headers, runtime);
}

/**
 * Description: 针对淘票票的参与信息查询接口
 * Summary: 淘票票参与信息查询接口
 */
async function queryTppParticipationinfoEx(request: QueryTppParticipationinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTppParticipationinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ent.tpp.participationinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

