import AlipayUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = config.readTimeout;
  @connectTimeout = config.connectTimeout;
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = config.maxIdleConns;
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AlipayUtil.getTimestamp(),
    req_msg_id = Util.getNonce(),
    access_key = @accessKeyId,
    charset = 'UTF-8',
    baseSdkVersion = 'Tea-SDK',
    sdkVersion = 'Tea-SDK-20200824',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = @endpoint,
    user-agent = getUserAgent()
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AlipayUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var obj = Util.readAsJSON(__response.body);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AlipayUtil.hasError(res)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

/**
 * Get user agent
 * @return user agent
 */
function getUserAgent(): string {
  var userAgent = 'TeaClient/1.0.0';
  return Util.getUserAgent(userAgent);
}

model QueryDiRealpersonFacevrfServerRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 实人认证唯一标识
  certifyId?: string(name='certify_id'),
  // 预留扩展业务参数
  externParam?: string(name='extern_param'),
  // 认证材料（如人脸图像）的哈希
  materialHash?: string(name='material_hash'),
  // 外部唯一标识。用于定位。
  // 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo?: string(name='outer_order_no'),
  // 场景ID
  sceneId?: string(name='scene_id'),
}

model QueryDiRealpersonFacevrfServerResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 认证的主体信息，一般的认证场景返回为空
  identityInfo?: string(name='identity_info'),
  // 认证主体附件信息，一般的认证场景都是返回空
  materialInfo?: string(name='material_info'),
  // 认证材料哈希是否匹配
  materialMatched?: string(name='material_matched'),
  // 是否通过，通过为T，不通过为F
  passed?: string(name='passed'),
  // 业务失败原因
  reason?: string(name='reason'),
}

/**
 * Description: 查询认证的结果和相关信息
 * Summary: 认证查询
 */
async function queryDiRealpersonFacevrfServer(request: QueryDiRealpersonFacevrfServerRequest): QueryDiRealpersonFacevrfServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDiRealpersonFacevrfServerEx(request, runtime);
}

/**
 * Description: 查询认证的结果和相关信息
 * Summary: 认证查询
 */
async function queryDiRealpersonFacevrfServerEx(request: QueryDiRealpersonFacevrfServerRequest, runtime: Util.RuntimeOptions): QueryDiRealpersonFacevrfServerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.facevrf.server.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDiRealpersonFacevrfServerRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 认证模式码
  bizCode?: string(name='biz_code'),
  // 真实姓名
  certName?: string(name='cert_name'),
  // 证件号码
  certNo?: string(name='cert_no'),
  // 证件类型，如身份证
  certType?: string(name='cert_type'),
  // 预留扩展参数
  externParam?: string(name='extern_param'),
  // 自定义比对源人脸图像，base64编码格式
  facialPictureRef?: string(name='facial_picture_ref'),
  // 身份信息来源类型，如证件
  identityType?: string(name='identity_type'),
  // metainfo 环境参数，需要通过客户端 SDK 获取
  metaInfo?: string(name='meta_info'),
  // 外部唯一标识。用于定位。
  // 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo?: string(name='outer_order_no'),
  // 回跳地址
  returnUrl?: string(name='return_url'),
  // 场景ID
  sceneId?: string(name='scene_id'),
  // 商户自定义的用户ID
  userId?: string(name='user_id'),
  // 用户的IP
  userIp?: string(name='user_ip'),
  // 用户的手机号
  userMobile?: string(name='user_mobile'),
}

model CreateDiRealpersonFacevrfServerResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 实人认证唯一标识
  certifyId?: string(name='certify_id'),
  // 认证地址。只在特定场景返回。
  certifyUrl?: string(name='certify_url'),
}

/**
 * Description: 服务端认证创建，传入认证信息，获取认证ID（和url）
 * Summary: 认证创建
 */
async function createDiRealpersonFacevrfServer(request: CreateDiRealpersonFacevrfServerRequest): CreateDiRealpersonFacevrfServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiRealpersonFacevrfServerEx(request, runtime);
}

/**
 * Description: 服务端认证创建，传入认证信息，获取认证ID（和url）
 * Summary: 认证创建
 */
async function createDiRealpersonFacevrfServerEx(request: CreateDiRealpersonFacevrfServerRequest, runtime: Util.RuntimeOptions): CreateDiRealpersonFacevrfServerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.facevrf.server.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model ExecDiRealpersonFacevrfServerRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 真实姓名
  certName?: string(name='cert_name'),
  // 证件号码
  certNo?: string(name='cert_no'),
  // 证件类型，如身份证
  certType?: string(name='cert_type'),
  // 预留扩展参数
  externParam?: string(name='extern_param'),
  // 待认证的人脸图像，base64编码格式
  facialPictureAuth?: string(name='facial_picture_auth'),
  // 自定义比对源人脸图像，base64编码格式
  facialPictureRef?: string(name='facial_picture_ref'),
  // 身份信息来源类型，如证件
  identityType?: string(name='identity_type'),
  // 外部唯一标识。用于定位。 值为32位长度的字母数字组合前面几位字符是商户自定义的简称，中间可以使用一段时间，后段可以使用一个随机或递增序列
  outerOrderNo?: string(name='outer_order_no'),
  // 场景ID
  sceneId?: string(name='scene_id'),
  // 商户自定义的用户ID
  userId?: string(name='user_id'),
  // 用户的IP
  userIp?: string(name='user_ip'),
  // 用户的手机号（或其哈希值）
  userMobile?: string(name='user_mobile'),
}

model ExecDiRealpersonFacevrfServerResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 认证ID
  certifyId?: string(name='certify_id'),
  // 是否通过，通过为T，不通过为F
  passed?: string(name='passed'),
  // 业务失败原因
  reason?: string(name='reason'),
}

/**
 * Description: 纯服务端比对，直接输入待比对的图片，返回比对结果
 * Summary: 纯服务端比对
 */
async function execDiRealpersonFacevrfServer(request: ExecDiRealpersonFacevrfServerRequest): ExecDiRealpersonFacevrfServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return execDiRealpersonFacevrfServerEx(request, runtime);
}

/**
 * Description: 纯服务端比对，直接输入待比对的图片，返回比对结果
 * Summary: 纯服务端比对
 */
async function execDiRealpersonFacevrfServerEx(request: ExecDiRealpersonFacevrfServerRequest, runtime: Util.RuntimeOptions): ExecDiRealpersonFacevrfServerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.facevrf.server.exec', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model GetDiRealpersonFacevrfEvidenceRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 某次刷脸的certifyId
  certifyId?: string(name='certify_id'),
}

model GetDiRealpersonFacevrfEvidenceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 刷脸的certifyId，原样返回
  certifyId?: string(name='certify_id'),
  // 统一证据ID，非SUCCESS状态为null，可在控制台中持统一证据ID验证pdf文件的正确性，法院方也可用此统一证据ID在司法链控制台进行核验pdf文件的正确性。
  onchainId?: string(name='onchain_id'),
  // 上链状态，`SUCCESS`表示成功、`INIT`表示正在上链
  onchainStatus?: string(name='onchain_status'),
  // 存证pdf文件内容的base64
  pdfContent?: string(name='pdf_content'),
  // pdf存证是否已经过期，不支持超过6个月的存证获取
  pdfExpired?: boolean(name='pdf_expired'),
}

/**
 * Description: 传入某次刷脸的certifyID，获得刷脸存证的pdf文件和司法脸统一证据ID，这两份数据可以在司法链的控制台中进行核验存证是否被记录在区块链上从而证实其真实可信。
 * Summary: 商户获取司法链上刷脸存证和统一证据ID
 */
async function getDiRealpersonFacevrfEvidence(request: GetDiRealpersonFacevrfEvidenceRequest): GetDiRealpersonFacevrfEvidenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDiRealpersonFacevrfEvidenceEx(request, runtime);
}

/**
 * Description: 传入某次刷脸的certifyID，获得刷脸存证的pdf文件和司法脸统一证据ID，这两份数据可以在司法链的控制台中进行核验存证是否被记录在区块链上从而证实其真实可信。
 * Summary: 商户获取司法链上刷脸存证和统一证据ID
 */
async function getDiRealpersonFacevrfEvidenceEx(request: GetDiRealpersonFacevrfEvidenceRequest, runtime: Util.RuntimeOptions): GetDiRealpersonFacevrfEvidenceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'di.realperson.facevrf.evidence.get', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

