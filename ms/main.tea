import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '3.4.0',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 动态资源的属性
model Attribute {
  // 属性名
  attributeName?: string(name='attribute_name', example='age'),
  // 属性描述
  name?: string(name='name', example='年龄'),
}

// 调度任务关联的机房信息
model TaskIdc {
  // 机房id
  idcId?: string(name='idc_id', example='undefined'),
  // 机房执行状态
  taskState?: string(name='task_state', example='undefined'),
}

// 切换动作
model SwitchoverAction {
  // 目标单元
  destCell?: string(name='dest_cell', example='GZ00B'),
  // 来源单元
  sourceCell?: string(name='source_cell', example='GZ00A'),
}

// 机房信息
model Idc {
  // 机房对应配置中心域名
  domainName?: string(name='domain_name', example='undefined'),
  // 机房id
  id?: string(name='id', example='undefined'),
  // 机房名称
  name?: string(name='name', example='undefined'),
  // 是否为预发环境
  preprod?: boolean(name='preprod', example='undefined'),
}

// 调度任务信息
model ScheduleTask {
  // 系统名称
  appName?: string(name='app_name', example='undefined'),
  // cron 表达式
  cronexp?: string(name='cronexp', example='undefined'),
  // 任务拆分个数
  divideCount?: integer(name='divide_count', example='undefined'),
  // 任务id
  id?: string(name='id', example='undefined'),
  // 任务加载上限
  maxLoad?: integer(name='max_load', example='undefined'),
  // 任务名称
  name?: string(name='name', example='undefined'),
  // 调度任务优先级
  priority?: string(name='priority', example='undefined'),
  // 关联的策略名称
  strategyName?: string(name='strategy_name', example='undefined'),
  // 调度任务关联的机房信息
  taskIdcs?: [ TaskIdc ](name='task_idcs', example='undefined'),
  // 调度任务类型
  taskType?: string(name='task_type', example='undefined'),
}

// 调度任务
model Task {
  cronexp?: string(name='cronexp', example='undefined'),
  name?: string(name='name', example='undefined'),
  system?: string(name='system', example='undefined'),
}

// 调度策略
model Strategy {
  // 调度策略名称
  name?: string(name='name', example='undefined'),
  // 关联的调度任务数
  relatedTaskCount?: integer(name='related_task_count', example='undefined'),
}

// 客户端信息
model ClientInfo {
  // 订阅客户端地址列表
  ip?: string(name='ip', example='10.1.1.101'),
}

// 动态资源
model Resource {
  appName?: string(name='app_name', example='undefined'),
  attributes?: [ Attribute ](name='attributes', example='undefined'),
  name?: string(name='name', example='undefined'),
  region?: string(name='region', example='undefined'),
  resourceId?: string(name='resource_id', example='undefined'),
}

// KeyValueModel
model KeyValueModel {
  // key
  key: string(name='key', example='key'),
  // value
  value: string(name='value', example='value'),
}

// 透明劫持配置之端口段
model TransparentProxyPortPair {
  // 是否是默认值
  defaultValue?: long(name='default_value', example='1'),
  // 端口
  endPort: long(name='end_port', example='1024'),
  // 起始端口
  startPort: long(name='start_port', example='81'),
}

// 网段配置
model TransparentProxyIpPair {
  // 是否是默认值
  defaultValue?: long(name='default_value', example='1'),
  // 起始IP
  startIp: string(name='start_ip', example='127.0.0.0'),
  // 终止IP
  endIp: string(name='end_ip', example='127.0.0.8'),
}

// 判断条件
model BaseConditionModel {
  // 匹配字段
  field?: string(name='field', example='source.app.name'),
  // 操作符
  operation?: string(name='operation', example='equal'),
  // SYSTEM、CUSTOM系统字段还是自定义字段
  type?: string(name='type', example='SYSTEM'),
  // 匹配值
  value?: [ string ](name='value', example='consumer-app'),
}

// 执行策略 拦截/监控
model ActionModel {
  // 拓展信息
  extension?: string(name='extension', example='拦截还是监控'),
  // REJECT/PASS
  type?: string(name='type', example='REJECT'),
}

// AuthRuleItemModel
model AuthRuleItemModel {
  // 规则id
  authRuleId?: long(name='auth_rule_id', example='2552'),
  // 规则字段
  field?: string(name='field', example='规则字段'),
  // 操作类型(EQUAL,NOT_EQUAL,IN,NOT_INT,REGEX)
  operation?: string(name='operation', example='EQUAL'),
  // 规则项的值
  value?: string(name='value', example='规则项的值'),
  // 操作类型
  changedType?: string(name='changed_type', example='ADDED'),
}

// 故障注入配置信息
model FaultInjectConfigModel {
  // 故障百分比
  faultPercent?: string(name='fault_percent', example='20.0'),
  // 故障错误码
  code?: string(name='code', example='200'),
  // 故障延迟时间（ms）
  fixedDelay?: string(name='fixed_delay', example='2000'),
}

// 透明劫持出入方向配置
model TransparentProxyBound {
  // 端口段
  portRange: [ TransparentProxyPortPair ](name='port_range', example=''),
  // 网段
  ipRange: [ TransparentProxyIpPair ](name='ip_range', example=''),
}

// key，value数据结构
model KV {
  // 键
  key: string(name='key', example='appname'),
  // 值
  value: string(name='value', example='somevalue'),
}

// AuthRuleItemVO
model AuthRuleItemVO {
  // 规则id
  authRuleId?: long(name='auth_rule_id', example='123'),
  // 操作类型
  changedType?: string(name='changed_type', example='NONE'),
  // 规则字段
  field?: string(name='field', example='规则字段'),
  // 操作类型(EQUAL,NOT_EQUAL,IN,NOT_INT,REGEX)
  operation?: string(name='operation', example='EQUAL'),
  // AuthRuleItemModel
  publishedAuthRuleItem?: AuthRuleItemModel(name='published_auth_rule_item', example='AuthRuleItemModel'),
  // 系统内置或者用户自定义 SYSTEM/CUSTOM
  type?: string(name='type', example='CUSTOM'),
  // 规则项的值
  value?: string(name='value', example='1112333q11222'),
  // id
  id: long(name='id', example=''),
}

// 透明劫持规则
model TransparentProxyRuleConfig {
  // 入方向配置
  inBound: [ TransparentProxyBound ](name='in_bound', example=''),
  // 出方向配置
  outBound: [ TransparentProxyBound ](name='out_bound', example=''),
}

// 故障注入规则配置项
model FaultInjectRuleItemModel {
  // 规则类型 ABORT/DELAY
  ruleType?: string(name='rule_type', example='ABORT'),
  // 执行策略 拦截/监控
  action?: ActionModel(name='action', example='REJECT'),
  // 故障注入配置
  configs?: FaultInjectConfigModel(name='configs', example='{"faultPercent": 20.0, "code": 200}'),
  // 流量匹配条件
  trafficConditions?: [ BaseConditionModel ](name='traffic_conditions', example='{"type":"header_info", "field": "uid", "operation": "equal", "value": [{"123"}]}'),
}

// 不带 attribute 的资源
model DrmResourceWithoutAttributes {
  // 应用名
  appName?: string(name='app_name', example='dsrconsole'),
  // id
  id?: long(name='id', example='10000'),
  // 租户实例id
  instanceId?: string(name='instance_id', example='00001'),
  // 资源类描述
  name: string(name='name', example='我是一个资源类描述'),
  // 资源类所属的域
  region: string(name='region', example='Alipay'),
  // Region.appName
  resourceDomain: string(name='resource_domain', example='Alipay.demo'),
  // 资源id
  resourceId: string(name='resource_id', example='com.alipay.antcloud.dsrconsole.core.service.drm.config'),
  // 资源版本号固定 3.0
  resourceVersion: string(name='resource_version', example='3.0'),
  // 资源类型，tpl 表示模板类型，normal 表示普通资源
  type: string(name='type', example='normal'),
}

// 路由目标
model RouterDestinationModel {
  // 路由目标集合
  destination?: [ BaseConditionModel ](name='destination', example=''),
  // 权重
  weight?: long(name='weight', example='80'),
}

// 规则行为类型
model BaseActionModel {
  // 行为类型REJECT/PASS
  type: string(name='type', example='PASS'),
  // 扩展字段
  extension?: string(name='extension', example='暂无'),
  // 开启状态
  enabled?: boolean(name='enabled', example='true, false'),
}

// 故障隔离配置规则
model FaultToleranceConfigs {
  // 异常类型值
  exceptionTypes?: [ string ](name='exception_types', example='["500","401"]'),
  // 时间窗口
  timeWindow?: long(name='time_window', example='10'),
  // 时间窗口内最少调用次数
  leastWindowCount?: long(name='least_window_count', example='10'),
  // 最大隔离数量
  maxIpCount?: long(name='max_ip_count', example='10'),
  // 异常比例倍数
  exceptionRateMultiple?: long(name='exception_rate_multiple', example='2'),
  // 异常比例阈值
  leastExceptionRate?: long(name='least_exception_rate', example='20'),
}

// 鉴权规则配置项
model AuthRuleItemModelVO {
  // 所属鉴权规则id
  authRuleId?: long(name='auth_rule_id', example='100'),
  // 类型
  type?: string(name='type', example='SYSTEM'),
  // 字段
  field?: string(name='field', example='source.connection.ip'),
  // 操作方式
  operation?: string(name='operation', example='equal'),
  // 匹配值
  value?: string(name='value', example='xxx'),
  // 主键
  id?: long(name='id', example='100'),
  // 操作人
  operator?: string(name='operator', example='icanner'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// 配置信息
model CircuitBreakerConfigModel {
  // 熔断错误比率条件
  errorPercentThreshold?: long(name='error_percent_threshold', example='50'),
  // 请求超时时间
  providerTimeout?: long(name='provider_timeout', example='5000'),
  // 发生熔断的总请求数
  requestVolumeThreshold?: long(name='request_volume_threshold', example='20'),
  // 熔断之后时间窗口
  sleepWindow: long(name='sleep_window', example='1000'),
  // metric窗口
  totalMetricWindow: long(name='total_metric_window', example='10'),
  // rpc超时时间>0
  rpcTimeout?: long(name='rpc_timeout', example='100'),
  // 平均RT阈值>0
  averageRtThreshold?: long(name='average_rt_threshold', example='100'),
}

// 透明劫持支持协议Vo
model TransparentProxyProtocolVo {
  // 最大请求数
  maxReq?: long(name='max_req', example='1000'),
  // 端口
  port: long(name='port', example='80'),
  // 协议
  protocol: string(name='protocol', example='HTTP'),
}

// 鉴权规则模型
model AuthRuleModelVO {
  // 鉴权规则组id
  authRuleGroupId?: long(name='auth_rule_group_id', example='100'),
  // 规则开启状态。0关闭，1开启
  enabled?: long(name='enabled', example='1'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 主键
  id?: string(name='id', example='100'),
  // 模式，观察者模式（OBSERVER），拦截模式（REJECT）
  mode?: string(name='mode', example='REJECT'),
  // 名称
  name?: string(name='name', example='新的鉴权规则'),
  // 鉴权规则配置项
  ruleItems?: [ AuthRuleItemModelVO ](name='rule_items', example='[{"type": "SYSTEM"}...]'),
  // 类型。白名单（WHITELIST），黑名单（BLACKLIST）
  type?: string(name='type', example='WHITELIST'),
}

// 鉴权规则项
model AuthRuleItem {
  // 所属的鉴权规则id
  authRuleId?: long(name='auth_rule_id', example='10000'),
  // 枚举类型
  // SYSTEM 表示系统内置字段
  // CUSTOM 表示用户自定义字段
  type: string(name='type', example='SYSTEM'),
  // 匹配字段
  field: string(name='field', example='source_application_id'),
  // 操作符，通过 FormConfig 可以获取支持所有的操作符
  operation: string(name='operation', example='EQUAL'),
  // 匹配的值
  value: string(name='value', example='app1'),
}

// 基本排序model
model BaseOrderDO {
  // 排序的字段名称
  key?: string(name='key', example='name'),
  // 排序的关键字
  dir?: string(name='dir', example='desc'),
}

// 路由规则
model RouterRuleModel {
  // [
  //                     {
  //                         "type":"system",
  //                         "field":"app.kubernetes.io/version",
  //                         "operation":"equal",
  //                         "value":[
  //                             "22"
  //                         ]
  //                     }
  //                 ]
  conditions?: [ BaseConditionModel ](name='conditions', example='见描述'),
  // [
  //             {
  //                 "weight":100,
  //                 "destination":[
  //                     {
  //                         "type":"system",
  //                         "field":"app.kubernetes.io/version",
  //                         "operation":"equal",
  //                         "value":[
  //                             "22"
  //                         ]
  //                     }
  //                 ]
  //             }
  //         ]
  destinations?: [ RouterDestinationModel ](name='destinations', example='见描述'),
  // 是否生效，1 生效，0 未生效。默认未生效
  enabled?: long(name='enabled', example='0,1'),
  // fallback
  fallback?: long(name='fallback', example='1'),
  // faultProtection
  faultProtection?: long(name='fault_protection', example='1'),
  // 更新时间
  gmtModified?: long(name='gmt_modified', example='1000000'),
  // TreeSet<BaseConditionModel>
  grays?: [ BaseConditionModel ](name='grays', example='json:[{}]'),
  // 规则名
  name?: string(name='name', example='测试规则'),
  // 优先级
  orderNum?: long(name='order_num', example='1'),
  // 唯一UUID
  id?: string(name='id', example='gdashikjncpzpfdshokjsd'),
}

// AuthRule
model AuthRuleVO {
  // 分组id
  authRuleGroupId?: string(name='auth_rule_group_id', example='214'),
  // changedItemCnt
  changedItemCnt?: long(name='changed_item_cnt', example='1'),
  // changed_type
  changedType?: string(name='changed_type', example='changed_type'),
  // 是否生效，1 生效，0 未生效。默认未生效
  enabled?: long(name='enabled', example='1'),
  // 规则id
  id: long(name='id', example=''),
  // 模式
  mode?: string(name='mode', example='REJECT'),
  // 规则名
  name?: string(name='name', example='gs245'),
  // 所有规则项
  ruleItems?: [ AuthRuleItemVO ](name='rule_items', example='ruleItems'),
}

// 熔断生效模型
model CircuitRuleBaseConditionModel {
  // 生效域
  field: string(name='field', example='method'),
  // 生效条件
  operation: string(name='operation', example='equal'),
  // 类型
  type: string(name='type', example='system'),
  // 值
  value: [ string ](name='value', example='["echo"]'),
}

// 资源属性
model DrmAttribute {
  // 属性名，与代码中的成员变量名一致
  attributeName?: string(name='attribute_name', example='cellConfig'),
  // 资源id
  // 
  dataId?: string(name='data_id', example='drm.config:name=drmdomain.Alipay.dsrconsole.drmresource.com.alipay.antcloud.dsrconsole.core.service.drm.config.metadata,version=3.0@DRM'),
  // 属性id
  id?: long(name='id', example='11'),
  // 实例id
  instanceId?: string(name='instance_id', example='00001'),
  // 节点名称，显示在树形菜单上用的
  name?: string(name='name', example='name'),
  // 属性所属的资源
  parent?: DrmResourceWithoutAttributes(name='parent', example=''),
  // 父节点ID，冗余字段
  parentId?: long(name='parent_id', example='2214'),
}

// 故障注入规则配置
model FaultInjectRuleConfigModel {
  // 方法名
  methodName?: string(name='method_name', example='save'),
  // 请求类型
  httpMethod?: string(name='http_method', example='GET'),
  // 请求路径
  httpPath?: string(name='http_path', example='/hello'),
  // 故障注入生效端（o:客户端生效/ i:服务端生效）
  trafficType?: string(name='traffic_type', example='o'),
  // 资源标识
  resource?: string(name='resource', example='com.alipay.test.TestFacade:1.0@DEFAULT:o:r'),
  // 配置项
  faultInjectRuleItems?: [ FaultInjectRuleItemModel ](name='fault_inject_rule_items', example='[{"ruleType": "ABORT"}]'),
}

// 单元信息
model CellInfo {
  // 单元
  cell?: string(name='cell', example='cell'),
  // 是否特别推送
  specialPush?: boolean(name='special_push', example='true, false'),
  // 推送值
  value?: string(name='value', example='value'),
}

// 新统一熔断模型，前端传入和后端返回
model CircuitBreakerRuleItemModel {
  // 熔断规则类型(取值avgRt，errorRatio)
  ruleType: string(name='rule_type', example='avgRt'),
  // 熔断配置，和ruleType的值有关,
  // "ruleType": "avgRt",
  // "configs": {
  //                         "averageRtThreshold": 50,
  //                         "errorPercentThreshold": 50,
  //                         "requestVolumeThreshold": 10,
  //                         "sleepWindow": 1000,
  //                         "totalMetricWindow": 10
  //                     },
  configs: CircuitBreakerConfigModel(name='configs', example='见描述'),
  // "trafficConditions": [
  //                     {
  //                         "type": "system",
  //                         "field": "trafficType",
  //                         "operation": "EQUAL",
  //                         "value": [
  //                             "online"
  //                         ]
  //                     }
  //                 ]
  trafficConditions?: [ BaseConditionModel ](name='traffic_conditions', example='见详情'),
  // 熔断规则中Action,
  // "action": {
  //                     "type": "REJECT"
  //                 },
  action: BaseActionModel(name='action', example='见详情'),
}

// 安全通信标签model
model CommunicationLabelModel {
  // 关键字
  key?: string(name='key', example='aa'),
  // 值
  value?: string(name='value', example='val'),
  // 类型(0-应用,1-标签)
  type?: long(name='type', example='1'),
}

// paas应用元数据
model AppMetaDataModel {
  // 应用名
  appName: string(name='app_name', example='dsrconsole'),
  // 应用打开链接
  url: string(name='url', example='http://test=name'),
}

// 故障隔离规则具体项model
model FaultToleranceRuleItemModel {
  // 是否启用(0-未启用1-启用2-部分启用)
  enabled?: string(name='enabled', example='1'),
  // 暂时不用
  scopes?: [ string ](name='scopes', example=''),
  //  流量管控规则
  conditions?: [ BaseConditionModel ](name='conditions', example='[{"type": "system", "field": "method","operation": "equal","value": ["echo"]}'),
  // 具体隔离规则配置
  configs?: FaultToleranceConfigs(name='configs', example='{"timeWindow":10,"leastWindowCount":100,"maxIpCount":3,"exceptionRateMultiple":3,"leastExceptionRate":10,"exceptionTypes":["500"]}'),
  // 行为项(type取值DOWNGRADE隔离/NONE监控)
  actions?: [ BaseActionModel ](name='actions', example='[{"type":"DOWNGRADE"}]'),
}

// 配置项
model ConfigEntity {
  // 值
  value: string(name='value', example='application_name'),
  // 英文描述
  descEn: string(name='desc_en', example='application_name'),
  // 中文描述
  descCn: string(name='desc_cn', example='应用名'),
}

// 透明劫持配置
model TransparentProxyAppConfig {
  // 黑名单配置
  blacklist: TransparentProxyRuleConfig(name='blacklist', example=''),
}

// 降级规则Vo
model DowngradeRuleVo {
  // 主键
  id: long(name='id', example='100000'),
  // 租户实例id
  instanceId: string(name='instance_id', example='999999'),
  // 降级规则组id
  groupId: long(name='group_id', example='1000000'),
  // 降级服务
  downgradeService: string(name='downgrade_service', example='com.alipay.test.TestFacade'),
  // 降级方法
  downgradeMethod: string(name='downgrade_method', example='add'),
  // 规则描述
  ruleName: string(name='rule_name', example='规则名一'),
  // 降级开关(0: 关闭 1: 开启) 
  enabled: long(name='enabled', example='0'),
  // 运行模式
  mode: string(name='mode', example='intercept'),
  // 降级行为
  downgradeAction: string(name='downgrade_action', example='RETURN_NULL'),
  // 更新时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// 流量镜像配置模型
model TrafficMirrorConfigModel {
  // 百分比
  percent?: long(name='percent', example='100'),
  // 放大倍数
  amplification?: long(name='amplification', example='2'),
}

// sidecar注入配置模型
model SidecarInjectConfigModel {
  // sidecar类型 支持inject_all，clusters，namespaces，labels，annotations
  type?: string(name='type', example='clusters'),
  // 字符串数组
  strs?: [ string ](name='strs', example='["k8s"]'),
  // kv键值对数组
  kvs?: [ KV ](name='kvs', example='[{"key": "k1", "value": "v1"}]'),
}

// 透明劫持应用治理Vo
model TransparentProxyOperatorLogVo {
  // 日志 ID
  id: long(name='id', example='1'),
  // 修改内容
  modifyContent: string(name='modify_content', example='旧值 xx 新值 xx'),
  // 操作人
  modifyName: string(name='modify_name', example='小明'),
  // 操作时间
  modifyTime: string(name='modify_time', example='2020-03-25 02:01:08'),
  // 端口
  port: long(name='port', example='80'),
}

// 定时任务
model Job {
  // 数据库ID
  id?: integer(name='id', example='1'),
  // 所属租户实例ID
  instanceId?: string(name='instance_id', example='asddffd'),
  // 任务所属APP
  app?: string(name='app', example='app'),
  // 任务名字
  name?: string(name='name', example='name'),
  // 任务CRON表达式
  cron?: string(name='cron', example='0 0 * * * ?'),
  // 任务分片数量
  shardingCount?: integer(name='sharding_count', example='1'),
  // 任务自定义参数
  customParams?: [ string ](name='custom_params', example=''),
  // 任务状态
  status?: string(name='status', example='RUNNING'),
  // 任务描述信息
  des?: string(name='des', example='asdsaf'),
  // 任务创建时间
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='creation_time', example='2018-04-16 00:01:59'),
  // 任务修改时间
  updateTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='update_time', example='2018-04-16 00:01:59'),
}

// 服务限流规则
model ServiceRateLimitRule {
  // 应用名
  appName?: string(name='app_name', example='consumer-demo'),
  // 服务id
  dataId?: string(name='data_id', example='com.antfin.demo.endpoint.facade.SampleRestFacade'),
  // 是否启用
  enable?: boolean(name='enable', example='true'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 服务限制规则id
  id?: long(name='id', example='100'),
  // 租户实例id
  instanceId?: string(name='instance_id', example='00001'),
  // 规则名
  name?: string(name='name', example='接口QPS小于1000'),
  // 操作人
  operator?: string(name='operator', example='张三'),
  // 资源类型
  resourceType?: string(name='resource_type', example='DATA_ID_METHOD'),
  // 规则配置
  ruleConfig?: string(name='rule_config', example='{}'),
  // 运行模式
  runMode?: string(name='run_mode', example='CONTROL'),
  // 服务框架类型
  serviceType?: string(name='service_type', example='DUBBO'),
}

// 一键创建集群同步任务结果
model SyncBucketAddResult {
  // 集群同步任务id
  clusterTaskId: string(name='cluster_task_id', example='1000'),
  // 集群同步任务状态
  clusterTaskStatus: string(name='cluster_task_status', example='INIT'),
  // 源集群id
  sourceClusterId: string(name='source_cluster_id', example='1'),
  // 目标集群id
  targetClusterId: string(name='target_cluster_id', example='2'),
}

// 路由规则组VO
model RouterRuleGroupVO {
  // 主键
  id?: long(name='id', example='1000'),
  // 租户实例id
  instanceId?: string(name='instance_id', example='000001'),
  // 应用名
  appName?: string(name='app_name', example='testApp'),
  // 服务id
  dataId?: string(name='data_id', example='com.alipay.test.FooFacade:1.0@DEFAULT'),
  // 规则名称
  ruleName?: string(name='rule_name', example='新规则'),
  // 版本号
  version?: long(name='version', example='8'),
  // 1 开启/ 0 关闭
  enabled?: long(name='enabled', example='1'),
  // 优先级
  priority?: long(name='priority', example='1'),
  // 灰度条件
  grayCondition?: string(name='gray_condition', example='{}'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 操作人
  operator?: string(name='operator', example='kele'),
  // 路由规则
  rules?: [ RouterRuleModel ](name='rules', example='[{}]'),
}

// 服务信息记录
model ServiceRecord {
  // 服务标识
  dataId?: string(name='data_id', example='com.alipay.sofa.demo.Facade:1.0@DEFAULT'),
}

// 服务信息记录
model ServiceSubscriber {
  // 实例标识
  instanceId?: string(name='instance_id', example='abcdEFGH1234'),
  // 服务标识
  dataId?: string(name='data_id', example='com.alipay.sofa.demo.Facade:1.0@DEFAULT'),
  // 应用名称
  appName?: string(name='app_name', example='demoApp'),
  // 服务提供方客户端IP
  hostIp?: string(name='host_ip', example='10.10.10.10'),
  // 逻辑机房
  zone?: string(name='zone', example='CELL1'),
}

// 鉴权规则组列表模型
model AuthRuleGroupListModelVO {
  // 应用名称, 多个应用逗号分隔
  appName?: string(name='app_name', example='app1,app2'),
  // 黑名单组id
  blackGroupId?: long(name='black_group_id', example='100'),
  // 黑名单状态（1开启/0关闭）
  blackState?: long(name='black_state', example='1'),
  // 鉴权源
  dataId?: string(name='data_id', example='com.alipy.test.SampleFacade'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 主键
  id?: long(name='id', example='100'),
  // 租户实例id
  instanceId?: string(name='instance_id', example='NY24NMCS0M9A'),
  // 操作人
  operator?: string(name='operator', example='icanner'),
  // 鉴权规则列表
  rules?: [ AuthRuleModelVO ](name='rules', example='[{"name": "新的鉴权规则"...}]'),
  // 生效状态（0 失败, 1 成功, 2 部分失败）
  status?: long(name='status', example='1'),
  // 白名单组id
  whiteGroupId?: long(name='white_group_id', example='100'),
  // 白名单状态（1开启/0关闭）
  whiteState?: long(name='white_state', example='0'),
  // 变更状态
  changeStatus?: string(name='change_status', example='NORMAL'),
}

// appName模型
model CircuitBreakerRuleAppNamesModel {
  // 应用名
  appName: string(name='app_name', example='test'),
  // 规则个数
  rulesNum: long(name='rules_num', example='10'),
}

// 服务鉴权表单配置
model AuthRuleConfig {
  // 字段信息
  fields: [ ConfigEntity ](name='fields', example=''),
  // 操作符集合
  operations: [ ConfigEntity ](name='operations', example=''),
  // 类型，系统内置或者是自定义
  types: [ ConfigEntity ](name='types', example=''),
}

// 故障注入VO
model FaultInjectRuleVO {
  // 主键
  id?: long(name='id', example='1'),
  // 租户实例id
  instanceId?: string(name='instance_id', example='000001'),
  // 服务ID
  dataId?: string(name='data_id', example='com.alipay.test.FooFacade'),
  // 应用名
  appName?: string(name='app_name', example='foo'),
  // 服务类型（SOFA DUBBO SPRINGCLOUD）
  serviceType?: string(name='service_type', example='SOFA'),
  // 规则名称
  ruleName?: string(name='rule_name', example='故障注入规则'),
  // 是否启用规则
  enabled?: boolean(name='enabled', example='true, false'),
  // 操作人
  operator?: string(name='operator', example='xuy'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2020-10-10T10:10:00Z'),
  // 更新时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 规则配置
  ruleConfig?: FaultInjectRuleConfigModel(name='rule_config', example='{}'),
}

// 服务熔断结果信息
model CircuitBreakerRuleModel {
  // 应用名，数组形式，一般只有一个
  appNames: [ string ](name='app_names', example='["testApp"]'),
  // 统一熔断模型
  // "circuit_breaker_rule_items": [
  //             {
  //                 "ruleType": "avgRt",
  //                 "action": {
  //                     "type": "REJECT"
  //                 },
  //                 "configs": {
  //                     "totalMetricWindow": 10,
  //                     "requestVolumeThreshold": 10,
  //                     "averageRtThreshold": 50,
  //                     "sleepWindow": 1000
  //                 },
  //                 "trafficConditions": [
  //                     {
  //                         "type": "system",
  //                         "field": "trafficType",
  //                         "operation": "EQUAL",
  //                         "value": [
  //                             "online"
  //                         ]
  //                     }
  //                 ]
  //             }
  //         ],
  circuitBreakerRuleItems?: [ CircuitBreakerRuleItemModel ](name='circuit_breaker_rule_items', example='详见描述'),
  // 熔断生效条件
  conditions?: [ CircuitRuleBaseConditionModel ](name='conditions', example='[{"type": "system", "field": "method","operation": "equal","value": ["echo"]}'),
  // 熔断配置
  config?: CircuitBreakerConfigModel(name='config', example='{“totalMetricWindow”: 10,"requestVolumeThreshold": 20, "errorPercentThreshold": 50, "sleepWindow": 5000, "providerTimeout": 1000 }'),
  // 服务id
  dataId: string(name='data_id', example='00001'),
  // 修改时间
  gmtModified: long(name='gmt_modified', example='15003403'),
  // 取值GET、POST、DELETE、PUT(serviceType为SPRINGCLOUD时才有值)
  httpMethod?: string(name='http_method', example='GET'),
  // 可以传*表示通配符(serviceType为SPRINGCLOUD时才有值)
  httpPath?: string(name='http_path', example='/aa'),
  // 数据库自增id
  id: string(name='id', example='1'),
  // 租户id
  instanceId: string(name='instance_id', example='instance-00001'),
  // 方法名称(serviceType为SPRINGCLOUD时不传)
  methodName?: string(name='method_name', example='test'),
  // 熔断生效模式
  mode?: string(name='mode', example='REJECT'),
  // 熔断规则名
  name: string(name='name', example='规则一'),
  // 操作人
  operator?: string(name='operator', example='树嘉'),
  // dataId.methodName:trfficType:resType(当serviceType类型为SPRINGCLOUD时结构为dataId:trfficType:resType)
  resource?: string(name='resource', example='dataId.methodName:r:i'),
  // res的类型(r-rpc,g-gateway,q-mq)
  resType?: string(name='res_type', example='r'),
  // 服务类型
  serviceType: string(name='service_type', example='sofa'),
  // 规则是否生效
  status: long(name='status', example='0'),
  // 流量方向(i-inbound,o-outbound)
  trafficType?: string(name='traffic_type', example='i'),
}

// 推送历史
model PushHistory {
  // app name
  appName?: string(name='app_name', example='drmdata'),
  // 创建
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 推送历史id
  id?: long(name='id', example='12'),
  // 实例id
  instanceId?: string(name='instance_id', example='0000001'),
  // 编辑人
  operator?: string(name='operator', example='罗勇'),
  // 推送内容
  // 
  // 
  // 
  // 
  pushContent?: string(name='push_content', example='json'),
  // 逗号分隔的ruleId
  ruleIds?: string(name='rule_ids', example='1,2'),
  // 是否成功
  success?: boolean(name='success', example='true, false'),
  // 推送目标
  target?: string(name='target', example='target'),
}

// 故障隔离App列表
model FaultToleranceRuleAppModel {
  // app名称
  appName?: string(name='app_name', example='testApp'),
  // 规则数量
  rulesNum?: long(name='rules_num', example='100'),
}

// 应用支持的协议
model TransparentProxyProtocolModel {
  // 端口
  port: long(name='port', example='80'),
  // 协议
  protocol: string(name='protocol', example='http'),
}

// 单机推送结果
model GrayPublishResultItem {
  // 推送目标 host
  host?: string(name='host', example='127.0.0.1'),
  // 是否推送成功
  success?: boolean(name='success', example='true'),
}

// 服务熔断规则查询结果
model CircuitBreakerRuleResult {
  // 多个应用名
  appNames: string(name='app_names', example='bbbb,aaaa'),
  // 服务id
  dataId: string(name='data_id', example='com.alipay.antcloud.service'),
  // 规则总数
  rulesNum: long(name='rules_num', example='2'),
  // 服务类型
  serviceType: string(name='service_type', example='sofa'),
}

// GuardianApp
model GuardianApp {
  // 是否生效
  enable?: boolean(name='enable', example='true, false'),
  // 监控id
  id?: long(name='id', example='2134'),
  // 实例id
  instanceId?: string(name='instance_id', example='000001'),
  // 描述字段
  name?: string(name='name', example='EC_KBRECONCENTER_CUSTOMIZEBILL'),
  // 运行模式
  runMode?: string(name='run_mode', example='CONTROL'),
}

// LDC类型单元信息
model CellLdcInfo {
  // 单元名称
  name?: string(name='name', example='CZONE'),
  // 单元类型
  type?: string(name='type', example='暂无'),
}

// ConfigSnapshotModel
model ConfigSnapshotModel {
  // 实例id
  instanceId?: string(name='instance_id', example='0000001'),
  // 配置的key，例如在服务鉴权里是dataId
  key?: string(name='key', example='com.alipay.sofa.rpc.test.HelloService:1.0@DEFAULT@WHITELIST'),
  // 配置类型：例如 auth、lb 等
  type?: string(name='type', example='AuthRule'),
  // 配置值
  value?: string(name='value', example='json：{}'),
}

// 透明劫持节点
model TransparentProxyNodeModel {
  // ip地址
  ip: string(name='ip', example='127.0.0.0'),
  // 节点类型
  nodeType: string(name='node_type', example='CONTAINER'),
  // 节点ID
  id: long(name='id', example='1'),
}

// 消费者信息
model Subscriber {
  // 订阅端是否存活，默认1-存活，订阅端下线标记为0，默认1
  // 
  alive?: boolean(name='alive', example='true, false'),
  // 应用名
  appName?: string(name='app_name', example='consumer-demo'),
  // 校验值
  // 
  checkSum?: string(name='check_sum', example='afewgewhg24325'),
  // 服务id
  // 
  dataId?: string(name='data_id', example='com.antfin.demo.endpoint.facade.SampleRestFacade'),
  // 创建日期
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2019-12'),
  // 最后更新时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 发布这个服务的主机的 ip，不同于 service_ip
  hostIp?: string(name='host_ip', example='10.15.237.34'),
  // 消费者id
  id?: long(name='id', example='100'),
  // 租户实例id
  // 
  instanceId?: string(name='instance_id', example='00001'),
  // 进程ID
  // 
  processId?: string(name='process_id', example='10.15.237.34:53264'),
  // 订阅者的订阅维度
  scope?: string(name='scope', example='dataCenter'),
  // 订阅端订阅时使用的 zone
  zone?: string(name='zone', example='DEFAULT_ZONE'),
}

// ServiceSummary
model ServiceSummary {
  // 应用数
  appCount?: long(name='app_count', example='1'),
  // 服务数
  serviceCount?: long(name='service_count', example='2'),
  // 节点数
  nodeCount?: long(name='node_count', example='3'),
}

// 推送数据记录，每个 cell 对应一个值
model PublishDataItem {
  // 推送目标 cell
  cell?: string(name='cell', example='cell1'),
  // 推送值
  data?: string(name='data', example='some push data'),
}

// 服务元信息
model SimpleServiceInfo {
  // 服务id
  dataId?: string(name='data_id', example='cn.com.antcloud.guardianconsole.facade.configs.service.GuardianConfigFacade:1.0@DEFAULT'),
  // 服务提供者列表
  pubApp?: [ string ](name='pub_app', example='["pubApp"]'),
  // 服务提供者数
  pubCount?: long(name='pub_count', example='2'),
  // 服务架构类型
  serviceType?: string(name='service_type', example='DUBBO'),
  // 消费者数
  subCount?: long(name='sub_count', example='3'),
  // 应用元数据
  appInfos?: [ AppMetaDataModel ](name='app_infos', example=''),
}

// 路由规则组信息
model RouterRuleGroupModel {
  // 应用名
  appName?: string(name='app_name', example='consumer-demo'),
  // 服务id
  dataId?: string(name='data_id', example='com.antfin.demo.endpoint.facade.SampleRestFacade'),
  // 是否生效，1 生效，0 未生效。默认未生效
  enabled?: long(name='enabled', example='1'),
  // 更新日期
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // id
  id?: long(name='id', example='1'),
  // 实例id
  instanceId?: string(name='instance_id', example='00001'),
  // 编辑人
  operator?: string(name='operator', example='luoyon'),
  // 路由规则
  rules?: [ RouterRuleModel ](name='rules', example='json:{}'),
  // service 表示服务
  type?: string(name='type', example='service'),
  // 版本号
  dispatchVersion?: long(name='dispatch_version', example='1'),
}

// Drm日志
model DrmLog {
  // 触发推送客户端IP
  clientIp?: string(name='client_ip', example='30.50.33.243'),
  // 资源标识
  dataId?: string(name='data_id', example='drm.config:name=drmdomain.Alipay.dsrconsole.drmresource.com.alipay.antcloud.dsrconsole.core.service.drm.config.metadata,version=3.0@DRM'),
  // 推送失败目标
  failTarget?: string(name='fail_target', example='All Cells'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 修改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // id
  id?: long(name='id', example='212343'),
  // 实例ID
  instanceId?: string(name='instance_id', example='00001'),
  // 操作者
  operator?: string(name='operator', example='luoyon'),
  // 推送类型
  pushMode?: string(name='push_mode', example='Persist'),
  // 推送结果
  result?: string(name='result', example='Success'),
  // 来源应用
  sourceApp?: string(name='source_app', example='dsr'),
  // 目标
  target?: string(name='target', example='All Cells'),
  // 推送值
  value?: string(name='value', example='cellConfig'),
}

// 安全通信规则model
model CommunicationRuleModel {
  // [{"key":"aa","value":"bb","type":1}]
  labels?: [ CommunicationLabelModel ](name='labels', example='详见描述'),
  // 对labels取的hash值
  labelCode?: string(name='label_code', example='uuidaavvvv'),
  // id
  id?: long(name='id', example='1'),
  // 实例id
  instanceId?: string(name='instance_id', example='000001'),
  // 	
  // 规则名称
  name?: string(name='name', example='rule1'),
  // 取值(0-客户端,1-服务端)
  direction?: long(name='direction', example='1'),
  // 模式(0-tls,1-mtls)
  mode?: long(name='mode', example='1'),
  // 策略(0-普通,1-国密)
  strategy?: string(name='strategy', example='1'),
  // 	
  // 状态(0-关闭,1-开启)
  enabled?: long(name='enabled', example='1'),
  // 分类(0-应用,1-标签)
  scope?: long(name='scope', example='1'),
  // 操作人
  operator?: string(name='operator', example='aaa'),
  // 操作时间
  operateTime?: string(name='operate_time', example='2020-10-22 11:33:22'),
}

// 推送记录
model DDCSPushHistoryItem {
  // 推送记录的id
  id: long(name='id', example='10000'),
  // 变更平台，固定值 ddcs
  platform?: string(name='platform', example='ddcs'),
  // 变更类型，固定值
  changeType?: string(name='change_type', example='ddcs'),
  // 推送标题
  title?: string(name='title', example='向 Alipay.sofaops:name=com.alipay.sofaops.core.common.drmDemo.demoString,version=3.0@DRM 推送配置'),
  // 变更影响的应用名
  influenceApp?: string(name='influence_app', example='dsrconsole'),
  // 变更的 dataId
  dataId: string(name='data_id', example='Alipay.sofaops:name=com.alipay.sofaops.core.common.drmDemo.demoString,version=3.0@DRM'),
  // 推送类型，Cluster 表示集群推送，IP 表示按机器灰度推送
  pushType: string(name='push_type', example='Cluster'),
  // 推送的目标。按集群推送时，AllCells 表示向所用的 cell 推送，多个Cell之间逗号隔开。
  // 按机器推送时，值为 IP列表，逗号隔开
  target: string(name='target', example='Cell1,Cell2'),
  // 固定为 dataId 所属的 instanceId
  env?: string(name='env', example='000001'),
  // 操作人。如果是系统调用，则值为调用应用名
  operator: string(name='operator', example='ledou.zl'),
  // 变更的起始时间，值为  1970年到现在的毫秒数，主要是为了屏蔽时区的问题。
  gmtStart: long(name='gmt_start', example='31238974322'),
  // 变更的结束时间，值为  1970年到现在的毫秒数，主要是为了屏蔽时区的问题。
  gmtEnd: long(name='gmt_end', example='2371923712123'),
  // 推送结果
  pushResult: string(name='push_result', example='Success'),
  // 推送值
  value: string(name='value', example='true'),
}

// 监控规则
model GuardianRule {
  // app name
  appName?: string(name='app_name', example='drmdata'),
  // 是否可用
  enable?: boolean(name='enable', example='true, false'),
  // 创建
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 监控规则id
  id?: long(name='id', example='10'),
  // 实例id
  instanceId?: string(name='instance_id', example='00001'),
  // 规则名称
  name?: string(name='name', example='name'),
  // 编辑人
  operator?: string(name='operator', example='luoyon'),
  // 资源类型
  resourceType?: string(name='resource_type', example='DATA_ID_METHOD'),
  // 规则配置
  ruleConfig?: string(name='rule_config', example='{ "desc": "test", "resourceType": "METHOD","runMode": "CONTROL", "limitStrategy": "QpsLimiter","actionConfig ": { "actionType ": "NULL_PROCESS "  }, "calculationConfigs ": [{}], "resourceConfigs ": [{}] }'),
  // 运行模式
  runMode?: string(name='run_mode', example='CONTROL'),
}

// Drm数据单元信息
model DrmDataCellInfo {
  // 单元信息列表
  cellInfos?: [ CellInfo ](name='cell_infos', example='[{CellInfo}]'),
  // 所有单元中是否存在有特殊推送过值的单元
  hasSpecialCell?: boolean(name='has_special_cell', example='true, false'),
}

// 应用名及应用下的规则数
model AppNameCountModel {
  // 应用名
  appName?: string(name='app_name', example='testApp'),
  // 规则数
  ruleNum?: long(name='rule_num', example='2'),
}

// sidecar注入模型
model SidecarInjectModel {
  // 主键
  id?: long(name='id', example='1'),
  // 租户实例id
  instanceId?: string(name='instance_id', example='000001'),
  // sidecar名称
  sidecarName?: string(name='sidecar_name', example='test'),
  // 状态 0关闭 1开启
  status?: long(name='status', example='1'),
  // 操作人
  operator?: string(name='operator', example='kele.kl'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // sidecar注入配置
  configs?: [ SidecarInjectConfigModel ](name='configs', example='[{}]'),
}

// 客户端
model Client {
  // 所属的 cell
  cell?: string(name='cell', example='DEFAULT'),
  // 客户端内存里的值
  data?: string(name='data', example='switch'),
  // 客户端 IP
  ip?: string(name='ip', example='127.0.0.1'),
  // 推送的值
  pushData?: string(name='push_data', example='switch'),
}

// 故障隔离规则model
model FaultToleranceRuleModel {
  // id
  id?: long(name='id', example='1'),
  // 实例id
  instanceId?: string(name='instance_id', example='000001'),
  // app名称
  appName?: string(name='app_name', example='app1'),
  // 规则名称
  name?: string(name='name', example='rule1'),
  // 操作人
  operator?: string(name='operator', example='test'),
  // 修改时间
  gmtModified?: string(name='gmt_modified', example='15003403'),
  // 排序字段
  orders?: [ BaseOrderDO ](name='orders', example='[{"key":"data_id","dir":"DESC"}]'),
  // 是否启用(0-未启用1启用-2部分启用)
  enabled?: long(name='enabled', example='1'),
  // 故障隔离的具体规则项
  // {"appName":"testApp","name":"test23","ruleItemList":[{"conditions":[{"type":"system","field":"targetApp","operation":"IN","value":["A"]}],"configs":{"timeWindow":10,"leastWindowCount":100,"maxIpCount":3,"exceptionRateMultiple":3,"leastExceptionRate":10,"exceptionTypes":["500"]},"actions":[{"type":"DOWNGRADE"}]}]}
  ruleItemList?: [ FaultToleranceRuleItemModel ](name='rule_item_list', example='见描述'),
  // 取值client,server二选1，默认是client
  direction?: string(name='direction', example='client'),
}

// 透明劫持下载链接VO结构套件
model TransparentProxySidecarScriptLinkVo {
  // 安装sidecar下载链接
  installSidecarScriptLink: string(name='install_sidecar_script_link', example='http://xxxx'),
  // 清理sidecar脚本下载链接
  cleanSidecarScriptLink: string(name='clean_sidecar_script_link', example='http://xxxx'),
}

// 透明劫持应用的节点展示结构
model TransparentProxyNodeVo {
  // 应用名
  appName: string(name='app_name', example='app1'),
  // 节点 ID
  id: long(name='id', example='1'),
  // 应用实例 ID
  instanceId: string(name='instance_id', example='999999'),
  // IP 地址
  ip: string(name='ip', example='127.0.0.1'),
  // mosn 版本
  mosnVersion: string(name='mosn_version', example='Mosn v.1.10.1'),
  // 节点状态
  nodeStatus: string(name='node_status', example='运行中'),
  // 节点集群类型
  nodeType: string(name='node_type', example='container'),
  // 节点是否在运行透明劫持
  realRun: string(name='real_run', example='1'),
  // Sidecar 状态
  sidecarStatus: string(name='sidecar_status', example='运行中'),
  // 透明劫持开关
  transparentProxySwitch: long(name='transparent_proxy_switch', example='1'),
}

// ConfigDispatchLogDO
model ConfigDispatchLogDO {
  // 实例id
  instanceId?: string(name='instance_id', example='00001'),
  // 配置的key
  key?: string(name='key', example='objectIdUnitTest-service'),
  // 配置的类型
  type?: string(name='type', example='RouterRule'),
  // 状态
  status?: long(name='status', example='0,1'),
  // 配置下发的信息
  value?: string(name='value', example='json：{}'),
}

// 服务具体同步的数据
model SyncData {
  // 源数据
  sourceData: string(name='source_data', example='fdsjfdlsjak;fj;sk'),
  // 目标数据
  targetData: string(name='target_data', example='1.1.2.1:122200'),
}

// 故障注入规则应用名
model FaultInjectRuleAppNameModel {
  // 应用名称
  appName?: string(name='app_name', example='foo'),
  // 规则数量
  ruleNum?: long(name='rule_num', example='2'),
}

// Drm资源
model DrmResource {
  // appName
  appName?: string(name='app_name', example='dsr'),
  // 资源属性列表
  attributes?: [ DrmAttribute ](name='attributes', example='[{DrmAttribute}]'),
  // drm资源id
  id?: long(name='id', example='213'),
  // 实例id
  instanceId?: string(name='instance_id', example='00000001'),
  // 描述字段
  name?: string(name='name', example='name'),
  // 资源域
  region?: string(name='region', example='Alipay'),
  // 资源域和应用名
  resourceDomain?: string(name='resource_domain', example='Alipay.dsrconsole'),
  // 资源类路径
  resourceId?: string(name='resource_id', example='com.alipay.antcloud.dsrconsole.core.service.drm.config'),
  // 资源版本
  resourceVersion?: string(name='resource_version', example='3.0'),
  // type
  type?: string(name='type', example='normal'),
}

// 客户端内存值
model ClientValue {
  // 客户端内存里的值
  data?: string(name='data', example='switch'),
  // 客户端 IP
  ip?: string(name='ip', example='127.0.0.1'),
  // 是否查询成功
  success?: boolean(name='success', example='true'),
}

// 鉴权规则
model AuthRule {
  // 鉴权规则描述
  name: string(name='name', example='允许部分应用访问'),
  // REJECT : 表示严格模式，例如不匹配白名单则拒绝访问
  // OBSERVER：表示非严格模式，例如不匹配白名单只记录日志，不拒绝访问
  mode: string(name='mode', example='REJECT'),
  // 规则所属的名单id
  authRuleGroupId: long(name='auth_rule_group_id', example='100000'),
  // 是否生效，1 表示生效，0 表示不生效
  enabled: long(name='enabled', example='1'),
  // 一条规则下，所有的规则项
  ruleItems?: [ AuthRuleItem ](name='rule_items', example=''),
}

// 服务鉴权规则
model AuthRuleGroup {
  // 服务id
  dataId?: string(name='data_id', example='com.alipay.antcloud.drmdata.facade.DrmDataClusterFacade'),
  // 是否生效，1 生效，0 未生效。默认未生效
  enabled?: long(name='enabled', example='1'),
  // 租户实例id
  instanceId?: string(name='instance_id', example='000001'),
  // 一份白名单或者黑名单下所有服务鉴权规则
  rules?: [ AuthRuleVO ](name='rules', example='rules'),
  // 下发是否成功, 0 失败, 1 成功, 2 部分失败
  status?: long(name='status', example='1'),
  // whitelist/blacklist
  type?: string(name='type', example='WHITELIST'),
  // 最后更新时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// 注册中心同步集群元信息
model SyncCluster {
  // 集群id
  id: string(name='id', example='1000'),
  // [{   //扩展参数，比如涉及到鉴权
  //                   "key": "user",
  //                   "value": "xx"
  //                 }, {
  //                   "key": "password",
  //                   "value": "xx"
  //                 }]
  extraParams: [ KeyValueModel ](name='extra_params', example=''),
  // 集群描述信息
  name: string(name='name', example='test-onekey-source'),
  // 集群类型
  type: string(name='type', example='EUREKA'),
  // 集群所有的机器列表，；隔开
  vip: string(name='vip', example='10.2.4.1;10.45.14.56'),
}

// 服务同步状态信息
model ServiceSyncStatus {
  // 服务id
  serviceId: string(name='service_id', example='com.alipay.sofa.cloud.osp.user.facade.UserFacade'),
  // 服务所属的应用名
  serviceName: string(name='service_name', example='app1'),
  // 当前同步状态
  status: string(name='status', example='RUNNING'),
  // 日期
  date: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='date', example='2018-10-10T10:10:00Z'),
}

// 集群信息
model MeshClusterModel {
  // 主键
  id?: long(name='id', example='10'),
  // 租户实例id
  instanceId?: string(name='instance_id', example='000001'),
  // 集群名称
  clusterName?: string(name='cluster_name', example='k8smaster'),
  // 开通/关闭状态 0：关闭 1：开通
  status?: long(name='status', example='1'),
  // 操作人
  operator?: string(name='operator', example='kele.kl'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// 服务关系数据
model ServiceRelation {
  // 应用名
  appName?: string(name='app_name', example='consumer-demo'),
  // 服务id
  dataId?: string(name='data_id', example='com.alipay.antcloud.drmdata.facade.DrmDataClusterFacade'),
}

// 服务提供者信息
model Publisher {
  // 订阅端是否存活，默认1-存活，订阅端下线标记为0，默认1
  alive?: boolean(name='alive', example='1'),
  // 应用名
  appName?: string(name='app_name', example='consumer-demo'),
  // appVersion
  appVersion?: string(name='app_version', example='1.0'),
  // 校验值
  checkSum?: string(name='check_sum', example='12wfewgfterw'),
  // 注册的内容
  content?: string(name='content', example='注册的内容'),
  // 服务id
  dataId?: string(name='data_id', example='com.antfin.demo.endpoint.facade.SampleRestFacade'),
  // IP
  hostIp?: string(name='host_ip', example='10.12.32.144'),
  // 服务id
  id?: long(name='id', example='1'),
  // 实例id
  instanceId?: string(name='instance_id', example='00001'),
  // mosn
  mosn?: boolean(name='mosn', example='true, false'),
  // 进程ID
  // 
  processId?: string(name='process_id', example='14321'),
  // 协议
  protocol?: string(name='protocol', example='bolt'),
  // 服务ip
  serviceIp?: string(name='service_ip', example='11.23'),
  // 服务端口
  servicePort?: long(name='service_port', example='8000'),
  // 状态
  status?: boolean(name='status', example='true'),
  // 超时时间
  timeout?: long(name='timeout', example='10000'),
  // 是否是虚拟机模式
  vmMode?: boolean(name='vm_mode', example='true'),
  // 权重
  weight?: long(name='weight', example='45'),
  // 逻辑机房
  // 
  zone?: string(name='zone', example='zone1'),
  // 修改过的权重
  configWeight?: string(name='config_weight', example='100'),
}

// 服务鉴权规则组
model AuthRuleGroupVO {
  // 	服务id
  dataId: string(name='data_id', example='com.alipay.antcloud.drmdata.facade.DrmDataClusterFacade'),
  // 是否生效，1 生效，0 未生效。默认未生效
  enabled: long(name='enabled', example='1'),
  // 最后更新日期
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 	租户实例id	
  // 
  instanceId: string(name='instance_id', example='000001'),
  // 一份白名单或者黑名单下所有服务鉴权规则
  rules: [ AuthRuleVO ](name='rules', example=''),
  // 下发是否成功, 0 失败, 1 成功, 2 部分失败
  status: long(name='status', example='1'),
  // WHITELIST 或者是 BLACKLIST
  type: string(name='type', example='WHITELIST'),
  // 规则组id
  id: long(name='id', example=''),
}

// 服务信息记录
model ServicePublisher {
  // 实例标识
  instanceId?: string(name='instance_id', example='abcdEFGH1234'),
  // 服务标识
  dataId?: string(name='data_id', example='com.alipay.sofa.demo.Facade:1.0@DEFAULT'),
  // 应用名称
  appName?: string(name='app_name', example='demoApp'),
  // 服务提供方客户端IP
  hostIp?: string(name='host_ip', example='10.10.10.10'),
  // 服务提供方客户端发布的IP
  serviceIp?: string(name='service_ip', example='10.10.10.10'),
  // 服务提供方客户端发布的端口
  servicePort?: integer(name='service_port', example='12200'),
  // 请求权重，范围：0-100
  weight?: integer(name='weight', example='100'),
  // 逻辑机房
  zone?: string(name='zone', example='Cell1'),
}

// Tpl类型资源列表
model DrmResourceTpl {
  // app name
  appName?: string(name='app_name', example='appName'),
  // 资源属性列表
  attributes?: [ DrmAttribute ](name='attributes', example='[{DrmAttribute}]'),
  // 描述
  desc?: string(name='desc', example='desc'),
  // 所有单元中是否存在有特殊推送过值的单元
  hasInstance?: boolean(name='has_instance', example='true, false'),
  // drm资源id
  id?: long(name='id', example='1234'),
  // 实例id
  instanceId?: string(name='instance_id', example='00111'),
  // 资源域
  region?: string(name='region', example='Alipay'),
  // 资源类路径
  resourceId?: string(name='resource_id', example='com.alipay.antcloud.dsrconsole.core.service.drm.config'),
}

// 审计日志
model AuditLogModel {
  // 主键
  id?: long(name='id', example='1'),
  // 租户实例id
  instanceId?: string(name='instance_id', example='000001'),
  // 操作类型
  operateType?: string(name='operate_type', example='add'),
  // sofa.ms.auditlogs.list
  operateInterface?: string(name='operate_interface', example='操作接口'),
  // 描述信息
  description?: string(name='description', example='新增鉴权规则'),
  // 请求参数
  content?: string(name='content', example='{”instanceId“: "000001"}'),
  // 响应结果
  response?: string(name='response', example='{"result_code": "OK"}'),
  // 0 失败 1 成功
  status?: long(name='status', example='1'),
  // 操作人
  operator?: string(name='operator', example='kele.kl'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// 通信安全页面model
model CommunicationPageModel {
  // id
  id?: long(name='id', example='1'),
  // 实例id
  instanceId?: string(name='instance_id', example='000001'),
  // 规则名称
  name?: string(name='name', example='rule1'),
  // 取值(0-客户端,1-服务端)
  direction?: long(name='direction', example='1'),
  // 模式(0-tls,1-mtls)
  mode?: long(name='mode', example='1'),
  // 策略(0-普通,1-国密)
  strategy?: string(name='strategy', example='1'),
  // 状态(0-关闭,1-开启)
  enabled?: long(name='enabled', example='0'),
  // 分类(0-应用,1-标签)
  scope?: long(name='scope', example='1'),
  // 操作人
  operator?: string(name='operator', example='aaa'),
  // 操作时间
  operateTime?: string(name='operate_time', example='2020-10-22 11:33:22'),
}

// 降级规则组Vo
model DowngradeRuleGroupVo {
  // 主键
  id: long(name='id', example='1000000'),
  // 租户实例id
  instanceId: string(name='instance_id', example='999999'),
  // foo
  appName: string(name='app_name', example='应用名称'),
  // 类型
  type: string(name='type', example='SOFA'),
  // 降级全局开关(0:关闭 1:开启)
  enabled: long(name='enabled', example='1'),
  // 降级规则
  downgradeRules: [ DowngradeRuleVo ](name='downgrade_rules', example='{}'),
}

// sidecar实例
model SideCarDetailModel {
  // 应用服务名
  appServiceName: string(name='app_service_name', example='cloudmeshtestjavaclient'),
  // 集群名
  clustername: string(name='clustername', example='default'),
  // pod创建时间
  createdTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time', example='2018-10-10T10:10:00Z'),
  // 命名空间
  namespace: string(name='namespace', example='default'),
  // pod ip
  podIp: string(name='pod_ip', example='192.168.1.100'),
  // pod实例名
  podName: string(name='pod_name', example='cloudmeshtestjavaclient-m5t2w-nxg88'),
  // pod状态
  podStatus: string(name='pod_status', example='Running'),
  // sidecar状态
  sidecarStatus: string(name='sidecar_status', example='running'),
  // sidecar类型(mosn/odp/mist)
  sidecarType: string(name='sidecar_type', example='mosn'),
  // sidecar版本
  sidecarVersion: string(name='sidecar_version', example='1.8.9-78564185'),
}

// 1
model Test {
}

// 透明劫持应用Vo
model TransparentProxyAppVo {
  // 透明劫持配置
  appConfig?: TransparentProxyAppConfig(name='app_config', example=''),
  // 应用名称
  appName: string(name='app_name', example='app1'),
  // 应用 ID
  id: long(name='id', example='1'),
  // 租户实例 ID
  instanceId: string(name='instance_id', example='999999'),
  // 节点数
  nodeNum: long(name='node_num', example='10'),
  // 打开透明劫持的节点数
  openNum: long(name='open_num', example='3'),
  // 运行透明劫持的节点数
  runNum: long(name='run_num', example='3'),
  // 应用支持的协议
  supportProtocols?: [ TransparentProxyProtocolVo ](name='support_protocols', example=''),
}

// 流量镜像视图对象
model TrafficMirrorRuleVO {
  // id
  id?: long(name='id', example='1'),
  // 租户实例id
  instanceId?: string(name='instance_id', example='000001'),
  // 源应用
  sourceApp?: string(name='source_app', example='demo'),
  // 源服务ID
  sourceDataId?: string(name='source_data_id', example='demo@DEFAULT'),
  // 目标应用
  targetApp?: string(name='target_app', example='demo1'),
  // 目标服务ID
  targetDataId?: string(name='target_data_id', example='demo@rest'),
  // 规则名
  ruleName?: string(name='rule_name', example='rule_name'),
  // 是否开启
  enabled?: boolean(name='enabled', example='true, false'),
  // 操作人
  operator?: string(name='operator', example='kele'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 规则配置
  ruleConfig?: TrafficMirrorConfigModel(name='rule_config', example='{}'),
}

// 透明劫持应用治理连接池配置
model TransparentProxyConnPoolConfig {
  // 最大连接数
  maxReq?: long(name='max_req', example='1000'),
}

model PersistpushMsDdcsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称，长度50以内
  appName: string(name='app_name'),
  // 属性名称，长度50以内
  attributeName: string(name='attribute_name'),
  // 实例标识，通常在中间件门户首页获取，长度50以内
  instanceId: string(name='instance_id'),
  // 操作人，可以定义为系统或者实际操作人，用于推送源追溯，长度50以内
  operator: string(name='operator'),
  // 机构名称，长度20以内
  region: string(name='region'),
  // 配置类名称，长度150以内
  resourceId: string(name='resource_id'),
  // 推送值，长度10240以内
  value: string(name='value'),
}

model PersistpushMsDdcsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 推送成功数据版本，有效值为1~Long最大值
  version: string(name='version'),
}

/**
 * Description: 微服务-动态配置-持久化推送接口。此接口推送的动态配置值会持续生效，应用重启也会拉取服务端保存的最新值。
 * Summary: 动态配置持久化推送
 */
async function persistpushMsDdcs(request: PersistpushMsDdcsRequest): PersistpushMsDdcsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return persistpushMsDdcsEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-持久化推送接口。此接口推送的动态配置值会持续生效，应用重启也会拉取服务端保存的最新值。
 * Summary: 动态配置持久化推送
 */
async function persistpushMsDdcsEx(request: PersistpushMsDdcsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PersistpushMsDdcsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'ms.ddcs.persistpush', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryclientsMsDdcsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称，长度50以内
  appName: string(name='app_name'),
  // 属性名称，长度50以内
  attributeName: string(name='attribute_name'),
  // 实例标识，通常在中间件门户首页获取，长度50以内
  instanceId: string(name='instance_id'),
  // 机构名称，长度20以内
  region: string(name='region'),
  // 配置类名称，长度150以内
  resourceId: string(name='resource_id'),
}

model QueryclientsMsDdcsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订阅客户端列表
  clients: [ ClientInfo ](name='clients'),
}

/**
 * Description: 微服务-动态配置-查询动态配置订阅客户端接口。此接口可查询到订阅指定配置项的客户端信息。
 * Summary: 查询动态配置订阅客户端
 */
async function queryclientsMsDdcs(request: QueryclientsMsDdcsRequest): QueryclientsMsDdcsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryclientsMsDdcsEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-查询动态配置订阅客户端接口。此接口可查询到订阅指定配置项的客户端信息。
 * Summary: 查询动态配置订阅客户端
 */
async function queryclientsMsDdcsEx(request: QueryclientsMsDdcsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryclientsMsDdcsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'ms.ddcs.queryclients', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddMsDdcsResourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称，长度50以内
  appName: string(name='app_name'),
  // 属性列表，类型是数组
  attributes?: [ Attribute ](name='attributes'),
  instanceId: string(name='instance_id'),
  // 资源描述，长度150以内
  name?: string(name='name'),
  // 机构名称，长度20以内
  region: string(name='region'),
  // 配置类名称，长度150以内
  resourceId: string(name='resource_id'),
}

model AddMsDdcsResourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求是否执行成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-动态配置-添加动态资源
 * Summary: 添加 DDCS 资源
 */
async function addMsDdcsResource(request: AddMsDdcsResourceRequest): AddMsDdcsResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addMsDdcsResourceEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-添加动态资源
 * Summary: 添加 DDCS 资源
 */
async function addMsDdcsResourceEx(request: AddMsDdcsResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddMsDdcsResourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'ms.ddcs.resource.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMsDdcsResourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称，长度50以内
  appName: string(name='app_name'),
  instanceId: string(name='instance_id'),
  // 应用名称，长度50以内
  newAppName?: string(name='new_app_name'),
  // 资源描述，长度150以内
  newName?: string(name='new_name'),
  // 机构名称，长度20以内
  newRegion?: string(name='new_region'),
  // 配置类名称，长度150以内
  newResourceId?: string(name='new_resource_id'),
  // 机构名称，长度20以内
  region: string(name='region'),
  // 配置类名称，长度150以内
  resourceId: string(name='resource_id'),
}

model UpdateMsDdcsResourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-动态配置-编辑动态资源
 * Summary: 编辑 DDCS 资源
 */
async function updateMsDdcsResource(request: UpdateMsDdcsResourceRequest): UpdateMsDdcsResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMsDdcsResourceEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-编辑动态资源
 * Summary: 编辑 DDCS 资源
 */
async function updateMsDdcsResourceEx(request: UpdateMsDdcsResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMsDdcsResourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'ms.ddcs.resource.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteMsDdcsResourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称，长度50以内
  appName: string(name='app_name'),
  instanceId: string(name='instance_id'),
  // 机构名称，长度20以内
  region: string(name='region'),
  // 配置类名称，长度150以内
  resourceId: string(name='resource_id'),
}

model DeleteMsDdcsResourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-动态配置-删除动态资源
 * Summary: 删除 DDCS 资源
 */
async function deleteMsDdcsResource(request: DeleteMsDdcsResourceRequest): DeleteMsDdcsResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteMsDdcsResourceEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-删除动态资源
 * Summary: 删除 DDCS 资源
 */
async function deleteMsDdcsResourceEx(request: DeleteMsDdcsResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMsDdcsResourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'ms.ddcs.resource.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddMsDdcsAttributeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  appName: string(name='app_name'),
  attributeName: string(name='attribute_name'),
  instanceId: string(name='instance_id'),
  // 属性描述
  name?: string(name='name'),
  region: string(name='region'),
  resourceId: string(name='resource_id'),
}

model AddMsDdcsAttributeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行结果
  success: boolean(name='success'),
}

/**
 * Description: 微服务-动态配置-添加属性
 * Summary: 添加属性
 */
async function addMsDdcsAttribute(request: AddMsDdcsAttributeRequest): AddMsDdcsAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addMsDdcsAttributeEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-添加属性
 * Summary: 添加属性
 */
async function addMsDdcsAttributeEx(request: AddMsDdcsAttributeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddMsDdcsAttributeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'ms.ddcs.attribute.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMsDdcsAttributeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  appName: string(name='app_name'),
  attributeName: string(name='attribute_name'),
  instanceId: string(name='instance_id'),
  newAttributeName?: string(name='new_attribute_name'),
  newName?: string(name='new_name'),
  region: string(name='region'),
  resourceId: string(name='resource_id'),
}

model UpdateMsDdcsAttributeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-动态配置-编辑属性
 * Summary: 编辑属性
 */
async function updateMsDdcsAttribute(request: UpdateMsDdcsAttributeRequest): UpdateMsDdcsAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMsDdcsAttributeEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-编辑属性
 * Summary: 编辑属性
 */
async function updateMsDdcsAttributeEx(request: UpdateMsDdcsAttributeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMsDdcsAttributeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'ms.ddcs.attribute.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteMsDdcsAttributeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  appName: string(name='app_name'),
  attributeName: string(name='attribute_name'),
  instanceId: string(name='instance_id'),
  region: string(name='region'),
  resourceId: string(name='resource_id'),
}

model DeleteMsDdcsAttributeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-动态配置-删除属性
 * Summary: 删除属性
 */
async function deleteMsDdcsAttribute(request: DeleteMsDdcsAttributeRequest): DeleteMsDdcsAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteMsDdcsAttributeEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-删除属性
 * Summary: 删除属性
 */
async function deleteMsDdcsAttributeEx(request: DeleteMsDdcsAttributeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMsDdcsAttributeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'ms.ddcs.attribute.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SearchMsDdcsResourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  appName?: string(name='app_name'),
  instanceId: string(name='instance_id'),
  keyword?: string(name='keyword'),
  pageSize?: integer(name='page_size'),
  start?: integer(name='start'),
}

model SearchMsDdcsResourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  current?: integer(name='current'),
  data?: [ Resource ](name='data'),
  pageSize?: integer(name='page_size'),
  // 请求执行是否成功
  success: boolean(name='success'),
  total?: integer(name='total'),
}

/**
 * Description: 微服务-动态配置-查找动态配置
 * Summary: 查找动态资源
 */
async function searchMsDdcsResource(request: SearchMsDdcsResourceRequest): SearchMsDdcsResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return searchMsDdcsResourceEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-查找动态配置
 * Summary: 查找动态资源
 */
async function searchMsDdcsResourceEx(request: SearchMsDdcsResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SearchMsDdcsResourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'ms.ddcs.resource.search', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddMsDssTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  cron: string(name='cron'),
  instanceId: string(name='instance_id'),
  name: string(name='name'),
  system: string(name='system'),
}

model AddMsDssTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-分布式调度任务-添加调度任务
 * Summary: 添加调度任务
 */
async function addMsDssTask(request: AddMsDssTaskRequest): AddMsDssTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addMsDssTaskEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-添加调度任务
 * Summary: 添加调度任务
 */
async function addMsDssTaskEx(request: AddMsDssTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddMsDssTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'ms.dss.task.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMsDssTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  instanceId: string(name='instance_id'),
  name: string(name='name'),
  newCron?: string(name='new_cron'),
  newName?: string(name='new_name'),
  newSystem?: string(name='new_system'),
}

model UpdateMsDssTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-分布式调度任务-编辑调度任务
 * Summary: 编辑调度任务
 */
async function updateMsDssTask(request: UpdateMsDssTaskRequest): UpdateMsDssTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMsDssTaskEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-编辑调度任务
 * Summary: 编辑调度任务
 */
async function updateMsDssTaskEx(request: UpdateMsDssTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMsDssTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'ms.dss.task.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteMsDssTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  instanceId: string(name='instance_id'),
  name: string(name='name'),
}

model DeleteMsDssTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-分布式调度任务-删除任务
 * Summary: 删除调度任务
 */
async function deleteMsDssTask(request: DeleteMsDssTaskRequest): DeleteMsDssTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteMsDssTaskEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-删除任务
 * Summary: 删除调度任务
 */
async function deleteMsDssTaskEx(request: DeleteMsDssTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMsDssTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'ms.dss.task.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SearchMsDssTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  instanceId: string(name='instance_id'),
  name?: string(name='name'),
  pageSize?: integer(name='page_size'),
  start?: integer(name='start'),
  system?: string(name='system'),
}

model SearchMsDssTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  data?: [ Task ](name='data'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-分布式调度任务-查找调度任务
 * Summary: 查找调度任务
 */
async function searchMsDssTask(request: SearchMsDssTaskRequest): SearchMsDssTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return searchMsDssTaskEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-查找调度任务
 * Summary: 查找调度任务
 */
async function searchMsDssTaskEx(request: SearchMsDssTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SearchMsDssTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'ms.dss.task.search', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMsDssTaskStrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  name?: string(name='name'),
  instanceId?: string(name='instance_id'),
}

model QueryMsDssTaskStrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  strategies?: [ Strategy ](name='strategies'),
}

/**
 * Description: 微服务-分布式调度任务-查找调度任务策略(独占版)
 * Summary: 通过策略名称查询策略
 */
async function queryMsDssTaskStrategy(request: QueryMsDssTaskStrategyRequest): QueryMsDssTaskStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMsDssTaskStrategyEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-查找调度任务策略(独占版)
 * Summary: 通过策略名称查询策略
 */
async function queryMsDssTaskStrategyEx(request: QueryMsDssTaskStrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMsDssTaskStrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'ms.dss.task.strategy.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDssIdcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  instanceId: string(name='instance_id'),
}

model ListDssIdcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  idcs: [ Idc ](name='idcs'),
}

/**
 * Description: 微服务-分布式调度任务-机房信息(独占版)
 * Summary: 获取部署调度任务的所有机房
 */
async function listDssIdc(request: ListDssIdcRequest): ListDssIdcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDssIdcEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-机房信息(独占版)
 * Summary: 获取部署调度任务的所有机房
 */
async function listDssIdcEx(request: ListDssIdcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDssIdcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.dss.idc.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDssScheduleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  appName: string(name='app_name'),
  cronexp: string(name='cronexp'),
  divideCount: integer(name='divide_count'),
  instanceId?: string(name='instance_id'),
  maxLoad: integer(name='max_load'),
  name: string(name='name'),
  priority: string(name='priority'),
  strategyName: string(name='strategy_name'),
  taskIdcs: string(name='task_idcs'),
  taskState: string(name='task_state'),
  taskType: string(name='task_type'),
}

model AddDssScheduleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 微服务-分布式调度任务-增加任务(独占版)
 * Summary: 独占版添加调度任务
 */
async function addDssSchedule(request: AddDssScheduleRequest): AddDssScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDssScheduleEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-增加任务(独占版)
 * Summary: 独占版添加调度任务
 */
async function addDssScheduleEx(request: AddDssScheduleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDssScheduleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.dss.schedule.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDssScheduleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  appName: string(name='app_name'),
  cronexp: string(name='cronexp'),
  divideCount: integer(name='divide_count'),
  id?: string(name='id'),
  instanceId?: string(name='instance_id'),
  maxLoad: integer(name='max_load'),
  name: string(name='name'),
  priority: string(name='priority'),
  strategyName: string(name='strategy_name'),
  taskIdcs: string(name='task_idcs'),
  taskState: string(name='task_state'),
  taskType: string(name='task_type'),
}

model UpdateDssScheduleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 微服务-分布式调度任务-更新任务(独占版)
 * Summary: 更新调度任务
 */
async function updateDssSchedule(request: UpdateDssScheduleRequest): UpdateDssScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDssScheduleEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-更新任务(独占版)
 * Summary: 更新调度任务
 */
async function updateDssScheduleEx(request: UpdateDssScheduleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDssScheduleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.dss.schedule.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDssScheduleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  appName?: string(name='app_name'),
  instanceId?: string(name='instance_id'),
  name?: string(name='name'),
  pageNum?: integer(name='page_num'),
  pageSize?: integer(name='page_size'),
}

model QueryDssScheduleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  pageNum?: integer(name='page_num'),
  pageSize?: integer(name='page_size'),
  tasks?: [ ScheduleTask ](name='tasks'),
  totalCount?: integer(name='total_count'),
}

/**
 * Description: 微服务-分布式调度任务-查询调度任务(独占版)
 * Summary: 分页查询调度任务
 */
async function queryDssSchedule(request: QueryDssScheduleRequest): QueryDssScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDssScheduleEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-查询调度任务(独占版)
 * Summary: 分页查询调度任务
 */
async function queryDssScheduleEx(request: QueryDssScheduleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDssScheduleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.dss.schedule.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PersistpushDdcsDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称，长度50以内
  appName: string(name='app_name'),
  // 属性名称，长度50以内
  attributeName: string(name='attribute_name'),
  // 实例标识，通常在中间件门户首页获取，长度50以内
  instanceId: string(name='instance_id'),
  // 操作人，可以定义为系统或者实际操作人，用于推送源追溯，长度50以内
  operator: string(name='operator'),
  // 机构名称，长度20以内
  region: string(name='region'),
  // 配置类名称，长度150以内
  resourceId: string(name='resource_id'),
  // 推送值，长度10240以内
  value: string(name='value'),
}

model PersistpushDdcsDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 推送成功数据版本，有效值为1~Long最大值
  version: string(name='version'),
}

/**
 * Description: 微服务-动态配置-持久化推送接口。此接口推送的动态配置值会持续生效，应用重启也会拉取服务端保存的最新值。
 * Summary: 动态配置持久化推送
 */
async function persistpushDdcsData(request: PersistpushDdcsDataRequest): PersistpushDdcsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return persistpushDdcsDataEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-持久化推送接口。此接口推送的动态配置值会持续生效，应用重启也会拉取服务端保存的最新值。
 * Summary: 动态配置持久化推送
 */
async function persistpushDdcsDataEx(request: PersistpushDdcsDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PersistpushDdcsDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.ddcs.data.persistpush', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDdcsClientsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称，长度50以内
  appName: string(name='app_name'),
  // 属性名称，长度50以内
  attributeName: string(name='attribute_name'),
  // 实例标识，通常在中间件门户首页获取，长度50以内
  instanceId: string(name='instance_id'),
  // 机构名称，长度20以内
  region: string(name='region'),
  // 配置类名称，长度150以内
  resourceId: string(name='resource_id'),
}

model QueryDdcsClientsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订阅客户端列表
  clients: [ ClientInfo ](name='clients'),
}

/**
 * Description: 微服务-动态配置-查询动态配置订阅客户端接口。此接口可查询到订阅指定配置项的客户端信息。
 * Summary: 查询动态配置订阅客户端
 */
async function queryDdcsClients(request: QueryDdcsClientsRequest): QueryDdcsClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDdcsClientsEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-查询动态配置订阅客户端接口。此接口可查询到订阅指定配置项的客户端信息。
 * Summary: 查询动态配置订阅客户端
 */
async function queryDdcsClientsEx(request: QueryDdcsClientsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDdcsClientsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.ddcs.clients.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDdcsResourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称，长度50以内
  appName: string(name='app_name'),
  // 属性列表，类型是数组
  attributes?: [ Attribute ](name='attributes'),
  instanceId: string(name='instance_id'),
  // 资源描述，长度150以内
  name?: string(name='name'),
  // 机构名称，长度20以内
  region: string(name='region'),
  // 配置类名称，长度150以内
  resourceId: string(name='resource_id'),
}

model AddDdcsResourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求是否执行成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-动态配置-添加动态资源
 * Summary: 添加 DDCS 资源
 */
async function addDdcsResource(request: AddDdcsResourceRequest): AddDdcsResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDdcsResourceEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-添加动态资源
 * Summary: 添加 DDCS 资源
 */
async function addDdcsResourceEx(request: AddDdcsResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDdcsResourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.ddcs.resource.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDdcsResourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称，长度50以内
  appName: string(name='app_name'),
  instanceId: string(name='instance_id'),
  // 应用名称，长度50以内
  newAppName?: string(name='new_app_name'),
  // 资源描述，长度150以内
  newName?: string(name='new_name'),
  // 机构名称，长度20以内
  newRegion?: string(name='new_region'),
  // 配置类名称，长度150以内
  newResourceId?: string(name='new_resource_id'),
  // 机构名称，长度20以内
  region: string(name='region'),
  // 配置类名称，长度150以内
  resourceId: string(name='resource_id'),
}

model UpdateDdcsResourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-动态配置-编辑动态资源
 * Summary: 编辑 DDCS 资源
 */
async function updateDdcsResource(request: UpdateDdcsResourceRequest): UpdateDdcsResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDdcsResourceEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-编辑动态资源
 * Summary: 编辑 DDCS 资源
 */
async function updateDdcsResourceEx(request: UpdateDdcsResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDdcsResourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.ddcs.resource.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDdcsResourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称，长度50以内
  appName: string(name='app_name'),
  instanceId: string(name='instance_id'),
  // 机构名称，长度20以内
  region: string(name='region'),
  // 配置类名称，长度150以内
  resourceId: string(name='resource_id'),
}

model DeleteDdcsResourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-动态配置-删除动态资源
 * Summary: 删除 DDCS 资源
 */
async function deleteDdcsResource(request: DeleteDdcsResourceRequest): DeleteDdcsResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDdcsResourceEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-删除动态资源
 * Summary: 删除 DDCS 资源
 */
async function deleteDdcsResourceEx(request: DeleteDdcsResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDdcsResourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.ddcs.resource.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDdcsAttributeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  appName: string(name='app_name'),
  attributeName: string(name='attribute_name'),
  instanceId: string(name='instance_id'),
  // 属性描述
  name?: string(name='name'),
  region: string(name='region'),
  resourceId: string(name='resource_id'),
}

model AddDdcsAttributeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行结果
  success: boolean(name='success'),
}

/**
 * Description: 微服务-动态配置-添加属性
 * Summary: 添加属性
 */
async function addDdcsAttribute(request: AddDdcsAttributeRequest): AddDdcsAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDdcsAttributeEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-添加属性
 * Summary: 添加属性
 */
async function addDdcsAttributeEx(request: AddDdcsAttributeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDdcsAttributeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.ddcs.attribute.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDdcsAttributeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  appName: string(name='app_name'),
  attributeName: string(name='attribute_name'),
  instanceId: string(name='instance_id'),
  newAttributeName?: string(name='new_attribute_name'),
  newName?: string(name='new_name'),
  region: string(name='region'),
  resourceId: string(name='resource_id'),
}

model UpdateDdcsAttributeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-动态配置-编辑属性
 * Summary: 编辑属性
 */
async function updateDdcsAttribute(request: UpdateDdcsAttributeRequest): UpdateDdcsAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDdcsAttributeEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-编辑属性
 * Summary: 编辑属性
 */
async function updateDdcsAttributeEx(request: UpdateDdcsAttributeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDdcsAttributeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.ddcs.attribute.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDdcsAttributeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  appName: string(name='app_name'),
  attributeName: string(name='attribute_name'),
  instanceId: string(name='instance_id'),
  region: string(name='region'),
  resourceId: string(name='resource_id'),
}

model DeleteDdcsAttributeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-动态配置-删除属性
 * Summary: 删除属性
 */
async function deleteDdcsAttribute(request: DeleteDdcsAttributeRequest): DeleteDdcsAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDdcsAttributeEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-删除属性
 * Summary: 删除属性
 */
async function deleteDdcsAttributeEx(request: DeleteDdcsAttributeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDdcsAttributeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.ddcs.attribute.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SearchDdcsResourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  appName?: string(name='app_name'),
  instanceId: string(name='instance_id'),
  keyword?: string(name='keyword'),
  pageSize?: integer(name='page_size'),
  start?: integer(name='start'),
}

model SearchDdcsResourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  current?: integer(name='current'),
  data?: [ Resource ](name='data'),
  pageSize?: integer(name='page_size'),
  // 请求执行是否成功
  success: boolean(name='success'),
  total?: integer(name='total'),
}

/**
 * Description: 微服务-动态配置-查找动态配置
 * Summary: 查找动态资源
 */
async function searchDdcsResource(request: SearchDdcsResourceRequest): SearchDdcsResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return searchDdcsResourceEx(request, headers, runtime);
}

/**
 * Description: 微服务-动态配置-查找动态配置
 * Summary: 查找动态资源
 */
async function searchDdcsResourceEx(request: SearchDdcsResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SearchDdcsResourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.ddcs.resource.search', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDssTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  cron: string(name='cron'),
  instanceId: string(name='instance_id'),
  name: string(name='name'),
  system: string(name='system'),
}

model AddDssTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-分布式调度任务-添加调度任务
 * Summary: 添加调度任务
 */
async function addDssTask(request: AddDssTaskRequest): AddDssTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDssTaskEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-添加调度任务
 * Summary: 添加调度任务
 */
async function addDssTaskEx(request: AddDssTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDssTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.dss.task.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDssTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  instanceId: string(name='instance_id'),
  name: string(name='name'),
  newCron?: string(name='new_cron'),
  newName?: string(name='new_name'),
  newSystem?: string(name='new_system'),
}

model UpdateDssTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-分布式调度任务-编辑调度任务
 * Summary: 编辑调度任务
 */
async function updateDssTask(request: UpdateDssTaskRequest): UpdateDssTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDssTaskEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-编辑调度任务
 * Summary: 编辑调度任务
 */
async function updateDssTaskEx(request: UpdateDssTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDssTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.dss.task.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDssTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  instanceId: string(name='instance_id'),
  name: string(name='name'),
}

model DeleteDssTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-分布式调度任务-删除任务
 * Summary: 删除调度任务
 */
async function deleteDssTask(request: DeleteDssTaskRequest): DeleteDssTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDssTaskEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-删除任务
 * Summary: 删除调度任务
 */
async function deleteDssTaskEx(request: DeleteDssTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDssTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.dss.task.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SearchDssTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  instanceId: string(name='instance_id'),
  name?: string(name='name'),
  pageSize?: integer(name='page_size'),
  start?: integer(name='start'),
  system?: string(name='system'),
}

model SearchDssTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  data?: [ Task ](name='data'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-分布式调度任务-查找调度任务
 * Summary: 查找调度任务
 */
async function searchDssTask(request: SearchDssTaskRequest): SearchDssTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return searchDssTaskEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-查找调度任务
 * Summary: 查找调度任务
 */
async function searchDssTaskEx(request: SearchDssTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SearchDssTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.dss.task.search', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDssStrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  instanceId?: string(name='instance_id'),
  name?: string(name='name'),
}

model QueryDssStrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  strategies?: [ Strategy ](name='strategies'),
}

/**
 * Description: 微服务-分布式调度任务-查找调度任务策略(独占版)
 * Summary: 通过策略名称查询策略
 */
async function queryDssStrategy(request: QueryDssStrategyRequest): QueryDssStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDssStrategyEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-查找调度任务策略(独占版)
 * Summary: 通过策略名称查询策略
 */
async function queryDssStrategyEx(request: QueryDssStrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDssStrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.dss.strategy.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDssScheduleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  id: string(name='id'),
  instanceId?: string(name='instance_id'),
}

model DeleteDssScheduleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 微服务-分布式调度任务-删除任务(独占版)
 * Summary: 删除调度任务
 */
async function deleteDssSchedule(request: DeleteDssScheduleRequest): DeleteDssScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDssScheduleEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-删除任务(独占版)
 * Summary: 删除调度任务
 */
async function deleteDssScheduleEx(request: DeleteDssScheduleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDssScheduleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.dss.schedule.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecuteDssSwitchoverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  destCell: string(name='dest_cell'),
  instanceId: string(name='instance_id'),
  sourceCell: string(name='source_cell'),
}

model ExecuteDssSwitchoverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否达到预期切换状态
  success: boolean(name='success'),
}

/**
 * Description: 微服务-分布式调度任务-执行单元切换
 * Summary: 定时任务执行单元切换
 */
async function executeDssSwitchover(request: ExecuteDssSwitchoverRequest): ExecuteDssSwitchoverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return executeDssSwitchoverEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-执行单元切换
 * Summary: 定时任务执行单元切换
 */
async function executeDssSwitchoverEx(request: ExecuteDssSwitchoverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecuteDssSwitchoverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.dss.switchover.execute', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelDssSwitchoverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  destCell: string(name='dest_cell'),
  instanceId: string(name='instance_id'),
  sourceCell: string(name='source_cell'),
}

model CancelDssSwitchoverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求执行是否成功
  success: boolean(name='success'),
}

/**
 * Description: 微服务-分布式调度任务-取消单元切换
 * Summary: 定时任务取消单元切换
 */
async function cancelDssSwitchover(request: CancelDssSwitchoverRequest): CancelDssSwitchoverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelDssSwitchoverEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-取消单元切换
 * Summary: 定时任务取消单元切换
 */
async function cancelDssSwitchoverEx(request: CancelDssSwitchoverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelDssSwitchoverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.dss.switchover.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDssSwitchoverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  instanceId: string(name='instance_id'),
}

model QueryDssSwitchoverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 单元切换状态列表
  actions: [ SwitchoverAction ](name='actions'),
}

/**
 * Description: 微服务-分布式调度任务-查询单元切换状态
 * Summary: 查询定时任务单元切换状态
 */
async function queryDssSwitchover(request: QueryDssSwitchoverRequest): QueryDssSwitchoverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDssSwitchoverEx(request, headers, runtime);
}

/**
 * Description: 微服务-分布式调度任务-查询单元切换状态
 * Summary: 查询定时任务单元切换状态
 */
async function queryDssSwitchoverEx(request: QueryDssSwitchoverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDssSwitchoverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.dss.switchover.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model LogoutRegistryServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  instanceId: string(name='instance_id'),
  // 服务器 IP
  serverIps: [ string ](name='server_ips'),
}

model LogoutRegistryServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 微服务-服务注册中心-注销服务
 * Summary: 注销服务
 */
async function logoutRegistryService(request: LogoutRegistryServiceRequest): LogoutRegistryServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return logoutRegistryServiceEx(request, headers, runtime);
}

/**
 * Description: 微服务-服务注册中心-注销服务
 * Summary: 注销服务
 */
async function logoutRegistryServiceEx(request: LogoutRegistryServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): LogoutRegistryServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.ms.registry.service.logout', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OnlineRegistryServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance_id
  instanceId: string(name='instance_id'),
  // server_ips
  serverIps: [ string ](name='server_ips'),
}

model OnlineRegistryServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 微服务-服务注册中心-服务挂流
 * Summary: 服务挂流
 */
async function onlineRegistryService(request: OnlineRegistryServiceRequest): OnlineRegistryServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return onlineRegistryServiceEx(request, headers, runtime);
}

/**
 * Description: 微服务-服务注册中心-服务挂流
 * Summary: 服务挂流
 */
async function onlineRegistryServiceEx(request: OnlineRegistryServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OnlineRegistryServiceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.registry.service.online', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofaOspInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  tenant: string(name='tenant'),
  workspace: string(name='workspace'),
}

model ListSofaOspInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实例标识列表
  instances: [ string ](name='instances'),
}

/**
 * Description: 查询实例标识
 * Summary: 查询实例标识
 */
async function listSofaOspInstance(request: ListSofaOspInstanceRequest): ListSofaOspInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofaOspInstanceEx(request, headers, runtime);
}

/**
 * Description: 查询实例标识
 * Summary: 查询实例标识
 */
async function listSofaOspInstanceEx(request: ListSofaOspInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofaOspInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.instance.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSofaOspCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  cell: string(name='cell'),
  instanceId: string(name='instance_id'),
}

model AddSofaOspCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增某个实例下的单元
 * Summary: 新增单元
 */
async function addSofaOspCell(request: AddSofaOspCellRequest): AddSofaOspCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSofaOspCellEx(request, headers, runtime);
}

/**
 * Description: 新增某个实例下的单元
 * Summary: 新增单元
 */
async function addSofaOspCellEx(request: AddSofaOspCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSofaOspCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.cell.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofaOspCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  cell: string(name='cell'),
  instanceId: string(name='instance_id'),
}

model DeleteSofaOspCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除某个实例下的单元
 * Summary: 删除单元
 */
async function deleteSofaOspCell(request: DeleteSofaOspCellRequest): DeleteSofaOspCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofaOspCellEx(request, headers, runtime);
}

/**
 * Description: 删除某个实例下的单元
 * Summary: 删除单元
 */
async function deleteSofaOspCellEx(request: DeleteSofaOspCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofaOspCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.cell.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofaOspCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  instanceId: string(name='instance_id'),
}

model QuerySofaOspCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前生效的单元列表
  cells: [ string ](name='cells'),
}

/**
 * Description: 查询某个实例下的单元列表
 * Summary: 查询单元列表
 */
async function querySofaOspCell(request: QuerySofaOspCellRequest): QuerySofaOspCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofaOspCellEx(request, headers, runtime);
}

/**
 * Description: 查询某个实例下的单元列表
 * Summary: 查询单元列表
 */
async function querySofaOspCellEx(request: QuerySofaOspCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofaOspCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.cell.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app name
  appName?: string(name='app_name'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // num of page
  pageNum: long(name='page_num'),
  // size of page
  pageSize?: string(name='page_size'),
}

model QueryServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Page number
  pageNum?: long(name='page_num'),
  // Page size
  pageSize?: long(name='page_size'),
  // Result of service records.
  services?: [ ServiceRecord ](name='services'),
  // Total item number
  totalCount?: long(name='total_count'),
}

/**
 * Description: Query service records.
 * Summary: query service record
 */
async function queryService(request: QueryServiceRequest): QueryServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryServiceEx(request, headers, runtime);
}

/**
 * Description: Query service records.
 * Summary: query service record
 */
async function queryServiceEx(request: QueryServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryServiceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.service.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryServicePublisherRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // app name
  dataId?: string(name='data_id'),
  // num of page
  pageNum: integer(name='page_num'),
  // size of page
  pageSize?: string(name='page_size'),
}

model QueryServicePublisherResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Result of service publishers.
  publishers?: [ ServicePublisher ](name='publishers'),
  // Page number
  pageNum?: integer(name='page_num'),
  // Page size
  pageSize?: integer(name='page_size'),
  // Total item number
  totalCount?: integer(name='total_count'),
}

/**
 * Description: Query service publishers.
 * Summary: query service publishers
 */
async function queryServicePublisher(request: QueryServicePublisherRequest): QueryServicePublisherResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryServicePublisherEx(request, headers, runtime);
}

/**
 * Description: Query service publishers.
 * Summary: query service publishers
 */
async function queryServicePublisherEx(request: QueryServicePublisherRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryServicePublisherResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.service.publisher.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryServiceSubscriberRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // app name
  dataId?: string(name='data_id'),
  // num of page
  pageNum: integer(name='page_num'),
  // size of page
  pageSize?: string(name='page_size'),
}

model QueryServiceSubscriberResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Result of service subcribers.
  subscribers?: [ ServiceSubscriber ](name='subscribers'),
  // Page number
  pageNum?: integer(name='page_num'),
  // Page size
  pageSize?: integer(name='page_size'),
  // Total item number
  totalCount?: integer(name='total_count'),
}

/**
 * Description: Query service subscribers.
 * Summary: query service subscribers
 */
async function queryServiceSubscriber(request: QueryServiceSubscriberRequest): QueryServiceSubscriberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryServiceSubscriberEx(request, headers, runtime);
}

/**
 * Description: Query service subscribers.
 * Summary: query service subscribers
 */
async function queryServiceSubscriberEx(request: QueryServiceSubscriberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryServiceSubscriberResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.service.subscriber.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddServiceClientRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // 服务器 IP 列表，多个 IP 间以英文逗号分隔
  serverIps: string(name='server_ips'),
  // Client operation type: (logout)
  operationType?: string(name='operation_type'),
}

model AddServiceClientResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: Client operation, like logout all services published from the client.
 * Summary: Client operation
 */
async function addServiceClient(request: AddServiceClientRequest): AddServiceClientResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addServiceClientEx(request, headers, runtime);
}

/**
 * Description: Client operation, like logout all services published from the client.
 * Summary: Client operation
 */
async function addServiceClientEx(request: AddServiceClientRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddServiceClientResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.service.client.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDdcsResourcesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName?: string(name='app_name'),
  // 系统字段：环境实例 ID
  instanceId: string(name='instance_id'),
  // 资源 ID 模糊查询关键字
  keyword?: string(name='keyword'),
  // 分页参数，第几页
  pageNum: long(name='page_num'),
  // 分页参数，分页大小
  pageSize?: string(name='page_size'),
}

model QueryDdcsResourcesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页参数，第几页
  pageNum?: long(name='page_num'),
  // 分页参数，分页大小
  pageSize?: long(name='page_size'),
  // 模糊查询资源结果
  resources?: [ Resource ](name='resources'),
  // 满足模糊查询条件的结果总条数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 根据应用名或者资源 ID 模糊查询对应的资源元信息。
 * Summary: 模糊查询资源
 */
async function queryDdcsResources(request: QueryDdcsResourcesRequest): QueryDdcsResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDdcsResourcesEx(request, headers, runtime);
}

/**
 * Description: 根据应用名或者资源 ID 模糊查询对应的资源元信息。
 * Summary: 模糊查询资源
 */
async function queryDdcsResourcesEx(request: QueryDdcsResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDdcsResourcesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.resources.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDdcsDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 属性自增长 ID
  attributeId: long(name='attribute_id'),
  // 需要发布的单元列表，英文逗号隔开，为空表示推送到所有单元
  cells?: string(name='cells'),
  // 推送的属性值
  data?: string(name='data'),
  // 系统字段：环境实例 ID
  // 
  instanceId: string(name='instance_id'),
  // 操作人
  operator?: string(name='operator'),
}

model AddDdcsDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 核心推送属性值接口，推送后所有订阅该属性的客户端都会在一秒内更新内存值，并回调属性对应的 setter 方法。此推送方式是持久化推送，即动态配置服务端会在数据库里存储属性值，客户端在重启的时候能够获取到上一次推送值。
 * Summary: 推送属性值
 */
async function addDdcsData(request: AddDdcsDataRequest): AddDdcsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDdcsDataEx(request, headers, runtime);
}

/**
 * Description: 核心推送属性值接口，推送后所有订阅该属性的客户端都会在一秒内更新内存值，并回调属性对应的 setter 方法。此推送方式是持久化推送，即动态配置服务端会在数据库里存储属性值，客户端在重启的时候能够获取到上一次推送值。
 * Summary: 推送属性值
 */
async function addDdcsDataEx(request: AddDdcsDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDdcsDataResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.data.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDdcsResourcesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName: string(name='app_name'),
  // 资源的属性信息，以 JSON 字符串格式传入
  attributes?: string(name='attributes'),
  // 资源描述信息
  desc: string(name='desc'),
  // 系统字段：环境实例 ID
  // 
  instanceId: string(name='instance_id'),
  // 资源类所属的域
  region: string(name='region'),
  // 资源 ID，类似于配置文件的文件名
  resourceId: string(name='resource_id'),
}

model AddDdcsResourcesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建成功的资源信息
  resource?: Resource(name='resource'),
}

/**
 * Description: 新增资源元数据。资源相当于文件的概念，一个资源下可以有多个属性。
 * Summary: 新增资源元数据
 */
async function addDdcsResources(request: AddDdcsResourcesRequest): AddDdcsResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDdcsResourcesEx(request, headers, runtime);
}

/**
 * Description: 新增资源元数据。资源相当于文件的概念，一个资源下可以有多个属性。
 * Summary: 新增资源元数据
 */
async function addDdcsResourcesEx(request: AddDdcsResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDdcsResourcesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.resources.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDdcsResourcesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName: string(name='app_name'),
  // 资源的属性信息，以 JSON 字符串格式传入
  attributes?: string(name='attributes'),
  // 资源描述信息
  desc: string(name='desc'),
  // 更新的资源自增长 ID
  id: long(name='id'),
  // 系统字段：环境实例 ID
  instanceId: string(name='instance_id'),
  // 资源搜索的域
  region: string(name='region'),
  // 资源唯一标识
  resourceId: string(name='resource_id'),
  // 是否全量更新属性，默认为 false
  updateAttribute?: boolean(name='update_attribute'),
}

model UpdateDdcsResourcesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新资源元信息。update_attribute 为 false 时，则只更新资源元信息，不会更新属性信息。update_attribute 为 true 时，会同时更新资源元信息以及全量覆盖所有属性。
 * Summary: 更新资源元信息
 */
async function updateDdcsResources(request: UpdateDdcsResourcesRequest): UpdateDdcsResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDdcsResourcesEx(request, headers, runtime);
}

/**
 * Description: 更新资源元信息。update_attribute 为 false 时，则只更新资源元信息，不会更新属性信息。update_attribute 为 true 时，会同时更新资源元信息以及全量覆盖所有属性。
 * Summary: 更新资源元信息
 */
async function updateDdcsResourcesEx(request: UpdateDdcsResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDdcsResourcesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.resources.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDdcsResourcesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资源自增长 ID
  id: long(name='id'),
  // 系统字段：环境实例 ID
  instanceId: string(name='instance_id'),
}

model DeleteDdcsResourcesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 根据资源 ID 删除对应资源，删除资源会同时删除该资源下所有的属性信息。
 * Summary: 根据资源ID删除资源
 */
async function deleteDdcsResources(request: DeleteDdcsResourcesRequest): DeleteDdcsResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDdcsResourcesEx(request, headers, runtime);
}

/**
 * Description: 根据资源 ID 删除对应资源，删除资源会同时删除该资源下所有的属性信息。
 * Summary: 根据资源ID删除资源
 */
async function deleteDdcsResourcesEx(request: DeleteDdcsResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDdcsResourcesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.resources.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDdcsResourcesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资源自增长 ID
  id: long(name='id'),
  // 系统字段：环境实例 ID
  instanceId: string(name='instance_id'),
}

model GetDdcsResourcesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 资源信息
  resource?: Resource(name='resource'),
}

/**
 * Description: 根据资源 ID 获取对应的资源元信息。
 * Summary: 根据资源自增长 ID 获取资源元信息
 */
async function getDdcsResources(request: GetDdcsResourcesRequest): GetDdcsResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDdcsResourcesEx(request, headers, runtime);
}

/**
 * Description: 根据资源 ID 获取对应的资源元信息。
 * Summary: 根据资源自增长 ID 获取资源元信息
 */
async function getDdcsResourcesEx(request: GetDdcsResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDdcsResourcesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.resources.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDdcsAttributesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 属性名称
  attributeName: string(name='attribute_name'),
  // 属性描述信息
  desc?: string(name='desc'),
  // 环境实例 ID
  instanceId: string(name='instance_id'),
  // 所属的资源自增长 ID
  resourceId: long(name='resource_id'),
}

model AddDdcsAttributesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 添加成功的属性结构体
  attribute?: Attribute(name='attribute'),
}

/**
 * Description: 新增属性元信息。属性相当于一个配置文件配置项的概念，只有添加属性之后，才能对属性进行推送。
 * Summary: 新增属性元信息
 */
async function addDdcsAttributes(request: AddDdcsAttributesRequest): AddDdcsAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDdcsAttributesEx(request, headers, runtime);
}

/**
 * Description: 新增属性元信息。属性相当于一个配置文件配置项的概念，只有添加属性之后，才能对属性进行推送。
 * Summary: 新增属性元信息
 */
async function addDdcsAttributesEx(request: AddDdcsAttributesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDdcsAttributesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.attributes.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDdcsAttributesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 属性名称
  attributeName: string(name='attribute_name'),
  // 属性描述信息
  desc?: string(name='desc'),
  // 属性自增长 ID
  id: long(name='id'),
  // 系统字段：环境实例 ID
  instanceId: string(name='instance_id'),
}

model UpdateDdcsAttributesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 根据属性 ID 更新属性元信息。
 * Summary: 更新属性元信息
 */
async function updateDdcsAttributes(request: UpdateDdcsAttributesRequest): UpdateDdcsAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDdcsAttributesEx(request, headers, runtime);
}

/**
 * Description: 根据属性 ID 更新属性元信息。
 * Summary: 更新属性元信息
 */
async function updateDdcsAttributesEx(request: UpdateDdcsAttributesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDdcsAttributesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.attributes.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDdcsAttributesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 属性自增长 ID
  id: long(name='id'),
  // 系统字段：环境实例 ID
  instanceId: string(name='instance_id'),
}

model DeleteDdcsAttributesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 根据属性 ID 删除对应的属性元信息。删除属性元信息，属性值不会删除。
 * Summary: 删除属性
 */
async function deleteDdcsAttributes(request: DeleteDdcsAttributesRequest): DeleteDdcsAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDdcsAttributesEx(request, headers, runtime);
}

/**
 * Description: 根据属性 ID 删除对应的属性元信息。删除属性元信息，属性值不会删除。
 * Summary: 删除属性
 */
async function deleteDdcsAttributesEx(request: DeleteDdcsAttributesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDdcsAttributesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.attributes.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDdcsAttributesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 属性自增长 ID
  id: long(name='id'),
  // 系统字段：环境实例 ID
  instanceId: string(name='instance_id'),
}

model GetDdcsAttributesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 属性信息
  attribute?: Attribute(name='attribute'),
}

/**
 * Description: 根据属性 ID 获取对应的属性信息。
 * Summary: 获取属性
 */
async function getDdcsAttributes(request: GetDdcsAttributesRequest): GetDdcsAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDdcsAttributesEx(request, headers, runtime);
}

/**
 * Description: 根据属性 ID 获取对应的属性信息。
 * Summary: 获取属性
 */
async function getDdcsAttributesEx(request: GetDdcsAttributesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDdcsAttributesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.attributes.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDdcsAttributesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName: string(name='app_name'),
  // 属性名称
  attributeName: string(name='attribute_name'),
  // 系统字段：环境实例 ID
  instanceId: string(name='instance_id'),
  // 资源所属域
  region: string(name='region'),
  // 资源 ID，类似于文件名
  resourceId: string(name='resource_id'),
}

model QueryDdcsAttributesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 属性信息
  attribute?: Attribute(name='attribute'),
}

/**
 * Description: 根据域,、应用名、资源 ID、属性名称获取属性详细信息，包含属性 ID。其它接口都依赖此接口获取属性 ID。
 * Summary: 根据资源和属性名称获取属性信息
 */
async function queryDdcsAttributes(request: QueryDdcsAttributesRequest): QueryDdcsAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDdcsAttributesEx(request, headers, runtime);
}

/**
 * Description: 根据域,、应用名、资源 ID、属性名称获取属性详细信息，包含属性 ID。其它接口都依赖此接口获取属性 ID。
 * Summary: 根据资源和属性名称获取属性信息
 */
async function queryDdcsAttributesEx(request: QueryDdcsAttributesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDdcsAttributesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.attributes.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDdsJobRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // job id
  id: integer(name='id'),
  // middleware instance id
  instanceId: string(name='instance_id'),
}

model GetDdsJobResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务信息
  job?: Job(name='job'),
}

/**
 * Description: query job by specific id
 * Summary: query job
 */
async function getDdsJob(request: GetDdsJobRequest): GetDdsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDdsJobEx(request, headers, runtime);
}

/**
 * Description: query job by specific id
 * Summary: query job
 */
async function getDdsJobEx(request: GetDdsJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDdsJobResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.dds.job.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDdsJobRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // 任务所属APP
  app: string(name='app'),
  // 任务名字
  name: string(name='name'),
  // 任务CRON表达式
  cron: string(name='cron'),
  // 任务分片数量
  shardingCount?: integer(name='sharding_count'),
  // 任务自定义参数
  customParams?: [ string ](name='custom_params'),
  // 任务状态
  status?: string(name='status'),
  // 任务描述信息
  des?: string(name='des'),
}

model AddDdsJobResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作返回信息
  job?: Job(name='job'),
}

/**
 * Description: add job
 * Summary: add job
 */
async function addDdsJob(request: AddDdsJobRequest): AddDdsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDdsJobEx(request, headers, runtime);
}

/**
 * Description: add job
 * Summary: add job
 */
async function addDdsJobEx(request: AddDdsJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDdsJobResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.dds.job.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDdsJobRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // job id
  id: integer(name='id'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // 任务CRON表达式
  cron: string(name='cron'),
  // 任务分片数量
  shardingCount?: integer(name='sharding_count'),
  // 任务自定义参数
  customParams?: [ string ](name='custom_params'),
  // 任务描述信息
  des?: string(name='des'),
}

model UpdateDdsJobResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作返回信息
  job?: Job(name='job'),
}

/**
 * Description: modify job by specific id
 * Summary: modify job
 */
async function updateDdsJob(request: UpdateDdsJobRequest): UpdateDdsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDdsJobEx(request, headers, runtime);
}

/**
 * Description: modify job by specific id
 * Summary: modify job
 */
async function updateDdsJobEx(request: UpdateDdsJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDdsJobResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.dds.job.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDdsJobRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // job id
  id: integer(name='id'),
  // middleware instance id
  instanceId: string(name='instance_id'),
}

model DeleteDdsJobResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: delete job by specific id
 * Summary: delete job
 */
async function deleteDdsJob(request: DeleteDdsJobRequest): DeleteDdsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDdsJobEx(request, headers, runtime);
}

/**
 * Description: delete job by specific id
 * Summary: delete job
 */
async function deleteDdsJobEx(request: DeleteDdsJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDdsJobResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.dds.job.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDdsJobStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // job id
  id: integer(name='id'),
  // 任务状态
  status: string(name='status'),
}

model UpdateDdsJobStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: update status by specific id
 * Summary: update status
 */
async function updateDdsJobStatus(request: UpdateDdsJobStatusRequest): UpdateDdsJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDdsJobStatusEx(request, headers, runtime);
}

/**
 * Description: update status by specific id
 * Summary: update status
 */
async function updateDdsJobStatusEx(request: UpdateDdsJobStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDdsJobStatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.dds.job.status.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDdcsGraydataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 属性自增长 ID，可以通过查询属性接口获取 ID
  attributeId: long(name='attribute_id'),
  // 属性推送值
  data?: string(name='data'),
  // 灰度推送的机器列表，多个 IP 之间英文逗号隔开
  hosts: string(name='hosts'),
  // 系统字段：环境实例 ID
  instanceId: string(name='instance_id'),
  // 操作人
  operator?: string(name='operator'),
}

model AddDdcsGraydataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 推送结果列表
  pushResult?: [ GrayPublishResultItem ](name='push_result'),
}

/**
 * Description: 按 IP 灰度推送属性值。
 * Summary: 按IP灰度推送属性值
 */
async function addDdcsGraydata(request: AddDdcsGraydataRequest): AddDdcsGraydataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDdcsGraydataEx(request, headers, runtime);
}

/**
 * Description: 按 IP 灰度推送属性值。
 * Summary: 按IP灰度推送属性值
 */
async function addDdcsGraydataEx(request: AddDdcsGraydataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDdcsGraydataResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.graydata.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDdcsDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 属性自增长 ID，可以通过查询属性接口获取 ID
  attributeId: long(name='attribute_id'),
  // 系统字段：环境实例 ID
  instanceId: string(name='instance_id'),
}

model QueryDdcsDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询推送值结果，数组中每一项表示具体的单元，DEFAULT_ZONE 表示所有单元。
  queryResult?: [ PublishDataItem ](name='query_result'),
}

/**
 * Description: 查询属性最后一次的推送值。
 * Summary: 查询属性最后一次推送值
 */
async function queryDdcsData(request: QueryDdcsDataRequest): QueryDdcsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDdcsDataEx(request, headers, runtime);
}

/**
 * Description: 查询属性最后一次的推送值。
 * Summary: 查询属性最后一次推送值
 */
async function queryDdcsDataEx(request: QueryDdcsDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDdcsDataResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.data.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDdsJobsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // 任务所属APP
  app?: string(name='app'),
  // 任务名字
  name?: string(name='name'),
  // num of page
  pageNum: integer(name='page_num'),
  // size of page
  pageSize?: string(name='page_size'),
}

model QueryDdsJobsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务信息
  jobs?: [ Job ](name='jobs'),
  // Page number
  pageNum?: integer(name='page_num'),
  // Page size
  pageSize?: integer(name='page_size'),
  // Total item number
  totalCount?: integer(name='total_count'),
}

/**
 * Description: query jobs
 * Summary: query jobs
 */
async function queryDdsJobs(request: QueryDdsJobsRequest): QueryDdsJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDdsJobsEx(request, headers, runtime);
}

/**
 * Description: query jobs
 * Summary: query jobs
 */
async function queryDdsJobsEx(request: QueryDdsJobsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDdsJobsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.dds.jobs.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDdcsClientvalueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 属性自增长 ID，可以通过查询属性接口获取 ID
  attributeId: long(name='attribute_id'),
  // 系统字段：环境实例 ID
  instanceId: string(name='instance_id'),
  // 查询的 IP 列表，英文逗号隔开
  ips: string(name='ips'),
}

model QueryDdcsClientvalueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 客户端信息，包含内存值
  clients?: [ ClientValue ](name='clients'),
}

/**
 * Description: 查询属性下指定客户端的内存值。
 * Summary: 查询属性下指定客户端的内存值
 */
async function queryDdcsClientvalue(request: QueryDdcsClientvalueRequest): QueryDdcsClientvalueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDdcsClientvalueEx(request, headers, runtime);
}

/**
 * Description: 查询属性下指定客户端的内存值。
 * Summary: 查询属性下指定客户端的内存值
 */
async function queryDdcsClientvalueEx(request: QueryDdcsClientvalueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDdcsClientvalueResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.clientvalue.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDdcsPushhistoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要查询的 dataId，可不填。
  dataId?: string(name='data_id'),
  // 查询的推送记录的介绍时间，值为 1970到现在的毫秒数，用毫秒数为了避免时区问题
  endTime?: long(name='end_time'),
  // instance id
  instanceId: string(name='instance_id'),
  // 限时返回条数
  size?: long(name='size'),
  // 从哪个id开始查询，不建议使用
  startId?: long(name='start_id'),
  // 查询的开始时间，值为 1970到现在的毫秒数，用毫秒数为了避免时区问题
  startTime?: long(name='start_time'),
}

model QueryDdcsPushhistoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 推送记录列表
  history?: [ DDCSPushHistoryItem ](name='history'),
}

/**
 * Description: 查询属性推送历史
 * Summary: 查询属性推送历史
 */
async function queryDdcsPushhistory(request: QueryDdcsPushhistoryRequest): QueryDdcsPushhistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDdcsPushhistoryEx(request, headers, runtime);
}

/**
 * Description: 查询属性推送历史
 * Summary: 查询属性推送历史
 */
async function queryDdcsPushhistoryEx(request: QueryDdcsPushhistoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDdcsPushhistoryResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.pushhistory.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDssZoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例Id
  instanceId: string(name='instance_id'),
}

model QueryDssZoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 所有zone信息
  data?: [ string ](name='data'),
}

/**
 * Description: LDC模式部署获取所有zone
 * Summary: LDC模式部署获取所有zone
 */
async function queryDssZone(request: QueryDssZoneRequest): QueryDssZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDssZoneEx(request, headers, runtime);
}

/**
 * Description: LDC模式部署获取所有zone
 * Summary: LDC模式部署获取所有zone
 */
async function queryDssZoneEx(request: QueryDssZoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDssZoneResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.dss.zone.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RollbackDdcsDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 当前租户 instanceId
  instanceId: string(name='instance_id'),
  // 回滚的属性的id
  attributeId: long(name='attribute_id'),
  // 再需要强制回滚的时候，需要通过指定 uniqueId 来强制回滚哪一次推送
  uniqueId?: string(name='unique_id'),
  // 默认情况下，只能回滚最后一次推送。
  // 
  // 但是通过 force_rollback + unique_id 可以强制指定回滚某一次推送。风险较高，不建议使用。
  forceRollback?: boolean(name='force_rollback'),
  // 回滚操作人
  operator?: string(name='operator'),
}

model RollbackDdcsDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 通过 OpenAPI 回滚最后一次推送，也可以通过 uniqueId+forceRollback 回滚某一次推送。
由于回滚历史版本风险非常高，不建议使用，只使用回滚最后一次推送。
 * Summary: 回滚最近一次动态配置推送
 */
async function rollbackDdcsData(request: RollbackDdcsDataRequest): RollbackDdcsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return rollbackDdcsDataEx(request, headers, runtime);
}

/**
 * Description: 通过 OpenAPI 回滚最后一次推送，也可以通过 uniqueId+forceRollback 回滚某一次推送。
由于回滚历史版本风险非常高，不建议使用，只使用回滚最后一次推送。
 * Summary: 回滚最近一次动态配置推送
 */
async function rollbackDdcsDataEx(request: RollbackDdcsDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RollbackDdcsDataResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.ddcs.data.rollback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgAuthrulegroupsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ListSgAuthrulegroupsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 鉴权规则组，黑白名单
  authRuleGroups?: [ AuthRuleGroupVO ](name='auth_rule_groups'),
}

/**
 * Description: 根据服务接口查询服务鉴权规则
 * Summary: 根据服务接口查询服务鉴权规则
 */
async function listSgAuthrulegroups(request: ListSgAuthrulegroupsRequest): ListSgAuthrulegroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgAuthrulegroupsEx(request, headers, runtime);
}

/**
 * Description: 根据服务接口查询服务鉴权规则
 * Summary: 根据服务接口查询服务鉴权规则
 */
async function listSgAuthrulegroupsEx(request: ListSgAuthrulegroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgAuthrulegroupsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrulegroups.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgFormconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户instanceId
  instanceId: string(name='instance_id'),
}

model QuerySgFormconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 所有配置信息
  authRuleConfig?: AuthRuleConfig(name='auth_rule_config'),
}

/**
 * Description: 查询表单元数据，支持哪些鉴权规则
 * Summary: 查询表单元数据
 */
async function querySgFormconfig(request: QuerySgFormconfigRequest): QuerySgFormconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgFormconfigEx(request, headers, runtime);
}

/**
 * Description: 查询表单元数据，支持哪些鉴权规则
 * Summary: 查询表单元数据
 */
async function querySgFormconfigEx(request: QuerySgFormconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgFormconfigResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.formconfig.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitSgAuthrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务鉴权黑白名单id
  authGroupId: long(name='auth_group_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ReinitSgAuthrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 清空黑白名单下所有鉴权规则
 * Summary: 清空黑白名单
 */
async function reinitSgAuthrules(request: ReinitSgAuthrulesRequest): ReinitSgAuthrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitSgAuthrulesEx(request, headers, runtime);
}

/**
 * Description: 清空黑白名单下所有鉴权规则
 * Summary: 清空黑白名单
 */
async function reinitSgAuthrulesEx(request: ReinitSgAuthrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitSgAuthrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrules.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveSgAuthrulegroupsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // {"type":"WHITELIST","enabled":0,"instanceId":"000001","dataId":"com.alipay.antcloud.drmdata.facade.PushFacade:1.0@DEFAULT","rules":[{"ruleItems":[{"type":"SYSTEM","operation":"EQUAL","field":"source.application.id","value":"app1"}],"enabled":0,"name":"rule1"}]}
  authRuleGroup: string(name='auth_rule_group'),
  // 服务鉴权接口id
  dataId: string(name='data_id'),
  // 租户instanceId
  instanceId: string(name='instance_id'),
}

model SaveSgAuthrulegroupsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 一个服务接口的白名单和黑名单
  authRuleGroups?: [ AuthRuleGroup ](name='auth_rule_groups'),
}

/**
 * Description: 创建服务鉴权规则
 * Summary: 创建服务鉴权规则
 */
async function saveSgAuthrulegroups(request: SaveSgAuthrulegroupsRequest): SaveSgAuthrulegroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveSgAuthrulegroupsEx(request, headers, runtime);
}

/**
 * Description: 创建服务鉴权规则
 * Summary: 创建服务鉴权规则
 */
async function saveSgAuthrulegroupsEx(request: SaveSgAuthrulegroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveSgAuthrulegroupsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrulegroups.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncSgServicepublishersRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称
  appName?: string(name='app_name'),
  // 服务发布数据
  data?: string(name='data'),
  // 服务唯一ID
  dataId: string(name='data_id'),
  // 分组
  group?: string(name='group'),
  // 金融云实例ID
  instanceId?: string(name='instance_id'),
  // 发布者IP
  ip?: string(name='ip'),
  // 进程ID
  processId: string(name='process_id'),
  // 数据产生时间戳
  timestamp?: long(name='timestamp'),
  // 逻辑机房
  zone?: string(name='zone'),
}

model SyncSgServicepublishersResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 微服务-同步服务发布者信息
 * Summary: 同步服务发布者信息
 */
async function syncSgServicepublishers(request: SyncSgServicepublishersRequest): SyncSgServicepublishersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncSgServicepublishersEx(request, headers, runtime);
}

/**
 * Description: 微服务-同步服务发布者信息
 * Summary: 同步服务发布者信息
 */
async function syncSgServicepublishersEx(request: SyncSgServicepublishersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncSgServicepublishersResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.servicepublishers.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncSgServicesubscribersRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 进程ID
  processId: string(name='process_id'),
  // 服务唯一ID
  dataId: string(name='data_id'),
  // 分组
  group?: string(name='group'),
  // 金融云实例ID
  instanceId?: string(name='instance_id'),
  // 应用名称
  appName?: string(name='app_name'),
  // 逻辑机房
  zone?: string(name='zone'),
  // 订阅者IP
  ip?: string(name='ip'),
  // 订阅维度
  scope?: string(name='scope'),
  // 数据产生时间戳
  timestamp?: long(name='timestamp'),
}

model SyncSgServicesubscribersResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 微服务-同步服务发布者信息
 * Summary: 同步服务发布者信息
 */
async function syncSgServicesubscribers(request: SyncSgServicesubscribersRequest): SyncSgServicesubscribersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncSgServicesubscribersEx(request, headers, runtime);
}

/**
 * Description: 微服务-同步服务发布者信息
 * Summary: 同步服务发布者信息
 */
async function syncSgServicesubscribersEx(request: SyncSgServicesubscribersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncSgServicesubscribersResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.servicesubscribers.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncSgServiceclientsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 进程ID
  processId: string(name='process_id'),
  // 数据产生时间戳
  timestamp?: long(name='timestamp'),
}

model SyncSgServiceclientsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 微服务-同步客户端下线事件
 * Summary: 同步客户端下线事件
 */
async function syncSgServiceclients(request: SyncSgServiceclientsRequest): SyncSgServiceclientsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncSgServiceclientsEx(request, headers, runtime);
}

/**
 * Description: 微服务-同步客户端下线事件
 * Summary: 同步客户端下线事件
 */
async function syncSgServiceclientsEx(request: SyncSgServiceclientsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncSgServiceclientsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.serviceclients.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncSgServiceheartbeatsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 进程唯一值集合
  processIdList: [ string ](name='process_id_list'),
  // 本次心跳产生时间
  timestamp?: long(name='timestamp'),
}

model SyncSgServiceheartbeatsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 微服务-同步心跳数据
 * Summary: 同步心跳数据
 */
async function syncSgServiceheartbeats(request: SyncSgServiceheartbeatsRequest): SyncSgServiceheartbeatsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncSgServiceheartbeatsEx(request, headers, runtime);
}

/**
 * Description: 微服务-同步心跳数据
 * Summary: 同步心跳数据
 */
async function syncSgServiceheartbeatsEx(request: SyncSgServiceheartbeatsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncSgServiceheartbeatsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.serviceheartbeats.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgServicepublishersRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName?: string(name='app_name'),
  // 服务接口信息
  dataId?: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 每页条数
  pageSize: long(name='page_size'),
  // 分页开始数
  start: long(name='start'),
}

model QuerySgServicepublishersResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 分页一页大小
  pageSize?: long(name='page_size'),
  // 服务提供者信息集合
  publishers?: [ Publisher ](name='publishers'),
  // start_index
  startIndex?: long(name='start_index'),
  // total_size
  totalSize?: long(name='total_size'),
}

/**
 * Description: 分页查询发布者信息
 * Summary: 分页查询发布者
 */
async function querySgServicepublishers(request: QuerySgServicepublishersRequest): QuerySgServicepublishersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgServicepublishersEx(request, headers, runtime);
}

/**
 * Description: 分页查询发布者信息
 * Summary: 分页查询发布者
 */
async function querySgServicepublishersEx(request: QuerySgServicepublishersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgServicepublishersResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.servicepublishers.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgServicesubscribersRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName?: string(name='app_name'),
  // 服务id
  dataId?: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 分页开始数
  // 
  pageSize: string(name='page_size'),
  // 每页条数
  // 
  start: string(name='start'),
}

model QuerySgServicesubscribersResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 开始索引
  startIndex?: long(name='start_index'),
  // 消费者分页列表
  subscribers?: [ Subscriber ](name='subscribers'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 分页查询消费者
 * Summary: 分页查询消费者
 */
async function querySgServicesubscribers(request: QuerySgServicesubscribersRequest): QuerySgServicesubscribersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgServicesubscribersEx(request, headers, runtime);
}

/**
 * Description: 分页查询消费者
 * Summary: 分页查询消费者
 */
async function querySgServicesubscribersEx(request: QuerySgServicesubscribersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgServicesubscribersResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.servicesubscribers.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgServiceratelimitrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 分页参数
  pageSize: long(name='page_size'),
  // 分页参数
  start: long(name='start'),
}

model QuerySgServiceratelimitrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 服务限流规则列表
  serviceRateLimitRules?: [ ServiceRateLimitRule ](name='service_rate_limit_rules'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 根据dataId查询服务限流规则
 * Summary: 根据dataId查询服务限流规则
 */
async function querySgServiceratelimitrules(request: QuerySgServiceratelimitrulesRequest): QuerySgServiceratelimitrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgServiceratelimitrulesEx(request, headers, runtime);
}

/**
 * Description: 根据dataId查询服务限流规则
 * Summary: 根据dataId查询服务限流规则
 */
async function querySgServiceratelimitrulesEx(request: QuerySgServiceratelimitrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgServiceratelimitrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.serviceratelimitrules.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSgServiceratelimitrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName: string(name='app_name'),
  // 服务id
  dataId: string(name='data_id'),
  // 是否开启
  enable: boolean(name='enable'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 规则名
  name: string(name='name'),
  // 操作人
  operator?: string(name='operator'),
  // 资源类型
  resourceType?: string(name='resource_type'),
  // {"limitStrategy":"ScaledRateLimiter","actionConfig":{"actionType":"LIMIT_EXCEPTION","responseContent":"ssssssssssddd"},"maxBurstRatio":"1","resourceConfigs":[{"method":"方法名","interface":"接口名","baseName":"com.alipay.uctcloud.service.IndicatorClient:1.0@DEFAULT.query","resourceType":"DATA_ID_METHOD"}],"runMode":"CONTROL","calculationConfigs":[{"calculationType":"INVOKE_BY_TIME","period":1000,"trafficType":"ALL","maxAllow":0}],"desc":"测试规则2","resourceType":"DATA_ID_METHOD"}
  ruleConfig: string(name='rule_config'),
  // 运行模式
  runMode?: string(name='run_mode'),
  // 服务框架类型
  serviceType?: string(name='service_type'),
}

model AddSgServiceratelimitrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建成功的限流规则id
  ruleId?: long(name='rule_id'),
}

/**
 * Description: 新增限流规则
 * Summary: 新增限流规则
 */
async function addSgServiceratelimitrules(request: AddSgServiceratelimitrulesRequest): AddSgServiceratelimitrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSgServiceratelimitrulesEx(request, headers, runtime);
}

/**
 * Description: 新增限流规则
 * Summary: 新增限流规则
 */
async function addSgServiceratelimitrulesEx(request: AddSgServiceratelimitrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSgServiceratelimitrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.serviceratelimitrules.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgServiceratelimitrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName?: string(name='app_name'),
  // 服务id
  dataId?: string(name='data_id'),
  // 是否启用
  enable?: boolean(name='enable'),
  // id
  id: long(name='id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 限流规则名
  name: string(name='name'),
  // 操作者
  operator?: string(name='operator'),
  // 资源类型
  resourceType?: string(name='resource_type'),
  // {"limitStrategy":"ScaledRateLimiter","actionConfig":{"actionType":"LIMIT_EXCEPTION","responseContent":"ssssssssssddd"},"maxBurstRatio":"1","resourceConfigs":[{"method":"方法名","interface":"接口名","baseName":"com.alipay.uctcloud.service.IndicatorClient:1.0@DEFAULT.query","resourceType":"DATA_ID_METHOD"}],"runMode":"CONTROL","calculationConfigs":[{"calculationType":"INVOKE_BY_TIME","period":1000,"trafficType":"ALL","maxAllow":0}],"desc":"测试规则2","resourceType":"DATA_ID_METHOD"}
  ruleConfig: string(name='rule_config'),
  // 运行模式
  runMode?: string(name='run_mode'),
  // 服务框架类型
  serviceType?: string(name='service_type'),
}

model UpdateSgServiceratelimitrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 更新成功的条数
  result?: long(name='result'),
}

/**
 * Description: 更新服务限流规则
 * Summary: 更新服务限流规则
 */
async function updateSgServiceratelimitrules(request: UpdateSgServiceratelimitrulesRequest): UpdateSgServiceratelimitrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgServiceratelimitrulesEx(request, headers, runtime);
}

/**
 * Description: 更新服务限流规则
 * Summary: 更新服务限流规则
 */
async function updateSgServiceratelimitrulesEx(request: UpdateSgServiceratelimitrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgServiceratelimitrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.serviceratelimitrules.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSgServiceratelimitrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName?: string(name='app_name'),
  // 服务id
  dataId?: string(name='data_id'),
  // 是否启用
  enable?: boolean(name='enable'),
  // 限流规则id
  id: string(name='id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 限流规则名称
  name?: string(name='name'),
  // 操作人
  operator?: string(name='operator'),
  // 资源类型
  resourceType?: string(name='resource_type'),
  // {"limitStrategy":"ScaledRateLimiter","actionConfig":{"actionType":"LIMIT_EXCEPTION","responseContent":"ssssssssssddd"},"maxBurstRatio":"1","resourceConfigs":[{"method":"方法名","interface":"接口名","baseName":"com.alipay.uctcloud.service.IndicatorClient:1.0@DEFAULT.query","resourceType":"DATA_ID_METHOD"}],"runMode":"CONTROL","calculationConfigs":[{"calculationType":"INVOKE_BY_TIME","period":1000,"trafficType":"ALL","maxAllow":0}],"desc":"测试规则2","resourceType":"DATA_ID_METHOD"}
  ruleConfig?: string(name='rule_config'),
  // 运行模式
  runMode?: string(name='run_mode'),
  // 服务框架类型
  serviceType?: string(name='service_type'),
}

model DeleteSgServiceratelimitrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 删除数目，1表示成功
  result?: long(name='result'),
}

/**
 * Description: 删除限流规则
 * Summary: 删除限流规则
 */
async function deleteSgServiceratelimitrules(request: DeleteSgServiceratelimitrulesRequest): DeleteSgServiceratelimitrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSgServiceratelimitrulesEx(request, headers, runtime);
}

/**
 * Description: 删除限流规则
 * Summary: 删除限流规则
 */
async function deleteSgServiceratelimitrulesEx(request: DeleteSgServiceratelimitrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSgServiceratelimitrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.serviceratelimitrules.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgServiceratelimitrulestatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName?: string(name='app_name'),
  // 服务id
  dataId?: string(name='data_id'),
  // 是否启用
  enable: boolean(name='enable'),
  // 限流规则id
  id: long(name='id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 描述字段
  name?: string(name='name'),
  // 操作人
  operator?: string(name='operator'),
  // 资源类型
  resourceType?: string(name='resource_type'),
  // {"limitStrategy":"ScaledRateLimiter","actionConfig":{"actionType":"LIMIT_EXCEPTION","responseContent":"ssssssssssddd"},"maxBurstRatio":"1","resourceConfigs":[{"method":"方法名","interface":"接口名","baseName":"com.alipay.uctcloud.service.IndicatorClient:1.0@DEFAULT.query","resourceType":"DATA_ID_METHOD"}],"runMode":"CONTROL","calculationConfigs":[{"calculationType":"INVOKE_BY_TIME","period":1000,"trafficType":"ALL","maxAllow":0}],"desc":"测试规则2","resourceType":"DATA_ID_METHOD"}
  ruleConfig?: string(name='rule_config'),
  // 运行模式
  runMode?: string(name='run_mode'),
  // 服务框架类型
  serviceType?: string(name='service_type'),
}

model UpdateSgServiceratelimitrulestatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: long(name='result'),
}

/**
 * Description: 禁用/启用限流规则
 * Summary: 禁用/启用限流规则
 */
async function updateSgServiceratelimitrulestatus(request: UpdateSgServiceratelimitrulestatusRequest): UpdateSgServiceratelimitrulestatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgServiceratelimitrulestatusEx(request, headers, runtime);
}

/**
 * Description: 禁用/启用限流规则
 * Summary: 禁用/启用限流规则
 */
async function updateSgServiceratelimitrulestatusEx(request: UpdateSgServiceratelimitrulestatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgServiceratelimitrulestatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.serviceratelimitrulestatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSgRouterrulegroupsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName?: string(name='app_name'),
  // 服务id
  dataId: string(name='data_id'),
  // 下发版本
  dispatchVersion?: string(name='dispatch_version'),
  // 是否生效，1 生效，0 未生效。默认未生效
  enabled?: long(name='enabled'),
  // id
  id?: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 编辑人
  operator?: string(name='operator'),
  // JSON格式：路由规则
  rules: string(name='rules'),
  // dataID的类型，应用/服务；默认为0，服务级
  type?: string(name='type'),
  // 规则组名称
  name?: string(name='name'),
}

model AddSgRouterrulegroupsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 添加服务路由规则
 * Summary: 添加服务路由规则
 */
async function addSgRouterrulegroups(request: AddSgRouterrulegroupsRequest): AddSgRouterrulegroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSgRouterrulegroupsEx(request, headers, runtime);
}

/**
 * Description: 添加服务路由规则
 * Summary: 添加服务路由规则
 */
async function addSgRouterrulegroupsEx(request: AddSgRouterrulegroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSgRouterrulegroupsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerrulegroups.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSgRouterrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId?: string(name='data_id'),
  // 实例id
  instanceId?: string(name='instance_id'),
  // dataID的类型，应用/服务；默认为0，服务级
  type?: string(name='type'),
}

model GetSgRouterrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 路由规则
  routerRuleGroupModel?: RouterRuleGroupModel(name='router_rule_group_model'),
}

/**
 * Description: 查询路由规则
 * Summary: 查询路由规则
 */
async function getSgRouterrules(request: GetSgRouterrulesRequest): GetSgRouterrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSgRouterrulesEx(request, headers, runtime);
}

/**
 * Description: 查询路由规则
 * Summary: 查询路由规则
 */
async function getSgRouterrulesEx(request: GetSgRouterrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSgRouterrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerrules.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgRouterrulegroupsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName?: string(name='app_name'),
  // 服务id
  dataId?: string(name='data_id'),
  // 下发的版本
  dispatchVersion?: long(name='dispatch_version'),
  // 是否生效，1 生效，0 未生效。默认未生效
  enabled?: long(name='enabled'),
  // 路由规则id
  id: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 规则名称
  name?: string(name='name'),
  // 编辑人
  operator?: string(name='operator'),
  // 路由规则
  rules: string(name='rules'),
  // dataID的类型，应用/服务
  type?: string(name='type'),
}

model UpdateSgRouterrulegroupsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新服务路由规则
 * Summary: 更新服务路由规则
 */
async function updateSgRouterrulegroups(request: UpdateSgRouterrulegroupsRequest): UpdateSgRouterrulegroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgRouterrulegroupsEx(request, headers, runtime);
}

/**
 * Description: 更新服务路由规则
 * Summary: 更新服务路由规则
 */
async function updateSgRouterrulegroupsEx(request: UpdateSgRouterrulegroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgRouterrulegroupsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerrulegroups.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableSgRouterrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app_name
  appName?: string(name='app_name'),
  // 服务id
  dataId: string(name='data_id'),
  // 下发版本
  dispatchVersion: long(name='dispatch_version'),
  // 是否生效，1 生效，0 未生效。默认未生效
  enabled?: string(name='enabled'),
  // id
  id: long(name='id'),
  // 编辑人
  operator?: string(name='operator'),
  // RouterRuleModel
  rules?: string(name='rules'),
  // 类型
  type: string(name='type'),
}

model EnableSgRouterrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 微服务-启用路由器规则组
 * Summary: 启用路由器规则组
 */
async function enableSgRouterrules(request: EnableSgRouterrulesRequest): EnableSgRouterrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableSgRouterrulesEx(request, headers, runtime);
}

/**
 * Description: 微服务-启用路由器规则组
 * Summary: 启用路由器规则组
 */
async function enableSgRouterrulesEx(request: EnableSgRouterrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableSgRouterrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerrules.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgRouterruleversionsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 路由类型，service表示服务
  type: string(name='type'),
}

model ListSgRouterruleversionsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // versions
  versions?: [ string ](name='versions'),
}

/**
 * Description: 获取路由规则组版本列表
 * Summary: 获取路由规则组版本列表
 */
async function listSgRouterruleversions(request: ListSgRouterruleversionsRequest): ListSgRouterruleversionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgRouterruleversionsEx(request, headers, runtime);
}

/**
 * Description: 获取路由规则组版本列表
 * Summary: 获取路由规则组版本列表
 */
async function listSgRouterruleversionsEx(request: ListSgRouterruleversionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgRouterruleversionsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerruleversions.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgRouterrulestatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // serivce表示服务
  type: string(name='type'),
}

model QuerySgRouterrulestatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Map<String, Object>
  configMap?: string(name='config_map'),
}

/**
 * Description: 获取路由规则状态
 * Summary: 获取路由规则状态
 */
async function querySgRouterrulestatus(request: QuerySgRouterrulestatusRequest): QuerySgRouterrulestatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgRouterrulestatusEx(request, headers, runtime);
}

/**
 * Description: 获取路由规则状态
 * Summary: 获取路由规则状态
 */
async function querySgRouterrulestatusEx(request: QuerySgRouterrulestatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgRouterrulestatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerrulestatus.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSgAuthrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 规则id
  ruleId: long(name='rule_id'),
  // 规则所属的 group id
  authGroupId: long(name='auth_group_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model DeleteSgAuthrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除鉴权规则
 * Summary: 删除鉴权规则
 */
async function deleteSgAuthrules(request: DeleteSgAuthrulesRequest): DeleteSgAuthrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSgAuthrulesEx(request, headers, runtime);
}

/**
 * Description: 删除鉴权规则
 * Summary: 删除鉴权规则
 */
async function deleteSgAuthrulesEx(request: DeleteSgAuthrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSgAuthrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrules.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgRouterruleappnamesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 类型
  type: string(name='type'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model ListSgRouterruleappnamesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app name list
  appNames?: [ string ](name='app_names'),
}

/**
 * Description: 微服务-通过DataId获取AppNames
 * Summary: 通过DataId获取AppNames
 */
async function listSgRouterruleappnames(request: ListSgRouterruleappnamesRequest): ListSgRouterruleappnamesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgRouterruleappnamesEx(request, headers, runtime);
}

/**
 * Description: 微服务-通过DataId获取AppNames
 * Summary: 通过DataId获取AppNames
 */
async function listSgRouterruleappnamesEx(request: ListSgRouterruleappnamesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgRouterruleappnamesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerruleappnames.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableSgAuthrulegroupsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 服务接口id
  dataId: string(name='data_id'),
  // 服务鉴权黑、白名单 id
  authGroupId: long(name='auth_group_id'),
}

model EnableSgAuthrulegroupsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 启用服务鉴权黑、白名单。黑、白名单不能同时生效
 * Summary: 启用服务鉴权黑、白名单
 */
async function enableSgAuthrulegroups(request: EnableSgAuthrulegroupsRequest): EnableSgAuthrulegroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableSgAuthrulegroupsEx(request, headers, runtime);
}

/**
 * Description: 启用服务鉴权黑、白名单。黑、白名单不能同时生效
 * Summary: 启用服务鉴权黑、白名单
 */
async function enableSgAuthrulegroupsEx(request: EnableSgAuthrulegroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableSgAuthrulegroupsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrulegroups.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSgRouterrulesnapshotsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 类型
  type: string(name='type'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model GetSgRouterrulesnapshotsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ConfigSnapshotModel
  configSnapshotModel?: ConfigSnapshotModel(name='config_snapshot_model'),
}

/**
 * Description: 微服务-获取快照最后一个
 * Summary: 获取快照最后一个
 */
async function getSgRouterrulesnapshots(request: GetSgRouterrulesnapshotsRequest): GetSgRouterrulesnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSgRouterrulesnapshotsEx(request, headers, runtime);
}

/**
 * Description: 微服务-获取快照最后一个
 * Summary: 获取快照最后一个
 */
async function getSgRouterrulesnapshotsEx(request: GetSgRouterrulesnapshotsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSgRouterrulesnapshotsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerrulesnapshots.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RollbackSgRouterrulesnapshotsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ConfigSnapshotModel
  configSnapshot: string(name='config_snapshot'),
  // RouterRuleGroupModel
  routerRuleGroup: string(name='router_rule_group'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model RollbackSgRouterrulesnapshotsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 微服务-回滚快照最后一个
 * Summary: 回滚快照最后一个
 */
async function rollbackSgRouterrulesnapshots(request: RollbackSgRouterrulesnapshotsRequest): RollbackSgRouterrulesnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return rollbackSgRouterrulesnapshotsEx(request, headers, runtime);
}

/**
 * Description: 微服务-回滚快照最后一个
 * Summary: 回滚快照最后一个
 */
async function rollbackSgRouterrulesnapshotsEx(request: RollbackSgRouterrulesnapshotsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RollbackSgRouterrulesnapshotsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerrulesnapshots.rollback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgRouterruledispatchlogsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 分页参数
  limit?: long(name='limit'),
  // 分页参数
  start?: long(name='start'),
  // 类型
  type: string(name='type'),
}

model QuerySgRouterruledispatchlogsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // List<ConfigDispatchLogDO>
  configDispatchLogs?: [ ConfigDispatchLogDO ](name='config_dispatch_logs'),
}

/**
 * Description: 微服务-获取调度日志
 * Summary: 获取调度日志
 */
async function querySgRouterruledispatchlogs(request: QuerySgRouterruledispatchlogsRequest): QuerySgRouterruledispatchlogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgRouterruledispatchlogsEx(request, headers, runtime);
}

/**
 * Description: 微服务-获取调度日志
 * Summary: 获取调度日志
 */
async function querySgRouterruledispatchlogsEx(request: QuerySgRouterruledispatchlogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgRouterruledispatchlogsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerruledispatchlogs.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSgAuthrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 规则所属的白、黑名单id
  authGroupId: long(name='auth_group_id'),
  // 服务接口id
  dataId: string(name='data_id'),
  // 待新增的鉴权规则，json 格式字符串
  authRule: string(name='auth_rule'),
}

model AddSgAuthrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建成功后的鉴权规则
  authRule?: AuthRule(name='auth_rule'),
}

/**
 * Description: 添加一条白、黑名单规则
 * Summary: 添加一条鉴权规则
 */
async function addSgAuthrules(request: AddSgAuthrulesRequest): AddSgAuthrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSgAuthrulesEx(request, headers, runtime);
}

/**
 * Description: 添加一条白、黑名单规则
 * Summary: 添加一条鉴权规则
 */
async function addSgAuthrulesEx(request: AddSgAuthrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSgAuthrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrules.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgAuthrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 所属黑白名单规则组id
  authGroupId: long(name='auth_group_id'),
  // 服务接口id
  dataId: string(name='data_id'),
  // 更新的规则数据
  authRule: string(name='auth_rule'),
  // 更新的规则id
  ruleId: long(name='rule_id'),
}

model UpdateSgAuthrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新一条服务鉴权规则
 * Summary: 更新一条服务鉴权规则
 */
async function updateSgAuthrules(request: UpdateSgAuthrulesRequest): UpdateSgAuthrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgAuthrulesEx(request, headers, runtime);
}

/**
 * Description: 更新一条服务鉴权规则
 * Summary: 更新一条服务鉴权规则
 */
async function updateSgAuthrulesEx(request: UpdateSgAuthrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgAuthrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrules.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DisableSgAuthrulegroupsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 服务接口id
  dataId: string(name='data_id'),
  // 服务鉴权黑、白名单id
  authGroupId: long(name='auth_group_id'),
}

model DisableSgAuthrulegroupsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 禁止一份服务鉴权黑、白名单
 * Summary: 禁止一份服务鉴权黑、白名单
 */
async function disableSgAuthrulegroups(request: DisableSgAuthrulegroupsRequest): DisableSgAuthrulegroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return disableSgAuthrulegroupsEx(request, headers, runtime);
}

/**
 * Description: 禁止一份服务鉴权黑、白名单
 * Summary: 禁止一份服务鉴权黑、白名单
 */
async function disableSgAuthrulegroupsEx(request: DisableSgAuthrulegroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableSgAuthrulegroupsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrulegroups.disable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgApprelationsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName?: string(name='app_name'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model QuerySgApprelationsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用关系数据
  graphData?: string(name='graph_data'),
}

/**
 * Description: 获取应用关联数据
 * Summary: 获取应用关联数据
 */
async function querySgApprelations(request: QuerySgApprelationsRequest): QuerySgApprelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgApprelationsEx(request, headers, runtime);
}

/**
 * Description: 获取应用关联数据
 * Summary: 获取应用关联数据
 */
async function querySgApprelationsEx(request: QuerySgApprelationsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgApprelationsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.apprelations.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableSgAuthrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 所属的鉴权规则黑、白名单id
  authGroupId: long(name='auth_group_id'),
  // 服务接口id
  dataId: string(name='data_id'),
  // 启用的规则id
  ruleId: long(name='rule_id'),
}

model EnableSgAuthrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 启用服务鉴权规则
 * Summary: 启用服务鉴权规则
 */
async function enableSgAuthrules(request: EnableSgAuthrulesRequest): EnableSgAuthrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableSgAuthrulesEx(request, headers, runtime);
}

/**
 * Description: 启用服务鉴权规则
 * Summary: 启用服务鉴权规则
 */
async function enableSgAuthrulesEx(request: EnableSgAuthrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableSgAuthrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrules.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DisableSgAuthrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 服务接口id
  dataId: string(name='data_id'),
  // 所属的服务鉴权黑、白名单id
  authGroupId: long(name='auth_group_id'),
  // 规则id
  ruleId: long(name='rule_id'),
}

model DisableSgAuthrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 禁用黑、白名单中的一条规则
 * Summary: 禁用黑、白名单中的一条规则
 */
async function disableSgAuthrules(request: DisableSgAuthrulesRequest): DisableSgAuthrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return disableSgAuthrulesEx(request, headers, runtime);
}

/**
 * Description: 禁用黑、白名单中的一条规则
 * Summary: 禁用黑、白名单中的一条规则
 */
async function disableSgAuthrulesEx(request: DisableSgAuthrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableSgAuthrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrules.disable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgServicepubrelationsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName: string(name='app_name'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model QuerySgServicepubrelationsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发布服务数据
  serviceRelations?: [ ServiceRelation ](name='service_relations'),
}

/**
 * Description: 获取服务发布者关系
 * Summary: 获取服务发布者关系
 */
async function querySgServicepubrelations(request: QuerySgServicepubrelationsRequest): QuerySgServicepubrelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgServicepubrelationsEx(request, headers, runtime);
}

/**
 * Description: 获取服务发布者关系
 * Summary: 获取服务发布者关系
 */
async function querySgServicepubrelationsEx(request: QuerySgServicepubrelationsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgServicepubrelationsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.servicepubrelations.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetrySgAuthrulegroupsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 服务鉴权黑、白名单 id
  authGroupId: long(name='auth_group_id'),
  // 服务接口 id
  dataId: string(name='data_id'),
}

model RetrySgAuthrulegroupsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 服务鉴权规则下发失败，重新下发规则
 * Summary: 服务鉴权规则下发失败，重新下发规则
 */
async function retrySgAuthrulegroups(request: RetrySgAuthrulegroupsRequest): RetrySgAuthrulegroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retrySgAuthrulegroupsEx(request, headers, runtime);
}

/**
 * Description: 服务鉴权规则下发失败，重新下发规则
 * Summary: 服务鉴权规则下发失败，重新下发规则
 */
async function retrySgAuthrulegroupsEx(request: RetrySgAuthrulegroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetrySgAuthrulegroupsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrulegroups.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgServicesubrelationsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName: string(name='app_name'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model QuerySgServicesubrelationsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务订阅者数据
  serviceRelations?: [ ServiceRelation ](name='service_relations'),
}

/**
 * Description: 获取服务消费者数据
 * Summary: 获取服务消费者数据
 */
async function querySgServicesubrelations(request: QuerySgServicesubrelationsRequest): QuerySgServicesubrelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgServicesubrelationsEx(request, headers, runtime);
}

/**
 * Description: 获取服务消费者数据
 * Summary: 获取服务消费者数据
 */
async function querySgServicesubrelationsEx(request: QuerySgServicesubrelationsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgServicesubrelationsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.servicesubrelations.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSgRelationswitchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model GetSgRelationswitchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 显示关系切换
  resp?: string(name='resp'),
}

/**
 * Description: 微服务-显示关系切换
 * Summary: 显示关系切换
 */
async function getSgRelationswitch(request: GetSgRelationswitchRequest): GetSgRelationswitchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSgRelationswitchEx(request, headers, runtime);
}

/**
 * Description: 微服务-显示关系切换
 * Summary: 显示关系切换
 */
async function getSgRelationswitchEx(request: GetSgRelationswitchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSgRelationswitchResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.relationswitch.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetMiddlewareInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户Id
  tenantId: string(name='tenant_id'),
  // 环境id
  workspaceId: string(name='workspace_id'),
}

model GetMiddlewareInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实例id
  instanceId?: string(name='instance_id'),
}

/**
 * Description: 微服务-获取InstanceId
 * Summary: 获取InstanceId
 */
async function getMiddlewareInstance(request: GetMiddlewareInstanceRequest): GetMiddlewareInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getMiddlewareInstanceEx(request, headers, runtime);
}

/**
 * Description: 微服务-获取InstanceId
 * Summary: 获取InstanceId
 */
async function getMiddlewareInstanceEx(request: GetMiddlewareInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMiddlewareInstanceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.middleware.instance.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSgEnvconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model GetSgEnvconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Map<String, Object>
  configMap?: string(name='config_map'),
}

/**
 * Description: 微服务-获取获取环境配置
 * Summary: 获取获取环境配置
 */
async function getSgEnvconfig(request: GetSgEnvconfigRequest): GetSgEnvconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSgEnvconfigEx(request, headers, runtime);
}

/**
 * Description: 微服务-获取获取环境配置
 * Summary: 获取获取环境配置
 */
async function getSgEnvconfigEx(request: GetSgEnvconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSgEnvconfigResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.envconfig.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgServiceappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model ListSgServiceappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用列表
  appNames?: [ string ](name='app_names'),
}

/**
 * Description: 获取发布服务的应用列表
 * Summary: 获取发布服务的应用列表
 */
async function listSgServiceapps(request: ListSgServiceappsRequest): ListSgServiceappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgServiceappsEx(request, headers, runtime);
}

/**
 * Description: 获取发布服务的应用列表
 * Summary: 获取发布服务的应用列表
 */
async function listSgServiceappsEx(request: ListSgServiceappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgServiceappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.serviceapps.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgServicekeywordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName: string(name='app_name'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 搜索词
  keyword?: string(name='keyword'),
}

model QuerySgServicekeywordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用列表
  appNames?: [ string ](name='app_names'),
}

/**
 * Description: 获取服务候选词
 * Summary: 获取服务候选词
 */
async function querySgServicekeyword(request: QuerySgServicekeywordRequest): QuerySgServicekeywordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgServicekeywordEx(request, headers, runtime);
}

/**
 * Description: 获取服务候选词
 * Summary: 获取服务候选词
 */
async function querySgServicekeywordEx(request: QuerySgServicekeywordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgServicekeywordResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.servicekeyword.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgServicesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app_name
  appName?: string(name='app_name'),
  // 实例id
  instanceId: string(name='instance_id'),
  // keyword
  keyword?: string(name='keyword'),
  // 分页参数
  pageSize: long(name='page_size'),
  // 分页参数
  start: long(name='start'),
  // 区域ID
  tenantId?: string(name='tenant_id'),
}

model QuerySgServicesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // current_page
  currentPage?: long(name='current_page'),
  // page_size
  pageSize?: long(name='page_size'),
  // List<SimpleServiceInfo>
  simpleServiceInfos?: [ SimpleServiceInfo ](name='simple_service_infos'),
  // start_index
  startIndex?: long(name='start_index'),
  // total_size
  totalSize?: long(name='total_size'),
}

/**
 * Description: 微服务-根据关键词搜索
 * Summary: 根据关键词搜索
 */
async function querySgServices(request: QuerySgServicesRequest): QuerySgServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgServicesEx(request, headers, runtime);
}

/**
 * Description: 微服务-根据关键词搜索
 * Summary: 根据关键词搜索
 */
async function querySgServicesEx(request: QuerySgServicesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgServicesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.services.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgServicepubkeysRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // ip
  ip: string(name='ip'),
  // 分页参数
  pageSize: long(name='page_size'),
  // 分页参数
  start: long(name='start'),
  // 区域ID
  tenantId?: string(name='tenant_id'),
}

model QuerySgServicepubkeysResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 服务信息
  simpleServiceInfos?: [ SimpleServiceInfo ](name='simple_service_infos'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 根据ip搜索服务提供方
 * Summary: 根据ip搜索服务提供方
 */
async function querySgServicepubkeys(request: QuerySgServicepubkeysRequest): QuerySgServicepubkeysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgServicepubkeysEx(request, headers, runtime);
}

/**
 * Description: 根据ip搜索服务提供方
 * Summary: 根据ip搜索服务提供方
 */
async function querySgServicepubkeysEx(request: QuerySgServicepubkeysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgServicepubkeysResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.servicepubkeys.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgServicesubkeysRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // ip
  ip: string(name='ip'),
  // 分页参数
  pageSize: string(name='page_size'),
  // 分页参数
  start: long(name='start'),
  // 区域ID
  tenantId?: string(name='tenant_id'),
}

model QuerySgServicesubkeysResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 服务信息
  simpleServiceInfos?: [ SimpleServiceInfo ](name='simple_service_infos'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 根据ip搜索消费者
 * Summary: 根据ip搜索消费者
 */
async function querySgServicesubkeys(request: QuerySgServicesubkeysRequest): QuerySgServicesubkeysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgServicesubkeysEx(request, headers, runtime);
}

/**
 * Description: 根据ip搜索消费者
 * Summary: 根据ip搜索消费者
 */
async function querySgServicesubkeysEx(request: QuerySgServicesubkeysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgServicesubkeysResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.servicesubkeys.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgServicepubsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 分页参数
  pageSize: string(name='page_size'),
  // 分页参数
  start: long(name='start'),
}

model QuerySgServicepubsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页大小
  pageSize?: long(name='page_size'),
  // [
  //         {
  //             "gmtModified":"2019-12-12T20:58:26+08:00",
  //             "alive":true,
  //             "hostIp":"10.15.228.102",
  //             "appName":"aliyun-demo",
  //             "weight":100,
  //             "gmtCreate":"2019-12-12T20:58:26+08:00",
  //             "content":"10.15.228.96:12200?rpcVer=50303&serialization=hessian2&weight=100&timeout=3000&appName=aliyun-demo&warmupTime=0&warmupWeight=10&p=1&v=4.0&_SERIALIZETYPE=hessian2&_WEIGHT=100&_TIMEOUT=3000&app_name=aliyun-demo&startTime=1576047463993",
  //             "mosn":false,
  //             "timeout":3000,
  //             "serviceIp":"10.15.228.96",
  //             "protocol":"bolt",
  //             "instanceId":"0SGTOGOOLRD8",
  //             "dataId":"com.antfin.demo.endpoint.facade.SampleRestFacade:1.0@DEFAULT",
  //             "processId":"10.15.228.102:64638",
  //             "zone":"DEFAULT_ZONE",
  //             "checkSum":"d7e0e231f57d1156fe4a4f0979231fe5",
  //             "vmMode":false,
  //             "id":969,
  //             "servicePort":12200,
  //             "status":true
  //         }
  publishers?: [ Publisher ](name='publishers'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 获取发布者服务详情
 * Summary: 获取发布者服务详情
 */
async function querySgServicepubs(request: QuerySgServicepubsRequest): QuerySgServicepubsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgServicepubsEx(request, headers, runtime);
}

/**
 * Description: 获取发布者服务详情
 * Summary: 获取发布者服务详情
 */
async function querySgServicepubsEx(request: QuerySgServicepubsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgServicepubsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.servicepubs.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgServicesubsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 分页大小
  pageSize: long(name='page_size'),
  // 起始页
  start: long(name='start'),
}

model QuerySgServicesubsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // [
  //         {
  //             "gmtModified":"2019-12-12T20:58:22+08:00",
  //             "instanceId":"0SGTOGOOLRD8",
  //             "alive":true,
  //             "dataId":"com.antfin.demo.endpoint.facade.SampleRestFacade:1.0@DEFAULT",
  //             "hostIp":"10.15.228.102",
  //             "processId":"10.15.228.102:64588",
  //             "zone":"DEFAULT_ZONE",
  //             "appName":"consumer-demo",
  //             "scope":"global",
  //             "checkSum":"86f4f564ef778386998b4b19098f5c77",
  //             "id":7977,
  //             "gmtCreate":"2019-12-12T20:58:22+08:00"
  //         }
  //     ]
  subscribers?: [ Subscriber ](name='subscribers'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 获取订阅者服务详情
 * Summary: 获取订阅者服务详情
 */
async function querySgServicesubs(request: QuerySgServicesubsRequest): QuerySgServicesubsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgServicesubsEx(request, headers, runtime);
}

/**
 * Description: 获取订阅者服务详情
 * Summary: 获取订阅者服务详情
 */
async function querySgServicesubsEx(request: QuerySgServicesubsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgServicesubsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.servicesubs.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgServicepubsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ip
  ip: string(name='ip'),
  // 服务id
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model ListSgServicepubsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // List<Publisher>
  publishers?: [ Publisher ](name='publishers'),
}

/**
 * Description: 微服务-通过DataId和IP获取pub服务详情
 * Summary: 通过DataId和IP获取pub服务详情
 */
async function listSgServicepubs(request: ListSgServicepubsRequest): ListSgServicepubsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgServicepubsEx(request, headers, runtime);
}

/**
 * Description: 微服务-通过DataId和IP获取pub服务详情
 * Summary: 通过DataId和IP获取pub服务详情
 */
async function listSgServicepubsEx(request: ListSgServicepubsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgServicepubsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.servicepubs.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgServicesubsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ip
  ip: string(name='ip'),
  // 服务id
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model ListSgServicesubsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // List<Subscriber>
  subscribers?: [ Subscriber ](name='subscribers'),
}

/**
 * Description: 微服务-通过DataId和IP获取sub服务详情
 * Summary: 通过DataId和IP获取sub服务详情
 */
async function listSgServicesubs(request: ListSgServicesubsRequest): ListSgServicesubsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgServicesubsEx(request, headers, runtime);
}

/**
 * Description: 微服务-通过DataId和IP获取sub服务详情
 * Summary: 通过DataId和IP获取sub服务详情
 */
async function listSgServicesubsEx(request: ListSgServicesubsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgServicesubsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.servicesubs.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgServicesummarysRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model QuerySgServicesummarysResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ServiceSummary
  serviceSummary?: ServiceSummary(name='service_summary'),
}

/**
 * Description: 微服务-获取服务汇总信息
 * Summary: 获取服务汇总信息
 */
async function querySgServicesummarys(request: QuerySgServicesummarysRequest): QuerySgServicesummarysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgServicesummarysEx(request, headers, runtime);
}

/**
 * Description: 微服务-获取服务汇总信息
 * Summary: 获取服务汇总信息
 */
async function querySgServicesummarysEx(request: QuerySgServicesummarysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgServicesummarysResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.servicesummarys.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DisableSgServiceparamsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // JSON字符串，禁用的IP信息
  data: string(name='data'),
  // 服务id
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model DisableSgServiceparamsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 禁用一个服务下某个服务提供者
 * Summary: 禁用一个服务下某个服务提供者
 */
async function disableSgServiceparams(request: DisableSgServiceparamsRequest): DisableSgServiceparamsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return disableSgServiceparamsEx(request, headers, runtime);
}

/**
 * Description: 禁用一个服务下某个服务提供者
 * Summary: 禁用一个服务下某个服务提供者
 */
async function disableSgServiceparamsEx(request: DisableSgServiceparamsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableSgServiceparamsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.serviceparams.disable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableSgServiceparamsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 启动的服务提供者信息
  data: string(name='data'),
  // 服务id
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model EnableSgServiceparamsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 启动一个服务下某个服务提供者
 * Summary: 启动一个服务下某个服务提供者
 */
async function enableSgServiceparams(request: EnableSgServiceparamsRequest): EnableSgServiceparamsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableSgServiceparamsEx(request, headers, runtime);
}

/**
 * Description: 启动一个服务下某个服务提供者
 * Summary: 启动一个服务下某个服务提供者
 */
async function enableSgServiceparamsEx(request: EnableSgServiceparamsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableSgServiceparamsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.serviceparams.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetSgServiceparamweightRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // SON字符串，服务提供者信息
  data: string(name='data'),
  // 服务id
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 权重
  weight: long(name='weight'),
}

model SetSgServiceparamweightResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设置服务提供者权重
 * Summary: 设置服务提供者权重
 */
async function setSgServiceparamweight(request: SetSgServiceparamweightRequest): SetSgServiceparamweightResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setSgServiceparamweightEx(request, headers, runtime);
}

/**
 * Description: 设置服务提供者权重
 * Summary: 设置服务提供者权重
 */
async function setSgServiceparamweightEx(request: SetSgServiceparamweightRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetSgServiceparamweightResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.serviceparamweight.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitSgServiceparamsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // JSON格式，服务提供者信息
  data: string(name='data'),
  // 服务id
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model ReinitSgServiceparamsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 恢复服务提供者默认设置
 * Summary: 恢复服务提供者默认设置
 */
async function reinitSgServiceparams(request: ReinitSgServiceparamsRequest): ReinitSgServiceparamsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitSgServiceparamsEx(request, headers, runtime);
}

/**
 * Description: 恢复服务提供者默认设置
 * Summary: 恢复服务提供者默认设置
 */
async function reinitSgServiceparamsEx(request: ReinitSgServiceparamsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitSgServiceparamsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.serviceparams.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchquerySgServiceparamRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model BatchquerySgServiceparamResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Map<String, String>
  configMap?: string(name='config_map'),
}

/**
 * Description: 微服务-查询全部服务参数信息
 * Summary: 查询全部服务参数信息
 */
async function batchquerySgServiceparam(request: BatchquerySgServiceparamRequest): BatchquerySgServiceparamResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchquerySgServiceparamEx(request, headers, runtime);
}

/**
 * Description: 微服务-查询全部服务参数信息
 * Summary: 查询全部服务参数信息
 */
async function batchquerySgServiceparamEx(request: BatchquerySgServiceparamRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchquerySgServiceparamResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.serviceparam.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMeshSidecarRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询指定应用服务的
  appServiceName?: string(name='app_service_name'),
  // 查询指定集群的，如果未设置，则根据tenant + workspace获取
  clusterName?: string(name='cluster_name'),
  // 查询指定命名空间的，如果未指定，默认值为default
  namespace?: string(name='namespace'),
  // 分页查询索引页，默认0
  pageIndex?: long(name='page_index'),
  // 分页查询单页大小，默认10
  pageSize?: string(name='page_size'),
  // 查询指定podIp(英文半角逗号分割)的
  podIp?: string(name='pod_ip'),
  // 查询指定pod状态的
  podStatus?: string(name='pod_status'),
  // 查询指定sidecar状态的
  sidecarStatus?: string(name='sidecar_status'),
  // 查询注入指定版本sidecar的
  sidecarVersion?: string(name='sidecar_version'),
  // 排序字段，默认pod创建时间
  sortField?: string(name='sort_field'),
  // 升序(ascend) 或 降序(descend)
  sortOrder?: string(name='sort_order'),
  // sidecar类型(mosn/odp/mist)
  type?: string(name='type'),
}

model QueryMeshSidecarResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总结果数
  totalCnt?: long(name='total_cnt'),
  // SideCar实例列表
  items?: [ SideCarDetailModel ](name='items'),
}

/**
 * Description: 查询注入了指定类型的sidecar 的Pod 实例
 * Summary: sidecar实例查询
 */
async function queryMeshSidecar(request: QueryMeshSidecarRequest): QueryMeshSidecarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMeshSidecarEx(request, headers, runtime);
}

/**
 * Description: 查询注入了指定类型的sidecar 的Pod 实例
 * Summary: sidecar实例查询
 */
async function queryMeshSidecarEx(request: QueryMeshSidecarRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMeshSidecarResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.mesh.sidecar.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetGuardianGuardianconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model GetGuardianGuardianconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 控制表单展示
  data?: boolean(name='data'),
}

/**
 * Description: 微服务-配置获取
 * Summary: 配置获取
 */
async function getGuardianGuardianconfig(request: GetGuardianGuardianconfigRequest): GetGuardianGuardianconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getGuardianGuardianconfigEx(request, headers, runtime);
}

/**
 * Description: 微服务-配置获取
 * Summary: 配置获取
 */
async function getGuardianGuardianconfigEx(request: GetGuardianGuardianconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetGuardianGuardianconfigResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianconfig.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllGuardianGuardianappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model AllGuardianGuardianappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 监控app列表
  guardianApps?: [ GuardianApp ](name='guardian_apps'),
}

/**
 * Description: 微服务-获取app列表
 * Summary: 获取app列表
 */
async function allGuardianGuardianapps(request: AllGuardianGuardianappsRequest): AllGuardianGuardianappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allGuardianGuardianappsEx(request, headers, runtime);
}

/**
 * Description: 微服务-获取app列表
 * Summary: 获取app列表
 */
async function allGuardianGuardianappsEx(request: AllGuardianGuardianappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllGuardianGuardianappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianapps.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllGuardianGuardianappnamesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model AllGuardianGuardianappnamesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app name list
  appNames?: [ string ](name='app_names'),
}

/**
 * Description: 微服务-查询appName列表
 * Summary: 查询appName列表
 */
async function allGuardianGuardianappnames(request: AllGuardianGuardianappnamesRequest): AllGuardianGuardianappnamesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allGuardianGuardianappnamesEx(request, headers, runtime);
}

/**
 * Description: 微服务-查询appName列表
 * Summary: 查询appName列表
 */
async function allGuardianGuardianappnamesEx(request: AllGuardianGuardianappnamesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllGuardianGuardianappnamesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianappnames.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGuardianGuardianappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app name
  appName?: string(name='app_name'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 关键词
  keyword: string(name='keyword'),
  // 页大小
  pageSize: long(name='page_size'),
  // 起始索引
  start: long(name='start'),
}

model QueryGuardianGuardianappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 监控app列表
  guardianApps?: [ GuardianApp ](name='guardian_apps'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 微服务-分页查询app
 * Summary: 分页查询app
 */
async function queryGuardianGuardianapps(request: QueryGuardianGuardianappsRequest): QueryGuardianGuardianappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGuardianGuardianappsEx(request, headers, runtime);
}

/**
 * Description: 微服务-分页查询app
 * Summary: 分页查询app
 */
async function queryGuardianGuardianappsEx(request: QueryGuardianGuardianappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGuardianGuardianappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianapps.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetGuardianGuardianappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app name
  appName: string(name='app_name'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model GetGuardianGuardianappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 监控app实例
  guardianApp?: GuardianApp(name='guardian_app'),
}

/**
 * Description: ms -根据appName获取app
 * Summary: 根据appName获取app
 */
async function getGuardianGuardianapps(request: GetGuardianGuardianappsRequest): GetGuardianGuardianappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getGuardianGuardianappsEx(request, headers, runtime);
}

/**
 * Description: ms -根据appName获取app
 * Summary: 根据appName获取app
 */
async function getGuardianGuardianappsEx(request: GetGuardianGuardianappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetGuardianGuardianappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianapps.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddGuardianGuardianappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否可用
  enable: boolean(name='enable'),
  // 监控id
  id?: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 描述字段
  name: string(name='name'),
  // 运行模式
  runMode: string(name='run_mode'),
}

model AddGuardianGuardianappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功数
  result?: long(name='result'),
}

/**
 * Description: ms-添加 监控App
 * Summary: 添加 监控App
 */
async function addGuardianGuardianapps(request: AddGuardianGuardianappsRequest): AddGuardianGuardianappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addGuardianGuardianappsEx(request, headers, runtime);
}

/**
 * Description: ms-添加 监控App
 * Summary: 添加 监控App
 */
async function addGuardianGuardianappsEx(request: AddGuardianGuardianappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddGuardianGuardianappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianapps.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateGuardianGuardianappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否可用
  enable: boolean(name='enable'),
  // 监控id
  id: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 描述字段
  name: string(name='name'),
  // 运行模式
  runMode: string(name='run_mode'),
}

model UpdateGuardianGuardianappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功数
  result?: long(name='result'),
}

/**
 * Description: ws-更新监控app
 * Summary: 更新监控app
 */
async function updateGuardianGuardianapps(request: UpdateGuardianGuardianappsRequest): UpdateGuardianGuardianappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateGuardianGuardianappsEx(request, headers, runtime);
}

/**
 * Description: ws-更新监控app
 * Summary: 更新监控app
 */
async function updateGuardianGuardianappsEx(request: UpdateGuardianGuardianappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateGuardianGuardianappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianapps.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteGuardianGuardianappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否可用
  enable: boolean(name='enable'),
  // 监控id
  id: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 描述字段
  name: string(name='name'),
  // 运行模式
  runMode?: string(name='run_mode'),
}

model DeleteGuardianGuardianappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功数
  result?: long(name='result'),
}

/**
 * Description: ms- 删除监控 app
 * Summary: 删除监控 app
 */
async function deleteGuardianGuardianapps(request: DeleteGuardianGuardianappsRequest): DeleteGuardianGuardianappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteGuardianGuardianappsEx(request, headers, runtime);
}

/**
 * Description: ms- 删除监控 app
 * Summary: 删除监控 app
 */
async function deleteGuardianGuardianappsEx(request: DeleteGuardianGuardianappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteGuardianGuardianappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianapps.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGuardianGuardianrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app name
  appName: string(name='app_name'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 关键词
  keyword?: string(name='keyword'),
  // 页大小
  pageSize: string(name='page_size'),
  // 起始索引
  start: long(name='start'),
}

model QueryGuardianGuardianrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 监控规则列表
  guardianRules?: [ GuardianRule ](name='guardian_rules'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: ms - 规则配置分页
 * Summary: 规则配置分页
 */
async function queryGuardianGuardianrules(request: QueryGuardianGuardianrulesRequest): QueryGuardianGuardianrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGuardianGuardianrulesEx(request, headers, runtime);
}

/**
 * Description: ms - 规则配置分页
 * Summary: 规则配置分页
 */
async function queryGuardianGuardianrulesEx(request: QueryGuardianGuardianrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGuardianGuardianrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianrules.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetGuardianGuardianrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 规则id
  ruleId: long(name='rule_id'),
}

model GetGuardianGuardianrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 监控规则实例
  guardianRule?: GuardianRule(name='guardian_rule'),
}

/**
 * Description: ms-根据id获取规则
 * Summary: 根据id获取规则
 */
async function getGuardianGuardianrules(request: GetGuardianGuardianrulesRequest): GetGuardianGuardianrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getGuardianGuardianrulesEx(request, headers, runtime);
}

/**
 * Description: ms-根据id获取规则
 * Summary: 根据id获取规则
 */
async function getGuardianGuardianrulesEx(request: GetGuardianGuardianrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetGuardianGuardianrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianrules.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddGuardianGuardianrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app name
  appName: string(name='app_name'),
  // 是否可用
  enable: boolean(name='enable'),
  // 创建
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create'),
  // 更新
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified'),
  // 监控实例id
  id?: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 描述字段
  name: string(name='name'),
  // 编辑人
  operator?: string(name='operator'),
  // 资源类型
  resourceType: string(name='resource_type'),
  // 规则配置
  ruleConfig: string(name='rule_config'),
  // 运行模式
  runMode: string(name='run_mode'),
}

model AddGuardianGuardianrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功数
  result?: long(name='result'),
}

/**
 * Description: ms-添加规则
 * Summary: 添加规则
 */
async function addGuardianGuardianrules(request: AddGuardianGuardianrulesRequest): AddGuardianGuardianrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addGuardianGuardianrulesEx(request, headers, runtime);
}

/**
 * Description: ms-添加规则
 * Summary: 添加规则
 */
async function addGuardianGuardianrulesEx(request: AddGuardianGuardianrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddGuardianGuardianrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianrules.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateGuardianGuardianrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app name
  appName: string(name='app_name'),
  // 是否可用
  enable?: boolean(name='enable'),
  // 创建
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create'),
  // 更新
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified'),
  // 监控规则id
  id: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 描述字段
  name: string(name='name'),
  // 编辑人
  operator?: string(name='operator'),
  // 资源类型
  resourceType: string(name='resource_type'),
  // 规则配置
  ruleConfig: string(name='rule_config'),
  // 运行模式
  runMode: string(name='run_mode'),
}

model UpdateGuardianGuardianrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功数
  // 
  result?: long(name='result'),
}

/**
 * Description: ms-更新规则
 * Summary: 更新规则
 */
async function updateGuardianGuardianrules(request: UpdateGuardianGuardianrulesRequest): UpdateGuardianGuardianrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateGuardianGuardianrulesEx(request, headers, runtime);
}

/**
 * Description: ms-更新规则
 * Summary: 更新规则
 */
async function updateGuardianGuardianrulesEx(request: UpdateGuardianGuardianrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateGuardianGuardianrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianrules.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateGuardianGuardianrulestatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app name
  appName: string(name='app_name'),
  // 是否可用
  enable: boolean(name='enable'),
  // 创建
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create'),
  // 更新
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified'),
  // 监控规则id
  id: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 描述字段
  name?: string(name='name'),
  // 编辑人
  operator?: string(name='operator'),
  // 资源类型
  resourceType?: string(name='resource_type'),
  // 规则配置
  ruleConfig?: string(name='rule_config'),
  // 运行模式
  runMode?: string(name='run_mode'),
}

model UpdateGuardianGuardianrulestatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功数
  result?: long(name='result'),
}

/**
 * Description: ms-更新规则状态
 * Summary: 更新规则状态
 */
async function updateGuardianGuardianrulestatus(request: UpdateGuardianGuardianrulestatusRequest): UpdateGuardianGuardianrulestatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateGuardianGuardianrulestatusEx(request, headers, runtime);
}

/**
 * Description: ms-更新规则状态
 * Summary: 更新规则状态
 */
async function updateGuardianGuardianrulestatusEx(request: UpdateGuardianGuardianrulestatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateGuardianGuardianrulestatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianrulestatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteGuardianGuardianrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app name
  appName: string(name='app_name'),
  // 是否可用
  enable?: boolean(name='enable'),
  // 创建
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create'),
  // 更新
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified'),
  // 监控规则id
  id: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 描述字段
  name?: string(name='name'),
  // 编辑人
  operator?: string(name='operator'),
  // 资源类型
  resourceType?: string(name='resource_type'),
  // 规则配置
  ruleConfig?: string(name='rule_config'),
  // 运行模式
  runMode?: string(name='run_mode'),
}

model DeleteGuardianGuardianrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功数
  result?: long(name='result'),
}

/**
 * Description: ms-删除规则
 * Summary: 删除规则
 */
async function deleteGuardianGuardianrules(request: DeleteGuardianGuardianrulesRequest): DeleteGuardianGuardianrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteGuardianGuardianrulesEx(request, headers, runtime);
}

/**
 * Description: ms-删除规则
 * Summary: 删除规则
 */
async function deleteGuardianGuardianrulesEx(request: DeleteGuardianGuardianrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteGuardianGuardianrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianrules.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGuardianGuardianrulepushhistorysRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app name
  appName: string(name='app_name'),
  // 实例id
  instanceId: string(name='instance_id'),
  // keyword
  keyword?: string(name='keyword'),
  // 页大小
  pageSize: string(name='page_size'),
  // 起始索引
  start: long(name='start'),
}

model QueryGuardianGuardianrulepushhistorysResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 推送历史列表
  pushHistories?: [ PushHistory ](name='push_histories'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总页数
  totalSize?: long(name='total_size'),
}

/**
 * Description: ms-分页查询推送历史
 * Summary: 分页查询推送历史
 */
async function queryGuardianGuardianrulepushhistorys(request: QueryGuardianGuardianrulepushhistorysRequest): QueryGuardianGuardianrulepushhistorysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGuardianGuardianrulepushhistorysEx(request, headers, runtime);
}

/**
 * Description: ms-分页查询推送历史
 * Summary: 分页查询推送历史
 */
async function queryGuardianGuardianrulepushhistorysEx(request: QueryGuardianGuardianrulepushhistorysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGuardianGuardianrulepushhistorysResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianrulepushhistorys.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListGuardianGuardianrulepushhistorysRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 规则id
  ruleId: long(name='rule_id'),
}

model ListGuardianGuardianrulepushhistorysResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 规则配置
  ruleConfig?: string(name='rule_config'),
}

/**
 * Description: ms-查询推送历史
 * Summary: 查询推送历史
 */
async function listGuardianGuardianrulepushhistorys(request: ListGuardianGuardianrulepushhistorysRequest): ListGuardianGuardianrulepushhistorysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listGuardianGuardianrulepushhistorysEx(request, headers, runtime);
}

/**
 * Description: ms-查询推送历史
 * Summary: 查询推送历史
 */
async function listGuardianGuardianrulepushhistorysEx(request: ListGuardianGuardianrulepushhistorysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListGuardianGuardianrulepushhistorysResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianrulepushhistorys.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddGuardianGuardiangrayrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 监控规则
  guardianRule: string(name='guardian_rule'),
  // ip 列表
  ipList: string(name='ip_list'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model AddGuardianGuardiangrayrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: ms-灰度推送
 * Summary: 灰度推送
 */
async function addGuardianGuardiangrayrules(request: AddGuardianGuardiangrayrulesRequest): AddGuardianGuardiangrayrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addGuardianGuardiangrayrulesEx(request, headers, runtime);
}

/**
 * Description: ms-灰度推送
 * Summary: 灰度推送
 */
async function addGuardianGuardiangrayrulesEx(request: AddGuardianGuardiangrayrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddGuardianGuardiangrayrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardiangrayrules.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateGuardianGuardiangrayrulestatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // ip 列表
  ipList: string(name='ip_list'),
  // 规则id
  ruleId: long(name='rule_id'),
}

model UpdateGuardianGuardiangrayrulestatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: ms-更改规则灰度状态
 * Summary: 更改规则灰度状态
 */
async function updateGuardianGuardiangrayrulestatus(request: UpdateGuardianGuardiangrayrulestatusRequest): UpdateGuardianGuardiangrayrulestatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateGuardianGuardiangrayrulestatusEx(request, headers, runtime);
}

/**
 * Description: ms-更改规则灰度状态
 * Summary: 更改规则灰度状态
 */
async function updateGuardianGuardiangrayrulestatusEx(request: UpdateGuardianGuardiangrayrulestatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateGuardianGuardiangrayrulestatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardiangrayrulestatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllDrmDrmappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model AllDrmDrmappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app name list
  appNames?: [ string ](name='app_names'),
}

/**
 * Description: ms-查询实例App name
 * Summary: 查询实例App name
 */
async function allDrmDrmapps(request: AllDrmDrmappsRequest): AllDrmDrmappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allDrmDrmappsEx(request, headers, runtime);
}

/**
 * Description: ms-查询实例App name
 * Summary: 查询实例App name
 */
async function allDrmDrmappsEx(request: AllDrmDrmappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllDrmDrmappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmapps.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDrmDrmresourcesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app name
  appName?: string(name='app_name'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 关键词
  keyword?: string(name='keyword'),
  // 每页条数
  pageSize: long(name='page_size'),
  // 分页起始索引
  start: long(name='start'),
}

model QueryDrmDrmresourcesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // Drm资源列表
  drmResources?: [ DrmResource ](name='drm_resources'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: ms-分页查询Drm资源
 * Summary: 分页查询Drm资源
 */
async function queryDrmDrmresources(request: QueryDrmDrmresourcesRequest): QueryDrmDrmresourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDrmDrmresourcesEx(request, headers, runtime);
}

/**
 * Description: ms-分页查询Drm资源
 * Summary: 分页查询Drm资源
 */
async function queryDrmDrmresourcesEx(request: QueryDrmDrmresourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDrmDrmresourcesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmresources.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDrmDrmresourcesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app name
  appName: string(name='app_name'),
  // 资源属性列表
  attributes?: string(name='attributes'),
  // drm资源id
  id?: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 描述字段
  name?: string(name='name'),
  // 资源域
  region: string(name='region'),
  // 资源域和应用名
  resourceDomain?: string(name='resource_domain'),
  // 资源类路径
  resourceId: string(name='resource_id'),
  // 资源版本
  resourceVersion?: string(name='resource_version'),
  // type
  type?: string(name='type'),
}

model AddDrmDrmresourcesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功条数
  result?: long(name='result'),
}

/**
 * Description: ms-添加drm资源
 * Summary: 添加drm资源
 */
async function addDrmDrmresources(request: AddDrmDrmresourcesRequest): AddDrmDrmresourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDrmDrmresourcesEx(request, headers, runtime);
}

/**
 * Description: ms-添加drm资源
 * Summary: 添加drm资源
 */
async function addDrmDrmresourcesEx(request: AddDrmDrmresourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDrmDrmresourcesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmresources.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDrmDrmresourcesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app name
  appName?: string(name='app_name'),
  // drm资源id
  id: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 描述字段
  name?: string(name='name'),
  // 资源域
  region?: string(name='region'),
  // 资源域和应用名
  resourceDomain?: string(name='resource_domain'),
  // 资源类路径
  resourceId?: string(name='resource_id'),
  // 资源版本
  resourceVersion?: string(name='resource_version'),
  // type
  type?: string(name='type'),
}

model UpdateDrmDrmresourcesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 成功条数
  // 
  result?: long(name='result'),
}

/**
 * Description: ms-更新drm资源
 * Summary: 更新drm资源
 */
async function updateDrmDrmresources(request: UpdateDrmDrmresourcesRequest): UpdateDrmDrmresourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDrmDrmresourcesEx(request, headers, runtime);
}

/**
 * Description: ms-更新drm资源
 * Summary: 更新drm资源
 */
async function updateDrmDrmresourcesEx(request: UpdateDrmDrmresourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDrmDrmresourcesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmresources.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDrmDrmattributesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 属性名称
  attributeName: string(name='attribute_name'),
  // 服务id
  dataId?: string(name='data_id'),
  // 资源属性id
  id?: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 描述字段
  name?: string(name='name'),
  // 父节点数据
  parent?: string(name='parent'),
  // 父节点ID，冗余字段
  parentId: long(name='parent_id'),
}

model AddDrmDrmattributesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功数
  result?: long(name='result'),
}

/**
 * Description: ms-添加drm属性
 * Summary: 添加drm属性
 */
async function addDrmDrmattributes(request: AddDrmDrmattributesRequest): AddDrmDrmattributesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDrmDrmattributesEx(request, headers, runtime);
}

/**
 * Description: ms-添加drm属性
 * Summary: 添加drm属性
 */
async function addDrmDrmattributesEx(request: AddDrmDrmattributesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDrmDrmattributesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmattributes.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDrmDrmattributesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 属性名称
  attributeName: string(name='attribute_name'),
  // 资源id
  dataId?: string(name='data_id'),
  // 属性id
  id: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 描述字段
  name?: string(name='name'),
  // 父节点信息
  parent?: string(name='parent'),
  // 父节点ID，冗余字段
  parentId: long(name='parent_id'),
}

model UpdateDrmDrmattributesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功数
  // 
  result?: long(name='result'),
}

/**
 * Description: ms-更新drm资源属性
 * Summary: 更新drm资源属性
 */
async function updateDrmDrmattributes(request: UpdateDrmDrmattributesRequest): UpdateDrmDrmattributesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDrmDrmattributesEx(request, headers, runtime);
}

/**
 * Description: ms-更新drm资源属性
 * Summary: 更新drm资源属性
 */
async function updateDrmDrmattributesEx(request: UpdateDrmDrmattributesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDrmDrmattributesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmattributes.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDrmDrmresourcesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app name
  appName?: string(name='app_name'),
  // drm资源id
  id: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 描述字段
  name?: string(name='name'),
  // 资源域
  region?: string(name='region'),
  // 资源域和应用名
  resourceDomain?: string(name='resource_domain'),
  // 资源类路径
  resourceId?: string(name='resource_id'),
  // 资源版本
  resourceVersion?: string(name='resource_version'),
  // type
  type?: string(name='type'),
}

model DeleteDrmDrmresourcesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功数
  result?: long(name='result'),
}

/**
 * Description: ms-Delete resource
 * Summary: Delete resource
 */
async function deleteDrmDrmresources(request: DeleteDrmDrmresourcesRequest): DeleteDrmDrmresourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDrmDrmresourcesEx(request, headers, runtime);
}

/**
 * Description: ms-Delete resource
 * Summary: Delete resource
 */
async function deleteDrmDrmresourcesEx(request: DeleteDrmDrmresourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDrmDrmresourcesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmresources.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDrmDrmattributesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 属性名称
  attributeName?: string(name='attribute_name'),
  // 资源id
  dataId?: string(name='data_id'),
  // 属性id
  id: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 描述字段
  name?: string(name='name'),
  // 父节点信息
  parent?: string(name='parent'),
  // 父节点ID，冗余字段
  parentId?: string(name='parent_id'),
}

model DeleteDrmDrmattributesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功数
  result?: long(name='result'),
}

/**
 * Description: ms-删除drm资源属性
 * Summary: 删除drm资源属性
 */
async function deleteDrmDrmattributes(request: DeleteDrmDrmattributesRequest): DeleteDrmDrmattributesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDrmDrmattributesEx(request, headers, runtime);
}

/**
 * Description: ms-删除drm资源属性
 * Summary: 删除drm资源属性
 */
async function deleteDrmDrmattributesEx(request: DeleteDrmDrmattributesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDrmDrmattributesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmattributes.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDrmDrmattributesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model GetDrmDrmattributesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 资源属性
  drmAttribute?: DrmAttribute(name='drm_attribute'),
}

/**
 * Description: ms-获取drm资源属性
 * Summary: 获取drm资源属性
 */
async function getDrmDrmattributes(request: GetDrmDrmattributesRequest): GetDrmDrmattributesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDrmDrmattributesEx(request, headers, runtime);
}

/**
 * Description: ms-获取drm资源属性
 * Summary: 获取drm资源属性
 */
async function getDrmDrmattributesEx(request: GetDrmDrmattributesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDrmDrmattributesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmattributes.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDrmDrmclientsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 页大小
  pageSize: long(name='page_size'),
  // 起始索引
  start: long(name='start'),
}

model QueryDrmDrmclientsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 客户资料列表
  clientInfos?: [ ClientInfo ](name='client_infos'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: ms-搜索客户端信息
 * Summary: 搜索客户端信息
 */
async function queryDrmDrmclients(request: QueryDrmDrmclientsRequest): QueryDrmDrmclientsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDrmDrmclientsEx(request, headers, runtime);
}

/**
 * Description: ms-搜索客户端信息
 * Summary: 搜索客户端信息
 */
async function queryDrmDrmclientsEx(request: QueryDrmDrmclientsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDrmDrmclientsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmclients.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDrmDrmhostsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model QueryDrmDrmhostsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 客户端资料列表
  clientInfos?: [ ClientInfo ](name='client_infos'),
}

/**
 * Description: ms-搜索客户端信息
 * Summary: 搜索客户端信息
 */
async function queryDrmDrmhosts(request: QueryDrmDrmhostsRequest): QueryDrmDrmhostsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDrmDrmhostsEx(request, headers, runtime);
}

/**
 * Description: ms-搜索客户端信息
 * Summary: 搜索客户端信息
 */
async function queryDrmDrmhostsEx(request: QueryDrmDrmhostsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDrmDrmhostsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmhosts.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDrmDrmpushlogsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 页大小
  pageSize: long(name='page_size'),
  // 起始索引
  start: long(name='start'),
}

model ListDrmDrmpushlogsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // drm日志列表
  drmLogs?: [ DrmLog ](name='drm_logs'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: ms-分页搜索推送日志
 * Summary: 分页搜索推送日志
 */
async function listDrmDrmpushlogs(request: ListDrmDrmpushlogsRequest): ListDrmDrmpushlogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDrmDrmpushlogsEx(request, headers, runtime);
}

/**
 * Description: ms-分页搜索推送日志
 * Summary: 分页搜索推送日志
 */
async function listDrmDrmpushlogsEx(request: ListDrmDrmpushlogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDrmDrmpushlogsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmpushlogs.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDrmDrmpushlogsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资源标识
  dataId?: string(name='data_id'),
  // 时间结束
  endTime?: long(name='end_time'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 操作人
  operator?: string(name='operator'),
  // 页大小
  pageSize: long(name='page_size'),
  // 推送结果
  pushResult?: string(name='push_result'),
  // 起始索引
  start: long(name='start'),
  // 开始时间
  startTime?: long(name='start_time'),
}

model QueryDrmDrmpushlogsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // drm日志列表
  drmLogs?: [ DrmLog ](name='drm_logs'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: ms-按条件分页查询推送日志
 * Summary: 按条件分页查询推送日志
 */
async function queryDrmDrmpushlogs(request: QueryDrmDrmpushlogsRequest): QueryDrmDrmpushlogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDrmDrmpushlogsEx(request, headers, runtime);
}

/**
 * Description: ms-按条件分页查询推送日志
 * Summary: 按条件分页查询推送日志
 */
async function queryDrmDrmpushlogsEx(request: QueryDrmDrmpushlogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDrmDrmpushlogsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmpushlogs.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDrmDrmdataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资源标识
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 推送目标Cell列表,英文逗号隔开
  pushCells?: string(name='push_cells'),
  // 推送目标类型
  pushTargetType?: string(name='push_target_type'),
  // 数据值
  value?: string(name='value'),
}

model AddDrmDrmdataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: ms-推送drm配置
 * Summary: 推送drm配置
 */
async function addDrmDrmdata(request: AddDrmDrmdataRequest): AddDrmDrmdataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDrmDrmdataEx(request, headers, runtime);
}

/**
 * Description: ms-推送drm配置
 * Summary: 推送drm配置
 */
async function addDrmDrmdataEx(request: AddDrmDrmdataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDrmDrmdataResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmdata.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDrmDrmgraydataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资源ID
  dataId: string(name='data_id'),
  // 主机列表, 英文逗号隔开
  hosts: string(name='hosts'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 推送值
  value?: string(name='value'),
}

model AddDrmDrmgraydataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: ms-灰度推送数据
 * Summary: 灰度推送数据
 */
async function addDrmDrmgraydata(request: AddDrmDrmgraydataRequest): AddDrmDrmgraydataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDrmDrmgraydataEx(request, headers, runtime);
}

/**
 * Description: ms-灰度推送数据
 * Summary: 灰度推送数据
 */
async function addDrmDrmgraydataEx(request: AddDrmDrmgraydataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDrmDrmgraydataResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmgraydata.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllDrmDrmcellsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model AllDrmDrmcellsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspace下所有的cell信息
  cells?: [ string ](name='cells'),
}

/**
 * Description: ms-获取实例的单元格
 * Summary: 获取实例的单元格
 */
async function allDrmDrmcells(request: AllDrmDrmcellsRequest): AllDrmDrmcellsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allDrmDrmcellsEx(request, headers, runtime);
}

/**
 * Description: ms-获取实例的单元格
 * Summary: 获取实例的单元格
 */
async function allDrmDrmcellsEx(request: AllDrmDrmcellsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllDrmDrmcellsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmcells.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDrmDrmdatacellsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资源ID
  dataId: string(name='data_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model ListDrmDrmdatacellsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Drm数据单元信息
  drmDataCellInfo?: DrmDataCellInfo(name='drm_data_cell_info'),
}

/**
 * Description: ms-获取Drm数据单元信息
 * Summary: 获取Drm数据单元信息
 */
async function listDrmDrmdatacells(request: ListDrmDrmdatacellsRequest): ListDrmDrmdatacellsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDrmDrmdatacellsEx(request, headers, runtime);
}

/**
 * Description: ms-获取Drm数据单元信息
 * Summary: 获取Drm数据单元信息
 */
async function listDrmDrmdatacellsEx(request: ListDrmDrmdatacellsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDrmDrmdatacellsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmdatacells.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDrmDrmresourcetplsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app name
  appName: string(name='app_name'),
  // 属性列表
  attributes?: string(name='attributes'),
  // 描述
  desc?: string(name='desc'),
  // 所有单元中是否存在有特殊推送过值的单元
  hasInstance?: boolean(name='has_instance'),
  // 资源id
  id?: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 资源域
  region: string(name='region'),
  // 资源类路径
  resourceId: string(name='resource_id'),
  // tpl_id
  tplId?: long(name='tpl_id'),
}

model AddDrmDrmresourcetplsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功条数
  result?: long(name='result'),
}

/**
 * Description: ms-添加Tpl类型drm资源
 * Summary: 添加Tpl类型drm资源
 */
async function addDrmDrmresourcetpls(request: AddDrmDrmresourcetplsRequest): AddDrmDrmresourcetplsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDrmDrmresourcetplsEx(request, headers, runtime);
}

/**
 * Description: ms-添加Tpl类型drm资源
 * Summary: 添加Tpl类型drm资源
 */
async function addDrmDrmresourcetplsEx(request: AddDrmDrmresourcetplsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDrmDrmresourcetplsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmresourcetpls.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDrmDrmresourcetplsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app name
  appName: string(name='app_name'),
  // 资源属性列表
  attributes?: string(name='attributes'),
  // 描述
  desc?: string(name='desc'),
  // 所有单元中是否存在有特殊推送过值的单元
  hasInstance?: boolean(name='has_instance'),
  // drm资源id
  id: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 资源域
  region: string(name='region'),
  // 资源类路径
  resourceId: string(name='resource_id'),
  // tpl_id
  tplId?: long(name='tpl_id'),
}

model UpdateDrmDrmresourcetplsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功数
  result?: long(name='result'),
}

/**
 * Description: ms-更新Tpl类型drm资源
 * Summary: 更新Tpl类型drm资源
 */
async function updateDrmDrmresourcetpls(request: UpdateDrmDrmresourcetplsRequest): UpdateDrmDrmresourcetplsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDrmDrmresourcetplsEx(request, headers, runtime);
}

/**
 * Description: ms-更新Tpl类型drm资源
 * Summary: 更新Tpl类型drm资源
 */
async function updateDrmDrmresourcetplsEx(request: UpdateDrmDrmresourcetplsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDrmDrmresourcetplsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmresourcetpls.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDrmDrmresourcetplsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // tpl_id
  tplId?: long(name='tpl_id'),
}

model DeleteDrmDrmresourcetplsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功数
  result?: long(name='result'),
}

/**
 * Description: ms-删除Tpl类型drm资源
 * Summary: 删除Tpl类型drm资源
 */
async function deleteDrmDrmresourcetpls(request: DeleteDrmDrmresourcetplsRequest): DeleteDrmDrmresourcetplsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDrmDrmresourcetplsEx(request, headers, runtime);
}

/**
 * Description: ms-删除Tpl类型drm资源
 * Summary: 删除Tpl类型drm资源
 */
async function deleteDrmDrmresourcetplsEx(request: DeleteDrmDrmresourcetplsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDrmDrmresourcetplsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmresourcetpls.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDrmDrmresourcetplsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 搜索键
  searchKey?: string(name='search_key'),
  // 起始索引
  start?: long(name='start'),
}

model QueryDrmDrmresourcetplsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // Tpl类型drm资源列表
  drmResourceTpls?: [ DrmResourceTpl ](name='drm_resource_tpls'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: ms -分页查询Tpl类型drm资源
 * Summary: 分页查询Tpl类型drm资源
 */
async function queryDrmDrmresourcetpls(request: QueryDrmDrmresourcetplsRequest): QueryDrmDrmresourcetplsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDrmDrmresourcetplsEx(request, headers, runtime);
}

/**
 * Description: ms -分页查询Tpl类型drm资源
 * Summary: 分页查询Tpl类型drm资源
 */
async function queryDrmDrmresourcetplsEx(request: QueryDrmDrmresourcetplsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDrmDrmresourcetplsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmresourcetpls.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDrmDrmresourcetplinstancesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 资源信息列表
  params?: string(name='params'),
  // tpl id
  tplId?: long(name='tpl_id'),
}

model AddDrmDrmresourcetplinstancesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回成功数
  result?: long(name='result'),
}

/**
 * Description: ms -创建资源Tpl实例
 * Summary: 创建资源Tpl实例
 */
async function addDrmDrmresourcetplinstances(request: AddDrmDrmresourcetplinstancesRequest): AddDrmDrmresourcetplinstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDrmDrmresourcetplinstancesEx(request, headers, runtime);
}

/**
 * Description: ms -创建资源Tpl实例
 * Summary: 创建资源Tpl实例
 */
async function addDrmDrmresourcetplinstancesEx(request: AddDrmDrmresourcetplinstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDrmDrmresourcetplinstancesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmresourcetplinstances.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddRcSyncbucketRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否自动开启数据同步任务(默认不开启同步任务)
  autoStart: boolean(name='auto_start'),
  // 自己指定的生成集群任务的唯一 key，针对聚石塔的情况，与用户的环境一一映射(查询时使用)
  clusterTaskUniqueKey: string(name='cluster_task_unique_key'),
  // {  // 商户当前注册中心集群信息
  //     "type": "EUREKA",   // 集群类型
  //     "name": "xx_eureka", // 集群名字
  //     "vip": "11.22.33.44;12.33.44.1",   // 集群入口地址，可以是 vip；也可以是 ip 列表(多个用分号 ; 间隔)
  //     "extraParams": [{   //扩展参数，比如涉及到鉴权
  //       "key": "user",
  //       "value": "xx"
  //     }, {
  //       "key": "password",
  //       "value": "xx"
  //     }]
  //   }
  sourceCluster: string(name='source_cluster'),
  // {  // 商户当前注册中心集群信息
  //     "type": "EUREKA",   // 集群类型
  //     "name": "xx_eureka", // 集群名字
  //     "vip": "11.22.33.44;12.33.44.1",   // 集群入口地址，可以是 vip；也可以是 ip 列表(多个用分号 ; 间隔)
  //     "extraParams": [{   //扩展参数，比如涉及到鉴权
  //       "key": "user",
  //       "value": "xx"
  //     }, {
  //       "key": "password",
  //       "value": "xx"
  //     }]
  //   }
  targetCluster: string(name='target_cluster'),
  // 是否开启双向同步(默认单向：从 source_cluster -> target_cluster)，聚石塔中传为 true
  twoWaySync: boolean(name='two_way_sync'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model AddRcSyncbucketResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 一键创建集群同步任务结果
  data?: SyncBucketAddResult(name='data'),
}

/**
 * Description: 一键创建注册中心同步任务
 * Summary: 一键创建注册中心同步任务
 */
async function addRcSyncbucket(request: AddRcSyncbucketRequest): AddRcSyncbucketResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addRcSyncbucketEx(request, headers, runtime);
}

/**
 * Description: 一键创建注册中心同步任务
 * Summary: 一键创建注册中心同步任务
 */
async function addRcSyncbucketEx(request: AddRcSyncbucketRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddRcSyncbucketResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.rc.syncbucket.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRcSyncclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 集群同步唯一key
  clusterTaskUniqueKey: string(name='cluster_task_unique_key'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model QueryRcSyncclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 集群元信息
  data?: [ SyncCluster ](name='data'),
}

/**
 * Description: 查询注册中心同步集群信息
 * Summary: 查询注册中心同步集群信息
 */
async function queryRcSynccluster(request: QueryRcSyncclusterRequest): QueryRcSyncclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRcSyncclusterEx(request, headers, runtime);
}

/**
 * Description: 查询注册中心同步集群信息
 * Summary: 查询注册中心同步集群信息
 */
async function queryRcSyncclusterEx(request: QueryRcSyncclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRcSyncclusterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.rc.synccluster.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRcSynctaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 集群id
  clusterId: string(name='cluster_id'),
  // 集群任务唯一键
  clusterTaskUniqueKey: string(name='cluster_task_unique_key'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 任务类型，up 或者 down
  type: string(name='type'),
}

model QueryRcSynctaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 所有服务的同步状态信息
  data?: [ ServiceSyncStatus ](name='data'),
}

/**
 * Description: 查询集群同步任务信息
 * Summary: 查询集群同步任务信息
 */
async function queryRcSynctask(request: QueryRcSynctaskRequest): QueryRcSynctaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRcSynctaskEx(request, headers, runtime);
}

/**
 * Description: 查询集群同步任务信息
 * Summary: 查询集群同步任务信息
 */
async function queryRcSynctaskEx(request: QueryRcSynctaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRcSynctaskResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.rc.synctask.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRcSyncdataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 服务id
  serviceId: string(name='service_id'),
}

model QueryRcSyncdataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询某个服务具体同步的数据
  data?: [ SyncData ](name='data'),
}

/**
 * Description: 查询某个服务具体同步的数据
 * Summary: 查询某个服务具体同步的数据
 */
async function queryRcSyncdata(request: QueryRcSyncdataRequest): QueryRcSyncdataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRcSyncdataEx(request, headers, runtime);
}

/**
 * Description: 查询某个服务具体同步的数据
 * Summary: 查询某个服务具体同步的数据
 */
async function queryRcSyncdataEx(request: QueryRcSyncdataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRcSyncdataResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.rc.syncdata.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartRcSynctaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 自己指定的生成集群任务的唯一 key，针对聚石塔的情况，与用户的环境一一映射
  clusterTaskUniqueKey: string(name='cluster_task_unique_key'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model StartRcSynctaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 开启任务
 * Summary: 开启任务
 */
async function startRcSynctask(request: StartRcSynctaskRequest): StartRcSynctaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startRcSynctaskEx(request, headers, runtime);
}

/**
 * Description: 开启任务
 * Summary: 开启任务
 */
async function startRcSynctaskEx(request: StartRcSynctaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartRcSynctaskResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.rc.synctask.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StopRcSynctaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 自己指定的生成集群任务的唯一 key，针对聚石塔的情况，与用户的环境一一映射
  clusterTaskUniqueKey: string(name='cluster_task_unique_key'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model StopRcSynctaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 停止任务
 * Summary: 停止任务
 */
async function stopRcSynctask(request: StopRcSynctaskRequest): StopRcSynctaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return stopRcSynctaskEx(request, headers, runtime);
}

/**
 * Description: 停止任务
 * Summary: 停止任务
 */
async function stopRcSynctaskEx(request: StopRcSynctaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopRcSynctaskResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.rc.synctask.stop', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExportDrmDrmresourcesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ExportDrmDrmresourcesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 下载地址
  downloadUrl?: string(name='download_url'),
}

/**
 * Description: 当前workspace下所有资源元信息
 * Summary: 导出资源
 */
async function exportDrmDrmresources(request: ExportDrmDrmresourcesRequest): ExportDrmDrmresourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return exportDrmDrmresourcesEx(request, headers, runtime);
}

/**
 * Description: 当前workspace下所有资源元信息
 * Summary: 导出资源
 */
async function exportDrmDrmresourcesEx(request: ExportDrmDrmresourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExportDrmDrmresourcesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmresources.export', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportDrmDrmresourcesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 上传类型。
  // data 表示上传带有推送值，空表示只传元数据
  uploadType?: string(name='upload_type'),
  // oss 上下载的地址
  fileName: string(name='file_name'),
}

model ImportDrmDrmresourcesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 导入结果
  importResult?: string(name='import_result'),
}

/**
 * Description: 导入drm资源元信息
 * Summary: 导入drm资源元信息
 */
async function importDrmDrmresources(request: ImportDrmDrmresourcesRequest): ImportDrmDrmresourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importDrmDrmresourcesEx(request, headers, runtime);
}

/**
 * Description: 导入drm资源元信息
 * Summary: 导入drm资源元信息
 */
async function importDrmDrmresourcesEx(request: ImportDrmDrmresourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportDrmDrmresourcesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmresources.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportGuardianGuardianrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName: string(name='app_name'),
  // 文件名
  fileName: string(name='file_name'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ImportGuardianGuardianrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 导入结果
  importResult?: string(name='import_result'),
}

/**
 * Description: 导入guardian规则
 * Summary: 导入guardian规则
 */
async function importGuardianGuardianrules(request: ImportGuardianGuardianrulesRequest): ImportGuardianGuardianrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importGuardianGuardianrulesEx(request, headers, runtime);
}

/**
 * Description: 导入guardian规则
 * Summary: 导入guardian规则
 */
async function importGuardianGuardianrulesEx(request: ImportGuardianGuardianrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportGuardianGuardianrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianrules.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExportGuardianGuardianrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appName: string(name='app_name'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ExportGuardianGuardianrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 下载地址
  downloadUrl?: string(name='download_url'),
}

/**
 * Description: 导出guardian路由规则
 * Summary: 导出guardian路由规则
 */
async function exportGuardianGuardianrules(request: ExportGuardianGuardianrulesRequest): ExportGuardianGuardianrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return exportGuardianGuardianrulesEx(request, headers, runtime);
}

/**
 * Description: 导出guardian路由规则
 * Summary: 导出guardian路由规则
 */
async function exportGuardianGuardianrulesEx(request: ExportGuardianGuardianrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExportGuardianGuardianrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.guardian.guardianrules.export', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDrmUploadurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 文件名
  fileName: string(name='file_name'),
  // 上传类型
  type: string(name='type'),
}

model GetDrmUploadurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传地址
  url?: string(name='url'),
}

/**
 * Description: 获取上传地址
 * Summary: 获取上传地址
 */
async function getDrmUploadurl(request: GetDrmUploadurlRequest): GetDrmUploadurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDrmUploadurlEx(request, headers, runtime);
}

/**
 * Description: 获取上传地址
 * Summary: 获取上传地址
 */
async function getDrmUploadurlEx(request: GetDrmUploadurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDrmUploadurlResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.uploadurl.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackSpiOmsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据
  data: string(name='data'),
}

model CallbackSpiOmsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回吗
  code?: string(name='code'),
  // data
  data?: string(name='data'),
  // message
  message?: string(name='message'),
  // success
  success?: boolean(name='success'),
  // synchro
  synchro?: string(name='synchro'),
}

/**
 * Description: 南天门计费回调
 * Summary: 南天门计费回调
 */
async function callbackSpiOms(request: CallbackSpiOmsRequest): CallbackSpiOmsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackSpiOmsEx(request, headers, runtime);
}

/**
 * Description: 南天门计费回调
 * Summary: 南天门计费回调
 */
async function callbackSpiOmsEx(request: CallbackSpiOmsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackSpiOmsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.spi.oms.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllDrmDrmldccellsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
}

model AllDrmDrmldccellsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否是LDC
  isLdc?: boolean(name='is_ldc'),
  // 如果不是LDC返回cells名称列表
  oldCells?: [ string ](name='old_cells'),
  // 如果是LDC单元反回name和type信息
  newCells?: [ CellLdcInfo ](name='new_cells'),
}

/**
 * Description: ms-查询实例下所有cells
 * Summary: 查询实例下所有cells
 */
async function allDrmDrmldccells(request: AllDrmDrmldccellsRequest): AllDrmDrmldccellsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allDrmDrmldccellsEx(request, headers, runtime);
}

/**
 * Description: ms-查询实例下所有cells
 * Summary: 查询实例下所有cells
 */
async function allDrmDrmldccellsEx(request: AllDrmDrmldccellsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllDrmDrmldccellsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.drm.drmldccells.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OfflineSgServicepublishersRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 下线的机器IP列表,英文逗号隔开
  ips: string(name='ips'),
}

model OfflineSgServicepublishersResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 提供给 paas 平台，发布时先调用下线接口，再发布
 * Summary: 服务下线接口
 */
async function offlineSgServicepublishers(request: OfflineSgServicepublishersRequest): OfflineSgServicepublishersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return offlineSgServicepublishersEx(request, headers, runtime);
}

/**
 * Description: 提供给 paas 平台，发布时先调用下线接口，再发布
 * Summary: 服务下线接口
 */
async function offlineSgServicepublishersEx(request: OfflineSgServicepublishersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineSgServicepublishersResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.servicepublishers.offline', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteRcSynctaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // cluster_task_unique_key
  clusterTaskUniqueKey: string(name='cluster_task_unique_key'),
  // instance_id
  instanceId: string(name='instance_id'),
}

model DeleteRcSynctaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除任务
 * Summary: 删除任务
 */
async function deleteRcSynctask(request: DeleteRcSynctaskRequest): DeleteRcSynctaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteRcSynctaskEx(request, headers, runtime);
}

/**
 * Description: 删除任务
 * Summary: 删除任务
 */
async function deleteRcSynctaskEx(request: DeleteRcSynctaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteRcSynctaskResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.rc.synctask.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgDowngradegroupsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称
  appName?: string(name='app_name'),
  // 降级服务
  downgradeService?: string(name='downgrade_service'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 页码
  pageNum?: long(name='page_num'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 规则名称
  ruleName?: string(name='rule_name'),
}

model QuerySgDowngradegroupsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 降级规则组列表
  downgradeRuleGroups?: [ DowngradeRuleGroupVo ](name='downgrade_rule_groups'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 查询降级规则组列表
 * Summary: 查询降级规则组列表
 */
async function querySgDowngradegroups(request: QuerySgDowngradegroupsRequest): QuerySgDowngradegroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgDowngradegroupsEx(request, headers, runtime);
}

/**
 * Description: 查询降级规则组列表
 * Summary: 查询降级规则组列表
 */
async function querySgDowngradegroupsEx(request: QuerySgDowngradegroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgDowngradegroupsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.downgradegroups.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSgDowngradesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 降级规则id
  ruleId: string(name='rule_id'),
}

model DeleteSgDowngradesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除降级规则
 * Summary: 删除降级规则
 */
async function deleteSgDowngrades(request: DeleteSgDowngradesRequest): DeleteSgDowngradesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSgDowngradesEx(request, headers, runtime);
}

/**
 * Description: 删除降级规则
 * Summary: 删除降级规则
 */
async function deleteSgDowngradesEx(request: DeleteSgDowngradesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSgDowngradesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.downgrades.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSgDowngradesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 处理动作 (返回为空 返回错误)
  strategy: string(name='strategy'),
  // 应用名称
  appName: string(name='app_name'),
  // 降级方法
  downgradeMethod: string(name='downgrade_method'),
  // 降级服务
  downgradeService: string(name='downgrade_service'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 运行模式
  mode: string(name='mode'),
  // 规则名称
  ruleName: string(name='rule_name'),
}

model AddSgDowngradesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增降级规则
 * Summary: 新增降级规则
 */
async function addSgDowngrades(request: AddSgDowngradesRequest): AddSgDowngradesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSgDowngradesEx(request, headers, runtime);
}

/**
 * Description: 新增降级规则
 * Summary: 新增降级规则
 */
async function addSgDowngradesEx(request: AddSgDowngradesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSgDowngradesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.downgrades.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgDowngradesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 降级规则组id
  groupId: long(name='group_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 降级规则id
  ruleId: long(name='rule_id'),
  // 应用名称
  appName: string(name='app_name'),
  // 降级服务
  downgradeService: string(name='downgrade_service'),
  // 规则名称
  ruleName: string(name='rule_name'),
  // 降级方法
  downgradeMethod: string(name='downgrade_method'),
  // 运行模式
  mode: string(name='mode'),
  // 处理动作 (返回为空 返回错误)
  strategy: string(name='strategy'),
}

model UpdateSgDowngradesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新降级规则
 * Summary: 更新降级规则
 */
async function updateSgDowngrades(request: UpdateSgDowngradesRequest): UpdateSgDowngradesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgDowngradesEx(request, headers, runtime);
}

/**
 * Description: 更新降级规则
 * Summary: 更新降级规则
 */
async function updateSgDowngradesEx(request: UpdateSgDowngradesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgDowngradesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.downgrades.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableSgDowngradegroupsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 降级规则组id
  groupId: long(name='group_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model EnableSgDowngradegroupsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 全局开启降级规则
 * Summary: 全局开启降级规则
 */
async function enableSgDowngradegroups(request: EnableSgDowngradegroupsRequest): EnableSgDowngradegroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableSgDowngradegroupsEx(request, headers, runtime);
}

/**
 * Description: 全局开启降级规则
 * Summary: 全局开启降级规则
 */
async function enableSgDowngradegroupsEx(request: EnableSgDowngradegroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableSgDowngradegroupsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.downgradegroups.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DisableSgDowngradegroupsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 降级规则组id
  groupId: long(name='group_id'),
}

model DisableSgDowngradegroupsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 全局关闭降级规则
 * Summary: 全局关闭降级规则
 */
async function disableSgDowngradegroups(request: DisableSgDowngradegroupsRequest): DisableSgDowngradegroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return disableSgDowngradegroupsEx(request, headers, runtime);
}

/**
 * Description: 全局关闭降级规则
 * Summary: 全局关闭降级规则
 */
async function disableSgDowngradegroupsEx(request: DisableSgDowngradegroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableSgDowngradegroupsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.downgradegroups.disable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableSgDowngradesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 降级规则id
  ruleId: long(name='rule_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model EnableSgDowngradesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 开启一条降级规则
 * Summary: 开启一条降级规则
 */
async function enableSgDowngrades(request: EnableSgDowngradesRequest): EnableSgDowngradesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableSgDowngradesEx(request, headers, runtime);
}

/**
 * Description: 开启一条降级规则
 * Summary: 开启一条降级规则
 */
async function enableSgDowngradesEx(request: EnableSgDowngradesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableSgDowngradesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.downgrades.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DisableSgDowngradesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 降级规则id
  ruleId: long(name='rule_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model DisableSgDowngradesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 关闭一条降级规则
 * Summary: 关闭一条降级规则
 */
async function disableSgDowngrades(request: DisableSgDowngradesRequest): DisableSgDowngradesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return disableSgDowngradesEx(request, headers, runtime);
}

/**
 * Description: 关闭一条降级规则
 * Summary: 关闭一条降级规则
 */
async function disableSgDowngradesEx(request: DisableSgDowngradesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableSgDowngradesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.downgrades.disable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableSgCircuitbreakerrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 熔断规则id
  id: string(name='id'),
  // 租户id
  instanceId: string(name='instance_id'),
  // 生效
  status: long(name='status'),
}

model EnableSgCircuitbreakerrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 影响行数
  result?: long(name='result'),
}

/**
 * Description: 生效熔断规则
 * Summary: 生效熔断规则
 */
async function enableSgCircuitbreakerrules(request: EnableSgCircuitbreakerrulesRequest): EnableSgCircuitbreakerrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableSgCircuitbreakerrulesEx(request, headers, runtime);
}

/**
 * Description: 生效熔断规则
 * Summary: 生效熔断规则
 */
async function enableSgCircuitbreakerrulesEx(request: EnableSgCircuitbreakerrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableSgCircuitbreakerrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.circuitbreakerrules.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySgCircuitbreakerrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务资源id
  dataId: string(name='data_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 排序规则，JSON字符串,，数组形式
  orders?: string(name='orders'),
  // 分页大小
  pageSize: long(name='page_size'),
  // 当前页
  start: long(name='start'),
}

model QuerySgCircuitbreakerrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 结果信息
  ruleModels?: [ CircuitBreakerRuleModel ](name='rule_models'),
  // 开始索引
  startIndex?: long(name='start_index'),
  // 总服务资源数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 根据实例id和服务id获取所有荣富安规则
 * Summary: 熔断规则查询
 */
async function querySgCircuitbreakerrules(request: QuerySgCircuitbreakerrulesRequest): QuerySgCircuitbreakerrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySgCircuitbreakerrulesEx(request, headers, runtime);
}

/**
 * Description: 根据实例id和服务id获取所有荣富安规则
 * Summary: 熔断规则查询
 */
async function querySgCircuitbreakerrulesEx(request: QuerySgCircuitbreakerrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySgCircuitbreakerrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.circuitbreakerrules.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgCircuitbreakerrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称，数组形式
  appNames?: string(name='app_names'),
  // 服务id
  dataId?: string(name='data_id'),
  // 租户id
  instanceId: string(name='instance_id'),
  // 	
  // 熔断模式，目前有OBSERVER和REJECT两种
  mode?: string(name='mode'),
  // 排序规则，JSON字符串
  orders?: string(name='orders'),
  // 分页大小
  pageSize: long(name='page_size'),
  // 当前页
  start: long(name='start'),
  // 生效状态，0为不生效，1为生效
  status?: long(name='status'),
}

model ListSgCircuitbreakerrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 熔断规则结果
  ruleModels?: [ CircuitBreakerRuleResult ](name='rule_models'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总服务个数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 获取租户下服务熔断规则
 * Summary: 服务熔断查询
 */
async function listSgCircuitbreakerrules(request: ListSgCircuitbreakerrulesRequest): ListSgCircuitbreakerrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgCircuitbreakerrulesEx(request, headers, runtime);
}

/**
 * Description: 获取租户下服务熔断规则
 * Summary: 服务熔断查询
 */
async function listSgCircuitbreakerrulesEx(request: ListSgCircuitbreakerrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgCircuitbreakerrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.circuitbreakerrules.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgCircuitbreakerrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称
  appNames: string(name='app_names'),
  // 熔断规则配置  [{
  //         "ruleType": "",//熔断规则类型 ce,crt,pe,prt(c代表消费方,p代表服务方,e代表错误率,rt响应时间)
  //         "configs": {
  //             "errorPercentThreshold": 50,//请求错误率阈值
  //             "requestVolumeThreshold": 100,//请求数阈值
  //             "averageRtThreshold":50,//平均RT阈值
  //             "providerTimeout": 100,//服务超时时间
  //             "sleepWindow": 10000,//熔断时间段
  //             "totalMetricWindow": 60,//熔断指标窗口
  //             "codeType": "error/success",
  //             "codes": [
  //                 "200",
  //                 "201",
  //                 "202"
  //             ]
  //         },
  //         "trafficConditions": [{
  //             "field": "sourceApp",//sourceApp,trafficType(此时value取online,test),header
  //             "operation": "EQUAL",//EQUAL,NOT_EQUAL,IN,NOT_IN,REGEX
  //             "type": "system",//system,tracer,header_info
  //             "value": [//当field取trafficType时value取online,test
  //                 "cloudinc"
  //             ]
  //         }],
  //         "action": {
  //             "type": "REJECT/PASS"
  //         }
  //     }]
  circuitBreakerRuleItems?: string(name='circuit_breaker_rule_items'),
  // 生效条件，JSON数组
  conditions?: string(name='conditions'),
  // 熔断配置
  config?: string(name='config'),
  // 资源id
  dataId: string(name='data_id'),
  // 当service_type的值为SPRINGCLOUD时必传，值取(GET、POST、PUT、DELETE)，后端拼接到trafficConditions中
  httpMethod?: string(name='http_method'),
  // 当service_type的值为SPRINGCLOUD时必传，后端拼接到trafficConditions中
  httpPath?: string(name='http_path'),
  // 	
  // 熔断规则id
  id: long(name='id'),
  // 租户id
  instanceId: string(name='instance_id'),
  // 方法名称，当service_type的值为SPRINGCLOUD时不传
  methodName?: string(name='method_name'),
  // 熔断规则运行模式
  mode?: string(name='mode'),
  // 规则名
  name?: string(name='name'),
  // 资源标识，资源格式是serviceId:trafficType:resType
  resource?: string(name='resource'),
  // res的type,组成resource，取值r-rpc(默认), g-gateway, q-mq
  resType?: string(name='res_type'),
  // 取值i-inbound, o-outbound,组成resource的部分
  // i代表服务端，o代表消费端
  trafficType?: string(name='traffic_type'),
}

model UpdateSgCircuitbreakerrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 影响行数
  result?: long(name='result'),
}

/**
 * Description: 更新熔断规则
 * Summary: 更新熔断规则
 */
async function updateSgCircuitbreakerrules(request: UpdateSgCircuitbreakerrulesRequest): UpdateSgCircuitbreakerrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgCircuitbreakerrulesEx(request, headers, runtime);
}

/**
 * Description: 更新熔断规则
 * Summary: 更新熔断规则
 */
async function updateSgCircuitbreakerrulesEx(request: UpdateSgCircuitbreakerrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgCircuitbreakerrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.circuitbreakerrules.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSgCircuitbreakerrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 熔断规则id
  id: string(name='id'),
  // 租户id
  instanceId: string(name='instance_id'),
}

model DeleteSgCircuitbreakerrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 影响行数
  result?: long(name='result'),
}

/**
 * Description: 删除熔断规则
 * Summary: 删除熔断规则
 */
async function deleteSgCircuitbreakerrules(request: DeleteSgCircuitbreakerrulesRequest): DeleteSgCircuitbreakerrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSgCircuitbreakerrulesEx(request, headers, runtime);
}

/**
 * Description: 删除熔断规则
 * Summary: 删除熔断规则
 */
async function deleteSgCircuitbreakerrulesEx(request: DeleteSgCircuitbreakerrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSgCircuitbreakerrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.circuitbreakerrules.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSgCircuitbreakerrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  appNames: string(name='app_names'),
  // 熔断配置信息，json串。例: [{
  //         "ruleType": "",//熔断规则类型 ce,crt,pe,prt(c代表消费方,p代表服务方,e代表错误率,rt响应时间)
  //         "configs": {
  //             "errorPercentThreshold": 50,//请求错误率阈值
  //             "requestVolumeThreshold": 100,//请求数阈值
  //             "averageRtThreshold":50,//平均RT阈值
  //             "providerTimeout": 100,//服务超时时间
  //             "sleepWindow": 10000,//熔断时间段
  //             "totalMetricWindow": 60,//熔断指标窗口
  //             "codeType": "error/success",
  //             "codes": [
  //                 "200",
  //                 "201",
  //                 "202"
  //             ]
  //         },
  //         "trafficConditions": [{
  //             "field": "sourceApp",//sourceApp,trafficType(此时value取online,test),header
  //             "operation": "EQUAL",//EQUAL,NOT_EQUAL,IN,NOT_IN,REGEX
  //             "type": "system",//system,tracer,header_info
  //             "value": [//当field取trafficType时value取online,test
  //                 "cloudinc"
  //             ]
  //         }],
  //         "action": {
  //             "type": "REJECT/PASS"
  //         }
  //     }]
  circuitBreakerRuleItems?: string(name='circuit_breaker_rule_items'),
  // 生效场景
  conditions?: string(name='conditions'),
  // 熔断规则
  config?: string(name='config'),
  // 服务id
  dataId: string(name='data_id'),
  // 当service_type的值为SPRINGCLOUD时必传，后端拼接到trafficCondition中。
  // 取值范围(GET,POST,PUT,DELETE)
  httpMethod?: string(name='http_method'),
  // http的路径值，当service_type的值为SPRINGCLOUD时必填,后端拼接到trafficCondition中
  httpPath?: string(name='http_path'),
  // 租户id
  instanceId: string(name='instance_id'),
  // 方法名称，"*"代表全部方法,当serviceType为SPRINGCLOUD时不传
  methodName?: string(name='method_name'),
  // 运行模式
  mode?: string(name='mode'),
  // 规则名
  name: string(name='name'),
  // 资源标识，资源格式是serviceId:trafficType:resType
  resource?: string(name='resource'),
  // resType，resource组成的一部分
  // r-rpc(默认), g-gateway, q-mq
  resType?: string(name='res_type'),
  // serviceType，取值(SPRINGCLOUD,SOFA,DUBBO)
  serviceType?: string(name='service_type'),
  // 流量方法(o-outbind消费端,i-inbind服务端)
  trafficType?: string(name='traffic_type'),
}

model AddSgCircuitbreakerrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 影响行数
  result?: long(name='result'),
}

/**
 * Description: 添加熔断规则
 * Summary: 添加熔断规则
 */
async function addSgCircuitbreakerrules(request: AddSgCircuitbreakerrulesRequest): AddSgCircuitbreakerrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSgCircuitbreakerrulesEx(request, headers, runtime);
}

/**
 * Description: 添加熔断规则
 * Summary: 添加熔断规则
 */
async function addSgCircuitbreakerrulesEx(request: AddSgCircuitbreakerrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSgCircuitbreakerrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.circuitbreakerrules.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetSgCircuitbreakerrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务id
  dataId: string(name='data_id'),
  // 规则id
  id: string(name='id'),
  // 租户id
  instanceId: string(name='instance_id'),
  // 运行模式
  mode: string(name='mode'),
}

model SetSgCircuitbreakerrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 影响行数
  result?: long(name='result'),
}

/**
 * Description: 设置熔断规则运行模式
 * Summary: 设置熔断规则运行模式
 */
async function setSgCircuitbreakerrules(request: SetSgCircuitbreakerrulesRequest): SetSgCircuitbreakerrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setSgCircuitbreakerrulesEx(request, headers, runtime);
}

/**
 * Description: 设置熔断规则运行模式
 * Summary: 设置熔断规则运行模式
 */
async function setSgCircuitbreakerrulesEx(request: SetSgCircuitbreakerrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetSgCircuitbreakerrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.circuitbreakerrules.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitRcSyncclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 集群唯一表示，大部分情况下等于 instanceId
  clusterTaskUniqueKey: string(name='cluster_task_unique_key'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 新的集群信息.
  // { // 商户当前注册中心集群信息 "type": "EUREKA", // 集群类型 "name": "xx_eureka", // 集群名字 "vip": "11.22.33.44;12.33.44.1", // 集群入口地址，可以是 vip；也可以是 ip 列表(多个用分号 ; 间隔) "extraParams": [{ //扩展参数，比如涉及到鉴权 "key": "user", "value": "xx" }, { "key": "password", "value": "xx" }] }
  newCluster: string(name='new_cluster'),
  // 是否允许集群切换
  replaceClusterEnabled: string(name='replace_cluster_enabled'),
}

model ReinitRcSyncclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 重新初始化注册中心同步集群信息
 * Summary: 重新初始化注册中心同步集群信息
 */
async function reinitRcSynccluster(request: ReinitRcSyncclusterRequest): ReinitRcSyncclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitRcSyncclusterEx(request, headers, runtime);
}

/**
 * Description: 重新初始化注册中心同步集群信息
 * Summary: 重新初始化注册中心同步集群信息
 */
async function reinitRcSyncclusterEx(request: ReinitRcSyncclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitRcSyncclusterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.rc.synccluster.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddTransparentproxyNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称
  appName: string(name='app_name'),
  // 租户实例 ID
  instanceId: string(name='instance_id'),
  // 节点列表
  nodes: string(name='nodes'),
}

model AddTransparentproxyNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 在指定应用上添加透明劫持节点。
 * Summary: 添加透明劫持节点
 */
async function addTransparentproxyNode(request: AddTransparentproxyNodeRequest): AddTransparentproxyNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addTransparentproxyNodeEx(request, headers, runtime);
}

/**
 * Description: 在指定应用上添加透明劫持节点。
 * Summary: 添加透明劫持节点
 */
async function addTransparentproxyNodeEx(request: AddTransparentproxyNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddTransparentproxyNodeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.transparentproxy.node.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteTransparentproxyAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用 ID
  appId: long(name='app_id'),
  // 租户实例 ID
  instanceId: string(name='instance_id'),
}

model DeleteTransparentproxyAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 根据应用 ID，删除对应的透明劫持应用。
 * Summary: 删除透明劫持应用
 */
async function deleteTransparentproxyApp(request: DeleteTransparentproxyAppRequest): DeleteTransparentproxyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteTransparentproxyAppEx(request, headers, runtime);
}

/**
 * Description: 根据应用 ID，删除对应的透明劫持应用。
 * Summary: 删除透明劫持应用
 */
async function deleteTransparentproxyAppEx(request: DeleteTransparentproxyAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTransparentproxyAppResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.transparentproxy.app.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTransparentproxyAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称（模糊匹配）
  appName?: string(name='app_name'),
  // 租户实例 ID
  instanceId: string(name='instance_id'),
  // 页码
  pageNum?: long(name='page_num'),
  // 页大小
  pageSize?: long(name='page_size'),
}

model QueryTransparentproxyAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 应用列表
  list?: [ TransparentProxyAppVo ](name='list'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 开始位置
  startIndex?: long(name='start_index'),
  // 总数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 查询指定环境下服务治理中的透明劫持应用列表。
 * Summary: 服务治理透明劫持应用列表
 */
async function queryTransparentproxyApp(request: QueryTransparentproxyAppRequest): QueryTransparentproxyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTransparentproxyAppEx(request, headers, runtime);
}

/**
 * Description: 查询指定环境下服务治理中的透明劫持应用列表。
 * Summary: 服务治理透明劫持应用列表
 */
async function queryTransparentproxyAppEx(request: QueryTransparentproxyAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTransparentproxyAppResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.transparentproxy.app.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTransparentproxyConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 透明劫持配置
  appConfig: string(name='app_config'),
  // 应用名称
  appName: string(name='app_name'),
  // 租户实例 ID
  instanceId: string(name='instance_id'),
}

model UpdateTransparentproxyConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 根据应用名与实例 ID，配置指定应用的透明劫持参数。
 * Summary: 透明劫持规则配置
 */
async function updateTransparentproxyConfig(request: UpdateTransparentproxyConfigRequest): UpdateTransparentproxyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTransparentproxyConfigEx(request, headers, runtime);
}

/**
 * Description: 根据应用名与实例 ID，配置指定应用的透明劫持参数。
 * Summary: 透明劫持规则配置
 */
async function updateTransparentproxyConfigEx(request: UpdateTransparentproxyConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTransparentproxyConfigResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.transparentproxy.config.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTransparentproxyLogRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称
  appName: string(name='app_name'),
  // 租户实例 ID
  instanceId: string(name='instance_id'),
  // 修改人姓名
  modifyName?: string(name='modify_name'),
  // 页码
  pageNum?: long(name='page_num'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 排序策略，默认为 desc
  timeSort?: string(name='time_sort'),
}

model QueryTransparentproxyLogResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 日志列表
  list?: [ TransparentProxyOperatorLogVo ](name='list'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 起始位置
  startIndex?: long(name='start_index'),
  // 总数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 根据应用名与实例 ID，查询指定应用的透明劫持应用治理日志。
 * Summary: 查询透明劫持应用治理日志
 */
async function queryTransparentproxyLog(request: QueryTransparentproxyLogRequest): QueryTransparentproxyLogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTransparentproxyLogEx(request, headers, runtime);
}

/**
 * Description: 根据应用名与实例 ID，查询指定应用的透明劫持应用治理日志。
 * Summary: 查询透明劫持应用治理日志
 */
async function queryTransparentproxyLogEx(request: QueryTransparentproxyLogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTransparentproxyLogResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.transparentproxy.log.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddTransparentproxyAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称
  appName: string(name='app_name'),
  // 租户实例 ID
  instanceId: string(name='instance_id'),
  // 包含的节点
  nodes?: string(name='nodes'),
  // 支持的协议
  supportProtocols: string(name='support_protocols'),
}

model AddTransparentproxyAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用结构体
  data?: TransparentProxyAppVo(name='data'),
}

/**
 * Description: 添加一个透明劫持应用。
 * Summary: 添加透明劫持应用
 */
async function addTransparentproxyApp(request: AddTransparentproxyAppRequest): AddTransparentproxyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addTransparentproxyAppEx(request, headers, runtime);
}

/**
 * Description: 添加一个透明劫持应用。
 * Summary: 添加透明劫持应用
 */
async function addTransparentproxyAppEx(request: AddTransparentproxyAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddTransparentproxyAppResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.transparentproxy.app.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteTransparentproxyNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称
  appName: string(name='app_name'),
  // 租户实例 ID
  instanceId: string(name='instance_id'),
  // 节点 ID
  nodeId: long(name='node_id'),
}

model DeleteTransparentproxyNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 根据节点 ID，删除对应的透明劫持应用节点。
 * Summary: 删除透明劫持应用节点
 */
async function deleteTransparentproxyNode(request: DeleteTransparentproxyNodeRequest): DeleteTransparentproxyNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteTransparentproxyNodeEx(request, headers, runtime);
}

/**
 * Description: 根据节点 ID，删除对应的透明劫持应用节点。
 * Summary: 删除透明劫持应用节点
 */
async function deleteTransparentproxyNodeEx(request: DeleteTransparentproxyNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTransparentproxyNodeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.transparentproxy.node.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTransparentproxyNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称
  appName: string(name='app_name'),
  // 租户实例 ID
  instanceId: string(name='instance_id'),
  // IP 地址模糊匹配
  ip?: string(name='ip'),
  // 页码
  pageNum?: long(name='page_num'),
  // 页大小
  pageSize?: long(name='page_size'),
}

model QueryTransparentproxyNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页码
  currentPage?: long(name='current_page'),
  // 节点列表
  list?: [ TransparentProxyNodeVo ](name='list'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 起始位置
  startIndex?: long(name='start_index'),
  // 总数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 查询透明劫持应用的节点列表。
 * Summary: 查询透明劫持应用的节点列表
 */
async function queryTransparentproxyNode(request: QueryTransparentproxyNodeRequest): QueryTransparentproxyNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTransparentproxyNodeEx(request, headers, runtime);
}

/**
 * Description: 查询透明劫持应用的节点列表。
 * Summary: 查询透明劫持应用的节点列表
 */
async function queryTransparentproxyNodeEx(request: QueryTransparentproxyNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTransparentproxyNodeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.transparentproxy.node.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTransparentproxyProtocolconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称
  appName: string(name='app_name'),
  // 租户实例 ID
  instanceId: string(name='instance_id'),
  // 端口
  port: long(name='port'),
  // 治理参数
  protocolConfig: string(name='protocol_config'),
}

model UpdateTransparentproxyProtocolconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新对应的透明劫持应用的治理参数配置，如最大请求数。
 * Summary: 更新透明劫持应用治理配置
 */
async function updateTransparentproxyProtocolconfig(request: UpdateTransparentproxyProtocolconfigRequest): UpdateTransparentproxyProtocolconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTransparentproxyProtocolconfigEx(request, headers, runtime);
}

/**
 * Description: 更新对应的透明劫持应用的治理参数配置，如最大请求数。
 * Summary: 更新透明劫持应用治理配置
 */
async function updateTransparentproxyProtocolconfigEx(request: UpdateTransparentproxyProtocolconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTransparentproxyProtocolconfigResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.transparentproxy.protocolconfig.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableTransparentproxyNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称
  appName: string(name='app_name'),
  // 租户实例 ID
  instanceId: string(name='instance_id'),
  // 节点 ID 数组
  nodeIds: string(name='node_ids'),
}

model EnableTransparentproxyNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 根据节点 ID，批量开启对应节点的透明劫持功能。
 * Summary: 打开节点透明劫持开关（批量）
 */
async function enableTransparentproxyNode(request: EnableTransparentproxyNodeRequest): EnableTransparentproxyNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableTransparentproxyNodeEx(request, headers, runtime);
}

/**
 * Description: 根据节点 ID，批量开启对应节点的透明劫持功能。
 * Summary: 打开节点透明劫持开关（批量）
 */
async function enableTransparentproxyNodeEx(request: EnableTransparentproxyNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableTransparentproxyNodeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.transparentproxy.node.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DisableTransparentproxyNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称
  appName: string(name='app_name'),
  // 租户实例 ID
  instanceId: string(name='instance_id'),
  // 节点 ID 数组
  nodeIds: string(name='node_ids'),
}

model DisableTransparentproxyNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 根据节点 ID，批量关闭对应节点的透明劫持功能。
 * Summary: 关闭透明劫持节点开关（批量）
 */
async function disableTransparentproxyNode(request: DisableTransparentproxyNodeRequest): DisableTransparentproxyNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return disableTransparentproxyNodeEx(request, headers, runtime);
}

/**
 * Description: 根据节点 ID，批量关闭对应节点的透明劫持功能。
 * Summary: 关闭透明劫持节点开关（批量）
 */
async function disableTransparentproxyNodeEx(request: DisableTransparentproxyNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableTransparentproxyNodeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.transparentproxy.node.disable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllSgCircuitbreakerrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称，数组形式
  appNames?: string(name='app_names'),
  // 服务id
  dataId?: string(name='data_id'),
  // 租户id
  instanceId: string(name='instance_id'),
  // 排序规则，JSON字符串
  orders?: string(name='orders'),
  // 分页大小
  pageSize: long(name='page_size'),
  // 规则名
  name?: string(name='name'),
  // 当前页
  start: long(name='start'),
}

model AllSgCircuitbreakerrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 应用名及规则数
  ruleModels?: [ CircuitBreakerRuleAppNamesModel ](name='rule_models'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总appName个数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 查询所有的服务熔断的appName及对应的规则数
 * Summary: 服务熔断查询
 */
async function allSgCircuitbreakerrules(request: AllSgCircuitbreakerrulesRequest): AllSgCircuitbreakerrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allSgCircuitbreakerrulesEx(request, headers, runtime);
}

/**
 * Description: 查询所有的服务熔断的appName及对应的规则数
 * Summary: 服务熔断查询
 */
async function allSgCircuitbreakerrulesEx(request: AllSgCircuitbreakerrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllSgCircuitbreakerrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.circuitbreakerrules.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSgCircuitbreakerrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名，数组形式
  appNames: string(name='app_names'),
  // 服务资源id
  dataId?: string(name='data_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 规则名
  name?: string(name='name'),
  // 排序规则，JSON字符串,，数组形式
  orders?: string(name='orders'),
  // 分页大小
  pageSize: long(name='page_size'),
  // 当前页
  start: long(name='start'),
}

model GetSgCircuitbreakerrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 熔断规则
  ruleModels?: [ CircuitBreakerRuleModel ](name='rule_models'),
  // 开始索引
  startIndex?: long(name='start_index'),
  // 规则总数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 通过appName查询熔断规则
 * Summary: 通过appName查询熔断规则
 */
async function getSgCircuitbreakerrules(request: GetSgCircuitbreakerrulesRequest): GetSgCircuitbreakerrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSgCircuitbreakerrulesEx(request, headers, runtime);
}

/**
 * Description: 通过appName查询熔断规则
 * Summary: 通过appName查询熔断规则
 */
async function getSgCircuitbreakerrulesEx(request: GetSgCircuitbreakerrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSgCircuitbreakerrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.circuitbreakerrules.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTransparentproxySidecarlinkRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例ID
  instanceId: string(name='instance_id'),
}

model QueryTransparentproxySidecarlinkResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // sidecar脚本链接
  data?: TransparentProxySidecarScriptLinkVo(name='data'),
}

/**
 * Description: 透明劫持sidecar脚本链接查询接口
 * Summary: 透明劫持sidecar脚本链接查询接口
 */
async function queryTransparentproxySidecarlink(request: QueryTransparentproxySidecarlinkRequest): QueryTransparentproxySidecarlinkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTransparentproxySidecarlinkEx(request, headers, runtime);
}

/**
 * Description: 透明劫持sidecar脚本链接查询接口
 * Summary: 透明劫持sidecar脚本链接查询接口
 */
async function queryTransparentproxySidecarlinkEx(request: QueryTransparentproxySidecarlinkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTransparentproxySidecarlinkResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.transparentproxy.sidecarlink.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgAuthruledataidsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ListSgAuthruledataidsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务id集合
  data?: [ string ](name='data'),
}

/**
 * Description: 查找出所有包含鉴权规则组的服务ID（一般用于鉴权规则列表搜索框查询）
 * Summary: 查找出所有包含鉴权规则组的服务ID
 */
async function listSgAuthruledataids(request: ListSgAuthruledataidsRequest): ListSgAuthruledataidsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgAuthruledataidsEx(request, headers, runtime);
}

/**
 * Description: 查找出所有包含鉴权规则组的服务ID（一般用于鉴权规则列表搜索框查询）
 * Summary: 查找出所有包含鉴权规则组的服务ID
 */
async function listSgAuthruledataidsEx(request: ListSgAuthruledataidsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgAuthruledataidsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authruledataids.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgAuthruleappnamesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务鉴权规则粒度。服务级或应用级(service / app)
  scope: string(name='scope'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ListSgAuthruleappnamesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用名称集合
  data?: [ string ](name='data'),
}

/**
 * Description: 查找出所有包含鉴权规则组的应用名（一般用于服务鉴权列表搜索框查询）
 * Summary: 查找出所有包含鉴权规则组的应用名
 */
async function listSgAuthruleappnames(request: ListSgAuthruleappnamesRequest): ListSgAuthruleappnamesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgAuthruleappnamesEx(request, headers, runtime);
}

/**
 * Description: 查找出所有包含鉴权规则组的应用名（一般用于服务鉴权列表搜索框查询）
 * Summary: 查找出所有包含鉴权规则组的应用名
 */
async function listSgAuthruleappnamesEx(request: ListSgAuthruleappnamesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgAuthruleappnamesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authruleappnames.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgAuthruleactiveappnamesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ListSgAuthruleactiveappnamesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存活的应用名称列表
  data?: [ string ](name='data'),
}

/**
 * Description: 查找出目前存活的应用名称列表
 * Summary: 查找出目前存活的应用名称列表
 */
async function listSgAuthruleactiveappnames(request: ListSgAuthruleactiveappnamesRequest): ListSgAuthruleactiveappnamesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgAuthruleactiveappnamesEx(request, headers, runtime);
}

/**
 * Description: 查找出目前存活的应用名称列表
 * Summary: 查找出目前存活的应用名称列表
 */
async function listSgAuthruleactiveappnamesEx(request: ListSgAuthruleactiveappnamesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgAuthruleactiveappnamesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authruleactiveappnames.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgAuthruleactivedataidsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称
  appName: string(name='app_name'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ListSgAuthruleactivedataidsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存活的服务列表
  data?: [ string ](name='data'),
}

/**
 * Description: 查找该应用下存活的服务列表
 * Summary: 查找该应用下存活的服务列表
 */
async function listSgAuthruleactivedataids(request: ListSgAuthruleactivedataidsRequest): ListSgAuthruleactivedataidsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgAuthruleactivedataidsEx(request, headers, runtime);
}

/**
 * Description: 查找该应用下存活的服务列表
 * Summary: 查找该应用下存活的服务列表
 */
async function listSgAuthruleactivedataidsEx(request: ListSgAuthruleactivedataidsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgAuthruleactivedataidsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authruleactivedataids.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgAuthrulegroupappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称
  appName?: string(name='app_name'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 鉴权规则名称
  ruleName?: string(name='rule_name'),
  // 页码
  start?: long(name='start'),
}

model ListSgAuthrulegroupappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 鉴权规则组列表模型
  authRuleGroups?: [ AuthRuleGroupListModelVO ](name='auth_rule_groups'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 起始页
  startIndex?: long(name='start_index'),
  // 总大小
  totalSize?: long(name='total_size'),
}

/**
 * Description: 应用级服务鉴权列表搜索
 * Summary: 应用级服务鉴权列表搜索
 */
async function listSgAuthrulegroupapps(request: ListSgAuthrulegroupappsRequest): ListSgAuthrulegroupappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgAuthrulegroupappsEx(request, headers, runtime);
}

/**
 * Description: 应用级服务鉴权列表搜索
 * Summary: 应用级服务鉴权列表搜索
 */
async function listSgAuthrulegroupappsEx(request: ListSgAuthrulegroupappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgAuthrulegroupappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrulegroupapps.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgAuthrulegroupservicesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称
  appName?: string(name='app_name'),
  // 服务ID
  dataId?: string(name='data_id'),
  // 该鉴权规则组下是否有鉴权规则
  hasAuthRule?: boolean(name='has_auth_rule'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 规则名称
  ruleName?: string(name='rule_name'),
  // 页码
  start?: long(name='start'),
}

model ListSgAuthrulegroupservicesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 鉴权规则组列表
  authRuleGroups?: [ AuthRuleGroupListModelVO ](name='auth_rule_groups'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 10
  pageSize?: long(name='page_size'),
  // 起始页
  startIndex?: long(name='start_index'),
  // 总大小
  totalSize?: long(name='total_size'),
}

/**
 * Description: 服务级服务鉴权列表搜索
 * Summary: 服务级服务鉴权列表搜索
 */
async function listSgAuthrulegroupservices(request: ListSgAuthrulegroupservicesRequest): ListSgAuthrulegroupservicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgAuthrulegroupservicesEx(request, headers, runtime);
}

/**
 * Description: 服务级服务鉴权列表搜索
 * Summary: 服务级服务鉴权列表搜索
 */
async function listSgAuthrulegroupservicesEx(request: ListSgAuthrulegroupservicesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgAuthrulegroupservicesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrulegroupservices.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSgAuthrulegroupsbatchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 鉴权规则json串
  authRuleAddModel: string(name='auth_rule_add_model'),
}

model AddSgAuthrulegroupsbatchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 添加鉴权规则 (添加服务级鉴权规则可批量添加)
 * Summary: 添加鉴权规则
 */
async function addSgAuthrulegroupsbatch(request: AddSgAuthrulegroupsbatchRequest): AddSgAuthrulegroupsbatchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSgAuthrulegroupsbatchEx(request, headers, runtime);
}

/**
 * Description: 添加鉴权规则 (添加服务级鉴权规则可批量添加)
 * Summary: 添加鉴权规则
 */
async function addSgAuthrulegroupsbatchEx(request: AddSgAuthrulegroupsbatchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSgAuthrulegroupsbatchResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrulegroupsbatch.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableSgAuthrulegroupsbatchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 鉴权规则id集合，多条数据用逗号隔开
  authRuleIds: string(name='auth_rule_ids'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model EnableSgAuthrulegroupsbatchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量开启鉴权规则
 * Summary: 批量开启鉴权规则
 */
async function enableSgAuthrulegroupsbatch(request: EnableSgAuthrulegroupsbatchRequest): EnableSgAuthrulegroupsbatchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableSgAuthrulegroupsbatchEx(request, headers, runtime);
}

/**
 * Description: 批量开启鉴权规则
 * Summary: 批量开启鉴权规则
 */
async function enableSgAuthrulegroupsbatchEx(request: EnableSgAuthrulegroupsbatchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableSgAuthrulegroupsbatchResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrulegroupsbatch.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DisableSgAuthrulegroupsbatchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 鉴权规则id集合，多个用逗号隔开
  authRuleIds: string(name='auth_rule_ids'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model DisableSgAuthrulegroupsbatchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量关闭鉴权规则
 * Summary: 批量关闭鉴权规则
 */
async function disableSgAuthrulegroupsbatch(request: DisableSgAuthrulegroupsbatchRequest): DisableSgAuthrulegroupsbatchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return disableSgAuthrulegroupsbatchEx(request, headers, runtime);
}

/**
 * Description: 批量关闭鉴权规则
 * Summary: 批量关闭鉴权规则
 */
async function disableSgAuthrulegroupsbatchEx(request: DisableSgAuthrulegroupsbatchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableSgAuthrulegroupsbatchResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrulegroupsbatch.disable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExportSgAuthrulegroupsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 鉴权规则id集合，多个用逗号隔开，当is_export_all为false时此参数必填
  authRuleIds?: string(name='auth_rule_ids'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 是否导出所有规则
  isExportAll: boolean(name='is_export_all'),
}

model ExportSgAuthrulegroupsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 鉴权规则json串
  authRuleJson?: string(name='auth_rule_json'),
}

/**
 * Description: 导出鉴权规则数据
 * Summary: 导出鉴权规则数据
 */
async function exportSgAuthrulegroups(request: ExportSgAuthrulegroupsRequest): ExportSgAuthrulegroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return exportSgAuthrulegroupsEx(request, headers, runtime);
}

/**
 * Description: 导出鉴权规则数据
 * Summary: 导出鉴权规则数据
 */
async function exportSgAuthrulegroupsEx(request: ExportSgAuthrulegroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExportSgAuthrulegroupsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrulegroups.export', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportSgAuthrulegroupsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 鉴权规则json串
  authRuleJson: string(name='auth_rule_json'),
}

model ImportSgAuthrulegroupsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 导入鉴权规则数据
 * Summary: 导入鉴权规则数据
 */
async function importSgAuthrulegroups(request: ImportSgAuthrulegroupsRequest): ImportSgAuthrulegroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importSgAuthrulegroupsEx(request, headers, runtime);
}

/**
 * Description: 导入鉴权规则数据
 * Summary: 导入鉴权规则数据
 */
async function importSgAuthrulegroupsEx(request: ImportSgAuthrulegroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportSgAuthrulegroupsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.authrulegroups.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportSgResourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // guardian使用的参数
  appName?: string(name='app_name'),
  // 文件内容，json串
  fileContent?: string(name='file_content'),
  // 文件名
  fileName?: string(name='file_name'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 表明是DRM还是guardian
  type: string(name='type'),
  // 上传类型。 data 表示上传带有推送值，空表示只传元数据
  uploadType?: string(name='upload_type'),
}

model ImportSgResourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 导入结果
  result?: string(name='result'),
}

/**
 * Description: 资源以文件形式导入导出
 * Summary: 资源以文件形式导入导出
 */
async function importSgResource(request: ImportSgResourceRequest): ImportSgResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importSgResourceEx(request, headers, runtime);
}

/**
 * Description: 资源以文件形式导入导出
 * Summary: 资源以文件形式导入导出
 */
async function importSgResourceEx(request: ImportSgResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportSgResourceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.resource.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExportSgResourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // guardian 导出使用
  appName?: string(name='app_name'),
  // 租户id
  instanceId: string(name='instance_id'),
  // drm还是guardian资源
  type: string(name='type'),
}

model ExportSgResourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  result?: string(name='result'),
  // 非必须
  url?: string(name='url'),
}

/**
 * Description: 资源以文件形式导出
 * Summary: 资源以文件形式导出
 */
async function exportSgResource(request: ExportSgResourceRequest): ExportSgResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return exportSgResourceEx(request, headers, runtime);
}

/**
 * Description: 资源以文件形式导出
 * Summary: 资源以文件形式导出
 */
async function exportSgResourceEx(request: ExportSgResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExportSgResourceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.resource.export', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListUndisplayComponentsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id
  instanceId: string(name='instance_id'),
}

model ListUndisplayComponentsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 不展示的组件
  configs?: [ string ](name='configs'),
}

/**
 * Description: 获取不展示的UI列表
 * Summary: 前端屏蔽UI
 */
async function listUndisplayComponents(request: ListUndisplayComponentsRequest): ListUndisplayComponentsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listUndisplayComponentsEx(request, headers, runtime);
}

/**
 * Description: 获取不展示的UI列表
 * Summary: 前端屏蔽UI
 */
async function listUndisplayComponentsEx(request: ListUndisplayComponentsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUndisplayComponentsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.undisplay.components.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgListauthrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 所属黑白名单规则组id
  authGroupId: long(name='auth_group_id'),
  // 更新的规则数据
  // 
  authRule: string(name='auth_rule'),
  // 服务接口id
  // 
  dataId: string(name='data_id'),
  // 租户实例id
  // 
  instanceId: string(name='instance_id'),
  // 更新的规则id
  // 
  ruleId: long(name='rule_id'),
}

model UpdateSgListauthrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 列表使用的更新服务鉴权接口，由于原有的更新接口存在diff操作，不会触发规则下发。列表是没有diff操作的，所以需要下发一次。
 * Summary: 列表使用的更新服务鉴权接口
 */
async function updateSgListauthrules(request: UpdateSgListauthrulesRequest): UpdateSgListauthrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgListauthrulesEx(request, headers, runtime);
}

/**
 * Description: 列表使用的更新服务鉴权接口，由于原有的更新接口存在diff操作，不会触发规则下发。列表是没有diff操作的，所以需要下发一次。
 * Summary: 列表使用的更新服务鉴权接口
 */
async function updateSgListauthrulesEx(request: UpdateSgListauthrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgListauthrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.listauthrules.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgServiceratelimitrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名称
  appName?: string(name='app_name'),
  // 服务id
  dataId?: string(name='data_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 页大小
  pageSize: long(name='page_size'),
  // 规则名称
  ruleName?: string(name='rule_name'),
  // 分页参数
  // 
  start: long(name='start'),
}

model ListSgServiceratelimitrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 限流规则json串：[{"appName":"testRuleApp","limitRules":[{"dataId":"com.alipay.sofa.service@SOFA","enable":false,"id":195,"instanceId":"testInstanceId","methodName":"helloMesh","name":"xytest","resourceType":"DATA_ID_METHOD","ruleConfig":{"limitRuleItems":[{"action":{"extension":"","type":"REJECT"},"configs":{"algorithm":"TokenBucket","maxBurstRatio":1,"metricWindowSize":1000,"threshold":1},"ruleId":"o-620bb9","ruleType":"QPS","trafficConditions":[{"field":"sourceApp","operation":"IN","type":"system","value":["a","b"]}]}],"resource":"com.alipay.sofa.mesh.facade.TomJerryFacade:1.0@DEFAULT.helloMesh:i:r"},"serviceType":"SOFA"}]}]
  serviceRateLimitRules?: string(name='service_rate_limit_rules'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 按照条件分页查询限流规则列表数据
 * Summary: 限流规则列表查询
 */
async function listSgServiceratelimitrules(request: ListSgServiceratelimitrulesRequest): ListSgServiceratelimitrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgServiceratelimitrulesEx(request, headers, runtime);
}

/**
 * Description: 按照条件分页查询限流规则列表数据
 * Summary: 限流规则列表查询
 */
async function listSgServiceratelimitrulesEx(request: ListSgServiceratelimitrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgServiceratelimitrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.serviceratelimitrules.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgFaultinjectappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 服务id
  dataId?: string(name='data_id'),
  // 应用名
  appName?: string(name='app_name'),
  // 故障注入规则名称
  ruleName?: string(name='rule_name'),
  // 页码
  start?: long(name='start'),
  // 页大小
  pageSize?: string(name='page_size'),
}

model ListSgFaultinjectappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用名数组
  appNames?: [ FaultInjectRuleAppNameModel ](name='app_names'),
  // 开始索引
  startIndex?: long(name='start_index'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 总条数
  totalSize?: long(name='total_size'),
  // 当前页
  currentPage?: string(name='current_page'),
}

/**
 * Description: 查询故障注入一级列表
 * Summary: 查询故障注入一级列表
 */
async function listSgFaultinjectapps(request: ListSgFaultinjectappsRequest): ListSgFaultinjectappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgFaultinjectappsEx(request, headers, runtime);
}

/**
 * Description: 查询故障注入一级列表
 * Summary: 查询故障注入一级列表
 */
async function listSgFaultinjectappsEx(request: ListSgFaultinjectappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgFaultinjectappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.faultinjectapps.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgFaultinjectrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId?: string(name='instance_id'),
  // 服务ID
  dataId?: string(name='data_id'),
  // 应用名称
  appName?: string(name='app_name'),
  // 规则名称
  ruleName?: string(name='rule_name'),
  // 起始页
  start?: long(name='start'),
  // 页大小
  pageSize?: long(name='page_size'),
}

model ListSgFaultinjectrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 故障注入二级列表
  ruleModels?: [ FaultInjectRuleVO ](name='rule_models'),
  // 开始索引
  startIndex?: long(name='start_index'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 100
  totalSize?: long(name='total_size'),
  // 当前页
  currentPage?: long(name='current_page'),
}

/**
 * Description: 分页查询故障注入二级列表
 * Summary: 分页查询故障注入二级列表
 */
async function listSgFaultinjectrules(request: ListSgFaultinjectrulesRequest): ListSgFaultinjectrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgFaultinjectrulesEx(request, headers, runtime);
}

/**
 * Description: 分页查询故障注入二级列表
 * Summary: 分页查询故障注入二级列表
 */
async function listSgFaultinjectrulesEx(request: ListSgFaultinjectrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgFaultinjectrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.faultinjectrules.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgFaultinjectallappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ListSgFaultinjectallappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用名集合
  result?: [ string ](name='result'),
}

/**
 * Description: 查询已添加故障注入规则的应用
 * Summary: 查询已添加故障注入规则的应用
 */
async function listSgFaultinjectallapps(request: ListSgFaultinjectallappsRequest): ListSgFaultinjectallappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgFaultinjectallappsEx(request, headers, runtime);
}

/**
 * Description: 查询已添加故障注入规则的应用
 * Summary: 查询已添加故障注入规则的应用
 */
async function listSgFaultinjectallappsEx(request: ListSgFaultinjectallappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgFaultinjectallappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.faultinjectallapps.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgFaultinjectallservicesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ListSgFaultinjectallservicesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务ID集合
  result?: [ string ](name='result'),
}

/**
 * Description: 查询已添加故障注入规则的服务
 * Summary: 查询已添加故障注入规则的服务
 */
async function listSgFaultinjectallservices(request: ListSgFaultinjectallservicesRequest): ListSgFaultinjectallservicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgFaultinjectallservicesEx(request, headers, runtime);
}

/**
 * Description: 查询已添加故障注入规则的服务
 * Summary: 查询已添加故障注入规则的服务
 */
async function listSgFaultinjectallservicesEx(request: ListSgFaultinjectallservicesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgFaultinjectallservicesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.faultinjectallservices.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgFaultinjectruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键
  id?: long(name='id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 故障注入规则配置（json串）
  ruleConfig: string(name='rule_config'),
  // 规则名称
  ruleName: string(name='rule_name'),
  // dataId
  dataId?: string(name='data_id'),
  // 应用名
  appName?: string(name='app_name'),
}

model UpdateSgFaultinjectruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新故障注入规则
 * Summary: 更新故障注入规则
 */
async function updateSgFaultinjectrule(request: UpdateSgFaultinjectruleRequest): UpdateSgFaultinjectruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgFaultinjectruleEx(request, headers, runtime);
}

/**
 * Description: 更新故障注入规则
 * Summary: 更新故障注入规则
 */
async function updateSgFaultinjectruleEx(request: UpdateSgFaultinjectruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgFaultinjectruleResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.faultinjectrule.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSgFaultinjectruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 应用名称
  appName: string(name='app_name'),
  // 服务id
  dataId: string(name='data_id'),
  // 服务类型（SOFA DUBBO SPRINGCLOUD）
  serviceType?: string(name='service_type'),
  // 规则名称
  ruleName: string(name='rule_name'),
  // 故障注入规则配置（json串）
  ruleConfig: string(name='rule_config'),
}

model AddSgFaultinjectruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增故障注入规则
 * Summary: 新增故障注入规则
 */
async function addSgFaultinjectrule(request: AddSgFaultinjectruleRequest): AddSgFaultinjectruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSgFaultinjectruleEx(request, headers, runtime);
}

/**
 * Description: 新增故障注入规则
 * Summary: 新增故障注入规则
 */
async function addSgFaultinjectruleEx(request: AddSgFaultinjectruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSgFaultinjectruleResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.faultinjectrule.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgFaultinjectrulestatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键
  id: long(name='id'),
  // 开启/关闭
  enabled: boolean(name='enabled'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model UpdateSgFaultinjectrulestatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新故障注入规则状态
 * Summary: 更新故障注入规则状态
 */
async function updateSgFaultinjectrulestatus(request: UpdateSgFaultinjectrulestatusRequest): UpdateSgFaultinjectrulestatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgFaultinjectrulestatusEx(request, headers, runtime);
}

/**
 * Description: 更新故障注入规则状态
 * Summary: 更新故障注入规则状态
 */
async function updateSgFaultinjectrulestatusEx(request: UpdateSgFaultinjectrulestatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgFaultinjectrulestatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.faultinjectrulestatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSgFaultinjectruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键
  id: long(name='id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model DeleteSgFaultinjectruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除故障注入规则
 * Summary: 删除故障注入规则
 */
async function deleteSgFaultinjectrule(request: DeleteSgFaultinjectruleRequest): DeleteSgFaultinjectruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSgFaultinjectruleEx(request, headers, runtime);
}

/**
 * Description: 删除故障注入规则
 * Summary: 删除故障注入规则
 */
async function deleteSgFaultinjectruleEx(request: DeleteSgFaultinjectruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSgFaultinjectruleResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.faultinjectrule.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgAppsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ListSgAppsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用列表
  result?: [ string ](name='result'),
}

/**
 * Description: 获取应用列表
 * Summary: 获取应用列表
 */
async function listSgApps(request: ListSgAppsRequest): ListSgAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgAppsEx(request, headers, runtime);
}

/**
 * Description: 获取应用列表
 * Summary: 获取应用列表
 */
async function listSgAppsEx(request: ListSgAppsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgAppsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.apps.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgRouterrulegroupappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 服务id
  dataId?: string(name='data_id'),
  // 应用名称
  appName?: string(name='app_name'),
  // 规则名称
  ruleName?: string(name='rule_name'),
  // 起始页
  start: long(name='start'),
  // 页大小
  pageSize: long(name='page_size'),
}

model ListSgRouterrulegroupappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用名及应用名下的规则数列表
  appNames?: [ AppNameCountModel ](name='app_names'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 总条数
  totalSize?: long(name='total_size'),
  // 当前页
  currentPage?: string(name='current_page'),
}

/**
 * Description: 查询服务路由一级列表
 * Summary: 查询服务路由一级列表
 */
async function listSgRouterrulegroupapps(request: ListSgRouterrulegroupappsRequest): ListSgRouterrulegroupappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgRouterrulegroupappsEx(request, headers, runtime);
}

/**
 * Description: 查询服务路由一级列表
 * Summary: 查询服务路由一级列表
 */
async function listSgRouterrulegroupappsEx(request: ListSgRouterrulegroupappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgRouterrulegroupappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerrulegroupapps.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgRouterrulegroupsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 服务id
  dataId?: string(name='data_id'),
  // 应用名
  appName: string(name='app_name'),
  // 规则名称
  ruleName?: string(name='rule_name'),
  // 页码
  start: long(name='start'),
  // 页大小
  pageSize: long(name='page_size'),
}

model ListSgRouterrulegroupsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 路由规则组列表
  list?: [ RouterRuleGroupVO ](name='list'),
}

/**
 * Description: 查询服务路由二级例表
 * Summary: 查询服务路由二级例表
 */
async function listSgRouterrulegroups(request: ListSgRouterrulegroupsRequest): ListSgRouterrulegroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgRouterrulegroupsEx(request, headers, runtime);
}

/**
 * Description: 查询服务路由二级例表
 * Summary: 查询服务路由二级例表
 */
async function listSgRouterrulegroupsEx(request: ListSgRouterrulegroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgRouterrulegroupsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerrulegroups.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgRouterruleallappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ListSgRouterruleallappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用名列表
  result?: [ string ](name='result'),
}

/**
 * Description: 查询已存在服务路由规则的应用接口
 * Summary: 查询已存在服务路由规则的应用接口
 */
async function listSgRouterruleallapps(request: ListSgRouterruleallappsRequest): ListSgRouterruleallappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgRouterruleallappsEx(request, headers, runtime);
}

/**
 * Description: 查询已存在服务路由规则的应用接口
 * Summary: 查询已存在服务路由规则的应用接口
 */
async function listSgRouterruleallappsEx(request: ListSgRouterruleallappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgRouterruleallappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerruleallapps.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgRouterruleallservicesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ListSgRouterruleallservicesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务id列表
  result?: [ string ](name='result'),
}

/**
 * Description: 查询已存在服务路由规则的服务接口
 * Summary: 查询已存在服务路由规则的服务接口
 */
async function listSgRouterruleallservices(request: ListSgRouterruleallservicesRequest): ListSgRouterruleallservicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgRouterruleallservicesEx(request, headers, runtime);
}

/**
 * Description: 查询已存在服务路由规则的服务接口
 * Summary: 查询已存在服务路由规则的服务接口
 */
async function listSgRouterruleallservicesEx(request: ListSgRouterruleallservicesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgRouterruleallservicesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerruleallservices.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgRouterrulegroupstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键
  id: long(name='id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 0关闭/1开启
  enabled: long(name='enabled'),
  // 版本号
  dispatchVersion: long(name='dispatch_version'),
}

model UpdateSgRouterrulegroupstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新路由规则组状态
 * Summary: 更新路由规则组状态
 */
async function updateSgRouterrulegroupstatus(request: UpdateSgRouterrulegroupstatusRequest): UpdateSgRouterrulegroupstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgRouterrulegroupstatusEx(request, headers, runtime);
}

/**
 * Description: 更新路由规则组状态
 * Summary: 更新路由规则组状态
 */
async function updateSgRouterrulegroupstatusEx(request: UpdateSgRouterrulegroupstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgRouterrulegroupstatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerrulegroupstatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSgRouterrulegroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键
  id: long(name='id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model DeleteSgRouterrulegroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除路由规则组
 * Summary: 删除路由规则组
 */
async function deleteSgRouterrulegroup(request: DeleteSgRouterrulegroupRequest): DeleteSgRouterrulegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSgRouterrulegroupEx(request, headers, runtime);
}

/**
 * Description: 删除路由规则组
 * Summary: 删除路由规则组
 */
async function deleteSgRouterrulegroupEx(request: DeleteSgRouterrulegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSgRouterrulegroupResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.routerrulegroup.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgFaulttoleranceappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app名称
  // 
  appName?: string(name='app_name'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 规则名称
  name?: string(name='name'),
  // 排序字段
  orders?: string(name='orders'),
  // 页的条数
  pageSize: long(name='page_size'),
  // 开始行
  start: long(name='start'),
}

model ListSgFaulttoleranceappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 故障隔离app与规则数量
  appModels?: [ FaultToleranceRuleAppModel ](name='app_models'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页面条数
  pageSize?: long(name='page_size'),
  // 开始行
  startIndex?: long(name='start_index'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 故障隔离App列表及其规则数量
 * Summary: 故障隔离App列表
 */
async function listSgFaulttoleranceapps(request: ListSgFaulttoleranceappsRequest): ListSgFaulttoleranceappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgFaulttoleranceappsEx(request, headers, runtime);
}

/**
 * Description: 故障隔离App列表及其规则数量
 * Summary: 故障隔离App列表
 */
async function listSgFaulttoleranceappsEx(request: ListSgFaulttoleranceappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgFaulttoleranceappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.faulttoleranceapps.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgFaulttolerancerulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // app名称
  appName: string(name='app_name'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 规则名称
  name?: string(name='name'),
  // 排序字段
  orders?: string(name='orders'),
  // 页的条数
  pageSize: long(name='page_size'),
  // 开始行
  start: long(name='start'),
}

model ListSgFaulttolerancerulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // rule列表
  ruleModels?: [ FaultToleranceRuleModel ](name='rule_models'),
}

/**
 * Description: 故障隔离规则列表
 * Summary: 故障隔离规则列表
 */
async function listSgFaulttolerancerules(request: ListSgFaulttolerancerulesRequest): ListSgFaulttolerancerulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgFaulttolerancerulesEx(request, headers, runtime);
}

/**
 * Description: 故障隔离规则列表
 * Summary: 故障隔离规则列表
 */
async function listSgFaulttolerancerulesEx(request: ListSgFaulttolerancerulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgFaulttolerancerulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.faulttolerancerules.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSgFaulttoleranceruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id?: long(name='id'),
  // app名称
  appName: string(name='app_name'),
  // 规则名称
  name: string(name='name'),
  // 具体规则项
  // {"appName":"testApp","name":"test23","ruleItemList":[{"conditions":[{"type":"system","field":"targetApp","operation":"IN","value":["A"]}],"configs":{"timeWindow":10,"leastWindowCount":100,"maxIpCount":3,"exceptionRateMultiple":3,"leastExceptionRate":10,"exceptionTypes":["500"]},"actions":[{"type":"DOWNGRADE"}]}]}
  ruleItemList: string(name='rule_item_list'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 取值client,server二选1，默认是client
  direction?: string(name='direction'),
}

model AddSgFaulttoleranceruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 影响行数
  result?: long(name='result'),
}

/**
 * Description: 故障隔离规则新增
 * Summary: 故障隔离规则新增
 */
async function addSgFaulttolerancerule(request: AddSgFaulttoleranceruleRequest): AddSgFaulttoleranceruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSgFaulttoleranceruleEx(request, headers, runtime);
}

/**
 * Description: 故障隔离规则新增
 * Summary: 故障隔离规则新增
 */
async function addSgFaulttoleranceruleEx(request: AddSgFaulttoleranceruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSgFaulttoleranceruleResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.faulttolerancerule.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgFaulttoleranceruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
  // app名称
  appName?: string(name='app_name'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 规则名称
  name?: string(name='name'),
  // 具体规则项 {"appName":"testApp","name":"test23","ruleItemList":[{"conditions":[{"type":"system","field":"targetApp","operation":"IN","value":["A"]}],"configs":{"timeWindow":10,"leastWindowCount":100,"maxIpCount":3,"exceptionRateMultiple":3,"leastExceptionRate":10,"exceptionTypes":["500"]},"actions":[{"type":"DOWNGRADE"}]}]}
  ruleItemList: string(name='rule_item_list'),
  // 取值client,server二选1，默认是client
  direction?: string(name='direction'),
}

model UpdateSgFaulttoleranceruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 影响行数
  result?: long(name='result'),
}

/**
 * Description: 故障隔离规则更新
 * Summary: 故障隔离规则更新
 */
async function updateSgFaulttolerancerule(request: UpdateSgFaulttoleranceruleRequest): UpdateSgFaulttoleranceruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgFaulttoleranceruleEx(request, headers, runtime);
}

/**
 * Description: 故障隔离规则更新
 * Summary: 故障隔离规则更新
 */
async function updateSgFaulttoleranceruleEx(request: UpdateSgFaulttoleranceruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgFaulttoleranceruleResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.faulttolerancerule.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSgFaulttoleranceruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // id
  id: long(name='id'),
}

model DeleteSgFaulttoleranceruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 影响行数
  result?: long(name='result'),
}

/**
 * Description: 故障隔离规则删除
 * Summary: 故障隔离规则删除
 */
async function deleteSgFaulttolerancerule(request: DeleteSgFaulttoleranceruleRequest): DeleteSgFaulttoleranceruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSgFaulttoleranceruleEx(request, headers, runtime);
}

/**
 * Description: 故障隔离规则删除
 * Summary: 故障隔离规则删除
 */
async function deleteSgFaulttoleranceruleEx(request: DeleteSgFaulttoleranceruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSgFaulttoleranceruleResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.faulttolerancerule.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableSgFaulttoleranceruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 状态0-未启用1-启用2-部分启用
  enabled: long(name='enabled'),
}

model EnableSgFaulttoleranceruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 影响行数
  result?: long(name='result'),
}

/**
 * Description: 故障隔离规则启用
 * Summary: 故障隔离规则启用
 */
async function enableSgFaulttolerancerule(request: EnableSgFaulttoleranceruleRequest): EnableSgFaulttoleranceruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableSgFaulttoleranceruleEx(request, headers, runtime);
}

/**
 * Description: 故障隔离规则启用
 * Summary: 故障隔离规则启用
 */
async function enableSgFaulttoleranceruleEx(request: EnableSgFaulttoleranceruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableSgFaulttoleranceruleResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.faulttolerancerule.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgAuditlogsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 开始时间
  beginTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='begin_time'),
  // 截止时间
  endTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='end_time'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 操作类型
  operateType?: string(name='operate_type'),
  // 操作人
  operator?: string(name='operator'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 起始页
  start?: long(name='start'),
  // 0 失败 1 成功
  status?: long(name='status'),
  // 实体id
  objectId?: string(name='object_id'),
  // 实体类型
  objectType?: string(name='object_type'),
}

model ListSgAuditlogsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 审计日志列表
  auditLogs?: [ AuditLogModel ](name='audit_logs'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总条数
  totalSize?: long(name='total_size'),
}

/**
 * Description: 分页查询审计日志
 * Summary: 分页查询审计日志
 */
async function listSgAuditlogs(request: ListSgAuditlogsRequest): ListSgAuditlogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgAuditlogsEx(request, headers, runtime);
}

/**
 * Description: 分页查询审计日志
 * Summary: 分页查询审计日志
 */
async function listSgAuditlogsEx(request: ListSgAuditlogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgAuditlogsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.auditlogs.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgMeshclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 集群名称
  clusterName?: string(name='cluster_name'),
}

model ListSgMeshclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 集群信息列表
  result?: [ MeshClusterModel ](name='result'),
}

/**
 * Description: 查询集群列表
 * Summary: 查询集群列表
 */
async function listSgMeshcluster(request: ListSgMeshclusterRequest): ListSgMeshclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgMeshclusterEx(request, headers, runtime);
}

/**
 * Description: 查询集群列表
 * Summary: 查询集群列表
 */
async function listSgMeshclusterEx(request: ListSgMeshclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgMeshclusterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.meshcluster.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSgMeshclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 集群配置信息，yaml格式
  clusterConfig: string(name='cluster_config'),
  // 集群名称
  clusterName: string(name='cluster_name'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model AddSgMeshclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增集群
 * Summary: 新增集群
 */
async function addSgMeshcluster(request: AddSgMeshclusterRequest): AddSgMeshclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSgMeshclusterEx(request, headers, runtime);
}

/**
 * Description: 新增集群
 * Summary: 新增集群
 */
async function addSgMeshclusterEx(request: AddSgMeshclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSgMeshclusterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.meshcluster.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgMeshclusterstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键
  id: long(name='id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 状态 0：关闭 1：开通
  status: long(name='status'),
  // 租户名
  tenantName: string(name='tenant_name'),
  // 区间名
  workspaceName: string(name='workspace_name'),
}

model UpdateSgMeshclusterstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新集群状态
 * Summary: 更新集群状态
 */
async function updateSgMeshclusterstatus(request: UpdateSgMeshclusterstatusRequest): UpdateSgMeshclusterstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgMeshclusterstatusEx(request, headers, runtime);
}

/**
 * Description: 更新集群状态
 * Summary: 更新集群状态
 */
async function updateSgMeshclusterstatusEx(request: UpdateSgMeshclusterstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgMeshclusterstatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.meshclusterstatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSgMeshclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键
  id: long(name='id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model DeleteSgMeshclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除集群
 * Summary: 删除集群
 */
async function deleteSgMeshcluster(request: DeleteSgMeshclusterRequest): DeleteSgMeshclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSgMeshclusterEx(request, headers, runtime);
}

/**
 * Description: 删除集群
 * Summary: 删除集群
 */
async function deleteSgMeshclusterEx(request: DeleteSgMeshclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSgMeshclusterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.meshcluster.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgSidecarinjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // sidecar名称
  name?: string(name='name'),
}

model ListSgSidecarinjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // sidecar注入配置列表
  result?: [ SidecarInjectModel ](name='result'),
}

/**
 * Description: 查询sideCar注入配置列表
 * Summary: 查询sideCar注入配置列表
 */
async function listSgSidecarinject(request: ListSgSidecarinjectRequest): ListSgSidecarinjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgSidecarinjectEx(request, headers, runtime);
}

/**
 * Description: 查询sideCar注入配置列表
 * Summary: 查询sideCar注入配置列表
 */
async function listSgSidecarinjectEx(request: ListSgSidecarinjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgSidecarinjectResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.sidecarinject.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSgSidecarinjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // sidecar名称
  sidecarName: string(name='sidecar_name'),
  // sidecar配置
  config: string(name='config'),
}

model AddSgSidecarinjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增sideCar注入配置
 * Summary: 新增sideCar注入配置
 */
async function addSgSidecarinject(request: AddSgSidecarinjectRequest): AddSgSidecarinjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSgSidecarinjectEx(request, headers, runtime);
}

/**
 * Description: 新增sideCar注入配置
 * Summary: 新增sideCar注入配置
 */
async function addSgSidecarinjectEx(request: AddSgSidecarinjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSgSidecarinjectResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.sidecarinject.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgSidecarinjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键
  id: long(name='id'),
  // sidecar注入配置
  config: string(name='config'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model UpdateSgSidecarinjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新sidecar注入配置
 * Summary: 更新sidecar注入配置
 */
async function updateSgSidecarinject(request: UpdateSgSidecarinjectRequest): UpdateSgSidecarinjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgSidecarinjectEx(request, headers, runtime);
}

/**
 * Description: 更新sidecar注入配置
 * Summary: 更新sidecar注入配置
 */
async function updateSgSidecarinjectEx(request: UpdateSgSidecarinjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgSidecarinjectResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.sidecarinject.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSgSidecarinjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 主键
  id: long(name='id'),
}

model DeleteSgSidecarinjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除sideCar注入配置
 * Summary: 删除sideCar注入配置
 */
async function deleteSgSidecarinject(request: DeleteSgSidecarinjectRequest): DeleteSgSidecarinjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSgSidecarinjectEx(request, headers, runtime);
}

/**
 * Description: 删除sideCar注入配置
 * Summary: 删除sideCar注入配置
 */
async function deleteSgSidecarinjectEx(request: DeleteSgSidecarinjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSgSidecarinjectResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.sidecarinject.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgSidecarinjectstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 主键
  id: long(name='id'),
  // 0关闭 1开启
  enabled: long(name='enabled'),
}

model UpdateSgSidecarinjectstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 开通/关闭sideCar注入配置
 * Summary: 开通/关闭sideCar注入配置
 */
async function updateSgSidecarinjectstatus(request: UpdateSgSidecarinjectstatusRequest): UpdateSgSidecarinjectstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgSidecarinjectstatusEx(request, headers, runtime);
}

/**
 * Description: 开通/关闭sideCar注入配置
 * Summary: 开通/关闭sideCar注入配置
 */
async function updateSgSidecarinjectstatusEx(request: UpdateSgSidecarinjectstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgSidecarinjectstatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.sidecarinjectstatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgTrafficmirrorappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 源服务ID
  dataId?: string(name='data_id'),
  // 源应用
  appName?: string(name='app_name'),
  // 规则名称
  ruleName?: string(name='rule_name'),
  // 起始页
  start: long(minimum=1, name='start'),
  // 页大小
  pageSize: long(minimum=1, name='page_size'),
}

model ListSgTrafficmirrorappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 总条数
  totalSize?: long(name='total_size'),
  // 当前页
  currentPage?: string(name='current_page'),
  // [{"appName": "xxx", "ruleNum": 2}]
  appNames?: [ FaultInjectRuleAppNameModel ](name='app_names'),
}

/**
 * Description: 流量镜像分页查询一级列表
 * Summary: 流量镜像分页查询一级列表
 */
async function listSgTrafficmirrorapps(request: ListSgTrafficmirrorappsRequest): ListSgTrafficmirrorappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgTrafficmirrorappsEx(request, headers, runtime);
}

/**
 * Description: 流量镜像分页查询一级列表
 * Summary: 流量镜像分页查询一级列表
 */
async function listSgTrafficmirrorappsEx(request: ListSgTrafficmirrorappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgTrafficmirrorappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.trafficmirrorapps.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgTrafficmirrorrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 源应用
  appName: string(name='app_name'),
  // 源服务id
  dataId?: string(name='data_id'),
  // 规则名称
  ruleName?: string(name='rule_name'),
  // 起始页
  start: long(minimum=1, name='start'),
  // 页大小
  pageSize: long(minimum=1, name='page_size'),
}

model ListSgTrafficmirrorrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 页大小
  pageSize?: long(name='page_size'),
  // 总条数
  totalSize?: long(name='total_size'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 响应数据
  ruleModels?: [ TrafficMirrorRuleVO ](name='rule_models'),
}

/**
 * Description: 流量镜像分页查询二级列表
 * Summary: 流量镜像分页查询二级列表
 */
async function listSgTrafficmirrorrules(request: ListSgTrafficmirrorrulesRequest): ListSgTrafficmirrorrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgTrafficmirrorrulesEx(request, headers, runtime);
}

/**
 * Description: 流量镜像分页查询二级列表
 * Summary: 流量镜像分页查询二级列表
 */
async function listSgTrafficmirrorrulesEx(request: ListSgTrafficmirrorrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgTrafficmirrorrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.trafficmirrorrules.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgTrafficmirrorallappsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ListSgTrafficmirrorallappsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用列表
  result?: [ string ](name='result'),
}

/**
 * Description: 查询已添加规则的应用
 * Summary: 查询已添加规则的应用
 */
async function listSgTrafficmirrorallapps(request: ListSgTrafficmirrorallappsRequest): ListSgTrafficmirrorallappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgTrafficmirrorallappsEx(request, headers, runtime);
}

/**
 * Description: 查询已添加规则的应用
 * Summary: 查询已添加规则的应用
 */
async function listSgTrafficmirrorallappsEx(request: ListSgTrafficmirrorallappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgTrafficmirrorallappsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.trafficmirrorallapps.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSgTrafficmirrorservicesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
}

model ListSgTrafficmirrorservicesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务列表
  result?: [ string ](name='result'),
}

/**
 * Description: 查询已添加规则的服务
 * Summary: 查询已添加规则的服务
 */
async function listSgTrafficmirrorservices(request: ListSgTrafficmirrorservicesRequest): ListSgTrafficmirrorservicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSgTrafficmirrorservicesEx(request, headers, runtime);
}

/**
 * Description: 查询已添加规则的服务
 * Summary: 查询已添加规则的服务
 */
async function listSgTrafficmirrorservicesEx(request: ListSgTrafficmirrorservicesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSgTrafficmirrorservicesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.trafficmirrorservices.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSgTrafficmirrorruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 源应用
  sourceApp: string(name='source_app'),
  // 源服务
  sourceDataId: string(name='source_data_id'),
  // demo_mirror
  targetApp: string(name='target_app'),
  // 目标服务id
  targetDataId: string(name='target_data_id'),
  // 规则名
  ruleName: string(name='rule_name'),
  // 规则配置（json字符串）
  ruleConfig: string(name='rule_config'),
}

model AddSgTrafficmirrorruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增流量镜像规则
 * Summary: 新增流量镜像规则
 */
async function addSgTrafficmirrorrule(request: AddSgTrafficmirrorruleRequest): AddSgTrafficmirrorruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSgTrafficmirrorruleEx(request, headers, runtime);
}

/**
 * Description: 新增流量镜像规则
 * Summary: 新增流量镜像规则
 */
async function addSgTrafficmirrorruleEx(request: AddSgTrafficmirrorruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSgTrafficmirrorruleResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.trafficmirrorrule.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgTrafficmirrorrulestatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // id
  id: long(name='id'),
  // 是否开启
  enabled: boolean(name='enabled'),
}

model UpdateSgTrafficmirrorrulestatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新流量镜像规则状态
 * Summary: 更新流量镜像规则状态
 */
async function updateSgTrafficmirrorrulestatus(request: UpdateSgTrafficmirrorrulestatusRequest): UpdateSgTrafficmirrorrulestatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgTrafficmirrorrulestatusEx(request, headers, runtime);
}

/**
 * Description: 更新流量镜像规则状态
 * Summary: 更新流量镜像规则状态
 */
async function updateSgTrafficmirrorrulestatusEx(request: UpdateSgTrafficmirrorrulestatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgTrafficmirrorrulestatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.trafficmirrorrulestatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSgTrafficmirrorruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // id
  id: long(name='id'),
}

model DeleteSgTrafficmirrorruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除流量镜像规则
 * Summary: 删除流量镜像规则
 */
async function deleteSgTrafficmirrorrule(request: DeleteSgTrafficmirrorruleRequest): DeleteSgTrafficmirrorruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSgTrafficmirrorruleEx(request, headers, runtime);
}

/**
 * Description: 删除流量镜像规则
 * Summary: 删除流量镜像规则
 */
async function deleteSgTrafficmirrorruleEx(request: DeleteSgTrafficmirrorruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSgTrafficmirrorruleResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.trafficmirrorrule.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSgTrafficmirrorruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // 规则名称
  ruleName: string(name='rule_name'),
  // 规则配置
  ruleConfig: string(name='rule_config'),
}

model UpdateSgTrafficmirrorruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新流量镜像规则
 * Summary: 更新流量镜像规则
 */
async function updateSgTrafficmirrorrule(request: UpdateSgTrafficmirrorruleRequest): UpdateSgTrafficmirrorruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSgTrafficmirrorruleEx(request, headers, runtime);
}

/**
 * Description: 更新流量镜像规则
 * Summary: 更新流量镜像规则
 */
async function updateSgTrafficmirrorruleEx(request: UpdateSgTrafficmirrorruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSgTrafficmirrorruleResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.sg.trafficmirrorrule.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSafeCommunicationrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 规则名称
  name?: string(name='name'),
  // 应用名称
  appName?: string(name='app_name'),
  // 取值(0-客户端,1-服务端)
  direction?: string(name='direction'),
  // 模式(0-tls,1-mtls)
  mode?: string(name='mode'),
  // 策略(0-普通,1-国密)
  strategy?: string(name='strategy'),
  // 排序字段,key枚举范围("operateTime","name", "direction", "mode", "strategy","enabled",
  //             "scope")，dir枚举范围("DESC", "ASC")
  orders?: string(name='orders'),
  // 开始页
  start: long(name='start'),
  // 每页条数
  pageSize: long(name='page_size'),
}

model ListSafeCommunicationrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 起始索引
  startIndex?: long(name='start_index'),
  // 总rule个数
  totalSize?: long(name='total_size'),
  // {"id":1,"instance_id":"000001","name":"rule1","direction":1,"mode":1,"strategy":"1","enabled":0,"scope":1,"operator":"aaa","operate_time":"2020-10-22 11:33:22"}
  models?: [ CommunicationPageModel ](name='models'),
}

/**
 * Description: 查询通信安全规则列表接口
 * Summary: 查询列表接口
 */
async function listSafeCommunicationrules(request: ListSafeCommunicationrulesRequest): ListSafeCommunicationrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSafeCommunicationrulesEx(request, headers, runtime);
}

/**
 * Description: 查询通信安全规则列表接口
 * Summary: 查询列表接口
 */
async function listSafeCommunicationrulesEx(request: ListSafeCommunicationrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSafeCommunicationrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.safe.communicationrules.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSafeCommunicationruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // id
  id: long(name='id'),
}

model GetSafeCommunicationruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // {"id":1,"instance_id":"000001","name":"rule1","direction":1,"mode":1,"strategy":"1","enabled":0,"scope":1,"operator":"aaa","operate_time":"2020-10-22 11:33:22","labels":[{"key":"aa","value":"bb","type":1}],"label_code":"123123aac"}
  model?: CommunicationRuleModel(name='model'),
}

/**
 * Description: 获取rule规则详情
 * Summary: 获取规则详情
 */
async function getSafeCommunicationrule(request: GetSafeCommunicationruleRequest): GetSafeCommunicationruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSafeCommunicationruleEx(request, headers, runtime);
}

/**
 * Description: 获取rule规则详情
 * Summary: 获取规则详情
 */
async function getSafeCommunicationruleEx(request: GetSafeCommunicationruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSafeCommunicationruleResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.safe.communicationrule.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSafeCommunicationruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 	
  // 实例id
  instanceId: string(name='instance_id'),
  // 规则名称
  name: string(name='name'),
  // 取值(0-客户端,1-服务端)
  direction: long(name='direction'),
  // 模式(0-tls,1-mtls)
  mode: long(name='mode'),
  // 策略(0-普通,1-国密)
  strategy: string(name='strategy'),
  // 分类(0-应用,1-标签)
  scope: long(name='scope'),
  // [{"key":"aa","value":"bb","type":1}]
  labels: string(name='labels'),
}

model AddSafeCommunicationruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 影响行数
  result?: long(name='result'),
}

/**
 * Description: 新增通信规则接口
 * Summary: 新增通信规则接口
 */
async function addSafeCommunicationrule(request: AddSafeCommunicationruleRequest): AddSafeCommunicationruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSafeCommunicationruleEx(request, headers, runtime);
}

/**
 * Description: 新增通信规则接口
 * Summary: 新增通信规则接口
 */
async function addSafeCommunicationruleEx(request: AddSafeCommunicationruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSafeCommunicationruleResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.safe.communicationrule.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSafeCommunicationruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // id
  id: long(name='id'),
  // 规则名称
  name?: string(name='name'),
  // 取值(0-客户端,1-服务端)
  direction?: long(name='direction'),
  // 模式(0-tls,1-mtls)
  mode?: long(name='mode'),
  // 策略(0-普通,1-国密)
  strategy?: string(name='strategy'),
  // 分类(0-应用,1-标签)
  scope?: long(name='scope'),
  // [{"key":"aa","value":"bb","type":1}]
  labels?: string(name='labels'),
}

model UpdateSafeCommunicationruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 影响行数
  result?: long(name='result'),
}

/**
 * Description: 修改通信安全规则
 * Summary: 修改通信安全规则
 */
async function updateSafeCommunicationrule(request: UpdateSafeCommunicationruleRequest): UpdateSafeCommunicationruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSafeCommunicationruleEx(request, headers, runtime);
}

/**
 * Description: 修改通信安全规则
 * Summary: 修改通信安全规则
 */
async function updateSafeCommunicationruleEx(request: UpdateSafeCommunicationruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSafeCommunicationruleResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.safe.communicationrule.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSafeCommunicationruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // id
  id: long(name='id'),
}

model DeleteSafeCommunicationruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 影响行数
  result?: long(name='result'),
}

/**
 * Description: 删除通信规则接口
 * Summary: 删除通信规则接口
 */
async function deleteSafeCommunicationrule(request: DeleteSafeCommunicationruleRequest): DeleteSafeCommunicationruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSafeCommunicationruleEx(request, headers, runtime);
}

/**
 * Description: 删除通信规则接口
 * Summary: 删除通信规则接口
 */
async function deleteSafeCommunicationruleEx(request: DeleteSafeCommunicationruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSafeCommunicationruleResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.safe.communicationrule.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableSafeCommunicationruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // id
  id: long(name='id'),
  // 状态(1-生效,0-关闭)
  enabled: long(name='enabled'),
}

model EnableSafeCommunicationruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 影响行数
  result?: long(name='result'),
}

/**
 * Description: 修改通信规则生效状态
 * Summary: 修改通信规则状态
 */
async function enableSafeCommunicationrule(request: EnableSafeCommunicationruleRequest): EnableSafeCommunicationruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableSafeCommunicationruleEx(request, headers, runtime);
}

/**
 * Description: 修改通信规则生效状态
 * Summary: 修改通信规则状态
 */
async function enableSafeCommunicationruleEx(request: EnableSafeCommunicationruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableSafeCommunicationruleResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.ms.safe.communicationrule.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

