import AlipayUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = config.readTimeout;
  @connectTimeout = config.connectTimeout;
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = config.maxIdleConns;
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AlipayUtil.getTimestamp(),
    req_msg_id = Util.getNonce(),
    access_key = @accessKeyId,
    charset = 'UTF-8',
    baseSdkVersion = 'Tea-SDK',
    sdkVersion = 'Tea-SDK-20201209',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = @endpoint,
    user-agent = getUserAgent()
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AlipayUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var obj = Util.readAsJSON(__response.body);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AlipayUtil.hasError(res)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

/**
 * Get user agent
 * @return user agent
 */
function getUserAgent(): string {
  var userAgent = 'TeaClient/1.0.0';
  return Util.getUserAgent(userAgent);
}

// 承运人责任险保险标的信息
model InsureCarrierObjectInfo {
  // 厂牌型号
  cpModel?: string(name='cp_model', example='xxxx'),
  // 车架号
  frameNo?: string(name='frame_no', example='xxx'),
  // 车牌号码
  licenseNo?: string(name='license_no', example='京A23211'),
  // 吨位
  tonNage?: string(name='ton_nage', example='10'),
  // 行驶证车主
  drivPer?: string(name='driv_per', example='张三'),
  // 运营证号
  runNo?: string(name='run_no', example='xxxx'),
  // 运输货物
  tsCarGo?: string(name='ts_car_go', example='运输货物'),
}

// 货主支付方式
model PayAmount {
  // 支付金额（2位小数）
  amount?: string(name='amount', example='10000.00'),
  // 支付方式
  payType?: string(name='pay_type', example='银行转账'),
}

// 提单货物数据
model MasterBlGoodsDto {
  // 唛头
  marks?: string(name='marks', example='暂无'),
  // 货物
  goods?: string(name='goods', example='笔记本电脑'),
  // 货物类型
  goodsType?: string(name='goods_type', example='暂无'),
  // 包装类型
  packageType?: string(name='package_type', example='暂无'),
  // 委托件数
  number?: string(name='number', example='10000'),
  // 委托重量
  weight?: string(name='weight', example='暂无'),
  // 委托体积
  volume?: string(name='volume', example='暂无'),
}

// 电子提单批次下提单明细（无效）
model EblDeatil {
  // 电子提单copy文件hash
  eblCopyPdfFileHash?: string(name='ebl_copy_pdf_file_hash', example='暂无'),
  // 电子提单copy文件id
  eblCopyPdfFileId?: string(name='ebl_copy_pdf_file_id', example='暂无'),
  // 电子提单编号
  eblNo?: string(name='ebl_no', example='暂无'),
}

// 资费项发票
model ReceiptTariffInvoiceParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 发票金额 业务必填
  invoiceAmount?: string(name='invoice_amount', example='暂无'),
  // 资费项金额 业务必填
  receiptTariffAmount?: string(name='receipt_tariff_amount', example='暂无'),
  // 资费单据编号 业务必填
  receiptTariffCode?: string(name='receipt_tariff_code', example='暂无'),
  // 资费项发票code
  receiptTariffInvoiceCode?: string(name='receipt_tariff_invoice_code', example='暂无'),
}

// 集装箱列表
model HouseBlContainerParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 集装箱ID
  containerId?: string(name='container_id', example='暂无'),
  // 箱号
  containerNo?: string(name='container_no', example='暂无'),
}

// 订舱单
model MasterBlBookingParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 订舱单号
  bookingNo?: string(name='booking_no', example='暂无'),
}

// 上传booking信息
model UploadOrderBooking {
  // 订舱单号
  bookingNo?: string(name='booking_no', example='暂无'),
  // 集装箱号  json字符串上传
  containerNos?: string(name='container_nos', example='{"123","123"}'),
}

// 轨迹核验结果
model TrackCheckResult {
  // 轨迹核验状态code
  trackCheckStatus?: string(name='track_check_status', example='AD'),
  // 轨迹核验结果描述
  trackCheckStatusMsg?: string(name='track_check_status_msg', example='运单验证正常'),
}

// 资费项账单
model PayBillTariffParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='UPDATE、DELETE、INSERT'),
  // 账单金额 业务必填
  billAmount?: string(name='bill_amount', example='暂无'),
  // 应付账单、应付资费项 多对多code
  payBillTariffCode?: string(name='pay_bill_tariff_code', example='暂无'),
  //  资费项金额 业务必填
  payTariffAmount?: string(name='pay_tariff_amount', example='暂无'),
  // 应付资费项编号 业务必填
  payTariffCode?: string(name='pay_tariff_code', example='暂无'),
}

// 箱子信息
model VehicleContainerParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 集装箱ID
  containerId?: string(name='container_id', example='暂无'),
  // 箱号
  containerNo?: string(name='container_no', example='暂无'),
  // 封号
  sealNo?: string(name='seal_no', example='暂无'),
}

// 包含文件id、文件hash信息
model UploadFileInfo {
  // 文件id
  fileId?: string(name='file_id', example='123456'),
  // 文件hash
  fileHash?: string(name='file_hash', example='ca94860b2f902e1ba7917d2c6a983cc43e5b3921f4b7ab28ea791ac28314ba52'),
}

// 货物
model ContainerGoodsParam {
  // 预计备货时间
  cargoReadyDate?: long(name='cargo_ready_date', example='预计备货时间'),
  // 危险品页号
  dgPageNo?: string(name='dg_page_no', example='危险品页号'),
  // 危险品级别
  dgType?: string(name='dg_type', example='危险品级别'),
  // 危险品闪点
  flashPoint?: string(name='flash_point', example='危险品闪点'),
  // 货物
  goods?: string(name='goods', example='货物'),
  // 货物中文名
  goodsCn?: string(name='goods_cn', example='货物中文名'),
  // 货物类型 业务必填
  goodsType?: string(name='goods_type', example='货物类型'),
  // HS CODE
  hsCodes?: [ string ](name='hs_codes', example='HS CODE'),
  // 唛头
  marks?: string(name='marks', example='唛头'),
  // 件数 业务必填
  number?: string(name='number', example='1'),
  // 包装类型
  packageType?: string(name='package_type', example='暂无'),
  // 实际件数
  realNumber?: string(name='real_number', example='实际件数'),
  // 实际体积
  realVolume?: string(name='real_volume', example='实际体积'),
  // 实际重量
  realWeight?: string(name='real_weight', example='实际重量'),
  // 危险品联合国编号
  unNo?: string(name='un_no', example='危险品联合国编号'),
  // 体积 业务必填
  volume?: string(name='volume', example='1'),
  // 毛重 业务必填
  weight?: string(name='weight', example='1'),
}

// 物流金融信用流转流水信息
model StatementInfo {
  // 信用流转批次号
  batchId?: string(name='batch_id', example='123123'),
  // 全局唯一业务号
  outBizNo?: string(name='out_biz_no', example='123123'),
  // 信用流转凭证
  issueId?: string(name='issue_id', example='1212312'),
  // 合同号（预留）
  contractId?: string(name='contract_id', example='123123'),
  // 发行信用流转的运单号
  waybillId?: string(name='waybill_id', example='321312'),
  // 发行信用流转的支付单号
  payOrder?: string(name='pay_order', example='123123'),
  // 金额信息
  creditLimit?: string(name='credit_limit', example='18.67'),
  // 流水类型
  stateType?: string(name='state_type', example='FINANCE'),
  // 流水类型说明
  stateMsg?: string(name='state_msg', example='融资'),
  // 凭证来源方did
  fromDid?: string(name='from_did', example='did:mychain:fa142b66cb1dece6a36cd66081ceeece19674409149c32679f2e17ed2dd8312c'),
  // 凭证流转方did
  toDid?: string(name='to_did', example='did:mychain:fa142b66cb1dece6a36cd66081ceeece19674409149c32679f2e17ed2dd8312c'),
  // 信用凭证发起时间
  issueDate?: string(name='issue_date', example='1581579336000'),
  // 信用凭证到期时间
  expireDate?: string(name='expire_date', example='1581579336000'),
}

// 订舱单号
model CustomsOrderBookingParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 订舱单号
  bookingNo?: string(name='booking_no', example='暂无'),
}

// 信用凭证数据集合
model IssueTransferData {
  // 凭证id
  issueId?: string(name='issue_id', example='11111111'),
  // 转出方did
  payerDid?: string(name='payer_did', example='11111'),
  // 接收方did
  rcvDid?: string(name='rcv_did', example='111111'),
}

// 电子提单变更状态明细
model EblStatusDetail {
  // 当前提单状态
  currentEblStatus?: string(name='current_ebl_status', example='endorsed'),
  // 电子提单编号
  eblNo?: string(name='ebl_no', example='暂无 '),
  // 下一个提单状态
  nextEblStatus?: string(name='next_ebl_status', example='surrendered'),
}

// FinishWaybillOrderReq
model FinishWaybillOrderReq {
  // 运费
  allFreight?: string(name='all_freight', example='all_freight'),
  // 回单押金
  backFee?: string(name='back_fee', example='100'),
  // 货主支付运费金额
  consignorFreightAmount?: string(name='consignor_freight_amount', example='consignor_freight_amount'),
  // 运费增项
  freightIncr?: string(name='freight_incr', example='freight_incr'),
  // 运费扣减
  lossFee?: string(name='loss_fee', example='loss_fee'),
  // 平台did
  platformDid?: string(name='platform_did', example='did:mychain:b6db2d812b1dac07a8c2a6201db3fff529f1ce7d78f58888fd791aec84dc8a8e'),
  // 运单id
  taxWaybillId?: string(name='tax_waybill_id', example='运单id'),
}

// 凭证id发行信息
model IssueIdInfo {
  // 信用流转凭证
  issueId?: string(name='issue_id', example='123123'),
  // 全局唯一业务号
  outBizNo?: string(name='out_biz_no', example='fa142b66cb1'),
  // 合同号（预留）
  contractId?: string(name='contract_id', example='123'),
  // 发行信用流转的运单号
  waybillId?: string(name='waybill_id', example='123123'),
  // 支付订单
  payOrder?: string(name='pay_order', example='123123'),
  // 凭证金额
  ticketAmt?: string(name='ticket_amt', example='198.76'),
  // 信用凭证发起时间
  issueDate?: string(name='issue_date', example='1581579336000'),
  // 信用凭证到期时间
  expireDate?: string(name='expire_date', example='1581579336000'),
  // 发行结果状态 -1:发行失败状态， 0:未完成状态， 1:已发行状态
  status?: long(name='status', example='1'),
  // 失败原因信息
  errMsg?: string(name='err_msg', example='success'),
}

// 运单号-司机运费
model WaybillAmount {
  // 运单金额（2位小数）
  amount?: string(name='amount', example='100000.00'),
  // 运单号
  waybillId?: string(name='waybill_id', example='123456'),
}

// so通知关联的订舱单
model SoNotifyBookingParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 订舱单号
  bookingNo?: string(name='booking_no', example='123456789'),
  // 船公司  业务必填 
  carrier?: string(name='carrier', example='暂无'),
  // 箱型箱量 json格式 业务必填
  // [{"containerVolume":"33","containerType":"22"}]
  // containerVolume--箱量 业务必填
  // containerType--箱型 业务必填
  containerParams?: string(name='container_params', example='暂无'),
  // 截关时间
  customsClearance?: long(name='customs_clearance', example=''),
  // 场站
  cy?: string(name='cy', example='暂无'),
  // 截港时间
  cyClosing?: long(name='cy_closing', example=''),
  // 预计船期
  etd?: long(name='etd', example=''),
  // 港口
  port?: string(name='port', example='暂无'),
  // 截单时间
  siClosing?: long(name='si_closing', example='暂无'),
  // 船名  业务必填
  vessel?: string(name='vessel', example='暂无'),
  // 航次 业务必填
  voyage?: string(name='voyage', example='暂无'),
}

// 电子回单查询凭证数据
model ScpTicketIssueDataParam {
  // 凭证id
  issueId?: string(name='issue_id', example='12345566'),
  // 凭证对应的司机/货主的did
  did?: string(name='did', example='11111'),
}

// saas模式发行信息
model SaasIssueApplyInfo {
  // 货源订单
  cargoOrder?: string(name='cargo_order', example='123123'),
  // 合同号
  contractId?: string(name='contract_id', example='123123'),
  // 全局唯一业务单号
  outBizNo?: string(name='out_biz_no', example='123123'),
  // 支付单号
  payOrder?: string(name='pay_order', example='123123'),
  // 运单号
  waybillId?: string(name='waybill_id', example='123123'),
  // 司机did
  driverDid?: string(name='driver_did', example='123123'),
  // 发行费
  freight?: string(name='freight', example='1.12'),
  // 到期时间戳
  expireDate?: string(name='expire_date', example='1593504406597'),
}

// 资费项账单
model ReceiptBillTariffParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='UPDATE、DELETE、INSERT'),
  //  账单金额 业务必填
  billAmount?: string(name='bill_amount', example='暂无'),
  // 应收账单 、应收资费项 多对多关联code 
  receiptBillTariffCode?: string(name='receipt_bill_tariff_code', example='暂无'),
  // 资费项金额 业务必填
  receiptTariffAmount?: string(name='receipt_tariff_amount', example='暂无'),
  // 应收资费项编号 业务必填
  receiptTariffCode?: string(name='receipt_tariff_code', example='暂无'),
}

// 凭证开立申请信息
model IssueApplyInfo {
  // 货源订单
  cargoOrder?: string(name='cargo_order', example='123123'),
  // 合同号（预留）
  contractId?: string(name='contract_id', example='123'),
  // 凭证到期时间
  expireDate?: string(name='expire_date', example='1581579336000'),
  // 支付单运费，运费最多精确到小数点后2位
  freight?: string(name='freight', example='189.76'),
  // 全局唯一业务号
  outBizNo?: string(name='out_biz_no', example='fa142b66cb1dece6a3'),
  // 支付订单
  payOrder?: string(name='pay_order', example='123123'),
  // 运单id
  waybillId?: string(name='waybill_id', example='123123'),
  // 司机did
  driverDid?: string(name='driver_did', example='did:mychain:11119abde09890ad6c40a5f9ba96fcb33ca134c6c29efdbbc743549e62c12222'),
}

// 货源单号-货主运费
model CargoAmount {
  // 货运单对应金额（2位小数）
  amount?: string(name='amount', example='100000.00'),
  // 货源单号
  cargoOrder?: string(name='cargo_order', example='123466'),
}

// 集装箱列表
model MasterBlContainerParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 集装箱ID
  containerId?: string(name='container_id', example='暂无'),
  // 箱号
  containerNo?: string(name='container_no', example='暂无'),
}

// 物流轨迹位置
model LogisticLocation {
  // 结构化地址信息,规则遵循：国家、省份、城市、区县、城镇、乡村、街道、门牌号码、屋邨、大厦
  address?: string(name='address', example='北京市朝阳区阜通东大街6号 '),
  // 行政区划代码
  cityCode?: string(name='city_code', example='110000'),
  // 纬度
  // 
  lat?: string(name='lat', example='39.916527 '),
  // 经度
  lon?: string(name='lon', example='116.397128 '),
  // 轨迹时间戳
  trackTime?: long(name='track_time', example='1566221266000'),
}

// 订舱单
model HouseBlBookingParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 订舱单号
  bookingNo?: string(name='booking_no', example='暂无'),
}

// 池融资授信额度信息
model PfCreditQuotaInfo {
  // 证件号
  certNo?: string(name='cert_no', example='6323232'),
  // 证件类型
  certType?: string(name='cert_type', example='0'),
  // 授信到期日期
  creditEnd?: string(name='credit_end', example='2020-09-19'),
  // 授信起始日期
  creditStart?: string(name='credit_start', example='2020-09-11'),
  // 额度编号
  quotaNo?: string(name='quota_no', example='923323'),
  // 剩余额度
  remainingQuota?: string(name='remaining_quota', example='1'),
  // SON:放款账号loanAccNo
  // 还款账号repayAcctNo
  remark?: string(name='remark', example='loanAccNo'),
  // 额度状态：
  // 0、停用 / 1、启用  /  2、冻结
  status?: string(name='status', example='0'),
  // 授信额度
  totalQuota?: string(name='total_quota', example='0'),
  // 数据更新时间
  updateTime?: string(name='update_time', example='2020-09-10'),
  // 总质押额度
  totalPledgeQuota?: string(name='total_pledge_quota', example='100'),
  // 剩余质押额度
  remainPledgeQuota?: string(name='remain_pledge_quota', example='10'),
}

// 资费项发票
model PayTariffInvoiceParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 发票金额 业务必填
  invoiceAmount?: string(name='invoice_amount', example='暂无'),
  // 资费项金额 业务必填
  payTariffAmount?: string(name='pay_tariff_amount', example='暂无'),
  // 资费单据编号 业务必填
  payTariffCode?: string(name='pay_tariff_code', example='暂无'),
  // 资费项发票code
  payTariffInvoiceCode?: string(name='pay_tariff_invoice_code', example='暂无'),
}

// 应付账单发票关联项
model PayBillInvoiceParam {
  // 账单发票code
  payBillInvoiceCode?: string(name='pay_bill_invoice_code', example='xxx'),
  // 账单编号
  payBillOrderCode?: string(name='pay_bill_order_code', example='xxx'),
  // 账单金额
  payBillAmount?: string(name='pay_bill_amount', example='123123'),
  // 发票金额
  invoiceAmount?: string(name='invoice_amount', example='123123'),
  // 操作动作
  action?: string(name='action', example='UPDATE、DELETE、INSERT'),
}

// 投保基本信息
model InsureBaseInfo {
  // 投保人姓名
  tbrName?: string(name='tbr_name', example='张三'),
  // 投保人证件号
  tbrIdNo?: string(name='tbr_id_no', example='371023443423131'),
  // 投保人证件类型
  tbrIdType?: string(name='tbr_id_type', example='身份证'),
  // 投保人联系电话
  tbrTel?: string(name='tbr_tel', example='15000000000'),
  // 投保人地址
  tbrAddr?: string(name='tbr_addr', example='北京市某某区'),
  // 投保人邮箱
  tbrEmail?: string(name='tbr_email', example='xxx@email.com'),
  // 被保险人姓名
  bbrName?: string(name='bbr_name', example='李四'),
  // 被保险人证件类型
  bbrIdType?: string(name='bbr_id_type', example='身份证'),
  // 被保险人证件号码
  bbrIdNo?: string(name='bbr_id_no', example='3710221223232322'),
  // 被保险人联系电话
  bbrTel?: string(name='bbr_tel', example='150002323231'),
  // 被保险人地址
  bbrAddr?: string(name='bbr_addr', example='北京市新校区'),
  // 含税保费(元)，小数点两位
  preMium?: string(name='pre_mium', example='12.01'),
  // 保险起期
  effDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='eff_date', example='2018-10-10T10:10:00Z'),
  // 保险止期
  termDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='term_date', example='2018-10-10T10:10:00Z'),
  // 投保人证件类型有效起期
  idenrifyPeriodStart?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='idenrify_period_start', example='2018-10-10T10:10:00Z'),
  // 投保人证件类型有效止期
  identifyPeriodEnd?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='identify_period_end', example='2018-10-10T10:10:00Z'),
}

// 电子回单查询，具体凭证数据
model ScpTicketIssueData {
  // 凭证对应的司机/货主的did
  did?: string(name='did', example='1111'),
  // 	
  // 凭证id
  issueId?: string(name='issue_id', example='11111111'),
}

// 货物列表
model HouseBlGoodsParam {
  // 预计备货时间
  cargoReadyDate?: long(name='cargo_ready_date', example='预计备货时间'),
  // 危险品页号
  dgPageNo?: string(name='dg_page_no', example='危险品页号'),
  // 危险品级别
  dgType?: string(name='dg_type', example='危险品级别'),
  // 危险品闪点
  flashPoint?: string(name='flash_point', example='危险品闪点'),
  // 货物名称 业务必填
  goods?: string(name='goods', example='暂无'),
  // 货物中文名
  goodsCn?: string(name='goods_cn', example='货物中文名'),
  // 货物类型 业务必填
  goodsType?: string(name='goods_type', example='货物类型'),
  // HS CODE
  hsCodes?: [ string ](name='hs_codes', example='HS CODE'),
  // 唛头
  marks?: string(name='marks', example='暂无'),
  // 件数 业务必填
  number?: string(name='number', example='暂无'),
  // 包装类型
  packageType?: string(name='package_type', example='包装类型'),
  // 实际件数
  realNumber?: string(name='real_number', example='实际件数'),
  // 实际体积
  realVolume?: string(name='real_volume', example='实际体积'),
  // 实际重量
  realWeight?: string(name='real_weight', example='实际重量'),
  // 危险品联合国编号
  unNo?: string(name='un_no', example='危险品联合国编号'),
  // 委托体积 业务必填
  volume?: string(name='volume', example='委托体积'),
  // 委托重量 业务必填
  weight?: string(name='weight', example='委托重量'),
}

// 上传订单总金额
model UploadOrderAmount {
  // 币种
  currency?: string(name='currency', example='人民币'),
  // 总金额
  totalAmount?: string(name='total_amount', example='123.23'),
}

// 电子提单批次下提单明细
model EblDetail {
  // 电子提单copy文件hash
  eblCopyPdfFileHash?: string(name='ebl_copy_pdf_file_hash', example='暂无'),
  // 电子提单copy文件id
  eblCopyPdfFileId?: string(name='ebl_copy_pdf_file_id', example='暂无'),
  // 电子提单编号
  eblNo?: string(name='ebl_no', example='暂无'),
}

// 货物列表
model MasterBlGoodsParam {
  // 预计备货时间
  cargoReadyDate?: long(name='cargo_ready_date', example='预计备货时间'),
  // 危险品页号
  dgPageNo?: string(name='dg_page_no', example='危险品页号'),
  // 危险品级别
  dgType?: string(name='dg_type', example='危险品级别'),
  // 危险品闪点
  flashPoint?: string(name='flash_point', example='危险品闪点'),
  // 货物名称 业务必填
  goods?: string(name='goods', example='暂无'),
  // 货物中文名
  goodsCn?: string(name='goods_cn', example='货物中文名'),
  // 货物类型 业务必填
  goodsType?: string(name='goods_type', example='货物类型'),
  // 毛重 业务必填
  grossWeight?: string(name='gross_weight', example='暂无'),
  // HS CODE
  hsCodes?: [ string ](name='hs_codes', example='HS CODE'),
  // 唛头
  marks?: string(name='marks', example='暂无'),
  // 件数 业务必填
  number?: string(name='number', example='暂无'),
  // 包装类型
  packageType?: string(name='package_type', example='包装类型'),
  // 实际件数
  realNumber?: string(name='real_number', example='实际件数'),
  // 实际体积
  realVolume?: string(name='real_volume', example='实际体积'),
  // 实际重量
  realWeight?: string(name='real_weight', example='实际重量'),
  // 危险品联合国编号
  unNo?: string(name='un_no', example='危险品联合国编号'),
  // 委托体积 业务必填
  volume?: string(name='volume', example='委托体积'),
  // 委托重量 业务必填
  weight?: string(name='weight', example='委托重量'),
}

// A+模式发行信息
model IssueApplyInfoPlus {
  // 订单中的BookingNo，以英文逗号分割
  bookingNo?: string(name='booking_no', example='booking_no_A,booking_no_B,booking_no_C'),
  // 船公司did
  carrierDid?: string(name='carrier_did', example='123123'),
  // BookingNo中的箱号，以英文逗号分割
  containerNo?: string(name='container_no', example='booking_no_A:container_no_1,booking_no_A:container_no_2,booking_no_B:container_no_1'),
  // 到期时间戳
  expireDate?: string(name='expire_date', example='1595381053000'),
  // 发行金额，精确到小数点后2位
  issueAmt?: string(name='issue_amt', example='32.65'),
  // 全局唯一业务号
  outBizNo?: string(name='out_biz_no', example='123123'),
  // 支付单号
  outOrderNo?: string(name='out_order_no', example='123123'),
  // 运单订单id
  waybillId?: string(name='waybill_id', example='123123'),
}

// 历史数据
model UploadFinancingParam {
  // 订舱单量（票）
  bookingCount?: long(name='booking_count', example='123'),
  // 唯一标识
  code?: string(name='code', example='123'),
  // 结束日期
  endDate?: string(name='end_date', example='2020-01-31'),
  // 货代did
  forwarderDid?: string(name='forwarder_did', example='暂无'),
  // 开始日期
  startDate?: string(name='start_date', example='2020-01-01'),
  // 箱量【数量，不区分箱型，20GP是1TEU，40GP是2TEU】
  teu?: long(name='teu', example='123'),
  // 运输总额
  amounts?: string(name='amounts', example='[{"total_amount";"123.11","currency":“人民币”}]'),
}

// 链上hash
model TxDto {
  // 链上凭证
  txCode?: string(name='tx_code', example='d4648b331839616b6ad76ed74b5fabf9c188add347da55aef3caccfa471d9f66 '),
  // 链上存储结构对应类型
  dataType?: string(name='data_type', example='ORDER'),
}

// 用户凭证信息
model UserIssueId {
  // 凭证id
  issueId?: string(name='issue_id', example='12123'),
  // 凭证余额
  balanceAmt?: string(name='balance_amt', example='87.09'),
}

// 电子提单变更状态明细（无效）
model EblStatusDeatil {
  // 当前提单状态
  currentEblStatus?: string(name='current_ebl_status', example='endorsed'),
  // 电子提单编号
  eblNo?: string(name='ebl_no', example='暂无'),
  // 下一个提单状态
  nextEblStatus?: string(name='next_ebl_status', example='surrendered'),
}

model CreateDigitalLogisticPlatformDidRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 企业名称
  epCertName?: string(name='ep_cert_name'),
  // 企业信用号码
  epCertNo?: string(name='ep_cert_no'),
  // 企业法人姓名
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 企业法人身份证号码
  legalPersonCertNo?: string(name='legal_person_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
}

model CreateDigitalLogisticPlatformDidResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 无车承运平台DIS
  did?: string(name='did'),
}

/**
 * Description: 无车承运平台为自身申请DIS分布式数字身份
 * Summary: 无车承运平台DIS分布式数字身份申请
 */
async function createDigitalLogisticPlatformDid(request: CreateDigitalLogisticPlatformDidRequest): CreateDigitalLogisticPlatformDidResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticPlatformDidEx(request, runtime);
}

/**
 * Description: 无车承运平台为自身申请DIS分布式数字身份
 * Summary: 无车承运平台DIS分布式数字身份申请
 */
async function createDigitalLogisticPlatformDidEx(request: CreateDigitalLogisticPlatformDidRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticPlatformDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.platform.did.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticAgentDidRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 创建did的代理did
  agentDid?: string(name='agent_did'),
  // 企业名称
  epCertName?: string(name='ep_cert_name'),
  // 企业信用号码
  epCertNo?: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 企业法人姓名
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 企业法人身份证号码
  legalPersonCertNo?: string(name='legal_person_cert_no'),
}

model CreateDigitalLogisticAgentDidResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 无车承运平台did
  did?: string(name='did'),
}

/**
 * Description: 代理申请无车承运平台的DIS分布式数字身份。无车saas平台需要为平台中的各个无车承运平台创建dis时需要使用代理创建的模式为其创建分布式数字身份。代理申请分布式数字身份的前置条件为自身需已有分布式数字身份。
 * Summary: 无车承运平台DIS分布式数字身份代理申请
 */
async function createDigitalLogisticAgentDid(request: CreateDigitalLogisticAgentDidRequest): CreateDigitalLogisticAgentDidResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticAgentDidEx(request, runtime);
}

/**
 * Description: 代理申请无车承运平台的DIS分布式数字身份。无车saas平台需要为平台中的各个无车承运平台创建dis时需要使用代理创建的模式为其创建分布式数字身份。代理申请分布式数字身份的前置条件为自身需已有分布式数字身份。
 * Summary: 无车承运平台DIS分布式数字身份代理申请
 */
async function createDigitalLogisticAgentDidEx(request: CreateDigitalLogisticAgentDidRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticAgentDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.agent.did.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticConsignorDisRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 企业名称
  epCertName?: string(name='ep_cert_name'),
  // 企业信用号码
  epCertNo?: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 企业法人姓名
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 企业法人身份证号码
  legalPersonCertNo?: string(name='legal_person_cert_no'),
  // 所属承运平台did
  platformDid?: string(name='platform_did'),
  // 是否核验货主四要素，如果为true  法人姓名和法人身份证号为必填
  checkAll?: boolean(name='check_all'),
}

model CreateDigitalLogisticConsignorDisResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 货主did信息
  did?: string(name='did'),
}

/**
 * Description: 无车承运平台为货主申请联盟中唯一标识货主的DIS分布式数字身份,会对企业信息做核验，同一个企业多次申请dis将会返回相同的分布式数字身份。为货主申请分布式数字身份的前置条件为无车承运平台需已有分布式数字身份。
 * Summary: 货主DIS分布式数字身份申请
 */
async function createDigitalLogisticConsignorDis(request: CreateDigitalLogisticConsignorDisRequest): CreateDigitalLogisticConsignorDisResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticConsignorDisEx(request, runtime);
}

/**
 * Description: 无车承运平台为货主申请联盟中唯一标识货主的DIS分布式数字身份,会对企业信息做核验，同一个企业多次申请dis将会返回相同的分布式数字身份。为货主申请分布式数字身份的前置条件为无车承运平台需已有分布式数字身份。
 * Summary: 货主DIS分布式数字身份申请
 */
async function createDigitalLogisticConsignorDisEx(request: CreateDigitalLogisticConsignorDisRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticConsignorDisResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.consignor.dis.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticDriverDisRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 司机身份证号码
  certNo?: string(name='cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 司机手机号码
  mobile?: string(name='mobile'),
  // 司机姓名
  name?: string(name='name'),
  // 所属承运平台did
  platformDid?: string(name='platform_did'),
}

model CreateDigitalLogisticDriverDisResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 司机did
  did?: string(name='did'),
}

/**
 * Description: 无车承运平台为司机申请DIS分布式数字身份,会对司机做实人认证，同一个司机多次申请dis会返回相同的分布式数字身份。为司机申请分布式数字身份的前置条件为无车承运平台需已有分布式数字身份。
 * Summary: 司机DIS分布式数字身份申请
 */
async function createDigitalLogisticDriverDis(request: CreateDigitalLogisticDriverDisRequest): CreateDigitalLogisticDriverDisResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticDriverDisEx(request, runtime);
}

/**
 * Description: 无车承运平台为司机申请DIS分布式数字身份,会对司机做实人认证，同一个司机多次申请dis会返回相同的分布式数字身份。为司机申请分布式数字身份的前置条件为无车承运平台需已有分布式数字身份。
 * Summary: 司机DIS分布式数字身份申请
 */
async function createDigitalLogisticDriverDisEx(request: CreateDigitalLogisticDriverDisRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticDriverDisResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.driver.dis.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticCargoOrderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 运费
  allFreight?: string(name='all_freight'),
  // 货物行业编码
  cargoBusinessCode?: string(name='cargo_business_code'),
  // 货物商品编码
  cargoCode?: string(name='cargo_code'),
  // 货运险金额
  cargoInsuranceMoney?: string(name='cargo_insurance_money'),
  // 货物名称
  cargoName?: string(name='cargo_name'),
  // 货源单号
  cargoOrder?: string(name='cargo_order'),
  // 货物类型
  cargoType?: string(name='cargo_type'),
  // 货物单位
  cargoUnit?: string(name='cargo_unit'),
  // 货物体积，单位（方）
  cargoVolume?: string(name='cargo_volume'),
  // 货主did
  consignorDid?: string(name='consignor_did'),
  // 卸货地，XX省-XX市-XX区
  deliveryPlace?: string(name='delivery_place'),
  // 装货地，XX省-XX市-XX区
  loadingPlace?: string(name='loading_place'),
  // 所属承运平台did
  platformDid?: string(name='platform_did'),
  // 货源单创建时间
  startTime?: long(name='start_time'),
  // 联系人电话
  userPhone?: string(name='user_phone'),
  // 货物重量，单位（吨）
  weight?: string(name='weight'),
}

model CreateDigitalLogisticCargoOrderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 货源链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 货源订单创建，货主发货给平台时的订单信息
 * Summary: 货源订单创建
 */
async function createDigitalLogisticCargoOrder(request: CreateDigitalLogisticCargoOrderRequest): CreateDigitalLogisticCargoOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticCargoOrderEx(request, runtime);
}

/**
 * Description: 货源订单创建，货主发货给平台时的订单信息
 * Summary: 货源订单创建
 */
async function createDigitalLogisticCargoOrderEx(request: CreateDigitalLogisticCargoOrderRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticCargoOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.cargo.order.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticCargoPayRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  //  收款方银行账号
  bankAccountOfPayee?: string(name='bank_account_of_payee'),
  // 付款方银行账号,货主付款的开户银行账号
  bankAccountOfPayer?: string(name='bank_account_of_payer'),
  // 银行流水号
  bankNo?: string(name='bank_no'),
  // 收款方开户行（平台收款）
  // 取值：
  // MYBank_CloudCapital_2,  ## 云资金2.0
  bankOfPayee?: string(name='bank_of_payee'),
  // MYBank_CloudCapital_2,  ## 云资金2.0
  bankOfPayer?: string(name='bank_of_payer'),
  // 货源单号
  cargoOrder?: string(name='cargo_order'),
  // 核验渠道，请按取值约束值填入。
  // 
  // YBank_CloudCapital_2,  ## 云资金2.0
  checkChannel?: string(name='check_channel'),
  // CNY、USD
  // 币种
  currency?: string(name='currency'),
  // 费用类型 (运费、调度费、服务费)
  expenseType?: string(name='expense_type'),
  // 收款方名称
  payee?: string(name='payee'),
  // 付款方名称
  payer?: string(name='payer'),
  // 费用金额
  payment?: string(name='payment'),
  // 是否核验
  payCheck?: boolean(name='pay_check'),
  // 付款方did
  payDid?: string(name='pay_did'),
  // 平台支付单号
  payId?: string(name='pay_id'),
  // 支付备注
  payNote?: string(name='pay_note'),
  // 支付时间
  payTime?: long(name='pay_time'),
  // 支付类型
  payType?: string(name='pay_type'),
  // 收款方did
  recvDid?: string(name='recv_did'),
  // 支持关联单个运单和多个运单
  taxWaybillIds?: [ string ](name='tax_waybill_ids'),
}

model CreateDigitalLogisticCargoPayResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 货源支付链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 货源支付订单创建,货源订单需存在。
 * Summary: 货源支付订单创建
 */
async function createDigitalLogisticCargoPay(request: CreateDigitalLogisticCargoPayRequest): CreateDigitalLogisticCargoPayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticCargoPayEx(request, runtime);
}

/**
 * Description: 货源支付订单创建,货源订单需存在。
 * Summary: 货源支付订单创建
 */
async function createDigitalLogisticCargoPayEx(request: CreateDigitalLogisticCargoPayRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticCargoPayResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.cargo.pay.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticWaybillOrderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 用户链上账户 与司机did 二选一填写
  accountId?: string(name='account_id'),
  // 运费，单位（元），平台支付给司机的运费金额
  allFreight?: string(name='all_freight'),
  // 回单押金
  backFee?: string(name='back_fee'),
  // 业务类型
  businessType?: string(name='business_type'),
  // 货物行业编码
  cargoBusinessCode?: string(name='cargo_business_code'),
  // 货物商品编码
  cargoCode?: string(name='cargo_code'),
  // 货运险金额
  cargoInsuranceMoney?: string(name='cargo_insurance_money'),
  // 货源单号，关联货主订单
  cargoOrder?: string(name='cargo_order'),
  // 货源单号数组
  cargoOrders?: [ string ](name='cargo_orders'),
  // 货物单位
  cargoUnit?: string(name='cargo_unit'),
  // 货物体积，单位（方）
  cargoVolume?: string(name='cargo_volume'),
  // 货物重量，单位（吨）
  cargoWeight?: string(name='cargo_weight'),
  // 车牌颜色，黄色、蓝色、绿色
  cartBadgeColor?: string(name='cart_badge_color'),
  // 车牌号
  // 
  cartBadgeNo?: string(name='cart_badge_no'),
  // 承运商did
  carCaptainDid?: string(name='car_captain_did'),
  // 货主运费金额，单位（元），货主支付给平台的运费金额
  consignorFreightAmount?: string(name='consignor_freight_amount'),
  // 建单时间，13位毫秒级时间戳
  // 
  createdTime?: long(name='created_time'),
  // 到达门点时间，13位毫秒级时间戳
  destDoorsEndTime?: long(name='dest_doors_end_time'),
  // 门点城市CODE，6位区域行政编码
  doorsCityCode?: string(name='doors_city_code'),
  // 门点城市名称
  doorsCityName?: string(name='doors_city_name'),
  // 门点区县CODE，6位区域行政编码
  doorsCountyCode?: string(name='doors_county_code'),
  // 门点区县名称
  doorsCountyName?: string(name='doors_county_name'),
  // 门点行政区划代码
  doorsDivisionCode?: string(name='doors_division_code'),
  // 门点省份CODE，6位区域行政编码
  doorsProvinceCode?: string(name='doors_province_code'),
  // 门点省份名称
  doorsProvinceName?: string(name='doors_province_name'),
  // 发货方名称
  // 
  drawee?: string(name='drawee'),
  // 发货方纳税人识别号
  // 
  draweeTaxNo?: string(name='drawee_tax_no'),
  // 司机分布式身份
  driverDid?: string(name='driver_did'),
  // 司机姓名 已填司机分布式身份的情况下可不填
  // 
  driverName?: string(name='driver_name'),
  // 目的地详细地址
  endAddress?: string(name='end_address'),
  // 目的地城市CODE，6位区域行政编码
  // 
  endCityCode?: string(name='end_city_code'),
  // 目的地城市名称
  // 
  endCityName?: string(name='end_city_name'),
  // 目的地区县CODE，6位区域行政编码
  endCountyCode?: string(name='end_county_code'),
  // 目的地区县名称
  // 
  endCountyName?: string(name='end_county_name'),
  // 结束行政区划代码，12位区域行政编码，（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  // 
  endDivisionCode?: string(name='end_division_code'),
  // 目的地省份CODE，6位区域行政编码
  // 
  endProvinceCode?: string(name='end_province_code'),
  // 目的地省份名称
  // 
  endProvinceName?: string(name='end_province_name'),
  // 目的地街道CODE，12区域行政编码
  endStreetCode?: string(name='end_street_code'),
  // 目的地街道名称
  endStreetName?: string(name='end_street_name'),
  // 运费增项
  // 
  freightIncr?: string(name='freight_incr'),
  // 货物数量
  // 
  goodsAmount?: long(name='goods_amount'),
  // 货物数量单位类型
  // 
  goodsAmountType?: string(name='goods_amount_type'),
  // 货物名称
  // 
  goodsName?: string(name='goods_name'),
  // 司机身份证号 已填司机分布式身份的情况下可不填
  idCard?: string(name='id_card'),
  // 运费扣减
  // 
  lossFee?: string(name='loss_fee'),
  // 司机手机号 已填司机分布式身份的情况下可不填
  // 
  mobileNo?: string(name='mobile_no'),
  // 系统识别id 网商识别号
  // 
  partnerId?: string(name='partner_id'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  // 
  platformDid?: string(name='platform_did'),
  // 预付款金额
  // 
  prepayments?: string(name='prepayments'),
  // 线下预付ETC
  // 
  prepaymentsBuyEtc?: string(name='prepayments_buy_etc'),
  // 线下气款金额
  // 
  prepaymentsBuyGas?: string(name='prepayments_buy_gas'),
  // 线下油款预付
  // 
  prepaymentsBuyOil?: string(name='prepayments_buy_oil'),
  // 预付ETC卡金额
  // 
  prepaymentsEtccard?: string(name='prepayments_etccard'),
  // 预付油卡金额
  // 
  prepaymentsOilcard?: string(name='prepayments_oilcard'),
  // 油卡赠送金额
  // 
  presentAmountOil?: string(name='present_amount_oil'),
  // 起始地详细地址
  startAddress?: string(name='start_address'),
  // 起始地城市CODE，6位区域行政编码
  startCityCode?: string(name='start_city_code'),
  // 起始地城市名称
  // 
  startCityName?: string(name='start_city_name'),
  // 起始地区县CODE，6位区域行政编码
  startCountyCode?: string(name='start_county_code'),
  // 起始地区县名称
  // 
  startCountyName?: string(name='start_county_name'),
  // 起始行政区划代码，12位区域行政编码（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  // 
  startDivisionCode?: string(name='start_division_code'),
  // 起始地省份CODE，6位区域行政编码
  startProvinceCode?: string(name='start_province_code'),
  // 起始地省份名称
  // 
  startProvinceName?: string(name='start_province_name'),
  // 起始地街道CODE，12区域行政编码
  startStreetCode?: string(name='start_street_code'),
  // 起始地街道名称
  startStreetName?: string(name='start_street_name'),
  // 起运时间戳，13位毫秒级时间戳
  startTime?: long(name='start_time'),
  // 运单id
  // 
  taxWaybillId?: string(name='tax_waybill_id'),
  // 车长，可以填：不限车长或者1.8，2.7，3.8，4.2，5，6.2，6.8，7.7，8.2，8.7，9.6，11.7，12.5，13，13.7，15，16，17.5等不超过2位小数的数字
  truckLength?: string(name='truck_length'),
  // 可以填：不限车型，平板，高栏，厢式，集装箱，自卸，冷藏，保温，高低板，面包车，棉被车，爬梯车，飞翼车
  truckType?: string(name='truck_type'),
  // 运输单价
  // 
  unitPrice?: string(name='unit_price'),
}

model CreateDigitalLogisticWaybillOrderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 物流平台将运单指派给下游（承运商、司机）时产生
 * Summary: 运单创建
 */
async function createDigitalLogisticWaybillOrder(request: CreateDigitalLogisticWaybillOrderRequest): CreateDigitalLogisticWaybillOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticWaybillOrderEx(request, runtime);
}

/**
 * Description: 物流平台将运单指派给下游（承运商、司机）时产生
 * Summary: 运单创建
 */
async function createDigitalLogisticWaybillOrderEx(request: CreateDigitalLogisticWaybillOrderRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticWaybillOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.order.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticWaybillPayRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 确认到账时间
  // 
  arriveTime?: long(name='arrive_time'),
  // 关联银行流水号
  // 
  bankSn?: string(name='bank_sn'),
  // 付款金额
  // 
  payAmount?: string(name='pay_amount'),
  // 付款方银行账号
  // 
  payBankCardNo?: string(name='pay_bank_card_no'),
  // 付款方开户行
  // 
  payBankName?: string(name='pay_bank_name'),
  // 是否核验
  payCheck?: boolean(name='pay_check'),
  // 付款方did
  // 
  payDid?: string(name='pay_did'),
  // 付款方名称
  // 
  payName?: string(name='pay_name'),
  // 付款时间戳
  // 
  payTime?: long(name='pay_time'),
  // 支付类型
  // 
  payTypeNew?: string(name='pay_type_new'),
  // 支付方式
  // 
  payWay?: string(name='pay_way'),
  // 无车承运平台分布式数字身份，缺省为自己的分布式数字身份
  // 
  platformDid?: string(name='platform_did'),
  // 支付订单ID
  // 
  posInfoId?: string(name='pos_info_id'),
  // 实际付款方开户行
  // 
  realPayBank?: string(name='real_pay_bank'),
  // 实际付款方银行账号
  // 
  realPayBankCardNo?: string(name='real_pay_bank_card_no'),
  // 实际付款方名称
  // 
  realPayName?: string(name='real_pay_name'),
  // 收款方银行账号
  // 
  recvBankCardNo?: string(name='recv_bank_card_no'),
  // 收款方开户行
  // 
  recvBankName?: string(name='recv_bank_name'),
  // 收款方did
  // 
  recvDid?: string(name='recv_did'),
  // 收款方名称
  // 
  recvName?: string(name='recv_name'),
  // 关联的运单ID
  // 
  waybillId?: string(name='waybill_id'),
  // MYBank_CloudCapital_1,  ## 云资金1.0
  // MYBank_CloudCapital_2,  ## 云资金2.0
  checkChannel?: string(name='check_channel'),
  // CNY, USD
  currency?: string(name='currency'),
}

model CreateDigitalLogisticWaybillPayResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 创建物流支付订单，运单需已存在并且未结束
 * Summary: 运单支付订单创建
 */
async function createDigitalLogisticWaybillPay(request: CreateDigitalLogisticWaybillPayRequest): CreateDigitalLogisticWaybillPayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticWaybillPayEx(request, runtime);
}

/**
 * Description: 创建物流支付订单，运单需已存在并且未结束
 * Summary: 运单支付订单创建
 */
async function createDigitalLogisticWaybillPayEx(request: CreateDigitalLogisticWaybillPayRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticWaybillPayResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.pay.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model ImportDigitalLogisticWaybillLocationRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 描述信息
  // 
  desc?: string(name='desc'),
  // 运单轨迹信息
  location?: [ LogisticLocation ](name='location'),
  // 所属平台分布式数字身份，缺省时为自己的分布式数字身份
  // 
  platformDid?: string(name='platform_did'),
  // 运单id
  // 
  taxWaybillId?: string(name='tax_waybill_id'),
}

model ImportDigitalLogisticWaybillLocationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用于上报第三方的轨迹位置信息，运单需已存在并且未结束
 * Summary: 第三方位置信息上报
 */
async function importDigitalLogisticWaybillLocation(request: ImportDigitalLogisticWaybillLocationRequest): ImportDigitalLogisticWaybillLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return importDigitalLogisticWaybillLocationEx(request, runtime);
}

/**
 * Description: 用于上报第三方的轨迹位置信息，运单需已存在并且未结束
 * Summary: 第三方位置信息上报
 */
async function importDigitalLogisticWaybillLocationEx(request: ImportDigitalLogisticWaybillLocationRequest, runtime: Util.RuntimeOptions): ImportDigitalLogisticWaybillLocationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.location.import', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticWaybillBillRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 受票方名称
  // 
  drawee?: string(name='drawee'),
  // 受票方纳税人识别号
  // 
  draweeTaxNo?: string(name='drawee_tax_no'),
  // 发票代码
  // 
  lzfpdm?: string(name='lzfpdm'),
  // 发票号码
  // 
  lzfphm?: string(name='lzfphm'),
  // 开票时间戳
  // 
  openTime?: long(name='open_time'),
  // 所属平台的分布式数字身份，缺省时为自己的分布式数字身份
  // 
  platformDid?: string(name='platform_did'),
  // 关联的运单ID
  // 
  waybillId?: string(name='waybill_id'),
}

model CreateDigitalLogisticWaybillBillResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 发票订单创建
 * Summary: 发票订单创建
 */
async function createDigitalLogisticWaybillBill(request: CreateDigitalLogisticWaybillBillRequest): CreateDigitalLogisticWaybillBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticWaybillBillEx(request, runtime);
}

/**
 * Description: 发票订单创建
 * Summary: 发票订单创建
 */
async function createDigitalLogisticWaybillBillEx(request: CreateDigitalLogisticWaybillBillRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticWaybillBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.bill.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticWaybillStatusRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  // 
  platformDid?: string(name='platform_did'),
  // 运单ID
  // 
  taxWaybillId?: string(name='tax_waybill_id'),
}

model QueryDigitalLogisticWaybillStatusResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 运单状态
  // 
  status?: string(name='status'),
  // 轨迹核验结果
  trackCheckResult?: TrackCheckResult(name='track_check_result'),
}

/**
 * Description: 查询物流运单状态
 * Summary: 查询运单状态
 */
async function queryDigitalLogisticWaybillStatus(request: QueryDigitalLogisticWaybillStatusRequest): QueryDigitalLogisticWaybillStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticWaybillStatusEx(request, runtime);
}

/**
 * Description: 查询物流运单状态
 * Summary: 查询运单状态
 */
async function queryDigitalLogisticWaybillStatusEx(request: QueryDigitalLogisticWaybillStatusRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticWaybillStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.status.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model FinishDigitalLogisticWaybillOrderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 链上账号 与司机did 二选一填写
  // 
  accountId?: string(name='account_id'),
  // 运费，单位（元），平台支付给司机的运费
  allFreight?: string(name='all_freight'),
  // 回单押金
  // 
  backFee?: string(name='back_fee'),
  // 业务类型
  businessType?: string(name='business_type'),
  // 货物行业编码
  cargoBusinessCode?: string(name='cargo_business_code'),
  // 货物商品编码
  cargoCode?: string(name='cargo_code'),
  // 货物运费险
  cargoInsuranceMoney?: string(name='cargo_insurance_money'),
  // 货源单号
  // 
  cargoOrder?: string(name='cargo_order'),
  // 货物单位
  cargoUnit?: string(name='cargo_unit'),
  // 货物体积，单位（方）
  cargoVolume?: string(name='cargo_volume'),
  // 货物重量，单位（吨）
  cargoWeight?: string(name='cargo_weight'),
  // 车牌颜色，黄色、蓝色、绿色
  cartBadgeColor?: string(name='cart_badge_color'),
  // 车牌号
  // 
  cartBadgeNo?: string(name='cart_badge_no'),
  // 承运商did
  carCaptainDid?: string(name='car_captain_did'),
  // 货主运费金额，货主支付给平台的运费金额
  consignorFreightAmount?: string(name='consignor_freight_amount'),
  // 建单时间，13位毫秒级时间戳
  createdTime?: long(name='created_time'),
  // 到达门点时间，13位毫秒级时间戳
  destDoorsEndTime?: long(name='dest_doors_end_time'),
  // 门点城市CODE，6位区域行政编码
  doorsCityCode?: string(name='doors_city_code'),
  // 门点城市名称
  doorsCityName?: string(name='doors_city_name'),
  // 门点区县CODE，6位区域行政编码
  doorsCountyCode?: string(name='doors_county_code'),
  // 门点区县名称
  doorsCountyName?: string(name='doors_county_name'),
  // 门点行政区划代码，12位区域行政编码，（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  doorsDivisionCode?: string(name='doors_division_code'),
  // 门点省份CODE，6位区域行政编
  doorsProvinceCode?: string(name='doors_province_code'),
  // 门点省份名称
  doorsProvinceName?: string(name='doors_province_name'),
  // 发货方名称
  // 
  drawee?: string(name='drawee'),
  // 发货方纳税人识别号
  // 
  draweeTaxNo?: string(name='drawee_tax_no'),
  // 司机分布式数字身份
  // 
  driverDid?: string(name='driver_did'),
  // 司机姓名 已填司机分布式身份的情况下可不填
  // 
  driverName?: string(name='driver_name'),
  // 目的地详细地址
  endAddress?: string(name='end_address'),
  // 目的地城市CODE，6位区域行政编
  endCityCode?: string(name='end_city_code'),
  // 目的地城市名称
  // 
  endCityName?: string(name='end_city_name'),
  // 目的地区县CODE，6位区域行政编
  endCountyCode?: string(name='end_county_code'),
  // 目的地区县名称
  // 
  endCountyName?: string(name='end_county_name'),
  // 结束行政区划代码 ，12位区域行政编，（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  // 
  endDivisionCode?: string(name='end_division_code'),
  // 目的地省份CODE，6位区域行政编
  // 
  endProvinceCode?: string(name='end_province_code'),
  // 目的地省份名称
  // 
  endProvinceName?: string(name='end_province_name'),
  // 目的地街道CODE，12位行政区域编码
  endStreetCode?: string(name='end_street_code'),
  // 目的地街道名称
  endStreetName?: string(name='end_street_name'),
  // 终结时间，13位毫秒级时间戳
  endTime?: long(name='end_time'),
  // 运费增项
  // 
  freightIncr?: string(name='freight_incr'),
  // 货物数量
  // 
  goodsAmount?: long(name='goods_amount'),
  // 货物数量单位类型
  // 
  goodsAmountType?: string(name='goods_amount_type'),
  // 货物名称
  // 
  goodsName?: string(name='goods_name'),
  // 司机身份证号 已填司机分布式身份的情况下可不填
  // 
  idCard?: string(name='id_card'),
  // 运费扣减
  // 
  lossFee?: string(name='loss_fee'),
  // 司机手机号 已填司机分布式身份的情况下可不填
  // 
  mobileNo?: string(name='mobile_no'),
  // 系统识别id 网商识别号
  // 
  partnerId?: string(name='partner_id'),
  // 是否进行资金验证
  // 
  payCheck?: boolean(name='pay_check'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  // 
  platformDid?: string(name='platform_did'),
  // 预付款金额
  // 
  prepayments?: string(name='prepayments'),
  // 线下预付ETC
  // 
  prepaymentsBuyEtc?: string(name='prepayments_buy_etc'),
  // 线下气款金额
  // 
  prepaymentsBuyGas?: string(name='prepayments_buy_gas'),
  // 线下油款预付
  // 
  prepaymentsBuyOil?: string(name='prepayments_buy_oil'),
  // 预付ETC卡金额
  // 
  prepaymentsEtccard?: string(name='prepayments_etccard'),
  // 预付油卡金额
  // 
  prepaymentsOilcard?: string(name='prepayments_oilcard'),
  // 油卡赠送金额
  // 
  presentAmountOil?: string(name='present_amount_oil'),
  // 起始地详细地址
  startAddress?: string(name='start_address'),
  // 起始地CODE
  // ，6位区域行政编
  startCityCode?: string(name='start_city_code'),
  // 起始地城市名称
  // 
  startCityName?: string(name='start_city_name'),
  // 起始地区县CODE
  // ，6位区域行政编
  startCountyCode?: string(name='start_county_code'),
  // 起始地区县名称
  // 
  startCountyName?: string(name='start_county_name'),
  // 起始行政区划代码，12位区域行政编，（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  // 
  startDivisionCode?: string(name='start_division_code'),
  // 起始地省份CODE
  // ，6位区域行政编
  startProvinceCode?: string(name='start_province_code'),
  // 起始地省份名称
  // 
  startProvinceName?: string(name='start_province_name'),
  // 起始地街道CODE，12位区域行政编
  startStreetCode?: string(name='start_street_code'),
  // 起始地街道名称
  startStreetName?: string(name='start_street_name'),
  // 起运时间，13位毫秒级时间戳
  // 
  startTime?: long(name='start_time'),
  // 运单ID
  // 
  taxWaybillId?: string(name='tax_waybill_id'),
  // 车长，可以填：不限车长或者1.8，2.7，3.8，4.2，5，6.2，6.8，7.7，8.2，8.7，9.6，11.7，12.5，13，13.7，15，16，17.5等不超过2位小数的数字
  truckLength?: string(name='truck_length'),
  // 车型，可以填写：不限车型，平板，高栏，厢式，集装箱，自卸，冷藏，保温，高低板，面包车，棉被车，爬梯车，飞翼车
  truckType?: string(name='truck_type'),
  // 运输单价
  // 
  unitPrice?: string(name='unit_price'),
}

model FinishDigitalLogisticWaybillOrderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  // 
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 运单完成表示整个运单的生命周期结束的最终状态，一般为和司机已进行确认结算后调用
完成后的运单无法再调用支付订单与轨迹位置上传接口。
 * Summary: 运单完成
 */
async function finishDigitalLogisticWaybillOrder(request: FinishDigitalLogisticWaybillOrderRequest): FinishDigitalLogisticWaybillOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return finishDigitalLogisticWaybillOrderEx(request, runtime);
}

/**
 * Description: 运单完成表示整个运单的生命周期结束的最终状态，一般为和司机已进行确认结算后调用
完成后的运单无法再调用支付订单与轨迹位置上传接口。
 * Summary: 运单完成
 */
async function finishDigitalLogisticWaybillOrderEx(request: FinishDigitalLogisticWaybillOrderRequest, runtime: Util.RuntimeOptions): FinishDigitalLogisticWaybillOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.order.finish', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticCargoPayorderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 收款方银行账号
  bankAccountOfPayee?: string(name='bank_account_of_payee'),
  // 付款方银行账号,货主付款的开户银行账号
  bankAccountOfPayer?: string(name='bank_account_of_payer'),
  // 银行流水号，云资金校验时 必传；
  // 
  bankNo?: string(name='bank_no'),
  // 收款方开户行（平台收款）
  // 
  // MYBank_CloudCapital_2,  ## 云资金2.0
  // 
  // 
  bankOfPayee?: string(name='bank_of_payee'),
  // 付款方开户行(货主付款)  取值
  // 
  // MYBank_CloudCapital_2,  ## 云资金2.0
  bankOfPayer?: string(name='bank_of_payer'),
  // 账单编号
  billId?: string(name='bill_id'),
  // 货源单号
  // 
  cargoOrder?: string(name='cargo_order'),
  // 核验渠道，请按取值约束值填入
  // MYBank_CloudCapital_2,  ## 云资金2.0
  checkChannel?: string(name='check_channel'),
  // 币种  
  // 按下列取值：
  // CNY、USD
  // 
  // 
  currency?: string(name='currency'),
  // 费用类型 (运费、调度费、服务费)
  // 
  expenseType?: string(name='expense_type'),
  // 收款方名称
  payee?: string(name='payee'),
  // 付款方名称
  payer?: string(name='payer'),
  // 费用金额（运单维度）
  // 
  payment?: string(name='payment'),
  // 是否核验
  payCheck?: boolean(name='pay_check'),
  // 付款方did
  // 
  payDid?: string(name='pay_did'),
  // 支付单号
  // 
  payId?: string(name='pay_id'),
  // 支付备注
  // 
  payNote?: string(name='pay_note'),
  // 支付时间
  // 
  payTime?: long(name='pay_time'),
  // 支付类型
  // 
  payType?: string(name='pay_type'),
  // 所属平台did
  platformDid?: string(name='platform_did'),
  // 收款方did
  recvDid?: string(name='recv_did'),
  // 请求唯一标识
  requestId?: string(name='request_id'),
  // 运单号
  taxWaybillId?: string(name='tax_waybill_id'),
}

model CreateDigitalLogisticCargoPayorderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 货源支付链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 货源支付订单创建,货源订单需存在。
 * Summary: 货源支付订单创建
 */
async function createDigitalLogisticCargoPayorder(request: CreateDigitalLogisticCargoPayorderRequest): CreateDigitalLogisticCargoPayorderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticCargoPayorderEx(request, runtime);
}

/**
 * Description: 货源支付订单创建,货源订单需存在。
 * Summary: 货源支付订单创建
 */
async function createDigitalLogisticCargoPayorderEx(request: CreateDigitalLogisticCargoPayorderRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticCargoPayorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.cargo.payorder.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticWaybillOrderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 链上账号 与司机did 二选一填写
  // 
  accountId?: string(name='account_id'),
  // 运费，单位（元），平台支付给司机的运费
  allFreight?: string(name='all_freight'),
  // 回单押金
  // 
  backFee?: string(name='back_fee'),
  // 业务类型
  businessType?: string(name='business_type'),
  // 货物行业编码
  // 
  cargoBusinessCode?: string(name='cargo_business_code'),
  // 货物商品编码
  // 
  cargoCode?: string(name='cargo_code'),
  // 货物运费险
  // 
  cargoInsuranceMoney?: string(name='cargo_insurance_money'),
  // 货源单号
  // 
  cargoOrder?: string(name='cargo_order'),
  // 货物单位
  // 
  cargoUnit?: string(name='cargo_unit'),
  // 货物体积，单位（方）
  // 
  cargoVolume?: string(name='cargo_volume'),
  // 货物重量，单位（吨）
  cargoWeight?: string(name='cargo_weight'),
  // 车牌颜色，黄色、蓝色、绿色
  cartBadgeColor?: string(name='cart_badge_color'),
  // 车牌号
  // 
  cartBadgeNo?: string(name='cart_badge_no'),
  // 承运商did
  carCaptainDid?: string(name='car_captain_did'),
  // 货主运费金额，货主支付给平台的运费
  // 
  consignorFreightAmount?: string(name='consignor_freight_amount'),
  // 建单时间，13位毫秒级时间戳
  createdTime?: long(name='created_time'),
  // 到达门点时间，13位毫秒级时间戳
  destDoorsEndTime?: long(name='dest_doors_end_time'),
  // 门点城市CODE，6位区域行政编码
  doorsCityCode?: string(name='doors_city_code'),
  // 门点城市名称
  doorsCityName?: string(name='doors_city_name'),
  // 门点区县CODE，6位区域行政编码
  doorsCountyCode?: string(name='doors_county_code'),
  // 门点区县名称
  doorsCountyName?: string(name='doors_county_name'),
  // 门点行政区划代码，12位区域行政编码（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  doorsDivisionCode?: string(name='doors_division_code'),
  // 门点省份CODE，6位区域行政编码
  doorsProvinceCode?: string(name='doors_province_code'),
  // 门点省份名称
  doorsProvinceName?: string(name='doors_province_name'),
  // 发货方名称
  // 
  drawee?: string(name='drawee'),
  // 发货方纳税人识别号
  // 
  draweeTaxNo?: string(name='drawee_tax_no'),
  // 司机分布式数字身份
  // 
  driverDid?: string(name='driver_did'),
  // 司机姓名 已填司机分布式身份的情况下可不填
  // 
  driverName?: string(name='driver_name'),
  // 目的地详细地址
  endAddress?: string(name='end_address'),
  // 目的地城市CODE，6位区域行政编码
  // 
  endCityCode?: string(name='end_city_code'),
  // 目的地城市名称
  // 
  endCityName?: string(name='end_city_name'),
  // 目的地区县CODE，6位区域行政编码
  endCountyCode?: string(name='end_county_code'),
  // 目的地区县名称
  // 
  endCountyName?: string(name='end_county_name'),
  // 结束行政区划代码（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  // 
  endDivisionCode?: string(name='end_division_code'),
  // 目的地省份CODE，6位区域行政编码
  endProvinceCode?: string(name='end_province_code'),
  // 目的地省份名称
  // 
  endProvinceName?: string(name='end_province_name'),
  // 目的地街道CODE，12位区域行政编码
  endStreetCode?: string(name='end_street_code'),
  // 目的地街道名称
  endStreetName?: string(name='end_street_name'),
  // 运达时间，13位毫秒级时间戳
  endTime?: long(name='end_time'),
  // 运费增项
  // 
  freightIncr?: string(name='freight_incr'),
  // 货物数量
  // 
  goodsAmount?: string(name='goods_amount'),
  // 货物数量单位类型
  // 
  goodsAmountType?: string(name='goods_amount_type'),
  // 货物名称
  // 
  goodsName?: string(name='goods_name'),
  // 司机身份证号 已填司机分布式身份的情况下可不填
  // 
  idCard?: string(name='id_card'),
  // 运费扣减
  // 
  lossFee?: string(name='loss_fee'),
  // 司机手机号 已填司机分布式身份的情况下可不填
  // 
  mobileNo?: string(name='mobile_no'),
  // 系统识别id 网商识别号
  // 
  partnerId?: string(name='partner_id'),
  // 是否进行资金验证
  // 
  payCheck?: boolean(name='pay_check'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  // 
  platformDid?: string(name='platform_did'),
  // 预付款金额
  // 
  prepayments?: string(name='prepayments'),
  // 线下预付ETC
  // 
  prepaymentsBuyEtc?: string(name='prepayments_buy_etc'),
  // 线下气款金额
  // 
  prepaymentsBuyGas?: string(name='prepayments_buy_gas'),
  // 线下油款预付
  // 
  prepaymentsBuyOil?: string(name='prepayments_buy_oil'),
  // 预付ETC卡金额
  // 
  prepaymentsEtccard?: string(name='prepayments_etccard'),
  // 预付油卡金额
  // 
  prepaymentsOilcard?: string(name='prepayments_oilcard'),
  // 油卡赠送金额
  // 
  presentAmountOil?: string(name='present_amount_oil'),
  // 起始地详细地址
  startAddress?: string(name='start_address'),
  // 起始地城市CODE，6位区域行政编码
  // 
  startCityCode?: string(name='start_city_code'),
  // 起始地城市名称
  // 
  startCityName?: string(name='start_city_name'),
  // 起始地区县CODE，6位区域行政编码
  // 
  // 
  startCountyCode?: string(name='start_county_code'),
  // 起始地区县名称
  // 
  startCountyName?: string(name='start_county_name'),
  // 起始行政区划代码（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  // 
  startDivisionCode?: string(name='start_division_code'),
  // 起始地省份CODE，6位区域行政编码
  // 
  // 
  startProvinceCode?: string(name='start_province_code'),
  // 起始地省份名称
  // 
  startProvinceName?: string(name='start_province_name'),
  // 起始地街道CODE，12位区域行政编码
  startStreetCode?: string(name='start_street_code'),
  // 起始地街道名称
  startStreetName?: string(name='start_street_name'),
  // 起运时间，13位毫秒级时间戳
  startTime?: long(name='start_time'),
  // 运单ID
  // 
  taxWaybillId?: string(name='tax_waybill_id'),
  // 车长，可以填：不限车长或者1.8，2.7，3.8，4.2，5，6.2，6.8，7.7，8.2，8.7，9.6，11.7，12.5，13，13.7，15，16，17.5等不超过2位小数的数字
  truckLength?: string(name='truck_length'),
  // 车型
  truckType?: string(name='truck_type'),
  // 运输单价
  // 
  unitPrice?: string(name='unit_price'),
}

model SaveDigitalLogisticWaybillOrderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 当货物到达目的地时，调用此接口
 * Summary: 运单运输完成
 */
async function saveDigitalLogisticWaybillOrder(request: SaveDigitalLogisticWaybillOrderRequest): SaveDigitalLogisticWaybillOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticWaybillOrderEx(request, runtime);
}

/**
 * Description: 当货物到达目的地时，调用此接口
 * Summary: 运单运输完成
 */
async function saveDigitalLogisticWaybillOrderEx(request: SaveDigitalLogisticWaybillOrderRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticWaybillOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.order.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CloseDigitalLogisticWaybillOrderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 无车承运平台分布式数字身份
  platformDid?: string(name='platform_did'),
  // 运单ID
  // 
  taxWaybillId?: string(name='tax_waybill_id'),
}

model CloseDigitalLogisticWaybillOrderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 运单关闭
 * Summary: 运单关闭
 */
async function closeDigitalLogisticWaybillOrder(request: CloseDigitalLogisticWaybillOrderRequest): CloseDigitalLogisticWaybillOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeDigitalLogisticWaybillOrderEx(request, runtime);
}

/**
 * Description: 运单关闭
 * Summary: 运单关闭
 */
async function closeDigitalLogisticWaybillOrderEx(request: CloseDigitalLogisticWaybillOrderRequest, runtime: Util.RuntimeOptions): CloseDigitalLogisticWaybillOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.order.close', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model FinishDigitalLogisticFinanceWaybillRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 运费
  allFreight?: string(name='all_freight'),
  // 回单押金
  backFee?: string(name='back_fee'),
  // 货主支付运费金额
  consignorFreightAmount?: string(name='consignor_freight_amount'),
  // 运费增项
  freightIncr?: string(name='freight_incr'),
  // 运费扣减
  lossFee?: string(name='loss_fee'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  platformDid?: string(name='platform_did'),
  // 运单id
  taxWaybillId?: string(name='tax_waybill_id'),
}

model FinishDigitalLogisticFinanceWaybillResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 完成物流运单
 * Summary: 完成物流运单
 */
async function finishDigitalLogisticFinanceWaybill(request: FinishDigitalLogisticFinanceWaybillRequest): FinishDigitalLogisticFinanceWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  return finishDigitalLogisticFinanceWaybillEx(request, runtime);
}

/**
 * Description: 完成物流运单
 * Summary: 完成物流运单
 */
async function finishDigitalLogisticFinanceWaybillEx(request: FinishDigitalLogisticFinanceWaybillRequest, runtime: Util.RuntimeOptions): FinishDigitalLogisticFinanceWaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.finance.waybill.finish', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model FinishDigitalLogisticFinanceTransportRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 运费
  allFreight?: string(name='all_freight'),
  // 回单押金
  backFee?: string(name='back_fee'),
  // 货主支付运费金额
  consignorFreightAmount?: string(name='consignor_freight_amount'),
  // 到达门点时间
  destDoorsEndTime?: long(name='dest_doors_end_time'),
  // 终结时间
  endTime?: long(name='end_time'),
  // 运费增项
  freightIncr?: string(name='freight_incr'),
  // 运费扣减
  lossFee?: string(name='loss_fee'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  platformDid?: string(name='platform_did'),
  // 运单id
  taxWaybillId?: string(name='tax_waybill_id'),
}

model FinishDigitalLogisticFinanceTransportResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 货源支付链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 运输完成
 * Summary: 运输完成
 */
async function finishDigitalLogisticFinanceTransport(request: FinishDigitalLogisticFinanceTransportRequest): FinishDigitalLogisticFinanceTransportResponse {
  var runtime = new Util.RuntimeOptions{};
  return finishDigitalLogisticFinanceTransportEx(request, runtime);
}

/**
 * Description: 运输完成
 * Summary: 运输完成
 */
async function finishDigitalLogisticFinanceTransportEx(request: FinishDigitalLogisticFinanceTransportRequest, runtime: Util.RuntimeOptions): FinishDigitalLogisticFinanceTransportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.finance.transport.finish', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UpdateDigitalLogisticFinanceWaybillRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 运费，单位（元），平台支付给司机的运费
  allFreight?: string(name='all_freight'),
  // 回单押金
  backFee?: string(name='back_fee'),
  // 业务类型
  businessType?: string(name='business_type'),
  // 货物行业编码
  cargoBusinessCode?: string(name='cargo_business_code'),
  // 货物商品编码
  cargoCode?: string(name='cargo_code'),
  // 货物运费险
  cargoInsuranceMoney?: string(name='cargo_insurance_money'),
  // 货源单号
  cargoOrder?: string(name='cargo_order'),
  // 货物单位
  cargoUnit?: string(name='cargo_unit'),
  // 货物体积，单位（方）
  cargoVolume?: string(name='cargo_volume'),
  // 货物重量，单位（吨）
  cargoWeight?: string(name='cargo_weight'),
  // 车牌颜色，黄色、蓝色、绿色
  cartBadgeColor?: string(name='cart_badge_color'),
  // 车牌号
  cartBadgeNo?: string(name='cart_badge_no'),
  // 承运商did
  carCaptainDid?: string(name='car_captain_did'),
  // 货主支付运费金额，货主支付给平台的运费金额
  consignorFreightAmount?: string(name='consignor_freight_amount'),
  // 建单时间，13位毫秒级时间戳
  createdTime?: long(name='created_time'),
  // 到达门点时间，13位毫秒级时间戳
  destDoorsEndTime?: string(name='dest_doors_end_time'),
  // 门点城市CODE，6位区域行政编码
  doorsCityCode?: string(name='doors_city_code'),
  // 门点城市名称
  doorsCityName?: string(name='doors_city_name'),
  // 门点区县CODE，6位区域行政编码
  doorsCountyCode?: string(name='doors_county_code'),
  // 门点区县名称
  doorsCountyName?: string(name='doors_county_name'),
  // 门点行政区划代码，12位区域行政编码，（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  doorsDivisionCode?: string(name='doors_division_code'),
  // 门点省份CODE，6位行政区域编码
  doorsProvinceCode?: string(name='doors_province_code'),
  // 门点省份名称
  doorsProvinceName?: string(name='doors_province_name'),
  // 发货方名称
  drawee?: string(name='drawee'),
  // 发货方纳税人识别号
  draweeTaxNo?: string(name='drawee_tax_no'),
  // 司机分布式数字身份
  driverDid?: string(name='driver_did'),
  // 目的地详细地址
  endAddress?: string(name='end_address'),
  // 目的地城市CODE，6位区域行政编码
  endCityCode?: string(name='end_city_code'),
  // 目的地城市名称
  endCityName?: string(name='end_city_name'),
  // 目的地区县CODE
  endCountyCode?: string(name='end_county_code'),
  // 目的地区县名称，6位区域行政编码
  endCountyName?: string(name='end_county_name'),
  // 结束行政区划代码，12位区域行政编码，（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  endDivisionCode?: string(name='end_division_code'),
  // 目的地省份CODE，6位区域行政编码
  endProvinceCode?: string(name='end_province_code'),
  // 目的地省份名称
  endProvinceName?: string(name='end_province_name'),
  // 目的地街道CODE，12位区域行政编码
  endStreetCode?: string(name='end_street_code'),
  // 目的地街道名称
  endStreetName?: string(name='end_street_name'),
  // 终结时间，13位毫秒级时间戳
  endTime?: long(name='end_time'),
  // 运费增项
  freightIncr?: string(name='freight_incr'),
  // 货物数量
  goodsAmount?: long(name='goods_amount'),
  // 货物数量单位类型
  goodsAmountType?: string(name='goods_amount_type'),
  // 货物名称
  goodsName?: string(name='goods_name'),
  // 运费扣减
  lossFee?: string(name='loss_fee'),
  // 网商识别号
  partnerId?: string(name='partner_id'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  // 
  platformDid?: string(name='platform_did'),
  // 预付款金额
  prepayments?: string(name='prepayments'),
  // 线下预付ETC
  prepaymentsBuyEtc?: string(name='prepayments_buy_etc'),
  // 线下气款金额
  prepaymentsBuyGas?: string(name='prepayments_buy_gas'),
  // 线下油款预付
  prepaymentsBuyOil?: string(name='prepayments_buy_oil'),
  // 预付ETC卡金额
  prepaymentsEtccard?: string(name='prepayments_etccard'),
  // 预付油卡金额
  prepaymentsOilcard?: string(name='prepayments_oilcard'),
  // 油卡赠送金额
  presentAmountOil?: string(name='present_amount_oil'),
  // 起始地详细地址
  startAddress?: string(name='start_address'),
  // 起始地CODE，6位区域行政编码
  startCityCode?: string(name='start_city_code'),
  // 起始地城市名称
  startCityName?: string(name='start_city_name'),
  // 起始地区县CODE，6位区域行政编码
  startCountyCode?: string(name='start_county_code'),
  // 起始地区县名称
  startCountyName?: string(name='start_county_name'),
  // 起始行政区划代码，12位区域行政编码（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  startDivisionCode?: string(name='start_division_code'),
  // 起始地省份CODE，6位区域行政编码
  startProvinceCode?: string(name='start_province_code'),
  // 起始地省份名称
  startProvinceName?: string(name='start_province_name'),
  // 起始地街道CODE，12位区域行政编码
  startStreetCode?: string(name='start_street_code'),
  // 起始地街道名称
  startStreetName?: string(name='start_street_name'),
  // 起运时间戳，13位毫秒级时间戳
  startTime?: long(name='start_time'),
  // 运单id
  taxWaybillId?: string(name='tax_waybill_id'),
  // 车长，可以填：不限车长或者1.8，2.7，3.8，4.2，5，6.2，6.8，7.7，8.2，8.7，9.6，11.7，12.5，13，13.7，15，16，17.5等不超过2位小数的数字
  truckLength?: string(name='truck_length'),
  // 车型，可以填写：不限车型，平板，高栏，厢式，集装箱，自卸，冷藏，保温，高低板，面包车，棉被车，爬梯车，飞翼车
  truckType?: string(name='truck_type'),
  // 运输单价
  unitPrice?: string(name='unit_price'),
}

model UpdateDigitalLogisticFinanceWaybillResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 货源支付链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 对运单信息项需更新时调用
 * Summary: 更新运单
 */
async function updateDigitalLogisticFinanceWaybill(request: UpdateDigitalLogisticFinanceWaybillRequest): UpdateDigitalLogisticFinanceWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDigitalLogisticFinanceWaybillEx(request, runtime);
}

/**
 * Description: 对运单信息项需更新时调用
 * Summary: 更新运单
 */
async function updateDigitalLogisticFinanceWaybillEx(request: UpdateDigitalLogisticFinanceWaybillRequest, runtime: Util.RuntimeOptions): UpdateDigitalLogisticFinanceWaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.finance.waybill.update', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model StartDigitalLogisticFinanceWaybillRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 货物运费险
  cargoInsuranceMoney?: string(name='cargo_insurance_money'),
  // 车牌颜色
  cartBadgeColor?: string(name='cart_badge_color'),
  // 车牌号
  cartBadgeNo?: string(name='cart_badge_no'),
  // 承运商did
  carCaptainDid?: string(name='car_captain_did'),
  // 司机分布式数字身份
  driverDid?: string(name='driver_did'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  platformDid?: string(name='platform_did'),
  // 起运时间，13位毫秒级时间戳
  startTime?: long(name='start_time'),
  // 运单id
  taxWaybillId?: string(name='tax_waybill_id'),
}

model StartDigitalLogisticFinanceWaybillResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 货源支付链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 当司机到达货主装货地后，调用此接口
 * Summary: 起运运单
 */
async function startDigitalLogisticFinanceWaybill(request: StartDigitalLogisticFinanceWaybillRequest): StartDigitalLogisticFinanceWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDigitalLogisticFinanceWaybillEx(request, runtime);
}

/**
 * Description: 当司机到达货主装货地后，调用此接口
 * Summary: 起运运单
 */
async function startDigitalLogisticFinanceWaybillEx(request: StartDigitalLogisticFinanceWaybillRequest, runtime: Util.RuntimeOptions): StartDigitalLogisticFinanceWaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.finance.waybill.start', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticCaptainDisRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 身份证号码
  certNo?: string(name='cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 手机号码
  mobile?: string(name='mobile'),
  // 姓名
  name?: string(name='name'),
  // 所属平台did
  platformDid?: string(name='platform_did'),
}

model CreateDigitalLogisticCaptainDisResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 车队长did
  did?: string(name='did'),
}

/**
 * Description: 创建承运商账户
 * Summary: 创建承运商账户
 */
async function createDigitalLogisticCaptainDis(request: CreateDigitalLogisticCaptainDisRequest): CreateDigitalLogisticCaptainDisResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticCaptainDisEx(request, runtime);
}

/**
 * Description: 创建承运商账户
 * Summary: 创建承运商账户
 */
async function createDigitalLogisticCaptainDisEx(request: CreateDigitalLogisticCaptainDisRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticCaptainDisResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.captain.dis.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticCargowaybillBillRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 货主账单总额（两位小数）
  billAmount?: string(name='bill_amount'),
  // 账单code（唯一标识）
  billCode?: string(name='bill_code'),
  // 账单生成时间(毫秒)
  billCreateTime?: long(name='bill_create_time'),
  // 账单期限
  billDeadline?: string(name='bill_deadline'),
  // 付款方did
  billPayerDid?: string(name='bill_payer_did'),
  // 货源单号-货主运费列表
  cargoAmounts?: [ CargoAmount ](name='cargo_amounts'),
  // 币种
  currency?: string(name='currency'),
  // 货主支付方式-支付金额列表
  payAmounts?: [ PayAmount ](name='pay_amounts'),
  // 平台did
  platformDid?: string(name='platform_did'),
  // 预计货主付款日期
  preConsignorPayDate?: long(name='pre_consignor_pay_date'),
  // 运单号-司机运费列表
  waybillAmounts?: [ WaybillAmount ](name='waybill_amounts'),
  // 账单到期日期
  deadline?: long(name='deadline'),
  // 运单上传状态，可填写：已完成、未完成
  waybillUploadStatus?: string(name='waybill_upload_status'),
}

model CreateDigitalLogisticCargowaybillBillResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 创建货主账单
 * Summary: 货主账单创建
 */
async function createDigitalLogisticCargowaybillBill(request: CreateDigitalLogisticCargowaybillBillRequest): CreateDigitalLogisticCargowaybillBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticCargowaybillBillEx(request, runtime);
}

/**
 * Description: 创建货主账单
 * Summary: 货主账单创建
 */
async function createDigitalLogisticCargowaybillBillEx(request: CreateDigitalLogisticCargowaybillBillRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticCargowaybillBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.cargowaybill.bill.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model ConfirmDigitalLogisticCargowaybillBillRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 账单金额（两位小数）
  billAmount?: string(name='bill_amount'),
  // 账单code（账单唯一标识）
  billCode?: string(name='bill_code'),
  // 账单确认货主did
  billConsignorDid?: string(name='bill_consignor_did'),
  // 账单确认日期（毫秒）
  billSureDate?: long(name='bill_sure_date'),
  // 是否结算
  whetherSettle?: boolean(name='whether_settle'),
  // 平台did
  platformDid?: string(name='platform_did'),
}

model ConfirmDigitalLogisticCargowaybillBillResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 确认货主账单
 * Summary: 货主账单确认
 */
async function confirmDigitalLogisticCargowaybillBill(request: ConfirmDigitalLogisticCargowaybillBillRequest): ConfirmDigitalLogisticCargowaybillBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmDigitalLogisticCargowaybillBillEx(request, runtime);
}

/**
 * Description: 确认货主账单
 * Summary: 货主账单确认
 */
async function confirmDigitalLogisticCargowaybillBillEx(request: ConfirmDigitalLogisticCargowaybillBillRequest, runtime: Util.RuntimeOptions): ConfirmDigitalLogisticCargowaybillBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.cargowaybill.bill.confirm', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticCargowaybillBillsettleRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 平台did
  platformDid?: string(name='platform_did'),
  // 账单code（账单唯一标识）
  billCode?: string(name='bill_code'),
  // 结算金额（2位小数）
  settleAmount?: string(name='settle_amount'),
  // 结算状态（只有2种状态：部分结算、已结清）
  settleStatus?: string(name='settle_status'),
}

model CreateDigitalLogisticCargowaybillBillsettleResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 结算货主账单
 * Summary: 货主账单结算
 */
async function createDigitalLogisticCargowaybillBillsettle(request: CreateDigitalLogisticCargowaybillBillsettleRequest): CreateDigitalLogisticCargowaybillBillsettleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticCargowaybillBillsettleEx(request, runtime);
}

/**
 * Description: 结算货主账单
 * Summary: 货主账单结算
 */
async function createDigitalLogisticCargowaybillBillsettleEx(request: CreateDigitalLogisticCargowaybillBillsettleRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticCargowaybillBillsettleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.cargowaybill.billsettle.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UpdateDigitalLogisticWaybillorderPlatformdidRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 新平台diid
  newPlatformDid?: string(name='new_platform_did'),
  // 老平台did
  oldPlatformDid?: string(name='old_platform_did'),
  // 运单号
  taxWaybillId?: string(name='tax_waybill_id'),
}

model UpdateDigitalLogisticWaybillorderPlatformdidResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 运单平台did更新
 * Summary: 运单平台did更新
 */
async function updateDigitalLogisticWaybillorderPlatformdid(request: UpdateDigitalLogisticWaybillorderPlatformdidRequest): UpdateDigitalLogisticWaybillorderPlatformdidResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDigitalLogisticWaybillorderPlatformdidEx(request, runtime);
}

/**
 * Description: 运单平台did更新
 * Summary: 运单平台did更新
 */
async function updateDigitalLogisticWaybillorderPlatformdidEx(request: UpdateDigitalLogisticWaybillorderPlatformdidRequest, runtime: Util.RuntimeOptions): UpdateDigitalLogisticWaybillorderPlatformdidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybillorder.platformdid.update', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UpdateDigitalLogisticCargowaybillBillRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 货主账单总额（两位小数）
  billAmount?: string(name='bill_amount'),
  // 账单code（唯一标识）
  billCode?: string(name='bill_code'),
  // 账单生成时间(毫秒)
  billCreateTime?: long(name='bill_create_time'),
  // 账单期限
  billDeadline?: string(name='bill_deadline'),
  // 付款方did
  billPayerDid?: string(name='bill_payer_did'),
  // 货源单号-货主运费列表
  cargoAmounts?: [ CargoAmount ](name='cargo_amounts'),
  // 币种
  currency?: string(name='currency'),
  // 账单到期日期
  deadline?: long(name='deadline'),
  // 货主支付方式-支付金额列表
  payAmounts?: [ PayAmount ](name='pay_amounts'),
  // 平台did
  platformDid?: string(name='platform_did'),
  // 预计货主付款日期
  preConsignorPayDate?: long(name='pre_consignor_pay_date'),
  // 运单号-司机运费列表
  waybillAmounts?: [ WaybillAmount ](name='waybill_amounts'),
  // 运单上传状态，可填写：已完成、未完成
  waybillUploadStatus?: string(name='waybill_upload_status'),
}

model UpdateDigitalLogisticCargowaybillBillResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 更新货主账单
 * Summary: 货主账单更新
 */
async function updateDigitalLogisticCargowaybillBill(request: UpdateDigitalLogisticCargowaybillBillRequest): UpdateDigitalLogisticCargowaybillBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDigitalLogisticCargowaybillBillEx(request, runtime);
}

/**
 * Description: 更新货主账单
 * Summary: 货主账单更新
 */
async function updateDigitalLogisticCargowaybillBillEx(request: UpdateDigitalLogisticCargowaybillBillRequest, runtime: Util.RuntimeOptions): UpdateDigitalLogisticCargowaybillBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.cargowaybill.bill.update', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticDisDidRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 个人身份证号。当组织类型为个人时，此字段为必填项
  certNo?: string(name='cert_no'),
  // 企业名称。当组织类型为企业时，此字段为必填项
  epCertName?: string(name='ep_cert_name'),
  // 企业信用号码。当组织类型为企业时，此字段为必填项
  epCertNo?: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 企业法人姓名。当申请企业类型网络货运平台或者子平台时，此字段为必填项
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 企业法人身份证号码。当申请企业类型网络货运平台或者子平台时，此字段为必填项
  legalPersonCertNo?: string(name='legal_person_cert_no'),
  // 个人手机号码。当组织类型为个人时，此字段为必填项
  mobile?: string(name='mobile'),
  // 个人姓名。当组织类型为个人时，此字段为必填项
  name?: string(name='name'),
  // 组织类型。企业或者个人，二选一填入
  organizationType?: string(name='organization_type'),
  // 所属承运平台did。在申请“网络货运平台”角色的时候，这个字段非必填；申请其他角色类型时，此字段必填
  platformDid?: string(name='platform_did'),
  // 角色类型。
  // 当组织类型为个人时，可填角色：货主、司机、承运商；
  // 当组织类型为企业时，可填角色：网络货运平台、道路运输企业/3pl、货主、子平台、承运商
  roleType?: string(name='role_type'),
}

model CreateDigitalLogisticDisDidResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 分布式数字身份did
  did?: string(name='did'),
  // 组织类型
  organizationType?: string(name='organization_type'),
  // 现阶段此did下的所有授予的角色
  roleTypes?: [ string ](name='role_types'),
}

/**
 * Description: 分布式申请did账户集合，可通过此接口申请个人类型角色为货主、承运商、司机的分布式数字身份did；可申请企业类型角色为货主、网络货运平台、道路运输企业/3pl、承运商、子平台的分布式数字身份did。注：接口可允许多次调用，但每次调用只允许申请一个角色，不允许一次调用申请多个角色
 * Summary: 分布式数字身份申请did集合
 */
async function createDigitalLogisticDisDid(request: CreateDigitalLogisticDisDidRequest): CreateDigitalLogisticDisDidResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticDisDidEx(request, runtime);
}

/**
 * Description: 分布式申请did账户集合，可通过此接口申请个人类型角色为货主、承运商、司机的分布式数字身份did；可申请企业类型角色为货主、网络货运平台、道路运输企业/3pl、承运商、子平台的分布式数字身份did。注：接口可允许多次调用，但每次调用只允许申请一个角色，不允许一次调用申请多个角色
 * Summary: 分布式数字身份申请did集合
 */
async function createDigitalLogisticDisDidEx(request: CreateDigitalLogisticDisDidRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticDisDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.dis.did.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UploadDigitalLogisticTransportContractRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 货主did，一般为合同甲方的链上数字身份
  consignorDid?: string(name='consignor_did'),
  // 运输合同生效日期，格式要求yyyy-MM-dd
  contractEffectiveDate?: string(name='contract_effective_date'),
  // 运输合同到期日期，要求格式yyyy-MM-dd
  contractExpiresDate?: string(name='contract_expires_date'),
  // 影像件文件信息列表，可以包含多个文件，每个文件需要有文件id和文件hash  (请求蚂蚁影像上传接口获取的文件id和文件hash)。影像文件格式要求：bmp,jpg,jpeg,gif,psd,png,tiff,tga,eps,pdf
  fileInfos?: [ UploadFileInfo ](name='file_infos'),
  // 3plDid，一般为合同乙方的链上数字身份
  thirdPartyLogisticsDid?: string(name='third_party_logistics_did'),
  // 运输合同编号
  transportContractCode?: string(name='transport_contract_code'),
}

model UploadDigitalLogisticTransportContractResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 3PL运输合同上传
 * Summary: 3PL运输合同上传
 */
async function uploadDigitalLogisticTransportContract(request: UploadDigitalLogisticTransportContractRequest): UploadDigitalLogisticTransportContractResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDigitalLogisticTransportContractEx(request, runtime);
}

/**
 * Description: 3PL运输合同上传
 * Summary: 3PL运输合同上传
 */
async function uploadDigitalLogisticTransportContractEx(request: UploadDigitalLogisticTransportContractRequest, runtime: Util.RuntimeOptions): UploadDigitalLogisticTransportContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.transport.contract.upload', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UploadDigitalLogisticTransportRouteRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 目的地省市区，要求格式 XX省-XX市-XX区，比如四川省-成都市-青白江区
  endAddress?: string(name='end_address'),
  // 目的地详细地址，街道村社区道路楼宇门牌号
  endDetailedAddress?: string(name='end_detailed_address'),
  // 起始地省市区，要求格式  XX省-XX市-XX区。比如浙江省-杭州市-余杭区
  startAddress?: string(name='start_address'),
  // 起始地详细地址，街道村社区道路楼宇门牌号
  startDetailedAddress?: string(name='start_detailed_address'),
  // 3plDid
  thirdPartyLogisticsDid?: string(name='third_party_logistics_did'),
  // 运输合同编号
  transportContractCode?: string(name='transport_contract_code'),
  // 运输线路编码
  transportRouteCode?: string(name='transport_route_code'),
}

model UploadDigitalLogisticTransportRouteResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 3PL运输线路上传
 * Summary: 3PL运输线路上传
 */
async function uploadDigitalLogisticTransportRoute(request: UploadDigitalLogisticTransportRouteRequest): UploadDigitalLogisticTransportRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDigitalLogisticTransportRouteEx(request, runtime);
}

/**
 * Description: 3PL运输线路上传
 * Summary: 3PL运输线路上传
 */
async function uploadDigitalLogisticTransportRouteEx(request: UploadDigitalLogisticTransportRouteRequest, runtime: Util.RuntimeOptions): UploadDigitalLogisticTransportRouteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.transport.route.upload', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticTransportWaybillRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 运费，3pl支付给下承运商的运费金额，单位（元），要求格式为不超过二位小数
  allFreight?: string(name='all_freight'),
  // 货物名称
  cargoName?: string(name='cargo_name'),
  // 货物体积，单位（方）。货物重量、货物体积二选一填写
  cargoVolume?: string(name='cargo_volume'),
  // 货物重量，单位（吨）。货物重量、货物体积二选一填写
  cargoWeight?: string(name='cargo_weight'),
  // 下游承运商did，一般为下一级承运商数字身份
  carrierDid?: string(name='carrier_did'),
  // 车牌颜色，需填写黄色、蓝色、绿色中的一种
  carBadgeColor?: string(name='car_badge_color'),
  // 车牌号，承运车牌号
  carBadgeNo?: string(name='car_badge_no'),
  // 货主did，一般为合同甲方的链上数字身份
  consignorDid?: string(name='consignor_did'),
  // 创建时间，13位毫秒级时间戳
  createTime?: long(name='create_time'),
  // 实际承运司机did，实际承运司机的链上数字身份
  driverDid?: string(name='driver_did'),
  // 目的地省市区，要求格式 XX省-XX市-XX区，比如四川省-成都市-青白江区
  endAddress?: string(name='end_address'),
  // 目的地详细地址，街道村社区道路楼宇门牌号
  endDetailedAddress?: string(name='end_detailed_address'),
  // 货物数量
  goodsAmount?: long(name='goods_amount'),
  // 货物数量单位类型
  goodsAmountType?: string(name='goods_amount_type'),
  // 起始地省市区，要求格式 XX省-XX市-XX区。比如浙江省-杭州市-余杭区
  startAddress?: string(name='start_address'),
  // 起始地详细地址，街道村社区道路楼宇门牌号
  startDetailedAddress?: string(name='start_detailed_address'),
  // 客户系统内运单编号
  taxWaybillId?: string(name='tax_waybill_id'),
  // 3plDid，一般为合同乙方的链上数字身份
  thirdPartyLogisticsDid?: string(name='third_party_logistics_did'),
  // 所属合同编号
  transportContractCode?: string(name='transport_contract_code'),
  // 所属运输线路编码
  transportRouteCode?: string(name='transport_route_code'),
}

model CreateDigitalLogisticTransportWaybillResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 3PL运单创建
 * Summary: 3PL运单创建
 */
async function createDigitalLogisticTransportWaybill(request: CreateDigitalLogisticTransportWaybillRequest): CreateDigitalLogisticTransportWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticTransportWaybillEx(request, runtime);
}

/**
 * Description: 3PL运单创建
 * Summary: 3PL运单创建
 */
async function createDigitalLogisticTransportWaybillEx(request: CreateDigitalLogisticTransportWaybillRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticTransportWaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.transport.waybill.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UpdateDigitalLogisticWaybillActionRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作类型，以下二选一填写：运单起运、运输完成
  operateAction?: string(name='operate_action'),
  // 运单起运或运输完成的时间，要求为13位毫秒级时间戳
  operateActionTime?: long(name='operate_action_time'),
  // 客户系统内运单编号
  taxWaybillId?: string(name='tax_waybill_id'),
  // 3plDid，一般为合同乙方的链上数字身份
  thirdPartyLogisticsDid?: string(name='third_party_logistics_did'),
}

model UpdateDigitalLogisticWaybillActionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 3PL运单状态更新
 * Summary: 3PL运单状态更新
 */
async function updateDigitalLogisticWaybillAction(request: UpdateDigitalLogisticWaybillActionRequest): UpdateDigitalLogisticWaybillActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDigitalLogisticWaybillActionEx(request, runtime);
}

/**
 * Description: 3PL运单状态更新
 * Summary: 3PL运单状态更新
 */
async function updateDigitalLogisticWaybillActionEx(request: UpdateDigitalLogisticWaybillActionRequest, runtime: Util.RuntimeOptions): UpdateDigitalLogisticWaybillActionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.action.update', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UpdateDigitalLogisticTransportWaybillRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 运费，3pl支付给下承运商的运费金额，单位（元），要求格式为不超过二位小数
  allFreight?: string(name='all_freight'),
  // 货物名称
  cargoName?: string(name='cargo_name'),
  // 单位（方），货物体积
  cargoVolume?: string(name='cargo_volume'),
  // 单位（吨），货物重量
  cargoWeight?: string(name='cargo_weight'),
  // 下游承运商did，一般为下一级承运商数字身份
  carrierDid?: string(name='carrier_did'),
  // 车牌颜色，需填写黄色、蓝色、绿色中的一种
  carBadgeColor?: string(name='car_badge_color'),
  // 车牌号，承运车牌号
  carBadgeNo?: string(name='car_badge_no'),
  // 货主did，一般为合同甲方的链上数字身份
  consignorDid?: string(name='consignor_did'),
  // 创建时间，13位毫秒级时间戳
  createTime?: long(name='create_time'),
  // 实际承运司机did，实际承运司机的链上数字身份
  driverDid?: string(name='driver_did'),
  // 目的地省市区，要求格式 XX省-XX市-XX区，比如四川省-成都市-青白江区
  endAddress?: string(name='end_address'),
  // 目的地详细地址，街道村社区道路楼宇门牌号
  endDetailedAddress?: string(name='end_detailed_address'),
  // 到达时间，13位毫秒级时间戳
  endTime?: long(name='end_time'),
  // 货物数量
  goodsAmount?: long(name='goods_amount'),
  // 货物数量单位类型
  goodsAmountType?: string(name='goods_amount_type'),
  // 起始地省市区，要求格式 XX省-XX市-XX区。比如浙江省-杭州市-余杭区
  startAddress?: string(name='start_address'),
  // 起始地详细地址，街道村社区道路楼宇门牌号
  startDetailedAddress?: string(name='start_detailed_address'),
  // 起运时间，13位毫秒级时间戳
  startTime?: long(name='start_time'),
  // 客户系统内运单编号
  taxWaybillId?: string(name='tax_waybill_id'),
  // 3plDid，一般为合同乙方的链上数字身份
  thirdPartyLogisticsDid?: string(name='third_party_logistics_did'),
  // 所属合同编号
  transportContractCode?: string(name='transport_contract_code'),
  // 所属运输线路编码
  transportRouteCode?: string(name='transport_route_code'),
}

model UpdateDigitalLogisticTransportWaybillResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 3PL运单修改
 * Summary: 3PL运单修改
 */
async function updateDigitalLogisticTransportWaybill(request: UpdateDigitalLogisticTransportWaybillRequest): UpdateDigitalLogisticTransportWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDigitalLogisticTransportWaybillEx(request, runtime);
}

/**
 * Description: 3PL运单修改
 * Summary: 3PL运单修改
 */
async function updateDigitalLogisticTransportWaybillEx(request: UpdateDigitalLogisticTransportWaybillRequest, runtime: Util.RuntimeOptions): UpdateDigitalLogisticTransportWaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.transport.waybill.update', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UploadDigitalLogisticTransportReceiptRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 货主did，一般为合同甲方的链上数字身份
  consignorDid?: string(name='consignor_did'),
  // 请求蚂蚁影像上传接口上传文件获取的文件id和文件hash信息。影像文件格式：bmp,jpg,jpeg,gif,psd,png,tiff,tga,eps,pdf
  fileInfo?: UploadFileInfo(name='file_info'),
  // 回单id，客户编辑的唯一回单编码
  receiptId?: string(name='receipt_id'),
  // 客户系统内运单编号
  taxWaybillId?: string(name='tax_waybill_id'),
  // 3plDid，一般为合同乙方的链上数字身份
  thirdPartyLogisticsDid?: string(name='third_party_logistics_did'),
}

model UploadDigitalLogisticTransportReceiptResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 3PL回单上传
 * Summary: 3PL回单上传
 */
async function uploadDigitalLogisticTransportReceipt(request: UploadDigitalLogisticTransportReceiptRequest): UploadDigitalLogisticTransportReceiptResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDigitalLogisticTransportReceiptEx(request, runtime);
}

/**
 * Description: 3PL回单上传
 * Summary: 3PL回单上传
 */
async function uploadDigitalLogisticTransportReceiptEx(request: UploadDigitalLogisticTransportReceiptRequest, runtime: Util.RuntimeOptions): UploadDigitalLogisticTransportReceiptResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.transport.receipt.upload', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticBillReceivablebillRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 账单总金额，单位（元），周期内应向发货方收取的运费总金额，不超过2位小数的数字
  billAmount?: string(name='bill_amount'),
  // 账单生成时间，13位毫秒级时间戳
  billCreateTime?: long(name='bill_create_time'),
  // 账单期限，单位（天），合同约定的结算周期
  billDeadline?: long(name='bill_deadline'),
  // 账单id，客户生成的账单唯一编号
  billId?: string(name='bill_id'),
  // 收款方did，账单的收款方数字身份
  billPayeeDid?: string(name='bill_payee_did'),
  // 付款方did，账单的付款方数字身份
  billPayerDid?: string(name='bill_payer_did'),
  // 账单起始日期，13位毫秒级时间戳
  billStartTime?: long(name='bill_start_time'),
  // 关联合同编号，账单关联的合同编号，如为合同物流请填写
  // 
  contractCode?: string(name='contract_code'),
  // 账单到期日期，13位毫秒级时间戳
  deadline?: long(name='deadline'),
  // 账单关联运单号数组，元素个数不能超过1000个
  waybillIds?: [ string ](name='waybill_ids'),
}

model CreateDigitalLogisticBillReceivablebillResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 应收账单创建
 * Summary: 应收账单创建
 */
async function createDigitalLogisticBillReceivablebill(request: CreateDigitalLogisticBillReceivablebillRequest): CreateDigitalLogisticBillReceivablebillResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticBillReceivablebillEx(request, runtime);
}

/**
 * Description: 应收账单创建
 * Summary: 应收账单创建
 */
async function createDigitalLogisticBillReceivablebillEx(request: CreateDigitalLogisticBillReceivablebillRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticBillReceivablebillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.receivablebill.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UpdateDigitalLogisticReceivablebillStatusRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 账单id，客户生成的账单唯一编号
  billId?: string(name='bill_id'),
  // 收款方did，账单的收款方数字身份
  billPayeeDid?: string(name='bill_payee_did'),
  // 账单后续所可能产生的状态，以下三选一填写：账单确认、部分结算、已结清
  // 
  // 
  updateStatus?: string(name='update_status'),
  // 更新状态时间，13位毫秒级时间戳
  updateStatusTime?: long(name='update_status_time'),
}

model UpdateDigitalLogisticReceivablebillStatusResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 应收账单状态更新
 * Summary: 应收账单状态更新
 */
async function updateDigitalLogisticReceivablebillStatus(request: UpdateDigitalLogisticReceivablebillStatusRequest): UpdateDigitalLogisticReceivablebillStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDigitalLogisticReceivablebillStatusEx(request, runtime);
}

/**
 * Description: 应收账单状态更新
 * Summary: 应收账单状态更新
 */
async function updateDigitalLogisticReceivablebillStatusEx(request: UpdateDigitalLogisticReceivablebillStatusRequest, runtime: Util.RuntimeOptions): UpdateDigitalLogisticReceivablebillStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.receivablebill.status.update', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UpdateDigitalLogisticBillReceivablebillRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 账单总金额，单位（元），周期内应向发货方收取的运费总金额，不超过2位小数的数字
  billAmount?: string(name='bill_amount'),
  // 账单生成时间，13位毫秒级时间戳
  billCreateTime?: long(name='bill_create_time'),
  // 账单期限，单位（天），合同约定的结算周期
  billDeadline?: long(name='bill_deadline'),
  // 账单id，客户生成的账单唯一编号
  billId?: string(name='bill_id'),
  // 收款方did，账单的收款方数字身份
  billPayeeDid?: string(name='bill_payee_did'),
  // 付款方did，账单的付款方数字身份
  billPayerDid?: string(name='bill_payer_did'),
  // 账单起始日期，13位毫秒级时间戳
  billStartTime?: long(name='bill_start_time'),
  // 关联合同编号，账单关联的合同编号，如为合同物流请填写
  contractCode?: string(name='contract_code'),
  // 账单到期日期，13位毫秒级时间戳
  deadline?: long(name='deadline'),
  // 账单关联运单号数组，元素个数不能超过1000个
  waybillIds?: [ string ](name='waybill_ids'),
}

model UpdateDigitalLogisticBillReceivablebillResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 应收账单修改
 * Summary: 应收账单修改
 */
async function updateDigitalLogisticBillReceivablebill(request: UpdateDigitalLogisticBillReceivablebillRequest): UpdateDigitalLogisticBillReceivablebillResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDigitalLogisticBillReceivablebillEx(request, runtime);
}

/**
 * Description: 应收账单修改
 * Summary: 应收账单修改
 */
async function updateDigitalLogisticBillReceivablebillEx(request: UpdateDigitalLogisticBillReceivablebillRequest, runtime: Util.RuntimeOptions): UpdateDigitalLogisticBillReceivablebillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.receivablebill.update', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticHighwayInvoiceRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 发票号码，8位发票号码
  invoiceNo?: string(name='invoice_no'),
  // 发票代码，12位发票代码
  invoiceCode?: string(name='invoice_code'),
  // 发票校验码后6位
  verifyCode?: string(name='verify_code'),
  // 收款方did，出票方，需要出票收钱的
  payeeDid?: string(name='payee_did'),
  // 付款方did，收票方，需要收票付钱的
  payerDid?: string(name='payer_did'),
  // 发票含税金额， 不超过2位小数的数字
  invoiceContainsTax?: string(name='invoice_contains_tax'),
  // 发票不含税金额，不超过2位小数的数字
  invoiceWithoutTax?: string(name='invoice_without_tax'),
  // 开票日期，格式为yyyy-mm-dd
  invoiceDate?: string(name='invoice_date'),
  // 发票类型，以下二选一填写：应收发票、应付发票
  invoiceType?: string(name='invoice_type'),
  // 影像件ID，发票上传蚂蚁oss的文件ID。注意：影像件id和影像件hash，必须都填写或都不填，不可只填其中一项
  fileId?: string(name='file_id'),
  // 影像件hash，上传蚂蚁oss的文件hash。注意：影像件id和影像件hash，必须都填写或都不填，不可只填其中一项
  fileHash?: string(name='file_hash'),
  // 发票归属平台did，用以区分是哪家平台/企业的发票
  platformDid?: string(name='platform_did'),
}

model CreateDigitalLogisticHighwayInvoiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 路运发票创建
 * Summary: 路运发票创建
 */
async function createDigitalLogisticHighwayInvoice(request: CreateDigitalLogisticHighwayInvoiceRequest): CreateDigitalLogisticHighwayInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticHighwayInvoiceEx(request, runtime);
}

/**
 * Description: 路运发票创建
 * Summary: 路运发票创建
 */
async function createDigitalLogisticHighwayInvoiceEx(request: CreateDigitalLogisticHighwayInvoiceRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticHighwayInvoiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.highway.invoice.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model OpenDigitalLogisticCreditDriverRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 司机云资金商户ID
  accountId?: string(name='account_id'),
  // 开通结果回调url
  callbackUrl?: string(name='callback_url'),
  // 司机分布式数字身份
  driverDid?: string(name='driver_did'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 产品id 目前填写 PRODUCT_MYBANK
  productId?: string(name='product_id'),
}

model OpenDigitalLogisticCreditDriverResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 签署开通申请id
  applyId?: string(name='apply_id'),
  // 协议签署开通url
  signUrl?: string(name='sign_url'),
  // 签署状态
  // -1:签署开通失败, 0:未签署开通, 1:已签署开通
  status?: long(name='status'),
}

/**
 * Description: 司机信用流转协议签署并开通流转能力
 * Summary: 司机信用流转协议签署并开通流转能力
 */
async function openDigitalLogisticCreditDriver(request: OpenDigitalLogisticCreditDriverRequest): OpenDigitalLogisticCreditDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return openDigitalLogisticCreditDriverEx(request, runtime);
}

/**
 * Description: 司机信用流转协议签署并开通流转能力
 * Summary: 司机信用流转协议签署并开通流转能力
 */
async function openDigitalLogisticCreditDriverEx(request: OpenDigitalLogisticCreditDriverRequest, runtime: Util.RuntimeOptions): OpenDigitalLogisticCreditDriverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.driver.open', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditDriverRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 申请id
  applyId?: string(name='apply_id'),
  // 司机分布式数字身份
  did?: string(name='did'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 产品id  目前填写PRODUCT_MYBANK
  productId?: string(name='product_id'),
}

model QueryDigitalLogisticCreditDriverResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 开通失败信息
  queryMsg?: string(name='query_msg'),
  // 开通状态
  // -1:失败状态， 0:未完成状态， 1:已完成状态
  status?: long(name='status'),
}

/**
 * Description: 查询司机信用流转能力开通情况
 * Summary: 查询司机信用流转能力开通情况
 */
async function queryDigitalLogisticCreditDriver(request: QueryDigitalLogisticCreditDriverRequest): QueryDigitalLogisticCreditDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditDriverEx(request, runtime);
}

/**
 * Description: 查询司机信用流转能力开通情况
 * Summary: 查询司机信用流转能力开通情况
 */
async function queryDigitalLogisticCreditDriverEx(request: QueryDigitalLogisticCreditDriverRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditDriverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.driver.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditConsignorRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 申请id
  applyId?: string(name='apply_id'),
  // 货主分布式数字身份
  did?: string(name='did'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 产品id
  // A模式： PRODUCT_MYBANK, 
  // A+模式： PRODUCT_MYBANK_A_PLUS, 
  // B模式： PRODUCT_MYBANK_B, 
  productId?: string(name='product_id'),
}

model QueryDigitalLogisticCreditConsignorResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 开通失败信息
  queryMsg?: string(name='query_msg'),
  // 开通状态
  // -1:失败状态， 0:未完成状态， 1:已完成状态
  status?: long(name='status'),
}

/**
 * Description: 查询货主信用流转能力开通情况
 * Summary: 查询货主信用流转能力开通情况
 */
async function queryDigitalLogisticCreditConsignor(request: QueryDigitalLogisticCreditConsignorRequest): QueryDigitalLogisticCreditConsignorResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditConsignorEx(request, runtime);
}

/**
 * Description: 查询货主信用流转能力开通情况
 * Summary: 查询货主信用流转能力开通情况
 */
async function queryDigitalLogisticCreditConsignorEx(request: QueryDigitalLogisticCreditConsignorRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditConsignorResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.consignor.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditBalanceRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 货主分布式数字身份
  consignorDid?: string(name='consignor_did'),
  // 支付单运费，运费最多精确到小数点后2位
  freight?: string(name='freight'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK,  
  // A+模式：PRODUCT_MYBANK_A_PLUS,  
  // B模式：PRODUCT_MYBANK_B,
  // 
  productId?: string(name='product_id'),
}

model QueryDigitalLogisticCreditBalanceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否有信用流转额度
  hasBalance?: boolean(name='has_balance'),
}

/**
 * Description: 查询货主信用流转额度
 * Summary: 查询货主信用流转额度
 */
async function queryDigitalLogisticCreditBalance(request: QueryDigitalLogisticCreditBalanceRequest): QueryDigitalLogisticCreditBalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditBalanceEx(request, runtime);
}

/**
 * Description: 查询货主信用流转额度
 * Summary: 查询货主信用流转额度
 */
async function queryDigitalLogisticCreditBalanceEx(request: QueryDigitalLogisticCreditBalanceRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditBalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.balance.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UploadDigitalLogisticCreditIssueRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 批次号
  batchId?: string(name='batch_id'),
  // 发行结果回调url
  callbackUrl?: string(name='callback_url'),
  // 货主分布式数字身份
  consignorDid?: string(name='consignor_did'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 发行信用流转信息列表
  issueApplyInfos?: [ IssueApplyInfo ](name='issue_apply_infos'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id 目前填PRODUCT_MYBANK
  productId?: string(name='product_id'),
}

model UploadDigitalLogisticCreditIssueResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 批次号
  batchId?: string(name='batch_id'),
  // 批次状态
  batchIdStatus?: long(name='batch_id_status'),
  // 发行url
  issueUrl?: string(name='issue_url'),
}

/**
 * Description: 发行信用流转批次信息上传（只做信息上传，供真正web端发行时使用）
 * Summary: 发行信用流转批次信息上传
 */
async function uploadDigitalLogisticCreditIssue(request: UploadDigitalLogisticCreditIssueRequest): UploadDigitalLogisticCreditIssueResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDigitalLogisticCreditIssueEx(request, runtime);
}

/**
 * Description: 发行信用流转批次信息上传（只做信息上传，供真正web端发行时使用）
 * Summary: 发行信用流转批次信息上传
 */
async function uploadDigitalLogisticCreditIssueEx(request: UploadDigitalLogisticCreditIssueRequest, runtime: Util.RuntimeOptions): UploadDigitalLogisticCreditIssueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issue.upload', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditIssuebatchstatusRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 批次号
  batchId?: string(name='batch_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK， 
  // A+模式：PRODUCT_MYBANK_A_PLUS， 
  // A模式：PRODUCT_MYBANK_B， 
  productId?: string(name='product_id'),
}

model QueryDigitalLogisticCreditIssuebatchstatusResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 批次号
  batchId?: string(name='batch_id'),
  // 批次状态
  batchStatus?: long(name='batch_status'),
}

/**
 * Description: 信用流转批次状态查询
 * Summary: 信用流转批次状态查询
 */
async function queryDigitalLogisticCreditIssuebatchstatus(request: QueryDigitalLogisticCreditIssuebatchstatusRequest): QueryDigitalLogisticCreditIssuebatchstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditIssuebatchstatusEx(request, runtime);
}

/**
 * Description: 信用流转批次状态查询
 * Summary: 信用流转批次状态查询
 */
async function queryDigitalLogisticCreditIssuebatchstatusEx(request: QueryDigitalLogisticCreditIssuebatchstatusRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditIssuebatchstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuebatchstatus.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CancelDigitalLogisticCreditIssuebatchRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 批次号
  batchId?: string(name='batch_id'),
  // 货主分布式数字身份
  consignorDid?: string(name='consignor_did'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK，
  // A+模式：PRODUCT_MYBANK_A_PLUS，
  // B模式：PRODUCT_MYBANK_B
  productId?: string(name='product_id'),
}

model CancelDigitalLogisticCreditIssuebatchResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 批次号
  batchId?: string(name='batch_id'),
}

/**
 * Description: 支付批次撤销
 * Summary: 支付批次撤销
 */
async function cancelDigitalLogisticCreditIssuebatch(request: CancelDigitalLogisticCreditIssuebatchRequest): CancelDigitalLogisticCreditIssuebatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelDigitalLogisticCreditIssuebatchEx(request, runtime);
}

/**
 * Description: 支付批次撤销
 * Summary: 支付批次撤销
 */
async function cancelDigitalLogisticCreditIssuebatchEx(request: CancelDigitalLogisticCreditIssuebatchRequest, runtime: Util.RuntimeOptions): CancelDigitalLogisticCreditIssuebatchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuebatch.cancel', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditIssuebyidRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 信用流转发行批次号
  batchId?: string(name='batch_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 是否只返回已发行凭证信息
  issuedOnly?: boolean(name='issued_only'),
  // 信用流转发行凭证Id
  issueId?: string(name='issue_id'),
  // 页数 从1开始
  pageNum?: long(name='page_num'),
  // 每页显示数量 不超过100
  pageSize?: long(name='page_size'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK，
  // A+模式：PRODUCT_MYBANK_A_PLUS，
  // B模式：PRODUCT_MYBANK_B
  productId?: string(name='product_id'),
}

model QueryDigitalLogisticCreditIssuebyidResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 信用流转批次号
  batchId?: string(name='batch_id'),
  // 批次状态
  batchIdStatus?: string(name='batch_id_status'),
  // 凭证发行者did
  did?: string(name='did'),
  // 发行凭证列表
  issueIds?: [ IssueIdInfo ](name='issue_ids'),
  // 页数 从1开始
  pageNum?: long(name='page_num'),
  // 每页显示数量
  pageSize?: long(name='page_size'),
  // 数据总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 根据id查询信用凭证信息
 * Summary: 根据id查询信用凭证信息
 */
async function queryDigitalLogisticCreditIssuebyid(request: QueryDigitalLogisticCreditIssuebyidRequest): QueryDigitalLogisticCreditIssuebyidResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditIssuebyidEx(request, runtime);
}

/**
 * Description: 根据id查询信用凭证信息
 * Summary: 根据id查询信用凭证信息
 */
async function queryDigitalLogisticCreditIssuebyidEx(request: QueryDigitalLogisticCreditIssuebyidRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditIssuebyidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuebyid.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditIssuebytimeRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 指定查询者分布式数字身份
  did?: string(name='did'),
  // 查询截止时间
  endDate?: string(name='end_date'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 是否只返回已发行凭证信息
  issuedOnly?: boolean(name='issued_only'),
  // 页数 从1开始
  pageNum?: long(name='page_num'),
  // 每页显示数量 不超过100
  pageSize?: long(name='page_size'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id 目前填PRODUCT_MYBANK
  productId?: string(name='product_id'),
  // 查询起始时间
  startDate?: string(name='start_date'),
}

model QueryDigitalLogisticCreditIssuebytimeResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 信用流转批次号
  batchId?: string(name='batch_id'),
  // 批次状态
  batchIdStatus?: long(name='batch_id_status'),
  // 凭证发行者did
  did?: string(name='did'),
  // 凭证列表
  issueIds?: [ IssueIdInfo ](name='issue_ids'),
  // 页数 从1开始
  pageNum?: long(name='page_num'),
  // 每页显示数量
  pageSize?: long(name='page_size'),
  // 数据总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 根据时间查询信用凭证信息
 * Summary: 根据时间查询信用凭证信息
 */
async function queryDigitalLogisticCreditIssuebytime(request: QueryDigitalLogisticCreditIssuebytimeRequest): QueryDigitalLogisticCreditIssuebytimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditIssuebytimeEx(request, runtime);
}

/**
 * Description: 根据时间查询信用凭证信息
 * Summary: 根据时间查询信用凭证信息
 */
async function queryDigitalLogisticCreditIssuebytimeEx(request: QueryDigitalLogisticCreditIssuebytimeRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditIssuebytimeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuebytime.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditUserissueRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 被查询方分布式数字身份
  did?: string(name='did'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 页数
  pageNum?: long(name='page_num'),
  // 每页显示的最大条数
  pageSize?: long(name='page_size'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK， A+模式：PRODUCT_MYBANK_A_PLUS， B模式：PRODUCT_MYBANK_B
  productId?: string(name='product_id'),
}

model QueryDigitalLogisticCreditUserissueResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 凭证所有者分布式数字身份
  did?: string(name='did'),
  // 信用流转凭证列表
  issueIds?: [ UserIssueId ](name='issue_ids'),
  // 页数
  pageNum?: long(name='page_num'),
  // 每页显示最大条数
  pageSize?: long(name='page_size'),
  // 总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询用户持有的信用凭证信息
 * Summary: 查询用户持有的信用凭证信息
 */
async function queryDigitalLogisticCreditUserissue(request: QueryDigitalLogisticCreditUserissueRequest): QueryDigitalLogisticCreditUserissueResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditUserissueEx(request, runtime);
}

/**
 * Description: 查询用户持有的信用凭证信息
 * Summary: 查询用户持有的信用凭证信息
 */
async function queryDigitalLogisticCreditUserissueEx(request: QueryDigitalLogisticCreditUserissueRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditUserissueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.userissue.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditStatementRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 需查询对象分布式数字身份不能为空
  did?: string(name='did'),
  // 查询截止时间
  endDate?: string(name='end_date'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 页数 从1开始
  pageNum?: long(name='page_num'),
  // 每页显示数量 最多100
  pageSize?: long(name='page_size'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK， A+模式：PRODUCT_MYBANK_A_PLUS， B模式：PRODUCT_MYBANK_B
  productId?: string(name='product_id'),
  // 查询起始时间
  startDate?: string(name='start_date'),
}

model QueryDigitalLogisticCreditStatementResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 页数 从1开始
  pageNum?: long(name='page_num'),
  // 每页显示数量
  pageSize?: long(name='page_size'),
  // 流水列表
  statementInfos?: [ StatementInfo ](name='statement_infos'),
  // 数据总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询用户信用流转流水记录
 * Summary: 查询用户信用流转流水记录
 */
async function queryDigitalLogisticCreditStatement(request: QueryDigitalLogisticCreditStatementRequest): QueryDigitalLogisticCreditStatementResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditStatementEx(request, runtime);
}

/**
 * Description: 查询用户信用流转流水记录
 * Summary: 查询用户信用流转流水记录
 */
async function queryDigitalLogisticCreditStatementEx(request: QueryDigitalLogisticCreditStatementRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditStatementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.statement.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticCreditIssuetransferRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 转让结果回调url
  callbackUrl?: string(name='callback_url'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 信用流转凭证
  issueId?: string(name='issue_id'),
  // 全局业务号，保证唯一性，如拆分转让业务单号
  outBizNo?: string(name='out_biz_no'),
  // 转入方分布式数字身份
  payeeDid?: string(name='payee_did'),
  // 转出方分布式数字身份
  payerDid?: string(name='payer_did'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id 目前使用PRODUCT_MYBANK
  productId?: string(name='product_id'),
  // 转让金额
  txAmt?: string(name='tx_amt'),
}

model CreateDigitalLogisticCreditIssuetransferResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 转让申请成功金额
  successApplyAmt?: string(name='success_apply_amt'),
  // 请求时传入的全局业务号
  outBizNo?: string(name='out_biz_no'),
}

/**
 * Description: 信用凭证拆分转让申请
 * Summary: 信用凭证拆分转让申请
 */
async function createDigitalLogisticCreditIssuetransfer(request: CreateDigitalLogisticCreditIssuetransferRequest): CreateDigitalLogisticCreditIssuetransferResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticCreditIssuetransferEx(request, runtime);
}

/**
 * Description: 信用凭证拆分转让申请
 * Summary: 信用凭证拆分转让申请
 */
async function createDigitalLogisticCreditIssuetransferEx(request: CreateDigitalLogisticCreditIssuetransferRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticCreditIssuetransferResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuetransfer.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditIssuetransferRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 全局业务号，保证唯一性，如拆分转让业务单号
  outBizNo?: string(name='out_biz_no'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id 目前使用PRODUCT_MYBANK
  productId?: string(name='product_id'),
}

model QueryDigitalLogisticCreditIssuetransferResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 错误信息
  errMsg?: string(name='err_msg'),
  // 转让失败金额
  failAmt?: string(name='fail_amt'),
  // 信用凭证号
  issueId?: string(name='issue_id'),
  // 请求时传入的全局业务号
  outBizNo?: string(name='out_biz_no'),
  // 转入方分布式数字身份
  payeeDid?: string(name='payee_did'),
  // 转出方分布式数字身份
  payerDid?: string(name='payer_did'),
  // 产品id
  productId?: string(name='product_id'),
  // 转让结果状态 -1:转让失败状态， 0:转让未完成状态， 1:转让部分成功状态，2:转让成功状态
  status?: long(name='status'),
  // 转让成功金额
  successAmt?: string(name='success_amt'),
}

/**
 * Description: 信用凭证拆分转让结果查询
 * Summary: 信用凭证拆分转让结果查询
 */
async function queryDigitalLogisticCreditIssuetransfer(request: QueryDigitalLogisticCreditIssuetransferRequest): QueryDigitalLogisticCreditIssuetransferResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditIssuetransferEx(request, runtime);
}

/**
 * Description: 信用凭证拆分转让结果查询
 * Summary: 信用凭证拆分转让结果查询
 */
async function queryDigitalLogisticCreditIssuetransferEx(request: QueryDigitalLogisticCreditIssuetransferRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditIssuetransferResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuetransfer.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticCreditIssuefinanceRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 转让结果回调url
  callbackUrl?: string(name='callback_url'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 信用流转凭证
  issueId?: string(name='issue_id'),
  // 融资申请方分布式数字身份
  loanerDid?: string(name='loaner_did'),
  // 全局业务号，保证唯一性，如融资业务单号
  outBizNo?: string(name='out_biz_no'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK， A+模式：PRODUCT_MYBANK_A_PLUS， B模式：PRODUCT_MYBANK_B
  productId?: string(name='product_id'),
  // 融资金额
  txAmt?: string(name='tx_amt'),
}

model CreateDigitalLogisticCreditIssuefinanceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 融资申请失败，回转至无车承运平台金额
  failApplyAmt?: string(name='fail_apply_amt'),
  // 请求时传入的全局业务号
  outBizNo?: string(name='out_biz_no'),
  // 融资申请成功金额
  successApplyAmt?: string(name='success_apply_amt'),
}

/**
 * Description: 信用凭证融资申请
 * Summary: 信用凭证融资申请
 */
async function createDigitalLogisticCreditIssuefinance(request: CreateDigitalLogisticCreditIssuefinanceRequest): CreateDigitalLogisticCreditIssuefinanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticCreditIssuefinanceEx(request, runtime);
}

/**
 * Description: 信用凭证融资申请
 * Summary: 信用凭证融资申请
 */
async function createDigitalLogisticCreditIssuefinanceEx(request: CreateDigitalLogisticCreditIssuefinanceRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticCreditIssuefinanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuefinance.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditIssuefinanceRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 融资申请方分布式数字身份
  loanerDid?: string(name='loaner_did'),
  // 全局业务号，保证唯一性，如融资业务单号
  outBizNo?: string(name='out_biz_no'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK， A+模式：PRODUCT_MYBANK_A_PLUS， B模式：PRODUCT_MYBANK_B
  productId?: string(name='product_id'),
}

model QueryDigitalLogisticCreditIssuefinanceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 错误信息
  errMsg?: string(name='err_msg'),
  // 融资失败，回转至无车承运平台失败金额
  failAmt?: string(name='fail_amt'),
  // 融资失败，回转至无车承运平台成功金额
  failTransferAmt?: string(name='fail_transfer_amt'),
  // 请求时传入的全局业务号
  outBizNo?: string(name='out_biz_no'),
  // 融资结果状态 -1:融资未完成， 0:融资完成， 1:融资全部失败，逆流转回平台全部成功，2:融资部分成功，逆流转回平台全部成功，3:逆流转回平台发生失败，需人工介入 
  status?: long(name='status'),
  // 融资成功金额
  successAmt?: string(name='success_amt'),
}

/**
 * Description: 信用凭证融资结果查询
 * Summary: 信用凭证融资结果查询
 */
async function queryDigitalLogisticCreditIssuefinance(request: QueryDigitalLogisticCreditIssuefinanceRequest): QueryDigitalLogisticCreditIssuefinanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditIssuefinanceEx(request, runtime);
}

/**
 * Description: 信用凭证融资结果查询
 * Summary: 信用凭证融资结果查询
 */
async function queryDigitalLogisticCreditIssuefinanceEx(request: QueryDigitalLogisticCreditIssuefinanceRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditIssuefinanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuefinance.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditIssuereceivableRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 信用凭证id
  issueId?: string(name='issue_id'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // PRODUCT_MYBANK  、PRODUCT_MYBANK_B
  productId?: string(name='product_id'),
}

model QueryDigitalLogisticCreditIssuereceivableResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 已清分金额
  clearAmt?: string(name='clear_amt'),
  // 代偿金额
  compensateAmt?: string(name='compensate_amt'),
  // 错误信息
  errMsg?: string(name='err_msg'),
  // 完成日期 long类型字符串
  finishDate?: string(name='finish_date'),
  // 是否代偿,true为代偿，false为不代偿
  hasCompensate?: boolean(name='has_compensate'),
  // 信用凭证id
  issueId?: string(name='issue_id'),
  // 全局唯一业务号
  outBizNo?: string(name='out_biz_no'),
  // 外部订单号，也就是凭证发行时传递的支付订单
  outOrderNo?: string(name='out_order_no'),
  // 产品id--PRODUCT_MYBANK 、PRODUCT_MYBANK_B;
  productId?: string(name='product_id'),
  // 清分结果状态--- 0：未清分， 1：清分完成
  status?: long(name='status'),
  // 凭证总金额
  totalAmt?: string(name='total_amt'),
  // 清分类型--主动清分 、 到期清分
  type?: string(name='type'),
}

/**
 * Description: 信用凭证清分信息查询
 * Summary: 信用凭证清分信息查询
 */
async function queryDigitalLogisticCreditIssuereceivable(request: QueryDigitalLogisticCreditIssuereceivableRequest): QueryDigitalLogisticCreditIssuereceivableResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditIssuereceivableEx(request, runtime);
}

/**
 * Description: 信用凭证清分信息查询
 * Summary: 信用凭证清分信息查询
 */
async function queryDigitalLogisticCreditIssuereceivableEx(request: QueryDigitalLogisticCreditIssuereceivableRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditIssuereceivableResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuereceivable.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditIssueamountRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 指定查询者分布式数字身份
  did?: string(name='did'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 信用凭证id
  issueId?: string(name='issue_id'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id 目前填写PRODUCT_MYBANK
  productId?: string(name='product_id'),
}

model QueryDigitalLogisticCreditIssueamountResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 剩余金额
  balanceAmt?: string(name='balance_amt'),
  // 已经提现的金额
  cashAmt?: string(name='cash_amt'),
  // 欠的滞纳金金额
  debtIntAmt?: string(name='debt_int_amt'),
  // 欠款本金金额
  debtPrinAmt?: string(name='debt_prin_amt'),
  // 该凭证下的总欠款金额
  debtTotalAmt?: string(name='debt_total_amt'),
  // 信用凭证到期时间
  expireDate?: string(name='expire_date'),
  // 冻结的金额
  freezeAmt?: string(name='freeze_amt'),
  // 信用凭证id
  issueId?: string(name='issue_id'),
  // 累计已还滞纳金金额
  paidIntAmt?: string(name='paid_int_amt'),
  // 凭证总金额
  ticketAmt?: string(name='ticket_amt'),
}

/**
 * Description: 信用凭证资产查询
 * Summary: 信用凭证资产查询
 */
async function queryDigitalLogisticCreditIssueamount(request: QueryDigitalLogisticCreditIssueamountRequest): QueryDigitalLogisticCreditIssueamountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditIssueamountEx(request, runtime);
}

/**
 * Description: 信用凭证资产查询
 * Summary: 信用凭证资产查询
 */
async function queryDigitalLogisticCreditIssueamountEx(request: QueryDigitalLogisticCreditIssueamountRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditIssueamountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issueamount.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CallbackDigitalLogisticCreditCommonRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 回调数据，根据不同msg_method 返回不同结构
  msgData?: string(name='msg_data'),
  // 回调方法类型
  msgMethod?: string(name='msg_method'),
}

model CallbackDigitalLogisticCreditCommonResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否已接收
  received?: boolean(name='received'),
}

/**
 * Description: 物流金融统一回调接口
 * Summary: 物流金融统一回调接口
 */
async function callbackDigitalLogisticCreditCommon(request: CallbackDigitalLogisticCreditCommonRequest): CallbackDigitalLogisticCreditCommonResponse {
  var runtime = new Util.RuntimeOptions{};
  return callbackDigitalLogisticCreditCommonEx(request, runtime);
}

/**
 * Description: 物流金融统一回调接口
 * Summary: 物流金融统一回调接口
 */
async function callbackDigitalLogisticCreditCommonEx(request: CallbackDigitalLogisticCreditCommonRequest, runtime: Util.RuntimeOptions): CallbackDigitalLogisticCreditCommonResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.common.callback', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model ApplyDigitalLogisticCreditIssueclearRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 申请日期，不输入则是当前时间
  applyDate?: long(name='apply_date'),
  // 清分金额，当前只支持全额清分，不填就是默认全额清分
  clearAmt?: string(name='clear_amt'),
  // 主动清分方分布式数字身份
  clearDid?: string(name='clear_did'),
  // 扩展字段
  extInfo?: string(name='ext_info'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 凭证id
  issueId?: string(name='issue_id'),
  // 全局唯一业务流水号
  outBizNo?: string(name='out_biz_no'),
  // 外部订单号，此为支付单号
  outOrderNo?: string(name='out_order_no'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id
  // A模式：PRODUCT_MYBANK， A+模式：PRODUCT_MYBANK_A_PLUS， B模式：PRODUCT_MYBANK_B
  productId?: string(name='product_id'),
}

model ApplyDigitalLogisticCreditIssueclearResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 全局唯一业务流水号
  outBizNo?: string(name='out_biz_no'),
}

/**
 * Description: 信用凭证主动清分
 * Summary: 信用凭证主动清分
 */
async function applyDigitalLogisticCreditIssueclear(request: ApplyDigitalLogisticCreditIssueclearRequest): ApplyDigitalLogisticCreditIssueclearResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyDigitalLogisticCreditIssueclearEx(request, runtime);
}

/**
 * Description: 信用凭证主动清分
 * Summary: 信用凭证主动清分
 */
async function applyDigitalLogisticCreditIssueclearEx(request: ApplyDigitalLogisticCreditIssueclearRequest, runtime: Util.RuntimeOptions): ApplyDigitalLogisticCreditIssueclearResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issueclear.apply', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SendDigitalLogisticCreditProxyRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 代理请求方法名
  applyMethod?: string(name='apply_method'),
  // 代理请求数据
  applyData?: string(name='apply_data'),
}

model SendDigitalLogisticCreditProxyResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 物流金融代理消息
 * Summary: 物流金融代理消息
 */
async function sendDigitalLogisticCreditProxy(request: SendDigitalLogisticCreditProxyRequest): SendDigitalLogisticCreditProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendDigitalLogisticCreditProxyEx(request, runtime);
}

/**
 * Description: 物流金融代理消息
 * Summary: 物流金融代理消息
 */
async function sendDigitalLogisticCreditProxyEx(request: SendDigitalLogisticCreditProxyRequest, runtime: Util.RuntimeOptions): SendDigitalLogisticCreditProxyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.proxy.send', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CheckDigitalLogisticCreditWaybillRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 业务发起方分布式数字身
  platformDid?: string(name='platform_did'),
  // 产品id
  // A模式：PRODUCT_MYBANK， A+模式：PRODUCT_MYBANK_A_PLUS， B模式：PRODUCT_MYBANK_B
  productId?: string(name='product_id'),
  // 运单列表
  waybillList?: [ string ](name='waybill_list'),
}

model CheckDigitalLogisticCreditWaybillResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 核验结果列表,  格式为 运单号:核验状态， 核验状态包含  0:运单未知状态   1:通过   2:不通过   3:未核验   4:没有指定信息
  checkResult?: [ string ](name='check_result'),
}

/**
 * Description: 运单信用流转核验结果查询
 * Summary: 运单信用流转核验结果查询
 */
async function checkDigitalLogisticCreditWaybill(request: CheckDigitalLogisticCreditWaybillRequest): CheckDigitalLogisticCreditWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDigitalLogisticCreditWaybillEx(request, runtime);
}

/**
 * Description: 运单信用流转核验结果查询
 * Summary: 运单信用流转核验结果查询
 */
async function checkDigitalLogisticCreditWaybillEx(request: CheckDigitalLogisticCreditWaybillRequest, runtime: Util.RuntimeOptions): CheckDigitalLogisticCreditWaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.waybill.check', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model ReopenDigitalLogisticCreditDriverRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 产品id
  productId?: string(name='product_id'),
  // 集团平台did
  groupPlatformDid?: string(name='group_platform_did'),
  // 司机did
  driverDid?: string(name='driver_did'),
  // 云资金商户id
  accountId?: string(name='account_id'),
  // 回调地址
  callbackUrl?: string(name='callback_url'),
}

model ReopenDigitalLogisticCreditDriverResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 申请id
  applyId?: string(name='apply_id'),
  // 会员注册状态
  status?: long(name='status'),
}

/**
 * Description: 物流金融信用流转司机换绑
 * Summary: 物流金融信用流转司机换绑
 */
async function reopenDigitalLogisticCreditDriver(request: ReopenDigitalLogisticCreditDriverRequest): ReopenDigitalLogisticCreditDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return reopenDigitalLogisticCreditDriverEx(request, runtime);
}

/**
 * Description: 物流金融信用流转司机换绑
 * Summary: 物流金融信用流转司机换绑
 */
async function reopenDigitalLogisticCreditDriverEx(request: ReopenDigitalLogisticCreditDriverRequest, runtime: Util.RuntimeOptions): ReopenDigitalLogisticCreditDriverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.driver.reopen', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UploadDigitalLogisticCreditAuthorizationRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 签署货主统一社会信用代码
  consignorCertNo?: string(name='consignor_cert_no'),
  // 签署货主did
  consignorDid?: string(name='consignor_did'),
  // 签署货主企业名称
  consignorName?: string(name='consignor_name'),
  // 授权的货主平台账号
  consignorPlatformAccount?: string(name='consignor_platform_account'),
  // 协议到期日
  expireDate?: string(name='expire_date'),
  // 集团平台did
  groupPlatformDid?: string(name='group_platform_did'),
  // 是否包含账号授权条款
  hasAuthorizationClause?: boolean(name='has_authorization_clause'),
  // 签署子公司统一社会信用代码
  platformCertNo?: string(name='platform_cert_no'),
  // 签署子公司did
  platformDid?: string(name='platform_did'),
  // 签署子公司企业名称
  // 
  platformName?: string(name='platform_name'),
  // 线下协议影像件id与文件哈希, 多id以逗号分隔, 最多支持10个
  protocolImgId?: string(name='protocol_img_id'),
  // 协议名称
  protocolName?: string(name='protocol_name'),
  // 线下协议编号
  protocolNo?: string(name='protocol_no'),
  // 签署时间
  signDate?: string(name='sign_date'),
  // 产品id
  productId?: string(name='product_id'),
}

model UploadDigitalLogisticCreditAuthorizationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 协议链上地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 线下协议授权关系上传
 * Summary: 线下协议授权关系上传
 */
async function uploadDigitalLogisticCreditAuthorization(request: UploadDigitalLogisticCreditAuthorizationRequest): UploadDigitalLogisticCreditAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDigitalLogisticCreditAuthorizationEx(request, runtime);
}

/**
 * Description: 线下协议授权关系上传
 * Summary: 线下协议授权关系上传
 */
async function uploadDigitalLogisticCreditAuthorizationEx(request: UploadDigitalLogisticCreditAuthorizationRequest, runtime: Util.RuntimeOptions): UploadDigitalLogisticCreditAuthorizationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.authorization.upload', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UploadDigitalLogisticCreditConfirmRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 货主云资金商户id
  accountId?: string(name='account_id'),
  // 确认时间
  confirmDate?: string(name='confirm_date'),
  // 应收转让通知编号
  confirmNo?: string(name='confirm_no'),
  // 签署货主did
  consignorDid?: string(name='consignor_did'),
  // 签署的货主平台账号
  consignorPlatformAccount?: string(name='consignor_platform_account'),
  // 协议到期日
  expireDate?: string(name='expire_date'),
  // 集团平台did
  groupPlatformDid?: string(name='group_platform_did'),
  // 签署子公司did
  platformDid?: string(name='platform_did'),
  // 协议名称
  protocolName?: string(name='protocol_name'),
  // 协议PDF文件, 多个文件可用逗号分隔, 最多10个
  protocolPdfId?: string(name='protocol_pdf_id'),
  // 产品id
  productId?: string(name='product_id'),
}

model UploadDigitalLogisticCreditConfirmResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 协议链上地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 线上应收转让确认关系
 * Summary: 线上应收转让确认关系
 */
async function uploadDigitalLogisticCreditConfirm(request: UploadDigitalLogisticCreditConfirmRequest): UploadDigitalLogisticCreditConfirmResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDigitalLogisticCreditConfirmEx(request, runtime);
}

/**
 * Description: 线上应收转让确认关系
 * Summary: 线上应收转让确认关系
 */
async function uploadDigitalLogisticCreditConfirmEx(request: UploadDigitalLogisticCreditConfirmRequest, runtime: Util.RuntimeOptions): UploadDigitalLogisticCreditConfirmResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.confirm.upload', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model BatchcreateDigitalLogisticCreditmodeIssueRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 批次id
  batchId?: string(name='batch_id'),
  // 回调地址
  callbackUrl?: string(name='callback_url'),
  // 集团平台分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 发行列表
  issueApplyInfos?: [ IssueApplyInfo ](name='issue_apply_infos'),
  // 业务平台方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id
  productId?: string(name='product_id'),
}

model BatchcreateDigitalLogisticCreditmodeIssueResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 批次id
  batchId?: string(name='batch_id'),
  // 批次状态
  batchStatus?: string(name='batch_status'),
}

/**
 * Description: 物流信用流转凭证批量发行
 * Summary: 物流信用流转凭证批量发行
 */
async function batchcreateDigitalLogisticCreditmodeIssue(request: BatchcreateDigitalLogisticCreditmodeIssueRequest): BatchcreateDigitalLogisticCreditmodeIssueResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchcreateDigitalLogisticCreditmodeIssueEx(request, runtime);
}

/**
 * Description: 物流信用流转凭证批量发行
 * Summary: 物流信用流转凭证批量发行
 */
async function batchcreateDigitalLogisticCreditmodeIssueEx(request: BatchcreateDigitalLogisticCreditmodeIssueRequest, runtime: Util.RuntimeOptions): BatchcreateDigitalLogisticCreditmodeIssueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.creditmode.issue.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model ApplyDigitalLogisticCreditmodeIssueclearRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 产品id
  productId?: string(name='product_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 业务平台方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 主动清分方分布式数字身份
  clearDid?: string(name='clear_did'),
  // 凭证id
  issueId?: string(name='issue_id'),
  // 全局业务号
  outBizNo?: string(name='out_biz_no'),
  // 支付单号
  outOrderNo?: string(name='out_order_no'),
  // 清分金额
  clearAmt?: string(name='clear_amt'),
  // 模式  B:b模式
  modeType?: string(name='mode_type'),
  // 申请日期
  applyDate?: string(name='apply_date'),
  // 扩展字段
  extInfo?: string(name='ext_info'),
}

model ApplyDigitalLogisticCreditmodeIssueclearResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 全局业务号
  outBizNo?: string(name='out_biz_no'),
}

/**
 * Description: 物流信用流转按模式主动清分
 * Summary: 物流信用流转按模式主动清分
 */
async function applyDigitalLogisticCreditmodeIssueclear(request: ApplyDigitalLogisticCreditmodeIssueclearRequest): ApplyDigitalLogisticCreditmodeIssueclearResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyDigitalLogisticCreditmodeIssueclearEx(request, runtime);
}

/**
 * Description: 物流信用流转按模式主动清分
 * Summary: 物流信用流转按模式主动清分
 */
async function applyDigitalLogisticCreditmodeIssueclearEx(request: ApplyDigitalLogisticCreditmodeIssueclearRequest, runtime: Util.RuntimeOptions): ApplyDigitalLogisticCreditmodeIssueclearResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.creditmode.issueclear.apply', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UploadDigitalLogisticCreditIssuebysaasRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 批次id
  batchId?: string(name='batch_id'),
  // 发行结果回调地址
  callbackUrl?: string(name='callback_url'),
  // 集团平台did
  groupPlatformDid?: string(name='group_platform_did'),
  // 发行信息
  issueApplyInfos?: [ SaasIssueApplyInfo ](name='issue_apply_infos'),
  // 凭证发行方did
  platformDid?: string(name='platform_did'),
  // 产品id
  productId?: string(name='product_id'),
}

model UploadDigitalLogisticCreditIssuebysaasResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 批次id
  batchId?: string(name='batch_id'),
  // 批次状态
  batchStatus?: long(name='batch_status'),
  // 发行url
  issueUrl?: string(name='issue_url'),
}

/**
 * Description: 信用流转发行信息上传SAAS版
 * Summary: 信用流转发行信息上传SAAS版
 */
async function uploadDigitalLogisticCreditIssuebysaas(request: UploadDigitalLogisticCreditIssuebysaasRequest): UploadDigitalLogisticCreditIssuebysaasResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDigitalLogisticCreditIssuebysaasEx(request, runtime);
}

/**
 * Description: 信用流转发行信息上传SAAS版
 * Summary: 信用流转发行信息上传SAAS版
 */
async function uploadDigitalLogisticCreditIssuebysaasEx(request: UploadDigitalLogisticCreditIssuebysaasRequest, runtime: Util.RuntimeOptions): UploadDigitalLogisticCreditIssuebysaasResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuebysaas.upload', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CancelDigitalLogisticCreditIssuebatchbysaasRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 批次号
  batchId?: string(name='batch_id'),
  // 集团平台did
  groupPlatformDid?: string(name='group_platform_did'),
  // 凭证发行方did
  platformDid?: string(name='platform_did'),
  // 产品id
  productId?: string(name='product_id'),
}

model CancelDigitalLogisticCreditIssuebatchbysaasResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 批次id
  batchId?: string(name='batch_id'),
}

/**
 * Description: 信用流转B模式发行批次撤销SAAS版
 * Summary: 信用流转B模式发行批次撤销SAAS版
 */
async function cancelDigitalLogisticCreditIssuebatchbysaas(request: CancelDigitalLogisticCreditIssuebatchbysaasRequest): CancelDigitalLogisticCreditIssuebatchbysaasResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelDigitalLogisticCreditIssuebatchbysaasEx(request, runtime);
}

/**
 * Description: 信用流转B模式发行批次撤销SAAS版
 * Summary: 信用流转B模式发行批次撤销SAAS版
 */
async function cancelDigitalLogisticCreditIssuebatchbysaasEx(request: CancelDigitalLogisticCreditIssuebatchbysaasRequest, runtime: Util.RuntimeOptions): CancelDigitalLogisticCreditIssuebatchbysaasResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuebatchbysaas.cancel', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditBalancebysaasRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 产品id
  productId?: string(name='product_id'),
  // 集团平台did
  groupPlatformDid?: string(name='group_platform_did'),
  // 查询者did
  platformDid?: string(name='platform_did'),
  // 发行金额
  freight?: string(name='freight'),
}

model QueryDigitalLogisticCreditBalancebysaasResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否有信用流转额度
  hasBalance?: boolean(name='has_balance'),
}

/**
 * Description: 信用流转可用额度查询SAAS版
 * Summary: 信用流转可用额度查询SAAS版
 */
async function queryDigitalLogisticCreditBalancebysaas(request: QueryDigitalLogisticCreditBalancebysaasRequest): QueryDigitalLogisticCreditBalancebysaasResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditBalancebysaasEx(request, runtime);
}

/**
 * Description: 信用流转可用额度查询SAAS版
 * Summary: 信用流转可用额度查询SAAS版
 */
async function queryDigitalLogisticCreditBalancebysaasEx(request: QueryDigitalLogisticCreditBalancebysaasRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditBalancebysaasResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.balancebysaas.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model GetDigitalLogisticCreditIssuescpticketRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 申请唯一流水号
  applyId?: string(name='apply_id'),
  // 回调地址
  callbackUrl?: string(name='callback_url'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 业务发起方分布式数字身
  platformDid?: string(name='platform_did'),
  // 产品id	
  productId?: string(name='product_id'),
  // 电子回单查询凭证数据
  scpTicketIssueData?: [ ScpTicketIssueData ](name='scp_ticket_issue_data'),
}

model GetDigitalLogisticCreditIssuescpticketResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 申请唯一流水号
  applyId?: string(name='apply_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 业务发起方分布式数字身
  platformDid?: string(name='platform_did'),
  // 产品id
  productId?: string(name='product_id'),
}

/**
 * Description: 信用凭证电子回单获取
 * Summary: 信用凭证电子回单获取
 */
async function getDigitalLogisticCreditIssuescpticket(request: GetDigitalLogisticCreditIssuescpticketRequest): GetDigitalLogisticCreditIssuescpticketResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDigitalLogisticCreditIssuescpticketEx(request, runtime);
}

/**
 * Description: 信用凭证电子回单获取
 * Summary: 信用凭证电子回单获取
 */
async function getDigitalLogisticCreditIssuescpticketEx(request: GetDigitalLogisticCreditIssuescpticketRequest, runtime: Util.RuntimeOptions): GetDigitalLogisticCreditIssuescpticketResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuescpticket.get', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditIssuescpticketresultRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 申请唯一流水号
  applyId?: string(name='apply_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 业务发起方分布式数字身
  platformDid?: string(name='platform_did'),
  // 产品id
  productId?: string(name='product_id'),
}

model QueryDigitalLogisticCreditIssuescpticketresultResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 申请唯一流水号
  applyId?: string(name='apply_id'),
  // 电子回单下载地址,链接有有效期
  fileDownloadUrl?: string(name='file_download_url'),
  // 集团平台方分布式数字身份
  // 
  groupPlatformDid?: string(name='group_platform_did'),
  // 业务发起方分布式数字身
  platformDid?: string(name='platform_did'),
  // 产品id
  // 
  productId?: string(name='product_id'),
  // 状态
  status?: string(name='status'),
}

/**
 * Description: 信用凭证电子回单获取结果查询接口
 * Summary: 信用凭证电子回单获取结果查询接口
 */
async function queryDigitalLogisticCreditIssuescpticketresult(request: QueryDigitalLogisticCreditIssuescpticketresultRequest): QueryDigitalLogisticCreditIssuescpticketresultResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditIssuescpticketresultEx(request, runtime);
}

/**
 * Description: 信用凭证电子回单获取结果查询接口
 * Summary: 信用凭证电子回单获取结果查询接口
 */
async function queryDigitalLogisticCreditIssuescpticketresultEx(request: QueryDigitalLogisticCreditIssuescpticketresultRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditIssuescpticketresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuescpticketresult.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UploadDigitalLogisticCreditAplusissueRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 批次id
  batchId?: string(name='batch_id'),
  // 发行结果信息回调地址
  callbackUrl?: string(name='callback_url'),
  // 货代did
  consignorDid?: string(name='consignor_did'),
  // 发行时直接进行快速提现：true ，
  // 发行后自主触发提现：false （默认）
  easyFinance?: boolean(name='easy_finance'),
  // 集团平台did
  groupPlatformDid?: string(name='group_platform_did'),
  // 发行信息列表
  issueApplyInfos?: [ IssueApplyInfoPlus ](name='issue_apply_infos'),
  // 业务承接方did
  platformDid?: string(name='platform_did'),
  // 产品id
  productId?: string(name='product_id'),
  // 登录模式，返回的发行url指定使用何种模式登录。ORG:企业支付宝登录（缺省时默认ORG模式），USER_ACCOUNT:个人支付宝登录。
  loginType?: string(name='login_type'),
}

model UploadDigitalLogisticCreditAplusissueResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 批次id
  batchId?: string(name='batch_id'),
  // 批次状态 -1:失效， 0:初始化完成，1:进行中，2:部分成功，3:成功
  batchIdStatus?: long(name='batch_id_status'),
  // 凭证发行跳转url
  issueUrl?: string(name='issue_url'),
}

/**
 * Description: 信用流转A+模式发行信息上传
 * Summary: 信用流转A+模式发行信息上传
 */
async function uploadDigitalLogisticCreditAplusissue(request: UploadDigitalLogisticCreditAplusissueRequest): UploadDigitalLogisticCreditAplusissueResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDigitalLogisticCreditAplusissueEx(request, runtime);
}

/**
 * Description: 信用流转A+模式发行信息上传
 * Summary: 信用流转A+模式发行信息上传
 */
async function uploadDigitalLogisticCreditAplusissueEx(request: UploadDigitalLogisticCreditAplusissueRequest, runtime: Util.RuntimeOptions): UploadDigitalLogisticCreditAplusissueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.aplusissue.upload', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditCreditamountRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 集团平台did
  groupPlatformDid?: string(name='group_platform_did'),
  // 平台did
  platformDid?: string(name='platform_did'),
  // 产品ID
  productId?: string(name='product_id'),
}

model QueryDigitalLogisticCreditCreditamountResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 可用额度
  creditAmount?: string(name='credit_amount'),
  // 集团平台did
  groupPlatformDid?: string(name='group_platform_did'),
  // 平台did
  platformDid?: string(name='platform_did'),
  // 产品ID
  productId?: string(name='product_id'),
}

/**
 * Description: 信用流转可用额度查询接口
 * Summary: 信用流转可用额度查询接口
 */
async function queryDigitalLogisticCreditCreditamount(request: QueryDigitalLogisticCreditCreditamountRequest): QueryDigitalLogisticCreditCreditamountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditCreditamountEx(request, runtime);
}

/**
 * Description: 信用流转可用额度查询接口
 * Summary: 信用流转可用额度查询接口
 */
async function queryDigitalLogisticCreditCreditamountEx(request: QueryDigitalLogisticCreditCreditamountRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditCreditamountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.creditamount.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticCreditCommonsignRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 账户号，account_type=ACCOUNT_BANK_NO时填写外部银行卡号， account_type=ACCOUNT_CLOUD_FUND时填写云资金商户ID
  accountId?: string(name='account_id'),
  // 账户类型，ACCOUNT_BANK_NO:外部银行卡，ACCOUNT_CLOUD_FUND:云资金商户ID
  accountType?: string(name='account_type'),
  // 开户行联行号，当帐户类型为ACCOUNT_BANK_NO时必填
  bankCnaps?: string(name='bank_cnaps'),
  // 开户行名称，当帐户类型为ACCOUNT_BANK_NO时必填
  bankName?: string(name='bank_name'),
  // 签约结果回调地址
  callbackUrl?: string(name='callback_url'),
  // 驾驶证号码，当帐户类型为ACCOUNT_BANK_NO且签约方sign_did类型为个人时必填
  drivingLicense?: string(name='driving_license'),
  // 驾驶证影像件ID，当帐户类型为ACCOUNT_BANK_NO且签约方sign_did类型为个人时必填
  drivingLicenseFileId?: string(name='driving_license_file_id'),
  // 集团平台did
  groupPlatformDid?: string(name='group_platform_did'),
  // 法定代表人名称，签约方sign_did类型为企业时必填
  legalName?: string(name='legal_name'),
  // 产品id
  productId?: string(name='product_id'),
  // 签约方did
  signDid?: string(name='sign_did'),
  // 行驶证号码，当帐户类型为ACCOUNT_BANK_NO且签约方sign_did类型为个人时必填
  vehicleLicense?: string(name='vehicle_license'),
  // 行驶证影像件ID，当帐户类型为ACCOUNT_BANK_NO且签约方sign_did类型为个人时必填
  vehicleLicenseFileId?: string(name='vehicle_license_file_id'),
}

model CreateDigitalLogisticCreditCommonsignResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 申请id
  applyId?: string(name='apply_id'),
  // 签约状态，-1:签约失败，0:未签约，1:已签约，2:签约中
  status?: long(name='status'),
}

/**
 * Description: 信用流转非授信通用签约接口
 * Summary: 信用流转非授信通用签约接口
 */
async function createDigitalLogisticCreditCommonsign(request: CreateDigitalLogisticCreditCommonsignRequest): CreateDigitalLogisticCreditCommonsignResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticCreditCommonsignEx(request, runtime);
}

/**
 * Description: 信用流转非授信通用签约接口
 * Summary: 信用流转非授信通用签约接口
 */
async function createDigitalLogisticCreditCommonsignEx(request: CreateDigitalLogisticCreditCommonsignRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticCreditCommonsignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.commonsign.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticCreditCommonsignRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 产品id
  productId?: string(name='product_id'),
  // 集团平台did
  groupPlatformDid?: string(name='group_platform_did'),
  // 签约方did
  signDid?: string(name='sign_did'),
  // 申请id，不填则查询当前签约状态，填写则查询apply_id对应的签约申请结果
  applyId?: string(name='apply_id'),
}

model QueryDigitalLogisticCreditCommonsignResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 签约结果，-1:签约失败，0:未签约，1:已签约，2:签约中
  status?: long(name='status'),
  // 查询信息
  queryMsg?: string(name='query_msg'),
}

/**
 * Description: 信用流转非授信通用签约查询接口
 * Summary: 信用流转非授信通用签约查询接口
 */
async function queryDigitalLogisticCreditCommonsign(request: QueryDigitalLogisticCreditCommonsignRequest): QueryDigitalLogisticCreditCommonsignResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticCreditCommonsignEx(request, runtime);
}

/**
 * Description: 信用流转非授信通用签约查询接口
 * Summary: 信用流转非授信通用签约查询接口
 */
async function queryDigitalLogisticCreditCommonsignEx(request: QueryDigitalLogisticCreditCommonsignRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticCreditCommonsignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.commonsign.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model BatchcreateDigitalLogisticCreditIssueRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 产品id
  productId?: string(name='product_id'),
  // 集团平台did
  groupPlatformDid?: string(name='group_platform_did'),
  // 凭证发行方分布式身份
  createDid?: string(name='create_did'),
  // 凭证接收方分布式身份
  receiveDid?: string(name='receive_did'),
  // 批次id
  batchId?: string(name='batch_id'),
  // 全局业务唯一号
  outBizNo?: string(name='out_biz_no'),
  // 支付订单号
  payOrder?: string(name='pay_order'),
  // 支付单运费总额，运费最多精确到小数点后2位
  freight?: string(name='freight'),
  // 发行后自动贴现，true: 自动贴现，false: 不自动贴现 （默认）
  easyFinance?: boolean(name='easy_finance'),
  // 凭证到期时间
  expireDate?: string(name='expire_date'),
  // 发行结果回调地址
  callbackUrl?: string(name='callback_url'),
  // 需合并发行的运单id列表
  waybillIds?: [ string ](name='waybill_ids'),
}

model BatchcreateDigitalLogisticCreditIssueResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 批次id
  batchId?: string(name='batch_id'),
  // 批次状态
  batchStatus?: long(name='batch_status'),
}

/**
 * Description: 信用流转凭证合并发行接口
 * Summary: 信用流转凭证合并发行接口
 */
async function batchcreateDigitalLogisticCreditIssue(request: BatchcreateDigitalLogisticCreditIssueRequest): BatchcreateDigitalLogisticCreditIssueResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchcreateDigitalLogisticCreditIssueEx(request, runtime);
}

/**
 * Description: 信用流转凭证合并发行接口
 * Summary: 信用流转凭证合并发行接口
 */
async function batchcreateDigitalLogisticCreditIssueEx(request: BatchcreateDigitalLogisticCreditIssueRequest, runtime: Util.RuntimeOptions): BatchcreateDigitalLogisticCreditIssueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issue.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UploadDigitalLogisticCreditIssuebatchRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 批次id
  batchId?: string(name='batch_id'),
  // 回调地址
  callbackUrl?: string(name='callback_url'),
  // 凭证发行方did
  createDid?: string(name='create_did'),
  // 发行后自动贴现，true: 自动贴现，false: 不自动贴现 （默认）
  easyFinance?: boolean(name='easy_finance'),
  // 凭证到期时间
  expireDate?: string(name='expire_date'),
  // 支付单运费总额，运费最多精确到小数点后2位
  freight?: string(name='freight'),
  // 集团平台did
  groupPlatformDid?: string(name='group_platform_did'),
  // 全局业务唯一编号
  outBizNo?: string(name='out_biz_no'),
  // 支付订单号
  payOrder?: string(name='pay_order'),
  // 产品id
  productId?: string(name='product_id'),
  // 凭证接收方did
  receiveDid?: string(name='receive_did'),
  // 运单合并列表
  waybillIds?: [ string ](name='waybill_ids'),
}

model UploadDigitalLogisticCreditIssuebatchResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 批次id
  batchId?: string(name='batch_id'),
  // 批次状态
  batchStatus?: long(name='batch_status'),
  // 发行链接
  issueUrl?: string(name='issue_url'),
}

/**
 * Description: 信用流转凭证合并发行信息上传接口
 * Summary: 信用流转凭证合并发行信息上传接口
 */
async function uploadDigitalLogisticCreditIssuebatch(request: UploadDigitalLogisticCreditIssuebatchRequest): UploadDigitalLogisticCreditIssuebatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDigitalLogisticCreditIssuebatchEx(request, runtime);
}

/**
 * Description: 信用流转凭证合并发行信息上传接口
 * Summary: 信用流转凭证合并发行信息上传接口
 */
async function uploadDigitalLogisticCreditIssuebatchEx(request: UploadDigitalLogisticCreditIssuebatchRequest, runtime: Util.RuntimeOptions): UploadDigitalLogisticCreditIssuebatchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuebatch.upload', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model GetDigitalLogisticIssueTransferfileRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 申请唯一流水号
  applyId?: string(name='apply_id'),
  // 回调地址
  // 
  callbackUrl?: string(name='callback_url'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 信用流转凭证集合，最大长度支持30
  issueTransferDatas?: [ IssueTransferData ](name='issue_transfer_datas'),
  // 业务发起方分布式数字身份
  platformDid?: string(name='platform_did'),
  // 产品id
  // 
  productId?: string(name='product_id'),
}

model GetDigitalLogisticIssueTransferfileResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 申请唯一流水号
  applyId?: string(name='apply_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 业务发起方分布式数字身
  platformDid?: string(name='platform_did'),
  // 产品id
  productId?: string(name='product_id'),
}

/**
 * Description: 信用凭证电子回单获取(新)，明确了凭证的转出方did和转入方did
 * Summary: 信用凭证电子回单获取(新)
 */
async function getDigitalLogisticIssueTransferfile(request: GetDigitalLogisticIssueTransferfileRequest): GetDigitalLogisticIssueTransferfileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDigitalLogisticIssueTransferfileEx(request, runtime);
}

/**
 * Description: 信用凭证电子回单获取(新)，明确了凭证的转出方did和转入方did
 * Summary: 信用凭证电子回单获取(新)
 */
async function getDigitalLogisticIssueTransferfileEx(request: GetDigitalLogisticIssueTransferfileRequest, runtime: Util.RuntimeOptions): GetDigitalLogisticIssueTransferfileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.issue.transferfile.get', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model ApplyDigitalLogisticInsurancepolicyZhonghuacaixianRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 被保险人地址
  bbrAddr?: string(maxLength=80, name='bbr_addr'),
  // 被保险人证件号码
  bbrIdNo?: string(maxLength=40, name='bbr_id_no'),
  // 被保险人证件类型。按照如下值填写
  // 464001	身份证
  // 464002	护照
  // 464003	其他
  // 464004	组织机构代码
  // 464005	军人证
  // 464006	工商注册号码
  // 464007	统一社会信用代码
  // 464008	临时身份证
  // 464009	外国护照
  // 464010	中国人民武装警察身份证件
  // 464011	军官证
  // 464012	企业营业执照号码
  // 464013	统一社会信用代码（五证合一号码）
  // 464014	个体工商户营业执照号码
  // 464015	户口本
  // 464016	其他类境内个人身份有效证件
  // 464017	其他类境外个人身份有效证件
  // 464018	税务登记证
  // 464019	金融许可证号码
  // 464020	国家主管部门颁外国驻华机构批文号码
  // 464021	其他类境外机构代码
  bbrIdType?: string(maxLength=40, name='bbr_id_type'),
  // 被保险人姓名
  bbrName?: string(maxLength=40, name='bbr_name'),
  // 被保险人联系电话
  bbrTel?: string(maxLength=40, name='bbr_tel'),
  // 运费,四舍五入精确到小数点两位。系统将根据运费和费率计算含税保费，计算的保费结果为四舍五入，精确到两位小数
  carriage?: string(maxLength=20, name='carriage'),
  // 货物名称
  carGo?: string(maxLength=40, name='car_go'),
  // 厂牌型号
  cpModel?: string(maxLength=80, name='cp_model'),
  // 目的地
  destination?: string(maxLength=200, name='destination'),
  // 行驶证车主
  drivPer?: string(maxLength=40, name='driv_per'),
  // 保险起期，精确到天；最短起保时间为次日0点，最长延时起保时间为次日0点后24h
  effDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='eff_date'),
  // 发动机编号
  engineNo?: string(maxLength=40, name='engine_no'),
  // 车架号
  frameNo?: string(maxLength=40, name='frame_no'),
  // 运单所属集团分布式身份标识
  groupPlatformDid?: string(maxLength=80, name='group_platform_did'),
  // 投保人证件类型有效止期
  identifyPeriodEnd?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='identify_period_end'),
  // 投保人证件类型有效起期
  identifyPeriodStart?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='identify_period_start'),
  // 车牌号码
  licenseNo?: string(maxLength=40, name='license_no'),
  // 运单所属平台分布式身份标识
  platformDid?: string(maxLength=80, name='platform_did'),
  // 运营证号
  runNo?: string(maxLength=40, name='run_no'),
  // 起运地
  startPlace?: string(maxLength=200, name='start_place'),
  // 投保人地址
  tbrAddr?: string(maxLength=80, name='tbr_addr'),
  // 投保人邮箱
  tbrEmail?: string(maxLength=40, name='tbr_email'),
  // 投保人证件号
  tbrIdNo?: string(maxLength=40, name='tbr_id_no'),
  // 投保人证件类型，按照如下状态进行填写 
  // 464001	身份证
  // 464002	护照
  // 464003	其他
  // 464004	组织机构代码
  // 464005	军人证
  // 464006	工商注册号码
  // 464007	统一社会信用代码
  // 464008	临时身份证
  // 464009	外国护照
  // 464010	中国人民武装警察身份证件
  // 464011	军官证
  // 464012	企业营业执照号码
  // 464013	统一社会信用代码（五证合一号码）
  // 464014	个体工商户营业执照号码
  // 464015	户口本
  // 464016	其他类境内个人身份有效证件
  // 464017	其他类境外个人身份有效证件
  // 464018	税务登记证
  // 464019	金融许可证号码
  // 464020	国家主管部门颁外国驻华机构批文号码
  // 464021	其他类境外机构代码
  tbrIdType?: string(maxLength=40, name='tbr_id_type'),
  // 投保人姓名
  tbrName?: string(maxLength=40, name='tbr_name'),
  // 投保人联系电话
  tbrTel?: string(maxLength=40, name='tbr_tel'),
  // 保险止期，保期时间间隔为1-30天。
  termDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='term_date'),
  // 吨位
  tonNage?: string(maxLength=20, name='ton_nage'),
  // 交易流水号,全局唯一；格式为 yyyyMMdd+身份标识+其他编码。系统会根据该流水号做防重、幂等判断逻辑。当极端场景中，系统会返回处理中状态，客户端应该保持该流水号不变，并使用原来的请求再次发送请求，系统会根据幂等逻辑返回处理结果
  tradeNo?: string(maxLength=32, minLength=32, name='trade_no'),
  // 运输货物
  tsCarGo?: string(maxLength=80, name='ts_car_go'),
  // 运单id。通过运单创建接口上传运单时指定的运单标识。系统会根据该标识查询运单相关信息做投保业务校验
  waybillId?: string(maxLength=128, name='waybill_id'),
  // 重量
  weight?: string(maxLength=20, name='weight'),
}

model ApplyDigitalLogisticInsurancepolicyZhonghuacaixianResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 保单号
  polNo?: string(name='pol_no'),
  // 电子保单下载地址
  polUrl?: string(name='pol_url'),
  // 含税保费
  preMium?: string(name='pre_mium'),
}

/**
 * Description: 保险服务，投保接口。接口提供幂等逻辑，请求后接口会返回成功、失败、处理中。其中处理中是极端场景，需要客户端使用相同的业务流水号发起重试，以免造成重复投保
 * Summary: 投保接口-中华财险-承运人责任险
 */
async function applyDigitalLogisticInsurancepolicyZhonghuacaixian(request: ApplyDigitalLogisticInsurancepolicyZhonghuacaixianRequest): ApplyDigitalLogisticInsurancepolicyZhonghuacaixianResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyDigitalLogisticInsurancepolicyZhonghuacaixianEx(request, runtime);
}

/**
 * Description: 保险服务，投保接口。接口提供幂等逻辑，请求后接口会返回成功、失败、处理中。其中处理中是极端场景，需要客户端使用相同的业务流水号发起重试，以免造成重复投保
 * Summary: 投保接口-中华财险-承运人责任险
 */
async function applyDigitalLogisticInsurancepolicyZhonghuacaixianEx(request: ApplyDigitalLogisticInsurancepolicyZhonghuacaixianRequest, runtime: Util.RuntimeOptions): ApplyDigitalLogisticInsurancepolicyZhonghuacaixianResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurancepolicy.zhonghuacaixian.apply', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CancelDigitalLogisticInsurancepolicyZhonghuacaixianRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 保单号，投保成功后返回的
  polNo?: string(maxLength=60, name='pol_no'),
  // 含税保费，精确到小数点后两位
  preMium?: string(name='pre_mium'),
  // 全局唯一交易流水号
  tradeNo?: string(maxLength=32, minLength=32, name='trade_no'),
}

model CancelDigitalLogisticInsurancepolicyZhonghuacaixianResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 退保成功的对应的保单号
  polNo?: string(name='pol_no'),
}

/**
 * Description: 数字物流保险，退保接口
 * Summary: 退保接口-中华财险-承运人责任险
 */
async function cancelDigitalLogisticInsurancepolicyZhonghuacaixian(request: CancelDigitalLogisticInsurancepolicyZhonghuacaixianRequest): CancelDigitalLogisticInsurancepolicyZhonghuacaixianResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelDigitalLogisticInsurancepolicyZhonghuacaixianEx(request, runtime);
}

/**
 * Description: 数字物流保险，退保接口
 * Summary: 退保接口-中华财险-承运人责任险
 */
async function cancelDigitalLogisticInsurancepolicyZhonghuacaixianEx(request: CancelDigitalLogisticInsurancepolicyZhonghuacaixianRequest, runtime: Util.RuntimeOptions): CancelDigitalLogisticInsurancepolicyZhonghuacaixianResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurancepolicy.zhonghuacaixian.cancel', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model PushDigitalLogisticInsurancenotifyClaimRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 通知类型：
  // claims_pay:理赔支付信息
  // claims_info: 理赔信息
  category?: string(maxLength=16, name='category'),
  // 通知内容
  content?: string(maxLength=3000, name='content'),
}

model PushDigitalLogisticInsurancenotifyClaimResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 业务返回报文
  data?: string(name='data'),
}

/**
 * Description: 保险理赔通知
 * Summary: 保险理赔通知
 */
async function pushDigitalLogisticInsurancenotifyClaim(request: PushDigitalLogisticInsurancenotifyClaimRequest): PushDigitalLogisticInsurancenotifyClaimResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushDigitalLogisticInsurancenotifyClaimEx(request, runtime);
}

/**
 * Description: 保险理赔通知
 * Summary: 保险理赔通知
 */
async function pushDigitalLogisticInsurancenotifyClaimEx(request: PushDigitalLogisticInsurancenotifyClaimRequest, runtime: Util.RuntimeOptions): PushDigitalLogisticInsurancenotifyClaimResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurancenotify.claim.push', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model ApplyDigitalLogisticInsuranceFileurlRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 上传的文件名，要求文件名后缀必须以 _yyyyMMdd结尾
  fileName?: string(maxLength=80, name='file_name'),
}

model ApplyDigitalLogisticInsuranceFileurlResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 用于上传文件的连接
  fileUrl?: string(name='file_url'),
}

/**
 * Description: 系统会生成上传文件的连接，使用方使用该链接进行文件上传。该链接具有一定的时效性，因此建议按需按时申请使用
 * Summary: 上传文件链接申请
 */
async function applyDigitalLogisticInsuranceFileurl(request: ApplyDigitalLogisticInsuranceFileurlRequest): ApplyDigitalLogisticInsuranceFileurlResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyDigitalLogisticInsuranceFileurlEx(request, runtime);
}

/**
 * Description: 系统会生成上传文件的连接，使用方使用该链接进行文件上传。该链接具有一定的时效性，因此建议按需按时申请使用
 * Summary: 上传文件链接申请
 */
async function applyDigitalLogisticInsuranceFileurlEx(request: ApplyDigitalLogisticInsuranceFileurlRequest, runtime: Util.RuntimeOptions): ApplyDigitalLogisticInsuranceFileurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.fileurl.apply', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model ApplyDigitalLogisticInsurancepolicyUniversalRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 投保人开户银行，当打印发票选择为“1”时，必填
  accountBankName?: string(maxLength=100, name='account_bank_name'),
  // 投保人银行账户，当打印发票选择为“1”时，必填
  bankAccountInformation?: string(maxLength=50, name='bank_account_information'),
  // 被保人地址
  bbrAddr?: string(maxLength=200, name='bbr_addr'),
  // 被保人did（被保人所在链上分布式数字身份）
  bbrDid?: string(maxLength=200, name='bbr_did'),
  // 被保人证件号
  bbrIdNo?: string(maxLength=50, name='bbr_id_no'),
  // 被保人证件类型，01-居民身份证, 02-驾驶执照, 03-营业执照, 99-其他	
  // 
  bbrIdType?: string(maxLength=2, name='bbr_id_type'),
  // 被保人姓名
  bbrName?: string(maxLength=100, name='bbr_name'),
  // 被保人电话号
  bbrTel?: string(maxLength=20, name='bbr_tel'),
  // 被保人类型, 1-个人 2-团队
  bbrType?: string(maxLength=1, name='bbr_type'),
  // 货物名称
  cargoName?: string(maxLength=100, name='cargo_name'),
  // 货物数量
  cargoQuantity?: string(maxLength=20, name='cargo_quantity'),
  // 货物数量单位
  cargoQuantityUnit?: string(maxLength=20, name='cargo_quantity_unit'),
  // 货物吨位
  cargoTonnage?: string(maxLength=20, name='cargo_tonnage'),
  // 货物类型，普货，手机/电子产品/家用电器，精密仪器，家具，易碎品，大宗散货，生鲜（瓜果蔬菜），棉纱
  cargoType?: string(maxLength=50, name='cargo_type'),
  // 货物体积
  cargoVolume?: string(maxLength=20, name='cargo_volume'),
  // 货值
  cargoWorth?: string(maxLength=50, name='cargo_worth'),
  // 车长
  carLength?: string(maxLength=10, name='car_length'),
  // 车型
  carModel?: string(maxLength=20, name='car_model'),
  // 目的地，格式为"省-市-区"
  destination?: string(maxLength=100, name='destination'),
  // 司机姓名
  driverName?: string(maxLength=50, name='driver_name'),
  // 司机联系方式
  driverTel?: string(maxLength=20, name='driver_tel'),
  // 保险起始时间, 时间格式 "yyyy-MM-dd HH:mm:ss", 预计起运日期
  effDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='eff_date'),
  // 保司, 01-华泰, 02-平安, 03-亚太
  externalChannelCode?: string(maxLength=2, name='external_channel_code'),
  // 险种, 01-承运人平台责任险
  // 
  externalProductCode?: string(maxLength=2, name='external_product_code'),
  // 车架号
  frameNo?: string(maxLength=50, name='frame_no'),
  // 投保额，整数以元为单位
  // 
  insuredAmount?: string(maxLength=12, name='insured_amount'),
  // 车牌号
  licenseNo?: string(maxLength=20, name='license_no'),
  // 车牌颜色，01-黄牌，02-蓝牌
  licensePlateColor?: string(maxLength=2, name='license_plate_color'),
  // 税务登记证/纳税人识别号，当打印发票选择为“1”时，必填
  nsrIdentifier?: string(maxLength=50, name='nsr_identifier'),
  // 接单时间, 时间格式 "yyyy-MM-dd HH:mm:ss"
  orderTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='order_time'),
  // 包装方式, 01-箱装、02-袋装、03-包装、04-桶装、05-捆扎包装、06-裸装、07-散装、08-其他包装
  packing?: string(maxLength=100, name='packing'),
  // 是否打印发票，默认0-不开票  1-专票 2-电子发票
  printInvoice?: string(maxLength=1, name='print_invoice'),
  // 费率，按实际业务商讨费率执行, 但最终结果以保司计算结果为准，0到1之间，最多6位小数
  rate?: string(maxLength=8, name='rate'),
  // 起运地，格式为"省-市-区"
  startPlace?: string(maxLength=100, name='start_place'),
  // 投保人地址，当打印发票选择为“1”时，必填
  tbrAddr?: string(maxLength=200, name='tbr_addr'),
  // 投保人-企业联系人联系方式
  tbrCorporateContract?: string(maxLength=20, name='tbr_corporate_contract'),
  // 投保人did（投保人所在链上分布式数字身份）
  tbrDid?: string(maxLength=200, name='tbr_did'),
  // 投保人邮箱，用以接受电子发票的邮箱地址
  tbrEmail?: string(maxLength=50, name='tbr_email'),
  // 投保人证件号
  tbrIdNo?: string(maxLength=50, name='tbr_id_no'),
  // 投保人证件类型，01-居民身份证, 02-驾驶执照, 03-营业执照, 99-其他
  tbrIdType?: string(maxLength=2, name='tbr_id_type'),
  // 投保人名称
  tbrName?: string(maxLength=100, name='tbr_name'),
  // 投保人电话号
  tbrTel?: string(maxLength=20, name='tbr_tel'),
  // 投保人类型, 1-个人 2-团队
  tbrType?: string(maxLength=1, name='tbr_type'),
  // 保险截止时间, 时间格式 "yyyy-MM-dd HH:mm:ss", 预计到达日期，保险止期间隔为1-30天
  termDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='term_date'),
  // 专票邮寄地址
  ticketAddr?: string(maxLength=200, name='ticket_addr'),
  // 订单号, 年月日+唯一字符ID
  tradeNo?: string(maxLength=50, name='trade_no'),
  // 中转地，格式为"省-市-区"
  transitPoint?: string(maxLength=100, name='transit_point'),
  // 运单id（平台方运单id）
  waybillId?: string(maxLength=50, name='waybill_id'),
}

model ApplyDigitalLogisticInsurancepolicyUniversalResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 保单号
  polNo?: string(name='pol_no'),
  // 电子保单下载地址
  polUrl?: string(name='pol_url'),
  // 总保费
  totalPremium?: string(name='total_premium'),
  // 订单号
  tradeNo?: string(name='trade_no'),
}

/**
 * Description: 保险服务-平台责任险投保接口。根据运输货物货值生成相应的保费。
接口提供幂等逻辑，请求后接口会返回成功、失败、处理中。其中处理中是极端场景，需要客户端使用相同的业务流水号发起重试，以免造成重复投保
 * Summary: 投保接口-承运人平台责任险
 */
async function applyDigitalLogisticInsurancepolicyUniversal(request: ApplyDigitalLogisticInsurancepolicyUniversalRequest): ApplyDigitalLogisticInsurancepolicyUniversalResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyDigitalLogisticInsurancepolicyUniversalEx(request, runtime);
}

/**
 * Description: 保险服务-平台责任险投保接口。根据运输货物货值生成相应的保费。
接口提供幂等逻辑，请求后接口会返回成功、失败、处理中。其中处理中是极端场景，需要客户端使用相同的业务流水号发起重试，以免造成重复投保
 * Summary: 投保接口-承运人平台责任险
 */
async function applyDigitalLogisticInsurancepolicyUniversalEx(request: ApplyDigitalLogisticInsurancepolicyUniversalRequest, runtime: Util.RuntimeOptions): ApplyDigitalLogisticInsurancepolicyUniversalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurancepolicy.universal.apply', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CancelDigitalLogisticInsurancepolicyUniversalRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 投保订单号
  applyTradeNo?: string(maxLength=50, name='apply_trade_no'),
  // 保司, 01-华泰, 03-亚太
  externalChannelCode?: string(maxLength=2, name='external_channel_code'),
  // 险种, 01-承运人平台责任险
  // 
  externalProductCode?: string(maxLength=2, name='external_product_code'),
  // 保单号
  polNo?: string(maxLength=50, name='pol_no'),
  // 退保全局唯一流水号
  tradeNo?: string(maxLength=50, name='trade_no'),
}

model CancelDigitalLogisticInsurancepolicyUniversalResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 投保订单号
  applyTradeNo?: string(name='apply_trade_no'),
  // 保单号
  polNo?: string(name='pol_no'),
  // 退还保费
  sendBackPremium?: string(name='send_back_premium'),
  // 成功退保时间, 时间格式 "yyyy-MM-dd HH:mm:ss"
  successSurrenderTime?: string(name='success_surrender_time'),
  // 退保生效时间, 时间格式 "yyyy-MM-dd HH:mm:ss"
  surrenderEffectiveTime?: string(name='surrender_effective_time'),
}

/**
 * Description: 数字物流保险，退保接口
 * Summary: 退保接口-承运人平台责任险
 */
async function cancelDigitalLogisticInsurancepolicyUniversal(request: CancelDigitalLogisticInsurancepolicyUniversalRequest): CancelDigitalLogisticInsurancepolicyUniversalResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelDigitalLogisticInsurancepolicyUniversalEx(request, runtime);
}

/**
 * Description: 数字物流保险，退保接口
 * Summary: 退保接口-承运人平台责任险
 */
async function cancelDigitalLogisticInsurancepolicyUniversalEx(request: CancelDigitalLogisticInsurancepolicyUniversalRequest, runtime: Util.RuntimeOptions): CancelDigitalLogisticInsurancepolicyUniversalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurancepolicy.universal.cancel', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model PushDigitalLogisticInsuranceOlpRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 被保人证件号
  bbrIdNo?: string(maxLength=50, name='bbr_id_no'),
  // 被保人名称
  bbrName?: string(maxLength=100, name='bbr_name'),
  // 被保人类型, 1-个人 2-企业	
  // 
  bbrType?: string(maxLength=10, name='bbr_type'),
  // 保险公司编码
  channelCode?: string(maxLength=50, name='channel_code'),
  // 保险公司名称
  channelName?: string(maxLength=100, name='channel_name'),
  // 理赔单状态，ALREADY_RISK: 已出险，NOT_RISK: 未出险，NOT_CLAIM: 未理赔
  claimStatus?: string(maxLength=10, name='claim_status'),
  // 投保时间	
  insureDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='insure_date'),
  // 保险止期
  insureEnd?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='insure_end'),
  // 保险起期
  insureStart?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='insure_start'),
  // 存证平台编码
  platformConsumerCode?: string(maxLength=50, name='platform_consumer_code'),
  // 存证平台名称
  platformConsumerName?: string(maxLength=100, name='platform_consumer_name'),
  // 保单文件id，可支持多个，逗号隔开
  polFileIds?: string(maxLength=3200, name='pol_file_ids'),
  // 保单号
  polNo?: string(maxLength=100, name='pol_no'),
  // 保单状态，INSURED: 已投保，SURRENDERED: 已退保,	
  polStatus?: string(maxLength=12, name='pol_status'),
  // 电子保单url地址
  polUrl?: string(maxLength=500, name='pol_url'),
  // 保费
  premium?: string(maxLength=20, name='premium'),
  // 险种代码
  productCode?: string(maxLength=50, name='product_code'),
  // 险种名称
  productName?: string(maxLength=100, name='product_name'),
  // 退保时间
  surrenderTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='surrender_time'),
  // 投保人证件号
  tbrIdNo?: string(maxLength=50, name='tbr_id_no'),
  // 投保人名称
  tbrName?: string(maxLength=100, name='tbr_name'),
  // 投保人类型, 1-个人 2-企业
  tbrType?: string(maxLength=10, name='tbr_type'),
  // 交易流水号
  tradeNo?: string(maxLength=200, name='trade_no'),
}

model PushDigitalLogisticInsuranceOlpResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 返回状态
  status?: string(name='status'),
}

/**
 * Description: 利用区块链智能合约进行离线保单存证
 * Summary: 离线保单存证推送
 */
async function pushDigitalLogisticInsuranceOlp(request: PushDigitalLogisticInsuranceOlpRequest): PushDigitalLogisticInsuranceOlpResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushDigitalLogisticInsuranceOlpEx(request, runtime);
}

/**
 * Description: 利用区块链智能合约进行离线保单存证
 * Summary: 离线保单存证推送
 */
async function pushDigitalLogisticInsuranceOlpEx(request: PushDigitalLogisticInsuranceOlpRequest, runtime: Util.RuntimeOptions): PushDigitalLogisticInsuranceOlpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.olp.push', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UpdateDigitalLogisticInsuranceOlpRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 被保人证件号
  bbrIdNo?: string(maxLength=50, name='bbr_id_no'),
  // 被保人名称
  bbrName?: string(maxLength=100, name='bbr_name'),
  // 被保人类型, 1-个人 2-企业
  bbrType?: string(maxLength=10, name='bbr_type'),
  // 保险公司编码
  channelCode?: string(maxLength=50, name='channel_code'),
  // 保险公司名称
  channelName?: string(maxLength=100, name='channel_name'),
  // 理赔单状态，ALREADY_RISK: 已出险，NOT_RISK: 未出险，NOT_CLAIM: 未理赔
  claimStatus?: string(maxLength=10, name='claim_status'),
  // 投保时间
  insureDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='insure_date'),
  // 保险止期
  insureEnd?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='insure_end'),
  // 保险起期
  insureStart?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='insure_start'),
  // 存证平台编码
  platformConsumerCode?: string(maxLength=50, name='platform_consumer_code'),
  // 存证平台名称
  platformConsumerName?: string(maxLength=100, name='platform_consumer_name'),
  // 保单文件id，可支持多个，逗号隔开
  polFileIds?: string(maxLength=3200, name='pol_file_ids'),
  // 保单号
  polNo?: string(maxLength=100, name='pol_no'),
  // 保单状态，INSURED: 已投保，SURRENDERED: 已退保,
  polStatus?: string(maxLength=12, name='pol_status'),
  // 电子保单url地址	
  polUrl?: string(maxLength=500, name='pol_url'),
  // 保费
  // 
  premium?: string(maxLength=20, name='premium'),
  // 险种代码
  // 
  productCode?: string(maxLength=50, name='product_code'),
  // 险种名称
  // 
  productName?: string(maxLength=100, name='product_name'),
  // 退保时间
  surrenderTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='surrender_time'),
  // 投保人证件号
  tbrIdNo?: string(maxLength=50, name='tbr_id_no'),
  // 投保人名称
  tbrName?: string(maxLength=100, name='tbr_name'),
  // 投保人类型, 1-个人 2-企业
  tbrType?: string(maxLength=10, name='tbr_type'),
  // 交易流水号
  tradeNo?: string(maxLength=200, name='trade_no'),
}

model UpdateDigitalLogisticInsuranceOlpResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 返回状态
  status?: string(name='status'),
}

/**
 * Description: 利用区块链智能合约进行离线保单信息更新追踪
 * Summary: 离线保单更新
 */
async function updateDigitalLogisticInsuranceOlp(request: UpdateDigitalLogisticInsuranceOlpRequest): UpdateDigitalLogisticInsuranceOlpResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDigitalLogisticInsuranceOlpEx(request, runtime);
}

/**
 * Description: 利用区块链智能合约进行离线保单信息更新追踪
 * Summary: 离线保单更新
 */
async function updateDigitalLogisticInsuranceOlpEx(request: UpdateDigitalLogisticInsuranceOlpRequest, runtime: Util.RuntimeOptions): UpdateDigitalLogisticInsuranceOlpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.olp.update', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticPfPaymentRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 业务参考号
  bussRefrNo?: string(maxLength=100, name='buss_refr_no'),
  // 支用id
  financingId?: string(maxLength=32, name='financing_id'),
}

model QueryDigitalLogisticPfPaymentResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 入账状态: 10-受理 20-在途 00-成功 99-失败
  accountinStatus?: string(name='accountin_status'),
  // 交易时间
  tradeTime?: string(name='trade_time'),
}

/**
 * Description: 池融资委托支付入账查询
 * Summary: 委托支付入账查询
 */
async function queryDigitalLogisticPfPayment(request: QueryDigitalLogisticPfPaymentRequest): QueryDigitalLogisticPfPaymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticPfPaymentEx(request, runtime);
}

/**
 * Description: 池融资委托支付入账查询
 * Summary: 委托支付入账查询
 */
async function queryDigitalLogisticPfPaymentEx(request: QueryDigitalLogisticPfPaymentRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticPfPaymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.payment.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticPfIouRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 客户号
  customerNo?: string(maxLength=20, name='customer_no'),
  // 借据Id
  debitId?: string(maxLength=16, name='debit_id'),
  // 支用Id
  financingId?: string(maxLength=32, name='financing_id'),
}

model QueryDigitalLogisticPfIouResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 执行年利率
  annualInterestRate?: string(name='annual_interest_rate'),
  // 借据Id
  creditId?: string(name='credit_id'),
  // 借据到期日
  interestBearingEnd?: string(name='interest_bearing_end'),
  // 借据起息日
  interestBearingStart?: string(name='interest_bearing_start'),
  // 发放金额
  issuedAmount?: string(name='issued_amount'),
  // 贷款性质 0-正常 1-展期 2-一类逾期 3-二类逾期 4-呆滞 5-呆帐
  loanNature?: string(name='loan_nature'),
  // 贷款状态 销户=结清 0-正常 1-销户 5-已发放未复核入账
  loanStatus?: string(name='loan_status'),
  // 下次结息日期
  nextParsingDate?: string(name='next_parsing_date'),
  // 逾期计息方式 0-逾期利率 1-逾期罚息比例 2-协议违约利率
  odiCalType?: string(name='odi_cal_type'),
  // 逾期罚息浮动比率
  opiFloatingRatio?: string(name='opi_floating_ratio'),
  // 贷款入账账号
  payAccount?: string(name='pay_account'),
  // 本金余额
  principalBalance?: string(name='principal_balance'),
  // 还款账号
  repayAccount?: string(name='repay_account'),
}

/**
 * Description: 池融资借据信息查询
 * Summary: 借据信息查询
 */
async function queryDigitalLogisticPfIou(request: QueryDigitalLogisticPfIouRequest): QueryDigitalLogisticPfIouResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticPfIouEx(request, runtime);
}

/**
 * Description: 池融资借据信息查询
 * Summary: 借据信息查询
 */
async function queryDigitalLogisticPfIouEx(request: QueryDigitalLogisticPfIouRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticPfIouResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.iou.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticPfQuotaRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 证件号
  certNo?: string(maxLength=20, name='cert_no'),
  // 证件类型;050 统一社会信用证代码
  certType?: string(maxLength=3, name='cert_type'),
  // 银行端客户号
  customerNo?: string(maxLength=20, name='customer_no'),
  // 融资主体did
  financingSubjectDid?: string(name='financing_subject_did'),
}

model QueryDigitalLogisticPfQuotaResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 授信额度信息
  quotaInfo?: [ PfCreditQuotaInfo ](name='quota_info'),
}

/**
 * Description: 池融资授信额度查询
 * Summary: 授信额度查询
 */
async function queryDigitalLogisticPfQuota(request: QueryDigitalLogisticPfQuotaRequest): QueryDigitalLogisticPfQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticPfQuotaEx(request, runtime);
}

/**
 * Description: 池融资授信额度查询
 * Summary: 授信额度查询
 */
async function queryDigitalLogisticPfQuotaEx(request: QueryDigitalLogisticPfQuotaRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticPfQuotaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.quota.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model ApplyDigitalLogisticPfWaybillfinancingRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 承运商did
  carrierDid?: string(maxLength=80, name='carrier_did'),
  // 融资支用金额；总长度最长15位，保留2位小数，四舍五入
  financingAmount?: string(name='financing_amount'),
  // 支用币种，支持 CNY,USD
  financingCurrency?: string(name='financing_currency'),
  // 融资授信主体公司分布式数字身份
  financingSubjectDid?: string(maxLength=80, name='financing_subject_did'),
  // 贷款期限，值为2~6，单位为月
  loanTerm?: string(maxLength=6, minLength=2, name='loan_term'),
  // 收款方开户行总行联行号
  payeeBankNumber?: string(maxLength=32, name='payee_bank_number'),
  // 收款方开户行名称
  payeeBcb?: string(maxLength=200, name='payee_bcb'),
  // 收款方开户行银行卡号
  payeeBcbCardNo?: string(name='payee_bcb_card_no'),
  // 收款方证件号
  // 
  // 
  payeeIdNumber?: string(maxLength=40, name='payee_id_number'),
  // 收款方证件类型
  payeeIdType?: string(maxLength=5, name='payee_id_type'),
  // 收款方名称
  payeeName?: string(maxLength=200, name='payee_name'),
  // 0政府投标 1经营周转 2支付货款 3采购机票，一般默认填 2 
  purpose?: string(name='purpose'),
  // 请求号，以时间串yyyyMMdd 开头，要求该请求号在请求方系统内唯一；同时该字段也是幂等字段
  requestNo?: string(maxLength=23, name='request_no'),
  // 银行端的Ukey签名；使用方调用接口前使用银行Ukey做签名，并将签名后的结果填入该字段；一期，该字段可不传，使用方通过登录网上银行使用网银进行确认
  signature?: string(maxLength=800, name='signature'),
  // 转账附言
  // 1: 工资、奖金收入
  // 2：稿费、演出费等劳务收入
  // 3：债券、期货、信托等投资的本金和收益
  // 4：个人债券或产权转让收益
  // 该字段建议填写 2
  transferPostscript?: string(maxLength=3, name='transfer_postscript'),
  // 凭证类型，支持 WAYBILL,PAYABLE
  voucherCategory?: string(name='voucher_category'),
  // 支用凭证ids，支持多个，逗号隔开；
  voucherIds?: string(maxLength=2000, name='voucher_ids'),
  // 8位发票号，支持多个，逗号分隔
  voucherInvoiceCodes?: string(maxLength=800, name='voucher_invoice_codes'),
}

model ApplyDigitalLogisticPfWaybillfinancingResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 融资支用Id
  financingId?: string(name='financing_id'),
  // 申请状态
  status?: string(name='status'),
}

/**
 * Description: 基于运单的融资申请
 * Summary: 运单融资申请
 */
async function applyDigitalLogisticPfWaybillfinancing(request: ApplyDigitalLogisticPfWaybillfinancingRequest): ApplyDigitalLogisticPfWaybillfinancingResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyDigitalLogisticPfWaybillfinancingEx(request, runtime);
}

/**
 * Description: 基于运单的融资申请
 * Summary: 运单融资申请
 */
async function applyDigitalLogisticPfWaybillfinancingEx(request: ApplyDigitalLogisticPfWaybillfinancingRequest, runtime: Util.RuntimeOptions): ApplyDigitalLogisticPfWaybillfinancingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.waybillfinancing.apply', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model PushDigitalLogisticPfPledgeRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 账单标识
  billId?: string(maxLength=128, minLength=1, name='bill_id'),
  // 融资主体did
  financingSubjectDid?: string(maxLength=128, minLength=1, name='financing_subject_did'),
  // 请求号；以yyyyMMdd 时间串开头的32位字符串；该字符串需要保持请求系统内唯一，系统会以该请求号作为幂等处理
  requestNo?: string(maxLength=32, minLength=16, name='request_no'),
}

model PushDigitalLogisticPfPledgeResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 描述
  desc?: string(name='desc'),
  // 质押标识，用于账单质押推送状态查询
  pledgeId?: string(name='pledge_id'),
  // 质押推送状态；applied：已申请；failure：失败；由于质押推送过程为异步，若通过了前期的业务校验，将返回已申请状态；后续可使用质押Id查询质押推送终态
  status?: string(name='status'),
}

/**
 * Description: 池融资账单质押，用于入池
 * Summary: 池融资账单质押
 */
async function pushDigitalLogisticPfPledge(request: PushDigitalLogisticPfPledgeRequest): PushDigitalLogisticPfPledgeResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushDigitalLogisticPfPledgeEx(request, runtime);
}

/**
 * Description: 池融资账单质押，用于入池
 * Summary: 池融资账单质押
 */
async function pushDigitalLogisticPfPledgeEx(request: PushDigitalLogisticPfPledgeRequest, runtime: Util.RuntimeOptions): PushDigitalLogisticPfPledgeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.pledge.push', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticPfPledgeRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 质押id
  pledgeId?: string(maxLength=32, minLength=16, name='pledge_id'),
}

model QueryDigitalLogisticPfPledgeResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 账单id
  billId?: string(name='bill_id'),
  // 状态描述
  desc?: string(name='desc'),
  // 融资主体did
  financingSubjectDid?: string(name='financing_subject_did'),
  // 推送状态
  status?: string(name='status'),
}

/**
 * Description: 入池账单质押状态查询
 * Summary: 质押状态查询
 */
async function queryDigitalLogisticPfPledge(request: QueryDigitalLogisticPfPledgeRequest): QueryDigitalLogisticPfPledgeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticPfPledgeEx(request, runtime);
}

/**
 * Description: 入池账单质押状态查询
 * Summary: 质押状态查询
 */
async function queryDigitalLogisticPfPledgeEx(request: QueryDigitalLogisticPfPledgeRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticPfPledgeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.pledge.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticPfFinancingRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 支用Id
  financingId?: string(name='financing_id'),
}

model QueryDigitalLogisticPfFinancingResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 状态
  status?: string(name='status'),
  // 描述
  desc?: string(name='desc'),
  // 支用Id
  financingId?: string(name='financing_id'),
}

/**
 * Description: 池融资融资支用状态查询
 * Summary: 池融资融资支用状态查询
 */
async function queryDigitalLogisticPfFinancing(request: QueryDigitalLogisticPfFinancingRequest): QueryDigitalLogisticPfFinancingResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticPfFinancingEx(request, runtime);
}

/**
 * Description: 池融资融资支用状态查询
 * Summary: 池融资融资支用状态查询
 */
async function queryDigitalLogisticPfFinancingEx(request: QueryDigitalLogisticPfFinancingRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticPfFinancingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.financing.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticDidForwarderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 代理did
  agentDid?: string(name='agent_did'),
  // 企业名称
  epCertName?: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo?: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 法人姓名
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 法人身份证号
  legalPersonCertNo?: string(name='legal_person_cert_no'),
}

model CreateDigitalLogisticDidForwarderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 货代did
  did?: string(name='did'),
}

/**
 * Description: 创建货代did
 * Summary: 创建货代did
 */
async function createDigitalLogisticDidForwarder(request: CreateDigitalLogisticDidForwarderRequest): CreateDigitalLogisticDidForwarderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticDidForwarderEx(request, runtime);
}

/**
 * Description: 创建货代did
 * Summary: 创建货代did
 */
async function createDigitalLogisticDidForwarderEx(request: CreateDigitalLogisticDidForwarderRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticDidForwarderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.did.forwarder.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticDidSaasplatformRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 企业名称
  // 
  epCertName?: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo?: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 法人姓名
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 法人身份证
  legalPersonCertNo?: string(name='legal_person_cert_no'),
}

model CreateDigitalLogisticDidSaasplatformResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // saas平台did
  did?: string(name='did'),
}

/**
 * Description: 创建saas平台did
 * Summary: 创建saas平台did
 */
async function createDigitalLogisticDidSaasplatform(request: CreateDigitalLogisticDidSaasplatformRequest): CreateDigitalLogisticDidSaasplatformResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticDidSaasplatformEx(request, runtime);
}

/**
 * Description: 创建saas平台did
 * Summary: 创建saas平台did
 */
async function createDigitalLogisticDidSaasplatformEx(request: CreateDigitalLogisticDidSaasplatformRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticDidSaasplatformResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.did.saasplatform.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticDidClientRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 代理did
  agentDid?: string(name='agent_did'),
  // 企业名称
  epCertName?: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo?: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 法人姓名
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 法人身份证号
  legalPersonCertNo?: string(name='legal_person_cert_no'),
}

model CreateDigitalLogisticDidClientResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 直客did
  did?: string(name='did'),
}

/**
 * Description: 创建直客did
 * Summary: 创建直客did
 */
async function createDigitalLogisticDidClient(request: CreateDigitalLogisticDidClientRequest): CreateDigitalLogisticDidClientResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticDidClientEx(request, runtime);
}

/**
 * Description: 创建直客did
 * Summary: 创建直客did
 */
async function createDigitalLogisticDidClientEx(request: CreateDigitalLogisticDidClientRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticDidClientResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.did.client.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticBizOrderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 提单要求
  blRequest?: string(name='bl_request'),
  // 订舱单号
  bookingNo?: string(name='booking_no'),
  // 船公司
  carrier?: string(name='carrier'),
  // 客户did  业务必填
  clientDid?: string(name='client_did'),
  // 收货人
  consignee?: string(name='consignee'),
  // 约号
  contract?: string(name='contract'),
  // 报关
  customsClearance?: string(name='customs_clearance'),
  // 目的地 业务必填	
  // 
  deliveryPlace?: string(name='delivery_place'),
  // 运输条款
  deliveryTerms?: string(name='delivery_terms'),
  // 卸货港. 业务必填	
  // 
  dischargePort?: string(name='discharge_port'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 运费
  freight?: string(name='freight'),
  // 保险
  insurance?: string(name='insurance'),
  // 放单地点
  issuePlace?: string(name='issue_place'),
  // 起运港. 业务必填	
  // 
  loadingPort?: string(name='loading_port'),
  // 裝卸方式
  movement?: string(name='movement'),
  // 通知方
  notifyParty?: string(name='notify_party'),
  // 订单号
  orderNo?: string(name='order_no'),
  // 付费方式 业务必填	
  // 
  paymentTerms?: string(name='payment_terms'),
  // 拖车
  pickUp?: string(name='pick_up'),
  // 收货地点
  receiptPlace?: string(name='receipt_place'),
  // 备注
  remark?: string(name='remark'),
  // 发货人
  shipper?: string(name='shipper'),
  // 任务单号
  taskOrder?: string(name='task_order'),
  // 运输方式
  transportation?: string(name='transportation'),
  // 船名
  vessel?: string(name='vessel'),
  // 航次
  voyage?: string(name='voyage'),
}

model SaveDigitalLogisticBizOrderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存订单
 * Summary: 保存订单
 */
async function saveDigitalLogisticBizOrder(request: SaveDigitalLogisticBizOrderRequest): SaveDigitalLogisticBizOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticBizOrderEx(request, runtime);
}

/**
 * Description: 保存订单
 * Summary: 保存订单
 */
async function saveDigitalLogisticBizOrderEx(request: SaveDigitalLogisticBizOrderRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticBizOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.order.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticBizConsignorderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 托单code
  consignOrderCode?: string(name='consign_order_code'),
  // 托单文件hash  业务必填
  fileHash?: string(name='file_hash'),
  // 托单文件id  业务必填
  fileId?: string(name='file_id'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 订单号
  orderNo?: string(name='order_no'),
}

model SaveDigitalLogisticBizConsignorderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存托单文件
 * Summary: 保存托单文件
 */
async function saveDigitalLogisticBizConsignorder(request: SaveDigitalLogisticBizConsignorderRequest): SaveDigitalLogisticBizConsignorderResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticBizConsignorderEx(request, runtime);
}

/**
 * Description: 保存托单文件
 * Summary: 保存托单文件
 */
async function saveDigitalLogisticBizConsignorderEx(request: SaveDigitalLogisticBizConsignorderRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticBizConsignorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.consignorder.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticBizGoodsRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 预计备货时间 毫秒值单位
  cargoReadyDate?: long(name='cargo_ready_date'),
  // 危险品页号
  dgPageNo?: string(name='dg_page_no'),
  // 危险品级别
  dgType?: string(name='dg_type'),
  // 危险品闪点
  flashPoint?: string(name='flash_point'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 货物 业务必填	
  // 
  goods?: string(name='goods'),
  // 中文品名
  goodsCn?: string(name='goods_cn'),
  // 货物ID
  goodsId?: string(name='goods_id'),
  // 货物类型（业务必填）
  goodsType?: string(name='goods_type'),
  // HS CODE
  hsCodes?: [ string ](name='hs_codes'),
  // 唛头
  marks?: string(name='marks'),
  // 委托件数 业务必填	
  // 
  number?: string(name='number'),
  // 订单号
  orderNo?: string(name='order_no'),
  // 包装类型
  packageType?: string(name='package_type'),
  // 实际件数
  realNumber?: string(name='real_number'),
  // 实际体积
  realVolume?: string(name='real_volume'),
  // 实际重量
  realWeight?: string(name='real_weight'),
  // 危险品联合国编号
  unNo?: string(name='un_no'),
  // 委托体积（业务必填）
  volume?: string(name='volume'),
  // 委托重量（业务必填）
  weight?: string(name='weight'),
}

model SaveDigitalLogisticBizGoodsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存货物
 * Summary: 保存货物
 */
async function saveDigitalLogisticBizGoods(request: SaveDigitalLogisticBizGoodsRequest): SaveDigitalLogisticBizGoodsResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticBizGoodsEx(request, runtime);
}

/**
 * Description: 保存货物
 * Summary: 保存货物
 */
async function saveDigitalLogisticBizGoodsEx(request: SaveDigitalLogisticBizGoodsRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticBizGoodsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.goods.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticBizSonotifyRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // so通知关联的订舱单 (业务必填)
  bookingParams?: [ SoNotifyBookingParam ](name='booking_params'),
  // 联系人
  contactName?: string(name='contact_name'),
  // 联系方式
  contactType?: string(name='contact_type'),
  // 卸货港 业务必填	
  // 
  dischargePort?: string(name='discharge_port'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 起运港 业务必填	
  // 
  loadingPort?: string(name='loading_port'),
  // 	
  // 订单号
  orderNo?: string(name='order_no'),
  // soNotify 唯一标识code
  soNotifyCode?: string(name='so_notify_code'),
}

model SaveDigitalLogisticBizSonotifyResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存SO入货通知
 * Summary: 保存SO入货通知
 */
async function saveDigitalLogisticBizSonotify(request: SaveDigitalLogisticBizSonotifyRequest): SaveDigitalLogisticBizSonotifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticBizSonotifyEx(request, runtime);
}

/**
 * Description: 保存SO入货通知
 * Summary: 保存SO入货通知
 */
async function saveDigitalLogisticBizSonotifyEx(request: SaveDigitalLogisticBizSonotifyRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticBizSonotifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.sonotify.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticBizBookingorderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 订舱单号
  bookingNo?: string(name='booking_no'),
  // 船公司 业务必填
  carrier?: string(name='carrier'),
  // 截关时间
  customsClearance?: long(name='customs_clearance'),
  // 场站 业务必填
  cy?: string(name='cy'),
  // 截港时间 毫秒值单位
  cyClosing?: long(name='cy_closing'),
  // 目的地
  deliveryPlace?: string(name='delivery_place'),
  // 卸货港
  dischargePort?: string(name='discharge_port'),
  // 预计船期 毫秒值单位
  etd?: long(name='etd'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 起运港
  loadingPort?: string(name='loading_port'),
  // 订单号
  orderNo?: string(name='order_no'),
  // 截单时间  毫秒值单位
  siClosing?: long(name='si_closing'),
  // 特殊字段无要求非必填
  source?: string(name='source'),
  // 船名 业务必填
  vessel?: string(name='vessel'),
  // 航次 业务必填
  voyage?: string(name='voyage'),
  // 订舱号
  bkgNo?: string(name='bkg_no'),
}

model SaveDigitalLogisticBizBookingorderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存订舱单
 * Summary: 保存订舱单
 */
async function saveDigitalLogisticBizBookingorder(request: SaveDigitalLogisticBizBookingorderRequest): SaveDigitalLogisticBizBookingorderResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticBizBookingorderEx(request, runtime);
}

/**
 * Description: 保存订舱单
 * Summary: 保存订舱单
 */
async function saveDigitalLogisticBizBookingorderEx(request: SaveDigitalLogisticBizBookingorderRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticBizBookingorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.bookingorder.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticBizContainerRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 订舱单号
  // 
  bookingNo?: string(name='booking_no'),
  // 集装箱ID
  containerId?: string(name='container_id'),
  // 箱号 业务必填
  containerNo?: string(name='container_no'),
  //  箱型  业务必填
  containerType?: string(name='container_type'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 货物列表
  goodsList?: [ ContainerGoodsParam ](name='goods_list'),
  // 订单号
  orderNo?: string(name='order_no'),
  // 备注
  remark?: string(name='remark'),
  // 封铅号
  sealNo?: string(name='seal_no'),
  // 是否SOC
  socFlag?: string(name='soc_flag'),
  // 特殊字段无要求非必填
  source?: string(name='source'),
}

model SaveDigitalLogisticBizContainerResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存集装箱
 * Summary: 保存集装箱
 */
async function saveDigitalLogisticBizContainer(request: SaveDigitalLogisticBizContainerRequest): SaveDigitalLogisticBizContainerResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticBizContainerEx(request, runtime);
}

/**
 * Description: 保存集装箱
 * Summary: 保存集装箱
 */
async function saveDigitalLogisticBizContainerEx(request: SaveDigitalLogisticBizContainerRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticBizContainerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.container.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticBizCustomsorderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 订舱单号
  bookingParams?: [ CustomsOrderBookingParam ](name='booking_params'),
  // 报关代理
  broker?: string(name='broker'),
  // 集装箱ID
  containerId?: string(name='container_id'),
  // 箱号
  containerNo?: string(name='container_no'),
  // 报关单号
  customsCode?: string(name='customs_code'),
  //  出口人
  exporter?: string(name='exporter'),
  // 货代did
  // 
  forwarderDid?: string(name='forwarder_did'),
  // 货物名称
  goods?: string(name='goods'),
  // 毛重 
  grossWeight?: string(name='gross_weight'),
  // 订单号
  // 
  orderNo?: string(name='order_no'),
  // 件数
  packagesNo?: string(name='packages_no'),
  // 报关状态  APPROVED--通关，UNAPPROVED-未通关
  status?: string(name='status'),
  // 航名 业务必填
  vessel?: string(name='vessel'),
  // 航次 业务必填
  voyage?: string(name='voyage'),
}

model SaveDigitalLogisticBizCustomsorderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存报关单
 * Summary: 保存报关单
 */
async function saveDigitalLogisticBizCustomsorder(request: SaveDigitalLogisticBizCustomsorderRequest): SaveDigitalLogisticBizCustomsorderResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticBizCustomsorderEx(request, runtime);
}

/**
 * Description: 保存报关单
 * Summary: 保存报关单
 */
async function saveDigitalLogisticBizCustomsorderEx(request: SaveDigitalLogisticBizCustomsorderRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticBizCustomsorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.customsorder.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticBizVehicleRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 箱子信息 业务必填
  containerParams?: [ VehicleContainerParam ](name='container_params'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 订单号
  orderNo?: string(name='order_no'),
  // 拖车单号
  vehicleCode?: string(name='vehicle_code'),
  // 车牌号 
  vehicleNo?: string(name='vehicle_no'),
}

model SaveDigitalLogisticBizVehicleResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存拖车单
 * Summary: 保存拖车单
 */
async function saveDigitalLogisticBizVehicle(request: SaveDigitalLogisticBizVehicleRequest): SaveDigitalLogisticBizVehicleResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticBizVehicleEx(request, runtime);
}

/**
 * Description: 保存拖车单
 * Summary: 保存拖车单
 */
async function saveDigitalLogisticBizVehicleEx(request: SaveDigitalLogisticBizVehicleRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticBizVehicleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.vehicle.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticBizMasterblRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 订舱单
  blBookingParams?: [ MasterBlBookingParam ](name='bl_booking_params'),
  // 提单要求 
  blRequest?: string(name='bl_request'),
  // 提单类型
  blType?: string(name='bl_type'),
  // 船公司 业务必填
  carrier?: string(name='carrier'),
  // 收货人 业务必填	
  // 
  consignee?: string(name='consignee'),
  // 集装箱列表 业务必填	
  // 
  containerParams?: [ MasterBlContainerParam ](name='container_params'),
  // 约号
  contract?: string(name='contract'),
  // 目的地. 业务必填	
  // 
  deliveryPlace?: string(name='delivery_place'),
  // 运输条款
  deliveryTerms?: string(name='delivery_terms'),
  // 卸货港. 业务必填	
  // 
  dischargePort?: string(name='discharge_port'),
  // 	
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 运费/约号
  freight?: string(name='freight'),
  // 货物列表. 业务必填	
  // 
  goodsParams?: [ MasterBlGoodsParam ](name='goods_params'),
  // 出单日期
  issueDate?: long(name='issue_date'),
  // 放单地点
  issuePlace?: string(name='issue_place'),
  // 起运港  业务必填	
  // 
  loadingPort?: string(name='loading_port'),
  // master提单号
  masterBlNo?: string(name='master_bl_no'),
  // 裝卸方式
  movement?: string(name='movement'),
  // 通知方 
  notifyParty?: string(name='notify_party'),
  // 开船日期
  onBoardDate?: long(name='on_board_date'),
  // 船状态
  onBoardStatus?: string(name='on_board_status'),
  // 	
  // 订单号
  orderNo?: string(name='order_no'),
  // 付费方式  业务必填	
  // 
  paymentTerms?: string(name='payment_terms'),
  // 前程运输
  prCarriage?: string(name='pr_carriage'),
  // 其他
  remark?: string(name='remark'),
  //  发货人. 业务必填	
  // 
  shipper?: string(name='shipper'),
  // 特殊字段无要求非必填
  source?: string(name='source'),
  // 运输方式
  transportation?: string(name='transportation'),
  // 航名 业务必填
  vessel?: string(name='vessel'),
  // 航次 业务必填
  voyage?: string(name='voyage'),
}

model SaveDigitalLogisticBizMasterblResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存master提单
 * Summary: 保存master提单
 */
async function saveDigitalLogisticBizMasterbl(request: SaveDigitalLogisticBizMasterblRequest): SaveDigitalLogisticBizMasterblResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticBizMasterblEx(request, runtime);
}

/**
 * Description: 保存master提单
 * Summary: 保存master提单
 */
async function saveDigitalLogisticBizMasterblEx(request: SaveDigitalLogisticBizMasterblRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticBizMasterblResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.masterbl.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model FinishDigitalLogisticBizAuditRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 	
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 	
  // 订单号
  orderNo?: string(name='order_no'),
}

model FinishDigitalLogisticBizAuditResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 内审完成
 * Summary: 内审完成
 */
async function finishDigitalLogisticBizAudit(request: FinishDigitalLogisticBizAuditRequest): FinishDigitalLogisticBizAuditResponse {
  var runtime = new Util.RuntimeOptions{};
  return finishDigitalLogisticBizAuditEx(request, runtime);
}

/**
 * Description: 内审完成
 * Summary: 内审完成
 */
async function finishDigitalLogisticBizAuditEx(request: FinishDigitalLogisticBizAuditRequest, runtime: Util.RuntimeOptions): FinishDigitalLogisticBizAuditResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.audit.finish', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticBizHouseblRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 订舱单
  blBookingParams?: [ HouseBlBookingParam ](name='bl_booking_params'),
  // 提单签发单位
  blIssuingAgency?: string(name='bl_issuing_agency'),
  // 提单要求
  blRequest?: string(name='bl_request'),
  // 提单类型
  blType?: string(name='bl_type'),
  // 船公司 业务必填
  carrier?: string(name='carrier'),
  // 收货人 业务必填	
  // 
  consignee?: string(name='consignee'),
  // 集装箱列表 业务必填	
  // 
  containerParams?: [ HouseBlContainerParam ](name='container_params'),
  // 约号
  contract?: string(name='contract'),
  // 目的地  业务必填	
  // 
  deliveryPlace?: string(name='delivery_place'),
  // 运输条款
  deliveryTerms?: string(name='delivery_terms'),
  // 卸货港 业务必填	
  // 
  dischargePort?: string(name='discharge_port'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 运费
  freight?: string(name='freight'),
  // 货物列表 业务必填	
  // 
  goodsParams?: [ HouseBlGoodsParam ](name='goods_params'),
  // house提单号
  houseBlNo?: string(name='house_bl_no'),
  // 出单日期 
  issueDate?: long(name='issue_date'),
  // 放单地点
  issuePlace?: string(name='issue_place'),
  // 起运港 业务必填	
  // 
  loadingPort?: string(name='loading_port'),
  // master提单号
  masterBlNo?: string(name='master_bl_no'),
  // 裝卸方式 
  movement?: string(name='movement'),
  // 通知方
  notifyParty?: string(name='notify_party'),
  // 开船日期
  onBoardDate?: long(name='on_board_date'),
  // 订单号
  orderNo?: string(name='order_no'),
  // 付费方式 业务必填	
  // 
  paymentTerms?: string(name='payment_terms'),
  // 其他
  remark?: string(name='remark'),
  // 发货人 业务必填	
  // 
  shipper?: string(name='shipper'),
  // 运输方式
  transportation?: string(name='transportation'),
  // 航名 业务必填
  vessel?: string(name='vessel'),
  // 航次 业务必填
  voyage?: string(name='voyage'),
}

model SaveDigitalLogisticBizHouseblResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存house提单
 * Summary: 保存house提单
 */
async function saveDigitalLogisticBizHousebl(request: SaveDigitalLogisticBizHouseblRequest): SaveDigitalLogisticBizHouseblResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticBizHouseblEx(request, runtime);
}

/**
 * Description: 保存house提单
 * Summary: 保存house提单
 */
async function saveDigitalLogisticBizHouseblEx(request: SaveDigitalLogisticBizHouseblRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticBizHouseblResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.housebl.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticBillPaybillorderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 申请时间
  applyDate?: long(name='apply_date'),
  // 银行收款账户
  bankReceiptAccount?: string(name='bank_receipt_account'),
  // 币种
  currency?: string(name='currency'),
  // 开户行
  depositBank?: string(name='deposit_bank'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 应付总额
  payAmount?: string(name='pay_amount'),
  // 付款单编号
  payBillOrderCode?: string(name='pay_bill_order_code'),
  // 应付账单资费项 业务必填
  payBillTariffParams?: [ PayBillTariffParam ](name='pay_bill_tariff_params'),
  // 付款公司
  payCompany?: string(name='pay_company'),
  // 付款公司企业信用号
  // 
  payCompanyCertNo?: string(name='pay_company_cert_no'),
  // 付款公司did
  payCompanyDid?: string(name='pay_company_did'),
  // 付款期限
  payDeadline?: string(name='pay_deadline'),
  // 收款客户
  receiptClient?: string(name='receipt_client'),
  // 收款客户企业信用号
  // 
  receiptClientCertNo?: string(name='receipt_client_cert_no'),
  // 收款客户did
  receiptClientDid?: string(name='receipt_client_did'),
  // 对应应收资费项code
  receiptTariffCodes?: [ string ](name='receipt_tariff_codes'),
  // 结算公司
  settleCompany?: string(name='settle_company'),
  // 结算公司企业信用号
  // 
  settleCompanyCertNo?: string(name='settle_company_cert_no'),
  // 结算公司did
  settleCompanyDid?: string(name='settle_company_did'),
  // 账单结算周期
  settleCycle?: string(name='settle_cycle'),
}

model CreateDigitalLogisticBillPaybillorderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证hash
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 创建应付账单
 * Summary: 创建应付账单(已下)
 */
async function createDigitalLogisticBillPaybillorder(request: CreateDigitalLogisticBillPaybillorderRequest): CreateDigitalLogisticBillPaybillorderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticBillPaybillorderEx(request, runtime);
}

/**
 * Description: 创建应付账单
 * Summary: 创建应付账单(已下)
 */
async function createDigitalLogisticBillPaybillorderEx(request: CreateDigitalLogisticBillPaybillorderRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticBillPaybillorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.paybillorder.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticBillReceiptbillorderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 实际收款结算公司
  actualSettleCompany?: string(name='actual_settle_company'),
  // 实际收款结算公司企业信用号
  actualSettleCompanyCertNo?: string(name='actual_settle_company_cert_no'),
  // 实际收款结算公司did
  actualSettleCompanyDid?: string(name='actual_settle_company_did'),
  // 确认时间  业务必填
  applyDate?: long(name='apply_date'),
  // 揽货类型
  clientType?: string(name='client_type'),
  // 币种 业务必填
  currency?: string(name='currency'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 开票抬头
  invoiceTitle?: string(name='invoice_title'),
  // 含税价
  priceIncludingTax?: string(name='price_including_tax'),
  // 收款账号
  receiptAccount?: string(name='receipt_account'),
  // 收款总额 业务必填
  receiptAmount?: string(name='receipt_amount'),
  // 收款账单编号
  receiptBillOrderCode?: string(name='receipt_bill_order_code'),
  // 应收资费项账单 业务必填
  receiptBillTariffParams?: [ ReceiptBillTariffParam ](name='receipt_bill_tariff_params'),
  // 结算客户名称
  settleClient?: string(name='settle_client'),
  // 结算客户企业信用号
  settleClientCertNo?: string(name='settle_client_cert_no'),
  // 结算客户名称did
  settleClientDid?: string(name='settle_client_did'),
  // 结算公司
  settleCompany?: string(name='settle_company'),
  // 结算公司企业信用号
  settleCompanyCertNo?: string(name='settle_company_cert_no'),
  // 结算公司did
  settleCompanyDid?: string(name='settle_company_did'),
  // 账单结算周期
  settleCycle?: string(name='settle_cycle'),
  // 税金
  taxes?: string(name='taxes'),
  // 未税价
  untaxedPrice?: string(name='untaxed_price'),
}

model CreateDigitalLogisticBillReceiptbillorderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 创建应收账单
 * Summary: 创建应收账单(已下)
 */
async function createDigitalLogisticBillReceiptbillorder(request: CreateDigitalLogisticBillReceiptbillorderRequest): CreateDigitalLogisticBillReceiptbillorderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticBillReceiptbillorderEx(request, runtime);
}

/**
 * Description: 创建应收账单
 * Summary: 创建应收账单(已下)
 */
async function createDigitalLogisticBillReceiptbillorderEx(request: CreateDigitalLogisticBillReceiptbillorderRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticBillReceiptbillorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.receiptbillorder.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticBillPaybilltariffRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 计费数量 业务必填
  billingNumber?: string(name='billing_number'),
  // 计费类型 业务必填
  billingType?: string(name='billing_type'),
  // 航运订舱号[业务必填]
  bkgNo?: string(name='bkg_no'),
  // 订舱单号[业务必填]
  bookingNo?: string(name='booking_no'),
  // 币种 业务必填
  currency?: string(name='currency'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 收支  INCOME--收入， EXPENSES--支出
  // 业务必填
  incomeOrExpenses?: string(name='income_or_expenses'),
  // 电子发票网址
  invoiceUrl?: string(name='invoice_url'),
  // 工作单号 业务必填
  orderNo?: string(name='order_no'),
  // 资费单据编号
  payTariffCode?: string(name='pay_tariff_code'),
  // 资费项中文描述 业务必填
  payTariffDesc?: string(name='pay_tariff_desc'),
  // 资费项目 业务必填
  payTariffProject?: string(name='pay_tariff_project'),
  // 含税价 业务必填
  priceIncludingTax?: string(name='price_including_tax'),
  // 结算客户名称
  settleClient?: string(name='settle_client'),
  // 结算客户企业信用号
  settleClientCertNo?: string(name='settle_client_cert_no'),
  // 结算客户did
  settleClientDid?: string(name='settle_client_did'),
  // 税金
  taxes?: string(name='taxes'),
  // 未税价 业务必填
  untaxedPrice?: string(name='untaxed_price'),
}

model SaveDigitalLogisticBillPaybilltariffResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存应付资费项
 * Summary: 保存应付资费项
 */
async function saveDigitalLogisticBillPaybilltariff(request: SaveDigitalLogisticBillPaybilltariffRequest): SaveDigitalLogisticBillPaybilltariffResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticBillPaybilltariffEx(request, runtime);
}

/**
 * Description: 保存应付资费项
 * Summary: 保存应付资费项
 */
async function saveDigitalLogisticBillPaybilltariffEx(request: SaveDigitalLogisticBillPaybilltariffRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticBillPaybilltariffResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.paybilltariff.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticBillReceiptbilltariffRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 计费数量  业务必填
  billingNumber?: string(name='billing_number'),
  // 计费类型 业务必填
  billingType?: string(name='billing_type'),
  // 航运订舱号[业务必填]
  bkgNo?: string(name='bkg_no'),
  // 订舱单号[业务必填]
  bookingNo?: string(name='booking_no'),
  // 币种 [业务必填]
  currency?: string(name='currency'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 收支  INCOME--收入， EXPENSES--支出
  // 业务必填
  incomeOrExpenses?: string(name='income_or_expenses'),
  // 电子发票网址
  invoiceUrl?: string(name='invoice_url'),
  // 工作单号 业务必填
  orderNo?: string(name='order_no'),
  // 含税价 业务必填
  priceIncludingTax?: string(name='price_including_tax'),
  // 资费单据编号
  receiptTariffCode?: string(name='receipt_tariff_code'),
  // 中文描述 业务必填
  receiptTariffDesc?: string(name='receipt_tariff_desc'),
  // 资费项目 业务必填
  receiptTariffProject?: string(name='receipt_tariff_project'),
  // 结算客户名称
  settleClient?: string(name='settle_client'),
  // 结算客户企业信用号
  settleClientCertNo?: string(name='settle_client_cert_no'),
  // 结算客户did
  settleClientDid?: string(name='settle_client_did'),
  // 税金
  taxes?: string(name='taxes'),
  // 未税价 业务必填
  untaxedPrice?: string(name='untaxed_price'),
}

model SaveDigitalLogisticBillReceiptbilltariffResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存应收资费项
 * Summary: 保存应收资费项
 */
async function saveDigitalLogisticBillReceiptbilltariff(request: SaveDigitalLogisticBillReceiptbilltariffRequest): SaveDigitalLogisticBillReceiptbilltariffResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticBillReceiptbilltariffEx(request, runtime);
}

/**
 * Description: 保存应收资费项
 * Summary: 保存应收资费项
 */
async function saveDigitalLogisticBillReceiptbilltariffEx(request: SaveDigitalLogisticBillReceiptbilltariffRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticBillReceiptbilltariffResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.receiptbilltariff.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model VerifyDigitalLogisticBillPaybillRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 应付资费项编号
  payTariffCode?: string(name='pay_tariff_code'),
  // 核销金额 业务必填
  verifyAmount?: string(name='verify_amount'),
  // 核销应付资费项编号
  verifyPayTariffCode?: string(name='verify_pay_tariff_code'),
  // 核销状态 WAIT_VERIFY-待核销，PART_VERIFY-部分核销，COMPLETE_VERIFY-完成核销 
  // 业务必填
  verifyStatus?: string(name='verify_status'),
}

model VerifyDigitalLogisticBillPaybillResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 核销应付资费项
 * Summary: 核销应付资费项
 */
async function verifyDigitalLogisticBillPaybill(request: VerifyDigitalLogisticBillPaybillRequest): VerifyDigitalLogisticBillPaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyDigitalLogisticBillPaybillEx(request, runtime);
}

/**
 * Description: 核销应付资费项
 * Summary: 核销应付资费项
 */
async function verifyDigitalLogisticBillPaybillEx(request: VerifyDigitalLogisticBillPaybillRequest, runtime: Util.RuntimeOptions): VerifyDigitalLogisticBillPaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.paybill.verify', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model VerifyDigitalLogisticBillReceiptbillorderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 应收资费项编号
  receiptTariffCode?: string(name='receipt_tariff_code'),
  // 核销金额 业务必填
  verifyAmount?: string(name='verify_amount'),
  // 核销应收资费项编号
  verifyReceiptTariffCode?: string(name='verify_receipt_tariff_code'),
  // 核销状态 WAIT_VERIFY-待核销，PART_VERIFY-部分核销，COMPLETE_VERIFY-完成核销 业务必填
  verifyStatus?: string(name='verify_status'),
}

model VerifyDigitalLogisticBillReceiptbillorderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 核销应收资费项
 * Summary: 核销应收资费项
 */
async function verifyDigitalLogisticBillReceiptbillorder(request: VerifyDigitalLogisticBillReceiptbillorderRequest): VerifyDigitalLogisticBillReceiptbillorderResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyDigitalLogisticBillReceiptbillorderEx(request, runtime);
}

/**
 * Description: 核销应收资费项
 * Summary: 核销应收资费项
 */
async function verifyDigitalLogisticBillReceiptbillorderEx(request: VerifyDigitalLogisticBillReceiptbillorderRequest, runtime: Util.RuntimeOptions): VerifyDigitalLogisticBillReceiptbillorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.receiptbillorder.verify', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UpdateDigitalLogisticBillPaybillorderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除	
  // 
  action?: string(name='action'),
  // 申请时间 毫秒值 业务必填
  applyDate?: long(name='apply_date'),
  // 银行收款账户
  bankReceiptAccount?: string(name='bank_receipt_account'),
  // 币种 业务必填
  currency?: string(name='currency'),
  // 开户行
  depositBank?: string(name='deposit_bank'),
  // 账单到期日
  expireDate?: long(name='expire_date'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 应付总额 业务必填
  payAmount?: string(name='pay_amount'),
  // 付款单编号
  payBillOrderCode?: string(name='pay_bill_order_code'),
  // 应付账单资费项 业务必填
  payBillTariffParams?: [ PayBillTariffParam ](name='pay_bill_tariff_params'),
  // 付款公司
  payCompany?: string(name='pay_company'),
  // 付款公司企业信用号
  payCompanyCertNo?: string(name='pay_company_cert_no'),
  // 付款公司did
  payCompanyDid?: string(name='pay_company_did'),
  // 付款期限
  payDeadline?: string(name='pay_deadline'),
  // 收款客户[业务必填]
  receiptClient?: string(name='receipt_client'),
  // 收款客户企业信用号[业务必填]
  receiptClientCertNo?: string(name='receipt_client_cert_no'),
  // 收款客户did[业务必填]
  receiptClientDid?: string(name='receipt_client_did'),
  // 对应应收资费项code
  receiptTariffCodes?: [ string ](name='receipt_tariff_codes'),
  // 结算公司
  settleCompany?: string(name='settle_company'),
  // 结算公司企业信用号
  settleCompanyCertNo?: string(name='settle_company_cert_no'),
  // 结算公司did
  settleCompanyDid?: string(name='settle_company_did'),
  // 账单结算周期
  settleCycle?: string(name='settle_cycle'),
  // 结算状态 ：  SETTLED(已结算) ,  UNSETTLE（未结算）[业务必填]
  settleStatus?: string(name='settle_status'),
}

model UpdateDigitalLogisticBillPaybillorderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 更新应付账单
 * Summary: 更新应付账单
 */
async function updateDigitalLogisticBillPaybillorder(request: UpdateDigitalLogisticBillPaybillorderRequest): UpdateDigitalLogisticBillPaybillorderResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDigitalLogisticBillPaybillorderEx(request, runtime);
}

/**
 * Description: 更新应付账单
 * Summary: 更新应付账单
 */
async function updateDigitalLogisticBillPaybillorderEx(request: UpdateDigitalLogisticBillPaybillorderRequest, runtime: Util.RuntimeOptions): UpdateDigitalLogisticBillPaybillorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.paybillorder.update', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UpdateDigitalLogisticBillReceiptbillorderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除	
  action?: string(name='action'),
  // 实际收款结算公司
  actualSettleCompany?: string(name='actual_settle_company'),
  // 实际收款结算公司企业信用号
  actualSettleCompanyCertNo?: string(name='actual_settle_company_cert_no'),
  // 实际收款结算公司did
  actualSettleCompanyDid?: string(name='actual_settle_company_did'),
  // 确认时间
  applyDate?: long(name='apply_date'),
  // 揽货类型
  clientType?: string(name='client_type'),
  // 币种
  currency?: string(name='currency'),
  // 账单到期日
  expireDate?: long(name='expire_date'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 开票抬头
  invoiceTitle?: string(name='invoice_title'),
  // 含税价
  priceIncludingTax?: string(name='price_including_tax'),
  // 收款账号
  receiptAccount?: string(name='receipt_account'),
  // 收款总额
  receiptAmount?: string(name='receipt_amount'),
  // 收款账单编号
  receiptBillOrderCode?: string(name='receipt_bill_order_code'),
  // 应收资费项账单 业务必填
  receiptBillTariffParams?: [ ReceiptBillTariffParam ](name='receipt_bill_tariff_params'),
  // 结算客户名称
  settleClient?: string(name='settle_client'),
  // 结算客户名称企业信用号
  settleClientCertNo?: string(name='settle_client_cert_no'),
  // 结算客户did
  settleClientDid?: string(name='settle_client_did'),
  // 结算公司 [业务必填]
  settleCompany?: string(name='settle_company'),
  // 结算公司企业信用号[业务必填]
  settleCompanyCertNo?: string(name='settle_company_cert_no'),
  // 结算公司did[业务必填]
  settleCompanyDid?: string(name='settle_company_did'),
  // 账单结算周期
  settleCycle?: string(name='settle_cycle'),
  // SETTLED(已结算) UNSETTLE（未结算）[业务必填]
  settleStatus?: string(name='settle_status'),
  // 税金
  taxes?: string(name='taxes'),
  // 未税价
  untaxedPrice?: string(name='untaxed_price'),
}

model UpdateDigitalLogisticBillReceiptbillorderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 更新应收账单
 * Summary: 更新应收账单
 */
async function updateDigitalLogisticBillReceiptbillorder(request: UpdateDigitalLogisticBillReceiptbillorderRequest): UpdateDigitalLogisticBillReceiptbillorderResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDigitalLogisticBillReceiptbillorderEx(request, runtime);
}

/**
 * Description: 更新应收账单
 * Summary: 更新应收账单
 */
async function updateDigitalLogisticBillReceiptbillorderEx(request: UpdateDigitalLogisticBillReceiptbillorderRequest, runtime: Util.RuntimeOptions): UpdateDigitalLogisticBillReceiptbillorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.receiptbillorder.update', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticBillPayinvoiceRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 总金额 业务必填
  amount?: string(name='amount'),
  // 校验码后六位
  checkCode?: string(name='check_code'),
  // 币种 CNY/USD [业务必填]
  currency?: string(name='currency'),
  // 美元金额
  dollarAmount?: string(name='dollar_amount'),
  // 开票方名称  业务必填
  drawerName?: string(name='drawer_name'),
  // 开票纳税人识别号 业务必填
  drawerTaxpayerCode?: string(name='drawer_taxpayer_code'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 发票唯一标识
  invoiceCode?: string(name='invoice_code'),
  // 发票抬头did[业务必填]
  invoiceHeaderDid?: string(name='invoice_header_did'),
  // 发票抬头企业名称[业务必填]
  invoiceHeaderName?: string(name='invoice_header_name'),
  // 发票抬头企业信用代码[业务必填]
  invoiceHeaderSocialNo?: string(name='invoice_header_social_no'),
  // 发票号码 业务必填
  invoiceNumber?: string(name='invoice_number'),
  // 发票税务号
  invoiceTaxCode?: string(name='invoice_tax_code'),
  // 开票类型 业务必填
  invoiceType?: string(name='invoice_type'),
  // 开票日期 业务必填
  makeInvoiceDate?: long(name='make_invoice_date'),
  // 账单关联项目
  payBillInvoiceParams?: [ PayBillInvoiceParam ](name='pay_bill_invoice_params'),
  // 资费项发票 业务必填
  payTariffInvoiceParams?: [ PayTariffInvoiceParam ](name='pay_tariff_invoice_params'),
  // 不含税金额 业务必填
  untaxedPrice?: string(name='untaxed_price'),
}

model SaveDigitalLogisticBillPayinvoiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存应付发票
 * Summary: 保存应付发票
 */
async function saveDigitalLogisticBillPayinvoice(request: SaveDigitalLogisticBillPayinvoiceRequest): SaveDigitalLogisticBillPayinvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticBillPayinvoiceEx(request, runtime);
}

/**
 * Description: 保存应付发票
 * Summary: 保存应付发票
 */
async function saveDigitalLogisticBillPayinvoiceEx(request: SaveDigitalLogisticBillPayinvoiceRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticBillPayinvoiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.payinvoice.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticBillReceiptinvoiceRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 总金额 业务必填
  amount?: string(name='amount'),
  // 校验码后六位
  checkCode?: string(name='check_code'),
  // 开票方名称 业务必填
  drawerName?: string(name='drawer_name'),
  // 开票纳税人识别号 业务必填
  drawerTaxpayerCode?: string(name='drawer_taxpayer_code'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 应收发票唯一标识
  invoiceCode?: string(name='invoice_code'),
  // 发票号码 业务必填
  invoiceNumber?: string(name='invoice_number'),
  // 开票类型 业务必填
  invoiceType?: string(name='invoice_type'),
  // 开票日期 毫秒值 业务必填
  makeInvoiceDate?: long(name='make_invoice_date'),
  // 资费项发票 业务必填
  receiptTariffInvoiceParams?: [ ReceiptTariffInvoiceParam ](name='receipt_tariff_invoice_params'),
  // 不含税金额 业务必填
  untaxedPrice?: string(name='untaxed_price'),
  // 发票税务号
  invoiceTaxCode?: string(name='invoice_tax_code'),
}

model SaveDigitalLogisticBillReceiptinvoiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存应收发票
 * Summary: 保存应收发票
 */
async function saveDigitalLogisticBillReceiptinvoice(request: SaveDigitalLogisticBillReceiptinvoiceRequest): SaveDigitalLogisticBillReceiptinvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticBillReceiptinvoiceEx(request, runtime);
}

/**
 * Description: 保存应收发票
 * Summary: 保存应收发票
 */
async function saveDigitalLogisticBillReceiptinvoiceEx(request: SaveDigitalLogisticBillReceiptinvoiceRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticBillReceiptinvoiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.receiptinvoice.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UploadDigitalLogisticBizFinancingRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 融资数据
  financingData?: [ UploadFinancingParam ](name='financing_data'),
}

model UploadDigitalLogisticBizFinancingResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 上链hash
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 上传历史数据
 * Summary: 上传历史数据
 */
async function uploadDigitalLogisticBizFinancing(request: UploadDigitalLogisticBizFinancingRequest): UploadDigitalLogisticBizFinancingResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDigitalLogisticBizFinancingEx(request, runtime);
}

/**
 * Description: 上传历史数据
 * Summary: 上传历史数据
 */
async function uploadDigitalLogisticBizFinancingEx(request: UploadDigitalLogisticBizFinancingRequest, runtime: Util.RuntimeOptions): UploadDigitalLogisticBizFinancingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.financing.upload', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UploadDigitalLogisticBizOrderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 船公司did
  carrierDid?: string(name='carrier_did'),
  // 尾款金额
  deadlineAmount?: string(name='deadline_amount'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 订单总额
  orderAmounts?: [ UploadOrderAmount ](name='order_amounts'),
  // 订单booking信息
  orderBookings?: [ UploadOrderBooking ](name='order_bookings'),
  // 订单号
  orderNo?: string(name='order_no'),
  // 结算did
  settleDid?: string(name='settle_did'),
}

model UploadDigitalLogisticBizOrderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 上链hash
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 上传订单
 * Summary: 上传订单
 */
async function uploadDigitalLogisticBizOrder(request: UploadDigitalLogisticBizOrderRequest): UploadDigitalLogisticBizOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDigitalLogisticBizOrderEx(request, runtime);
}

/**
 * Description: 上传订单
 * Summary: 上传订单
 */
async function uploadDigitalLogisticBizOrderEx(request: UploadDigitalLogisticBizOrderRequest, runtime: Util.RuntimeOptions): UploadDigitalLogisticBizOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.order.upload', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateDigitalLogisticDidCarrierRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 代理did
  agentDid?: string(name='agent_did'),
  // 企业名称
  epCertName?: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo?: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 法人姓名
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 法人身份证
  legalPersonCertNo?: string(name='legal_person_cert_no'),
  // 船公司编号
  scac?: string(name='scac'),
}

model CreateDigitalLogisticDidCarrierResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 船公司did
  did?: string(name='did'),
}

/**
 * Description: 创建船公司did账户
 * Summary: 创建船公司did账户
 */
async function createDigitalLogisticDidCarrier(request: CreateDigitalLogisticDidCarrierRequest): CreateDigitalLogisticDidCarrierResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDigitalLogisticDidCarrierEx(request, runtime);
}

/**
 * Description: 创建船公司did账户
 * Summary: 创建船公司did账户
 */
async function createDigitalLogisticDidCarrierEx(request: CreateDigitalLogisticDidCarrierRequest, runtime: Util.RuntimeOptions): CreateDigitalLogisticDidCarrierResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.did.carrier.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model AuthDigitalLogisticSysForwarderRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 客户端id
  clientId?: string(name='client_id'),
  // 密钥
  clientSecret?: string(name='client_secret'),
  // 货代did
  intRefId?: string(name='int_ref_id'),
  // For HOME application internal
  tenantId?: string(name='tenant_id'),
  // 渠道source
  source?: string(name='source'),
}

model AuthDigitalLogisticSysForwarderResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 推送结果
  result?: boolean(name='result'),
}

/**
 * Description:  货代授权
 * Summary:  货代授权
 */
async function authDigitalLogisticSysForwarder(request: AuthDigitalLogisticSysForwarderRequest): AuthDigitalLogisticSysForwarderResponse {
  var runtime = new Util.RuntimeOptions{};
  return authDigitalLogisticSysForwarderEx(request, runtime);
}

/**
 * Description:  货代授权
 * Summary:  货代授权
 */
async function authDigitalLogisticSysForwarderEx(request: AuthDigitalLogisticSysForwarderRequest, runtime: Util.RuntimeOptions): AuthDigitalLogisticSysForwarderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.sys.forwarder.auth', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model QueryDigitalLogisticBizMasterblRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // master提单号
  masterBlNo?: string(name='master_bl_no'),
}

model QueryDigitalLogisticBizMasterblResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 船公司
  carrier?: string(name='carrier'),
  // 收货人
  consignee?: string(name='consignee'),
  // 目的地
  deliveryPlace?: string(name='delivery_place'),
  // 卸货港
  dischargePort?: string(name='discharge_port'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 运费
  freight?: string(name='freight'),
  // 提单货物数据列表
  goodsDtos?: [ MasterBlGoodsDto ](name='goods_dtos'),
  // 起运港
  loadingPort?: string(name='loading_port'),
  // master提单号
  masterBlNo?: string(name='master_bl_no'),
  // 通知方
  notifyParty?: string(name='notify_party'),
  // 前程运输
  prCarriage?: string(name='pr_carriage'),
  // 发货人
  shipper?: string(name='shipper'),
  // 航名
  vessel?: string(name='vessel'),
  // 航次
  voyage?: string(name='voyage'),
}

/**
 * Description: master提单信息查询
 * Summary: master提单信息查询
 */
async function queryDigitalLogisticBizMasterbl(request: QueryDigitalLogisticBizMasterblRequest): QueryDigitalLogisticBizMasterblResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDigitalLogisticBizMasterblEx(request, runtime);
}

/**
 * Description: master提单信息查询
 * Summary: master提单信息查询
 */
async function queryDigitalLogisticBizMasterblEx(request: QueryDigitalLogisticBizMasterblRequest, runtime: Util.RuntimeOptions): QueryDigitalLogisticBizMasterblResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.masterbl.query', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model SaveDigitalLogisticBizPayinvoicefileRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除，INSERT为新增
  action?: string(name='action'),
  // 发票文件hash [业务必填]
  fileHash?: string(name='file_hash'),
  // 发票文件ID [业务必填]
  fileId?: string(name='file_id'),
  // 货代DID
  forwarderDid?: string(name='forwarder_did'),
  // 应付发票code
  invoiceCode?: string(name='invoice_code'),
}

model SaveDigitalLogisticBizPayinvoicefileResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 应付发票文件上传接口
 * Summary: 应付发票文件上传接口
 */
async function saveDigitalLogisticBizPayinvoicefile(request: SaveDigitalLogisticBizPayinvoicefileRequest): SaveDigitalLogisticBizPayinvoicefileResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDigitalLogisticBizPayinvoicefileEx(request, runtime);
}

/**
 * Description: 应付发票文件上传接口
 * Summary: 应付发票文件上传接口
 */
async function saveDigitalLogisticBizPayinvoicefileEx(request: SaveDigitalLogisticBizPayinvoicefileRequest, runtime: Util.RuntimeOptions): SaveDigitalLogisticBizPayinvoicefileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.payinvoicefile.save', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UploadDigitalLogisticShippingEblRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 船公司名称
  carrierName?: string(name='carrier_name'),
  // 收货人did
  consigneeDid?: string(name='consignee_did'),
  // 电子提单类型
  eblCategory?: string(name='ebl_category'),
  // 电子提单copy文件hash
  eblCopyPdfFileHash?: string(name='ebl_copy_pdf_file_hash'),
  // copy电子提单pdf文件id
  eblCopyPdfFileId?: string(name='ebl_copy_pdf_file_id'),
  // 电子提单编号
  eblNo?: string(name='ebl_no'),
  // 电子甜的原文件hash
  eblOriginalPdfFileHash?: string(name='ebl_original_pdf_file_hash'),
  // 原电子提单pdf文件id
  eblOriginalPdfFileId?: string(name='ebl_original_pdf_file_id'),
  // 议付行did
  negotiatingBankDid?: string(name='negotiating_bank_did'),
  // 托运人did
  shipperDid?: string(name='shipper_did'),
}

model UploadDigitalLogisticShippingEblResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 上传电子提单
 * Summary: 上传电子提单
 */
async function uploadDigitalLogisticShippingEbl(request: UploadDigitalLogisticShippingEblRequest): UploadDigitalLogisticShippingEblResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDigitalLogisticShippingEblEx(request, runtime);
}

/**
 * Description: 上传电子提单
 * Summary: 上传电子提单
 */
async function uploadDigitalLogisticShippingEblEx(request: UploadDigitalLogisticShippingEblRequest, runtime: Util.RuntimeOptions): UploadDigitalLogisticShippingEblResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.shipping.ebl.upload', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UploadDigitalLogisticShippingEblbatchRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 代理人did
  agentDid?: string(name='agent_did'),
  // 是否为代理操作
  agentFlag?: boolean(name='agent_flag'),
  // 格式：carrierName_yyyyMMddHHmmss_5位随机数字；全局唯一
  batchNo?: string(name='batch_no'),
  // 船公司名称
  carrierName?: string(name='carrier_name'),
  // 收货人did
  consigneeDid?: string(name='consignee_did'),
  // 电子提单类型
  eblCategory?: string(name='ebl_category'),
  // 批次下的提单明细
  // 
  // 
  eblDetails?: [ EblDetail ](name='ebl_details'),
  // 议付行did
  negotiatingBankDid?: string(name='negotiating_bank_did'),
  // 托运人did
  shipperDid?: string(name='shipper_did'),
}

model UploadDigitalLogisticShippingEblbatchResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 电子提单批次上传，一个I批次下传递多个提单
 * Summary: 电子提单批次上传
 */
async function uploadDigitalLogisticShippingEblbatch(request: UploadDigitalLogisticShippingEblbatchRequest): UploadDigitalLogisticShippingEblbatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDigitalLogisticShippingEblbatchEx(request, runtime);
}

/**
 * Description: 电子提单批次上传，一个I批次下传递多个提单
 * Summary: 电子提单批次上传
 */
async function uploadDigitalLogisticShippingEblbatchEx(request: UploadDigitalLogisticShippingEblbatchRequest, runtime: Util.RuntimeOptions): UploadDigitalLogisticShippingEblbatchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.shipping.eblbatch.upload', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model UpdateDigitalLogisticShippingEblbatchstatusRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // 电子提单批次号
  batchNo?: string(name='batch_no'),
  // 批次下的提单状态变更明细
  eblStatusDetails?: [ EblStatusDetail ](name='ebl_status_details'),
}

model UpdateDigitalLogisticShippingEblbatchstatusResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 感知收货人提单状态的变更
 * Summary: 电子提单批次状态变更
 */
async function updateDigitalLogisticShippingEblbatchstatus(request: UpdateDigitalLogisticShippingEblbatchstatusRequest): UpdateDigitalLogisticShippingEblbatchstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDigitalLogisticShippingEblbatchstatusEx(request, runtime);
}

/**
 * Description: 感知收货人提单状态的变更
 * Summary: 电子提单批次状态变更
 */
async function updateDigitalLogisticShippingEblbatchstatusEx(request: UpdateDigitalLogisticShippingEblbatchstatusRequest, runtime: Util.RuntimeOptions): UpdateDigitalLogisticShippingEblbatchstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.shipping.eblbatchstatus.update', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

