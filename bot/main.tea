import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.6.49',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// ProductKey信息
model ProductKeyModel {
  // 主键id
  id: long(name='id', example='1'),
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 设备端ProductKey
  productKey: string(name='product_key', example='DEV-0101'),
  // 场景码
  scene: string(name='scene', example='testScene'),
  // 租户Id 
  tenantName: string(name='tenant_name', example='testTenant'),
  // 数据模型id 
  dataModelId: string(name='data_model_id', example='model_001'),
  // sdk前缀
  sdkVersionPrefix: string(name='sdk_version_prefix', example='sdk_'),
  // 制造商
  manufacturer?: string(name='manufacturer', example='alibaba'),
  // 顾客
  customer?: string(name='customer', example='alipay'),
}

// 租户信息
model PermissionedTenantModel {
  // 主键Id
  id: long(name='id', example='1'),
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10 10:10:00'),
  // 修改时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10 10:10:00'),
  // 租户名称
  tenantName: string(name='tenant_name', example='testTenant'),
  // 公司名称
  orgName: string(name='org_name', example='alipay'),
  // 租户所有人标识
  owner?: string(name='owner', example='alipay'),
  // 网关私钥
  gatewayPrivateKey?: string(name='gateway_private_key', example='MEUCIDxNw...'),
  // 网关公钥
  gatewayPublicKey?: string(name='gateway_public_key', example='MEUCID...'),
}

// 告警策略
model AlertStrategy {
  // 主键ID 
  id: long(name='id', example='1'),
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 租户
  tenantName: string(name='tenant_name', example='alipay'),
  // 场景码
  // 
  scene?: string(name='scene', example='alipay-0101'),
  // 策略类型：DEBUG（技术联调）；MONITOR（生产监控）
  strategyType: string(name='strategy_type', example='MONITOR'),
  // 策略详情，json格式
  strategyDetail: string(name='strategy_detail', example='[{  "alert_method": "DING_TALK",   "addresses": "",  "alert_strategy": "",   "params": {     "fail_days" : 10   } }, {  "alert_method": "EMAIL",   "addresses": "",  "alert_strategy": "",  "params": {       } }]'),
  // 是否启用，默认false
  enabled: boolean(name='enabled', example='true, false'),
  // 备注
  remark?: string(name='remark', example='这是一条测试数据'),
}

// sdk信息
model SdkModel {
  // 主键id
  id: long(name='id', example='1'),
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 修改时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 设备SDK公钥
  verifyKey: string(name='verify_key', example='MEUCIDxNwV7tXGlZ9VW19p...'),
  // SDK版本号
  sdkVersionStr?: string(name='sdk_version_str', example='mqV1.0'),
  // sdk模型
  metaModel?: string(name='meta_model', example='{"version":"1.0.0"}'),
  // 平台
  platform?: string(name='platform', example='windows'),
  // 公司名称
  corpName?: string(name='corp_name', example='alipay'),
}

// 场景码信息
model SceneModel {
  // 主键id
  id: long(name='id', example='1'),
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 修改时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 场景名
  sceneName: string(name='scene_name', example='testScene'),
  // 是否托管
  escrowed?: string(name='escrowed', example='ESCROWED'),
  // 私钥密码
  privateKeyPassword?: string(name='private_key_password', example='MEUCI..'),
  // 租户
  tenantName?: string(name='tenant_name', example='testTenant'),
  // 场景类型
  sceneType?: string(name='scene_type', example='共享单车'),
  // 是否跳过中台数据校验处理
  skipPegasus?: boolean(name='skip_pegasus', example='true, false'),
  // 定制数据处理类 , 使用用逗号分隔
  customerProcessor?: string(name='customer_processor', example='XXX_GPS_PROCESSOR'),
}

// 数据校验失败返回体
model DataVerifyFailureData {
  // 主键id 
  id: long(name='id', example='1'),
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // Alipay-0101
  scene: string(name='scene', example='场景码'),
  // 设备ID 
  deviceId?: string(name='device_id', example='device_id_001'),
  // 发行设备ID 
  disDeviceId?: string(name='dis_device_id', example='00202009111700539276'),
  // 类型：0:数据上报;1:数据完整性校验
  type: long(name='type', example='0'),
  // c89b65a2e3afd604977c0....
  publicKey?: string(name='public_key', example='公钥'),
  // 验签类型：0(RAW_DATA)；1(公钥格式为PEM)；2(公钥格式为DER)
  formatType?: long(name='format_type', example='0'),
  // 验证内容hash
  contentId?: string(name='content_id', example='aa5304221185b370ea84d...'),
  // 验证内容
  content?: string(name='content', example='{"content":"demo",...}'),
  // 签名
  signature?: string(name='signature', example='9b47e12b0ddb8df...'),
  // 错误信息
  failMessage?: string(name='fail_message', example='数据验真失败'),
  // 补充数据
  extraData?: string(name='extra_data', example='{“DEVICE-ID”:"DEMO-001"}'),
  // 数据来源：0(普通数据上报)；1(MAAS数据上报)；2(设备业务数据上报);3(标签流转)
  source?: long(name='source', example='0'),
}

// 原始数据包
model RawData {
  // 链上设备id
  chainDeviceId?: string(name='chain_device_id', example='1122'),
  // 数据内容
  content: string(name='content', example='{"a","11"}'),
  // 设备id
  deviceId?: string(name='device_id', example='433'),
  // 上链哈希
  txHash: string(name='tx_hash', example='5533'),
  // 上链时间
  txTime: long(name='tx_time', example=''),
  // 链上外围设备ID
  chainPeripheralId?: string(name='chain_peripheral_id', example='123123'),
  // 外围设备ID
  peripheralId?: string(name='peripheral_id', example='123123'),
}

// GoodsIdAndCount
model GoodsIdAndCount {
  // 商品id
  goodsSkuId: long(name='goods_sku_id', example='23123131'),
  // 商品采购数量
  count: long(name='count', example='100'),
}

// ProductKey分页查询结果
model ProductKeyPageResponse {
  // 页数
  // 
  pageIndex: long(name='page_index', example='1'),
  // 页码
  // 
  pageSize: long(name='page_size', example='10'),
  // 总记录数
  // 
  totalSize: long(name='total_size', example='100'),
  // 总页数
  // 
  totalPages: long(name='total_pages', example='10'),
  // 数据
  pageData: [ ProductKeyModel ](name='page_data', example='{...}'),
}

// 发行设备
model DistributeDevice {
  // 链上设备Id  （deviceType=DEVICE 时有值)
  chainDeviceId?: string(name='chain_device_id', example='4533'),
  // 设备id
  deviceId: string(name='device_id', example='1122'),
  // 发行设备Id
  distributeDeviceId: string(name='distribute_device_id', example='4455'),
  // 场景码
  scene: string(name='scene', example='SCENE'),
  // 设备类型 DEVICE : 设备 、PERIPHERAL : 外围设备
  deviceType: string(name='device_type', example='PERIPHERAL'),
  // 链上外围设备Id（deviceType=PERIPHERAL 时有值)
  chainPeripheralId?: string(name='chain_peripheral_id', example='123123'),
  // 设备状态，取值范围：NORMAL、OFFLINE、UNREGISTER
  deviceStatus?: string(name='device_status', example='NORMAL'),
}

// 空间实体身份附加参数请求结构体，应用在注册/更新API的ThingExtraParams
model SpaceRegisterReqModel {
  // 面积 平方米单位*1e4	
  area?: long(name='area', example='10000'),
  // 自定义业务类型，例如选择：危险品/非危险品/食品
  bizType?: string(name='biz_type', example='"biz_type"'),
  // 海拔 米单位*1e2
  elevation?: long(name='elevation', example='0'),
  // 高度 米单位*1e2	
  height?: long(name='height', example='123'),
  // 纬度 度数单位*1e9	
  latitude?: long(name='latitude', example='0'),
  // 经度 度数单位*1e9	
  longitude?: long(name='longitude', example='35000000000'),
  // 自定义其他字段
  otherInfo?: string(name='other_info', example='"自定义"'),
  // 父类型，在业务中自定义关联，例如仓位的父节点是仓库
  parentDid?: string(name='parent_did', example='“did:iot:xxxx”'),
  // 可填入符合w3c did定义的服务节点
  serviceEndpoint?: string(name='service_endpoint', example='"xxxx"'),
  // 空间状态，自定义	
  status?: string(name='status', example='"IN_USE"'),
  // 空间类型，例如冷藏/冷冻/通道/平面/立体	
  type?: string(name='type', example='“平面“'),
}

// TSM CommonCmd
model TsmCommonCmd {
  // private byte cla;
  cla: long(name='cla', example='00'),
  //  host challenge data.
  data: [ long ](name='data', example='[0,0]'),
  // private byte ins;
  ins: long(name='ins', example='00'),
  //  private byte lc;
  lc: long(name='lc', example='lc'),
  // private byte le = (byte) 0x00;
  le?: long(name='le', example='0'),
  // private Boolean needSecurityHandle = Boolean.TRUE;
  needSecurityHandle?: boolean(name='need_security_handle', example='true, false'),
  // private byte p1;
  p1: long(name='p1', example='00'),
  // private byte p2 = (byte) 0x00;
  p2: long(name='p2', example='00'),
}

// 更新设备和空间关联请求结构体
model UpdateDeviceSpaceReq {
  // API要更新的设备DID
  deviceDid: string(name='device_did', example='"did:iot:xxxxx"'),
  // 0-全部更新 (暂不支持)
  // 1-添加  
  // 2-删除
  // 
  updateMode: long(name='update_mode', example='1'),
  // API要更新的设备部署库位
  deviceSpace: [ string ](name='device_space', example='["did:iot:xxxx","did:iot:xxxxx"]'),
}

// 发行数据包
model DistributeDataPackage {
  // 原始数据
  dataList: [ RawData ](name='data_list', example=''),
  // 发行设备Id
  distributeDeviceId: string(name='distribute_device_id', example='244'),
  // 打包时间
  packageTime: long(name='package_time', example=''),
}

// 标签流转历史
model LabelTrace {
  // 操作内容
  content?: string(name='content', example='XXXXX'),
  // 链上哈希
  txHash: string(name='tx_hash', example='XXXXX'),
  // 上链时间
  txTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='tx_time', example='XXXXX'),
  // 上链失败的错误码
  errorCode?: string(name='error_code', example='XXXXX'),
  // 上链失败的错误信息
  errorMsg?: string(name='error_msg', example='XXXXX'),
  // 是否上链成功
  isSuccess?: boolean(name='is_success', example='true, false'),
  // 标签对应资产版本号
  version?: long(name='version', example='1'),
}

// 数据校验失败分页查询结果
model DataVerifyFailureDataPageResponse {
  // 页数
  // 
  pageIndex: long(name='page_index', example='1'),
  // 页码
  // 
  pageSize: long(name='page_size', example='10'),
  // 总记录数
  // 
  totalSize: long(name='total_size', example='100'),
  // 总页数
  // 
  totalPages: long(name='total_pages', example='10'),
  // 数据
  pageData: [ DataVerifyFailureData ](name='page_data', example='{...}'),
}

// 数据模型
model DataModel {
  //  数据模型Id
  dataModelId: string(name='data_model_id', example='112233'),
  // 数据模型名称
  dataModelName?: string(name='data_model_name', example='检测设备模型'),
  // 数据模型
  dataModel: string(name='data_model', example='{          "PIC-URL": {                 "type": "string",                 "require":false              } }'),
  // 数据模型类别
  bizType?: string(name='biz_type', example='ORDER'),
  // 用户自定义版本
  customerVersion?: string(name='customer_version', example='V1.0'),
}

// 收集标签数据（元数据，无签名）
model CollectLabelRawContent {
  // 1.设备端上报数据内容 2.与设备上报的数据一致，服务端不可修改 3.解析后需与DataModel匹配 4.映射 Label 对象结构化存储 5.转为JSON后如果是JSONObject 映射单个 Label 6.转为JSON后如果是JSONArray 映射多个 Label
  content: string(name='content', example='XXXXX'),
  // 数据模型ID 
  dataModelId: string(name='data_model_id', example='001202103171566166669'),
}

// 告警策略分页查询结果
model AlertStrategyPageResponse {
  // 页数
  // 
  pageIndex: long(name='page_index', example='1'),
  // 页码
  // 
  pageSize: long(name='page_size', example='10'),
  // 总记录数
  // 
  totalSize: long(name='total_size', example='100'),
  // 总页数
  // 
  totalPages: long(name='total_pages', example='10'),
  // 数据
  pageData: [ AlertStrategy ](name='page_data', example='{...}'),
}

// 设备业务数据
model BizContentGroup {
  // 设备链上Id
  // 
  // 
  chainDeviceId?: string(name='chain_device_id', example='txhash123'),
  // 业务Id
  // 
  // 
  bizId: string(name='biz_id', example='123123'),
  // 业务类型
  // 
  // 
  bizType: string(name='biz_type', example='123123'),
  // 数据内容 JSON字符串
  // 
  // 
  content: string(name='content', example='{"":"",""}'),
}

// 实体身份更新请求结构体，设备/仓库/空间/组织
model ThingsDidUpdateReq {
  // 业务类型，默认空
  bizType?: string(name='biz_type', example='null'),
  // 待更新的实体did
  thingDid: string(name='thing_did', example='"did:iot:xxxxx"'),
  // 更新内容，参考更新请求不同实体类型结构体，对应不同实体类型不一样
  // 信物链实体附加信息 不同实体身份，有不同的json组织格式，
  // 参考 DeviceRegisterReqModel， SpaceRegisterReqModel， CorporateReqModel， WarehouseReqModel，
  thingExtraParams?: string(name='thing_extra_params', example='参考结构体'),
  // 更新后的实体版本
  thingVersion: string(name='thing_version', example='"1.0.1"'),
}

// 具备实体权限访问者更新请求
model DidUpdateTenantReq {
  // 待更新实体身份did
  thingDid: string(name='thing_did', example='"did:iot_xxxxx"'),
  // 待更新访问者列表
  tenantList: [ string ](name='tenant_list', example='["",""]'),
  // 权限角色
  // TENANT_ROLE_OWNER
  // TENANT_ROLE_USER
  // TENANT_ROLE_OBSERVER
  tenantRole: string(name='tenant_role', example='TENANT_ROLE_OWNER'),
  // 增加权限：THINGS_OP_MODE_ADD
  // 删除权限：THINGS_OP_MODE_REMOVE
  opMode: string(name='op_mode', example='THINGS_OP_MODE_ADD'),
}

// PurchaseOrderInfoDetail 
model PurchaseOrderInfoDetail {
  // 租赁订单号
  // 
  orderNumber: string(name='order_number', example='dadadasda'),
  // 收货人姓名
  // 
  consigneeName: string(name='consignee_name', example='立敢'),
  // 收货人身份证号
  consigneeIdNumber: string(name='consignee_id_number', example='424234324324234'),
  // 收货人手机号
  // 
  consigneePhone: string(name='consignee_phone', example='13400113344'),
  // 收货人地址
  consigneeAddress: string(name='consignee_address', example='北京市海淀区XXXXXXXX'),
  // 供货商名称
  // 
  supplierName: string(name='supplier_name', example='fsafsafaf'),
  // 供货商租户id
  // 
  supplierId: string(name='supplier_id', example='fsffafaf'),
  // 采购商id
  // 
  leaseId: string(name='lease_id', example='fafsafaf'),
  // 商品信息列表
  goodsIdAndCount: [ GoodsIdAndCount ](name='goods_id_and_count', example=''),
}

// 信物链存证查询请求结构体
model EvidenceQueryInfoReq {
  // 暂时保留
  deviceSignature?: string(name='device_signature', example='null'),
  // 暂时保留
  deviceUid?: string(name='device_uid', example='null'),
  // 不同上链方式
  // "CZ": 普通存证
  // "IOTPAY": 支付存证
  // "RAW": 文本上链
  // "TTTS": 溯源存证
  queryType: string(name='query_type', example='"CZ"'),
  // 查询的链上交易txHash
  txHash: string(name='tx_hash', example='"516e981c8b62c6ef08dc99b5f5165ab2a8592b5a116298788f95bbd45d0cc499"'),
}

// 手机型号信息
model PhoneInfo {
  // 颜色
  colour: string(name='colour', example='红色'),
  // 色值
  colourNumber: string(name='colour_number', example='#BA0F2F'),
  // 内存大小
  memory: string(name='memory', example='128GB'),
}

// 收集数据返回的上链结果
model SendCollectorResult {
  // 数据内容content的上链交易哈希
  txHash: string(name='tx_hash', example='2c952456827828cdedad06afccef75a9f2c2840cbb6b0b659f653da1e5916cb2'),
}

// 实体身份注册请求结构体
model ThingsDidRegisterReq {
  // 业务编码，暂时保留，不需传入
  bizType?: string(name='biz_type', example='null'),
  // 信物链实体的所有者的分布式身份
  ownerTenantDid?: string(name='owner_tenant_did', example='"did:mychain:xxxxx"'),
  // 信物链实体附加信息 不同实体身份，有不同的json组织格式...
  // 参考
  // DeviceRegisterReqModel，
  // SpaceRegisterReqModel，
  // CorporateReqModel，
  // WarehouseReqModel，
  // 
  thingExtraParams?: string(name='thing_extra_params', example='"附加信息"'),
  // 原始id，租户内同一类型实体唯一
  thingOriginId: string(name='thing_origin_id', example='"租户下唯一ID"'),
  // 实体原始名称
  thingOriginName: string(name='thing_origin_name', example='"摄像头a"'),
  // 信物链实体身份 
  // DID_TYPE_DEVICE_ALIYUN(0): 阿里云设备 
  // DID_TYPE_DEVICE_PEGASUS(1): 链机设备 
  // DID_TYPE_DEVICE_MCU(2): MCU设备 
  // DID_TYPE_DEVICE_INTEL(3): intel设备 
  // DID_TYPE_DEVICE_DEVICE(16384): 默认设备 ... 
  // DID_TYPE_CORPORATE(65536): 组织实体 
  // DID_TYPE_WAREHOUSE(131072)：仓库实体 
  // DID_TYPE_SPACE(196608)： 空间实体
  thingType: long(name='thing_type', example='0'),
  // 实体版本
  thingVersion: string(name='thing_version', example='"1.0.0"'),
  // 信物链实体的使用方的分布式身份列表
  userDid?: [ string ](name='user_did', example='["did:mychain:xxxx1","did:mychain:xxxx2"]'),
}

// 信物链证据基本组成结构体
model EvidenceBaseModel {
  // 业务数据
  bizData?: string(name='biz_data', example='[{"content":"{业务数据}","label":"CRYPTO","timestamp":0}]'),
  // 证据哈希值
  hash?: string(name='hash', example='"证据哈希值"'),
  // 证据附属信息字段
  metaJson?: string(name='meta_json', example='"证据附属信息"'),
}

// 设备类型
model Device {
  // 设备实体唯一Id
  deviceId: string(name='device_id', example='123ABC'),
  // 数据模型Id
  deviceDataModelId: string(name='device_data_model_id', example='112233'),
  // 场景码
  scene: string(name='scene', example='SCENE1'),
  // imei号
  deviceImei: string(name='device_imei', example='223344'),
  // 设备名称
  deviceName?: string(name='device_name', example='设备1号'),
  // 设备厂商名称
  corpName?: string(name='corp_name', example='浙江一厂'),
  // 设备ICCID
  // 
  // 
  deviceIccid?: string(name='device_iccid', example='a1234'),
  // 设备扩展信息
  extraInfo?: string(name='extra_info', example='{“”:""}'),
  // 设备链上Id
  chainDeviceId: string(name='chain_device_id', example='223344'),
  // 上链哈希
  txHash: string(name='tx_hash', example='3344'),
  // 上链时间
  txTime: long(name='tx_time', example='224455'),
  // 设备类型编码，必填，对应资管平台中的设备类型 
  // 
  // 枚举值：
  // 
  // 车辆 1000 
  // 车辆 四轮车 1001 
  // 车辆 四轮车 纯电四轮车 1002 
  // 车辆 四轮车 混动四轮车 1003 
  // 车辆 四轮车 燃油四轮车 1004 
  // 车辆 两轮车 1011 
  // 车辆 两轮车 两轮单车 1012 
  // 车辆 两轮车 两轮助力车 1013 
  // 
  // 换电柜 2000 
  // 换电柜 二轮车换电柜 2001 
  // 
  // 电池 3000 
  // 电池 磷酸铁电池 3001 
  // 电池 三元锂电池 3002 
  // 
  // 回收设备 4000 
  // 
  // 垃圾分类回收 4001 
  // 
  // 洗车机 5000
  deviceTypeCode: long(name='device_type_code', example='5000'),
  // 单价
  initialPrice: long(name='initial_price', example='1000'),
  // 投放时间
  releaseTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time', example='2018-10-10T10:10:00Z'),
  // 出厂时间
  factoryTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time', example='2018-10-10T10:10:00Z'),
  // 设备状态，取值范围：NORMAL、OFFLINE、UNREGISTER
  deviceStatus?: string(name='device_status', example='NORMAL'),
}

// BAI提供的OCR接口返回值
model BaiOcrResponse {
  // 返回的结果体
  data: string(name='data', example='{"backResult":{"issue":"XXXX","endDate":"20231010","startDate":"20131010"}}'),
}

// 收集标签数据
model CollectLabelContent {
  // 链上设备ID
  chainDeviceId: string(name='chain_device_id', example='XXXXX'),
  // 1.设备端上报数据内容  
  // 2.与设备上报的数据一致，服务端不可修改
  // 3.解析后需与DataModel匹配 
  // 4.映射 Label 对象结构化存储
  // 5.转为JSON后如果是JSONObject 映射单个 Label
  // 6.转为JSON后如果是JSONArray 映射多个 Label
  content: string(name='content', example='XXXXX'),
  // content的签名
  // 与设备上报的签名保持一致，服务端不可修改
  signature: string(name='signature', example='XXXXX'),
  // 未经设备签名的附加数据JSON String
  // 注意：如果 content 批量解析 ，extraData也会批量复制融入解析后的content
  extraData?: string(name='extra_data', example='XXXXX'),
}

// 收集信息
model CollectContent {
  // 链上设备Id
  chainDeviceId: string(name='chain_device_id', example='1122'),
  // 收集的内容
  content: string(name='content', example='{"name","1"}'),
  // 对内容的签名
  signature: string(name='signature', example='wwexe02j'),
  // 服务端发送的扩展数据（非可信设备直接产生的数据）
  extraData?: string(name='extra_data', example='{"extraKey":"extraValue"}'),
  // 数据模型Id
  dataModelId?: string(name='data_model_id', example='00000001'),
}

// tlsnotary文件认证成功后上传到oss的文件链接列表
model TlsnotaryUploadOssLinks {
  // 证书链摘要文件的oss链接
  certChainDigestLink: string(name='cert_chain_digest_link', example='tlsnotary/{taskId}.json'),
  // 邮件eml文件的oss链接
  emlFileLink: string(name='eml_file_link', example='tlsnotary/{taskId}.eml'),
}

// 租户关联信息请求结构体
model TenantBindInfoReq {
  // 租户关联扩展信息
  extension?: string(name='extension', example='"CN,北京"'),
  // 业务类型，默认空
  bizType?: string(name='biz_type', example='null'),
  // 组织机构代码，可为中文
  tenantUid: string(name='tenant_uid', example='"12345"'),
  // 组织结构名称
  userName: string(name='user_name', example='"xx公司xx部门"'),
}

// 标签流转上链返回txHash
model LabelChainResult {
  // 标签ID
  labelId: string(name='label_id', example='86F000001A51C02000000010'),
  // 业务资产ID，接入方自行定义
  assetId?: string(name='asset_id', example='XXX'),
  // 标签最近一次上链的txHash
  txHash: string(name='tx_hash', example='855e7ba37a0f227e384691e250f90bb2240adf11839016cf08506c9aa5c11cef'),
  // 错误码
  errorCode?: string(name='error_code', example='XXXX'),
  // 错误信息
  errorMsg: string(name='error_msg', example='xxxxx'),
}

// 创建订单失败的返回结构体
model InsertPurchaseOrderFailInfo {
  // 订单ID
  orderId: string(name='order_id', example='safsafafafa'),
  // 订单保存失败的原因
  failReason: string(name='fail_reason', example='fasfasfasfa'),
}

// 场景分页查询结果
model ScenePageResponse {
  // 页数
  // 
  pageIndex: long(name='page_index', example='1'),
  // 页码
  // 
  pageSize: long(name='page_size', example='10'),
  // 总记录数
  // 
  totalSize: long(name='total_size', example='100'),
  // 总页数
  // 
  totalPages: long(name='total_pages', example='10'),
  // 数据
  pageData: [ SceneModel ](name='page_data', example='{...}'),
}

// 电脑型号信息
model ComputerInfo {
  // 颜色
  colour?: string(name='colour', example='红色'),
  // 色值
  colourNumber?: string(name='colour_number', example='#BA0F2F'),
  // 电脑型号
  computerModel?: string(name='computer_model', example='X100'),
  // 配置参数
  configParam?: string(name='config_param', example='{""}'),
  // 显卡
  videoCard?: string(name='video_card', example='GTX3080'),
  // 屏幕
  screenSize?: string(name='screen_size', example='27'),
  // 电脑CPU
  cpu: string(name='cpu', example='i9'),
  // 电脑内存
  memory: string(name='memory', example='16GB'),
  // 电脑硬盘
  diskSize: string(name='disk_size', example='500GB'),
}

// 租户项目创建请求结构体模型
model TenantProjectCreateReq {
  // 业务类型，默认空
  bizType?: string(name='biz_type', example='null'),
  // 可选的，项目关联的区块链类型，1/2/3代表存证/合约等类型
  blockchainType?: long(name='blockchain_type', example='1'),
  // 可选的，项目关联的区块链uid
  blockchainUid?: string(name='blockchain_uid', example='1111111'),
  // 租户下唯一项目名称，用以标识项目聚合的存证等信息
  projectName: string(name='project_name', example='"唯一项目名称"'),
}

// Sdk分页查询结果
model SdkPageResponse {
  // 页数
  // 
  pageIndex: long(name='page_index', example='1'),
  // 页码
  // 
  pageSize: long(name='page_size', example='10'),
  // 总记录数
  // 
  totalSize: long(name='total_size', example='100'),
  // 总页数
  // 
  totalPages: long(name='total_pages', example='10'),
  // 数据
  pageData: [ SdkModel ](name='page_data', example='{...}'),
}

// 信物链存证请求结构体
model EvidenceStorageReq {
  // 业务数据，原文上链，或者加密（label若为CRYPTO）上链，上链后的业务数据，通过授权可被区块链其他业务方查询
  bizData?: string(name='biz_data', example='[{"content":"{业务数据}","label":"CRYPTO","timestamp":0}]'),
  // 不同上链方式
  // 空/"": 默认
  // "TTTS": 溯源
  // "IOTPAY": 支付
  // "CZ": 存证
  // "RAW":文本
  category: string(name='category', example='"CZ"'),
  // 上链实体id(设备/空间)
  // 不可和project_uid同时为空
  iotDid?: string(name='iot_did', example='"did:iot:a9147bd2b83d4732b56dc06b346588f5619f80a2d4d2412fab535cbd37293a00"'),
  // 需要上链的证据的哈希值
  hash?: string(name='hash', example='"ace1213412313"'),
  // 上链的附属信息
  metaJson?: string(name='meta_json', example='"附属信息json"'),
  // 上链的项目id,
  // 不可和iot_did同时为空
  projectUid?: string(name='project_uid', example='"上链的项目id"'),
}

// 信物链查询实体身份请求结构体
model DidBaseQueryReq {
  // * "thingId"       原始ID
  // * "certText"      证书文本
  // * "certPublicKey"证书公钥
  // * "didPublicKey" DID公钥
  // * "didExtension"  DID扩展，设备/企业组织/仓库/空间的解析同thingsExtraParams
  // * "didUsername"   DID用户名
  // * "ownerDid"      所有者DID
  // * "userDid"       使用者DID
  // * "thingType"     实体类型，设备/企业组织/仓库/空间等
  // * "thingStatus"   实体状态
  // * "thingModelId" 实体物模型类型
  // * "thingAttribute"实体属性
  // * "thingVersion"  实体版本
  // * "spacesAttached"关联空间列表
  // * "thingsAttached"关联实体列表（例：库位关联设备）
  // * "authLevel"     授权等级
  // * "thingServiceEndpoint" 服务列表
  dataFilter: [ string ](name='data_filter', example='["如下1","如下2"]'),
  // 是否从链上查询，从链上查询将返回txHash值
  onChain: boolean(name='on_chain', example='false'),
  // 需要查询的实体Did列表，同一次查询的Did须为相同类型
  thingsDidList: [ string ](name='things_did_list', example='["did:iot:xxxx","did:iot:yyyyy"]'),
}

// 信物链实体身份注册请求结构体
model ThingsDidBaseRegisterRequest {
  // 信物链实体的所有者的分布式身份
  ownerTenantDid?: string(name='owner_tenant_did', example='"did:mychain:6c9f6cde4f63103d25ab1d9893242547a8518d8f51bff1a9da44e4f8537a9816"'),
  // 信物链实体的使用方的分布式身份列表
  userDid?: [ string ](name='user_did', example='["did:mychain:xxxx1","did:mychain:xxxx2"]'),
  // 信物链实体身份
  // DID_TYPE_DEVICE_ALIYUN: 阿里云设备
  // DID_TYPE_DEVICE_PEGASUS: 链机设备
  // DID_TYPE_DEVICE_MCU: MCU设备
  // DID_TYPE_DEVICE_INTEL: intel设备
  // DID_TYPE_DEVICE_DEVICE: 默认设备
  // ...
  // DID_TYPE_CORPORATE:  组织实体
  // DID_TYPE_WAREHOUSE：仓库实体
  // DID_TYPE_SPACE： 空间实体
  thingType: string(name='thing_type', example='"DID_TYPE_DEVICE_ALIYUN"'),
  // 原始id，租户内同一类型实体唯一
  thingOriginId: string(name='thing_origin_id', example='"aaaa123"'),
  // 实体原始名称
  thingOriginName: string(name='thing_origin_name', example='"摄像头a11"'),
  // 实体版本
  thingVersion: string(name='thing_version', example='"1.0.0"'),
  // 业务编码
  bizType?: string(name='biz_type', example='null'),
  // 信物链实体附加信息
  // 不同实体身份，有不同的json组织格式，参考另外技术文档
  thingExtraParams?: string(name='thing_extra_params', example='"附加信息"'),
}

// 信物链实体查询返回的数据结构，对应数据表字段
model DidBaseQueryResp {
  // 授权水平，0-默认关联授权
  authLevel?: long(name='auth_level', example='0'),
  // 证书公钥，特定实体可查询
  certPublicKey?: string(name='cert_public_key', example='""'),
  // 证书文本，特定实体可以查询
  certText?: string(name='cert_text', example='“”'),
  // DID扩展，设备/企业组织/仓库/空间的解析同ThingExtraParams
  didExtension?: string(name='did_extension', example='""'),
  // did公钥，特定w3c did实体可查询
  didPublicKey?: string(name='did_public_key', example='""'),
  // DID用户名，w3c did实体可查询
  didUsername?: string(name='did_username', example='""'),
  // 所有者DID
  ownerDid?: string(name='owner_did', example='"did:iot:xxxxx"'),
  // 实体附属空间列表，例如仓库下属库位，设备关联库位等
  spacesAttached?: [ string ](name='spaces_attached', example='["",""]'),
  // 实体附属实体列表，例如空间关联设备列表
  thingsAttached?: [ string ](name='things_attached', example='["",""]'),
  // 实体属性，在阿里云iot设备，对应三元组
  thingAttribute?: string(name='thing_attribute', example='",,"'),
  // 原始ID
  thingId?: string(name='thing_id', example='"原始ID"'),
  // 实体物模型id
  thingModelId?: string(name='thing_model_id', example='""'),
  // 服务端点，可实现w3c service endpoint
  thingServiceEndpoint?: string(name='thing_service_endpoint', example='""'),
  // 设备状态需要是通过 updateStatus api更新，
  // 其他状态通过updateThingsDid api更新
  thingStatus?: string(name='thing_status', example='实体状态'),
  // 实体类型，注册时候的类型
  // 0: 阿里云设备
  // 1: 链机设备
  // 2: MCU设备
  // 3: INTEL设备
  // 16384:  默认设备
  // 65536: 组织身份
  // 131072: 仓库身份
  // 196608: 空间身份
  thingType?: long(name='thing_type', example='0'),
  // 实体版本
  thingVersion?: string(name='thing_version', example='"1.0.0"'),
  // 使用者DID列表
  userDidList?: [ string ](name='user_did_list', example='["did:iot:xxxxx","did:iot:yyyyy"]'),
  // 查询的did
  did?: string(name='did', example='"did:iot:xxxx"'),
}

// 外围设备信息
model Peripheral {
  // 外围设备Id
  peripheralId: string(name='peripheral_id', example='123'),
  // 数据模型id
  // 
  peripheralDataModelId: string(name='peripheral_data_model_id', example='123456'),
  // 场景码
  // 
  scene: string(name='scene', example='scene1'),
  // 外围设备名称
  // 
  peripheralName?: string(name='peripheral_name', example='锂电池1 '),
  // 厂商名称
  // 
  corpName?: string(name='corp_name', example='宁德时代1'),
  // 链上外围设备Id
  // 
  chainPeripheralId: string(name='chain_peripheral_id', example='123123'),
  // 链上哈希
  txHash: string(name='tx_hash', example='txhash123'),
  // 上链时间
  txTime: long(name='tx_time', example='1605076751000'),
  // 设备类型编码，必填，对应资管平台中的设备类型 
  // 
  // 枚举值：
  // 
  // 车辆 1000 
  // 车辆 四轮车 1001 
  // 车辆 四轮车 纯电四轮车 1002 
  // 车辆 四轮车 混动四轮车 1003 
  // 车辆 四轮车 燃油四轮车 1004 
  // 车辆 两轮车 1011 
  // 车辆 两轮车 两轮单车 1012 
  // 车辆 两轮车 两轮助力车 1013 
  // 
  // 换电柜 2000 
  // 换电柜 二轮车换电柜 2001 
  // 
  // 电池 3000 
  // 电池 磷酸铁电池 3001 
  // 电池 三元锂电池 3002 
  // 
  // 回收设备 4000 
  // 
  // 垃圾分类回收 4001 
  // 
  // 洗车机 5000
  deviceTypeCode: long(name='device_type_code', example='3000'),
  // 单价，单位分
  initialPrice: long(name='initial_price', example='1000'),
  // 出厂时间
  factoryTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time', example='2018-10-10T10:10:00Z'),
  // 投放时间
  releaseTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time', example='2018-10-10T10:10:00Z'),
}

// 仓库实体身份附加参数请求结构体，应用在注册/更新API的ThingExtraParams
model WarehouseReqModel {
  // 详细地址
  address?: string(name='address', example='北京海淀区'),
  // 面积 平方米单位*1e4
  area?: long(name='area', example='1000000'),
  // 海拔 米单位*1e2
  elevation?: long(name='elevation', example='0'),
  // 仓库高度 米单位*1e2
  height?: long(name='height', example='1000'),
  // 纬度 度数单位*1e9
  latitude?: long(name='latitude', example='0'),
  // 经度 度数单位*1e9
  longitude?: long(name='longitude', example='35000000000'),
  // 所在国家，中国
  nation?: string(name='nation', example='中国'),
  // 其他信息
  otherInfo?: string(name='other_info', example='"自定义"'),
  // 仓库状态, AVAILABLE, IN_USE, DELETED, 自定义
  status?: string(name='status', example='"AVAILABLE"'),
  // 仓库类型
  type?: string(name='type', example='"自定义"'),
}

// 设备实体请求结构体，应用在注册/更新API的ThingsExtraParams
model DeviceRegisterReqModel {
  // 保留
  authLevel?: long(name='auth_level', example='0'),
  // 设备属性字符串，
  // 阿里云设备类型，填入三元组
  deviceAttribute?: string(name='device_attribute', example='"设备属性"'),
  // 物模型ID，参考其他文档
  deviceModelId?: string(name='device_model_id', example='"模型ID"'),
  // 可传入自定义信息
  otherInfo?: string(name='other_info', example='"自定义字段"'),
  // 业务自定义，可以传入该实体的w3c服务节点
  serviceEndpoint?: string(name='service_endpoint', example='"服务端点"'),
  // 保留，默认
  //     STATUS_REGISTERED(3)
  status?: string(name='status', example='null'),
}

// 组织请求注册更新结构体，应用在注册/更新API的ThingExtraParams
model CorporateReqModel {
  // 组织地址
  address?: string(name='address', example='xxxxx'),
  // 运营地址
  businessAddress?: string(name='business_address', example='""'),
  // 经营类目
  businessScope?: string(name='business_scope', example='""'),
  // 注册时间，字符串类型
  certifyDate?: string(name='certify_date', example='"注册时间"'),
  // 营业执照有效期，字符串
  licenceExpireDate?: string(name='licence_expire_date', example='""'),
  // 国家
  nation?: string(name='nation', example='CN'),
  // 组织类型
  type?: string(name='type', example='LimitedCompany'),
}

// 租户分页查询结果
model PermissionedTenantPageResponse {
  // 页数
  pageIndex: long(name='page_index', example='1'),
  // 页码
  pageSize: long(name='page_size', example='10'),
  // 总记录数
  totalSize: long(name='total_size', example='100'),
  // 总页数
  totalPages: long(name='total_pages', example='10'),
  // 数据
  pageData: [ PermissionedTenantModel ](name='page_data', example='{...}'),
}

model OpenAcecContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单号
  orderNo: string(name='order_no'),
  // 产品码，全局唯一
  productCode: string(name='product_code'),
  // 开通产品的租户ID
  tenantId: string(name='tenant_id'),
  // 实例Id
  instanceId: string(name='instance_id'),
  // 服务接入码
  accessCode: string(name='access_code'),
  // 用户自定义数据
  customData?: string(name='custom_data'),
}

model OpenAcecContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务返回字段
  data?: string(name='data'),
}

/**
 * Description: acec提供的SPI服务开通接口
 * Summary: acec提供的SPI服务开通接口
 */
async function openAcecContract(request: OpenAcecContractRequest): OpenAcecContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openAcecContractEx(request, headers, runtime);
}

/**
 * Description: acec提供的SPI服务开通接口
 * Summary: acec提供的SPI服务开通接口
 */
async function openAcecContractEx(request: OpenAcecContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenAcecContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.acec.contract.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StopAcecContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单号
  orderNo: string(name='order_no'),
  // 产品码，全局唯一
  productCode: string(name='product_code'),
  // 产品实例Id
  instanceId: string(name='instance_id'),
}

model StopAcecContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务返回字段
  data?: string(name='data'),
}

/**
 * Description: AI服务组提供的SPI服务停止接口
 * Summary: acec提供的SPI服务停止接口
 */
async function stopAcecContract(request: StopAcecContractRequest): StopAcecContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return stopAcecContractEx(request, headers, runtime);
}

/**
 * Description: AI服务组提供的SPI服务停止接口
 * Summary: acec提供的SPI服务停止接口
 */
async function stopAcecContractEx(request: StopAcecContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopAcecContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.acec.contract.stop', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ResumeAcecContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务接入码
  accessCode: string(name='access_code'),
  // 实例Id
  instanceId: string(name='instance_id'),
  // 订单号
  orderNo: string(name='order_no'),
  // 产品码，全局唯一
  productCode: string(name='product_code'),
}

model ResumeAcecContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务返回字段
  // 
  data?: string(name='data'),
}

/**
 * Description: acec提供的SPI服务复入接口
 * Summary: acec提供的SPI服务复入接口
 */
async function resumeAcecContract(request: ResumeAcecContractRequest): ResumeAcecContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return resumeAcecContractEx(request, headers, runtime);
}

/**
 * Description: acec提供的SPI服务复入接口
 * Summary: acec提供的SPI服务复入接口
 */
async function resumeAcecContractEx(request: ResumeAcecContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeAcecContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.acec.contract.resume', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAcsDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备ID
  deviceId: string(name='device_id'),
  // 场景码-对应acs iot管控后台项目code
  scene: string(name='scene'),
  // 设备类型编码-对应acs iot管控后台设备类型编码
  classCode: string(name='class_code'),
  // 设备注册信息
  content: string(name='content'),
  // 设备注册信息 签名
  signature: string(name='signature'),
  // 设备名称
  deviceName: string(name='device_name'),
  // 设备单价 单位：分
  initialPrice?: long(name='initial_price'),
  // 设备出厂时间
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 设备投放时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
}

model CreateAcsDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上设备Id
  chainDeviceid?: string(name='chain_deviceid'),
  // 发行设备ID
  distributeDeviceId?: string(name='distribute_device_id'),
  // 设备激活文本-设备直连上链方式使用
  activeData?: string(name='active_data'),
}

/**
 * Description: biot 私有化 设备注册接口
 * Summary: biot 私有化 设备注册接口
 */
async function createAcsDevice(request: CreateAcsDeviceRequest): CreateAcsDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAcsDeviceEx(request, headers, runtime);
}

/**
 * Description: biot 私有化 设备注册接口
 * Summary: biot 私有化 设备注册接口
 */
async function createAcsDeviceEx(request: CreateAcsDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAcsDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.acs.device.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendAcsCollectorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上设备Id
  // 
  chainDeviceId: string(name='chain_device_id'),
  // 收集内容
  collectContentList: [ CollectContent ](name='collect_content_list'),
  // 随机数，防重放
  nonce: [ string ](name='nonce'),
}

model SendAcsCollectorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 收集数据返回的上链结果
  resultList?: [ SendCollectorResult ](name='result_list'),
}

/**
 * Description: biot 私有化 业务数据上报
 * Summary: biot 私有化 业务数据上报
 */
async function sendAcsCollector(request: SendAcsCollectorRequest): SendAcsCollectorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendAcsCollectorEx(request, headers, runtime);
}

/**
 * Description: biot 私有化 业务数据上报
 * Summary: biot 私有化 业务数据上报
 */
async function sendAcsCollectorEx(request: SendAcsCollectorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendAcsCollectorResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.acs.collector.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBaiOcrRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 调用业务方身份标识，指明调用来源
  appKey: string(name='app_key'),
  // OCR服务的业务类型，目前支持：
  // businessLicense，营业执照识别
  // idCard，身份证识别
  // bankCard，银行卡识别
  // VATInvoice，增值税发票识别
  ocrType: string(name='ocr_type'),
  // 请求的资源类型，目前支持：
  // image，图片
  // pdf，PDF复印件
  sourceType: string(name='source_type'),
  // 图片或PDF等内容的base64内容字符串
  sourceBase64: string(name='source_base64'),
  // 资源的附加属性
  // 如针对身份证识别，需要指定face(人像面)或back(国徽面)
  sourceConfigSide?: string(name='source_config_side'),
}

model QueryBaiOcrResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果体，JSON字符串
  data?: string(name='data'),
}

/**
 * Description: BAI提供的OCR服务接口
 * Summary: BAI提供的OCR服务
 */
async function queryBaiOcr(request: QueryBaiOcrRequest): QueryBaiOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBaiOcrEx(request, headers, runtime);
}

/**
 * Description: BAI提供的OCR服务接口
 * Summary: BAI提供的OCR服务
 */
async function queryBaiOcrEx(request: QueryBaiOcrRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBaiOcrResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.bai.ocr.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIotplatformPurchaseorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id
  tenantId: string(name='tenant_id'),
  // 设备串号
  serialNumber: string(name='serial_number'),
}

model QueryIotplatformPurchaseorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否为链上采购商品，true：是，false：否
  goodsFromChain?: boolean(name='goods_from_chain'),
  // 采购时间
  purchaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='purchase_time'),
  // 采购商名称
  leaseName?: string(name='lease_name'),
  // 采购价
  purchaseOrderPrice?: string(name='purchase_order_price'),
  // 商品名称
  goodsName?: string(name='goods_name'),
}

/**
 * Description: 根据设备串号查询采购设备
 * Summary: 根据设备串号查询采购设备
 */
async function queryIotplatformPurchaseorder(request: QueryIotplatformPurchaseorderRequest): QueryIotplatformPurchaseorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIotplatformPurchaseorderEx(request, headers, runtime);
}

/**
 * Description: 根据设备串号查询采购设备
 * Summary: 根据设备串号查询采购设备
 */
async function queryIotplatformPurchaseorderEx(request: QueryIotplatformPurchaseorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIotplatformPurchaseorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotplatform.purchaseorder.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportIotplatformMeshidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 客户的金融云租户ID
  tenantId: string(name='tenant_id'),
  // 客户的公司名称
  companyName: string(name='company_name'),
  // 设备按照MeshAgent后获取的MeshId
  meshId: string(name='mesh_id'),
  // 客户自定义的业务上使用的设备标识，需要与租赁业务上使用的ID进行对应
  deviceSn: string(name='device_sn'),
  // 设备类型字段
  type?: string(name='type'),
  // 代理商名称，用于二级代理模式
  agentName?: string(name='agent_name'),
}

model ImportIotplatformMeshidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 提交绑定时的SN号，用于确认
  deviceSn?: string(name='device_sn'),
}

/**
 * Description: 设备租赁业务中在PC设备出厂时进行MeshId及SN号的关联绑定
 * Summary: 绑定MeshId及设备SN
 */
async function importIotplatformMeshid(request: ImportIotplatformMeshidRequest): ImportIotplatformMeshidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importIotplatformMeshidEx(request, headers, runtime);
}

/**
 * Description: 设备租赁业务中在PC设备出厂时进行MeshId及SN号的关联绑定
 * Summary: 绑定MeshId及设备SN
 */
async function importIotplatformMeshidEx(request: ImportIotplatformMeshidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportIotplatformMeshidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotplatform.meshid.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportPurchaseorderThirdpartyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租赁订单号
  orderNumber: string(name='order_number'),
  // 收货人姓名
  consigneeName: string(name='consignee_name'),
  // 收货人身份证号
  consigneeIdNumber: string(name='consignee_id_number'),
  // 收货人手机号
  consigneePhone: string(name='consignee_phone'),
  // 收货人地址
  consigneeAddress: string(name='consignee_address'),
  // 供货商名称
  supplierName: string(name='supplier_name'),
  // 供货商租户id
  supplierId: string(name='supplier_id'),
  // 采购商租户id
  leaseId: string(name='lease_id'),
  // 商品信息列表
  goodsList: [ GoodsIdAndCount ](name='goods_list'),
  // 幂等号
  idempotId: string(name='idempot_id'),
}

model ImportPurchaseorderThirdpartyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 采购平台-采购详情id
  purchaseOrderId?: string(name='purchase_order_id'),
  // 当前状态
  // READY_DELIVER(0, "待发货"),
  // DELIVERED(1, "已发货"),
  // REFUSED(2, "已拒发"),
  // CANCELED(4, "已取消"),
  // REFUNDED(5, "已退货");
  // 
  status?: string(name='status'),
  // InsertPurchaseOrderFailInfo
  failMap?: InsertPurchaseOrderFailInfo(name='fail_map'),
  // 真实订单信息，成功不返回
  // 
  purchaseOrderInfoDetail?: PurchaseOrderInfoDetail(name='purchase_order_info_detail'),
  // 幂等号
  idempotId?: string(name='idempot_id'),
}

/**
 * Description: 与租赁宝对接采购订单导入的接口
 * Summary: 与租赁宝对接采购订单导入的接口
 */
async function importPurchaseorderThirdparty(request: ImportPurchaseorderThirdpartyRequest): ImportPurchaseorderThirdpartyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importPurchaseorderThirdpartyEx(request, headers, runtime);
}

/**
 * Description: 与租赁宝对接采购订单导入的接口
 * Summary: 与租赁宝对接采购订单导入的接口
 */
async function importPurchaseorderThirdpartyEx(request: ImportPurchaseorderThirdpartyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportPurchaseorderThirdpartyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.purchaseorder.thirdparty.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddUserRoleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 账号标识，蚂蚁金融科技租户ID
  tenantId: string(name='tenant_id'),
  // 租户名称
  tenantName: string(name='tenant_name'),
  // 权限标识
  //     LEASER(0),
  //     BUYERS(1),
  //     OWNER(2),
  //     ADMIN(9);
  role: string(name='role'),
  // 是否支持abm远程
  supportAbm: boolean(name='support_abm'),
  // 是否含税
  includTax: boolean(name='includ_tax'),
}

model AddUserRoleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 新增的用户id
  userId?: long(name='user_id'),
}

/**
 * Description: 采购平台新增供应商角色
 * Summary: 采购平台新增供应商角色
 */
async function addUserRole(request: AddUserRoleRequest): AddUserRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addUserRoleEx(request, headers, runtime);
}

/**
 * Description: 采购平台新增供应商角色
 * Summary: 采购平台新增供应商角色
 */
async function addUserRoleEx(request: AddUserRoleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddUserRoleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.user.role.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddGoodsSkuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // GoodsTypeEnum,商品一级类目
  type: string(name='type'),
  // 商品二级类目
  secondType: string(name='second_type'),
  // 商品品牌
  brand: string(name='brand'),
  // 商品名称，型号
  model: string(name='model'),
  // 市场价
  marketPrice: long(name='market_price'),
  // 手机型号信息
  phoneInfo?: PhoneInfo(name='phone_info'),
  // 电脑型号信息
  computerInfo?: ComputerInfo(name='computer_info'),
}

model AddGoodsSkuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // SKU id
  skuId?: long(name='sku_id'),
}

/**
 * Description: 采购平台新增SKU
 * Summary: 采购平台新增SKU
 */
async function addGoodsSku(request: AddGoodsSkuRequest): AddGoodsSkuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addGoodsSkuEx(request, headers, runtime);
}

/**
 * Description: 采购平台新增SKU
 * Summary: 采购平台新增SKU
 */
async function addGoodsSkuEx(request: AddGoodsSkuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddGoodsSkuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.goods.sku.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDeviceDatamodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据模型
  dataModel: string(name='data_model'),
  // 数据模型名称
  dataModelName?: string(name='data_model_name'),
  // 数据模型类别
  bizType?: string(name='biz_type'),
  // 用户自定义版本
  customerVersion?: string(name='customer_version'),
}

model CreateDeviceDatamodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据模型id
  deviceDataModelId?: string(name='device_data_model_id'),
}

/**
 * Description: 创建数据模型
 * Summary: 创建数据模型
 */
async function createDeviceDatamodel(request: CreateDeviceDatamodelRequest): CreateDeviceDatamodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDeviceDatamodelEx(request, headers, runtime);
}

/**
 * Description: 创建数据模型
 * Summary: 创建数据模型
 */
async function createDeviceDatamodelEx(request: CreateDeviceDatamodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDeviceDatamodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.datamodel.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDeviceDatamodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据模型Id
  dataModelId: string(name='data_model_id'),
}

model GetDeviceDatamodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据模型
  dataModel?: DataModel(name='data_model'),
}

/**
 * Description: 获取数据模型
 * Summary: 获取数据模型
 */
async function getDeviceDatamodel(request: GetDeviceDatamodelRequest): GetDeviceDatamodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDeviceDatamodelEx(request, headers, runtime);
}

/**
 * Description: 获取数据模型
 * Summary: 获取数据模型
 */
async function getDeviceDatamodelEx(request: GetDeviceDatamodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeviceDatamodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.datamodel.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备Id
  deviceId: string(name='device_id'),
  // 数据模型id
  deviceDataModelId: string(name='device_data_model_id'),
  // 场景码
  scene: string(name='scene'),
  // 设备imei
  deviceImei: string(name='device_imei'),
  // 设备名称
  deviceName?: string(name='device_name'),
  // 厂商名称
  corpName?: string(name='corp_name'),
  // 枚举值： SIGNED_DATA 、RAW_DATA ，默认填写 SIGNED_DATA（需要验签的设备）
  deviceFeature: string(name='device_feature'),
  // 设备类型编码，必填，对应资管平台中的设备类型 
  // 
  // 枚举值：
  // 
  // 车辆 1000 
  // 车辆 四轮车 1001 
  // 车辆 四轮车 纯电四轮车 1002 
  // 车辆 四轮车 混动四轮车 1003 
  // 车辆 四轮车 燃油四轮车 1004 
  // 车辆 两轮车 1011 
  // 车辆 两轮车 两轮单车 1012 
  // 车辆 两轮车 两轮助力车 1013 
  // 
  // 换电柜 2000 
  // 换电柜 二轮车换电柜 2001 
  // 
  // 电池 3000 
  // 电池 磷酸铁电池 3001 
  // 电池 三元锂电池 3002 
  // 
  // 回收设备 4000 
  // 
  // 垃圾分类回收 4001 
  // 
  // 洗车机 5000
  // 通用计算设备	                6000
  // 	移动设备		        6001
  // 		智能手机	        6002
  // 		工业掌机	        6003
  // 		平板电脑	        6004
  // 	云设备		        6011
  // 		云计算服务器	6012
  deviceTypeCode: long(name='device_type_code'),
  // 设备单价 单位：分
  initialPrice: long(name='initial_price'),
  // 出厂时间
  factoryTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 投放时间
  releaseTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
  // 设备类型，需要提前约定好
  deviceTypeId?: string(name='device_type_id'),
  // 可信根派生公钥
  devicePublicKey?: string(name='device_public_key'),
}

model ImportDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上设备Id
  chainDeviceId?: string(name='chain_device_id'),
}

/**
 * Description: 注册设备
 * Summary: 注册设备
 */
async function importDevice(request: ImportDeviceRequest): ImportDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importDeviceEx(request, headers, runtime);
}

/**
 * Description: 注册设备
 * Summary: 注册设备
 */
async function importDeviceEx(request: ImportDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDeviceBychainidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上设备Id
  chainDeviceId: string(name='chain_device_id'),
}

model GetDeviceBychainidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备详情
  device?: Device(name='device'),
}

/**
 * Description: 通过chainId获取设备详情
 * Summary: 通过chainId获取设备详情
 */
async function getDeviceBychainid(request: GetDeviceBychainidRequest): GetDeviceBychainidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDeviceBychainidEx(request, headers, runtime);
}

/**
 * Description: 通过chainId获取设备详情
 * Summary: 通过chainId获取设备详情
 */
async function getDeviceBychainidEx(request: GetDeviceBychainidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeviceBychainidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.bychainid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDeviceBydeviceidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备id集合
  deviceIdList: [ string ](name='device_id_list'),
  // 场景码
  scene: string(name='scene'),
}

model GetDeviceBydeviceidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备详情
  deviceList?: [ Device ](name='device_list'),
  // 设备信息不存在的deviceid集合
  missDeviceIdList?: [ string ](name='miss_device_id_list'),
  // 成功获取到设备信息的deviceid集合
  successDeviceIdList?: [ string ](name='success_device_id_list'),
}

/**
 * Description: 通过deviceId获取设备详情
 * Summary: 通过deviceId获取设备详情
 */
async function getDeviceBydeviceid(request: GetDeviceBydeviceidRequest): GetDeviceBydeviceidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDeviceBydeviceidEx(request, headers, runtime);
}

/**
 * Description: 通过deviceId获取设备详情
 * Summary: 通过deviceId获取设备详情
 */
async function getDeviceBydeviceidEx(request: GetDeviceBydeviceidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeviceBydeviceidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.bydeviceid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDeviceBysceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
}

model ListDeviceBysceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备列表
  deviceList?: [ Device ](name='device_list'),
}

/**
 * Description: 通过场景码列举设备
 * Summary: 通过场景码列举设备
 */
async function listDeviceByscene(request: ListDeviceBysceneRequest): ListDeviceBysceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDeviceBysceneEx(request, headers, runtime);
}

/**
 * Description: 通过场景码列举设备
 * Summary: 通过场景码列举设备
 */
async function listDeviceBysceneEx(request: ListDeviceBysceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDeviceBysceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.byscene.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDeviceInfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上设备Id
  chainDeviceId: string(name='chain_device_id'),
  // 设备imei号
  deviceImei?: string(name='device_imei'),
  // 设备数据模型Id
  // 
  // 
  dataModelId?: string(name='data_model_id'),
  // 设备ICCID
  // 
  // 
  deviceIccid?: string(name='device_iccid'),
  // deviceTypeCode 枚举 
  // 
  // 车辆: 1000
  // 四轮车: 1001
  // 纯电四轮车:1002
  // 混动四轮车 1003
  // 燃油四轮车 : 1004
  // 
  // 两轮车:1011
  // 两轮单车:1012
  // 两轮助力车:1013
  // 
  // 换电柜 :2000
  // 二轮车换电柜:2001
  // 
  // 电池 :3000
  // 磷酸铁电池:3001
  // 三元锂电池:3002
  // 
  // 回收设备:4000
  // 垃圾分类回收:4001
  // 
  // 洗车机 :5000
  // 通用计算设备	                6000
  // 	移动设备		        6001
  // 		智能手机	        6002
  // 		工业掌机	        6003
  // 		平板电脑	        6004
  // 	云设备		        6011
  // 		云计算服务器	6012
  deviceTypeCode?: long(name='device_type_code'),
  // 设备单价 单位：分
  initialPrice?: long(name='initial_price'),
  // 出厂时间
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 投放时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
  // 设备型号
  deviceName?: string(name='device_name'),
}

model UpdateDeviceInfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新设备信息
 * Summary: 更新设备信息
 */
async function updateDeviceInfo(request: UpdateDeviceInfoRequest): UpdateDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDeviceInfoEx(request, headers, runtime);
}

/**
 * Description: 更新设备信息
 * Summary: 更新设备信息
 */
async function updateDeviceInfoEx(request: UpdateDeviceInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDeviceInfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.info.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributedeviceBydeviceidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 厂商名
  corpName?: string(name='corp_name'),
  // 数据模型Id
  deviceDataModelId: string(name='device_data_model_id'),
  // 设备Id
  deviceId: string(name='device_id'),
  // 设备imei号
  deviceImei: string(name='device_imei'),
  // 设备名称
  deviceName?: string(name='device_name'),
  // 场景码
  scene: string(name='scene'),
  // 枚举值： SIGNED_DATA 、RAW_DATA ，默认填写 SIGNED_DATA（需要验签的设备）
  deviceFeature?: string(name='device_feature'),
  // 当用已发行设备发行时返回已发行id或返回错误
  withExistDeviceId?: boolean(name='with_exist_device_id'),
  // 设备类型编码
  deviceTypeCode?: long(name='device_type_code'),
  // 设备单价 单位：分
  initialPrice?: long(name='initial_price'),
  // 出厂时间
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 投放时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
}

model CreateDistributedeviceBydeviceidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上设备Id
  chainDeviceId?: string(name='chain_device_id'),
  // 发行设备Id
  distributeDeviceId?: string(name='distribute_device_id'),
}

/**
 * Description: 通过deviceId发行设备
 * Summary: 通过deviceId发行设备
 */
async function createDistributedeviceBydeviceid(request: CreateDistributedeviceBydeviceidRequest): CreateDistributedeviceBydeviceidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributedeviceBydeviceidEx(request, headers, runtime);
}

/**
 * Description: 通过deviceId发行设备
 * Summary: 通过deviceId发行设备
 */
async function createDistributedeviceBydeviceidEx(request: CreateDistributedeviceBydeviceidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributedeviceBydeviceidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bydeviceid.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributedeviceBychainidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上设备Id
  chainDeviceId: string(name='chain_device_id'),
}

model CreateDistributedeviceBychainidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备Id
  distributeDeviceId?: string(name='distribute_device_id'),
}

/**
 * Description: 通过链上设备Id发行
 * Summary: 通过链上设备Id发行
 */
async function createDistributedeviceBychainid(request: CreateDistributedeviceBychainidRequest): CreateDistributedeviceBychainidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributedeviceBychainidEx(request, headers, runtime);
}

/**
 * Description: 通过链上设备Id发行
 * Summary: 通过链上设备Id发行
 */
async function createDistributedeviceBychainidEx(request: CreateDistributedeviceBychainidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributedeviceBychainidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bychainid.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReplaceDistributedeviceBychainidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上设备Id
  chainDeviceId: string(name='chain_device_id'),
  // 发行设备Id
  distributeDeviceId: string(name='distribute_device_id'),
}

model ReplaceDistributedeviceBychainidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 替换发行设备
 * Summary: 替换发行设备
 */
async function replaceDistributedeviceBychainid(request: ReplaceDistributedeviceBychainidRequest): ReplaceDistributedeviceBychainidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return replaceDistributedeviceBychainidEx(request, headers, runtime);
}

/**
 * Description: 替换发行设备
 * Summary: 替换发行设备
 */
async function replaceDistributedeviceBychainidEx(request: ReplaceDistributedeviceBychainidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReplaceDistributedeviceBychainidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bychainid.replace', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendCollectorBychainidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上设备Id
  chainDeviceId: string(name='chain_device_id'),
  // 收集数据
  collectContentList: [ CollectContent ](name='collect_content_list'),
  // 随机数，防重放
  nonce: string(name='nonce'),
  // 数据模型Id
  dataModelId?: string(name='data_model_id'),
}

model SendCollectorBychainidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 收集数据返回的上链结果
  resultList?: [ SendCollectorResult ](name='result_list'),
}

/**
 * Description: 上传单个设备所产生的设备数据 
 * Summary: 上传设备数据
 */
async function sendCollectorBychainid(request: SendCollectorBychainidRequest): SendCollectorBychainidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendCollectorBychainidEx(request, headers, runtime);
}

/**
 * Description: 上传单个设备所产生的设备数据 
 * Summary: 上传设备数据
 */
async function sendCollectorBychainidEx(request: SendCollectorBychainidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendCollectorBychainidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.collector.bychainid.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDistributedeviceBychainidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发行设备Id
  chainIdList: [ string ](name='chain_id_list'),
}

model GetDistributedeviceBychainidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备
  distributeDeviceList?: [ DistributeDevice ](name='distribute_device_list'),
}

/**
 * Description: 通过Id获取发行设备
 * Summary: 通过Id获取发行设备
 */
async function getDistributedeviceBychainid(request: GetDistributedeviceBychainidRequest): GetDistributedeviceBychainidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDistributedeviceBychainidEx(request, headers, runtime);
}

/**
 * Description: 通过Id获取发行设备
 * Summary: 通过Id获取发行设备
 */
async function getDistributedeviceBychainidEx(request: GetDistributedeviceBychainidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDistributedeviceBychainidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bychainid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDistributedeviceBysceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
}

model ListDistributedeviceBysceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备
  distributeDeviceList?: [ DistributeDevice ](name='distribute_device_list'),
}

/**
 * Description: 通过场景码列举发行设备
 * Summary: 通过场景码列举发行设备
 */
async function listDistributedeviceByscene(request: ListDistributedeviceBysceneRequest): ListDistributedeviceBysceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDistributedeviceBysceneEx(request, headers, runtime);
}

/**
 * Description: 通过场景码列举发行设备
 * Summary: 通过场景码列举发行设备
 */
async function listDistributedeviceBysceneEx(request: ListDistributedeviceBysceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDistributedeviceBysceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.byscene.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateConsumerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 消费者名称
  consumerName: string(name='consumer_name'),
}

model CreateConsumerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 消费者Id
  consumerId?: string(name='consumer_id'),
}

/**
 * Description: 创建消费者
 * Summary: 创建消费者
 */
async function createConsumer(request: CreateConsumerRequest): CreateConsumerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createConsumerEx(request, headers, runtime);
}

/**
 * Description: 创建消费者
 * Summary: 创建消费者
 */
async function createConsumerEx(request: CreateConsumerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConsumerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.consumer.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetConsumerSubscribeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 消费者Id
  consumerId: string(name='consumer_id'),
  // 订阅的发行设备Id列表
  distributeDeviceIdList: [ string ](name='distribute_device_id_list'),
}

model SetConsumerSubscribeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订阅的发行设备列表
  distributeDeviceList?: [ string ](name='distribute_device_list'),
}

/**
 * Description: 消费者订阅
 * Summary: 消费者订阅
 */
async function setConsumerSubscribe(request: SetConsumerSubscribeRequest): SetConsumerSubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setConsumerSubscribeEx(request, headers, runtime);
}

/**
 * Description: 消费者订阅
 * Summary: 消费者订阅
 */
async function setConsumerSubscribeEx(request: SetConsumerSubscribeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetConsumerSubscribeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.consumer.subscribe.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetConsumerUnsubscribeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 消费者id
  consumerId: string(name='consumer_id'),
  // 发型设备Id列表
  distributeDeviceIdList: [ string ](name='distribute_device_id_list'),
}

model SetConsumerUnsubscribeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备列表
  distributeDeviceList?: [ string ](name='distribute_device_list'),
}

/**
 * Description: 消费者取消订阅设备
 * Summary: 消费者取消订阅设备
 */
async function setConsumerUnsubscribe(request: SetConsumerUnsubscribeRequest): SetConsumerUnsubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setConsumerUnsubscribeEx(request, headers, runtime);
}

/**
 * Description: 消费者取消订阅设备
 * Summary: 消费者取消订阅设备
 */
async function setConsumerUnsubscribeEx(request: SetConsumerUnsubscribeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetConsumerUnsubscribeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.consumer.unsubscribe.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PullConsumerDatasourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 消费者id
  consumerId: string(name='consumer_id'),
  // 分页游标
  cursor: string(name='cursor'),
  // 获取的时间范围
  timeSpan?: [ string ](name='time_span'),
  // 类型：DEVICE、PERIPHERAL、ALL 默认为 ALL
  deviceType?: string(name='device_type'),
}

model PullConsumerDatasourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页游标
  cursor?: string(name='cursor'),
  // 数据包列表
  dataPackageList?: [ DistributeDataPackage ](name='data_package_list'),
}

/**
 * Description: 消费者获取数据
 * Summary: 消费者获取数据
 */
async function pullConsumerDatasource(request: PullConsumerDatasourceRequest): PullConsumerDatasourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pullConsumerDatasourceEx(request, headers, runtime);
}

/**
 * Description: 消费者获取数据
 * Summary: 消费者获取数据
 */
async function pullConsumerDatasourceEx(request: PullConsumerDatasourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PullConsumerDatasourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.consumer.datasource.pull', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDistributedeviceBydeviceidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备Id
  deviceIdList: [ string ](name='device_id_list'),
  // 场景码
  scene: string(name='scene'),
}

model GetDistributedeviceBydeviceidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备
  distributeDeviceList?: [ DistributeDevice ](name='distribute_device_list'),
  // 发行设备信息不存在的deviceid集合
  missDeviceIdList?: [ string ](name='miss_device_id_list'),
  // 成功获取到发行设备信息的deviceid集合
  successDeviceIdList?: [ string ](name='success_device_id_list'),
}

/**
 * Description: 通过设备id获取发行设备详情
 * Summary: 通过设备id获取发行设备详情
 */
async function getDistributedeviceBydeviceid(request: GetDistributedeviceBydeviceidRequest): GetDistributedeviceBydeviceidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDistributedeviceBydeviceidEx(request, headers, runtime);
}

/**
 * Description: 通过设备id获取发行设备详情
 * Summary: 通过设备id获取发行设备详情
 */
async function getDistributedeviceBydeviceidEx(request: GetDistributedeviceBydeviceidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDistributedeviceBydeviceidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bydeviceid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDistributedeviceBydisidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发行设备id列表
  distributeDeviceIdList: [ string ](name='distribute_device_id_list'),
}

model GetDistributedeviceBydisidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备列表
  distributeDeviceList?: [ DistributeDevice ](name='distribute_device_list'),
}

/**
 * Description: 通过发行id获取设备
 * Summary: 通过发行id获取设备
 */
async function getDistributedeviceBydisid(request: GetDistributedeviceBydisidRequest): GetDistributedeviceBydisidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDistributedeviceBydisidEx(request, headers, runtime);
}

/**
 * Description: 通过发行id获取设备
 * Summary: 通过发行id获取设备
 */
async function getDistributedeviceBydisidEx(request: GetDistributedeviceBydisidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDistributedeviceBydisidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bydisid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportPeripheralRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 厂商名称
  corpName?: string(name='corp_name'),
  // 数据模型id
  peripheralDataModelId: string(name='peripheral_data_model_id'),
  // 外围设备ID
  peripheralId: string(name='peripheral_id'),
  // 外围设备名称
  peripheralName?: string(name='peripheral_name'),
  // 场景码
  scene: string(name='scene'),
  // 设备类型编码，必填，对应资管平台中的设备类型 
  // 
  // 枚举值：
  // 
  // 车辆 1000 
  // 车辆 四轮车 1001 
  // 车辆 四轮车 纯电四轮车 1002 
  // 车辆 四轮车 混动四轮车 1003 
  // 车辆 四轮车 燃油四轮车 1004 
  // 车辆 两轮车 1011 
  // 车辆 两轮车 两轮单车 1012 
  // 车辆 两轮车 两轮助力车 1013 
  // 
  // 换电柜 2000 
  // 换电柜 二轮车换电柜 2001 
  // 
  // 电池 3000 
  // 电池 磷酸铁电池 3001 
  // 电池 三元锂电池 3002 
  // 
  // 回收设备 4000 
  // 
  // 垃圾分类回收 4001 
  // 
  // 洗车机 5000
  deviceTypeCode?: long(name='device_type_code'),
  // 设备单价 单位：分
  initialPrice?: long(name='initial_price'),
  // 出厂时间
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 投放时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
}

model ImportPeripheralResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上外围设备Id
  // 
  // 
  chainPeripheralId?: string(name='chain_peripheral_id'),
}

/**
 * Description: 注册外围设备
 * Summary: 注册外围设备
 */
async function importPeripheral(request: ImportPeripheralRequest): ImportPeripheralResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importPeripheralEx(request, headers, runtime);
}

/**
 * Description: 注册外围设备
 * Summary: 注册外围设备
 */
async function importPeripheralEx(request: ImportPeripheralRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportPeripheralResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.peripheral.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetPeripheralBychainperipheralidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上外围设备Id
  chainPeripheralId: string(name='chain_peripheral_id'),
}

model GetPeripheralBychainperipheralidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 外围设备信息
  peripheral?: Peripheral(name='peripheral'),
}

/**
 * Description: 通过链上外围设备ID获取详情
 * Summary: 通过链上外围设备ID获取详情
 */
async function getPeripheralBychainperipheralid(request: GetPeripheralBychainperipheralidRequest): GetPeripheralBychainperipheralidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getPeripheralBychainperipheralidEx(request, headers, runtime);
}

/**
 * Description: 通过链上外围设备ID获取详情
 * Summary: 通过链上外围设备ID获取详情
 */
async function getPeripheralBychainperipheralidEx(request: GetPeripheralBychainperipheralidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPeripheralBychainperipheralidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.peripheral.bychainperipheralid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetPeripheralByperipheralidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外围设备ID
  peripheralId: string(name='peripheral_id'),
  // 场景码
  // 
  scene: string(name='scene'),
}

model GetPeripheralByperipheralidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 外围设备信息
  // 
  // 
  peripheral?: Peripheral(name='peripheral'),
}

/**
 * Description: 通过外围设备ID获取详情
 * Summary: 通过外围设备ID获取详情
 */
async function getPeripheralByperipheralid(request: GetPeripheralByperipheralidRequest): GetPeripheralByperipheralidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getPeripheralByperipheralidEx(request, headers, runtime);
}

/**
 * Description: 通过外围设备ID获取详情
 * Summary: 通过外围设备ID获取详情
 */
async function getPeripheralByperipheralidEx(request: GetPeripheralByperipheralidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPeripheralByperipheralidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.peripheral.byperipheralid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListPeripheralBysceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  // 
  scene: string(name='scene'),
}

model ListPeripheralBysceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 外围设备信息列表
  // 
  // 
  peripheralList?: [ Peripheral ](name='peripheral_list'),
}

/**
 * Description: 根据场景列举外围设备
 * Summary: 根据场景列举外围设备
 */
async function listPeripheralByscene(request: ListPeripheralBysceneRequest): ListPeripheralBysceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listPeripheralBysceneEx(request, headers, runtime);
}

/**
 * Description: 根据场景列举外围设备
 * Summary: 根据场景列举外围设备
 */
async function listPeripheralBysceneEx(request: ListPeripheralBysceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPeripheralBysceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.peripheral.byscene.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributedeviceByperipheralidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 厂商名称
  corpName?: string(name='corp_name'),
  // 数据模型id
  peripheralDataModelId: string(name='peripheral_data_model_id'),
  // 外围设备ID
  peripheralId: string(name='peripheral_id'),
  // 外围设备名称
  // 
  peripheralName?: string(name='peripheral_name'),
  // 场景码
  scene: string(name='scene'),
  // 设备类型编码
  deviceTypeCode?: long(name='device_type_code'),
  // 设备单价 单位：分
  initialPrice?: long(name='initial_price'),
  // 出厂时间
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 投放时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
}

model CreateDistributedeviceByperipheralidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备Id
  // 
  distributeDeviceId?: string(name='distribute_device_id'),
  // 链上外围设备Id
  // 
  chainPeripheralId?: string(name='chain_peripheral_id'),
}

/**
 * Description: 通过外围设备Id发行
 * Summary: 通过外围设备Id发行
 */
async function createDistributedeviceByperipheralid(request: CreateDistributedeviceByperipheralidRequest): CreateDistributedeviceByperipheralidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributedeviceByperipheralidEx(request, headers, runtime);
}

/**
 * Description: 通过外围设备Id发行
 * Summary: 通过外围设备Id发行
 */
async function createDistributedeviceByperipheralidEx(request: CreateDistributedeviceByperipheralidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributedeviceByperipheralidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.byperipheralid.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributedeviceBychainperipheralidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上外围设备Id
  // 
  chainPeripheralId: string(name='chain_peripheral_id'),
}

model CreateDistributedeviceBychainperipheralidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行外围设备Id
  // 
  distributeDeviceId?: string(name='distribute_device_id'),
}

/**
 * Description: 通过链上外围设备Id发行
 * Summary: 通过链上外围设备Id发行
 */
async function createDistributedeviceBychainperipheralid(request: CreateDistributedeviceBychainperipheralidRequest): CreateDistributedeviceBychainperipheralidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributedeviceBychainperipheralidEx(request, headers, runtime);
}

/**
 * Description: 通过链上外围设备Id发行
 * Summary: 通过链上外围设备Id发行
 */
async function createDistributedeviceBychainperipheralidEx(request: CreateDistributedeviceBychainperipheralidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributedeviceBychainperipheralidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bychainperipheralid.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReplaceDistributedeviceBychainperipheralidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发行外围设备Id
  // 
  // 
  distributeDeviceId: string(name='distribute_device_id'),
  // 链上外围设备ID
  chainPeripheralId: string(name='chain_peripheral_id'),
}

model ReplaceDistributedeviceBychainperipheralidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 替换发行外围设备 by 链上外围设备ID
 * Summary: 替换发行外围设备 by 链上外围设备ID
 */
async function replaceDistributedeviceBychainperipheralid(request: ReplaceDistributedeviceBychainperipheralidRequest): ReplaceDistributedeviceBychainperipheralidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return replaceDistributedeviceBychainperipheralidEx(request, headers, runtime);
}

/**
 * Description: 替换发行外围设备 by 链上外围设备ID
 * Summary: 替换发行外围设备 by 链上外围设备ID
 */
async function replaceDistributedeviceBychainperipheralidEx(request: ReplaceDistributedeviceBychainperipheralidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReplaceDistributedeviceBychainperipheralidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bychainperipheralid.replace', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDistributedeviceByperipheralsceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
}

model ListDistributedeviceByperipheralsceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行的外围设备信息数组
  // 
  distributeDeviceList?: [ DistributeDevice ](name='distribute_device_list'),
}

/**
 * Description: 根据场景列举发行外围设备
 * Summary: 根据场景列举发行外围设备
 */
async function listDistributedeviceByperipheralscene(request: ListDistributedeviceByperipheralsceneRequest): ListDistributedeviceByperipheralsceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDistributedeviceByperipheralsceneEx(request, headers, runtime);
}

/**
 * Description: 根据场景列举发行外围设备
 * Summary: 根据场景列举发行外围设备
 */
async function listDistributedeviceByperipheralsceneEx(request: ListDistributedeviceByperipheralsceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDistributedeviceByperipheralsceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.byperipheralscene.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDistributedeviceByperipheralidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外围设备Id数组
  peripheralIdList: [ string ](name='peripheral_id_list'),
  // 场景码
  scene: string(name='scene'),
}

model GetDistributedeviceByperipheralidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备信息数组
  distributeDeviceList?: [ DistributeDevice ](name='distribute_device_list'),
  // 发行设备信息不存在的外围设备ID集合
  missPeripheralIdList?: [ string ](name='miss_peripheral_id_list'),
  // 获取外围设备信息成功的外围设备ID集合
  successPeripheralIdList?: [ string ](name='success_peripheral_id_list'),
}

/**
 * Description: 通过外围设备ID获取发行外围设备信息
 * Summary: 通过外围设备ID获取发行外围设备信息
 */
async function getDistributedeviceByperipheralid(request: GetDistributedeviceByperipheralidRequest): GetDistributedeviceByperipheralidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDistributedeviceByperipheralidEx(request, headers, runtime);
}

/**
 * Description: 通过外围设备ID获取发行外围设备信息
 * Summary: 通过外围设备ID获取发行外围设备信息
 */
async function getDistributedeviceByperipheralidEx(request: GetDistributedeviceByperipheralidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDistributedeviceByperipheralidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.byperipheralid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributedeviceBydeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备Id
  // 
  deviceId: string(name='device_id'),
  // 设备数据模型Id
  // 
  // 
  dataModelId: string(name='data_model_id'),
  // 场景码 
  // 
  // 
  scene: string(name='scene'),
  // 设备注册信息
  // 
  // 
  content: string(name='content'),
  // 签名
  // 
  // 
  signature: string(name='signature'),
  // sdk版本号
  // 
  // 
  sdkId: string(name='sdk_id'),
  // 设备类型编码，必填，对应资管平台中的设备类型 
  // 
  // 枚举值：
  // 
  // 车辆 1000 
  // 车辆 四轮车 1001 
  // 车辆 四轮车 纯电四轮车 1002 
  // 车辆 四轮车 混动四轮车 1003 
  // 车辆 四轮车 燃油四轮车 1004 
  // 车辆 两轮车 1011 
  // 车辆 两轮车 两轮单车 1012 
  // 车辆 两轮车 两轮助力车 1013 
  // 
  // 换电柜 2000 
  // 换电柜 二轮车换电柜 2001 
  // 
  // 电池 3000 
  // 电池 磷酸铁电池 3001 
  // 电池 三元锂电池 3002 
  // 
  // 回收设备 4000 
  // 
  // 垃圾分类回收 4001 
  // 
  // 洗车机 5000
  // 
  // 通用计算设备	                6000
  // 	移动设备		        6001
  // 		智能手机	        6002
  // 		工业掌机	        6003
  // 		平板电脑	        6004
  // 	云设备		        6011
  // 		云计算服务器	6012
  deviceTypeCode?: long(name='device_type_code'),
  // 设备单价 单位：分
  initialPrice?: long(name='initial_price'),
  // 出厂时间
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 投放时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
  // 设备型号
  deviceName: string(name='device_name'),
}

model CreateDistributedeviceBydeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上设备Id
  // 
  // 
  chainDeviceid?: string(name='chain_deviceid'),
  // 发行设备Id
  // 
  // 
  distributeDeviceId?: string(name='distribute_device_id'),
}

/**
 * Description: 发行设备by_devcie
 * Summary: 发行设备by_devcie
 */
async function createDistributedeviceBydevice(request: CreateDistributedeviceBydeviceRequest): CreateDistributedeviceBydeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributedeviceBydeviceEx(request, headers, runtime);
}

/**
 * Description: 发行设备by_devcie
 * Summary: 发行设备by_devcie
 */
async function createDistributedeviceBydeviceEx(request: CreateDistributedeviceBydeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributedeviceBydeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bydevice.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备Id
  // 
  // 
  deviceId: string(name='device_id'),
  // 远程命令
  // 
  // 
  cmd: string(name='cmd'),
  // 附加信息
  // 
  // 
  extra: string(name='extra'),
  // 场景码 
  // 
  // 
  scene: string(name='scene'),
  // 设备类型
  deviceType: string(name='device_type'),
}

model CreateTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务Id
  // 
  // 
  taskId?: string(name='task_id'),
}

/**
 * Description: 远程任务创建
 * Summary: 远程任务创建
 */
async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTaskEx(request, headers, runtime);
}

/**
 * Description: 远程任务创建
 * Summary: 远程任务创建
 */
async function createTaskEx(request: CreateTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.task.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务Id
  // 
  // 
  taskId: string(name='task_id'),
  // 场景码 
  // 
  // 
  scene: string(name='scene'),
}

model QueryTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务状态
  // 
  // 
  status?: string(name='status'),
}

/**
 * Description: 远程任务查询
 * Summary: 远程任务查询
 */
async function queryTask(request: QueryTaskRequest): QueryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTaskEx(request, headers, runtime);
}

/**
 * Description: 远程任务查询
 * Summary: 远程任务查询
 */
async function queryTaskEx(request: QueryTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.task.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAnalysisRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发行设备Id集合
  // 
  // 
  disIdList?: [ string ](name='dis_id_list'),
  // 时间，格式YYYYMMDD
  // 
  // 
  time: string(name='time'),
  // 场景码
  scene: string(name='scene'),
  // SCENE : 场景设备资产分析   DEVICE：设备分析 BIZ：订单分析   ， 默认为DEVICE
  scope?: string(name='scope'),
}

model QueryAnalysisResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分析数据，根据不同场景的不同json串
  resultList?: [ string ](name='result_list'),
}

/**
 * Description: 分析数据查询
 * Summary: 分析数据查询
 */
async function queryAnalysis(request: QueryAnalysisRequest): QueryAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAnalysisEx(request, headers, runtime);
}

/**
 * Description: 分析数据查询
 * Summary: 分析数据查询
 */
async function queryAnalysisEx(request: QueryAnalysisRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAnalysisResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.analysis.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendCollectorBychainidmulRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 上传数据
  // 
  // 
  content: [ CollectContent ](name='content'),
  // 随机业务号，防重放
  // 
  // 
  nonce: string(name='nonce'),
}

model SendCollectorBychainidmulResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 上传数据mul（可能是多个不同的设备分别产生的多条数据）
 * Summary: 上传设备数据mul
 */
async function sendCollectorBychainidmul(request: SendCollectorBychainidmulRequest): SendCollectorBychainidmulResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendCollectorBychainidmulEx(request, headers, runtime);
}

/**
 * Description: 上传数据mul（可能是多个不同的设备分别产生的多条数据）
 * Summary: 上传设备数据mul
 */
async function sendCollectorBychainidmulEx(request: SendCollectorBychainidmulRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendCollectorBychainidmulResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.collector.bychainidmul.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendCollectorDevicebizdataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据模型Id
  // 
  // 
  dataModelId: string(name='data_model_id'),
  // 业务号，防重放
  // 
  // 
  nonce: string(name='nonce'),
  // 上传数据
  content: [ BizContentGroup ](name='content'),
  // 场景码
  scene: string(name='scene'),
}

model SendCollectorDevicebizdataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 上传设备业务数据
 * Summary: 上传设备业务数据
 */
async function sendCollectorDevicebizdata(request: SendCollectorDevicebizdataRequest): SendCollectorDevicebizdataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendCollectorDevicebizdataEx(request, headers, runtime);
}

/**
 * Description: 上传设备业务数据
 * Summary: 上传设备业务数据
 */
async function sendCollectorDevicebizdataEx(request: SendCollectorDevicebizdataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendCollectorDevicebizdataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.collector.devicebizdata.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDeviceInfobydeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备Id
  deviceId: string(name='device_id'),
  // 设备数据模型Id
  // 
  // 
  dataModelId: string(name='data_model_id'),
  // 场景码 
  // 
  // 
  scene: string(name='scene'),
  // sdk版本号
  // 
  // 
  sdkId: string(name='sdk_id'),
  // 设备注册信息
  // 
  // 
  content: string(name='content'),
  // 签名
  signature: string(name='signature'),
  // 设备类型编码，必填，对应资管平台中的设备类型 
  // 
  // 枚举值：
  // 
  // 车辆 1000 
  // 车辆 四轮车 1001 
  // 车辆 四轮车 纯电四轮车 1002 
  // 车辆 四轮车 混动四轮车 1003 
  // 车辆 四轮车 燃油四轮车 1004 
  // 车辆 两轮车 1011 
  // 车辆 两轮车 两轮单车 1012 
  // 车辆 两轮车 两轮助力车 1013 
  // 
  // 换电柜 2000 
  // 换电柜 二轮车换电柜 2001 
  // 
  // 电池 3000 
  // 电池 磷酸铁电池 3001 
  // 电池 三元锂电池 3002 
  // 
  // 回收设备 4000 
  // 
  // 垃圾分类回收 4001 
  // 
  // 洗车机 5000
  // 
  // 通用计算设备	                6000
  // 	移动设备		        6001
  // 		智能手机	        6002
  // 		工业掌机	        6003
  // 		平板电脑	        6004
  // 	云设备		        6011
  // 		云计算服务器	6012
  deviceTypeCode: long(name='device_type_code'),
  // 设备单价 单位：分
  initialPrice: long(name='initial_price'),
  // 出厂时间
  // 
  factoryTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 投放时间
  // 
  releaseTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
  // 设备型号
  deviceName?: string(name='device_name'),
}

model UpdateDeviceInfobydeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上设备Id
  // 
  // 
  chainDeviceId?: string(name='chain_device_id'),
  // 发行设备Id
  // 
  // 
  distributeDeviceId?: string(name='distribute_device_id'),
}

/**
 * Description: 更新设备信息by_devcie
 * Summary: 更新设备信息by_devcie
 */
async function updateDeviceInfobydevice(request: UpdateDeviceInfobydeviceRequest): UpdateDeviceInfobydeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDeviceInfobydeviceEx(request, headers, runtime);
}

/**
 * Description: 更新设备信息by_devcie
 * Summary: 更新设备信息by_devcie
 */
async function updateDeviceInfobydeviceEx(request: UpdateDeviceInfobydeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDeviceInfobydeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.infobydevice.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OfflineDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备链上Id
  // 
  // 
  chainDeviceId: string(name='chain_device_id'),
}

model OfflineDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 下线设备
 * Summary: 下线设备
 */
async function offlineDevice(request: OfflineDeviceRequest): OfflineDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return offlineDeviceEx(request, headers, runtime);
}

/**
 * Description: 下线设备
 * Summary: 下线设备
 */
async function offlineDeviceEx(request: OfflineDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.offline', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyMqtokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
  // 设备ID
  deviceId: string(name='device_id'),
}

model ApplyMqtokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务端返回的Token值，用于阿里云 MQTT连接
  token?: string(name='token'),
  // 接入阿里云LMQ的所需的accessKey
  accessKey?: string(name='access_key'),
  // mqtt的instanceId
  instanceId?: string(name='instance_id'),
  // mqtt的topic
  subTopic?: string(name='sub_topic'),
  // mqtt的topic
  pubTopic?: string(name='pub_topic'),
  // mqtt的groupId
  groupId?: string(name='group_id'),
}

/**
 * Description: 申请MQTT token
 * Summary: 申请MQTT token
 */
async function applyMqtoken(request: ApplyMqtokenRequest): ApplyMqtokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyMqtokenEx(request, headers, runtime);
}

/**
 * Description: 申请MQTT token
 * Summary: 申请MQTT token
 */
async function applyMqtokenEx(request: ApplyMqtokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyMqtokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.mqtoken.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceRegistrationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备Id，由接入方提供，场景内唯一
  deviceId: string(name='device_id'),
  // 场景号
  scene: string(name='scene'),
  // 可信根派生公钥
  devicePublicKey: string(name='device_public_key'),
}

model QueryDeviceRegistrationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 查询设备所注册的公钥是否正确
 * Summary: 查询注册信息
 */
async function queryDeviceRegistration(request: QueryDeviceRegistrationRequest): QueryDeviceRegistrationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceRegistrationEx(request, headers, runtime);
}

/**
 * Description: 查询设备所注册的公钥是否正确
 * Summary: 查询注册信息
 */
async function queryDeviceRegistrationEx(request: QueryDeviceRegistrationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceRegistrationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.registration.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddAbnormalRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备Id，由接入方提供，场景内唯一 
  deviceId: string(name='device_id'),
  // 场景号
  scene: string(name='scene'),
  // 异常类型编码KEY_NOT_FOUND、DEVICE_ID_MISMATCH 等
  abnormalCode: string(name='abnormal_code'),
}

model AddAbnormalResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设备异常上报
 * Summary: 设备异常上报
 */
async function addAbnormal(request: AddAbnormalRequest): AddAbnormalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addAbnormalEx(request, headers, runtime);
}

/**
 * Description: 设备异常上报
 * Summary: 设备异常上报
 */
async function addAbnormalEx(request: AddAbnormalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddAbnormalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.abnormal.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OnlineDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备链上ID
  chainDeviceId: string(name='chain_device_id'),
}

model OnlineDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设备下线后，可通过此接口重新上线
 * Summary: 设置设备状态为上线
 */
async function onlineDevice(request: OnlineDeviceRequest): OnlineDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return onlineDeviceEx(request, headers, runtime);
}

/**
 * Description: 设备下线后，可通过此接口重新上线
 * Summary: 设置设备状态为上线
 */
async function onlineDeviceEx(request: OnlineDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OnlineDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.online', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OfflineDeviceByunregisterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 通过链上设备ID注销设备
  chainDeviceId: string(name='chain_device_id'),
}

model OfflineDeviceByunregisterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 注销设备
 * Summary: 注销设备
 */
async function offlineDeviceByunregister(request: OfflineDeviceByunregisterRequest): OfflineDeviceByunregisterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return offlineDeviceByunregisterEx(request, headers, runtime);
}

/**
 * Description: 注销设备
 * Summary: 注销设备
 */
async function offlineDeviceByunregisterEx(request: OfflineDeviceByunregisterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineDeviceByunregisterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.byunregister.offline', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLabelTraceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码 , 使用asset_id 查询时，scene也必须传入
  scene?: string(name='scene'),
  // 标签Id
  labelId?: string(name='label_id'),
  // 标签状态
  labelStatus?: string(name='label_status'),
  // 资产Id
  assetId?: string(name='asset_id'),
  // 操作员
  operator?: string(name='operator'),
  // 标签拥有者
  owner?: string(name='owner'),
  // 标签所处流程
  process?: string(name='process'),
  // 标签操作
  action?: string(name='action'),
  // 开始时间
  startTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_time'),
  // 结束时间
  endTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='end_time'),
}

model QueryLabelTraceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 标签流转历史
  labelTraceList?: [ LabelTrace ](name='label_trace_list'),
}

/**
 * Description: 标签状态查询
 * Summary: 标签状态查询
 */
async function queryLabelTrace(request: QueryLabelTraceRequest): QueryLabelTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLabelTraceEx(request, headers, runtime);
}

/**
 * Description: 标签状态查询
 * Summary: 标签状态查询
 */
async function queryLabelTraceEx(request: QueryLabelTraceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLabelTraceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.label.trace.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncLabelTransferRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
  // 收集标签数据
  collectLabelContentList: [ CollectLabelContent ](name='collect_label_content_list'),
  // 业务号
  nonce: string(name='nonce'),
}

model SyncLabelTransferResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 标签上链hash返回
  resultList?: [ LabelChainResult ](name='result_list'),
}

/**
 * Description: 标签流转状态同步
 * Summary: 标签流转状态同步
 */
async function syncLabelTransfer(request: SyncLabelTransferRequest): SyncLabelTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncLabelTransferEx(request, headers, runtime);
}

/**
 * Description: 标签流转状态同步
 * Summary: 标签流转状态同步
 */
async function syncLabelTransferEx(request: SyncLabelTransferRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncLabelTransferResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.label.transfer.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddLabelAssetRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
  // 标签Id
  labelId: string(name='label_id'),
  // 资产Id
  assetId: string(name='asset_id'),
  // 资产对应的设备类型码，对应资管平台中的设备类型
  deviceTypeCode?: long(name='device_type_code'),
}

model AddLabelAssetResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 标签资产绑定
 * Summary: 标签资产绑定
 */
async function addLabelAsset(request: AddLabelAssetRequest): AddLabelAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addLabelAssetEx(request, headers, runtime);
}

/**
 * Description: 标签资产绑定
 * Summary: 标签资产绑定
 */
async function addLabelAssetEx(request: AddLabelAssetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddLabelAssetResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.label.asset.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDataBytxhashRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
  // 链上交易hash
  txHash: string(name='tx_hash'),
  // 上链类型枚举： 
  // REGISTER_DEVICE	设备注册
  // DISTRIBUTE_DEVICE	设备发行
  // LABEL_DATA	标签流转数据收集
  // COLLECT_DATA	设备数据收集
  // DEVICE_BIZ_DATA	设备业务订单数据收集
  // REGISTER_PERIPHERAL_DEVICE	外围设备注册
  contractMethod: string(name='contract_method'),
}

model QueryDataBytxhashResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回信息
  result?: string(name='result'),
}

/**
 * Description: 通过tx_hash查询上链信息
 * Summary: 链上信息查询
 */
async function queryDataBytxhash(request: QueryDataBytxhashRequest): QueryDataBytxhashResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDataBytxhashEx(request, headers, runtime);
}

/**
 * Description: 通过tx_hash查询上链信息
 * Summary: 链上信息查询
 */
async function queryDataBytxhashEx(request: QueryDataBytxhashRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDataBytxhashResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.data.bytxhash.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecUnprocessedTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务ID
  taskId: string(name='task_id'),
  // 任务名称枚举
  // confirm_device_state : 确认设备状态变更
  action: string(name='action'),
  // 任务参数
  params: string(name='params'),
}

model ExecUnprocessedTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 根据taskId 执行未处理的任务
 * Summary: 执行未处理的任务
 */
async function execUnprocessedTask(request: ExecUnprocessedTaskRequest): ExecUnprocessedTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execUnprocessedTaskEx(request, headers, runtime);
}

/**
 * Description: 根据taskId 执行未处理的任务
 * Summary: 执行未处理的任务
 */
async function execUnprocessedTaskEx(request: ExecUnprocessedTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecUnprocessedTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.unprocessed.task.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendCollectorSummarydataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 汇总所属的场景码
  scene: string(name='scene'),
  // 汇总的业务类型，同一个scene下可以有不同的业务类型，此字段用于区分业务类型
  bizType: string(name='biz_type'),
  // 提交日期（汇总所属的日期）
  submitDate: string(name='submit_date'),
  // 汇总数据的数据模型ID
  dataModelId: string(name='data_model_id'),
  // 汇总数据的内容，格式遵循data_model_id制定的格式
  content: string(name='content'),
}

model SendCollectorSummarydataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 上传汇总数据
 * Summary: 上传汇总数据
 */
async function sendCollectorSummarydata(request: SendCollectorSummarydataRequest): SendCollectorSummarydataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendCollectorSummarydataEx(request, headers, runtime);
}

/**
 * Description: 上传汇总数据
 * Summary: 上传汇总数据
 */
async function sendCollectorSummarydataEx(request: SendCollectorSummarydataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendCollectorSummarydataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.collector.summarydata.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddCertificateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 机构Id
  organizationId?: long(name='organization_id'),
  // 证书内容
  certificate: string(name='certificate'),
  // 设备ID
  deviceId: string(name='device_id'),
  // 主机设备ID
  hostDeviceId: string(name='host_device_id'),
  // 场景码
  projectId: string(name='project_id'),
}

model AddCertificateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 原始数据
  rawData?: string(name='raw_data'),
  // 对raw_data的签名
  platformSignature?: string(name='platform_signature'),
  // 执行结果成功与否
  success?: boolean(name='success'),
  // 错误码
  errorCode?: long(name='error_code'),
}

/**
 * Description: 根据请求体内容保存密钥
 * Summary: 保存公钥
 */
async function addCertificate(request: AddCertificateRequest): AddCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addCertificateEx(request, headers, runtime);
}

/**
 * Description: 根据请求体内容保存密钥
 * Summary: 保存公钥
 */
async function addCertificateEx(request: AddCertificateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddCertificateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.certificate.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户
  tenantName: string(name='tenant_name'),
  // 组织名称
  orgName: string(name='org_name'),
  // 企业执照号
  owner?: string(name='owner'),
  // 网关私钥
  gatewayPrivateKey?: string(name='gateway_private_key'),
  // 网关公钥
  gatewayPublicKey?: string(name='gateway_public_key'),
}

model AddTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增租户
 * Summary: 新增租户
 */
async function addTenant(request: AddTenantRequest): AddTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addTenantEx(request, headers, runtime);
}

/**
 * Description: 新增租户
 * Summary: 新增租户
 */
async function addTenantEx(request: AddTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tenant.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景名称
  sceneName: string(name='scene_name'),
  // 是否托管,取值范围为：NON_ESCROWED、ESCROWED
  escrowed: string(name='escrowed'),
  // 私钥密码
  privateKeyPassword: string(name='private_key_password'),
  // 租户
  tenantName: string(name='tenant_name'),
  // 场景类型
  sceneType: string(name='scene_type'),
}

model AddSceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增场景码
 * Summary: 新增场景码
 */
async function addScene(request: AddSceneRequest): AddSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSceneEx(request, headers, runtime);
}

/**
 * Description: 新增场景码
 * Summary: 新增场景码
 */
async function addSceneEx(request: AddSceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.scene.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeploySceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景名称
  sceneName: string(name='scene_name'),
  // 链ID
  bnaasBasicServiceDid: string(name='bnaas_basic_service_did'),
}

model DeploySceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 部署场景合同
 * Summary: 部署场景合同
 */
async function deployScene(request: DeploySceneRequest): DeploySceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deploySceneEx(request, headers, runtime);
}

/**
 * Description: 部署场景合同
 * Summary: 部署场景合同
 */
async function deploySceneEx(request: DeploySceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeploySceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.scene.deploy', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSdkRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备SDK公钥
  verifyKey: string(name='verify_key'),
  // SDK版本号
  sdkVersionStr: string(name='sdk_version_str'),
  // sdk模型，格式为json
  metaModel: string(name='meta_model'),
  // 平台
  platform?: string(name='platform'),
  // 公司名称
  corpName: string(name='corp_name'),
}

model AddSdkResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增sdk
 * Summary: 新增sdk
 */
async function addSdk(request: AddSdkRequest): AddSdkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSdkEx(request, headers, runtime);
}

/**
 * Description: 新增sdk
 * Summary: 新增sdk
 */
async function addSdkEx(request: AddSdkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSdkResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.sdk.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSdkRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键id
  id: long(name='id'),
  // 设备SDK公钥
  verifyKey?: string(name='verify_key'),
  // SDK版本号
  sdkVersionStr?: string(name='sdk_version_str'),
  // sdk模型，格式为json
  metaModel?: string(name='meta_model'),
  // 平台
  platform?: string(name='platform'),
  // 公司名称
  // 
  corpName?: string(name='corp_name'),
}

model UpdateSdkResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新sdk
 * Summary: 更新sdk
 */
async function updateSdk(request: UpdateSdkRequest): UpdateSdkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSdkEx(request, headers, runtime);
}

/**
 * Description: 更新sdk
 * Summary: 更新sdk
 */
async function updateSdkEx(request: UpdateSdkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSdkResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.sdk.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddProductkeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备端productKey
  productKey: string(name='product_key'),
  // 场景码
  scene: string(name='scene'),
  // 租户ID
  tenantName: string(name='tenant_name'),
  // 数据模型
  dataModelId: string(name='data_model_id'),
  // sdk前缀
  sdkVersionPrefix: string(name='sdk_version_prefix'),
  // 制造商
  manufacturer: string(name='manufacturer'),
  // 顾客
  customer: string(name='customer'),
}

model AddProductkeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增productKey
 * Summary: 新增productKey
 */
async function addProductkey(request: AddProductkeyRequest): AddProductkeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addProductkeyEx(request, headers, runtime);
}

/**
 * Description: 新增productKey
 * Summary: 新增productKey
 */
async function addProductkeyEx(request: AddProductkeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddProductkeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.productkey.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateProductkeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键id
  id: long(name='id'),
  // 设备端productKey
  // 
  productKey?: string(name='product_key'),
  // 场景码
  // 
  scene?: string(name='scene'),
  // 租户ID
  // 
  tenantName?: string(name='tenant_name'),
  // 数据模型
  // 
  dataModelId?: string(name='data_model_id'),
  // sdk前缀
  sdkVersionPrefix?: string(name='sdk_version_prefix'),
  // 制造商
  // 
  manufacturer?: string(name='manufacturer'),
  // 顾客
  customer?: string(name='customer'),
}

model UpdateProductkeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新productKey
 * Summary: 更新productKey
 */
async function updateProductkey(request: UpdateProductkeyRequest): UpdateProductkeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateProductkeyEx(request, headers, runtime);
}

/**
 * Description: 更新productKey
 * Summary: 更新productKey
 */
async function updateProductkeyEx(request: UpdateProductkeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProductkeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.productkey.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键Id
  id: long(name='id'),
  // 租户
  tenantName?: string(name='tenant_name'),
  // 组织名称
  orgName?: string(name='org_name'),
  // 企业执照号
  // 
  owner?: string(name='owner'),
  // 网关私钥
  // 
  gatewayPrivateKey?: string(name='gateway_private_key'),
  // 网关公钥
  // 
  gatewayPublicKey?: string(name='gateway_public_key'),
}

model UpdateTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新租户
 * Summary: 更新租户
 */
async function updateTenant(request: UpdateTenantRequest): UpdateTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTenantEx(request, headers, runtime);
}

/**
 * Description: 更新租户
 * Summary: 更新租户
 */
async function updateTenantEx(request: UpdateTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tenant.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键Id 
  id: long(name='id'),
  // 是否跳过中台数据校验处理
  skipPegasus: boolean(name='skip_pegasus'),
  // 场景名称
  // 
  sceneName?: string(name='scene_name'),
  // 租户
  // 
  tenantName?: string(name='tenant_name'),
  // 场景类型
  // 
  sceneType?: string(name='scene_type'),
  // 定制数据处理类 , 使用用逗号分隔
  customerProcessor?: string(name='customer_processor'),
}

model UpdateSceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新场景码
 * Summary: 更新场景码
 */
async function updateScene(request: UpdateSceneRequest): UpdateSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSceneEx(request, headers, runtime);
}

/**
 * Description: 更新场景码
 * Summary: 更新场景码
 */
async function updateSceneEx(request: UpdateSceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.scene.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendLabelTransferonasyncRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  // 
  scene: string(name='scene'),
  // 收集的标签流转数据
  collectLabelContentList: [ CollectLabelContent ](name='collect_label_content_list'),
  // 业务号，防重放
  nonce: string(name='nonce'),
  // 1 业务端查询结果的最晚时间
  // 2 单位：天，最大值为30 天
  // 3 在responsePeriod 天之后，调用异步接口结果查询 将 无法获取异步接口的执行结果
  responsePeriod: long(name='response_period'),
}

model SendLabelTransferonasyncResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 接口请求的唯一标识
  requestId?: string(name='request_id'),
}

/**
 * Description: 上报标签流转的异步接口，是 blockchain.bot.label.transfer.sync的异步接口版本
 * Summary: 上报标签流转的异步接口
 */
async function sendLabelTransferonasync(request: SendLabelTransferonasyncRequest): SendLabelTransferonasyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendLabelTransferonasyncEx(request, headers, runtime);
}

/**
 * Description: 上报标签流转的异步接口，是 blockchain.bot.label.transfer.sync的异步接口版本
 * Summary: 上报标签流转的异步接口
 */
async function sendLabelTransferonasyncEx(request: SendLabelTransferonasyncRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendLabelTransferonasyncResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.label.transferonasync.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAsyncRequestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求的唯一标识
  requestId: string(name='request_id'),
}

model QueryAsyncRequestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 执行状态 枚举
  // RUNNING	请求正在处理
  // SUCCESS	请求处理成功
  // FAILED	请求处理失败
  status?: string(name='status'),
  // 异步接口的执行结果 ：根据同步接口的出参构建的JSON字符串
  response?: string(name='response'),
}

/**
 * Description: 调用异步接口后，在reponsePeriod 天内，可调用此接口查询异步接口的执行结果 
 * Summary: 异步接口结果查询
 */
async function queryAsyncRequest(request: QueryAsyncRequestRequest): QueryAsyncRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAsyncRequestEx(request, headers, runtime);
}

/**
 * Description: 调用异步接口后，在reponsePeriod 天内，可调用此接口查询异步接口的执行结果 
 * Summary: 异步接口结果查询
 */
async function queryAsyncRequestEx(request: QueryAsyncRequestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAsyncRequestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.async.request.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页数，默认1
  pageIndex: long(name='page_index'),
  // 页码大小，默认10，最大100
  pageSize: long(name='page_size'),
  // 租户
  tenantName?: string(name='tenant_name'),
}

model PagequeryTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页查询结果
  data?: PermissionedTenantPageResponse(name='data'),
}

/**
 * Description: 分页查询租户
 * Summary: 分页查询租户
 */
async function pagequeryTenant(request: PagequeryTenantRequest): PagequeryTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryTenantEx(request, headers, runtime);
}

/**
 * Description: 分页查询租户
 * Summary: 分页查询租户
 */
async function pagequeryTenantEx(request: PagequeryTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tenant.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequerySceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页数，默认1
  pageIndex: long(name='page_index'),
  // 页码大小，默认10
  pageSize: long(name='page_size'),
  // 场景码
  sceneName?: string(name='scene_name'),
}

model PagequerySceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页查询结果
  data?: ScenePageResponse(name='data'),
}

/**
 * Description: 分页查询场景码
 * Summary: 分页查询场景码
 */
async function pagequeryScene(request: PagequerySceneRequest): PagequerySceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequerySceneEx(request, headers, runtime);
}

/**
 * Description: 分页查询场景码
 * Summary: 分页查询场景码
 */
async function pagequerySceneEx(request: PagequerySceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequerySceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.scene.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequerySdkRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页数，默认1
  pageIndex: long(name='page_index'),
  // 页码大小，默认10，最大100
  pageSize: long(name='page_size'),
  // sdk版本号
  sdkVersionStr?: string(name='sdk_version_str'),
  // 公司名称
  corpName?: string(name='corp_name'),
}

model PagequerySdkResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页查询结果
  data?: SdkPageResponse(name='data'),
}

/**
 * Description: 分页查询sdk
 * Summary: 分页查询sdk
 */
async function pagequerySdk(request: PagequerySdkRequest): PagequerySdkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequerySdkEx(request, headers, runtime);
}

/**
 * Description: 分页查询sdk
 * Summary: 分页查询sdk
 */
async function pagequerySdkEx(request: PagequerySdkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequerySdkResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.sdk.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryProductkeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页数，默认1
  pageIndex: long(name='page_index'),
  // 页码大小，默认10，最大100
  pageSize: long(name='page_size'),
  // 设备端productKey
  productKey?: string(name='product_key'),
  // 场景码
  // 
  scene?: string(name='scene'),
  // 租户ID
  // 
  tenantName?: string(name='tenant_name'),
}

model PagequeryProductkeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页查询结果
  data?: ProductKeyPageResponse(name='data'),
}

/**
 * Description: 分页查询productKey
 * Summary: 分页查询productKey
 */
async function pagequeryProductkey(request: PagequeryProductkeyRequest): PagequeryProductkeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryProductkeyEx(request, headers, runtime);
}

/**
 * Description: 分页查询productKey
 * Summary: 分页查询productKey
 */
async function pagequeryProductkeyEx(request: PagequeryProductkeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryProductkeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.productkey.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryDataverifyFailureRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页数，默认1
  pageIndex: long(name='page_index'),
  // 页码大小，默认10
  pageSize: long(name='page_size'),
  // 场景码
  // 
  scene: string(name='scene'),
  // 起始查询时间
  startDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_date'),
  // 结束查询时间
  endDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='end_date'),
  // 设备ID（模糊查询）
  deviceId?: string(name='device_id'),
  // 数据来源：0(普通数据上报)；1(MAAS数据上报)；2(设备业务数据上报);3(标签流转)
  source?: long(name='source'),
  // 类型：0:数据上报;1:数据完整性校验
  type?: long(name='type'),
}

model PagequeryDataverifyFailureResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据
  data?: DataVerifyFailureDataPageResponse(name='data'),
}

/**
 * Description: 分页查询校验失败的数据
 * Summary: 分页查询校验失败的数据
 */
async function pagequeryDataverifyFailure(request: PagequeryDataverifyFailureRequest): PagequeryDataverifyFailureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryDataverifyFailureEx(request, headers, runtime);
}

/**
 * Description: 分页查询校验失败的数据
 * Summary: 分页查询校验失败的数据
 */
async function pagequeryDataverifyFailureEx(request: PagequeryDataverifyFailureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryDataverifyFailureResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.dataverify.failure.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddAlertStrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户
  tenantName: string(name='tenant_name'),
  // 场景码
  scene?: string(name='scene'),
  // 策略类型：DEBUG（技术联调）；MONITOR（生产监控）
  strategyType: string(name='strategy_type'),
  // 策略详情，json格式
  strategyDetail: string(name='strategy_detail'),
  // 是否启用，默认false
  enabled: boolean(name='enabled'),
  // 备注
  remark?: string(name='remark'),
}

model AddAlertStrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description:  新增告警策略
 * Summary:  新增告警策略
 */
async function addAlertStrategy(request: AddAlertStrategyRequest): AddAlertStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addAlertStrategyEx(request, headers, runtime);
}

/**
 * Description:  新增告警策略
 * Summary:  新增告警策略
 */
async function addAlertStrategyEx(request: AddAlertStrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddAlertStrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.alert.strategy.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAlertStrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键ID，更新依据
  id: long(name='id'),
  // 租户
  tenantName?: string(name='tenant_name'),
  // 场景码
  // 
  scene?: string(name='scene'),
  // 策略类型：DEBUG（技术联调）；MONITOR（生产监控）
  strategyType?: string(name='strategy_type'),
  // 策略详情，json格式
  strategyDetail?: string(name='strategy_detail'),
  // 是否启用，默认false
  enabled: boolean(name='enabled'),
  // 备注
  // 
  remark?: string(name='remark'),
}

model UpdateAlertStrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新告警策略接口
 * Summary: 更新告警策略接口
 */
async function updateAlertStrategy(request: UpdateAlertStrategyRequest): UpdateAlertStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAlertStrategyEx(request, headers, runtime);
}

/**
 * Description: 更新告警策略接口
 * Summary: 更新告警策略接口
 */
async function updateAlertStrategyEx(request: UpdateAlertStrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAlertStrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.alert.strategy.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryAlertStrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页数，默认1
  pageIndex: long(name='page_index'),
  // 页码大小，默认10
  pageSize: long(name='page_size'),
  // 租户
  tenantName?: string(name='tenant_name'),
  // 场景码
  // 
  scene?: string(name='scene'),
}

model PagequeryAlertStrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据
  data?: AlertStrategyPageResponse(name='data'),
}

/**
 * Description: 分页查询告警策略接口
 * Summary: 分页查询告警策略接口
 */
async function pagequeryAlertStrategy(request: PagequeryAlertStrategyRequest): PagequeryAlertStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryAlertStrategyEx(request, headers, runtime);
}

/**
 * Description: 分页查询告警策略接口
 * Summary: 分页查询告警策略接口
 */
async function pagequeryAlertStrategyEx(request: PagequeryAlertStrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryAlertStrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.alert.strategy.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncLabelTransferrawRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  // 
  scene: string(name='scene'),
  // 收集标签数据
  collectLabelRawContentList: [ CollectLabelRawContent ](name='collect_label_raw_content_list'),
  // 业务号
  nonce: string(name='nonce'),
}

model SyncLabelTransferrawResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 标签上链hash返回
  resultList?: [ LabelChainResult ](name='result_list'),
}

/**
 * Description: 标签流转状态同步（元数据，无签名）
 * Summary: 标签流转状态同步（元数据，无签名）
 */
async function syncLabelTransferraw(request: SyncLabelTransferrawRequest): SyncLabelTransferrawResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncLabelTransferrawEx(request, headers, runtime);
}

/**
 * Description: 标签流转状态同步（元数据，无签名）
 * Summary: 标签流转状态同步（元数据，无签名）
 */
async function syncLabelTransferrawEx(request: SyncLabelTransferrawRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncLabelTransferrawResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.label.transferraw.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendLabelTransferrawonasyncRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  // 
  scene: string(name='scene'),
  // 收集的标签流转数据
  collectLabelRawContentList: [ CollectLabelRawContent ](name='collect_label_raw_content_list'),
  // 业务号，防重放
  nonce: string(name='nonce'),
  // 1 业务端查询结果的最晚时间 2 单位：天，最大值为30 天 3 在responsePeriod 天之后，调用异步接口结果查询 将 无法获取异步接口的执行结果
  responsePeriod: long(name='response_period'),
}

model SendLabelTransferrawonasyncResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 接口请求的唯一标识
  requestId?: string(name='request_id'),
}

/**
 * Description: 上报标签流转的异步接口（元数据，无签名），是 blockchain.bot.label.transferraw.sync的异步接口版本
 * Summary: 上报标签流转的异步接口（元数据，无签名）
 */
async function sendLabelTransferrawonasync(request: SendLabelTransferrawonasyncRequest): SendLabelTransferrawonasyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendLabelTransferrawonasyncEx(request, headers, runtime);
}

/**
 * Description: 上报标签流转的异步接口（元数据，无签名），是 blockchain.bot.label.transferraw.sync的异步接口版本
 * Summary: 上报标签流转的异步接口（元数据，无签名）
 */
async function sendLabelTransferrawonasyncEx(request: SendLabelTransferrawonasyncRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendLabelTransferrawonasyncResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.label.transferrawonasync.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecThingsdidOneapiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 暂无
  bizContent: string(name='biz_content'),
}

model ExecThingsdidOneapiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 暂无
  rawResponse?: string(name='raw_response'),
}

/**
 * Description: 信物链oneapi
 * Summary: 信物链oneapi
 */
async function execThingsdidOneapi(request: ExecThingsdidOneapiRequest): ExecThingsdidOneapiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execThingsdidOneapiEx(request, headers, runtime);
}

/**
 * Description: 信物链oneapi
 * Summary: 信物链oneapi
 */
async function execThingsdidOneapiEx(request: ExecThingsdidOneapiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecThingsdidOneapiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.oneapi.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartEvidenceStoreRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 信物链存证结构体参数
  evidenceStorageReq: EvidenceStorageReq(name='evidence_storage_req'),
  // 输入唯一交易ID序号，客户端管理短时内唯一
  nonce: string(name='nonce'),
}

model StartEvidenceStoreResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // API消耗时间（毫秒单位）
  costMillis?: long(name='cost_millis'),
  // 暂保留
  dataIndex?: string(name='data_index'),
  // 上链附加备注信息，不做上链存储。
  extInfo?: string(name='ext_info'),
  // 交易ID，等于输入参数同名字段
  nonce?: string(name='nonce'),
  // 本地unix时间戳（毫秒单位）
  timestamp?: long(name='timestamp'),
  // unix链上存储时间戳
  txTimestamp?: long(name='tx_timestamp'),
  // 链上交易地址txHash
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 信物链存证
 * Summary: 信物链存证
 */
async function startEvidenceStore(request: StartEvidenceStoreRequest): StartEvidenceStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startEvidenceStoreEx(request, headers, runtime);
}

/**
 * Description: 信物链存证
 * Summary: 信物链存证
 */
async function startEvidenceStoreEx(request: StartEvidenceStoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartEvidenceStoreResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.evidence.store.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartEvidenceQueryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 信物链单条存证查询请求结构体
  evidenceQueryInfoReq: EvidenceQueryInfoReq(name='evidence_query_info_req'),
  // 输入交易唯一ID，短时内唯一
  nonce: string(name='nonce'),
}

model StartEvidenceQueryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易在区块链所在块高度
  blockHeight?: long(name='block_height'),
  // API消耗时间（毫秒单位）
  costMillis?: long(name='cost_millis'),
  // 唯一ID，等于输入同名参数
  nonce?: string(name='nonce'),
  // unix时间戳(毫秒单位)
  timestamp?: long(name='timestamp'),
  // 区块链交易地址txHash
  txHash?: string(name='tx_hash'),
  // 交易存储区块链的链上unix时间戳
  txTimestamp?: long(name='tx_timestamp'),
  // 信物链查询链上获取的数据，参考结构体定义
  data?: EvidenceBaseModel(name='data'),
}

/**
 * Description: 信物链存证查询
 * Summary: 信物链存证查询
 */
async function startEvidenceQuery(request: StartEvidenceQueryRequest): StartEvidenceQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startEvidenceQueryEx(request, headers, runtime);
}

/**
 * Description: 信物链存证查询
 * Summary: 信物链存证查询
 */
async function startEvidenceQueryEx(request: StartEvidenceQueryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartEvidenceQueryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.evidence.query.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartThingsdidRegisterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 信物链交易唯一ID，代表需要标识的操作ID
  nonce: string(name='nonce'),
  // 注册信物链身份实体请求结构体
  registerReq: ThingsDidRegisterReq(name='register_req'),
}

model StartThingsdidRegisterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 代表本操作是否是异步调用
  // true: 执行完全，非异步操作
  // false: 异步执行，需要根据nonce轮训状态
  executed?: boolean(name='executed'),
  // 代表唯一交易ID，等于输入参数同名字段
  nonce?: string(name='nonce'),
  // 注册成功返回的实体身份DID
  thingDid?: string(name='thing_did'),
}

/**
 * Description: 信物链实体身份注册
 * Summary: 信物链实体身份注册
 */
async function startThingsdidRegister(request: StartThingsdidRegisterRequest): StartThingsdidRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startThingsdidRegisterEx(request, headers, runtime);
}

/**
 * Description: 信物链实体身份注册
 * Summary: 信物链实体身份注册
 */
async function startThingsdidRegisterEx(request: StartThingsdidRegisterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartThingsdidRegisterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.register.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryThingsdidAsyncprocessRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要查询的实体Did，可为空
  thingDid?: string(name='thing_did'),
  // 随机数唯一ID, 用以标识智能合约执行的索引交易ID，需要等于需要轮询的API的nonce
  nonce: string(name='nonce'),
}

model QueryThingsdidAsyncprocessResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 需要查询的实体Did，可为空
  thingDid?: string(name='thing_did'),
  // 随机数, 用以标识智能合约执行的索引，等于输入
  nonce?: string(name='nonce'),
  // 交易执行当前状态，原始文本，和async_code, async_subcode匹配，将来可能会删除此字段
  asyncStatus?: string(name='async_status'),
  // 从智能合约执行返回的结果编码，200成功，其他参考相应文档
  asyncCode?: string(name='async_code'),
  // 可为空，代表async_code信息不能表示完整语义时的子结果码
  asyncSubcode?: string(name='async_subcode'),
}

/**
 * Description: 信物链异步操作查询
智能合约操作由于比较耗时，因此内部实现通过异步实现，调用完exectuted返回是false的API后，需要调用此api来轮询原先操作是否完成。
 * Summary: 信物链异步操作查询
 */
async function queryThingsdidAsyncprocess(request: QueryThingsdidAsyncprocessRequest): QueryThingsdidAsyncprocessResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryThingsdidAsyncprocessEx(request, headers, runtime);
}

/**
 * Description: 信物链异步操作查询
智能合约操作由于比较耗时，因此内部实现通过异步实现，调用完exectuted返回是false的API后，需要调用此api来轮询原先操作是否完成。
 * Summary: 信物链异步操作查询
 */
async function queryThingsdidAsyncprocessEx(request: QueryThingsdidAsyncprocessRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryThingsdidAsyncprocessResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.asyncprocess.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateThingsdidStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 交易唯一ID
  nonce: string(name='nonce'),
  // 状态取如下状态，注册设备身份，默认处于STATUS_REGISTERED，
  // 要更新为STATUS_COMMAND_STOP的设备必须处于STATUS_COMMAND_START，
  // 更新为STATUS_COMMAND_UNREGISTER后，无法更新为其他状态。
  // STATUS_COMMAND_UNREGISTER(注销),
  // STATUS_COMMAND_START(启用),
  // STATUS_COMMAND_STOP(),
  // STATUS_REGISTERED(3),
  status: string(name='status'),
  // 需要更新的实体did
  thingDid: string(name='thing_did'),
}

model UpdateThingsdidStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 代表本操作是否是异步调用 true: 执行完全，非异步操作...
  executed?: boolean(name='executed'),
  // 代表唯一交易ID，等于输入参数同名字段
  nonce?: string(name='nonce'),
  // 注册成功返回的实体身份DID
  thingDid?: string(name='thing_did'),
}

/**
 * Description: 信物链身份状态更新，此API目前仅支持设备状态更新
 * Summary: 信物链身份状态更新
 */
async function updateThingsdidStatus(request: UpdateThingsdidStatusRequest): UpdateThingsdidStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateThingsdidStatusEx(request, headers, runtime);
}

/**
 * Description: 信物链身份状态更新，此API目前仅支持设备状态更新
 * Summary: 信物链身份状态更新
 */
async function updateThingsdidStatusEx(request: UpdateThingsdidStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateThingsdidStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.status.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateThingsdidDevicespaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参考结构体定义
  updateDeviceSpaceReq: UpdateDeviceSpaceReq(name='update_device_space_req'),
  // 交易唯一ID
  nonce: string(name='nonce'),
}

model UpdateThingsdidDevicespaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 代表本操作是否是异步调用 true: 执行完全，非异步操作
  executed?: boolean(name='executed'),
  // 代表唯一交易ID，等于输入参数同名字段
  nonce?: string(name='nonce'),
  // 注册成功返回的实体身份DID
  thingDid?: string(name='thing_did'),
}

/**
 * Description: 信物链设备空间关联更新，完成设备和空间关联绑定
 * Summary: 信物链设备空间关联更新
 */
async function updateThingsdidDevicespace(request: UpdateThingsdidDevicespaceRequest): UpdateThingsdidDevicespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateThingsdidDevicespaceEx(request, headers, runtime);
}

/**
 * Description: 信物链设备空间关联更新，完成设备和空间关联绑定
 * Summary: 信物链设备空间关联更新
 */
async function updateThingsdidDevicespaceEx(request: UpdateThingsdidDevicespaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateThingsdidDevicespaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.devicespace.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryThingsdidDidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询请求结构体，参考结构体定义
  baseQueryReq: DidBaseQueryReq(name='base_query_req'),
  // 唯一交易ID
  nonce: string(name='nonce'),
}

model QueryThingsdidDidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询请求返回结构体的数组列表，每一个元素对应一个did
  didBaseQueryResp?: [ DidBaseQueryResp ](name='did_base_query_resp'),
  // 交易唯一ID
  nonce?: string(name='nonce'),
}

/**
 * Description: 信物链实体did查询，根据dataFilter过滤输出
 * Summary: 信物链实体did查询
 */
async function queryThingsdidDid(request: QueryThingsdidDidRequest): QueryThingsdidDidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryThingsdidDidEx(request, headers, runtime);
}

/**
 * Description: 信物链实体did查询，根据dataFilter过滤输出
 * Summary: 信物链实体did查询
 */
async function queryThingsdidDidEx(request: QueryThingsdidDidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryThingsdidDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.did.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateThingsdidDidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参考更新请求结构体
  didUpdateReq: ThingsDidUpdateReq(name='did_update_req'),
  // 交易唯一ID
  nonce: string(name='nonce'),
}

model UpdateThingsdidDidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 更新的实体DID，等于输入
  thingDid?: string(name='thing_did'),
  // 异步执行标识，true代表已经完成执行，false代表异步返回，需要轮询nonce代表的交易
  executed?: boolean(name='executed'),
  // 交易唯一ID
  nonce?: string(name='nonce'),
}

/**
 * Description: 信物链实体身份更新，字段空则不更新。
 * Summary: 信物链实体身份更新
 */
async function updateThingsdidDid(request: UpdateThingsdidDidRequest): UpdateThingsdidDidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateThingsdidDidEx(request, headers, runtime);
}

/**
 * Description: 信物链实体身份更新，字段空则不更新。
 * Summary: 信物链实体身份更新
 */
async function updateThingsdidDidEx(request: UpdateThingsdidDidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateThingsdidDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.did.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartTenantBindinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参考结构体
  bindInfoReq: TenantBindInfoReq(name='bind_info_req'),
  // 交易唯一ID
  nonce: string(name='nonce'),
}

model StartTenantBindinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实体did
  did?: string(name='did'),
  // 非openapi访问模式https鉴权key_id,  暂保留
  keyId?: string(name='key_id'),
  // 非openapi访问模式https鉴权key_secret,  暂保留
  keySecret?: string(name='key_secret'),
  // 交易唯一ID
  nonce?: string(name='nonce'),
}

/**
 * Description: 信物链租户信息关联
 * Summary: 信物链租户信息关联
 */
async function startTenantBindinfo(request: StartTenantBindinfoRequest): StartTenantBindinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startTenantBindinfoEx(request, headers, runtime);
}

/**
 * Description: 信物链租户信息关联
 * Summary: 信物链租户信息关联
 */
async function startTenantBindinfoEx(request: StartTenantBindinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartTenantBindinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tenant.bindinfo.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTenantProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 交易唯一ID
  nonce: string(name='nonce'),
  // 参考结构体
  projectCreateReq: TenantProjectCreateReq(name='project_create_req'),
}

model CreateTenantProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回租户唯一的项目id，可以用以管理不同业务。
  projectUid?: string(name='project_uid'),
  // 交易唯一ID
  nonce?: string(name='nonce'),
}

/**
 * Description: 信物链租户项目创建，项目可以用来管理同一租户不同业务的存证
 * Summary: 信物链租户项目创建
 */
async function createTenantProject(request: CreateTenantProjectRequest): CreateTenantProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTenantProjectEx(request, headers, runtime);
}

/**
 * Description: 信物链租户项目创建，项目可以用来管理同一租户不同业务的存证
 * Summary: 信物链租户项目创建
 */
async function createTenantProjectEx(request: CreateTenantProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTenantProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tenant.project.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateThingsdidTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 交易唯一ID
  nonce: string(name='nonce'),
  // 实体更新访问权限参与方的请求结构体
  updateTenantReq: DidUpdateTenantReq(name='update_tenant_req'),
}

model UpdateThingsdidTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易唯一ID，等于输入
  nonce?: string(name='nonce'),
  // 代表本操作是否是异步调用 
  // true: 执行完全，非异步操作.
  executed?: boolean(name='executed'),
}

/**
 * Description: 信物链实体访问权限更新
所有者/使用者/观察者权限更新
 * Summary: 信物链实体访问权限更新
 */
async function updateThingsdidTenant(request: UpdateThingsdidTenantRequest): UpdateThingsdidTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateThingsdidTenantEx(request, headers, runtime);
}

/**
 * Description: 信物链实体访问权限更新
所有者/使用者/观察者权限更新
 * Summary: 信物链实体访问权限更新
 */
async function updateThingsdidTenantEx(request: UpdateThingsdidTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateThingsdidTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.tenant.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model LoadTsmCertificatetsmRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // certificate
  certificate?: string(name='certificate'),
  // BOT
  deviceCode: string(name='device_code'),
  // H0
  deviceModel: string(name='device_model'),
  // SE
  deviceModule: string(name='device_module'),
}

model LoadTsmCertificatetsmResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  LoadCertificateTSMCmdResponse implements Serializable
  cmdList?: [ TsmCommonCmd ](name='cmd_list'),
}

/**
 * Description: LoadCertificateTSMCmd，仅限内部使用api
 * Summary: TSM迁移内部使用 
 */
async function loadTsmCertificatetsm(request: LoadTsmCertificatetsmRequest): LoadTsmCertificatetsmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return loadTsmCertificatetsmEx(request, headers, runtime);
}

/**
 * Description: LoadCertificateTSMCmd，仅限内部使用api
 * Summary: TSM迁移内部使用 
 */
async function loadTsmCertificatetsmEx(request: LoadTsmCertificatetsmRequest, headers: map[string]string, runtime: Util.RuntimeOptions): LoadTsmCertificatetsmResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tsm.certificatetsm.load', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model LoadTsmResourcefileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // BOT
  deviceCode: string(name='device_code'),
  // H0
  deviceModel: string(name='device_model'),
  // SE
  deviceModule: string(name='device_module'),
  // version
  fileVersion?: string(name='file_version'),
}

model LoadTsmResourcefileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // appId
  appId?: string(name='app_id'),
  // cmd_list
  cmdList?: [ TsmCommonCmd ](name='cmd_list'),
}

/**
 * Description: TSM迁移内部使用
 * Summary: loadResourceFile
 */
async function loadTsmResourcefile(request: LoadTsmResourcefileRequest): LoadTsmResourcefileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return loadTsmResourcefileEx(request, headers, runtime);
}

/**
 * Description: TSM迁移内部使用
 * Summary: loadResourceFile
 */
async function loadTsmResourcefileEx(request: LoadTsmResourcefileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): LoadTsmResourcefileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tsm.resourcefile.load', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartTlsnotaryTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 唯一的业务tlsnotary任务id
  taskId: string(name='task_id'),
  // 加固文件的oss链接
  ossLink: string(name='oss_link'),
}

model StartTlsnotaryTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 唯一的业务tlsnotary任务id
  taskId?: string(name='task_id'),
  // 业务错误码
  errorCode?: long(name='error_code'),
  // 错误信息
  errorMsg?: string(name='error_msg'),
}

/**
 * Description: 触发tlsnotary文件认证任务
 * Summary: 触发tlsnotary文件认证任务
 */
async function startTlsnotaryTask(request: StartTlsnotaryTaskRequest): StartTlsnotaryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startTlsnotaryTaskEx(request, headers, runtime);
}

/**
 * Description: 触发tlsnotary文件认证任务
 * Summary: 触发tlsnotary文件认证任务
 */
async function startTlsnotaryTaskEx(request: StartTlsnotaryTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartTlsnotaryTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tlsnotary.task.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTlsnotaryTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 唯一的业务 tlsnotary 任务 id
  taskId: string(name='task_id'),
}

model QueryTlsnotaryTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 唯一的业务 tlsnotary 任务 id
  taskId?: string(name='task_id'),
  // tlsnotary任务执行状态
  state?: long(name='state'),
  // 上传文件oss链接
  uploadOssLinks?: TlsnotaryUploadOssLinks(name='upload_oss_links'),
  // 认证签名
  notarySignature?: string(name='notary_signature'),
  // 业务错误码
  errorCode?: long(name='error_code'),
  // 业务错误信息
  errorMsg?: string(name='error_msg'),
}

/**
 * Description: 查询tlsnotary文件认证任务结果
 * Summary: 查询tlsnotary文件认证任务结果
 */
async function queryTlsnotaryTask(request: QueryTlsnotaryTaskRequest): QueryTlsnotaryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTlsnotaryTaskEx(request, headers, runtime);
}

/**
 * Description: 查询tlsnotary文件认证任务结果
 * Summary: 查询tlsnotary文件认证任务结果
 */
async function queryTlsnotaryTaskEx(request: QueryTlsnotaryTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTlsnotaryTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tlsnotary.task.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

