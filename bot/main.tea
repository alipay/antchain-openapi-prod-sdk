import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.8.103',
    _prod_code = 'BOT',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 资源定位信息
model BaiResourceLocation {
  // 资源定位类型
  // HTTP_URL：资源url
  // STRING_BASE64：资源base64字符串（不带base64头部）
  locationType: string(name='location_type', example='HTTP_URL, STRING_BASE64'),
  // 资源定位值
  locationValue: string(name='location_value', example='abc'),
}

// iot平台权限数据
model IotBasicPermissionData {
  // 权限编码
  permissionCode: string(name='permission_code', example='ADD_DEVICE'),
  // 权限名称
  permissionName: string(name='permission_name', example='注册设备'),
  // 权限内容
  permissionData: string(name='permission_data', example='权限内容'),
  // 权限类型
  permissionType: string(name='permission_type', example='权限类型'),
  // 权限模块
  module: string(name='module', example='权限模块'),
}

// sdk信息
model SdkModel {
  // 主键id
  id: long(name='id', example='1'),
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 修改时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 设备SDK公钥
  verifyKey: string(name='verify_key', example='MEUCIDxNwV7tXGlZ9VW19p...'),
  // SDK版本号
  sdkVersionStr?: string(name='sdk_version_str', example='mqV1.0'),
  // sdk模型
  metaModel?: string(name='meta_model', example='{"version":"1.0.0"}'),
  // 平台
  platform?: string(name='platform', example='windows'),
  // 公司名称
  corpName?: string(name='corp_name', example='alipay'),
}

// GoodsIdAndCount
model GoodsIdAndCount {
  // 商品id
  goodsSkuId: long(name='goods_sku_id', example='23123131'),
  // 商品采购数量
  count: long(name='count', example='100'),
}

// ProductKey信息
model ProductKeyModel {
  // 主键id
  id: long(name='id', example='1'),
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 设备端ProductKey
  productKey: string(name='product_key', example='DEV-0101'),
  // 场景码
  scene: string(name='scene', example='testScene'),
  // 租户Id 
  tenantName: string(name='tenant_name', example='testTenant'),
  // 数据模型id 
  dataModelId: string(name='data_model_id', example='model_001'),
  // sdk前缀
  sdkVersionPrefix: string(name='sdk_version_prefix', example='sdk_'),
  // 制造商
  manufacturer?: string(name='manufacturer', example='alibaba'),
  // 顾客
  customer?: string(name='customer', example='alipay'),
}

// 场景码信息
model SceneModel {
  // 主键id
  id: long(name='id', example='1'),
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 修改时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 场景名
  sceneName: string(name='scene_name', example='testScene'),
  // 是否托管
  escrowed?: string(name='escrowed', example='ESCROWED'),
  // 私钥密码
  privateKeyPassword?: string(name='private_key_password', example='MEUCI..'),
  // 租户
  tenantName?: string(name='tenant_name', example='testTenant'),
  // 场景类型
  sceneType?: string(name='scene_type', example='共享单车'),
  // 是否跳过中台数据校验处理
  skipPegasus?: boolean(name='skip_pegasus', example='true, false'),
  // 定制数据处理类 , 使用用逗号分隔
  customerProcessor?: string(name='customer_processor', example='XXX_GPS_PROCESSOR'),
}

// 数据校验失败返回体
model DataVerifyFailureData {
  // 主键id 
  id: long(name='id', example='1'),
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // Alipay-0101
  scene: string(name='scene', example='场景码'),
  // 设备ID 
  deviceId?: string(name='device_id', example='device_id_001'),
  // 发行设备ID 
  disDeviceId?: string(name='dis_device_id', example='00202009111700539276'),
  // 类型：0:数据上报;1:数据完整性校验
  type: long(name='type', example='0'),
  // c89b65a2e3afd604977c0....
  publicKey?: string(name='public_key', example='公钥'),
  // 验签类型：0(RAW_DATA)；1(公钥格式为PEM)；2(公钥格式为DER)
  formatType?: long(name='format_type', example='0'),
  // 验证内容hash
  contentId?: string(name='content_id', example='aa5304221185b370ea84d...'),
  // 验证内容
  content?: string(name='content', example='{"content":"demo",...}'),
  // 签名
  signature?: string(name='signature', example='9b47e12b0ddb8df...'),
  // 错误信息
  failMessage?: string(name='fail_message', example='数据验真失败'),
  // 补充数据
  extraData?: string(name='extra_data', example='{“DEVICE-ID”:"DEMO-001"}'),
  // 数据来源：0(普通数据上报)；1(MAAS数据上报)；2(设备业务数据上报);3(标签流转)
  source?: long(name='source', example='0'),
}

// 租户信息
model PermissionedTenantModel {
  // 主键Id
  id: long(name='id', example='1'),
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10 10:10:00'),
  // 修改时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10 10:10:00'),
  // 租户名称
  tenantName: string(name='tenant_name', example='testTenant'),
  // 公司名称
  orgName: string(name='org_name', example='alipay'),
  // 租户所有人标识
  owner?: string(name='owner', example='alipay'),
  // 网关私钥
  gatewayPrivateKey?: string(name='gateway_private_key', example='MEUCIDxNw...'),
  // 网关公钥
  gatewayPublicKey?: string(name='gateway_public_key', example='MEUCID...'),
}

// 查询业务数据交易结果对象数据
model QueryChainDataTransactionResultData {
  // 所属业务
  bizScene: string(name='biz_scene', example='SMART_CAR_KEY'),
  // 数据资产类型
  dataScene: string(name='data_scene', example='123'),
  // 资产ID
  assetId: string(name='asset_id', example='123'),
  // 租户id
  tenantId: string(name='tenant_id', example='ASDFGHJK'),
  // 业务数据hash
  textHash: string(name='text_hash', example='123'),
  // 时间
  timestamp?: long(name='timestamp', example=''),
}

// 商品单点鉴定结果
model BaiGoodsPointIdentificationResult {
  // 鉴定点大项名称
  pointName: string(name='point_name', example='内包装'),
  // 鉴定点子项名称
  subPointName: string(name='sub_point_name', example='顶部'),
  // 单点鉴定结果
  // REAL：鉴定为真
  // FAKE：鉴定为假
  // UNABLE_IDENTIFY：无法鉴定
  result: string(name='result', example='REAL'),
  // 鉴定分数
  grade?: string(name='grade', example='0.92'),
  // 用户侧的鉴定点point_id，直接将用户传入的user_point_id返回
  userPointId?: string(name='user_point_id', example='100'),
  // 鉴定评价
  appraiseMessage?: string(name='appraise_message', example='完全同一，趋于同一，不同一'),
  // 鉴定点图片资源定位符
  resourceLocation?: BaiResourceLocation(name='resource_location', example=''),
}

// 商品数字指纹子鉴定项鉴定结果
model GoodsDigitalFingerprintPointIdentificationResult {
  // 子鉴定项
  subPointName: string(name='sub_point_name', example='子鉴定项'),
  // 商品数字指纹鉴定子项鉴定结果
  result: string(name='result', example='REAL'),
  // 鉴定子项鉴定得分
  grade: string(name='grade', example='0.92'),
}

// 商品数字指纹鉴定点
model GoodsDigitalFingerprintPoint {
  // 鉴定点子项
  subPointName: string(name='sub_point_name', example='正面'),
  // 微观图片url
  microImageUrl: string(name='micro_image_url', example='http://1001'),
  // 宏观图片url
  macroImageUrl: string(name='macro_image_url', example='http://xxxx1002'),
}

// 告警策略
model AlertStrategy {
  // 主键ID 
  id: long(name='id', example='1'),
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 租户
  tenantName: string(name='tenant_name', example='alipay'),
  // 场景码
  // 
  scene?: string(name='scene', example='alipay-0101'),
  // 策略类型：DEBUG（技术联调）；MONITOR（生产监控）
  strategyType: string(name='strategy_type', example='MONITOR'),
  // 策略详情，json格式
  strategyDetail: string(name='strategy_detail', example='[{  "alert_method": "DING_TALK",   "addresses": "",  "alert_strategy": "",   "params": {     "fail_days" : 10   } }, {  "alert_method": "EMAIL",   "addresses": "",  "alert_strategy": "",  "params": {       } }]'),
  // 是否启用，默认false
  enabled: boolean(name='enabled', example='true, false'),
  // 备注
  remark?: string(name='remark', example='这是一条测试数据'),
}

// 商品的鉴定点图片信息
model BaiGoodsPoint {
  // 鉴定点名称
  pointName: string(name='point_name', example='内包装'),
  // 鉴定点子项
  subPointName: string(name='sub_point_name', example='正面'),
  // 鉴定点图片的url
  imageUrl?: string(name='image_url', example='https://xxxxxx/a.png'),
  // 图片内容base64编码的字符串，该字段与image_url至少一个非空，同时传入以image_url为准
  imageBase64?: string(name='image_base64', example='/9j/4QyXRXhpZgAATU0AKgAAAAgABwESAAMAAAABAAEAAAEa......'),
  // 用户侧鉴定单关联id
  userPointId?: string(name='user_point_id', example='100'),
}

// 设备采购订单元素
model IotBasicDeviceOrderItem {
  // 蚂蚁链IoT平台设备唯一ID
  deviceDid: string(name='device_did', example='12321321'),
  // 设备唯一编号
  deviceSn: string(name='device_sn', example='12321321'),
  // 设备金额，精确到小数后两位
  paymentAmount: string(name='payment_amount', example='234.01'),
}

// 原始数据包
model RawData {
  // 链上设备id
  chainDeviceId?: string(name='chain_device_id', example='1122'),
  // 数据内容
  content: string(name='content', example='{"a","11"}'),
  // 设备id
  deviceId?: string(name='device_id', example='433'),
  // 上链哈希
  txHash: string(name='tx_hash', example='5533'),
  // 上链时间
  txTime: long(name='tx_time', example=''),
  // 链上外围设备ID
  chainPeripheralId?: string(name='chain_peripheral_id', example='123123'),
  // 外围设备ID
  peripheralId?: string(name='peripheral_id', example='123123'),
}

// iot平台角色信息
model IotBasicRolePermission {
  // 角色编码
  roleCode: string(name='role_code', example='角色编码'),
  // 角色名称
  roleName: string(name='role_name', example='角色名称'),
  // 权限列表
  permissionList: [ IotBasicPermissionData ](name='permission_list', example='权限列表'),
}

// 商品数字指纹鉴定结果
model GoodsDigitalFingerprintIdentifyResultData {
  // 鉴定结果
  identificationResult: string(name='identification_result', example='REAL'),
  // 鉴定结果描述
  description: string(name='description', example='描述'),
  // 商品数字指纹鉴定点鉴定结果列表
  pointIdentificationResults: [ GoodsDigitalFingerprintPointIdentificationResult ](name='point_identification_results', example='{"sub_point_name":"正面","result":"REAL","grade":"0.92"}'),
}

// 部标设备数据
model JtData {
  // 数据的可信平台唯一ID
  trustiotId: long(name='trustiot_id', example='123'),
  // IoT可信平台设备唯一ID
  trustiotEntityId: long(name='trustiot_entity_id', example='123'),
  // 上报原文解析处理之后的数据
  processedContent: string(name='processed_content', example='processed_content'),
  // 和上一次上报数据里程对比，新增的里程数
  deltaMileage?: long(name='delta_mileage', example='123'),
  // 正常位置信息：LOCATION
  // 告警信息：ALARM_BASIC、 ALARM_ADAS、 ALARM_DSM、 ALARM_ACCELEROMETER
  bizType: string(name='biz_type', example='数据标识'),
  // 告警子类型
  // //ADAS
  // 10001: 前向碰撞报警
  // 10002: 车辆偏离报警
  // 10003: 车距过近报警
  // 10004: 行人碰撞报警
  // 10005: 频繁变道报警
  // 10006: 道路标识超限报警
  // 10007: 障碍物报警 //10008~10015 保留
  // 10016: 道路标志识别事件
  // 10017: 主动抓拍事件 //10018~10031 保留
  // //DSM
  // 10101: 疲劳驾驶报警
  // 10102: 接打电话报警
  // 10103: 抽烟报警报警
  // 10104: 分神驾驶报警
  // 10105: 驾驶员异常报警 //10106~10115 保留
  // 10116: 自动抓拍事件
  // 10117: 驾驶员变更事件 //10118~10031 保留
  // //加速度
  // 11701: 急加速
  // 11702: 急减速
  // 11703: 急转弯
  alarmSubType?: long(name='alarm_sub_type', example='10001'),
}

// 租赁合同信息
model RentContractInfo {
  // 租赁合同ID
  contractId: string(name='contract_id', example='2c952456827828cdedad06afccef75a9f2c2840cbb6b0b659f653da1e5916cb2'),
  // 租约时间 
  leaseTime: string(name='lease_time', example='6个月 或 1年'),
  // 入住时间
  checkinDate: string(name='checkin_date', example='2006-01-02 15:04:05'),
  // 退租时间
  checkoutDate: string(name='checkout_date', example='2018-10-10T10:10:00Z'),
}

// 通过设备ID注册发行时的设备参数
model RegByDeviceIdParm {
  // 一般是业务上唯一的设备ID/资产编码
  deviceId: string(name='device_id', example='1122'),
  // 数据模型ID
  deviceDataModelId: string(name='device_data_model_id', example='7033986596836630528'),
  // 固定填写RAW_DATA
  deviceFeature: string(name='device_feature', example='RAW_DATA'),
  // true : 设备ID已存在时返回存在的设备关联字段;
  // false : 设备ID已存在时直接抛出异常；
  withExistDeviceId: boolean(name='with_exist_device_id', example='true, false'),
  // 设备类型编码，联系蚂蚁侧获取设备类型编码
  deviceTypeCode: long(name='device_type_code', example=''),
  // 设备单价 单位：分
  initialPrice?: long(name='initial_price', example='1000'),
  // 出厂时间
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time', example='2018-10-10T10:10:00Z'),
  // 投放时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time', example='2018-10-10T10:10:00Z'),
  // 额外信息，联系蚂蚁侧获取参数格式
  extraInfo?: string(name='extra_info', example='{...}'),
  // 资产所有人标识（统一社会信用代码）
  owner?: string(name='owner', example='91310101MA1FPCXA3G'),
  // 资产所有人名称
  ownerName?: string(name='owner_name', example='蚂蚁区块链科技（上海）有限公司'),
  // 设备IMEI
  deviceImei?: string(name='device_imei', example='861037055012207'),
  // 设备名称/设备型号
  deviceName?: string(name='device_name', example='64.0V30AH'),
  // 生产厂商名
  corpName?: string(name='corp_name', example='浙江一厂'),
}

// Sdk分页查询结果
model SdkPageResponse {
  // 页数
  // 
  pageIndex: long(name='page_index', example='1'),
  // 页码
  // 
  pageSize: long(name='page_size', example='10'),
  // 总记录数
  // 
  totalSize: long(name='total_size', example='100'),
  // 总页数
  // 
  totalPages: long(name='total_pages', example='10'),
  // 数据
  pageData: [ SdkModel ](name='page_data', example='{...}'),
}

// code,name
model CodeListView {
  // 数据code
  dataCode: string(name='data_code', example='ahog'),
  // 数据名称
  dataName: string(name='data_name', example='name'),
}

// 查询设备列表结构体
model IotBasicDeviceQueryResponse {
  // 设备名称	
  // 
  deviceName: string(name='device_name', example='智能防疫一体机'),
  // 设备序列号
  deviceSn: string(name='device_sn', example='CN12300x'),
  // 设备品类名称	
  deviceCategoryName: string(name='device_category_name', example='智能防疫机'),
  // 设备型号
  deviceModel: string(name='device_model', example='PL10'),
  // 设备状态
  deviceStatus?: string(name='device_status', example='online'),
  // 设备安装位置
  location?: string(name='location', example='浙江省杭州市西湖区 '),
  // 设备注册时间
  registerTime: string(name='register_time', example='2018-10-10T10:10:00Z'),
  // 设备厂商
  corpName: string(name='corp_name', example='蚂蚁数科'),
  // 租户ID
  tenantId: string(name='tenant_id', example='2088xx'),
  // 客户名称
  customerName: string(name='customer_name', example='测试客户xx '),
  // 异常错误码
  abnormalCode?: string(name='abnormal_code', example='SMILE_INIT_ERROR'),
  // 设备唯一身份id
  deviceDid?: string(name='device_did', example='did:private:12dsadadadf '),
  // 账号ID
  accountId: string(name='account_id', example='12321321'),
  // 账户名称
  accountName: string(name='account_name', example='张三'),
  // 设备服务状态
  serviceStatus: string(name='service_status', example='INIT'),
  // 应用版本号
  appVersion: string(name='app_version', example='1.1.13'),
  // 服务有效期
  validityTime?: string(name='validity_time', example='2024-4-01'),
}

// 租户关联信息请求结构体
model TenantBindInfoReq {
  // 租户关联扩展信息
  extension?: string(name='extension', example='"CN,北京"'),
  // 业务类型，默认空
  bizType?: string(name='biz_type', example='null'),
  // 组织机构代码，可为中文
  tenantUid: string(name='tenant_uid', example='"12345"'),
  // 组织结构名称
  userName: string(name='user_name', example='"xx公司xx部门"'),
}

// 设备注册 请求对象
model IotBasicDeviceRegisterInfo {
  // 设备规格
  deviceSpecs: string(name='device_specs', example='xxx'),
  // 设备型号
  deviceModel: string(name='device_model', example='xxx'),
  // 设备名称
  deviceName: string(name='device_name', example='test'),
  // 设备sn
  deviceSn: string(name='device_sn', example='xx'),
  // 设备标签
  nickName?: string(name='nick_name', example='telpo'),
  // 安装位置
  location?: string(name='location', example='杭州市'),
  // 设备扩展信息
  deviceExt?: string(name='device_ext', example='[{ "txHash" : "2c952456827828cdedad06afccef75a9f2c2840cbb6b0b659f653da1e5916cb2" }]'),
  // 设备安全认证ID
  secId?: string(name='sec_id', example='secid'),
}

// 客户自定义实体
model CustomEntityInfo {
  // 客户自定义实体类型，默认为JSSDK_ACCOUNT
  customerEntityType: string(name='customer_entity_type', example='JSSDK_ACCOUNT'),
  // 客户自定义实体内容
  customerEntityContent: string(name='customer_entity_content', example='{...}'),
}

// 溯源码比对请求体
model BaiQrcodeComparisonReqData {
  // 扫码操作id，多次请求的trace_id相同代表短时间内在扫同一个码
  traceId: string(maxLength=128, name='trace_id', example='trace_id_001'),
  // query图片定位信息
  queryImageLocation: BaiResourceLocation(name='query_image_location', example=''),
  // gallery图片定位信息
  galleryImageLocation: BaiResourceLocation(name='gallery_image_location', example=''),
  // 是否允许降级
  downgrade: boolean(name='downgrade', example='true, false'),
}

// 创建xr用户通行证结果信息
model XrUserTicketResultInfo {
  // xr通行证资源池名称
  xrTicketPoolName: string(name='xr_ticket_pool_name', example='资源池001'),
  // 购买数量，失败列表有值
  count?: long(name='count', example='10'),
  // 失败原因，失败列表有值
  errorMsg?: string(name='error_msg', example='参数错误'),
  // 通行证编号，成功列表有值
  xrTicketCode?: string(name='xr_ticket_code', example='123123'),
}

// 仓库实体身份附加参数请求结构体，应用在注册/更新API的ThingExtraParams
model WarehouseReqModel {
  // 详细地址
  address?: string(name='address', example='北京海淀区'),
  // 面积 平方米单位*1e4
  area?: long(name='area', example='1000000'),
  // 海拔 米单位*1e2
  elevation?: long(name='elevation', example='0'),
  // 仓库高度 米单位*1e2
  height?: long(name='height', example='1000'),
  // 纬度 度数单位*1e9
  latitude?: long(name='latitude', example='0'),
  // 经度 度数单位*1e9
  longitude?: long(name='longitude', example='35000000000'),
  // 所在国家，中国
  nation?: string(name='nation', example='中国'),
  // 其他信息
  otherInfo?: string(name='other_info', example='"自定义"'),
  // 仓库状态, AVAILABLE, IN_USE, DELETED, 自定义
  status?: string(name='status', example='"AVAILABLE"'),
  // 仓库类型
  type?: string(name='type', example='"自定义"'),
}

// PurchaseOrderInfoDetail 
model PurchaseOrderInfoDetail {
  // 租赁订单号
  // 
  orderNumber: string(name='order_number', example='dadadasda'),
  // 收货人姓名
  // 
  consigneeName: string(name='consignee_name', example='立敢'),
  // 收货人身份证号
  consigneeIdNumber: string(name='consignee_id_number', example='424234324324234'),
  // 收货人手机号
  // 
  consigneePhone: string(name='consignee_phone', example='13400113344'),
  // 收货人地址
  consigneeAddress: string(name='consignee_address', example='北京市海淀区XXXXXXXX'),
  // 供货商名称
  // 
  supplierName: string(name='supplier_name', example='fsafsafaf'),
  // 供货商租户id
  // 
  supplierId: string(name='supplier_id', example='fsffafaf'),
  // 采购商id
  // 
  leaseId: string(name='lease_id', example='fafsafaf'),
  // 商品信息列表
  goodsIdAndCount: [ GoodsIdAndCount ](name='goods_id_and_count', example=''),
}

// 实例信息列表
model InstanceInfo {
  // 实例id
  instanceId: string(name='instance_id', example='设备001'),
  // 实例名称
  instanceName: string(name='instance_name', example='12313'),
}

// 查询交易结果信息
model QueryTransactionResultInfo {
  // 区块hash
  blockHash?: string(name='block_hash', example='123'),
  // 父区块hash
  parentBlockHash?: string(name='parent_block_hash', example='123'),
  // 交易时间戳
  timestamp?: string(name='timestamp', example='123'),
  // 该交易所能消耗的最大gas
  gas?: long(name='gas', example=''),
  // 交易发起方账户
  from?: string(name='from', example='123'),
  // 交易接收方账户
  to?: string(name='to', example='123'),
  // 交易类型
  txType?: string(name='tx_type', example='123'),
  // 交易返回的数据
  data?: QueryChainDataTransactionResultData(name='data', example=''),
}

// 设备不可操作标识类
model DeviceDisableData {
  // 设备sn号
  deviceSn: string(name='device_sn', example='sn123'),
  // 厂商
  corpName: string(name='corp_name', example='telpo'),
}

// 设备属性关系对象
model IotDeviceAttributeRelationshipData {
  // id
  id?: long(name='id', example='1'),
  // 设备品类名称
  deviceCategory: string(name='device_category', example='智能防疫机一体机'),
  // 关系类型
  relationType: string(name='relation_type', example='CORP'),
  // 厂商名称
  corpName?: string(name='corp_name', example='天波'),
  // 设备型号
  deviceModel?: string(name='device_model', example='TPS980'),
  // 设备规格
  deviceSpecs?: string(name='device_specs', example='安卓标准版'),
  // 硬件模块
  hardwareModule?: string(name='hardware_module', example='测温头'),
}

// 创建订单失败的返回结构体
model InsertPurchaseOrderFailInfo {
  // 订单ID
  orderId: string(name='order_id', example='safsafafafa'),
  // 订单保存失败的原因
  failReason: string(name='fail_reason', example='fasfasfasfa'),
}

// 菜鸟分拣机设备监控信息
model ScfLeaseEqpInfo {
  // 设备类型
  deviceType?: string(name='device_type', example='分拣机'),
  // 运营日期
  operationDate?: string(name='operation_date', example='20210720'),
  // 修改时间
  gmtModified?: string(name='gmt_modified', example='2021-07-20 14:08:17'),
  // 维修金比例
  maintenanceMoney?: string(name='maintenance_money', example='50'),
  // 当日设备维修记录
  maintainRecord?: string(name='maintain_record', example='error'),
  // 设备识别号
  deviceNo?: string(name='device_no', example='10010100101'),
  // 创建时间
  gmtCreate?: string(name='gmt_create', example='2021-07-20 14:08:17'),
  // 当日分拣单数
  sortingNum?: string(name='sorting_num', example='131222'),
  // 当日运营时长,单位分钟
  operationMinute?: string(name='operation_minute', example='1231321'),
  // 04:00-16:00分拣单数/（派件分拣单数）
  amNum?: string(name='am_num', example='130012'),
  // 16:00-04:00分拣单数/ （揽件分拣单数)
  pmNum?: string(name='pm_num', example='1210'),
  // id
  id?: string(name='id', example='3'),
  // 设备验收日期
  deviceAcceptanceDate?: string(name='device_acceptance_date', example='2021-07-20 11:33:59'),
  // 数据更新时间
  dataUpdateTime?: string(name='data_update_time', example='2021-07-20 11:32:35'),
}

// 房源信息同步实体类
model HouseInfo {
  // 房源唯一ID
  houseId: string(name='house_id', example='a87'),
  // 租赁模式
  leaseMode?: string(name='lease_mode', example='合租'),
  // 面积平方
  acreage?: string(name='acreage', example='120㎡'),
  // 房源类型：0住宅、1别墅、
  // 2商铺、3写字楼
  structure: long(name='structure', example='0'),
  // 房屋地址
  addr?: string(name='addr', example='hz'),
  // 门锁设备DID
  lockId?: string(name='lock_id', example='L91923'),
  // 电表设备DID
  ammeterId?: string(name='ammeter_id', example='A87345'),
}

// 信物链存证请求结构体
model EvidenceStorageReq {
  // 业务数据，原文上链，或者加密（label若为CRYPTO）上链，上链后的业务数据，通过授权可被区块链其他业务方查询
  bizData?: string(name='biz_data', example='[{"content":"{业务数据}","label":"CRYPTO","timestamp":0}]'),
  // 不同上链方式
  // 空/"": 默认
  // "TTTS": 溯源
  // "IOTPAY": 支付
  // "CZ": 存证
  // "RAW":文本
  category: string(name='category', example='"CZ"'),
  // 上链实体id(设备/空间)
  // 不可和project_uid同时为空
  iotDid?: string(name='iot_did', example='"did:iot:a9147bd2b83d4732b56dc06b346588f5619f80a2d4d2412fab535cbd37293a00"'),
  // 需要上链的证据的哈希值
  hash?: string(name='hash', example='"ace1213412313"'),
  // 上链的附属信息
  metaJson?: string(name='meta_json', example='"附属信息json"'),
  // 上链的项目id,
  // 不可和iot_did同时为空
  projectUid?: string(name='project_uid', example='"上链的项目id"'),
}

// 收集信息
model CollectContent {
  // 链上设备ID（与可信设备ID至少填一项）
  chainDeviceId?: string(name='chain_device_id', example='1122'),
  // 可信设备ID（与链上设备ID至少填一项）
  trustiotDeviceId?: long(name='trustiot_device_id', example='7006071575519457281'),
  // 收集的内容
  content: string(name='content', example='{"name","1"}'),
  // 对内容的签名
  signature: string(name='signature', example='wwexe02j'),
  // 服务端发送的扩展数据（非可信设备直接产生的数据）
  extraData?: string(name='extra_data', example='{"extraKey":"extraValue"}'),
  // 数据模型Id
  dataModelId?: string(name='data_model_id', example='00000001'),
}

// 租期信息
model RentBillItem {
  // 租约分期ID
  billItemId: string(name='bill_item_id', example='12321321'),
  // 租约分期名称
  billItemName?: string(name='bill_item_name', example='第几期'),
  // 租期开始日期
  billItemBegin: string(name='bill_item_begin', example='2006-01-02 15:04:05'),
  // 租期结束日期 
  billItemEnd: string(name='bill_item_end', example='2006-02-02 15:04:05'),
  // 租约金额
  billItemMoney: string(name='bill_item_money', example='5000'),
  // 租约支付状态
  paymentState?: string(name='payment_state', example='待支付，已支付，支付失败'),
}

// 溯源二维码生成请求的请求数据
model BaiQrcodeGenerateReqData {
  // 二维码的码值
  qrcodeContent: string(name='qrcode_content', example='TEST1234567890'),
}

// 数据模型
model DataModel {
  //  数据模型Id
  dataModelId: string(name='data_model_id', example='112233'),
  // 数据模型名称
  dataModelName?: string(name='data_model_name', example='检测设备模型'),
  // 数据模型
  dataModel: string(name='data_model', example='{          "PIC-URL": {                 "type": "string",                 "require":false              } }'),
  // 数据模型类别
  bizType?: string(name='biz_type', example='ORDER'),
  // 用户自定义版本
  customerVersion?: string(name='customer_version', example='V1.0'),
  // 数据样例
  dataDemo?: string(name='data_demo', example='{"name":"zhangsan"}'),
}

// 溯源防伪码生成请求的响应数据
model BaiQrcodeGenerateRespData {
  // 二维码的base64字符串
  generateResult: string(name='generate_result', example='/9j/4QyXRXhpZgAATU0AKgAAAAgABwESAAMAAAABAAEAAAEa......'),
  // 生成结果码
  generateCode: string(name='generate_code', example='200'),
  // 用于异常场景下细化错误信息
  generateMessage: string(name='generate_message', example='码值不正确'),
  // 生成失败时的解决方案，用于异常场景下细化错误信息
  unableGenerateSolution: string(name='unable_generate_solution', example='请调整码值重试'),
}

// 充电明细信息
model ChargeDetail {
  // 开始时间
  detailStartTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='detail_start_time', example='2018-10-10 10:10:00'),
  // 结束时间
  detailEndTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='detail_end_time', example='2018-10-10 10:10:00'),
  // 时段电价，小数点后4位
  elecPrice?: string(name='elec_price', example='10.1010'),
  // 时段服务费价格，小数点后4位
  servicePrice?: string(name='service_price', example='12.6222'),
  // 时段充电量，单位：度，小数点后2位
  detailPower: string(name='detail_power', example='12.12'),
  // 时段电费，小数点后2位
  detailElecMoney?: string(name='detail_elec_money', example='10.10'),
  // 时段服务费，小数点后2位
  detailServiceMoney?: string(name='detail_service_money', example='10.10'),
}

// xr通行证批量创建成功列表
model XrTicketPoolSuccessList {
  // 租户id
  tenantId: string(name='tenant_id', example='租户id'),
  // 资源id
  resourceId: string(name='resource_id', example='资源id'),
  // 有效期
  validTime: string(name='valid_time', example='2022-10-02'),
  // 体验时长
  testTime: long(name='test_time', example='60(单位分)'),
  // vr设备集合
  xrApps?: string(name='xr_apps', example='json或数组'),
  // 券池最大数
  maxPoolCount: long(name='max_pool_count', example='200'),
  // 券池名称
  xrTicketPoolName: string(name='xr_ticket_pool_name', example='券池名称'),
  // 核销类型
  xrVerificationType: string(name='xr_verification_type', example='XR_DEVICE'),
}

// 更新设备和空间关联请求结构体
model UpdateDeviceSpaceReq {
  // API要更新的设备DID
  deviceDid: string(name='device_did', example='"did:iot:xxxxx"'),
  // 0-全部更新 (暂不支持)
  // 1-添加  
  // 2-删除
  // 
  updateMode: long(name='update_mode', example='1'),
  // API要更新的设备部署库位
  deviceSpace: [ string ](name='device_space', example='["did:iot:xxxx","did:iot:xxxxx"]'),
}

// 设备注册失败对象
model IotBasicDeviceRegisterFail {
  // 设备名称
  deviceName: string(name='device_name', example='12321321'),
  // 设备sn
  deviceSn: string(name='device_sn', example='2088xx'),
  // 错误编码
  code: string(name='code', example='code'),
  // 错误描述
  message: string(name='message', example='message'),
}

// 设备信息
model Device {
  // 设备ID，一般是设备的出厂编码或业务上的资产ID
  deviceId: string(name='device_id', example='123ABC'),
  // 数据模型Id
  deviceDataModelId: string(name='device_data_model_id', example='112233'),
  // 场景码
  scene: string(name='scene', example='SCENE1'),
  // imei号
  deviceImei: string(name='device_imei', example='223344'),
  // 设备名称
  deviceName?: string(name='device_name', example='设备1号'),
  // 设备厂商名称
  corpName?: string(name='corp_name', example='浙江一厂'),
  // 设备ICCID
  // 
  // 
  deviceIccid?: string(name='device_iccid', example='a1234'),
  // 设备扩展信息
  extraInfo?: string(name='extra_info', example='{“”:""}'),
  // 设备链上Id
  chainDeviceId: string(name='chain_device_id', example='223344'),
  // 上链哈希
  txHash: string(name='tx_hash', example='3344'),
  // 上链时间
  txTime: long(name='tx_time', example='224455'),
  // 设备类型编码，必填，对应资管平台中的设备类型 
  // 
  // 枚举值：
  // 
  // 车辆 1000 
  // 车辆 四轮车 1001 
  // 车辆 四轮车 纯电四轮车 1002 
  // 车辆 四轮车 混动四轮车 1003 
  // 车辆 四轮车 燃油四轮车 1004 
  // 车辆 两轮车 1011 
  // 车辆 两轮车 两轮单车 1012 
  // 车辆 两轮车 两轮助力车 1013 
  // 
  // 换电柜 2000 
  // 换电柜 二轮车换电柜 2001 
  // 
  // 电池 3000 
  // 电池 磷酸铁电池 3001 
  // 电池 三元锂电池 3002 
  // 
  // 回收设备 4000 
  // 
  // 垃圾分类回收 4001 
  // 
  // 洗车机 5000
  deviceTypeCode: long(name='device_type_code', example='5000'),
  // 单价
  initialPrice: long(name='initial_price', example='1000'),
  // 投放时间
  releaseTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time', example='2018-10-10T10:10:00Z'),
  // 出厂时间
  factoryTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time', example='2018-10-10T10:10:00Z'),
  // 设备状态，取值范围：NORMAL、OFFLINE、UNREGISTER
  deviceStatus?: string(name='device_status', example='NORMAL'),
  // 可信设备ID
  trustiotDeviceId: long(name='trustiot_device_id', example='7006071575276187649'),
}

// 新增厂商字典时需要传的产品信息
model AddProductInfo {
  // 产品名称
  productName: string(name='product_name', example='防疫一体机'),
  // 产品code
  productCode: string(name='product_code', example='face_smart'),
  // 产品描述
  remark?: string(name='remark', example='智能防疫机'),
}

// 设备实体请求结构体，应用在注册/更新API的ThingsExtraParams
model DeviceRegisterReqModel {
  // 保留
  authLevel?: long(name='auth_level', example='0'),
  // 设备属性字符串，
  // 阿里云设备类型，填入三元组
  deviceAttribute?: string(name='device_attribute', example='"设备属性"'),
  // 物模型ID，参考其他文档
  deviceModelId?: string(name='device_model_id', example='"模型ID"'),
  // 可传入自定义信息
  otherInfo?: string(name='other_info', example='"自定义字段"'),
  // 业务自定义，可以传入该实体的w3c服务节点
  serviceEndpoint?: string(name='service_endpoint', example='"服务端点"'),
  // 保留，默认
  //     STATUS_REGISTERED(3)
  status?: string(name='status', example='null'),
}

// 设备远程操作对象
model DeviceOperateInfo {
  // 蚂蚁链iot平台设备ID
  deviceDid: string(name='device_did', example='213'),
  // 设备签名
  signature: string(name='signature', example='sua8e'),
}

// 菜鸟设备监控信息获取请求体
model ScfLeaseEqpInfoQueryRequest {
  // 设备识别号
  deviceNo: string(name='device_no', example='10010100101'),
  // 运营日期
  operationDate: string(name='operation_date', example='2021-07-20 11:34:00'),
}

// 用户通行证详情
model XrUserTicketDetail {
  // 业务类型
  bizScene: string(name='biz_scene', example='XR_LEASE'),
  // 所属客户
  tenantId: string(name='tenant_id', example='QWERTYUI'),
  // 用户通行证编码
  xrTicketCode: string(name='xr_ticket_code', example='8613356'),
  // xr通行证资源池名称
  xrTicketPoolName: string(name='xr_ticket_pool_name', example='资源池001'),
  // 用户id
  userId: string(name='user_id', example='2088**'),
  // 资源id
  resourceId: string(name='resource_id', example='xsadds'),
  // 资源名称
  resourceName: string(name='resource_name', example='资源001'),
  // 用户通行证状态
  status: string(name='status', example='待核销'),
  // 有效期
  validTime: string(name='valid_time', example='2023-03-28'),
  // 实例id
  instanceId?: string(name='instance_id', example='86871'),
  // 核销时间
  xrVerificationTime?: string(name='xr_verification_time', example='2018-10-10 10:10:00'),
  // 体验开始时间
  sampleStartTime?: string(name='sample_start_time', example='2018-10-10 10:10:00'),
  // 体验结束时间
  sampleEndTime?: string(name='sample_end_time', example='2018-10-10 10:10:00'),
  // 核销类型
  xrVerificationType: string(name='xr_verification_type', example='XR_DEVICE'),
  // 实例名称
  instanceName?: string(name='instance_name', example='实例001'),
  // 体验时长，分
  testTime: long(name='test_time', example='60'),
  // vr应用集合
  xrApps?: string(name='xr_apps', example='vr应用集合'),
}

// 信物链查询实体身份请求结构体
model DidBaseQueryReq {
  // * "thingId"       原始ID
  // * "certText"      证书文本
  // * "certPublicKey"证书公钥
  // * "didPublicKey" DID公钥
  // * "didExtension"  DID扩展，设备/企业组织/仓库/空间的解析同thingsExtraParams
  // * "didUsername"   DID用户名
  // * "ownerDid"      所有者DID
  // * "userDid"       使用者DID
  // * "thingType"     实体类型，设备/企业组织/仓库/空间等
  // * "thingStatus"   实体状态
  // * "thingModelId" 实体物模型类型
  // * "thingAttribute"实体属性
  // * "thingVersion"  实体版本
  // * "spacesAttached"关联空间列表
  // * "thingsAttached"关联实体列表（例：库位关联设备）
  // * "authLevel"     授权等级
  // * "thingServiceEndpoint" 服务列表
  dataFilter: [ string ](name='data_filter', example='["如下1","如下2"]'),
  // 是否从链上查询，从链上查询将返回txHash值
  onChain: boolean(name='on_chain', example='false'),
  // 需要查询的实体Did列表，同一次查询的Did须为相同类型
  thingsDidList: [ string ](name='things_did_list', example='["did:iot:xxxx","did:iot:yyyyy"]'),
}

// 商品鉴定返回结果
model BaiGoodsComparisonResponse {
  // 鉴定结果（REAL：为真   FAKE：为假   UNABLE_IDENTIFY：无法鉴定）
  identificationResult: string(name='identification_result', example='REAL'),
  // 鉴定补充信息
  identificationMessage?: string(name='identification_message', example='鉴定成功'),
  // 鉴定信息code
  identificationCode?: string(name='identification_code', example='200'),
}

// 租户分页查询结果
model PermissionedTenantPageResponse {
  // 页数
  pageIndex: long(name='page_index', example='1'),
  // 页码
  pageSize: long(name='page_size', example='10'),
  // 总记录数
  totalSize: long(name='total_size', example='100'),
  // 总页数
  totalPages: long(name='total_pages', example='10'),
  // 数据
  pageData: [ PermissionedTenantModel ](name='page_data', example='{...}'),
}

// 任务信息
model TaskInfo {
  // 升级计划Id
  planId?: long(minimum=0, name='plan_id', example='234'),
  // 刷库计划步骤id
  planStepId?: long(minimum=0, name='plan_step_id', example='234'),
  // 任务id
  taskId?: long(minimum=0, name='task_id', example='234'),
  // action_id
  actionId?: long(minimum=0, name='action_id', example='234'),
  // 任务类型
  taskType: string(name='task_type', example='升级，溯源'),
}

// 商品鉴定返回结果
model BaiGoodsIdentificationRespData {
  // 鉴定结果
  // REAL：鉴定为真
  // FAKE：鉴定为假
  // UNABLE_IDENTIFY：无法鉴定
  identificationResult: string(name='identification_result', example='REAL'),
  // 整体鉴定分数
  grade: string(name='grade', example='0.99'),
  // 整体鉴定报告描述
  description?: string(name='description', example='AI鉴定成功'),
  // 鉴定点鉴定结果列表
  pointIdentificationResults: [ BaiGoodsPointIdentificationResult ](name='point_identification_results', example=''),
  // 鉴定评价
  appraiseMessage?: string(name='appraise_message', example='完全同一，趋于同一，和不同一'),
  // 用户自定义字符串，系统不做处理，会在响应体中带回
  outState?: string(name='out_state', example='state'),
}

// iot平台用户信息
// 
model IotBasicUserInfo {
  // 租户ID
  tenant: string(name='tenant', example='DWWS2D'),
  // 金融云用户Id
  // 
  cloudUserId: string(name='cloud_user_id', example='12321321'),
  // 金融云平台的登录名
  // 
  loginName: string(name='login_name', example='xxx@alitest.com'),
  // 权限集合
  permissionList: [ IotBasicRolePermission ](name='permission_list', example=''),
}

// 发行数据包
model DistributeDataPackage {
  // 原始数据
  dataList: [ RawData ](name='data_list', example=''),
  // 发行设备Id
  distributeDeviceId: string(name='distribute_device_id', example='244'),
  // 打包时间
  packageTime: long(name='package_time', example=''),
}

// 通行证批量创建失败列表
model XrTicketPoolFailList {
  // 券名称
  xrTicketPoolName: string(name='xr_ticket_pool_name', example='券名称'),
  // 资源id
  resourceId: string(name='resource_id', example='资源id'),
  // 错误码
  errorCode: string(name='error_code', example='ok'),
  // 租户id
  tenantId: string(name='tenant_id', example='租户id'),
  // 错误信息
  errorMsg: string(name='error_msg', example='错误信息'),
  // 核销类型
  xrVerificationType: string(name='xr_verification_type', example='XR_DEVICE'),
}

// BAI提供的OCR接口返回值
model BaiOcrResponse {
  // 返回的结果体
  data: string(name='data', example='{"backResult":{"issue":"XXXX","endDate":"20231010","startDate":"20131010"}}'),
}

// 溯源防伪码质检请求的请求数据
model BaiQrcodeVerifyReqData {
  // 二维码图片url
  queryImageUrl: string(name='query_image_url', example='http://xxxxxx'),
}

// 线下场设备元素
model XrVerificationModelVo {
  // 核销资源生成的实例，xr设备对应设备did
  instanceId: string(name='instance_id', example='qsdfskjes'),
  // 生成的实例名称，xr设备就的对应的具体设备sn
  instanceName: string(name='instance_name', example='设备sn'),
  // 线下场有效期
  validTime: string(name='valid_time', example='2022-10-02 09:10:09'),
  // 服务状态：INIT初始化、SERVICING服务中、PAUSED已暂停、EXPIRED停用
  seviceStatus: string(name='sevice_status', example='INIT'),
  // 设备状态：INIT 初始化、ONLINE 在线、OFFLINE 离线、FAULT 故障、ACTIVATED 激活
  deviceStatus: string(name='device_status', example='ONLINE'),
  // 唯一ID，对应线下场code
  resourceId: string(name='resource_id', example='唯一ID，对应线下场code'),
  // 对应线下场名称
  resourceName: string(name='resource_name', example='对应线下场名称'),
  // 核销类型
  type: string(name='type', example='XR_DEVICE'),
}

// 业务状态信息
model BizStatusInfoOp {
  // 业务状态类型
  bizType: string(name='biz_type', example='SMART_CAR_KEY'),
  // 业务状态
  bizStatus: string(name='biz_status', example='unbound'),
  // 时间
  opTime: string(name='op_time', example='2018-10-10 10:10:00'),
}

// 实体身份注册请求结构体
model ThingsDidRegisterReq {
  // 业务编码，暂时保留，不需传入
  bizType?: string(name='biz_type', example='null'),
  // 信物链实体的所有者的分布式身份
  ownerTenantDid?: string(name='owner_tenant_did', example='"did:mychain:xxxxx"'),
  // 信物链实体附加信息 不同实体身份，有不同的json组织格式...
  // 参考
  // DeviceRegisterReqModel，
  // SpaceRegisterReqModel，
  // CorporateReqModel，
  // WarehouseReqModel，
  // 
  thingExtraParams?: string(name='thing_extra_params', example='"附加信息"'),
  // 原始id，租户内同一类型实体唯一
  thingOriginId: string(name='thing_origin_id', example='"租户下唯一ID"'),
  // 实体原始名称
  thingOriginName: string(name='thing_origin_name', example='"摄像头a"'),
  // 信物链实体身份 
  // DID_TYPE_DEVICE_ALIYUN(0): 阿里云设备 
  // DID_TYPE_DEVICE_PEGASUS(1): 链机设备 
  // DID_TYPE_DEVICE_MCU(2): MCU设备 
  // DID_TYPE_DEVICE_INTEL(3): intel设备 
  // DID_TYPE_DEVICE_DEVICE(16384): 默认设备 ... 
  // DID_TYPE_CORPORATE(65536): 组织实体 
  // DID_TYPE_WAREHOUSE(131072)：仓库实体 
  // DID_TYPE_SPACE(196608)： 空间实体
  thingType: long(name='thing_type', example='0'),
  // 实体版本
  thingVersion: string(name='thing_version', example='"1.0.0"'),
  // 信物链实体的使用方的分布式身份列表
  userDid?: [ string ](name='user_did', example='["did:mychain:xxxx1","did:mychain:xxxx2"]'),
}

// 数据上链失败结果
model DeviceCollectFail {
  // 上链数据采集ID
  collectId: string(name='collect_id', example='81htq898'),
  // 错误码
  code: string(name='code', example='bad_param'),
  // 错误信息
  message: string(name='message', example='参数错误'),
}

// 商品鉴定点鉴定响应体
model BaiGoodsPointQueryRespData {
  // 识别结果
  // true：识别到鉴定点
  // false：未识别到鉴定点
  detection: boolean(name='detection', example='true'),
  // 鉴定结果
  // REAL：鉴定为真
  // FAKE：鉴定为假
  // UNABLE_IDENTIFY：无法鉴定
  identificationResult: string(name='identification_result', example='REAL'),
}

// 溯源防伪码质检响应数据
model BaiQrcodeVerifyRespData {
  // 鉴定结果
  // REAL：通过
  // UNABLE_IDENTIFY：无法鉴定
  identificationResult: string(name='identification_result', example='REAL'),
  // 辅助识别结果码
  identificationCode: string(name='identification_code', example='700'),
  // 辅助识别信息
  identificationMessage: string(name='identification_message', example='二维码不符合标准'),
  // 无法鉴定时的解决方案
  unableIdentifySolution: string(name='unable_identify_solution', example='请重新印刷'),
}

// 多媒体文件
model JtMedia {
  // 多媒体ID
  mediaId: string(name='media_id', example='123'),
  // 文件名称
  name: string(name='name', example='xxxx.jpg'),
  // 可访问的url
  url: string(name='url', example='https://oss.com/53/85855.jpg?sign=xxx'),
  // 上传时间
  gmtCreate: long(name='gmt_create', example='1687859592688'),
  // 多媒体类型枚举：IMAGE 图像；AUDIO 音频；VIDEO视频； UN_KNOW  未知；
  mediaType: string(name='media_type', example='IMAGE'),
}

// 商品鉴定点检测接口响应数据
model BaiGoodsPointCheckRespData {
  // 图片是否有效，无效则需要提示重拍
  valid: boolean(name='valid', example='true, false'),
}

// 数据校验失败分页查询结果
model DataVerifyFailureDataPageResponse {
  // 页数
  // 
  pageIndex: long(name='page_index', example='1'),
  // 页码
  // 
  pageSize: long(name='page_size', example='10'),
  // 总记录数
  // 
  totalSize: long(name='total_size', example='100'),
  // 总页数
  // 
  totalPages: long(name='total_pages', example='10'),
  // 数据
  pageData: [ DataVerifyFailureData ](name='page_data', example='{...}'),
}

// TSM CommonCmd
model TsmCommonCmd {
  // private byte cla;
  cla: long(name='cla', example='00'),
  //  host challenge data.
  data: [ long ](name='data', example='[0,0]'),
  // private byte ins;
  ins: long(name='ins', example='00'),
  //  private byte lc;
  lc: long(name='lc', example='lc'),
  // private byte le = (byte) 0x00;
  le?: long(name='le', example='0'),
  // private Boolean needSecurityHandle = Boolean.TRUE;
  needSecurityHandle?: boolean(name='need_security_handle', example='true, false'),
  // private byte p1;
  p1: long(name='p1', example='00'),
  // private byte p2 = (byte) 0x00;
  p2: long(name='p2', example='00'),
}

// xr通行证批量创建请求
model XrTicketPoolBatchReq {
  // 资源id
  resourceId: string(name='resource_id', example='资源id'),
  // 通行证有效期
  validTime: string(name='valid_time', example='通行证有效期'),
  // 体验时长
  testTime: long(name='test_time', example='60(单位分)'),
  // vr设备集合
  xrApps?: string(name='xr_apps', example='json或数组'),
  // 券池最大出票数
  maxPoolCount: long(name='max_pool_count', example='100'),
  // 通行证名称
  xrTicketPoolName: string(name='xr_ticket_pool_name', example='通行证名称'),
  // 核销类型
  xrVerificationType: string(name='xr_verification_type', example='XR_DEVICE'),
}

// 设备管控 失败对象
model DeviceControlFail {
  // 设备did
  deviceDid: string(name='device_did', example='123'),
  // 操作失败code
  code: string(name='code', example='bad_param'),
  // 操作失败信息
  message: string(name='message', example='参数错误'),
}

// 通过设备注册发行时的设备参数 （与RegByDeviceIdParam的区别在于设备端有无植入蚂蚁SDK或模组）
// 
model RegByDeviceParm {
  // 一般是业务上唯一的设备ID/资产编码
  // 
  deviceId: string(name='device_id', example='1122'),
  // 数据模型ID
  deviceDataModelId: string(name='device_data_model_id', example='7033986596836630528'),
  // 设备端经过蚂蚁SDK或模组初始化得到的注册信息
  deviceRegContent: string(name='device_reg_content', example='73546f6b656e323031323131313332393235303230303033'),
  // 蚂蚁侧SDK或模组对device_reg_content的签名
  deviceRegSignature: string(name='device_reg_signature', example='a573546f6b656e323031323131313332393235303230303033'),
  // sdk版本号，由蚂蚁侧提供
  sdkId: string(name='sdk_id', example='ma1-t1-0.1.1-00.04.54'),
  // 设备类型编码，联系蚂蚁侧获取设备类型编码
  // 
  deviceTypeCode: long(name='device_type_code', example='1001'),
  // 设备单价 单位：分
  // 
  initialPrice?: long(name='initial_price', example='1000'),
  // 出厂时间
  // 
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time', example='2018-10-10T10:10:00Z'),
  // 投放时间
  // 
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time', example='2018-10-10T10:10:00Z'),
  // 额外信息，联系蚂蚁侧获取参数格式
  // 
  extraInfo?: string(name='extra_info', example='{...} '),
  // 资产所有人标识（统一社会信用代码）
  // 
  owner?: string(name='owner', example='91310101MA1FPCXA3G'),
  // 资产所有人名称
  ownerName?: string(name='owner_name', example='蚂蚁区块链科技（上海）有限公司 '),
  // 设备名称/型号
  deviceName?: string(name='device_name', example='64.0V30AH'),
}

// xr通行证券池分页返回
model XrTicketPoolItem {
  // 业务类型
  bizScene?: string(name='biz_scene', example='XR_LEASE'),
  // 通行证名称
  xrTicketPoolName?: string(name='xr_ticket_pool_name', example='通行证名称'),
  // 资源id
  resourceId?: string(name='resource_id', example='1'),
  // 有效期
  validTime?: string(name='valid_time', example='2022-10-02'),
  // 体验时长
  testTime?: long(name='test_time', example='15(单位分钟)'),
  // 通行证状态：EXPIRED：已过期  VALID：有效  SALED：已出售
  status?: string(name='status', example='通行证状态'),
  // 判断已发放数量>0(USED：已使用)  判断已发放数量=0(NOT_USED：未使用)
  useStatus?: string(name='use_status', example='USED'),
  // 资源名称
  resourceName?: string(name='resource_name', example='资源名称'),
  // 设备集合
  xrApps?: string(name='xr_apps', example='json 或数组'),
  // 券池最大票数
  maxPoolCount?: long(name='max_pool_count', example='133'),
  // 租户id
  tenantId?: string(name='tenant_id', example='ADSAERDS'),
  // 核销类型
  xrVerificationType?: string(name='xr_verification_type', example='XR_DEVICE'),
  // 剩余可用券数量
  surplusCount?: long(name='surplus_count', example='100'),
  // 已发放数量 （总数-剩余数量）
  issuedCount?: long(name='issued_count', example='12'),
}

// 信物链证据基本组成结构体
model EvidenceBaseModel {
  // 业务数据
  bizData?: string(name='biz_data', example='[{"content":"{业务数据}","label":"CRYPTO","timestamp":0}]'),
  // 证据哈希值
  hash?: string(name='hash', example='"证据哈希值"'),
  // 证据附属信息字段
  metaJson?: string(name='meta_json', example='"证据附属信息"'),
}

// tlsnotary文件认证成功后上传到oss的文件链接列表
model TlsnotaryUploadOssLinks {
  // 证书链摘要文件的oss链接
  certChainDigestLink: string(name='cert_chain_digest_link', example='tlsnotary/{taskId}.json'),
  // 邮件eml文件的oss链接
  emlFileLink: string(name='eml_file_link', example='tlsnotary/{taskId}.eml'),
}

// 二维码识别响应结构体
model BaiQrcodeParseRespData {
  // 二维码内容
  codeValue: [ string ](name='code_value', example='1234567890'),
}

// 实体身份更新请求结构体，设备/仓库/空间/组织
model ThingsDidUpdateReq {
  // 业务类型，默认空
  bizType?: string(name='biz_type', example='null'),
  // 待更新的实体did
  thingDid: string(name='thing_did', example='"did:iot:xxxxx"'),
  // 更新内容，参考更新请求不同实体类型结构体，对应不同实体类型不一样
  // 信物链实体附加信息 不同实体身份，有不同的json组织格式，
  // 参考 DeviceRegisterReqModel， SpaceRegisterReqModel， CorporateReqModel， WarehouseReqModel，
  thingExtraParams?: string(name='thing_extra_params', example='参考结构体'),
  // 更新后的实体版本
  thingVersion: string(name='thing_version', example='"1.0.1"'),
}

// 标签流转上链返回txHash
model LabelChainResult {
  // 标签ID
  labelId: string(name='label_id', example='86F000001A51C02000000010'),
  // 业务资产ID，接入方自行定义
  assetId?: string(name='asset_id', example='XXX'),
  // 标签最近一次上链的txHash
  txHash: string(name='tx_hash', example='855e7ba37a0f227e384691e250f90bb2240adf11839016cf08506c9aa5c11cef'),
  // 错误码
  errorCode?: string(name='error_code', example='XXXX'),
  // 错误信息
  errorMsg: string(name='error_msg', example='xxxxx'),
}

// 二维码识别请求
model BaiQrcodeParseReqData {
  // 待识别图片的url
  imageUrl: string(name='image_url', example='http://testImage.com/xxxxx'),
}

// 部标设备信息
model JtDevice {
  // 设备ID
  deviceId: string(name='device_id', example='STRING 123ABC'),
  // 场景码
  scene: string(name='scene', example='123ABC'),
  // 可信设备ID
  trustiotDeviceId: long(name='trustiot_device_id', example='7006071575276187649'),
  // 设备注册时间
  gmtCreate: long(name='gmt_create', example='1686497064968'),
  // 设备是否在线
  online: boolean(name='online', example='true, false'),
  // 设备型号
  deviceModel?: string(name='device_model', example='丰图T8'),
}

// 电脑型号信息
model ComputerInfo {
  // 颜色
  colour?: string(name='colour', example='红色'),
  // 色值
  colourNumber?: string(name='colour_number', example='#BA0F2F'),
  // 电脑型号
  computerModel?: string(name='computer_model', example='X100'),
  // 配置参数
  configParam?: string(name='config_param', example='{""}'),
  // 显卡
  videoCard?: string(name='video_card', example='GTX3080'),
  // 屏幕
  screenSize?: string(name='screen_size', example='27'),
  // 电脑CPU
  cpu: string(name='cpu', example='i9'),
  // 电脑内存
  memory: string(name='memory', example='16GB'),
  // 电脑硬盘
  diskSize: string(name='disk_size', example='500GB'),
}

// 信物链存证查询请求结构体
model EvidenceQueryInfoReq {
  // 暂时保留
  deviceSignature?: string(name='device_signature', example='null'),
  // 暂时保留
  deviceUid?: string(name='device_uid', example='null'),
  // 不同上链方式
  // "CZ": 普通存证
  // "IOTPAY": 支付存证
  // "RAW": 文本上链
  // "TTTS": 溯源存证
  queryType: string(name='query_type', example='"CZ"'),
  // 查询的链上交易txHash
  txHash: string(name='tx_hash', example='"516e981c8b62c6ef08dc99b5f5165ab2a8592b5a116298788f95bbd45d0cc499"'),
}

// AI商品鉴定请求信息
model BaiGoodsComparisonReqData {
  // 品类
  category: string(name='category', example='奢侈品'),
  // 品牌
  brand: string(name='brand', example='GUCCI'),
  // 款式
  style: string(name='style', example='Gucci Diana'),
  // 商品鉴定点列表
  goodsPoints: [ BaiGoodsPoint ](name='goods_points', example=''),
  // 用户自定义字符串，系统不做处理，会在响应体中带回
  outState?: string(name='out_state', example='state'),
}

// 收集数据返回的上链结果
model SendCollectorResult {
  // 数据内容content的上链交易哈希
  txHash: string(name='tx_hash', example='2c952456827828cdedad06afccef75a9f2c2840cbb6b0b659f653da1e5916cb2'),
  // 原入参的数组索引
  originalIndex: long(name='original_index', example='0'),
}

// 指纹图片入库是否成功
model GoodsDigitalFingerprintRegisterResultData {
  // 指纹图片入库是否成功
  success: boolean(name='success', example='true'),
  // 失败原因
  describe?: string(name='describe', example='describe'),
}

// 租户项目创建请求结构体模型
model TenantProjectCreateReq {
  // 业务类型，默认空
  bizType?: string(name='biz_type', example='null'),
  // 可选的，项目关联的区块链类型，1/2/3代表存证/合约等类型
  blockchainType?: long(name='blockchain_type', example='1'),
  // 可选的，项目关联的区块链uid
  blockchainUid?: string(name='blockchain_uid', example='1111111'),
  // 租户下唯一项目名称，用以标识项目聚合的存证等信息
  projectName: string(name='project_name', example='"唯一项目名称"'),
}

// 设备硬件模块信息体
model IotBasicDeviceHardWareModule {
  // 所属规格
  specsId: long(name='specs_id', example='12321321'),
  // 硬件模块ID
  hardwareModuleId: long(name='hardware_module_id', example='12321321'),
  // 模块名称
  hardwareModuleName: string(name='hardware_module_name', example='反扫头'),
  // 模块编码
  hardwareModuleValue: string(name='hardware_module_value', example='REVERSE_SCANNING_HEAD'),
  // 模块参数
  hardwareModuleParam: string(name='hardware_module_param', example='{"size":102}'),
}

// 订单同步失败结果
model DeviceOrderFail {
  // 订单id
  orderId: string(name='order_id', example='90'),
  // 设备did
  deviceDid: string(name='device_did', example='asdfg'),
  // 返回code
  code: string(name='code', example='Fail'),
  // 失败
  message: string(name='message', example='返回信息'),
}

// 二维码验真接口返回值
model BaiQrcodeComparisonRespData {
  // 识别结果（REAL：真   FAKE：假   UNABLE_IDENTIFY：无法识别）
  identificationResult: string(name='identification_result', example='REAL'),
  // 辅助识别结果码
  identificationCode?: string(name='identification_code', example='200'),
  // 辅助识别信息
  identificationMessage?: string(name='identification_message', example='识别成功'),
  // 无法识别时提示的解决方案
  unableIdentifySolution?: string(name='unable_identify_solution', example='调整焦距'),
}

// 收集标签数据
model CollectLabelContent {
  // 链上设备ID
  chainDeviceId: string(name='chain_device_id', example='XXXXX'),
  // 1.设备端上报数据内容  
  // 2.与设备上报的数据一致，服务端不可修改
  // 3.解析后需与DataModel匹配 
  // 4.映射 Label 对象结构化存储
  // 5.转为JSON后如果是JSONObject 映射单个 Label
  // 6.转为JSON后如果是JSONArray 映射多个 Label
  content: string(name='content', example='XXXXX'),
  // content的签名
  // 与设备上报的签名保持一致，服务端不可修改
  signature: string(name='signature', example='XXXXX'),
  // 未经设备签名的附加数据JSON String
  // 注意：如果 content 批量解析 ，extraData也会批量复制融入解析后的content
  extraData?: string(name='extra_data', example='XXXXX'),
}

// 数据上链成功结果数据
model DeviceCollectResult {
  // 上链数据采集ID
  collectId: string(name='collect_id', example='j8o12u38'),
  // 上链id
  antchainId?: string(name='antchain_id', example='auit98'),
}

// 可信设备ID及其关联的设备ID
model TrustiotDeviceIdMap {
  // 可信设备ID
  trustiotDeviceId: long(name='trustiot_device_id', example='7006413673662394390'),
  // 设备ID	
  deviceId: string(name='device_id', example='1122'),
  // 设备注册的上链哈希
  chainDeviceId: string(name='chain_device_id', example='ba9de337190b017ea6255bffa226ea5ed91cbb03babb42e5a35d652ca30cdce1'),
}

// ProductKey分页查询结果
model ProductKeyPageResponse {
  // 页数
  // 
  pageIndex: long(name='page_index', example='1'),
  // 页码
  // 
  pageSize: long(name='page_size', example='10'),
  // 总记录数
  // 
  totalSize: long(name='total_size', example='100'),
  // 总页数
  // 
  totalPages: long(name='total_pages', example='10'),
  // 数据
  pageData: [ ProductKeyModel ](name='page_data', example='{...}'),
}

// 上链数据结果集
model ChainModelResult {
  // 所属业务
  bizScene: string(name='biz_scene', example='XR_LEASE'),
  // 资产类型
  dataScene: string(name='data_scene', example='LOCK_RECORD'),
  // 资产id
  assetId: string(name='asset_id', example='资产id'),
  // 资产数据内容json
  assetData: string(name='asset_data', example='{}'),
  // 租户id
  tenantId: string(name='tenant_id', example='SDFJAG'),
  // 上链时间
  txTime: string(name='tx_time', example='2022-10-02 09:10:09'),
  // 业务ID
  businessId: string(name='business_id', example='业务ID'),
}

// 空间实体身份附加参数请求结构体，应用在注册/更新API的ThingExtraParams
model SpaceRegisterReqModel {
  // 面积 平方米单位*1e4	
  area?: long(name='area', example='10000'),
  // 自定义业务类型，例如选择：危险品/非危险品/食品
  bizType?: string(name='biz_type', example='"biz_type"'),
  // 海拔 米单位*1e2
  elevation?: long(name='elevation', example='0'),
  // 高度 米单位*1e2	
  height?: long(name='height', example='123'),
  // 纬度 度数单位*1e9	
  latitude?: long(name='latitude', example='0'),
  // 经度 度数单位*1e9	
  longitude?: long(name='longitude', example='35000000000'),
  // 自定义其他字段
  otherInfo?: string(name='other_info', example='"自定义"'),
  // 父类型，在业务中自定义关联，例如仓位的父节点是仓库
  parentDid?: string(name='parent_did', example='“did:iot:xxxx”'),
  // 可填入符合w3c did定义的服务节点
  serviceEndpoint?: string(name='service_endpoint', example='"xxxx"'),
  // 空间状态，自定义	
  status?: string(name='status', example='"IN_USE"'),
  // 空间类型，例如冷藏/冷冻/通道/平面/立体	
  type?: string(name='type', example='“平面“'),
}

// xr用户通行证分页结果信息
model XrUserTicketPageInfo {
  // 用户id
  userId: string(name='user_id', example='2088**'),
  // 用户通行证编码
  xrTicketCode: string(name='xr_ticket_code', example='2739875205'),
  // xr通行证资源池名称
  xrTicketPoolName: string(name='xr_ticket_pool_name', example='资源池001'),
  // 资源名称
  resourceName: string(name='resource_name', example='资源001'),
  // 用户通行证状态
  status: string(name='status', example='VALID'),
  // 有效期
  validTime: string(name='valid_time', example='2023-04-06'),
  // 所属业务
  bizScene: string(name='biz_scene', example='XR_LEASE'),
  // 租户id
  tenantId: string(name='tenant_id', example='QWERTYUI'),
  // 核销类型
  xrVerificationType: string(name='xr_verification_type', example='XR_DEVICE'),
}

// 标签流转历史
model LabelTrace {
  // 操作内容
  content?: string(name='content', example='XXXXX'),
  // 链上哈希
  txHash: string(name='tx_hash', example='XXXXX'),
  // 上链时间
  txTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='tx_time', example='XXXXX'),
  // 上链失败的错误码
  errorCode?: string(name='error_code', example='XXXXX'),
  // 上链失败的错误信息
  errorMsg?: string(name='error_msg', example='XXXXX'),
  // 是否上链成功
  isSuccess?: boolean(name='is_success', example='true, false'),
  // 标签对应资产版本号
  version?: long(name='version', example='1'),
}

// 外围设备信息
model Peripheral {
  // 外围设备Id
  peripheralId: string(name='peripheral_id', example='123'),
  // 数据模型id
  // 
  peripheralDataModelId: string(name='peripheral_data_model_id', example='123456'),
  // 场景码
  // 
  scene: string(name='scene', example='scene1'),
  // 外围设备名称
  // 
  peripheralName?: string(name='peripheral_name', example='锂电池1 '),
  // 厂商名称
  // 
  corpName?: string(name='corp_name', example='宁德时代1'),
  // 链上外围设备Id
  // 
  chainPeripheralId: string(name='chain_peripheral_id', example='123123'),
  // 链上哈希
  txHash: string(name='tx_hash', example='txhash123'),
  // 上链时间
  txTime: long(name='tx_time', example='1605076751000'),
  // 设备类型编码，必填，对应资管平台中的设备类型 
  // 
  // 枚举值：
  // 
  // 车辆 1000 
  // 车辆 四轮车 1001 
  // 车辆 四轮车 纯电四轮车 1002 
  // 车辆 四轮车 混动四轮车 1003 
  // 车辆 四轮车 燃油四轮车 1004 
  // 车辆 两轮车 1011 
  // 车辆 两轮车 两轮单车 1012 
  // 车辆 两轮车 两轮助力车 1013 
  // 
  // 换电柜 2000 
  // 换电柜 二轮车换电柜 2001 
  // 
  // 电池 3000 
  // 电池 磷酸铁电池 3001 
  // 电池 三元锂电池 3002 
  // 
  // 回收设备 4000 
  // 
  // 垃圾分类回收 4001 
  // 
  // 洗车机 5000
  deviceTypeCode: long(name='device_type_code', example='3000'),
  // 单价，单位分
  initialPrice: long(name='initial_price', example='1000'),
  // 出厂时间
  factoryTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time', example='2018-10-10T10:10:00Z'),
  // 投放时间
  releaseTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time', example='2018-10-10T10:10:00Z'),
}

// 订单计费数据
model OrderPushInfo {
  // 订单号
  orderId: string(name='order_id', example='208395'),
  // 时间戳，取订单上链timestamp字段
  orderCollectTime: string(name='order_collect_time', example='1665490037182'),
  // 订单总金额
  totalAmount: string(name='total_amount', example='12000.37'),
  // 租户id
  tenantId: string(name='tenant_id', example='1'),
}

// 订单同步成功列表
model DeviceOrderResult {
  // 上链id
  antchainId: string(name='antchain_id', example='amdfgs'),
  // 订单id
  orderId: string(name='order_id', example='34'),
}

// 物模型事件VO
model ThingModelEventVO {
  // 名称
  name: string(name='name', example='设备状态数据'),
  // 物模型功能Id
  featureId: string(name='feature_id', example='7067312861108285440'),
  // 业务标识
  bizType: string(name='biz_type', example='LOCATION'),
  // 事件属性列表
  eventProperties: string(name='event_properties', example='[...]'),
}

// 设备注册结果对象
model IotBasicDeviceRegisterResult {
  // 设备did
  deviceDid: string(name='device_did', example='did:private:12dsadadadf'),
  // 设备密钥
  privateKey: string(name='private_key', example='12321321'),
  // 设备名称
  deviceName: string(name='device_name', example='test'),
  // 设备sn
  deviceSn: string(name='device_sn', example='12321321'),
}

// 信物链实体身份注册请求结构体
model ThingsDidBaseRegisterRequest {
  // 信物链实体的所有者的分布式身份
  ownerTenantDid?: string(name='owner_tenant_did', example='"did:mychain:6c9f6cde4f63103d25ab1d9893242547a8518d8f51bff1a9da44e4f8537a9816"'),
  // 信物链实体的使用方的分布式身份列表
  userDid?: [ string ](name='user_did', example='["did:mychain:xxxx1","did:mychain:xxxx2"]'),
  // 信物链实体身份
  // DID_TYPE_DEVICE_ALIYUN: 阿里云设备
  // DID_TYPE_DEVICE_PEGASUS: 链机设备
  // DID_TYPE_DEVICE_MCU: MCU设备
  // DID_TYPE_DEVICE_INTEL: intel设备
  // DID_TYPE_DEVICE_DEVICE: 默认设备
  // ...
  // DID_TYPE_CORPORATE:  组织实体
  // DID_TYPE_WAREHOUSE：仓库实体
  // DID_TYPE_SPACE： 空间实体
  thingType: string(name='thing_type', example='"DID_TYPE_DEVICE_ALIYUN"'),
  // 原始id，租户内同一类型实体唯一
  thingOriginId: string(name='thing_origin_id', example='"aaaa123"'),
  // 实体原始名称
  thingOriginName: string(name='thing_origin_name', example='"摄像头a11"'),
  // 实体版本
  thingVersion: string(name='thing_version', example='"1.0.0"'),
  // 业务编码
  bizType?: string(name='biz_type', example='null'),
  // 信物链实体附加信息
  // 不同实体身份，有不同的json组织格式，参考另外技术文档
  thingExtraParams?: string(name='thing_extra_params', example='"附加信息"'),
}

// 告警策略分页查询结果
model AlertStrategyPageResponse {
  // 页数
  // 
  pageIndex: long(name='page_index', example='1'),
  // 页码
  // 
  pageSize: long(name='page_size', example='10'),
  // 总记录数
  // 
  totalSize: long(name='total_size', example='100'),
  // 总页数
  // 
  totalPages: long(name='total_pages', example='10'),
  // 数据
  pageData: [ AlertStrategy ](name='page_data', example='{...}'),
}

// 场景分页查询结果
model ScenePageResponse {
  // 页数
  // 
  pageIndex: long(name='page_index', example='1'),
  // 页码
  // 
  pageSize: long(name='page_size', example='10'),
  // 总记录数
  // 
  totalSize: long(name='total_size', example='100'),
  // 总页数
  // 
  totalPages: long(name='total_pages', example='10'),
  // 数据
  pageData: [ SceneModel ](name='page_data', example='{...}'),
}

// 产线压测任务对象
model OnlinePressureTestTask {
  // DATE
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example=''),
  // 修改时间	
  // 
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 产线场景码	
  // 
  scene: string(name='scene', example='MAYI-0001 '),
  // 压测的目标设备可信信根设备的唯一标识，JSONArray字符串	
  // 
  componentIdList: string(name='component_id_list', example='[ {"componentId": "864964060327592"} {"componentId": "864964060327592"} ]'),
  // 客户侧的压测报告	
  // 
  customerPtReport?: string(name='customer_pt_report', example='[ { "name":"流量消耗", "consumption":"100KB", "asExpected":true }, { "name":"功耗", "consumption":"25mA", "asExpected":true }, { "name":"OTA升级" "asExpected":true } ] } '),
  // 压测开始时间	
  // 
  ptStartTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='pt_start_time', example='2018-10-10T10:10:00Z'),
  // 压测结束时间	
  // 
  ptEndTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='pt_end_time', example='2018-10-10T10:10:00Z'),
  // RUNNING: 正在执行 SUCCESS : 测试通过 FAILED : 测试不通过	
  // 
  ptStatus: string(name='pt_status', example='RUNNING'),
  // 关联SIT环境的工单ID	
  // 
  workOrderId?: string(name='work_order_id', example='1122'),
  // 关联SIT环境的项目ID	
  // 
  projectId: string(name='project_id', example='11223344'),
  // 产线压测任务ID
  ptTaskId: string(name='pt_task_id', example='11223344566'),
  // 压测不通过的原因
  failureReason: string(name='failure_reason', example='数据验签失败'),
}

// 客户对应设备
model CustomerDeviceItem {
  // id
  id: long(name='id', example='1'),
  // 租户id
  tenantId: string(name='tenant_id', example='tenant_id'),
  // 账号id
  accountId: string(name='account_id', example='账号id'),
  //  设备品类-型号-规格  
  deviceType: string(name='device_type', example=' 设备品类-型号-规格  '),
  // 设备sn
  deviceSn: string(name='device_sn', example='SN'),
  // 设备did
  deviceDid: string(name='device_did', example='dasdf'),
  // 服务有效期
  valideTime: string(name='valide_time', example='服务有效期'),
  // 设备状态
  deviceStatus: string(name='device_status', example='INIT'),
  // 服务状态
  serviceStatus: string(name='service_status', example='INIT'),
  // 屏幕状态 开屏、锁屏
  screenStatus?: string(name='screen_status', example='屏幕状态'),
}

// 部标数据查询接口中返回的聚合统计指标结构体
model JtExtraData {
  // 查询的时间范围内的行驶总里程
  deltaMileage: long(name='delta_mileage', example='312'),
  // 最大车速
  maxSpeed: long(name='max_speed', example='60'),
  // 平均车速
  avgSpeed: long(name='avg_speed', example='60'),
}

// 信物链实体查询返回的数据结构，对应数据表字段
model DidBaseQueryResp {
  // 授权水平，0-默认关联授权
  authLevel?: long(name='auth_level', example='0'),
  // 证书公钥，特定实体可查询
  certPublicKey?: string(name='cert_public_key', example='""'),
  // 证书文本，特定实体可以查询
  certText?: string(name='cert_text', example='“”'),
  // DID扩展，设备/企业组织/仓库/空间的解析同ThingExtraParams
  didExtension?: string(name='did_extension', example='""'),
  // did公钥，特定w3c did实体可查询
  didPublicKey?: string(name='did_public_key', example='""'),
  // DID用户名，w3c did实体可查询
  didUsername?: string(name='did_username', example='""'),
  // 所有者DID
  ownerDid?: string(name='owner_did', example='"did:iot:xxxxx"'),
  // 实体附属空间列表，例如仓库下属库位，设备关联库位等
  spacesAttached?: [ string ](name='spaces_attached', example='["",""]'),
  // 实体附属实体列表，例如空间关联设备列表
  thingsAttached?: [ string ](name='things_attached', example='["",""]'),
  // 实体属性，在阿里云iot设备，对应三元组
  thingAttribute?: string(name='thing_attribute', example='",,"'),
  // 原始ID
  thingId?: string(name='thing_id', example='"原始ID"'),
  // 实体物模型id
  thingModelId?: string(name='thing_model_id', example='""'),
  // 服务端点，可实现w3c service endpoint
  thingServiceEndpoint?: string(name='thing_service_endpoint', example='""'),
  // 设备状态需要是通过 updateStatus api更新，
  // 其他状态通过updateThingsDid api更新
  thingStatus?: string(name='thing_status', example='实体状态'),
  // 实体类型，注册时候的类型
  // 0: 阿里云设备
  // 1: 链机设备
  // 2: MCU设备
  // 3: INTEL设备
  // 16384:  默认设备
  // 65536: 组织身份
  // 131072: 仓库身份
  // 196608: 空间身份
  thingType?: long(name='thing_type', example='0'),
  // 实体版本
  thingVersion?: string(name='thing_version', example='"1.0.0"'),
  // 使用者DID列表
  userDidList?: [ string ](name='user_did_list', example='["did:iot:xxxxx","did:iot:yyyyy"]'),
  // 查询的did
  did?: string(name='did', example='"did:iot:xxxx"'),
}

// 用户通行证创建详情
model XrUserTicketInfo {
  // xr通行证资源池名称
  xrTicketPoolName: string(name='xr_ticket_pool_name', example='资源池001'),
  // 购买数量
  count: long(name='count', example='10'),
}

// 用户操作集合
model IotBasicUserRequest {
  // 租户ID
  tenantId: string(name='tenant_id', example='XRE2DAS'),
  // 金融云用户id
  cloudUserId?: string(name='cloud_user_id', example='12321321'),
  // 登录名
  loginName?: string(name='login_name', example='test@alibaba-inc.com'),
}

// 设备业务数据
model BizContentGroup {
  // 设备链上ID（与scene参数、可信设备ID至少有一个参数不为空）
  chainDeviceId?: string(name='chain_device_id', example='txhash123'),
  // 可信设备ID（与scene参数、设备链上ID至少有一个参数不为空）
  trustiotDeviceId?: long(name='trustiot_device_id', example='7006071575519457281'),
  // 业务Id
  // 
  // 
  bizId: string(name='biz_id', example='123123'),
  // 业务类型
  // 
  // 
  bizType: string(name='biz_type', example='123123'),
  // 数据内容 JSON字符串
  // 
  // 
  content: string(name='content', example='{"":"",""}'),
}

// 查询设备交易结果对象数据
model QueryDeviceTransactionResultData {
  // 设备所属厂商
  corpName: string(name='corp_name', example='corp'),
  // 场景码,所属项目
  scene: string(name='scene', example='SMART_CAR_KEY'),
  // IMEI
  deviceImei?: string(name='device_imei', example='IMEI'),
  // 设备sn
  deviceSn: string(name='device_sn', example='设备sn123'),
  // 设备金额
  price?: string(name='price', example='1.05'),
  // 设备分布式身份did
  deviceDid: string(name='device_did', example='did1223'),
  // 设备终端唯一ID
  deviceTuid?: string(name='device_tuid', example='tuid123'),
  // 设备参数:品类+型号+规格
  deviceSpecs: string(name='device_specs', example='123'),
  // 所属租户
  tenantId: string(name='tenant_id', example='QWERTYUU'),
  // 所属账号
  accountName: string(name='account_name', example='123'),
}

// 组织请求注册更新结构体，应用在注册/更新API的ThingExtraParams
model CorporateReqModel {
  // 组织地址
  address?: string(name='address', example='xxxxx'),
  // 运营地址
  businessAddress?: string(name='business_address', example='""'),
  // 经营类目
  businessScope?: string(name='business_scope', example='""'),
  // 注册时间，字符串类型
  certifyDate?: string(name='certify_date', example='"注册时间"'),
  // 营业执照有效期，字符串
  licenceExpireDate?: string(name='licence_expire_date', example='""'),
  // 国家
  nation?: string(name='nation', example='CN'),
  // 组织类型
  type?: string(name='type', example='LimitedCompany'),
}

// 商品数字指纹注册用户信息
model GoodsDigitalFingerprintUserInfo {
  // 平台注册用户id
  userId: string(name='user_id', example='12207'),
  // 用户角色
  userRole: string(name='user_role', example='渠道商/平台'),
  // 用户登录id来源
  channel: string(name='channel', example='用户登录id来源'),
  // 作为平台使用方，提供对应的渠道用户id列表
  relationUserIdList?: [ string ](name='relation_user_id_list', example='["1001","1002"]'),
}

// 收集标签数据（元数据，无签名）
model CollectLabelRawContent {
  // 1.设备端上报数据内容 2.与设备上报的数据一致，服务端不可修改 3.解析后需与DataModel匹配 4.映射 Label 对象结构化存储 5.转为JSON后如果是JSONObject 映射单个 Label 6.转为JSON后如果是JSONArray 映射多个 Label
  content: string(name='content', example='XXXXX'),
  // 数据模型ID 
  dataModelId: string(name='data_model_id', example='001202103171566166669'),
}

// 发行设备
model DistributeDevice {
  // 链上设备Id  （deviceType=DEVICE 时有值)
  chainDeviceId?: string(name='chain_device_id', example='4533'),
  // 设备id
  deviceId: string(name='device_id', example='1122'),
  // 发行设备Id
  distributeDeviceId: string(name='distribute_device_id', example='4455'),
  // 场景码
  scene: string(name='scene', example='SCENE'),
  // 设备类型 DEVICE : 设备 、PERIPHERAL : 外围设备
  deviceType: string(name='device_type', example='PERIPHERAL'),
  // 链上外围设备Id（deviceType=PERIPHERAL 时有值)
  chainPeripheralId?: string(name='chain_peripheral_id', example='123123'),
  // 设备状态，取值范围：NORMAL、OFFLINE、UNREGISTER
  deviceStatus?: string(name='device_status', example='NORMAL'),
}

// 设备概览统计信息
model DeviceOverViewResponse {
  // 设备品类名称
  deviceCategoryName: string(name='device_category_name', example='test_category'),
  // 设备总数
  deviceTotal: long(name='device_total', example='2000'),
}

// 手机型号信息
model PhoneInfo {
  // 颜色
  colour: string(name='colour', example='红色'),
  // 色值
  colourNumber: string(name='colour_number', example='#BA0F2F'),
  // 内存大小
  memory: string(name='memory', example='128GB'),
}

// 设备规格信息体
model IotBasicDeviceSpecs {
  // 厂商编码
  corpValue: string(name='corp_value', example='telpo'),
  // 厂商名称
  corpName: string(name='corp_name', example='天波'),
  // 型号名称
  modelName: string(name='model_name', example='TPS1231'),
  // 型号编码
  modelValue: string(name='model_value', example='TPS123'),
  // 防疫机
  categoryName: string(name='category_name', example='设备品类名称'),
  // 设备品类编码
  categoryCode: string(name='category_code', example='antmic'),
  // 规格ID
  specsId: long(name='specs_id', example='12321321'),
  // 规格名称
  specsName: string(name='specs_name', example='规格名称'),
  // 规格编码
  specsValue: string(name='specs_value', example='规格编码'),
  // 规格参数
  specsParam: string(name='specs_param', example='规格参数'),
}

// 商品数字指纹信息
model GoodsDigitalFingerprintInfo {
  // 品类
  category: string(name='category', example='奢侈品'),
  // 品牌
  brand: string(name='brand', example='GUCCI'),
  // 款式
  style: string(name='style', example='Gucci Diana'),
  // 商品数字指纹鉴定点列表
  goodsPoints: [ GoodsDigitalFingerprintPoint ](name='goods_points', example='[{"sub_point_name":"正面","image_url":"http://xxxx1001"},{"sub_point_name":"背面","image_url":"http://xxxx1002"}]'),
  // 商品id
  goodsId: string(maxLength=128, name='goods_id', example='goodsId'),
}

// 具备实体权限访问者更新请求
model DidUpdateTenantReq {
  // 待更新实体身份did
  thingDid: string(name='thing_did', example='"did:iot_xxxxx"'),
  // 待更新访问者列表
  tenantList: [ string ](name='tenant_list', example='["",""]'),
  // 权限角色
  // TENANT_ROLE_OWNER
  // TENANT_ROLE_USER
  // TENANT_ROLE_OBSERVER
  tenantRole: string(name='tenant_role', example='TENANT_ROLE_OWNER'),
  // 增加权限：THINGS_OP_MODE_ADD
  // 删除权限：THINGS_OP_MODE_REMOVE
  opMode: string(name='op_mode', example='THINGS_OP_MODE_ADD'),
}

// 订单批量同步单个请求体
model DeviceorderRequest {
  // 订单id
  orderId: string(name='order_id', example='20034932'),
  // 支付状态
  orderStatus: string(name='order_status', example='PAID,UNPAID,PAYMENT_FAILED'),
  // 商家唯一id
  merchantId: string(name='merchant_id', example='30099234'),
  // 设备订单元素集合
  orderDeviceList: [ IotBasicDeviceOrderItem ](name='order_device_list', example=''),
  // 订单总金额，精确到小数点后两位
  totalAmount: string(name='total_amount', example='22220.98'),
}

// 上链数据
model CollectInfo {
  // 资产ID
  assetId: string(name='asset_id', example='56165431'),
  // 数据资产类型
  dataScene: string(name='data_scene', example='LOCK'),
  // 资产数据内容，业务要上链的数据JSON格式
  assetData: string(name='asset_data', example='{"a":xx,"b":xx}'),
  // 上链数据采集id
  collectId: string(name='collect_id', example='289hj98u'),
}

// id,name
model IdListView {
  // 数据id
  dataId: long(name='data_id', example='10'),
  // 数据名称
  dataName: string(name='data_name', example='name'),
}

// 键值对
model XNameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

model OpenAcecContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单号
  orderNo: string(name='order_no'),
  // 产品码，全局唯一
  productCode: string(name='product_code'),
  // 开通产品的租户ID
  tenantId: string(name='tenant_id'),
  // 实例Id
  instanceId: string(name='instance_id'),
  // 服务接入码
  accessCode: string(name='access_code'),
  // 用户自定义数据
  customData?: string(name='custom_data'),
}

model OpenAcecContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务返回字段
  data?: string(name='data'),
}

/**
 * Description: acec提供的SPI服务开通接口
 * Summary: acec提供的SPI服务开通接口
 */
async function openAcecContract(request: OpenAcecContractRequest): OpenAcecContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openAcecContractEx(request, headers, runtime);
}

/**
 * Description: acec提供的SPI服务开通接口
 * Summary: acec提供的SPI服务开通接口
 */
async function openAcecContractEx(request: OpenAcecContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenAcecContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.acec.contract.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StopAcecContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单号
  orderNo: string(name='order_no'),
  // 产品码，全局唯一
  productCode: string(name='product_code'),
  // 产品实例Id
  instanceId: string(name='instance_id'),
}

model StopAcecContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务返回字段
  data?: string(name='data'),
}

/**
 * Description: AI服务组提供的SPI服务停止接口
 * Summary: acec提供的SPI服务停止接口
 */
async function stopAcecContract(request: StopAcecContractRequest): StopAcecContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return stopAcecContractEx(request, headers, runtime);
}

/**
 * Description: AI服务组提供的SPI服务停止接口
 * Summary: acec提供的SPI服务停止接口
 */
async function stopAcecContractEx(request: StopAcecContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopAcecContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.acec.contract.stop', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ResumeAcecContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务接入码
  accessCode: string(name='access_code'),
  // 实例Id
  instanceId: string(name='instance_id'),
  // 订单号
  orderNo: string(name='order_no'),
  // 产品码，全局唯一
  productCode: string(name='product_code'),
}

model ResumeAcecContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务返回字段
  // 
  data?: string(name='data'),
}

/**
 * Description: acec提供的SPI服务复入接口
 * Summary: acec提供的SPI服务复入接口
 */
async function resumeAcecContract(request: ResumeAcecContractRequest): ResumeAcecContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return resumeAcecContractEx(request, headers, runtime);
}

/**
 * Description: acec提供的SPI服务复入接口
 * Summary: acec提供的SPI服务复入接口
 */
async function resumeAcecContractEx(request: ResumeAcecContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeAcecContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.acec.contract.resume', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseRealpersonRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 身份信息来源类型，当前仅支持证件（CERT_INFO）
  identityType: string(name='identity_type'),
  // 证件类型，当前仅支持身份证（IDENTITY_CARD）
  certType: string(name='cert_type'),
  // 真实姓名
  certName: string(name='cert_name'),
  // 证件号码
  certNo: string(name='cert_no'),
  // 商户请求的唯一标识。
  // 值为 32 位长度的字母数字组合。其中，前面几位字符是商户自定义的简称，中间几位可以使用一段时间，后段可以使用一个随机或递增序列。该值也可以使用 UUID
  outerOrderNo: string(name='outer_order_no'),
  // 认证结束回跳地址
  returnUrl: string(name='return_url'),
}

model CreateLeaseRealpersonResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务返回字段，JSON格式
  data?: string(name='data'),
}

/**
 * Description: 租赁智能中心实人认证创建服务
 * Summary: 租赁智能中心实人认证创建服务
 */
async function createLeaseRealperson(request: CreateLeaseRealpersonRequest): CreateLeaseRealpersonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseRealpersonEx(request, headers, runtime);
}

/**
 * Description: 租赁智能中心实人认证创建服务
 * Summary: 租赁智能中心实人认证创建服务
 */
async function createLeaseRealpersonEx(request: CreateLeaseRealpersonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseRealpersonResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.lease.realperson.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLeaseRealpersonRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实人认证的唯一标识
  certifyId: string(name='certify_id'),
  // 商户请求的唯一标识。 值为 32 位长度的字母数字组合。其中，前面几位字符是商户自定义的简称，中间几位可以使用一段时间，后段可以使用一个随机或递增序列。该值也可以使用 UUID
  outerOrderNo: string(name='outer_order_no'),
}

model QueryLeaseRealpersonResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务返回字段，JSON格式
  data?: string(name='data'),
}

/**
 * Description: 租赁智能中心实人认证查询服务
 * Summary: 租赁智能中心实人认证查询服务
 */
async function queryLeaseRealperson(request: QueryLeaseRealpersonRequest): QueryLeaseRealpersonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLeaseRealpersonEx(request, headers, runtime);
}

/**
 * Description: 租赁智能中心实人认证查询服务
 * Summary: 租赁智能中心实人认证查询服务
 */
async function queryLeaseRealpersonEx(request: QueryLeaseRealpersonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLeaseRealpersonResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.lease.realperson.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLeaseRiskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部系统的用户唯一ID
  userId: string(name='user_id'),
  // 用户姓名
  userName: string(name='user_name'),
  // 用户身份证号码
  certNo: string(name='cert_no'),
  // 用户手机号码
  mobile: string(name='mobile'),
  // 用户IP地址
  ip: string(name='ip'),
}

model QueryLeaseRiskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务返回字段，JSON格式
  data?: string(name='data'),
}

/**
 * Description: 租赁智能中心风控查询服务
 * Summary: 租赁智能中心风控查询服务
 */
async function queryLeaseRisk(request: QueryLeaseRiskRequest): QueryLeaseRiskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLeaseRiskEx(request, headers, runtime);
}

/**
 * Description: 租赁智能中心风控查询服务
 * Summary: 租赁智能中心风控查询服务
 */
async function queryLeaseRiskEx(request: QueryLeaseRiskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLeaseRiskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.lease.risk.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateXrUserticketRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 所属业务
  bizScene: string(name='biz_scene'),
  // 用户id
  userId: string(name='user_id'),
  // 购买的通行证列表详情
  xrUserTicketList: [ XrUserTicketInfo ](name='xr_user_ticket_list'),
}

model CreateXrUserticketResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 成功列表
  successList?: [ XrUserTicketResultInfo ](name='success_list'),
  // 失败列表
  failList?: [ XrUserTicketResultInfo ](name='fail_list'),
}

/**
 * Description: aiot-创建用户通行证
 * Summary: aiot-创建用户通行证
 */
async function createXrUserticket(request: CreateXrUserticketRequest): CreateXrUserticketResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createXrUserticketEx(request, headers, runtime);
}

/**
 * Description: aiot-创建用户通行证
 * Summary: aiot-创建用户通行证
 */
async function createXrUserticketEx(request: CreateXrUserticketRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateXrUserticketResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.xr.userticket.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListXrXrticketpoolRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 所属业务
  bizScene: string(name='biz_scene'),
}

model ListXrXrticketpoolResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 资源池列表
  xrTicketPoolList?: [ IdListView ](name='xr_ticket_pool_list'),
}

/**
 * Description: aiot-获取通行证资源池列表
 * Summary: aiot-获取通行证资源池列表
 */
async function listXrXrticketpool(request: ListXrXrticketpoolRequest): ListXrXrticketpoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listXrXrticketpoolEx(request, headers, runtime);
}

/**
 * Description: aiot-获取通行证资源池列表
 * Summary: aiot-获取通行证资源池列表
 */
async function listXrXrticketpoolEx(request: ListXrXrticketpoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListXrXrticketpoolResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.xr.xrticketpool.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryXrUserticketRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 所属业务
  bizScene: string(name='biz_scene'),
  // 资源id
  resourceId?: string(name='resource_id'),
  // 用户id
  userId?: string(name='user_id'),
  // 用户通行证状态，
  // VALID：待核销
  // WRITE_OFF：已核销
  // EXPIRED：已过期
  status?: string(name='status'),
  // 当前页
  current: long(name='current'),
  // 每页数量
  pageSize: long(name='page_size'),
}

model PagequeryXrUserticketResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 用户通行证列表
  xrUserTicketList?: [ XrUserTicketPageInfo ](name='xr_user_ticket_list'),
  // 当前页码
  current?: long(name='current'),
  // 每页条数
  pageSize?: long(name='page_size'),
  // 总数量
  total?: long(name='total'),
}

/**
 * Description: aiot-分页查询用户通行证
 * Summary: aiot-分页查询用户通行证
 */
async function pagequeryXrUserticket(request: PagequeryXrUserticketRequest): PagequeryXrUserticketResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryXrUserticketEx(request, headers, runtime);
}

/**
 * Description: aiot-分页查询用户通行证
 * Summary: aiot-分页查询用户通行证
 */
async function pagequeryXrUserticketEx(request: PagequeryXrUserticketRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryXrUserticketResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.xr.userticket.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetXrUserticketRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 所属业务
  bizScene: string(name='biz_scene'),
  // 用户通行证编码
  xrTicketCode: string(name='xr_ticket_code'),
}

model GetXrUserticketResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 用户通行证详情
  xrUserTicket?: XrUserTicketDetail(name='xr_user_ticket'),
}

/**
 * Description: aiot-查询用户通行证
 * Summary: aiot-查询用户通行证
 */
async function getXrUserticket(request: GetXrUserticketRequest): GetXrUserticketResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getXrUserticketEx(request, headers, runtime);
}

/**
 * Description: aiot-查询用户通行证
 * Summary: aiot-查询用户通行证
 */
async function getXrUserticketEx(request: GetXrUserticketRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetXrUserticketResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.xr.userticket.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateXrUserticketRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 所属业务
  bizScene: string(name='biz_scene'),
  // 用户通行证编码
  xrTicketCode: string(name='xr_ticket_code'),
  // 用户id
  userId: string(name='user_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 核销动作
  // open_screen（设备开屏）
  xrVerificationOperate?: string(name='xr_verification_operate'),
}

model OperateXrUserticketResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: aiot-核销用户通行证
 * Summary: aiot-核销用户通行证
 */
async function operateXrUserticket(request: OperateXrUserticketRequest): OperateXrUserticketResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateXrUserticketEx(request, headers, runtime);
}

/**
 * Description: aiot-核销用户通行证
 * Summary: aiot-核销用户通行证
 */
async function operateXrUserticketEx(request: OperateXrUserticketRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateXrUserticketResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.xr.userticket.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListXrResourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 所属业务
  bizScene: string(name='biz_scene'),
  // 核销资源类型
  xrVerificationType: string(name='xr_verification_type'),
}

model ListXrResourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 资源列表
  resourceList?: [ CodeListView ](name='resource_list'),
}

/**
 * Description: aiot-获取资源列表
 * Summary: aiot-获取资源列表
 */
async function listXrResource(request: ListXrResourceRequest): ListXrResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listXrResourceEx(request, headers, runtime);
}

/**
 * Description: aiot-获取资源列表
 * Summary: aiot-获取资源列表
 */
async function listXrResourceEx(request: ListXrResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListXrResourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.xr.resource.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryXrXrverificationmodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 唯一ID，对应线下场code
  resourceId?: string(name='resource_id'),
  // 唯一ID，对应线下场名称
  resourceName?: string(name='resource_name'),
  // 设备sn
  instanceName?: string(name='instance_name'),
  // 设备did
  instanceId?: string(name='instance_id'),
  // 当前页
  current: long(name='current'),
  // 每页大小
  pageSize: long(name='page_size'),
  // 业务类型
  bizScene: string(name='biz_scene'),
  // 核销类型
  type?: string(name='type'),
}

model PagequeryXrXrverificationmodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 核销实例列表
  xrVerificationModelList?: [ XrVerificationModelVo ](name='xr_verification_model_list'),
  // 当前页
  current?: long(name='current'),
  // 每页数据量
  pageSize?: long(name='page_size'),
  // 数据总条数
  total?: long(name='total'),
  // 总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: aiot-核销实例分页查询
 * Summary: aiot-核销实例分页查询
 */
async function pagequeryXrXrverificationmodel(request: PagequeryXrXrverificationmodelRequest): PagequeryXrXrverificationmodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryXrXrverificationmodelEx(request, headers, runtime);
}

/**
 * Description: aiot-核销实例分页查询
 * Summary: aiot-核销实例分页查询
 */
async function pagequeryXrXrverificationmodelEx(request: PagequeryXrXrverificationmodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryXrXrverificationmodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.xr.xrverificationmodel.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryXrCustomerdeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备sn
  deviceSn?: string(name='device_sn'),
  // 服务状态
  serviceStatus?: string(name='service_status'),
  // 设备状态
  deviceStatus?: string(name='device_status'),
  //  设备品类-型号-规格  
  deviceType?: string(name='device_type'),
  // 当前页
  current: long(name='current'),
  // 每页数据
  pageSize: long(name='page_size'),
  // 业务类型
  bizScene: string(name='biz_scene'),
}

model PagequeryXrCustomerdeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 当前页
  current?: long(name='current'),
  // 客户对应设备列表
  customerDeviceList?: [ CustomerDeviceItem ](name='customer_device_list'),
  // 每页数据
  pageSize?: long(name='page_size'),
  // 数据总条数
  total?: long(name='total'),
  // 总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: aiot-客户对应设备分页查询
 * Summary: aiot-客户对应设备分页查询
 */
async function pagequeryXrCustomerdevice(request: PagequeryXrCustomerdeviceRequest): PagequeryXrCustomerdeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryXrCustomerdeviceEx(request, headers, runtime);
}

/**
 * Description: aiot-客户对应设备分页查询
 * Summary: aiot-客户对应设备分页查询
 */
async function pagequeryXrCustomerdeviceEx(request: PagequeryXrCustomerdeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryXrCustomerdeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.xr.customerdevice.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateXrXrticketpoolRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务类型
  bizScene: string(name='biz_scene'),
  // 资源id
  resourceId: string(name='resource_id'),
  // 有效期
  validTime: string(name='valid_time'),
  // 体验时长
  testTime: long(name='test_time'),
  // vr设备集合
  xrApps?: string(name='xr_apps'),
  // 券池数量，能发多少张券
  maxPoolCount: long(name='max_pool_count'),
  // 券池名称
  xrTicketPoolName: string(name='xr_ticket_pool_name'),
  // 核销类型
  xrVerificationType: string(name='xr_verification_type'),
}

model CreateXrXrticketpoolResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: aiot-xr通行证创建
 * Summary: aiot-xr通行证创建
 */
async function createXrXrticketpool(request: CreateXrXrticketpoolRequest): CreateXrXrticketpoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createXrXrticketpoolEx(request, headers, runtime);
}

/**
 * Description: aiot-xr通行证创建
 * Summary: aiot-xr通行证创建
 */
async function createXrXrticketpoolEx(request: CreateXrXrticketpoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateXrXrticketpoolResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.xr.xrticketpool.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateXrXrticketpoolRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 券池名称
  xrTicketPoolName: string(name='xr_ticket_pool_name'),
  // 资源id
  resourceId?: string(name='resource_id'),
  // 通行证有效期
  validTime?: string(name='valid_time'),
  // 体验时长
  testTime?: long(name='test_time'),
  // vr设备集合
  xrApps?: string(name='xr_apps'),
  // 券池剩余数量
  surplusCount?: long(name='surplus_count'),
  // 核销类型，资源id改变时必须有值
  xrVerificationType?: string(name='xr_verification_type'),
  // 业务类型
  bizScene: string(name='biz_scene'),
}

model UpdateXrXrticketpoolResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: aiot-xr通行证修改
 * Summary: aiot-xr通行证修改
 */
async function updateXrXrticketpool(request: UpdateXrXrticketpoolRequest): UpdateXrXrticketpoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateXrXrticketpoolEx(request, headers, runtime);
}

/**
 * Description: aiot-xr通行证修改
 * Summary: aiot-xr通行证修改
 */
async function updateXrXrticketpoolEx(request: UpdateXrXrticketpoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateXrXrticketpoolResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.xr.xrticketpool.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryXrXrticketpoolRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务类型
  bizScene: string(name='biz_scene'),
  // 资源id
  resourceId?: string(name='resource_id'),
  // 券池名称
  xrTicketPoolName?: string(name='xr_ticket_pool_name'),
  // 通行证状态，
  // EXPIRED：已过期
  // VALID：有效
  // SALED：已出售
  status?: string(name='status'),
  // 当前页
  // 
  current: long(name='current'),
  // 每页大小
  pageSize: long(name='page_size'),
}

model PagequeryXrXrticketpoolResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 通行证列表
  xrTicketPoolList?: [ XrTicketPoolItem ](name='xr_ticket_pool_list'),
  // 是否成功
  success?: boolean(name='success'),
  // 当前页
  current?: long(name='current'),
  // 每页数据条数
  pageSize?: long(name='page_size'),
  // 总数量
  total?: long(name='total'),
  // 总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: aiot-xr通行证分页查询
 * Summary: aiot-xr通行证分页查询
 */
async function pagequeryXrXrticketpool(request: PagequeryXrXrticketpoolRequest): PagequeryXrXrticketpoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryXrXrticketpoolEx(request, headers, runtime);
}

/**
 * Description: aiot-xr通行证分页查询
 * Summary: aiot-xr通行证分页查询
 */
async function pagequeryXrXrticketpoolEx(request: PagequeryXrXrticketpoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryXrXrticketpoolResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.xr.xrticketpool.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncDeviceScreenstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 所属业务
  bizScene: string(name='biz_scene'),
  // 设备did
  deviceDid: string(name='device_did'),
  // 设备屏幕状态
  deviceScreenStatus: string(name='device_screen_status'),
  // 租户id
  tenantId: string(name='tenant_id'),
  // 状态改变时间
  statusChangeTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='status_change_time'),
}

model SyncDeviceScreenstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: aiot-同步设备屏幕状态
 * Summary: aiot-同步设备屏幕状态
 */
async function syncDeviceScreenstatus(request: SyncDeviceScreenstatusRequest): SyncDeviceScreenstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncDeviceScreenstatusEx(request, headers, runtime);
}

/**
 * Description: aiot-同步设备屏幕状态
 * Summary: aiot-同步设备屏幕状态
 */
async function syncDeviceScreenstatusEx(request: SyncDeviceScreenstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncDeviceScreenstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.screenstatus.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateXrXrticketpoolRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // xr通行证批量创建请求列表
  xrTicketPoolReqs: [ XrTicketPoolBatchReq ](name='xr_ticket_pool_reqs'),
  // 业务类型
  bizScene: string(name='biz_scene'),
}

model BatchcreateXrXrticketpoolResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // xr通行证创建成功列表
  successList?: [ XrTicketPoolSuccessList ](name='success_list'),
  // xr通行证创建失败列表
  failList?: [ XrTicketPoolFailList ](name='fail_list'),
}

/**
 * Description: xr通行证批量创建
 * Summary: xr通行证批量创建
 */
async function batchcreateXrXrticketpool(request: BatchcreateXrXrticketpoolRequest): BatchcreateXrXrticketpoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateXrXrticketpoolEx(request, headers, runtime);
}

/**
 * Description: xr通行证批量创建
 * Summary: xr通行证批量创建
 */
async function batchcreateXrXrticketpoolEx(request: BatchcreateXrXrticketpoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateXrXrticketpoolResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.xr.xrticketpool.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListXrXrverificationmodelinstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务类型
  bizScene: string(name='biz_scene'),
  // 资源id
  resourceId: string(name='resource_id'),
  // 核销类型
  xrVerificationType: string(name='xr_verification_type'),
}

model ListXrXrverificationmodelinstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 实例信息列表
  instanceInfoList?: [ InstanceInfo ](name='instance_info_list'),
}

/**
 * Description: aiot-获取资源实例列表
 * Summary: aiot-获取资源实例列表
 */
async function listXrXrverificationmodelinstance(request: ListXrXrverificationmodelinstanceRequest): ListXrXrverificationmodelinstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listXrXrverificationmodelinstanceEx(request, headers, runtime);
}

/**
 * Description: aiot-获取资源实例列表
 * Summary: aiot-获取资源实例列表
 */
async function listXrXrverificationmodelinstanceEx(request: ListXrXrverificationmodelinstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListXrXrverificationmodelinstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.xr.xrverificationmodelinstance.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailXrXrticketpoolRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务类型
  bizScene: string(name='biz_scene'),
  // 券名称
  xrTicketPoolName: string(name='xr_ticket_pool_name'),
}

model DetailXrXrticketpoolResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 通行证对象
  xrTicketPoolDetail?: XrTicketPoolItem(name='xr_ticket_pool_detail'),
}

/**
 * Description: aiot-xr通行证详情查询
 * Summary: aiot-xr通行证详情查询
 */
async function detailXrXrticketpool(request: DetailXrXrticketpoolRequest): DetailXrXrticketpoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailXrXrticketpoolEx(request, headers, runtime);
}

/**
 * Description: aiot-xr通行证详情查询
 * Summary: aiot-xr通行证详情查询
 */
async function detailXrXrticketpoolEx(request: DetailXrXrticketpoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailXrXrticketpoolResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.xr.xrticketpool.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateAiotnextbsOpenapiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作类型
  operateType: string(name='operate_type'),
  // 参数签名
  paramSign: string(name='param_sign'),
  // 业务操作类型
  bizType: string(name='biz_type'),
  // 操作人id
  operatorId: string(name='operator_id'),
  // 类名（实现类），首字母小写
  interfaceName: string(name='interface_name'),
  // 方法名
  methodName: string(name='method_name'),
  // 参数类路径
  paramClass: string(name='param_class'),
  // 参数数据
  paramList: string(name='param_list'),
}

model OperateAiotnextbsOpenapiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作是否成功
  success?: boolean(name='success'),
  // 结果数据
  result?: string(name='result'),
}

/**
 * Description: aiotnextbs-openApi操作
 * Summary: aiotnextbs-openApi操作
 */
async function operateAiotnextbsOpenapi(request: OperateAiotnextbsOpenapiRequest): OperateAiotnextbsOpenapiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateAiotnextbsOpenapiEx(request, headers, runtime);
}

/**
 * Description: aiotnextbs-openApi操作
 * Summary: aiotnextbs-openApi操作
 */
async function operateAiotnextbsOpenapiEx(request: OperateAiotnextbsOpenapiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateAiotnextbsOpenapiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.aiotnextbs.openapi.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FinishTraceConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 私有化端配置成功标志
  success: boolean(name='success'),
  // 租户
  privatedTenant: string(name='privated_tenant'),
  // 私有化端唯一标识
  uniqueNum: string(name='unique_num'),
  // 任务信息，用于消费者回告
  taskInfo: TaskInfo(name='task_info'),
}

model FinishTraceConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务结果码
  result?: string(name='result'),
}

/**
 * Description: 私有化配置推送回告API 
 * Summary: 私有化配置推送回告API 
 */
async function finishTraceConfig(request: FinishTraceConfigRequest): FinishTraceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return finishTraceConfigEx(request, headers, runtime);
}

/**
 * Description: 私有化配置推送回告API 
 * Summary: 私有化配置推送回告API 
 */
async function finishTraceConfigEx(request: FinishTraceConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FinishTraceConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.trace.config.finish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBaiOcrRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 调用业务方身份标识，指明调用来源
  appKey: string(name='app_key'),
  // OCR服务的业务类型，目前支持：
  // businessLicense，营业执照识别
  // idCard，身份证识别
  // bankCard，银行卡识别
  // VATInvoice，增值税发票识别
  ocrType: string(name='ocr_type'),
  // 请求的资源类型，目前支持：
  // image，图片
  // pdf，PDF复印件
  sourceType: string(name='source_type'),
  // 图片或PDF等内容的base64内容字符串
  sourceBase64: string(name='source_base64'),
  // 资源的附加属性
  // 如针对身份证识别，需要指定face(人像面)或back(国徽面)
  sourceConfigSide?: string(name='source_config_side'),
}

model QueryBaiOcrResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果体，JSON字符串
  data?: string(name='data'),
}

/**
 * Description: BAI提供的OCR服务接口
 * Summary: BAI提供的OCR服务
 */
async function queryBaiOcr(request: QueryBaiOcrRequest): QueryBaiOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBaiOcrEx(request, headers, runtime);
}

/**
 * Description: BAI提供的OCR服务接口
 * Summary: BAI提供的OCR服务
 */
async function queryBaiOcrEx(request: QueryBaiOcrRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBaiOcrResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.bai.ocr.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAiidentificationQrcodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户身份标识
  appKey: string(name='app_key'),
  // BaiQrcodeComparisonReqData转为JSONString后再getBytes
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
}

model QueryAiidentificationQrcodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  data?: BaiQrcodeComparisonRespData(name='data'),
}

/**
 * Description: AI二维码验真
 * Summary: AI二维码验真
 */
async function queryAiidentificationQrcode(request: QueryAiidentificationQrcodeRequest): QueryAiidentificationQrcodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAiidentificationQrcodeEx(request, headers, runtime);
}

/**
 * Description: AI二维码验真
 * Summary: AI二维码验真
 */
async function queryAiidentificationQrcodeEx(request: QueryAiidentificationQrcodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAiidentificationQrcodeResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'blockchain.bot.aiidentification.qrcode.query',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var queryAiidentificationQrcodeResponse = new QueryAiidentificationQrcodeResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return queryAiidentificationQrcodeResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.aiidentification.qrcode.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAiidentificationGoodsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户身份标识
  appKey: string(name='app_key'),
  // 鉴定商品信息
  goodsInfo: BaiGoodsComparisonReqData(name='goods_info'),
}

model QueryAiidentificationGoodsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  data?: BaiGoodsIdentificationRespData(name='data'),
}

/**
 * Description: AI商品鉴定
 * Summary: AI商品鉴定
 */
async function queryAiidentificationGoods(request: QueryAiidentificationGoodsRequest): QueryAiidentificationGoodsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAiidentificationGoodsEx(request, headers, runtime);
}

/**
 * Description: AI商品鉴定
 * Summary: AI商品鉴定
 */
async function queryAiidentificationGoodsEx(request: QueryAiidentificationGoodsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAiidentificationGoodsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.aiidentification.goods.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckAiidentificationGoodspointRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户调用标识
  appKey: string(name='app_key'),
  // 品类
  category: string(name='category'),
  // 品牌
  brand: string(name='brand'),
  // 款式
  style: string(name='style'),
  // 鉴定点信息
  pointInfo: BaiGoodsPoint(name='point_info'),
}

model CheckAiidentificationGoodspointResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商品鉴定点检测响应数据
  data?: BaiGoodsPointCheckRespData(name='data'),
}

/**
 * Description: 商品鉴定点图片检测
 * Summary: 商品鉴定点图片检测
 */
async function checkAiidentificationGoodspoint(request: CheckAiidentificationGoodspointRequest): CheckAiidentificationGoodspointResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkAiidentificationGoodspointEx(request, headers, runtime);
}

/**
 * Description: 商品鉴定点图片检测
 * Summary: 商品鉴定点图片检测
 */
async function checkAiidentificationGoodspointEx(request: CheckAiidentificationGoodspointRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckAiidentificationGoodspointResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.aiidentification.goodspoint.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckAiidentificationQrcodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户标识
  appKey: string(name='app_key'),
  // 请求data
  data: BaiQrcodeComparisonReqData(name='data'),
}

model CheckAiidentificationQrcodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  data?: BaiQrcodeComparisonRespData(name='data'),
}

/**
 * Description: 溯源码比对服务
 * Summary: AI溯源码验真
 */
async function checkAiidentificationQrcode(request: CheckAiidentificationQrcodeRequest): CheckAiidentificationQrcodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkAiidentificationQrcodeEx(request, headers, runtime);
}

/**
 * Description: 溯源码比对服务
 * Summary: AI溯源码验真
 */
async function checkAiidentificationQrcodeEx(request: CheckAiidentificationQrcodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckAiidentificationQrcodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.aiidentification.qrcode.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAiidentificationQrcodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户身份标识
  appKey: string(name='app_key'),
  // 二维码生成请求的请求数据
  data: BaiQrcodeGenerateReqData(name='data'),
}

model CreateAiidentificationQrcodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  data?: BaiQrcodeGenerateRespData(name='data'),
}

/**
 * Description: 用于生成溯源防伪码
 * Summary: 溯源防伪码生成接口
 */
async function createAiidentificationQrcode(request: CreateAiidentificationQrcodeRequest): CreateAiidentificationQrcodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAiidentificationQrcodeEx(request, headers, runtime);
}

/**
 * Description: 用于生成溯源防伪码
 * Summary: 溯源防伪码生成接口
 */
async function createAiidentificationQrcodeEx(request: CreateAiidentificationQrcodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAiidentificationQrcodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.aiidentification.qrcode.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyAiidentificationQrcodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户身份标识
  appKey: string(name='app_key'),
  // 溯源防伪码质检请求数据
  data: BaiQrcodeVerifyReqData(name='data'),
}

model VerifyAiidentificationQrcodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 溯源防伪码质检响应结果
  data?: BaiQrcodeVerifyRespData(name='data'),
}

/**
 * Description: B端二维码质检
 * Summary: B端二维码质检
 */
async function verifyAiidentificationQrcode(request: VerifyAiidentificationQrcodeRequest): VerifyAiidentificationQrcodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyAiidentificationQrcodeEx(request, headers, runtime);
}

/**
 * Description: B端二维码质检
 * Summary: B端二维码质检
 */
async function verifyAiidentificationQrcodeEx(request: VerifyAiidentificationQrcodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyAiidentificationQrcodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.aiidentification.qrcode.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAiidentificationGoodspointRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户调用标识
  appKey: string(name='app_key'),
  // 品类
  category: string(name='category'),
  // 品牌
  brand: string(name='brand'),
  // 款式
  style: string(name='style'),
  // 鉴定点信息
  pointInfo: BaiGoodsPoint(name='point_info'),
}

model QueryAiidentificationGoodspointResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商品鉴定点鉴定响应体
  data?: BaiGoodsPointQueryRespData(name='data'),
}

/**
 * Description: 商品鉴定
 * Summary: 商品鉴定
 */
async function queryAiidentificationGoodspoint(request: QueryAiidentificationGoodspointRequest): QueryAiidentificationGoodspointResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAiidentificationGoodspointEx(request, headers, runtime);
}

/**
 * Description: 商品鉴定
 * Summary: 商品鉴定
 */
async function queryAiidentificationGoodspointEx(request: QueryAiidentificationGoodspointRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAiidentificationGoodspointResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.aiidentification.goodspoint.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RegisterAiidentificationGoodsdigitalfingerprintRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户身份标识
  appKey: string(name='app_key'),
  // 商品数字指纹信息
  goodsInfo: GoodsDigitalFingerprintInfo(name='goods_info'),
  // 商品数字指纹用户信息
  userInfo: GoodsDigitalFingerprintUserInfo(name='user_info'),
}

model RegisterAiidentificationGoodsdigitalfingerprintResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 指纹图片入库是否成功
  data?: GoodsDigitalFingerprintRegisterResultData(name='data'),
}

/**
 * Description: AI商品数字指纹注册
 * Summary: AI数字指纹注册
 */
async function registerAiidentificationGoodsdigitalfingerprint(request: RegisterAiidentificationGoodsdigitalfingerprintRequest): RegisterAiidentificationGoodsdigitalfingerprintResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return registerAiidentificationGoodsdigitalfingerprintEx(request, headers, runtime);
}

/**
 * Description: AI商品数字指纹注册
 * Summary: AI数字指纹注册
 */
async function registerAiidentificationGoodsdigitalfingerprintEx(request: RegisterAiidentificationGoodsdigitalfingerprintRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RegisterAiidentificationGoodsdigitalfingerprintResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.aiidentification.goodsdigitalfingerprint.register', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckAiidentificationGoodsdigitalfingerprintRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户身份标识
  appKey: string(name='app_key'),
  // 商品数字指纹鉴定信息
  goodsInfo: GoodsDigitalFingerprintInfo(name='goods_info'),
  // 商品数字指纹注册用户信息
  userInfo: GoodsDigitalFingerprintUserInfo(name='user_info'),
}

model CheckAiidentificationGoodsdigitalfingerprintResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商品数字指纹整体鉴定结果
  data?: GoodsDigitalFingerprintIdentifyResultData(name='data'),
}

/**
 * Description: AI商品数字指纹鉴定
 * Summary: AI商品数字指纹鉴定
 */
async function checkAiidentificationGoodsdigitalfingerprint(request: CheckAiidentificationGoodsdigitalfingerprintRequest): CheckAiidentificationGoodsdigitalfingerprintResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkAiidentificationGoodsdigitalfingerprintEx(request, headers, runtime);
}

/**
 * Description: AI商品数字指纹鉴定
 * Summary: AI商品数字指纹鉴定
 */
async function checkAiidentificationGoodsdigitalfingerprintEx(request: CheckAiidentificationGoodsdigitalfingerprintRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckAiidentificationGoodsdigitalfingerprintResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.aiidentification.goodsdigitalfingerprint.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAiidentificationQrcodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求id
  requestId?: string(name='request_id'),
  // 二维码识别请求体
  data: BaiQrcodeParseReqData(name='data'),
}

model GetAiidentificationQrcodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求id
  requestId?: string(name='request_id'),
  // 返回码
  code?: string(name='code'),
  // 返回信息
  message?: string(name='message'),
  // 二维码识别结果
  data?: BaiQrcodeParseRespData(name='data'),
}

/**
 * Description: 识别票据上的二维码
 * Summary: AI二维码识别
 */
async function getAiidentificationQrcode(request: GetAiidentificationQrcodeRequest): GetAiidentificationQrcodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAiidentificationQrcodeEx(request, headers, runtime);
}

/**
 * Description: 识别票据上的二维码
 * Summary: AI二维码识别
 */
async function getAiidentificationQrcodeEx(request: GetAiidentificationQrcodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAiidentificationQrcodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.aiidentification.qrcode.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAcsDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备ID
  deviceId: string(name='device_id'),
  // 场景码-对应acs iot管控后台项目code
  scene: string(name='scene'),
  // 设备类型编码-对应acs iot管控后台设备类型编码
  classCode: string(name='class_code'),
  // 设备注册信息
  content: string(name='content'),
  // 设备注册信息 签名
  signature: string(name='signature'),
  // 设备名称
  deviceName: string(name='device_name'),
  // 设备单价 单位：分
  initialPrice?: long(name='initial_price'),
  // 设备出厂时间
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 设备投放时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
}

model CreateAcsDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上设备Id
  chainDeviceid?: string(name='chain_deviceid'),
  // 发行设备ID
  distributeDeviceId?: string(name='distribute_device_id'),
  // 设备激活文本-设备直连上链方式使用
  activeData?: string(name='active_data'),
}

/**
 * Description: biot 私有化 设备注册接口
 * Summary: biot 私有化 设备注册接口
 */
async function createAcsDevice(request: CreateAcsDeviceRequest): CreateAcsDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAcsDeviceEx(request, headers, runtime);
}

/**
 * Description: biot 私有化 设备注册接口
 * Summary: biot 私有化 设备注册接口
 */
async function createAcsDeviceEx(request: CreateAcsDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAcsDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.acs.device.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendAcsCollectorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上设备Id
  // 
  chainDeviceId: string(name='chain_device_id'),
  // 收集内容
  collectContentList: [ CollectContent ](name='collect_content_list'),
  // 随机数，防重放
  nonce: [ string ](name='nonce'),
}

model SendAcsCollectorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 收集数据返回的上链结果
  resultList?: [ SendCollectorResult ](name='result_list'),
}

/**
 * Description: biot 私有化 业务数据上报
 * Summary: biot 私有化 业务数据上报
 */
async function sendAcsCollector(request: SendAcsCollectorRequest): SendAcsCollectorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendAcsCollectorEx(request, headers, runtime);
}

/**
 * Description: biot 私有化 业务数据上报
 * Summary: biot 私有化 业务数据上报
 */
async function sendAcsCollectorEx(request: SendAcsCollectorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendAcsCollectorResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.acs.collector.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIotbasicDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户ID
  tenantId: string(name='tenant_id'),
  // 当前登录用户ID
  userId: string(name='user_id'),
  // 设备SN
  deviceSn?: string(name='device_sn'),
  // 设备品类code
  categoryCode?: string(name='category_code'),
  // 设备型号
  deviceModel?: string(name='device_model'),
  // 厂商名称
  corpName?: string(name='corp_name'),
  // 安装位置
  location?: string(name='location'),
  // 设备状态，在线/离线、故障
  deviceStatus?: string(name='device_status'),
  // 指定显示返回结果中的第几页。
  // 
  currentPage: long(minimum=1, name='current_page'),
  // 指定返回结果中每页显示的产品数量，最大值是200。
  // 
  // 
  pageSize: long(maximum=200, minimum=1, name='page_size'),
}

model QueryIotbasicDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页号。
  // 
  // 
  currentPage?: long(name='current_page'),
  // 总页数
  pageCount?: long(name='page_count'),
  // 每页显示条数
  pageSize?: long(name='page_size'),
  // 总记录数
  total?: long(name='total'),
  // 设备列表
  deviceList?: [ IotBasicDeviceQueryResponse ](name='device_list'),
}

/**
 * Description: 提供设备基础信息查询服务
 * Summary: IoT设备平台-设备查询
 */
async function queryIotbasicDevice(request: QueryIotbasicDeviceRequest): QueryIotbasicDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIotbasicDeviceEx(request, headers, runtime);
}

/**
 * Description: 提供设备基础信息查询服务
 * Summary: IoT设备平台-设备查询
 */
async function queryIotbasicDeviceEx(request: QueryIotbasicDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIotbasicDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.device.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RecognizeIotbasicCustomerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户ID
  tenantId: string(name='tenant_id'),
  // 用户ID或操作员ID
  userId: string(name='user_id'),
}

model RecognizeIotbasicCustomerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否授权开通IoT产品
  authorized?: boolean(name='authorized'),
  // 设备数量列表
  deviceList?: [ DeviceOverViewResponse ](name='device_list'),
  // 角色
  iotRole?: string(name='iot_role'),
}

/**
 * Description: IoT产品开通状态查询
 * Summary: IoT产品开通状态查询
 */
async function recognizeIotbasicCustomer(request: RecognizeIotbasicCustomerRequest): RecognizeIotbasicCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return recognizeIotbasicCustomerEx(request, headers, runtime);
}

/**
 * Description: IoT产品开通状态查询
 * Summary: IoT产品开通状态查询
 */
async function recognizeIotbasicCustomerEx(request: RecognizeIotbasicCustomerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RecognizeIotbasicCustomerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.customer.recognize', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CertifyIotbasicDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备序列号
  deviceSn: string(name='device_sn'),
  // 设备厂商
  corpName: string(name='corp_name'),
}

model CertifyIotbasicDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备名称
  deviceName?: string(name='device_name'),
  // 设备型号
  deviceModel?: string(name='device_model'),
  // 设备状态
  deviceStatus?: string(name='device_status'),
  // 注册时间
  registerTime?: string(name='register_time'),
  // 客户名称
  customerName?: string(name='customer_name'),
  // 客户对应租户ID
  tenantId?: string(name='tenant_id'),
  // 客户端版本
  appVersion?: string(name='app_version'),
  // 服务状态
  serviceStatus?: string(name='service_status'),
  // 子账号ID
  accountId?: string(name='account_id'),
  // 所属账号名称
  accountName?: string(name='account_name'),
  // 子账号角色
  userRole?: string(name='user_role'),
}

/**
 * Description: IoT设备平台-设备认证
 * Summary: IoT设备平台-设备认证
 */
async function certifyIotbasicDevice(request: CertifyIotbasicDeviceRequest): CertifyIotbasicDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return certifyIotbasicDeviceEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-设备认证
 * Summary: IoT设备平台-设备认证
 */
async function certifyIotbasicDeviceEx(request: CertifyIotbasicDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CertifyIotbasicDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.device.certify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateIotbasicUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作用户集合
  userList: [ IotBasicUserRequest ](name='user_list'),
  // 要开通的角色
  iotRole?: string(name='iot_role'),
  // 操作类型
  action: string(name='action'),
  // 操作人
  operatorId: string(name='operator_id'),
  // 参数签名校验
  paramSign?: string(name='param_sign'),
}

model OperateIotbasicUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作结果
  success?: boolean(name='success'),
  // 操作失败集合
  failList?: [ IotBasicUserRequest ](name='fail_list'),
  // 用户信息
  queryList?: [ IotBasicUserInfo ](name='query_list'),
}

/**
 * Description: iot平台用户注册操作，新增用户，删除用户，绑定角色等操作
 * Summary: iot平台用户注册操作
 */
async function operateIotbasicUser(request: OperateIotbasicUserRequest): OperateIotbasicUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateIotbasicUserEx(request, headers, runtime);
}

/**
 * Description: iot平台用户注册操作，新增用户，删除用户，绑定角色等操作
 * Summary: iot平台用户注册操作
 */
async function operateIotbasicUserEx(request: OperateIotbasicUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateIotbasicUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.user.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateIotbasicPermissionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作人
  // 
  operatorId: string(name='operator_id'),
  // 角色
  iotRole?: string(name='iot_role'),
  // 待添加的权限集合
  permissionList?: [ IotBasicPermissionData ](name='permission_list'),
  // 操作类型
  action: string(name='action'),
  // 绑定权限集合
  bindPermision?: [ string ](name='bind_permision'),
  // 参数签名校验
  paramSign?: string(name='param_sign'),
}

model OperateIotbasicPermissionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作结果
  success?: boolean(name='success'),
  // 权限列表	
  roleList?: [ IotBasicRolePermission ](name='role_list'),
}

/**
 * Description: iot 平台权限操作
 * Summary: iot 平台权限操作
 */
async function operateIotbasicPermission(request: OperateIotbasicPermissionRequest): OperateIotbasicPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateIotbasicPermissionEx(request, headers, runtime);
}

/**
 * Description: iot 平台权限操作
 * Summary: iot 平台权限操作
 */
async function operateIotbasicPermissionEx(request: OperateIotbasicPermissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateIotbasicPermissionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.permission.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIotbasicSnRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户ID
  tenantId: string(name='tenant_id'),
  // 当前登录用户ID
  // 
  userId: string(name='user_id'),
  // 指定显示返回结果中的第几页。
  // 
  currentPage: long(minimum=1, name='current_page'),
  // 指定返回结果中每页显示的产品数量，最大值是300。
  // 
  pageSize: long(maximum=300, minimum=1, name='page_size'),
}

model QueryIotbasicSnResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页号。
  // 
  currentPage?: long(name='current_page'),
  // 总页数
  // 
  pageCount?: long(name='page_count'),
  // 每页显示条数
  // 
  pageSize?: long(name='page_size'),
  // 总记录数
  // 
  total?: long(name='total'),
  // sn集合
  snList?: [ string ](name='sn_list'),
}

/**
 * Description: IoT设备平台-设备sn列表查询
 * Summary: IoT设备平台-设备sn列表查询
 */
async function queryIotbasicSn(request: QueryIotbasicSnRequest): QueryIotbasicSnResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIotbasicSnEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-设备sn列表查询
 * Summary: IoT设备平台-设备sn列表查询
 */
async function queryIotbasicSnEx(request: QueryIotbasicSnRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIotbasicSnResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.sn.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceSpecsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备SN
  deviceSn: string(name='device_sn'),
  // 厂商编码
  corpName: string(name='corp_name'),
}

model QueryDeviceSpecsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备规格描述
  deviceSpecs?: IotBasicDeviceSpecs(name='device_specs'),
  // 硬件模块集合
  hardwareModuleList?: [ IotBasicDeviceHardWareModule ](name='hardware_module_list'),
}

/**
 * Description: IoT设备平台-设备规格查询
 * Summary: IoT设备平台-设备规格查询
 */
async function queryDeviceSpecs(request: QueryDeviceSpecsRequest): QueryDeviceSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceSpecsEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-设备规格查询
 * Summary: IoT设备平台-设备规格查询
 */
async function queryDeviceSpecsEx(request: QueryDeviceSpecsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceSpecsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.specs.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateIotbasicRelrationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备属性关系id
  id?: long(name='id'),
  // 设备品类名称
  deviceCategory: string(name='device_category'),
  // 数据关系类型
  relationType: string(name='relation_type'),
  // 厂商名称
  corpName?: string(name='corp_name'),
  // TPS980	设备型号
  deviceModel?: string(name='device_model'),
  // 设备规格
  deviceSpecs?: string(name='device_specs'),
  // 硬件模块
  hardwareModule?: string(name='hardware_module'),
  // ADD,EDIT,DELETE，QUERY；选择操作
  operate: string(name='operate'),
  // 参数签名校验
  paramSign?: string(name='param_sign'),
  // 项目空间
  projectSpace?: string(name='project_space'),
}

model OperateIotbasicRelrationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作结果
  success?: boolean(name='success'),
  // 设备属性关系数据
  iotDeviceAttributeRelationshipData?: IotDeviceAttributeRelationshipData(name='iot_device_attribute_relationship_data'),
}

/**
 * Description: IoT设备平台-设备规格关系维护
 * Summary: IoT设备平台-设备规格关系维护
 */
async function operateIotbasicRelration(request: OperateIotbasicRelrationRequest): OperateIotbasicRelrationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateIotbasicRelrationEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-设备规格关系维护
 * Summary: IoT设备平台-设备规格关系维护
 */
async function operateIotbasicRelrationEx(request: OperateIotbasicRelrationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateIotbasicRelrationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.relration.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateIotbasicDictionaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id?: long(name='id'),
  // 设备品类编码
  deviceCategory?: string(name='device_category'),
  // 字典数据类型
  dictionaryType?: string(name='dictionary_type'),
  // 字典数据名称
  dictionaryName?: string(name='dictionary_name'),
  // 字典数据值
  dictionaryValue?: string(name='dictionary_value'),
  // 硬件模块参数
  dictionaryParam?: string(name='dictionary_param'),
  // 选择操作
  action: string(name='action'),
  // 参数签名校验
  paramSign?: string(name='param_sign'),
}

model OperateIotbasicDictionaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: IoT设备平台-设备字典数据维护
 * Summary: IoT设备平台-设备字典数据维护
 */
async function operateIotbasicDictionary(request: OperateIotbasicDictionaryRequest): OperateIotbasicDictionaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateIotbasicDictionaryEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-设备字典数据维护
 * Summary: IoT设备平台-设备字典数据维护
 */
async function operateIotbasicDictionaryEx(request: OperateIotbasicDictionaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateIotbasicDictionaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.dictionary.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateIotbasicCategoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 品类名称
  categoryName: string(name='category_name'),
  // 行业
  industry: string(name='industry'),
  // 场景
  scene: string(name='scene'),
  // 品类类型：标准 | 自定义
  categoryType: string(name='category_type'),
  // 描述内容
  remark?: string(name='remark'),
  // 操作类型
  action: string(name='action'),
  // 操作人id
  operatorId: string(name='operator_id'),
  // 参数签名校验
  paramSign: string(name='param_sign'),
  // 品类code
  categoryCode?: string(name='category_code'),
}

model OperateIotbasicCategoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作结果
  success?: boolean(name='success'),
}

/**
 * Description: IoT设备平台-设备品类数据维护
 * Summary: IoT设备平台-设备品类数据维护
 */
async function operateIotbasicCategory(request: OperateIotbasicCategoryRequest): OperateIotbasicCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateIotbasicCategoryEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-设备品类数据维护
 * Summary: IoT设备平台-设备品类数据维护
 */
async function operateIotbasicCategoryEx(request: OperateIotbasicCategoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateIotbasicCategoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.category.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateIotbasicControlconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备品类编码
  categoryCode: string(name='category_code'),
  // 厂商
  corpName: string(name='corp_name'),
  // 设备型号
  deviceModel?: string(name='device_model'),
  // 管控模式
  controlModel: string(name='control_model'),
  // 是否上链--注册设备后需上链存证，记录存证hash
  isRegisterNotify: string(name='is_register_notify'),
  // 是否标准设备-- 设备注册时 判断扩展属性 或展示时 显示扩展属性
  isStandard: string(name='is_standard'),
  // 是否生成密钥--注册设备时 生成密钥对， 存到 设备公钥(public_key)、deviceSecrect
  isGenSecret: string(name='is_gen_secret'),
  // 接口地址
  serviceProvider?: string(name='service_provider'),
  // 接口参数
  controlParam?: string(name='control_param'),
  // 操作类型
  action: string(name='action'),
  // 操作人id
  operatorId: string(name='operator_id'),
  // 参数签名校验
  paramSign: string(name='param_sign'),
  // 是否接入安全认证
  isSupportSec: string(name='is_support_sec'),
  // 设备规格ID
  deviceSpecs?: long(name='device_specs'),
  // 厂商ID
  corpId: long(name='corp_id'),
}

model OperateIotbasicControlconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: IoT设备平台-设备管控配置维护
 * Summary: IoT设备平台-设备管控配置维护
 */
async function operateIotbasicControlconfig(request: OperateIotbasicControlconfigRequest): OperateIotbasicControlconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateIotbasicControlconfigEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-设备管控配置维护
 * Summary: IoT设备平台-设备管控配置维护
 */
async function operateIotbasicControlconfigEx(request: OperateIotbasicControlconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateIotbasicControlconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.controlconfig.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateIotbasicChainmodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作类型
  action: string(name='action'),
  // 操作人id
  operatorId: string(name='operator_id'),
  // 参数签名校验
  paramSign: string(name='param_sign'),
  // 所属业务
  bizScene: string(name='biz_scene'),
  // 资产数据类型
  dataScene: string(name='data_scene'),
  // 资产ID-key
  assetsIdKey: string(name='assets_id_key'),
  // 资产ID-类型
  assetsIdType: string(name='assets_id_type'),
  // 签名验证方式
  signatureCheckType: string(name='signature_check_type'),
}

model OperateIotbasicChainmodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: IoT设备平台-上链业务模型配置维护
 * Summary: IoT设备平台-上链业务模型配置维护
 */
async function operateIotbasicChainmodel(request: OperateIotbasicChainmodelRequest): OperateIotbasicChainmodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateIotbasicChainmodelEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-上链业务模型配置维护
 * Summary: IoT设备平台-上链业务模型配置维护
 */
async function operateIotbasicChainmodelEx(request: OperateIotbasicChainmodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateIotbasicChainmodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.chainmodel.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateIotbasicDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备不可操作列表
  deviceDisableList: [ DeviceDisableData ](name='device_disable_list'),
  // 不允许操作类型
  // DISABLE_CHAGE：不允许变更租户
  // DISABLE_EDIT：不允许编辑设备
  // DISABLE_DEL：不允许删除设备
  disableOperateType: string(name='disable_operate_type'),
  // 操作状态
  status: string(name='status'),
  // 不允许操作提示，操作状态为true时必须有值
  message?: string(name='message'),
}

model OperateIotbasicDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: IoT设备平台-设备不可操作标记更新
 * Summary: IoT设备平台-设备不可操作标记更新
 */
async function operateIotbasicDevice(request: OperateIotbasicDeviceRequest): OperateIotbasicDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateIotbasicDeviceEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-设备不可操作标记更新
 * Summary: IoT设备平台-设备不可操作标记更新
 */
async function operateIotbasicDeviceEx(request: OperateIotbasicDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateIotbasicDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.device.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateIotbasicDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备厂商名称
  corpName: string(name='corp_name'),
  // 设备品类编码
  deviceCategoryCode: string(name='device_category_code'),
  // A1
  deviceModel: string(name='device_model'),
  // xxx
  deviceName: string(name='device_name'),
  // xe21d
  deviceSn: string(name='device_sn'),
  // standard
  deviceSpecs: string(name='device_specs'),
  // 安装位置
  location?: string(name='location'),
  // 设备标签
  nickName?: string(name='nick_name'),
  // secid
  secId?: string(name='sec_id'),
  // 设备扩展信息
  deviceExt?: string(name='device_ext'),
  // 业务场景编码
  bizScene: string(name='biz_scene'),
  // 所属租户ID
  tenantId: string(name='tenant_id'),
}

model CreateIotbasicDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ddi
  deviceDid?: string(name='device_did'),
  // 设备私钥
  privateKey?: string(name='private_key'),
}

/**
 * Description: biot设备注册-创建设备
 * Summary: biot设备注册-创建设备
 */
async function createIotbasicDevice(request: CreateIotbasicDeviceRequest): CreateIotbasicDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createIotbasicDeviceEx(request, headers, runtime);
}

/**
 * Description: biot设备注册-创建设备
 * Summary: biot设备注册-创建设备
 */
async function createIotbasicDeviceEx(request: CreateIotbasicDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIotbasicDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.device.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateIotbasicDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备厂商
  corpName: string(name='corp_name'),
  // 设备品类编码
  deviceCategoryCode: string(name='device_category_code'),
  // 业务场景码
  bizScene: string(name='biz_scene'),
  // 所属租户ID
  tenantId: string(name='tenant_id'),
  // 注册设备集合
  deviceList: [ IotBasicDeviceRegisterInfo ](name='device_list'),
}

model BatchcreateIotbasicDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 注册成功集合
  successList?: [ IotBasicDeviceRegisterResult ](name='success_list'),
  // 注册失败集合
  failList?: [ IotBasicDeviceRegisterFail ](name='fail_list'),
}

/**
 * Description: biot设备注册-批量创建设备
 * Summary: biot设备注册-批量创建设备
 */
async function batchcreateIotbasicDevice(request: BatchcreateIotbasicDeviceRequest): BatchcreateIotbasicDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateIotbasicDeviceEx(request, headers, runtime);
}

/**
 * Description: biot设备注册-批量创建设备
 * Summary: biot设备注册-批量创建设备
 */
async function batchcreateIotbasicDeviceEx(request: BatchcreateIotbasicDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateIotbasicDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.device.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncIotbasicDevicestatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备did
  deviceDid: string(name='device_did'),
  // 设备状态
  deviceStatus?: string(name='device_status'),
  // 设备签名
  deviceSignature: string(name='device_signature'),
  // 业务状态
  bizStatusInfo?: BizStatusInfoOp(name='biz_status_info'),
}

model SyncIotbasicDevicestatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: biot设备状态同步
 * Summary: iot平台-设备状态同步
 */
async function syncIotbasicDevicestatus(request: SyncIotbasicDevicestatusRequest): SyncIotbasicDevicestatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncIotbasicDevicestatusEx(request, headers, runtime);
}

/**
 * Description: biot设备状态同步
 * Summary: iot平台-设备状态同步
 */
async function syncIotbasicDevicestatusEx(request: SyncIotbasicDevicestatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncIotbasicDevicestatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.devicestatus.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyIotbasicIdentifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备did
  deviceDid: string(name='device_did'),
  // 设备认证参数
  verifyParam: string(name='verify_param'),
  // 设备签名，用设备pri_key 进行签名
  deviceSignature: string(name='device_signature'),
}

model VerifyIotbasicIdentifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证结果
  verifyResult?: string(name='verify_result'),
}

/**
 * Description: biot设备-安全认证
 * Summary: biot设备-安全认证
 */
async function verifyIotbasicIdentify(request: VerifyIotbasicIdentifyRequest): VerifyIotbasicIdentifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyIotbasicIdentifyEx(request, headers, runtime);
}

/**
 * Description: biot设备-安全认证
 * Summary: biot设备-安全认证
 */
async function verifyIotbasicIdentifyEx(request: VerifyIotbasicIdentifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyIotbasicIdentifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.identify.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateIotbasicDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备did
  deviceDid: string(name='device_did'),
  // 设备名称
  deviceName?: string(name='device_name'),
  // 安装位置
  location?: string(name='location'),
  // 设备扩展信息
  deviceExt?: string(name='device_ext'),
  // 设备标签
  nickName?: string(name='nick_name'),
  // 设备签名
  deviceSignature: string(name='device_signature'),
}

model UpdateIotbasicDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: IoT设备平台-更新设备信息
 * Summary: IoT设备平台-更新设备信息
 */
async function updateIotbasicDevice(request: UpdateIotbasicDeviceRequest): UpdateIotbasicDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateIotbasicDeviceEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-更新设备信息
 * Summary: IoT设备平台-更新设备信息
 */
async function updateIotbasicDeviceEx(request: UpdateIotbasicDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateIotbasicDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.device.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateIotbasicDevicecollectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id
  tenantId: string(name='tenant_id'),
  // 资产ID
  assetId?: string(name='asset_id'),
  // 数据资产类型
  dataScene: string(name='data_scene'),
  // 所属业务
  bizScene: string(name='biz_scene'),
  // 资产数据内容，业务要上链的数据JSON格式
  assetData: string(name='asset_data'),
}

model OperateIotbasicDevicecollectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 上链id
  antchainId?: string(name='antchain_id'),
}

/**
 * Description: IoT设备平台-设备上链
 * Summary: IoT设备平台-设备上链
 */
async function operateIotbasicDevicecollect(request: OperateIotbasicDevicecollectRequest): OperateIotbasicDevicecollectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateIotbasicDevicecollectEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-设备上链
 * Summary: IoT设备平台-设备上链
 */
async function operateIotbasicDevicecollectEx(request: OperateIotbasicDevicecollectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateIotbasicDevicecollectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.devicecollect.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateIotbasicProjectspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 项目空间id
  id?: long(name='id'),
  // 项目名称
  projectName?: string(name='project_name'),
  // 项目编码（device_base表字段biz_scene）
  projectCode?: string(name='project_code'),
  // 项目描述
  projectDesc?: string(name='project_desc'),
  // 项目负责人（PD）
  projectLeader?: string(name='project_leader'),
  // 上链ID（数据上到哪个业务链）
  upchainId?: string(name='upchain_id'),
  // 上链方式（通过IOT可信平台，banRest）
  upchainType?: string(name='upchain_type'),
  // 上链参数（账号，秘钥），json字符串格式
  upchainParams?: string(name='upchain_params'),
  // 是否上链
  isUpchain?: boolean(name='is_upchain'),
  // 操作类型
  action: string(name='action'),
  // 操作人id
  operatorId: string(name='operator_id'),
  // 参数签名校验
  paramSign: string(name='param_sign'),
}

model OperateIotbasicProjectspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: IoT设备平台-项目空间数据维护
 * Summary: IoT设备平台-项目空间数据维护
 */
async function operateIotbasicProjectspace(request: OperateIotbasicProjectspaceRequest): OperateIotbasicProjectspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateIotbasicProjectspaceEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-项目空间数据维护
 * Summary: IoT设备平台-项目空间数据维护
 */
async function operateIotbasicProjectspaceEx(request: OperateIotbasicProjectspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateIotbasicProjectspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.projectspace.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushRentMerchantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业法人名称(个人可空)
  legalPersonName?: string(name='legal_person_name'),
  // 企业法人证件号(个人可空)
  legalPersionIdcard?: string(name='legal_persion_idcard'),
  // 企业名称(个人名称)
  merchantName: string(name='merchant_name'),
  // 企业社会信用代码(个人身份证)
  merchantCreditNo: string(name='merchant_credit_no'),
  // 支付宝监管户账号
  alipayAccount?: string(name='alipay_account'),
  // 个人或企业
  // 个人：P
  // 企业：E
  merchantType: string(name='merchant_type'),
  // 企业联系人
  contacts?: string(name='contacts'),
  // 企业位置
  addr?: string(name='addr'),
}

model PushRentMerchantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 租房saas-企业信息同步(个人房东)
 * Summary: 租房saas-企业信息同步(个人房东)
 */
async function pushRentMerchant(request: PushRentMerchantRequest): PushRentMerchantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushRentMerchantEx(request, headers, runtime);
}

/**
 * Description: 租房saas-企业信息同步(个人房东)
 * Summary: 租房saas-企业信息同步(个人房东)
 */
async function pushRentMerchantEx(request: PushRentMerchantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushRentMerchantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.rent.merchant.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushRentBillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业主房屋账单ID(
  leaseBillId: string(name='lease_bill_id'),
  // 房源ID
  houseId: string(name='house_id'),
  // 总账单开始日期
  billBeginDate: string(name='bill_begin_date'),
  // 总账单结束日期
  billEndDate: string(name='bill_end_date'),
  // 总账单金额
  billMoney: string(name='bill_money'),
  // 提醒缴租日期范围(天数)
  remindRange: string(name='remind_range'),
  // 逾期未缴租警告日期范围(天数)
  warnRange: string(name='warn_range'),
  // 风险干预日期天数
  riskRange: string(name='risk_range'),
  // 账单租期集合
  billItemList: [ RentBillItem ](name='bill_item_list'),
}

model PushRentBillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 租房saas-业主账单信息同步
 * Summary: 租房saas-业主账单信息同步
 */
async function pushRentBill(request: PushRentBillRequest): PushRentBillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushRentBillEx(request, headers, runtime);
}

/**
 * Description: 租房saas-业主账单信息同步
 * Summary: 租房saas-业主账单信息同步
 */
async function pushRentBillEx(request: PushRentBillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushRentBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.rent.bill.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushRentRenterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租客id
  renterId: string(name='renter_id'),
  // 租客名称
  renterName: string(name='renter_name'),
  // 租客联系电话
  renterPhone: string(name='renter_phone'),
  // 租客身份证号
  renterIdCard?: string(name='renter_id_card'),
  // 房源唯一ID
  houseId: string(name='house_id'),
  // 租赁合同信息
  rentContract: RentContractInfo(name='rent_contract'),
  // 企业(业主)身份识别码
  merchantIdCard: string(name='merchant_id_card'),
}

model PushRentRenterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 租房saas-租客入住信息同步
 * Summary: 租房saas-租客入住信息同步
 */
async function pushRentRenter(request: PushRentRenterRequest): PushRentRenterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushRentRenterEx(request, headers, runtime);
}

/**
 * Description: 租房saas-租客入住信息同步
 * Summary: 租房saas-租客入住信息同步
 */
async function pushRentRenterEx(request: PushRentRenterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushRentRenterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.rent.renter.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncRentRentpaymentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租金缴纳账单ID
  leaseBillId: string(name='lease_bill_id'),
  // 租约分期ID
  billItemId: string(name='bill_item_id'),
  // 租约支付状态
  paymentState: string(name='payment_state'),
  // 支付操作日期，已支付或支付失败需要有值
  paymentDate?: string(name='payment_date'),
}

model SyncRentRentpaymentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 租房saas-租金缴纳支付状态通知
 * Summary: 租房saas-租金缴纳支付状态通知
 */
async function syncRentRentpayment(request: SyncRentRentpaymentRequest): SyncRentRentpaymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncRentRentpaymentEx(request, headers, runtime);
}

/**
 * Description: 租房saas-租金缴纳支付状态通知
 * Summary: 租房saas-租金缴纳支付状态通知
 */
async function syncRentRentpaymentEx(request: SyncRentRentpaymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncRentRentpaymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.rent.rentpayment.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushRentHouseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 房源信息集合 数组
  houseList: [ HouseInfo ](name='house_list'),
  // 企业(业主)身份识别码
  merchantIdCard: string(name='merchant_id_card'),
  // 联系电话
  phone?: string(name='phone'),
  // 联系人
  contract?: string(name='contract'),
  // 对应会员用户id
  userId?: string(name='user_id'),
}

model PushRentHouseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 租房saas-房源信息同步
 * Summary: 租房saas-房源信息同步
 */
async function pushRentHouse(request: PushRentHouseRequest): PushRentHouseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushRentHouseEx(request, headers, runtime);
}

/**
 * Description: 租房saas-房源信息同步
 * Summary: 租房saas-房源信息同步
 */
async function pushRentHouseEx(request: PushRentHouseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushRentHouseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.rent.house.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncIotbasicDevicegenerateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备厂商名称
  corpName: string(name='corp_name'),
  // 设备sn
  deviceSn: string(name='device_sn'),
  // 公钥
  pubKey: string(name='pub_key'),
  // 所属业务
  bizScene: string(name='biz_scene'),
  // 分组标签，标识密钥的分组
  tag: string(name='tag'),
}

model SyncIotbasicDevicegenerateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备私钥
  deviceKey?: string(name='device_key'),
  // 设备认证id
  secId?: string(name='sec_id'),
}

/**
 * Description: IoT设备平台-生成设备认证密钥
 * Summary: IoT设备平台-生成设备认证密钥
 */
async function syncIotbasicDevicegenerate(request: SyncIotbasicDevicegenerateRequest): SyncIotbasicDevicegenerateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncIotbasicDevicegenerateEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-生成设备认证密钥
 * Summary: IoT设备平台-生成设备认证密钥
 */
async function syncIotbasicDevicegenerateEx(request: SyncIotbasicDevicegenerateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncIotbasicDevicegenerateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.devicegenerate.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateIotbasicBatchcollectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 所属业务
  bizScene: string(name='biz_scene'),
  // 租户id
  tenantId: string(name='tenant_id'),
  // 上链数据列表
  collectInfoList: [ CollectInfo ](name='collect_info_list'),
}

model OperateIotbasicBatchcollectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 上链成功列表
  successList?: [ DeviceCollectResult ](name='success_list'),
  // 上链失败列表
  failList?: [ DeviceCollectFail ](name='fail_list'),
}

/**
 * Description: IoT设备平台-批量数据上链
 * Summary: IoT设备平台-批量数据上链
 */
async function operateIotbasicBatchcollect(request: OperateIotbasicBatchcollectRequest): OperateIotbasicBatchcollectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateIotbasicBatchcollectEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-批量数据上链
 * Summary: IoT设备平台-批量数据上链
 */
async function operateIotbasicBatchcollectEx(request: OperateIotbasicBatchcollectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateIotbasicBatchcollectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.batchcollect.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportIotbasicDeviceorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 所属业务
  bizScene: string(name='biz_scene'),
  // 订单ID
  orderId: string(name='order_id'),
  // 订单状态: 已支付
  orderStatus: string(name='order_status'),
  // 订单采购设备清单
  orderDeviceList: [ IotBasicDeviceOrderItem ](name='order_device_list'),
  // 商家ID，唯一编号
  merchantId?: string(name='merchant_id'),
  // 订单总金额，精确到小数后两位
  totalAmount: string(name='total_amount'),
}

model ImportIotbasicDeviceorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上hash地址
  antchainId?: string(name='antchain_id'),
  // 代表接口是否处理成功
  success?: boolean(name='success'),
}

/**
 * Description: IoT设备平台-设备订单导入
 * Summary: IoT设备平台-设备订单导入
 */
async function importIotbasicDeviceorder(request: ImportIotbasicDeviceorderRequest): ImportIotbasicDeviceorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importIotbasicDeviceorderEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-设备订单导入
 * Summary: IoT设备平台-设备订单导入
 */
async function importIotbasicDeviceorderEx(request: ImportIotbasicDeviceorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportIotbasicDeviceorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.deviceorder.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportIotbasicDeviceorderbatchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务类型
  bizScene: string(name='biz_scene'),
  // 订单同步批量请求体
  orderBatchSyncReq: [ DeviceorderRequest ](name='order_batch_sync_req'),
}

model ImportIotbasicDeviceorderbatchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 接口是否执行成功
  success?: boolean(name='success'),
  // 订单上链成功的集合
  successList?: [ DeviceOrderResult ](name='success_list'),
  // 订单上链失败的集合
  failList?: [ DeviceOrderFail ](name='fail_list'),
}

/**
 * Description: IoT设备平台-订单批量同步
 * Summary: IoT设备平台-订单批量同步
 */
async function importIotbasicDeviceorderbatch(request: ImportIotbasicDeviceorderbatchRequest): ImportIotbasicDeviceorderbatchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importIotbasicDeviceorderbatchEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-订单批量同步
 * Summary: IoT设备平台-订单批量同步
 */
async function importIotbasicDeviceorderbatchEx(request: ImportIotbasicDeviceorderbatchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportIotbasicDeviceorderbatchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.deviceorderbatch.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteIotbasicDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备did
  deviceDid: string(name='device_did'),
  // 设备所属用户
  userId: string(name='user_id'),
  // 设备did签名
  signature: string(name='signature'),
}

model DeleteIotbasicDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: IoT设备平台-删除设备信息
 * Summary: IoT设备平台-删除设备信息
 */
async function deleteIotbasicDevice(request: DeleteIotbasicDeviceRequest): DeleteIotbasicDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteIotbasicDeviceEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-删除设备信息
 * Summary: IoT设备平台-删除设备信息
 */
async function deleteIotbasicDeviceEx(request: DeleteIotbasicDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteIotbasicDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.device.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateIotbasicDevicecontrolRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备did 集合
  deviceDidList?: string(name='device_did_list'),
  // 设备did 集合
  deviceOperateInfos?: [ DeviceOperateInfo ](name='device_operate_infos'),
  // 设备操作类型
  deviceOperation: string(name='device_operation'),
  // 所属账号名称
  userId?: string(name='user_id'),
}

model OperateIotbasicDevicecontrolResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 操作成功的设备did列表
  successList?: [ string ](name='success_list'),
  // 操作失败的设备did及失败信息列表
  failList?: [ DeviceControlFail ](name='fail_list'),
}

/**
 * Description: IoT设备平台-设备远程管控
 * Summary: IoT设备平台-设备远程管控
 */
async function operateIotbasicDevicecontrol(request: OperateIotbasicDevicecontrolRequest): OperateIotbasicDevicecontrolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateIotbasicDevicecontrolEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-设备远程管控
 * Summary: IoT设备平台-设备远程管控
 */
async function operateIotbasicDevicecontrolEx(request: OperateIotbasicDevicecontrolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateIotbasicDevicecontrolResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.devicecontrol.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceRegisterresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备SN，可以传deviceSn和corpName，或者deviceDid，都传的以deviceDid为准
  deviceSn?: string(name='device_sn'),
  // 设备厂商名称，可以传deviceSn和corpName，或者deviceDid，都传的以deviceDid为准
  corpName?: string(name='corp_name'),
  // 设备did，可以传deviceSn和corpName，或者deviceDid，都传的以deviceDid为准
  deviceDid?: string(name='device_did'),
  // 租户id
  tenantId: string(name='tenant_id'),
}

model QueryDeviceRegisterresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作是否成功
  success?: boolean(name='success'),
  // 设备did
  deviceDid?: string(name='device_did'),
  // 设备秘钥
  privateKey?: string(name='private_key'),
}

/**
 * Description: IoT设备平台-设备注册结果查询
 * Summary: IoT设备平台-设备注册结果查询
 */
async function queryDeviceRegisterresult(request: QueryDeviceRegisterresultRequest): QueryDeviceRegisterresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceRegisterresultEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-设备注册结果查询
 * Summary: IoT设备平台-设备注册结果查询
 */
async function queryDeviceRegisterresultEx(request: QueryDeviceRegisterresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceRegisterresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.registerresult.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备did
  deviceDid: string(name='device_did'),
  // 设备did签名
  signature: string(name='signature'),
}

model QueryDeviceStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备did
  deviceDid?: string(name='device_did'),
  // 操作是否成功
  success?: boolean(name='success'),
  // 设备状态
  deviceStatus?: string(name='device_status'),
  // 设备认证状态
  authStatus?: string(name='auth_status'),
}

/**
 * Description: IoT设备平台-设备状态查询
 * Summary: IoT设备平台-设备状态查询
 */
async function queryDeviceStatus(request: QueryDeviceStatusRequest): QueryDeviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceStatusEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-设备状态查询
 * Summary: IoT设备平台-设备状态查询
 */
async function queryDeviceStatusEx(request: QueryDeviceStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.status.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateIotbasicOpenapiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作类型
  operateType: string(name='operate_type'),
  // 参数签名
  paramSign: string(name='param_sign'),
  // 业务操作类型
  bizType: string(name='biz_type'),
  // 操作人id
  operatorId: string(name='operator_id'),
  // 类名（实现类），首字母小写
  interfaceName: string(name='interface_name'),
  // 方法名
  methodName: string(name='method_name'),
  // 参数类路径
  paramClass: string(name='param_class'),
  // 参数数据
  paramList: string(name='param_list'),
}

model OperateIotbasicOpenapiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作是否成功
  success?: boolean(name='success'),
  // 结果数据
  result?: string(name='result'),
}

/**
 * Description: IoT设备平台-openApi操作
 * Summary: IoT设备平台-openApi操作
 */
async function operateIotbasicOpenapi(request: OperateIotbasicOpenapiRequest): OperateIotbasicOpenapiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateIotbasicOpenapiEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-openApi操作
 * Summary: IoT设备平台-openApi操作
 */
async function operateIotbasicOpenapiEx(request: OperateIotbasicOpenapiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateIotbasicOpenapiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.openapi.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIotbasicDevicecollectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询结束时间
  endTime?: string(name='end_time'),
  // 资产类型
  dataScene?: string(name='data_scene'),
  // 所属业务
  bizScene: string(name='biz_scene'),
  // 租户id
  tenantId: string(name='tenant_id'),
  // 上链hash
  antchainId?: string(name='antchain_id'),
  // 上链数据内容 json
  assetData?: string(name='asset_data'),
  // 每页数量
  pageSize: long(maximum=100, minimum=1, name='page_size'),
  // 当前页码
  currentPage: long(name='current_page'),
  // 业务id
  businessId?: string(name='business_id'),
  // 查询开始时间
  startTime?: string(name='start_time'),
}

model QueryIotbasicDevicecollectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页码
  current?: long(name='current'),
  // 每页数据大小
  pageSize?: long(name='page_size'),
  // 数据总条数
  total?: long(name='total'),
  // 总页数
  totalPage?: long(name='total_page'),
  // 查询结果
  data?: [ ChainModelResult ](name='data'),
}

/**
 * Description: 上链数据分页查询
 * Summary: 上链数据分页查询
 */
async function queryIotbasicDevicecollect(request: QueryIotbasicDevicecollectRequest): QueryIotbasicDevicecollectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIotbasicDevicecollectEx(request, headers, runtime);
}

/**
 * Description: 上链数据分页查询
 * Summary: 上链数据分页查询
 */
async function queryIotbasicDevicecollectEx(request: QueryIotbasicDevicecollectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIotbasicDevicecollectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.devicecollect.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIotbasicDeviceorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id
  tenantId: string(name='tenant_id'),
  // 开始时间
  startTime?: string(name='start_time'),
  // 结束时间
  endTime?: string(name='end_time'),
  // 所属业务
  bizScene: string(name='biz_scene'),
  // 每页数据条数
  pageSize: long(maximum=100, minimum=1, name='page_size'),
  // 当前页数
  currentPage: long(name='current_page'),
  // 订单ID
  orderId?: string(name='order_id'),
  // 设备did
  deviceDid?: string(name='device_did'),
}

model QueryIotbasicDeviceorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单明细
  orderDetail?: [ IotBasicDeviceOrderItem ](name='order_detail'),
  // 总记录数
  total?: long(name='total'),
  // 总页数
  totalPage?: long(name='total_page'),
  // 当前页码
  current?: long(name='current'),
  // 每页条数
  pageSize?: long(name='page_size'),
}

/**
 * Description: 订单上链数据分页查询
 * Summary: 订单上链数据分页查询
 */
async function queryIotbasicDeviceorder(request: QueryIotbasicDeviceorderRequest): QueryIotbasicDeviceorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIotbasicDeviceorderEx(request, headers, runtime);
}

/**
 * Description: 订单上链数据分页查询
 * Summary: 订单上链数据分页查询
 */
async function queryIotbasicDeviceorderEx(request: QueryIotbasicDeviceorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIotbasicDeviceorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.deviceorder.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushIotbasicMeterdataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id
  tenantId: string(name='tenant_id'),
  // 订单id
  orderId?: string(name='order_id'),
}

model PushIotbasicMeterdataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: IoT设备平台-订单数据推送中台
 * Summary: IoT设备平台-订单数据推送中台
 */
async function pushIotbasicMeterdata(request: PushIotbasicMeterdataRequest): PushIotbasicMeterdataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushIotbasicMeterdataEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-订单数据推送中台
 * Summary: IoT设备平台-订单数据推送中台
 */
async function pushIotbasicMeterdataEx(request: PushIotbasicMeterdataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushIotbasicMeterdataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.meterdata.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveIotbasicCustomerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id
  tenantId: string(name='tenant_id'),
  // 商品code
  productCode: string(name='product_code'),
}

model SaveIotbasicCustomerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 成功标志
  success?: boolean(name='success'),
}

/**
 * Description: IoT设备平台-客户新增
 * Summary: IoT设备平台-中台签约客户同步
 */
async function saveIotbasicCustomer(request: SaveIotbasicCustomerRequest): SaveIotbasicCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveIotbasicCustomerEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-客户新增
 * Summary: IoT设备平台-中台签约客户同步
 */
async function saveIotbasicCustomerEx(request: SaveIotbasicCustomerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveIotbasicCustomerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.customer.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model NotifyThirddeviceMessageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备did
  deviceDid: string(name='device_did'),
  // 设备信息同步命令
  command: string(name='command'),
  // 设备签名，用设备pri_key 进行签名，只对deviceDid加签
  signature: string(name='signature'),
}

model NotifyThirddeviceMessageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 处理结果
  success?: boolean(name='success'),
  // 设备信息同步命令
  command?: string(name='command'),
}

/**
 * Description: IoT设备平台-设备消息同步
 * Summary: IoT设备平台-设备消息同步
 */
async function notifyThirddeviceMessage(request: NotifyThirddeviceMessageRequest): NotifyThirddeviceMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return notifyThirddeviceMessageEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-设备消息同步
 * Summary: IoT设备平台-设备消息同步
 */
async function notifyThirddeviceMessageEx(request: NotifyThirddeviceMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): NotifyThirddeviceMessageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thirddevice.message.notify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RegisterIotbasicCorpjoinRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 厂商value
  corpCode: string(name='corp_code'),
  // 厂商名称
  corpName: string(name='corp_name'),
  // 厂商签约产品码
  productCode: string(name='product_code'),
}

model RegisterIotbasicCorpjoinResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: Iotbasic-厂商入驻
 * Summary: Iotbasic-厂商入驻
 */
async function registerIotbasicCorpjoin(request: RegisterIotbasicCorpjoinRequest): RegisterIotbasicCorpjoinResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return registerIotbasicCorpjoinEx(request, headers, runtime);
}

/**
 * Description: Iotbasic-厂商入驻
 * Summary: Iotbasic-厂商入驻
 */
async function registerIotbasicCorpjoinEx(request: RegisterIotbasicCorpjoinRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RegisterIotbasicCorpjoinResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotbasic.corpjoin.register', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTxtransactionDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备did
  deviceDid: string(name='device_did'),
  // 设备签名
  deviceSignature: string(name='device_signature'),
}

model QueryTxtransactionDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求结果
  success?: boolean(name='success'),
  // 区块hash
  blockHash?: string(name='block_hash'),
  // 父区块hash
  parentBlockHash?: string(name='parent_block_hash'),
  // 交易时间戳
  timestamp?: string(name='timestamp'),
  // 该交易所能消耗的最大gas
  gas?: long(name='gas'),
  // 交易发起方账户
  from?: string(name='from'),
  // 交易接收方账户
  to?: string(name='to'),
  // 交易类型
  txType?: string(name='tx_type'),
  // 交易返回的数据
  data?: QueryDeviceTransactionResultData(name='data'),
}

/**
 * Description: IoT设备平台-查询设备链上资产详情
 * Summary: IoT设备平台-查询设备链上资产详情
 */
async function queryTxtransactionDevice(request: QueryTxtransactionDeviceRequest): QueryTxtransactionDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTxtransactionDeviceEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-查询设备链上资产详情
 * Summary: IoT设备平台-查询设备链上资产详情
 */
async function queryTxtransactionDeviceEx(request: QueryTxtransactionDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTxtransactionDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.txtransaction.device.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTxtransactionChaindataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 上链hash值，和request_id必须有一个有值
  txHash?: string(name='tx_hash'),
  // 上链请求消息id，和tx_hash必须有一个有值
  requestId?: string(name='request_id'),
}

model QueryTxtransactionChaindataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求结果
  success?: boolean(name='success'),
  // 区块hash
  blockHash?: string(name='block_hash'),
  // 父区块hash
  parentBlockHash?: string(name='parent_block_hash'),
  // 交易时间戳
  timestamp?: string(name='timestamp'),
  // 该交易所能消耗的最大gas
  gas?: long(name='gas'),
  // 交易发起方账户
  from?: string(name='from'),
  // 交易接收方账户
  to?: string(name='to'),
  // 交易类型
  txType?: string(name='tx_type'),
  // 交易返回的数据
  data?: QueryChainDataTransactionResultData(name='data'),
}

/**
 * Description: IoT设备平台-查询业务数据链上资产详情
 * Summary: IoT设备平台-查询业务数据链上资产详情
 */
async function queryTxtransactionChaindata(request: QueryTxtransactionChaindataRequest): QueryTxtransactionChaindataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTxtransactionChaindataEx(request, headers, runtime);
}

/**
 * Description: IoT设备平台-查询业务数据链上资产详情
 * Summary: IoT设备平台-查询业务数据链上资产详情
 */
async function queryTxtransactionChaindataEx(request: QueryTxtransactionChaindataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTxtransactionChaindataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.txtransaction.chaindata.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIotplatformPurchaseorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id
  tenantId: string(name='tenant_id'),
  // 设备串号
  serialNumber: string(name='serial_number'),
}

model QueryIotplatformPurchaseorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否为链上采购商品，true：是，false：否
  goodsFromChain?: boolean(name='goods_from_chain'),
  // 采购时间
  purchaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='purchase_time'),
  // 采购商名称
  leaseName?: string(name='lease_name'),
  // 采购价
  purchaseOrderPrice?: string(name='purchase_order_price'),
  // 商品名称
  goodsName?: string(name='goods_name'),
}

/**
 * Description: 根据设备串号查询采购设备
 * Summary: 根据设备串号查询采购设备
 */
async function queryIotplatformPurchaseorder(request: QueryIotplatformPurchaseorderRequest): QueryIotplatformPurchaseorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIotplatformPurchaseorderEx(request, headers, runtime);
}

/**
 * Description: 根据设备串号查询采购设备
 * Summary: 根据设备串号查询采购设备
 */
async function queryIotplatformPurchaseorderEx(request: QueryIotplatformPurchaseorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIotplatformPurchaseorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotplatform.purchaseorder.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportIotplatformMeshidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 客户的金融云租户ID
  tenantId: string(name='tenant_id'),
  // 客户的公司名称
  companyName: string(name='company_name'),
  // 设备按照MeshAgent后获取的MeshId
  meshId: string(name='mesh_id'),
  // 客户自定义的业务上使用的设备标识，需要与租赁业务上使用的ID进行对应
  deviceSn: string(name='device_sn'),
  // 设备类型字段
  type?: string(name='type'),
  // 代理商名称，用于二级代理模式
  agentName?: string(name='agent_name'),
}

model ImportIotplatformMeshidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 提交绑定时的SN号，用于确认
  deviceSn?: string(name='device_sn'),
}

/**
 * Description: 设备租赁业务中在PC设备出厂时进行MeshId及SN号的关联绑定
 * Summary: 绑定MeshId及设备SN
 */
async function importIotplatformMeshid(request: ImportIotplatformMeshidRequest): ImportIotplatformMeshidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importIotplatformMeshidEx(request, headers, runtime);
}

/**
 * Description: 设备租赁业务中在PC设备出厂时进行MeshId及SN号的关联绑定
 * Summary: 绑定MeshId及设备SN
 */
async function importIotplatformMeshidEx(request: ImportIotplatformMeshidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportIotplatformMeshidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.iotplatform.meshid.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportPurchaseorderThirdpartyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租赁订单号
  orderNumber: string(name='order_number'),
  // 收货人姓名
  consigneeName: string(name='consignee_name'),
  // 收货人身份证号
  consigneeIdNumber: string(name='consignee_id_number'),
  // 收货人手机号
  consigneePhone: string(name='consignee_phone'),
  // 收货人地址
  consigneeAddress: string(name='consignee_address'),
  // 供货商名称
  supplierName: string(name='supplier_name'),
  // 供货商租户id
  supplierId: string(name='supplier_id'),
  // 采购商租户id
  leaseId: string(name='lease_id'),
  // 商品信息列表
  goodsList: [ GoodsIdAndCount ](name='goods_list'),
  // 幂等号
  idempotId: string(name='idempot_id'),
}

model ImportPurchaseorderThirdpartyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 采购平台-采购详情id
  purchaseOrderId?: string(name='purchase_order_id'),
  // 当前状态
  // READY_DELIVER(0, "待发货"),
  // DELIVERED(1, "已发货"),
  // REFUSED(2, "已拒发"),
  // CANCELED(4, "已取消"),
  // REFUNDED(5, "已退货");
  // 
  status?: string(name='status'),
  // InsertPurchaseOrderFailInfo
  failMap?: InsertPurchaseOrderFailInfo(name='fail_map'),
  // 真实订单信息，成功不返回
  // 
  purchaseOrderInfoDetail?: PurchaseOrderInfoDetail(name='purchase_order_info_detail'),
  // 幂等号
  idempotId?: string(name='idempot_id'),
}

/**
 * Description: 与租赁宝对接采购订单导入的接口
 * Summary: 与租赁宝对接采购订单导入的接口
 */
async function importPurchaseorderThirdparty(request: ImportPurchaseorderThirdpartyRequest): ImportPurchaseorderThirdpartyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importPurchaseorderThirdpartyEx(request, headers, runtime);
}

/**
 * Description: 与租赁宝对接采购订单导入的接口
 * Summary: 与租赁宝对接采购订单导入的接口
 */
async function importPurchaseorderThirdpartyEx(request: ImportPurchaseorderThirdpartyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportPurchaseorderThirdpartyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.purchaseorder.thirdparty.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddUserRoleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 账号标识，蚂蚁金融科技租户ID
  tenantId: string(name='tenant_id'),
  // 租户名称
  tenantName: string(name='tenant_name'),
  // 权限标识
  //     LEASER(0),
  //     BUYERS(1),
  //     OWNER(2),
  //     ADMIN(9);
  role: string(name='role'),
  // 是否支持abm远程
  supportAbm: boolean(name='support_abm'),
  // 是否含税
  includTax: boolean(name='includ_tax'),
}

model AddUserRoleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 新增的用户id
  userId?: long(name='user_id'),
}

/**
 * Description: 采购平台新增供应商角色
 * Summary: 采购平台新增供应商角色
 */
async function addUserRole(request: AddUserRoleRequest): AddUserRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addUserRoleEx(request, headers, runtime);
}

/**
 * Description: 采购平台新增供应商角色
 * Summary: 采购平台新增供应商角色
 */
async function addUserRoleEx(request: AddUserRoleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddUserRoleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.user.role.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddGoodsSkuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // GoodsTypeEnum,商品一级类目
  type: string(name='type'),
  // 商品二级类目
  secondType: string(name='second_type'),
  // 商品品牌
  brand: string(name='brand'),
  // 商品名称，型号
  model: string(name='model'),
  // 市场价
  marketPrice: long(name='market_price'),
  // 手机型号信息
  phoneInfo?: PhoneInfo(name='phone_info'),
  // 电脑型号信息
  computerInfo?: ComputerInfo(name='computer_info'),
}

model AddGoodsSkuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // SKU id
  skuId?: long(name='sku_id'),
}

/**
 * Description: 采购平台新增SKU
 * Summary: 采购平台新增SKU
 */
async function addGoodsSku(request: AddGoodsSkuRequest): AddGoodsSkuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addGoodsSkuEx(request, headers, runtime);
}

/**
 * Description: 采购平台新增SKU
 * Summary: 采购平台新增SKU
 */
async function addGoodsSkuEx(request: AddGoodsSkuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddGoodsSkuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.goods.sku.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushMeterdataOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id
  tenantId: string(name='tenant_id'),
  // 订单计费数据列表
  orderPushList: [ OrderPushInfo ](name='order_push_list'),
}

model PushMeterdataOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作是否成功
  success?: boolean(name='success'),
}

/**
 * Description: Iotplatform-设备订单计费上传
 * Summary: Iotplatform-设备订单计费上传
 */
async function pushMeterdataOrder(request: PushMeterdataOrderRequest): PushMeterdataOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushMeterdataOrderEx(request, headers, runtime);
}

/**
 * Description: Iotplatform-设备订单计费上传
 * Summary: Iotplatform-设备订单计费上传
 */
async function pushMeterdataOrderEx(request: PushMeterdataOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushMeterdataOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.meterdata.order.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDeviceDatamodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据模型
  dataModel: string(name='data_model'),
  // 数据模型名称
  dataModelName?: string(name='data_model_name'),
  // 数据模型类别
  bizType?: string(name='biz_type'),
  // 用户自定义版本
  customerVersion?: string(name='customer_version'),
  // 数据样例
  dataDemo?: string(name='data_demo'),
}

model CreateDeviceDatamodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据模型id
  deviceDataModelId?: string(name='device_data_model_id'),
}

/**
 * Description: 创建数据模型
 * Summary: 创建数据模型
 */
async function createDeviceDatamodel(request: CreateDeviceDatamodelRequest): CreateDeviceDatamodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDeviceDatamodelEx(request, headers, runtime);
}

/**
 * Description: 创建数据模型
 * Summary: 创建数据模型
 */
async function createDeviceDatamodelEx(request: CreateDeviceDatamodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDeviceDatamodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.datamodel.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDeviceDatamodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据模型Id
  dataModelId: string(name='data_model_id'),
}

model GetDeviceDatamodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据模型
  dataModel?: DataModel(name='data_model'),
}

/**
 * Description: 获取数据模型
 * Summary: 获取数据模型
 */
async function getDeviceDatamodel(request: GetDeviceDatamodelRequest): GetDeviceDatamodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDeviceDatamodelEx(request, headers, runtime);
}

/**
 * Description: 获取数据模型
 * Summary: 获取数据模型
 */
async function getDeviceDatamodelEx(request: GetDeviceDatamodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeviceDatamodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.datamodel.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备Id
  deviceId: string(name='device_id'),
  // 数据模型id
  deviceDataModelId: string(name='device_data_model_id'),
  // 场景码
  scene: string(name='scene'),
  // 设备imei
  deviceImei: string(name='device_imei'),
  // 设备名称
  deviceName?: string(name='device_name'),
  // 厂商名称
  corpName?: string(name='corp_name'),
  // 枚举值： SIGNED_DATA 、RAW_DATA ，默认填写 SIGNED_DATA（需要验签的设备）
  deviceFeature: string(name='device_feature'),
  // 设备类型编码，必填，对应资管平台中的设备类型 
  // 
  // 枚举值：
  // 
  // 车辆 1000 
  // 车辆 四轮车 1001 
  // 车辆 四轮车 纯电四轮车 1002 
  // 车辆 四轮车 混动四轮车 1003 
  // 车辆 四轮车 燃油四轮车 1004 
  // 车辆 两轮车 1011 
  // 车辆 两轮车 两轮单车 1012 
  // 车辆 两轮车 两轮助力车 1013 
  // 
  // 换电柜 2000 
  // 换电柜 二轮车换电柜 2001 
  // 
  // 电池 3000 
  // 电池 磷酸铁电池 3001 
  // 电池 三元锂电池 3002 
  // 
  // 回收设备 4000 
  // 
  // 垃圾分类回收 4001 
  // 
  // 洗车机 5000
  // 通用计算设备	                6000
  // 	移动设备		        6001
  // 		智能手机	        6002
  // 		工业掌机	        6003
  // 		平板电脑	        6004
  // 	云设备		        6011
  // 		云计算服务器	6012
  deviceTypeCode: long(name='device_type_code'),
  // 设备单价 单位：分
  initialPrice: long(name='initial_price'),
  // 出厂时间
  factoryTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 投放时间
  releaseTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
  // 设备类型，需要提前约定好
  deviceTypeId?: string(name='device_type_id'),
  // 可信根派生公钥
  devicePublicKey?: string(name='device_public_key'),
}

model ImportDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上设备Id
  chainDeviceId?: string(name='chain_device_id'),
  // 可信设备ID
  trustiotDeviceId?: long(name='trustiot_device_id'),
}

/**
 * Description: 注册设备
 * Summary: 注册设备
 */
async function importDevice(request: ImportDeviceRequest): ImportDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importDeviceEx(request, headers, runtime);
}

/**
 * Description: 注册设备
 * Summary: 注册设备
 */
async function importDeviceEx(request: ImportDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDeviceBychainidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上设备Id
  chainDeviceId: string(name='chain_device_id'),
}

model GetDeviceBychainidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备详情
  device?: Device(name='device'),
}

/**
 * Description: 通过chainId获取设备详情
 * Summary: 通过chainId获取设备详情
 */
async function getDeviceBychainid(request: GetDeviceBychainidRequest): GetDeviceBychainidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDeviceBychainidEx(request, headers, runtime);
}

/**
 * Description: 通过chainId获取设备详情
 * Summary: 通过chainId获取设备详情
 */
async function getDeviceBychainidEx(request: GetDeviceBychainidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeviceBychainidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.bychainid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDeviceBydeviceidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备id集合
  deviceIdList: [ string ](name='device_id_list'),
  // 场景码
  scene: string(name='scene'),
}

model GetDeviceBydeviceidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备详情
  deviceList?: [ Device ](name='device_list'),
  // 设备信息不存在的deviceid集合
  missDeviceIdList?: [ string ](name='miss_device_id_list'),
  // 成功获取到设备信息的deviceid集合
  successDeviceIdList?: [ string ](name='success_device_id_list'),
}

/**
 * Description: 通过deviceId获取设备详情
 * Summary: 通过deviceId获取设备详情
 */
async function getDeviceBydeviceid(request: GetDeviceBydeviceidRequest): GetDeviceBydeviceidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDeviceBydeviceidEx(request, headers, runtime);
}

/**
 * Description: 通过deviceId获取设备详情
 * Summary: 通过deviceId获取设备详情
 */
async function getDeviceBydeviceidEx(request: GetDeviceBydeviceidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeviceBydeviceidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.bydeviceid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDeviceBysceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
}

model ListDeviceBysceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备列表
  deviceList?: [ Device ](name='device_list'),
}

/**
 * Description: 通过场景码列举设备
 * Summary: 通过场景码列举设备
 */
async function listDeviceByscene(request: ListDeviceBysceneRequest): ListDeviceBysceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDeviceBysceneEx(request, headers, runtime);
}

/**
 * Description: 通过场景码列举设备
 * Summary: 通过场景码列举设备
 */
async function listDeviceBysceneEx(request: ListDeviceBysceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDeviceBysceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.byscene.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDeviceInfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上设备Id
  chainDeviceId: string(name='chain_device_id'),
  // 设备imei号
  deviceImei?: string(name='device_imei'),
  // 设备数据模型Id
  // 
  // 
  dataModelId?: string(name='data_model_id'),
  // 设备ICCID
  // 
  // 
  deviceIccid?: string(name='device_iccid'),
  // deviceTypeCode 枚举 
  // 
  // 车辆: 1000
  // 四轮车: 1001
  // 纯电四轮车:1002
  // 混动四轮车 1003
  // 燃油四轮车 : 1004
  // 
  // 两轮车:1011
  // 两轮单车:1012
  // 两轮助力车:1013
  // 
  // 换电柜 :2000
  // 二轮车换电柜:2001
  // 
  // 电池 :3000
  // 磷酸铁电池:3001
  // 三元锂电池:3002
  // 
  // 回收设备:4000
  // 垃圾分类回收:4001
  // 
  // 洗车机 :5000
  // 通用计算设备	                6000
  // 	移动设备		        6001
  // 		智能手机	        6002
  // 		工业掌机	        6003
  // 		平板电脑	        6004
  // 	云设备		        6011
  // 		云计算服务器	6012
  deviceTypeCode?: long(name='device_type_code'),
  // 设备单价 单位：分
  initialPrice?: long(name='initial_price'),
  // 出厂时间
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 投放时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
  // 设备型号
  deviceName?: string(name='device_name'),
  // 额外信息
  extraInfo?: string(name='extra_info'),
  // 资产所有人标识（统一社会信用代码）
  owner?: string(name='owner'),
  // 资产所有人名称
  ownerName?: string(name='owner_name'),
}

model UpdateDeviceInfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新设备信息
 * Summary: 更新设备信息
 */
async function updateDeviceInfo(request: UpdateDeviceInfoRequest): UpdateDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDeviceInfoEx(request, headers, runtime);
}

/**
 * Description: 更新设备信息
 * Summary: 更新设备信息
 */
async function updateDeviceInfoEx(request: UpdateDeviceInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDeviceInfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.info.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributedeviceBydeviceidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 厂商名
  corpName?: string(name='corp_name'),
  // 数据模型Id
  deviceDataModelId: string(name='device_data_model_id'),
  // 设备Id
  deviceId: string(name='device_id'),
  // 设备imei号
  deviceImei?: string(name='device_imei'),
  // 设备名称
  deviceName?: string(name='device_name'),
  // 场景码
  scene: string(name='scene'),
  // 枚举值： SIGNED_DATA 、RAW_DATA ，默认填写 SIGNED_DATA（需要验签的设备）
  deviceFeature?: string(name='device_feature'),
  // 当用已发行设备发行时返回已发行id或返回错误
  withExistDeviceId?: boolean(name='with_exist_device_id'),
  // 设备类型编码
  deviceTypeCode?: long(name='device_type_code'),
  // 设备单价 单位：分
  initialPrice?: long(name='initial_price'),
  // 出厂时间
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 投放时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
  // 额外信息
  extraInfo?: string(name='extra_info'),
  // 资产所有人标识（统一社会信用代码）
  owner?: string(name='owner'),
  // 资产所有人名称
  ownerName?: string(name='owner_name'),
}

model CreateDistributedeviceBydeviceidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上设备Id
  chainDeviceId?: string(name='chain_device_id'),
  // 发行设备Id
  distributeDeviceId?: string(name='distribute_device_id'),
  // 可信设备ID
  trustiotDeviceId?: long(name='trustiot_device_id'),
}

/**
 * Description: 通过deviceId发行设备
 * Summary: 通过deviceId发行设备
 */
async function createDistributedeviceBydeviceid(request: CreateDistributedeviceBydeviceidRequest): CreateDistributedeviceBydeviceidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributedeviceBydeviceidEx(request, headers, runtime);
}

/**
 * Description: 通过deviceId发行设备
 * Summary: 通过deviceId发行设备
 */
async function createDistributedeviceBydeviceidEx(request: CreateDistributedeviceBydeviceidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributedeviceBydeviceidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bydeviceid.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributedeviceBychainidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上设备Id
  chainDeviceId: string(name='chain_device_id'),
}

model CreateDistributedeviceBychainidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备Id
  distributeDeviceId?: string(name='distribute_device_id'),
}

/**
 * Description: 通过链上设备Id发行
 * Summary: 通过链上设备Id发行
 */
async function createDistributedeviceBychainid(request: CreateDistributedeviceBychainidRequest): CreateDistributedeviceBychainidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributedeviceBychainidEx(request, headers, runtime);
}

/**
 * Description: 通过链上设备Id发行
 * Summary: 通过链上设备Id发行
 */
async function createDistributedeviceBychainidEx(request: CreateDistributedeviceBychainidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributedeviceBychainidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bychainid.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReplaceDistributedeviceBychainidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上设备Id
  chainDeviceId: string(name='chain_device_id'),
  // 发行设备Id
  distributeDeviceId: string(name='distribute_device_id'),
}

model ReplaceDistributedeviceBychainidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 替换发行设备
 * Summary: 替换发行设备
 */
async function replaceDistributedeviceBychainid(request: ReplaceDistributedeviceBychainidRequest): ReplaceDistributedeviceBychainidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return replaceDistributedeviceBychainidEx(request, headers, runtime);
}

/**
 * Description: 替换发行设备
 * Summary: 替换发行设备
 */
async function replaceDistributedeviceBychainidEx(request: ReplaceDistributedeviceBychainidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReplaceDistributedeviceBychainidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bychainid.replace', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendCollectorBychainidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上设备Id
  chainDeviceId: string(name='chain_device_id'),
  // 收集数据
  collectContentList: [ CollectContent ](name='collect_content_list'),
  // 随机数，防重放
  nonce: string(name='nonce'),
  // 数据模型Id
  dataModelId?: string(name='data_model_id'),
}

model SendCollectorBychainidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 收集数据返回的上链结果
  resultList?: [ SendCollectorResult ](name='result_list'),
}

/**
 * Description: 上传单个设备所产生的设备数据 
 * Summary: 上传设备数据
 */
async function sendCollectorBychainid(request: SendCollectorBychainidRequest): SendCollectorBychainidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendCollectorBychainidEx(request, headers, runtime);
}

/**
 * Description: 上传单个设备所产生的设备数据 
 * Summary: 上传设备数据
 */
async function sendCollectorBychainidEx(request: SendCollectorBychainidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendCollectorBychainidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.collector.bychainid.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDistributedeviceBychainidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发行设备Id
  chainIdList: [ string ](name='chain_id_list'),
}

model GetDistributedeviceBychainidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备
  distributeDeviceList?: [ DistributeDevice ](name='distribute_device_list'),
}

/**
 * Description: 通过Id获取发行设备
 * Summary: 通过Id获取发行设备
 */
async function getDistributedeviceBychainid(request: GetDistributedeviceBychainidRequest): GetDistributedeviceBychainidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDistributedeviceBychainidEx(request, headers, runtime);
}

/**
 * Description: 通过Id获取发行设备
 * Summary: 通过Id获取发行设备
 */
async function getDistributedeviceBychainidEx(request: GetDistributedeviceBychainidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDistributedeviceBychainidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bychainid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDistributedeviceBysceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
}

model ListDistributedeviceBysceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备
  distributeDeviceList?: [ DistributeDevice ](name='distribute_device_list'),
}

/**
 * Description: 通过场景码列举发行设备
 * Summary: 通过场景码列举发行设备
 */
async function listDistributedeviceByscene(request: ListDistributedeviceBysceneRequest): ListDistributedeviceBysceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDistributedeviceBysceneEx(request, headers, runtime);
}

/**
 * Description: 通过场景码列举发行设备
 * Summary: 通过场景码列举发行设备
 */
async function listDistributedeviceBysceneEx(request: ListDistributedeviceBysceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDistributedeviceBysceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.byscene.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateConsumerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 消费者名称
  consumerName: string(name='consumer_name'),
}

model CreateConsumerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 消费者Id
  consumerId?: string(name='consumer_id'),
}

/**
 * Description: 创建消费者
 * Summary: 创建消费者
 */
async function createConsumer(request: CreateConsumerRequest): CreateConsumerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createConsumerEx(request, headers, runtime);
}

/**
 * Description: 创建消费者
 * Summary: 创建消费者
 */
async function createConsumerEx(request: CreateConsumerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConsumerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.consumer.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetConsumerSubscribeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 消费者Id
  consumerId: string(name='consumer_id'),
  // 订阅的发行设备Id列表
  distributeDeviceIdList: [ string ](name='distribute_device_id_list'),
}

model SetConsumerSubscribeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订阅的发行设备列表
  distributeDeviceList?: [ string ](name='distribute_device_list'),
}

/**
 * Description: 消费者订阅
 * Summary: 消费者订阅
 */
async function setConsumerSubscribe(request: SetConsumerSubscribeRequest): SetConsumerSubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setConsumerSubscribeEx(request, headers, runtime);
}

/**
 * Description: 消费者订阅
 * Summary: 消费者订阅
 */
async function setConsumerSubscribeEx(request: SetConsumerSubscribeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetConsumerSubscribeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.consumer.subscribe.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetConsumerUnsubscribeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 消费者id
  consumerId: string(name='consumer_id'),
  // 发型设备Id列表
  distributeDeviceIdList: [ string ](name='distribute_device_id_list'),
}

model SetConsumerUnsubscribeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备列表
  distributeDeviceList?: [ string ](name='distribute_device_list'),
}

/**
 * Description: 消费者取消订阅设备
 * Summary: 消费者取消订阅设备
 */
async function setConsumerUnsubscribe(request: SetConsumerUnsubscribeRequest): SetConsumerUnsubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setConsumerUnsubscribeEx(request, headers, runtime);
}

/**
 * Description: 消费者取消订阅设备
 * Summary: 消费者取消订阅设备
 */
async function setConsumerUnsubscribeEx(request: SetConsumerUnsubscribeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetConsumerUnsubscribeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.consumer.unsubscribe.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PullConsumerDatasourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 消费者id
  consumerId: string(name='consumer_id'),
  // 分页游标
  cursor: string(name='cursor'),
  // 获取的时间范围
  timeSpan?: [ string ](name='time_span'),
  // 类型：DEVICE、PERIPHERAL、ALL 默认为 ALL
  deviceType?: string(name='device_type'),
}

model PullConsumerDatasourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页游标
  cursor?: string(name='cursor'),
  // 数据包列表
  dataPackageList?: [ DistributeDataPackage ](name='data_package_list'),
}

/**
 * Description: 消费者获取数据
 * Summary: 消费者获取数据
 */
async function pullConsumerDatasource(request: PullConsumerDatasourceRequest): PullConsumerDatasourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pullConsumerDatasourceEx(request, headers, runtime);
}

/**
 * Description: 消费者获取数据
 * Summary: 消费者获取数据
 */
async function pullConsumerDatasourceEx(request: PullConsumerDatasourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PullConsumerDatasourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.consumer.datasource.pull', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDistributedeviceBydeviceidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备Id
  deviceIdList: [ string ](name='device_id_list'),
  // 场景码
  scene: string(name='scene'),
}

model GetDistributedeviceBydeviceidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备
  distributeDeviceList?: [ DistributeDevice ](name='distribute_device_list'),
  // 发行设备信息不存在的deviceid集合
  missDeviceIdList?: [ string ](name='miss_device_id_list'),
  // 成功获取到发行设备信息的deviceid集合
  successDeviceIdList?: [ string ](name='success_device_id_list'),
}

/**
 * Description: 通过设备id获取发行设备详情
 * Summary: 通过设备id获取发行设备详情
 */
async function getDistributedeviceBydeviceid(request: GetDistributedeviceBydeviceidRequest): GetDistributedeviceBydeviceidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDistributedeviceBydeviceidEx(request, headers, runtime);
}

/**
 * Description: 通过设备id获取发行设备详情
 * Summary: 通过设备id获取发行设备详情
 */
async function getDistributedeviceBydeviceidEx(request: GetDistributedeviceBydeviceidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDistributedeviceBydeviceidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bydeviceid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDistributedeviceBydisidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发行设备id列表
  distributeDeviceIdList: [ string ](name='distribute_device_id_list'),
}

model GetDistributedeviceBydisidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备列表
  distributeDeviceList?: [ DistributeDevice ](name='distribute_device_list'),
}

/**
 * Description: 通过发行id获取设备
 * Summary: 通过发行id获取设备
 */
async function getDistributedeviceBydisid(request: GetDistributedeviceBydisidRequest): GetDistributedeviceBydisidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDistributedeviceBydisidEx(request, headers, runtime);
}

/**
 * Description: 通过发行id获取设备
 * Summary: 通过发行id获取设备
 */
async function getDistributedeviceBydisidEx(request: GetDistributedeviceBydisidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDistributedeviceBydisidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bydisid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportPeripheralRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 厂商名称
  corpName?: string(name='corp_name'),
  // 数据模型id
  peripheralDataModelId: string(name='peripheral_data_model_id'),
  // 外围设备ID
  peripheralId: string(name='peripheral_id'),
  // 外围设备名称
  peripheralName?: string(name='peripheral_name'),
  // 场景码
  scene: string(name='scene'),
  // 设备类型编码，必填，对应资管平台中的设备类型 
  // 
  // 枚举值：
  // 
  // 车辆 1000 
  // 车辆 四轮车 1001 
  // 车辆 四轮车 纯电四轮车 1002 
  // 车辆 四轮车 混动四轮车 1003 
  // 车辆 四轮车 燃油四轮车 1004 
  // 车辆 两轮车 1011 
  // 车辆 两轮车 两轮单车 1012 
  // 车辆 两轮车 两轮助力车 1013 
  // 
  // 换电柜 2000 
  // 换电柜 二轮车换电柜 2001 
  // 
  // 电池 3000 
  // 电池 磷酸铁电池 3001 
  // 电池 三元锂电池 3002 
  // 
  // 回收设备 4000 
  // 
  // 垃圾分类回收 4001 
  // 
  // 洗车机 5000
  deviceTypeCode?: long(name='device_type_code'),
  // 设备单价 单位：分
  initialPrice?: long(name='initial_price'),
  // 出厂时间
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 投放时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
}

model ImportPeripheralResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上外围设备Id
  // 
  // 
  chainPeripheralId?: string(name='chain_peripheral_id'),
}

/**
 * Description: 注册外围设备
 * Summary: 注册外围设备
 */
async function importPeripheral(request: ImportPeripheralRequest): ImportPeripheralResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importPeripheralEx(request, headers, runtime);
}

/**
 * Description: 注册外围设备
 * Summary: 注册外围设备
 */
async function importPeripheralEx(request: ImportPeripheralRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportPeripheralResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.peripheral.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetPeripheralBychainperipheralidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上外围设备Id
  chainPeripheralId: string(name='chain_peripheral_id'),
}

model GetPeripheralBychainperipheralidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 外围设备信息
  peripheral?: Peripheral(name='peripheral'),
}

/**
 * Description: 通过链上外围设备ID获取详情
 * Summary: 通过链上外围设备ID获取详情
 */
async function getPeripheralBychainperipheralid(request: GetPeripheralBychainperipheralidRequest): GetPeripheralBychainperipheralidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getPeripheralBychainperipheralidEx(request, headers, runtime);
}

/**
 * Description: 通过链上外围设备ID获取详情
 * Summary: 通过链上外围设备ID获取详情
 */
async function getPeripheralBychainperipheralidEx(request: GetPeripheralBychainperipheralidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPeripheralBychainperipheralidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.peripheral.bychainperipheralid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetPeripheralByperipheralidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外围设备ID
  peripheralId: string(name='peripheral_id'),
  // 场景码
  // 
  scene: string(name='scene'),
}

model GetPeripheralByperipheralidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 外围设备信息
  // 
  // 
  peripheral?: Peripheral(name='peripheral'),
}

/**
 * Description: 通过外围设备ID获取详情
 * Summary: 通过外围设备ID获取详情
 */
async function getPeripheralByperipheralid(request: GetPeripheralByperipheralidRequest): GetPeripheralByperipheralidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getPeripheralByperipheralidEx(request, headers, runtime);
}

/**
 * Description: 通过外围设备ID获取详情
 * Summary: 通过外围设备ID获取详情
 */
async function getPeripheralByperipheralidEx(request: GetPeripheralByperipheralidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPeripheralByperipheralidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.peripheral.byperipheralid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListPeripheralBysceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  // 
  scene: string(name='scene'),
}

model ListPeripheralBysceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 外围设备信息列表
  // 
  // 
  peripheralList?: [ Peripheral ](name='peripheral_list'),
}

/**
 * Description: 根据场景列举外围设备
 * Summary: 根据场景列举外围设备
 */
async function listPeripheralByscene(request: ListPeripheralBysceneRequest): ListPeripheralBysceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listPeripheralBysceneEx(request, headers, runtime);
}

/**
 * Description: 根据场景列举外围设备
 * Summary: 根据场景列举外围设备
 */
async function listPeripheralBysceneEx(request: ListPeripheralBysceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPeripheralBysceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.peripheral.byscene.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributedeviceByperipheralidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 厂商名称
  corpName?: string(name='corp_name'),
  // 数据模型id
  peripheralDataModelId: string(name='peripheral_data_model_id'),
  // 外围设备ID
  peripheralId: string(name='peripheral_id'),
  // 外围设备名称
  // 
  peripheralName?: string(name='peripheral_name'),
  // 场景码
  scene: string(name='scene'),
  // 设备类型编码
  deviceTypeCode?: long(name='device_type_code'),
  // 设备单价 单位：分
  initialPrice?: long(name='initial_price'),
  // 出厂时间
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 投放时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
}

model CreateDistributedeviceByperipheralidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备Id
  // 
  distributeDeviceId?: string(name='distribute_device_id'),
  // 链上外围设备Id
  // 
  chainPeripheralId?: string(name='chain_peripheral_id'),
  // 可信设备ID
  trustiotPeripheralId?: long(name='trustiot_peripheral_id'),
}

/**
 * Description: 通过外围设备Id发行
 * Summary: 通过外围设备Id发行
 */
async function createDistributedeviceByperipheralid(request: CreateDistributedeviceByperipheralidRequest): CreateDistributedeviceByperipheralidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributedeviceByperipheralidEx(request, headers, runtime);
}

/**
 * Description: 通过外围设备Id发行
 * Summary: 通过外围设备Id发行
 */
async function createDistributedeviceByperipheralidEx(request: CreateDistributedeviceByperipheralidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributedeviceByperipheralidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.byperipheralid.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributedeviceBychainperipheralidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上外围设备Id
  // 
  chainPeripheralId: string(name='chain_peripheral_id'),
}

model CreateDistributedeviceBychainperipheralidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行外围设备Id
  // 
  distributeDeviceId?: string(name='distribute_device_id'),
}

/**
 * Description: 通过链上外围设备Id发行
 * Summary: 通过链上外围设备Id发行
 */
async function createDistributedeviceBychainperipheralid(request: CreateDistributedeviceBychainperipheralidRequest): CreateDistributedeviceBychainperipheralidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributedeviceBychainperipheralidEx(request, headers, runtime);
}

/**
 * Description: 通过链上外围设备Id发行
 * Summary: 通过链上外围设备Id发行
 */
async function createDistributedeviceBychainperipheralidEx(request: CreateDistributedeviceBychainperipheralidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributedeviceBychainperipheralidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bychainperipheralid.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReplaceDistributedeviceBychainperipheralidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发行外围设备Id
  // 
  // 
  distributeDeviceId: string(name='distribute_device_id'),
  // 链上外围设备ID
  chainPeripheralId: string(name='chain_peripheral_id'),
}

model ReplaceDistributedeviceBychainperipheralidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 替换发行外围设备 by 链上外围设备ID
 * Summary: 替换发行外围设备 by 链上外围设备ID
 */
async function replaceDistributedeviceBychainperipheralid(request: ReplaceDistributedeviceBychainperipheralidRequest): ReplaceDistributedeviceBychainperipheralidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return replaceDistributedeviceBychainperipheralidEx(request, headers, runtime);
}

/**
 * Description: 替换发行外围设备 by 链上外围设备ID
 * Summary: 替换发行外围设备 by 链上外围设备ID
 */
async function replaceDistributedeviceBychainperipheralidEx(request: ReplaceDistributedeviceBychainperipheralidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReplaceDistributedeviceBychainperipheralidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bychainperipheralid.replace', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDistributedeviceByperipheralsceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
}

model ListDistributedeviceByperipheralsceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行的外围设备信息数组
  // 
  distributeDeviceList?: [ DistributeDevice ](name='distribute_device_list'),
}

/**
 * Description: 根据场景列举发行外围设备
 * Summary: 根据场景列举发行外围设备
 */
async function listDistributedeviceByperipheralscene(request: ListDistributedeviceByperipheralsceneRequest): ListDistributedeviceByperipheralsceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDistributedeviceByperipheralsceneEx(request, headers, runtime);
}

/**
 * Description: 根据场景列举发行外围设备
 * Summary: 根据场景列举发行外围设备
 */
async function listDistributedeviceByperipheralsceneEx(request: ListDistributedeviceByperipheralsceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDistributedeviceByperipheralsceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.byperipheralscene.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDistributedeviceByperipheralidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外围设备Id数组
  peripheralIdList: [ string ](name='peripheral_id_list'),
  // 场景码
  scene: string(name='scene'),
}

model GetDistributedeviceByperipheralidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行设备信息数组
  distributeDeviceList?: [ DistributeDevice ](name='distribute_device_list'),
  // 发行设备信息不存在的外围设备ID集合
  missPeripheralIdList?: [ string ](name='miss_peripheral_id_list'),
  // 获取外围设备信息成功的外围设备ID集合
  successPeripheralIdList?: [ string ](name='success_peripheral_id_list'),
}

/**
 * Description: 通过外围设备ID获取发行外围设备信息
 * Summary: 通过外围设备ID获取发行外围设备信息
 */
async function getDistributedeviceByperipheralid(request: GetDistributedeviceByperipheralidRequest): GetDistributedeviceByperipheralidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDistributedeviceByperipheralidEx(request, headers, runtime);
}

/**
 * Description: 通过外围设备ID获取发行外围设备信息
 * Summary: 通过外围设备ID获取发行外围设备信息
 */
async function getDistributedeviceByperipheralidEx(request: GetDistributedeviceByperipheralidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDistributedeviceByperipheralidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.byperipheralid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributedeviceBydeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备Id
  // 
  deviceId: string(name='device_id'),
  // 设备数据模型Id
  // 
  // 
  dataModelId: string(name='data_model_id'),
  // 场景码 
  // 
  // 
  scene: string(name='scene'),
  // 设备注册信息
  // 
  // 
  content: string(name='content'),
  // 签名
  // 
  // 
  signature: string(name='signature'),
  // sdk版本号
  // 
  // 
  sdkId: string(name='sdk_id'),
  // 设备类型编码，必填，对应资管平台中的设备类型 
  // 
  // 枚举值：
  // 
  // 车辆 1000 
  // 车辆 四轮车 1001 
  // 车辆 四轮车 纯电四轮车 1002 
  // 车辆 四轮车 混动四轮车 1003 
  // 车辆 四轮车 燃油四轮车 1004 
  // 车辆 两轮车 1011 
  // 车辆 两轮车 两轮单车 1012 
  // 车辆 两轮车 两轮助力车 1013 
  // 
  // 换电柜 2000 
  // 换电柜 二轮车换电柜 2001 
  // 
  // 电池 3000 
  // 电池 磷酸铁电池 3001 
  // 电池 三元锂电池 3002 
  // 
  // 回收设备 4000 
  // 
  // 垃圾分类回收 4001 
  // 
  // 洗车机 5000
  // 
  // 通用计算设备	                6000
  // 	移动设备		        6001
  // 		智能手机	        6002
  // 		工业掌机	        6003
  // 		平板电脑	        6004
  // 	云设备		        6011
  // 		云计算服务器	6012
  deviceTypeCode?: long(name='device_type_code'),
  // 设备单价 单位：分
  initialPrice?: long(name='initial_price'),
  // 出厂时间
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 投放时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
  // 设备型号
  deviceName?: string(name='device_name'),
  // 资产所有人标识（统一社会信用代码）
  owner?: string(name='owner'),
  // 资产所有人名称
  ownerName?: string(name='owner_name'),
  // 额外信息
  extraInfo?: string(name='extra_info'),
}

model CreateDistributedeviceBydeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上设备Id
  // 
  // 
  chainDeviceid?: string(name='chain_deviceid'),
  // 发行设备Id
  // 
  // 
  distributeDeviceId?: string(name='distribute_device_id'),
  // 可信设备ID
  trustiotDeviceId?: long(name='trustiot_device_id'),
}

/**
 * Description: 发行设备by_devcie
 * Summary: 发行设备by_devcie
 */
async function createDistributedeviceBydevice(request: CreateDistributedeviceBydeviceRequest): CreateDistributedeviceBydeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributedeviceBydeviceEx(request, headers, runtime);
}

/**
 * Description: 发行设备by_devcie
 * Summary: 发行设备by_devcie
 */
async function createDistributedeviceBydeviceEx(request: CreateDistributedeviceBydeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributedeviceBydeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bydevice.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备Id
  // 
  // 
  deviceId: string(name='device_id'),
  // 远程命令
  // 
  // 
  cmd: string(name='cmd'),
  // 附加信息
  // 
  // 
  extra: string(name='extra'),
  // 场景码 
  // 
  // 
  scene: string(name='scene'),
  // 设备类型
  deviceType: string(name='device_type'),
}

model CreateTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务Id
  // 
  // 
  taskId?: string(name='task_id'),
}

/**
 * Description: 远程任务创建
 * Summary: 远程任务创建
 */
async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTaskEx(request, headers, runtime);
}

/**
 * Description: 远程任务创建
 * Summary: 远程任务创建
 */
async function createTaskEx(request: CreateTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.task.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务Id
  // 
  // 
  taskId: string(name='task_id'),
  // 场景码 
  // 
  // 
  scene: string(name='scene'),
}

model QueryTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务状态
  // 
  // 
  status?: string(name='status'),
}

/**
 * Description: 远程任务查询
 * Summary: 远程任务查询
 */
async function queryTask(request: QueryTaskRequest): QueryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTaskEx(request, headers, runtime);
}

/**
 * Description: 远程任务查询
 * Summary: 远程任务查询
 */
async function queryTaskEx(request: QueryTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.task.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAnalysisRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发行设备Id集合
  // 
  // 
  disIdList?: [ string ](name='dis_id_list'),
  // 时间，格式YYYYMMDD
  // 
  // 
  time: string(name='time'),
  // 场景码
  scene: string(name='scene'),
  // SCENE : 场景设备资产分析   DEVICE：设备分析 BIZ：订单分析   ， 默认为DEVICE
  scope?: string(name='scope'),
}

model QueryAnalysisResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分析数据，根据不同场景的不同json串
  resultList?: [ string ](name='result_list'),
}

/**
 * Description: 分析数据查询
 * Summary: 分析数据查询
 */
async function queryAnalysis(request: QueryAnalysisRequest): QueryAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAnalysisEx(request, headers, runtime);
}

/**
 * Description: 分析数据查询
 * Summary: 分析数据查询
 */
async function queryAnalysisEx(request: QueryAnalysisRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAnalysisResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.analysis.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendCollectorBychainidmulRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 上传数据
  // 
  // 
  content: [ CollectContent ](name='content'),
  // 随机业务号，防重放
  // 
  // 
  nonce: string(name='nonce'),
  // 开启后接口返回值中包含txHash
  waitCheckAndHash?: boolean(name='wait_check_and_hash'),
}

model SendCollectorBychainidmulResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据上链哈希
  resultList?: [ SendCollectorResult ](name='result_list'),
}

/**
 * Description: 上传数据mul（可能是多个不同的设备分别产生的多条数据）
 * Summary: 上传设备数据mul
 */
async function sendCollectorBychainidmul(request: SendCollectorBychainidmulRequest): SendCollectorBychainidmulResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendCollectorBychainidmulEx(request, headers, runtime);
}

/**
 * Description: 上传数据mul（可能是多个不同的设备分别产生的多条数据）
 * Summary: 上传设备数据mul
 */
async function sendCollectorBychainidmulEx(request: SendCollectorBychainidmulRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendCollectorBychainidmulResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.collector.bychainidmul.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendCollectorDevicebizdataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据模型Id
  // 
  // 
  dataModelId: string(name='data_model_id'),
  // 业务号，防重放
  // 
  // 
  nonce: string(name='nonce'),
  // 上传数据
  content: [ BizContentGroup ](name='content'),
  // 场景码，与content中的chainDeviceId至少有一个不为空
  scene?: string(name='scene'),
  // 开启后，接口返回值中包含txHash
  waitCheckAndHash?: boolean(name='wait_check_and_hash'),
}

model SendCollectorDevicebizdataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据上链哈希
  resultList?: [ SendCollectorResult ](name='result_list'),
}

/**
 * Description: 上传设备业务数据
 * Summary: 上传设备业务数据
 */
async function sendCollectorDevicebizdata(request: SendCollectorDevicebizdataRequest): SendCollectorDevicebizdataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendCollectorDevicebizdataEx(request, headers, runtime);
}

/**
 * Description: 上传设备业务数据
 * Summary: 上传设备业务数据
 */
async function sendCollectorDevicebizdataEx(request: SendCollectorDevicebizdataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendCollectorDevicebizdataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.collector.devicebizdata.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDeviceInfobydeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备Id
  deviceId: string(name='device_id'),
  // 设备数据模型Id
  // 
  // 
  dataModelId: string(name='data_model_id'),
  // 场景码 
  // 
  // 
  scene: string(name='scene'),
  // sdk版本号
  // 
  // 
  sdkId: string(name='sdk_id'),
  // 设备注册信息
  // 
  // 
  content: string(name='content'),
  // 签名
  signature: string(name='signature'),
  // 设备类型编码，必填，对应资管平台中的设备类型 
  // 
  // 枚举值：
  // 
  // 车辆 1000 
  // 车辆 四轮车 1001 
  // 车辆 四轮车 纯电四轮车 1002 
  // 车辆 四轮车 混动四轮车 1003 
  // 车辆 四轮车 燃油四轮车 1004 
  // 车辆 两轮车 1011 
  // 车辆 两轮车 两轮单车 1012 
  // 车辆 两轮车 两轮助力车 1013 
  // 
  // 换电柜 2000 
  // 换电柜 二轮车换电柜 2001 
  // 
  // 电池 3000 
  // 电池 磷酸铁电池 3001 
  // 电池 三元锂电池 3002 
  // 
  // 回收设备 4000 
  // 
  // 垃圾分类回收 4001 
  // 
  // 洗车机 5000
  // 
  // 通用计算设备	                6000
  // 	移动设备		        6001
  // 		智能手机	        6002
  // 		工业掌机	        6003
  // 		平板电脑	        6004
  // 	云设备		        6011
  // 		云计算服务器	6012
  deviceTypeCode: long(name='device_type_code'),
  // 设备单价 单位：分
  initialPrice: long(name='initial_price'),
  // 出厂时间
  // 
  factoryTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 投放时间
  // 
  releaseTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
  // 设备型号
  deviceName?: string(name='device_name'),
  // 设备上报数据是否需要验签，取值范围（RAW_DATA、SIGNED_DATA），
  // SIGNED_DATA：需要验签
  // RAW_DATA：不需要验签
  deviceFeature?: string(name='device_feature'),
  // 额外信息
  extraInfo?: string(name='extra_info'),
  // 资产所有人标识（统一社会信用代码）
  owner?: string(name='owner'),
  // 资产所有人名称
  ownerName?: string(name='owner_name'),
}

model UpdateDeviceInfobydeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上设备Id
  // 
  // 
  chainDeviceId?: string(name='chain_device_id'),
  // 发行设备Id
  // 
  // 
  distributeDeviceId?: string(name='distribute_device_id'),
  // 可信设备ID
  trustiotDeviceId?: long(name='trustiot_device_id'),
}

/**
 * Description: 更新设备信息by_devcie
 * Summary: 更新设备信息by_devcie
 */
async function updateDeviceInfobydevice(request: UpdateDeviceInfobydeviceRequest): UpdateDeviceInfobydeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDeviceInfobydeviceEx(request, headers, runtime);
}

/**
 * Description: 更新设备信息by_devcie
 * Summary: 更新设备信息by_devcie
 */
async function updateDeviceInfobydeviceEx(request: UpdateDeviceInfobydeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDeviceInfobydeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.infobydevice.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OfflineDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备链上Id
  // 
  // 
  chainDeviceId: string(name='chain_device_id'),
}

model OfflineDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 下线设备
 * Summary: 下线设备
 */
async function offlineDevice(request: OfflineDeviceRequest): OfflineDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return offlineDeviceEx(request, headers, runtime);
}

/**
 * Description: 下线设备
 * Summary: 下线设备
 */
async function offlineDeviceEx(request: OfflineDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.offline', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyMqtokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
  // 设备ID
  deviceId: string(name='device_id'),
}

model ApplyMqtokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务端返回的Token值，用于阿里云 MQTT连接
  token?: string(name='token'),
  // 接入阿里云LMQ的所需的accessKey
  accessKey?: string(name='access_key'),
  // mqtt的instanceId
  instanceId?: string(name='instance_id'),
  // mqtt的topic
  subTopic?: string(name='sub_topic'),
  // mqtt的topic
  pubTopic?: string(name='pub_topic'),
  // mqtt的groupId
  groupId?: string(name='group_id'),
}

/**
 * Description: 申请MQTT token
 * Summary: 申请MQTT token
 */
async function applyMqtoken(request: ApplyMqtokenRequest): ApplyMqtokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyMqtokenEx(request, headers, runtime);
}

/**
 * Description: 申请MQTT token
 * Summary: 申请MQTT token
 */
async function applyMqtokenEx(request: ApplyMqtokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyMqtokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.mqtoken.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceRegistrationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备Id，由接入方提供，场景内唯一
  deviceId: string(name='device_id'),
  // 场景号
  scene: string(name='scene'),
  // 可信根派生公钥
  devicePublicKey: string(name='device_public_key'),
}

model QueryDeviceRegistrationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 查询设备所注册的公钥是否正确
 * Summary: 查询注册信息
 */
async function queryDeviceRegistration(request: QueryDeviceRegistrationRequest): QueryDeviceRegistrationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceRegistrationEx(request, headers, runtime);
}

/**
 * Description: 查询设备所注册的公钥是否正确
 * Summary: 查询注册信息
 */
async function queryDeviceRegistrationEx(request: QueryDeviceRegistrationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceRegistrationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.registration.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddAbnormalRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备Id，由接入方提供，场景内唯一 
  deviceId: string(name='device_id'),
  // 场景号
  scene: string(name='scene'),
  // 异常类型编码KEY_NOT_FOUND、DEVICE_ID_MISMATCH 等
  abnormalCode: string(name='abnormal_code'),
}

model AddAbnormalResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设备异常上报
 * Summary: 设备异常上报
 */
async function addAbnormal(request: AddAbnormalRequest): AddAbnormalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addAbnormalEx(request, headers, runtime);
}

/**
 * Description: 设备异常上报
 * Summary: 设备异常上报
 */
async function addAbnormalEx(request: AddAbnormalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddAbnormalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.abnormal.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OnlineDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备链上ID
  chainDeviceId: string(name='chain_device_id'),
}

model OnlineDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设备下线后，可通过此接口重新上线
 * Summary: 设置设备状态为上线
 */
async function onlineDevice(request: OnlineDeviceRequest): OnlineDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return onlineDeviceEx(request, headers, runtime);
}

/**
 * Description: 设备下线后，可通过此接口重新上线
 * Summary: 设置设备状态为上线
 */
async function onlineDeviceEx(request: OnlineDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OnlineDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.online', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OfflineDeviceByunregisterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 通过链上设备ID注销设备
  chainDeviceId: string(name='chain_device_id'),
}

model OfflineDeviceByunregisterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 注销设备
 * Summary: 注销设备
 */
async function offlineDeviceByunregister(request: OfflineDeviceByunregisterRequest): OfflineDeviceByunregisterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return offlineDeviceByunregisterEx(request, headers, runtime);
}

/**
 * Description: 注销设备
 * Summary: 注销设备
 */
async function offlineDeviceByunregisterEx(request: OfflineDeviceByunregisterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineDeviceByunregisterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.byunregister.offline', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLabelTraceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码 , 使用asset_id 查询时，scene也必须传入
  scene?: string(name='scene'),
  // 标签Id
  labelId?: string(name='label_id'),
  // 标签状态
  labelStatus?: string(name='label_status'),
  // 资产Id
  assetId?: string(name='asset_id'),
  // 操作员
  operator?: string(name='operator'),
  // 标签拥有者
  owner?: string(name='owner'),
  // 标签所处流程
  process?: string(name='process'),
  // 标签操作
  action?: string(name='action'),
  // 开始时间
  startTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_time'),
  // 结束时间
  endTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='end_time'),
}

model QueryLabelTraceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 标签流转历史
  labelTraceList?: [ LabelTrace ](name='label_trace_list'),
}

/**
 * Description: 标签状态查询
 * Summary: 标签状态查询
 */
async function queryLabelTrace(request: QueryLabelTraceRequest): QueryLabelTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLabelTraceEx(request, headers, runtime);
}

/**
 * Description: 标签状态查询
 * Summary: 标签状态查询
 */
async function queryLabelTraceEx(request: QueryLabelTraceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLabelTraceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.label.trace.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncLabelTransferRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
  // 收集标签数据
  collectLabelContentList: [ CollectLabelContent ](name='collect_label_content_list'),
  // 业务号
  nonce: string(name='nonce'),
}

model SyncLabelTransferResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 标签上链hash返回
  resultList?: [ LabelChainResult ](name='result_list'),
}

/**
 * Description: 标签流转状态同步
 * Summary: 标签流转状态同步
 */
async function syncLabelTransfer(request: SyncLabelTransferRequest): SyncLabelTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncLabelTransferEx(request, headers, runtime);
}

/**
 * Description: 标签流转状态同步
 * Summary: 标签流转状态同步
 */
async function syncLabelTransferEx(request: SyncLabelTransferRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncLabelTransferResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.label.transfer.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddLabelAssetRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
  // 标签Id
  labelId: string(name='label_id'),
  // 资产Id
  assetId: string(name='asset_id'),
  // 资产对应的设备类型码，对应资管平台中的设备类型
  deviceTypeCode?: long(name='device_type_code'),
}

model AddLabelAssetResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 标签资产绑定
 * Summary: 标签资产绑定
 */
async function addLabelAsset(request: AddLabelAssetRequest): AddLabelAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addLabelAssetEx(request, headers, runtime);
}

/**
 * Description: 标签资产绑定
 * Summary: 标签资产绑定
 */
async function addLabelAssetEx(request: AddLabelAssetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddLabelAssetResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.label.asset.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDataBytxhashRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
  // 链上交易hash
  txHash: string(name='tx_hash'),
  // 上链类型枚举： 
  // REGISTER_DEVICE	设备注册
  // DISTRIBUTE_DEVICE	设备发行
  // LABEL_DATA	标签流转数据收集
  // COLLECT_DATA	设备数据收集
  // DEVICE_BIZ_DATA	设备业务订单数据收集
  // REGISTER_PERIPHERAL_DEVICE	外围设备注册
  contractMethod: string(name='contract_method'),
}

model QueryDataBytxhashResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回信息
  result?: string(name='result'),
}

/**
 * Description: 通过tx_hash查询上链信息
 * Summary: 链上信息查询
 */
async function queryDataBytxhash(request: QueryDataBytxhashRequest): QueryDataBytxhashResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDataBytxhashEx(request, headers, runtime);
}

/**
 * Description: 通过tx_hash查询上链信息
 * Summary: 链上信息查询
 */
async function queryDataBytxhashEx(request: QueryDataBytxhashRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDataBytxhashResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.data.bytxhash.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecUnprocessedTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务ID
  taskId: string(name='task_id'),
  // 任务名称枚举
  // confirm_device_state : 确认设备状态变更
  action: string(name='action'),
  // 任务参数
  params: string(name='params'),
}

model ExecUnprocessedTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 根据taskId 执行未处理的任务
 * Summary: 执行未处理的任务
 */
async function execUnprocessedTask(request: ExecUnprocessedTaskRequest): ExecUnprocessedTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execUnprocessedTaskEx(request, headers, runtime);
}

/**
 * Description: 根据taskId 执行未处理的任务
 * Summary: 执行未处理的任务
 */
async function execUnprocessedTaskEx(request: ExecUnprocessedTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecUnprocessedTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.unprocessed.task.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendCollectorSummarydataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 汇总所属的场景码
  scene: string(name='scene'),
  // 汇总的业务类型，同一个scene下可以有不同的业务类型，此字段用于区分业务类型
  bizType: string(name='biz_type'),
  // 提交日期（汇总所属的日期）
  submitDate: string(name='submit_date'),
  // 汇总数据的数据模型ID
  dataModelId: string(name='data_model_id'),
  // 汇总数据的内容，格式遵循data_model_id制定的格式
  content: string(name='content'),
}

model SendCollectorSummarydataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 上传汇总数据
 * Summary: 上传汇总数据
 */
async function sendCollectorSummarydata(request: SendCollectorSummarydataRequest): SendCollectorSummarydataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendCollectorSummarydataEx(request, headers, runtime);
}

/**
 * Description: 上传汇总数据
 * Summary: 上传汇总数据
 */
async function sendCollectorSummarydataEx(request: SendCollectorSummarydataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendCollectorSummarydataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.collector.summarydata.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddCertificateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 机构Id
  organizationId?: long(name='organization_id'),
  // 证书内容
  certificate: string(name='certificate'),
  // 设备ID
  deviceId: string(name='device_id'),
  // 主机设备ID
  hostDeviceId: string(name='host_device_id'),
  // 场景码
  projectId: string(name='project_id'),
}

model AddCertificateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 原始数据
  rawData?: string(name='raw_data'),
  // 对raw_data的签名
  platformSignature?: string(name='platform_signature'),
  // 执行结果成功与否
  success?: boolean(name='success'),
  // 错误码
  errorCode?: long(name='error_code'),
}

/**
 * Description: 根据请求体内容保存密钥
 * Summary: 保存公钥
 */
async function addCertificate(request: AddCertificateRequest): AddCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addCertificateEx(request, headers, runtime);
}

/**
 * Description: 根据请求体内容保存密钥
 * Summary: 保存公钥
 */
async function addCertificateEx(request: AddCertificateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddCertificateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.certificate.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户
  tenantName: string(name='tenant_name'),
  // 组织名称
  orgName: string(name='org_name'),
  // 企业执照号
  owner?: string(name='owner'),
  // 网关私钥
  gatewayPrivateKey?: string(name='gateway_private_key'),
  // 网关公钥
  gatewayPublicKey?: string(name='gateway_public_key'),
  // 是否需要生成秘钥对，默认为false
  generateGatewayKeys?: boolean(name='generate_gateway_keys'),
  // 是否为测试租户
  mock?: boolean(name='mock'),
}

model AddTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增租户
 * Summary: 新增租户
 */
async function addTenant(request: AddTenantRequest): AddTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addTenantEx(request, headers, runtime);
}

/**
 * Description: 新增租户
 * Summary: 新增租户
 */
async function addTenantEx(request: AddTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tenant.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景名称
  sceneName: string(name='scene_name'),
  // 是否托管,取值范围为：NON_ESCROWED、ESCROWED
  escrowed: string(name='escrowed'),
  // 私钥密码
  privateKeyPassword: string(name='private_key_password'),
  // 租户
  tenantName: string(name='tenant_name'),
  // 场景类型
  sceneType: string(name='scene_type'),
  // 是否为测试数据
  mock?: boolean(name='mock'),
  // 拉块解析后是否推送至业务方
  ledgerstreamPushEnable?: boolean(name='ledgerstream_push_enable'),
}

model AddSceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增场景码
 * Summary: 新增场景码
 */
async function addScene(request: AddSceneRequest): AddSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSceneEx(request, headers, runtime);
}

/**
 * Description: 新增场景码
 * Summary: 新增场景码
 */
async function addSceneEx(request: AddSceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.scene.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeploySceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景名称
  sceneName: string(name='scene_name'),
  // bnaas did
  bnaasBasicServiceDid?: string(name='bnaas_basic_service_did'),
  // baas rest bizId
  baasRestBizId?: string(name='baas_rest_biz_id'),
  // 合约版本号
  contractVersion?: string(name='contract_version'),
}

model DeploySceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 部署场景合同
 * Summary: 部署场景合同
 */
async function deployScene(request: DeploySceneRequest): DeploySceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deploySceneEx(request, headers, runtime);
}

/**
 * Description: 部署场景合同
 * Summary: 部署场景合同
 */
async function deploySceneEx(request: DeploySceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeploySceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.scene.deploy', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSdkRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备SDK公钥
  verifyKey: string(name='verify_key'),
  // SDK版本号
  sdkVersionStr: string(name='sdk_version_str'),
  // sdk模型，格式为json
  metaModel: string(name='meta_model'),
  // 平台
  platform?: string(name='platform'),
  // 公司名称
  corpName: string(name='corp_name'),
}

model AddSdkResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增sdk
 * Summary: 新增sdk
 */
async function addSdk(request: AddSdkRequest): AddSdkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSdkEx(request, headers, runtime);
}

/**
 * Description: 新增sdk
 * Summary: 新增sdk
 */
async function addSdkEx(request: AddSdkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSdkResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.sdk.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSdkRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键id
  id: long(name='id'),
  // 设备SDK公钥
  verifyKey?: string(name='verify_key'),
  // SDK版本号
  sdkVersionStr?: string(name='sdk_version_str'),
  // sdk模型，格式为json
  metaModel?: string(name='meta_model'),
  // 平台
  platform?: string(name='platform'),
  // 公司名称
  // 
  corpName?: string(name='corp_name'),
}

model UpdateSdkResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新sdk
 * Summary: 更新sdk
 */
async function updateSdk(request: UpdateSdkRequest): UpdateSdkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSdkEx(request, headers, runtime);
}

/**
 * Description: 更新sdk
 * Summary: 更新sdk
 */
async function updateSdkEx(request: UpdateSdkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSdkResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.sdk.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddProductkeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备端productKey
  productKey: string(name='product_key'),
  // 场景码
  scene: string(name='scene'),
  // 租户ID
  tenantName: string(name='tenant_name'),
  // 数据模型
  dataModelId: string(name='data_model_id'),
  // sdk前缀
  sdkVersionPrefix: string(name='sdk_version_prefix'),
  // 制造商
  manufacturer: string(name='manufacturer'),
  // 顾客
  customer: string(name='customer'),
  // 是否为测试数据
  mock?: boolean(name='mock'),
}

model AddProductkeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增productKey
 * Summary: 新增productKey
 */
async function addProductkey(request: AddProductkeyRequest): AddProductkeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addProductkeyEx(request, headers, runtime);
}

/**
 * Description: 新增productKey
 * Summary: 新增productKey
 */
async function addProductkeyEx(request: AddProductkeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddProductkeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.productkey.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateProductkeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键id
  id: long(name='id'),
  // 设备端productKey
  // 
  productKey?: string(name='product_key'),
  // 场景码
  // 
  scene?: string(name='scene'),
  // 租户ID
  // 
  tenantName?: string(name='tenant_name'),
  // 数据模型
  // 
  dataModelId?: string(name='data_model_id'),
  // sdk前缀
  sdkVersionPrefix?: string(name='sdk_version_prefix'),
  // 制造商
  // 
  manufacturer?: string(name='manufacturer'),
  // 顾客
  customer?: string(name='customer'),
  // 是否为测试数据
  mock?: boolean(name='mock'),
}

model UpdateProductkeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新productKey
 * Summary: 更新productKey
 */
async function updateProductkey(request: UpdateProductkeyRequest): UpdateProductkeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateProductkeyEx(request, headers, runtime);
}

/**
 * Description: 更新productKey
 * Summary: 更新productKey
 */
async function updateProductkeyEx(request: UpdateProductkeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProductkeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.productkey.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键Id
  id: long(name='id'),
  // 租户
  tenantName?: string(name='tenant_name'),
  // 组织名称
  orgName?: string(name='org_name'),
  // 企业执照号
  // 
  owner?: string(name='owner'),
  // 网关私钥
  // 
  gatewayPrivateKey?: string(name='gateway_private_key'),
  // 网关公钥
  // 
  gatewayPublicKey?: string(name='gateway_public_key'),
  // 是否为测试租户
  mock?: boolean(name='mock'),
}

model UpdateTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新租户
 * Summary: 更新租户
 */
async function updateTenant(request: UpdateTenantRequest): UpdateTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTenantEx(request, headers, runtime);
}

/**
 * Description: 更新租户
 * Summary: 更新租户
 */
async function updateTenantEx(request: UpdateTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tenant.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键Id 
  id: long(name='id'),
  // 是否跳过中台数据校验处理
  skipPegasus: boolean(name='skip_pegasus'),
  // 场景名称
  // 
  sceneName?: string(name='scene_name'),
  // 租户
  // 
  tenantName?: string(name='tenant_name'),
  // 场景类型
  // 
  sceneType?: string(name='scene_type'),
  // 定制数据处理类 , 使用用逗号分隔
  customerProcessor?: string(name='customer_processor'),
  // 是否为测试数据
  mock?: boolean(name='mock'),
}

model UpdateSceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新场景码
 * Summary: 更新场景码
 */
async function updateScene(request: UpdateSceneRequest): UpdateSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSceneEx(request, headers, runtime);
}

/**
 * Description: 更新场景码
 * Summary: 更新场景码
 */
async function updateSceneEx(request: UpdateSceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.scene.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendLabelTransferonasyncRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  // 
  scene: string(name='scene'),
  // 收集的标签流转数据
  collectLabelContentList: [ CollectLabelContent ](name='collect_label_content_list'),
  // 业务号，防重放
  nonce: string(name='nonce'),
  // 1 业务端查询结果的最晚时间
  // 2 单位：天，最大值为30 天
  // 3 在responsePeriod 天之后，调用异步接口结果查询 将 无法获取异步接口的执行结果
  responsePeriod: long(name='response_period'),
}

model SendLabelTransferonasyncResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 接口请求的唯一标识
  requestId?: string(name='request_id'),
}

/**
 * Description: 上报标签流转的异步接口，是 blockchain.bot.label.transfer.sync的异步接口版本
 * Summary: 上报标签流转的异步接口
 */
async function sendLabelTransferonasync(request: SendLabelTransferonasyncRequest): SendLabelTransferonasyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendLabelTransferonasyncEx(request, headers, runtime);
}

/**
 * Description: 上报标签流转的异步接口，是 blockchain.bot.label.transfer.sync的异步接口版本
 * Summary: 上报标签流转的异步接口
 */
async function sendLabelTransferonasyncEx(request: SendLabelTransferonasyncRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendLabelTransferonasyncResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.label.transferonasync.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAsyncRequestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求的唯一标识
  requestId: string(name='request_id'),
}

model QueryAsyncRequestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 执行状态 枚举
  // RUNNING	请求正在处理
  // SUCCESS	请求处理成功
  // FAILED	请求处理失败
  status?: string(name='status'),
  // 异步接口的执行结果 ：根据同步接口的出参构建的JSON字符串
  response?: string(name='response'),
}

/**
 * Description: 调用异步接口后，在reponsePeriod 天内，可调用此接口查询异步接口的执行结果 
 * Summary: 异步接口结果查询
 */
async function queryAsyncRequest(request: QueryAsyncRequestRequest): QueryAsyncRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAsyncRequestEx(request, headers, runtime);
}

/**
 * Description: 调用异步接口后，在reponsePeriod 天内，可调用此接口查询异步接口的执行结果 
 * Summary: 异步接口结果查询
 */
async function queryAsyncRequestEx(request: QueryAsyncRequestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAsyncRequestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.async.request.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页数，默认1
  pageIndex: long(name='page_index'),
  // 页码大小，默认10，最大100
  pageSize: long(name='page_size'),
  // 租户
  tenantName?: string(name='tenant_name'),
  // 是否为测试数据
  mock?: boolean(name='mock'),
}

model PagequeryTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页查询结果
  data?: PermissionedTenantPageResponse(name='data'),
}

/**
 * Description: 分页查询租户
 * Summary: 分页查询租户
 */
async function pagequeryTenant(request: PagequeryTenantRequest): PagequeryTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryTenantEx(request, headers, runtime);
}

/**
 * Description: 分页查询租户
 * Summary: 分页查询租户
 */
async function pagequeryTenantEx(request: PagequeryTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tenant.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequerySceneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页数，默认1
  pageIndex: long(name='page_index'),
  // 页码大小，默认10
  pageSize: long(name='page_size'),
  // 场景码
  sceneName?: string(name='scene_name'),
  // 租户
  tenantName?: string(name='tenant_name'),
  // 是否为测试数据
  mock?: boolean(name='mock'),
}

model PagequerySceneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页查询结果
  data?: ScenePageResponse(name='data'),
}

/**
 * Description: 分页查询场景码
 * Summary: 分页查询场景码
 */
async function pagequeryScene(request: PagequerySceneRequest): PagequerySceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequerySceneEx(request, headers, runtime);
}

/**
 * Description: 分页查询场景码
 * Summary: 分页查询场景码
 */
async function pagequerySceneEx(request: PagequerySceneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequerySceneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.scene.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequerySdkRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页数，默认1
  pageIndex: long(name='page_index'),
  // 页码大小，默认10，最大100
  pageSize: long(name='page_size'),
  // sdk版本号
  sdkVersionStr?: string(name='sdk_version_str'),
  // 公司名称
  corpName?: string(name='corp_name'),
}

model PagequerySdkResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页查询结果
  data?: SdkPageResponse(name='data'),
}

/**
 * Description: 分页查询sdk
 * Summary: 分页查询sdk
 */
async function pagequerySdk(request: PagequerySdkRequest): PagequerySdkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequerySdkEx(request, headers, runtime);
}

/**
 * Description: 分页查询sdk
 * Summary: 分页查询sdk
 */
async function pagequerySdkEx(request: PagequerySdkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequerySdkResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.sdk.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryProductkeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页数，默认1
  pageIndex: long(name='page_index'),
  // 页码大小，默认10，最大100
  pageSize: long(name='page_size'),
  // 设备端productKey
  productKey?: string(name='product_key'),
  // 场景码
  // 
  scene?: string(name='scene'),
  // 租户ID
  // 
  tenantName?: string(name='tenant_name'),
  // 是否为测试数据
  mock?: boolean(name='mock'),
}

model PagequeryProductkeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页查询结果
  data?: ProductKeyPageResponse(name='data'),
}

/**
 * Description: 分页查询productKey
 * Summary: 分页查询productKey
 */
async function pagequeryProductkey(request: PagequeryProductkeyRequest): PagequeryProductkeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryProductkeyEx(request, headers, runtime);
}

/**
 * Description: 分页查询productKey
 * Summary: 分页查询productKey
 */
async function pagequeryProductkeyEx(request: PagequeryProductkeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryProductkeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.productkey.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryDataverifyFailureRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页数，默认1
  pageIndex: long(name='page_index'),
  // 页码大小，默认10
  pageSize: long(name='page_size'),
  // 场景码
  // 
  scene: string(name='scene'),
  // 起始查询时间
  startDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_date'),
  // 结束查询时间
  endDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='end_date'),
  // 设备ID（模糊查询）
  deviceId?: string(name='device_id'),
  // 数据来源：0(普通数据上报)；1(MAAS数据上报)；2(设备业务数据上报);3(标签流转)
  source?: long(name='source'),
  // 类型：0:数据上报;1:数据完整性校验
  type?: long(name='type'),
}

model PagequeryDataverifyFailureResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据
  data?: DataVerifyFailureDataPageResponse(name='data'),
}

/**
 * Description: 分页查询校验失败的数据
 * Summary: 分页查询校验失败的数据
 */
async function pagequeryDataverifyFailure(request: PagequeryDataverifyFailureRequest): PagequeryDataverifyFailureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryDataverifyFailureEx(request, headers, runtime);
}

/**
 * Description: 分页查询校验失败的数据
 * Summary: 分页查询校验失败的数据
 */
async function pagequeryDataverifyFailureEx(request: PagequeryDataverifyFailureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryDataverifyFailureResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.dataverify.failure.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddAlertStrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户
  tenantName: string(name='tenant_name'),
  // 场景码
  scene?: string(name='scene'),
  // 策略类型：DEBUG（技术联调）；MONITOR（生产监控）
  strategyType: string(name='strategy_type'),
  // 策略详情，json格式
  strategyDetail: string(name='strategy_detail'),
  // 是否启用，默认false
  enabled: boolean(name='enabled'),
  // 备注
  remark?: string(name='remark'),
}

model AddAlertStrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description:  新增告警策略
 * Summary:  新增告警策略
 */
async function addAlertStrategy(request: AddAlertStrategyRequest): AddAlertStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addAlertStrategyEx(request, headers, runtime);
}

/**
 * Description:  新增告警策略
 * Summary:  新增告警策略
 */
async function addAlertStrategyEx(request: AddAlertStrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddAlertStrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.alert.strategy.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAlertStrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主键ID，更新依据
  id: long(name='id'),
  // 租户
  tenantName?: string(name='tenant_name'),
  // 场景码
  // 
  scene?: string(name='scene'),
  // 策略类型：DEBUG（技术联调）；MONITOR（生产监控）
  strategyType?: string(name='strategy_type'),
  // 策略详情，json格式
  strategyDetail?: string(name='strategy_detail'),
  // 是否启用，默认false
  enabled: boolean(name='enabled'),
  // 备注
  // 
  remark?: string(name='remark'),
}

model UpdateAlertStrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新告警策略接口
 * Summary: 更新告警策略接口
 */
async function updateAlertStrategy(request: UpdateAlertStrategyRequest): UpdateAlertStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAlertStrategyEx(request, headers, runtime);
}

/**
 * Description: 更新告警策略接口
 * Summary: 更新告警策略接口
 */
async function updateAlertStrategyEx(request: UpdateAlertStrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAlertStrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.alert.strategy.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryAlertStrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页数，默认1
  pageIndex: long(name='page_index'),
  // 页码大小，默认10
  pageSize: long(name='page_size'),
  // 租户
  tenantName?: string(name='tenant_name'),
  // 场景码
  // 
  scene?: string(name='scene'),
}

model PagequeryAlertStrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据
  data?: AlertStrategyPageResponse(name='data'),
}

/**
 * Description: 分页查询告警策略接口
 * Summary: 分页查询告警策略接口
 */
async function pagequeryAlertStrategy(request: PagequeryAlertStrategyRequest): PagequeryAlertStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryAlertStrategyEx(request, headers, runtime);
}

/**
 * Description: 分页查询告警策略接口
 * Summary: 分页查询告警策略接口
 */
async function pagequeryAlertStrategyEx(request: PagequeryAlertStrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryAlertStrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.alert.strategy.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncLabelTransferrawRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  // 
  scene: string(name='scene'),
  // 收集标签数据
  collectLabelRawContentList: [ CollectLabelRawContent ](name='collect_label_raw_content_list'),
  // 业务号
  nonce: string(name='nonce'),
}

model SyncLabelTransferrawResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 标签上链hash返回
  resultList?: [ LabelChainResult ](name='result_list'),
}

/**
 * Description: 标签流转状态同步（元数据，无签名）
 * Summary: 标签流转状态同步（元数据，无签名）
 */
async function syncLabelTransferraw(request: SyncLabelTransferrawRequest): SyncLabelTransferrawResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncLabelTransferrawEx(request, headers, runtime);
}

/**
 * Description: 标签流转状态同步（元数据，无签名）
 * Summary: 标签流转状态同步（元数据，无签名）
 */
async function syncLabelTransferrawEx(request: SyncLabelTransferrawRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncLabelTransferrawResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.label.transferraw.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendLabelTransferrawonasyncRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  // 
  scene: string(name='scene'),
  // 收集的标签流转数据
  collectLabelRawContentList: [ CollectLabelRawContent ](name='collect_label_raw_content_list'),
  // 业务号，防重放
  nonce: string(name='nonce'),
  // 1 业务端查询结果的最晚时间 2 单位：天，最大值为30 天 3 在responsePeriod 天之后，调用异步接口结果查询 将 无法获取异步接口的执行结果
  responsePeriod: long(name='response_period'),
}

model SendLabelTransferrawonasyncResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 接口请求的唯一标识
  requestId?: string(name='request_id'),
}

/**
 * Description: 上报标签流转的异步接口（元数据，无签名），是 blockchain.bot.label.transferraw.sync的异步接口版本
 * Summary: 上报标签流转的异步接口（元数据，无签名）
 */
async function sendLabelTransferrawonasync(request: SendLabelTransferrawonasyncRequest): SendLabelTransferrawonasyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendLabelTransferrawonasyncEx(request, headers, runtime);
}

/**
 * Description: 上报标签流转的异步接口（元数据，无签名），是 blockchain.bot.label.transferraw.sync的异步接口版本
 * Summary: 上报标签流转的异步接口（元数据，无签名）
 */
async function sendLabelTransferrawonasyncEx(request: SendLabelTransferrawonasyncRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendLabelTransferrawonasyncResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.label.transferrawonasync.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDockedDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 1. 已对接的接口名 ; 
  // 2. docked_method可通过 实例化SDK中的Request模型后获取，例如：
  // String dockedMethod = new CreateDeviceDatamodelRequest().getMethod();
  dockedMethod: string(name='docked_method'),
  // 关键key为chainDeviceId 时不填
  scene?: string(name='scene'),
  // 1. 接口中的关键key ，例如 deviceId ；
  // 2. key为chainDeviceId时，scene字段不填
  // 
  key?: [ string ](name='key'),
}

model QueryDockedDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 1. 根据不同的method返回不同的数据内容
  // 2. markdown格式的内容
  result?: [ string ](name='result'),
}

/**
 * Description: 根据接口名和关键key（deviceId等）, 查询验收已对接的数据
 * Summary: 查询验收已对接的数据
 */
async function queryDockedData(request: QueryDockedDataRequest): QueryDockedDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDockedDataEx(request, headers, runtime);
}

/**
 * Description: 根据接口名和关键key（deviceId等）, 查询验收已对接的数据
 * Summary: 查询验收已对接的数据
 */
async function queryDockedDataEx(request: QueryDockedDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDockedDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.docked.data.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDeviceRelationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主设备链上id
  subjectChainDeviceId: string(name='subject_chain_device_id'),
  // 关系谓语，目前的取值范围：SUB_DEVICE（子设备）
  predicate: string(name='predicate'),
  // 关联设备链上id列表
  objectChainDeviceIdList: [ string ](name='object_chain_device_id_list'),
}

model CreateDeviceRelationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建实体关联关系
 * Summary: 创建实体关联关系
 */
async function createDeviceRelation(request: CreateDeviceRelationRequest): CreateDeviceRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDeviceRelationEx(request, headers, runtime);
}

/**
 * Description: 创建实体关联关系
 * Summary: 创建实体关联关系
 */
async function createDeviceRelationEx(request: CreateDeviceRelationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDeviceRelationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.relation.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDeviceRelationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主设备链上id
  subjectChainDeviceId: string(name='subject_chain_device_id'),
  // 关系谓语，目前取值范围：SUB_DEVICE（子设备）
  predicate: string(name='predicate'),
  // 关联设备链上id
  objectChainDeviceId: string(name='object_chain_device_id'),
}

model DeleteDeviceRelationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除实体关联关系
 * Summary: 删除实体关联关系
 */
async function deleteDeviceRelation(request: DeleteDeviceRelationRequest): DeleteDeviceRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDeviceRelationEx(request, headers, runtime);
}

/**
 * Description: 删除实体关联关系
 * Summary: 删除实体关联关系
 */
async function deleteDeviceRelationEx(request: DeleteDeviceRelationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDeviceRelationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.device.relation.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushCollectotBychainidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上设备Id
  chainDeviceId: string(name='chain_device_id'),
  // 收集数据
  collectContentList: [ CollectContent ](name='collect_content_list'),
  // 随机数，防重放
  nonce: string(name='nonce'),
  // 数据模型Id
  dataModelId?: string(name='data_model_id'),
}

model PushCollectotBychainidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 推送结果
  pushResult?: boolean(name='push_result'),
}

/**
 * Description: 推送单个设备所产生的设备数据
 * Summary: 推送设备数据
 */
async function pushCollectotBychainid(request: PushCollectotBychainidRequest): PushCollectotBychainidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushCollectotBychainidEx(request, headers, runtime);
}

/**
 * Description: 推送单个设备所产生的设备数据
 * Summary: 推送设备数据
 */
async function pushCollectotBychainidEx(request: PushCollectotBychainidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushCollectotBychainidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.collectot.bychainid.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model NotifyPullstrategyChangestatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 运营商标识
  operatorId: string(name='operator_id'),
  // 加密后的核心数据
  data: string(name='data'),
  // 接口请求时的时间戳信息，格式为yyyyMMddHHmmss
  timeStamp: string(name='time_stamp'),
  // 自增序列，4位自增序列取自时间戳，同一秒内按序列自增长，新秒重计
  seq: string(name='seq'),
  // 参数签名，原文为operatorId+data+timeStamp+seq
  sig: string(name='sig'),
  // 场景码
  scene: string(name='scene'),
  // 数据模型ID，用于校验data原文数据
  dataModelId?: string(name='data_model_id'),
}

model NotifyPullstrategyChangestatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回参数密文
  data?: string(name='data'),
  // 返回消息
  msg?: string(name='msg'),
  // 返回值
  ret?: long(name='ret'),
  // 签名，原文为ret+msg+data密文
  sig?: string(name='sig'),
}

/**
 * Description: 推送设备状态变更信息
 * Summary: 推送设备状态变更信息
 */
async function notifyPullstrategyChangestatus(request: NotifyPullstrategyChangestatusRequest): NotifyPullstrategyChangestatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return notifyPullstrategyChangestatusEx(request, headers, runtime);
}

/**
 * Description: 推送设备状态变更信息
 * Summary: 推送设备状态变更信息
 */
async function notifyPullstrategyChangestatusEx(request: NotifyPullstrategyChangestatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): NotifyPullstrategyChangestatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.pullstrategy.changestatus.notify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model NotifyPullstrategyChargeorderinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 运营商标识
  operatorId: string(name='operator_id'),
  // 加密后的核心数据
  data: string(name='data'),
  // 接口请求时的时间戳信息，格式为yyyyMMddHHmmss
  timeStamp: string(name='time_stamp'),
  // 自增序列，4位自增序列取自时间戳，同一秒内按序列自增长，新秒重计
  seq: string(name='seq'),
  // 参数签名，原文为operatorId+data+timeStamp+seq
  sig: string(name='sig'),
  // 场景码
  scene: string(name='scene'),
  // 数据模型ID，用于校验data原文数据
  dataModelId?: string(name='data_model_id'),
}

model NotifyPullstrategyChargeorderinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回参数密文
  data?: string(name='data'),
  // 返回消息
  msg?: string(name='msg'),
  // 返回值
  ret?: long(name='ret'),
  // 签名，原文为ret+msg+data密文
  sig?: string(name='sig'),
}

/**
 * Description: 推送订单信息
 * Summary: 推送订单信息
 */
async function notifyPullstrategyChargeorderinfo(request: NotifyPullstrategyChargeorderinfoRequest): NotifyPullstrategyChargeorderinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return notifyPullstrategyChargeorderinfoEx(request, headers, runtime);
}

/**
 * Description: 推送订单信息
 * Summary: 推送订单信息
 */
async function notifyPullstrategyChargeorderinfoEx(request: NotifyPullstrategyChargeorderinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): NotifyPullstrategyChargeorderinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.pullstrategy.chargeorderinfo.notify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryScfleaseEqpinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求体
  request: [ ScfLeaseEqpInfoQueryRequest ](name='request'),
}

model QueryScfleaseEqpinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  result?: [ ScfLeaseEqpInfo ](name='result'),
  // 成功/失败
  success?: boolean(name='success'),
}

/**
 * Description: 菜鸟设备监控信息获取
 * Summary: 菜鸟设备监控信息获取
 */
async function queryScfleaseEqpinfo(request: QueryScfleaseEqpinfoRequest): QueryScfleaseEqpinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryScfleaseEqpinfoEx(request, headers, runtime);
}

/**
 * Description: 菜鸟设备监控信息获取
 * Summary: 菜鸟设备监控信息获取
 */
async function queryScfleaseEqpinfoEx(request: QueryScfleaseEqpinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryScfleaseEqpinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.scflease.eqpinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCustomerEntityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，由蚂蚁提供
  scene: string(name='scene'),
  // 实体ID，场景内实体ID需要具有唯一性
  entityId: string(name='entity_id'),
  // 实体名称, 例如：服务区地理围栏
  entityName: string(name='entity_name'),
  // 实体内容 , 类型为字符串
  content: string(name='content'),
  // 实体类别 (枚举) ，由蚂蚁提供 ，例如地理围栏：GEOFENCE
  entityType: string(name='entity_type'),
}

model CreateCustomerEntityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建自定义的实体数据
 * Summary: 创建自定义实体
 */
async function createCustomerEntity(request: CreateCustomerEntityRequest): CreateCustomerEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCustomerEntityEx(request, headers, runtime);
}

/**
 * Description: 创建自定义的实体数据
 * Summary: 创建自定义实体
 */
async function createCustomerEntityEx(request: CreateCustomerEntityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCustomerEntityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.customer.entity.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateCustomerEntityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，由蚂蚁提供
  scene: string(name='scene'),
  // 实体ID
  // 
  entityId: string(name='entity_id'),
  // 实体名称, 例如：服务区A地理围栏
  entityName: string(name='entity_name'),
  // 实体内容 , 类型为字符串
  // 
  content: string(name='content'),
}

model UpdateCustomerEntityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新自定义实体，通过场景码+实体ID来更新 实体内容或实体名称
 * Summary: 更新自定义实体
 */
async function updateCustomerEntity(request: UpdateCustomerEntityRequest): UpdateCustomerEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateCustomerEntityEx(request, headers, runtime);
}

/**
 * Description: 更新自定义实体，通过场景码+实体ID来更新 实体内容或实体名称
 * Summary: 更新自定义实体
 */
async function updateCustomerEntityEx(request: UpdateCustomerEntityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateCustomerEntityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.customer.entity.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateThingmodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 物模型内容（多个物模型功能拼合的json）
  thingModel: string(name='thing_model'),
}

model CreateThingmodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 为租户创建物模型
 * Summary: 为租户创建物模型
 */
async function createThingmodel(request: CreateThingmodelRequest): CreateThingmodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createThingmodelEx(request, headers, runtime);
}

/**
 * Description: 为租户创建物模型
 * Summary: 为租户创建物模型
 */
async function createThingmodelEx(request: CreateThingmodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateThingmodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingmodel.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryThingmodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryThingmodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 租户的物模型内容（多个物模型功能拼合的json）
  thingModel?: string(name='thing_model'),
}

/**
 * Description: 查询租户的物模型
 * Summary: 查询租户的物模型
 */
async function queryThingmodel(request: QueryThingmodelRequest): QueryThingmodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryThingmodelEx(request, headers, runtime);
}

/**
 * Description: 查询租户的物模型
 * Summary: 查询租户的物模型
 */
async function queryThingmodelEx(request: QueryThingmodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryThingmodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingmodel.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributedeviceBydevicemulRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，由蚂蚁侧定义
  scene: string(name='scene'),
  // 设备注册信息集合, 数组长度不超过50
  deviceParamList: [ RegByDeviceParm ](name='device_param_list'),
}

model CreateDistributedeviceBydevicemulResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可信设备ID集合
  trustiotDeviceIdList?: [ TrustiotDeviceIdMap ](name='trustiot_device_id_list'),
}

/**
 * Description: 通过设备异步批量发行设备
 * Summary: 通过设备异步批量发行设备
 */
async function createDistributedeviceBydevicemul(request: CreateDistributedeviceBydevicemulRequest): CreateDistributedeviceBydevicemulResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributedeviceBydevicemulEx(request, headers, runtime);
}

/**
 * Description: 通过设备异步批量发行设备
 * Summary: 通过设备异步批量发行设备
 */
async function createDistributedeviceBydevicemulEx(request: CreateDistributedeviceBydevicemulRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributedeviceBydevicemulResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bydevicemul.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributedeviceBydeviceidmulRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
  // 设备注册信息集合
  deviceParamList: [ RegByDeviceIdParm ](name='device_param_list'),
}

model CreateDistributedeviceBydeviceidmulResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可信设备ID集合
  // 
  trustiotDeviceIdList?: [ TrustiotDeviceIdMap ](name='trustiot_device_id_list'),
}

/**
 * Description: 通过设备ID异步批量发行设备
 * Summary: 通过设备ID异步批量发行设备
 */
async function createDistributedeviceBydeviceidmul(request: CreateDistributedeviceBydeviceidmulRequest): CreateDistributedeviceBydeviceidmulResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributedeviceBydeviceidmulEx(request, headers, runtime);
}

/**
 * Description: 通过设备ID异步批量发行设备
 * Summary: 通过设备ID异步批量发行设备
 */
async function createDistributedeviceBydeviceidmulEx(request: CreateDistributedeviceBydeviceidmulRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributedeviceBydeviceidmulResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.distributedevice.bydeviceidmul.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindEntityrelationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // [主]实体场景码
  subjectScene: string(name='subject_scene'),
  // [主]实体ID（当[主]实体平台唯一ID（subject_trustiot_id）为空时，此项不能为空）
  subjectEntityId?: string(name='subject_entity_id'),
  // [主]实体平台唯一ID（当[主]实体ID（subject_entity_id）为空时，此项不能为空）
  subjectTrustiotId?: long(name='subject_trustiot_id'),
  // 关系谓语, 取值范围：SUB_DEVICE、USER、LOCATION
  predicate: string(name='predicate'),
  // [宾]实体类型，取值范围：DEVICE、PERIPHERAL、LABEL、CUSTOMER_ENTITY
  objectEntityType: string(name='object_entity_type'),
  // [宾]场景码（当[宾]实体唯一ID为空时，此项必填）
  objectScene?: string(name='object_scene'),
  // [宾]实体ID（当[宾]实体唯一ID为空时，此项必填）
  objectEntityId?: string(name='object_entity_id'),
  // [宾]平台唯一ID，与[宾]实体场景码+[宾]实体ID（object_scene+object_entity_id）不能同时为空
  objectTrustiotId?: long(name='object_trustiot_id'),
  // 绑定请求中，主语或宾语有历史关系，是否删除历史，写入新关系
  // (只处理1对1关系，即生效的前提是{RelationProperty}的maxObjectCount=1 & maxSubjectCount=1)
  upsert: boolean(name='upsert'),
  // 备注
  remark?: string(name='remark'),
  // 自定义实体信息（如果object_entity_type=CUSTOMER_ENTITY，则custom_entity_info必填）
  customEntityInfo?: CustomEntityInfo(name='custom_entity_info'),
}

model BindEntityrelationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 绑定实体关系
 * Summary: 绑定实体关系
 */
async function bindEntityrelation(request: BindEntityrelationRequest): BindEntityrelationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindEntityrelationEx(request, headers, runtime);
}

/**
 * Description: 绑定实体关系
 * Summary: 绑定实体关系
 */
async function bindEntityrelationEx(request: BindEntityrelationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindEntityrelationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.entityrelation.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnbindEntityrelationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // [主]实体场景码
  subjectScene: string(name='subject_scene'),
  // [主]实体ID（当[主]实体平台唯一ID（subject_trustiot_id）为空时，此项不能为空）
  subjectEntityId?: string(name='subject_entity_id'),
  // [主]实体平台唯一ID（当[主]实体ID（subject_entity_id）为空时，此项不能为空）
  subjectTrustiotId?: long(name='subject_trustiot_id'),
  // 关系谓语, 取值范围：SUB_DEVICE、USER、LOCATION
  predicate: string(name='predicate'),
  // [宾]实体类型，取值范围：DEVICE、PERIPHERAL、LABEL、CUSTOMER_ENTITY
  objectEntityType: string(name='object_entity_type'),
  // [宾]场景码（当[宾]实体唯一ID列表(object_trustiotiot_id_list)为空时，此项必填）
  objectScene?: string(name='object_scene'),
  // [宾]实体ID列表（当[宾]实体唯一ID列表(object_trustiotiot_id_list)为空时，此项必填）
  // 
  objectEntityIdList?: [ string ](name='object_entity_id_list'),
  // [宾]实体唯一ID列表,与[宾]实体场景码+[宾]实体ID列表（object_scene+object_entity_id）不能同时为空
  objectTrustiotiotIdList?: [ long ](name='object_trustiotiot_id_list'),
}

model UnbindEntityrelationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量解绑实体关系
 * Summary: 批量解绑实体关系
 */
async function unbindEntityrelation(request: UnbindEntityrelationRequest): UnbindEntityrelationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unbindEntityrelationEx(request, headers, runtime);
}

/**
 * Description: 批量解绑实体关系
 * Summary: 批量解绑实体关系
 */
async function unbindEntityrelationEx(request: UnbindEntityrelationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnbindEntityrelationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.entityrelation.unbind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailThingmodelDeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
  // 设备ID（当device_imei号为空时，会根据scene+device_id查询设备记录，获取device_imei）
  deviceId: string(name='device_id'),
  // 设备imei号
  deviceImei?: string(name='device_imei'),
}

model DetailThingmodelDeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备状态
  status?: string(name='status'),
  // 设备状态是否可用
  statusAvailable?: boolean(name='status_available'),
  // SDK版本号
  sdkVersion?: string(name='sdk_version'),
  // SDK版本号是否可用
  sdkVersionAvailable?: boolean(name='sdk_version_available'),
}

/**
 * Description: 查询物模型设备详情
 * Summary: 查询物模型设备详情
 */
async function detailThingmodelDevice(request: DetailThingmodelDeviceRequest): DetailThingmodelDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailThingmodelDeviceEx(request, headers, runtime);
}

/**
 * Description: 查询物模型设备详情
 * Summary: 查询物模型设备详情
 */
async function detailThingmodelDeviceEx(request: DetailThingmodelDeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailThingmodelDeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingmodel.device.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCollectorUploadfileurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
  // 待上传文件的业务类型，
  // 设备心跳数据：COLLECT_MUL
  // 设备业务数据： COLLECT_DEVICE_BIZ_DATA
  dataType: string(name='data_type'),
}

model CreateCollectorUploadfileurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可以上传文件的预签名URL
  uploadFileUrl?: string(name='upload_file_url'),
  // 上传任务唯一ID，后续流程中会用到
  uploadId?: string(name='upload_id'),
}

/**
 * Description: 通过CSV文件上报数据时，需要先通过这个接口获取上报地址URL
 * Summary: 创建上传文件URL
 */
async function createCollectorUploadfileurl(request: CreateCollectorUploadfileurlRequest): CreateCollectorUploadfileurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCollectorUploadfileurlEx(request, headers, runtime);
}

/**
 * Description: 通过CSV文件上报数据时，需要先通过这个接口获取上报地址URL
 * Summary: 创建上传文件URL
 */
async function createCollectorUploadfileurlEx(request: CreateCollectorUploadfileurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCollectorUploadfileurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.collector.uploadfileurl.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmCollectorUploadfileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 上报文件任务ID，blockchain.bot.collector.uploadfileurl.create接口中获取
  uploadId: string(name='upload_id'),
  // 上报数据的总数，用于和CSV文件中的数据进行核验
  total: long(name='total'),
}

model ConfirmCollectorUploadfileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 通过文件上报数据流程，先获取上报文件URL，然后向目标URL中上传文件，最后调用此接口进行确认
 * Summary: 通过文件上报数据，上传完毕后确认
 */
async function confirmCollectorUploadfile(request: ConfirmCollectorUploadfileRequest): ConfirmCollectorUploadfileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmCollectorUploadfileEx(request, headers, runtime);
}

/**
 * Description: 通过文件上报数据流程，先获取上报文件URL，然后向目标URL中上传文件，最后调用此接口进行确认
 * Summary: 通过文件上报数据，上传完毕后确认
 */
async function confirmCollectorUploadfileEx(request: ConfirmCollectorUploadfileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmCollectorUploadfileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.collector.uploadfile.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateThingmodelEventRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 物模型事件json
  thingModelEventJson: string(name='thing_model_event_json'),
  // 数据样例
  dataDemo?: string(name='data_demo'),
}

model CreateThingmodelEventResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 物模型事件ID
  eventId?: string(name='event_id'),
}

/**
 * Description: 创建物模型事件
 * Summary: 创建物模型事件
 */
async function createThingmodelEvent(request: CreateThingmodelEventRequest): CreateThingmodelEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createThingmodelEventEx(request, headers, runtime);
}

/**
 * Description: 创建物模型事件
 * Summary: 创建物模型事件
 */
async function createThingmodelEventEx(request: CreateThingmodelEventRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateThingmodelEventResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingmodel.event.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryThingmodelEventRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 物模型事件ID
  eventId: string(name='event_id'),
}

model QueryThingmodelEventResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 物模型事件json
  // 
  thingModelEventJson?: string(name='thing_model_event_json'),
  // 数据样例
  dataDemo?: string(name='data_demo'),
}

/**
 * Description: 查询物模型事件
 * Summary: 查询物模型事件
 */
async function queryThingmodelEvent(request: QueryThingmodelEventRequest): QueryThingmodelEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryThingmodelEventEx(request, headers, runtime);
}

/**
 * Description: 查询物模型事件
 * Summary: 查询物模型事件
 */
async function queryThingmodelEventEx(request: QueryThingmodelEventRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryThingmodelEventResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingmodel.event.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEntityrelationJtdevicebycarRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 车辆ID： 车辆车牌颜色+车牌号
  deviceId: string(name='device_id'),
  // 场景码
  scene: string(name='scene'),
}

model QueryEntityrelationJtdevicebycarResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 车辆关联的部标设备列表
  deviceList?: [ JtDevice ](name='device_list'),
}

/**
 * Description: 通过车辆车牌的颜色+号码+场景码，查询关联的部标设备对应的IoT可信平台唯一ID
 * Summary: 车辆关联的部标设备列表查询
 */
async function queryEntityrelationJtdevicebycar(request: QueryEntityrelationJtdevicebycarRequest): QueryEntityrelationJtdevicebycarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEntityrelationJtdevicebycarEx(request, headers, runtime);
}

/**
 * Description: 通过车辆车牌的颜色+号码+场景码，查询关联的部标设备对应的IoT可信平台唯一ID
 * Summary: 车辆关联的部标设备列表查询
 */
async function queryEntityrelationJtdevicebycarEx(request: QueryEntityrelationJtdevicebycarRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEntityrelationJtdevicebycarResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.entityrelation.jtdevicebycar.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCollectorJtfluxRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询类型，支持LOCATION, TRACE,  ALARM三类
  queryType: string(name='query_type'),
  // 查询模式，支持抽样SAMPLE和分页PAGE两类，query_type不是LOCATION时必填
  queryMode?: string(name='query_mode'),
  // 场景码
  scene: string(name='scene'),
  // 部标设备可信平台唯一ID列表
  trustiotDeviceIdList?: [ long ](name='trustiot_device_id_list'),
  // 开始时间，查询TRACE,  ALARM时必填
  startTime?: long(name='start_time'),
  // 结束时间，查询TRACE,  ALARM时必填
  endTime?: long(name='end_time'),
  // 查询ALARM的类型，默认查全部类型，包括ALARM_BASIC,ALARM_ADAS ,ALARM_DSM,ALARM_ACCELEROMETER四类
  alarmTypes?: [ string ](name='alarm_types'),
  // 页码
  pageIndex?: long(name='page_index'),
  // 单页数量
  pageSize?: long(name='page_size'),
  // 告警子类型
  alarmSubTypes?: [ long ](name='alarm_sub_types'),
}

model QueryCollectorJtfluxResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 1
  pageIndex?: long(name='page_index'),
  // 单页数量
  pageSize?: long(name='page_size'),
  // 总记录数
  totalSize?: long(name='total_size'),
  // 总页数
  totalPages?: long(name='total_pages'),
  // 部标数据列表
  pageData?: [ JtData ](name='page_data'),
  // 聚合统计指标
  extraData?: JtExtraData(name='extra_data'),
}

/**
 * Description: 部标设备位置/轨迹/异常数据查询
 * Summary: 部标设备位置/轨迹/异常数据查询
 */
async function queryCollectorJtflux(request: QueryCollectorJtfluxRequest): QueryCollectorJtfluxResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCollectorJtfluxEx(request, headers, runtime);
}

/**
 * Description: 部标设备位置/轨迹/异常数据查询
 * Summary: 部标设备位置/轨迹/异常数据查询
 */
async function queryCollectorJtfluxEx(request: QueryCollectorJtfluxRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCollectorJtfluxResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.collector.jtflux.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCollectorJtmediaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  scene: string(name='scene'),
  // 异常事件ID，由告警事件标识生成，在blockchain.bot.collector.jtflux.query接口中可获取
  alarmEventId: string(name='alarm_event_id'),
  // 异常事件媒体文件ID列表
  mediaIdList?: [ string ](name='media_id_list'),
}

model QueryCollectorJtmediaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 多媒体文件列表
  mediaList?: [ JtMedia ](name='media_list'),
}

/**
 * Description: 通过异常事件ID查询部标多媒体文件地址
 * Summary: 通过异常事件ID查询部标多媒体文件地址
 */
async function queryCollectorJtmedia(request: QueryCollectorJtmediaRequest): QueryCollectorJtmediaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCollectorJtmediaEx(request, headers, runtime);
}

/**
 * Description: 通过异常事件ID查询部标多媒体文件地址
 * Summary: 通过异常事件ID查询部标多媒体文件地址
 */
async function queryCollectorJtmediaEx(request: QueryCollectorJtmediaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCollectorJtmediaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.collector.jtmedia.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOnlinepressuretestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 项目ID
  projectId: string(name='project_id'),
}

model QueryOnlinepressuretestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 产线压测任务对象
  testTask?: OnlinePressureTestTask(name='test_task'),
}

/**
 * Description: 查询产线压测任务
 * Summary: 查询项目关联的产线压测任务
 */
async function queryOnlinepressuretest(request: QueryOnlinepressuretestRequest): QueryOnlinepressuretestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOnlinepressuretestEx(request, headers, runtime);
}

/**
 * Description: 查询产线压测任务
 * Summary: 查询项目关联的产线压测任务
 */
async function queryOnlinepressuretestEx(request: QueryOnlinepressuretestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOnlinepressuretestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.onlinepressuretest.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateOnlinepressuretestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 产线压测任务对象
  // 
  testTask: OnlinePressureTestTask(name='test_task'),
  // 项目ID
  projectId?: string(name='project_id'),
}

model CreateOnlinepressuretestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description:  【自主联调平台】创建产线压测任务
 * Summary:  【自主联调平台】创建产线压测任务
 */
async function createOnlinepressuretest(request: CreateOnlinepressuretestRequest): CreateOnlinepressuretestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createOnlinepressuretestEx(request, headers, runtime);
}

/**
 * Description:  【自主联调平台】创建产线压测任务
 * Summary:  【自主联调平台】创建产线压测任务
 */
async function createOnlinepressuretestEx(request: CreateOnlinepressuretestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateOnlinepressuretestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.onlinepressuretest.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateOnlinepressuretestCustomerreportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 联调项目ID
  projectId: string(name='project_id'),
  // 客户侧的压测报告
  customerPtReport: string(name='customer_pt_report'),
}

model UpdateOnlinepressuretestCustomerreportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新客户侧的压测报告
 * Summary: 更新客户侧的压测报告
 */
async function updateOnlinepressuretestCustomerreport(request: UpdateOnlinepressuretestCustomerreportRequest): UpdateOnlinepressuretestCustomerreportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateOnlinepressuretestCustomerreportEx(request, headers, runtime);
}

/**
 * Description: 更新客户侧的压测报告
 * Summary: 更新客户侧的压测报告
 */
async function updateOnlinepressuretestCustomerreportEx(request: UpdateOnlinepressuretestCustomerreportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateOnlinepressuretestCustomerreportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.onlinepressuretest.customerreport.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryThingmodeleventBycustomertenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 客户的租户ID
  customerTenant: string(name='customer_tenant'),
}

model QueryThingmodeleventBycustomertenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 物模型事件列表
  eventList?: [ ThingModelEventVO ](name='event_list'),
}

/**
 * Description: 查询客户的物模型事件
 * Summary: 查询客户的物模型事件列表
 */
async function queryThingmodeleventBycustomertenant(request: QueryThingmodeleventBycustomertenantRequest): QueryThingmodeleventBycustomertenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryThingmodeleventBycustomertenantEx(request, headers, runtime);
}

/**
 * Description: 查询客户的物模型事件
 * Summary: 查询客户的物模型事件列表
 */
async function queryThingmodeleventBycustomertenantEx(request: QueryThingmodeleventBycustomertenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryThingmodeleventBycustomertenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingmodelevent.bycustomertenant.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeployThingudfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // UDF 唯一ID
  udfId: string(name='udf_id'),
  // 场景码
  scene: string(name='scene'),
  // 物模型功能ID
  featureId: string(name='feature_id'),
  // 租户ID
  customerTenant: string(name='customer_tenant'),
  // UDF类型枚举
  udfType: string(name='udf_type'),
  // 物模型UDF实例表
  value: string(name='value'),
}

model DeployThingudfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 从联调环境部署物模型UDF到生产环境
 * Summary: 从联调环境部署物模型UDF到生产环境
 */
async function deployThingudf(request: DeployThingudfRequest): DeployThingudfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deployThingudfEx(request, headers, runtime);
}

/**
 * Description: 从联调环境部署物模型UDF到生产环境
 * Summary: 从联调环境部署物模型UDF到生产环境
 */
async function deployThingudfEx(request: DeployThingudfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeployThingudfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingudf.deploy', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecThingsdidOneapiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 暂无
  bizContent: string(name='biz_content'),
}

model ExecThingsdidOneapiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 暂无
  rawResponse?: string(name='raw_response'),
}

/**
 * Description: 信物链oneapi
 * Summary: 信物链oneapi
 */
async function execThingsdidOneapi(request: ExecThingsdidOneapiRequest): ExecThingsdidOneapiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execThingsdidOneapiEx(request, headers, runtime);
}

/**
 * Description: 信物链oneapi
 * Summary: 信物链oneapi
 */
async function execThingsdidOneapiEx(request: ExecThingsdidOneapiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecThingsdidOneapiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.oneapi.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartEvidenceStoreRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 信物链存证结构体参数
  evidenceStorageReq: EvidenceStorageReq(name='evidence_storage_req'),
  // 输入唯一交易ID序号，客户端管理短时内唯一
  nonce: string(name='nonce'),
}

model StartEvidenceStoreResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // API消耗时间（毫秒单位）
  costMillis?: long(name='cost_millis'),
  // 暂保留
  dataIndex?: string(name='data_index'),
  // 上链附加备注信息，不做上链存储。
  extInfo?: string(name='ext_info'),
  // 交易ID，等于输入参数同名字段
  nonce?: string(name='nonce'),
  // 本地unix时间戳（毫秒单位）
  timestamp?: long(name='timestamp'),
  // unix链上存储时间戳
  txTimestamp?: long(name='tx_timestamp'),
  // 链上交易地址txHash
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 信物链存证
 * Summary: 信物链存证
 */
async function startEvidenceStore(request: StartEvidenceStoreRequest): StartEvidenceStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startEvidenceStoreEx(request, headers, runtime);
}

/**
 * Description: 信物链存证
 * Summary: 信物链存证
 */
async function startEvidenceStoreEx(request: StartEvidenceStoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartEvidenceStoreResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.evidence.store.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartEvidenceQueryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 信物链单条存证查询请求结构体
  evidenceQueryInfoReq: EvidenceQueryInfoReq(name='evidence_query_info_req'),
  // 输入交易唯一ID，短时内唯一
  nonce: string(name='nonce'),
}

model StartEvidenceQueryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易在区块链所在块高度
  blockHeight?: long(name='block_height'),
  // API消耗时间（毫秒单位）
  costMillis?: long(name='cost_millis'),
  // 唯一ID，等于输入同名参数
  nonce?: string(name='nonce'),
  // unix时间戳(毫秒单位)
  timestamp?: long(name='timestamp'),
  // 区块链交易地址txHash
  txHash?: string(name='tx_hash'),
  // 交易存储区块链的链上unix时间戳
  txTimestamp?: long(name='tx_timestamp'),
  // 信物链查询链上获取的数据，参考结构体定义
  data?: EvidenceBaseModel(name='data'),
}

/**
 * Description: 信物链存证查询
 * Summary: 信物链存证查询
 */
async function startEvidenceQuery(request: StartEvidenceQueryRequest): StartEvidenceQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startEvidenceQueryEx(request, headers, runtime);
}

/**
 * Description: 信物链存证查询
 * Summary: 信物链存证查询
 */
async function startEvidenceQueryEx(request: StartEvidenceQueryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartEvidenceQueryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.evidence.query.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartThingsdidRegisterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 信物链交易唯一ID，代表需要标识的操作ID
  nonce: string(name='nonce'),
  // 注册信物链身份实体请求结构体
  registerReq: ThingsDidRegisterReq(name='register_req'),
}

model StartThingsdidRegisterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 代表本操作是否是异步调用
  // true: 执行完全，非异步操作
  // false: 异步执行，需要根据nonce轮训状态
  executed?: boolean(name='executed'),
  // 代表唯一交易ID，等于输入参数同名字段
  nonce?: string(name='nonce'),
  // 注册成功返回的实体身份DID
  thingDid?: string(name='thing_did'),
}

/**
 * Description: 信物链实体身份注册
 * Summary: 信物链实体身份注册
 */
async function startThingsdidRegister(request: StartThingsdidRegisterRequest): StartThingsdidRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startThingsdidRegisterEx(request, headers, runtime);
}

/**
 * Description: 信物链实体身份注册
 * Summary: 信物链实体身份注册
 */
async function startThingsdidRegisterEx(request: StartThingsdidRegisterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartThingsdidRegisterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.register.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryThingsdidAsyncprocessRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要查询的实体Did，可为空
  thingDid?: string(name='thing_did'),
  // 随机数唯一ID, 用以标识智能合约执行的索引交易ID，需要等于需要轮询的API的nonce
  nonce: string(name='nonce'),
}

model QueryThingsdidAsyncprocessResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 需要查询的实体Did，可为空
  thingDid?: string(name='thing_did'),
  // 随机数, 用以标识智能合约执行的索引，等于输入
  nonce?: string(name='nonce'),
  // 交易执行当前状态，原始文本，和async_code, async_subcode匹配，将来可能会删除此字段
  asyncStatus?: string(name='async_status'),
  // 从智能合约执行返回的结果编码，200成功，其他参考相应文档
  asyncCode?: string(name='async_code'),
  // 可为空，代表async_code信息不能表示完整语义时的子结果码
  asyncSubcode?: string(name='async_subcode'),
}

/**
 * Description: 信物链异步操作查询
智能合约操作由于比较耗时，因此内部实现通过异步实现，调用完exectuted返回是false的API后，需要调用此api来轮询原先操作是否完成。
 * Summary: 信物链异步操作查询
 */
async function queryThingsdidAsyncprocess(request: QueryThingsdidAsyncprocessRequest): QueryThingsdidAsyncprocessResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryThingsdidAsyncprocessEx(request, headers, runtime);
}

/**
 * Description: 信物链异步操作查询
智能合约操作由于比较耗时，因此内部实现通过异步实现，调用完exectuted返回是false的API后，需要调用此api来轮询原先操作是否完成。
 * Summary: 信物链异步操作查询
 */
async function queryThingsdidAsyncprocessEx(request: QueryThingsdidAsyncprocessRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryThingsdidAsyncprocessResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.asyncprocess.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateThingsdidStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 交易唯一ID
  nonce: string(name='nonce'),
  // 状态取如下状态，注册设备身份，默认处于STATUS_REGISTERED，
  // 要更新为STATUS_COMMAND_STOP的设备必须处于STATUS_COMMAND_START，
  // 更新为STATUS_COMMAND_UNREGISTER后，无法更新为其他状态。
  // STATUS_COMMAND_UNREGISTER(注销),
  // STATUS_COMMAND_START(启用),
  // STATUS_COMMAND_STOP(),
  // STATUS_REGISTERED(3),
  status: string(name='status'),
  // 需要更新的实体did
  thingDid: string(name='thing_did'),
}

model UpdateThingsdidStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 代表本操作是否是异步调用 true: 执行完全，非异步操作...
  executed?: boolean(name='executed'),
  // 代表唯一交易ID，等于输入参数同名字段
  nonce?: string(name='nonce'),
  // 注册成功返回的实体身份DID
  thingDid?: string(name='thing_did'),
}

/**
 * Description: 信物链身份状态更新，此API目前仅支持设备状态更新
 * Summary: 信物链身份状态更新
 */
async function updateThingsdidStatus(request: UpdateThingsdidStatusRequest): UpdateThingsdidStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateThingsdidStatusEx(request, headers, runtime);
}

/**
 * Description: 信物链身份状态更新，此API目前仅支持设备状态更新
 * Summary: 信物链身份状态更新
 */
async function updateThingsdidStatusEx(request: UpdateThingsdidStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateThingsdidStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.status.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateThingsdidDevicespaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参考结构体定义
  updateDeviceSpaceReq: UpdateDeviceSpaceReq(name='update_device_space_req'),
  // 交易唯一ID
  nonce: string(name='nonce'),
}

model UpdateThingsdidDevicespaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 代表本操作是否是异步调用 true: 执行完全，非异步操作
  executed?: boolean(name='executed'),
  // 代表唯一交易ID，等于输入参数同名字段
  nonce?: string(name='nonce'),
  // 注册成功返回的实体身份DID
  thingDid?: string(name='thing_did'),
}

/**
 * Description: 信物链设备空间关联更新，完成设备和空间关联绑定
 * Summary: 信物链设备空间关联更新
 */
async function updateThingsdidDevicespace(request: UpdateThingsdidDevicespaceRequest): UpdateThingsdidDevicespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateThingsdidDevicespaceEx(request, headers, runtime);
}

/**
 * Description: 信物链设备空间关联更新，完成设备和空间关联绑定
 * Summary: 信物链设备空间关联更新
 */
async function updateThingsdidDevicespaceEx(request: UpdateThingsdidDevicespaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateThingsdidDevicespaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.devicespace.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryThingsdidDidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询请求结构体，参考结构体定义
  baseQueryReq: DidBaseQueryReq(name='base_query_req'),
  // 唯一交易ID
  nonce: string(name='nonce'),
}

model QueryThingsdidDidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询请求返回结构体的数组列表，每一个元素对应一个did
  didBaseQueryResp?: [ DidBaseQueryResp ](name='did_base_query_resp'),
  // 交易唯一ID
  nonce?: string(name='nonce'),
}

/**
 * Description: 信物链实体did查询，根据dataFilter过滤输出
 * Summary: 信物链实体did查询
 */
async function queryThingsdidDid(request: QueryThingsdidDidRequest): QueryThingsdidDidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryThingsdidDidEx(request, headers, runtime);
}

/**
 * Description: 信物链实体did查询，根据dataFilter过滤输出
 * Summary: 信物链实体did查询
 */
async function queryThingsdidDidEx(request: QueryThingsdidDidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryThingsdidDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.did.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateThingsdidDidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参考更新请求结构体
  didUpdateReq: ThingsDidUpdateReq(name='did_update_req'),
  // 交易唯一ID
  nonce: string(name='nonce'),
}

model UpdateThingsdidDidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 更新的实体DID，等于输入
  thingDid?: string(name='thing_did'),
  // 异步执行标识，true代表已经完成执行，false代表异步返回，需要轮询nonce代表的交易
  executed?: boolean(name='executed'),
  // 交易唯一ID
  nonce?: string(name='nonce'),
}

/**
 * Description: 信物链实体身份更新，字段空则不更新。
 * Summary: 信物链实体身份更新
 */
async function updateThingsdidDid(request: UpdateThingsdidDidRequest): UpdateThingsdidDidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateThingsdidDidEx(request, headers, runtime);
}

/**
 * Description: 信物链实体身份更新，字段空则不更新。
 * Summary: 信物链实体身份更新
 */
async function updateThingsdidDidEx(request: UpdateThingsdidDidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateThingsdidDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.did.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartTenantBindinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参考结构体
  bindInfoReq: TenantBindInfoReq(name='bind_info_req'),
  // 交易唯一ID
  nonce: string(name='nonce'),
}

model StartTenantBindinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实体did
  did?: string(name='did'),
  // 非openapi访问模式https鉴权key_id,  暂保留
  keyId?: string(name='key_id'),
  // 非openapi访问模式https鉴权key_secret,  暂保留
  keySecret?: string(name='key_secret'),
  // 交易唯一ID
  nonce?: string(name='nonce'),
}

/**
 * Description: 信物链租户信息关联
 * Summary: 信物链租户信息关联
 */
async function startTenantBindinfo(request: StartTenantBindinfoRequest): StartTenantBindinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startTenantBindinfoEx(request, headers, runtime);
}

/**
 * Description: 信物链租户信息关联
 * Summary: 信物链租户信息关联
 */
async function startTenantBindinfoEx(request: StartTenantBindinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartTenantBindinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tenant.bindinfo.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTenantProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 交易唯一ID
  nonce: string(name='nonce'),
  // 参考结构体
  projectCreateReq: TenantProjectCreateReq(name='project_create_req'),
}

model CreateTenantProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回租户唯一的项目id，可以用以管理不同业务。
  projectUid?: string(name='project_uid'),
  // 交易唯一ID
  nonce?: string(name='nonce'),
}

/**
 * Description: 信物链租户项目创建，项目可以用来管理同一租户不同业务的存证
 * Summary: 信物链租户项目创建
 */
async function createTenantProject(request: CreateTenantProjectRequest): CreateTenantProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTenantProjectEx(request, headers, runtime);
}

/**
 * Description: 信物链租户项目创建，项目可以用来管理同一租户不同业务的存证
 * Summary: 信物链租户项目创建
 */
async function createTenantProjectEx(request: CreateTenantProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTenantProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tenant.project.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateThingsdidTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 交易唯一ID
  nonce: string(name='nonce'),
  // 实体更新访问权限参与方的请求结构体
  updateTenantReq: DidUpdateTenantReq(name='update_tenant_req'),
}

model UpdateThingsdidTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易唯一ID，等于输入
  nonce?: string(name='nonce'),
  // 代表本操作是否是异步调用 
  // true: 执行完全，非异步操作.
  executed?: boolean(name='executed'),
}

/**
 * Description: 信物链实体访问权限更新
所有者/使用者/观察者权限更新
 * Summary: 信物链实体访问权限更新
 */
async function updateThingsdidTenant(request: UpdateThingsdidTenantRequest): UpdateThingsdidTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateThingsdidTenantEx(request, headers, runtime);
}

/**
 * Description: 信物链实体访问权限更新
所有者/使用者/观察者权限更新
 * Summary: 信物链实体访问权限更新
 */
async function updateThingsdidTenantEx(request: UpdateThingsdidTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateThingsdidTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.thingsdid.tenant.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model LoadTsmCertificatetsmRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // certificate
  certificate?: string(name='certificate'),
  // BOT
  deviceCode: string(name='device_code'),
  // H0
  deviceModel: string(name='device_model'),
  // SE
  deviceModule: string(name='device_module'),
}

model LoadTsmCertificatetsmResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  LoadCertificateTSMCmdResponse implements Serializable
  cmdList?: [ TsmCommonCmd ](name='cmd_list'),
}

/**
 * Description: LoadCertificateTSMCmd，仅限内部使用api
 * Summary: TSM迁移内部使用 
 */
async function loadTsmCertificatetsm(request: LoadTsmCertificatetsmRequest): LoadTsmCertificatetsmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return loadTsmCertificatetsmEx(request, headers, runtime);
}

/**
 * Description: LoadCertificateTSMCmd，仅限内部使用api
 * Summary: TSM迁移内部使用 
 */
async function loadTsmCertificatetsmEx(request: LoadTsmCertificatetsmRequest, headers: map[string]string, runtime: Util.RuntimeOptions): LoadTsmCertificatetsmResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tsm.certificatetsm.load', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model LoadTsmResourcefileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // BOT
  deviceCode: string(name='device_code'),
  // H0
  deviceModel: string(name='device_model'),
  // SE
  deviceModule: string(name='device_module'),
  // version
  fileVersion?: string(name='file_version'),
}

model LoadTsmResourcefileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // appId
  appId?: string(name='app_id'),
  // cmd_list
  cmdList?: [ TsmCommonCmd ](name='cmd_list'),
}

/**
 * Description: TSM迁移内部使用
 * Summary: loadResourceFile
 */
async function loadTsmResourcefile(request: LoadTsmResourcefileRequest): LoadTsmResourcefileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return loadTsmResourcefileEx(request, headers, runtime);
}

/**
 * Description: TSM迁移内部使用
 * Summary: loadResourceFile
 */
async function loadTsmResourcefileEx(request: LoadTsmResourcefileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): LoadTsmResourcefileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tsm.resourcefile.load', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartTlsnotaryTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 唯一的业务tlsnotary任务id
  taskId: string(name='task_id'),
  // 加固文件的oss链接
  ossLink: string(name='oss_link'),
}

model StartTlsnotaryTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 唯一的业务tlsnotary任务id
  taskId?: string(name='task_id'),
  // 业务错误码
  errorCode?: long(name='error_code'),
  // 错误信息
  errorMsg?: string(name='error_msg'),
}

/**
 * Description: 触发tlsnotary文件认证任务
 * Summary: 触发tlsnotary文件认证任务
 */
async function startTlsnotaryTask(request: StartTlsnotaryTaskRequest): StartTlsnotaryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startTlsnotaryTaskEx(request, headers, runtime);
}

/**
 * Description: 触发tlsnotary文件认证任务
 * Summary: 触发tlsnotary文件认证任务
 */
async function startTlsnotaryTaskEx(request: StartTlsnotaryTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartTlsnotaryTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tlsnotary.task.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTlsnotaryTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 唯一的业务 tlsnotary 任务 id
  taskId: string(name='task_id'),
}

model QueryTlsnotaryTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 唯一的业务 tlsnotary 任务 id
  taskId?: string(name='task_id'),
  // tlsnotary任务执行状态
  state?: long(name='state'),
  // 上传文件oss链接
  uploadOssLinks?: TlsnotaryUploadOssLinks(name='upload_oss_links'),
  // 认证签名
  notarySignature?: string(name='notary_signature'),
  // 业务错误码
  errorCode?: long(name='error_code'),
  // 业务错误信息
  errorMsg?: string(name='error_msg'),
}

/**
 * Description: 查询tlsnotary文件认证任务结果
 * Summary: 查询tlsnotary文件认证任务结果
 */
async function queryTlsnotaryTask(request: QueryTlsnotaryTaskRequest): QueryTlsnotaryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTlsnotaryTaskEx(request, headers, runtime);
}

/**
 * Description: 查询tlsnotary文件认证任务结果
 * Summary: 查询tlsnotary文件认证任务结果
 */
async function queryTlsnotaryTaskEx(request: QueryTlsnotaryTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTlsnotaryTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bot.tlsnotary.task.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 上传文件作用的openapi method
  apiCode: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ XNameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntcloudGatewayxFileUploadEx(request, headers, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

