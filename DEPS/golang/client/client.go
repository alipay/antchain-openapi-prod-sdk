// This file is auto-generated, don't edit it. Thanks.
package client

import (
	rpcutil "github.com/alibabacloud-go/tea-rpc-utils/service"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
	antchainutil "github.com/antchain-openapi-sdk-go/antchain-util/service"
)

/**
 * Model for initing client
 */
type Config struct {
	// accesskey id
	AccessKeyId *string `json:"accessKeyId,omitempty" xml:"accessKeyId,omitempty"`
	// accesskey secret
	AccessKeySecret *string `json:"accessKeySecret,omitempty" xml:"accessKeySecret,omitempty"`
	// security token
	SecurityToken *string `json:"securityToken,omitempty" xml:"securityToken,omitempty"`
	// http protocol
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// read timeout
	ReadTimeout *int `json:"readTimeout,omitempty" xml:"readTimeout,omitempty"`
	// connect timeout
	ConnectTimeout *int `json:"connectTimeout,omitempty" xml:"connectTimeout,omitempty"`
	// http proxy
	HttpProxy *string `json:"httpProxy,omitempty" xml:"httpProxy,omitempty"`
	// https proxy
	HttpsProxy *string `json:"httpsProxy,omitempty" xml:"httpsProxy,omitempty"`
	// endpoint
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	// proxy white list
	NoProxy *string `json:"noProxy,omitempty" xml:"noProxy,omitempty"`
	// max idle conns
	MaxIdleConns *int `json:"maxIdleConns,omitempty" xml:"maxIdleConns,omitempty"`
	// user agent
	UserAgent *string `json:"userAgent,omitempty" xml:"userAgent,omitempty"`
	// socks5 proxy
	Socks5Proxy *string `json:"socks5Proxy,omitempty" xml:"socks5Proxy,omitempty"`
	// socks5 network
	Socks5NetWork *string `json:"socks5NetWork,omitempty" xml:"socks5NetWork,omitempty"`
	// 长链接最大空闲时长
	MaxIdleTimeMillis *int64 `json:"maxIdleTimeMillis,omitempty" xml:"maxIdleTimeMillis,omitempty"`
	// 长链接最大连接时长
	KeepAliveDurationMillis *int `json:"keepAliveDurationMillis,omitempty" xml:"keepAliveDurationMillis,omitempty"`
	// 最大连接数（长链接最大总数）
	MaxRequests *int `json:"maxRequests,omitempty" xml:"maxRequests,omitempty"`
	// 每个目标主机的最大连接数（分主机域名的长链接最大总数
	MaxRequestsPerHost *int `json:"maxRequestsPerHost,omitempty" xml:"maxRequestsPerHost,omitempty"`
}

func (s Config) String() string {
	return tea.Prettify(s)
}

func (s Config) GoString() string {
	return s.String()
}

func (s *Config) SetAccessKeyId(v string) *Config {
	s.AccessKeyId = &v
	return s
}

func (s *Config) SetAccessKeySecret(v string) *Config {
	s.AccessKeySecret = &v
	return s
}

func (s *Config) SetSecurityToken(v string) *Config {
	s.SecurityToken = &v
	return s
}

func (s *Config) SetProtocol(v string) *Config {
	s.Protocol = &v
	return s
}

func (s *Config) SetReadTimeout(v int) *Config {
	s.ReadTimeout = &v
	return s
}

func (s *Config) SetConnectTimeout(v int) *Config {
	s.ConnectTimeout = &v
	return s
}

func (s *Config) SetHttpProxy(v string) *Config {
	s.HttpProxy = &v
	return s
}

func (s *Config) SetHttpsProxy(v string) *Config {
	s.HttpsProxy = &v
	return s
}

func (s *Config) SetEndpoint(v string) *Config {
	s.Endpoint = &v
	return s
}

func (s *Config) SetNoProxy(v string) *Config {
	s.NoProxy = &v
	return s
}

func (s *Config) SetMaxIdleConns(v int) *Config {
	s.MaxIdleConns = &v
	return s
}

func (s *Config) SetUserAgent(v string) *Config {
	s.UserAgent = &v
	return s
}

func (s *Config) SetSocks5Proxy(v string) *Config {
	s.Socks5Proxy = &v
	return s
}

func (s *Config) SetSocks5NetWork(v string) *Config {
	s.Socks5NetWork = &v
	return s
}

func (s *Config) SetMaxIdleTimeMillis(v int64) *Config {
	s.MaxIdleTimeMillis = &v
	return s
}

func (s *Config) SetKeepAliveDurationMillis(v int) *Config {
	s.KeepAliveDurationMillis = &v
	return s
}

func (s *Config) SetMaxRequests(v int) *Config {
	s.MaxRequests = &v
	return s
}

func (s *Config) SetMaxRequestsPerHost(v int) *Config {
	s.MaxRequestsPerHost = &v
	return s
}

// 键值对
type Pair struct {
	// 键
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 值
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s Pair) String() string {
	return tea.Prettify(s)
}

func (s Pair) GoString() string {
	return s.String()
}

func (s *Pair) SetKey(v string) *Pair {
	s.Key = &v
	return s
}

func (s *Pair) SetValue(v string) *Pair {
	s.Value = &v
	return s
}

// 运维策略
type OpsActionPolicy struct {
	// 运维动作类型
	OpsActionType *string `json:"ops_action_type,omitempty" xml:"ops_action_type,omitempty"`
	// 超时时间
	Timeout *int64 `json:"timeout,omitempty" xml:"timeout,omitempty"`
	// 检查间隔
	CheckInterval *int64 `json:"check_interval,omitempty" xml:"check_interval,omitempty"`
	// 重试次数
	RetryTimes *int64 `json:"retry_times,omitempty" xml:"retry_times,omitempty"`
}

func (s OpsActionPolicy) String() string {
	return tea.Prettify(s)
}

func (s OpsActionPolicy) GoString() string {
	return s.String()
}

func (s *OpsActionPolicy) SetOpsActionType(v string) *OpsActionPolicy {
	s.OpsActionType = &v
	return s
}

func (s *OpsActionPolicy) SetTimeout(v int64) *OpsActionPolicy {
	s.Timeout = &v
	return s
}

func (s *OpsActionPolicy) SetCheckInterval(v int64) *OpsActionPolicy {
	s.CheckInterval = &v
	return s
}

func (s *OpsActionPolicy) SetRetryTimes(v int64) *OpsActionPolicy {
	s.RetryTimes = &v
	return s
}

// 灰度流量配置
type GrayTrafficConfig struct {
	// 灰度流量类型
	GrayTrafficType *string `json:"gray_traffic_type,omitempty" xml:"gray_traffic_type,omitempty"`
	// 主机名
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty"`
	// 匹配规则
	MatchPatterns *string `json:"match_patterns,omitempty" xml:"match_patterns,omitempty"`
	// 端口号
	Port *int64 `json:"port,omitempty" xml:"port,omitempty"`
	// 比例
	Proportion *string `json:"proportion,omitempty" xml:"proportion,omitempty"`
	// 目标 uri
	TargetUri *string `json:"target_uri,omitempty" xml:"target_uri,omitempty"`
}

func (s GrayTrafficConfig) String() string {
	return tea.Prettify(s)
}

func (s GrayTrafficConfig) GoString() string {
	return s.String()
}

func (s *GrayTrafficConfig) SetGrayTrafficType(v string) *GrayTrafficConfig {
	s.GrayTrafficType = &v
	return s
}

func (s *GrayTrafficConfig) SetHostname(v string) *GrayTrafficConfig {
	s.Hostname = &v
	return s
}

func (s *GrayTrafficConfig) SetMatchPatterns(v string) *GrayTrafficConfig {
	s.MatchPatterns = &v
	return s
}

func (s *GrayTrafficConfig) SetPort(v int64) *GrayTrafficConfig {
	s.Port = &v
	return s
}

func (s *GrayTrafficConfig) SetProportion(v string) *GrayTrafficConfig {
	s.Proportion = &v
	return s
}

func (s *GrayTrafficConfig) SetTargetUri(v string) *GrayTrafficConfig {
	s.TargetUri = &v
	return s
}

// 一个部署起来提供服务的应用实例信息
type AppService struct {
	// 应用名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 关联的部署单元
	CellIds []*string `json:"cell_ids,omitempty" xml:"cell_ids,omitempty" type:"Repeated"`
	// 服务实例描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 用户自定义的扩展属性
	ExtraInfos *string `json:"extra_infos,omitempty" xml:"extra_infos,omitempty"`
	// 最近一次执行的运维操作单号
	LatestOperationId *string `json:"latest_operation_id,omitempty" xml:"latest_operation_id,omitempty"`
	// 最近一次执行的运维操作类型。取值列表：
	//                     DEPLOYMENT：部署操作
	//
	LatestOperationType *string `json:"latest_operation_type,omitempty" xml:"latest_operation_type,omitempty"`
	// 最近成功部署的版本号
	LatestVersionNo *string `json:"latest_version_no,omitempty" xml:"latest_version_no,omitempty"`
	// 服务实例名称
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty"`
	// 环境名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s AppService) String() string {
	return tea.Prettify(s)
}

func (s AppService) GoString() string {
	return s.String()
}

func (s *AppService) SetApplicationName(v string) *AppService {
	s.ApplicationName = &v
	return s
}

func (s *AppService) SetCellIds(v []*string) *AppService {
	s.CellIds = v
	return s
}

func (s *AppService) SetDescription(v string) *AppService {
	s.Description = &v
	return s
}

func (s *AppService) SetExtraInfos(v string) *AppService {
	s.ExtraInfos = &v
	return s
}

func (s *AppService) SetLatestOperationId(v string) *AppService {
	s.LatestOperationId = &v
	return s
}

func (s *AppService) SetLatestOperationType(v string) *AppService {
	s.LatestOperationType = &v
	return s
}

func (s *AppService) SetLatestVersionNo(v string) *AppService {
	s.LatestVersionNo = &v
	return s
}

func (s *AppService) SetServiceName(v string) *AppService {
	s.ServiceName = &v
	return s
}

func (s *AppService) SetWorkspace(v string) *AppService {
	s.Workspace = &v
	return s
}

// CloudPlatform
type CloudPlatform struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// host
	Host *string `json:"host,omitempty" xml:"host,omitempty"`
	// loginName
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty"`
	// password
	Password *string `json:"password,omitempty" xml:"password,omitempty"`
}

func (s CloudPlatform) String() string {
	return tea.Prettify(s)
}

func (s CloudPlatform) GoString() string {
	return s.String()
}

func (s *CloudPlatform) SetName(v string) *CloudPlatform {
	s.Name = &v
	return s
}

func (s *CloudPlatform) SetHost(v string) *CloudPlatform {
	s.Host = &v
	return s
}

func (s *CloudPlatform) SetLoginName(v string) *CloudPlatform {
	s.LoginName = &v
	return s
}

func (s *CloudPlatform) SetPassword(v string) *CloudPlatform {
	s.Password = &v
	return s
}

// 发布概览信息
type ArrangementInfo struct {
	// 类型
	ArrangementType *string `json:"arrangement_type,omitempty" xml:"arrangement_type,omitempty"`
	// 环境变量
	EnvConfig []*Pair `json:"env_config,omitempty" xml:"env_config,omitempty" type:"Repeated"`
	// 发布概览名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 发布进程ID
	ProcessDefinitionId *string `json:"process_definition_id,omitempty" xml:"process_definition_id,omitempty"`
	// 环境 ID
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// 策略
	OpsActionPolicies []*OpsActionPolicy `json:"ops_action_policies,omitempty" xml:"ops_action_policies,omitempty" type:"Repeated"`
}

func (s ArrangementInfo) String() string {
	return tea.Prettify(s)
}

func (s ArrangementInfo) GoString() string {
	return s.String()
}

func (s *ArrangementInfo) SetArrangementType(v string) *ArrangementInfo {
	s.ArrangementType = &v
	return s
}

func (s *ArrangementInfo) SetEnvConfig(v []*Pair) *ArrangementInfo {
	s.EnvConfig = v
	return s
}

func (s *ArrangementInfo) SetName(v string) *ArrangementInfo {
	s.Name = &v
	return s
}

func (s *ArrangementInfo) SetProcessDefinitionId(v string) *ArrangementInfo {
	s.ProcessDefinitionId = &v
	return s
}

func (s *ArrangementInfo) SetWorkspaceId(v string) *ArrangementInfo {
	s.WorkspaceId = &v
	return s
}

func (s *ArrangementInfo) SetOpsActionPolicies(v []*OpsActionPolicy) *ArrangementInfo {
	s.OpsActionPolicies = v
	return s
}

// 任务执行进度
type TaskExecutionProgress struct {
	// 任务名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 显示名
	ShowName *string `json:"show_name,omitempty" xml:"show_name,omitempty"`
	// 业务类型
	BusinessEntityCode *string `json:"business_entity_code,omitempty" xml:"business_entity_code,omitempty"`
	// 错误代码
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// 状态
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 执行次数
	ExecutionCount *string `json:"execution_count,omitempty" xml:"execution_count,omitempty"`
	// 详细信息
	DetailMsg *string `json:"detail_msg,omitempty" xml:"detail_msg,omitempty"`
	// 开始时间
	StartedTime *string `json:"started_time,omitempty" xml:"started_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 结束时间
	FinishedTime *string `json:"finished_time,omitempty" xml:"finished_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 是否可独立执行
	StandaloneExecutable *bool `json:"standalone_executable,omitempty" xml:"standalone_executable,omitempty"`
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s TaskExecutionProgress) String() string {
	return tea.Prettify(s)
}

func (s TaskExecutionProgress) GoString() string {
	return s.String()
}

func (s *TaskExecutionProgress) SetName(v string) *TaskExecutionProgress {
	s.Name = &v
	return s
}

func (s *TaskExecutionProgress) SetShowName(v string) *TaskExecutionProgress {
	s.ShowName = &v
	return s
}

func (s *TaskExecutionProgress) SetBusinessEntityCode(v string) *TaskExecutionProgress {
	s.BusinessEntityCode = &v
	return s
}

func (s *TaskExecutionProgress) SetErrorCode(v string) *TaskExecutionProgress {
	s.ErrorCode = &v
	return s
}

func (s *TaskExecutionProgress) SetState(v string) *TaskExecutionProgress {
	s.State = &v
	return s
}

func (s *TaskExecutionProgress) SetExecutionCount(v string) *TaskExecutionProgress {
	s.ExecutionCount = &v
	return s
}

func (s *TaskExecutionProgress) SetDetailMsg(v string) *TaskExecutionProgress {
	s.DetailMsg = &v
	return s
}

func (s *TaskExecutionProgress) SetStartedTime(v string) *TaskExecutionProgress {
	s.StartedTime = &v
	return s
}

func (s *TaskExecutionProgress) SetFinishedTime(v string) *TaskExecutionProgress {
	s.FinishedTime = &v
	return s
}

func (s *TaskExecutionProgress) SetStandaloneExecutable(v bool) *TaskExecutionProgress {
	s.StandaloneExecutable = &v
	return s
}

func (s *TaskExecutionProgress) SetId(v string) *TaskExecutionProgress {
	s.Id = &v
	return s
}

// ResourceGroupExecutionProgress
type ResourceGroupExecutionProgress struct {
	// finished_time
	FinishedTime *bool `json:"finished_time,omitempty" xml:"finished_time,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// paas_id
	PaasId *string `json:"paas_id,omitempty" xml:"paas_id,omitempty"`
	// resource_count
	ResourceCount *int64 `json:"resource_count,omitempty" xml:"resource_count,omitempty"`
	// resource_states
	ResourceStates []*Pair `json:"resource_states,omitempty" xml:"resource_states,omitempty" type:"Repeated"`
	// standalone_executable
	StandaloneExecutable *bool `json:"standalone_executable,omitempty" xml:"standalone_executable,omitempty"`
	// started_time
	StartedTime *string `json:"started_time,omitempty" xml:"started_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// state
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// refer_key
	ReferKey *string `json:"refer_key,omitempty" xml:"refer_key,omitempty"`
}

func (s ResourceGroupExecutionProgress) String() string {
	return tea.Prettify(s)
}

func (s ResourceGroupExecutionProgress) GoString() string {
	return s.String()
}

func (s *ResourceGroupExecutionProgress) SetFinishedTime(v bool) *ResourceGroupExecutionProgress {
	s.FinishedTime = &v
	return s
}

func (s *ResourceGroupExecutionProgress) SetId(v string) *ResourceGroupExecutionProgress {
	s.Id = &v
	return s
}

func (s *ResourceGroupExecutionProgress) SetPaasId(v string) *ResourceGroupExecutionProgress {
	s.PaasId = &v
	return s
}

func (s *ResourceGroupExecutionProgress) SetResourceCount(v int64) *ResourceGroupExecutionProgress {
	s.ResourceCount = &v
	return s
}

func (s *ResourceGroupExecutionProgress) SetResourceStates(v []*Pair) *ResourceGroupExecutionProgress {
	s.ResourceStates = v
	return s
}

func (s *ResourceGroupExecutionProgress) SetStandaloneExecutable(v bool) *ResourceGroupExecutionProgress {
	s.StandaloneExecutable = &v
	return s
}

func (s *ResourceGroupExecutionProgress) SetStartedTime(v string) *ResourceGroupExecutionProgress {
	s.StartedTime = &v
	return s
}

func (s *ResourceGroupExecutionProgress) SetState(v string) *ResourceGroupExecutionProgress {
	s.State = &v
	return s
}

func (s *ResourceGroupExecutionProgress) SetReferKey(v string) *ResourceGroupExecutionProgress {
	s.ReferKey = &v
	return s
}

// 一个计算容器上正在执行的任务。
type OpsComputerTask struct {
	// 任务描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 执行详情。如果任务成功，为执行日志；如果任务失败，为错误信息
	ExecuteDetails *string `json:"execute_details,omitempty" xml:"execute_details,omitempty"`
	// 任务结束时间
	FinishTime *string `json:"finish_time,omitempty" xml:"finish_time,omitempty"`
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 任务开始时间
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty"`
	// 任务状态。取值列表：
	//                     EXECUTING：执行中；
	//                     SUCCESS：执行成功；
	//                     FAILED：执行失败
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s OpsComputerTask) String() string {
	return tea.Prettify(s)
}

func (s OpsComputerTask) GoString() string {
	return s.String()
}

func (s *OpsComputerTask) SetDescription(v string) *OpsComputerTask {
	s.Description = &v
	return s
}

func (s *OpsComputerTask) SetExecuteDetails(v string) *OpsComputerTask {
	s.ExecuteDetails = &v
	return s
}

func (s *OpsComputerTask) SetFinishTime(v string) *OpsComputerTask {
	s.FinishTime = &v
	return s
}

func (s *OpsComputerTask) SetName(v string) *OpsComputerTask {
	s.Name = &v
	return s
}

func (s *OpsComputerTask) SetStartTime(v string) *OpsComputerTask {
	s.StartTime = &v
	return s
}

func (s *OpsComputerTask) SetStatus(v string) *OpsComputerTask {
	s.Status = &v
	return s
}

// 运维操作中的应用（服务）
type OpsApplication struct {
	// 应用（服务）名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 应用（服务）当前运维状态。取值列表：
	//                     INITING：初始化中；
	//                     INIT_FAILED：初始化失败；
	//                     INITED：初始化完成；
	//                     EXECUTING：执行中；
	//                     SUCCESS：执行成功；
	//                     FAILED：执行失败；
	//                     ROLLBACKED：已回滚；
	//                     CANCELED：已取消
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// APPLICATION和APP_SERVICE。设置为APPLICATION表示该实例描述对象为应用; APP_SERVICE表示该实例描述对象为应用服务。
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s OpsApplication) String() string {
	return tea.Prettify(s)
}

func (s OpsApplication) GoString() string {
	return s.String()
}

func (s *OpsApplication) SetName(v string) *OpsApplication {
	s.Name = &v
	return s
}

func (s *OpsApplication) SetStatus(v string) *OpsApplication {
	s.Status = &v
	return s
}

func (s *OpsApplication) SetType(v string) *OpsApplication {
	s.Type = &v
	return s
}

// 部署单元视图
type CellView struct {
	// 扩展部署机房id
	DeploymentZoneId *string `json:"deployment_zone_id,omitempty" xml:"deployment_zone_id,omitempty"`
	// 部署单元描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// table id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 标识
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// master zone id
	MasterZoneId *string `json:"master_zone_id,omitempty" xml:"master_zone_id,omitempty"`
	// 部署单元状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 工作空间 id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// 工作空间组 id
	WorkspaceGroupId *string `json:"workspace_group_id,omitempty" xml:"workspace_group_id,omitempty"`
}

func (s CellView) String() string {
	return tea.Prettify(s)
}

func (s CellView) GoString() string {
	return s.String()
}

func (s *CellView) SetDeploymentZoneId(v string) *CellView {
	s.DeploymentZoneId = &v
	return s
}

func (s *CellView) SetDescription(v string) *CellView {
	s.Description = &v
	return s
}

func (s *CellView) SetDisplayName(v string) *CellView {
	s.DisplayName = &v
	return s
}

func (s *CellView) SetId(v string) *CellView {
	s.Id = &v
	return s
}

func (s *CellView) SetIdentity(v string) *CellView {
	s.Identity = &v
	return s
}

func (s *CellView) SetMasterZoneId(v string) *CellView {
	s.MasterZoneId = &v
	return s
}

func (s *CellView) SetStatus(v string) *CellView {
	s.Status = &v
	return s
}

func (s *CellView) SetWorkspaceId(v string) *CellView {
	s.WorkspaceId = &v
	return s
}

func (s *CellView) SetWorkspaceGroupId(v string) *CellView {
	s.WorkspaceGroupId = &v
	return s
}

// SLB 执行进度
type SlbExecutionProgress struct {
	// 进度 ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 进度名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 状态
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 挂载权重
	MountWeights []*Pair `json:"mount_weights,omitempty" xml:"mount_weights,omitempty" type:"Repeated"`
}

func (s SlbExecutionProgress) String() string {
	return tea.Prettify(s)
}

func (s SlbExecutionProgress) GoString() string {
	return s.String()
}

func (s *SlbExecutionProgress) SetId(v string) *SlbExecutionProgress {
	s.Id = &v
	return s
}

func (s *SlbExecutionProgress) SetName(v string) *SlbExecutionProgress {
	s.Name = &v
	return s
}

func (s *SlbExecutionProgress) SetState(v string) *SlbExecutionProgress {
	s.State = &v
	return s
}

func (s *SlbExecutionProgress) SetMountWeights(v []*Pair) *SlbExecutionProgress {
	s.MountWeights = v
	return s
}

// Region
type Region struct {
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// iaasProviderId
	IaasProviderId *string `json:"iaas_provider_id,omitempty" xml:"iaas_provider_id,omitempty"`
	// region名称
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// region显示名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// networkType
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// state
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// utcCreate
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// utcModified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// zoneDtos
	ZoneDtos *string `json:"zone_dtos,omitempty" xml:"zone_dtos,omitempty"`
	// buildpackId
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// fileStatus
	FileStatus *string `json:"file_status,omitempty" xml:"file_status,omitempty"`
	// fileLocation
	FileLocation *string `json:"file_location,omitempty" xml:"file_location,omitempty"`
	// objectName
	ObjectName *string `json:"object_name,omitempty" xml:"object_name,omitempty"`
	// fileSize
	FileSize *int64 `json:"file_size,omitempty" xml:"file_size,omitempty"`
	// readableFileSize
	ReadableFileSize *string `json:"readable_file_size,omitempty" xml:"readable_file_size,omitempty"`
	// fileChecksum
	FileChecksum *string `json:"file_checksum,omitempty" xml:"file_checksum,omitempty"`
	// originalFileName
	OriginalFileName *string `json:"original_file_name,omitempty" xml:"original_file_name,omitempty"`
	// buildpackTenantId
	BuildpackTenantId *string `json:"buildpack_tenant_id,omitempty" xml:"buildpack_tenant_id,omitempty"`
	// fromRegionId
	FromRegionId *string `json:"from_region_id,omitempty" xml:"from_region_id,omitempty"`
	// creationTime
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// modificationTime
	ModificationTime *string `json:"modification_time,omitempty" xml:"modification_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
}

func (s Region) String() string {
	return tea.Prettify(s)
}

func (s Region) GoString() string {
	return s.String()
}

func (s *Region) SetDescription(v string) *Region {
	s.Description = &v
	return s
}

func (s *Region) SetIaasProviderId(v string) *Region {
	s.IaasProviderId = &v
	return s
}

func (s *Region) SetId(v string) *Region {
	s.Id = &v
	return s
}

func (s *Region) SetIdentity(v string) *Region {
	s.Identity = &v
	return s
}

func (s *Region) SetName(v string) *Region {
	s.Name = &v
	return s
}

func (s *Region) SetNetworkType(v string) *Region {
	s.NetworkType = &v
	return s
}

func (s *Region) SetState(v string) *Region {
	s.State = &v
	return s
}

func (s *Region) SetUtcCreate(v string) *Region {
	s.UtcCreate = &v
	return s
}

func (s *Region) SetUtcModified(v string) *Region {
	s.UtcModified = &v
	return s
}

func (s *Region) SetZoneDtos(v string) *Region {
	s.ZoneDtos = &v
	return s
}

func (s *Region) SetBuildpackId(v string) *Region {
	s.BuildpackId = &v
	return s
}

func (s *Region) SetFileStatus(v string) *Region {
	s.FileStatus = &v
	return s
}

func (s *Region) SetFileLocation(v string) *Region {
	s.FileLocation = &v
	return s
}

func (s *Region) SetObjectName(v string) *Region {
	s.ObjectName = &v
	return s
}

func (s *Region) SetFileSize(v int64) *Region {
	s.FileSize = &v
	return s
}

func (s *Region) SetReadableFileSize(v string) *Region {
	s.ReadableFileSize = &v
	return s
}

func (s *Region) SetFileChecksum(v string) *Region {
	s.FileChecksum = &v
	return s
}

func (s *Region) SetOriginalFileName(v string) *Region {
	s.OriginalFileName = &v
	return s
}

func (s *Region) SetBuildpackTenantId(v string) *Region {
	s.BuildpackTenantId = &v
	return s
}

func (s *Region) SetFromRegionId(v string) *Region {
	s.FromRegionId = &v
	return s
}

func (s *Region) SetCreationTime(v string) *Region {
	s.CreationTime = &v
	return s
}

func (s *Region) SetModificationTime(v string) *Region {
	s.ModificationTime = &v
	return s
}

// 发布应用信息
type ServiceInfo struct {
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 部署单元 ID 列表
	CellIds []*string `json:"cell_ids,omitempty" xml:"cell_ids,omitempty" type:"Repeated"`
	// 默认执行账号
	DefaultExecuteAccount *string `json:"default_execute_account,omitempty" xml:"default_execute_account,omitempty"`
	// 环境变量
	EnvConfig []*Pair `json:"env_config,omitempty" xml:"env_config,omitempty" type:"Repeated"`
	// 是否可以强制执行
	ForceExecutable *bool `json:"force_executable,omitempty" xml:"force_executable,omitempty"`
	// 灰度规则配置
	GrayTrafficConfigs []*GrayTrafficConfig `json:"gray_traffic_configs,omitempty" xml:"gray_traffic_configs,omitempty" type:"Repeated"`
	// 分组数
	GroupAmount *int64 `json:"group_amount,omitempty" xml:"group_amount,omitempty"`
	// 分组策略
	GroupStrategyType *string `json:"group_strategy_type,omitempty" xml:"group_strategy_type,omitempty"`
	// 从缓存安装
	InstallFromCache *bool `json:"install_from_cache,omitempty" xml:"install_from_cache,omitempty"`
	// 应用发布名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 是否需要 beta
	NeedBeta *bool `json:"need_beta,omitempty" xml:"need_beta,omitempty"`
	// 是否需要灰度
	NeedGrayTraffic *bool `json:"need_gray_traffic,omitempty" xml:"need_gray_traffic,omitempty"`
	// 后置任务列表
	PostArrangementInfo []*ArrangementInfo `json:"post_arrangement_info,omitempty" xml:"post_arrangement_info,omitempty" type:"Repeated"`
	// 前置任务列表
	PreArrangementInfo []*ArrangementInfo `json:"pre_arrangement_info,omitempty" xml:"pre_arrangement_info,omitempty" type:"Repeated"`
	// 发布概览
	ServiceArrangement *ArrangementInfo `json:"service_arrangement,omitempty" xml:"service_arrangement,omitempty"`
	// 发布应用 ID
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// 静态资源下载链接
	StaticResourceDownloadUrl *string `json:"static_resource_download_url,omitempty" xml:"static_resource_download_url,omitempty"`
	// 静态资源目标文件
	StaticResourceTargetFile *string `json:"static_resource_target_file,omitempty" xml:"static_resource_target_file,omitempty"`
	// 类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 版本
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
	// 环境 ID
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// update_buildpack_version
	UpdateBuildpackVersion *string `json:"update_buildpack_version,omitempty" xml:"update_buildpack_version,omitempty"`
	// update_buildpack_id
	UpdateBuildpackId *string `json:"update_buildpack_id,omitempty" xml:"update_buildpack_id,omitempty"`
	// custom_params
	CustomParams *string `json:"custom_params,omitempty" xml:"custom_params,omitempty"`
}

func (s ServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s ServiceInfo) GoString() string {
	return s.String()
}

func (s *ServiceInfo) SetAppName(v string) *ServiceInfo {
	s.AppName = &v
	return s
}

func (s *ServiceInfo) SetCellIds(v []*string) *ServiceInfo {
	s.CellIds = v
	return s
}

func (s *ServiceInfo) SetDefaultExecuteAccount(v string) *ServiceInfo {
	s.DefaultExecuteAccount = &v
	return s
}

func (s *ServiceInfo) SetEnvConfig(v []*Pair) *ServiceInfo {
	s.EnvConfig = v
	return s
}

func (s *ServiceInfo) SetForceExecutable(v bool) *ServiceInfo {
	s.ForceExecutable = &v
	return s
}

func (s *ServiceInfo) SetGrayTrafficConfigs(v []*GrayTrafficConfig) *ServiceInfo {
	s.GrayTrafficConfigs = v
	return s
}

func (s *ServiceInfo) SetGroupAmount(v int64) *ServiceInfo {
	s.GroupAmount = &v
	return s
}

func (s *ServiceInfo) SetGroupStrategyType(v string) *ServiceInfo {
	s.GroupStrategyType = &v
	return s
}

func (s *ServiceInfo) SetInstallFromCache(v bool) *ServiceInfo {
	s.InstallFromCache = &v
	return s
}

func (s *ServiceInfo) SetName(v string) *ServiceInfo {
	s.Name = &v
	return s
}

func (s *ServiceInfo) SetNeedBeta(v bool) *ServiceInfo {
	s.NeedBeta = &v
	return s
}

func (s *ServiceInfo) SetNeedGrayTraffic(v bool) *ServiceInfo {
	s.NeedGrayTraffic = &v
	return s
}

func (s *ServiceInfo) SetPostArrangementInfo(v []*ArrangementInfo) *ServiceInfo {
	s.PostArrangementInfo = v
	return s
}

func (s *ServiceInfo) SetPreArrangementInfo(v []*ArrangementInfo) *ServiceInfo {
	s.PreArrangementInfo = v
	return s
}

func (s *ServiceInfo) SetServiceArrangement(v *ArrangementInfo) *ServiceInfo {
	s.ServiceArrangement = v
	return s
}

func (s *ServiceInfo) SetServiceId(v string) *ServiceInfo {
	s.ServiceId = &v
	return s
}

func (s *ServiceInfo) SetStaticResourceDownloadUrl(v string) *ServiceInfo {
	s.StaticResourceDownloadUrl = &v
	return s
}

func (s *ServiceInfo) SetStaticResourceTargetFile(v string) *ServiceInfo {
	s.StaticResourceTargetFile = &v
	return s
}

func (s *ServiceInfo) SetType(v string) *ServiceInfo {
	s.Type = &v
	return s
}

func (s *ServiceInfo) SetVersion(v string) *ServiceInfo {
	s.Version = &v
	return s
}

func (s *ServiceInfo) SetWorkspaceId(v string) *ServiceInfo {
	s.WorkspaceId = &v
	return s
}

func (s *ServiceInfo) SetUpdateBuildpackVersion(v string) *ServiceInfo {
	s.UpdateBuildpackVersion = &v
	return s
}

func (s *ServiceInfo) SetUpdateBuildpackId(v string) *ServiceInfo {
	s.UpdateBuildpackId = &v
	return s
}

func (s *ServiceInfo) SetCustomParams(v string) *ServiceInfo {
	s.CustomParams = &v
	return s
}

// 代码提交
type CodeCommit struct {
	// 作者
	Author *string `json:"author,omitempty" xml:"author,omitempty"`
	// 分支
	Branch *string `json:"branch,omitempty" xml:"branch,omitempty"`
	// 代码版本
	CodeVersion *string `json:"code_version,omitempty" xml:"code_version,omitempty"`
	// 时间
	Date *string `json:"date,omitempty" xml:"date,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 消息
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty"`
	// 仓库名称
	RepoName *string `json:"repo_name,omitempty" xml:"repo_name,omitempty"`
	// 创建时间
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 修改时间
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
}

func (s CodeCommit) String() string {
	return tea.Prettify(s)
}

func (s CodeCommit) GoString() string {
	return s.String()
}

func (s *CodeCommit) SetAuthor(v string) *CodeCommit {
	s.Author = &v
	return s
}

func (s *CodeCommit) SetBranch(v string) *CodeCommit {
	s.Branch = &v
	return s
}

func (s *CodeCommit) SetCodeVersion(v string) *CodeCommit {
	s.CodeVersion = &v
	return s
}

func (s *CodeCommit) SetDate(v string) *CodeCommit {
	s.Date = &v
	return s
}

func (s *CodeCommit) SetId(v string) *CodeCommit {
	s.Id = &v
	return s
}

func (s *CodeCommit) SetMsg(v string) *CodeCommit {
	s.Msg = &v
	return s
}

func (s *CodeCommit) SetRepoName(v string) *CodeCommit {
	s.RepoName = &v
	return s
}

func (s *CodeCommit) SetUtcCreate(v string) *CodeCommit {
	s.UtcCreate = &v
	return s
}

func (s *CodeCommit) SetUtcModified(v string) *CodeCommit {
	s.UtcModified = &v
	return s
}

// Cloud
type Cloud struct {
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// platforms
	Platforms []*CloudPlatform `json:"platforms,omitempty" xml:"platforms,omitempty" type:"Repeated"`
}

func (s Cloud) String() string {
	return tea.Prettify(s)
}

func (s Cloud) GoString() string {
	return s.String()
}

func (s *Cloud) SetId(v int64) *Cloud {
	s.Id = &v
	return s
}

func (s *Cloud) SetIdentity(v string) *Cloud {
	s.Identity = &v
	return s
}

func (s *Cloud) SetName(v string) *Cloud {
	s.Name = &v
	return s
}

func (s *Cloud) SetPlatforms(v []*CloudPlatform) *Cloud {
	s.Platforms = v
	return s
}

// 一个正在进行运维操作的计算容器。
type OpsComputer struct {
	// 计算容器id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 计算容器内网ip
	InnerIp *string `json:"inner_ip,omitempty" xml:"inner_ip,omitempty"`
	// 计算容器名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 计算容器当前运维状态。取值列表：
	//                     INITED：初始化完成；
	//                     EXECUTING：执行中；
	//                     SUCCESS：执行成功；
	//                     FAILED：执行失败；
	//                     CANCELED：已取消；
	//                     IGNORED：已忽略
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 计算容器上执行的任务信息。任务信息列表中包含正在执行和执行完成的任务。
	Tasks []*OpsComputerTask `json:"tasks,omitempty" xml:"tasks,omitempty" type:"Repeated"`
}

func (s OpsComputer) String() string {
	return tea.Prettify(s)
}

func (s OpsComputer) GoString() string {
	return s.String()
}

func (s *OpsComputer) SetId(v string) *OpsComputer {
	s.Id = &v
	return s
}

func (s *OpsComputer) SetInnerIp(v string) *OpsComputer {
	s.InnerIp = &v
	return s
}

func (s *OpsComputer) SetName(v string) *OpsComputer {
	s.Name = &v
	return s
}

func (s *OpsComputer) SetStatus(v string) *OpsComputer {
	s.Status = &v
	return s
}

func (s *OpsComputer) SetTasks(v []*OpsComputerTask) *OpsComputer {
	s.Tasks = v
	return s
}

// 数据库资源信息
type DepsDatabase struct {
	// 服务实例列表
	AppServices []*AppService `json:"app_services,omitempty" xml:"app_services,omitempty" type:"Repeated"`
	// 连接地址
	ConnectionAddress *string `json:"connection_address,omitempty" xml:"connection_address,omitempty"`
	// CPU
	Cpu *int64 `json:"cpu,omitempty" xml:"cpu,omitempty"`
	// 数据库类型，取值 MYSQL, OCEANBASE
	Engine *string `json:"engine,omitempty" xml:"engine,omitempty"`
	// 数据库版本，取值 MYSQL5, MYSQL6, MYSQL7, OCEANBASE1_4, 分别对应Mysql5.5, 5.6, 5.7, Ocea
	EngineVersion *string `json:"engine_version,omitempty" xml:"engine_version,omitempty"`
	// iaaS在创建该资源时为其分配的唯一标示，创建中或创建失败时为空
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// 资源唯一标识
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 最大连接数
	MaxConnections *int64 `json:"max_connections,omitempty" xml:"max_connections,omitempty"`
	// 最大IOPS
	MaxIops *int64 `json:"max_iops,omitempty" xml:"max_iops,omitempty"`
	// 内存大小，单位：MB
	Memory *int64 `json:"memory,omitempty" xml:"memory,omitempty"`
	// 资源名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 网络类型，Classic或VPC
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// 网络连接类型，取值 Internet：外网，Intranet：内网
	NetType *string `json:"net_type,omitempty" xml:"net_type,omitempty"`
	// 连接端口
	Port *int64 `json:"port,omitempty" xml:"port,omitempty"`
	// 资源所属的地域id
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// 数据库实例规格
	SpecIaasId *string `json:"spec_iaas_id,omitempty" xml:"spec_iaas_id,omitempty"`
	//
	//
	//               资源状态，取值 CREATING：正在创建，CREATEFAILED：创建失败，RUNNING: 运行中，REBOOTING: 重启，REBOOT_FAILED: 重启失败，
	//               DELETING：正在删除，DELETED：删除成功，DELETE_FAILED：删除失败，RESOURCE_IMPORTING：资源导入中，RESOURCE_IMPORT_FAILED：资源导入失败，
	//               RESOURCE_REMOVING：资源删除中，RESOURCE_REMOVE_FAILED：资源删除失败，DBINSTANCECLASSCHANGING：修改规格中，
	//               MODIFY_SPEC_FAILED：修改规格失败
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 存储空间GB
	Storage *int64 `json:"storage,omitempty" xml:"storage,omitempty"`
}

func (s DepsDatabase) String() string {
	return tea.Prettify(s)
}

func (s DepsDatabase) GoString() string {
	return s.String()
}

func (s *DepsDatabase) SetAppServices(v []*AppService) *DepsDatabase {
	s.AppServices = v
	return s
}

func (s *DepsDatabase) SetConnectionAddress(v string) *DepsDatabase {
	s.ConnectionAddress = &v
	return s
}

func (s *DepsDatabase) SetCpu(v int64) *DepsDatabase {
	s.Cpu = &v
	return s
}

func (s *DepsDatabase) SetEngine(v string) *DepsDatabase {
	s.Engine = &v
	return s
}

func (s *DepsDatabase) SetEngineVersion(v string) *DepsDatabase {
	s.EngineVersion = &v
	return s
}

func (s *DepsDatabase) SetIaasId(v string) *DepsDatabase {
	s.IaasId = &v
	return s
}

func (s *DepsDatabase) SetId(v string) *DepsDatabase {
	s.Id = &v
	return s
}

func (s *DepsDatabase) SetMaxConnections(v int64) *DepsDatabase {
	s.MaxConnections = &v
	return s
}

func (s *DepsDatabase) SetMaxIops(v int64) *DepsDatabase {
	s.MaxIops = &v
	return s
}

func (s *DepsDatabase) SetMemory(v int64) *DepsDatabase {
	s.Memory = &v
	return s
}

func (s *DepsDatabase) SetName(v string) *DepsDatabase {
	s.Name = &v
	return s
}

func (s *DepsDatabase) SetNetworkType(v string) *DepsDatabase {
	s.NetworkType = &v
	return s
}

func (s *DepsDatabase) SetNetType(v string) *DepsDatabase {
	s.NetType = &v
	return s
}

func (s *DepsDatabase) SetPort(v int64) *DepsDatabase {
	s.Port = &v
	return s
}

func (s *DepsDatabase) SetRegion(v string) *DepsDatabase {
	s.Region = &v
	return s
}

func (s *DepsDatabase) SetSpecIaasId(v string) *DepsDatabase {
	s.SpecIaasId = &v
	return s
}

func (s *DepsDatabase) SetStatus(v string) *DepsDatabase {
	s.Status = &v
	return s
}

func (s *DepsDatabase) SetStorage(v int64) *DepsDatabase {
	s.Storage = &v
	return s
}

// AppServiceExecutionProgress
type AppServiceExecutionProgress struct {
	// base_progress
	BaseProgress *ResourceGroupExecutionProgress `json:"base_progress,omitempty" xml:"base_progress,omitempty"`
	// group_count
	GroupCount *int64 `json:"group_count,omitempty" xml:"group_count,omitempty"`
	// pre_deployment_execution_progresses
	PreDeploymentExecutionProgresses []*TaskExecutionProgress `json:"pre_deployment_execution_progresses,omitempty" xml:"pre_deployment_execution_progresses,omitempty" type:"Repeated"`
	// post_deployment_execution_progresses
	PostDeploymentExecutionProgresses []*TaskExecutionProgress `json:"post_deployment_execution_progresses,omitempty" xml:"post_deployment_execution_progresses,omitempty" type:"Repeated"`
	// group_execution_progresses
	GroupExecutionProgresses []*ResourceGroupExecutionProgress `json:"group_execution_progresses,omitempty" xml:"group_execution_progresses,omitempty" type:"Repeated"`
}

func (s AppServiceExecutionProgress) String() string {
	return tea.Prettify(s)
}

func (s AppServiceExecutionProgress) GoString() string {
	return s.String()
}

func (s *AppServiceExecutionProgress) SetBaseProgress(v *ResourceGroupExecutionProgress) *AppServiceExecutionProgress {
	s.BaseProgress = v
	return s
}

func (s *AppServiceExecutionProgress) SetGroupCount(v int64) *AppServiceExecutionProgress {
	s.GroupCount = &v
	return s
}

func (s *AppServiceExecutionProgress) SetPreDeploymentExecutionProgresses(v []*TaskExecutionProgress) *AppServiceExecutionProgress {
	s.PreDeploymentExecutionProgresses = v
	return s
}

func (s *AppServiceExecutionProgress) SetPostDeploymentExecutionProgresses(v []*TaskExecutionProgress) *AppServiceExecutionProgress {
	s.PostDeploymentExecutionProgresses = v
	return s
}

func (s *AppServiceExecutionProgress) SetGroupExecutionProgresses(v []*ResourceGroupExecutionProgress) *AppServiceExecutionProgress {
	s.GroupExecutionProgresses = v
	return s
}

// 计算资源信息
type Computer struct {
	// 服务实例列表
	AppServices []*AppService `json:"app_services,omitempty" xml:"app_services,omitempty" type:"Repeated"`
	// 服务器所属的cell ID
	CellId *string `json:"cell_id,omitempty" xml:"cell_id,omitempty"`
	// 类型:POD/DOCKER_VM
	ComputerType *string `json:"computer_type,omitempty" xml:"computer_type,omitempty"`
	// CPU核数
	Cpu *int64 `json:"cpu,omitempty" xml:"cpu,omitempty"`
	// 弹性ip地址
	ElasticIp *string `json:"elastic_ip,omitempty" xml:"elastic_ip,omitempty"`
	// iaas_id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// 计算资源唯一标识
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 内网ip地址
	InnerIp *string `json:"inner_ip,omitempty" xml:"inner_ip,omitempty"`
	// 内存大小，单位：MB
	Memory *int64 `json:"memory,omitempty" xml:"memory,omitempty"`
	// 资源名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 公网ip地址
	PublicIp *string `json:"public_ip,omitempty" xml:"public_ip,omitempty"`
	// 资源所属的地域id
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// 资源状态，取值：
	//                     CREATING：创建中；
	//                     CREATE_FAILED：创建失败；
	//                     CREATED：已创建；
	//                     STARTING：开机中；
	//                     START_FAILED：开机失败；
	//                     UNALLOCATED：待分配；
	//                     INITIALIZING：初始化中；
	//                     INITIALIZE_FAILED：初始化失败；
	//                     OFFLINE：已下线；
	//                     READY：待部署；
	//                     DEPLOYING：部署中；
	//                     DEPLOY_FAILED：部署失败；
	//                     DEPLOYED：已部署；
	//                     RELEASING：释放中；
	//                     RELEASE_FAILED：释放失败；
	//                     STOPPING：关机中；
	//                     STOP_FAILED：关机失败；
	//                     STOPPED：已关机；
	//                     REBOOTING：重启中；
	//                     REBOOT_FAILED：重启失败；
	//                     DISK_INITIALIZING：初始化磁盘中；
	//                     SPEC_CHANGING：变配中；
	//                     LOCKED：被锁定；
	//                     EXPIRED：已过期；
	//                     TO_EXPIR：即将过期；
	//                     DELETING：删除中；
	//                     DELETE_FAILED：删除失败；
	//                     DELETED：删除成功
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 资源所属的可用区id
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty"`
	// 机器是否镜像化
	DeployMode *string `json:"deploy_mode,omitempty" xml:"deploy_mode,omitempty"`
}

func (s Computer) String() string {
	return tea.Prettify(s)
}

func (s Computer) GoString() string {
	return s.String()
}

func (s *Computer) SetAppServices(v []*AppService) *Computer {
	s.AppServices = v
	return s
}

func (s *Computer) SetCellId(v string) *Computer {
	s.CellId = &v
	return s
}

func (s *Computer) SetComputerType(v string) *Computer {
	s.ComputerType = &v
	return s
}

func (s *Computer) SetCpu(v int64) *Computer {
	s.Cpu = &v
	return s
}

func (s *Computer) SetElasticIp(v string) *Computer {
	s.ElasticIp = &v
	return s
}

func (s *Computer) SetIaasId(v string) *Computer {
	s.IaasId = &v
	return s
}

func (s *Computer) SetId(v string) *Computer {
	s.Id = &v
	return s
}

func (s *Computer) SetInnerIp(v string) *Computer {
	s.InnerIp = &v
	return s
}

func (s *Computer) SetMemory(v int64) *Computer {
	s.Memory = &v
	return s
}

func (s *Computer) SetName(v string) *Computer {
	s.Name = &v
	return s
}

func (s *Computer) SetPublicIp(v string) *Computer {
	s.PublicIp = &v
	return s
}

func (s *Computer) SetRegion(v string) *Computer {
	s.Region = &v
	return s
}

func (s *Computer) SetStatus(v string) *Computer {
	s.Status = &v
	return s
}

func (s *Computer) SetZone(v string) *Computer {
	s.Zone = &v
	return s
}

func (s *Computer) SetDeployMode(v string) *Computer {
	s.DeployMode = &v
	return s
}

// SLB 信息
type SLBInfo struct {
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 机器ID
	MachineId *string `json:"machine_id,omitempty" xml:"machine_id,omitempty"`
	// 端口
	Port *int64 `json:"port,omitempty" xml:"port,omitempty"`
	// paas id
	PaasId *string `json:"paas_id,omitempty" xml:"paas_id,omitempty"`
	// iaas id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// 虚拟服务器组 id
	VServerGroupId *string `json:"v_server_group_id,omitempty" xml:"v_server_group_id,omitempty"`
	// 虚拟服务器组名
	VServerGroupName *string `json:"v_server_group_name,omitempty" xml:"v_server_group_name,omitempty"`
	// 计算资源 ID
	ComputerId *string `json:"computer_id,omitempty" xml:"computer_id,omitempty"`
	// 应用 ID
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// 应用服务 ID
	AppSvcId *string `json:"app_svc_id,omitempty" xml:"app_svc_id,omitempty"`
	// vip 地址列表
	VipAddresses []*string `json:"vip_addresses,omitempty" xml:"vip_addresses,omitempty" type:"Repeated"`
	// 权重
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty"`
	// 状态
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s SLBInfo) String() string {
	return tea.Prettify(s)
}

func (s SLBInfo) GoString() string {
	return s.String()
}

func (s *SLBInfo) SetName(v string) *SLBInfo {
	s.Name = &v
	return s
}

func (s *SLBInfo) SetMachineId(v string) *SLBInfo {
	s.MachineId = &v
	return s
}

func (s *SLBInfo) SetPort(v int64) *SLBInfo {
	s.Port = &v
	return s
}

func (s *SLBInfo) SetPaasId(v string) *SLBInfo {
	s.PaasId = &v
	return s
}

func (s *SLBInfo) SetIaasId(v string) *SLBInfo {
	s.IaasId = &v
	return s
}

func (s *SLBInfo) SetVServerGroupId(v string) *SLBInfo {
	s.VServerGroupId = &v
	return s
}

func (s *SLBInfo) SetVServerGroupName(v string) *SLBInfo {
	s.VServerGroupName = &v
	return s
}

func (s *SLBInfo) SetComputerId(v string) *SLBInfo {
	s.ComputerId = &v
	return s
}

func (s *SLBInfo) SetAppId(v string) *SLBInfo {
	s.AppId = &v
	return s
}

func (s *SLBInfo) SetAppSvcId(v string) *SLBInfo {
	s.AppSvcId = &v
	return s
}

func (s *SLBInfo) SetVipAddresses(v []*string) *SLBInfo {
	s.VipAddresses = v
	return s
}

func (s *SLBInfo) SetWeight(v int64) *SLBInfo {
	s.Weight = &v
	return s
}

func (s *SLBInfo) SetState(v string) *SLBInfo {
	s.State = &v
	return s
}

func (s *SLBInfo) SetId(v string) *SLBInfo {
	s.Id = &v
	return s
}

// 挂载权重
type MountWeight struct {
	// 挂载目标 ID
	MountTargetId *string `json:"mount_target_id,omitempty" xml:"mount_target_id,omitempty"`
	// 端口
	Port *int64 `json:"port,omitempty" xml:"port,omitempty"`
	// 权重
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty" maximum:"undefined" minimum:"undefined"`
}

func (s MountWeight) String() string {
	return tea.Prettify(s)
}

func (s MountWeight) GoString() string {
	return s.String()
}

func (s *MountWeight) SetMountTargetId(v string) *MountWeight {
	s.MountTargetId = &v
	return s
}

func (s *MountWeight) SetPort(v int64) *MountWeight {
	s.Port = &v
	return s
}

func (s *MountWeight) SetWeight(v int64) *MountWeight {
	s.Weight = &v
	return s
}

// 一组执行运维操作的应用（服务），同一个组中的应用（服务）将并行执行操作。
type OpsApplicationGroup struct {
	// 此运维应用（服务）组中包含的应用（服务）列表
	Applications []*OpsApplication `json:"applications,omitempty" xml:"applications,omitempty" type:"Repeated"`
}

func (s OpsApplicationGroup) String() string {
	return tea.Prettify(s)
}

func (s OpsApplicationGroup) GoString() string {
	return s.String()
}

func (s *OpsApplicationGroup) SetApplications(v []*OpsApplication) *OpsApplicationGroup {
	s.Applications = v
	return s
}

// 一个运维应用（服务）操作链。一个操作链中包含一个顺序的运维应用（服务）组列表，这些运维应用（服务）组将依次串行的执行运维操作。不同的操作链将并行执行。
type OpsApplicationChain struct {
	// 此运维应用链中包含的应用（服务）组列表
	Groups []*OpsApplicationGroup `json:"groups,omitempty" xml:"groups,omitempty" type:"Repeated"`
}

func (s OpsApplicationChain) String() string {
	return tea.Prettify(s)
}

func (s OpsApplicationChain) GoString() string {
	return s.String()
}

func (s *OpsApplicationChain) SetGroups(v []*OpsApplicationGroup) *OpsApplicationChain {
	s.Groups = v
	return s
}

// UserDTO
type UserDTO struct {
	// customerId
	CustomerId *string `json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// realName
	RealName *string `json:"real_name,omitempty" xml:"real_name,omitempty"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 用户id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 登录名称
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty"`
	// 邮箱
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 手机号
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
}

func (s UserDTO) String() string {
	return tea.Prettify(s)
}

func (s UserDTO) GoString() string {
	return s.String()
}

func (s *UserDTO) SetCustomerId(v string) *UserDTO {
	s.CustomerId = &v
	return s
}

func (s *UserDTO) SetName(v string) *UserDTO {
	s.Name = &v
	return s
}

func (s *UserDTO) SetRealName(v string) *UserDTO {
	s.RealName = &v
	return s
}

func (s *UserDTO) SetType(v string) *UserDTO {
	s.Type = &v
	return s
}

func (s *UserDTO) SetId(v string) *UserDTO {
	s.Id = &v
	return s
}

func (s *UserDTO) SetLoginName(v string) *UserDTO {
	s.LoginName = &v
	return s
}

func (s *UserDTO) SetEmail(v string) *UserDTO {
	s.Email = &v
	return s
}

func (s *UserDTO) SetMobile(v string) *UserDTO {
	s.Mobile = &v
	return s
}

// 执行指令的一个参数。
type OpsCmdArg struct {
	// 指令参数名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 指令参数值
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s OpsCmdArg) String() string {
	return tea.Prettify(s)
}

func (s OpsCmdArg) GoString() string {
	return s.String()
}

func (s *OpsCmdArg) SetName(v string) *OpsCmdArg {
	s.Name = &v
	return s
}

func (s *OpsCmdArg) SetValue(v string) *OpsCmdArg {
	s.Value = &v
	return s
}

// 机器信息
type Machine struct {
	// 机器名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 所属发布服务id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// 包版本
	ServicePackageVersion *string `json:"service_package_version,omitempty" xml:"service_package_version,omitempty"`
	// 应用服务分组集合 ID
	ServiceGroupCollectionId *string `json:"service_group_collection_id,omitempty" xml:"service_group_collection_id,omitempty"`
	// 发布分组 ID
	ServiceGroupId *string `json:"service_group_id,omitempty" xml:"service_group_id,omitempty"`
	// 概览 ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 服务类型
	ServiceType *string `json:"service_type,omitempty" xml:"service_type,omitempty"`
	// paas 服务 ID
	PaasServiceId *string `json:"paas_service_id,omitempty" xml:"paas_service_id,omitempty"`
	// paas 状态
	PaasState *string `json:"paas_state,omitempty" xml:"paas_state,omitempty"`
	// 关联目标 ID
	RefTargetId *string `json:"ref_target_id,omitempty" xml:"ref_target_id,omitempty"`
	// 目标 iaas id
	TargetIaasId *string `json:"target_iaas_id,omitempty" xml:"target_iaas_id,omitempty"`
	// 内网 IP
	InnerIp *string `json:"inner_ip,omitempty" xml:"inner_ip,omitempty"`
	// 公网 IP
	PublicIp *string `json:"public_ip,omitempty" xml:"public_ip,omitempty"`
	// 主机名
	HostName *string `json:"host_name,omitempty" xml:"host_name,omitempty"`
	// 主机域名
	HostDomain *string `json:"host_domain,omitempty" xml:"host_domain,omitempty"`
	// 安全组ID
	SecurityDomainId *string `json:"security_domain_id,omitempty" xml:"security_domain_id,omitempty"`
	// 安全组创建人 ID
	SecurityDomainCreatorId *string `json:"security_domain_creator_id,omitempty" xml:"security_domain_creator_id,omitempty"`
	// 安全组名
	SecurityDomainName *string `json:"security_domain_name,omitempty" xml:"security_domain_name,omitempty"`
	// 默认执行账号
	DefaultExecuteAccount *string `json:"default_execute_account,omitempty" xml:"default_execute_account,omitempty"`
	// 可用区 ID
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
	// 部署单元 ID
	CellId *string `json:"cell_id,omitempty" xml:"cell_id,omitempty"`
	// 用户名
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
	// 加密密码
	EncodedPwd *string `json:"encoded_pwd,omitempty" xml:"encoded_pwd,omitempty"`
	// 加密秘钥
	EncodedSecreyKey *string `json:"encoded_secrey_key,omitempty" xml:"encoded_secrey_key,omitempty"`
	// 公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty"`
	// star manage ip
	StarManagerIp *string `json:"star_manager_ip,omitempty" xml:"star_manager_ip,omitempty"`
	// star manager port
	StarManagerPort *int64 `json:"star_manager_port,omitempty" xml:"star_manager_port,omitempty"`
	// 初始化脚本 url
	ScriptUrl *string `json:"script_url,omitempty" xml:"script_url,omitempty"`
	// 特殊初始化脚本 url
	SpecialScriptUrl *string `json:"special_script_url,omitempty" xml:"special_script_url,omitempty"`
	// 代理 url
	AgentUrl *string `json:"agent_url,omitempty" xml:"agent_url,omitempty"`
	// 代理设置 url
	AgentSetupUrl *string `json:"agent_setup_url,omitempty" xml:"agent_setup_url,omitempty"`
	// 机器初始 url
	MachineInitUrl *string `json:"machine_init_url,omitempty" xml:"machine_init_url,omitempty"`
	// 特殊机器初始 url
	SpecialMachineInitUrl *string `json:"special_machine_init_url,omitempty" xml:"special_machine_init_url,omitempty"`
	// 控制类型
	ControlType *string `json:"control_type,omitempty" xml:"control_type,omitempty"`
	// 控制对象
	ControlTarget *string `json:"control_target,omitempty" xml:"control_target,omitempty"`
	// 是否需要初始化
	NeedInitialize *bool `json:"need_initialize,omitempty" xml:"need_initialize,omitempty"`
	// SLB 信息
	SlbInfoList []*SLBInfo `json:"slb_info_list,omitempty" xml:"slb_info_list,omitempty" type:"Repeated"`
	// 子任务 id
	TaskIds []*string `json:"task_ids,omitempty" xml:"task_ids,omitempty" type:"Repeated"`
	// 环境变量
	EnvConfig []*Pair `json:"env_config,omitempty" xml:"env_config,omitempty" type:"Repeated"`
	// pd id
	ProcessDefinitionId *string `json:"process_definition_id,omitempty" xml:"process_definition_id,omitempty"`
	// 父节点 id
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// 父节点类型
	ParentEntityType *string `json:"parent_entity_type,omitempty" xml:"parent_entity_type,omitempty"`
	// 流程节点 ID
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty"`
	// 状态
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 开始时间
	StartedTime *string `json:"started_time,omitempty" xml:"started_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 结束时间
	FinishedTime *string `json:"finished_time,omitempty" xml:"finished_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 是否可独立执行
	StandaloneExecutable *bool `json:"standalone_executable,omitempty" xml:"standalone_executable,omitempty"`
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s Machine) String() string {
	return tea.Prettify(s)
}

func (s Machine) GoString() string {
	return s.String()
}

func (s *Machine) SetName(v string) *Machine {
	s.Name = &v
	return s
}

func (s *Machine) SetServiceId(v string) *Machine {
	s.ServiceId = &v
	return s
}

func (s *Machine) SetServicePackageVersion(v string) *Machine {
	s.ServicePackageVersion = &v
	return s
}

func (s *Machine) SetServiceGroupCollectionId(v string) *Machine {
	s.ServiceGroupCollectionId = &v
	return s
}

func (s *Machine) SetServiceGroupId(v string) *Machine {
	s.ServiceGroupId = &v
	return s
}

func (s *Machine) SetArrangementId(v string) *Machine {
	s.ArrangementId = &v
	return s
}

func (s *Machine) SetServiceType(v string) *Machine {
	s.ServiceType = &v
	return s
}

func (s *Machine) SetPaasServiceId(v string) *Machine {
	s.PaasServiceId = &v
	return s
}

func (s *Machine) SetPaasState(v string) *Machine {
	s.PaasState = &v
	return s
}

func (s *Machine) SetRefTargetId(v string) *Machine {
	s.RefTargetId = &v
	return s
}

func (s *Machine) SetTargetIaasId(v string) *Machine {
	s.TargetIaasId = &v
	return s
}

func (s *Machine) SetInnerIp(v string) *Machine {
	s.InnerIp = &v
	return s
}

func (s *Machine) SetPublicIp(v string) *Machine {
	s.PublicIp = &v
	return s
}

func (s *Machine) SetHostName(v string) *Machine {
	s.HostName = &v
	return s
}

func (s *Machine) SetHostDomain(v string) *Machine {
	s.HostDomain = &v
	return s
}

func (s *Machine) SetSecurityDomainId(v string) *Machine {
	s.SecurityDomainId = &v
	return s
}

func (s *Machine) SetSecurityDomainCreatorId(v string) *Machine {
	s.SecurityDomainCreatorId = &v
	return s
}

func (s *Machine) SetSecurityDomainName(v string) *Machine {
	s.SecurityDomainName = &v
	return s
}

func (s *Machine) SetDefaultExecuteAccount(v string) *Machine {
	s.DefaultExecuteAccount = &v
	return s
}

func (s *Machine) SetZoneId(v string) *Machine {
	s.ZoneId = &v
	return s
}

func (s *Machine) SetCellId(v string) *Machine {
	s.CellId = &v
	return s
}

func (s *Machine) SetUsername(v string) *Machine {
	s.Username = &v
	return s
}

func (s *Machine) SetEncodedPwd(v string) *Machine {
	s.EncodedPwd = &v
	return s
}

func (s *Machine) SetEncodedSecreyKey(v string) *Machine {
	s.EncodedSecreyKey = &v
	return s
}

func (s *Machine) SetPublicKey(v string) *Machine {
	s.PublicKey = &v
	return s
}

func (s *Machine) SetStarManagerIp(v string) *Machine {
	s.StarManagerIp = &v
	return s
}

func (s *Machine) SetStarManagerPort(v int64) *Machine {
	s.StarManagerPort = &v
	return s
}

func (s *Machine) SetScriptUrl(v string) *Machine {
	s.ScriptUrl = &v
	return s
}

func (s *Machine) SetSpecialScriptUrl(v string) *Machine {
	s.SpecialScriptUrl = &v
	return s
}

func (s *Machine) SetAgentUrl(v string) *Machine {
	s.AgentUrl = &v
	return s
}

func (s *Machine) SetAgentSetupUrl(v string) *Machine {
	s.AgentSetupUrl = &v
	return s
}

func (s *Machine) SetMachineInitUrl(v string) *Machine {
	s.MachineInitUrl = &v
	return s
}

func (s *Machine) SetSpecialMachineInitUrl(v string) *Machine {
	s.SpecialMachineInitUrl = &v
	return s
}

func (s *Machine) SetControlType(v string) *Machine {
	s.ControlType = &v
	return s
}

func (s *Machine) SetControlTarget(v string) *Machine {
	s.ControlTarget = &v
	return s
}

func (s *Machine) SetNeedInitialize(v bool) *Machine {
	s.NeedInitialize = &v
	return s
}

func (s *Machine) SetSlbInfoList(v []*SLBInfo) *Machine {
	s.SlbInfoList = v
	return s
}

func (s *Machine) SetTaskIds(v []*string) *Machine {
	s.TaskIds = v
	return s
}

func (s *Machine) SetEnvConfig(v []*Pair) *Machine {
	s.EnvConfig = v
	return s
}

func (s *Machine) SetProcessDefinitionId(v string) *Machine {
	s.ProcessDefinitionId = &v
	return s
}

func (s *Machine) SetParentId(v string) *Machine {
	s.ParentId = &v
	return s
}

func (s *Machine) SetParentEntityType(v string) *Machine {
	s.ParentEntityType = &v
	return s
}

func (s *Machine) SetNodeId(v string) *Machine {
	s.NodeId = &v
	return s
}

func (s *Machine) SetState(v string) *Machine {
	s.State = &v
	return s
}

func (s *Machine) SetStartedTime(v string) *Machine {
	s.StartedTime = &v
	return s
}

func (s *Machine) SetFinishedTime(v string) *Machine {
	s.FinishedTime = &v
	return s
}

func (s *Machine) SetStandaloneExecutable(v bool) *Machine {
	s.StandaloneExecutable = &v
	return s
}

func (s *Machine) SetId(v string) *Machine {
	s.Id = &v
	return s
}

// 执行失败任务节点
type ErrorTaskExecutionNode struct {
	// 节点 ID
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty"`
	// 节点名
	NodeName *string `json:"node_name,omitempty" xml:"node_name,omitempty"`
	// 错误码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s ErrorTaskExecutionNode) String() string {
	return tea.Prettify(s)
}

func (s ErrorTaskExecutionNode) GoString() string {
	return s.String()
}

func (s *ErrorTaskExecutionNode) SetNodeId(v string) *ErrorTaskExecutionNode {
	s.NodeId = &v
	return s
}

func (s *ErrorTaskExecutionNode) SetNodeName(v string) *ErrorTaskExecutionNode {
	s.NodeName = &v
	return s
}

func (s *ErrorTaskExecutionNode) SetCode(v string) *ErrorTaskExecutionNode {
	s.Code = &v
	return s
}

func (s *ErrorTaskExecutionNode) SetMessage(v string) *ErrorTaskExecutionNode {
	s.Message = &v
	return s
}

// AppManifest
type AppManifest struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// version
	AppVersion *string `json:"app_version,omitempty" xml:"app_version,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// storeLocation
	StoreLocation *string `json:"store_location,omitempty" xml:"store_location,omitempty"`
	// location
	Location *string `json:"location,omitempty" xml:"location,omitempty"`
	// etag
	Etag *string `json:"etag,omitempty" xml:"etag,omitempty"`
	// remark
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// 代码提交
	CodeCommit *CodeCommit `json:"code_commit,omitempty" xml:"code_commit,omitempty"`
	// 创建时间
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 修改时间
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
}

func (s AppManifest) String() string {
	return tea.Prettify(s)
}

func (s AppManifest) GoString() string {
	return s.String()
}

func (s *AppManifest) SetId(v string) *AppManifest {
	s.Id = &v
	return s
}

func (s *AppManifest) SetWorkspaceId(v string) *AppManifest {
	s.WorkspaceId = &v
	return s
}

func (s *AppManifest) SetAppId(v string) *AppManifest {
	s.AppId = &v
	return s
}

func (s *AppManifest) SetAppVersion(v string) *AppManifest {
	s.AppVersion = &v
	return s
}

func (s *AppManifest) SetName(v string) *AppManifest {
	s.Name = &v
	return s
}

func (s *AppManifest) SetStoreLocation(v string) *AppManifest {
	s.StoreLocation = &v
	return s
}

func (s *AppManifest) SetLocation(v string) *AppManifest {
	s.Location = &v
	return s
}

func (s *AppManifest) SetEtag(v string) *AppManifest {
	s.Etag = &v
	return s
}

func (s *AppManifest) SetRemark(v string) *AppManifest {
	s.Remark = &v
	return s
}

func (s *AppManifest) SetCodeCommit(v *CodeCommit) *AppManifest {
	s.CodeCommit = v
	return s
}

func (s *AppManifest) SetUtcCreate(v string) *AppManifest {
	s.UtcCreate = &v
	return s
}

func (s *AppManifest) SetUtcModified(v string) *AppManifest {
	s.UtcModified = &v
	return s
}

// sidecar环境参数配置
type SidecarParamsConfig struct {
	// 类型：默认、透明劫持
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 环境参数内容
	Params *string `json:"params,omitempty" xml:"params,omitempty"`
}

func (s SidecarParamsConfig) String() string {
	return tea.Prettify(s)
}

func (s SidecarParamsConfig) GoString() string {
	return s.String()
}

func (s *SidecarParamsConfig) SetType(v string) *SidecarParamsConfig {
	s.Type = &v
	return s
}

func (s *SidecarParamsConfig) SetParams(v string) *SidecarParamsConfig {
	s.Params = &v
	return s
}

// 部署单元
type DeployCell struct {
	// 所属逻辑单元名称[单元化模式特有]
	CellGroup *string `json:"cell_group,omitempty" xml:"cell_group,omitempty"`
	// 所属集群
	//
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
	// 蓝绿着色信息[单元化模式特有]
	Color *string `json:"color,omitempty" xml:"color,omitempty"`
	// 创建时间
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// cell名称，与name一样，为了兼容已有代码
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// 部署单元标识，创建之后不允许修改
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// 是否灰度[单元化模式特有]
	IsGray *bool `json:"is_gray,omitempty" xml:"is_gray,omitempty"`
	// 部署单元名称，主要用作页面展示
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 压测权重
	PressWeight *int64 `json:"press_weight,omitempty" xml:"press_weight,omitempty"`
	// 部署单元类型[单元化模式特有]
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 默认权重[单元化模式特有]
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty"`
	// 所属工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// 所属机房名称
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty"`
	// cell id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s DeployCell) String() string {
	return tea.Prettify(s)
}

func (s DeployCell) GoString() string {
	return s.String()
}

func (s *DeployCell) SetCellGroup(v string) *DeployCell {
	s.CellGroup = &v
	return s
}

func (s *DeployCell) SetCluster(v string) *DeployCell {
	s.Cluster = &v
	return s
}

func (s *DeployCell) SetColor(v string) *DeployCell {
	s.Color = &v
	return s
}

func (s *DeployCell) SetCreatedTime(v string) *DeployCell {
	s.CreatedTime = &v
	return s
}

func (s *DeployCell) SetDisplayName(v string) *DeployCell {
	s.DisplayName = &v
	return s
}

func (s *DeployCell) SetIdentity(v string) *DeployCell {
	s.Identity = &v
	return s
}

func (s *DeployCell) SetIsGray(v bool) *DeployCell {
	s.IsGray = &v
	return s
}

func (s *DeployCell) SetName(v string) *DeployCell {
	s.Name = &v
	return s
}

func (s *DeployCell) SetPressWeight(v int64) *DeployCell {
	s.PressWeight = &v
	return s
}

func (s *DeployCell) SetType(v string) *DeployCell {
	s.Type = &v
	return s
}

func (s *DeployCell) SetWeight(v int64) *DeployCell {
	s.Weight = &v
	return s
}

func (s *DeployCell) SetWorkspace(v string) *DeployCell {
	s.Workspace = &v
	return s
}

func (s *DeployCell) SetZone(v string) *DeployCell {
	s.Zone = &v
	return s
}

func (s *DeployCell) SetId(v string) *DeployCell {
	s.Id = &v
	return s
}

// BuildCommandParams
type BuildCommandParams struct {
	// buildpackId
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s BuildCommandParams) String() string {
	return tea.Prettify(s)
}

func (s BuildCommandParams) GoString() string {
	return s.String()
}

func (s *BuildCommandParams) SetBuildpackId(v string) *BuildCommandParams {
	s.BuildpackId = &v
	return s
}

func (s *BuildCommandParams) SetDescription(v string) *BuildCommandParams {
	s.Description = &v
	return s
}

func (s *BuildCommandParams) SetKey(v string) *BuildCommandParams {
	s.Key = &v
	return s
}

func (s *BuildCommandParams) SetValue(v string) *BuildCommandParams {
	s.Value = &v
	return s
}

// NotificationReceiver
type NotificationReceiver struct {
	// config id
	ConfigId *string `json:"config_id,omitempty" xml:"config_id,omitempty"`
	// receiver
	Receiver *string `json:"receiver,omitempty" xml:"receiver,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s NotificationReceiver) String() string {
	return tea.Prettify(s)
}

func (s NotificationReceiver) GoString() string {
	return s.String()
}

func (s *NotificationReceiver) SetConfigId(v string) *NotificationReceiver {
	s.ConfigId = &v
	return s
}

func (s *NotificationReceiver) SetReceiver(v string) *NotificationReceiver {
	s.Receiver = &v
	return s
}

func (s *NotificationReceiver) SetDescription(v string) *NotificationReceiver {
	s.Description = &v
	return s
}

func (s *NotificationReceiver) SetId(v string) *NotificationReceiver {
	s.Id = &v
	return s
}

// 技术栈包上传地址信息
type UploadEndpoint struct {
	// 对象存储的access_key_id
	AccessKeyId *string `json:"access_key_id,omitempty" xml:"access_key_id,omitempty"`
	// 上传的目标bucket名称
	Bucket *string `json:"bucket,omitempty" xml:"bucket,omitempty"`
	// 加密策略，仅storage_type为SYSTEM_OSS时有效
	EncodedPolicy *string `json:"encoded_policy,omitempty" xml:"encoded_policy,omitempty"`
	// 文件失效的日期时间
	Expiration *string `json:"expiration,omitempty" xml:"expiration,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 对象存储的上传目标文件路径
	FilePath *string `json:"file_path,omitempty" xml:"file_path,omitempty"`
	// 上传的目标主机名，仅storage_type为SYSTEM_OSS时有效
	Host *string `json:"host,omitempty" xml:"host,omitempty"`
	// 地域ID
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// 签名，仅storage_type为SYSTEM_OSS时有效
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 存储类型，取值如下： SYSTEM_AFS表示AFS存储，SYSTEM_OSS表示OSS存储
	StorageType *string `json:"storage_type,omitempty" xml:"storage_type,omitempty"`
	// 上传的目标URL
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s UploadEndpoint) String() string {
	return tea.Prettify(s)
}

func (s UploadEndpoint) GoString() string {
	return s.String()
}

func (s *UploadEndpoint) SetAccessKeyId(v string) *UploadEndpoint {
	s.AccessKeyId = &v
	return s
}

func (s *UploadEndpoint) SetBucket(v string) *UploadEndpoint {
	s.Bucket = &v
	return s
}

func (s *UploadEndpoint) SetEncodedPolicy(v string) *UploadEndpoint {
	s.EncodedPolicy = &v
	return s
}

func (s *UploadEndpoint) SetExpiration(v string) *UploadEndpoint {
	s.Expiration = &v
	return s
}

func (s *UploadEndpoint) SetFilePath(v string) *UploadEndpoint {
	s.FilePath = &v
	return s
}

func (s *UploadEndpoint) SetHost(v string) *UploadEndpoint {
	s.Host = &v
	return s
}

func (s *UploadEndpoint) SetRegionId(v string) *UploadEndpoint {
	s.RegionId = &v
	return s
}

func (s *UploadEndpoint) SetSignature(v string) *UploadEndpoint {
	s.Signature = &v
	return s
}

func (s *UploadEndpoint) SetStorageType(v string) *UploadEndpoint {
	s.StorageType = &v
	return s
}

func (s *UploadEndpoint) SetUrl(v string) *UploadEndpoint {
	s.Url = &v
	return s
}

// 机房视图
type ZoneView struct {
	// 显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// table id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 标识
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// 状态
	State *string `json:"state,omitempty" xml:"state,omitempty"`
}

func (s ZoneView) String() string {
	return tea.Prettify(s)
}

func (s ZoneView) GoString() string {
	return s.String()
}

func (s *ZoneView) SetDisplayName(v string) *ZoneView {
	s.DisplayName = &v
	return s
}

func (s *ZoneView) SetId(v string) *ZoneView {
	s.Id = &v
	return s
}

func (s *ZoneView) SetIdentity(v string) *ZoneView {
	s.Identity = &v
	return s
}

func (s *ZoneView) SetState(v string) *ZoneView {
	s.State = &v
	return s
}

// ServiceInfoGroup
type ServiceInfoGroup struct {
	// 发布应用列表
	ServiceInfoList []*ServiceInfo `json:"service_info_list,omitempty" xml:"service_info_list,omitempty" type:"Repeated"`
}

func (s ServiceInfoGroup) String() string {
	return tea.Prettify(s)
}

func (s ServiceInfoGroup) GoString() string {
	return s.String()
}

func (s *ServiceInfoGroup) SetServiceInfoList(v []*ServiceInfo) *ServiceInfoGroup {
	s.ServiceInfoList = v
	return s
}

// sidecar过滤条件
type SidecarCondition struct {
	// 支持的workspaceGroup
	WorkspaceGroups *string `json:"workspace_groups,omitempty" xml:"workspace_groups,omitempty"`
	// 支持的cell列表
	Cells *string `json:"cells,omitempty" xml:"cells,omitempty"`
}

func (s SidecarCondition) String() string {
	return tea.Prettify(s)
}

func (s SidecarCondition) GoString() string {
	return s.String()
}

func (s *SidecarCondition) SetWorkspaceGroups(v string) *SidecarCondition {
	s.WorkspaceGroups = &v
	return s
}

func (s *SidecarCondition) SetCells(v string) *SidecarCondition {
	s.Cells = &v
	return s
}

// BuildpackRegionRelationDetail
type BuildpackRegionRelationDetail struct {
	// buildpackId
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// buildpackTenantId
	BuildpackTenantId *string `json:"buildpack_tenant_id,omitempty" xml:"buildpack_tenant_id,omitempty"`
	// creationTime
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// fileChecksum
	FileChecksum *string `json:"file_checksum,omitempty" xml:"file_checksum,omitempty"`
	// fileLocation
	FileLocation *string `json:"file_location,omitempty" xml:"file_location,omitempty"`
	// fileSize
	FileSize *int64 `json:"file_size,omitempty" xml:"file_size,omitempty"`
	// fileStatus
	FileStatus *string `json:"file_status,omitempty" xml:"file_status,omitempty"`
	// fromRegionId
	FromRegionId *string `json:"from_region_id,omitempty" xml:"from_region_id,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// modificationTime
	ModificationTime *string `json:"modification_time,omitempty" xml:"modification_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// objectName
	ObjectName *string `json:"object_name,omitempty" xml:"object_name,omitempty"`
	// originalFileName
	OriginalFileName *string `json:"original_file_name,omitempty" xml:"original_file_name,omitempty"`
	// readableFileSize
	ReadableFileSize *string `json:"readable_file_size,omitempty" xml:"readable_file_size,omitempty"`
	// RegionDto
	Region *Region `json:"region,omitempty" xml:"region,omitempty"`
}

func (s BuildpackRegionRelationDetail) String() string {
	return tea.Prettify(s)
}

func (s BuildpackRegionRelationDetail) GoString() string {
	return s.String()
}

func (s *BuildpackRegionRelationDetail) SetBuildpackId(v string) *BuildpackRegionRelationDetail {
	s.BuildpackId = &v
	return s
}

func (s *BuildpackRegionRelationDetail) SetBuildpackTenantId(v string) *BuildpackRegionRelationDetail {
	s.BuildpackTenantId = &v
	return s
}

func (s *BuildpackRegionRelationDetail) SetCreationTime(v string) *BuildpackRegionRelationDetail {
	s.CreationTime = &v
	return s
}

func (s *BuildpackRegionRelationDetail) SetFileChecksum(v string) *BuildpackRegionRelationDetail {
	s.FileChecksum = &v
	return s
}

func (s *BuildpackRegionRelationDetail) SetFileLocation(v string) *BuildpackRegionRelationDetail {
	s.FileLocation = &v
	return s
}

func (s *BuildpackRegionRelationDetail) SetFileSize(v int64) *BuildpackRegionRelationDetail {
	s.FileSize = &v
	return s
}

func (s *BuildpackRegionRelationDetail) SetFileStatus(v string) *BuildpackRegionRelationDetail {
	s.FileStatus = &v
	return s
}

func (s *BuildpackRegionRelationDetail) SetFromRegionId(v string) *BuildpackRegionRelationDetail {
	s.FromRegionId = &v
	return s
}

func (s *BuildpackRegionRelationDetail) SetId(v string) *BuildpackRegionRelationDetail {
	s.Id = &v
	return s
}

func (s *BuildpackRegionRelationDetail) SetModificationTime(v string) *BuildpackRegionRelationDetail {
	s.ModificationTime = &v
	return s
}

func (s *BuildpackRegionRelationDetail) SetObjectName(v string) *BuildpackRegionRelationDetail {
	s.ObjectName = &v
	return s
}

func (s *BuildpackRegionRelationDetail) SetOriginalFileName(v string) *BuildpackRegionRelationDetail {
	s.OriginalFileName = &v
	return s
}

func (s *BuildpackRegionRelationDetail) SetReadableFileSize(v string) *BuildpackRegionRelationDetail {
	s.ReadableFileSize = &v
	return s
}

func (s *BuildpackRegionRelationDetail) SetRegion(v *Region) *BuildpackRegionRelationDetail {
	s.Region = v
	return s
}

// 逻辑单元灾备信息
type DisasterInfo struct {
	// 正常容灾状态
	DisasterRecoveryState *string `json:"disaster_recovery_state,omitempty" xml:"disaster_recovery_state,omitempty"`
	// 同城灾备单元(组)
	LocalFailoverTarget *string `json:"local_failover_target,omitempty" xml:"local_failover_target,omitempty"`
	// 压测容灾状态
	PressDisasterRecoveryState *string `json:"press_disaster_recovery_state,omitempty" xml:"press_disaster_recovery_state,omitempty"`
	// 异地灾备单元(组)
	RemoteFailoverTarget *string `json:"remote_failover_target,omitempty" xml:"remote_failover_target,omitempty"`
	// 逻辑单元&部署单元名称
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// 容灾类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DisasterInfo) String() string {
	return tea.Prettify(s)
}

func (s DisasterInfo) GoString() string {
	return s.String()
}

func (s *DisasterInfo) SetDisasterRecoveryState(v string) *DisasterInfo {
	s.DisasterRecoveryState = &v
	return s
}

func (s *DisasterInfo) SetLocalFailoverTarget(v string) *DisasterInfo {
	s.LocalFailoverTarget = &v
	return s
}

func (s *DisasterInfo) SetPressDisasterRecoveryState(v string) *DisasterInfo {
	s.PressDisasterRecoveryState = &v
	return s
}

func (s *DisasterInfo) SetRemoteFailoverTarget(v string) *DisasterInfo {
	s.RemoteFailoverTarget = &v
	return s
}

func (s *DisasterInfo) SetSource(v string) *DisasterInfo {
	s.Source = &v
	return s
}

func (s *DisasterInfo) SetType(v string) *DisasterInfo {
	s.Type = &v
	return s
}

// 应用参数配置管理-某个参数在某个 scope + scope id 中渲染后的值
type ParamVal struct {
	// 参数渲染后的值
	RenderVal *string `json:"render_val,omitempty" xml:"render_val,omitempty"`
	// 某个 scope_id
	ScopeId *string `json:"scope_id,omitempty" xml:"scope_id,omitempty"`
	// scope 类型
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
}

func (s ParamVal) String() string {
	return tea.Prettify(s)
}

func (s ParamVal) GoString() string {
	return s.String()
}

func (s *ParamVal) SetRenderVal(v string) *ParamVal {
	s.RenderVal = &v
	return s
}

func (s *ParamVal) SetScopeId(v string) *ParamVal {
	s.ScopeId = &v
	return s
}

func (s *ParamVal) SetScope(v string) *ParamVal {
	s.Scope = &v
	return s
}

// BGReleaseExecutionProgress
type BGReleaseExecutionProgress struct {
	// unit_id
	UnitId *string `json:"unit_id,omitempty" xml:"unit_id,omitempty"`
	// unit_type
	UnitType *string `json:"unit_type,omitempty" xml:"unit_type,omitempty"`
	// resource_type
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty"`
	// traffic_execution_progress_of_service
	TrafficExecutionProgressOfService []*SlbExecutionProgress `json:"traffic_execution_progress_of_service,omitempty" xml:"traffic_execution_progress_of_service,omitempty" type:"Repeated"`
	// service_execution_progress_group
	ServiceExecutionProgressGroup []*TaskExecutionProgress `json:"service_execution_progress_group,omitempty" xml:"service_execution_progress_group,omitempty" type:"Repeated"`
	// rollback_service_execution_progress_group
	RollbackServiceExecutionProgressGroup []*TaskExecutionProgress `json:"rollback_service_execution_progress_group,omitempty" xml:"rollback_service_execution_progress_group,omitempty" type:"Repeated"`
	// base_progress
	BaseProgress *ResourceGroupExecutionProgress `json:"base_progress,omitempty" xml:"base_progress,omitempty"`
}

func (s BGReleaseExecutionProgress) String() string {
	return tea.Prettify(s)
}

func (s BGReleaseExecutionProgress) GoString() string {
	return s.String()
}

func (s *BGReleaseExecutionProgress) SetUnitId(v string) *BGReleaseExecutionProgress {
	s.UnitId = &v
	return s
}

func (s *BGReleaseExecutionProgress) SetUnitType(v string) *BGReleaseExecutionProgress {
	s.UnitType = &v
	return s
}

func (s *BGReleaseExecutionProgress) SetResourceType(v string) *BGReleaseExecutionProgress {
	s.ResourceType = &v
	return s
}

func (s *BGReleaseExecutionProgress) SetTrafficExecutionProgressOfService(v []*SlbExecutionProgress) *BGReleaseExecutionProgress {
	s.TrafficExecutionProgressOfService = v
	return s
}

func (s *BGReleaseExecutionProgress) SetServiceExecutionProgressGroup(v []*TaskExecutionProgress) *BGReleaseExecutionProgress {
	s.ServiceExecutionProgressGroup = v
	return s
}

func (s *BGReleaseExecutionProgress) SetRollbackServiceExecutionProgressGroup(v []*TaskExecutionProgress) *BGReleaseExecutionProgress {
	s.RollbackServiceExecutionProgressGroup = v
	return s
}

func (s *BGReleaseExecutionProgress) SetBaseProgress(v *ResourceGroupExecutionProgress) *BGReleaseExecutionProgress {
	s.BaseProgress = v
	return s
}

// 对一个对象执行一条指令的结果。
type SingleExecResult struct {
	// 执行结果详情。如果成功，为执行日志；如果失败，为错误信息
	ExecuteDetails *string `json:"execute_details,omitempty" xml:"execute_details,omitempty"`
	// 执行结束时间
	FinishTime *int `json:"finish_time,omitempty" xml:"finish_time,omitempty"`
	// 执行开始时间
	StartTime *int `json:"start_time,omitempty" xml:"start_time,omitempty"`
	// 执行结果状态。取值列表：
	//                     EXECUTING：执行中；
	//                     SUCCESS：执行成功；
	//                     FAILED：执行失败；
	//                     IGNORED：已忽略；
	//                     TIME_OUT：已超时
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 执行对象。比如一台机器的ip
	Target *string `json:"target,omitempty" xml:"target,omitempty"`
}

func (s SingleExecResult) String() string {
	return tea.Prettify(s)
}

func (s SingleExecResult) GoString() string {
	return s.String()
}

func (s *SingleExecResult) SetExecuteDetails(v string) *SingleExecResult {
	s.ExecuteDetails = &v
	return s
}

func (s *SingleExecResult) SetFinishTime(v int) *SingleExecResult {
	s.FinishTime = &v
	return s
}

func (s *SingleExecResult) SetStartTime(v int) *SingleExecResult {
	s.StartTime = &v
	return s
}

func (s *SingleExecResult) SetStatus(v string) *SingleExecResult {
	s.Status = &v
	return s
}

func (s *SingleExecResult) SetTarget(v string) *SingleExecResult {
	s.Target = &v
	return s
}

// 虚拟服务器组挂载信息
type VServerGroupMountInfo struct {
	// iaas id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// paas id
	PaasId *string `json:"paas_id,omitempty" xml:"paas_id,omitempty"`
	// 权重信息
	MountWeights []*MountWeight `json:"mount_weights,omitempty" xml:"mount_weights,omitempty" type:"Repeated"`
}

func (s VServerGroupMountInfo) String() string {
	return tea.Prettify(s)
}

func (s VServerGroupMountInfo) GoString() string {
	return s.String()
}

func (s *VServerGroupMountInfo) SetIaasId(v string) *VServerGroupMountInfo {
	s.IaasId = &v
	return s
}

func (s *VServerGroupMountInfo) SetName(v string) *VServerGroupMountInfo {
	s.Name = &v
	return s
}

func (s *VServerGroupMountInfo) SetPaasId(v string) *VServerGroupMountInfo {
	s.PaasId = &v
	return s
}

func (s *VServerGroupMountInfo) SetMountWeights(v []*MountWeight) *VServerGroupMountInfo {
	s.MountWeights = v
	return s
}

// 运维进程
type OpsProcessDefinition struct {
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 指令名称
	Instruction *string `json:"instruction,omitempty" xml:"instruction,omitempty"`
	// 进程名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 运维类型
	OpsType *string `json:"ops_type,omitempty" xml:"ops_type,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// 类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 概览信息
	Arrangements []*ArrangementInfo `json:"arrangements,omitempty" xml:"arrangements,omitempty" type:"Repeated"`
	// 环境变量
	EnvConfig []*Pair `json:"env_config,omitempty" xml:"env_config,omitempty" type:"Repeated"`
	// 支持的状态转换列表
	SupportedTransitions []*string `json:"supported_transitions,omitempty" xml:"supported_transitions,omitempty" type:"Repeated"`
	// 节点ID
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty"`
	// 状态
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 开始时间
	StartedTime *string `json:"started_time,omitempty" xml:"started_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 结束时间
	FinishedTime *string `json:"finished_time,omitempty" xml:"finished_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 可独立执行
	StandaloneExecutable *bool `json:"standalone_executable,omitempty" xml:"standalone_executable,omitempty"`
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s OpsProcessDefinition) String() string {
	return tea.Prettify(s)
}

func (s OpsProcessDefinition) GoString() string {
	return s.String()
}

func (s *OpsProcessDefinition) SetDescription(v string) *OpsProcessDefinition {
	s.Description = &v
	return s
}

func (s *OpsProcessDefinition) SetInstruction(v string) *OpsProcessDefinition {
	s.Instruction = &v
	return s
}

func (s *OpsProcessDefinition) SetName(v string) *OpsProcessDefinition {
	s.Name = &v
	return s
}

func (s *OpsProcessDefinition) SetOpsType(v string) *OpsProcessDefinition {
	s.OpsType = &v
	return s
}

func (s *OpsProcessDefinition) SetPlanId(v string) *OpsProcessDefinition {
	s.PlanId = &v
	return s
}

func (s *OpsProcessDefinition) SetType(v string) *OpsProcessDefinition {
	s.Type = &v
	return s
}

func (s *OpsProcessDefinition) SetArrangements(v []*ArrangementInfo) *OpsProcessDefinition {
	s.Arrangements = v
	return s
}

func (s *OpsProcessDefinition) SetEnvConfig(v []*Pair) *OpsProcessDefinition {
	s.EnvConfig = v
	return s
}

func (s *OpsProcessDefinition) SetSupportedTransitions(v []*string) *OpsProcessDefinition {
	s.SupportedTransitions = v
	return s
}

func (s *OpsProcessDefinition) SetNodeId(v string) *OpsProcessDefinition {
	s.NodeId = &v
	return s
}

func (s *OpsProcessDefinition) SetState(v string) *OpsProcessDefinition {
	s.State = &v
	return s
}

func (s *OpsProcessDefinition) SetStartedTime(v string) *OpsProcessDefinition {
	s.StartedTime = &v
	return s
}

func (s *OpsProcessDefinition) SetFinishedTime(v string) *OpsProcessDefinition {
	s.FinishedTime = &v
	return s
}

func (s *OpsProcessDefinition) SetStandaloneExecutable(v bool) *OpsProcessDefinition {
	s.StandaloneExecutable = &v
	return s
}

func (s *OpsProcessDefinition) SetId(v string) *OpsProcessDefinition {
	s.Id = &v
	return s
}

// 记录额外信息，核心是一个 Key-Value 对
type Tag struct {
	// 可读键名
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// 键名
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 映射类型，可选
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 键值
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s Tag) String() string {
	return tea.Prettify(s)
}

func (s Tag) GoString() string {
	return s.String()
}

func (s *Tag) SetDisplayName(v string) *Tag {
	s.DisplayName = &v
	return s
}

func (s *Tag) SetKey(v string) *Tag {
	s.Key = &v
	return s
}

func (s *Tag) SetType(v string) *Tag {
	s.Type = &v
	return s
}

func (s *Tag) SetValue(v string) *Tag {
	s.Value = &v
	return s
}

// Workspace
type Workspace struct {
	// 创建时间
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// workspace 显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// workspace 名称
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 工作空间唯一标识
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// workspace 名称（等同于唯一标识）
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 网络类型
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// workspace所在regionId
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// region id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// 所属租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// 最近更新时间
	UpdateTime *string `json:"update_time,omitempty" xml:"update_time,omitempty"`
	// workspace所在zoneIdentity列表
	Zones []*string `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
	// 工作空间类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s Workspace) String() string {
	return tea.Prettify(s)
}

func (s Workspace) GoString() string {
	return s.String()
}

func (s *Workspace) SetCreateTime(v string) *Workspace {
	s.CreateTime = &v
	return s
}

func (s *Workspace) SetDisplayName(v string) *Workspace {
	s.DisplayName = &v
	return s
}

func (s *Workspace) SetId(v string) *Workspace {
	s.Id = &v
	return s
}

func (s *Workspace) SetIdentity(v string) *Workspace {
	s.Identity = &v
	return s
}

func (s *Workspace) SetName(v string) *Workspace {
	s.Name = &v
	return s
}

func (s *Workspace) SetNetworkType(v string) *Workspace {
	s.NetworkType = &v
	return s
}

func (s *Workspace) SetRegion(v string) *Workspace {
	s.Region = &v
	return s
}

func (s *Workspace) SetRegionId(v string) *Workspace {
	s.RegionId = &v
	return s
}

func (s *Workspace) SetTenant(v string) *Workspace {
	s.Tenant = &v
	return s
}

func (s *Workspace) SetUpdateTime(v string) *Workspace {
	s.UpdateTime = &v
	return s
}

func (s *Workspace) SetZones(v []*string) *Workspace {
	s.Zones = v
	return s
}

func (s *Workspace) SetType(v string) *Workspace {
	s.Type = &v
	return s
}

// 应用额外元数据信息
type AppExtraInfo struct {
	// 应用额外元数据名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 元数据类型为 TEXT, USER 类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 元数据值
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s AppExtraInfo) String() string {
	return tea.Prettify(s)
}

func (s AppExtraInfo) GoString() string {
	return s.String()
}

func (s *AppExtraInfo) SetName(v string) *AppExtraInfo {
	s.Name = &v
	return s
}

func (s *AppExtraInfo) SetType(v string) *AppExtraInfo {
	s.Type = &v
	return s
}

func (s *AppExtraInfo) SetValue(v string) *AppExtraInfo {
	s.Value = &v
	return s
}

// 合法的运维状态
type OpsTargetLegalStates struct {
	// 目标类型
	TargetType *string `json:"target_type,omitempty" xml:"target_type,omitempty"`
	// 合法状态
	States []*string `json:"states,omitempty" xml:"states,omitempty" type:"Repeated"`
}

func (s OpsTargetLegalStates) String() string {
	return tea.Prettify(s)
}

func (s OpsTargetLegalStates) GoString() string {
	return s.String()
}

func (s *OpsTargetLegalStates) SetTargetType(v string) *OpsTargetLegalStates {
	s.TargetType = &v
	return s
}

func (s *OpsTargetLegalStates) SetStates(v []*string) *OpsTargetLegalStates {
	s.States = v
	return s
}

// sidecar生效范围详情
type SidecarScopeDetail struct {
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一id，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// scope identity展示名称
	ScopeIdentityDisplayName *string `json:"scope_identity_display_name,omitempty" xml:"scope_identity_display_name,omitempty"`
	// scope对应的唯一标识符
	ScopeIdentityName *string `json:"scope_identity_name,omitempty" xml:"scope_identity_name,omitempty"`
}

func (s SidecarScopeDetail) String() string {
	return tea.Prettify(s)
}

func (s SidecarScopeDetail) GoString() string {
	return s.String()
}

func (s *SidecarScopeDetail) SetScope(v string) *SidecarScopeDetail {
	s.Scope = &v
	return s
}

func (s *SidecarScopeDetail) SetScopeIdentity(v string) *SidecarScopeDetail {
	s.ScopeIdentity = &v
	return s
}

func (s *SidecarScopeDetail) SetScopeIdentityDisplayName(v string) *SidecarScopeDetail {
	s.ScopeIdentityDisplayName = &v
	return s
}

func (s *SidecarScopeDetail) SetScopeIdentityName(v string) *SidecarScopeDetail {
	s.ScopeIdentityName = &v
	return s
}

// 技术栈支持的操作系统
type BuildpackOS struct {
	// creationTime
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// extraInfo
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 全名
	FullName *string `json:"full_name,omitempty" xml:"full_name,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// modificationTime
	ModificationTime *string `json:"modification_time,omitempty" xml:"modification_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 名字
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 操作系统位数
	OsBit *int64 `json:"os_bit,omitempty" xml:"os_bit,omitempty"`
	// supportedCloudDisplayNames
	SupportedCloudDisplayNames []*string `json:"supported_cloud_display_names,omitempty" xml:"supported_cloud_display_names,omitempty" type:"Repeated"`
	// supportedCloudNames
	SupportedCloudNames []*string `json:"supported_cloud_names,omitempty" xml:"supported_cloud_names,omitempty" type:"Repeated"`
	// 版本
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
	// 操作系统位数，e.g. 32 or 64
	OsBitNum *int64 `json:"os_bit_num,omitempty" xml:"os_bit_num,omitempty"`
}

func (s BuildpackOS) String() string {
	return tea.Prettify(s)
}

func (s BuildpackOS) GoString() string {
	return s.String()
}

func (s *BuildpackOS) SetCreationTime(v string) *BuildpackOS {
	s.CreationTime = &v
	return s
}

func (s *BuildpackOS) SetDescription(v string) *BuildpackOS {
	s.Description = &v
	return s
}

func (s *BuildpackOS) SetExtraInfo(v string) *BuildpackOS {
	s.ExtraInfo = &v
	return s
}

func (s *BuildpackOS) SetFullName(v string) *BuildpackOS {
	s.FullName = &v
	return s
}

func (s *BuildpackOS) SetId(v int64) *BuildpackOS {
	s.Id = &v
	return s
}

func (s *BuildpackOS) SetModificationTime(v string) *BuildpackOS {
	s.ModificationTime = &v
	return s
}

func (s *BuildpackOS) SetName(v string) *BuildpackOS {
	s.Name = &v
	return s
}

func (s *BuildpackOS) SetOsBit(v int64) *BuildpackOS {
	s.OsBit = &v
	return s
}

func (s *BuildpackOS) SetSupportedCloudDisplayNames(v []*string) *BuildpackOS {
	s.SupportedCloudDisplayNames = v
	return s
}

func (s *BuildpackOS) SetSupportedCloudNames(v []*string) *BuildpackOS {
	s.SupportedCloudNames = v
	return s
}

func (s *BuildpackOS) SetVersion(v string) *BuildpackOS {
	s.Version = &v
	return s
}

func (s *BuildpackOS) SetOsBitNum(v int64) *BuildpackOS {
	s.OsBitNum = &v
	return s
}

// AppServiceExecutionProgressWithRollbackInfo
type AppServiceExecutionProgressWithRollbackInfo struct {
	// progress
	Progress *AppServiceExecutionProgress `json:"progress,omitempty" xml:"progress,omitempty"`
	// rollback_progress
	RollbackProgress *AppServiceExecutionProgress `json:"rollback_progress,omitempty" xml:"rollback_progress,omitempty"`
}

func (s AppServiceExecutionProgressWithRollbackInfo) String() string {
	return tea.Prettify(s)
}

func (s AppServiceExecutionProgressWithRollbackInfo) GoString() string {
	return s.String()
}

func (s *AppServiceExecutionProgressWithRollbackInfo) SetProgress(v *AppServiceExecutionProgress) *AppServiceExecutionProgressWithRollbackInfo {
	s.Progress = v
	return s
}

func (s *AppServiceExecutionProgressWithRollbackInfo) SetRollbackProgress(v *AppServiceExecutionProgress) *AppServiceExecutionProgressWithRollbackInfo {
	s.RollbackProgress = v
	return s
}

// 工作空间视图
type WorkspaceView struct {
	// 部署单元列表
	Cells []*CellView `json:"cells,omitempty" xml:"cells,omitempty" type:"Repeated"`
	// 显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// table id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 标识
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// 网络类型
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// workspace所在region名称
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
}

func (s WorkspaceView) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceView) GoString() string {
	return s.String()
}

func (s *WorkspaceView) SetCells(v []*CellView) *WorkspaceView {
	s.Cells = v
	return s
}

func (s *WorkspaceView) SetDisplayName(v string) *WorkspaceView {
	s.DisplayName = &v
	return s
}

func (s *WorkspaceView) SetId(v string) *WorkspaceView {
	s.Id = &v
	return s
}

func (s *WorkspaceView) SetIdentity(v string) *WorkspaceView {
	s.Identity = &v
	return s
}

func (s *WorkspaceView) SetNetworkType(v string) *WorkspaceView {
	s.NetworkType = &v
	return s
}

func (s *WorkspaceView) SetRegion(v string) *WorkspaceView {
	s.Region = &v
	return s
}

// sidecar版本模板配置
type SidecarTemplateConfig struct {
	// 类型：默认、透明劫持
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 模板内容
	Template *string `json:"template,omitempty" xml:"template,omitempty"`
}

func (s SidecarTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s SidecarTemplateConfig) GoString() string {
	return s.String()
}

func (s *SidecarTemplateConfig) SetType(v string) *SidecarTemplateConfig {
	s.Type = &v
	return s
}

func (s *SidecarTemplateConfig) SetTemplate(v string) *SidecarTemplateConfig {
	s.Template = &v
	return s
}

// Cell
type Cell struct {
	// 部署区域名称
	DeploymentZone *string `json:"deployment_zone,omitempty" xml:"deployment_zone,omitempty"`
	// 部署单元描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 部署单元名称
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 部署单元所属主可用区ID列表
	MasterZone *string `json:"master_zone,omitempty" xml:"master_zone,omitempty"`
	// 部署单元显示名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 部署单元对应的paas id
	PaasId *string `json:"paas_id,omitempty" xml:"paas_id,omitempty"`
	// 部署单元状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// 部署单元类型[单元化模式特有]。
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// 环境名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
	// 部署单元所属可用区ID列表
	Zones []*string `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
	// displayName
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// appendedZoneIds
	AppendedZoneIds []*string `json:"appended_zone_ids,omitempty" xml:"appended_zone_ids,omitempty" type:"Repeated"`
}

func (s Cell) String() string {
	return tea.Prettify(s)
}

func (s Cell) GoString() string {
	return s.String()
}

func (s *Cell) SetDeploymentZone(v string) *Cell {
	s.DeploymentZone = &v
	return s
}

func (s *Cell) SetDescription(v string) *Cell {
	s.Description = &v
	return s
}

func (s *Cell) SetId(v string) *Cell {
	s.Id = &v
	return s
}

func (s *Cell) SetMasterZone(v string) *Cell {
	s.MasterZone = &v
	return s
}

func (s *Cell) SetName(v string) *Cell {
	s.Name = &v
	return s
}

func (s *Cell) SetPaasId(v string) *Cell {
	s.PaasId = &v
	return s
}

func (s *Cell) SetStatus(v string) *Cell {
	s.Status = &v
	return s
}

func (s *Cell) SetTenant(v string) *Cell {
	s.Tenant = &v
	return s
}

func (s *Cell) SetType(v string) *Cell {
	s.Type = &v
	return s
}

func (s *Cell) SetWorkspace(v string) *Cell {
	s.Workspace = &v
	return s
}

func (s *Cell) SetWorkspaceGroup(v string) *Cell {
	s.WorkspaceGroup = &v
	return s
}

func (s *Cell) SetZones(v []*string) *Cell {
	s.Zones = v
	return s
}

func (s *Cell) SetDisplayName(v string) *Cell {
	s.DisplayName = &v
	return s
}

func (s *Cell) SetAppendedZoneIds(v []*string) *Cell {
	s.AppendedZoneIds = v
	return s
}

// 应用参数配置管理-模板参数定义
type TemplateParamDef struct {
	// 数据保密级别，L1,L2,L3
	DataLevel *string `json:"data_level,omitempty" xml:"data_level,omitempty"`
	// 默认值，表达式解析结果为空时使用
	DefaultVal *string `json:"default_val,omitempty" xml:"default_val,omitempty"`
	// 是否已删除
	Deleted *bool `json:"deleted,omitempty" xml:"deleted,omitempty"`
	// 参数描述
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
	// 参数id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 参数名
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 版本
	ParamVersion *int64 `json:"param_version,omitempty" xml:"param_version,omitempty"`
	// 参数值类型，CONST/EXPR
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 参数值，可能是一个常量或者表达式
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	// 创建时间
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 修改时间
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
}

func (s TemplateParamDef) String() string {
	return tea.Prettify(s)
}

func (s TemplateParamDef) GoString() string {
	return s.String()
}

func (s *TemplateParamDef) SetDataLevel(v string) *TemplateParamDef {
	s.DataLevel = &v
	return s
}

func (s *TemplateParamDef) SetDefaultVal(v string) *TemplateParamDef {
	s.DefaultVal = &v
	return s
}

func (s *TemplateParamDef) SetDeleted(v bool) *TemplateParamDef {
	s.Deleted = &v
	return s
}

func (s *TemplateParamDef) SetDesc(v string) *TemplateParamDef {
	s.Desc = &v
	return s
}

func (s *TemplateParamDef) SetId(v string) *TemplateParamDef {
	s.Id = &v
	return s
}

func (s *TemplateParamDef) SetKey(v string) *TemplateParamDef {
	s.Key = &v
	return s
}

func (s *TemplateParamDef) SetParamVersion(v int64) *TemplateParamDef {
	s.ParamVersion = &v
	return s
}

func (s *TemplateParamDef) SetType(v string) *TemplateParamDef {
	s.Type = &v
	return s
}

func (s *TemplateParamDef) SetValue(v string) *TemplateParamDef {
	s.Value = &v
	return s
}

func (s *TemplateParamDef) SetCreatedTime(v string) *TemplateParamDef {
	s.CreatedTime = &v
	return s
}

func (s *TemplateParamDef) SetModifiedTime(v string) *TemplateParamDef {
	s.ModifiedTime = &v
	return s
}

// 技术栈版本的参数
type BuildpackParamTemplate struct {
	// 技术栈版本的id
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// 技术栈版本参数的默认值
	DefaultValue *string `json:"default_value,omitempty" xml:"default_value,omitempty"`
	// 技术栈版本参数的描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 技术栈版本参数的key
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 该技术栈版本参数是否是只读的
	Readonly *bool `json:"readonly,omitempty" xml:"readonly,omitempty"`
	// 该技术栈版本参数是否是必须的
	Required *bool `json:"required,omitempty" xml:"required,omitempty"`
}

func (s BuildpackParamTemplate) String() string {
	return tea.Prettify(s)
}

func (s BuildpackParamTemplate) GoString() string {
	return s.String()
}

func (s *BuildpackParamTemplate) SetBuildpackId(v string) *BuildpackParamTemplate {
	s.BuildpackId = &v
	return s
}

func (s *BuildpackParamTemplate) SetDefaultValue(v string) *BuildpackParamTemplate {
	s.DefaultValue = &v
	return s
}

func (s *BuildpackParamTemplate) SetDescription(v string) *BuildpackParamTemplate {
	s.Description = &v
	return s
}

func (s *BuildpackParamTemplate) SetId(v string) *BuildpackParamTemplate {
	s.Id = &v
	return s
}

func (s *BuildpackParamTemplate) SetKey(v string) *BuildpackParamTemplate {
	s.Key = &v
	return s
}

func (s *BuildpackParamTemplate) SetReadonly(v bool) *BuildpackParamTemplate {
	s.Readonly = &v
	return s
}

func (s *BuildpackParamTemplate) SetRequired(v bool) *BuildpackParamTemplate {
	s.Required = &v
	return s
}

// 一个部署起来提供服务的应用实例信息
type AppServiceEntity struct {
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// appName
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// buildpackFullVersion
	BuildpackFullVersion *string `json:"buildpack_full_version,omitempty" xml:"buildpack_full_version,omitempty"`
	// 构建包id
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// cellIds
	CellIds []*string `json:"cell_ids,omitempty" xml:"cell_ids,omitempty" type:"Repeated"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 当前应用服务用到的 ecs 资源列表
	EcsList []*Computer `json:"ecs_list,omitempty" xml:"ecs_list,omitempty" type:"Repeated"`
	// extendProperties
	ExtendProperties *string `json:"extend_properties,omitempty" xml:"extend_properties,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// isDefault
	IsDefault *bool `json:"is_default,omitempty" xml:"is_default,omitempty"`
	// isService
	IsService *bool `json:"is_service,omitempty" xml:"is_service,omitempty"`
	// lastDeployStatus
	LastDeployStatus *string `json:"last_deploy_status,omitempty" xml:"last_deploy_status,omitempty"`
	// lastDeployVersion
	LastDeployVersion *string `json:"last_deploy_version,omitempty" xml:"last_deploy_version,omitempty"`
	// lastOpsOrderId
	LastOpsOrderId *string `json:"last_ops_order_id,omitempty" xml:"last_ops_order_id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// ownerId
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty"`
	// 当前应用服务使用的 rds 资源列表
	RdsList []*DepsDatabase `json:"rds_list,omitempty" xml:"rds_list,omitempty" type:"Repeated"`
	// 当前应用服务使用的 slb 资源列表
	SlbList []*SLBInfo `json:"slb_list,omitempty" xml:"slb_list,omitempty" type:"Repeated"`
	// techstackId
	TechstackId *int64 `json:"techstack_id,omitempty" xml:"techstack_id,omitempty"`
	// techstackIdentity
	TechstackIdentity *string `json:"techstack_identity,omitempty" xml:"techstack_identity,omitempty"`
	// techstackName
	TechstackName *string `json:"techstack_name,omitempty" xml:"techstack_name,omitempty"`
	// 创建时间
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 修改时间
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 工作空间显示名称
	WorkspaceDisplayName *string `json:"workspace_display_name,omitempty" xml:"workspace_display_name,omitempty"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
	// 负责人登录名称
	OwnerLoginName *string `json:"owner_login_name,omitempty" xml:"owner_login_name,omitempty"`
	// 负责人显示名称
	OwnerDisplayName *string `json:"owner_display_name,omitempty" xml:"owner_display_name,omitempty"`
}

func (s AppServiceEntity) String() string {
	return tea.Prettify(s)
}

func (s AppServiceEntity) GoString() string {
	return s.String()
}

func (s *AppServiceEntity) SetAppId(v string) *AppServiceEntity {
	s.AppId = &v
	return s
}

func (s *AppServiceEntity) SetAppName(v string) *AppServiceEntity {
	s.AppName = &v
	return s
}

func (s *AppServiceEntity) SetBuildpackFullVersion(v string) *AppServiceEntity {
	s.BuildpackFullVersion = &v
	return s
}

func (s *AppServiceEntity) SetBuildpackId(v string) *AppServiceEntity {
	s.BuildpackId = &v
	return s
}

func (s *AppServiceEntity) SetCellIds(v []*string) *AppServiceEntity {
	s.CellIds = v
	return s
}

func (s *AppServiceEntity) SetDescription(v string) *AppServiceEntity {
	s.Description = &v
	return s
}

func (s *AppServiceEntity) SetEcsList(v []*Computer) *AppServiceEntity {
	s.EcsList = v
	return s
}

func (s *AppServiceEntity) SetExtendProperties(v string) *AppServiceEntity {
	s.ExtendProperties = &v
	return s
}

func (s *AppServiceEntity) SetId(v string) *AppServiceEntity {
	s.Id = &v
	return s
}

func (s *AppServiceEntity) SetIsDefault(v bool) *AppServiceEntity {
	s.IsDefault = &v
	return s
}

func (s *AppServiceEntity) SetIsService(v bool) *AppServiceEntity {
	s.IsService = &v
	return s
}

func (s *AppServiceEntity) SetLastDeployStatus(v string) *AppServiceEntity {
	s.LastDeployStatus = &v
	return s
}

func (s *AppServiceEntity) SetLastDeployVersion(v string) *AppServiceEntity {
	s.LastDeployVersion = &v
	return s
}

func (s *AppServiceEntity) SetLastOpsOrderId(v string) *AppServiceEntity {
	s.LastOpsOrderId = &v
	return s
}

func (s *AppServiceEntity) SetName(v string) *AppServiceEntity {
	s.Name = &v
	return s
}

func (s *AppServiceEntity) SetOwnerId(v string) *AppServiceEntity {
	s.OwnerId = &v
	return s
}

func (s *AppServiceEntity) SetRdsList(v []*DepsDatabase) *AppServiceEntity {
	s.RdsList = v
	return s
}

func (s *AppServiceEntity) SetSlbList(v []*SLBInfo) *AppServiceEntity {
	s.SlbList = v
	return s
}

func (s *AppServiceEntity) SetTechstackId(v int64) *AppServiceEntity {
	s.TechstackId = &v
	return s
}

func (s *AppServiceEntity) SetTechstackIdentity(v string) *AppServiceEntity {
	s.TechstackIdentity = &v
	return s
}

func (s *AppServiceEntity) SetTechstackName(v string) *AppServiceEntity {
	s.TechstackName = &v
	return s
}

func (s *AppServiceEntity) SetUtcCreate(v string) *AppServiceEntity {
	s.UtcCreate = &v
	return s
}

func (s *AppServiceEntity) SetUtcModified(v string) *AppServiceEntity {
	s.UtcModified = &v
	return s
}

func (s *AppServiceEntity) SetWorkspaceDisplayName(v string) *AppServiceEntity {
	s.WorkspaceDisplayName = &v
	return s
}

func (s *AppServiceEntity) SetWorkspaceId(v string) *AppServiceEntity {
	s.WorkspaceId = &v
	return s
}

func (s *AppServiceEntity) SetWorkspaceName(v string) *AppServiceEntity {
	s.WorkspaceName = &v
	return s
}

func (s *AppServiceEntity) SetOwnerLoginName(v string) *AppServiceEntity {
	s.OwnerLoginName = &v
	return s
}

func (s *AppServiceEntity) SetOwnerDisplayName(v string) *AppServiceEntity {
	s.OwnerDisplayName = &v
	return s
}

// 技术栈信息
type Techstack struct {
	// 描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// extraInfo
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 技术栈ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 标识符
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 作用域
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 技术栈状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s Techstack) String() string {
	return tea.Prettify(s)
}

func (s Techstack) GoString() string {
	return s.String()
}

func (s *Techstack) SetDescription(v string) *Techstack {
	s.Description = &v
	return s
}

func (s *Techstack) SetExtraInfo(v string) *Techstack {
	s.ExtraInfo = &v
	return s
}

func (s *Techstack) SetId(v string) *Techstack {
	s.Id = &v
	return s
}

func (s *Techstack) SetIdentity(v string) *Techstack {
	s.Identity = &v
	return s
}

func (s *Techstack) SetName(v string) *Techstack {
	s.Name = &v
	return s
}

func (s *Techstack) SetScope(v string) *Techstack {
	s.Scope = &v
	return s
}

func (s *Techstack) SetStatus(v string) *Techstack {
	s.Status = &v
	return s
}

// ConnectionStub
type ConnectionStub struct {
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// cloud
	Cloud *Cloud `json:"cloud,omitempty" xml:"cloud,omitempty"`
	// StubType
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// tenantName
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// tenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s ConnectionStub) String() string {
	return tea.Prettify(s)
}

func (s ConnectionStub) GoString() string {
	return s.String()
}

func (s *ConnectionStub) SetId(v int64) *ConnectionStub {
	s.Id = &v
	return s
}

func (s *ConnectionStub) SetCloud(v *Cloud) *ConnectionStub {
	s.Cloud = v
	return s
}

func (s *ConnectionStub) SetType(v string) *ConnectionStub {
	s.Type = &v
	return s
}

func (s *ConnectionStub) SetTenantName(v string) *ConnectionStub {
	s.TenantName = &v
	return s
}

func (s *ConnectionStub) SetTenantId(v string) *ConnectionStub {
	s.TenantId = &v
	return s
}

// 一个运维操作单元。
type OpsUnit struct {
	// 单元所属部署区
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 包含在此单元中进行运维操作的计算容器列表
	Computers []*OpsComputer `json:"computers,omitempty" xml:"computers,omitempty" type:"Repeated"`
	// 单元所属地域
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// 单元所属可用区
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty"`
}

func (s OpsUnit) String() string {
	return tea.Prettify(s)
}

func (s OpsUnit) GoString() string {
	return s.String()
}

func (s *OpsUnit) SetCell(v string) *OpsUnit {
	s.Cell = &v
	return s
}

func (s *OpsUnit) SetComputers(v []*OpsComputer) *OpsUnit {
	s.Computers = v
	return s
}

func (s *OpsUnit) SetRegion(v string) *OpsUnit {
	s.Region = &v
	return s
}

func (s *OpsUnit) SetZone(v string) *OpsUnit {
	s.Zone = &v
	return s
}

// 应用管理-当前应用的依赖关系
type AppDepend struct {
	// 当前应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 该应用依赖的所有应用的 id 列表字符串
	DependAppNames *string `json:"depend_app_names,omitempty" xml:"depend_app_names,omitempty"`
	// 应用显示名称
	AppDisplayName *string `json:"app_display_name,omitempty" xml:"app_display_name,omitempty"`
}

func (s AppDepend) String() string {
	return tea.Prettify(s)
}

func (s AppDepend) GoString() string {
	return s.String()
}

func (s *AppDepend) SetAppName(v string) *AppDepend {
	s.AppName = &v
	return s
}

func (s *AppDepend) SetDependAppNames(v string) *AppDepend {
	s.DependAppNames = &v
	return s
}

func (s *AppDepend) SetAppDisplayName(v string) *AppDepend {
	s.AppDisplayName = &v
	return s
}

// 一个技术栈版本的基本信息
type Buildpack struct {
	// 可以使用该技术栈版本的租户名称
	AvailableTenantNames []*string `json:"available_tenant_names,omitempty" xml:"available_tenant_names,omitempty" type:"Repeated"`
	// 技术栈版本的编译打包命令
	BuildCommand *string `json:"build_command,omitempty" xml:"build_command,omitempty"`
	// 分享给其他租户时留下的联系信息
	ContactInfo *string `json:"contact_info,omitempty" xml:"contact_info,omitempty"`
	// 当前技术栈版本是否是debug模式
	DebugMode *bool `json:"debug_mode,omitempty" xml:"debug_mode,omitempty"`
	// 废弃技术栈版本的原因
	DepracationNote *string `json:"depracation_note,omitempty" xml:"depracation_note,omitempty"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 技术栈的版本号
	FullVersion *string `json:"full_version,omitempty" xml:"full_version,omitempty"`
	// 技术栈版本ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 行业标志,I(金区)或者N(非金区)
	IndustryLabel *string `json:"industry_label,omitempty" xml:"industry_label,omitempty"`
	// 主要版本号
	MajorVersion *int64 `json:"major_version,omitempty" xml:"major_version,omitempty"`
	// 次要版本号
	MinorVersion *int64 `json:"minor_version,omitempty" xml:"minor_version,omitempty"`
	// 补丁版本号
	PatchVersion *int64 `json:"patch_version,omitempty" xml:"patch_version,omitempty"`
	// 发布时间
	PublicationTime *string `json:"publication_time,omitempty" xml:"publication_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 技术栈版本是系统系统的还是用户自定义的
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 技术栈版本的状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s Buildpack) String() string {
	return tea.Prettify(s)
}

func (s Buildpack) GoString() string {
	return s.String()
}

func (s *Buildpack) SetAvailableTenantNames(v []*string) *Buildpack {
	s.AvailableTenantNames = v
	return s
}

func (s *Buildpack) SetBuildCommand(v string) *Buildpack {
	s.BuildCommand = &v
	return s
}

func (s *Buildpack) SetContactInfo(v string) *Buildpack {
	s.ContactInfo = &v
	return s
}

func (s *Buildpack) SetDebugMode(v bool) *Buildpack {
	s.DebugMode = &v
	return s
}

func (s *Buildpack) SetDepracationNote(v string) *Buildpack {
	s.DepracationNote = &v
	return s
}

func (s *Buildpack) SetDescription(v string) *Buildpack {
	s.Description = &v
	return s
}

func (s *Buildpack) SetFullVersion(v string) *Buildpack {
	s.FullVersion = &v
	return s
}

func (s *Buildpack) SetId(v string) *Buildpack {
	s.Id = &v
	return s
}

func (s *Buildpack) SetIndustryLabel(v string) *Buildpack {
	s.IndustryLabel = &v
	return s
}

func (s *Buildpack) SetMajorVersion(v int64) *Buildpack {
	s.MajorVersion = &v
	return s
}

func (s *Buildpack) SetMinorVersion(v int64) *Buildpack {
	s.MinorVersion = &v
	return s
}

func (s *Buildpack) SetPatchVersion(v int64) *Buildpack {
	s.PatchVersion = &v
	return s
}

func (s *Buildpack) SetPublicationTime(v string) *Buildpack {
	s.PublicationTime = &v
	return s
}

func (s *Buildpack) SetScope(v string) *Buildpack {
	s.Scope = &v
	return s
}

func (s *Buildpack) SetStatus(v string) *Buildpack {
	s.Status = &v
	return s
}

// TechstackBuildpackCount
type TechstackBuildpackCount struct {
	// buildpackCount
	BuildpackCount *int64 `json:"buildpack_count,omitempty" xml:"buildpack_count,omitempty"`
	// creation_time
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// extra_info
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// modification_time
	ModificationTime *string `json:"modification_time,omitempty" xml:"modification_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// scope
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s TechstackBuildpackCount) String() string {
	return tea.Prettify(s)
}

func (s TechstackBuildpackCount) GoString() string {
	return s.String()
}

func (s *TechstackBuildpackCount) SetBuildpackCount(v int64) *TechstackBuildpackCount {
	s.BuildpackCount = &v
	return s
}

func (s *TechstackBuildpackCount) SetCreationTime(v string) *TechstackBuildpackCount {
	s.CreationTime = &v
	return s
}

func (s *TechstackBuildpackCount) SetDescription(v string) *TechstackBuildpackCount {
	s.Description = &v
	return s
}

func (s *TechstackBuildpackCount) SetExtraInfo(v string) *TechstackBuildpackCount {
	s.ExtraInfo = &v
	return s
}

func (s *TechstackBuildpackCount) SetId(v string) *TechstackBuildpackCount {
	s.Id = &v
	return s
}

func (s *TechstackBuildpackCount) SetIdentity(v string) *TechstackBuildpackCount {
	s.Identity = &v
	return s
}

func (s *TechstackBuildpackCount) SetModificationTime(v string) *TechstackBuildpackCount {
	s.ModificationTime = &v
	return s
}

func (s *TechstackBuildpackCount) SetName(v string) *TechstackBuildpackCount {
	s.Name = &v
	return s
}

func (s *TechstackBuildpackCount) SetScope(v string) *TechstackBuildpackCount {
	s.Scope = &v
	return s
}

func (s *TechstackBuildpackCount) SetStatus(v string) *TechstackBuildpackCount {
	s.Status = &v
	return s
}

// ServiceInfoGroupCollection
type ServiceInfoGroupCollection struct {
	// service info groups
	ServiceInfoGroups *ServiceInfoGroup `json:"service_info_groups,omitempty" xml:"service_info_groups,omitempty"`
}

func (s ServiceInfoGroupCollection) String() string {
	return tea.Prettify(s)
}

func (s ServiceInfoGroupCollection) GoString() string {
	return s.String()
}

func (s *ServiceInfoGroupCollection) SetServiceInfoGroups(v *ServiceInfoGroup) *ServiceInfoGroupCollection {
	s.ServiceInfoGroups = v
	return s
}

// NotificationConfig
type NotificationConfig struct {
	// 接收人列表
	Receivers []*NotificationReceiver `json:"receivers,omitempty" xml:"receivers,omitempty" type:"Repeated"`
	// 类型
	NotificationType *string `json:"notification_type,omitempty" xml:"notification_type,omitempty"`
	// 是否开启，默认不开启
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// cloud_web_url
	CloudWebUrl *string `json:"cloud_web_url,omitempty" xml:"cloud_web_url,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s NotificationConfig) String() string {
	return tea.Prettify(s)
}

func (s NotificationConfig) GoString() string {
	return s.String()
}

func (s *NotificationConfig) SetReceivers(v []*NotificationReceiver) *NotificationConfig {
	s.Receivers = v
	return s
}

func (s *NotificationConfig) SetNotificationType(v string) *NotificationConfig {
	s.NotificationType = &v
	return s
}

func (s *NotificationConfig) SetEnabled(v bool) *NotificationConfig {
	s.Enabled = &v
	return s
}

func (s *NotificationConfig) SetCloudWebUrl(v string) *NotificationConfig {
	s.CloudWebUrl = &v
	return s
}

func (s *NotificationConfig) SetId(v string) *NotificationConfig {
	s.Id = &v
	return s
}

// 分页查询
type PaginationQuery struct {
	// 当前页码
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 模糊搜索
	FuzzyName *string `json:"fuzzy_name,omitempty" xml:"fuzzy_name,omitempty"`
}

func (s PaginationQuery) String() string {
	return tea.Prettify(s)
}

func (s PaginationQuery) GoString() string {
	return s.String()
}

func (s *PaginationQuery) SetCurrentPage(v int64) *PaginationQuery {
	s.CurrentPage = &v
	return s
}

func (s *PaginationQuery) SetPageSize(v int64) *PaginationQuery {
	s.PageSize = &v
	return s
}

func (s *PaginationQuery) SetFuzzyName(v string) *PaginationQuery {
	s.FuzzyName = &v
	return s
}

// AppTechstackRelation
type AppTechstackRelation struct {
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// buildpackArch
	BuildpackArch *string `json:"buildpack_arch,omitempty" xml:"buildpack_arch,omitempty"`
	// creationTime
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// extraInfo
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// modificationTime
	ModificationTime *string `json:"modification_time,omitempty" xml:"modification_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// techstackId
	TechstackId *int64 `json:"techstack_id,omitempty" xml:"techstack_id,omitempty"`
	// techstackIdentity
	TechstackIdentity *string `json:"techstack_identity,omitempty" xml:"techstack_identity,omitempty"`
	// techstackName
	TechstackName *string `json:"techstack_name,omitempty" xml:"techstack_name,omitempty"`
}

func (s AppTechstackRelation) String() string {
	return tea.Prettify(s)
}

func (s AppTechstackRelation) GoString() string {
	return s.String()
}

func (s *AppTechstackRelation) SetAppId(v string) *AppTechstackRelation {
	s.AppId = &v
	return s
}

func (s *AppTechstackRelation) SetBuildpackArch(v string) *AppTechstackRelation {
	s.BuildpackArch = &v
	return s
}

func (s *AppTechstackRelation) SetCreationTime(v string) *AppTechstackRelation {
	s.CreationTime = &v
	return s
}

func (s *AppTechstackRelation) SetExtraInfo(v string) *AppTechstackRelation {
	s.ExtraInfo = &v
	return s
}

func (s *AppTechstackRelation) SetId(v string) *AppTechstackRelation {
	s.Id = &v
	return s
}

func (s *AppTechstackRelation) SetModificationTime(v string) *AppTechstackRelation {
	s.ModificationTime = &v
	return s
}

func (s *AppTechstackRelation) SetTechstackId(v int64) *AppTechstackRelation {
	s.TechstackId = &v
	return s
}

func (s *AppTechstackRelation) SetTechstackIdentity(v string) *AppTechstackRelation {
	s.TechstackIdentity = &v
	return s
}

func (s *AppTechstackRelation) SetTechstackName(v string) *AppTechstackRelation {
	s.TechstackName = &v
	return s
}

// <String, Boolean> 映射
type MapStringToBooleanEntity struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// value
	Value *bool `json:"value,omitempty" xml:"value,omitempty"`
}

func (s MapStringToBooleanEntity) String() string {
	return tea.Prettify(s)
}

func (s MapStringToBooleanEntity) GoString() string {
	return s.String()
}

func (s *MapStringToBooleanEntity) SetKey(v string) *MapStringToBooleanEntity {
	s.Key = &v
	return s
}

func (s *MapStringToBooleanEntity) SetValue(v bool) *MapStringToBooleanEntity {
	s.Value = &v
	return s
}

// 蓝绿发布概览
type BGReleaseArrangement struct {
	// 活跃单元 ID
	ActiveUnitId *string `json:"active_unit_id,omitempty" xml:"active_unit_id,omitempty"`
	// 非活跃单元 ID
	DeactivatedUnitId *string `json:"deactivated_unit_id,omitempty" xml:"deactivated_unit_id,omitempty"`
	// 灰度进程ID
	GrayTrafficProcessId *string `json:"gray_traffic_process_id,omitempty" xml:"gray_traffic_process_id,omitempty"`
	// 回滚进程ID
	RollbackProcessId *string `json:"rollback_process_id,omitempty" xml:"rollback_process_id,omitempty"`
	// 发布应用信息集合
	ServiceInfoCollection []*ServiceInfo `json:"service_info_collection,omitempty" xml:"service_info_collection,omitempty" type:"Repeated"`
	// 类型
	StepType *string `json:"step_type,omitempty" xml:"step_type,omitempty"`
	// 单元类型
	UnitType *string `json:"unit_type,omitempty" xml:"unit_type,omitempty"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 类型
	ArrangementType *string `json:"arrangement_type,omitempty" xml:"arrangement_type,omitempty"`
	// 环境变量
	EnvConfig []*Pair `json:"env_config,omitempty" xml:"env_config,omitempty" type:"Repeated"`
	// 合法状态列表
	TargetsLegalStates []*OpsTargetLegalStates `json:"targets_legal_states,omitempty" xml:"targets_legal_states,omitempty" type:"Repeated"`
	// 运维进程ID
	ProcessDefinitionId *string `json:"process_definition_id,omitempty" xml:"process_definition_id,omitempty"`
	// 父运维进程ID
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// 父进程类型
	ParentEntityType *string `json:"parent_entity_type,omitempty" xml:"parent_entity_type,omitempty"`
	// 支持的转换类型
	SupportedTransitions []*string `json:"supported_transitions,omitempty" xml:"supported_transitions,omitempty" type:"Repeated"`
	// 流程节点 ID
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty"`
	// 状态
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 开始时间
	StartedTime *string `json:"started_time,omitempty" xml:"started_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 结束时间
	FinishedTime *string `json:"finished_time,omitempty" xml:"finished_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 是否可以独立运行
	StandaloneExecutable *bool `json:"standalone_executable,omitempty" xml:"standalone_executable,omitempty"`
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s BGReleaseArrangement) String() string {
	return tea.Prettify(s)
}

func (s BGReleaseArrangement) GoString() string {
	return s.String()
}

func (s *BGReleaseArrangement) SetActiveUnitId(v string) *BGReleaseArrangement {
	s.ActiveUnitId = &v
	return s
}

func (s *BGReleaseArrangement) SetDeactivatedUnitId(v string) *BGReleaseArrangement {
	s.DeactivatedUnitId = &v
	return s
}

func (s *BGReleaseArrangement) SetGrayTrafficProcessId(v string) *BGReleaseArrangement {
	s.GrayTrafficProcessId = &v
	return s
}

func (s *BGReleaseArrangement) SetRollbackProcessId(v string) *BGReleaseArrangement {
	s.RollbackProcessId = &v
	return s
}

func (s *BGReleaseArrangement) SetServiceInfoCollection(v []*ServiceInfo) *BGReleaseArrangement {
	s.ServiceInfoCollection = v
	return s
}

func (s *BGReleaseArrangement) SetStepType(v string) *BGReleaseArrangement {
	s.StepType = &v
	return s
}

func (s *BGReleaseArrangement) SetUnitType(v string) *BGReleaseArrangement {
	s.UnitType = &v
	return s
}

func (s *BGReleaseArrangement) SetName(v string) *BGReleaseArrangement {
	s.Name = &v
	return s
}

func (s *BGReleaseArrangement) SetArrangementType(v string) *BGReleaseArrangement {
	s.ArrangementType = &v
	return s
}

func (s *BGReleaseArrangement) SetEnvConfig(v []*Pair) *BGReleaseArrangement {
	s.EnvConfig = v
	return s
}

func (s *BGReleaseArrangement) SetTargetsLegalStates(v []*OpsTargetLegalStates) *BGReleaseArrangement {
	s.TargetsLegalStates = v
	return s
}

func (s *BGReleaseArrangement) SetProcessDefinitionId(v string) *BGReleaseArrangement {
	s.ProcessDefinitionId = &v
	return s
}

func (s *BGReleaseArrangement) SetParentId(v string) *BGReleaseArrangement {
	s.ParentId = &v
	return s
}

func (s *BGReleaseArrangement) SetParentEntityType(v string) *BGReleaseArrangement {
	s.ParentEntityType = &v
	return s
}

func (s *BGReleaseArrangement) SetSupportedTransitions(v []*string) *BGReleaseArrangement {
	s.SupportedTransitions = v
	return s
}

func (s *BGReleaseArrangement) SetNodeId(v string) *BGReleaseArrangement {
	s.NodeId = &v
	return s
}

func (s *BGReleaseArrangement) SetState(v string) *BGReleaseArrangement {
	s.State = &v
	return s
}

func (s *BGReleaseArrangement) SetStartedTime(v string) *BGReleaseArrangement {
	s.StartedTime = &v
	return s
}

func (s *BGReleaseArrangement) SetFinishedTime(v string) *BGReleaseArrangement {
	s.FinishedTime = &v
	return s
}

func (s *BGReleaseArrangement) SetStandaloneExecutable(v bool) *BGReleaseArrangement {
	s.StandaloneExecutable = &v
	return s
}

func (s *BGReleaseArrangement) SetId(v string) *BGReleaseArrangement {
	s.Id = &v
	return s
}

// 应用sidecar基线配置
type AppBaselineSidecarConfig struct {
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// sidecar类型
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// 应用基线适用条件，金融云环境仅能指定workspaceGroups属性，并且只能指定一个workspaceGroup
	Conditions []*SidecarCondition `json:"conditions,omitempty" xml:"conditions,omitempty" type:"Repeated"`
	// 是否开启sidecar
	Enable *bool `json:"enable,omitempty" xml:"enable,omitempty"`
	// sidecar版本号，金融云环境必填
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty"`
	// 应用基线id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s AppBaselineSidecarConfig) String() string {
	return tea.Prettify(s)
}

func (s AppBaselineSidecarConfig) GoString() string {
	return s.String()
}

func (s *AppBaselineSidecarConfig) SetAppName(v string) *AppBaselineSidecarConfig {
	s.AppName = &v
	return s
}

func (s *AppBaselineSidecarConfig) SetCategory(v string) *AppBaselineSidecarConfig {
	s.Category = &v
	return s
}

func (s *AppBaselineSidecarConfig) SetConditions(v []*SidecarCondition) *AppBaselineSidecarConfig {
	s.Conditions = v
	return s
}

func (s *AppBaselineSidecarConfig) SetEnable(v bool) *AppBaselineSidecarConfig {
	s.Enable = &v
	return s
}

func (s *AppBaselineSidecarConfig) SetSidecarVersion(v string) *AppBaselineSidecarConfig {
	s.SidecarVersion = &v
	return s
}

func (s *AppBaselineSidecarConfig) SetId(v string) *AppBaselineSidecarConfig {
	s.Id = &v
	return s
}

// StateCount
type StateCount struct {
	// state
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// count
	Count *int64 `json:"count,omitempty" xml:"count,omitempty"`
}

func (s StateCount) String() string {
	return tea.Prettify(s)
}

func (s StateCount) GoString() string {
	return s.String()
}

func (s *StateCount) SetState(v string) *StateCount {
	s.State = &v
	return s
}

func (s *StateCount) SetCount(v int64) *StateCount {
	s.Count = &v
	return s
}

// 错误原因
type Reason struct {
	// content
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// visible
	Visible *bool `json:"visible,omitempty" xml:"visible,omitempty"`
	// code
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// placeholder
	Placeholder *string `json:"placeholder,omitempty" xml:"placeholder,omitempty"`
	// params
	Params []*string `json:"params,omitempty" xml:"params,omitempty" type:"Repeated"`
}

func (s Reason) String() string {
	return tea.Prettify(s)
}

func (s Reason) GoString() string {
	return s.String()
}

func (s *Reason) SetContent(v string) *Reason {
	s.Content = &v
	return s
}

func (s *Reason) SetVisible(v bool) *Reason {
	s.Visible = &v
	return s
}

func (s *Reason) SetCode(v string) *Reason {
	s.Code = &v
	return s
}

func (s *Reason) SetPlaceholder(v string) *Reason {
	s.Placeholder = &v
	return s
}

func (s *Reason) SetParams(v []*string) *Reason {
	s.Params = v
	return s
}

// BuildpackCompositeVO
type BuildpackCompositeVO struct {
	// app_service_count
	AppServiceCount *int64 `json:"app_service_count,omitempty" xml:"app_service_count,omitempty"`
	// creator
	Creator *UserDTO `json:"creator,omitempty" xml:"creator,omitempty"`
	// origin_type
	OriginType *string `json:"origin_type,omitempty" xml:"origin_type,omitempty"`
	// publisher
	Publisher *UserDTO `json:"publisher,omitempty" xml:"publisher,omitempty"`
	// supported_o_s
	SupportedOS []*BuildpackOS `json:"supported_o_s,omitempty" xml:"supported_o_s,omitempty" type:"Repeated"`
	// supported_regions
	SupportedRegions []*BuildpackRegionRelationDetail `json:"supported_regions,omitempty" xml:"supported_regions,omitempty" type:"Repeated"`
	// techstack
	Techstack *Techstack `json:"techstack,omitempty" xml:"techstack,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// fullVersion
	FullVersion *string `json:"full_version,omitempty" xml:"full_version,omitempty"`
}

func (s BuildpackCompositeVO) String() string {
	return tea.Prettify(s)
}

func (s BuildpackCompositeVO) GoString() string {
	return s.String()
}

func (s *BuildpackCompositeVO) SetAppServiceCount(v int64) *BuildpackCompositeVO {
	s.AppServiceCount = &v
	return s
}

func (s *BuildpackCompositeVO) SetCreator(v *UserDTO) *BuildpackCompositeVO {
	s.Creator = v
	return s
}

func (s *BuildpackCompositeVO) SetOriginType(v string) *BuildpackCompositeVO {
	s.OriginType = &v
	return s
}

func (s *BuildpackCompositeVO) SetPublisher(v *UserDTO) *BuildpackCompositeVO {
	s.Publisher = v
	return s
}

func (s *BuildpackCompositeVO) SetSupportedOS(v []*BuildpackOS) *BuildpackCompositeVO {
	s.SupportedOS = v
	return s
}

func (s *BuildpackCompositeVO) SetSupportedRegions(v []*BuildpackRegionRelationDetail) *BuildpackCompositeVO {
	s.SupportedRegions = v
	return s
}

func (s *BuildpackCompositeVO) SetTechstack(v *Techstack) *BuildpackCompositeVO {
	s.Techstack = v
	return s
}

func (s *BuildpackCompositeVO) SetId(v string) *BuildpackCompositeVO {
	s.Id = &v
	return s
}

func (s *BuildpackCompositeVO) SetDescription(v string) *BuildpackCompositeVO {
	s.Description = &v
	return s
}

func (s *BuildpackCompositeVO) SetFullVersion(v string) *BuildpackCompositeVO {
	s.FullVersion = &v
	return s
}

// 应用分组。
type AppGroup struct {
	// 应用依赖规划
	AppScheme []*AppDepend `json:"app_scheme,omitempty" xml:"app_scheme,omitempty" type:"Repeated"`
	// 应用分组描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 应用分组ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 应用分组名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 应用分组负责人登录名
	OwnerLoginName *string `json:"owner_login_name,omitempty" xml:"owner_login_name,omitempty"`
	// 父应用分组ID
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// 应用分组层级，从1开始，1代表一级分组，2代表二级分组
	Layer *int64 `json:"layer,omitempty" xml:"layer,omitempty"`
}

func (s AppGroup) String() string {
	return tea.Prettify(s)
}

func (s AppGroup) GoString() string {
	return s.String()
}

func (s *AppGroup) SetAppScheme(v []*AppDepend) *AppGroup {
	s.AppScheme = v
	return s
}

func (s *AppGroup) SetDescription(v string) *AppGroup {
	s.Description = &v
	return s
}

func (s *AppGroup) SetId(v string) *AppGroup {
	s.Id = &v
	return s
}

func (s *AppGroup) SetName(v string) *AppGroup {
	s.Name = &v
	return s
}

func (s *AppGroup) SetOwnerLoginName(v string) *AppGroup {
	s.OwnerLoginName = &v
	return s
}

func (s *AppGroup) SetParentId(v string) *AppGroup {
	s.ParentId = &v
	return s
}

func (s *AppGroup) SetLayer(v int64) *AppGroup {
	s.Layer = &v
	return s
}

// 发生增量变动的workspace信息
type WorkspaceDeltaInfo struct {
	// 租户名
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// 环境名
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s WorkspaceDeltaInfo) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceDeltaInfo) GoString() string {
	return s.String()
}

func (s *WorkspaceDeltaInfo) SetTenant(v string) *WorkspaceDeltaInfo {
	s.Tenant = &v
	return s
}

func (s *WorkspaceDeltaInfo) SetWorkspace(v string) *WorkspaceDeltaInfo {
	s.Workspace = &v
	return s
}

// 技术栈的详细信息，包括关联信息
type BuildpackDetail struct {
	// 使用该技术栈版本的appservice的数量
	AppServiceCount *int64 `json:"app_service_count,omitempty" xml:"app_service_count,omitempty"`
	// 可以使用该技术栈版本的租户ID
	AvailableTenantNames []*string `json:"available_tenant_names,omitempty" xml:"available_tenant_names,omitempty" type:"Repeated"`
	// buildCommand
	BuildCommand *string `json:"build_command,omitempty" xml:"build_command,omitempty"`
	// 分享给其他租户留下的联系信息
	ContactInfo *string `json:"contact_info,omitempty" xml:"contact_info,omitempty"`
	// createdFrom
	CreatedFrom *string `json:"created_from,omitempty" xml:"created_from,omitempty"`
	// creationChain
	CreationChain []*string `json:"creation_chain,omitempty" xml:"creation_chain,omitempty" type:"Repeated"`
	// creationTime
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 当前技术栈版本是否是debug模式
	DebugMode *bool `json:"debug_mode,omitempty" xml:"debug_mode,omitempty"`
	// 废弃技术栈版本的原因
	DepracationNote *string `json:"depracation_note,omitempty" xml:"depracation_note,omitempty"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// extraInfo
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 技术栈版本号
	FullVersion *string `json:"full_version,omitempty" xml:"full_version,omitempty"`
	// 技术栈版本ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 行业标志,I(金区)或者N(非金区)
	IndustryLabel *string `json:"industry_label,omitempty" xml:"industry_label,omitempty"`
	// 主要版本号
	MajorVersion *int64 `json:"major_version,omitempty" xml:"major_version,omitempty"`
	// 次要版本号
	MinorVersion *int64 `json:"minor_version,omitempty" xml:"minor_version,omitempty"`
	// modificationTime
	ModificationTime *string `json:"modification_time,omitempty" xml:"modification_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 原始类型
	OriginType *string `json:"origin_type,omitempty" xml:"origin_type,omitempty"`
	// 补丁版本号
	PatchVersion *int64 `json:"patch_version,omitempty" xml:"patch_version,omitempty"`
	// 发布时间
	PublicationTime *string `json:"publication_time,omitempty" xml:"publication_time,omitempty"`
	// 发布时间，日期格式
	PublicationTimeDate *string `json:"publication_time_date,omitempty" xml:"publication_time_date,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 技术栈版本提供方所在域
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 技术栈版本的状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 支持的操作系统列表
	SupportedOs []*BuildpackOS `json:"supported_os,omitempty" xml:"supported_os,omitempty" type:"Repeated"`
	// 支持的地域ID列表
	SupportedRegions []*string `json:"supported_regions,omitempty" xml:"supported_regions,omitempty" type:"Repeated"`
	// 支持的地域列表
	SupportedRegionsList []*BuildpackRegionRelationDetail `json:"supported_regions_list,omitempty" xml:"supported_regions_list,omitempty" type:"Repeated"`
	// techstack
	Techstack *Techstack `json:"techstack,omitempty" xml:"techstack,omitempty"`
	// 关联的 Techstack ID
	TechstackId *int64 `json:"techstack_id,omitempty" xml:"techstack_id,omitempty"`
	// tenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s BuildpackDetail) String() string {
	return tea.Prettify(s)
}

func (s BuildpackDetail) GoString() string {
	return s.String()
}

func (s *BuildpackDetail) SetAppServiceCount(v int64) *BuildpackDetail {
	s.AppServiceCount = &v
	return s
}

func (s *BuildpackDetail) SetAvailableTenantNames(v []*string) *BuildpackDetail {
	s.AvailableTenantNames = v
	return s
}

func (s *BuildpackDetail) SetBuildCommand(v string) *BuildpackDetail {
	s.BuildCommand = &v
	return s
}

func (s *BuildpackDetail) SetContactInfo(v string) *BuildpackDetail {
	s.ContactInfo = &v
	return s
}

func (s *BuildpackDetail) SetCreatedFrom(v string) *BuildpackDetail {
	s.CreatedFrom = &v
	return s
}

func (s *BuildpackDetail) SetCreationChain(v []*string) *BuildpackDetail {
	s.CreationChain = v
	return s
}

func (s *BuildpackDetail) SetCreationTime(v string) *BuildpackDetail {
	s.CreationTime = &v
	return s
}

func (s *BuildpackDetail) SetDebugMode(v bool) *BuildpackDetail {
	s.DebugMode = &v
	return s
}

func (s *BuildpackDetail) SetDepracationNote(v string) *BuildpackDetail {
	s.DepracationNote = &v
	return s
}

func (s *BuildpackDetail) SetDescription(v string) *BuildpackDetail {
	s.Description = &v
	return s
}

func (s *BuildpackDetail) SetExtraInfo(v string) *BuildpackDetail {
	s.ExtraInfo = &v
	return s
}

func (s *BuildpackDetail) SetFullVersion(v string) *BuildpackDetail {
	s.FullVersion = &v
	return s
}

func (s *BuildpackDetail) SetId(v string) *BuildpackDetail {
	s.Id = &v
	return s
}

func (s *BuildpackDetail) SetIndustryLabel(v string) *BuildpackDetail {
	s.IndustryLabel = &v
	return s
}

func (s *BuildpackDetail) SetMajorVersion(v int64) *BuildpackDetail {
	s.MajorVersion = &v
	return s
}

func (s *BuildpackDetail) SetMinorVersion(v int64) *BuildpackDetail {
	s.MinorVersion = &v
	return s
}

func (s *BuildpackDetail) SetModificationTime(v string) *BuildpackDetail {
	s.ModificationTime = &v
	return s
}

func (s *BuildpackDetail) SetOriginType(v string) *BuildpackDetail {
	s.OriginType = &v
	return s
}

func (s *BuildpackDetail) SetPatchVersion(v int64) *BuildpackDetail {
	s.PatchVersion = &v
	return s
}

func (s *BuildpackDetail) SetPublicationTime(v string) *BuildpackDetail {
	s.PublicationTime = &v
	return s
}

func (s *BuildpackDetail) SetPublicationTimeDate(v string) *BuildpackDetail {
	s.PublicationTimeDate = &v
	return s
}

func (s *BuildpackDetail) SetScope(v string) *BuildpackDetail {
	s.Scope = &v
	return s
}

func (s *BuildpackDetail) SetStatus(v string) *BuildpackDetail {
	s.Status = &v
	return s
}

func (s *BuildpackDetail) SetSupportedOs(v []*BuildpackOS) *BuildpackDetail {
	s.SupportedOs = v
	return s
}

func (s *BuildpackDetail) SetSupportedRegions(v []*string) *BuildpackDetail {
	s.SupportedRegions = v
	return s
}

func (s *BuildpackDetail) SetSupportedRegionsList(v []*BuildpackRegionRelationDetail) *BuildpackDetail {
	s.SupportedRegionsList = v
	return s
}

func (s *BuildpackDetail) SetTechstack(v *Techstack) *BuildpackDetail {
	s.Techstack = v
	return s
}

func (s *BuildpackDetail) SetTechstackId(v int64) *BuildpackDetail {
	s.TechstackId = &v
	return s
}

func (s *BuildpackDetail) SetTenantId(v string) *BuildpackDetail {
	s.TenantId = &v
	return s
}

// 应用参数配置管理-应用参数模板
type AppConfigTemplate struct {
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 描述
	Comment *string `json:"comment,omitempty" xml:"comment,omitempty"`
	// 应用参数模板 id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 操作人 id
	OperatorId *string `json:"operator_id,omitempty" xml:"operator_id,omitempty"`
	// 参数定义列表
	Params []*TemplateParamDef `json:"params,omitempty" xml:"params,omitempty" type:"Repeated"`
	// 参数模板发布时间
	ReleaseTime *string `json:"release_time,omitempty" xml:"release_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 模板状态，DRAFT 草稿，RELEASE 已发布，发布后才会生成 version，否则为空
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 租户 id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 模板版本
	TplVersion *string `json:"tpl_version,omitempty" xml:"tpl_version,omitempty"`
	// 创建时间
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 修改时间
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
}

func (s AppConfigTemplate) String() string {
	return tea.Prettify(s)
}

func (s AppConfigTemplate) GoString() string {
	return s.String()
}

func (s *AppConfigTemplate) SetAppName(v string) *AppConfigTemplate {
	s.AppName = &v
	return s
}

func (s *AppConfigTemplate) SetComment(v string) *AppConfigTemplate {
	s.Comment = &v
	return s
}

func (s *AppConfigTemplate) SetId(v string) *AppConfigTemplate {
	s.Id = &v
	return s
}

func (s *AppConfigTemplate) SetOperatorId(v string) *AppConfigTemplate {
	s.OperatorId = &v
	return s
}

func (s *AppConfigTemplate) SetParams(v []*TemplateParamDef) *AppConfigTemplate {
	s.Params = v
	return s
}

func (s *AppConfigTemplate) SetReleaseTime(v string) *AppConfigTemplate {
	s.ReleaseTime = &v
	return s
}

func (s *AppConfigTemplate) SetState(v string) *AppConfigTemplate {
	s.State = &v
	return s
}

func (s *AppConfigTemplate) SetTenantId(v string) *AppConfigTemplate {
	s.TenantId = &v
	return s
}

func (s *AppConfigTemplate) SetTplVersion(v string) *AppConfigTemplate {
	s.TplVersion = &v
	return s
}

func (s *AppConfigTemplate) SetCreatedTime(v string) *AppConfigTemplate {
	s.CreatedTime = &v
	return s
}

func (s *AppConfigTemplate) SetModifiedTime(v string) *AppConfigTemplate {
	s.ModifiedTime = &v
	return s
}

// AggregateExecutableProgress
type AggregateExecutableProgress struct {
	// base_progress
	BaseProgress *ResourceGroupExecutionProgress `json:"base_progress,omitempty" xml:"base_progress,omitempty"`
	// bg_release_progresses
	BgReleaseProgresses []*BGReleaseExecutionProgress `json:"bg_release_progresses,omitempty" xml:"bg_release_progresses,omitempty" type:"Repeated"`
	// app_service_progresses
	AppServiceProgresses []*AppServiceExecutionProgressWithRollbackInfo `json:"app_service_progresses,omitempty" xml:"app_service_progresses,omitempty" type:"Repeated"`
	// common_progresses
	CommonProgresses []*ResourceGroupExecutionProgress `json:"common_progresses,omitempty" xml:"common_progresses,omitempty" type:"Repeated"`
}

func (s AggregateExecutableProgress) String() string {
	return tea.Prettify(s)
}

func (s AggregateExecutableProgress) GoString() string {
	return s.String()
}

func (s *AggregateExecutableProgress) SetBaseProgress(v *ResourceGroupExecutionProgress) *AggregateExecutableProgress {
	s.BaseProgress = v
	return s
}

func (s *AggregateExecutableProgress) SetBgReleaseProgresses(v []*BGReleaseExecutionProgress) *AggregateExecutableProgress {
	s.BgReleaseProgresses = v
	return s
}

func (s *AggregateExecutableProgress) SetAppServiceProgresses(v []*AppServiceExecutionProgressWithRollbackInfo) *AggregateExecutableProgress {
	s.AppServiceProgresses = v
	return s
}

func (s *AggregateExecutableProgress) SetCommonProgresses(v []*ResourceGroupExecutionProgress) *AggregateExecutableProgress {
	s.CommonProgresses = v
	return s
}

// Connection
type Connection struct {
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// tenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// plug
	Plug *ConnectionStub `json:"plug,omitempty" xml:"plug,omitempty"`
	// socket
	Socket *ConnectionStub `json:"socket,omitempty" xml:"socket,omitempty"`
	// accessKey
	AccessKey *string `json:"access_key,omitempty" xml:"access_key,omitempty"`
	// accessSecret
	AccessSecret *string `json:"access_secret,omitempty" xml:"access_secret,omitempty"`
	// 创建时间
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 修改时间
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// executor
	Executor *string `json:"executor,omitempty" xml:"executor,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s Connection) String() string {
	return tea.Prettify(s)
}

func (s Connection) GoString() string {
	return s.String()
}

func (s *Connection) SetId(v int64) *Connection {
	s.Id = &v
	return s
}

func (s *Connection) SetTenantId(v string) *Connection {
	s.TenantId = &v
	return s
}

func (s *Connection) SetIdentity(v string) *Connection {
	s.Identity = &v
	return s
}

func (s *Connection) SetName(v string) *Connection {
	s.Name = &v
	return s
}

func (s *Connection) SetPlug(v *ConnectionStub) *Connection {
	s.Plug = v
	return s
}

func (s *Connection) SetSocket(v *ConnectionStub) *Connection {
	s.Socket = v
	return s
}

func (s *Connection) SetAccessKey(v string) *Connection {
	s.AccessKey = &v
	return s
}

func (s *Connection) SetAccessSecret(v string) *Connection {
	s.AccessSecret = &v
	return s
}

func (s *Connection) SetCreatedTime(v string) *Connection {
	s.CreatedTime = &v
	return s
}

func (s *Connection) SetModifiedTime(v string) *Connection {
	s.ModifiedTime = &v
	return s
}

func (s *Connection) SetExecutor(v string) *Connection {
	s.Executor = &v
	return s
}

func (s *Connection) SetStatus(v string) *Connection {
	s.Status = &v
	return s
}

// 部署可用区
type DeploymentZone struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 显示名
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 环境 id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// 工作空间组 id
	WorkspaceGroupId *string `json:"workspace_group_id,omitempty" xml:"workspace_group_id,omitempty"`
	// 状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 主可用区 ID
	MasterZoneId *string `json:"master_zone_id,omitempty" xml:"master_zone_id,omitempty"`
	// 附属可用区 ID
	AppendedZoneIds []*string `json:"appended_zone_ids,omitempty" xml:"appended_zone_ids,omitempty" type:"Repeated"`
	// 包含部署单元
	Cells []*Cell `json:"cells,omitempty" xml:"cells,omitempty" type:"Repeated"`
}

func (s DeploymentZone) String() string {
	return tea.Prettify(s)
}

func (s DeploymentZone) GoString() string {
	return s.String()
}

func (s *DeploymentZone) SetId(v string) *DeploymentZone {
	s.Id = &v
	return s
}

func (s *DeploymentZone) SetName(v string) *DeploymentZone {
	s.Name = &v
	return s
}

func (s *DeploymentZone) SetDisplayName(v string) *DeploymentZone {
	s.DisplayName = &v
	return s
}

func (s *DeploymentZone) SetDescription(v string) *DeploymentZone {
	s.Description = &v
	return s
}

func (s *DeploymentZone) SetWorkspaceId(v string) *DeploymentZone {
	s.WorkspaceId = &v
	return s
}

func (s *DeploymentZone) SetWorkspaceGroupId(v string) *DeploymentZone {
	s.WorkspaceGroupId = &v
	return s
}

func (s *DeploymentZone) SetStatus(v string) *DeploymentZone {
	s.Status = &v
	return s
}

func (s *DeploymentZone) SetMasterZoneId(v string) *DeploymentZone {
	s.MasterZoneId = &v
	return s
}

func (s *DeploymentZone) SetAppendedZoneIds(v []*string) *DeploymentZone {
	s.AppendedZoneIds = v
	return s
}

func (s *DeploymentZone) SetCells(v []*Cell) *DeploymentZone {
	s.Cells = v
	return s
}

// 应用管理-应用代码库信息
type Repository struct {
	// 代码库名字
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 代码库类型，svn或者git
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 代码库地址
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// 代码库负责人登录名称
	OwnerLoginName *string `json:"owner_login_name,omitempty" xml:"owner_login_name,omitempty"`
	// 代码库负责人显示名称
	OwnerDisplayName *string `json:"owner_display_name,omitempty" xml:"owner_display_name,omitempty"`
	// 创建时间
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
}

func (s Repository) String() string {
	return tea.Prettify(s)
}

func (s Repository) GoString() string {
	return s.String()
}

func (s *Repository) SetName(v string) *Repository {
	s.Name = &v
	return s
}

func (s *Repository) SetType(v string) *Repository {
	s.Type = &v
	return s
}

func (s *Repository) SetUrl(v string) *Repository {
	s.Url = &v
	return s
}

func (s *Repository) SetOwnerLoginName(v string) *Repository {
	s.OwnerLoginName = &v
	return s
}

func (s *Repository) SetOwnerDisplayName(v string) *Repository {
	s.OwnerDisplayName = &v
	return s
}

func (s *Repository) SetCreatedTime(v string) *Repository {
	s.CreatedTime = &v
	return s
}

// sidecar信息
//
type Sidecar struct {
	// sidecar描述内容
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 创建时间
	GmtCreated *string `json:"gmt_created,omitempty" xml:"gmt_created,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// sidecar名称
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty"`
	// scope生效范围详情
	ScopeDetail *SidecarScopeDetail `json:"scope_detail,omitempty" xml:"scope_detail,omitempty"`
}

func (s Sidecar) String() string {
	return tea.Prettify(s)
}

func (s Sidecar) GoString() string {
	return s.String()
}

func (s *Sidecar) SetDescription(v string) *Sidecar {
	s.Description = &v
	return s
}

func (s *Sidecar) SetGmtCreated(v string) *Sidecar {
	s.GmtCreated = &v
	return s
}

func (s *Sidecar) SetGmtModified(v string) *Sidecar {
	s.GmtModified = &v
	return s
}

func (s *Sidecar) SetSidecarName(v string) *Sidecar {
	s.SidecarName = &v
	return s
}

func (s *Sidecar) SetScopeDetail(v *SidecarScopeDetail) *Sidecar {
	s.ScopeDetail = v
	return s
}

// 执行进度
type ExecutorProgress struct {
	// 请求 ID
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
	// 请求 ID 列表
	RequestIds []*string `json:"request_ids,omitempty" xml:"request_ids,omitempty" type:"Repeated"`
	// 状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 错误信息
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecutorProgress) String() string {
	return tea.Prettify(s)
}

func (s ExecutorProgress) GoString() string {
	return s.String()
}

func (s *ExecutorProgress) SetRequestId(v string) *ExecutorProgress {
	s.RequestId = &v
	return s
}

func (s *ExecutorProgress) SetRequestIds(v []*string) *ExecutorProgress {
	s.RequestIds = v
	return s
}

func (s *ExecutorProgress) SetStatus(v string) *ExecutorProgress {
	s.Status = &v
	return s
}

func (s *ExecutorProgress) SetResultMsg(v string) *ExecutorProgress {
	s.ResultMsg = &v
	return s
}

// BuildpackDetailVO
type BuildpackDetailVO struct {
	// appServiceCount
	AppServiceCount *int64 `json:"app_service_count,omitempty" xml:"app_service_count,omitempty"`
	// availableTenantNames
	AvailableTenantNames []*string `json:"available_tenant_names,omitempty" xml:"available_tenant_names,omitempty" type:"Repeated"`
	// buildpack_params
	BuildpackParams []*BuildpackParamTemplate `json:"buildpack_params,omitempty" xml:"buildpack_params,omitempty" type:"Repeated"`
	// buildCommand
	BuildCommand *string `json:"build_command,omitempty" xml:"build_command,omitempty"`
	// build_commandp_params
	BuildCommandParams []*BuildCommandParams `json:"build_command_params,omitempty" xml:"build_command_params,omitempty" type:"Repeated"`
	// contactInfo
	ContactInfo *string `json:"contact_info,omitempty" xml:"contact_info,omitempty"`
	// createdFrom
	CreatedFrom *string `json:"created_from,omitempty" xml:"created_from,omitempty"`
	// creationChain
	CreationChain []*string `json:"creation_chain,omitempty" xml:"creation_chain,omitempty" type:"Repeated"`
	// creationTime
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// creator
	Creator *UserDTO `json:"creator,omitempty" xml:"creator,omitempty"`
	// debugMode
	DebugMode *bool `json:"debug_mode,omitempty" xml:"debug_mode,omitempty"`
	// depracationNote
	DepracationNote *string `json:"depracation_note,omitempty" xml:"depracation_note,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// extraInfo
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// fullVersion
	FullVersion *string `json:"full_version,omitempty" xml:"full_version,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// industryLabel
	IndustryLabel *string `json:"industry_label,omitempty" xml:"industry_label,omitempty"`
	// majorVersion
	MajorVersion *int64 `json:"major_version,omitempty" xml:"major_version,omitempty"`
	// minorVersion
	MinorVersion *int64 `json:"minor_version,omitempty" xml:"minor_version,omitempty"`
	// modificationTime
	ModificationTime *string `json:"modification_time,omitempty" xml:"modification_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// originType
	OriginType *string `json:"origin_type,omitempty" xml:"origin_type,omitempty"`
	// patchVersion
	PatchVersion *int64 `json:"patch_version,omitempty" xml:"patch_version,omitempty"`
	// publicationTime
	PublicationTime *string `json:"publication_time,omitempty" xml:"publication_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// publisher
	Publisher *UserDTO `json:"publisher,omitempty" xml:"publisher,omitempty"`
	// scope
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// storageUploadEndpoints
	StorageUploadEndpoints []*UploadEndpoint `json:"storage_upload_endpoints,omitempty" xml:"storage_upload_endpoints,omitempty" type:"Repeated"`
	// supportedOS
	SupportedOS []*BuildpackOS `json:"supported_o_s,omitempty" xml:"supported_o_s,omitempty" type:"Repeated"`
	// supportedRegions
	SupportedRegions []*BuildpackRegionRelationDetail `json:"supported_regions,omitempty" xml:"supported_regions,omitempty" type:"Repeated"`
	// techstack
	Techstack *Techstack `json:"techstack,omitempty" xml:"techstack,omitempty"`
	// tenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s BuildpackDetailVO) String() string {
	return tea.Prettify(s)
}

func (s BuildpackDetailVO) GoString() string {
	return s.String()
}

func (s *BuildpackDetailVO) SetAppServiceCount(v int64) *BuildpackDetailVO {
	s.AppServiceCount = &v
	return s
}

func (s *BuildpackDetailVO) SetAvailableTenantNames(v []*string) *BuildpackDetailVO {
	s.AvailableTenantNames = v
	return s
}

func (s *BuildpackDetailVO) SetBuildpackParams(v []*BuildpackParamTemplate) *BuildpackDetailVO {
	s.BuildpackParams = v
	return s
}

func (s *BuildpackDetailVO) SetBuildCommand(v string) *BuildpackDetailVO {
	s.BuildCommand = &v
	return s
}

func (s *BuildpackDetailVO) SetBuildCommandParams(v []*BuildCommandParams) *BuildpackDetailVO {
	s.BuildCommandParams = v
	return s
}

func (s *BuildpackDetailVO) SetContactInfo(v string) *BuildpackDetailVO {
	s.ContactInfo = &v
	return s
}

func (s *BuildpackDetailVO) SetCreatedFrom(v string) *BuildpackDetailVO {
	s.CreatedFrom = &v
	return s
}

func (s *BuildpackDetailVO) SetCreationChain(v []*string) *BuildpackDetailVO {
	s.CreationChain = v
	return s
}

func (s *BuildpackDetailVO) SetCreationTime(v string) *BuildpackDetailVO {
	s.CreationTime = &v
	return s
}

func (s *BuildpackDetailVO) SetCreator(v *UserDTO) *BuildpackDetailVO {
	s.Creator = v
	return s
}

func (s *BuildpackDetailVO) SetDebugMode(v bool) *BuildpackDetailVO {
	s.DebugMode = &v
	return s
}

func (s *BuildpackDetailVO) SetDepracationNote(v string) *BuildpackDetailVO {
	s.DepracationNote = &v
	return s
}

func (s *BuildpackDetailVO) SetDescription(v string) *BuildpackDetailVO {
	s.Description = &v
	return s
}

func (s *BuildpackDetailVO) SetExtraInfo(v string) *BuildpackDetailVO {
	s.ExtraInfo = &v
	return s
}

func (s *BuildpackDetailVO) SetFullVersion(v string) *BuildpackDetailVO {
	s.FullVersion = &v
	return s
}

func (s *BuildpackDetailVO) SetId(v string) *BuildpackDetailVO {
	s.Id = &v
	return s
}

func (s *BuildpackDetailVO) SetIndustryLabel(v string) *BuildpackDetailVO {
	s.IndustryLabel = &v
	return s
}

func (s *BuildpackDetailVO) SetMajorVersion(v int64) *BuildpackDetailVO {
	s.MajorVersion = &v
	return s
}

func (s *BuildpackDetailVO) SetMinorVersion(v int64) *BuildpackDetailVO {
	s.MinorVersion = &v
	return s
}

func (s *BuildpackDetailVO) SetModificationTime(v string) *BuildpackDetailVO {
	s.ModificationTime = &v
	return s
}

func (s *BuildpackDetailVO) SetOriginType(v string) *BuildpackDetailVO {
	s.OriginType = &v
	return s
}

func (s *BuildpackDetailVO) SetPatchVersion(v int64) *BuildpackDetailVO {
	s.PatchVersion = &v
	return s
}

func (s *BuildpackDetailVO) SetPublicationTime(v string) *BuildpackDetailVO {
	s.PublicationTime = &v
	return s
}

func (s *BuildpackDetailVO) SetPublisher(v *UserDTO) *BuildpackDetailVO {
	s.Publisher = v
	return s
}

func (s *BuildpackDetailVO) SetScope(v string) *BuildpackDetailVO {
	s.Scope = &v
	return s
}

func (s *BuildpackDetailVO) SetStatus(v string) *BuildpackDetailVO {
	s.Status = &v
	return s
}

func (s *BuildpackDetailVO) SetStorageUploadEndpoints(v []*UploadEndpoint) *BuildpackDetailVO {
	s.StorageUploadEndpoints = v
	return s
}

func (s *BuildpackDetailVO) SetSupportedOS(v []*BuildpackOS) *BuildpackDetailVO {
	s.SupportedOS = v
	return s
}

func (s *BuildpackDetailVO) SetSupportedRegions(v []*BuildpackRegionRelationDetail) *BuildpackDetailVO {
	s.SupportedRegions = v
	return s
}

func (s *BuildpackDetailVO) SetTechstack(v *Techstack) *BuildpackDetailVO {
	s.Techstack = v
	return s
}

func (s *BuildpackDetailVO) SetTenantId(v string) *BuildpackDetailVO {
	s.TenantId = &v
	return s
}

// 应用信息
type Application struct {
	// 应用部署时依赖的应用名称，只允许取此次调用参数中列出的应用。不允许形成循环依赖。
	Depends []*string `json:"depends,omitempty" xml:"depends,omitempty" type:"Repeated"`
	// 执行部署操作的目标应用名称，应用名称最大60个UTF-8字符
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 执行部署操作的目标应用服务名称，应用服务名称最大60个UTF-8字符
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty"`
	// 执行部署操作的目标应用版本。如果某个应用未指定版本，则使用最新版本部署。
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
	// 自定义参数 jsonStr Map<String,List<String>>
	CustomParamsMap *string `json:"custom_params_map,omitempty" xml:"custom_params_map,omitempty"`
}

func (s Application) String() string {
	return tea.Prettify(s)
}

func (s Application) GoString() string {
	return s.String()
}

func (s *Application) SetDepends(v []*string) *Application {
	s.Depends = v
	return s
}

func (s *Application) SetName(v string) *Application {
	s.Name = &v
	return s
}

func (s *Application) SetServiceName(v string) *Application {
	s.ServiceName = &v
	return s
}

func (s *Application) SetVersion(v string) *Application {
	s.Version = &v
	return s
}

func (s *Application) SetCustomParamsMap(v string) *Application {
	s.CustomParamsMap = &v
	return s
}

// OpsTaskExecutionDetail
type OpsTaskExecutionDetail struct {
	// task_id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
	// request_token
	RequestToken *string `json:"request_token,omitempty" xml:"request_token,omitempty"`
	// node_id
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty"`
	// request_id
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
	// execution_count
	ExecutionCount *int64 `json:"execution_count,omitempty" xml:"execution_count,omitempty"`
	// executionState
	ExecutionState *string `json:"execution_state,omitempty" xml:"execution_state,omitempty"`
	// target_id
	TargetId *string `json:"target_id,omitempty" xml:"target_id,omitempty"`
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// result_msg
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// startedTime
	StartedTime *string `json:"started_time,omitempty" xml:"started_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// finished_time
	FinishedTime *string `json:"finished_time,omitempty" xml:"finished_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// standalone_executable
	StandaloneExecutable *bool `json:"standalone_executable,omitempty" xml:"standalone_executable,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s OpsTaskExecutionDetail) String() string {
	return tea.Prettify(s)
}

func (s OpsTaskExecutionDetail) GoString() string {
	return s.String()
}

func (s *OpsTaskExecutionDetail) SetTaskId(v string) *OpsTaskExecutionDetail {
	s.TaskId = &v
	return s
}

func (s *OpsTaskExecutionDetail) SetRequestToken(v string) *OpsTaskExecutionDetail {
	s.RequestToken = &v
	return s
}

func (s *OpsTaskExecutionDetail) SetNodeId(v string) *OpsTaskExecutionDetail {
	s.NodeId = &v
	return s
}

func (s *OpsTaskExecutionDetail) SetRequestId(v string) *OpsTaskExecutionDetail {
	s.RequestId = &v
	return s
}

func (s *OpsTaskExecutionDetail) SetExecutionCount(v int64) *OpsTaskExecutionDetail {
	s.ExecutionCount = &v
	return s
}

func (s *OpsTaskExecutionDetail) SetExecutionState(v string) *OpsTaskExecutionDetail {
	s.ExecutionState = &v
	return s
}

func (s *OpsTaskExecutionDetail) SetTargetId(v string) *OpsTaskExecutionDetail {
	s.TargetId = &v
	return s
}

func (s *OpsTaskExecutionDetail) SetErrorCode(v string) *OpsTaskExecutionDetail {
	s.ErrorCode = &v
	return s
}

func (s *OpsTaskExecutionDetail) SetResultMsg(v string) *OpsTaskExecutionDetail {
	s.ResultMsg = &v
	return s
}

func (s *OpsTaskExecutionDetail) SetStartedTime(v string) *OpsTaskExecutionDetail {
	s.StartedTime = &v
	return s
}

func (s *OpsTaskExecutionDetail) SetFinishedTime(v string) *OpsTaskExecutionDetail {
	s.FinishedTime = &v
	return s
}

func (s *OpsTaskExecutionDetail) SetStandaloneExecutable(v bool) *OpsTaskExecutionDetail {
	s.StandaloneExecutable = &v
	return s
}

func (s *OpsTaskExecutionDetail) SetId(v string) *OpsTaskExecutionDetail {
	s.Id = &v
	return s
}

// 一条指令执行的结果。
type CmdExecResult struct {
	// 错误信息。内容为指令无法下发到机器上的详细原因
	ErrMsg *string `json:"err_msg,omitempty" xml:"err_msg,omitempty"`
	// 执行结束时间
	FinishTime *int `json:"finish_time,omitempty" xml:"finish_time,omitempty"`
	// 执行的结果
	Results []*SingleExecResult `json:"results,omitempty" xml:"results,omitempty" type:"Repeated"`
	// 执行开始时间
	StartTime *int `json:"start_time,omitempty" xml:"start_time,omitempty"`
	// 执行结果状态。取值列表：
	//                     EXECUTING：执行中；
	//                     SUCCESS：执行成功；
	//                     FAILED：执行失败；
	//                     IGNORED：已忽略；
	//                     TIME_OUT：已超时
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s CmdExecResult) String() string {
	return tea.Prettify(s)
}

func (s CmdExecResult) GoString() string {
	return s.String()
}

func (s *CmdExecResult) SetErrMsg(v string) *CmdExecResult {
	s.ErrMsg = &v
	return s
}

func (s *CmdExecResult) SetFinishTime(v int) *CmdExecResult {
	s.FinishTime = &v
	return s
}

func (s *CmdExecResult) SetResults(v []*SingleExecResult) *CmdExecResult {
	s.Results = v
	return s
}

func (s *CmdExecResult) SetStartTime(v int) *CmdExecResult {
	s.StartTime = &v
	return s
}

func (s *CmdExecResult) SetStatus(v string) *CmdExecResult {
	s.Status = &v
	return s
}

// SLB 挂载信息
type SLBMountInfo struct {
	// iaas id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// slb id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// SLB 名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// vip 地址
	VipAddresses []*string `json:"vip_addresses,omitempty" xml:"vip_addresses,omitempty" type:"Repeated"`
	// 挂载权重
	MountWeights []*MountWeight `json:"mount_weights,omitempty" xml:"mount_weights,omitempty" type:"Repeated"`
	// 虚拟服务器组挂载信息
	VServerGroupMountInfoList []*VServerGroupMountInfo `json:"v_server_group_mount_info_list,omitempty" xml:"v_server_group_mount_info_list,omitempty" type:"Repeated"`
}

func (s SLBMountInfo) String() string {
	return tea.Prettify(s)
}

func (s SLBMountInfo) GoString() string {
	return s.String()
}

func (s *SLBMountInfo) SetIaasId(v string) *SLBMountInfo {
	s.IaasId = &v
	return s
}

func (s *SLBMountInfo) SetId(v string) *SLBMountInfo {
	s.Id = &v
	return s
}

func (s *SLBMountInfo) SetName(v string) *SLBMountInfo {
	s.Name = &v
	return s
}

func (s *SLBMountInfo) SetVipAddresses(v []*string) *SLBMountInfo {
	s.VipAddresses = v
	return s
}

func (s *SLBMountInfo) SetMountWeights(v []*MountWeight) *SLBMountInfo {
	s.MountWeights = v
	return s
}

func (s *SLBMountInfo) SetVServerGroupMountInfoList(v []*VServerGroupMountInfo) *SLBMountInfo {
	s.VServerGroupMountInfoList = v
	return s
}

// BuildpackParam
type BuildpackParam struct {
	// default_value
	DefaultValue *string `json:"default_value,omitempty" xml:"default_value,omitempty"`
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// readonly
	Readonly *bool `json:"readonly,omitempty" xml:"readonly,omitempty"`
	// required
	Required *bool `json:"required,omitempty" xml:"required,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
}

func (s BuildpackParam) String() string {
	return tea.Prettify(s)
}

func (s BuildpackParam) GoString() string {
	return s.String()
}

func (s *BuildpackParam) SetDefaultValue(v string) *BuildpackParam {
	s.DefaultValue = &v
	return s
}

func (s *BuildpackParam) SetKey(v string) *BuildpackParam {
	s.Key = &v
	return s
}

func (s *BuildpackParam) SetReadonly(v bool) *BuildpackParam {
	s.Readonly = &v
	return s
}

func (s *BuildpackParam) SetRequired(v bool) *BuildpackParam {
	s.Required = &v
	return s
}

func (s *BuildpackParam) SetDescription(v string) *BuildpackParam {
	s.Description = &v
	return s
}

// 应用管理-应用服务计数
type AppServiceCount struct {
	// 经典容器服务数量
	ClassicCount *int64 `json:"classic_count,omitempty" xml:"classic_count,omitempty"`
	// 容器应用服务数量
	ContainerCount *int64 `json:"container_count,omitempty" xml:"container_count,omitempty"`
	// 无服务器应用服务数
	ServerlessCount *int64 `json:"serverless_count,omitempty" xml:"serverless_count,omitempty"`
}

func (s AppServiceCount) String() string {
	return tea.Prettify(s)
}

func (s AppServiceCount) GoString() string {
	return s.String()
}

func (s *AppServiceCount) SetClassicCount(v int64) *AppServiceCount {
	s.ClassicCount = &v
	return s
}

func (s *AppServiceCount) SetContainerCount(v int64) *AppServiceCount {
	s.ContainerCount = &v
	return s
}

func (s *AppServiceCount) SetServerlessCount(v int64) *AppServiceCount {
	s.ServerlessCount = &v
	return s
}

// DepracationNotePayload
type DepracationNotePayload struct {
	// depracationNote
	DepracationNote *string `json:"depracation_note,omitempty" xml:"depracation_note,omitempty"`
}

func (s DepracationNotePayload) String() string {
	return tea.Prettify(s)
}

func (s DepracationNotePayload) GoString() string {
	return s.String()
}

func (s *DepracationNotePayload) SetDepracationNote(v string) *DepracationNotePayload {
	s.DepracationNote = &v
	return s
}

// 应用版本构建和发布包信息
type AppVersion struct {
	// 所属应用id `内部id对用户无用，不应返回，应使用应用名称`
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// 从源代码构建时标识代码分支，上传新版本时为空 `混淆了应用版本和编译任务；目前没必要返回`
	Branch *string `json:"branch,omitempty" xml:"branch,omitempty"`
	// 应用发布包构建类型:**scm**(源代码构建)，**upload_file**(发布包上传包括本地上传和从某个文件交换源上传) `混淆了应用版本和编译任务；目前没必要返回`
	//
	BuildType *string `json:"build_type,omitempty" xml:"build_type,omitempty"`
	// 从源代码构建时标识代码版本，上传新版本时为空 `混淆了应用版本和编译任务；目前没必要返回`
	CodeVersion *string `json:"code_version,omitempty" xml:"code_version,omitempty"`
	// 版本描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 新版本构建的错误码，成功则为空 `混淆了应用版本和编译任务`
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// 新版本构建的错误提示信息，成功则为空 `混淆了应用版本和编译任务`
	ErrorMsg *string `json:"error_msg,omitempty" xml:"error_msg,omitempty"`
	// 构建成功后标识应用发布包的md5
	Etag *string `json:"etag,omitempty" xml:"etag,omitempty"`
	// 应用版本id `内部id对用户无用，不应返回`
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 应用构建状态:**doing**(进行中),**success**(成功),**failed**(失败)
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 本次应用发布包构建后台任务的id `混淆了应用版本和构建任务，应使用2个不同的模型`
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
	// 创建时间 `命名建议为create_time`
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty"`
	// 应用版本号
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
	// 所属工作空间 `内部id对用户无用，不应返回，应使用workspace unique名称`
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s AppVersion) String() string {
	return tea.Prettify(s)
}

func (s AppVersion) GoString() string {
	return s.String()
}

func (s *AppVersion) SetAppId(v string) *AppVersion {
	s.AppId = &v
	return s
}

func (s *AppVersion) SetBranch(v string) *AppVersion {
	s.Branch = &v
	return s
}

func (s *AppVersion) SetBuildType(v string) *AppVersion {
	s.BuildType = &v
	return s
}

func (s *AppVersion) SetCodeVersion(v string) *AppVersion {
	s.CodeVersion = &v
	return s
}

func (s *AppVersion) SetDescription(v string) *AppVersion {
	s.Description = &v
	return s
}

func (s *AppVersion) SetErrorCode(v string) *AppVersion {
	s.ErrorCode = &v
	return s
}

func (s *AppVersion) SetErrorMsg(v string) *AppVersion {
	s.ErrorMsg = &v
	return s
}

func (s *AppVersion) SetEtag(v string) *AppVersion {
	s.Etag = &v
	return s
}

func (s *AppVersion) SetId(v string) *AppVersion {
	s.Id = &v
	return s
}

func (s *AppVersion) SetStatus(v string) *AppVersion {
	s.Status = &v
	return s
}

func (s *AppVersion) SetTaskId(v string) *AppVersion {
	s.TaskId = &v
	return s
}

func (s *AppVersion) SetUtcCreate(v string) *AppVersion {
	s.UtcCreate = &v
	return s
}

func (s *AppVersion) SetVersion(v string) *AppVersion {
	s.Version = &v
	return s
}

func (s *AppVersion) SetWorkspaceId(v string) *AppVersion {
	s.WorkspaceId = &v
	return s
}

// 一个执行的指令。
type OpsCmd struct {
	// 执行指令的参数列表
	Args []*OpsCmdArg `json:"args,omitempty" xml:"args,omitempty" type:"Repeated"`
	// 失败重试的间隔，单位为秒
	RetryInterval *int `json:"retry_interval,omitempty" xml:"retry_interval,omitempty"`
	// 失败重试次数
	RetryTimes *int `json:"retry_times,omitempty" xml:"retry_times,omitempty"`
	// 指令模板ID
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty"`
	// 单次执行的超时时间，单位为秒
	TimeOut *int `json:"time_out,omitempty" xml:"time_out,omitempty"`
}

func (s OpsCmd) String() string {
	return tea.Prettify(s)
}

func (s OpsCmd) GoString() string {
	return s.String()
}

func (s *OpsCmd) SetArgs(v []*OpsCmdArg) *OpsCmd {
	s.Args = v
	return s
}

func (s *OpsCmd) SetRetryInterval(v int) *OpsCmd {
	s.RetryInterval = &v
	return s
}

func (s *OpsCmd) SetRetryTimes(v int) *OpsCmd {
	s.RetryTimes = &v
	return s
}

func (s *OpsCmd) SetTemplateId(v string) *OpsCmd {
	s.TemplateId = &v
	return s
}

func (s *OpsCmd) SetTimeOut(v int) *OpsCmd {
	s.TimeOut = &v
	return s
}

// OpsTask
type OpsTask struct {
	// parent_group_id
	ParentGroupId *string `json:"parent_group_id,omitempty" xml:"parent_group_id,omitempty"`
	// service_id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// arrangement_id
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// action_handler_code
	ActionHandlerCode *string `json:"action_handler_code,omitempty" xml:"action_handler_code,omitempty"`
	// max_retry_attempts
	MaxRetryAttempts *int64 `json:"max_retry_attempts,omitempty" xml:"max_retry_attempts,omitempty"`
	// context
	Context []*Pair `json:"context,omitempty" xml:"context,omitempty" type:"Repeated"`
	// process_definition_id
	ProcessDefinitionId *string `json:"process_definition_id,omitempty" xml:"process_definition_id,omitempty"`
	// parent_id
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// parent_entity_type
	ParentEntityType *string `json:"parent_entity_type,omitempty" xml:"parent_entity_type,omitempty"`
	// state
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// started_time
	StartedTime *string `json:"started_time,omitempty" xml:"started_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// finished_time
	FinishedTime *string `json:"finished_time,omitempty" xml:"finished_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// standalone_executable
	StandaloneExecutable *bool `json:"standalone_executable,omitempty" xml:"standalone_executable,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s OpsTask) String() string {
	return tea.Prettify(s)
}

func (s OpsTask) GoString() string {
	return s.String()
}

func (s *OpsTask) SetParentGroupId(v string) *OpsTask {
	s.ParentGroupId = &v
	return s
}

func (s *OpsTask) SetServiceId(v string) *OpsTask {
	s.ServiceId = &v
	return s
}

func (s *OpsTask) SetArrangementId(v string) *OpsTask {
	s.ArrangementId = &v
	return s
}

func (s *OpsTask) SetActionHandlerCode(v string) *OpsTask {
	s.ActionHandlerCode = &v
	return s
}

func (s *OpsTask) SetMaxRetryAttempts(v int64) *OpsTask {
	s.MaxRetryAttempts = &v
	return s
}

func (s *OpsTask) SetContext(v []*Pair) *OpsTask {
	s.Context = v
	return s
}

func (s *OpsTask) SetProcessDefinitionId(v string) *OpsTask {
	s.ProcessDefinitionId = &v
	return s
}

func (s *OpsTask) SetParentId(v string) *OpsTask {
	s.ParentId = &v
	return s
}

func (s *OpsTask) SetParentEntityType(v string) *OpsTask {
	s.ParentEntityType = &v
	return s
}

func (s *OpsTask) SetState(v string) *OpsTask {
	s.State = &v
	return s
}

func (s *OpsTask) SetStartedTime(v string) *OpsTask {
	s.StartedTime = &v
	return s
}

func (s *OpsTask) SetFinishedTime(v string) *OpsTask {
	s.FinishedTime = &v
	return s
}

func (s *OpsTask) SetStandaloneExecutable(v bool) *OpsTask {
	s.StandaloneExecutable = &v
	return s
}

func (s *OpsTask) SetId(v string) *OpsTask {
	s.Id = &v
	return s
}

// 应用参数配置管理-某个参数在不同环境中渲染后的值
type RenderParam struct {
	// 参数名
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 参数值，可能是一个常量或者表达式
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	// 参数值类型，CONST/EXPR
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 参数描述
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
	// 数据保密级别，L1,L2,L3
	DataLevel *string `json:"data_level,omitempty" xml:"data_level,omitempty"`
	// 参数渲染后的值
	RenderVals []*ParamVal `json:"render_vals,omitempty" xml:"render_vals,omitempty" type:"Repeated"`
}

func (s RenderParam) String() string {
	return tea.Prettify(s)
}

func (s RenderParam) GoString() string {
	return s.String()
}

func (s *RenderParam) SetKey(v string) *RenderParam {
	s.Key = &v
	return s
}

func (s *RenderParam) SetValue(v string) *RenderParam {
	s.Value = &v
	return s
}

func (s *RenderParam) SetType(v string) *RenderParam {
	s.Type = &v
	return s
}

func (s *RenderParam) SetDesc(v string) *RenderParam {
	s.Desc = &v
	return s
}

func (s *RenderParam) SetDataLevel(v string) *RenderParam {
	s.DataLevel = &v
	return s
}

func (s *RenderParam) SetRenderVals(v []*ParamVal) *RenderParam {
	s.RenderVals = v
	return s
}

// BuildpackV2Adapter
type BuildpackAdapter struct {
	// buildpackArch
	BuildpackArch *string `json:"buildpack_arch,omitempty" xml:"buildpack_arch,omitempty"`
	// fullVersion
	FullVersion *string `json:"full_version,omitempty" xml:"full_version,omitempty"`
	// supportedOS
	SupportedOS []*BuildpackOS `json:"supported_o_s,omitempty" xml:"supported_o_s,omitempty" type:"Repeated"`
	// supportedRegions
	SupportedRegions []*BuildpackRegionRelationDetail `json:"supported_regions,omitempty" xml:"supported_regions,omitempty" type:"Repeated"`
	// techstack
	Techstack *Techstack `json:"techstack,omitempty" xml:"techstack,omitempty"`
}

func (s BuildpackAdapter) String() string {
	return tea.Prettify(s)
}

func (s BuildpackAdapter) GoString() string {
	return s.String()
}

func (s *BuildpackAdapter) SetBuildpackArch(v string) *BuildpackAdapter {
	s.BuildpackArch = &v
	return s
}

func (s *BuildpackAdapter) SetFullVersion(v string) *BuildpackAdapter {
	s.FullVersion = &v
	return s
}

func (s *BuildpackAdapter) SetSupportedOS(v []*BuildpackOS) *BuildpackAdapter {
	s.SupportedOS = v
	return s
}

func (s *BuildpackAdapter) SetSupportedRegions(v []*BuildpackRegionRelationDetail) *BuildpackAdapter {
	s.SupportedRegions = v
	return s
}

func (s *BuildpackAdapter) SetTechstack(v *Techstack) *BuildpackAdapter {
	s.Techstack = v
	return s
}

// AppServiceEnvParam
type AppServiceEnvParam struct {
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// app_service_id
	AppServiceId *string `json:"app_service_id,omitempty" xml:"app_service_id,omitempty"`
	// baseline_buildpack_id
	BaselineBuildpackId *string `json:"baseline_buildpack_id,omitempty" xml:"baseline_buildpack_id,omitempty"`
	// creation_time
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// default_value
	DefaultValue *string `json:"default_value,omitempty" xml:"default_value,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// modification_time
	ModificationTime *string `json:"modification_time,omitempty" xml:"modification_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// original_default_value
	OriginalDefaultValue *string `json:"original_default_value,omitempty" xml:"original_default_value,omitempty"`
	// original_description
	OriginalDescription *string `json:"original_description,omitempty" xml:"original_description,omitempty"`
	// original_readonly
	OriginalReadonly *string `json:"original_readonly,omitempty" xml:"original_readonly,omitempty"`
	// original_required
	OriginalRequired *bool `json:"original_required,omitempty" xml:"original_required,omitempty"`
	// readonly
	Readonly *bool `json:"readonly,omitempty" xml:"readonly,omitempty"`
	// required
	Required *bool `json:"required,omitempty" xml:"required,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s AppServiceEnvParam) String() string {
	return tea.Prettify(s)
}

func (s AppServiceEnvParam) GoString() string {
	return s.String()
}

func (s *AppServiceEnvParam) SetAppId(v string) *AppServiceEnvParam {
	s.AppId = &v
	return s
}

func (s *AppServiceEnvParam) SetAppServiceId(v string) *AppServiceEnvParam {
	s.AppServiceId = &v
	return s
}

func (s *AppServiceEnvParam) SetBaselineBuildpackId(v string) *AppServiceEnvParam {
	s.BaselineBuildpackId = &v
	return s
}

func (s *AppServiceEnvParam) SetCreationTime(v string) *AppServiceEnvParam {
	s.CreationTime = &v
	return s
}

func (s *AppServiceEnvParam) SetDefaultValue(v string) *AppServiceEnvParam {
	s.DefaultValue = &v
	return s
}

func (s *AppServiceEnvParam) SetDescription(v string) *AppServiceEnvParam {
	s.Description = &v
	return s
}

func (s *AppServiceEnvParam) SetId(v string) *AppServiceEnvParam {
	s.Id = &v
	return s
}

func (s *AppServiceEnvParam) SetKey(v string) *AppServiceEnvParam {
	s.Key = &v
	return s
}

func (s *AppServiceEnvParam) SetModificationTime(v string) *AppServiceEnvParam {
	s.ModificationTime = &v
	return s
}

func (s *AppServiceEnvParam) SetOriginalDefaultValue(v string) *AppServiceEnvParam {
	s.OriginalDefaultValue = &v
	return s
}

func (s *AppServiceEnvParam) SetOriginalDescription(v string) *AppServiceEnvParam {
	s.OriginalDescription = &v
	return s
}

func (s *AppServiceEnvParam) SetOriginalReadonly(v string) *AppServiceEnvParam {
	s.OriginalReadonly = &v
	return s
}

func (s *AppServiceEnvParam) SetOriginalRequired(v bool) *AppServiceEnvParam {
	s.OriginalRequired = &v
	return s
}

func (s *AppServiceEnvParam) SetReadonly(v bool) *AppServiceEnvParam {
	s.Readonly = &v
	return s
}

func (s *AppServiceEnvParam) SetRequired(v bool) *AppServiceEnvParam {
	s.Required = &v
	return s
}

func (s *AppServiceEnvParam) SetStatus(v string) *AppServiceEnvParam {
	s.Status = &v
	return s
}

func (s *AppServiceEnvParam) SetValue(v string) *AppServiceEnvParam {
	s.Value = &v
	return s
}

func (s *AppServiceEnvParam) SetWorkspaceId(v string) *AppServiceEnvParam {
	s.WorkspaceId = &v
	return s
}

// 角色信息
type Role struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
}

func (s Role) String() string {
	return tea.Prettify(s)
}

func (s Role) GoString() string {
	return s.String()
}

func (s *Role) SetId(v string) *Role {
	s.Id = &v
	return s
}

func (s *Role) SetName(v string) *Role {
	s.Name = &v
	return s
}

func (s *Role) SetDescription(v string) *Role {
	s.Description = &v
	return s
}

// BuildpackAppService
type BuildpackAppService struct {
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// appName
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// buildpackFullVersion
	BuildpackFullVersion *string `json:"buildpack_full_version,omitempty" xml:"buildpack_full_version,omitempty"`
	// buildpackId
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// cellIds
	CellIds []*string `json:"cell_ids,omitempty" xml:"cell_ids,omitempty" type:"Repeated"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// extendProperties
	ExtendProperties *string `json:"extend_properties,omitempty" xml:"extend_properties,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// isDefault
	IsDefault *bool `json:"is_default,omitempty" xml:"is_default,omitempty"`
	// isService
	IsService *bool `json:"is_service,omitempty" xml:"is_service,omitempty"`
	// lastDeployStatus
	LastDeployStatus *string `json:"last_deploy_status,omitempty" xml:"last_deploy_status,omitempty"`
	// lastDeployVersion
	LastDeployVersion *string `json:"last_deploy_version,omitempty" xml:"last_deploy_version,omitempty"`
	// lastOpsOrderId
	LastOpsOrderId *string `json:"last_ops_order_id,omitempty" xml:"last_ops_order_id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// ownerId
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty"`
	// techstackId
	TechstackId *int64 `json:"techstack_id,omitempty" xml:"techstack_id,omitempty"`
	// techstackIdentity
	TechstackIdentity *string `json:"techstack_identity,omitempty" xml:"techstack_identity,omitempty"`
	// techstackName
	TechstackName *string `json:"techstack_name,omitempty" xml:"techstack_name,omitempty"`
	// utcCreate
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// utcModified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s BuildpackAppService) String() string {
	return tea.Prettify(s)
}

func (s BuildpackAppService) GoString() string {
	return s.String()
}

func (s *BuildpackAppService) SetAppId(v string) *BuildpackAppService {
	s.AppId = &v
	return s
}

func (s *BuildpackAppService) SetAppName(v string) *BuildpackAppService {
	s.AppName = &v
	return s
}

func (s *BuildpackAppService) SetBuildpackFullVersion(v string) *BuildpackAppService {
	s.BuildpackFullVersion = &v
	return s
}

func (s *BuildpackAppService) SetBuildpackId(v string) *BuildpackAppService {
	s.BuildpackId = &v
	return s
}

func (s *BuildpackAppService) SetCellIds(v []*string) *BuildpackAppService {
	s.CellIds = v
	return s
}

func (s *BuildpackAppService) SetDescription(v string) *BuildpackAppService {
	s.Description = &v
	return s
}

func (s *BuildpackAppService) SetExtendProperties(v string) *BuildpackAppService {
	s.ExtendProperties = &v
	return s
}

func (s *BuildpackAppService) SetId(v string) *BuildpackAppService {
	s.Id = &v
	return s
}

func (s *BuildpackAppService) SetIsDefault(v bool) *BuildpackAppService {
	s.IsDefault = &v
	return s
}

func (s *BuildpackAppService) SetIsService(v bool) *BuildpackAppService {
	s.IsService = &v
	return s
}

func (s *BuildpackAppService) SetLastDeployStatus(v string) *BuildpackAppService {
	s.LastDeployStatus = &v
	return s
}

func (s *BuildpackAppService) SetLastDeployVersion(v string) *BuildpackAppService {
	s.LastDeployVersion = &v
	return s
}

func (s *BuildpackAppService) SetLastOpsOrderId(v string) *BuildpackAppService {
	s.LastOpsOrderId = &v
	return s
}

func (s *BuildpackAppService) SetName(v string) *BuildpackAppService {
	s.Name = &v
	return s
}

func (s *BuildpackAppService) SetOwnerId(v string) *BuildpackAppService {
	s.OwnerId = &v
	return s
}

func (s *BuildpackAppService) SetTechstackId(v int64) *BuildpackAppService {
	s.TechstackId = &v
	return s
}

func (s *BuildpackAppService) SetTechstackIdentity(v string) *BuildpackAppService {
	s.TechstackIdentity = &v
	return s
}

func (s *BuildpackAppService) SetTechstackName(v string) *BuildpackAppService {
	s.TechstackName = &v
	return s
}

func (s *BuildpackAppService) SetUtcCreate(v string) *BuildpackAppService {
	s.UtcCreate = &v
	return s
}

func (s *BuildpackAppService) SetUtcModified(v string) *BuildpackAppService {
	s.UtcModified = &v
	return s
}

func (s *BuildpackAppService) SetWorkspaceId(v string) *BuildpackAppService {
	s.WorkspaceId = &v
	return s
}

// 应用管理-当前 workspace 的部署图/拓扑图
type DeployView struct {
	// 当前 workspace 下的所有应用服务
	WorkspaceAppServices []*AppServiceEntity `json:"workspace_app_services,omitempty" xml:"workspace_app_services,omitempty" type:"Repeated"`
	// workspace 显示名称
	WorkspaceDisplayName *string `json:"workspace_display_name,omitempty" xml:"workspace_display_name,omitempty"`
	// workspace id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// workspace 名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
}

func (s DeployView) String() string {
	return tea.Prettify(s)
}

func (s DeployView) GoString() string {
	return s.String()
}

func (s *DeployView) SetWorkspaceAppServices(v []*AppServiceEntity) *DeployView {
	s.WorkspaceAppServices = v
	return s
}

func (s *DeployView) SetWorkspaceDisplayName(v string) *DeployView {
	s.WorkspaceDisplayName = &v
	return s
}

func (s *DeployView) SetWorkspaceId(v string) *DeployView {
	s.WorkspaceId = &v
	return s
}

func (s *DeployView) SetWorkspaceName(v string) *DeployView {
	s.WorkspaceName = &v
	return s
}

// sidecar规则
type SidecarRule struct {
	// sidecar规则描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 创建时间
	GmtCreated *string `json:"gmt_created,omitempty" xml:"gmt_created,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 版本实例名称
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty"`
	// 规则优先级
	Level *int64 `json:"level,omitempty" xml:"level,omitempty"`
	// scope生效范围详情
	ScopeDetail *SidecarScopeDetail `json:"scope_detail,omitempty" xml:"scope_detail,omitempty"`
	// sidecar版本实例id
	SidecarVersionInstanceId *string `json:"sidecar_version_instance_id,omitempty" xml:"sidecar_version_instance_id,omitempty"`
	// 规则状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 发布、下线、废弃原因
	//
	StatusReason *string `json:"status_reason,omitempty" xml:"status_reason,omitempty"`
}

func (s SidecarRule) String() string {
	return tea.Prettify(s)
}

func (s SidecarRule) GoString() string {
	return s.String()
}

func (s *SidecarRule) SetDescription(v string) *SidecarRule {
	s.Description = &v
	return s
}

func (s *SidecarRule) SetGmtCreated(v string) *SidecarRule {
	s.GmtCreated = &v
	return s
}

func (s *SidecarRule) SetGmtModified(v string) *SidecarRule {
	s.GmtModified = &v
	return s
}

func (s *SidecarRule) SetInstanceName(v string) *SidecarRule {
	s.InstanceName = &v
	return s
}

func (s *SidecarRule) SetLevel(v int64) *SidecarRule {
	s.Level = &v
	return s
}

func (s *SidecarRule) SetScopeDetail(v *SidecarScopeDetail) *SidecarRule {
	s.ScopeDetail = v
	return s
}

func (s *SidecarRule) SetSidecarVersionInstanceId(v string) *SidecarRule {
	s.SidecarVersionInstanceId = &v
	return s
}

func (s *SidecarRule) SetStatus(v int64) *SidecarRule {
	s.Status = &v
	return s
}

func (s *SidecarRule) SetStatusReason(v string) *SidecarRule {
	s.StatusReason = &v
	return s
}

// SupportedRegion
type SupportedRegion struct {
	// file_size
	FileSize *int64 `json:"file_size,omitempty" xml:"file_size,omitempty"`
	// file_status
	FileStatus *string `json:"file_status,omitempty" xml:"file_status,omitempty"`
	// original_file_name
	OriginalFileName *string `json:"original_file_name,omitempty" xml:"original_file_name,omitempty"`
	// region_id
	RegionNum *string `json:"region_num,omitempty" xml:"region_num,omitempty"`
}

func (s SupportedRegion) String() string {
	return tea.Prettify(s)
}

func (s SupportedRegion) GoString() string {
	return s.String()
}

func (s *SupportedRegion) SetFileSize(v int64) *SupportedRegion {
	s.FileSize = &v
	return s
}

func (s *SupportedRegion) SetFileStatus(v string) *SupportedRegion {
	s.FileStatus = &v
	return s
}

func (s *SupportedRegion) SetOriginalFileName(v string) *SupportedRegion {
	s.OriginalFileName = &v
	return s
}

func (s *SupportedRegion) SetRegionNum(v string) *SupportedRegion {
	s.RegionNum = &v
	return s
}

// 异步任务执行结果。
type TaskResult struct {
	// 任务执行结果。取值：
	//                     SUCCESSFUL：任务执行成功；
	//                     FAILED：任务执行失败
	//
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
	// 任务目标id，如：一个Computer的id
	TargetId *string `json:"target_id,omitempty" xml:"target_id,omitempty"`
}

func (s TaskResult) String() string {
	return tea.Prettify(s)
}

func (s TaskResult) GoString() string {
	return s.String()
}

func (s *TaskResult) SetResult(v string) *TaskResult {
	s.Result = &v
	return s
}

func (s *TaskResult) SetTargetId(v string) *TaskResult {
	s.TargetId = &v
	return s
}

// 应用参数配置管理-应用参数
type AppParam struct {
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 创建时间
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 数据保密等级
	DataLevel *string `json:"data_level,omitempty" xml:"data_level,omitempty"`
	// 参数描述
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
	// 应用参数 id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 参数名
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 修改时间
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 版本
	ParamVersion *int64 `json:"param_version,omitempty" xml:"param_version,omitempty"`
	// 该参数属于哪个 scope
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 该参数在该 scope 中的 id
	ScopeId *string `json:"scope_id,omitempty" xml:"scope_id,omitempty"`
	// 租户 id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 参数类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 参数值
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s AppParam) String() string {
	return tea.Prettify(s)
}

func (s AppParam) GoString() string {
	return s.String()
}

func (s *AppParam) SetAppName(v string) *AppParam {
	s.AppName = &v
	return s
}

func (s *AppParam) SetCreatedTime(v string) *AppParam {
	s.CreatedTime = &v
	return s
}

func (s *AppParam) SetDataLevel(v string) *AppParam {
	s.DataLevel = &v
	return s
}

func (s *AppParam) SetDesc(v string) *AppParam {
	s.Desc = &v
	return s
}

func (s *AppParam) SetId(v string) *AppParam {
	s.Id = &v
	return s
}

func (s *AppParam) SetKey(v string) *AppParam {
	s.Key = &v
	return s
}

func (s *AppParam) SetModifiedTime(v string) *AppParam {
	s.ModifiedTime = &v
	return s
}

func (s *AppParam) SetParamVersion(v int64) *AppParam {
	s.ParamVersion = &v
	return s
}

func (s *AppParam) SetScope(v string) *AppParam {
	s.Scope = &v
	return s
}

func (s *AppParam) SetScopeId(v string) *AppParam {
	s.ScopeId = &v
	return s
}

func (s *AppParam) SetTenantId(v string) *AppParam {
	s.TenantId = &v
	return s
}

func (s *AppParam) SetType(v string) *AppParam {
	s.Type = &v
	return s
}

func (s *AppParam) SetValue(v string) *AppParam {
	s.Value = &v
	return s
}

// sidecar版本实例
type SidecarVersionInstance struct {
	// 版本实例描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 创建时间
	GmtCreated *string `json:"gmt_created,omitempty" xml:"gmt_created,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 版本实例名称
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty"`
	// 环境参数模板
	Params *string `json:"params,omitempty" xml:"params,omitempty"`
	// sidecar参数配置
	ParamsConfigs []*SidecarParamsConfig `json:"params_configs,omitempty" xml:"params_configs,omitempty" type:"Repeated"`
	// sidecar版本发布说明
	ReleaseNote *string `json:"release_note,omitempty" xml:"release_note,omitempty"`
	// scope生效范围详情
	ScopeDetail *SidecarScopeDetail `json:"scope_detail,omitempty" xml:"scope_detail,omitempty"`
	// sidecar名称
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty"`
	// sidecar版本id
	SidecarReleaseVersionId *string `json:"sidecar_release_version_id,omitempty" xml:"sidecar_release_version_id,omitempty"`
	// sidecar版本号
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty"`
	// sidecar版本实例id
	SidecarVersionInstanceId *string `json:"sidecar_version_instance_id,omitempty" xml:"sidecar_version_instance_id,omitempty"`
	// 版本实例状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 发布、下线、废弃原因
	//
	StatusReason *string `json:"status_reason,omitempty" xml:"status_reason,omitempty"`
	// sidecar版本模板
	Template *string `json:"template,omitempty" xml:"template,omitempty"`
	// sidecar模板配置
	TemplateConfigs []*SidecarTemplateConfig `json:"template_configs,omitempty" xml:"template_configs,omitempty" type:"Repeated"`
}

func (s SidecarVersionInstance) String() string {
	return tea.Prettify(s)
}

func (s SidecarVersionInstance) GoString() string {
	return s.String()
}

func (s *SidecarVersionInstance) SetDescription(v string) *SidecarVersionInstance {
	s.Description = &v
	return s
}

func (s *SidecarVersionInstance) SetGmtCreated(v string) *SidecarVersionInstance {
	s.GmtCreated = &v
	return s
}

func (s *SidecarVersionInstance) SetGmtModified(v string) *SidecarVersionInstance {
	s.GmtModified = &v
	return s
}

func (s *SidecarVersionInstance) SetInstanceName(v string) *SidecarVersionInstance {
	s.InstanceName = &v
	return s
}

func (s *SidecarVersionInstance) SetParams(v string) *SidecarVersionInstance {
	s.Params = &v
	return s
}

func (s *SidecarVersionInstance) SetParamsConfigs(v []*SidecarParamsConfig) *SidecarVersionInstance {
	s.ParamsConfigs = v
	return s
}

func (s *SidecarVersionInstance) SetReleaseNote(v string) *SidecarVersionInstance {
	s.ReleaseNote = &v
	return s
}

func (s *SidecarVersionInstance) SetScopeDetail(v *SidecarScopeDetail) *SidecarVersionInstance {
	s.ScopeDetail = v
	return s
}

func (s *SidecarVersionInstance) SetSidecarName(v string) *SidecarVersionInstance {
	s.SidecarName = &v
	return s
}

func (s *SidecarVersionInstance) SetSidecarReleaseVersionId(v string) *SidecarVersionInstance {
	s.SidecarReleaseVersionId = &v
	return s
}

func (s *SidecarVersionInstance) SetSidecarVersion(v string) *SidecarVersionInstance {
	s.SidecarVersion = &v
	return s
}

func (s *SidecarVersionInstance) SetSidecarVersionInstanceId(v string) *SidecarVersionInstance {
	s.SidecarVersionInstanceId = &v
	return s
}

func (s *SidecarVersionInstance) SetStatus(v int64) *SidecarVersionInstance {
	s.Status = &v
	return s
}

func (s *SidecarVersionInstance) SetStatusReason(v string) *SidecarVersionInstance {
	s.StatusReason = &v
	return s
}

func (s *SidecarVersionInstance) SetTemplate(v string) *SidecarVersionInstance {
	s.Template = &v
	return s
}

func (s *SidecarVersionInstance) SetTemplateConfigs(v []*SidecarTemplateConfig) *SidecarVersionInstance {
	s.TemplateConfigs = v
	return s
}

// 技术栈版本和地域之间的关联
type BuildpackRegionRelation struct {
	// 技术栈版本的id
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// 技术栈租户ID
	BuildpackTenantId *string `json:"buildpack_tenant_id,omitempty" xml:"buildpack_tenant_id,omitempty"`
	// 文件的checksum
	FileChecksum *string `json:"file_checksum,omitempty" xml:"file_checksum,omitempty"`
	// 文件存储地址
	FileLocation *string `json:"file_location,omitempty" xml:"file_location,omitempty"`
	// 文件大小，类似1100
	FileSize *int64 `json:"file_size,omitempty" xml:"file_size,omitempty"`
	// 文件状态
	FileStatus *string `json:"file_status,omitempty" xml:"file_status,omitempty"`
	// 文件的初始名称
	OriginalFileName *string `json:"original_file_name,omitempty" xml:"original_file_name,omitempty"`
	// 文件可读的大小，类似1.1MB
	ReadableFileSize *string `json:"readable_file_size,omitempty" xml:"readable_file_size,omitempty"`
	// region的ID
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// region的标识符
	RegionIdentity *string `json:"region_identity,omitempty" xml:"region_identity,omitempty"`
	// region的名称
	RegionName *string `json:"region_name,omitempty" xml:"region_name,omitempty"`
	// 存储类型，取值如下： SYSTEM_AFS表示AFS存储，SYSTEM_OSS表示OSS存储
	StorageType *string `json:"storage_type,omitempty" xml:"storage_type,omitempty"`
}

func (s BuildpackRegionRelation) String() string {
	return tea.Prettify(s)
}

func (s BuildpackRegionRelation) GoString() string {
	return s.String()
}

func (s *BuildpackRegionRelation) SetBuildpackId(v string) *BuildpackRegionRelation {
	s.BuildpackId = &v
	return s
}

func (s *BuildpackRegionRelation) SetBuildpackTenantId(v string) *BuildpackRegionRelation {
	s.BuildpackTenantId = &v
	return s
}

func (s *BuildpackRegionRelation) SetFileChecksum(v string) *BuildpackRegionRelation {
	s.FileChecksum = &v
	return s
}

func (s *BuildpackRegionRelation) SetFileLocation(v string) *BuildpackRegionRelation {
	s.FileLocation = &v
	return s
}

func (s *BuildpackRegionRelation) SetFileSize(v int64) *BuildpackRegionRelation {
	s.FileSize = &v
	return s
}

func (s *BuildpackRegionRelation) SetFileStatus(v string) *BuildpackRegionRelation {
	s.FileStatus = &v
	return s
}

func (s *BuildpackRegionRelation) SetOriginalFileName(v string) *BuildpackRegionRelation {
	s.OriginalFileName = &v
	return s
}

func (s *BuildpackRegionRelation) SetReadableFileSize(v string) *BuildpackRegionRelation {
	s.ReadableFileSize = &v
	return s
}

func (s *BuildpackRegionRelation) SetRegionId(v string) *BuildpackRegionRelation {
	s.RegionId = &v
	return s
}

func (s *BuildpackRegionRelation) SetRegionIdentity(v string) *BuildpackRegionRelation {
	s.RegionIdentity = &v
	return s
}

func (s *BuildpackRegionRelation) SetRegionName(v string) *BuildpackRegionRelation {
	s.RegionName = &v
	return s
}

func (s *BuildpackRegionRelation) SetStorageType(v string) *BuildpackRegionRelation {
	s.StorageType = &v
	return s
}

// region info
type RegionMeta struct {
	// region支持的网络类型
	AvailableNetworkTypes []*string `json:"available_network_types,omitempty" xml:"available_network_types,omitempty" type:"Repeated"`
	// region display name
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// region identity
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// region paas id
	PaasId *string `json:"paas_id,omitempty" xml:"paas_id,omitempty"`
	// region iaas id
	RegionIaasId *string `json:"region_iaas_id,omitempty" xml:"region_iaas_id,omitempty"`
	// region包含的所有zone id列表
	ZoneIds []*string `json:"zone_ids,omitempty" xml:"zone_ids,omitempty" type:"Repeated"`
	// region state.
	State *string `json:"state,omitempty" xml:"state,omitempty"`
}

func (s RegionMeta) String() string {
	return tea.Prettify(s)
}

func (s RegionMeta) GoString() string {
	return s.String()
}

func (s *RegionMeta) SetAvailableNetworkTypes(v []*string) *RegionMeta {
	s.AvailableNetworkTypes = v
	return s
}

func (s *RegionMeta) SetDisplayName(v string) *RegionMeta {
	s.DisplayName = &v
	return s
}

func (s *RegionMeta) SetId(v string) *RegionMeta {
	s.Id = &v
	return s
}

func (s *RegionMeta) SetPaasId(v string) *RegionMeta {
	s.PaasId = &v
	return s
}

func (s *RegionMeta) SetRegionIaasId(v string) *RegionMeta {
	s.RegionIaasId = &v
	return s
}

func (s *RegionMeta) SetZoneIds(v []*string) *RegionMeta {
	s.ZoneIds = v
	return s
}

func (s *RegionMeta) SetState(v string) *RegionMeta {
	s.State = &v
	return s
}

// WorkspaceGroup
type WorkspaceGroup struct {
	// 环境名称
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 环境显示名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 环境状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// 工作空间名称列表
	Workspaces []*string `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s WorkspaceGroup) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceGroup) GoString() string {
	return s.String()
}

func (s *WorkspaceGroup) SetId(v string) *WorkspaceGroup {
	s.Id = &v
	return s
}

func (s *WorkspaceGroup) SetName(v string) *WorkspaceGroup {
	s.Name = &v
	return s
}

func (s *WorkspaceGroup) SetStatus(v string) *WorkspaceGroup {
	s.Status = &v
	return s
}

func (s *WorkspaceGroup) SetTenant(v string) *WorkspaceGroup {
	s.Tenant = &v
	return s
}

func (s *WorkspaceGroup) SetWorkspaces(v []*string) *WorkspaceGroup {
	s.Workspaces = v
	return s
}

// 聚合任务执行进度
type AggregatedTaskExecutionProgress struct {
	// 错误节点信息
	ErrorTaskExecutionNodes []*ErrorTaskExecutionNode `json:"error_task_execution_nodes,omitempty" xml:"error_task_execution_nodes,omitempty" type:"Repeated"`
	// 任务执行进度
	TaskExecutionProgress *TaskExecutionProgress `json:"task_execution_progress,omitempty" xml:"task_execution_progress,omitempty"`
}

func (s AggregatedTaskExecutionProgress) String() string {
	return tea.Prettify(s)
}

func (s AggregatedTaskExecutionProgress) GoString() string {
	return s.String()
}

func (s *AggregatedTaskExecutionProgress) SetErrorTaskExecutionNodes(v []*ErrorTaskExecutionNode) *AggregatedTaskExecutionProgress {
	s.ErrorTaskExecutionNodes = v
	return s
}

func (s *AggregatedTaskExecutionProgress) SetTaskExecutionProgress(v *TaskExecutionProgress) *AggregatedTaskExecutionProgress {
	s.TaskExecutionProgress = v
	return s
}

// 发布单
type OpsPlan struct {
	// 是否自动执行
	AutoExecution *bool `json:"auto_execution,omitempty" xml:"auto_execution,omitempty"`
	// 上下文
	Context []*Pair `json:"context,omitempty" xml:"context,omitempty" type:"Repeated"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 是否开启通知
	EnableNotification *bool `json:"enable_notification,omitempty" xml:"enable_notification,omitempty"`
	// 执行人 ID
	ExecutorId *string `json:"executor_id,omitempty" xml:"executor_id,omitempty"`
	// 执行人
	ExecutorName *string `json:"executor_name,omitempty" xml:"executor_name,omitempty"`
	// 完成时间
	FinishedTime *string `json:"finished_time,omitempty" xml:"finished_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// last operator
	LastOperator *string `json:"last_operator,omitempty" xml:"last_operator,omitempty"`
	// 详情
	MessageDetail []*Pair `json:"message_detail,omitempty" xml:"message_detail,omitempty" type:"Repeated"`
	// 信息
	MessageParams *string `json:"message_params,omitempty" xml:"message_params,omitempty"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 类型
	OpsType *string `json:"ops_type,omitempty" xml:"ops_type,omitempty"`
	// 发布进程
	ProcessDefinitions []*OpsProcessDefinition `json:"process_definitions,omitempty" xml:"process_definitions,omitempty" type:"Repeated"`
	// release_mode
	ReleaseMode *string `json:"release_mode,omitempty" xml:"release_mode,omitempty"`
	// 回滚单ID
	RollbackPlanId *string `json:"rollback_plan_id,omitempty" xml:"rollback_plan_id,omitempty"`
	// 是否可独立执行
	StandaloneExecutable *bool `json:"standalone_executable,omitempty" xml:"standalone_executable,omitempty"`
	// 开始时间
	StartedTime *string `json:"started_time,omitempty" xml:"started_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 状态
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 发布单 ID
	TimeSeriesId *string `json:"time_series_id,omitempty" xml:"time_series_id,omitempty"`
}

func (s OpsPlan) String() string {
	return tea.Prettify(s)
}

func (s OpsPlan) GoString() string {
	return s.String()
}

func (s *OpsPlan) SetAutoExecution(v bool) *OpsPlan {
	s.AutoExecution = &v
	return s
}

func (s *OpsPlan) SetContext(v []*Pair) *OpsPlan {
	s.Context = v
	return s
}

func (s *OpsPlan) SetDescription(v string) *OpsPlan {
	s.Description = &v
	return s
}

func (s *OpsPlan) SetEnableNotification(v bool) *OpsPlan {
	s.EnableNotification = &v
	return s
}

func (s *OpsPlan) SetExecutorId(v string) *OpsPlan {
	s.ExecutorId = &v
	return s
}

func (s *OpsPlan) SetExecutorName(v string) *OpsPlan {
	s.ExecutorName = &v
	return s
}

func (s *OpsPlan) SetFinishedTime(v string) *OpsPlan {
	s.FinishedTime = &v
	return s
}

func (s *OpsPlan) SetId(v string) *OpsPlan {
	s.Id = &v
	return s
}

func (s *OpsPlan) SetLastOperator(v string) *OpsPlan {
	s.LastOperator = &v
	return s
}

func (s *OpsPlan) SetMessageDetail(v []*Pair) *OpsPlan {
	s.MessageDetail = v
	return s
}

func (s *OpsPlan) SetMessageParams(v string) *OpsPlan {
	s.MessageParams = &v
	return s
}

func (s *OpsPlan) SetName(v string) *OpsPlan {
	s.Name = &v
	return s
}

func (s *OpsPlan) SetOpsType(v string) *OpsPlan {
	s.OpsType = &v
	return s
}

func (s *OpsPlan) SetProcessDefinitions(v []*OpsProcessDefinition) *OpsPlan {
	s.ProcessDefinitions = v
	return s
}

func (s *OpsPlan) SetReleaseMode(v string) *OpsPlan {
	s.ReleaseMode = &v
	return s
}

func (s *OpsPlan) SetRollbackPlanId(v string) *OpsPlan {
	s.RollbackPlanId = &v
	return s
}

func (s *OpsPlan) SetStandaloneExecutable(v bool) *OpsPlan {
	s.StandaloneExecutable = &v
	return s
}

func (s *OpsPlan) SetStartedTime(v string) *OpsPlan {
	s.StartedTime = &v
	return s
}

func (s *OpsPlan) SetState(v string) *OpsPlan {
	s.State = &v
	return s
}

func (s *OpsPlan) SetTimeSeriesId(v string) *OpsPlan {
	s.TimeSeriesId = &v
	return s
}

// 逻辑单元
type CellGroup struct {
	// 包含部署单元列表
	Cells []*DeployCell `json:"cells,omitempty" xml:"cells,omitempty" type:"Repeated"`
	// 机房名称
	Datacenter *string `json:"datacenter,omitempty" xml:"datacenter,omitempty"`
	// 默认全局域
	DefaultGzone *string `json:"default_gzone,omitempty" xml:"default_gzone,omitempty"`
	// 逻辑单元灾备信息
	DisasterInfo []*DisasterInfo `json:"disaster_info,omitempty" xml:"disaster_info,omitempty" type:"Repeated"`
	// 修改时间
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 逻辑单元名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// 所属地域：CZone Group 必填
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// 逻辑单元类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CellGroup) String() string {
	return tea.Prettify(s)
}

func (s CellGroup) GoString() string {
	return s.String()
}

func (s *CellGroup) SetCells(v []*DeployCell) *CellGroup {
	s.Cells = v
	return s
}

func (s *CellGroup) SetDatacenter(v string) *CellGroup {
	s.Datacenter = &v
	return s
}

func (s *CellGroup) SetDefaultGzone(v string) *CellGroup {
	s.DefaultGzone = &v
	return s
}

func (s *CellGroup) SetDisasterInfo(v []*DisasterInfo) *CellGroup {
	s.DisasterInfo = v
	return s
}

func (s *CellGroup) SetModifiedTime(v string) *CellGroup {
	s.ModifiedTime = &v
	return s
}

func (s *CellGroup) SetName(v string) *CellGroup {
	s.Name = &v
	return s
}

func (s *CellGroup) SetOperator(v string) *CellGroup {
	s.Operator = &v
	return s
}

func (s *CellGroup) SetRegion(v string) *CellGroup {
	s.Region = &v
	return s
}

func (s *CellGroup) SetType(v string) *CellGroup {
	s.Type = &v
	return s
}

// AppServiceBuildpackRelation
type AppServiceBuildpackRelation struct {
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// app_service_id
	AppServiceId *string `json:"app_service_id,omitempty" xml:"app_service_id,omitempty"`
	// buildpack_arch
	BuildpackArch *string `json:"buildpack_arch,omitempty" xml:"buildpack_arch,omitempty"`
	// buildpack_full_version
	BuildpackFullVersion *string `json:"buildpack_full_version,omitempty" xml:"buildpack_full_version,omitempty"`
	// buildpack_id
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// creation_time
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// extra_info
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// modification_time
	ModificationTime *string `json:"modification_time,omitempty" xml:"modification_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// techstack_id
	TechstackId *int64 `json:"techstack_id,omitempty" xml:"techstack_id,omitempty"`
	// techstack_identity
	TechstackIdentity *string `json:"techstack_identity,omitempty" xml:"techstack_identity,omitempty"`
	// techstack_name
	TechstackName *string `json:"techstack_name,omitempty" xml:"techstack_name,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s AppServiceBuildpackRelation) String() string {
	return tea.Prettify(s)
}

func (s AppServiceBuildpackRelation) GoString() string {
	return s.String()
}

func (s *AppServiceBuildpackRelation) SetAppId(v string) *AppServiceBuildpackRelation {
	s.AppId = &v
	return s
}

func (s *AppServiceBuildpackRelation) SetAppServiceId(v string) *AppServiceBuildpackRelation {
	s.AppServiceId = &v
	return s
}

func (s *AppServiceBuildpackRelation) SetBuildpackArch(v string) *AppServiceBuildpackRelation {
	s.BuildpackArch = &v
	return s
}

func (s *AppServiceBuildpackRelation) SetBuildpackFullVersion(v string) *AppServiceBuildpackRelation {
	s.BuildpackFullVersion = &v
	return s
}

func (s *AppServiceBuildpackRelation) SetBuildpackId(v string) *AppServiceBuildpackRelation {
	s.BuildpackId = &v
	return s
}

func (s *AppServiceBuildpackRelation) SetCreationTime(v string) *AppServiceBuildpackRelation {
	s.CreationTime = &v
	return s
}

func (s *AppServiceBuildpackRelation) SetExtraInfo(v string) *AppServiceBuildpackRelation {
	s.ExtraInfo = &v
	return s
}

func (s *AppServiceBuildpackRelation) SetId(v string) *AppServiceBuildpackRelation {
	s.Id = &v
	return s
}

func (s *AppServiceBuildpackRelation) SetModificationTime(v string) *AppServiceBuildpackRelation {
	s.ModificationTime = &v
	return s
}

func (s *AppServiceBuildpackRelation) SetTechstackId(v int64) *AppServiceBuildpackRelation {
	s.TechstackId = &v
	return s
}

func (s *AppServiceBuildpackRelation) SetTechstackIdentity(v string) *AppServiceBuildpackRelation {
	s.TechstackIdentity = &v
	return s
}

func (s *AppServiceBuildpackRelation) SetTechstackName(v string) *AppServiceBuildpackRelation {
	s.TechstackName = &v
	return s
}

func (s *AppServiceBuildpackRelation) SetWorkspaceId(v string) *AppServiceBuildpackRelation {
	s.WorkspaceId = &v
	return s
}

// 区域视图
type RegionView struct {
	// 支持的网络类型列表
	AvailableNetworkTypes []*string `json:"available_network_types,omitempty" xml:"available_network_types,omitempty" type:"Repeated"`
	// 显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// table id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 标识
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// region包含的所有zone 列表
	Zones []*ZoneView `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
}

func (s RegionView) String() string {
	return tea.Prettify(s)
}

func (s RegionView) GoString() string {
	return s.String()
}

func (s *RegionView) SetAvailableNetworkTypes(v []*string) *RegionView {
	s.AvailableNetworkTypes = v
	return s
}

func (s *RegionView) SetDisplayName(v string) *RegionView {
	s.DisplayName = &v
	return s
}

func (s *RegionView) SetId(v string) *RegionView {
	s.Id = &v
	return s
}

func (s *RegionView) SetIdentity(v string) *RegionView {
	s.Identity = &v
	return s
}

func (s *RegionView) SetZones(v []*ZoneView) *RegionView {
	s.Zones = v
	return s
}

// 计算资源与Cell的关系信息
type ComputerCell struct {
	// 部署单元唯一标识
	CellId *string `json:"cell_id,omitempty" xml:"cell_id,omitempty"`
	// 计算资源唯一标识
	ComputerId *string `json:"computer_id,omitempty" xml:"computer_id,omitempty"`
}

func (s ComputerCell) String() string {
	return tea.Prettify(s)
}

func (s ComputerCell) GoString() string {
	return s.String()
}

func (s *ComputerCell) SetCellId(v string) *ComputerCell {
	s.CellId = &v
	return s
}

func (s *ComputerCell) SetComputerId(v string) *ComputerCell {
	s.ComputerId = &v
	return s
}

// 一个指令模板。
type CmdTemplate struct {
	// 指令模板定义的参数名称。比如：./install_env.sh --version 2.2，其中的 --version 就是参数名称
	ArgNames []*string `json:"arg_names,omitempty" xml:"arg_names,omitempty" type:"Repeated"`
	// 指令模板内容，可以为一个简单命令，也可是一个自定义脚本
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// 指令模板创建者，通常为改用户注册蚂蚁金融云的email
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// 指令模板描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 在机器上执行该指令的账号，比如：root, admin
	ExecuteAccount *string `json:"execute_account,omitempty" xml:"execute_account,omitempty"`
	// 指令模板ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 指令名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 失败重试的间隔，单位为秒
	RetryInterval *int `json:"retry_interval,omitempty" xml:"retry_interval,omitempty"`
	// 失败重试次数
	RetryTimes *int `json:"retry_times,omitempty" xml:"retry_times,omitempty"`
	// 单次执行的超时时间，单位为秒
	TimeOut *int `json:"time_out,omitempty" xml:"time_out,omitempty"`
	// 模板类型。目前取值列表：
	//                     SIMPLE_COMMAND：简单指令类型；
	//                     CUSTOM_SHELL_SCRIPT：用户自定义shell脚本
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CmdTemplate) String() string {
	return tea.Prettify(s)
}

func (s CmdTemplate) GoString() string {
	return s.String()
}

func (s *CmdTemplate) SetArgNames(v []*string) *CmdTemplate {
	s.ArgNames = v
	return s
}

func (s *CmdTemplate) SetContent(v string) *CmdTemplate {
	s.Content = &v
	return s
}

func (s *CmdTemplate) SetCreator(v string) *CmdTemplate {
	s.Creator = &v
	return s
}

func (s *CmdTemplate) SetDescription(v string) *CmdTemplate {
	s.Description = &v
	return s
}

func (s *CmdTemplate) SetExecuteAccount(v string) *CmdTemplate {
	s.ExecuteAccount = &v
	return s
}

func (s *CmdTemplate) SetId(v string) *CmdTemplate {
	s.Id = &v
	return s
}

func (s *CmdTemplate) SetName(v string) *CmdTemplate {
	s.Name = &v
	return s
}

func (s *CmdTemplate) SetRetryInterval(v int) *CmdTemplate {
	s.RetryInterval = &v
	return s
}

func (s *CmdTemplate) SetRetryTimes(v int) *CmdTemplate {
	s.RetryTimes = &v
	return s
}

func (s *CmdTemplate) SetTimeOut(v int) *CmdTemplate {
	s.TimeOut = &v
	return s
}

func (s *CmdTemplate) SetType(v string) *CmdTemplate {
	s.Type = &v
	return s
}

// 一个应用发布包视图
type AppPackageListView struct {
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// appName
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// packageCount
	PackageCount *int64 `json:"package_count,omitempty" xml:"package_count,omitempty"`
	// buildpackId
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// buildpackName
	BuildpackName *string `json:"buildpack_name,omitempty" xml:"buildpack_name,omitempty"`
	// buildpackVersion
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
	// appOwnerId
	AppOwnerId *string `json:"app_owner_id,omitempty" xml:"app_owner_id,omitempty"`
	// appOwnerName
	AppOwnerName *string `json:"app_owner_name,omitempty" xml:"app_owner_name,omitempty"`
	// latestPackage
	LatestPackage *AppManifest `json:"latest_package,omitempty" xml:"latest_package,omitempty"`
	// appStatus
	AppStatus *string `json:"app_status,omitempty" xml:"app_status,omitempty"`
}

func (s AppPackageListView) String() string {
	return tea.Prettify(s)
}

func (s AppPackageListView) GoString() string {
	return s.String()
}

func (s *AppPackageListView) SetAppId(v string) *AppPackageListView {
	s.AppId = &v
	return s
}

func (s *AppPackageListView) SetAppName(v string) *AppPackageListView {
	s.AppName = &v
	return s
}

func (s *AppPackageListView) SetPackageCount(v int64) *AppPackageListView {
	s.PackageCount = &v
	return s
}

func (s *AppPackageListView) SetBuildpackId(v string) *AppPackageListView {
	s.BuildpackId = &v
	return s
}

func (s *AppPackageListView) SetBuildpackName(v string) *AppPackageListView {
	s.BuildpackName = &v
	return s
}

func (s *AppPackageListView) SetBuildpackVersion(v string) *AppPackageListView {
	s.BuildpackVersion = &v
	return s
}

func (s *AppPackageListView) SetAppOwnerId(v string) *AppPackageListView {
	s.AppOwnerId = &v
	return s
}

func (s *AppPackageListView) SetAppOwnerName(v string) *AppPackageListView {
	s.AppOwnerName = &v
	return s
}

func (s *AppPackageListView) SetLatestPackage(v *AppManifest) *AppPackageListView {
	s.LatestPackage = v
	return s
}

func (s *AppPackageListView) SetAppStatus(v string) *AppPackageListView {
	s.AppStatus = &v
	return s
}

// 重试信息
type RetryInfo struct {
	// action
	Action *string `json:"action,omitempty" xml:"action,omitempty"`
	// check_interval
	CheckInterval *int64 `json:"check_interval,omitempty" xml:"check_interval,omitempty"`
	// retry_failed_only
	RetryFailedOnly *bool `json:"retry_failed_only,omitempty" xml:"retry_failed_only,omitempty"`
	// retry_times
	RetryTimes *int64 `json:"retry_times,omitempty" xml:"retry_times,omitempty"`
	// timeout
	Timeout *int64 `json:"timeout,omitempty" xml:"timeout,omitempty"`
}

func (s RetryInfo) String() string {
	return tea.Prettify(s)
}

func (s RetryInfo) GoString() string {
	return s.String()
}

func (s *RetryInfo) SetAction(v string) *RetryInfo {
	s.Action = &v
	return s
}

func (s *RetryInfo) SetCheckInterval(v int64) *RetryInfo {
	s.CheckInterval = &v
	return s
}

func (s *RetryInfo) SetRetryFailedOnly(v bool) *RetryInfo {
	s.RetryFailedOnly = &v
	return s
}

func (s *RetryInfo) SetRetryTimes(v int64) *RetryInfo {
	s.RetryTimes = &v
	return s
}

func (s *RetryInfo) SetTimeout(v int64) *RetryInfo {
	s.Timeout = &v
	return s
}

// DeploymentCell
type DeploymentCell struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 部署单元 id
	CellIds []*string `json:"cell_ids,omitempty" xml:"cell_ids,omitempty" type:"Repeated"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s DeploymentCell) String() string {
	return tea.Prettify(s)
}

func (s DeploymentCell) GoString() string {
	return s.String()
}

func (s *DeploymentCell) SetName(v string) *DeploymentCell {
	s.Name = &v
	return s
}

func (s *DeploymentCell) SetCellIds(v []*string) *DeploymentCell {
	s.CellIds = v
	return s
}

func (s *DeploymentCell) SetDescription(v string) *DeploymentCell {
	s.Description = &v
	return s
}

func (s *DeploymentCell) SetId(v string) *DeploymentCell {
	s.Id = &v
	return s
}

// 应用信息
type ApplicationInfo struct {
	// 应用别名
	Alias *string `json:"alias,omitempty" xml:"alias,omitempty"`
	// 应用名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 应用额外元数据信息
	AppExtraInfos []*AppExtraInfo `json:"app_extra_infos,omitempty" xml:"app_extra_infos,omitempty" type:"Repeated"`
	// 应用所属分组名
	AppGroupName *string `json:"app_group_name,omitempty" xml:"app_group_name,omitempty"`
	// 应用等级名称
	AppLevel *string `json:"app_level,omitempty" xml:"app_level,omitempty"`
	// 技术栈名称
	BuildpackName *string `json:"buildpack_name,omitempty" xml:"buildpack_name,omitempty"`
	// 技术栈版本
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
	// 应用创建时间
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty"`
	// 应用描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 用户真实名称
	OwnerLoginName *string `json:"owner_login_name,omitempty" xml:"owner_login_name,omitempty"`
	// 应用负责人登录名
	RealOwnerLoginName *string `json:"real_owner_login_name,omitempty" xml:"real_owner_login_name,omitempty"`
	// 应用状态。取值列表：
	//                     CREATING：应用创建中；
	//                     CREATED：应用成功创建，可正常使用；
	//                     CREATE_FAILED：应用创建失败；
	//                     DELETING：应用删除中；
	//                     DELETE_FAILED：应用删除失败
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 全局唯一名字
	GlobalName *string `json:"global_name,omitempty" xml:"global_name,omitempty"`
	// 发布模式， package，image，mixed
	DeployType *string `json:"deploy_type,omitempty" xml:"deploy_type,omitempty"`
}

func (s ApplicationInfo) String() string {
	return tea.Prettify(s)
}

func (s ApplicationInfo) GoString() string {
	return s.String()
}

func (s *ApplicationInfo) SetAlias(v string) *ApplicationInfo {
	s.Alias = &v
	return s
}

func (s *ApplicationInfo) SetApplicationName(v string) *ApplicationInfo {
	s.ApplicationName = &v
	return s
}

func (s *ApplicationInfo) SetAppExtraInfos(v []*AppExtraInfo) *ApplicationInfo {
	s.AppExtraInfos = v
	return s
}

func (s *ApplicationInfo) SetAppGroupName(v string) *ApplicationInfo {
	s.AppGroupName = &v
	return s
}

func (s *ApplicationInfo) SetAppLevel(v string) *ApplicationInfo {
	s.AppLevel = &v
	return s
}

func (s *ApplicationInfo) SetBuildpackName(v string) *ApplicationInfo {
	s.BuildpackName = &v
	return s
}

func (s *ApplicationInfo) SetBuildpackVersion(v string) *ApplicationInfo {
	s.BuildpackVersion = &v
	return s
}

func (s *ApplicationInfo) SetCreationTime(v string) *ApplicationInfo {
	s.CreationTime = &v
	return s
}

func (s *ApplicationInfo) SetDescription(v string) *ApplicationInfo {
	s.Description = &v
	return s
}

func (s *ApplicationInfo) SetOwnerLoginName(v string) *ApplicationInfo {
	s.OwnerLoginName = &v
	return s
}

func (s *ApplicationInfo) SetRealOwnerLoginName(v string) *ApplicationInfo {
	s.RealOwnerLoginName = &v
	return s
}

func (s *ApplicationInfo) SetStatus(v string) *ApplicationInfo {
	s.Status = &v
	return s
}

func (s *ApplicationInfo) SetGlobalName(v string) *ApplicationInfo {
	s.GlobalName = &v
	return s
}

func (s *ApplicationInfo) SetDeployType(v string) *ApplicationInfo {
	s.DeployType = &v
	return s
}

// 动态查询
type DynamicQuery struct {
	// 分页规则-currentPage
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 字段过滤
	Filter *string `json:"filter,omitempty" xml:"filter,omitempty"`
	// 分页规则-pageSize
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 具体的查询条件字符串
	Query *string `json:"query,omitempty" xml:"query,omitempty"`
	// 查询结果的排序规则
	Sort *string `json:"sort,omitempty" xml:"sort,omitempty"`
}

func (s DynamicQuery) String() string {
	return tea.Prettify(s)
}

func (s DynamicQuery) GoString() string {
	return s.String()
}

func (s *DynamicQuery) SetCurrentPage(v int64) *DynamicQuery {
	s.CurrentPage = &v
	return s
}

func (s *DynamicQuery) SetFilter(v string) *DynamicQuery {
	s.Filter = &v
	return s
}

func (s *DynamicQuery) SetPageSize(v int64) *DynamicQuery {
	s.PageSize = &v
	return s
}

func (s *DynamicQuery) SetQuery(v string) *DynamicQuery {
	s.Query = &v
	return s
}

func (s *DynamicQuery) SetSort(v string) *DynamicQuery {
	s.Sort = &v
	return s
}

// 应用管理-应用模型
type App struct {
	// 应用所属分组 id
	AppGroupId *string `json:"app_group_id,omitempty" xml:"app_group_id,omitempty"`
	// 应用分组名称
	AppGroupName *string `json:"app_group_name,omitempty" xml:"app_group_name,omitempty"`
	// 技术栈名称
	BuildpackName *string `json:"buildpack_name,omitempty" xml:"buildpack_name,omitempty"`
	// 技术栈版本
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
	// 创建时间
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 允许访问公网
	DefaultRoute *bool `json:"default_route,omitempty" xml:"default_route,omitempty"`
	// 应用发布模式，发布包，发布镜像，混合发布。
	// 默认为空 - 表示包发布模式
	DeployType *string `json:"deploy_type,omitempty" xml:"deploy_type,omitempty"`
	// 应用描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// 域内应用全局唯一名称
	GlobalName *string `json:"global_name,omitempty" xml:"global_name,omitempty"`
	// 应用 id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 应用名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 应用负责人显示名称
	OwnerDisplayName *string `json:"owner_display_name,omitempty" xml:"owner_display_name,omitempty"`
	// 应用负责人登录名称
	OwnerLoginName *string `json:"owner_login_name,omitempty" xml:"owner_login_name,omitempty"`
	// 技术栈id
	StackId *string `json:"stack_id,omitempty" xml:"stack_id,omitempty"`
	// 应用状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 应用额外信息（应用标签）
	Tags []*Tag `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	// 应用负责人id
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty"`
}

func (s App) String() string {
	return tea.Prettify(s)
}

func (s App) GoString() string {
	return s.String()
}

func (s *App) SetAppGroupId(v string) *App {
	s.AppGroupId = &v
	return s
}

func (s *App) SetAppGroupName(v string) *App {
	s.AppGroupName = &v
	return s
}

func (s *App) SetBuildpackName(v string) *App {
	s.BuildpackName = &v
	return s
}

func (s *App) SetBuildpackVersion(v string) *App {
	s.BuildpackVersion = &v
	return s
}

func (s *App) SetCreatedTime(v string) *App {
	s.CreatedTime = &v
	return s
}

func (s *App) SetDefaultRoute(v bool) *App {
	s.DefaultRoute = &v
	return s
}

func (s *App) SetDeployType(v string) *App {
	s.DeployType = &v
	return s
}

func (s *App) SetDescription(v string) *App {
	s.Description = &v
	return s
}

func (s *App) SetDisplayName(v string) *App {
	s.DisplayName = &v
	return s
}

func (s *App) SetGlobalName(v string) *App {
	s.GlobalName = &v
	return s
}

func (s *App) SetId(v string) *App {
	s.Id = &v
	return s
}

func (s *App) SetName(v string) *App {
	s.Name = &v
	return s
}

func (s *App) SetOwnerDisplayName(v string) *App {
	s.OwnerDisplayName = &v
	return s
}

func (s *App) SetOwnerLoginName(v string) *App {
	s.OwnerLoginName = &v
	return s
}

func (s *App) SetStackId(v string) *App {
	s.StackId = &v
	return s
}

func (s *App) SetStatus(v string) *App {
	s.Status = &v
	return s
}

func (s *App) SetTags(v []*Tag) *App {
	s.Tags = v
	return s
}

func (s *App) SetOwnerId(v string) *App {
	s.OwnerId = &v
	return s
}

// 应用等级
type AppLevel struct {
	// 应用等级ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 应用等级名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 应用等级负责人登录名
	OwnerLoginName *string `json:"owner_login_name,omitempty" xml:"owner_login_name,omitempty"`
}

func (s AppLevel) String() string {
	return tea.Prettify(s)
}

func (s AppLevel) GoString() string {
	return s.String()
}

func (s *AppLevel) SetId(v string) *AppLevel {
	s.Id = &v
	return s
}

func (s *AppLevel) SetName(v string) *AppLevel {
	s.Name = &v
	return s
}

func (s *AppLevel) SetOwnerLoginName(v string) *AppLevel {
	s.OwnerLoginName = &v
	return s
}

// 通过appid查到的buildpack
type BuildpackByAppV struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// des
	Des *string `json:"des,omitempty" xml:"des,omitempty"`
	// version
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
	// deployScriptId
	DeployScriptId *string `json:"deploy_script_id,omitempty" xml:"deploy_script_id,omitempty"`
	// buildScriptId
	BuildScriptId *string `json:"build_script_id,omitempty" xml:"build_script_id,omitempty"`
	// configId
	ConfigId *string `json:"config_id,omitempty" xml:"config_id,omitempty"`
	// componentId
	ComponentId *string `json:"component_id,omitempty" xml:"component_id,omitempty"`
	// commandId
	CommandId *string `json:"command_id,omitempty" xml:"command_id,omitempty"`
	// bgEnable
	BgEnable *bool `json:"bg_enable,omitempty" xml:"bg_enable,omitempty"`
	// creator
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// tenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// customerIds
	CustomerIds *string `json:"customer_ids,omitempty" xml:"customer_ids,omitempty"`
	// gmtCreate
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// gmtModified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// resultMsg
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// utcCreate
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// utcModified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
}

func (s BuildpackByAppV) String() string {
	return tea.Prettify(s)
}

func (s BuildpackByAppV) GoString() string {
	return s.String()
}

func (s *BuildpackByAppV) SetId(v string) *BuildpackByAppV {
	s.Id = &v
	return s
}

func (s *BuildpackByAppV) SetName(v string) *BuildpackByAppV {
	s.Name = &v
	return s
}

func (s *BuildpackByAppV) SetDes(v string) *BuildpackByAppV {
	s.Des = &v
	return s
}

func (s *BuildpackByAppV) SetVersion(v string) *BuildpackByAppV {
	s.Version = &v
	return s
}

func (s *BuildpackByAppV) SetDeployScriptId(v string) *BuildpackByAppV {
	s.DeployScriptId = &v
	return s
}

func (s *BuildpackByAppV) SetBuildScriptId(v string) *BuildpackByAppV {
	s.BuildScriptId = &v
	return s
}

func (s *BuildpackByAppV) SetConfigId(v string) *BuildpackByAppV {
	s.ConfigId = &v
	return s
}

func (s *BuildpackByAppV) SetComponentId(v string) *BuildpackByAppV {
	s.ComponentId = &v
	return s
}

func (s *BuildpackByAppV) SetCommandId(v string) *BuildpackByAppV {
	s.CommandId = &v
	return s
}

func (s *BuildpackByAppV) SetBgEnable(v bool) *BuildpackByAppV {
	s.BgEnable = &v
	return s
}

func (s *BuildpackByAppV) SetCreator(v string) *BuildpackByAppV {
	s.Creator = &v
	return s
}

func (s *BuildpackByAppV) SetTenantId(v string) *BuildpackByAppV {
	s.TenantId = &v
	return s
}

func (s *BuildpackByAppV) SetCustomerIds(v string) *BuildpackByAppV {
	s.CustomerIds = &v
	return s
}

func (s *BuildpackByAppV) SetGmtCreate(v string) *BuildpackByAppV {
	s.GmtCreate = &v
	return s
}

func (s *BuildpackByAppV) SetGmtModified(v string) *BuildpackByAppV {
	s.GmtModified = &v
	return s
}

func (s *BuildpackByAppV) SetResultMsg(v string) *BuildpackByAppV {
	s.ResultMsg = &v
	return s
}

func (s *BuildpackByAppV) SetUtcCreate(v string) *BuildpackByAppV {
	s.UtcCreate = &v
	return s
}

func (s *BuildpackByAppV) SetUtcModified(v string) *BuildpackByAppV {
	s.UtcModified = &v
	return s
}

// 应用单元资源统计
type AppUnitResource struct {
	// 应用 ID
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// 单元id
	UnitId *string `json:"unit_id,omitempty" xml:"unit_id,omitempty"`
	// 机器数
	MachineCount *int64 `json:"machine_count,omitempty" xml:"machine_count,omitempty"`
	// 已挂载机器数
	MountedMachineCount *int64 `json:"mounted_machine_count,omitempty" xml:"mounted_machine_count,omitempty"`
	// 负载均衡数
	SlbCount *int64 `json:"slb_count,omitempty" xml:"slb_count,omitempty"`
	// 负载均衡权重
	SlbWeight *int64 `json:"slb_weight,omitempty" xml:"slb_weight,omitempty"`
}

func (s AppUnitResource) String() string {
	return tea.Prettify(s)
}

func (s AppUnitResource) GoString() string {
	return s.String()
}

func (s *AppUnitResource) SetAppId(v string) *AppUnitResource {
	s.AppId = &v
	return s
}

func (s *AppUnitResource) SetUnitId(v string) *AppUnitResource {
	s.UnitId = &v
	return s
}

func (s *AppUnitResource) SetMachineCount(v int64) *AppUnitResource {
	s.MachineCount = &v
	return s
}

func (s *AppUnitResource) SetMountedMachineCount(v int64) *AppUnitResource {
	s.MountedMachineCount = &v
	return s
}

func (s *AppUnitResource) SetSlbCount(v int64) *AppUnitResource {
	s.SlbCount = &v
	return s
}

func (s *AppUnitResource) SetSlbWeight(v int64) *AppUnitResource {
	s.SlbWeight = &v
	return s
}

// 工作空间组视图
type WorkspaceGroupView struct {
	// 显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// table id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 标识
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// 环境状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 工作空间列表
	Workspaces []*WorkspaceView `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s WorkspaceGroupView) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceGroupView) GoString() string {
	return s.String()
}

func (s *WorkspaceGroupView) SetDisplayName(v string) *WorkspaceGroupView {
	s.DisplayName = &v
	return s
}

func (s *WorkspaceGroupView) SetId(v string) *WorkspaceGroupView {
	s.Id = &v
	return s
}

func (s *WorkspaceGroupView) SetIdentity(v string) *WorkspaceGroupView {
	s.Identity = &v
	return s
}

func (s *WorkspaceGroupView) SetStatus(v string) *WorkspaceGroupView {
	s.Status = &v
	return s
}

func (s *WorkspaceGroupView) SetTenantId(v string) *WorkspaceGroupView {
	s.TenantId = &v
	return s
}

func (s *WorkspaceGroupView) SetWorkspaces(v []*WorkspaceView) *WorkspaceGroupView {
	s.Workspaces = v
	return s
}

// 机器分组
type MachineGroup struct {
	// 机器名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 所属发布服务 ID
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// 所属发布服务分组 ID
	ServiceGroupId *string `json:"service_group_id,omitempty" xml:"service_group_id,omitempty"`
	// 发布服务分组集合 ID
	ServiceGroupCollectionId *string `json:"service_group_collection_id,omitempty" xml:"service_group_collection_id,omitempty"`
	// 概览 ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 服务类型
	ServiceType *string `json:"service_type,omitempty" xml:"service_type,omitempty"`
	// paas 服务 ID
	PaasServiceId *string `json:"paas_service_id,omitempty" xml:"paas_service_id,omitempty"`
	// 是否 beta 分组
	NeedBeta *bool `json:"need_beta,omitempty" xml:"need_beta,omitempty"`
	// 是否需要确认
	NeedConfirm *bool `json:"need_confirm,omitempty" xml:"need_confirm,omitempty"`
	// 是否需要分组预确认
	NeedReserve *bool `json:"need_reserve,omitempty" xml:"need_reserve,omitempty"`
	// 是否需要引流确认
	NeedConfirmTraffic *bool `json:"need_confirm_traffic,omitempty" xml:"need_confirm_traffic,omitempty"`
	// 机器信息组
	Machines []*Machine `json:"machines,omitempty" xml:"machines,omitempty" type:"Repeated"`
	// pd id
	ProcessDefinitionId *string `json:"process_definition_id,omitempty" xml:"process_definition_id,omitempty"`
	// 父节点 ID
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// 父节点类型
	ParentEntityType *string `json:"parent_entity_type,omitempty" xml:"parent_entity_type,omitempty"`
	// 流程节点 ID
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty"`
	// 状态
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 开始时间
	StartedTime *string `json:"started_time,omitempty" xml:"started_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 结束时间
	FinishedTime *string `json:"finished_time,omitempty" xml:"finished_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 是否可以独立执行
	StandaloneExecutable *bool `json:"standalone_executable,omitempty" xml:"standalone_executable,omitempty"`
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s MachineGroup) String() string {
	return tea.Prettify(s)
}

func (s MachineGroup) GoString() string {
	return s.String()
}

func (s *MachineGroup) SetName(v string) *MachineGroup {
	s.Name = &v
	return s
}

func (s *MachineGroup) SetServiceId(v string) *MachineGroup {
	s.ServiceId = &v
	return s
}

func (s *MachineGroup) SetServiceGroupId(v string) *MachineGroup {
	s.ServiceGroupId = &v
	return s
}

func (s *MachineGroup) SetServiceGroupCollectionId(v string) *MachineGroup {
	s.ServiceGroupCollectionId = &v
	return s
}

func (s *MachineGroup) SetArrangementId(v string) *MachineGroup {
	s.ArrangementId = &v
	return s
}

func (s *MachineGroup) SetServiceType(v string) *MachineGroup {
	s.ServiceType = &v
	return s
}

func (s *MachineGroup) SetPaasServiceId(v string) *MachineGroup {
	s.PaasServiceId = &v
	return s
}

func (s *MachineGroup) SetNeedBeta(v bool) *MachineGroup {
	s.NeedBeta = &v
	return s
}

func (s *MachineGroup) SetNeedConfirm(v bool) *MachineGroup {
	s.NeedConfirm = &v
	return s
}

func (s *MachineGroup) SetNeedReserve(v bool) *MachineGroup {
	s.NeedReserve = &v
	return s
}

func (s *MachineGroup) SetNeedConfirmTraffic(v bool) *MachineGroup {
	s.NeedConfirmTraffic = &v
	return s
}

func (s *MachineGroup) SetMachines(v []*Machine) *MachineGroup {
	s.Machines = v
	return s
}

func (s *MachineGroup) SetProcessDefinitionId(v string) *MachineGroup {
	s.ProcessDefinitionId = &v
	return s
}

func (s *MachineGroup) SetParentId(v string) *MachineGroup {
	s.ParentId = &v
	return s
}

func (s *MachineGroup) SetParentEntityType(v string) *MachineGroup {
	s.ParentEntityType = &v
	return s
}

func (s *MachineGroup) SetNodeId(v string) *MachineGroup {
	s.NodeId = &v
	return s
}

func (s *MachineGroup) SetState(v string) *MachineGroup {
	s.State = &v
	return s
}

func (s *MachineGroup) SetStartedTime(v string) *MachineGroup {
	s.StartedTime = &v
	return s
}

func (s *MachineGroup) SetFinishedTime(v string) *MachineGroup {
	s.FinishedTime = &v
	return s
}

func (s *MachineGroup) SetStandaloneExecutable(v bool) *MachineGroup {
	s.StandaloneExecutable = &v
	return s
}

func (s *MachineGroup) SetId(v string) *MachineGroup {
	s.Id = &v
	return s
}

// Zone
type Zone struct {
	// zone名称
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// zone显示名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// zone paas id
	PaasId *string `json:"paas_id,omitempty" xml:"paas_id,omitempty"`
	// region identity
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// zone state
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 机房iaas identity
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
}

func (s Zone) String() string {
	return tea.Prettify(s)
}

func (s Zone) GoString() string {
	return s.String()
}

func (s *Zone) SetId(v string) *Zone {
	s.Id = &v
	return s
}

func (s *Zone) SetName(v string) *Zone {
	s.Name = &v
	return s
}

func (s *Zone) SetPaasId(v string) *Zone {
	s.PaasId = &v
	return s
}

func (s *Zone) SetRegionId(v string) *Zone {
	s.RegionId = &v
	return s
}

func (s *Zone) SetState(v string) *Zone {
	s.State = &v
	return s
}

func (s *Zone) SetIaasId(v string) *Zone {
	s.IaasId = &v
	return s
}

// 一个运维操作组
type OpsGroup struct {
	// 运维操作组当前状态。取值列表：
	//                     INITED：初始化完成；
	//                     EXECUTING：执行中；
	//                     SUCCESS：执行成功；
	//                     FAILED：执行失败；
	//                     CANCELED：已取消；
	//                     CONFIRM_WAITING：待确认
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 包含在此运维操作组中的运维单元列表
	Units []*OpsUnit `json:"units,omitempty" xml:"units,omitempty" type:"Repeated"`
}

func (s OpsGroup) String() string {
	return tea.Prettify(s)
}

func (s OpsGroup) GoString() string {
	return s.String()
}

func (s *OpsGroup) SetStatus(v string) *OpsGroup {
	s.Status = &v
	return s
}

func (s *OpsGroup) SetUnits(v []*OpsUnit) *OpsGroup {
	s.Units = v
	return s
}

// 回滚信息
type RollbackInfo struct {
	// group_amount
	GroupAmount *int64 `json:"group_amount,omitempty" xml:"group_amount,omitempty"`
	// group_strategy
	GroupStrategy *string `json:"group_strategy,omitempty" xml:"group_strategy,omitempty"`
	// reason
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
	// sub_entities
	SubEntities []*string `json:"sub_entities,omitempty" xml:"sub_entities,omitempty" type:"Repeated"`
	// target_id
	TargetId *string `json:"target_id,omitempty" xml:"target_id,omitempty"`
	// target_version
	TargetVersion *string `json:"target_version,omitempty" xml:"target_version,omitempty"`
	// need_beta_group
	NeedBetaGroup *bool `json:"need_beta_group,omitempty" xml:"need_beta_group,omitempty"`
	// env_config
	EnvConfig []*Pair `json:"env_config,omitempty" xml:"env_config,omitempty" type:"Repeated"`
	// confirm_succeeded_rollback
	ConfirmSucceededRollback *bool `json:"confirm_succeeded_rollback,omitempty" xml:"confirm_succeeded_rollback,omitempty"`
	// retry_rollbacked
	RetryRollbacked *bool `json:"retry_rollbacked,omitempty" xml:"retry_rollbacked,omitempty"`
}

func (s RollbackInfo) String() string {
	return tea.Prettify(s)
}

func (s RollbackInfo) GoString() string {
	return s.String()
}

func (s *RollbackInfo) SetGroupAmount(v int64) *RollbackInfo {
	s.GroupAmount = &v
	return s
}

func (s *RollbackInfo) SetGroupStrategy(v string) *RollbackInfo {
	s.GroupStrategy = &v
	return s
}

func (s *RollbackInfo) SetReason(v string) *RollbackInfo {
	s.Reason = &v
	return s
}

func (s *RollbackInfo) SetSubEntities(v []*string) *RollbackInfo {
	s.SubEntities = v
	return s
}

func (s *RollbackInfo) SetTargetId(v string) *RollbackInfo {
	s.TargetId = &v
	return s
}

func (s *RollbackInfo) SetTargetVersion(v string) *RollbackInfo {
	s.TargetVersion = &v
	return s
}

func (s *RollbackInfo) SetNeedBetaGroup(v bool) *RollbackInfo {
	s.NeedBetaGroup = &v
	return s
}

func (s *RollbackInfo) SetEnvConfig(v []*Pair) *RollbackInfo {
	s.EnvConfig = v
	return s
}

func (s *RollbackInfo) SetConfirmSucceededRollback(v bool) *RollbackInfo {
	s.ConfirmSucceededRollback = &v
	return s
}

func (s *RollbackInfo) SetRetryRollbacked(v bool) *RollbackInfo {
	s.RetryRollbacked = &v
	return s
}

// 应用参数配置管理-全局参数
type GlobalParam struct {
	// 创建时间
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 数据保密等级
	DataLevel *string `json:"data_level,omitempty" xml:"data_level,omitempty"`
	// 参数描述
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
	// 全局参数 id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 参数名
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 修改时间
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 版本
	ParamVersion *int64 `json:"param_version,omitempty" xml:"param_version,omitempty"`
	// 该参数属于哪个 scope
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 该参数在该 scope 中的 id
	ScopeId *string `json:"scope_id,omitempty" xml:"scope_id,omitempty"`
	// 参数值类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 参数值
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s GlobalParam) String() string {
	return tea.Prettify(s)
}

func (s GlobalParam) GoString() string {
	return s.String()
}

func (s *GlobalParam) SetCreatedTime(v string) *GlobalParam {
	s.CreatedTime = &v
	return s
}

func (s *GlobalParam) SetDataLevel(v string) *GlobalParam {
	s.DataLevel = &v
	return s
}

func (s *GlobalParam) SetDesc(v string) *GlobalParam {
	s.Desc = &v
	return s
}

func (s *GlobalParam) SetId(v string) *GlobalParam {
	s.Id = &v
	return s
}

func (s *GlobalParam) SetKey(v string) *GlobalParam {
	s.Key = &v
	return s
}

func (s *GlobalParam) SetModifiedTime(v string) *GlobalParam {
	s.ModifiedTime = &v
	return s
}

func (s *GlobalParam) SetParamVersion(v int64) *GlobalParam {
	s.ParamVersion = &v
	return s
}

func (s *GlobalParam) SetScope(v string) *GlobalParam {
	s.Scope = &v
	return s
}

func (s *GlobalParam) SetScopeId(v string) *GlobalParam {
	s.ScopeId = &v
	return s
}

func (s *GlobalParam) SetType(v string) *GlobalParam {
	s.Type = &v
	return s
}

func (s *GlobalParam) SetValue(v string) *GlobalParam {
	s.Value = &v
	return s
}

// 发布单信息
type OpsDeployment struct {
	// 此部署操作中所有被操作的应用（服务）详情，以操作链的形式体现
	ApplicationChains []*OpsApplicationChain `json:"application_chains,omitempty" xml:"application_chains,omitempty" type:"Repeated"`
	// 部署操作执行者
	Executor *string `json:"executor,omitempty" xml:"executor,omitempty"`
	// 部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
	//
	//
	//     部署单状态。取值列表：
	//     INITING：初始化中；
	//     INIT_FAILED：初始化失败；
	//     INITED：初始化完成；
	//     EXECUTING：执行中；
	//     SUCCESS：执行成功；
	//     FAILED：执行失败；
	//     CANCELING：取消中；
	//     CANCELED：已取消
	//
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 部署单标题。长度不超过50个UTF-8字符
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s OpsDeployment) String() string {
	return tea.Prettify(s)
}

func (s OpsDeployment) GoString() string {
	return s.String()
}

func (s *OpsDeployment) SetApplicationChains(v []*OpsApplicationChain) *OpsDeployment {
	s.ApplicationChains = v
	return s
}

func (s *OpsDeployment) SetExecutor(v string) *OpsDeployment {
	s.Executor = &v
	return s
}

func (s *OpsDeployment) SetOperationId(v string) *OpsDeployment {
	s.OperationId = &v
	return s
}

func (s *OpsDeployment) SetStatus(v string) *OpsDeployment {
	s.Status = &v
	return s
}

func (s *OpsDeployment) SetTitle(v string) *OpsDeployment {
	s.Title = &v
	return s
}

// 工作空间组详细信息。
type WorkspaceGroupInfo struct {
	// 创建时间。
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 工作空间组显示名称。
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// 域名后缀。
	DomainSuffix *string `json:"domain_suffix,omitempty" xml:"domain_suffix,omitempty"`
	// 工作空间组id。
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 主工作空间id。
	MasterWorkspaceId *string `json:"master_workspace_id,omitempty" xml:"master_workspace_id,omitempty"`
	// 主工作空间名称。
	MasterWorkspaceIdentity *string `json:"master_workspace_identity,omitempty" xml:"master_workspace_identity,omitempty"`
	// 修改时间。
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 工作空间组唯一标识。
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 发布模式。
	ReleaseMode *string `json:"release_mode,omitempty" xml:"release_mode,omitempty"`
	// the belonging tenant name.
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// 包含工作空间列表。
	Workspaces []*Workspace `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
	// workspace name
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
}

func (s WorkspaceGroupInfo) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceGroupInfo) GoString() string {
	return s.String()
}

func (s *WorkspaceGroupInfo) SetCreatedTime(v string) *WorkspaceGroupInfo {
	s.CreatedTime = &v
	return s
}

func (s *WorkspaceGroupInfo) SetDisplayName(v string) *WorkspaceGroupInfo {
	s.DisplayName = &v
	return s
}

func (s *WorkspaceGroupInfo) SetDomainSuffix(v string) *WorkspaceGroupInfo {
	s.DomainSuffix = &v
	return s
}

func (s *WorkspaceGroupInfo) SetId(v string) *WorkspaceGroupInfo {
	s.Id = &v
	return s
}

func (s *WorkspaceGroupInfo) SetMasterWorkspaceId(v string) *WorkspaceGroupInfo {
	s.MasterWorkspaceId = &v
	return s
}

func (s *WorkspaceGroupInfo) SetMasterWorkspaceIdentity(v string) *WorkspaceGroupInfo {
	s.MasterWorkspaceIdentity = &v
	return s
}

func (s *WorkspaceGroupInfo) SetModifiedTime(v string) *WorkspaceGroupInfo {
	s.ModifiedTime = &v
	return s
}

func (s *WorkspaceGroupInfo) SetName(v string) *WorkspaceGroupInfo {
	s.Name = &v
	return s
}

func (s *WorkspaceGroupInfo) SetReleaseMode(v string) *WorkspaceGroupInfo {
	s.ReleaseMode = &v
	return s
}

func (s *WorkspaceGroupInfo) SetTenantName(v string) *WorkspaceGroupInfo {
	s.TenantName = &v
	return s
}

func (s *WorkspaceGroupInfo) SetWorkspaces(v []*Workspace) *WorkspaceGroupInfo {
	s.Workspaces = v
	return s
}

func (s *WorkspaceGroupInfo) SetIdentity(v string) *WorkspaceGroupInfo {
	s.Identity = &v
	return s
}

// 负载均衡
type DepsLoadBalancer struct {
	// 服务实例列表
	AppServices []*AppService `json:"app_services,omitempty" xml:"app_services,omitempty" type:"Repeated"`
	// 网络带宽
	Bandwidth *int `json:"bandwidth,omitempty" xml:"bandwidth,omitempty"`
	// iaaS在创建该资源时为其分配的唯一标示，创建中或创建失败时为空
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// 资源唯一标识
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 公网计费方式
	InternetChargeType *string `json:"internet_charge_type,omitempty" xml:"internet_charge_type,omitempty"`
	// 资源名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// VIP类型
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// 资源所属的地域id
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	//
	//
	//                     资源所处的状态，资源状态，取值 CREATING：正在创建，CREATE_FAILED：创建失败，DELETING：正在删除，DELETED：删除成功，
	//                     DELETE_FAILED：删除失败，RESOURCE_IMPORTING：资源导入中，RESOURCE_IMPORT_FAILED：资源导入失败，RESOURCE_REMOVING：资源删除中，
	//                     RESOURCE_REMOVE_FAILED：资源删除失败，INACTIVE：未激活，STOPPING：正在停止，STARTING：正在启动，ACTIVE：已激活，LOCKED：已锁定，
	//                     RELEASING：正在释放，UPDATING：正在更新，MOUNTING：正在挂载，UMOUNTING：正在卸载
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// vip地址
	VipAddress *string `json:"vip_address,omitempty" xml:"vip_address,omitempty"`
	// address 类型：INTERNET, INTRANET
	VipAddressType *string `json:"vip_address_type,omitempty" xml:"vip_address_type,omitempty"`
	// VIP类型
	VipType *string `json:"vip_type,omitempty" xml:"vip_type,omitempty"`
	// vpc的id
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty"`
	// 资源所属的可用区id
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty"`
}

func (s DepsLoadBalancer) String() string {
	return tea.Prettify(s)
}

func (s DepsLoadBalancer) GoString() string {
	return s.String()
}

func (s *DepsLoadBalancer) SetAppServices(v []*AppService) *DepsLoadBalancer {
	s.AppServices = v
	return s
}

func (s *DepsLoadBalancer) SetBandwidth(v int) *DepsLoadBalancer {
	s.Bandwidth = &v
	return s
}

func (s *DepsLoadBalancer) SetIaasId(v string) *DepsLoadBalancer {
	s.IaasId = &v
	return s
}

func (s *DepsLoadBalancer) SetId(v string) *DepsLoadBalancer {
	s.Id = &v
	return s
}

func (s *DepsLoadBalancer) SetInternetChargeType(v string) *DepsLoadBalancer {
	s.InternetChargeType = &v
	return s
}

func (s *DepsLoadBalancer) SetName(v string) *DepsLoadBalancer {
	s.Name = &v
	return s
}

func (s *DepsLoadBalancer) SetNetworkType(v string) *DepsLoadBalancer {
	s.NetworkType = &v
	return s
}

func (s *DepsLoadBalancer) SetRegion(v string) *DepsLoadBalancer {
	s.Region = &v
	return s
}

func (s *DepsLoadBalancer) SetStatus(v string) *DepsLoadBalancer {
	s.Status = &v
	return s
}

func (s *DepsLoadBalancer) SetVipAddress(v string) *DepsLoadBalancer {
	s.VipAddress = &v
	return s
}

func (s *DepsLoadBalancer) SetVipAddressType(v string) *DepsLoadBalancer {
	s.VipAddressType = &v
	return s
}

func (s *DepsLoadBalancer) SetVipType(v string) *DepsLoadBalancer {
	s.VipType = &v
	return s
}

func (s *DepsLoadBalancer) SetVpcId(v string) *DepsLoadBalancer {
	s.VpcId = &v
	return s
}

func (s *DepsLoadBalancer) SetZone(v string) *DepsLoadBalancer {
	s.Zone = &v
	return s
}

// sidecar发布版本
type SidecarReleaseVersion struct {
	// sidecar版本描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 创建时间
	GmtCreated *string `json:"gmt_created,omitempty" xml:"gmt_created,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// release note
	ReleaseNote *string `json:"release_note,omitempty" xml:"release_note,omitempty"`
	// scope生效范围详情
	ScopeDetail *SidecarScopeDetail `json:"scope_detail,omitempty" xml:"scope_detail,omitempty"`
	// sidecar名称
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty"`
	// sidecar版本id
	SidecarReleaseVersionId *string `json:"sidecar_release_version_id,omitempty" xml:"sidecar_release_version_id,omitempty"`
	// sidecar版本号
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty"`
	// 版本状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 发布、下线、废弃原因
	StatusReason *string `json:"status_reason,omitempty" xml:"status_reason,omitempty"`
	// sidecar模板内容
	Template *string `json:"template,omitempty" xml:"template,omitempty"`
	// sidecar模板配置
	TemplateConfigs []*SidecarTemplateConfig `json:"template_configs,omitempty" xml:"template_configs,omitempty" type:"Repeated"`
	// sidecar版本类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 版本周期：alpha/beta/release
	VersionPeriod *string `json:"version_period,omitempty" xml:"version_period,omitempty"`
}

func (s SidecarReleaseVersion) String() string {
	return tea.Prettify(s)
}

func (s SidecarReleaseVersion) GoString() string {
	return s.String()
}

func (s *SidecarReleaseVersion) SetDescription(v string) *SidecarReleaseVersion {
	s.Description = &v
	return s
}

func (s *SidecarReleaseVersion) SetGmtCreated(v string) *SidecarReleaseVersion {
	s.GmtCreated = &v
	return s
}

func (s *SidecarReleaseVersion) SetGmtModified(v string) *SidecarReleaseVersion {
	s.GmtModified = &v
	return s
}

func (s *SidecarReleaseVersion) SetReleaseNote(v string) *SidecarReleaseVersion {
	s.ReleaseNote = &v
	return s
}

func (s *SidecarReleaseVersion) SetScopeDetail(v *SidecarScopeDetail) *SidecarReleaseVersion {
	s.ScopeDetail = v
	return s
}

func (s *SidecarReleaseVersion) SetSidecarName(v string) *SidecarReleaseVersion {
	s.SidecarName = &v
	return s
}

func (s *SidecarReleaseVersion) SetSidecarReleaseVersionId(v string) *SidecarReleaseVersion {
	s.SidecarReleaseVersionId = &v
	return s
}

func (s *SidecarReleaseVersion) SetSidecarVersion(v string) *SidecarReleaseVersion {
	s.SidecarVersion = &v
	return s
}

func (s *SidecarReleaseVersion) SetStatus(v int64) *SidecarReleaseVersion {
	s.Status = &v
	return s
}

func (s *SidecarReleaseVersion) SetStatusReason(v string) *SidecarReleaseVersion {
	s.StatusReason = &v
	return s
}

func (s *SidecarReleaseVersion) SetTemplate(v string) *SidecarReleaseVersion {
	s.Template = &v
	return s
}

func (s *SidecarReleaseVersion) SetTemplateConfigs(v []*SidecarTemplateConfig) *SidecarReleaseVersion {
	s.TemplateConfigs = v
	return s
}

func (s *SidecarReleaseVersion) SetType(v string) *SidecarReleaseVersion {
	s.Type = &v
	return s
}

func (s *SidecarReleaseVersion) SetVersionPeriod(v string) *SidecarReleaseVersion {
	s.VersionPeriod = &v
	return s
}

// Operator
type Operator struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// login_name
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty"`
	// email
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// nick_name
	NickName *string `json:"nick_name,omitempty" xml:"nick_name,omitempty"`
}

func (s Operator) String() string {
	return tea.Prettify(s)
}

func (s Operator) GoString() string {
	return s.String()
}

func (s *Operator) SetId(v string) *Operator {
	s.Id = &v
	return s
}

func (s *Operator) SetLoginName(v string) *Operator {
	s.LoginName = &v
	return s
}

func (s *Operator) SetEmail(v string) *Operator {
	s.Email = &v
	return s
}

func (s *Operator) SetNickName(v string) *Operator {
	s.NickName = &v
	return s
}

type CreateApplicationRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用别称。最大60个UTF-8字符
	Alias *string `json:"alias,omitempty" xml:"alias,omitempty"`
	// 创建的应用名称。最大60个UTF-8字符
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 技术栈架构版本，默认使用BUILDPACK_V1，取值列表：BUILDPACK_V1、BUILDPACK_V2
	BuildpackArch *string `json:"buildpack_arch,omitempty" xml:"buildpack_arch,omitempty"`
	// 应用使用的技术栈名称
	BuildpackName *string `json:"buildpack_name,omitempty" xml:"buildpack_name,omitempty"`
	// 应用使用的技术栈版本
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
	// 应用描述。最大200个UTF-8字符
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 应用负责人登录名
	OwnerLoginName *string `json:"owner_login_name,omitempty" xml:"owner_login_name,omitempty"`
	// 应用发布类型，默认不填入表示包发布，支持 mixed,image,workload
	DeployType *string `json:"deploy_type,omitempty" xml:"deploy_type,omitempty"`
	// 是否允许公网访问
	DefaultRoute *bool `json:"default_route,omitempty" xml:"default_route,omitempty"`
}

func (s CreateApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationRequest) GoString() string {
	return s.String()
}

func (s *CreateApplicationRequest) SetAuthToken(v string) *CreateApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateApplicationRequest) SetAlias(v string) *CreateApplicationRequest {
	s.Alias = &v
	return s
}

func (s *CreateApplicationRequest) SetApplicationName(v string) *CreateApplicationRequest {
	s.ApplicationName = &v
	return s
}

func (s *CreateApplicationRequest) SetBuildpackArch(v string) *CreateApplicationRequest {
	s.BuildpackArch = &v
	return s
}

func (s *CreateApplicationRequest) SetBuildpackName(v string) *CreateApplicationRequest {
	s.BuildpackName = &v
	return s
}

func (s *CreateApplicationRequest) SetBuildpackVersion(v string) *CreateApplicationRequest {
	s.BuildpackVersion = &v
	return s
}

func (s *CreateApplicationRequest) SetDescription(v string) *CreateApplicationRequest {
	s.Description = &v
	return s
}

func (s *CreateApplicationRequest) SetOwnerLoginName(v string) *CreateApplicationRequest {
	s.OwnerLoginName = &v
	return s
}

func (s *CreateApplicationRequest) SetDeployType(v string) *CreateApplicationRequest {
	s.DeployType = &v
	return s
}

func (s *CreateApplicationRequest) SetDefaultRoute(v bool) *CreateApplicationRequest {
	s.DefaultRoute = &v
	return s
}

type CreateApplicationResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationResponse) GoString() string {
	return s.String()
}

func (s *CreateApplicationResponse) SetReqMsgId(v string) *CreateApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateApplicationResponse) SetResultCode(v string) *CreateApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateApplicationResponse) SetResultMsg(v string) *CreateApplicationResponse {
	s.ResultMsg = &v
	return s
}

type CreateApplicationServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 应用使用的技术栈版本
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
	// 部署单元paas id列表
	CellIds []*string `json:"cell_ids,omitempty" xml:"cell_ids,omitempty" type:"Repeated"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 负责人登录名
	OwnerLoginName *string `json:"owner_login_name,omitempty" xml:"owner_login_name,omitempty"`
	// 应用服务实例名称
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty"`
	// 租户名称
	Tenant    *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CreateApplicationServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateApplicationServiceRequest) SetAuthToken(v string) *CreateApplicationServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateApplicationServiceRequest) SetApplicationName(v string) *CreateApplicationServiceRequest {
	s.ApplicationName = &v
	return s
}

func (s *CreateApplicationServiceRequest) SetBuildpackVersion(v string) *CreateApplicationServiceRequest {
	s.BuildpackVersion = &v
	return s
}

func (s *CreateApplicationServiceRequest) SetCellIds(v []*string) *CreateApplicationServiceRequest {
	s.CellIds = v
	return s
}

func (s *CreateApplicationServiceRequest) SetDescription(v string) *CreateApplicationServiceRequest {
	s.Description = &v
	return s
}

func (s *CreateApplicationServiceRequest) SetOwnerLoginName(v string) *CreateApplicationServiceRequest {
	s.OwnerLoginName = &v
	return s
}

func (s *CreateApplicationServiceRequest) SetServiceName(v string) *CreateApplicationServiceRequest {
	s.ServiceName = &v
	return s
}

func (s *CreateApplicationServiceRequest) SetTenant(v string) *CreateApplicationServiceRequest {
	s.Tenant = &v
	return s
}

func (s *CreateApplicationServiceRequest) SetWorkspace(v string) *CreateApplicationServiceRequest {
	s.Workspace = &v
	return s
}

type CreateApplicationServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 新建应用服务id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s CreateApplicationServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateApplicationServiceResponse) SetReqMsgId(v string) *CreateApplicationServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateApplicationServiceResponse) SetResultCode(v string) *CreateApplicationServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateApplicationServiceResponse) SetResultMsg(v string) *CreateApplicationServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateApplicationServiceResponse) SetId(v string) *CreateApplicationServiceResponse {
	s.Id = &v
	return s
}

type EnabledApplicationServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
}

func (s EnabledApplicationServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s EnabledApplicationServiceRequest) GoString() string {
	return s.String()
}

func (s *EnabledApplicationServiceRequest) SetAuthToken(v string) *EnabledApplicationServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *EnabledApplicationServiceRequest) SetTenant(v string) *EnabledApplicationServiceRequest {
	s.Tenant = &v
	return s
}

type EnabledApplicationServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否启用
	IsEnabled *bool `json:"is_enabled,omitempty" xml:"is_enabled,omitempty"`
}

func (s EnabledApplicationServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s EnabledApplicationServiceResponse) GoString() string {
	return s.String()
}

func (s *EnabledApplicationServiceResponse) SetReqMsgId(v string) *EnabledApplicationServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *EnabledApplicationServiceResponse) SetResultCode(v string) *EnabledApplicationServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *EnabledApplicationServiceResponse) SetResultMsg(v string) *EnabledApplicationServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *EnabledApplicationServiceResponse) SetIsEnabled(v bool) *EnabledApplicationServiceResponse {
	s.IsEnabled = &v
	return s
}

type GetApplicationRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 待查询的应用名称。最大60个UTF-8字符
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 查询结果是否返回应用额外元数据信息。默认为 false
	QueryExtraInfo *bool `json:"query_extra_info,omitempty" xml:"query_extra_info,omitempty"`
}

func (s GetApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationRequest) GoString() string {
	return s.String()
}

func (s *GetApplicationRequest) SetAuthToken(v string) *GetApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *GetApplicationRequest) SetApplicationName(v string) *GetApplicationRequest {
	s.ApplicationName = &v
	return s
}

func (s *GetApplicationRequest) SetQueryExtraInfo(v bool) *GetApplicationRequest {
	s.QueryExtraInfo = &v
	return s
}

type GetApplicationResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用别名
	Alias *string `json:"alias,omitempty" xml:"alias,omitempty"`
	// 应用名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 应用额外元数据信息
	AppExtraInfos []*AppExtraInfo `json:"app_extra_infos,omitempty" xml:"app_extra_infos,omitempty" type:"Repeated"`
	// 应用所属分组名
	AppGroupName *string `json:"app_group_name,omitempty" xml:"app_group_name,omitempty"`
	// 应用等级名称
	AppLevel *string `json:"app_level,omitempty" xml:"app_level,omitempty"`
	// 技术栈名称
	BuildpackName *string `json:"buildpack_name,omitempty" xml:"buildpack_name,omitempty"`
	// 应用创建时间
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty"`
	// 应用描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 应用负责人登录名
	OwnerLoginName *string `json:"owner_login_name,omitempty" xml:"owner_login_name,omitempty"`
	// 应用状态。取值列表：
	//                             CREATING：应用创建中；
	//                             CREATED：应用成功创建，可正常使用；
	//                             CREATE_FAILED：应用创建失败
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 发布模式， package，image，mixed
	DeployType *string `json:"deploy_type,omitempty" xml:"deploy_type,omitempty"`
	// 全局唯一名字
	GlobalName *string `json:"global_name,omitempty" xml:"global_name,omitempty"`
}

func (s GetApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationResponse) GoString() string {
	return s.String()
}

func (s *GetApplicationResponse) SetReqMsgId(v string) *GetApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetApplicationResponse) SetResultCode(v string) *GetApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *GetApplicationResponse) SetResultMsg(v string) *GetApplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetApplicationResponse) SetAlias(v string) *GetApplicationResponse {
	s.Alias = &v
	return s
}

func (s *GetApplicationResponse) SetApplicationName(v string) *GetApplicationResponse {
	s.ApplicationName = &v
	return s
}

func (s *GetApplicationResponse) SetAppExtraInfos(v []*AppExtraInfo) *GetApplicationResponse {
	s.AppExtraInfos = v
	return s
}

func (s *GetApplicationResponse) SetAppGroupName(v string) *GetApplicationResponse {
	s.AppGroupName = &v
	return s
}

func (s *GetApplicationResponse) SetAppLevel(v string) *GetApplicationResponse {
	s.AppLevel = &v
	return s
}

func (s *GetApplicationResponse) SetBuildpackName(v string) *GetApplicationResponse {
	s.BuildpackName = &v
	return s
}

func (s *GetApplicationResponse) SetCreationTime(v string) *GetApplicationResponse {
	s.CreationTime = &v
	return s
}

func (s *GetApplicationResponse) SetDescription(v string) *GetApplicationResponse {
	s.Description = &v
	return s
}

func (s *GetApplicationResponse) SetOwnerLoginName(v string) *GetApplicationResponse {
	s.OwnerLoginName = &v
	return s
}

func (s *GetApplicationResponse) SetStatus(v string) *GetApplicationResponse {
	s.Status = &v
	return s
}

func (s *GetApplicationResponse) SetDeployType(v string) *GetApplicationResponse {
	s.DeployType = &v
	return s
}

func (s *GetApplicationResponse) SetGlobalName(v string) *GetApplicationResponse {
	s.GlobalName = &v
	return s
}

type GetApplicationServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 待查询的应用名称。最大60个UTF-8字符
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 待查询服务实例名称
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty"`
	Workspace   *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetApplicationServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationServiceRequest) GoString() string {
	return s.String()
}

func (s *GetApplicationServiceRequest) SetAuthToken(v string) *GetApplicationServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetApplicationServiceRequest) SetApplicationName(v string) *GetApplicationServiceRequest {
	s.ApplicationName = &v
	return s
}

func (s *GetApplicationServiceRequest) SetServiceName(v string) *GetApplicationServiceRequest {
	s.ServiceName = &v
	return s
}

func (s *GetApplicationServiceRequest) SetWorkspace(v string) *GetApplicationServiceRequest {
	s.Workspace = &v
	return s
}

type GetApplicationServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 技术栈版本
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
	// 关联的部署单元
	CellIds []*string `json:"cell_ids,omitempty" xml:"cell_ids,omitempty" type:"Repeated"`
	// 服务实例描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 用户自定义的扩展属性
	ExtraInfos *string `json:"extra_infos,omitempty" xml:"extra_infos,omitempty"`
	// 最近一次执行的运维操作单号
	LatestOperationId *string `json:"latest_operation_id,omitempty" xml:"latest_operation_id,omitempty"`
	// 最近一次执行的运维操作类型。取值列表：
	//                             DEPLOYMENT：部署操作
	//
	LatestOperationType *string `json:"latest_operation_type,omitempty" xml:"latest_operation_type,omitempty"`
	// 最近成功部署的版本号
	LatestVersionNo *string `json:"latest_version_no,omitempty" xml:"latest_version_no,omitempty"`
	// 服务实例名称
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty"`
	// 环境名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetApplicationServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationServiceResponse) GoString() string {
	return s.String()
}

func (s *GetApplicationServiceResponse) SetReqMsgId(v string) *GetApplicationServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetApplicationServiceResponse) SetResultCode(v string) *GetApplicationServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetApplicationServiceResponse) SetResultMsg(v string) *GetApplicationServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetApplicationServiceResponse) SetApplicationName(v string) *GetApplicationServiceResponse {
	s.ApplicationName = &v
	return s
}

func (s *GetApplicationServiceResponse) SetBuildpackVersion(v string) *GetApplicationServiceResponse {
	s.BuildpackVersion = &v
	return s
}

func (s *GetApplicationServiceResponse) SetCellIds(v []*string) *GetApplicationServiceResponse {
	s.CellIds = v
	return s
}

func (s *GetApplicationServiceResponse) SetDescription(v string) *GetApplicationServiceResponse {
	s.Description = &v
	return s
}

func (s *GetApplicationServiceResponse) SetExtraInfos(v string) *GetApplicationServiceResponse {
	s.ExtraInfos = &v
	return s
}

func (s *GetApplicationServiceResponse) SetLatestOperationId(v string) *GetApplicationServiceResponse {
	s.LatestOperationId = &v
	return s
}

func (s *GetApplicationServiceResponse) SetLatestOperationType(v string) *GetApplicationServiceResponse {
	s.LatestOperationType = &v
	return s
}

func (s *GetApplicationServiceResponse) SetLatestVersionNo(v string) *GetApplicationServiceResponse {
	s.LatestVersionNo = &v
	return s
}

func (s *GetApplicationServiceResponse) SetServiceName(v string) *GetApplicationServiceResponse {
	s.ServiceName = &v
	return s
}

func (s *GetApplicationServiceResponse) SetWorkspace(v string) *GetApplicationServiceResponse {
	s.Workspace = &v
	return s
}

type QueryApplicationServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 待查询的应用名称。最大60个UTF-8字符
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 当前页码，默认为1
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认10，最大50
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 目标环境名称
	Workspaces []*string `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s QueryApplicationServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationServiceRequest) GoString() string {
	return s.String()
}

func (s *QueryApplicationServiceRequest) SetAuthToken(v string) *QueryApplicationServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryApplicationServiceRequest) SetApplicationName(v string) *QueryApplicationServiceRequest {
	s.ApplicationName = &v
	return s
}

func (s *QueryApplicationServiceRequest) SetPageNum(v int) *QueryApplicationServiceRequest {
	s.PageNum = &v
	return s
}

func (s *QueryApplicationServiceRequest) SetPageSize(v int) *QueryApplicationServiceRequest {
	s.PageSize = &v
	return s
}

func (s *QueryApplicationServiceRequest) SetWorkspaces(v []*string) *QueryApplicationServiceRequest {
	s.Workspaces = v
	return s
}

type QueryApplicationServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前页码
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 服务实例列表
	Services []*AppService `json:"services,omitempty" xml:"services,omitempty" type:"Repeated"`
	// 应用总数
	TotalCount *int `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryApplicationServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationServiceResponse) GoString() string {
	return s.String()
}

func (s *QueryApplicationServiceResponse) SetReqMsgId(v string) *QueryApplicationServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryApplicationServiceResponse) SetResultCode(v string) *QueryApplicationServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryApplicationServiceResponse) SetResultMsg(v string) *QueryApplicationServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryApplicationServiceResponse) SetPageNum(v int) *QueryApplicationServiceResponse {
	s.PageNum = &v
	return s
}

func (s *QueryApplicationServiceResponse) SetPageSize(v int) *QueryApplicationServiceResponse {
	s.PageSize = &v
	return s
}

func (s *QueryApplicationServiceResponse) SetServices(v []*AppService) *QueryApplicationServiceResponse {
	s.Services = v
	return s
}

func (s *QueryApplicationServiceResponse) SetTotalCount(v int) *QueryApplicationServiceResponse {
	s.TotalCount = &v
	return s
}

type DeleteApplicationServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 待删除的服务实例的应用名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 待删除服务实例名称
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty"`
	// 待删除服务实例所在环境名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s DeleteApplicationServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationServiceRequest) GoString() string {
	return s.String()
}

func (s *DeleteApplicationServiceRequest) SetAuthToken(v string) *DeleteApplicationServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteApplicationServiceRequest) SetApplicationName(v string) *DeleteApplicationServiceRequest {
	s.ApplicationName = &v
	return s
}

func (s *DeleteApplicationServiceRequest) SetServiceName(v string) *DeleteApplicationServiceRequest {
	s.ServiceName = &v
	return s
}

func (s *DeleteApplicationServiceRequest) SetWorkspace(v string) *DeleteApplicationServiceRequest {
	s.Workspace = &v
	return s
}

type DeleteApplicationServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteApplicationServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationServiceResponse) GoString() string {
	return s.String()
}

func (s *DeleteApplicationServiceResponse) SetReqMsgId(v string) *DeleteApplicationServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteApplicationServiceResponse) SetResultCode(v string) *DeleteApplicationServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteApplicationServiceResponse) SetResultMsg(v string) *DeleteApplicationServiceResponse {
	s.ResultMsg = &v
	return s
}

type GetApplicationPackageRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布包所属的应用名称。最大60个UTF-8字符
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 版本号。长度不超过50个单字节字符
	VersionNo *string `json:"version_no,omitempty" xml:"version_no,omitempty"`
	// 环境
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetApplicationPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationPackageRequest) GoString() string {
	return s.String()
}

func (s *GetApplicationPackageRequest) SetAuthToken(v string) *GetApplicationPackageRequest {
	s.AuthToken = &v
	return s
}

func (s *GetApplicationPackageRequest) SetApplicationName(v string) *GetApplicationPackageRequest {
	s.ApplicationName = &v
	return s
}

func (s *GetApplicationPackageRequest) SetVersionNo(v string) *GetApplicationPackageRequest {
	s.VersionNo = &v
	return s
}

func (s *GetApplicationPackageRequest) SetWorkspace(v string) *GetApplicationPackageRequest {
	s.Workspace = &v
	return s
}

type GetApplicationPackageResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用发布包所属应用名字
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 应用发布包创建时间
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty"`
	// 应用发布包下载地址
	DownloadUrl *string `json:"download_url,omitempty" xml:"download_url,omitempty"`
	// 应用发布包的校验码
	Etag *string `json:"etag,omitempty" xml:"etag,omitempty"`
	// 应用发布包名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 应用发布包备注
	VersionMemo *string `json:"version_memo,omitempty" xml:"version_memo,omitempty"`
	// 应用发布包版本
	VersionNo *string `json:"version_no,omitempty" xml:"version_no,omitempty"`
	// 应用发布包所属环境
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetApplicationPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationPackageResponse) GoString() string {
	return s.String()
}

func (s *GetApplicationPackageResponse) SetReqMsgId(v string) *GetApplicationPackageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetApplicationPackageResponse) SetResultCode(v string) *GetApplicationPackageResponse {
	s.ResultCode = &v
	return s
}

func (s *GetApplicationPackageResponse) SetResultMsg(v string) *GetApplicationPackageResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetApplicationPackageResponse) SetAppName(v string) *GetApplicationPackageResponse {
	s.AppName = &v
	return s
}

func (s *GetApplicationPackageResponse) SetCreationTime(v string) *GetApplicationPackageResponse {
	s.CreationTime = &v
	return s
}

func (s *GetApplicationPackageResponse) SetDownloadUrl(v string) *GetApplicationPackageResponse {
	s.DownloadUrl = &v
	return s
}

func (s *GetApplicationPackageResponse) SetEtag(v string) *GetApplicationPackageResponse {
	s.Etag = &v
	return s
}

func (s *GetApplicationPackageResponse) SetName(v string) *GetApplicationPackageResponse {
	s.Name = &v
	return s
}

func (s *GetApplicationPackageResponse) SetVersionMemo(v string) *GetApplicationPackageResponse {
	s.VersionMemo = &v
	return s
}

func (s *GetApplicationPackageResponse) SetVersionNo(v string) *GetApplicationPackageResponse {
	s.VersionNo = &v
	return s
}

func (s *GetApplicationPackageResponse) SetWorkspace(v string) *GetApplicationPackageResponse {
	s.Workspace = &v
	return s
}

type QueryAppVersionRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 版本构建id
	BuildId *string `json:"build_id,omitempty" xml:"build_id,omitempty"`
}

func (s QueryAppVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppVersionRequest) GoString() string {
	return s.String()
}

func (s *QueryAppVersionRequest) SetAuthToken(v string) *QueryAppVersionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppVersionRequest) SetBuildId(v string) *QueryAppVersionRequest {
	s.BuildId = &v
	return s
}

type QueryAppVersionResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用发布包详情
	Version *AppVersion `json:"version,omitempty" xml:"version,omitempty"`
}

func (s QueryAppVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppVersionResponse) GoString() string {
	return s.String()
}

func (s *QueryAppVersionResponse) SetReqMsgId(v string) *QueryAppVersionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppVersionResponse) SetResultCode(v string) *QueryAppVersionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppVersionResponse) SetResultMsg(v string) *QueryAppVersionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppVersionResponse) SetVersion(v *AppVersion) *QueryAppVersionResponse {
	s.Version = v
	return s
}

type DeleteApplicationRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 目标应用完整名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
}

func (s DeleteApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeleteApplicationRequest) SetAuthToken(v string) *DeleteApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteApplicationRequest) SetApplicationName(v string) *DeleteApplicationRequest {
	s.ApplicationName = &v
	return s
}

type DeleteApplicationResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeleteApplicationResponse) SetReqMsgId(v string) *DeleteApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteApplicationResponse) SetResultCode(v string) *DeleteApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteApplicationResponse) SetResultMsg(v string) *DeleteApplicationResponse {
	s.ResultMsg = &v
	return s
}

type ListApplicationRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 当前页码，默认为1
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认10
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s ListApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationRequest) GoString() string {
	return s.String()
}

func (s *ListApplicationRequest) SetAuthToken(v string) *ListApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *ListApplicationRequest) SetPageNum(v int) *ListApplicationRequest {
	s.PageNum = &v
	return s
}

func (s *ListApplicationRequest) SetPageSize(v int) *ListApplicationRequest {
	s.PageSize = &v
	return s
}

type ListApplicationResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用名称列表
	ApplicationNames []*string `json:"application_names,omitempty" xml:"application_names,omitempty" type:"Repeated"`
	// 当前页码
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 应用总数
	TotalCount *int `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ListApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationResponse) GoString() string {
	return s.String()
}

func (s *ListApplicationResponse) SetReqMsgId(v string) *ListApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListApplicationResponse) SetResultCode(v string) *ListApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *ListApplicationResponse) SetResultMsg(v string) *ListApplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListApplicationResponse) SetApplicationNames(v []*string) *ListApplicationResponse {
	s.ApplicationNames = v
	return s
}

func (s *ListApplicationResponse) SetPageNum(v int) *ListApplicationResponse {
	s.PageNum = &v
	return s
}

func (s *ListApplicationResponse) SetPageSize(v int) *ListApplicationResponse {
	s.PageSize = &v
	return s
}

func (s *ListApplicationResponse) SetTotalCount(v int) *ListApplicationResponse {
	s.TotalCount = &v
	return s
}

type ListAppgroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 当前页码，默认为1
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认10
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s ListAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppgroupRequest) GoString() string {
	return s.String()
}

func (s *ListAppgroupRequest) SetAuthToken(v string) *ListAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppgroupRequest) SetPageNum(v int) *ListAppgroupRequest {
	s.PageNum = &v
	return s
}

func (s *ListAppgroupRequest) SetPageSize(v int) *ListAppgroupRequest {
	s.PageSize = &v
	return s
}

type ListAppgroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用名称列表
	AppGroups []*AppGroup `json:"app_groups,omitempty" xml:"app_groups,omitempty" type:"Repeated"`
	// 当前页码
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 应用总数
	TotalCount *int `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ListAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppgroupResponse) GoString() string {
	return s.String()
}

func (s *ListAppgroupResponse) SetReqMsgId(v string) *ListAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppgroupResponse) SetResultCode(v string) *ListAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppgroupResponse) SetResultMsg(v string) *ListAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppgroupResponse) SetAppGroups(v []*AppGroup) *ListAppgroupResponse {
	s.AppGroups = v
	return s
}

func (s *ListAppgroupResponse) SetPageNum(v int) *ListAppgroupResponse {
	s.PageNum = &v
	return s
}

func (s *ListAppgroupResponse) SetPageSize(v int) *ListAppgroupResponse {
	s.PageSize = &v
	return s
}

func (s *ListAppgroupResponse) SetTotalCount(v int) *ListAppgroupResponse {
	s.TotalCount = &v
	return s
}

type QueryApplicationComputerRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 目标服务实例名称，填写application时有意义。application不填时，service_name的值会被忽略
	Application *string `json:"application,omitempty" xml:"application,omitempty"`
	// assign=true代表分配了app/appservice的computer,反之代表没有分配app/appservice的computer
	Assign *bool `json:"assign,omitempty" xml:"assign,omitempty"`
	// 资源类型
	ComputerType *string `json:"computer_type,omitempty" xml:"computer_type,omitempty"`
	// cpu核数
	Cpu *int64 `json:"cpu,omitempty" xml:"cpu,omitempty"`
	// 内存大小，单位MB
	Memory *int64 `json:"memory,omitempty" xml:"memory,omitempty"`
	// 资源名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 当前页码，默认为1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 目标服务实例名称
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty"`
	// 资源所处的状态，可指定多个
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// 目标工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryApplicationComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationComputerRequest) GoString() string {
	return s.String()
}

func (s *QueryApplicationComputerRequest) SetAuthToken(v string) *QueryApplicationComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryApplicationComputerRequest) SetApplication(v string) *QueryApplicationComputerRequest {
	s.Application = &v
	return s
}

func (s *QueryApplicationComputerRequest) SetAssign(v bool) *QueryApplicationComputerRequest {
	s.Assign = &v
	return s
}

func (s *QueryApplicationComputerRequest) SetComputerType(v string) *QueryApplicationComputerRequest {
	s.ComputerType = &v
	return s
}

func (s *QueryApplicationComputerRequest) SetCpu(v int64) *QueryApplicationComputerRequest {
	s.Cpu = &v
	return s
}

func (s *QueryApplicationComputerRequest) SetMemory(v int64) *QueryApplicationComputerRequest {
	s.Memory = &v
	return s
}

func (s *QueryApplicationComputerRequest) SetName(v string) *QueryApplicationComputerRequest {
	s.Name = &v
	return s
}

func (s *QueryApplicationComputerRequest) SetPageNum(v int64) *QueryApplicationComputerRequest {
	s.PageNum = &v
	return s
}

func (s *QueryApplicationComputerRequest) SetPageSize(v int64) *QueryApplicationComputerRequest {
	s.PageSize = &v
	return s
}

func (s *QueryApplicationComputerRequest) SetServiceName(v string) *QueryApplicationComputerRequest {
	s.ServiceName = &v
	return s
}

func (s *QueryApplicationComputerRequest) SetStatuses(v []*string) *QueryApplicationComputerRequest {
	s.Statuses = v
	return s
}

func (s *QueryApplicationComputerRequest) SetWorkspace(v string) *QueryApplicationComputerRequest {
	s.Workspace = &v
	return s
}

type QueryApplicationComputerResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 资源列表
	Computers []*Computer `json:"computers,omitempty" xml:"computers,omitempty" type:"Repeated"`
	// 当前页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 资源总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryApplicationComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationComputerResponse) GoString() string {
	return s.String()
}

func (s *QueryApplicationComputerResponse) SetReqMsgId(v string) *QueryApplicationComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryApplicationComputerResponse) SetResultCode(v string) *QueryApplicationComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryApplicationComputerResponse) SetResultMsg(v string) *QueryApplicationComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryApplicationComputerResponse) SetComputers(v []*Computer) *QueryApplicationComputerResponse {
	s.Computers = v
	return s
}

func (s *QueryApplicationComputerResponse) SetPageNum(v int64) *QueryApplicationComputerResponse {
	s.PageNum = &v
	return s
}

func (s *QueryApplicationComputerResponse) SetPageSize(v int64) *QueryApplicationComputerResponse {
	s.PageSize = &v
	return s
}

func (s *QueryApplicationComputerResponse) SetTotalCount(v int64) *QueryApplicationComputerResponse {
	s.TotalCount = &v
	return s
}

type GetApplicationRepositoryRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 待查询的应用名称。最大60个UTF-8字符
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
}

func (s GetApplicationRepositoryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationRepositoryRequest) GoString() string {
	return s.String()
}

func (s *GetApplicationRepositoryRequest) SetAuthToken(v string) *GetApplicationRepositoryRequest {
	s.AuthToken = &v
	return s
}

func (s *GetApplicationRepositoryRequest) SetApplicationName(v string) *GetApplicationRepositoryRequest {
	s.ApplicationName = &v
	return s
}

type GetApplicationRepositoryResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 代码库信息
	Repository *Repository `json:"repository,omitempty" xml:"repository,omitempty"`
}

func (s GetApplicationRepositoryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationRepositoryResponse) GoString() string {
	return s.String()
}

func (s *GetApplicationRepositoryResponse) SetReqMsgId(v string) *GetApplicationRepositoryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetApplicationRepositoryResponse) SetResultCode(v string) *GetApplicationRepositoryResponse {
	s.ResultCode = &v
	return s
}

func (s *GetApplicationRepositoryResponse) SetResultMsg(v string) *GetApplicationRepositoryResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetApplicationRepositoryResponse) SetRepository(v *Repository) *GetApplicationRepositoryResponse {
	s.Repository = v
	return s
}

type QueryAppgroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用分组名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 当前页码，默认为1
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认10
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
}

func (s QueryAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppgroupRequest) GoString() string {
	return s.String()
}

func (s *QueryAppgroupRequest) SetAuthToken(v string) *QueryAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppgroupRequest) SetName(v string) *QueryAppgroupRequest {
	s.Name = &v
	return s
}

func (s *QueryAppgroupRequest) SetPageNum(v int) *QueryAppgroupRequest {
	s.PageNum = &v
	return s
}

func (s *QueryAppgroupRequest) SetPageSize(v int) *QueryAppgroupRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAppgroupRequest) SetTenant(v string) *QueryAppgroupRequest {
	s.Tenant = &v
	return s
}

type QueryAppgroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用分组列表
	AppGroups []*AppGroup `json:"app_groups,omitempty" xml:"app_groups,omitempty" type:"Repeated"`
	// 当前页码
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 资源总数
	TotalCount *int `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppgroupResponse) GoString() string {
	return s.String()
}

func (s *QueryAppgroupResponse) SetReqMsgId(v string) *QueryAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppgroupResponse) SetResultCode(v string) *QueryAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppgroupResponse) SetResultMsg(v string) *QueryAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppgroupResponse) SetAppGroups(v []*AppGroup) *QueryAppgroupResponse {
	s.AppGroups = v
	return s
}

func (s *QueryAppgroupResponse) SetPageNum(v int) *QueryAppgroupResponse {
	s.PageNum = &v
	return s
}

func (s *QueryAppgroupResponse) SetPageSize(v int) *QueryAppgroupResponse {
	s.PageSize = &v
	return s
}

func (s *QueryAppgroupResponse) SetTotalCount(v int) *QueryAppgroupResponse {
	s.TotalCount = &v
	return s
}

type QueryApplevelRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用等级名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 当前页码，默认为1
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认10
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
}

func (s QueryApplevelRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryApplevelRequest) GoString() string {
	return s.String()
}

func (s *QueryApplevelRequest) SetAuthToken(v string) *QueryApplevelRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryApplevelRequest) SetName(v string) *QueryApplevelRequest {
	s.Name = &v
	return s
}

func (s *QueryApplevelRequest) SetPageNum(v int) *QueryApplevelRequest {
	s.PageNum = &v
	return s
}

func (s *QueryApplevelRequest) SetPageSize(v int) *QueryApplevelRequest {
	s.PageSize = &v
	return s
}

func (s *QueryApplevelRequest) SetTenant(v string) *QueryApplevelRequest {
	s.Tenant = &v
	return s
}

type QueryApplevelResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用等级列表
	AppLevels []*AppLevel `json:"app_levels,omitempty" xml:"app_levels,omitempty" type:"Repeated"`
	// 当前页码
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 资源总数
	TotalCount *int `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryApplevelResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryApplevelResponse) GoString() string {
	return s.String()
}

func (s *QueryApplevelResponse) SetReqMsgId(v string) *QueryApplevelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryApplevelResponse) SetResultCode(v string) *QueryApplevelResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryApplevelResponse) SetResultMsg(v string) *QueryApplevelResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryApplevelResponse) SetAppLevels(v []*AppLevel) *QueryApplevelResponse {
	s.AppLevels = v
	return s
}

func (s *QueryApplevelResponse) SetPageNum(v int) *QueryApplevelResponse {
	s.PageNum = &v
	return s
}

func (s *QueryApplevelResponse) SetPageSize(v int) *QueryApplevelResponse {
	s.PageSize = &v
	return s
}

func (s *QueryApplevelResponse) SetTotalCount(v int) *QueryApplevelResponse {
	s.TotalCount = &v
	return s
}

type QueryApplicationRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 应用分组名
	AppGroupName *string `json:"app_group_name,omitempty" xml:"app_group_name,omitempty"`
	// 应用级别
	AppLevelName *string `json:"app_level_name,omitempty" xml:"app_level_name,omitempty"`
	// 登录名
	OwnerLoginName *string `json:"owner_login_name,omitempty" xml:"owner_login_name,omitempty"`
	// 当前页码，默认为1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询结果是否返回应用额外元数据信息。此字段为 true 时，为保证查询效率，列表大小将强制修改为 10 （若超过）
	QueryExtraInfo *bool `json:"query_extra_info,omitempty" xml:"query_extra_info,omitempty"`
	// 租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
}

func (s QueryApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationRequest) GoString() string {
	return s.String()
}

func (s *QueryApplicationRequest) SetAuthToken(v string) *QueryApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryApplicationRequest) SetApplicationName(v string) *QueryApplicationRequest {
	s.ApplicationName = &v
	return s
}

func (s *QueryApplicationRequest) SetAppGroupName(v string) *QueryApplicationRequest {
	s.AppGroupName = &v
	return s
}

func (s *QueryApplicationRequest) SetAppLevelName(v string) *QueryApplicationRequest {
	s.AppLevelName = &v
	return s
}

func (s *QueryApplicationRequest) SetOwnerLoginName(v string) *QueryApplicationRequest {
	s.OwnerLoginName = &v
	return s
}

func (s *QueryApplicationRequest) SetPageNum(v int64) *QueryApplicationRequest {
	s.PageNum = &v
	return s
}

func (s *QueryApplicationRequest) SetPageSize(v int64) *QueryApplicationRequest {
	s.PageSize = &v
	return s
}

func (s *QueryApplicationRequest) SetQueryExtraInfo(v bool) *QueryApplicationRequest {
	s.QueryExtraInfo = &v
	return s
}

func (s *QueryApplicationRequest) SetTenant(v string) *QueryApplicationRequest {
	s.Tenant = &v
	return s
}

type QueryApplicationResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用列表
	Applications []*ApplicationInfo `json:"applications,omitempty" xml:"applications,omitempty" type:"Repeated"`
	// 当前页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 资源总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationResponse) GoString() string {
	return s.String()
}

func (s *QueryApplicationResponse) SetReqMsgId(v string) *QueryApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryApplicationResponse) SetResultCode(v string) *QueryApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryApplicationResponse) SetResultMsg(v string) *QueryApplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryApplicationResponse) SetApplications(v []*ApplicationInfo) *QueryApplicationResponse {
	s.Applications = v
	return s
}

func (s *QueryApplicationResponse) SetPageNum(v int64) *QueryApplicationResponse {
	s.PageNum = &v
	return s
}

func (s *QueryApplicationResponse) SetPageSize(v int64) *QueryApplicationResponse {
	s.PageSize = &v
	return s
}

func (s *QueryApplicationResponse) SetTotalCount(v int64) *QueryApplicationResponse {
	s.TotalCount = &v
	return s
}

type CreateAppVersionRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 目标应用完整名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 应用部署包文件16字节md5值，以32位十六进制字符表示，不区分大小写。如果提供，APPMS下载应用部署包完成后，将会以此md5值进行校验，检验不通过则认为下载失败
	//
	FileMd5 *string `json:"file_md5,omitempty" xml:"file_md5,omitempty"`
	// 应用部署包文件路径。长度不超过1024个单字节字符
	FilePath *string `json:"file_path,omitempty" xml:"file_path,omitempty" maxLength:"1024"`
	// 应用部署包文件大小，单位字节。取值范围[1,524288000]，即最大支持500M, 524288000 = 500 x 1024 x 1024
	//
	FileSize *int `json:"file_size,omitempty" xml:"file_size,omitempty" maximum:"undefined" minimum:"undefined"`
	// 文件交换源id
	FileSource *string `json:"file_source,omitempty" xml:"file_source,omitempty"`
	// 目标租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// 版本备注。长度不超过100个双字节字符
	VersionMemo *string `json:"version_memo,omitempty" xml:"version_memo,omitempty" maxLength:"100"`
	// 版本号。长度不超过50个单字节字符
	VersionNo *string `json:"version_no,omitempty" xml:"version_no,omitempty" maxLength:"50"`
	// 目标工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CreateAppVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAppVersionRequest) GoString() string {
	return s.String()
}

func (s *CreateAppVersionRequest) SetAuthToken(v string) *CreateAppVersionRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAppVersionRequest) SetApplicationName(v string) *CreateAppVersionRequest {
	s.ApplicationName = &v
	return s
}

func (s *CreateAppVersionRequest) SetFileMd5(v string) *CreateAppVersionRequest {
	s.FileMd5 = &v
	return s
}

func (s *CreateAppVersionRequest) SetFilePath(v string) *CreateAppVersionRequest {
	s.FilePath = &v
	return s
}

func (s *CreateAppVersionRequest) SetFileSize(v int) *CreateAppVersionRequest {
	s.FileSize = &v
	return s
}

func (s *CreateAppVersionRequest) SetFileSource(v string) *CreateAppVersionRequest {
	s.FileSource = &v
	return s
}

func (s *CreateAppVersionRequest) SetTenant(v string) *CreateAppVersionRequest {
	s.Tenant = &v
	return s
}

func (s *CreateAppVersionRequest) SetVersionMemo(v string) *CreateAppVersionRequest {
	s.VersionMemo = &v
	return s
}

func (s *CreateAppVersionRequest) SetVersionNo(v string) *CreateAppVersionRequest {
	s.VersionNo = &v
	return s
}

func (s *CreateAppVersionRequest) SetWorkspace(v string) *CreateAppVersionRequest {
	s.Workspace = &v
	return s
}

type CreateAppVersionResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发布包任务id，可用于查询应用发布包生成状态
	BuildId *string `json:"build_id,omitempty" xml:"build_id,omitempty"`
}

func (s CreateAppVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAppVersionResponse) GoString() string {
	return s.String()
}

func (s *CreateAppVersionResponse) SetReqMsgId(v string) *CreateAppVersionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAppVersionResponse) SetResultCode(v string) *CreateAppVersionResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAppVersionResponse) SetResultMsg(v string) *CreateAppVersionResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAppVersionResponse) SetBuildId(v string) *CreateAppVersionResponse {
	s.BuildId = &v
	return s
}

type QueryAppDeltaRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 结束时间点
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 开始时间点
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
}

func (s QueryAppDeltaRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppDeltaRequest) GoString() string {
	return s.String()
}

func (s *QueryAppDeltaRequest) SetAuthToken(v string) *QueryAppDeltaRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppDeltaRequest) SetEndTime(v string) *QueryAppDeltaRequest {
	s.EndTime = &v
	return s
}

func (s *QueryAppDeltaRequest) SetStartTime(v string) *QueryAppDeltaRequest {
	s.StartTime = &v
	return s
}

type QueryAppDeltaResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发生变化的租户列表
	Tenants []*string `json:"tenants,omitempty" xml:"tenants,omitempty" type:"Repeated"`
}

func (s QueryAppDeltaResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppDeltaResponse) GoString() string {
	return s.String()
}

func (s *QueryAppDeltaResponse) SetReqMsgId(v string) *QueryAppDeltaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppDeltaResponse) SetResultCode(v string) *QueryAppDeltaResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppDeltaResponse) SetResultMsg(v string) *QueryAppDeltaResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppDeltaResponse) SetTenants(v []*string) *QueryAppDeltaResponse {
	s.Tenants = v
	return s
}

type QueryApplicationLoadbalancerRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 目标服务实例名称，填写application时有意义。application不填时，service_name的值会被忽略
	Application *string `json:"application,omitempty" xml:"application,omitempty"`
	// 资源名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// VIP类型
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// 当前页码，默认为1
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认10
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 目标服务实例名称
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty"`
	// 资源所处的状态，可指定多个
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// vip地址
	VipAddress *string `json:"vip_address,omitempty" xml:"vip_address,omitempty"`
	// address 类型：INTERNET, INTRANET
	VipAddressType *string `json:"vip_address_type,omitempty" xml:"vip_address_type,omitempty"`
	// VIP类型
	VipType *string `json:"vip_type,omitempty" xml:"vip_type,omitempty"`
	// vpc的id
	VpcIds []*string `json:"vpc_ids,omitempty" xml:"vpc_ids,omitempty" type:"Repeated"`
	// 目标工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryApplicationLoadbalancerRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationLoadbalancerRequest) GoString() string {
	return s.String()
}

func (s *QueryApplicationLoadbalancerRequest) SetAuthToken(v string) *QueryApplicationLoadbalancerRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryApplicationLoadbalancerRequest) SetApplication(v string) *QueryApplicationLoadbalancerRequest {
	s.Application = &v
	return s
}

func (s *QueryApplicationLoadbalancerRequest) SetName(v string) *QueryApplicationLoadbalancerRequest {
	s.Name = &v
	return s
}

func (s *QueryApplicationLoadbalancerRequest) SetNetworkType(v string) *QueryApplicationLoadbalancerRequest {
	s.NetworkType = &v
	return s
}

func (s *QueryApplicationLoadbalancerRequest) SetPageNum(v int) *QueryApplicationLoadbalancerRequest {
	s.PageNum = &v
	return s
}

func (s *QueryApplicationLoadbalancerRequest) SetPageSize(v int) *QueryApplicationLoadbalancerRequest {
	s.PageSize = &v
	return s
}

func (s *QueryApplicationLoadbalancerRequest) SetServiceName(v string) *QueryApplicationLoadbalancerRequest {
	s.ServiceName = &v
	return s
}

func (s *QueryApplicationLoadbalancerRequest) SetStatuses(v []*string) *QueryApplicationLoadbalancerRequest {
	s.Statuses = v
	return s
}

func (s *QueryApplicationLoadbalancerRequest) SetVipAddress(v string) *QueryApplicationLoadbalancerRequest {
	s.VipAddress = &v
	return s
}

func (s *QueryApplicationLoadbalancerRequest) SetVipAddressType(v string) *QueryApplicationLoadbalancerRequest {
	s.VipAddressType = &v
	return s
}

func (s *QueryApplicationLoadbalancerRequest) SetVipType(v string) *QueryApplicationLoadbalancerRequest {
	s.VipType = &v
	return s
}

func (s *QueryApplicationLoadbalancerRequest) SetVpcIds(v []*string) *QueryApplicationLoadbalancerRequest {
	s.VpcIds = v
	return s
}

func (s *QueryApplicationLoadbalancerRequest) SetWorkspace(v string) *QueryApplicationLoadbalancerRequest {
	s.Workspace = &v
	return s
}

type QueryApplicationLoadbalancerResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 负载均衡资源列表
	Loadbalancers []*DepsLoadBalancer `json:"loadbalancers,omitempty" xml:"loadbalancers,omitempty" type:"Repeated"`
	// 当前页码
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 应用总数
	TotalCount *int `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryApplicationLoadbalancerResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationLoadbalancerResponse) GoString() string {
	return s.String()
}

func (s *QueryApplicationLoadbalancerResponse) SetReqMsgId(v string) *QueryApplicationLoadbalancerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryApplicationLoadbalancerResponse) SetResultCode(v string) *QueryApplicationLoadbalancerResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryApplicationLoadbalancerResponse) SetResultMsg(v string) *QueryApplicationLoadbalancerResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryApplicationLoadbalancerResponse) SetLoadbalancers(v []*DepsLoadBalancer) *QueryApplicationLoadbalancerResponse {
	s.Loadbalancers = v
	return s
}

func (s *QueryApplicationLoadbalancerResponse) SetPageNum(v int) *QueryApplicationLoadbalancerResponse {
	s.PageNum = &v
	return s
}

func (s *QueryApplicationLoadbalancerResponse) SetPageSize(v int) *QueryApplicationLoadbalancerResponse {
	s.PageSize = &v
	return s
}

func (s *QueryApplicationLoadbalancerResponse) SetTotalCount(v int) *QueryApplicationLoadbalancerResponse {
	s.TotalCount = &v
	return s
}

type QueryApplicationDatabaseRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 目标服务实例名称，填写application时有意义。application不填时，service_name的值会被忽略
	Application *string `json:"application,omitempty" xml:"application,omitempty"`
	// 连接地址
	ConnectionAddress *string `json:"connection_address,omitempty" xml:"connection_address,omitempty"`
	// 资源名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 网络类型，Classic或VPC
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// 网络连接类型，取值 Internet：外网，Intranet：内网
	NetType *string `json:"net_type,omitempty" xml:"net_type,omitempty"`
	// 当前页码，默认为1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 连接端口
	Port *int64 `json:"port,omitempty" xml:"port,omitempty"`
	// 目标服务实例名称
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty"`
	// 资源所处的状态，可指定多个
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// 目标工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryApplicationDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationDatabaseRequest) GoString() string {
	return s.String()
}

func (s *QueryApplicationDatabaseRequest) SetAuthToken(v string) *QueryApplicationDatabaseRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryApplicationDatabaseRequest) SetApplication(v string) *QueryApplicationDatabaseRequest {
	s.Application = &v
	return s
}

func (s *QueryApplicationDatabaseRequest) SetConnectionAddress(v string) *QueryApplicationDatabaseRequest {
	s.ConnectionAddress = &v
	return s
}

func (s *QueryApplicationDatabaseRequest) SetName(v string) *QueryApplicationDatabaseRequest {
	s.Name = &v
	return s
}

func (s *QueryApplicationDatabaseRequest) SetNetworkType(v string) *QueryApplicationDatabaseRequest {
	s.NetworkType = &v
	return s
}

func (s *QueryApplicationDatabaseRequest) SetNetType(v string) *QueryApplicationDatabaseRequest {
	s.NetType = &v
	return s
}

func (s *QueryApplicationDatabaseRequest) SetPageNum(v int64) *QueryApplicationDatabaseRequest {
	s.PageNum = &v
	return s
}

func (s *QueryApplicationDatabaseRequest) SetPageSize(v int64) *QueryApplicationDatabaseRequest {
	s.PageSize = &v
	return s
}

func (s *QueryApplicationDatabaseRequest) SetPort(v int64) *QueryApplicationDatabaseRequest {
	s.Port = &v
	return s
}

func (s *QueryApplicationDatabaseRequest) SetServiceName(v string) *QueryApplicationDatabaseRequest {
	s.ServiceName = &v
	return s
}

func (s *QueryApplicationDatabaseRequest) SetStatuses(v []*string) *QueryApplicationDatabaseRequest {
	s.Statuses = v
	return s
}

func (s *QueryApplicationDatabaseRequest) SetWorkspace(v string) *QueryApplicationDatabaseRequest {
	s.Workspace = &v
	return s
}

type QueryApplicationDatabaseResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 资源列表
	Databases []*DepsDatabase `json:"databases,omitempty" xml:"databases,omitempty" type:"Repeated"`
	// 当前页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 应用总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryApplicationDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationDatabaseResponse) GoString() string {
	return s.String()
}

func (s *QueryApplicationDatabaseResponse) SetReqMsgId(v string) *QueryApplicationDatabaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryApplicationDatabaseResponse) SetResultCode(v string) *QueryApplicationDatabaseResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryApplicationDatabaseResponse) SetResultMsg(v string) *QueryApplicationDatabaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryApplicationDatabaseResponse) SetDatabases(v []*DepsDatabase) *QueryApplicationDatabaseResponse {
	s.Databases = v
	return s
}

func (s *QueryApplicationDatabaseResponse) SetPageNum(v int64) *QueryApplicationDatabaseResponse {
	s.PageNum = &v
	return s
}

func (s *QueryApplicationDatabaseResponse) SetPageSize(v int64) *QueryApplicationDatabaseResponse {
	s.PageSize = &v
	return s
}

func (s *QueryApplicationDatabaseResponse) SetTotalCount(v int64) *QueryApplicationDatabaseResponse {
	s.TotalCount = &v
	return s
}

type UploadApplicationPackageRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 目标应用完整名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 应用发布包名称。长度不超过100个双字节字符
	PackageName *string `json:"package_name,omitempty" xml:"package_name,omitempty" maxLength:"100"`
	// 目标租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// 版本号。长度不超过50个单字节字符
	VersionNo *string `json:"version_no,omitempty" xml:"version_no,omitempty" maxLength:"50"`
	// 目标工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s UploadApplicationPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadApplicationPackageRequest) GoString() string {
	return s.String()
}

func (s *UploadApplicationPackageRequest) SetAuthToken(v string) *UploadApplicationPackageRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadApplicationPackageRequest) SetApplicationName(v string) *UploadApplicationPackageRequest {
	s.ApplicationName = &v
	return s
}

func (s *UploadApplicationPackageRequest) SetPackageName(v string) *UploadApplicationPackageRequest {
	s.PackageName = &v
	return s
}

func (s *UploadApplicationPackageRequest) SetTenant(v string) *UploadApplicationPackageRequest {
	s.Tenant = &v
	return s
}

func (s *UploadApplicationPackageRequest) SetVersionNo(v string) *UploadApplicationPackageRequest {
	s.VersionNo = &v
	return s
}

func (s *UploadApplicationPackageRequest) SetWorkspace(v string) *UploadApplicationPackageRequest {
	s.Workspace = &v
	return s
}

type UploadApplicationPackageResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 上传oss的bucket名称
	BucketName *string `json:"bucket_name,omitempty" xml:"bucket_name,omitempty"`
	// 上传应用发布包的授权签名上传地址
	SignedUploadUrl *string `json:"signed_upload_url,omitempty" xml:"signed_upload_url,omitempty"`
}

func (s UploadApplicationPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadApplicationPackageResponse) GoString() string {
	return s.String()
}

func (s *UploadApplicationPackageResponse) SetReqMsgId(v string) *UploadApplicationPackageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadApplicationPackageResponse) SetResultCode(v string) *UploadApplicationPackageResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadApplicationPackageResponse) SetResultMsg(v string) *UploadApplicationPackageResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadApplicationPackageResponse) SetBucketName(v string) *UploadApplicationPackageResponse {
	s.BucketName = &v
	return s
}

func (s *UploadApplicationPackageResponse) SetSignedUploadUrl(v string) *UploadApplicationPackageResponse {
	s.SignedUploadUrl = &v
	return s
}

type SyncreateApplicationVersionRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 目标应用完整名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 应用部署包文件16字节md5值，以32位十六进制字符表示，不区分大小写。如果提供，将会以此md5值进行校验，检验不通过则认为创建失败
	//
	PackageEtag *string `json:"package_etag,omitempty" xml:"package_etag,omitempty"`
	// 应用发布包名称。长度不超过100个双字节字符
	PackageName *string `json:"package_name,omitempty" xml:"package_name,omitempty" maxLength:"100"`
	// 目标租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// 应用发布包备注
	VersionMemo *string `json:"version_memo,omitempty" xml:"version_memo,omitempty"`
	// 版本号。长度不超过50个单字节字符
	VersionNo *string `json:"version_no,omitempty" xml:"version_no,omitempty" maxLength:"50"`
	// 目标工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s SyncreateApplicationVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncreateApplicationVersionRequest) GoString() string {
	return s.String()
}

func (s *SyncreateApplicationVersionRequest) SetAuthToken(v string) *SyncreateApplicationVersionRequest {
	s.AuthToken = &v
	return s
}

func (s *SyncreateApplicationVersionRequest) SetApplicationName(v string) *SyncreateApplicationVersionRequest {
	s.ApplicationName = &v
	return s
}

func (s *SyncreateApplicationVersionRequest) SetPackageEtag(v string) *SyncreateApplicationVersionRequest {
	s.PackageEtag = &v
	return s
}

func (s *SyncreateApplicationVersionRequest) SetPackageName(v string) *SyncreateApplicationVersionRequest {
	s.PackageName = &v
	return s
}

func (s *SyncreateApplicationVersionRequest) SetTenant(v string) *SyncreateApplicationVersionRequest {
	s.Tenant = &v
	return s
}

func (s *SyncreateApplicationVersionRequest) SetVersionMemo(v string) *SyncreateApplicationVersionRequest {
	s.VersionMemo = &v
	return s
}

func (s *SyncreateApplicationVersionRequest) SetVersionNo(v string) *SyncreateApplicationVersionRequest {
	s.VersionNo = &v
	return s
}

func (s *SyncreateApplicationVersionRequest) SetWorkspace(v string) *SyncreateApplicationVersionRequest {
	s.Workspace = &v
	return s
}

type SyncreateApplicationVersionResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SyncreateApplicationVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncreateApplicationVersionResponse) GoString() string {
	return s.String()
}

func (s *SyncreateApplicationVersionResponse) SetReqMsgId(v string) *SyncreateApplicationVersionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SyncreateApplicationVersionResponse) SetResultCode(v string) *SyncreateApplicationVersionResponse {
	s.ResultCode = &v
	return s
}

func (s *SyncreateApplicationVersionResponse) SetResultMsg(v string) *SyncreateApplicationVersionResponse {
	s.ResultMsg = &v
	return s
}

type ListCloudconnectorConnectionRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s ListCloudconnectorConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCloudconnectorConnectionRequest) GoString() string {
	return s.String()
}

func (s *ListCloudconnectorConnectionRequest) SetAuthToken(v string) *ListCloudconnectorConnectionRequest {
	s.AuthToken = &v
	return s
}

type ListCloudconnectorConnectionResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// List<Connection>
	Data []*Connection `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// startIndex
	StartIndex *int64 `json:"start_index,omitempty" xml:"start_index,omitempty"`
	// pageSize
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// totalSize
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
	// currentPage
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
}

func (s ListCloudconnectorConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCloudconnectorConnectionResponse) GoString() string {
	return s.String()
}

func (s *ListCloudconnectorConnectionResponse) SetReqMsgId(v string) *ListCloudconnectorConnectionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListCloudconnectorConnectionResponse) SetResultCode(v string) *ListCloudconnectorConnectionResponse {
	s.ResultCode = &v
	return s
}

func (s *ListCloudconnectorConnectionResponse) SetResultMsg(v string) *ListCloudconnectorConnectionResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListCloudconnectorConnectionResponse) SetData(v []*Connection) *ListCloudconnectorConnectionResponse {
	s.Data = v
	return s
}

func (s *ListCloudconnectorConnectionResponse) SetStartIndex(v int64) *ListCloudconnectorConnectionResponse {
	s.StartIndex = &v
	return s
}

func (s *ListCloudconnectorConnectionResponse) SetPageSize(v int64) *ListCloudconnectorConnectionResponse {
	s.PageSize = &v
	return s
}

func (s *ListCloudconnectorConnectionResponse) SetTotalSize(v int64) *ListCloudconnectorConnectionResponse {
	s.TotalSize = &v
	return s
}

func (s *ListCloudconnectorConnectionResponse) SetCurrentPage(v int64) *ListCloudconnectorConnectionResponse {
	s.CurrentPage = &v
	return s
}

type QueryAppservicebuildpackrelationRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 一组应用服务id
	AppserviceIds []*string `json:"appservice_ids,omitempty" xml:"appservice_ids,omitempty" type:"Repeated"`
	// 一组应用id
	//
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// buildpackArch
	BuildpackArch *string `json:"buildpack_arch,omitempty" xml:"buildpack_arch,omitempty"`
	// buildpackIds
	BuildpackIds []*string `json:"buildpack_ids,omitempty" xml:"buildpack_ids,omitempty" type:"Repeated"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 是否降序
	Descend *bool `json:"descend,omitempty" xml:"descend,omitempty"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
	// 每页个数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 分类
	SortField *string `json:"sort_field,omitempty" xml:"sort_field,omitempty"`
	// 开始索引
	StartIndex *int64 `json:"start_index,omitempty" xml:"start_index,omitempty"`
	// techstackIdentities
	TechstackIdentities []*string `json:"techstack_identities,omitempty" xml:"techstack_identities,omitempty" type:"Repeated"`
	// 一组技术栈id
	TechstackIds []*string `json:"techstack_ids,omitempty" xml:"techstack_ids,omitempty" type:"Repeated"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s QueryAppservicebuildpackrelationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppservicebuildpackrelationRequest) GoString() string {
	return s.String()
}

func (s *QueryAppservicebuildpackrelationRequest) SetAuthToken(v string) *QueryAppservicebuildpackrelationRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppservicebuildpackrelationRequest) SetAppserviceIds(v []*string) *QueryAppservicebuildpackrelationRequest {
	s.AppserviceIds = v
	return s
}

func (s *QueryAppservicebuildpackrelationRequest) SetAppIds(v []*string) *QueryAppservicebuildpackrelationRequest {
	s.AppIds = v
	return s
}

func (s *QueryAppservicebuildpackrelationRequest) SetBuildpackArch(v string) *QueryAppservicebuildpackrelationRequest {
	s.BuildpackArch = &v
	return s
}

func (s *QueryAppservicebuildpackrelationRequest) SetBuildpackIds(v []*string) *QueryAppservicebuildpackrelationRequest {
	s.BuildpackIds = v
	return s
}

func (s *QueryAppservicebuildpackrelationRequest) SetCurrentPage(v int64) *QueryAppservicebuildpackrelationRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryAppservicebuildpackrelationRequest) SetDescend(v bool) *QueryAppservicebuildpackrelationRequest {
	s.Descend = &v
	return s
}

func (s *QueryAppservicebuildpackrelationRequest) SetIds(v []*string) *QueryAppservicebuildpackrelationRequest {
	s.Ids = v
	return s
}

func (s *QueryAppservicebuildpackrelationRequest) SetPageSize(v int64) *QueryAppservicebuildpackrelationRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAppservicebuildpackrelationRequest) SetSortField(v string) *QueryAppservicebuildpackrelationRequest {
	s.SortField = &v
	return s
}

func (s *QueryAppservicebuildpackrelationRequest) SetStartIndex(v int64) *QueryAppservicebuildpackrelationRequest {
	s.StartIndex = &v
	return s
}

func (s *QueryAppservicebuildpackrelationRequest) SetTechstackIdentities(v []*string) *QueryAppservicebuildpackrelationRequest {
	s.TechstackIdentities = v
	return s
}

func (s *QueryAppservicebuildpackrelationRequest) SetTechstackIds(v []*string) *QueryAppservicebuildpackrelationRequest {
	s.TechstackIds = v
	return s
}

func (s *QueryAppservicebuildpackrelationRequest) SetWorkspaceId(v string) *QueryAppservicebuildpackrelationRequest {
	s.WorkspaceId = &v
	return s
}

type QueryAppservicebuildpackrelationResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_service_buildpack_relations
	AppServiceBuildpackRelations []*AppServiceBuildpackRelation `json:"app_service_buildpack_relations,omitempty" xml:"app_service_buildpack_relations,omitempty" type:"Repeated"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryAppservicebuildpackrelationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppservicebuildpackrelationResponse) GoString() string {
	return s.String()
}

func (s *QueryAppservicebuildpackrelationResponse) SetReqMsgId(v string) *QueryAppservicebuildpackrelationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppservicebuildpackrelationResponse) SetResultCode(v string) *QueryAppservicebuildpackrelationResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppservicebuildpackrelationResponse) SetResultMsg(v string) *QueryAppservicebuildpackrelationResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppservicebuildpackrelationResponse) SetAppServiceBuildpackRelations(v []*AppServiceBuildpackRelation) *QueryAppservicebuildpackrelationResponse {
	s.AppServiceBuildpackRelations = v
	return s
}

func (s *QueryAppservicebuildpackrelationResponse) SetCurrentPage(v int64) *QueryAppservicebuildpackrelationResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryAppservicebuildpackrelationResponse) SetPageSize(v int64) *QueryAppservicebuildpackrelationResponse {
	s.PageSize = &v
	return s
}

func (s *QueryAppservicebuildpackrelationResponse) SetTotalCount(v int64) *QueryAppservicebuildpackrelationResponse {
	s.TotalCount = &v
	return s
}

type UpdateAppservicebuildpackrelationRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// new_app_service
	NewAppService *BuildpackAppService `json:"new_app_service,omitempty" xml:"new_app_service,omitempty"`
	// original_app_service
	OriginalAppService *BuildpackAppService `json:"original_app_service,omitempty" xml:"original_app_service,omitempty"`
}

func (s UpdateAppservicebuildpackrelationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppservicebuildpackrelationRequest) GoString() string {
	return s.String()
}

func (s *UpdateAppservicebuildpackrelationRequest) SetAuthToken(v string) *UpdateAppservicebuildpackrelationRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateAppservicebuildpackrelationRequest) SetNewAppService(v *BuildpackAppService) *UpdateAppservicebuildpackrelationRequest {
	s.NewAppService = v
	return s
}

func (s *UpdateAppservicebuildpackrelationRequest) SetOriginalAppService(v *BuildpackAppService) *UpdateAppservicebuildpackrelationRequest {
	s.OriginalAppService = v
	return s
}

type UpdateAppservicebuildpackrelationResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateAppservicebuildpackrelationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppservicebuildpackrelationResponse) GoString() string {
	return s.String()
}

func (s *UpdateAppservicebuildpackrelationResponse) SetReqMsgId(v string) *UpdateAppservicebuildpackrelationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateAppservicebuildpackrelationResponse) SetResultCode(v string) *UpdateAppservicebuildpackrelationResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateAppservicebuildpackrelationResponse) SetResultMsg(v string) *UpdateAppservicebuildpackrelationResponse {
	s.ResultMsg = &v
	return s
}

type QueryAppserviceenvparamRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// appIds
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// appServiceIds
	AppServiceIds []*string `json:"app_service_ids,omitempty" xml:"app_service_ids,omitempty" type:"Repeated"`
	// buildpackIds
	BuildpackIds []*string `json:"buildpack_ids,omitempty" xml:"buildpack_ids,omitempty" type:"Repeated"`
	// creationTimeFrom
	CreationTimeFrom *string `json:"creation_time_from,omitempty" xml:"creation_time_from,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// creationTimeTo
	CreationTimeTo *string `json:"creation_time_to,omitempty" xml:"creation_time_to,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 当前页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// defaultValue
	DefaultValue *string `json:"default_value,omitempty" xml:"default_value,omitempty"`
	// 是否降序
	Descend *bool `json:"descend,omitempty" xml:"descend,omitempty"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
	// isProcessed
	IsProcessed *bool `json:"is_processed,omitempty" xml:"is_processed,omitempty"`
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// modificationTimeFrom
	ModificationTimeFrom *string `json:"modification_time_from,omitempty" xml:"modification_time_from,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// modificationTimeTo
	ModificationTimeTo *string `json:"modification_time_to,omitempty" xml:"modification_time_to,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 每页个数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 分类
	SortField *string `json:"sort_field,omitempty" xml:"sort_field,omitempty"`
	// 开始索引
	StartIndex *int64 `json:"start_index,omitempty" xml:"start_index,omitempty"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s QueryAppserviceenvparamRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppserviceenvparamRequest) GoString() string {
	return s.String()
}

func (s *QueryAppserviceenvparamRequest) SetAuthToken(v string) *QueryAppserviceenvparamRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetAppIds(v []*string) *QueryAppserviceenvparamRequest {
	s.AppIds = v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetAppServiceIds(v []*string) *QueryAppserviceenvparamRequest {
	s.AppServiceIds = v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetBuildpackIds(v []*string) *QueryAppserviceenvparamRequest {
	s.BuildpackIds = v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetCreationTimeFrom(v string) *QueryAppserviceenvparamRequest {
	s.CreationTimeFrom = &v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetCreationTimeTo(v string) *QueryAppserviceenvparamRequest {
	s.CreationTimeTo = &v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetCurrentPage(v int64) *QueryAppserviceenvparamRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetDefaultValue(v string) *QueryAppserviceenvparamRequest {
	s.DefaultValue = &v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetDescend(v bool) *QueryAppserviceenvparamRequest {
	s.Descend = &v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetIds(v []*string) *QueryAppserviceenvparamRequest {
	s.Ids = v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetIsProcessed(v bool) *QueryAppserviceenvparamRequest {
	s.IsProcessed = &v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetKey(v string) *QueryAppserviceenvparamRequest {
	s.Key = &v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetModificationTimeFrom(v string) *QueryAppserviceenvparamRequest {
	s.ModificationTimeFrom = &v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetModificationTimeTo(v string) *QueryAppserviceenvparamRequest {
	s.ModificationTimeTo = &v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetPageSize(v int64) *QueryAppserviceenvparamRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetSortField(v string) *QueryAppserviceenvparamRequest {
	s.SortField = &v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetStartIndex(v int64) *QueryAppserviceenvparamRequest {
	s.StartIndex = &v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetValue(v string) *QueryAppserviceenvparamRequest {
	s.Value = &v
	return s
}

func (s *QueryAppserviceenvparamRequest) SetWorkspaceId(v string) *QueryAppserviceenvparamRequest {
	s.WorkspaceId = &v
	return s
}

type QueryAppserviceenvparamResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_service_env_params
	AppServiceEnvParams []*AppServiceEnvParam `json:"app_service_env_params,omitempty" xml:"app_service_env_params,omitempty" type:"Repeated"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryAppserviceenvparamResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppserviceenvparamResponse) GoString() string {
	return s.String()
}

func (s *QueryAppserviceenvparamResponse) SetReqMsgId(v string) *QueryAppserviceenvparamResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppserviceenvparamResponse) SetResultCode(v string) *QueryAppserviceenvparamResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppserviceenvparamResponse) SetResultMsg(v string) *QueryAppserviceenvparamResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppserviceenvparamResponse) SetAppServiceEnvParams(v []*AppServiceEnvParam) *QueryAppserviceenvparamResponse {
	s.AppServiceEnvParams = v
	return s
}

func (s *QueryAppserviceenvparamResponse) SetCurrentPage(v int64) *QueryAppserviceenvparamResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryAppserviceenvparamResponse) SetPageSize(v int64) *QueryAppserviceenvparamResponse {
	s.PageSize = &v
	return s
}

func (s *QueryAppserviceenvparamResponse) SetTotalCount(v int64) *QueryAppserviceenvparamResponse {
	s.TotalCount = &v
	return s
}

type QueryAppserviceenvparamGroupbyappservicesRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// appServiceIds
	AppServiceIds []*string `json:"app_service_ids,omitempty" xml:"app_service_ids,omitempty" type:"Repeated"`
}

func (s QueryAppserviceenvparamGroupbyappservicesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppserviceenvparamGroupbyappservicesRequest) GoString() string {
	return s.String()
}

func (s *QueryAppserviceenvparamGroupbyappservicesRequest) SetAuthToken(v string) *QueryAppserviceenvparamGroupbyappservicesRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppserviceenvparamGroupbyappservicesRequest) SetAppServiceIds(v []*string) *QueryAppserviceenvparamGroupbyappservicesRequest {
	s.AppServiceIds = v
	return s
}

type QueryAppserviceenvparamGroupbyappservicesResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 环境变量json字符串
	AppServiceEnvParam *string `json:"app_service_env_param,omitempty" xml:"app_service_env_param,omitempty"`
}

func (s QueryAppserviceenvparamGroupbyappservicesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppserviceenvparamGroupbyappservicesResponse) GoString() string {
	return s.String()
}

func (s *QueryAppserviceenvparamGroupbyappservicesResponse) SetReqMsgId(v string) *QueryAppserviceenvparamGroupbyappservicesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppserviceenvparamGroupbyappservicesResponse) SetResultCode(v string) *QueryAppserviceenvparamGroupbyappservicesResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppserviceenvparamGroupbyappservicesResponse) SetResultMsg(v string) *QueryAppserviceenvparamGroupbyappservicesResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppserviceenvparamGroupbyappservicesResponse) SetAppServiceEnvParam(v string) *QueryAppserviceenvparamGroupbyappservicesResponse {
	s.AppServiceEnvParam = &v
	return s
}

type QueryAppserviceenvparamQuerywithdiffRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// appServiceId
	AppServiceId *string `json:"app_service_id,omitempty" xml:"app_service_id,omitempty"`
	// buildpackId
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
}

func (s QueryAppserviceenvparamQuerywithdiffRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppserviceenvparamQuerywithdiffRequest) GoString() string {
	return s.String()
}

func (s *QueryAppserviceenvparamQuerywithdiffRequest) SetAuthToken(v string) *QueryAppserviceenvparamQuerywithdiffRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppserviceenvparamQuerywithdiffRequest) SetAppServiceId(v string) *QueryAppserviceenvparamQuerywithdiffRequest {
	s.AppServiceId = &v
	return s
}

func (s *QueryAppserviceenvparamQuerywithdiffRequest) SetBuildpackId(v string) *QueryAppserviceenvparamQuerywithdiffRequest {
	s.BuildpackId = &v
	return s
}

type QueryAppserviceenvparamQuerywithdiffResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// json字符串
	AppServiceEnvParamDiff []*AppServiceEnvParam `json:"app_service_env_param_diff,omitempty" xml:"app_service_env_param_diff,omitempty" type:"Repeated"`
}

func (s QueryAppserviceenvparamQuerywithdiffResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppserviceenvparamQuerywithdiffResponse) GoString() string {
	return s.String()
}

func (s *QueryAppserviceenvparamQuerywithdiffResponse) SetReqMsgId(v string) *QueryAppserviceenvparamQuerywithdiffResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppserviceenvparamQuerywithdiffResponse) SetResultCode(v string) *QueryAppserviceenvparamQuerywithdiffResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppserviceenvparamQuerywithdiffResponse) SetResultMsg(v string) *QueryAppserviceenvparamQuerywithdiffResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppserviceenvparamQuerywithdiffResponse) SetAppServiceEnvParamDiff(v []*AppServiceEnvParam) *QueryAppserviceenvparamQuerywithdiffResponse {
	s.AppServiceEnvParamDiff = v
	return s
}

type UpdateAppserviceenvparamUpdateparamsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// appServiceId
	AppServiceId *string `json:"app_service_id,omitempty" xml:"app_service_id,omitempty"`
	// buildpackId
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// params
	Params []*AppServiceEnvParam `json:"params,omitempty" xml:"params,omitempty" type:"Repeated"`
}

func (s UpdateAppserviceenvparamUpdateparamsRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppserviceenvparamUpdateparamsRequest) GoString() string {
	return s.String()
}

func (s *UpdateAppserviceenvparamUpdateparamsRequest) SetAuthToken(v string) *UpdateAppserviceenvparamUpdateparamsRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateAppserviceenvparamUpdateparamsRequest) SetAppServiceId(v string) *UpdateAppserviceenvparamUpdateparamsRequest {
	s.AppServiceId = &v
	return s
}

func (s *UpdateAppserviceenvparamUpdateparamsRequest) SetBuildpackId(v string) *UpdateAppserviceenvparamUpdateparamsRequest {
	s.BuildpackId = &v
	return s
}

func (s *UpdateAppserviceenvparamUpdateparamsRequest) SetParams(v []*AppServiceEnvParam) *UpdateAppserviceenvparamUpdateparamsRequest {
	s.Params = v
	return s
}

type UpdateAppserviceenvparamUpdateparamsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// AppServiceEnvParam集合
	AppServiceEnvParam []*AppServiceEnvParam `json:"app_service_env_param,omitempty" xml:"app_service_env_param,omitempty" type:"Repeated"`
}

func (s UpdateAppserviceenvparamUpdateparamsResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppserviceenvparamUpdateparamsResponse) GoString() string {
	return s.String()
}

func (s *UpdateAppserviceenvparamUpdateparamsResponse) SetReqMsgId(v string) *UpdateAppserviceenvparamUpdateparamsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateAppserviceenvparamUpdateparamsResponse) SetResultCode(v string) *UpdateAppserviceenvparamUpdateparamsResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateAppserviceenvparamUpdateparamsResponse) SetResultMsg(v string) *UpdateAppserviceenvparamUpdateparamsResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateAppserviceenvparamUpdateparamsResponse) SetAppServiceEnvParam(v []*AppServiceEnvParam) *UpdateAppserviceenvparamUpdateparamsResponse {
	s.AppServiceEnvParam = v
	return s
}

type QueryApptechstackrelationRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 一组应用id
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// buildpack_arch
	BuildpackArch *string `json:"buildpack_arch,omitempty" xml:"buildpack_arch,omitempty"`
	// creation_fime_from
	//
	CreationTimeFrom *string `json:"creation_time_from,omitempty" xml:"creation_time_from,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// creation_time_to
	//
	CreationTimeTo *string `json:"creation_time_to,omitempty" xml:"creation_time_to,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// current_page
	//
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 是否降序
	Descend *string `json:"descend,omitempty" xml:"descend,omitempty"`
	// ids
	Ids []*int64 `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
	// isProcessed
	IsProcessed *bool `json:"is_processed,omitempty" xml:"is_processed,omitempty"`
	// modification_time_from
	//
	ModificationTimeFrom *string `json:"modification_time_from,omitempty" xml:"modification_time_from,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// modification_time_to
	//
	ModificationTimeTo *string `json:"modification_time_to,omitempty" xml:"modification_time_to,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// page_size
	//
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 分类
	SortField *string `json:"sort_field,omitempty" xml:"sort_field,omitempty"`
	// start_index
	//
	StartIndex *int64 `json:"start_index,omitempty" xml:"start_index,omitempty"`
	// techstack_identities
	//
	TechstackIdentities *string `json:"techstack_identities,omitempty" xml:"techstack_identities,omitempty"`
	// techstack_ids
	//
	TechstackIds []*int64 `json:"techstack_ids,omitempty" xml:"techstack_ids,omitempty" type:"Repeated"`
}

func (s QueryApptechstackrelationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryApptechstackrelationRequest) GoString() string {
	return s.String()
}

func (s *QueryApptechstackrelationRequest) SetAuthToken(v string) *QueryApptechstackrelationRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryApptechstackrelationRequest) SetAppIds(v []*string) *QueryApptechstackrelationRequest {
	s.AppIds = v
	return s
}

func (s *QueryApptechstackrelationRequest) SetBuildpackArch(v string) *QueryApptechstackrelationRequest {
	s.BuildpackArch = &v
	return s
}

func (s *QueryApptechstackrelationRequest) SetCreationTimeFrom(v string) *QueryApptechstackrelationRequest {
	s.CreationTimeFrom = &v
	return s
}

func (s *QueryApptechstackrelationRequest) SetCreationTimeTo(v string) *QueryApptechstackrelationRequest {
	s.CreationTimeTo = &v
	return s
}

func (s *QueryApptechstackrelationRequest) SetCurrentPage(v int64) *QueryApptechstackrelationRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryApptechstackrelationRequest) SetDescend(v string) *QueryApptechstackrelationRequest {
	s.Descend = &v
	return s
}

func (s *QueryApptechstackrelationRequest) SetIds(v []*int64) *QueryApptechstackrelationRequest {
	s.Ids = v
	return s
}

func (s *QueryApptechstackrelationRequest) SetIsProcessed(v bool) *QueryApptechstackrelationRequest {
	s.IsProcessed = &v
	return s
}

func (s *QueryApptechstackrelationRequest) SetModificationTimeFrom(v string) *QueryApptechstackrelationRequest {
	s.ModificationTimeFrom = &v
	return s
}

func (s *QueryApptechstackrelationRequest) SetModificationTimeTo(v string) *QueryApptechstackrelationRequest {
	s.ModificationTimeTo = &v
	return s
}

func (s *QueryApptechstackrelationRequest) SetPageSize(v int64) *QueryApptechstackrelationRequest {
	s.PageSize = &v
	return s
}

func (s *QueryApptechstackrelationRequest) SetSortField(v string) *QueryApptechstackrelationRequest {
	s.SortField = &v
	return s
}

func (s *QueryApptechstackrelationRequest) SetStartIndex(v int64) *QueryApptechstackrelationRequest {
	s.StartIndex = &v
	return s
}

func (s *QueryApptechstackrelationRequest) SetTechstackIdentities(v string) *QueryApptechstackrelationRequest {
	s.TechstackIdentities = &v
	return s
}

func (s *QueryApptechstackrelationRequest) SetTechstackIds(v []*int64) *QueryApptechstackrelationRequest {
	s.TechstackIds = v
	return s
}

type QueryApptechstackrelationResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app_techstack_relations
	AppTechstackRelations []*AppTechstackRelation `json:"app_techstack_relations,omitempty" xml:"app_techstack_relations,omitempty" type:"Repeated"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryApptechstackrelationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryApptechstackrelationResponse) GoString() string {
	return s.String()
}

func (s *QueryApptechstackrelationResponse) SetReqMsgId(v string) *QueryApptechstackrelationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryApptechstackrelationResponse) SetResultCode(v string) *QueryApptechstackrelationResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryApptechstackrelationResponse) SetResultMsg(v string) *QueryApptechstackrelationResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryApptechstackrelationResponse) SetAppTechstackRelations(v []*AppTechstackRelation) *QueryApptechstackrelationResponse {
	s.AppTechstackRelations = v
	return s
}

func (s *QueryApptechstackrelationResponse) SetCurrentPage(v int64) *QueryApptechstackrelationResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryApptechstackrelationResponse) SetPageSize(v int64) *QueryApptechstackrelationResponse {
	s.PageSize = &v
	return s
}

func (s *QueryApptechstackrelationResponse) SetTotalCount(v int64) *QueryApptechstackrelationResponse {
	s.TotalCount = &v
	return s
}

type UpdateApptechstackrelationRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// buildpackArch
	BuildpackArch *string `json:"buildpack_arch,omitempty" xml:"buildpack_arch,omitempty"`
	// creationTime
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// extraInfo
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// modificationTime
	ModificationTime *string `json:"modification_time,omitempty" xml:"modification_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// techstackId
	TechstackId *int64 `json:"techstack_id,omitempty" xml:"techstack_id,omitempty"`
	// techstackIdentity
	TechstackIdentity *string `json:"techstack_identity,omitempty" xml:"techstack_identity,omitempty"`
	// techstackName
	TechstackName *string `json:"techstack_name,omitempty" xml:"techstack_name,omitempty"`
}

func (s UpdateApptechstackrelationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateApptechstackrelationRequest) GoString() string {
	return s.String()
}

func (s *UpdateApptechstackrelationRequest) SetAuthToken(v string) *UpdateApptechstackrelationRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateApptechstackrelationRequest) SetAppId(v string) *UpdateApptechstackrelationRequest {
	s.AppId = &v
	return s
}

func (s *UpdateApptechstackrelationRequest) SetBuildpackArch(v string) *UpdateApptechstackrelationRequest {
	s.BuildpackArch = &v
	return s
}

func (s *UpdateApptechstackrelationRequest) SetCreationTime(v string) *UpdateApptechstackrelationRequest {
	s.CreationTime = &v
	return s
}

func (s *UpdateApptechstackrelationRequest) SetExtraInfo(v string) *UpdateApptechstackrelationRequest {
	s.ExtraInfo = &v
	return s
}

func (s *UpdateApptechstackrelationRequest) SetId(v string) *UpdateApptechstackrelationRequest {
	s.Id = &v
	return s
}

func (s *UpdateApptechstackrelationRequest) SetModificationTime(v string) *UpdateApptechstackrelationRequest {
	s.ModificationTime = &v
	return s
}

func (s *UpdateApptechstackrelationRequest) SetTechstackId(v int64) *UpdateApptechstackrelationRequest {
	s.TechstackId = &v
	return s
}

func (s *UpdateApptechstackrelationRequest) SetTechstackIdentity(v string) *UpdateApptechstackrelationRequest {
	s.TechstackIdentity = &v
	return s
}

func (s *UpdateApptechstackrelationRequest) SetTechstackName(v string) *UpdateApptechstackrelationRequest {
	s.TechstackName = &v
	return s
}

type UpdateApptechstackrelationResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateApptechstackrelationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateApptechstackrelationResponse) GoString() string {
	return s.String()
}

func (s *UpdateApptechstackrelationResponse) SetReqMsgId(v string) *UpdateApptechstackrelationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateApptechstackrelationResponse) SetResultCode(v string) *UpdateApptechstackrelationResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateApptechstackrelationResponse) SetResultMsg(v string) *UpdateApptechstackrelationResponse {
	s.ResultMsg = &v
	return s
}

type CreateAppRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用所属分组，至于应用所属分组的级别需要后端根据分组名称计算出来
	AppgroupName *string `json:"appgroup_name,omitempty" xml:"appgroup_name,omitempty"`
	// 应用描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// 应用名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 用户登录名
	OwnerLoginName *string `json:"owner_login_name,omitempty" xml:"owner_login_name,omitempty"`
	// 技术栈 id
	StackId *string `json:"stack_id,omitempty" xml:"stack_id,omitempty"`
	// 应用额外信息（应用标签）
	Tags []*Tag `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	// 技术栈版本
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
}

func (s CreateAppRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAppRequest) GoString() string {
	return s.String()
}

func (s *CreateAppRequest) SetAuthToken(v string) *CreateAppRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAppRequest) SetAppgroupName(v string) *CreateAppRequest {
	s.AppgroupName = &v
	return s
}

func (s *CreateAppRequest) SetDescription(v string) *CreateAppRequest {
	s.Description = &v
	return s
}

func (s *CreateAppRequest) SetDisplayName(v string) *CreateAppRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateAppRequest) SetName(v string) *CreateAppRequest {
	s.Name = &v
	return s
}

func (s *CreateAppRequest) SetOwnerLoginName(v string) *CreateAppRequest {
	s.OwnerLoginName = &v
	return s
}

func (s *CreateAppRequest) SetStackId(v string) *CreateAppRequest {
	s.StackId = &v
	return s
}

func (s *CreateAppRequest) SetTags(v []*Tag) *CreateAppRequest {
	s.Tags = v
	return s
}

func (s *CreateAppRequest) SetBuildpackVersion(v string) *CreateAppRequest {
	s.BuildpackVersion = &v
	return s
}

type CreateAppResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建的应用 id
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateAppResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAppResponse) GoString() string {
	return s.String()
}

func (s *CreateAppResponse) SetReqMsgId(v string) *CreateAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAppResponse) SetResultCode(v string) *CreateAppResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAppResponse) SetResultMsg(v string) *CreateAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAppResponse) SetData(v string) *CreateAppResponse {
	s.Data = &v
	return s
}

type CreateAppGroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用依赖规划
	AppScheme []*AppDepend `json:"app_scheme,omitempty" xml:"app_scheme,omitempty" type:"Repeated"`
	// 应用分组描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 应用分组名称，支持中文
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 应用分组负责人登录名
	OwnerLoginName *string `json:"owner_login_name,omitempty" xml:"owner_login_name,omitempty"`
	// 父应用分组 id
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
}

func (s CreateAppGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAppGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateAppGroupRequest) SetAuthToken(v string) *CreateAppGroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAppGroupRequest) SetAppScheme(v []*AppDepend) *CreateAppGroupRequest {
	s.AppScheme = v
	return s
}

func (s *CreateAppGroupRequest) SetDescription(v string) *CreateAppGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateAppGroupRequest) SetName(v string) *CreateAppGroupRequest {
	s.Name = &v
	return s
}

func (s *CreateAppGroupRequest) SetOwnerLoginName(v string) *CreateAppGroupRequest {
	s.OwnerLoginName = &v
	return s
}

func (s *CreateAppGroupRequest) SetParentId(v string) *CreateAppGroupRequest {
	s.ParentId = &v
	return s
}

type CreateAppGroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建的应用分组名称
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateAppGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAppGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateAppGroupResponse) SetReqMsgId(v string) *CreateAppGroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAppGroupResponse) SetResultCode(v string) *CreateAppGroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAppGroupResponse) SetResultMsg(v string) *CreateAppGroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAppGroupResponse) SetData(v string) *CreateAppGroupResponse {
	s.Data = &v
	return s
}

type GetAppRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 待查询的应用名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetAppRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppRequest) GoString() string {
	return s.String()
}

func (s *GetAppRequest) SetAuthToken(v string) *GetAppRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAppRequest) SetName(v string) *GetAppRequest {
	s.Name = &v
	return s
}

type GetAppResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用基本信息
	Data *App `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetAppResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppResponse) GoString() string {
	return s.String()
}

func (s *GetAppResponse) SetReqMsgId(v string) *GetAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppResponse) SetResultCode(v string) *GetAppResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppResponse) SetResultMsg(v string) *GetAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppResponse) SetData(v *App) *GetAppResponse {
	s.Data = v
	return s
}

type CountAppServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
}

func (s CountAppServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CountAppServiceRequest) GoString() string {
	return s.String()
}

func (s *CountAppServiceRequest) SetAuthToken(v string) *CountAppServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *CountAppServiceRequest) SetAppName(v string) *CountAppServiceRequest {
	s.AppName = &v
	return s
}

type CountAppServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用服务计数
	Data *AppServiceCount `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CountAppServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CountAppServiceResponse) GoString() string {
	return s.String()
}

func (s *CountAppServiceResponse) SetReqMsgId(v string) *CountAppServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CountAppServiceResponse) SetResultCode(v string) *CountAppServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *CountAppServiceResponse) SetResultMsg(v string) *CountAppServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CountAppServiceResponse) SetData(v *AppServiceCount) *CountAppServiceResponse {
	s.Data = v
	return s
}

type AllAppDeployviewRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
}

func (s AllAppDeployviewRequest) String() string {
	return tea.Prettify(s)
}

func (s AllAppDeployviewRequest) GoString() string {
	return s.String()
}

func (s *AllAppDeployviewRequest) SetAuthToken(v string) *AllAppDeployviewRequest {
	s.AuthToken = &v
	return s
}

func (s *AllAppDeployviewRequest) SetAppName(v string) *AllAppDeployviewRequest {
	s.AppName = &v
	return s
}

type AllAppDeployviewResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 所有 workspace 的部署图/拓扑图
	Data []*DeployView `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s AllAppDeployviewResponse) String() string {
	return tea.Prettify(s)
}

func (s AllAppDeployviewResponse) GoString() string {
	return s.String()
}

func (s *AllAppDeployviewResponse) SetReqMsgId(v string) *AllAppDeployviewResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllAppDeployviewResponse) SetResultCode(v string) *AllAppDeployviewResponse {
	s.ResultCode = &v
	return s
}

func (s *AllAppDeployviewResponse) SetResultMsg(v string) *AllAppDeployviewResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllAppDeployviewResponse) SetData(v []*DeployView) *AllAppDeployviewResponse {
	s.Data = v
	return s
}

type QueryAppRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 根据应用分组查询，为空默认查询所有应用分组
	AppGroupName *string `json:"app_group_name,omitempty" xml:"app_group_name,omitempty"`
	// 根据应用名称查询，为空默认查询所有应用
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 排序规则数组，默认为 UTC_CREATED_DESC，即 根据创建时间降序排序
	Orders []*string `json:"orders,omitempty" xml:"orders,omitempty" type:"Repeated"`
	// 当前页码，从1开始，默认为1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认为10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询类型，支持精准查询、模糊查询、前缀模糊查询，这里默认为模糊查询；查询类型针对字段 app_name, app_group_name
	QueryType *string `json:"query_type,omitempty" xml:"query_type,omitempty"`
}

func (s QueryAppRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppRequest) GoString() string {
	return s.String()
}

func (s *QueryAppRequest) SetAuthToken(v string) *QueryAppRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppRequest) SetAppGroupName(v string) *QueryAppRequest {
	s.AppGroupName = &v
	return s
}

func (s *QueryAppRequest) SetAppName(v string) *QueryAppRequest {
	s.AppName = &v
	return s
}

func (s *QueryAppRequest) SetOrders(v []*string) *QueryAppRequest {
	s.Orders = v
	return s
}

func (s *QueryAppRequest) SetPageNum(v int64) *QueryAppRequest {
	s.PageNum = &v
	return s
}

func (s *QueryAppRequest) SetPageSize(v int64) *QueryAppRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAppRequest) SetQueryType(v string) *QueryAppRequest {
	s.QueryType = &v
	return s
}

type QueryAppResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询到的应用列表，包含每个应用的分组信息
	Data []*App `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 当前页
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 记录总数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s QueryAppResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppResponse) GoString() string {
	return s.String()
}

func (s *QueryAppResponse) SetReqMsgId(v string) *QueryAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppResponse) SetResultCode(v string) *QueryAppResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppResponse) SetResultMsg(v string) *QueryAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppResponse) SetData(v []*App) *QueryAppResponse {
	s.Data = v
	return s
}

func (s *QueryAppResponse) SetPageNum(v int64) *QueryAppResponse {
	s.PageNum = &v
	return s
}

func (s *QueryAppResponse) SetPageSize(v int64) *QueryAppResponse {
	s.PageSize = &v
	return s
}

func (s *QueryAppResponse) SetTotal(v int64) *QueryAppResponse {
	s.Total = &v
	return s
}

type GetAppGroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用分组名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetAppGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppGroupRequest) GoString() string {
	return s.String()
}

func (s *GetAppGroupRequest) SetAuthToken(v string) *GetAppGroupRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAppGroupRequest) SetName(v string) *GetAppGroupRequest {
	s.Name = &v
	return s
}

type GetAppGroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用分组
	Data *AppGroup `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetAppGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppGroupResponse) GoString() string {
	return s.String()
}

func (s *GetAppGroupResponse) SetReqMsgId(v string) *GetAppGroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppGroupResponse) SetResultCode(v string) *GetAppGroupResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppGroupResponse) SetResultMsg(v string) *GetAppGroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppGroupResponse) SetData(v *AppGroup) *GetAppGroupResponse {
	s.Data = v
	return s
}

type QueryAppGroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 根据应用分组名称查询
	AppGroupName *string `json:"app_group_name,omitempty" xml:"app_group_name,omitempty"`
	// 根据应用分组层级进行筛选
	Layer *int64 `json:"layer,omitempty" xml:"layer,omitempty"`
	// 排序规则数组，默认为 UTC_CREATED_DESC，即 根据创建时间降序排序
	Orders []*string `json:"orders,omitempty" xml:"orders,omitempty" type:"Repeated"`
	// 根据应用分组负责人登录名查询
	OwnerLoginName *string `json:"owner_login_name,omitempty" xml:"owner_login_name,omitempty"`
	// 当前页码，从1开始，默认为1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认为10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询类型，支持精准查询、模糊查询、前缀模糊查询，这里默认为模糊查询；查询类型针对字段, app_group_name, owner_login_name
	QueryType *string `json:"query_type,omitempty" xml:"query_type,omitempty"`
}

func (s QueryAppGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppGroupRequest) GoString() string {
	return s.String()
}

func (s *QueryAppGroupRequest) SetAuthToken(v string) *QueryAppGroupRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppGroupRequest) SetAppGroupName(v string) *QueryAppGroupRequest {
	s.AppGroupName = &v
	return s
}

func (s *QueryAppGroupRequest) SetLayer(v int64) *QueryAppGroupRequest {
	s.Layer = &v
	return s
}

func (s *QueryAppGroupRequest) SetOrders(v []*string) *QueryAppGroupRequest {
	s.Orders = v
	return s
}

func (s *QueryAppGroupRequest) SetOwnerLoginName(v string) *QueryAppGroupRequest {
	s.OwnerLoginName = &v
	return s
}

func (s *QueryAppGroupRequest) SetPageNum(v int64) *QueryAppGroupRequest {
	s.PageNum = &v
	return s
}

func (s *QueryAppGroupRequest) SetPageSize(v int64) *QueryAppGroupRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAppGroupRequest) SetQueryType(v string) *QueryAppGroupRequest {
	s.QueryType = &v
	return s
}

type QueryAppGroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询到的应用列表，包含每个应用的分组信息
	Data []*AppGroup `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 当前页
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 记录总数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s QueryAppGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppGroupResponse) GoString() string {
	return s.String()
}

func (s *QueryAppGroupResponse) SetReqMsgId(v string) *QueryAppGroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppGroupResponse) SetResultCode(v string) *QueryAppGroupResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppGroupResponse) SetResultMsg(v string) *QueryAppGroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppGroupResponse) SetData(v []*AppGroup) *QueryAppGroupResponse {
	s.Data = v
	return s
}

func (s *QueryAppGroupResponse) SetPageNum(v int64) *QueryAppGroupResponse {
	s.PageNum = &v
	return s
}

func (s *QueryAppGroupResponse) SetPageSize(v int64) *QueryAppGroupResponse {
	s.PageSize = &v
	return s
}

func (s *QueryAppGroupResponse) SetTotal(v int64) *QueryAppGroupResponse {
	s.Total = &v
	return s
}

type QueryAppServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 根据应用名称查询，不能为空，不支持一次性查询所有应用
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 排序规则数组，默认为 UTC_CREATED_DESC，即 根据创建时间降序排序
	Orders []*string `json:"orders,omitempty" xml:"orders,omitempty" type:"Repeated"`
	// 当前页码，从1开始，默认为1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认为10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 工作空间列表
	WorkspaceIds []*string `json:"workspace_ids,omitempty" xml:"workspace_ids,omitempty" type:"Repeated"`
}

func (s QueryAppServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppServiceRequest) GoString() string {
	return s.String()
}

func (s *QueryAppServiceRequest) SetAuthToken(v string) *QueryAppServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppServiceRequest) SetAppName(v string) *QueryAppServiceRequest {
	s.AppName = &v
	return s
}

func (s *QueryAppServiceRequest) SetOrders(v []*string) *QueryAppServiceRequest {
	s.Orders = v
	return s
}

func (s *QueryAppServiceRequest) SetPageNum(v int64) *QueryAppServiceRequest {
	s.PageNum = &v
	return s
}

func (s *QueryAppServiceRequest) SetPageSize(v int64) *QueryAppServiceRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAppServiceRequest) SetWorkspaceIds(v []*string) *QueryAppServiceRequest {
	s.WorkspaceIds = v
	return s
}

type QueryAppServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用服务实例列表，每个应用服务实例包含 slb、ecs、db 等信息
	Data []*AppServiceEntity `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 当前页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s QueryAppServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppServiceResponse) GoString() string {
	return s.String()
}

func (s *QueryAppServiceResponse) SetReqMsgId(v string) *QueryAppServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppServiceResponse) SetResultCode(v string) *QueryAppServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppServiceResponse) SetResultMsg(v string) *QueryAppServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppServiceResponse) SetData(v []*AppServiceEntity) *QueryAppServiceResponse {
	s.Data = v
	return s
}

func (s *QueryAppServiceResponse) SetPageNum(v int64) *QueryAppServiceResponse {
	s.PageNum = &v
	return s
}

func (s *QueryAppServiceResponse) SetPageSize(v int64) *QueryAppServiceResponse {
	s.PageSize = &v
	return s
}

func (s *QueryAppServiceResponse) SetTotal(v int64) *QueryAppServiceResponse {
	s.Total = &v
	return s
}

type CreateAppFavouriteRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 用户要收藏的应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 用户登录名
	OwnerLoginName *string `json:"owner_login_name,omitempty" xml:"owner_login_name,omitempty"`
}

func (s CreateAppFavouriteRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAppFavouriteRequest) GoString() string {
	return s.String()
}

func (s *CreateAppFavouriteRequest) SetAuthToken(v string) *CreateAppFavouriteRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAppFavouriteRequest) SetAppName(v string) *CreateAppFavouriteRequest {
	s.AppName = &v
	return s
}

func (s *CreateAppFavouriteRequest) SetOwnerLoginName(v string) *CreateAppFavouriteRequest {
	s.OwnerLoginName = &v
	return s
}

type CreateAppFavouriteResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 收藏成功的记录id
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateAppFavouriteResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAppFavouriteResponse) GoString() string {
	return s.String()
}

func (s *CreateAppFavouriteResponse) SetReqMsgId(v string) *CreateAppFavouriteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAppFavouriteResponse) SetResultCode(v string) *CreateAppFavouriteResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAppFavouriteResponse) SetResultMsg(v string) *CreateAppFavouriteResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAppFavouriteResponse) SetData(v string) *CreateAppFavouriteResponse {
	s.Data = &v
	return s
}

type DeleteAppFavouriteRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 用户要取消收藏的应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 用户登录名
	OwnerLoginName *string `json:"owner_login_name,omitempty" xml:"owner_login_name,omitempty"`
}

func (s DeleteAppFavouriteRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppFavouriteRequest) GoString() string {
	return s.String()
}

func (s *DeleteAppFavouriteRequest) SetAuthToken(v string) *DeleteAppFavouriteRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteAppFavouriteRequest) SetAppName(v string) *DeleteAppFavouriteRequest {
	s.AppName = &v
	return s
}

func (s *DeleteAppFavouriteRequest) SetOwnerLoginName(v string) *DeleteAppFavouriteRequest {
	s.OwnerLoginName = &v
	return s
}

type DeleteAppFavouriteResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否取消收藏成功
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteAppFavouriteResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppFavouriteResponse) GoString() string {
	return s.String()
}

func (s *DeleteAppFavouriteResponse) SetReqMsgId(v string) *DeleteAppFavouriteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteAppFavouriteResponse) SetResultCode(v string) *DeleteAppFavouriteResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteAppFavouriteResponse) SetResultMsg(v string) *DeleteAppFavouriteResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteAppFavouriteResponse) SetData(v bool) *DeleteAppFavouriteResponse {
	s.Data = &v
	return s
}

type UpdateAppRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用所属分组，至于应用所属分组的级别需要后端根据分组名称计算出来
	AppgroupName *string `json:"appgroup_name,omitempty" xml:"appgroup_name,omitempty"`
	// 技术栈版本
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
	// 应用描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// 应用名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 应用额外信息（应用标签）
	Tags []*Tag `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
}

func (s UpdateAppRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppRequest) GoString() string {
	return s.String()
}

func (s *UpdateAppRequest) SetAuthToken(v string) *UpdateAppRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateAppRequest) SetAppgroupName(v string) *UpdateAppRequest {
	s.AppgroupName = &v
	return s
}

func (s *UpdateAppRequest) SetBuildpackVersion(v string) *UpdateAppRequest {
	s.BuildpackVersion = &v
	return s
}

func (s *UpdateAppRequest) SetDescription(v string) *UpdateAppRequest {
	s.Description = &v
	return s
}

func (s *UpdateAppRequest) SetDisplayName(v string) *UpdateAppRequest {
	s.DisplayName = &v
	return s
}

func (s *UpdateAppRequest) SetName(v string) *UpdateAppRequest {
	s.Name = &v
	return s
}

func (s *UpdateAppRequest) SetTags(v []*Tag) *UpdateAppRequest {
	s.Tags = v
	return s
}

type UpdateAppResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否更新成功
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s UpdateAppResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppResponse) GoString() string {
	return s.String()
}

func (s *UpdateAppResponse) SetReqMsgId(v string) *UpdateAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateAppResponse) SetResultCode(v string) *UpdateAppResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateAppResponse) SetResultMsg(v string) *UpdateAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateAppResponse) SetData(v bool) *UpdateAppResponse {
	s.Data = &v
	return s
}

type UpdateAppGroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用依赖拓扑图
	AppScheme []*AppDepend `json:"app_scheme,omitempty" xml:"app_scheme,omitempty" type:"Repeated"`
	// 应用分组描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 应用分组名称，支持中文
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 父应用分组 id
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
}

func (s UpdateAppGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateAppGroupRequest) SetAuthToken(v string) *UpdateAppGroupRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateAppGroupRequest) SetAppScheme(v []*AppDepend) *UpdateAppGroupRequest {
	s.AppScheme = v
	return s
}

func (s *UpdateAppGroupRequest) SetDescription(v string) *UpdateAppGroupRequest {
	s.Description = &v
	return s
}

func (s *UpdateAppGroupRequest) SetName(v string) *UpdateAppGroupRequest {
	s.Name = &v
	return s
}

func (s *UpdateAppGroupRequest) SetParentId(v string) *UpdateAppGroupRequest {
	s.ParentId = &v
	return s
}

type UpdateAppGroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否更新成功
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s UpdateAppGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateAppGroupResponse) SetReqMsgId(v string) *UpdateAppGroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateAppGroupResponse) SetResultCode(v string) *UpdateAppGroupResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateAppGroupResponse) SetResultMsg(v string) *UpdateAppGroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateAppGroupResponse) SetData(v bool) *UpdateAppGroupResponse {
	s.Data = &v
	return s
}

type ListAppFavouriteRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 排序规则数组，默认为 UTC_CREATED_DESC，即 根据创建时间降序排序
	Orders []*string `json:"orders,omitempty" xml:"orders,omitempty" type:"Repeated"`
}

func (s ListAppFavouriteRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppFavouriteRequest) GoString() string {
	return s.String()
}

func (s *ListAppFavouriteRequest) SetAuthToken(v string) *ListAppFavouriteRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppFavouriteRequest) SetOrders(v []*string) *ListAppFavouriteRequest {
	s.Orders = v
	return s
}

type ListAppFavouriteResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前用户收藏的所有应用
	Data []*App `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListAppFavouriteResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppFavouriteResponse) GoString() string {
	return s.String()
}

func (s *ListAppFavouriteResponse) SetReqMsgId(v string) *ListAppFavouriteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppFavouriteResponse) SetResultCode(v string) *ListAppFavouriteResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppFavouriteResponse) SetResultMsg(v string) *ListAppFavouriteResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppFavouriteResponse) SetData(v []*App) *ListAppFavouriteResponse {
	s.Data = v
	return s
}

type DeleteAppRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 要删除的应用名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s DeleteAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppRequest) GoString() string {
	return s.String()
}

func (s *DeleteAppRequest) SetAuthToken(v string) *DeleteAppRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteAppRequest) SetName(v string) *DeleteAppRequest {
	s.Name = &v
	return s
}

type DeleteAppResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否删除成功
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppResponse) GoString() string {
	return s.String()
}

func (s *DeleteAppResponse) SetReqMsgId(v string) *DeleteAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteAppResponse) SetResultCode(v string) *DeleteAppResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteAppResponse) SetResultMsg(v string) *DeleteAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteAppResponse) SetData(v bool) *DeleteAppResponse {
	s.Data = &v
	return s
}

type DeleteAppGroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 要删除的应用分组名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s DeleteAppGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteAppGroupRequest) SetAuthToken(v string) *DeleteAppGroupRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteAppGroupRequest) SetName(v string) *DeleteAppGroupRequest {
	s.Name = &v
	return s
}

type DeleteAppGroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否删除成功
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteAppGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteAppGroupResponse) SetReqMsgId(v string) *DeleteAppGroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteAppGroupResponse) SetResultCode(v string) *DeleteAppGroupResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteAppGroupResponse) SetResultMsg(v string) *DeleteAppGroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteAppGroupResponse) SetData(v bool) *DeleteAppGroupResponse {
	s.Data = &v
	return s
}

type QueryAppPlanRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 排序规则数组，默认为 UTC_CREATED_DESC，即 根据创建时间降序排序
	Orders []*string `json:"orders,omitempty" xml:"orders,omitempty" type:"Repeated"`
	// 发布单 order_id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 当前页码，从1开始，默认为1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认为10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 状态筛选列表
	StateList []*string `json:"state_list,omitempty" xml:"state_list,omitempty" type:"Repeated"`
	// 工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// 工作空间 id 列表
	WorkspaceIds []*string `json:"workspace_ids,omitempty" xml:"workspace_ids,omitempty" type:"Repeated"`
}

func (s QueryAppPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppPlanRequest) GoString() string {
	return s.String()
}

func (s *QueryAppPlanRequest) SetAuthToken(v string) *QueryAppPlanRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppPlanRequest) SetAppName(v string) *QueryAppPlanRequest {
	s.AppName = &v
	return s
}

func (s *QueryAppPlanRequest) SetOrders(v []*string) *QueryAppPlanRequest {
	s.Orders = v
	return s
}

func (s *QueryAppPlanRequest) SetOrderId(v string) *QueryAppPlanRequest {
	s.OrderId = &v
	return s
}

func (s *QueryAppPlanRequest) SetPageNum(v int64) *QueryAppPlanRequest {
	s.PageNum = &v
	return s
}

func (s *QueryAppPlanRequest) SetPageSize(v int64) *QueryAppPlanRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAppPlanRequest) SetStateList(v []*string) *QueryAppPlanRequest {
	s.StateList = v
	return s
}

func (s *QueryAppPlanRequest) SetWorkspace(v string) *QueryAppPlanRequest {
	s.Workspace = &v
	return s
}

func (s *QueryAppPlanRequest) SetWorkspaceIds(v []*string) *QueryAppPlanRequest {
	s.WorkspaceIds = v
	return s
}

type QueryAppPlanResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询到的发布单列表
	Data []*OpsPlan `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 当前分页，默认为1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认为10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询总数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s QueryAppPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppPlanResponse) GoString() string {
	return s.String()
}

func (s *QueryAppPlanResponse) SetReqMsgId(v string) *QueryAppPlanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppPlanResponse) SetResultCode(v string) *QueryAppPlanResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppPlanResponse) SetResultMsg(v string) *QueryAppPlanResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppPlanResponse) SetData(v []*OpsPlan) *QueryAppPlanResponse {
	s.Data = v
	return s
}

func (s *QueryAppPlanResponse) SetPageNum(v int64) *QueryAppPlanResponse {
	s.PageNum = &v
	return s
}

func (s *QueryAppPlanResponse) SetPageSize(v int64) *QueryAppPlanResponse {
	s.PageSize = &v
	return s
}

func (s *QueryAppPlanResponse) SetTotal(v int64) *QueryAppPlanResponse {
	s.Total = &v
	return s
}

type ExistAppGroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用分组名称
	AppgroupName *string `json:"appgroup_name,omitempty" xml:"appgroup_name,omitempty"`
}

func (s ExistAppGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ExistAppGroupRequest) GoString() string {
	return s.String()
}

func (s *ExistAppGroupRequest) SetAuthToken(v string) *ExistAppGroupRequest {
	s.AuthToken = &v
	return s
}

func (s *ExistAppGroupRequest) SetAppgroupName(v string) *ExistAppGroupRequest {
	s.AppgroupName = &v
	return s
}

type ExistAppGroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否存在
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ExistAppGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ExistAppGroupResponse) GoString() string {
	return s.String()
}

func (s *ExistAppGroupResponse) SetReqMsgId(v string) *ExistAppGroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExistAppGroupResponse) SetResultCode(v string) *ExistAppGroupResponse {
	s.ResultCode = &v
	return s
}

func (s *ExistAppGroupResponse) SetResultMsg(v string) *ExistAppGroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExistAppGroupResponse) SetData(v bool) *ExistAppGroupResponse {
	s.Data = &v
	return s
}

type QueryUserRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 没传递该参数时，返回当前登录用户信息
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty"`
}

func (s QueryUserRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUserRequest) GoString() string {
	return s.String()
}

func (s *QueryUserRequest) SetAuthToken(v string) *QueryUserRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUserRequest) SetLoginName(v string) *QueryUserRequest {
	s.LoginName = &v
	return s
}

type QueryUserResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户信息
	Data *UserDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryUserResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUserResponse) GoString() string {
	return s.String()
}

func (s *QueryUserResponse) SetReqMsgId(v string) *QueryUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUserResponse) SetResultCode(v string) *QueryUserResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUserResponse) SetResultMsg(v string) *QueryUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUserResponse) SetData(v *UserDTO) *QueryUserResponse {
	s.Data = v
	return s
}

type ExistAppRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
}

func (s ExistAppRequest) String() string {
	return tea.Prettify(s)
}

func (s ExistAppRequest) GoString() string {
	return s.String()
}

func (s *ExistAppRequest) SetAuthToken(v string) *ExistAppRequest {
	s.AuthToken = &v
	return s
}

func (s *ExistAppRequest) SetAppName(v string) *ExistAppRequest {
	s.AppName = &v
	return s
}

type ExistAppResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否存在
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ExistAppResponse) String() string {
	return tea.Prettify(s)
}

func (s ExistAppResponse) GoString() string {
	return s.String()
}

func (s *ExistAppResponse) SetReqMsgId(v string) *ExistAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExistAppResponse) SetResultCode(v string) *ExistAppResponse {
	s.ResultCode = &v
	return s
}

func (s *ExistAppResponse) SetResultMsg(v string) *ExistAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExistAppResponse) SetData(v bool) *ExistAppResponse {
	s.Data = &v
	return s
}

type GetApplicationBuildpackRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 应用服务的名称
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty"`
	// 环境
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetApplicationBuildpackRequest) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationBuildpackRequest) GoString() string {
	return s.String()
}

func (s *GetApplicationBuildpackRequest) SetAuthToken(v string) *GetApplicationBuildpackRequest {
	s.AuthToken = &v
	return s
}

func (s *GetApplicationBuildpackRequest) SetApplicationName(v string) *GetApplicationBuildpackRequest {
	s.ApplicationName = &v
	return s
}

func (s *GetApplicationBuildpackRequest) SetServiceName(v string) *GetApplicationBuildpackRequest {
	s.ServiceName = &v
	return s
}

func (s *GetApplicationBuildpackRequest) SetWorkspace(v string) *GetApplicationBuildpackRequest {
	s.Workspace = &v
	return s
}

type GetApplicationBuildpackResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 技术栈id
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
}

func (s GetApplicationBuildpackResponse) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationBuildpackResponse) GoString() string {
	return s.String()
}

func (s *GetApplicationBuildpackResponse) SetReqMsgId(v string) *GetApplicationBuildpackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetApplicationBuildpackResponse) SetResultCode(v string) *GetApplicationBuildpackResponse {
	s.ResultCode = &v
	return s
}

func (s *GetApplicationBuildpackResponse) SetResultMsg(v string) *GetApplicationBuildpackResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetApplicationBuildpackResponse) SetBuildpackId(v string) *GetApplicationBuildpackResponse {
	s.BuildpackId = &v
	return s
}

type GetApplicationTechstackRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
}

func (s GetApplicationTechstackRequest) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationTechstackRequest) GoString() string {
	return s.String()
}

func (s *GetApplicationTechstackRequest) SetAuthToken(v string) *GetApplicationTechstackRequest {
	s.AuthToken = &v
	return s
}

func (s *GetApplicationTechstackRequest) SetApplicationName(v string) *GetApplicationTechstackRequest {
	s.ApplicationName = &v
	return s
}

type GetApplicationTechstackResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 技术栈框架
	Techstack *Techstack `json:"techstack,omitempty" xml:"techstack,omitempty"`
}

func (s GetApplicationTechstackResponse) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationTechstackResponse) GoString() string {
	return s.String()
}

func (s *GetApplicationTechstackResponse) SetReqMsgId(v string) *GetApplicationTechstackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetApplicationTechstackResponse) SetResultCode(v string) *GetApplicationTechstackResponse {
	s.ResultCode = &v
	return s
}

func (s *GetApplicationTechstackResponse) SetResultMsg(v string) *GetApplicationTechstackResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetApplicationTechstackResponse) SetTechstack(v *Techstack) *GetApplicationTechstackResponse {
	s.Techstack = v
	return s
}

type GetBuildpackRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 技术栈版本的ID
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
}

func (s GetBuildpackRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBuildpackRequest) GoString() string {
	return s.String()
}

func (s *GetBuildpackRequest) SetAuthToken(v string) *GetBuildpackRequest {
	s.AuthToken = &v
	return s
}

func (s *GetBuildpackRequest) SetBuildpackId(v string) *GetBuildpackRequest {
	s.BuildpackId = &v
	return s
}

type GetBuildpackResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// buildpackParams
	BuildpackParams []*BuildpackParamTemplate `json:"buildpack_params,omitempty" xml:"buildpack_params,omitempty" type:"Repeated"`
	// contactInfo
	ContactInfo *string `json:"contact_info,omitempty" xml:"contact_info,omitempty"`
	// creatorId
	CreatorId *string `json:"creator_id,omitempty" xml:"creator_id,omitempty"`
	// debugMode
	DebugMode *bool `json:"debug_mode,omitempty" xml:"debug_mode,omitempty"`
	// depracationNote
	DepracationNote *string `json:"depracation_note,omitempty" xml:"depracation_note,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// fullVersion
	FullVersion *string `json:"full_version,omitempty" xml:"full_version,omitempty"`
	// publicationTime
	PublicationTime *string `json:"publication_time,omitempty" xml:"publication_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// publisherId
	PublisherId *string `json:"publisher_id,omitempty" xml:"publisher_id,omitempty"`
	// scope
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// sharedTenants
	SharedTenants []*string `json:"shared_tenants,omitempty" xml:"shared_tenants,omitempty" type:"Repeated"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// supportedOs
	SupportedOs []*BuildpackOS `json:"supported_os,omitempty" xml:"supported_os,omitempty" type:"Repeated"`
	// supportedRegions
	SupportedRegions []*string `json:"supported_regions,omitempty" xml:"supported_regions,omitempty" type:"Repeated"`
	// techstackId
	TechstackId *string `json:"techstack_id,omitempty" xml:"techstack_id,omitempty"`
}

func (s GetBuildpackResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBuildpackResponse) GoString() string {
	return s.String()
}

func (s *GetBuildpackResponse) SetReqMsgId(v string) *GetBuildpackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetBuildpackResponse) SetResultCode(v string) *GetBuildpackResponse {
	s.ResultCode = &v
	return s
}

func (s *GetBuildpackResponse) SetResultMsg(v string) *GetBuildpackResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetBuildpackResponse) SetBuildpackParams(v []*BuildpackParamTemplate) *GetBuildpackResponse {
	s.BuildpackParams = v
	return s
}

func (s *GetBuildpackResponse) SetContactInfo(v string) *GetBuildpackResponse {
	s.ContactInfo = &v
	return s
}

func (s *GetBuildpackResponse) SetCreatorId(v string) *GetBuildpackResponse {
	s.CreatorId = &v
	return s
}

func (s *GetBuildpackResponse) SetDebugMode(v bool) *GetBuildpackResponse {
	s.DebugMode = &v
	return s
}

func (s *GetBuildpackResponse) SetDepracationNote(v string) *GetBuildpackResponse {
	s.DepracationNote = &v
	return s
}

func (s *GetBuildpackResponse) SetDescription(v string) *GetBuildpackResponse {
	s.Description = &v
	return s
}

func (s *GetBuildpackResponse) SetFullVersion(v string) *GetBuildpackResponse {
	s.FullVersion = &v
	return s
}

func (s *GetBuildpackResponse) SetPublicationTime(v string) *GetBuildpackResponse {
	s.PublicationTime = &v
	return s
}

func (s *GetBuildpackResponse) SetPublisherId(v string) *GetBuildpackResponse {
	s.PublisherId = &v
	return s
}

func (s *GetBuildpackResponse) SetScope(v string) *GetBuildpackResponse {
	s.Scope = &v
	return s
}

func (s *GetBuildpackResponse) SetSharedTenants(v []*string) *GetBuildpackResponse {
	s.SharedTenants = v
	return s
}

func (s *GetBuildpackResponse) SetStatus(v string) *GetBuildpackResponse {
	s.Status = &v
	return s
}

func (s *GetBuildpackResponse) SetSupportedOs(v []*BuildpackOS) *GetBuildpackResponse {
	s.SupportedOs = v
	return s
}

func (s *GetBuildpackResponse) SetSupportedRegions(v []*string) *GetBuildpackResponse {
	s.SupportedRegions = v
	return s
}

func (s *GetBuildpackResponse) SetTechstackId(v string) *GetBuildpackResponse {
	s.TechstackId = &v
	return s
}

type ListTechstackRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s ListTechstackRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTechstackRequest) GoString() string {
	return s.String()
}

func (s *ListTechstackRequest) SetAuthToken(v string) *ListTechstackRequest {
	s.AuthToken = &v
	return s
}

type ListTechstackResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 技术栈列表
	Techstacks []*Techstack `json:"techstacks,omitempty" xml:"techstacks,omitempty" type:"Repeated"`
}

func (s ListTechstackResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTechstackResponse) GoString() string {
	return s.String()
}

func (s *ListTechstackResponse) SetReqMsgId(v string) *ListTechstackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListTechstackResponse) SetResultCode(v string) *ListTechstackResponse {
	s.ResultCode = &v
	return s
}

func (s *ListTechstackResponse) SetResultMsg(v string) *ListTechstackResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListTechstackResponse) SetTechstacks(v []*Techstack) *ListTechstackResponse {
	s.Techstacks = v
	return s
}

type QueryBuildpackRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 当前页码
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 技术栈版本号
	FullVersion *string `json:"full_version,omitempty" xml:"full_version,omitempty"`
	// 每页的大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 开始时间
	PublicationTimeFrom *string `json:"publication_time_from,omitempty" xml:"publication_time_from,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 截至时间
	PublicationTimeTo *string `json:"publication_time_to,omitempty" xml:"publication_time_to,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 技术栈提供方所在域
	Scopes []*string `json:"scopes,omitempty" xml:"scopes,omitempty" type:"Repeated"`
	// 技术栈版本状态
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// 支持的操作系统ID列表
	SupportedOsIds []*int64 `json:"supported_os_ids,omitempty" xml:"supported_os_ids,omitempty" type:"Repeated"`
	// 支持的地域名称列表
	SupportedRegions []*string `json:"supported_regions,omitempty" xml:"supported_regions,omitempty" type:"Repeated"`
	// 技术栈ID列表
	TechstackIds []*int64 `json:"techstack_ids,omitempty" xml:"techstack_ids,omitempty" type:"Repeated"`
	// 技术栈名称
	TechstackNames []*string `json:"techstack_names,omitempty" xml:"techstack_names,omitempty" type:"Repeated"`
	// creatorIds
	CreatorIds []*string `json:"creator_ids,omitempty" xml:"creator_ids,omitempty" type:"Repeated"`
}

func (s QueryBuildpackRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackRequest) SetAuthToken(v string) *QueryBuildpackRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBuildpackRequest) SetCurrentPage(v int64) *QueryBuildpackRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryBuildpackRequest) SetFullVersion(v string) *QueryBuildpackRequest {
	s.FullVersion = &v
	return s
}

func (s *QueryBuildpackRequest) SetPageSize(v int64) *QueryBuildpackRequest {
	s.PageSize = &v
	return s
}

func (s *QueryBuildpackRequest) SetPublicationTimeFrom(v string) *QueryBuildpackRequest {
	s.PublicationTimeFrom = &v
	return s
}

func (s *QueryBuildpackRequest) SetPublicationTimeTo(v string) *QueryBuildpackRequest {
	s.PublicationTimeTo = &v
	return s
}

func (s *QueryBuildpackRequest) SetScopes(v []*string) *QueryBuildpackRequest {
	s.Scopes = v
	return s
}

func (s *QueryBuildpackRequest) SetStatuses(v []*string) *QueryBuildpackRequest {
	s.Statuses = v
	return s
}

func (s *QueryBuildpackRequest) SetSupportedOsIds(v []*int64) *QueryBuildpackRequest {
	s.SupportedOsIds = v
	return s
}

func (s *QueryBuildpackRequest) SetSupportedRegions(v []*string) *QueryBuildpackRequest {
	s.SupportedRegions = v
	return s
}

func (s *QueryBuildpackRequest) SetTechstackIds(v []*int64) *QueryBuildpackRequest {
	s.TechstackIds = v
	return s
}

func (s *QueryBuildpackRequest) SetTechstackNames(v []*string) *QueryBuildpackRequest {
	s.TechstackNames = v
	return s
}

func (s *QueryBuildpackRequest) SetCreatorIds(v []*string) *QueryBuildpackRequest {
	s.CreatorIds = v
	return s
}

type QueryBuildpackResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 符合条件的技术栈列表
	Buildpacks []*BuildpackDetail `json:"buildpacks,omitempty" xml:"buildpacks,omitempty" type:"Repeated"`
	// 当前页码
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 每页的大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总数量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryBuildpackResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackResponse) SetReqMsgId(v string) *QueryBuildpackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackResponse) SetResultCode(v string) *QueryBuildpackResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackResponse) SetResultMsg(v string) *QueryBuildpackResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackResponse) SetBuildpacks(v []*BuildpackDetail) *QueryBuildpackResponse {
	s.Buildpacks = v
	return s
}

func (s *QueryBuildpackResponse) SetCurrentPage(v int64) *QueryBuildpackResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryBuildpackResponse) SetPageSize(v int64) *QueryBuildpackResponse {
	s.PageSize = &v
	return s
}

func (s *QueryBuildpackResponse) SetTotalCount(v int64) *QueryBuildpackResponse {
	s.TotalCount = &v
	return s
}

type CreateBuildpackRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 技术栈所支持的租户名称列表
	AvailableTenantNames []*string `json:"available_tenant_names,omitempty" xml:"available_tenant_names,omitempty" type:"Repeated"`
	// 技术栈的编译打包命令
	BuildCommand *string `json:"build_command,omitempty" xml:"build_command,omitempty"`
	// 分享给其他租户时留下的联系信息
	ContactInfo *string `json:"contact_info,omitempty" xml:"contact_info,omitempty"`
	// 当前技术栈是否是debug模式
	DebugMode *bool `json:"debug_mode,omitempty" xml:"debug_mode,omitempty"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 环境变量
	EnvParams []*BuildpackParamTemplate `json:"env_params,omitempty" xml:"env_params,omitempty" type:"Repeated"`
	// 技术栈的版本号
	FullVersion *string `json:"full_version,omitempty" xml:"full_version,omitempty"`
	// 主版本号
	MajorVersion *int64 `json:"major_version,omitempty" xml:"major_version,omitempty"`
	// 次版本号
	MinorVersion *int64 `json:"minor_version,omitempty" xml:"minor_version,omitempty"`
	// 补丁版本号
	PatchVersion *int64 `json:"patch_version,omitempty" xml:"patch_version,omitempty"`
	// 技术栈的作用域，可以是SYSTEM或者CUSTOM
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 支持的操作系统ID
	SupportedOs []*int64 `json:"supported_os,omitempty" xml:"supported_os,omitempty" type:"Repeated"`
	// 技术栈支持的地域信息
	SupportedRegions []*BuildpackRegionRelation `json:"supported_regions,omitempty" xml:"supported_regions,omitempty" type:"Repeated"`
	// 技术栈大类的id
	TechstackId *int64 `json:"techstack_id,omitempty" xml:"techstack_id,omitempty"`
}

func (s CreateBuildpackRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBuildpackRequest) GoString() string {
	return s.String()
}

func (s *CreateBuildpackRequest) SetAuthToken(v string) *CreateBuildpackRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBuildpackRequest) SetAvailableTenantNames(v []*string) *CreateBuildpackRequest {
	s.AvailableTenantNames = v
	return s
}

func (s *CreateBuildpackRequest) SetBuildCommand(v string) *CreateBuildpackRequest {
	s.BuildCommand = &v
	return s
}

func (s *CreateBuildpackRequest) SetContactInfo(v string) *CreateBuildpackRequest {
	s.ContactInfo = &v
	return s
}

func (s *CreateBuildpackRequest) SetDebugMode(v bool) *CreateBuildpackRequest {
	s.DebugMode = &v
	return s
}

func (s *CreateBuildpackRequest) SetDescription(v string) *CreateBuildpackRequest {
	s.Description = &v
	return s
}

func (s *CreateBuildpackRequest) SetEnvParams(v []*BuildpackParamTemplate) *CreateBuildpackRequest {
	s.EnvParams = v
	return s
}

func (s *CreateBuildpackRequest) SetFullVersion(v string) *CreateBuildpackRequest {
	s.FullVersion = &v
	return s
}

func (s *CreateBuildpackRequest) SetMajorVersion(v int64) *CreateBuildpackRequest {
	s.MajorVersion = &v
	return s
}

func (s *CreateBuildpackRequest) SetMinorVersion(v int64) *CreateBuildpackRequest {
	s.MinorVersion = &v
	return s
}

func (s *CreateBuildpackRequest) SetPatchVersion(v int64) *CreateBuildpackRequest {
	s.PatchVersion = &v
	return s
}

func (s *CreateBuildpackRequest) SetScope(v string) *CreateBuildpackRequest {
	s.Scope = &v
	return s
}

func (s *CreateBuildpackRequest) SetSupportedOs(v []*int64) *CreateBuildpackRequest {
	s.SupportedOs = v
	return s
}

func (s *CreateBuildpackRequest) SetSupportedRegions(v []*BuildpackRegionRelation) *CreateBuildpackRequest {
	s.SupportedRegions = v
	return s
}

func (s *CreateBuildpackRequest) SetTechstackId(v int64) *CreateBuildpackRequest {
	s.TechstackId = &v
	return s
}

type CreateBuildpackResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建完成的技术栈ID
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// 技术栈包上传地址信息
	UploadEndpoints []*UploadEndpoint `json:"upload_endpoints,omitempty" xml:"upload_endpoints,omitempty" type:"Repeated"`
}

func (s CreateBuildpackResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBuildpackResponse) GoString() string {
	return s.String()
}

func (s *CreateBuildpackResponse) SetReqMsgId(v string) *CreateBuildpackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBuildpackResponse) SetResultCode(v string) *CreateBuildpackResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBuildpackResponse) SetResultMsg(v string) *CreateBuildpackResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBuildpackResponse) SetBuildpackId(v string) *CreateBuildpackResponse {
	s.BuildpackId = &v
	return s
}

func (s *CreateBuildpackResponse) SetUploadEndpoints(v []*UploadEndpoint) *CreateBuildpackResponse {
	s.UploadEndpoints = v
	return s
}

type UploadfinishBuildpackRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 技术栈的ID
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// supportedRegions
	SupportedRegions []*BuildpackRegionRelation `json:"supported_regions,omitempty" xml:"supported_regions,omitempty" type:"Repeated"`
}

func (s UploadfinishBuildpackRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadfinishBuildpackRequest) GoString() string {
	return s.String()
}

func (s *UploadfinishBuildpackRequest) SetAuthToken(v string) *UploadfinishBuildpackRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadfinishBuildpackRequest) SetBuildpackId(v string) *UploadfinishBuildpackRequest {
	s.BuildpackId = &v
	return s
}

func (s *UploadfinishBuildpackRequest) SetSupportedRegions(v []*BuildpackRegionRelation) *UploadfinishBuildpackRequest {
	s.SupportedRegions = v
	return s
}

type UploadfinishBuildpackResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UploadfinishBuildpackResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadfinishBuildpackResponse) GoString() string {
	return s.String()
}

func (s *UploadfinishBuildpackResponse) SetReqMsgId(v string) *UploadfinishBuildpackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadfinishBuildpackResponse) SetResultCode(v string) *UploadfinishBuildpackResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadfinishBuildpackResponse) SetResultMsg(v string) *UploadfinishBuildpackResponse {
	s.ResultMsg = &v
	return s
}

type PublishBuildpackRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// buildpackId
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
}

func (s PublishBuildpackRequest) String() string {
	return tea.Prettify(s)
}

func (s PublishBuildpackRequest) GoString() string {
	return s.String()
}

func (s *PublishBuildpackRequest) SetAuthToken(v string) *PublishBuildpackRequest {
	s.AuthToken = &v
	return s
}

func (s *PublishBuildpackRequest) SetBuildpackId(v string) *PublishBuildpackRequest {
	s.BuildpackId = &v
	return s
}

type PublishBuildpackResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s PublishBuildpackResponse) String() string {
	return tea.Prettify(s)
}

func (s PublishBuildpackResponse) GoString() string {
	return s.String()
}

func (s *PublishBuildpackResponse) SetReqMsgId(v string) *PublishBuildpackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PublishBuildpackResponse) SetResultCode(v string) *PublishBuildpackResponse {
	s.ResultCode = &v
	return s
}

func (s *PublishBuildpackResponse) SetResultMsg(v string) *PublishBuildpackResponse {
	s.ResultMsg = &v
	return s
}

type UpdateBuildpackRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 技术栈的编译打包命令
	BuildCommand *string `json:"build_command,omitempty" xml:"build_command,omitempty"`
	// 分享给其他租户时留下的联系信息
	ContactInfo *string `json:"contact_info,omitempty" xml:"contact_info,omitempty"`
	// 当前技术栈是否是debug模式
	DebugMode *bool `json:"debug_mode,omitempty" xml:"debug_mode,omitempty"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 环境变量
	EnvParams []*BuildpackParamTemplate `json:"env_params,omitempty" xml:"env_params,omitempty" type:"Repeated"`
	// 技术栈版本号
	FullVersion *string `json:"full_version,omitempty" xml:"full_version,omitempty"`
	// 技术栈id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 支持的操作系统ID
	SupportedOs []*int64 `json:"supported_os,omitempty" xml:"supported_os,omitempty" type:"Repeated"`
}

func (s UpdateBuildpackRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuildpackRequest) GoString() string {
	return s.String()
}

func (s *UpdateBuildpackRequest) SetAuthToken(v string) *UpdateBuildpackRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateBuildpackRequest) SetBuildCommand(v string) *UpdateBuildpackRequest {
	s.BuildCommand = &v
	return s
}

func (s *UpdateBuildpackRequest) SetContactInfo(v string) *UpdateBuildpackRequest {
	s.ContactInfo = &v
	return s
}

func (s *UpdateBuildpackRequest) SetDebugMode(v bool) *UpdateBuildpackRequest {
	s.DebugMode = &v
	return s
}

func (s *UpdateBuildpackRequest) SetDescription(v string) *UpdateBuildpackRequest {
	s.Description = &v
	return s
}

func (s *UpdateBuildpackRequest) SetEnvParams(v []*BuildpackParamTemplate) *UpdateBuildpackRequest {
	s.EnvParams = v
	return s
}

func (s *UpdateBuildpackRequest) SetFullVersion(v string) *UpdateBuildpackRequest {
	s.FullVersion = &v
	return s
}

func (s *UpdateBuildpackRequest) SetId(v string) *UpdateBuildpackRequest {
	s.Id = &v
	return s
}

func (s *UpdateBuildpackRequest) SetSupportedOs(v []*int64) *UpdateBuildpackRequest {
	s.SupportedOs = v
	return s
}

type UpdateBuildpackResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateBuildpackResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuildpackResponse) GoString() string {
	return s.String()
}

func (s *UpdateBuildpackResponse) SetReqMsgId(v string) *UpdateBuildpackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateBuildpackResponse) SetResultCode(v string) *UpdateBuildpackResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateBuildpackResponse) SetResultMsg(v string) *UpdateBuildpackResponse {
	s.ResultMsg = &v
	return s
}

type QueryBuildpackFindbynamesRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// techstackNames
	TechstackNames []*string `json:"techstack_names,omitempty" xml:"techstack_names,omitempty" type:"Repeated"`
}

func (s QueryBuildpackFindbynamesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindbynamesRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindbynamesRequest) SetAuthToken(v string) *QueryBuildpackFindbynamesRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBuildpackFindbynamesRequest) SetTechstackNames(v []*string) *QueryBuildpackFindbynamesRequest {
	s.TechstackNames = v
	return s
}

type QueryBuildpackFindbynamesResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// techstack对象的json串
	Techstack []*Techstack `json:"techstack,omitempty" xml:"techstack,omitempty" type:"Repeated"`
}

func (s QueryBuildpackFindbynamesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindbynamesResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindbynamesResponse) SetReqMsgId(v string) *QueryBuildpackFindbynamesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackFindbynamesResponse) SetResultCode(v string) *QueryBuildpackFindbynamesResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackFindbynamesResponse) SetResultMsg(v string) *QueryBuildpackFindbynamesResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackFindbynamesResponse) SetTechstack(v []*Techstack) *QueryBuildpackFindbynamesResponse {
	s.Techstack = v
	return s
}

type CountBuildpackRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// buildpackId
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
}

func (s CountBuildpackRequest) String() string {
	return tea.Prettify(s)
}

func (s CountBuildpackRequest) GoString() string {
	return s.String()
}

func (s *CountBuildpackRequest) SetAuthToken(v string) *CountBuildpackRequest {
	s.AuthToken = &v
	return s
}

func (s *CountBuildpackRequest) SetBuildpackId(v string) *CountBuildpackRequest {
	s.BuildpackId = &v
	return s
}

type CountBuildpackResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// count值
	Count *int64 `json:"count,omitempty" xml:"count,omitempty"`
}

func (s CountBuildpackResponse) String() string {
	return tea.Prettify(s)
}

func (s CountBuildpackResponse) GoString() string {
	return s.String()
}

func (s *CountBuildpackResponse) SetReqMsgId(v string) *CountBuildpackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CountBuildpackResponse) SetResultCode(v string) *CountBuildpackResponse {
	s.ResultCode = &v
	return s
}

func (s *CountBuildpackResponse) SetResultMsg(v string) *CountBuildpackResponse {
	s.ResultMsg = &v
	return s
}

func (s *CountBuildpackResponse) SetCount(v int64) *CountBuildpackResponse {
	s.Count = &v
	return s
}

type DeprecateBuildpackRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// depracationNoteMap
	DepracationNoteMap *DepracationNotePayload `json:"depracation_note_map,omitempty" xml:"depracation_note_map,omitempty"`
	// ids
	Id []*string `json:"id,omitempty" xml:"id,omitempty" type:"Repeated"`
}

func (s DeprecateBuildpackRequest) String() string {
	return tea.Prettify(s)
}

func (s DeprecateBuildpackRequest) GoString() string {
	return s.String()
}

func (s *DeprecateBuildpackRequest) SetAuthToken(v string) *DeprecateBuildpackRequest {
	s.AuthToken = &v
	return s
}

func (s *DeprecateBuildpackRequest) SetDepracationNoteMap(v *DepracationNotePayload) *DeprecateBuildpackRequest {
	s.DepracationNoteMap = v
	return s
}

func (s *DeprecateBuildpackRequest) SetId(v []*string) *DeprecateBuildpackRequest {
	s.Id = v
	return s
}

type DeprecateBuildpackResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *int64 `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeprecateBuildpackResponse) String() string {
	return tea.Prettify(s)
}

func (s DeprecateBuildpackResponse) GoString() string {
	return s.String()
}

func (s *DeprecateBuildpackResponse) SetReqMsgId(v string) *DeprecateBuildpackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeprecateBuildpackResponse) SetResultCode(v string) *DeprecateBuildpackResponse {
	s.ResultCode = &v
	return s
}

func (s *DeprecateBuildpackResponse) SetResultMsg(v string) *DeprecateBuildpackResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeprecateBuildpackResponse) SetResult(v int64) *DeprecateBuildpackResponse {
	s.Result = &v
	return s
}

type BatchdeleteBuildpackRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// ids
	Id []*string `json:"id,omitempty" xml:"id,omitempty" type:"Repeated"`
}

func (s BatchdeleteBuildpackRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteBuildpackRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteBuildpackRequest) SetAuthToken(v string) *BatchdeleteBuildpackRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteBuildpackRequest) SetId(v []*string) *BatchdeleteBuildpackRequest {
	s.Id = v
	return s
}

type BatchdeleteBuildpackResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// BuildpackDetailVO
	BuildpackDetailVo []*BuildpackDetailVO `json:"buildpack_detail_vo,omitempty" xml:"buildpack_detail_vo,omitempty" type:"Repeated"`
}

func (s BatchdeleteBuildpackResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteBuildpackResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteBuildpackResponse) SetReqMsgId(v string) *BatchdeleteBuildpackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteBuildpackResponse) SetResultCode(v string) *BatchdeleteBuildpackResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteBuildpackResponse) SetResultMsg(v string) *BatchdeleteBuildpackResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchdeleteBuildpackResponse) SetBuildpackDetailVo(v []*BuildpackDetailVO) *BatchdeleteBuildpackResponse {
	s.BuildpackDetailVo = v
	return s
}

type ExistBuildpackRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// buildpackId
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// fullVersion
	FullVersion *string `json:"full_version,omitempty" xml:"full_version,omitempty"`
	// techstackId
	TechstackId *int64 `json:"techstack_id,omitempty" xml:"techstack_id,omitempty"`
}

func (s ExistBuildpackRequest) String() string {
	return tea.Prettify(s)
}

func (s ExistBuildpackRequest) GoString() string {
	return s.String()
}

func (s *ExistBuildpackRequest) SetAuthToken(v string) *ExistBuildpackRequest {
	s.AuthToken = &v
	return s
}

func (s *ExistBuildpackRequest) SetBuildpackId(v string) *ExistBuildpackRequest {
	s.BuildpackId = &v
	return s
}

func (s *ExistBuildpackRequest) SetFullVersion(v string) *ExistBuildpackRequest {
	s.FullVersion = &v
	return s
}

func (s *ExistBuildpackRequest) SetTechstackId(v int64) *ExistBuildpackRequest {
	s.TechstackId = &v
	return s
}

type ExistBuildpackResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ExistBuildpackResponse) String() string {
	return tea.Prettify(s)
}

func (s ExistBuildpackResponse) GoString() string {
	return s.String()
}

func (s *ExistBuildpackResponse) SetReqMsgId(v string) *ExistBuildpackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExistBuildpackResponse) SetResultCode(v string) *ExistBuildpackResponse {
	s.ResultCode = &v
	return s
}

func (s *ExistBuildpackResponse) SetResultMsg(v string) *ExistBuildpackResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExistBuildpackResponse) SetResult(v bool) *ExistBuildpackResponse {
	s.Result = &v
	return s
}

type UpdateBuildpackUpdatepackagesstatusRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// buildpackId
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// newFileStatus
	NewFileStatus *string `json:"new_file_status,omitempty" xml:"new_file_status,omitempty"`
	// originalFileStatus
	OriginalFileStatus *string `json:"original_file_status,omitempty" xml:"original_file_status,omitempty"`
	// regionIds
	RegionNum []*string `json:"region_num,omitempty" xml:"region_num,omitempty" type:"Repeated"`
}

func (s UpdateBuildpackUpdatepackagesstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuildpackUpdatepackagesstatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateBuildpackUpdatepackagesstatusRequest) SetAuthToken(v string) *UpdateBuildpackUpdatepackagesstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateBuildpackUpdatepackagesstatusRequest) SetId(v string) *UpdateBuildpackUpdatepackagesstatusRequest {
	s.Id = &v
	return s
}

func (s *UpdateBuildpackUpdatepackagesstatusRequest) SetNewFileStatus(v string) *UpdateBuildpackUpdatepackagesstatusRequest {
	s.NewFileStatus = &v
	return s
}

func (s *UpdateBuildpackUpdatepackagesstatusRequest) SetOriginalFileStatus(v string) *UpdateBuildpackUpdatepackagesstatusRequest {
	s.OriginalFileStatus = &v
	return s
}

func (s *UpdateBuildpackUpdatepackagesstatusRequest) SetRegionNum(v []*string) *UpdateBuildpackUpdatepackagesstatusRequest {
	s.RegionNum = v
	return s
}

type UpdateBuildpackUpdatepackagesstatusResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *int64 `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateBuildpackUpdatepackagesstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuildpackUpdatepackagesstatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateBuildpackUpdatepackagesstatusResponse) SetReqMsgId(v string) *UpdateBuildpackUpdatepackagesstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateBuildpackUpdatepackagesstatusResponse) SetResultCode(v string) *UpdateBuildpackUpdatepackagesstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateBuildpackUpdatepackagesstatusResponse) SetResultMsg(v string) *UpdateBuildpackUpdatepackagesstatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateBuildpackUpdatepackagesstatusResponse) SetResult(v int64) *UpdateBuildpackUpdatepackagesstatusResponse {
	s.Result = &v
	return s
}

type QueryBuildpackFindidversionpairsbyversionRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// fullVersion
	FullVersion *string `json:"full_version,omitempty" xml:"full_version,omitempty"`
	// statuses
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// techstackId
	TechstackId *int64 `json:"techstack_id,omitempty" xml:"techstack_id,omitempty"`
}

func (s QueryBuildpackFindidversionpairsbyversionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindidversionpairsbyversionRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindidversionpairsbyversionRequest) SetAuthToken(v string) *QueryBuildpackFindidversionpairsbyversionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBuildpackFindidversionpairsbyversionRequest) SetFullVersion(v string) *QueryBuildpackFindidversionpairsbyversionRequest {
	s.FullVersion = &v
	return s
}

func (s *QueryBuildpackFindidversionpairsbyversionRequest) SetStatuses(v []*string) *QueryBuildpackFindidversionpairsbyversionRequest {
	s.Statuses = v
	return s
}

func (s *QueryBuildpackFindidversionpairsbyversionRequest) SetTechstackId(v int64) *QueryBuildpackFindidversionpairsbyversionRequest {
	s.TechstackId = &v
	return s
}

type QueryBuildpackFindidversionpairsbyversionResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// buildpack_composite_v_os
	BuildpackCompositeVOs []*BuildpackCompositeVO `json:"buildpack_composite_v_os,omitempty" xml:"buildpack_composite_v_os,omitempty" type:"Repeated"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryBuildpackFindidversionpairsbyversionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindidversionpairsbyversionResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindidversionpairsbyversionResponse) SetReqMsgId(v string) *QueryBuildpackFindidversionpairsbyversionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackFindidversionpairsbyversionResponse) SetResultCode(v string) *QueryBuildpackFindidversionpairsbyversionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackFindidversionpairsbyversionResponse) SetResultMsg(v string) *QueryBuildpackFindidversionpairsbyversionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackFindidversionpairsbyversionResponse) SetBuildpackCompositeVOs(v []*BuildpackCompositeVO) *QueryBuildpackFindidversionpairsbyversionResponse {
	s.BuildpackCompositeVOs = v
	return s
}

func (s *QueryBuildpackFindidversionpairsbyversionResponse) SetCurrentPage(v int64) *QueryBuildpackFindidversionpairsbyversionResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryBuildpackFindidversionpairsbyversionResponse) SetPageSize(v int64) *QueryBuildpackFindidversionpairsbyversionResponse {
	s.PageSize = &v
	return s
}

func (s *QueryBuildpackFindidversionpairsbyversionResponse) SetTotalCount(v int64) *QueryBuildpackFindidversionpairsbyversionResponse {
	s.TotalCount = &v
	return s
}

type QueryBuildpackGroupbytechstackRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s QueryBuildpackGroupbytechstackRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackGroupbytechstackRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackGroupbytechstackRequest) SetAuthToken(v string) *QueryBuildpackGroupbytechstackRequest {
	s.AuthToken = &v
	return s
}

type QueryBuildpackGroupbytechstackResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// count
	Count []*TechstackBuildpackCount `json:"count,omitempty" xml:"count,omitempty" type:"Repeated"`
}

func (s QueryBuildpackGroupbytechstackResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackGroupbytechstackResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackGroupbytechstackResponse) SetReqMsgId(v string) *QueryBuildpackGroupbytechstackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackGroupbytechstackResponse) SetResultCode(v string) *QueryBuildpackGroupbytechstackResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackGroupbytechstackResponse) SetResultMsg(v string) *QueryBuildpackGroupbytechstackResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackGroupbytechstackResponse) SetCount(v []*TechstackBuildpackCount) *QueryBuildpackGroupbytechstackResponse {
	s.Count = v
	return s
}

type QueryBuildpackFindvisibletechstacksRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s QueryBuildpackFindvisibletechstacksRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindvisibletechstacksRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindvisibletechstacksRequest) SetAuthToken(v string) *QueryBuildpackFindvisibletechstacksRequest {
	s.AuthToken = &v
	return s
}

type QueryBuildpackFindvisibletechstacksResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Techstack
	Techstack []*Techstack `json:"techstack,omitempty" xml:"techstack,omitempty" type:"Repeated"`
}

func (s QueryBuildpackFindvisibletechstacksResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindvisibletechstacksResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindvisibletechstacksResponse) SetReqMsgId(v string) *QueryBuildpackFindvisibletechstacksResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackFindvisibletechstacksResponse) SetResultCode(v string) *QueryBuildpackFindvisibletechstacksResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackFindvisibletechstacksResponse) SetResultMsg(v string) *QueryBuildpackFindvisibletechstacksResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackFindvisibletechstacksResponse) SetTechstack(v []*Techstack) *QueryBuildpackFindvisibletechstacksResponse {
	s.Techstack = v
	return s
}

type QueryBuildpackFindwritabletechstacksRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s QueryBuildpackFindwritabletechstacksRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindwritabletechstacksRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindwritabletechstacksRequest) SetAuthToken(v string) *QueryBuildpackFindwritabletechstacksRequest {
	s.AuthToken = &v
	return s
}

type QueryBuildpackFindwritabletechstacksResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Techstack
	Techstack []*Techstack `json:"techstack,omitempty" xml:"techstack,omitempty" type:"Repeated"`
}

func (s QueryBuildpackFindwritabletechstacksResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindwritabletechstacksResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindwritabletechstacksResponse) SetReqMsgId(v string) *QueryBuildpackFindwritabletechstacksResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackFindwritabletechstacksResponse) SetResultCode(v string) *QueryBuildpackFindwritabletechstacksResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackFindwritabletechstacksResponse) SetResultMsg(v string) *QueryBuildpackFindwritabletechstacksResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackFindwritabletechstacksResponse) SetTechstack(v []*Techstack) *QueryBuildpackFindwritabletechstacksResponse {
	s.Techstack = v
	return s
}

type QueryBuildpackFindosbycurrentcloudRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s QueryBuildpackFindosbycurrentcloudRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindosbycurrentcloudRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindosbycurrentcloudRequest) SetAuthToken(v string) *QueryBuildpackFindosbycurrentcloudRequest {
	s.AuthToken = &v
	return s
}

type QueryBuildpackFindosbycurrentcloudResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// BuildpackOS
	BuildpackOs []*BuildpackOS `json:"buildpack_os,omitempty" xml:"buildpack_os,omitempty" type:"Repeated"`
}

func (s QueryBuildpackFindosbycurrentcloudResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindosbycurrentcloudResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindosbycurrentcloudResponse) SetReqMsgId(v string) *QueryBuildpackFindosbycurrentcloudResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackFindosbycurrentcloudResponse) SetResultCode(v string) *QueryBuildpackFindosbycurrentcloudResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackFindosbycurrentcloudResponse) SetResultMsg(v string) *QueryBuildpackFindosbycurrentcloudResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackFindosbycurrentcloudResponse) SetBuildpackOs(v []*BuildpackOS) *QueryBuildpackFindosbycurrentcloudResponse {
	s.BuildpackOs = v
	return s
}

type QueryBuildpackFindbyappsvRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// appIds
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s QueryBuildpackFindbyappsvRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindbyappsvRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindbyappsvRequest) SetAuthToken(v string) *QueryBuildpackFindbyappsvRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBuildpackFindbyappsvRequest) SetAppIds(v []*string) *QueryBuildpackFindbyappsvRequest {
	s.AppIds = v
	return s
}

func (s *QueryBuildpackFindbyappsvRequest) SetWorkspaceId(v string) *QueryBuildpackFindbyappsvRequest {
	s.WorkspaceId = &v
	return s
}

type QueryBuildpackFindbyappsvResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 包含Buildpack对象的json串
	Buildpack *string `json:"buildpack,omitempty" xml:"buildpack,omitempty"`
}

func (s QueryBuildpackFindbyappsvResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindbyappsvResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindbyappsvResponse) SetReqMsgId(v string) *QueryBuildpackFindbyappsvResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackFindbyappsvResponse) SetResultCode(v string) *QueryBuildpackFindbyappsvResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackFindbyappsvResponse) SetResultMsg(v string) *QueryBuildpackFindbyappsvResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackFindbyappsvResponse) SetBuildpack(v string) *QueryBuildpackFindbyappsvResponse {
	s.Buildpack = &v
	return s
}

type QueryBuildpackFindbyappsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// appIds
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s QueryBuildpackFindbyappsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindbyappsRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindbyappsRequest) SetAuthToken(v string) *QueryBuildpackFindbyappsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBuildpackFindbyappsRequest) SetAppIds(v []*string) *QueryBuildpackFindbyappsRequest {
	s.AppIds = v
	return s
}

func (s *QueryBuildpackFindbyappsRequest) SetWorkspaceId(v string) *QueryBuildpackFindbyappsRequest {
	s.WorkspaceId = &v
	return s
}

type QueryBuildpackFindbyappsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 包含BuildpackV2Adapter对象的json字符串
	Buildpackv2adapter *string `json:"buildpackv2adapter,omitempty" xml:"buildpackv2adapter,omitempty"`
}

func (s QueryBuildpackFindbyappsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindbyappsResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindbyappsResponse) SetReqMsgId(v string) *QueryBuildpackFindbyappsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackFindbyappsResponse) SetResultCode(v string) *QueryBuildpackFindbyappsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackFindbyappsResponse) SetResultMsg(v string) *QueryBuildpackFindbyappsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackFindbyappsResponse) SetBuildpackv2adapter(v string) *QueryBuildpackFindbyappsResponse {
	s.Buildpackv2adapter = &v
	return s
}

type QueryBuildpackFindbyappservicesRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// appServiceIds
	AppServiceIds []*string `json:"app_service_ids,omitempty" xml:"app_service_ids,omitempty" type:"Repeated"`
}

func (s QueryBuildpackFindbyappservicesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindbyappservicesRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindbyappservicesRequest) SetAuthToken(v string) *QueryBuildpackFindbyappservicesRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBuildpackFindbyappservicesRequest) SetAppServiceIds(v []*string) *QueryBuildpackFindbyappservicesRequest {
	s.AppServiceIds = v
	return s
}

type QueryBuildpackFindbyappservicesResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 包含BuildpackV2Adapter对象的json串
	BuildpackV2Adapter *string `json:"buildpack_v2_adapter,omitempty" xml:"buildpack_v2_adapter,omitempty"`
}

func (s QueryBuildpackFindbyappservicesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindbyappservicesResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindbyappservicesResponse) SetReqMsgId(v string) *QueryBuildpackFindbyappservicesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackFindbyappservicesResponse) SetResultCode(v string) *QueryBuildpackFindbyappservicesResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackFindbyappservicesResponse) SetResultMsg(v string) *QueryBuildpackFindbyappservicesResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackFindbyappservicesResponse) SetBuildpackV2Adapter(v string) *QueryBuildpackFindbyappservicesResponse {
	s.BuildpackV2Adapter = &v
	return s
}

type QueryBuildpackFindbyappvRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s QueryBuildpackFindbyappvRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindbyappvRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindbyappvRequest) SetAuthToken(v string) *QueryBuildpackFindbyappvRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBuildpackFindbyappvRequest) SetAppId(v string) *QueryBuildpackFindbyappvRequest {
	s.AppId = &v
	return s
}

func (s *QueryBuildpackFindbyappvRequest) SetWorkspaceId(v string) *QueryBuildpackFindbyappvRequest {
	s.WorkspaceId = &v
	return s
}

type QueryBuildpackFindbyappvResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Buildpack
	Buildpack *BuildpackByAppV `json:"buildpack,omitempty" xml:"buildpack,omitempty"`
}

func (s QueryBuildpackFindbyappvResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindbyappvResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindbyappvResponse) SetReqMsgId(v string) *QueryBuildpackFindbyappvResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackFindbyappvResponse) SetResultCode(v string) *QueryBuildpackFindbyappvResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackFindbyappvResponse) SetResultMsg(v string) *QueryBuildpackFindbyappvResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackFindbyappvResponse) SetBuildpack(v *BuildpackByAppV) *QueryBuildpackFindbyappvResponse {
	s.Buildpack = v
	return s
}

type QueryBuildpackFindbyappRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s QueryBuildpackFindbyappRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindbyappRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindbyappRequest) SetAuthToken(v string) *QueryBuildpackFindbyappRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBuildpackFindbyappRequest) SetAppId(v string) *QueryBuildpackFindbyappRequest {
	s.AppId = &v
	return s
}

func (s *QueryBuildpackFindbyappRequest) SetWorkspaceId(v string) *QueryBuildpackFindbyappRequest {
	s.WorkspaceId = &v
	return s
}

type QueryBuildpackFindbyappResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// bgEnable
	BgEnable *bool `json:"bg_enable,omitempty" xml:"bg_enable,omitempty"`
	// buildpackArch
	BuildpackArch *string `json:"buildpack_arch,omitempty" xml:"buildpack_arch,omitempty"`
	// buildScriptId
	BuildScriptId *string `json:"build_script_id,omitempty" xml:"build_script_id,omitempty"`
	// commandId
	CommandId *string `json:"command_id,omitempty" xml:"command_id,omitempty"`
	// componentId
	ComponentId *string `json:"component_id,omitempty" xml:"component_id,omitempty"`
	// configId
	ConfigId *string `json:"config_id,omitempty" xml:"config_id,omitempty"`
	// creator
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// customerIds
	CustomerIds []*string `json:"customer_ids,omitempty" xml:"customer_ids,omitempty" type:"Repeated"`
	// deployScriptId
	DeployScriptId *string `json:"deploy_script_id,omitempty" xml:"deploy_script_id,omitempty"`
	// des
	Des *string `json:"des,omitempty" xml:"des,omitempty"`
	// fullVersion
	FullVersion *string `json:"full_version,omitempty" xml:"full_version,omitempty"`
	// gmtCreate
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// gmtModified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// supportedOS
	SupportedOS []*BuildpackOS `json:"supported_o_s,omitempty" xml:"supported_o_s,omitempty" type:"Repeated"`
	// supportedRegions
	SupportedRegions []*BuildpackRegionRelationDetail `json:"supported_regions,omitempty" xml:"supported_regions,omitempty" type:"Repeated"`
	// techstack
	Techstack *Techstack `json:"techstack,omitempty" xml:"techstack,omitempty"`
	// tenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// utcCreate
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// utcModified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// version
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
}

func (s QueryBuildpackFindbyappResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindbyappResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindbyappResponse) SetReqMsgId(v string) *QueryBuildpackFindbyappResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetResultCode(v string) *QueryBuildpackFindbyappResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetResultMsg(v string) *QueryBuildpackFindbyappResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetBgEnable(v bool) *QueryBuildpackFindbyappResponse {
	s.BgEnable = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetBuildpackArch(v string) *QueryBuildpackFindbyappResponse {
	s.BuildpackArch = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetBuildScriptId(v string) *QueryBuildpackFindbyappResponse {
	s.BuildScriptId = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetCommandId(v string) *QueryBuildpackFindbyappResponse {
	s.CommandId = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetComponentId(v string) *QueryBuildpackFindbyappResponse {
	s.ComponentId = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetConfigId(v string) *QueryBuildpackFindbyappResponse {
	s.ConfigId = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetCreator(v string) *QueryBuildpackFindbyappResponse {
	s.Creator = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetCustomerIds(v []*string) *QueryBuildpackFindbyappResponse {
	s.CustomerIds = v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetDeployScriptId(v string) *QueryBuildpackFindbyappResponse {
	s.DeployScriptId = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetDes(v string) *QueryBuildpackFindbyappResponse {
	s.Des = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetFullVersion(v string) *QueryBuildpackFindbyappResponse {
	s.FullVersion = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetGmtCreate(v string) *QueryBuildpackFindbyappResponse {
	s.GmtCreate = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetGmtModified(v string) *QueryBuildpackFindbyappResponse {
	s.GmtModified = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetId(v string) *QueryBuildpackFindbyappResponse {
	s.Id = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetName(v string) *QueryBuildpackFindbyappResponse {
	s.Name = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetSupportedOS(v []*BuildpackOS) *QueryBuildpackFindbyappResponse {
	s.SupportedOS = v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetSupportedRegions(v []*BuildpackRegionRelationDetail) *QueryBuildpackFindbyappResponse {
	s.SupportedRegions = v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetTechstack(v *Techstack) *QueryBuildpackFindbyappResponse {
	s.Techstack = v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetTenantId(v string) *QueryBuildpackFindbyappResponse {
	s.TenantId = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetUtcCreate(v string) *QueryBuildpackFindbyappResponse {
	s.UtcCreate = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetUtcModified(v string) *QueryBuildpackFindbyappResponse {
	s.UtcModified = &v
	return s
}

func (s *QueryBuildpackFindbyappResponse) SetVersion(v string) *QueryBuildpackFindbyappResponse {
	s.Version = &v
	return s
}

type CreateBuildpackGeneratesignurlRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 地域ID
	RegionNum *string `json:"region_num,omitempty" xml:"region_num,omitempty"`
}

func (s CreateBuildpackGeneratesignurlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBuildpackGeneratesignurlRequest) GoString() string {
	return s.String()
}

func (s *CreateBuildpackGeneratesignurlRequest) SetAuthToken(v string) *CreateBuildpackGeneratesignurlRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBuildpackGeneratesignurlRequest) SetId(v string) *CreateBuildpackGeneratesignurlRequest {
	s.Id = &v
	return s
}

func (s *CreateBuildpackGeneratesignurlRequest) SetRegionNum(v string) *CreateBuildpackGeneratesignurlRequest {
	s.RegionNum = &v
	return s
}

type CreateBuildpackGeneratesignurlResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// url
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s CreateBuildpackGeneratesignurlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBuildpackGeneratesignurlResponse) GoString() string {
	return s.String()
}

func (s *CreateBuildpackGeneratesignurlResponse) SetReqMsgId(v string) *CreateBuildpackGeneratesignurlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBuildpackGeneratesignurlResponse) SetResultCode(v string) *CreateBuildpackGeneratesignurlResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBuildpackGeneratesignurlResponse) SetResultMsg(v string) *CreateBuildpackGeneratesignurlResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBuildpackGeneratesignurlResponse) SetUrl(v string) *CreateBuildpackGeneratesignurlResponse {
	s.Url = &v
	return s
}

type QueryBuildpackSumpackagessizeRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// regionIds
	RegionIds []*string `json:"region_ids,omitempty" xml:"region_ids,omitempty" type:"Repeated"`
}

func (s QueryBuildpackSumpackagessizeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackSumpackagessizeRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackSumpackagessizeRequest) SetAuthToken(v string) *QueryBuildpackSumpackagessizeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBuildpackSumpackagessizeRequest) SetRegionIds(v []*string) *QueryBuildpackSumpackagessizeRequest {
	s.RegionIds = v
	return s
}

type QueryBuildpackSumpackagessizeResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// json
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryBuildpackSumpackagessizeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackSumpackagessizeResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackSumpackagessizeResponse) SetReqMsgId(v string) *QueryBuildpackSumpackagessizeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackSumpackagessizeResponse) SetResultCode(v string) *QueryBuildpackSumpackagessizeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackSumpackagessizeResponse) SetResultMsg(v string) *QueryBuildpackSumpackagessizeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackSumpackagessizeResponse) SetResult(v string) *QueryBuildpackSumpackagessizeResponse {
	s.Result = &v
	return s
}

type QueryBuildpackSupportcoderepoRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// techstackId
	TechstackId *int64 `json:"techstack_id,omitempty" xml:"techstack_id,omitempty"`
}

func (s QueryBuildpackSupportcoderepoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackSupportcoderepoRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackSupportcoderepoRequest) SetAuthToken(v string) *QueryBuildpackSupportcoderepoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBuildpackSupportcoderepoRequest) SetTechstackId(v int64) *QueryBuildpackSupportcoderepoRequest {
	s.TechstackId = &v
	return s
}

type QueryBuildpackSupportcoderepoResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryBuildpackSupportcoderepoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackSupportcoderepoResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackSupportcoderepoResponse) SetReqMsgId(v string) *QueryBuildpackSupportcoderepoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackSupportcoderepoResponse) SetResultCode(v string) *QueryBuildpackSupportcoderepoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackSupportcoderepoResponse) SetResultMsg(v string) *QueryBuildpackSupportcoderepoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackSupportcoderepoResponse) SetData(v bool) *QueryBuildpackSupportcoderepoResponse {
	s.Data = &v
	return s
}

type QueryBuildpackFindavailablebyappserviceidsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// appServiceIds
	AppServiceIds []*string `json:"app_service_ids,omitempty" xml:"app_service_ids,omitempty" type:"Repeated"`
}

func (s QueryBuildpackFindavailablebyappserviceidsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindavailablebyappserviceidsRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindavailablebyappserviceidsRequest) SetAuthToken(v string) *QueryBuildpackFindavailablebyappserviceidsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBuildpackFindavailablebyappserviceidsRequest) SetAppServiceIds(v []*string) *QueryBuildpackFindavailablebyappserviceidsRequest {
	s.AppServiceIds = v
	return s
}

type QueryBuildpackFindavailablebyappserviceidsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// json
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryBuildpackFindavailablebyappserviceidsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackFindavailablebyappserviceidsResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackFindavailablebyappserviceidsResponse) SetReqMsgId(v string) *QueryBuildpackFindavailablebyappserviceidsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackFindavailablebyappserviceidsResponse) SetResultCode(v string) *QueryBuildpackFindavailablebyappserviceidsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackFindavailablebyappserviceidsResponse) SetResultMsg(v string) *QueryBuildpackFindavailablebyappserviceidsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackFindavailablebyappserviceidsResponse) SetResult(v string) *QueryBuildpackFindavailablebyappserviceidsResponse {
	s.Result = &v
	return s
}

type QueryBuildpacknewRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// buildCommand
	BuildCommand *string `json:"build_command,omitempty" xml:"build_command,omitempty"`
	// createdFroms
	CreatedFroms []*string `json:"created_froms,omitempty" xml:"created_froms,omitempty" type:"Repeated"`
	// creationTimeFrom
	CreationTimeFrom *string `json:"creation_time_from,omitempty" xml:"creation_time_from,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// creationTimeTo
	CreationTimeTo *string `json:"creation_time_to,omitempty" xml:"creation_time_to,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// creatorIds
	CreatorIds []*string `json:"creator_ids,omitempty" xml:"creator_ids,omitempty" type:"Repeated"`
	// currentPage
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// descend
	Descend *bool `json:"descend,omitempty" xml:"descend,omitempty"`
	// fullVersion
	FullVersion *string `json:"full_version,omitempty" xml:"full_version,omitempty"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
	// isProcessed
	IsProcessed *bool `json:"is_processed,omitempty" xml:"is_processed,omitempty"`
	// modificationTimeFrom
	ModificationTimeFrom *string `json:"modification_time_from,omitempty" xml:"modification_time_from,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// modificationTimeTo
	ModificationTimeTo *string `json:"modification_time_to,omitempty" xml:"modification_time_to,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// pageSize
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// publicationTimeFrom
	PublicationTimeFrom *string `json:"publication_time_from,omitempty" xml:"publication_time_from,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// publicationTimeTo
	PublicationTimeTo *string `json:"publication_time_to,omitempty" xml:"publication_time_to,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// publisherIds
	PublisherIds []*string `json:"publisher_ids,omitempty" xml:"publisher_ids,omitempty" type:"Repeated"`
	// scopes
	Scopes []*string `json:"scopes,omitempty" xml:"scopes,omitempty" type:"Repeated"`
	// sortField
	SortField *string `json:"sort_field,omitempty" xml:"sort_field,omitempty"`
	// statuses
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// supportedOsIds
	SupportedOsIds []*int64 `json:"supported_os_ids,omitempty" xml:"supported_os_ids,omitempty" type:"Repeated"`
	// supported_region_ids
	SupportedRegionIds []*string `json:"supported_region_ids,omitempty" xml:"supported_region_ids,omitempty" type:"Repeated"`
	// techstackIds
	TechstackIds []*int64 `json:"techstack_ids,omitempty" xml:"techstack_ids,omitempty" type:"Repeated"`
	// techstackNames
	TechstackNames []*string `json:"techstack_names,omitempty" xml:"techstack_names,omitempty" type:"Repeated"`
}

func (s QueryBuildpacknewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpacknewRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpacknewRequest) SetAuthToken(v string) *QueryBuildpacknewRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBuildpacknewRequest) SetBuildCommand(v string) *QueryBuildpacknewRequest {
	s.BuildCommand = &v
	return s
}

func (s *QueryBuildpacknewRequest) SetCreatedFroms(v []*string) *QueryBuildpacknewRequest {
	s.CreatedFroms = v
	return s
}

func (s *QueryBuildpacknewRequest) SetCreationTimeFrom(v string) *QueryBuildpacknewRequest {
	s.CreationTimeFrom = &v
	return s
}

func (s *QueryBuildpacknewRequest) SetCreationTimeTo(v string) *QueryBuildpacknewRequest {
	s.CreationTimeTo = &v
	return s
}

func (s *QueryBuildpacknewRequest) SetCreatorIds(v []*string) *QueryBuildpacknewRequest {
	s.CreatorIds = v
	return s
}

func (s *QueryBuildpacknewRequest) SetCurrentPage(v int64) *QueryBuildpacknewRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryBuildpacknewRequest) SetDescend(v bool) *QueryBuildpacknewRequest {
	s.Descend = &v
	return s
}

func (s *QueryBuildpacknewRequest) SetFullVersion(v string) *QueryBuildpacknewRequest {
	s.FullVersion = &v
	return s
}

func (s *QueryBuildpacknewRequest) SetIds(v []*string) *QueryBuildpacknewRequest {
	s.Ids = v
	return s
}

func (s *QueryBuildpacknewRequest) SetIsProcessed(v bool) *QueryBuildpacknewRequest {
	s.IsProcessed = &v
	return s
}

func (s *QueryBuildpacknewRequest) SetModificationTimeFrom(v string) *QueryBuildpacknewRequest {
	s.ModificationTimeFrom = &v
	return s
}

func (s *QueryBuildpacknewRequest) SetModificationTimeTo(v string) *QueryBuildpacknewRequest {
	s.ModificationTimeTo = &v
	return s
}

func (s *QueryBuildpacknewRequest) SetPageSize(v int64) *QueryBuildpacknewRequest {
	s.PageSize = &v
	return s
}

func (s *QueryBuildpacknewRequest) SetPublicationTimeFrom(v string) *QueryBuildpacknewRequest {
	s.PublicationTimeFrom = &v
	return s
}

func (s *QueryBuildpacknewRequest) SetPublicationTimeTo(v string) *QueryBuildpacknewRequest {
	s.PublicationTimeTo = &v
	return s
}

func (s *QueryBuildpacknewRequest) SetPublisherIds(v []*string) *QueryBuildpacknewRequest {
	s.PublisherIds = v
	return s
}

func (s *QueryBuildpacknewRequest) SetScopes(v []*string) *QueryBuildpacknewRequest {
	s.Scopes = v
	return s
}

func (s *QueryBuildpacknewRequest) SetSortField(v string) *QueryBuildpacknewRequest {
	s.SortField = &v
	return s
}

func (s *QueryBuildpacknewRequest) SetStatuses(v []*string) *QueryBuildpacknewRequest {
	s.Statuses = v
	return s
}

func (s *QueryBuildpacknewRequest) SetSupportedOsIds(v []*int64) *QueryBuildpacknewRequest {
	s.SupportedOsIds = v
	return s
}

func (s *QueryBuildpacknewRequest) SetSupportedRegionIds(v []*string) *QueryBuildpacknewRequest {
	s.SupportedRegionIds = v
	return s
}

func (s *QueryBuildpacknewRequest) SetTechstackIds(v []*int64) *QueryBuildpacknewRequest {
	s.TechstackIds = v
	return s
}

func (s *QueryBuildpacknewRequest) SetTechstackNames(v []*string) *QueryBuildpacknewRequest {
	s.TechstackNames = v
	return s
}

type QueryBuildpacknewResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// buildpacks
	Buildpacks []*BuildpackDetail `json:"buildpacks,omitempty" xml:"buildpacks,omitempty" type:"Repeated"`
	// currentPage
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// pageSize
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// totalCount
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryBuildpacknewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpacknewResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpacknewResponse) SetReqMsgId(v string) *QueryBuildpacknewResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpacknewResponse) SetResultCode(v string) *QueryBuildpacknewResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpacknewResponse) SetResultMsg(v string) *QueryBuildpacknewResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpacknewResponse) SetBuildpacks(v []*BuildpackDetail) *QueryBuildpacknewResponse {
	s.Buildpacks = v
	return s
}

func (s *QueryBuildpacknewResponse) SetCurrentPage(v int64) *QueryBuildpacknewResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryBuildpacknewResponse) SetPageSize(v int64) *QueryBuildpacknewResponse {
	s.PageSize = &v
	return s
}

func (s *QueryBuildpacknewResponse) SetTotalCount(v int64) *QueryBuildpacknewResponse {
	s.TotalCount = &v
	return s
}

type GetBuildpacknewRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s GetBuildpacknewRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBuildpacknewRequest) GoString() string {
	return s.String()
}

func (s *GetBuildpacknewRequest) SetAuthToken(v string) *GetBuildpacknewRequest {
	s.AuthToken = &v
	return s
}

func (s *GetBuildpacknewRequest) SetId(v string) *GetBuildpacknewRequest {
	s.Id = &v
	return s
}

type GetBuildpacknewResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// buildpackDetailVO
	BuildpackDetailVO *BuildpackDetailVO `json:"buildpack_detail_v_o,omitempty" xml:"buildpack_detail_v_o,omitempty"`
}

func (s GetBuildpacknewResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBuildpacknewResponse) GoString() string {
	return s.String()
}

func (s *GetBuildpacknewResponse) SetReqMsgId(v string) *GetBuildpacknewResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetBuildpacknewResponse) SetResultCode(v string) *GetBuildpacknewResponse {
	s.ResultCode = &v
	return s
}

func (s *GetBuildpacknewResponse) SetResultMsg(v string) *GetBuildpacknewResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetBuildpacknewResponse) SetBuildpackDetailVO(v *BuildpackDetailVO) *GetBuildpacknewResponse {
	s.BuildpackDetailVO = v
	return s
}

type UpdateBuildpacknewUploadfinishRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// buildpackId
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// buildpackRegionRelation
	BuildpackRegionRelation *BuildpackRegionRelation `json:"buildpack_region_relation,omitempty" xml:"buildpack_region_relation,omitempty"`
}

func (s UpdateBuildpacknewUploadfinishRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuildpacknewUploadfinishRequest) GoString() string {
	return s.String()
}

func (s *UpdateBuildpacknewUploadfinishRequest) SetAuthToken(v string) *UpdateBuildpacknewUploadfinishRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateBuildpacknewUploadfinishRequest) SetBuildpackId(v string) *UpdateBuildpacknewUploadfinishRequest {
	s.BuildpackId = &v
	return s
}

func (s *UpdateBuildpacknewUploadfinishRequest) SetBuildpackRegionRelation(v *BuildpackRegionRelation) *UpdateBuildpacknewUploadfinishRequest {
	s.BuildpackRegionRelation = v
	return s
}

type UpdateBuildpacknewUploadfinishResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateBuildpacknewUploadfinishResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuildpacknewUploadfinishResponse) GoString() string {
	return s.String()
}

func (s *UpdateBuildpacknewUploadfinishResponse) SetReqMsgId(v string) *UpdateBuildpacknewUploadfinishResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateBuildpacknewUploadfinishResponse) SetResultCode(v string) *UpdateBuildpacknewUploadfinishResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateBuildpacknewUploadfinishResponse) SetResultMsg(v string) *UpdateBuildpacknewUploadfinishResponse {
	s.ResultMsg = &v
	return s
}

type UpdateBuildpacknewRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// available_tenant_names
	AvailableTenantNames []*string `json:"available_tenant_names,omitempty" xml:"available_tenant_names,omitempty" type:"Repeated"`
	// buildpack_id
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// buildpack_params
	BuildpackParams []*BuildpackParamTemplate `json:"buildpack_params,omitempty" xml:"buildpack_params,omitempty" type:"Repeated"`
	// contactInfo
	ContactInfo *string `json:"contact_info,omitempty" xml:"contact_info,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// envParams
	EnvParams []*BuildpackParamTemplate `json:"env_params,omitempty" xml:"env_params,omitempty" type:"Repeated"`
	// fullVersion
	FullVersion *string `json:"full_version,omitempty" xml:"full_version,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// scope
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// supportedOs
	SupportedOs []*int64 `json:"supported_os,omitempty" xml:"supported_os,omitempty" type:"Repeated"`
	// supported_regions
	SupportedRegions []*BuildpackRegionRelation `json:"supported_regions,omitempty" xml:"supported_regions,omitempty" type:"Repeated"`
	// techstack
	Techstack *Techstack `json:"techstack,omitempty" xml:"techstack,omitempty"`
	// techstack_id
	TechstackId *string `json:"techstack_id,omitempty" xml:"techstack_id,omitempty"`
	// BuildCommandParams
	BuildCommandParams []*BuildCommandParams `json:"build_command_params,omitempty" xml:"build_command_params,omitempty" type:"Repeated"`
	// creator
	Creator *UserDTO `json:"creator,omitempty" xml:"creator,omitempty"`
	// publisher
	Publisher *UserDTO `json:"publisher,omitempty" xml:"publisher,omitempty"`
	// originType
	OriginType *string `json:"origin_type,omitempty" xml:"origin_type,omitempty"`
	// appServiceCount
	AppServiceCount *int64 `json:"app_service_count,omitempty" xml:"app_service_count,omitempty"`
	// debugMode
	DebugMode *bool `json:"debug_mode,omitempty" xml:"debug_mode,omitempty"`
	// majorVersion
	MajorVersion *int64 `json:"major_version,omitempty" xml:"major_version,omitempty"`
	// minorVersion
	MinorVersion *int64 `json:"minor_version,omitempty" xml:"minor_version,omitempty"`
	// patchVersion
	PatchVersion *int64 `json:"patch_version,omitempty" xml:"patch_version,omitempty"`
	// buildCommand
	BuildCommand *string `json:"build_command,omitempty" xml:"build_command,omitempty"`
	// createdFrom
	CreatedFrom *string `json:"created_from,omitempty" xml:"created_from,omitempty"`
	// publicationTime
	PublicationTime *string `json:"publication_time,omitempty" xml:"publication_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// creationChain
	CreationChain []*string `json:"creation_chain,omitempty" xml:"creation_chain,omitempty" type:"Repeated"`
	// extraInfo
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// depracationNote
	DepracationNote *string `json:"depracation_note,omitempty" xml:"depracation_note,omitempty"`
	// industryLabel
	IndustryLabel *string `json:"industry_label,omitempty" xml:"industry_label,omitempty"`
	// creationTime
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// modificationTime
	ModificationTime *string `json:"modification_time,omitempty" xml:"modification_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
}

func (s UpdateBuildpacknewRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuildpacknewRequest) GoString() string {
	return s.String()
}

func (s *UpdateBuildpacknewRequest) SetAuthToken(v string) *UpdateBuildpacknewRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetAvailableTenantNames(v []*string) *UpdateBuildpacknewRequest {
	s.AvailableTenantNames = v
	return s
}

func (s *UpdateBuildpacknewRequest) SetBuildpackId(v string) *UpdateBuildpacknewRequest {
	s.BuildpackId = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetBuildpackParams(v []*BuildpackParamTemplate) *UpdateBuildpacknewRequest {
	s.BuildpackParams = v
	return s
}

func (s *UpdateBuildpacknewRequest) SetContactInfo(v string) *UpdateBuildpacknewRequest {
	s.ContactInfo = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetDescription(v string) *UpdateBuildpacknewRequest {
	s.Description = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetEnvParams(v []*BuildpackParamTemplate) *UpdateBuildpacknewRequest {
	s.EnvParams = v
	return s
}

func (s *UpdateBuildpacknewRequest) SetFullVersion(v string) *UpdateBuildpacknewRequest {
	s.FullVersion = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetId(v string) *UpdateBuildpacknewRequest {
	s.Id = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetScope(v string) *UpdateBuildpacknewRequest {
	s.Scope = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetStatus(v string) *UpdateBuildpacknewRequest {
	s.Status = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetSupportedOs(v []*int64) *UpdateBuildpacknewRequest {
	s.SupportedOs = v
	return s
}

func (s *UpdateBuildpacknewRequest) SetSupportedRegions(v []*BuildpackRegionRelation) *UpdateBuildpacknewRequest {
	s.SupportedRegions = v
	return s
}

func (s *UpdateBuildpacknewRequest) SetTechstack(v *Techstack) *UpdateBuildpacknewRequest {
	s.Techstack = v
	return s
}

func (s *UpdateBuildpacknewRequest) SetTechstackId(v string) *UpdateBuildpacknewRequest {
	s.TechstackId = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetBuildCommandParams(v []*BuildCommandParams) *UpdateBuildpacknewRequest {
	s.BuildCommandParams = v
	return s
}

func (s *UpdateBuildpacknewRequest) SetCreator(v *UserDTO) *UpdateBuildpacknewRequest {
	s.Creator = v
	return s
}

func (s *UpdateBuildpacknewRequest) SetPublisher(v *UserDTO) *UpdateBuildpacknewRequest {
	s.Publisher = v
	return s
}

func (s *UpdateBuildpacknewRequest) SetOriginType(v string) *UpdateBuildpacknewRequest {
	s.OriginType = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetAppServiceCount(v int64) *UpdateBuildpacknewRequest {
	s.AppServiceCount = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetDebugMode(v bool) *UpdateBuildpacknewRequest {
	s.DebugMode = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetMajorVersion(v int64) *UpdateBuildpacknewRequest {
	s.MajorVersion = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetMinorVersion(v int64) *UpdateBuildpacknewRequest {
	s.MinorVersion = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetPatchVersion(v int64) *UpdateBuildpacknewRequest {
	s.PatchVersion = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetBuildCommand(v string) *UpdateBuildpacknewRequest {
	s.BuildCommand = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetCreatedFrom(v string) *UpdateBuildpacknewRequest {
	s.CreatedFrom = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetPublicationTime(v string) *UpdateBuildpacknewRequest {
	s.PublicationTime = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetCreationChain(v []*string) *UpdateBuildpacknewRequest {
	s.CreationChain = v
	return s
}

func (s *UpdateBuildpacknewRequest) SetExtraInfo(v string) *UpdateBuildpacknewRequest {
	s.ExtraInfo = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetDepracationNote(v string) *UpdateBuildpacknewRequest {
	s.DepracationNote = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetIndustryLabel(v string) *UpdateBuildpacknewRequest {
	s.IndustryLabel = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetCreationTime(v string) *UpdateBuildpacknewRequest {
	s.CreationTime = &v
	return s
}

func (s *UpdateBuildpacknewRequest) SetModificationTime(v string) *UpdateBuildpacknewRequest {
	s.ModificationTime = &v
	return s
}

type UpdateBuildpacknewResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// buildpack_id
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// upload_endpoints
	UploadEndpoints []*UploadEndpoint `json:"upload_endpoints,omitempty" xml:"upload_endpoints,omitempty" type:"Repeated"`
}

func (s UpdateBuildpacknewResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuildpacknewResponse) GoString() string {
	return s.String()
}

func (s *UpdateBuildpacknewResponse) SetReqMsgId(v string) *UpdateBuildpacknewResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateBuildpacknewResponse) SetResultCode(v string) *UpdateBuildpacknewResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateBuildpacknewResponse) SetResultMsg(v string) *UpdateBuildpacknewResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateBuildpacknewResponse) SetBuildpackId(v string) *UpdateBuildpacknewResponse {
	s.BuildpackId = &v
	return s
}

func (s *UpdateBuildpacknewResponse) SetUploadEndpoints(v []*UploadEndpoint) *UpdateBuildpacknewResponse {
	s.UploadEndpoints = v
	return s
}

type CreateBuildpacknewRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// availableTenantNames
	AvailableTenantNames []*string `json:"available_tenant_names,omitempty" xml:"available_tenant_names,omitempty" type:"Repeated"`
	// buildpackParams
	BuildpackParams []*BuildpackParamTemplate `json:"buildpack_params,omitempty" xml:"buildpack_params,omitempty" type:"Repeated"`
	// buildCommand
	BuildCommand *string `json:"build_command,omitempty" xml:"build_command,omitempty"`
	// buildCommandParams
	BuildCommandParams []*BuildCommandParams `json:"build_command_params,omitempty" xml:"build_command_params,omitempty" type:"Repeated"`
	// contact_info
	//
	ContactInfo *string `json:"contact_info,omitempty" xml:"contact_info,omitempty"`
	// debug_mode
	//
	DebugMode *bool `json:"debug_mode,omitempty" xml:"debug_mode,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// full_version
	//
	FullVersion *string `json:"full_version,omitempty" xml:"full_version,omitempty"`
	// major_version
	//
	MajorVersion *int64 `json:"major_version,omitempty" xml:"major_version,omitempty"`
	// minor_version
	//
	MinorVersion *int64 `json:"minor_version,omitempty" xml:"minor_version,omitempty"`
	// patch_version
	//
	PatchVersion *int64 `json:"patch_version,omitempty" xml:"patch_version,omitempty"`
	// scope
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// StorageUploadEndpoint
	StorageUploadEndpoints *string `json:"storage_upload_endpoints,omitempty" xml:"storage_upload_endpoints,omitempty"`
	// supported_os
	//
	SupportedOs []*int64 `json:"supported_os,omitempty" xml:"supported_os,omitempty" type:"Repeated"`
	// supported_regions
	//
	SupportedRegions []*BuildpackRegionRelation `json:"supported_regions,omitempty" xml:"supported_regions,omitempty" type:"Repeated"`
	// techstack_id
	//
	TechstackId *int64 `json:"techstack_id,omitempty" xml:"techstack_id,omitempty"`
	// techstack
	Techstack *Techstack `json:"techstack,omitempty" xml:"techstack,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s CreateBuildpacknewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBuildpacknewRequest) GoString() string {
	return s.String()
}

func (s *CreateBuildpacknewRequest) SetAuthToken(v string) *CreateBuildpacknewRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBuildpacknewRequest) SetAvailableTenantNames(v []*string) *CreateBuildpacknewRequest {
	s.AvailableTenantNames = v
	return s
}

func (s *CreateBuildpacknewRequest) SetBuildpackParams(v []*BuildpackParamTemplate) *CreateBuildpacknewRequest {
	s.BuildpackParams = v
	return s
}

func (s *CreateBuildpacknewRequest) SetBuildCommand(v string) *CreateBuildpacknewRequest {
	s.BuildCommand = &v
	return s
}

func (s *CreateBuildpacknewRequest) SetBuildCommandParams(v []*BuildCommandParams) *CreateBuildpacknewRequest {
	s.BuildCommandParams = v
	return s
}

func (s *CreateBuildpacknewRequest) SetContactInfo(v string) *CreateBuildpacknewRequest {
	s.ContactInfo = &v
	return s
}

func (s *CreateBuildpacknewRequest) SetDebugMode(v bool) *CreateBuildpacknewRequest {
	s.DebugMode = &v
	return s
}

func (s *CreateBuildpacknewRequest) SetDescription(v string) *CreateBuildpacknewRequest {
	s.Description = &v
	return s
}

func (s *CreateBuildpacknewRequest) SetFullVersion(v string) *CreateBuildpacknewRequest {
	s.FullVersion = &v
	return s
}

func (s *CreateBuildpacknewRequest) SetMajorVersion(v int64) *CreateBuildpacknewRequest {
	s.MajorVersion = &v
	return s
}

func (s *CreateBuildpacknewRequest) SetMinorVersion(v int64) *CreateBuildpacknewRequest {
	s.MinorVersion = &v
	return s
}

func (s *CreateBuildpacknewRequest) SetPatchVersion(v int64) *CreateBuildpacknewRequest {
	s.PatchVersion = &v
	return s
}

func (s *CreateBuildpacknewRequest) SetScope(v string) *CreateBuildpacknewRequest {
	s.Scope = &v
	return s
}

func (s *CreateBuildpacknewRequest) SetStorageUploadEndpoints(v string) *CreateBuildpacknewRequest {
	s.StorageUploadEndpoints = &v
	return s
}

func (s *CreateBuildpacknewRequest) SetSupportedOs(v []*int64) *CreateBuildpacknewRequest {
	s.SupportedOs = v
	return s
}

func (s *CreateBuildpacknewRequest) SetSupportedRegions(v []*BuildpackRegionRelation) *CreateBuildpacknewRequest {
	s.SupportedRegions = v
	return s
}

func (s *CreateBuildpacknewRequest) SetTechstackId(v int64) *CreateBuildpacknewRequest {
	s.TechstackId = &v
	return s
}

func (s *CreateBuildpacknewRequest) SetTechstack(v *Techstack) *CreateBuildpacknewRequest {
	s.Techstack = v
	return s
}

func (s *CreateBuildpacknewRequest) SetStatus(v string) *CreateBuildpacknewRequest {
	s.Status = &v
	return s
}

func (s *CreateBuildpacknewRequest) SetId(v string) *CreateBuildpacknewRequest {
	s.Id = &v
	return s
}

type CreateBuildpacknewResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// buildpack_id
	//
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// upload_endpoints
	//
	UploadEndpoints []*UploadEndpoint `json:"upload_endpoints,omitempty" xml:"upload_endpoints,omitempty" type:"Repeated"`
}

func (s CreateBuildpacknewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBuildpacknewResponse) GoString() string {
	return s.String()
}

func (s *CreateBuildpacknewResponse) SetReqMsgId(v string) *CreateBuildpacknewResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBuildpacknewResponse) SetResultCode(v string) *CreateBuildpacknewResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBuildpacknewResponse) SetResultMsg(v string) *CreateBuildpacknewResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBuildpacknewResponse) SetBuildpackId(v string) *CreateBuildpacknewResponse {
	s.BuildpackId = &v
	return s
}

func (s *CreateBuildpacknewResponse) SetUploadEndpoints(v []*UploadEndpoint) *CreateBuildpacknewResponse {
	s.UploadEndpoints = v
	return s
}

type OnlineBuildpackRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// buildpackId
	Id []*string `json:"id,omitempty" xml:"id,omitempty" type:"Repeated"`
}

func (s OnlineBuildpackRequest) String() string {
	return tea.Prettify(s)
}

func (s OnlineBuildpackRequest) GoString() string {
	return s.String()
}

func (s *OnlineBuildpackRequest) SetAuthToken(v string) *OnlineBuildpackRequest {
	s.AuthToken = &v
	return s
}

func (s *OnlineBuildpackRequest) SetId(v []*string) *OnlineBuildpackRequest {
	s.Id = v
	return s
}

type OnlineBuildpackResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s OnlineBuildpackResponse) String() string {
	return tea.Prettify(s)
}

func (s OnlineBuildpackResponse) GoString() string {
	return s.String()
}

func (s *OnlineBuildpackResponse) SetReqMsgId(v string) *OnlineBuildpackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OnlineBuildpackResponse) SetResultCode(v string) *OnlineBuildpackResponse {
	s.ResultCode = &v
	return s
}

func (s *OnlineBuildpackResponse) SetResultMsg(v string) *OnlineBuildpackResponse {
	s.ResultMsg = &v
	return s
}

type CreateConfigGlobalRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 数据保密等级
	DataLevel *string `json:"data_level,omitempty" xml:"data_level,omitempty"`
	// 参数描述
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
	// 参数名
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 参数版本
	ParamVersion *int64 `json:"param_version,omitempty" xml:"param_version,omitempty"`
	// 该参数属于哪个 scope
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 该参数在该 scope 中的 id
	ScopeId *string `json:"scope_id,omitempty" xml:"scope_id,omitempty"`
	// 参数类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 参数值
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s CreateConfigGlobalRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigGlobalRequest) GoString() string {
	return s.String()
}

func (s *CreateConfigGlobalRequest) SetAuthToken(v string) *CreateConfigGlobalRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateConfigGlobalRequest) SetDataLevel(v string) *CreateConfigGlobalRequest {
	s.DataLevel = &v
	return s
}

func (s *CreateConfigGlobalRequest) SetDesc(v string) *CreateConfigGlobalRequest {
	s.Desc = &v
	return s
}

func (s *CreateConfigGlobalRequest) SetKey(v string) *CreateConfigGlobalRequest {
	s.Key = &v
	return s
}

func (s *CreateConfigGlobalRequest) SetParamVersion(v int64) *CreateConfigGlobalRequest {
	s.ParamVersion = &v
	return s
}

func (s *CreateConfigGlobalRequest) SetScope(v string) *CreateConfigGlobalRequest {
	s.Scope = &v
	return s
}

func (s *CreateConfigGlobalRequest) SetScopeId(v string) *CreateConfigGlobalRequest {
	s.ScopeId = &v
	return s
}

func (s *CreateConfigGlobalRequest) SetType(v string) *CreateConfigGlobalRequest {
	s.Type = &v
	return s
}

func (s *CreateConfigGlobalRequest) SetValue(v string) *CreateConfigGlobalRequest {
	s.Value = &v
	return s
}

type CreateConfigGlobalResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建的全局参数 id
	GlobalParamId *string `json:"global_param_id,omitempty" xml:"global_param_id,omitempty"`
}

func (s CreateConfigGlobalResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigGlobalResponse) GoString() string {
	return s.String()
}

func (s *CreateConfigGlobalResponse) SetReqMsgId(v string) *CreateConfigGlobalResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateConfigGlobalResponse) SetResultCode(v string) *CreateConfigGlobalResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateConfigGlobalResponse) SetResultMsg(v string) *CreateConfigGlobalResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateConfigGlobalResponse) SetGlobalParamId(v string) *CreateConfigGlobalResponse {
	s.GlobalParamId = &v
	return s
}

type DeleteConfigGlobalRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 要删除的全局参数 id
	GlobalParamId *string `json:"global_param_id,omitempty" xml:"global_param_id,omitempty"`
}

func (s DeleteConfigGlobalRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigGlobalRequest) GoString() string {
	return s.String()
}

func (s *DeleteConfigGlobalRequest) SetAuthToken(v string) *DeleteConfigGlobalRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteConfigGlobalRequest) SetGlobalParamId(v string) *DeleteConfigGlobalRequest {
	s.GlobalParamId = &v
	return s
}

type DeleteConfigGlobalResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteConfigGlobalResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigGlobalResponse) GoString() string {
	return s.String()
}

func (s *DeleteConfigGlobalResponse) SetReqMsgId(v string) *DeleteConfigGlobalResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteConfigGlobalResponse) SetResultCode(v string) *DeleteConfigGlobalResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteConfigGlobalResponse) SetResultMsg(v string) *DeleteConfigGlobalResponse {
	s.ResultMsg = &v
	return s
}

type UpdateConfigGlobalRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 数据保密等级
	DataLevel *string `json:"data_level,omitempty" xml:"data_level,omitempty"`
	// 参数描述
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
	// 全局参数 id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 参数名
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 版本
	ParamVersion *int64 `json:"param_version,omitempty" xml:"param_version,omitempty"`
	// 该参数属于哪个 scope
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 该参数在该 scope 中的 id
	ScopeId *string `json:"scope_id,omitempty" xml:"scope_id,omitempty"`
	// 参数类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 参数值
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s UpdateConfigGlobalRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigGlobalRequest) GoString() string {
	return s.String()
}

func (s *UpdateConfigGlobalRequest) SetAuthToken(v string) *UpdateConfigGlobalRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateConfigGlobalRequest) SetDataLevel(v string) *UpdateConfigGlobalRequest {
	s.DataLevel = &v
	return s
}

func (s *UpdateConfigGlobalRequest) SetDesc(v string) *UpdateConfigGlobalRequest {
	s.Desc = &v
	return s
}

func (s *UpdateConfigGlobalRequest) SetId(v string) *UpdateConfigGlobalRequest {
	s.Id = &v
	return s
}

func (s *UpdateConfigGlobalRequest) SetKey(v string) *UpdateConfigGlobalRequest {
	s.Key = &v
	return s
}

func (s *UpdateConfigGlobalRequest) SetParamVersion(v int64) *UpdateConfigGlobalRequest {
	s.ParamVersion = &v
	return s
}

func (s *UpdateConfigGlobalRequest) SetScope(v string) *UpdateConfigGlobalRequest {
	s.Scope = &v
	return s
}

func (s *UpdateConfigGlobalRequest) SetScopeId(v string) *UpdateConfigGlobalRequest {
	s.ScopeId = &v
	return s
}

func (s *UpdateConfigGlobalRequest) SetType(v string) *UpdateConfigGlobalRequest {
	s.Type = &v
	return s
}

func (s *UpdateConfigGlobalRequest) SetValue(v string) *UpdateConfigGlobalRequest {
	s.Value = &v
	return s
}

type UpdateConfigGlobalResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateConfigGlobalResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigGlobalResponse) GoString() string {
	return s.String()
}

func (s *UpdateConfigGlobalResponse) SetReqMsgId(v string) *UpdateConfigGlobalResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateConfigGlobalResponse) SetResultCode(v string) *UpdateConfigGlobalResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateConfigGlobalResponse) SetResultMsg(v string) *UpdateConfigGlobalResponse {
	s.ResultMsg = &v
	return s
}

type QueryConfigGlobalRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 模板参数保密级别
	DataLevel *string `json:"data_level,omitempty" xml:"data_level,omitempty"`
	// 参数名
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 排序规则数组，默认为 UTC_MODIFIED_DESC，即 根据修改时间降序排序
	Orders []*string `json:"orders,omitempty" xml:"orders,omitempty" type:"Repeated"`
	// 当前页码，从1开始，默认为1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认为10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 根据参数类型进行查询
	ParamType *string `json:"param_type,omitempty" xml:"param_type,omitempty"`
	// 查询类型，支持精准查询、模糊查询、前缀模糊查询，这里默认为模糊查询；查询类型针对字段 key
	QueryType *string `json:"query_type,omitempty" xml:"query_type,omitempty"`
	// 该参数属于哪个 scope，可以在多个 scope 中查询
	Scopes []*string `json:"scopes,omitempty" xml:"scopes,omitempty" type:"Repeated"`
	// 该参数在该 scope 中的 id
	ScopeId *string `json:"scope_id,omitempty" xml:"scope_id,omitempty"`
}

func (s QueryConfigGlobalRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConfigGlobalRequest) GoString() string {
	return s.String()
}

func (s *QueryConfigGlobalRequest) SetAuthToken(v string) *QueryConfigGlobalRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConfigGlobalRequest) SetDataLevel(v string) *QueryConfigGlobalRequest {
	s.DataLevel = &v
	return s
}

func (s *QueryConfigGlobalRequest) SetKey(v string) *QueryConfigGlobalRequest {
	s.Key = &v
	return s
}

func (s *QueryConfigGlobalRequest) SetOrders(v []*string) *QueryConfigGlobalRequest {
	s.Orders = v
	return s
}

func (s *QueryConfigGlobalRequest) SetPageNum(v int64) *QueryConfigGlobalRequest {
	s.PageNum = &v
	return s
}

func (s *QueryConfigGlobalRequest) SetPageSize(v int64) *QueryConfigGlobalRequest {
	s.PageSize = &v
	return s
}

func (s *QueryConfigGlobalRequest) SetParamType(v string) *QueryConfigGlobalRequest {
	s.ParamType = &v
	return s
}

func (s *QueryConfigGlobalRequest) SetQueryType(v string) *QueryConfigGlobalRequest {
	s.QueryType = &v
	return s
}

func (s *QueryConfigGlobalRequest) SetScopes(v []*string) *QueryConfigGlobalRequest {
	s.Scopes = v
	return s
}

func (s *QueryConfigGlobalRequest) SetScopeId(v string) *QueryConfigGlobalRequest {
	s.ScopeId = &v
	return s
}

type QueryConfigGlobalResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 符合条件的全局参数列表
	Data []*GlobalParam `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 当前页
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 记录总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryConfigGlobalResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConfigGlobalResponse) GoString() string {
	return s.String()
}

func (s *QueryConfigGlobalResponse) SetReqMsgId(v string) *QueryConfigGlobalResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConfigGlobalResponse) SetResultCode(v string) *QueryConfigGlobalResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConfigGlobalResponse) SetResultMsg(v string) *QueryConfigGlobalResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConfigGlobalResponse) SetData(v []*GlobalParam) *QueryConfigGlobalResponse {
	s.Data = v
	return s
}

func (s *QueryConfigGlobalResponse) SetPageNum(v int64) *QueryConfigGlobalResponse {
	s.PageNum = &v
	return s
}

func (s *QueryConfigGlobalResponse) SetPageSize(v int64) *QueryConfigGlobalResponse {
	s.PageSize = &v
	return s
}

func (s *QueryConfigGlobalResponse) SetTotalCount(v int64) *QueryConfigGlobalResponse {
	s.TotalCount = &v
	return s
}

type GetConfigGlobalRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 要获取的全局参数 id
	GlobalParamId *string `json:"global_param_id,omitempty" xml:"global_param_id,omitempty"`
}

func (s GetConfigGlobalRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConfigGlobalRequest) GoString() string {
	return s.String()
}

func (s *GetConfigGlobalRequest) SetAuthToken(v string) *GetConfigGlobalRequest {
	s.AuthToken = &v
	return s
}

func (s *GetConfigGlobalRequest) SetGlobalParamId(v string) *GetConfigGlobalRequest {
	s.GlobalParamId = &v
	return s
}

type GetConfigGlobalResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 获取到的全局参数
	Data *GlobalParam `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetConfigGlobalResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConfigGlobalResponse) GoString() string {
	return s.String()
}

func (s *GetConfigGlobalResponse) SetReqMsgId(v string) *GetConfigGlobalResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetConfigGlobalResponse) SetResultCode(v string) *GetConfigGlobalResponse {
	s.ResultCode = &v
	return s
}

func (s *GetConfigGlobalResponse) SetResultMsg(v string) *GetConfigGlobalResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetConfigGlobalResponse) SetData(v *GlobalParam) *GetConfigGlobalResponse {
	s.Data = v
	return s
}

type CreateConfigAppRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 数据保密等级
	DataLevel *string `json:"data_level,omitempty" xml:"data_level,omitempty"`
	// 参数描述
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
	// 参数名
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 版本
	ParamVersion *int64 `json:"param_version,omitempty" xml:"param_version,omitempty"`
	// 该参数属于哪个 scope
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 该参数在该 scope 中的 id
	ScopeId *string `json:"scope_id,omitempty" xml:"scope_id,omitempty"`
	// 参数类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 参数值
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s CreateConfigAppRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigAppRequest) GoString() string {
	return s.String()
}

func (s *CreateConfigAppRequest) SetAuthToken(v string) *CreateConfigAppRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateConfigAppRequest) SetAppName(v string) *CreateConfigAppRequest {
	s.AppName = &v
	return s
}

func (s *CreateConfigAppRequest) SetDataLevel(v string) *CreateConfigAppRequest {
	s.DataLevel = &v
	return s
}

func (s *CreateConfigAppRequest) SetDesc(v string) *CreateConfigAppRequest {
	s.Desc = &v
	return s
}

func (s *CreateConfigAppRequest) SetKey(v string) *CreateConfigAppRequest {
	s.Key = &v
	return s
}

func (s *CreateConfigAppRequest) SetParamVersion(v int64) *CreateConfigAppRequest {
	s.ParamVersion = &v
	return s
}

func (s *CreateConfigAppRequest) SetScope(v string) *CreateConfigAppRequest {
	s.Scope = &v
	return s
}

func (s *CreateConfigAppRequest) SetScopeId(v string) *CreateConfigAppRequest {
	s.ScopeId = &v
	return s
}

func (s *CreateConfigAppRequest) SetType(v string) *CreateConfigAppRequest {
	s.Type = &v
	return s
}

func (s *CreateConfigAppRequest) SetValue(v string) *CreateConfigAppRequest {
	s.Value = &v
	return s
}

type CreateConfigAppResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用参数 id
	AppParamId *string `json:"app_param_id,omitempty" xml:"app_param_id,omitempty"`
}

func (s CreateConfigAppResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigAppResponse) GoString() string {
	return s.String()
}

func (s *CreateConfigAppResponse) SetReqMsgId(v string) *CreateConfigAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateConfigAppResponse) SetResultCode(v string) *CreateConfigAppResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateConfigAppResponse) SetResultMsg(v string) *CreateConfigAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateConfigAppResponse) SetAppParamId(v string) *CreateConfigAppResponse {
	s.AppParamId = &v
	return s
}

type DeleteConfigAppRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 要删除的应用参数 id
	AppParamId *string `json:"app_param_id,omitempty" xml:"app_param_id,omitempty"`
}

func (s DeleteConfigAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigAppRequest) GoString() string {
	return s.String()
}

func (s *DeleteConfigAppRequest) SetAuthToken(v string) *DeleteConfigAppRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteConfigAppRequest) SetAppParamId(v string) *DeleteConfigAppRequest {
	s.AppParamId = &v
	return s
}

type DeleteConfigAppResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteConfigAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigAppResponse) GoString() string {
	return s.String()
}

func (s *DeleteConfigAppResponse) SetReqMsgId(v string) *DeleteConfigAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteConfigAppResponse) SetResultCode(v string) *DeleteConfigAppResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteConfigAppResponse) SetResultMsg(v string) *DeleteConfigAppResponse {
	s.ResultMsg = &v
	return s
}

type UpdateConfigAppRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 数据保密等级
	DataLevel *string `json:"data_level,omitempty" xml:"data_level,omitempty"`
	// 参数描述
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
	// 应用参数 id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 参数名
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 版本
	ParamVersion *int64 `json:"param_version,omitempty" xml:"param_version,omitempty"`
	// 该参数属于哪个 scope
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 该参数在该 scope 中的 id
	ScopeId *string `json:"scope_id,omitempty" xml:"scope_id,omitempty"`
	// 参数类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 参数值
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s UpdateConfigAppRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigAppRequest) GoString() string {
	return s.String()
}

func (s *UpdateConfigAppRequest) SetAuthToken(v string) *UpdateConfigAppRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateConfigAppRequest) SetDataLevel(v string) *UpdateConfigAppRequest {
	s.DataLevel = &v
	return s
}

func (s *UpdateConfigAppRequest) SetDesc(v string) *UpdateConfigAppRequest {
	s.Desc = &v
	return s
}

func (s *UpdateConfigAppRequest) SetId(v string) *UpdateConfigAppRequest {
	s.Id = &v
	return s
}

func (s *UpdateConfigAppRequest) SetKey(v string) *UpdateConfigAppRequest {
	s.Key = &v
	return s
}

func (s *UpdateConfigAppRequest) SetParamVersion(v int64) *UpdateConfigAppRequest {
	s.ParamVersion = &v
	return s
}

func (s *UpdateConfigAppRequest) SetScope(v string) *UpdateConfigAppRequest {
	s.Scope = &v
	return s
}

func (s *UpdateConfigAppRequest) SetScopeId(v string) *UpdateConfigAppRequest {
	s.ScopeId = &v
	return s
}

func (s *UpdateConfigAppRequest) SetType(v string) *UpdateConfigAppRequest {
	s.Type = &v
	return s
}

func (s *UpdateConfigAppRequest) SetValue(v string) *UpdateConfigAppRequest {
	s.Value = &v
	return s
}

type UpdateConfigAppResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateConfigAppResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigAppResponse) GoString() string {
	return s.String()
}

func (s *UpdateConfigAppResponse) SetReqMsgId(v string) *UpdateConfigAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateConfigAppResponse) SetResultCode(v string) *UpdateConfigAppResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateConfigAppResponse) SetResultMsg(v string) *UpdateConfigAppResponse {
	s.ResultMsg = &v
	return s
}

type GetConfigAppRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用参数 id
	AppParamId *string `json:"app_param_id,omitempty" xml:"app_param_id,omitempty"`
}

func (s GetConfigAppRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConfigAppRequest) GoString() string {
	return s.String()
}

func (s *GetConfigAppRequest) SetAuthToken(v string) *GetConfigAppRequest {
	s.AuthToken = &v
	return s
}

func (s *GetConfigAppRequest) SetAppParamId(v string) *GetConfigAppRequest {
	s.AppParamId = &v
	return s
}

type GetConfigAppResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 获取到的应用参数
	Data *AppParam `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetConfigAppResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConfigAppResponse) GoString() string {
	return s.String()
}

func (s *GetConfigAppResponse) SetReqMsgId(v string) *GetConfigAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetConfigAppResponse) SetResultCode(v string) *GetConfigAppResponse {
	s.ResultCode = &v
	return s
}

func (s *GetConfigAppResponse) SetResultMsg(v string) *GetConfigAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetConfigAppResponse) SetData(v *AppParam) *GetConfigAppResponse {
	s.Data = v
	return s
}

type QueryConfigAppRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 模板参数保密级别
	DataLevel *string `json:"data_level,omitempty" xml:"data_level,omitempty"`
	// 参数名
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 排序规则数组，默认为 UTC_CREATED_DESC，即 根创建时间降序排序
	Orders []*string `json:"orders,omitempty" xml:"orders,omitempty" type:"Repeated"`
	// 当前页码，从1开始，默认为1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认为10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 根据参数类型进行查询
	ParamType *string `json:"param_type,omitempty" xml:"param_type,omitempty"`
	// 查询类型，支持精准查询、模糊查询、前缀模糊查询，这里默认为模糊查询；查询类型针对字段 app_name, key
	QueryType *string `json:"query_type,omitempty" xml:"query_type,omitempty"`
	// 该参数属于哪个 scope ，是个在多个 scope 中查询
	Scopes []*string `json:"scopes,omitempty" xml:"scopes,omitempty" type:"Repeated"`
	// 该参数在该 scope 中的 id
	ScopeId *string `json:"scope_id,omitempty" xml:"scope_id,omitempty"`
}

func (s QueryConfigAppRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConfigAppRequest) GoString() string {
	return s.String()
}

func (s *QueryConfigAppRequest) SetAuthToken(v string) *QueryConfigAppRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConfigAppRequest) SetAppName(v string) *QueryConfigAppRequest {
	s.AppName = &v
	return s
}

func (s *QueryConfigAppRequest) SetDataLevel(v string) *QueryConfigAppRequest {
	s.DataLevel = &v
	return s
}

func (s *QueryConfigAppRequest) SetKey(v string) *QueryConfigAppRequest {
	s.Key = &v
	return s
}

func (s *QueryConfigAppRequest) SetOrders(v []*string) *QueryConfigAppRequest {
	s.Orders = v
	return s
}

func (s *QueryConfigAppRequest) SetPageNum(v int64) *QueryConfigAppRequest {
	s.PageNum = &v
	return s
}

func (s *QueryConfigAppRequest) SetPageSize(v int64) *QueryConfigAppRequest {
	s.PageSize = &v
	return s
}

func (s *QueryConfigAppRequest) SetParamType(v string) *QueryConfigAppRequest {
	s.ParamType = &v
	return s
}

func (s *QueryConfigAppRequest) SetQueryType(v string) *QueryConfigAppRequest {
	s.QueryType = &v
	return s
}

func (s *QueryConfigAppRequest) SetScopes(v []*string) *QueryConfigAppRequest {
	s.Scopes = v
	return s
}

func (s *QueryConfigAppRequest) SetScopeId(v string) *QueryConfigAppRequest {
	s.ScopeId = &v
	return s
}

type QueryConfigAppResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 符合条件的应用参数列表
	Data []*AppParam `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 当前页
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 记录总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryConfigAppResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConfigAppResponse) GoString() string {
	return s.String()
}

func (s *QueryConfigAppResponse) SetReqMsgId(v string) *QueryConfigAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConfigAppResponse) SetResultCode(v string) *QueryConfigAppResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConfigAppResponse) SetResultMsg(v string) *QueryConfigAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConfigAppResponse) SetData(v []*AppParam) *QueryConfigAppResponse {
	s.Data = v
	return s
}

func (s *QueryConfigAppResponse) SetPageNum(v int64) *QueryConfigAppResponse {
	s.PageNum = &v
	return s
}

func (s *QueryConfigAppResponse) SetPageSize(v int64) *QueryConfigAppResponse {
	s.PageSize = &v
	return s
}

func (s *QueryConfigAppResponse) SetTotalCount(v int64) *QueryConfigAppResponse {
	s.TotalCount = &v
	return s
}

type SaveConfigTemplateRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 描述
	Comment *string `json:"comment,omitempty" xml:"comment,omitempty"`
	// 参数定义列表
	Params []*TemplateParamDef `json:"params,omitempty" xml:"params,omitempty" type:"Repeated"`
	// 参数模板 id
	TplId *string `json:"tpl_id,omitempty" xml:"tpl_id,omitempty"`
}

func (s SaveConfigTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveConfigTemplateRequest) GoString() string {
	return s.String()
}

func (s *SaveConfigTemplateRequest) SetAuthToken(v string) *SaveConfigTemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveConfigTemplateRequest) SetAppName(v string) *SaveConfigTemplateRequest {
	s.AppName = &v
	return s
}

func (s *SaveConfigTemplateRequest) SetComment(v string) *SaveConfigTemplateRequest {
	s.Comment = &v
	return s
}

func (s *SaveConfigTemplateRequest) SetParams(v []*TemplateParamDef) *SaveConfigTemplateRequest {
	s.Params = v
	return s
}

func (s *SaveConfigTemplateRequest) SetTplId(v string) *SaveConfigTemplateRequest {
	s.TplId = &v
	return s
}

type SaveConfigTemplateResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用参数模板 id
	TplId *string `json:"tpl_id,omitempty" xml:"tpl_id,omitempty"`
}

func (s SaveConfigTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveConfigTemplateResponse) GoString() string {
	return s.String()
}

func (s *SaveConfigTemplateResponse) SetReqMsgId(v string) *SaveConfigTemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveConfigTemplateResponse) SetResultCode(v string) *SaveConfigTemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveConfigTemplateResponse) SetResultMsg(v string) *SaveConfigTemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *SaveConfigTemplateResponse) SetTplId(v string) *SaveConfigTemplateResponse {
	s.TplId = &v
	return s
}

type CreateConfigTemplateRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 描述
	Comment *string `json:"comment,omitempty" xml:"comment,omitempty"`
	// 参数定义列表
	Params []*TemplateParamDef `json:"params,omitempty" xml:"params,omitempty" type:"Repeated"`
	// 参数模板 id
	TplId *string `json:"tpl_id,omitempty" xml:"tpl_id,omitempty"`
}

func (s CreateConfigTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateConfigTemplateRequest) SetAuthToken(v string) *CreateConfigTemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateConfigTemplateRequest) SetAppName(v string) *CreateConfigTemplateRequest {
	s.AppName = &v
	return s
}

func (s *CreateConfigTemplateRequest) SetComment(v string) *CreateConfigTemplateRequest {
	s.Comment = &v
	return s
}

func (s *CreateConfigTemplateRequest) SetParams(v []*TemplateParamDef) *CreateConfigTemplateRequest {
	s.Params = v
	return s
}

func (s *CreateConfigTemplateRequest) SetTplId(v string) *CreateConfigTemplateRequest {
	s.TplId = &v
	return s
}

type CreateConfigTemplateResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用参数模板 id
	TplId *string `json:"tpl_id,omitempty" xml:"tpl_id,omitempty"`
}

func (s CreateConfigTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateConfigTemplateResponse) SetReqMsgId(v string) *CreateConfigTemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateConfigTemplateResponse) SetResultCode(v string) *CreateConfigTemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateConfigTemplateResponse) SetResultMsg(v string) *CreateConfigTemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateConfigTemplateResponse) SetTplId(v string) *CreateConfigTemplateResponse {
	s.TplId = &v
	return s
}

type PullConfigTemplateRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// RELEAES：获取最新的、已经发布的参数模板；
	// DRAFT：获取最新的参数模板草稿；
	// 不指定：获取已存在的最新的参数模板，不区分已发布或者草稿态；
	State *string `json:"state,omitempty" xml:"state,omitempty"`
}

func (s PullConfigTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s PullConfigTemplateRequest) GoString() string {
	return s.String()
}

func (s *PullConfigTemplateRequest) SetAuthToken(v string) *PullConfigTemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *PullConfigTemplateRequest) SetAppName(v string) *PullConfigTemplateRequest {
	s.AppName = &v
	return s
}

func (s *PullConfigTemplateRequest) SetState(v string) *PullConfigTemplateRequest {
	s.State = &v
	return s
}

type PullConfigTemplateResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用参数模板
	Data *AppConfigTemplate `json:"data,omitempty" xml:"data,omitempty"`
}

func (s PullConfigTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s PullConfigTemplateResponse) GoString() string {
	return s.String()
}

func (s *PullConfigTemplateResponse) SetReqMsgId(v string) *PullConfigTemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PullConfigTemplateResponse) SetResultCode(v string) *PullConfigTemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *PullConfigTemplateResponse) SetResultMsg(v string) *PullConfigTemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *PullConfigTemplateResponse) SetData(v *AppConfigTemplate) *PullConfigTemplateResponse {
	s.Data = v
	return s
}

type DeleteConfigTemplatedraftRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 要删除的应用参数模板 id
	TplId *string `json:"tpl_id,omitempty" xml:"tpl_id,omitempty"`
}

func (s DeleteConfigTemplatedraftRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigTemplatedraftRequest) GoString() string {
	return s.String()
}

func (s *DeleteConfigTemplatedraftRequest) SetAuthToken(v string) *DeleteConfigTemplatedraftRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteConfigTemplatedraftRequest) SetTplId(v string) *DeleteConfigTemplatedraftRequest {
	s.TplId = &v
	return s
}

type DeleteConfigTemplatedraftResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteConfigTemplatedraftResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigTemplatedraftResponse) GoString() string {
	return s.String()
}

func (s *DeleteConfigTemplatedraftResponse) SetReqMsgId(v string) *DeleteConfigTemplatedraftResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteConfigTemplatedraftResponse) SetResultCode(v string) *DeleteConfigTemplatedraftResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteConfigTemplatedraftResponse) SetResultMsg(v string) *DeleteConfigTemplatedraftResponse {
	s.ResultMsg = &v
	return s
}

type GetConfigTemplateRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用参数模板 id
	TplId *string `json:"tpl_id,omitempty" xml:"tpl_id,omitempty"`
}

func (s GetConfigTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConfigTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetConfigTemplateRequest) SetAuthToken(v string) *GetConfigTemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *GetConfigTemplateRequest) SetTplId(v string) *GetConfigTemplateRequest {
	s.TplId = &v
	return s
}

type GetConfigTemplateResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用参数模板
	Data *AppConfigTemplate `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetConfigTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConfigTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetConfigTemplateResponse) SetReqMsgId(v string) *GetConfigTemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetConfigTemplateResponse) SetResultCode(v string) *GetConfigTemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *GetConfigTemplateResponse) SetResultMsg(v string) *GetConfigTemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetConfigTemplateResponse) SetData(v *AppConfigTemplate) *GetConfigTemplateResponse {
	s.Data = v
	return s
}

type QueryConfigTemplateRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 排序规则数组，默认为 UTC_MODIFIED_DESC，即 根据修改时间降序排序
	Orders []*string `json:"orders,omitempty" xml:"orders,omitempty" type:"Repeated"`
	// 当前页码，从1开始，默认为1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认为10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询类型，支持精准查询、模糊查询、前缀模糊查询，这里默认为模糊查询；查询类型针对字段 app_name
	QueryType *string `json:"query_type,omitempty" xml:"query_type,omitempty"`
	// 模板状态，DRAFT 草稿，RELEASE 已发布，发布后才会生成 version，否则为空
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 版本
	TplVersion *string `json:"tpl_version,omitempty" xml:"tpl_version,omitempty"`
}

func (s QueryConfigTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConfigTemplateRequest) GoString() string {
	return s.String()
}

func (s *QueryConfigTemplateRequest) SetAuthToken(v string) *QueryConfigTemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryConfigTemplateRequest) SetAppName(v string) *QueryConfigTemplateRequest {
	s.AppName = &v
	return s
}

func (s *QueryConfigTemplateRequest) SetOrders(v []*string) *QueryConfigTemplateRequest {
	s.Orders = v
	return s
}

func (s *QueryConfigTemplateRequest) SetPageNum(v int64) *QueryConfigTemplateRequest {
	s.PageNum = &v
	return s
}

func (s *QueryConfigTemplateRequest) SetPageSize(v int64) *QueryConfigTemplateRequest {
	s.PageSize = &v
	return s
}

func (s *QueryConfigTemplateRequest) SetQueryType(v string) *QueryConfigTemplateRequest {
	s.QueryType = &v
	return s
}

func (s *QueryConfigTemplateRequest) SetState(v string) *QueryConfigTemplateRequest {
	s.State = &v
	return s
}

func (s *QueryConfigTemplateRequest) SetTplVersion(v string) *QueryConfigTemplateRequest {
	s.TplVersion = &v
	return s
}

type QueryConfigTemplateResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 符合条件的参数配置模板
	Data []*AppConfigTemplate `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 当前页
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 记录总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryConfigTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConfigTemplateResponse) GoString() string {
	return s.String()
}

func (s *QueryConfigTemplateResponse) SetReqMsgId(v string) *QueryConfigTemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryConfigTemplateResponse) SetResultCode(v string) *QueryConfigTemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryConfigTemplateResponse) SetResultMsg(v string) *QueryConfigTemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryConfigTemplateResponse) SetData(v []*AppConfigTemplate) *QueryConfigTemplateResponse {
	s.Data = v
	return s
}

func (s *QueryConfigTemplateResponse) SetPageNum(v int64) *QueryConfigTemplateResponse {
	s.PageNum = &v
	return s
}

func (s *QueryConfigTemplateResponse) SetPageSize(v int64) *QueryConfigTemplateResponse {
	s.PageSize = &v
	return s
}

func (s *QueryConfigTemplateResponse) SetTotalCount(v int64) *QueryConfigTemplateResponse {
	s.TotalCount = &v
	return s
}

type ExecConfigParseRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 参数定义列表
	Params []*TemplateParamDef `json:"params,omitempty" xml:"params,omitempty" type:"Repeated"`
	// 工作空间组 id
	WorkspaceGroupId *string `json:"workspace_group_id,omitempty" xml:"workspace_group_id,omitempty"`
	// 工作空间 id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s ExecConfigParseRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecConfigParseRequest) GoString() string {
	return s.String()
}

func (s *ExecConfigParseRequest) SetAuthToken(v string) *ExecConfigParseRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecConfigParseRequest) SetAppName(v string) *ExecConfigParseRequest {
	s.AppName = &v
	return s
}

func (s *ExecConfigParseRequest) SetParams(v []*TemplateParamDef) *ExecConfigParseRequest {
	s.Params = v
	return s
}

func (s *ExecConfigParseRequest) SetWorkspaceGroupId(v string) *ExecConfigParseRequest {
	s.WorkspaceGroupId = &v
	return s
}

func (s *ExecConfigParseRequest) SetWorkspaceId(v string) *ExecConfigParseRequest {
	s.WorkspaceId = &v
	return s
}

type ExecConfigParseResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 渲染后的参数列表
	Data []*RenderParam `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ExecConfigParseResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecConfigParseResponse) GoString() string {
	return s.String()
}

func (s *ExecConfigParseResponse) SetReqMsgId(v string) *ExecConfigParseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecConfigParseResponse) SetResultCode(v string) *ExecConfigParseResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecConfigParseResponse) SetResultMsg(v string) *ExecConfigParseResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecConfigParseResponse) SetData(v []*RenderParam) *ExecConfigParseResponse {
	s.Data = v
	return s
}

type BatchcreateConfigGlobalRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 要创建的全局参数列表
	Items []*GlobalParam `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
}

func (s BatchcreateConfigGlobalRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateConfigGlobalRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateConfigGlobalRequest) SetAuthToken(v string) *BatchcreateConfigGlobalRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateConfigGlobalRequest) SetItems(v []*GlobalParam) *BatchcreateConfigGlobalRequest {
	s.Items = v
	return s
}

type BatchcreateConfigGlobalResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchcreateConfigGlobalResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateConfigGlobalResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateConfigGlobalResponse) SetReqMsgId(v string) *BatchcreateConfigGlobalResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateConfigGlobalResponse) SetResultCode(v string) *BatchcreateConfigGlobalResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateConfigGlobalResponse) SetResultMsg(v string) *BatchcreateConfigGlobalResponse {
	s.ResultMsg = &v
	return s
}

type BatchcreateConfigAppRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 要创建的应用参数列表
	Items []*AppParam `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
}

func (s BatchcreateConfigAppRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateConfigAppRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateConfigAppRequest) SetAuthToken(v string) *BatchcreateConfigAppRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateConfigAppRequest) SetItems(v []*AppParam) *BatchcreateConfigAppRequest {
	s.Items = v
	return s
}

type BatchcreateConfigAppResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchcreateConfigAppResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateConfigAppResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateConfigAppResponse) SetReqMsgId(v string) *BatchcreateConfigAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateConfigAppResponse) SetResultCode(v string) *BatchcreateConfigAppResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateConfigAppResponse) SetResultMsg(v string) *BatchcreateConfigAppResponse {
	s.ResultMsg = &v
	return s
}

type GetConfigSitetreeRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s GetConfigSitetreeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConfigSitetreeRequest) GoString() string {
	return s.String()
}

func (s *GetConfigSitetreeRequest) SetAuthToken(v string) *GetConfigSitetreeRequest {
	s.AuthToken = &v
	return s
}

type GetConfigSitetreeResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前租户下的所有 region 列表
	Data []*RegionView `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s GetConfigSitetreeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConfigSitetreeResponse) GoString() string {
	return s.String()
}

func (s *GetConfigSitetreeResponse) SetReqMsgId(v string) *GetConfigSitetreeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetConfigSitetreeResponse) SetResultCode(v string) *GetConfigSitetreeResponse {
	s.ResultCode = &v
	return s
}

func (s *GetConfigSitetreeResponse) SetResultMsg(v string) *GetConfigSitetreeResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetConfigSitetreeResponse) SetData(v []*RegionView) *GetConfigSitetreeResponse {
	s.Data = v
	return s
}

type GetConfigTenanttreeRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s GetConfigTenanttreeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConfigTenanttreeRequest) GoString() string {
	return s.String()
}

func (s *GetConfigTenanttreeRequest) SetAuthToken(v string) *GetConfigTenanttreeRequest {
	s.AuthToken = &v
	return s
}

type GetConfigTenanttreeResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前租户下的所有 workspaceGroup 列表
	Data []*WorkspaceGroupView `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s GetConfigTenanttreeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConfigTenanttreeResponse) GoString() string {
	return s.String()
}

func (s *GetConfigTenanttreeResponse) SetReqMsgId(v string) *GetConfigTenanttreeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetConfigTenanttreeResponse) SetResultCode(v string) *GetConfigTenanttreeResponse {
	s.ResultCode = &v
	return s
}

func (s *GetConfigTenanttreeResponse) SetResultMsg(v string) *GetConfigTenanttreeResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetConfigTenanttreeResponse) SetData(v []*WorkspaceGroupView) *GetConfigTenanttreeResponse {
	s.Data = v
	return s
}

type ExistConfigAppRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 应用参数名称，同一个 appName + scope + scopeId 下不能有同名的应用参数
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 作用域 id 数组，比如作用域类型（type）是 workspace，那么 scopeId 就是 workspace 的 id
	ScopeIds []*string `json:"scope_ids,omitempty" xml:"scope_ids,omitempty" type:"Repeated"`
	// 作用域类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ExistConfigAppRequest) String() string {
	return tea.Prettify(s)
}

func (s ExistConfigAppRequest) GoString() string {
	return s.String()
}

func (s *ExistConfigAppRequest) SetAuthToken(v string) *ExistConfigAppRequest {
	s.AuthToken = &v
	return s
}

func (s *ExistConfigAppRequest) SetAppName(v string) *ExistConfigAppRequest {
	s.AppName = &v
	return s
}

func (s *ExistConfigAppRequest) SetKey(v string) *ExistConfigAppRequest {
	s.Key = &v
	return s
}

func (s *ExistConfigAppRequest) SetScopeIds(v []*string) *ExistConfigAppRequest {
	s.ScopeIds = v
	return s
}

func (s *ExistConfigAppRequest) SetType(v string) *ExistConfigAppRequest {
	s.Type = &v
	return s
}

type ExistConfigAppResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用参数是否已存在的数组，和入参顺序一一对应
	Data []*bool `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ExistConfigAppResponse) String() string {
	return tea.Prettify(s)
}

func (s ExistConfigAppResponse) GoString() string {
	return s.String()
}

func (s *ExistConfigAppResponse) SetReqMsgId(v string) *ExistConfigAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExistConfigAppResponse) SetResultCode(v string) *ExistConfigAppResponse {
	s.ResultCode = &v
	return s
}

func (s *ExistConfigAppResponse) SetResultMsg(v string) *ExistConfigAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExistConfigAppResponse) SetData(v []*bool) *ExistConfigAppResponse {
	s.Data = v
	return s
}

type ExistConfigGlobalRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 全局参数名称，同一个 scope + scopeId 下不能有同名的全局参数
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 作用域 id 数组，比如作用域类型（type）是 workspace，那么 scopeId 就是 workspace 的 id
	ScopeIds []*string `json:"scope_ids,omitempty" xml:"scope_ids,omitempty" type:"Repeated"`
	// 作用域类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ExistConfigGlobalRequest) String() string {
	return tea.Prettify(s)
}

func (s ExistConfigGlobalRequest) GoString() string {
	return s.String()
}

func (s *ExistConfigGlobalRequest) SetAuthToken(v string) *ExistConfigGlobalRequest {
	s.AuthToken = &v
	return s
}

func (s *ExistConfigGlobalRequest) SetKey(v string) *ExistConfigGlobalRequest {
	s.Key = &v
	return s
}

func (s *ExistConfigGlobalRequest) SetScopeIds(v []*string) *ExistConfigGlobalRequest {
	s.ScopeIds = v
	return s
}

func (s *ExistConfigGlobalRequest) SetType(v string) *ExistConfigGlobalRequest {
	s.Type = &v
	return s
}

type ExistConfigGlobalResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用参数是否已存在的数组，和入参顺序一一对应
	Data []*bool `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ExistConfigGlobalResponse) String() string {
	return tea.Prettify(s)
}

func (s ExistConfigGlobalResponse) GoString() string {
	return s.String()
}

func (s *ExistConfigGlobalResponse) SetReqMsgId(v string) *ExistConfigGlobalResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExistConfigGlobalResponse) SetResultCode(v string) *ExistConfigGlobalResponse {
	s.ResultCode = &v
	return s
}

func (s *ExistConfigGlobalResponse) SetResultMsg(v string) *ExistConfigGlobalResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExistConfigGlobalResponse) SetData(v []*bool) *ExistConfigGlobalResponse {
	s.Data = v
	return s
}

type ListWorkspacegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 目标租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
}

func (s ListWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *ListWorkspacegroupRequest) SetAuthToken(v string) *ListWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *ListWorkspacegroupRequest) SetTenant(v string) *ListWorkspacegroupRequest {
	s.Tenant = &v
	return s
}

type ListWorkspacegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 环境列表
	WorkspaceGroups []*WorkspaceGroup `json:"workspace_groups,omitempty" xml:"workspace_groups,omitempty" type:"Repeated"`
}

func (s ListWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *ListWorkspacegroupResponse) SetReqMsgId(v string) *ListWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListWorkspacegroupResponse) SetResultCode(v string) *ListWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *ListWorkspacegroupResponse) SetResultMsg(v string) *ListWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListWorkspacegroupResponse) SetWorkspaceGroups(v []*WorkspaceGroup) *ListWorkspacegroupResponse {
	s.WorkspaceGroups = v
	return s
}

type GetWorkspacegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 目标租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// 目标环境名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
}

func (s GetWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *GetWorkspacegroupRequest) SetAuthToken(v string) *GetWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *GetWorkspacegroupRequest) SetTenant(v string) *GetWorkspacegroupRequest {
	s.Tenant = &v
	return s
}

func (s *GetWorkspacegroupRequest) SetWorkspaceGroup(v string) *GetWorkspacegroupRequest {
	s.WorkspaceGroup = &v
	return s
}

type GetWorkspacegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 环境名称
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 环境显示名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 环境状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// 工作空间名称列表
	Workspaces []*string `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s GetWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *GetWorkspacegroupResponse) SetReqMsgId(v string) *GetWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetWorkspacegroupResponse) SetResultCode(v string) *GetWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *GetWorkspacegroupResponse) SetResultMsg(v string) *GetWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetWorkspacegroupResponse) SetId(v string) *GetWorkspacegroupResponse {
	s.Id = &v
	return s
}

func (s *GetWorkspacegroupResponse) SetName(v string) *GetWorkspacegroupResponse {
	s.Name = &v
	return s
}

func (s *GetWorkspacegroupResponse) SetStatus(v string) *GetWorkspacegroupResponse {
	s.Status = &v
	return s
}

func (s *GetWorkspacegroupResponse) SetTenant(v string) *GetWorkspacegroupResponse {
	s.Tenant = &v
	return s
}

func (s *GetWorkspacegroupResponse) SetWorkspaces(v []*string) *GetWorkspacegroupResponse {
	s.Workspaces = v
	return s
}

type QueryCellRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 目标租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// 目标工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// 目标环境名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
}

func (s QueryCellRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCellRequest) GoString() string {
	return s.String()
}

func (s *QueryCellRequest) SetAuthToken(v string) *QueryCellRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCellRequest) SetTenant(v string) *QueryCellRequest {
	s.Tenant = &v
	return s
}

func (s *QueryCellRequest) SetWorkspace(v string) *QueryCellRequest {
	s.Workspace = &v
	return s
}

func (s *QueryCellRequest) SetWorkspaceGroup(v string) *QueryCellRequest {
	s.WorkspaceGroup = &v
	return s
}

type QueryCellResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 部署单元列表
	Cells []*Cell `json:"cells,omitempty" xml:"cells,omitempty" type:"Repeated"`
}

func (s QueryCellResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCellResponse) GoString() string {
	return s.String()
}

func (s *QueryCellResponse) SetReqMsgId(v string) *QueryCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCellResponse) SetResultCode(v string) *QueryCellResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCellResponse) SetResultMsg(v string) *QueryCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCellResponse) SetCells(v []*Cell) *QueryCellResponse {
	s.Cells = v
	return s
}

type QueryWorkspaceDeltaRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 结束时间点
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// 开始时间点
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
}

func (s QueryWorkspaceDeltaRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryWorkspaceDeltaRequest) GoString() string {
	return s.String()
}

func (s *QueryWorkspaceDeltaRequest) SetAuthToken(v string) *QueryWorkspaceDeltaRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryWorkspaceDeltaRequest) SetEndTime(v string) *QueryWorkspaceDeltaRequest {
	s.EndTime = &v
	return s
}

func (s *QueryWorkspaceDeltaRequest) SetStartTime(v string) *QueryWorkspaceDeltaRequest {
	s.StartTime = &v
	return s
}

type QueryWorkspaceDeltaResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发生变化的workspace列表
	WorkspaceDeltaInfos []*WorkspaceDeltaInfo `json:"workspace_delta_infos,omitempty" xml:"workspace_delta_infos,omitempty" type:"Repeated"`
}

func (s QueryWorkspaceDeltaResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryWorkspaceDeltaResponse) GoString() string {
	return s.String()
}

func (s *QueryWorkspaceDeltaResponse) SetReqMsgId(v string) *QueryWorkspaceDeltaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryWorkspaceDeltaResponse) SetResultCode(v string) *QueryWorkspaceDeltaResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryWorkspaceDeltaResponse) SetResultMsg(v string) *QueryWorkspaceDeltaResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryWorkspaceDeltaResponse) SetWorkspaceDeltaInfos(v []*WorkspaceDeltaInfo) *QueryWorkspaceDeltaResponse {
	s.WorkspaceDeltaInfos = v
	return s
}

type CreateWorkspacegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组显示名称。
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// 域名后缀。
	DomainSuffix *string `json:"domain_suffix,omitempty" xml:"domain_suffix,omitempty"`
	// 工作空间组唯一标识。
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 发布部署模式。
	ReleaseMode *string `json:"release_mode,omitempty" xml:"release_mode,omitempty"`
	// 包含工作空间列表。
	Workspaces []*string `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s CreateWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *CreateWorkspacegroupRequest) SetAuthToken(v string) *CreateWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateWorkspacegroupRequest) SetDisplayName(v string) *CreateWorkspacegroupRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateWorkspacegroupRequest) SetDomainSuffix(v string) *CreateWorkspacegroupRequest {
	s.DomainSuffix = &v
	return s
}

func (s *CreateWorkspacegroupRequest) SetName(v string) *CreateWorkspacegroupRequest {
	s.Name = &v
	return s
}

func (s *CreateWorkspacegroupRequest) SetReleaseMode(v string) *CreateWorkspacegroupRequest {
	s.ReleaseMode = &v
	return s
}

func (s *CreateWorkspacegroupRequest) SetWorkspaces(v []*string) *CreateWorkspacegroupRequest {
	s.Workspaces = v
	return s
}

type CreateWorkspacegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspaceGroupName
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *CreateWorkspacegroupResponse) SetReqMsgId(v string) *CreateWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateWorkspacegroupResponse) SetResultCode(v string) *CreateWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateWorkspacegroupResponse) SetResultMsg(v string) *CreateWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateWorkspacegroupResponse) SetData(v string) *CreateWorkspacegroupResponse {
	s.Data = &v
	return s
}

type QueryWorkspacegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 环境组名称（唯一标识）
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s QueryWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *QueryWorkspacegroupRequest) SetAuthToken(v string) *QueryWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryWorkspacegroupRequest) SetName(v string) *QueryWorkspacegroupRequest {
	s.Name = &v
	return s
}

type QueryWorkspacegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 工作空间组列表。
	WorkspaceGroups []*WorkspaceGroupInfo `json:"workspace_groups,omitempty" xml:"workspace_groups,omitempty" type:"Repeated"`
}

func (s QueryWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *QueryWorkspacegroupResponse) SetReqMsgId(v string) *QueryWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryWorkspacegroupResponse) SetResultCode(v string) *QueryWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryWorkspacegroupResponse) SetResultMsg(v string) *QueryWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryWorkspacegroupResponse) SetWorkspaceGroups(v []*WorkspaceGroupInfo) *QueryWorkspacegroupResponse {
	s.WorkspaceGroups = v
	return s
}

type DeleteWorkspacegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组名称(唯一标识)。
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s DeleteWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteWorkspacegroupRequest) SetAuthToken(v string) *DeleteWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteWorkspacegroupRequest) SetName(v string) *DeleteWorkspacegroupRequest {
	s.Name = &v
	return s
}

type DeleteWorkspacegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteWorkspacegroupResponse) SetReqMsgId(v string) *DeleteWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteWorkspacegroupResponse) SetResultCode(v string) *DeleteWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteWorkspacegroupResponse) SetResultMsg(v string) *DeleteWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

type GetSingleworkspaceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属工作空间唯一标识
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetSingleworkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSingleworkspaceRequest) GoString() string {
	return s.String()
}

func (s *GetSingleworkspaceRequest) SetAuthToken(v string) *GetSingleworkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSingleworkspaceRequest) SetWorkspace(v string) *GetSingleworkspaceRequest {
	s.Workspace = &v
	return s
}

type GetSingleworkspaceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建时间。
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// workspace工作空间的显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// workspace名称。
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 最近修改时间。
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// workspace显示名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 网络类型。
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// region id
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// 所属租户信息。
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// 工作空间类型：标准工作空间；单元化工作空间
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// vpc iaas id
	VpcIaasId *string `json:"vpc_iaas_id,omitempty" xml:"vpc_iaas_id,omitempty"`
	// workspace所属环境名称[可能不存在]。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
	// workspace对应的zoneId列表。
	Zones []*string `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
}

func (s GetSingleworkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSingleworkspaceResponse) GoString() string {
	return s.String()
}

func (s *GetSingleworkspaceResponse) SetReqMsgId(v string) *GetSingleworkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSingleworkspaceResponse) SetResultCode(v string) *GetSingleworkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSingleworkspaceResponse) SetResultMsg(v string) *GetSingleworkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSingleworkspaceResponse) SetCreatedTime(v string) *GetSingleworkspaceResponse {
	s.CreatedTime = &v
	return s
}

func (s *GetSingleworkspaceResponse) SetDisplayName(v string) *GetSingleworkspaceResponse {
	s.DisplayName = &v
	return s
}

func (s *GetSingleworkspaceResponse) SetId(v string) *GetSingleworkspaceResponse {
	s.Id = &v
	return s
}

func (s *GetSingleworkspaceResponse) SetModifiedTime(v string) *GetSingleworkspaceResponse {
	s.ModifiedTime = &v
	return s
}

func (s *GetSingleworkspaceResponse) SetName(v string) *GetSingleworkspaceResponse {
	s.Name = &v
	return s
}

func (s *GetSingleworkspaceResponse) SetNetworkType(v string) *GetSingleworkspaceResponse {
	s.NetworkType = &v
	return s
}

func (s *GetSingleworkspaceResponse) SetRegion(v string) *GetSingleworkspaceResponse {
	s.Region = &v
	return s
}

func (s *GetSingleworkspaceResponse) SetTenant(v string) *GetSingleworkspaceResponse {
	s.Tenant = &v
	return s
}

func (s *GetSingleworkspaceResponse) SetType(v string) *GetSingleworkspaceResponse {
	s.Type = &v
	return s
}

func (s *GetSingleworkspaceResponse) SetVpcIaasId(v string) *GetSingleworkspaceResponse {
	s.VpcIaasId = &v
	return s
}

func (s *GetSingleworkspaceResponse) SetWorkspaceGroup(v string) *GetSingleworkspaceResponse {
	s.WorkspaceGroup = &v
	return s
}

func (s *GetSingleworkspaceResponse) SetZones(v []*string) *GetSingleworkspaceResponse {
	s.Zones = v
	return s
}

type GetSingleworkspacegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 环境名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetSingleworkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSingleworkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *GetSingleworkspacegroupRequest) SetAuthToken(v string) *GetSingleworkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSingleworkspacegroupRequest) SetName(v string) *GetSingleworkspacegroupRequest {
	s.Name = &v
	return s
}

type GetSingleworkspacegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 工作空间组标识。
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// 工作空间组显示名称。
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 部署模式。
	ReleaseMode *string `json:"release_mode,omitempty" xml:"release_mode,omitempty"`
	// 域名后缀。
	DomainSuffix *string `json:"domain_suffix,omitempty" xml:"domain_suffix,omitempty"`
	// 包含工作空间名称列表。
	Workspaces []*string `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s GetSingleworkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSingleworkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *GetSingleworkspacegroupResponse) SetReqMsgId(v string) *GetSingleworkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSingleworkspacegroupResponse) SetResultCode(v string) *GetSingleworkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSingleworkspacegroupResponse) SetResultMsg(v string) *GetSingleworkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSingleworkspacegroupResponse) SetIdentity(v string) *GetSingleworkspacegroupResponse {
	s.Identity = &v
	return s
}

func (s *GetSingleworkspacegroupResponse) SetName(v string) *GetSingleworkspacegroupResponse {
	s.Name = &v
	return s
}

func (s *GetSingleworkspacegroupResponse) SetReleaseMode(v string) *GetSingleworkspacegroupResponse {
	s.ReleaseMode = &v
	return s
}

func (s *GetSingleworkspacegroupResponse) SetDomainSuffix(v string) *GetSingleworkspacegroupResponse {
	s.DomainSuffix = &v
	return s
}

func (s *GetSingleworkspacegroupResponse) SetWorkspaces(v []*string) *GetSingleworkspacegroupResponse {
	s.Workspaces = v
	return s
}

type ListCellRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 目标工作空间名称。
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// 目标环境名称。
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
}

func (s ListCellRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCellRequest) GoString() string {
	return s.String()
}

func (s *ListCellRequest) SetAuthToken(v string) *ListCellRequest {
	s.AuthToken = &v
	return s
}

func (s *ListCellRequest) SetWorkspace(v string) *ListCellRequest {
	s.Workspace = &v
	return s
}

func (s *ListCellRequest) SetWorkspaceGroup(v string) *ListCellRequest {
	s.WorkspaceGroup = &v
	return s
}

type ListCellResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 部署单元列表。
	Cells []*Cell `json:"cells,omitempty" xml:"cells,omitempty" type:"Repeated"`
}

func (s ListCellResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCellResponse) GoString() string {
	return s.String()
}

func (s *ListCellResponse) SetReqMsgId(v string) *ListCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListCellResponse) SetResultCode(v string) *ListCellResponse {
	s.ResultCode = &v
	return s
}

func (s *ListCellResponse) SetResultMsg(v string) *ListCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListCellResponse) SetCells(v []*Cell) *ListCellResponse {
	s.Cells = v
	return s
}

type CreateSingleworkspaceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace 显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// workspace 唯一标识符
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// VPC ｜ Classic
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// 地域
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// 枚举值：
	//   标准工作空间NORMAL;
	//   单元化工作空间UNIT
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 可用区
	Zones []*string `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
}

func (s CreateSingleworkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSingleworkspaceRequest) GoString() string {
	return s.String()
}

func (s *CreateSingleworkspaceRequest) SetAuthToken(v string) *CreateSingleworkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSingleworkspaceRequest) SetDisplayName(v string) *CreateSingleworkspaceRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateSingleworkspaceRequest) SetName(v string) *CreateSingleworkspaceRequest {
	s.Name = &v
	return s
}

func (s *CreateSingleworkspaceRequest) SetNetworkType(v string) *CreateSingleworkspaceRequest {
	s.NetworkType = &v
	return s
}

func (s *CreateSingleworkspaceRequest) SetRegion(v string) *CreateSingleworkspaceRequest {
	s.Region = &v
	return s
}

func (s *CreateSingleworkspaceRequest) SetType(v string) *CreateSingleworkspaceRequest {
	s.Type = &v
	return s
}

func (s *CreateSingleworkspaceRequest) SetZones(v []*string) *CreateSingleworkspaceRequest {
	s.Zones = v
	return s
}

type CreateSingleworkspaceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspace id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s CreateSingleworkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSingleworkspaceResponse) GoString() string {
	return s.String()
}

func (s *CreateSingleworkspaceResponse) SetReqMsgId(v string) *CreateSingleworkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSingleworkspaceResponse) SetResultCode(v string) *CreateSingleworkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSingleworkspaceResponse) SetResultMsg(v string) *CreateSingleworkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateSingleworkspaceResponse) SetWorkspaceId(v string) *CreateSingleworkspaceResponse {
	s.WorkspaceId = &v
	return s
}

type DeleteSingleworkspaceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s DeleteSingleworkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSingleworkspaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteSingleworkspaceRequest) SetAuthToken(v string) *DeleteSingleworkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSingleworkspaceRequest) SetWorkspaceId(v string) *DeleteSingleworkspaceRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteSingleworkspaceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 删除是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteSingleworkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSingleworkspaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteSingleworkspaceResponse) SetReqMsgId(v string) *DeleteSingleworkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSingleworkspaceResponse) SetResultCode(v string) *DeleteSingleworkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSingleworkspaceResponse) SetResultMsg(v string) *DeleteSingleworkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteSingleworkspaceResponse) SetSuccess(v bool) *DeleteSingleworkspaceResponse {
	s.Success = &v
	return s
}

type CreateVpcRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// VPC所在的地域
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 创建的VPC的ID
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty"`
	//
	// 所属环境id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// vpc名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s CreateVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVpcRequest) GoString() string {
	return s.String()
}

func (s *CreateVpcRequest) SetAuthToken(v string) *CreateVpcRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateVpcRequest) SetRegionId(v string) *CreateVpcRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVpcRequest) SetTenantId(v string) *CreateVpcRequest {
	s.TenantId = &v
	return s
}

func (s *CreateVpcRequest) SetVpcId(v string) *CreateVpcRequest {
	s.VpcId = &v
	return s
}

func (s *CreateVpcRequest) SetWorkspaceId(v string) *CreateVpcRequest {
	s.WorkspaceId = &v
	return s
}

func (s *CreateVpcRequest) SetName(v string) *CreateVpcRequest {
	s.Name = &v
	return s
}

type CreateVpcResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s CreateVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVpcResponse) GoString() string {
	return s.String()
}

func (s *CreateVpcResponse) SetReqMsgId(v string) *CreateVpcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateVpcResponse) SetResultCode(v string) *CreateVpcResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateVpcResponse) SetResultMsg(v string) *CreateVpcResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateVpcResponse) SetId(v string) *CreateVpcResponse {
	s.Id = &v
	return s
}

type UpdateWorkspacegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 域名后缀。
	DomainSuffix *string `json:"domain_suffix,omitempty" xml:"domain_suffix,omitempty"`
	// workspacegroup名称，唯一标识一个环境。
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// workspacegroup显示名称。
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// 包含工作空间名称。
	Workspaces []*string `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s UpdateWorkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateWorkspacegroupRequest) SetAuthToken(v string) *UpdateWorkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateWorkspacegroupRequest) SetDomainSuffix(v string) *UpdateWorkspacegroupRequest {
	s.DomainSuffix = &v
	return s
}

func (s *UpdateWorkspacegroupRequest) SetName(v string) *UpdateWorkspacegroupRequest {
	s.Name = &v
	return s
}

func (s *UpdateWorkspacegroupRequest) SetDisplayName(v string) *UpdateWorkspacegroupRequest {
	s.DisplayName = &v
	return s
}

func (s *UpdateWorkspacegroupRequest) SetWorkspaces(v []*string) *UpdateWorkspacegroupRequest {
	s.Workspaces = v
	return s
}

type UpdateWorkspacegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateWorkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateWorkspacegroupResponse) SetReqMsgId(v string) *UpdateWorkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateWorkspacegroupResponse) SetResultCode(v string) *UpdateWorkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateWorkspacegroupResponse) SetResultMsg(v string) *UpdateWorkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSingleworkspaceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace 显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// VPC ｜ Classic
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// 地域id
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// 可用区id列表
	Zones []*string `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
	// 环境唯一标识
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s UpdateSingleworkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSingleworkspaceRequest) GoString() string {
	return s.String()
}

func (s *UpdateSingleworkspaceRequest) SetAuthToken(v string) *UpdateSingleworkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSingleworkspaceRequest) SetDisplayName(v string) *UpdateSingleworkspaceRequest {
	s.DisplayName = &v
	return s
}

func (s *UpdateSingleworkspaceRequest) SetNetworkType(v string) *UpdateSingleworkspaceRequest {
	s.NetworkType = &v
	return s
}

func (s *UpdateSingleworkspaceRequest) SetRegion(v string) *UpdateSingleworkspaceRequest {
	s.Region = &v
	return s
}

func (s *UpdateSingleworkspaceRequest) SetZones(v []*string) *UpdateSingleworkspaceRequest {
	s.Zones = v
	return s
}

func (s *UpdateSingleworkspaceRequest) SetName(v string) *UpdateSingleworkspaceRequest {
	s.Name = &v
	return s
}

type UpdateSingleworkspaceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 更新成功或失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateSingleworkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSingleworkspaceResponse) GoString() string {
	return s.String()
}

func (s *UpdateSingleworkspaceResponse) SetReqMsgId(v string) *UpdateSingleworkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSingleworkspaceResponse) SetResultCode(v string) *UpdateSingleworkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSingleworkspaceResponse) SetResultMsg(v string) *UpdateSingleworkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateSingleworkspaceResponse) SetSuccess(v bool) *UpdateSingleworkspaceResponse {
	s.Success = &v
	return s
}

type ListRegionRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s ListRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRegionRequest) GoString() string {
	return s.String()
}

func (s *ListRegionRequest) SetAuthToken(v string) *ListRegionRequest {
	s.AuthToken = &v
	return s
}

type ListRegionResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// region list
	Data []*RegionMeta `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRegionResponse) GoString() string {
	return s.String()
}

func (s *ListRegionResponse) SetReqMsgId(v string) *ListRegionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListRegionResponse) SetResultCode(v string) *ListRegionResponse {
	s.ResultCode = &v
	return s
}

func (s *ListRegionResponse) SetResultMsg(v string) *ListRegionResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListRegionResponse) SetData(v []*RegionMeta) *ListRegionResponse {
	s.Data = v
	return s
}

type ListZoneRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region identity
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
}

func (s ListZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s ListZoneRequest) GoString() string {
	return s.String()
}

func (s *ListZoneRequest) SetAuthToken(v string) *ListZoneRequest {
	s.AuthToken = &v
	return s
}

func (s *ListZoneRequest) SetRegion(v string) *ListZoneRequest {
	s.Region = &v
	return s
}

type ListZoneResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// zone list
	Data []*Zone `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s ListZoneResponse) GoString() string {
	return s.String()
}

func (s *ListZoneResponse) SetReqMsgId(v string) *ListZoneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListZoneResponse) SetResultCode(v string) *ListZoneResponse {
	s.ResultCode = &v
	return s
}

func (s *ListZoneResponse) SetResultMsg(v string) *ListZoneResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListZoneResponse) SetData(v []*Zone) *ListZoneResponse {
	s.Data = v
	return s
}

type CreateCellgroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属idc
	Datacenter *string `json:"datacenter,omitempty" xml:"datacenter,omitempty"`
	// 默认全局域
	DefaultGzone *string `json:"default_gzone,omitempty" xml:"default_gzone,omitempty"`
	// 逻辑单元名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// 逻辑单元类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 所属环境组名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
}

func (s CreateCellgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCellgroupRequest) GoString() string {
	return s.String()
}

func (s *CreateCellgroupRequest) SetAuthToken(v string) *CreateCellgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateCellgroupRequest) SetDatacenter(v string) *CreateCellgroupRequest {
	s.Datacenter = &v
	return s
}

func (s *CreateCellgroupRequest) SetDefaultGzone(v string) *CreateCellgroupRequest {
	s.DefaultGzone = &v
	return s
}

func (s *CreateCellgroupRequest) SetName(v string) *CreateCellgroupRequest {
	s.Name = &v
	return s
}

func (s *CreateCellgroupRequest) SetOperator(v string) *CreateCellgroupRequest {
	s.Operator = &v
	return s
}

func (s *CreateCellgroupRequest) SetType(v string) *CreateCellgroupRequest {
	s.Type = &v
	return s
}

func (s *CreateCellgroupRequest) SetWorkspaceGroup(v string) *CreateCellgroupRequest {
	s.WorkspaceGroup = &v
	return s
}

type CreateCellgroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateCellgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCellgroupResponse) GoString() string {
	return s.String()
}

func (s *CreateCellgroupResponse) SetReqMsgId(v string) *CreateCellgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateCellgroupResponse) SetResultCode(v string) *CreateCellgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateCellgroupResponse) SetResultMsg(v string) *CreateCellgroupResponse {
	s.ResultMsg = &v
	return s
}

type DeleteCellgroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 逻辑单元名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 所属环境名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
}

func (s DeleteCellgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCellgroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteCellgroupRequest) SetAuthToken(v string) *DeleteCellgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteCellgroupRequest) SetName(v string) *DeleteCellgroupRequest {
	s.Name = &v
	return s
}

func (s *DeleteCellgroupRequest) SetWorkspaceGroup(v string) *DeleteCellgroupRequest {
	s.WorkspaceGroup = &v
	return s
}

type DeleteCellgroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteCellgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCellgroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteCellgroupResponse) SetReqMsgId(v string) *DeleteCellgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteCellgroupResponse) SetResultCode(v string) *DeleteCellgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteCellgroupResponse) SetResultMsg(v string) *DeleteCellgroupResponse {
	s.ResultMsg = &v
	return s
}

type QueryCellgroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cell group 查询前缀
	NamePrefix *string `json:"name_prefix,omitempty" xml:"name_prefix,omitempty"`
	// 所属环境名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
	// 逻辑单元名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s QueryCellgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCellgroupRequest) GoString() string {
	return s.String()
}

func (s *QueryCellgroupRequest) SetAuthToken(v string) *QueryCellgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCellgroupRequest) SetNamePrefix(v string) *QueryCellgroupRequest {
	s.NamePrefix = &v
	return s
}

func (s *QueryCellgroupRequest) SetWorkspaceGroup(v string) *QueryCellgroupRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *QueryCellgroupRequest) SetName(v string) *QueryCellgroupRequest {
	s.Name = &v
	return s
}

type QueryCellgroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 逻辑单元信息
	Data []*CellGroup `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryCellgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCellgroupResponse) GoString() string {
	return s.String()
}

func (s *QueryCellgroupResponse) SetReqMsgId(v string) *QueryCellgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCellgroupResponse) SetResultCode(v string) *QueryCellgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCellgroupResponse) SetResultMsg(v string) *QueryCellgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCellgroupResponse) SetData(v []*CellGroup) *QueryCellgroupResponse {
	s.Data = v
	return s
}

type UpdateCellgroupDisasterinfoRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 灾备信息
	DisasterInfo []*DisasterInfo `json:"disaster_info,omitempty" xml:"disaster_info,omitempty" type:"Repeated"`
	// 逻辑单元名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// 所属环境组名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
}

func (s UpdateCellgroupDisasterinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCellgroupDisasterinfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateCellgroupDisasterinfoRequest) SetAuthToken(v string) *UpdateCellgroupDisasterinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateCellgroupDisasterinfoRequest) SetDisasterInfo(v []*DisasterInfo) *UpdateCellgroupDisasterinfoRequest {
	s.DisasterInfo = v
	return s
}

func (s *UpdateCellgroupDisasterinfoRequest) SetName(v string) *UpdateCellgroupDisasterinfoRequest {
	s.Name = &v
	return s
}

func (s *UpdateCellgroupDisasterinfoRequest) SetOperator(v string) *UpdateCellgroupDisasterinfoRequest {
	s.Operator = &v
	return s
}

func (s *UpdateCellgroupDisasterinfoRequest) SetWorkspaceGroup(v string) *UpdateCellgroupDisasterinfoRequest {
	s.WorkspaceGroup = &v
	return s
}

type UpdateCellgroupDisasterinfoResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateCellgroupDisasterinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCellgroupDisasterinfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateCellgroupDisasterinfoResponse) SetReqMsgId(v string) *UpdateCellgroupDisasterinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateCellgroupDisasterinfoResponse) SetResultCode(v string) *UpdateCellgroupDisasterinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateCellgroupDisasterinfoResponse) SetResultMsg(v string) *UpdateCellgroupDisasterinfoResponse {
	s.ResultMsg = &v
	return s
}

type CreateDeploymentCellRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属逻辑单元名称[单元化模式特有]
	// 当type为"RZone"或"CZone"时，为必填项
	CellGroup *string `json:"cell_group,omitempty" xml:"cell_group,omitempty"`
	// 蓝绿着色信息[单元化模式特有]
	Color *string `json:"color,omitempty" xml:"color,omitempty"`
	// 部署单元唯一标识
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// 是否灰度[单元化模式特有]
	IsGray *bool `json:"is_gray,omitempty" xml:"is_gray,omitempty"`
	// 部署单元名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 部署单元类型:
	// RZone, CZone,GZone,default
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 权重[单元化模式特有]
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty"`
	// 所属工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// 所属环境组名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
	// 所属机房名称
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty"`
}

func (s CreateDeploymentCellRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDeploymentCellRequest) GoString() string {
	return s.String()
}

func (s *CreateDeploymentCellRequest) SetAuthToken(v string) *CreateDeploymentCellRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDeploymentCellRequest) SetCellGroup(v string) *CreateDeploymentCellRequest {
	s.CellGroup = &v
	return s
}

func (s *CreateDeploymentCellRequest) SetColor(v string) *CreateDeploymentCellRequest {
	s.Color = &v
	return s
}

func (s *CreateDeploymentCellRequest) SetIdentity(v string) *CreateDeploymentCellRequest {
	s.Identity = &v
	return s
}

func (s *CreateDeploymentCellRequest) SetIsGray(v bool) *CreateDeploymentCellRequest {
	s.IsGray = &v
	return s
}

func (s *CreateDeploymentCellRequest) SetName(v string) *CreateDeploymentCellRequest {
	s.Name = &v
	return s
}

func (s *CreateDeploymentCellRequest) SetType(v string) *CreateDeploymentCellRequest {
	s.Type = &v
	return s
}

func (s *CreateDeploymentCellRequest) SetWeight(v int64) *CreateDeploymentCellRequest {
	s.Weight = &v
	return s
}

func (s *CreateDeploymentCellRequest) SetWorkspace(v string) *CreateDeploymentCellRequest {
	s.Workspace = &v
	return s
}

func (s *CreateDeploymentCellRequest) SetWorkspaceGroup(v string) *CreateDeploymentCellRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *CreateDeploymentCellRequest) SetZone(v string) *CreateDeploymentCellRequest {
	s.Zone = &v
	return s
}

type CreateDeploymentCellResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateDeploymentCellResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDeploymentCellResponse) GoString() string {
	return s.String()
}

func (s *CreateDeploymentCellResponse) SetReqMsgId(v string) *CreateDeploymentCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDeploymentCellResponse) SetResultCode(v string) *CreateDeploymentCellResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDeploymentCellResponse) SetResultMsg(v string) *CreateDeploymentCellResponse {
	s.ResultMsg = &v
	return s
}

type DeleteDeploymentCellRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单元名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 所属工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s DeleteDeploymentCellRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeploymentCellRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeploymentCellRequest) SetAuthToken(v string) *DeleteDeploymentCellRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDeploymentCellRequest) SetName(v string) *DeleteDeploymentCellRequest {
	s.Name = &v
	return s
}

func (s *DeleteDeploymentCellRequest) SetWorkspace(v string) *DeleteDeploymentCellRequest {
	s.Workspace = &v
	return s
}

type DeleteDeploymentCellResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDeploymentCellResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeploymentCellResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeploymentCellResponse) SetReqMsgId(v string) *DeleteDeploymentCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDeploymentCellResponse) SetResultCode(v string) *DeleteDeploymentCellResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDeploymentCellResponse) SetResultMsg(v string) *DeleteDeploymentCellResponse {
	s.ResultMsg = &v
	return s
}

type QueryDeploymentCellRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单元名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 部署单元名称前缀
	NamePrefix *string `json:"name_prefix,omitempty" xml:"name_prefix,omitempty"`
	// 所属工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// 所属环境组名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
}

func (s QueryDeploymentCellRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeploymentCellRequest) GoString() string {
	return s.String()
}

func (s *QueryDeploymentCellRequest) SetAuthToken(v string) *QueryDeploymentCellRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDeploymentCellRequest) SetName(v string) *QueryDeploymentCellRequest {
	s.Name = &v
	return s
}

func (s *QueryDeploymentCellRequest) SetNamePrefix(v string) *QueryDeploymentCellRequest {
	s.NamePrefix = &v
	return s
}

func (s *QueryDeploymentCellRequest) SetWorkspace(v string) *QueryDeploymentCellRequest {
	s.Workspace = &v
	return s
}

func (s *QueryDeploymentCellRequest) SetWorkspaceGroup(v string) *QueryDeploymentCellRequest {
	s.WorkspaceGroup = &v
	return s
}

type QueryDeploymentCellResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 部署单元列表
	Data []*DeployCell `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryDeploymentCellResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeploymentCellResponse) GoString() string {
	return s.String()
}

func (s *QueryDeploymentCellResponse) SetReqMsgId(v string) *QueryDeploymentCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDeploymentCellResponse) SetResultCode(v string) *QueryDeploymentCellResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDeploymentCellResponse) SetResultMsg(v string) *QueryDeploymentCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDeploymentCellResponse) SetData(v []*DeployCell) *QueryDeploymentCellResponse {
	s.Data = v
	return s
}

type UpdateDeploymentCellRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 蓝绿着色信息
	Color *string `json:"color,omitempty" xml:"color,omitempty"`
	// 是否灰度
	IsGray *bool `json:"is_gray,omitempty" xml:"is_gray,omitempty"`
	// 部署单元名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 权重
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty"`
	// 所属工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// 所属环境组名称
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
}

func (s UpdateDeploymentCellRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeploymentCellRequest) GoString() string {
	return s.String()
}

func (s *UpdateDeploymentCellRequest) SetAuthToken(v string) *UpdateDeploymentCellRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDeploymentCellRequest) SetColor(v string) *UpdateDeploymentCellRequest {
	s.Color = &v
	return s
}

func (s *UpdateDeploymentCellRequest) SetIsGray(v bool) *UpdateDeploymentCellRequest {
	s.IsGray = &v
	return s
}

func (s *UpdateDeploymentCellRequest) SetName(v string) *UpdateDeploymentCellRequest {
	s.Name = &v
	return s
}

func (s *UpdateDeploymentCellRequest) SetWeight(v int64) *UpdateDeploymentCellRequest {
	s.Weight = &v
	return s
}

func (s *UpdateDeploymentCellRequest) SetWorkspace(v string) *UpdateDeploymentCellRequest {
	s.Workspace = &v
	return s
}

func (s *UpdateDeploymentCellRequest) SetWorkspaceGroup(v string) *UpdateDeploymentCellRequest {
	s.WorkspaceGroup = &v
	return s
}

type UpdateDeploymentCellResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDeploymentCellResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeploymentCellResponse) GoString() string {
	return s.String()
}

func (s *UpdateDeploymentCellResponse) SetReqMsgId(v string) *UpdateDeploymentCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDeploymentCellResponse) SetResultCode(v string) *UpdateDeploymentCellResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDeploymentCellResponse) SetResultMsg(v string) *UpdateDeploymentCellResponse {
	s.ResultMsg = &v
	return s
}

type QueryDeploymentRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单包含的应用（服务）名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 部署单创建日期，采用UTC时间，按照ISO8601标准表示，格式为：YYYY-MM-DDThh:mm:ssZ
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty"`
	// 部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
	// 当前页码，默认为1
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认10
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	//
	// 部署单状态。取值列表：
	// INITING：初始化中；
	// INIT_FAILED：初始化失败；
	// INITED：初始化完成；
	// EXECUTING：执行中；
	// SUCCESS：执行成功；
	// FAILED：执行失败；
	// CANCELING：取消中；
	// CANCELED：已取消
	//
	//
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// 精确部署单标题
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s QueryDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeploymentRequest) GoString() string {
	return s.String()
}

func (s *QueryDeploymentRequest) SetAuthToken(v string) *QueryDeploymentRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDeploymentRequest) SetApplicationName(v string) *QueryDeploymentRequest {
	s.ApplicationName = &v
	return s
}

func (s *QueryDeploymentRequest) SetCreationTime(v string) *QueryDeploymentRequest {
	s.CreationTime = &v
	return s
}

func (s *QueryDeploymentRequest) SetOperationId(v string) *QueryDeploymentRequest {
	s.OperationId = &v
	return s
}

func (s *QueryDeploymentRequest) SetPageNum(v int) *QueryDeploymentRequest {
	s.PageNum = &v
	return s
}

func (s *QueryDeploymentRequest) SetPageSize(v int) *QueryDeploymentRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeploymentRequest) SetStatuses(v []*string) *QueryDeploymentRequest {
	s.Statuses = v
	return s
}

func (s *QueryDeploymentRequest) SetTitle(v string) *QueryDeploymentRequest {
	s.Title = &v
	return s
}

type QueryDeploymentResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 批量查询部署单结果，以操作链的形式体现
	Deployments []*OpsDeployment `json:"deployments,omitempty" xml:"deployments,omitempty" type:"Repeated"`
	// 当前页码
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 发布单总数
	TotalCount *int `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeploymentResponse) GoString() string {
	return s.String()
}

func (s *QueryDeploymentResponse) SetReqMsgId(v string) *QueryDeploymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDeploymentResponse) SetResultCode(v string) *QueryDeploymentResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDeploymentResponse) SetResultMsg(v string) *QueryDeploymentResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDeploymentResponse) SetDeployments(v []*OpsDeployment) *QueryDeploymentResponse {
	s.Deployments = v
	return s
}

func (s *QueryDeploymentResponse) SetPageNum(v int) *QueryDeploymentResponse {
	s.PageNum = &v
	return s
}

func (s *QueryDeploymentResponse) SetPageSize(v int) *QueryDeploymentResponse {
	s.PageSize = &v
	return s
}

func (s *QueryDeploymentResponse) SetTotalCount(v int) *QueryDeploymentResponse {
	s.TotalCount = &v
	return s
}

type CancelDeploymentRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
	// 取消原因。长度不超过100个UTF-8字符
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
}

func (s CancelDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelDeploymentRequest) GoString() string {
	return s.String()
}

func (s *CancelDeploymentRequest) SetAuthToken(v string) *CancelDeploymentRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelDeploymentRequest) SetOperationId(v string) *CancelDeploymentRequest {
	s.OperationId = &v
	return s
}

func (s *CancelDeploymentRequest) SetReason(v string) *CancelDeploymentRequest {
	s.Reason = &v
	return s
}

type CancelDeploymentResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CancelDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelDeploymentResponse) GoString() string {
	return s.String()
}

func (s *CancelDeploymentResponse) SetReqMsgId(v string) *CancelDeploymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelDeploymentResponse) SetResultCode(v string) *CancelDeploymentResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelDeploymentResponse) SetResultMsg(v string) *CancelDeploymentResponse {
	s.ResultMsg = &v
	return s
}

type CreateDeploymentRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用列表
	Applications []*Application `json:"applications,omitempty" xml:"applications,omitempty" type:"Repeated"`
	// 是否启用自动运维，默认为**False**
	AutoExecute *bool `json:"auto_execute,omitempty" xml:"auto_execute,omitempty"`
	// 部署维度，有两种取值：APPLICATION和APP_SERVICE。设置为APPLICATION，表示在尚未引入应用服务环境中对整个应用都执行部署操作; APP_SERVICE表示在引入应用服务的环境中对应用服务执行部署操作。
	DeployDimension *string `json:"deploy_dimension,omitempty" xml:"deploy_dimension,omitempty"`
	// 执行部署操作的目标租户
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// 部署单标题。长度不超过50个UTF-8字符
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
	// 执行部署操作的目标工作空间
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CreateDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDeploymentRequest) GoString() string {
	return s.String()
}

func (s *CreateDeploymentRequest) SetAuthToken(v string) *CreateDeploymentRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDeploymentRequest) SetApplications(v []*Application) *CreateDeploymentRequest {
	s.Applications = v
	return s
}

func (s *CreateDeploymentRequest) SetAutoExecute(v bool) *CreateDeploymentRequest {
	s.AutoExecute = &v
	return s
}

func (s *CreateDeploymentRequest) SetDeployDimension(v string) *CreateDeploymentRequest {
	s.DeployDimension = &v
	return s
}

func (s *CreateDeploymentRequest) SetTenant(v string) *CreateDeploymentRequest {
	s.Tenant = &v
	return s
}

func (s *CreateDeploymentRequest) SetTitle(v string) *CreateDeploymentRequest {
	s.Title = &v
	return s
}

func (s *CreateDeploymentRequest) SetWorkspace(v string) *CreateDeploymentRequest {
	s.Workspace = &v
	return s
}

type CreateDeploymentResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建完成的部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s CreateDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDeploymentResponse) GoString() string {
	return s.String()
}

func (s *CreateDeploymentResponse) SetReqMsgId(v string) *CreateDeploymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDeploymentResponse) SetResultCode(v string) *CreateDeploymentResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDeploymentResponse) SetResultMsg(v string) *CreateDeploymentResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDeploymentResponse) SetOperationId(v string) *CreateDeploymentResponse {
	s.OperationId = &v
	return s
}

type GetDeploymentRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s GetDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentRequest) GoString() string {
	return s.String()
}

func (s *GetDeploymentRequest) SetAuthToken(v string) *GetDeploymentRequest {
	s.AuthToken = &v
	return s
}

func (s *GetDeploymentRequest) SetOperationId(v string) *GetDeploymentRequest {
	s.OperationId = &v
	return s
}

type GetDeploymentResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 此部署操作中所有被操作的应用详情，以操作链的形式体现
	ApplicationChains []*OpsApplicationChain `json:"application_chains,omitempty" xml:"application_chains,omitempty" type:"Repeated"`
	// 部署操作执行者
	Executor *string `json:"executor,omitempty" xml:"executor,omitempty"`
	//
	//
	// 部署单状态。取值列表：
	// INITING：初始化中；
	// INIT_FAILED：初始化失败；
	// INITED：初始化完成；
	// EXECUTING：执行中；
	// SUCCESS：执行成功；
	// FAILED：执行失败；
	// CANCELING：取消中；
	// CANCELED：已取消
	//
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s GetDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentResponse) GoString() string {
	return s.String()
}

func (s *GetDeploymentResponse) SetReqMsgId(v string) *GetDeploymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetDeploymentResponse) SetResultCode(v string) *GetDeploymentResponse {
	s.ResultCode = &v
	return s
}

func (s *GetDeploymentResponse) SetResultMsg(v string) *GetDeploymentResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetDeploymentResponse) SetApplicationChains(v []*OpsApplicationChain) *GetDeploymentResponse {
	s.ApplicationChains = v
	return s
}

func (s *GetDeploymentResponse) SetExecutor(v string) *GetDeploymentResponse {
	s.Executor = &v
	return s
}

func (s *GetDeploymentResponse) SetStatus(v string) *GetDeploymentResponse {
	s.Status = &v
	return s
}

type RetryDeploymentRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s RetryDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryDeploymentRequest) GoString() string {
	return s.String()
}

func (s *RetryDeploymentRequest) SetAuthToken(v string) *RetryDeploymentRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryDeploymentRequest) SetOperationId(v string) *RetryDeploymentRequest {
	s.OperationId = &v
	return s
}

type RetryDeploymentResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RetryDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryDeploymentResponse) GoString() string {
	return s.String()
}

func (s *RetryDeploymentResponse) SetReqMsgId(v string) *RetryDeploymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryDeploymentResponse) SetResultCode(v string) *RetryDeploymentResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryDeploymentResponse) SetResultMsg(v string) *RetryDeploymentResponse {
	s.ResultMsg = &v
	return s
}

type StartDeploymentRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s StartDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDeploymentRequest) GoString() string {
	return s.String()
}

func (s *StartDeploymentRequest) SetAuthToken(v string) *StartDeploymentRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDeploymentRequest) SetOperationId(v string) *StartDeploymentRequest {
	s.OperationId = &v
	return s
}

type StartDeploymentResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDeploymentResponse) GoString() string {
	return s.String()
}

func (s *StartDeploymentResponse) SetReqMsgId(v string) *StartDeploymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDeploymentResponse) SetResultCode(v string) *StartDeploymentResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDeploymentResponse) SetResultMsg(v string) *StartDeploymentResponse {
	s.ResultMsg = &v
	return s
}

type GetDeploymentApplicationRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 待查询的应用（服务）名称，必须是部署单中包含的应用（服务）
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s GetDeploymentApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentApplicationRequest) GoString() string {
	return s.String()
}

func (s *GetDeploymentApplicationRequest) SetAuthToken(v string) *GetDeploymentApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *GetDeploymentApplicationRequest) SetApplicationName(v string) *GetDeploymentApplicationRequest {
	s.ApplicationName = &v
	return s
}

func (s *GetDeploymentApplicationRequest) SetOperationId(v string) *GetDeploymentApplicationRequest {
	s.OperationId = &v
	return s
}

type GetDeploymentApplicationResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 此应用下所有计算容器分组运维状态详情
	Groups []*OpsGroup `json:"groups,omitempty" xml:"groups,omitempty" type:"Repeated"`
	// 应用（服务）当前运维状态。取值列表：INITING：初始化中；INIT_FAILED：初始化失败；INITED：初始化完成；
	//                             EXECUTING：执行中；SUCCESS：执行成功；FAILED：执行失败
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s GetDeploymentApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentApplicationResponse) GoString() string {
	return s.String()
}

func (s *GetDeploymentApplicationResponse) SetReqMsgId(v string) *GetDeploymentApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetDeploymentApplicationResponse) SetResultCode(v string) *GetDeploymentApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *GetDeploymentApplicationResponse) SetResultMsg(v string) *GetDeploymentApplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetDeploymentApplicationResponse) SetGroups(v []*OpsGroup) *GetDeploymentApplicationResponse {
	s.Groups = v
	return s
}

func (s *GetDeploymentApplicationResponse) SetStatus(v string) *GetDeploymentApplicationResponse {
	s.Status = &v
	return s
}

type RollbackDeploymentApplicationRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 被回滚的应用（服务）名称，必须是部署单中包含的应用（服务）
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
	// 回滚原因。长度不超过100个UTF-8字符
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
}

func (s RollbackDeploymentApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackDeploymentApplicationRequest) GoString() string {
	return s.String()
}

func (s *RollbackDeploymentApplicationRequest) SetAuthToken(v string) *RollbackDeploymentApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *RollbackDeploymentApplicationRequest) SetApplicationName(v string) *RollbackDeploymentApplicationRequest {
	s.ApplicationName = &v
	return s
}

func (s *RollbackDeploymentApplicationRequest) SetOperationId(v string) *RollbackDeploymentApplicationRequest {
	s.OperationId = &v
	return s
}

func (s *RollbackDeploymentApplicationRequest) SetReason(v string) *RollbackDeploymentApplicationRequest {
	s.Reason = &v
	return s
}

type RollbackDeploymentApplicationResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RollbackDeploymentApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackDeploymentApplicationResponse) GoString() string {
	return s.String()
}

func (s *RollbackDeploymentApplicationResponse) SetReqMsgId(v string) *RollbackDeploymentApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RollbackDeploymentApplicationResponse) SetResultCode(v string) *RollbackDeploymentApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *RollbackDeploymentApplicationResponse) SetResultMsg(v string) *RollbackDeploymentApplicationResponse {
	s.ResultMsg = &v
	return s
}

type ReinitDeploymentRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 部署单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s ReinitDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitDeploymentRequest) GoString() string {
	return s.String()
}

func (s *ReinitDeploymentRequest) SetAuthToken(v string) *ReinitDeploymentRequest {
	s.AuthToken = &v
	return s
}

func (s *ReinitDeploymentRequest) SetOperationId(v string) *ReinitDeploymentRequest {
	s.OperationId = &v
	return s
}

type ReinitDeploymentResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ReinitDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitDeploymentResponse) GoString() string {
	return s.String()
}

func (s *ReinitDeploymentResponse) SetReqMsgId(v string) *ReinitDeploymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReinitDeploymentResponse) SetResultCode(v string) *ReinitDeploymentResponse {
	s.ResultCode = &v
	return s
}

func (s *ReinitDeploymentResponse) SetResultMsg(v string) *ReinitDeploymentResponse {
	s.ResultMsg = &v
	return s
}

type QueryCmdtemplateRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 指令模板描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 指令名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 当前页码，默认为1
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认10
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryCmdtemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCmdtemplateRequest) GoString() string {
	return s.String()
}

func (s *QueryCmdtemplateRequest) SetAuthToken(v string) *QueryCmdtemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCmdtemplateRequest) SetDescription(v string) *QueryCmdtemplateRequest {
	s.Description = &v
	return s
}

func (s *QueryCmdtemplateRequest) SetName(v string) *QueryCmdtemplateRequest {
	s.Name = &v
	return s
}

func (s *QueryCmdtemplateRequest) SetPageNum(v int) *QueryCmdtemplateRequest {
	s.PageNum = &v
	return s
}

func (s *QueryCmdtemplateRequest) SetPageSize(v int) *QueryCmdtemplateRequest {
	s.PageSize = &v
	return s
}

type QueryCmdtemplateResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前页码
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 指令模板ID列表
	TemplateIds []*string `json:"template_ids,omitempty" xml:"template_ids,omitempty" type:"Repeated"`
	// 指令模板总数
	TotalCount *int `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryCmdtemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCmdtemplateResponse) GoString() string {
	return s.String()
}

func (s *QueryCmdtemplateResponse) SetReqMsgId(v string) *QueryCmdtemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCmdtemplateResponse) SetResultCode(v string) *QueryCmdtemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCmdtemplateResponse) SetResultMsg(v string) *QueryCmdtemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCmdtemplateResponse) SetPageNum(v int) *QueryCmdtemplateResponse {
	s.PageNum = &v
	return s
}

func (s *QueryCmdtemplateResponse) SetPageSize(v int) *QueryCmdtemplateResponse {
	s.PageSize = &v
	return s
}

func (s *QueryCmdtemplateResponse) SetTemplateIds(v []*string) *QueryCmdtemplateResponse {
	s.TemplateIds = v
	return s
}

func (s *QueryCmdtemplateResponse) SetTotalCount(v int) *QueryCmdtemplateResponse {
	s.TotalCount = &v
	return s
}

type GetCmdtemplateRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 指令模板ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s GetCmdtemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCmdtemplateRequest) GoString() string {
	return s.String()
}

func (s *GetCmdtemplateRequest) SetAuthToken(v string) *GetCmdtemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *GetCmdtemplateRequest) SetId(v string) *GetCmdtemplateRequest {
	s.Id = &v
	return s
}

type GetCmdtemplateResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 指令模板详情
	Template *CmdTemplate `json:"template,omitempty" xml:"template,omitempty"`
}

func (s GetCmdtemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCmdtemplateResponse) GoString() string {
	return s.String()
}

func (s *GetCmdtemplateResponse) SetReqMsgId(v string) *GetCmdtemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetCmdtemplateResponse) SetResultCode(v string) *GetCmdtemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *GetCmdtemplateResponse) SetResultMsg(v string) *GetCmdtemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetCmdtemplateResponse) SetTemplate(v *CmdTemplate) *GetCmdtemplateResponse {
	s.Template = v
	return s
}

type SyncexecuteCmdTaskRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 执行的指令。示例如下：cmd.template_id=000015678&cmd.args.1.name=--version&cmd.args.1.value=2.2
	Cmd *OpsCmd `json:"cmd,omitempty" xml:"cmd,omitempty"`
	// 执行指令的目标机器id列表。n代表第n个应用的名称，n从1开始，最大100。每个应用名称最大60个UTF-8字符。如果要输入多个机器，使用如下形式：computers.1.id=000112367&computers.2.id=000112367
	Computers []*OpsComputer `json:"computers,omitempty" xml:"computers,omitempty" type:"Repeated"`
}

func (s SyncexecuteCmdTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncexecuteCmdTaskRequest) GoString() string {
	return s.String()
}

func (s *SyncexecuteCmdTaskRequest) SetAuthToken(v string) *SyncexecuteCmdTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *SyncexecuteCmdTaskRequest) SetCmd(v *OpsCmd) *SyncexecuteCmdTaskRequest {
	s.Cmd = v
	return s
}

func (s *SyncexecuteCmdTaskRequest) SetComputers(v []*OpsComputer) *SyncexecuteCmdTaskRequest {
	s.Computers = v
	return s
}

type SyncexecuteCmdTaskResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 指令执行结果详情
	Result *CmdExecResult `json:"result,omitempty" xml:"result,omitempty"`
}

func (s SyncexecuteCmdTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncexecuteCmdTaskResponse) GoString() string {
	return s.String()
}

func (s *SyncexecuteCmdTaskResponse) SetReqMsgId(v string) *SyncexecuteCmdTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SyncexecuteCmdTaskResponse) SetResultCode(v string) *SyncexecuteCmdTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *SyncexecuteCmdTaskResponse) SetResultMsg(v string) *SyncexecuteCmdTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *SyncexecuteCmdTaskResponse) SetResult(v *CmdExecResult) *SyncexecuteCmdTaskResponse {
	s.Result = v
	return s
}

type AsyncexecuteCmdTaskRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 执行的指令。示例如下：cmd.template_id=000015678&cmd.args.1.name=--version&cmd.args.1.value=2.2
	Cmd *OpsCmd `json:"cmd,omitempty" xml:"cmd,omitempty"`
	// 执行指令的目标机器id列表。n代表第n个应用的名称，n从1开始，最大100。每个应用名称最大60个UTF-8字符。如果要输入多个机器，使用如下形式：computers.1.id=000112367&computers.2.id=000112367
	Computers []*OpsComputer `json:"computers,omitempty" xml:"computers,omitempty" type:"Repeated"`
}

func (s AsyncexecuteCmdTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s AsyncexecuteCmdTaskRequest) GoString() string {
	return s.String()
}

func (s *AsyncexecuteCmdTaskRequest) SetAuthToken(v string) *AsyncexecuteCmdTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *AsyncexecuteCmdTaskRequest) SetCmd(v *OpsCmd) *AsyncexecuteCmdTaskRequest {
	s.Cmd = v
	return s
}

func (s *AsyncexecuteCmdTaskRequest) SetComputers(v []*OpsComputer) *AsyncexecuteCmdTaskRequest {
	s.Computers = v
	return s
}

type AsyncexecuteCmdTaskResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 指令执行任务ID，用于查询任务详情
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s AsyncexecuteCmdTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s AsyncexecuteCmdTaskResponse) GoString() string {
	return s.String()
}

func (s *AsyncexecuteCmdTaskResponse) SetReqMsgId(v string) *AsyncexecuteCmdTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AsyncexecuteCmdTaskResponse) SetResultCode(v string) *AsyncexecuteCmdTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *AsyncexecuteCmdTaskResponse) SetResultMsg(v string) *AsyncexecuteCmdTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *AsyncexecuteCmdTaskResponse) SetTaskId(v string) *AsyncexecuteCmdTaskResponse {
	s.TaskId = &v
	return s
}

type GetCmdTaskRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 异步指令执行的任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s GetCmdTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCmdTaskRequest) GoString() string {
	return s.String()
}

func (s *GetCmdTaskRequest) SetAuthToken(v string) *GetCmdTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *GetCmdTaskRequest) SetTaskId(v string) *GetCmdTaskRequest {
	s.TaskId = &v
	return s
}

type GetCmdTaskResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 指令执行结果详情
	Result *CmdExecResult `json:"result,omitempty" xml:"result,omitempty"`
}

func (s GetCmdTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCmdTaskResponse) GoString() string {
	return s.String()
}

func (s *GetCmdTaskResponse) SetReqMsgId(v string) *GetCmdTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetCmdTaskResponse) SetResultCode(v string) *GetCmdTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *GetCmdTaskResponse) SetResultMsg(v string) *GetCmdTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetCmdTaskResponse) SetResult(v *CmdExecResult) *GetCmdTaskResponse {
	s.Result = v
	return s
}

type CreateAppopsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 执行运维操作的目标应用名称列表。n代表第n个应用的名称，n从1开始，最大100。每个应用名称最大60个UTF-8字符。如果要输入多个应用，使用如下形式：applications.1.name=myapp1&applications.2.name=myapp2
	Applications []*Application `json:"applications,omitempty" xml:"applications,omitempty" type:"Repeated"`
	// 是否启用自动运维，默认为**False**
	AutoExecute *bool `json:"auto_execute,omitempty" xml:"auto_execute,omitempty"`
	// 执行运维操作的目标机器id列表。n代表第n个应用的名称，n从1开始，最大100。每个应用名称最大60个UTF-8字符。如果要输入多个机器，使用如下形式：computers.1.id=000112367&computers.2.id=000112367
	Computers []*Computer `json:"computers,omitempty" xml:"computers,omitempty" type:"Repeated"`
	// 应用运维的操作类型，取值列表：ONLINE：上线应用，OFFLINE：下线应用，RESTART:重启应用，DEPLOY_STATIC_RESOURCE：部署静态资源。
	//                         部署静态资源需传入 ops_action_params 为("default_execute_account", "resource_download_url", "resource_target_file")
	//
	OpsAction *string `json:"ops_action,omitempty" xml:"ops_action,omitempty"`
	// ops_action 所需要的参数，以JSON格式传入。以 {"param_name": "param_value"} 定义JSON。
	OpsActionParams *string `json:"ops_action_params,omitempty" xml:"ops_action_params,omitempty"`
	// 应用运维的维度，有三种取值：APPLICATION、APP_SERVICE和MACHINE。设置为APPLICATION，表示在非应用服务环境下整个应用都执行该应用运维操作；设置为APP_SERVICE，表示在应用服务环境下对应用服务执行运维操作;设置为MACHINE，表示应用下的一台或多台机器执行改应用运维操作。
	OpsDimension *string `json:"ops_dimension,omitempty" xml:"ops_dimension,omitempty"`
	// 运维单标题。长度不超过50个UTF-8字符
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CreateAppopsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAppopsRequest) GoString() string {
	return s.String()
}

func (s *CreateAppopsRequest) SetAuthToken(v string) *CreateAppopsRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAppopsRequest) SetApplications(v []*Application) *CreateAppopsRequest {
	s.Applications = v
	return s
}

func (s *CreateAppopsRequest) SetAutoExecute(v bool) *CreateAppopsRequest {
	s.AutoExecute = &v
	return s
}

func (s *CreateAppopsRequest) SetComputers(v []*Computer) *CreateAppopsRequest {
	s.Computers = v
	return s
}

func (s *CreateAppopsRequest) SetOpsAction(v string) *CreateAppopsRequest {
	s.OpsAction = &v
	return s
}

func (s *CreateAppopsRequest) SetOpsActionParams(v string) *CreateAppopsRequest {
	s.OpsActionParams = &v
	return s
}

func (s *CreateAppopsRequest) SetOpsDimension(v string) *CreateAppopsRequest {
	s.OpsDimension = &v
	return s
}

func (s *CreateAppopsRequest) SetTitle(v string) *CreateAppopsRequest {
	s.Title = &v
	return s
}

type CreateAppopsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建完成的运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s CreateAppopsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAppopsResponse) GoString() string {
	return s.String()
}

func (s *CreateAppopsResponse) SetReqMsgId(v string) *CreateAppopsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAppopsResponse) SetResultCode(v string) *CreateAppopsResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAppopsResponse) SetResultMsg(v string) *CreateAppopsResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAppopsResponse) SetOperationId(v string) *CreateAppopsResponse {
	s.OperationId = &v
	return s
}

type GetAppopsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s GetAppopsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppopsRequest) GoString() string {
	return s.String()
}

func (s *GetAppopsRequest) SetAuthToken(v string) *GetAppopsRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAppopsRequest) SetOperationId(v string) *GetAppopsRequest {
	s.OperationId = &v
	return s
}

type GetAppopsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 此运维操作中所有被操作的应用详情，以操作链的形式体现
	ApplicationChains []*OpsApplicationChain `json:"application_chains,omitempty" xml:"application_chains,omitempty" type:"Repeated"`
	// 运维操作执行者
	Executor *string `json:"executor,omitempty" xml:"executor,omitempty"`
	// 应用运维的操作类型，取值列表：ONLINE：上线应用，OFFLINE：下线应用，RESTART:重启应用，DEPLOY_STATIC_RESOURCE：部署静态资源
	OpsAction *string `json:"ops_action,omitempty" xml:"ops_action,omitempty"`
	// 应用运维的维度，有三种取值：APPLICATION、APP_SERVICE和MACHINE。设置为APPLICATION，表示在非应用服务环境下整个应用都执行该应用运维操作；设置为APP_SERVICE，表示在应用服务环境下对应用服务执行运维操作;设置为MACHINE，表示应用下的一台或多台机器执行改应用运维操作。
	OpsDimension *string `json:"ops_dimension,omitempty" xml:"ops_dimension,omitempty"`
	//
	//
	// 部署单状态。取值列表：
	// INITING：初始化中；
	// INIT_FAILED：初始化失败；
	// INITED：初始化完成；
	// EXECUTING：执行中；
	// SUCCESS：执行成功；
	// FAILED：执行失败；
	// CANCELING：取消中；
	// CANCELED：已取消
	//
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 应用运维单标题
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s GetAppopsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppopsResponse) GoString() string {
	return s.String()
}

func (s *GetAppopsResponse) SetReqMsgId(v string) *GetAppopsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppopsResponse) SetResultCode(v string) *GetAppopsResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppopsResponse) SetResultMsg(v string) *GetAppopsResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppopsResponse) SetApplicationChains(v []*OpsApplicationChain) *GetAppopsResponse {
	s.ApplicationChains = v
	return s
}

func (s *GetAppopsResponse) SetExecutor(v string) *GetAppopsResponse {
	s.Executor = &v
	return s
}

func (s *GetAppopsResponse) SetOpsAction(v string) *GetAppopsResponse {
	s.OpsAction = &v
	return s
}

func (s *GetAppopsResponse) SetOpsDimension(v string) *GetAppopsResponse {
	s.OpsDimension = &v
	return s
}

func (s *GetAppopsResponse) SetStatus(v string) *GetAppopsResponse {
	s.Status = &v
	return s
}

func (s *GetAppopsResponse) SetTitle(v string) *GetAppopsResponse {
	s.Title = &v
	return s
}

type StartAppopsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s StartAppopsRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAppopsRequest) GoString() string {
	return s.String()
}

func (s *StartAppopsRequest) SetAuthToken(v string) *StartAppopsRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAppopsRequest) SetOperationId(v string) *StartAppopsRequest {
	s.OperationId = &v
	return s
}

type StartAppopsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartAppopsResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAppopsResponse) GoString() string {
	return s.String()
}

func (s *StartAppopsResponse) SetReqMsgId(v string) *StartAppopsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAppopsResponse) SetResultCode(v string) *StartAppopsResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAppopsResponse) SetResultMsg(v string) *StartAppopsResponse {
	s.ResultMsg = &v
	return s
}

type ReinitAppopsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s ReinitAppopsRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitAppopsRequest) GoString() string {
	return s.String()
}

func (s *ReinitAppopsRequest) SetAuthToken(v string) *ReinitAppopsRequest {
	s.AuthToken = &v
	return s
}

func (s *ReinitAppopsRequest) SetOperationId(v string) *ReinitAppopsRequest {
	s.OperationId = &v
	return s
}

type ReinitAppopsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ReinitAppopsResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitAppopsResponse) GoString() string {
	return s.String()
}

func (s *ReinitAppopsResponse) SetReqMsgId(v string) *ReinitAppopsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReinitAppopsResponse) SetResultCode(v string) *ReinitAppopsResponse {
	s.ResultCode = &v
	return s
}

func (s *ReinitAppopsResponse) SetResultMsg(v string) *ReinitAppopsResponse {
	s.ResultMsg = &v
	return s
}

type CancelAppopsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
	// 取消原因。长度不超过100个UTF-8字符
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
}

func (s CancelAppopsRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelAppopsRequest) GoString() string {
	return s.String()
}

func (s *CancelAppopsRequest) SetAuthToken(v string) *CancelAppopsRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelAppopsRequest) SetOperationId(v string) *CancelAppopsRequest {
	s.OperationId = &v
	return s
}

func (s *CancelAppopsRequest) SetReason(v string) *CancelAppopsRequest {
	s.Reason = &v
	return s
}

type CancelAppopsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CancelAppopsResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelAppopsResponse) GoString() string {
	return s.String()
}

func (s *CancelAppopsResponse) SetReqMsgId(v string) *CancelAppopsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelAppopsResponse) SetResultCode(v string) *CancelAppopsResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelAppopsResponse) SetResultMsg(v string) *CancelAppopsResponse {
	s.ResultMsg = &v
	return s
}

type RetryAppopsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s RetryAppopsRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryAppopsRequest) GoString() string {
	return s.String()
}

func (s *RetryAppopsRequest) SetAuthToken(v string) *RetryAppopsRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryAppopsRequest) SetOperationId(v string) *RetryAppopsRequest {
	s.OperationId = &v
	return s
}

type RetryAppopsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RetryAppopsResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryAppopsResponse) GoString() string {
	return s.String()
}

func (s *RetryAppopsResponse) SetReqMsgId(v string) *RetryAppopsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryAppopsResponse) SetResultCode(v string) *RetryAppopsResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryAppopsResponse) SetResultMsg(v string) *RetryAppopsResponse {
	s.ResultMsg = &v
	return s
}

type CreateComputeropsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 执行的指令列表。n代表第n个指令，n从1开始，最大20。示例如下：cmds.1.template_id=000015678&cmds.1.args.1.name=--version&cmds.1.args.1.value=2.2&cmds.2.template_id=000015688
	Cmds []*OpsCmd `json:"cmds,omitempty" xml:"cmds,omitempty" type:"Repeated"`
	// 执行运维操作的目标机器id列表。n代表第n个应用的名称，n从1开始，最大100。每个应用名称最大60个UTF-8字符。如果要输入多个机器，使用如下形式：computers.1.id=000112367&computers.2.id=000112367
	Computers []*Computer `json:"computers,omitempty" xml:"computers,omitempty" type:"Repeated"`
	// 运维单标题。长度不超过50个UTF-8字符
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CreateComputeropsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateComputeropsRequest) GoString() string {
	return s.String()
}

func (s *CreateComputeropsRequest) SetAuthToken(v string) *CreateComputeropsRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateComputeropsRequest) SetCmds(v []*OpsCmd) *CreateComputeropsRequest {
	s.Cmds = v
	return s
}

func (s *CreateComputeropsRequest) SetComputers(v []*Computer) *CreateComputeropsRequest {
	s.Computers = v
	return s
}

func (s *CreateComputeropsRequest) SetTitle(v string) *CreateComputeropsRequest {
	s.Title = &v
	return s
}

type CreateComputeropsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建完成的运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s CreateComputeropsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateComputeropsResponse) GoString() string {
	return s.String()
}

func (s *CreateComputeropsResponse) SetReqMsgId(v string) *CreateComputeropsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateComputeropsResponse) SetResultCode(v string) *CreateComputeropsResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateComputeropsResponse) SetResultMsg(v string) *CreateComputeropsResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateComputeropsResponse) SetOperationId(v string) *CreateComputeropsResponse {
	s.OperationId = &v
	return s
}

type GetComputeropsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s GetComputeropsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetComputeropsRequest) GoString() string {
	return s.String()
}

func (s *GetComputeropsRequest) SetAuthToken(v string) *GetComputeropsRequest {
	s.AuthToken = &v
	return s
}

func (s *GetComputeropsRequest) SetOperationId(v string) *GetComputeropsRequest {
	s.OperationId = &v
	return s
}

type GetComputeropsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 运维操作执行者
	Executor *string `json:"executor,omitempty" xml:"executor,omitempty"`
	// 改运维单下所有计算容器分组运维状态详情
	Groups []*OpsGroup `json:"groups,omitempty" xml:"groups,omitempty" type:"Repeated"`
	//
	//
	// 部署单状态。取值列表：
	// INITING：初始化中；
	// INIT_FAILED：初始化失败；
	// INITED：初始化完成；
	// EXECUTING：执行中；
	// SUCCESS：执行成功；
	// FAILED：执行失败；
	// CANCELING：取消中；
	// CANCELED：已取消
	//
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s GetComputeropsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetComputeropsResponse) GoString() string {
	return s.String()
}

func (s *GetComputeropsResponse) SetReqMsgId(v string) *GetComputeropsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetComputeropsResponse) SetResultCode(v string) *GetComputeropsResponse {
	s.ResultCode = &v
	return s
}

func (s *GetComputeropsResponse) SetResultMsg(v string) *GetComputeropsResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetComputeropsResponse) SetExecutor(v string) *GetComputeropsResponse {
	s.Executor = &v
	return s
}

func (s *GetComputeropsResponse) SetGroups(v []*OpsGroup) *GetComputeropsResponse {
	s.Groups = v
	return s
}

func (s *GetComputeropsResponse) SetStatus(v string) *GetComputeropsResponse {
	s.Status = &v
	return s
}

type StartComputeropsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s StartComputeropsRequest) String() string {
	return tea.Prettify(s)
}

func (s StartComputeropsRequest) GoString() string {
	return s.String()
}

func (s *StartComputeropsRequest) SetAuthToken(v string) *StartComputeropsRequest {
	s.AuthToken = &v
	return s
}

func (s *StartComputeropsRequest) SetOperationId(v string) *StartComputeropsRequest {
	s.OperationId = &v
	return s
}

type StartComputeropsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartComputeropsResponse) String() string {
	return tea.Prettify(s)
}

func (s StartComputeropsResponse) GoString() string {
	return s.String()
}

func (s *StartComputeropsResponse) SetReqMsgId(v string) *StartComputeropsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartComputeropsResponse) SetResultCode(v string) *StartComputeropsResponse {
	s.ResultCode = &v
	return s
}

func (s *StartComputeropsResponse) SetResultMsg(v string) *StartComputeropsResponse {
	s.ResultMsg = &v
	return s
}

type ReinitComputeropsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s ReinitComputeropsRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitComputeropsRequest) GoString() string {
	return s.String()
}

func (s *ReinitComputeropsRequest) SetAuthToken(v string) *ReinitComputeropsRequest {
	s.AuthToken = &v
	return s
}

func (s *ReinitComputeropsRequest) SetOperationId(v string) *ReinitComputeropsRequest {
	s.OperationId = &v
	return s
}

type ReinitComputeropsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ReinitComputeropsResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitComputeropsResponse) GoString() string {
	return s.String()
}

func (s *ReinitComputeropsResponse) SetReqMsgId(v string) *ReinitComputeropsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReinitComputeropsResponse) SetResultCode(v string) *ReinitComputeropsResponse {
	s.ResultCode = &v
	return s
}

func (s *ReinitComputeropsResponse) SetResultMsg(v string) *ReinitComputeropsResponse {
	s.ResultMsg = &v
	return s
}

type CancelComputeropsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
	// 取消原因。长度不超过100个UTF-8字符
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
}

func (s CancelComputeropsRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelComputeropsRequest) GoString() string {
	return s.String()
}

func (s *CancelComputeropsRequest) SetAuthToken(v string) *CancelComputeropsRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelComputeropsRequest) SetOperationId(v string) *CancelComputeropsRequest {
	s.OperationId = &v
	return s
}

func (s *CancelComputeropsRequest) SetReason(v string) *CancelComputeropsRequest {
	s.Reason = &v
	return s
}

type CancelComputeropsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CancelComputeropsResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelComputeropsResponse) GoString() string {
	return s.String()
}

func (s *CancelComputeropsResponse) SetReqMsgId(v string) *CancelComputeropsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelComputeropsResponse) SetResultCode(v string) *CancelComputeropsResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelComputeropsResponse) SetResultMsg(v string) *CancelComputeropsResponse {
	s.ResultMsg = &v
	return s
}

type RetryComputeropsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 运维单id
	OperationId *string `json:"operation_id,omitempty" xml:"operation_id,omitempty"`
}

func (s RetryComputeropsRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryComputeropsRequest) GoString() string {
	return s.String()
}

func (s *RetryComputeropsRequest) SetAuthToken(v string) *RetryComputeropsRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryComputeropsRequest) SetOperationId(v string) *RetryComputeropsRequest {
	s.OperationId = &v
	return s
}

type RetryComputeropsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RetryComputeropsResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryComputeropsResponse) GoString() string {
	return s.String()
}

func (s *RetryComputeropsResponse) SetReqMsgId(v string) *RetryComputeropsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryComputeropsResponse) SetResultCode(v string) *RetryComputeropsResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryComputeropsResponse) SetResultMsg(v string) *RetryComputeropsResponse {
	s.ResultMsg = &v
	return s
}

type QueryOpsappsvcRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用的名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// 当前页码，默认为1
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小，默认10，最大50
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 应用服务的名称，如果为空，会查询该应用下所有应用服务的运维历史
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty"`
}

func (s QueryOpsappsvcRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsappsvcRequest) GoString() string {
	return s.String()
}

func (s *QueryOpsappsvcRequest) SetAuthToken(v string) *QueryOpsappsvcRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOpsappsvcRequest) SetAppName(v string) *QueryOpsappsvcRequest {
	s.AppName = &v
	return s
}

func (s *QueryOpsappsvcRequest) SetPageNum(v int) *QueryOpsappsvcRequest {
	s.PageNum = &v
	return s
}

func (s *QueryOpsappsvcRequest) SetPageSize(v int) *QueryOpsappsvcRequest {
	s.PageSize = &v
	return s
}

func (s *QueryOpsappsvcRequest) SetServiceName(v string) *QueryOpsappsvcRequest {
	s.ServiceName = &v
	return s
}

type QueryOpsappsvcResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用服务的运维历史
	Opsappsvcs []*OpsApplication `json:"opsappsvcs,omitempty" xml:"opsappsvcs,omitempty" type:"Repeated"`
	// 当前页码
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总数
	TotalCount *int `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryOpsappsvcResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOpsappsvcResponse) GoString() string {
	return s.String()
}

func (s *QueryOpsappsvcResponse) SetReqMsgId(v string) *QueryOpsappsvcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOpsappsvcResponse) SetResultCode(v string) *QueryOpsappsvcResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOpsappsvcResponse) SetResultMsg(v string) *QueryOpsappsvcResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOpsappsvcResponse) SetOpsappsvcs(v []*OpsApplication) *QueryOpsappsvcResponse {
	s.Opsappsvcs = v
	return s
}

func (s *QueryOpsappsvcResponse) SetPageNum(v int) *QueryOpsappsvcResponse {
	s.PageNum = &v
	return s
}

func (s *QueryOpsappsvcResponse) SetPageSize(v int) *QueryOpsappsvcResponse {
	s.PageSize = &v
	return s
}

func (s *QueryOpsappsvcResponse) SetTotalCount(v int) *QueryOpsappsvcResponse {
	s.TotalCount = &v
	return s
}

type AsyncexecuteBashcmdRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 执行的命令，长度不能超过500个字符
	Command *string `json:"command,omitempty" xml:"command,omitempty"`
	// 执行指令的目标机器id列表。n代表第n个机器，n从1开始，最大50。如果要输入多个机器，使用如下形式：computers.1.id=000112367&computers.2.id=000112367
	Computers []*Computer `json:"computers,omitempty" xml:"computers,omitempty" type:"Repeated"`
	// 单次执行的超时时间，单位为秒。最大值为1800秒，默认值也为1800秒
	TimeOut *int `json:"time_out,omitempty" xml:"time_out,omitempty"`
	// 机器上执行命令的用户,比如：root,admin
	User *string `json:"user,omitempty" xml:"user,omitempty"`
}

func (s AsyncexecuteBashcmdRequest) String() string {
	return tea.Prettify(s)
}

func (s AsyncexecuteBashcmdRequest) GoString() string {
	return s.String()
}

func (s *AsyncexecuteBashcmdRequest) SetAuthToken(v string) *AsyncexecuteBashcmdRequest {
	s.AuthToken = &v
	return s
}

func (s *AsyncexecuteBashcmdRequest) SetCommand(v string) *AsyncexecuteBashcmdRequest {
	s.Command = &v
	return s
}

func (s *AsyncexecuteBashcmdRequest) SetComputers(v []*Computer) *AsyncexecuteBashcmdRequest {
	s.Computers = v
	return s
}

func (s *AsyncexecuteBashcmdRequest) SetTimeOut(v int) *AsyncexecuteBashcmdRequest {
	s.TimeOut = &v
	return s
}

func (s *AsyncexecuteBashcmdRequest) SetUser(v string) *AsyncexecuteBashcmdRequest {
	s.User = &v
	return s
}

type AsyncexecuteBashcmdResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 异步bash命令执行的任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s AsyncexecuteBashcmdResponse) String() string {
	return tea.Prettify(s)
}

func (s AsyncexecuteBashcmdResponse) GoString() string {
	return s.String()
}

func (s *AsyncexecuteBashcmdResponse) SetReqMsgId(v string) *AsyncexecuteBashcmdResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AsyncexecuteBashcmdResponse) SetResultCode(v string) *AsyncexecuteBashcmdResponse {
	s.ResultCode = &v
	return s
}

func (s *AsyncexecuteBashcmdResponse) SetResultMsg(v string) *AsyncexecuteBashcmdResponse {
	s.ResultMsg = &v
	return s
}

func (s *AsyncexecuteBashcmdResponse) SetTaskId(v string) *AsyncexecuteBashcmdResponse {
	s.TaskId = &v
	return s
}

type GetBashcmdResultRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 异步bash指令执行的任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s GetBashcmdResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBashcmdResultRequest) GoString() string {
	return s.String()
}

func (s *GetBashcmdResultRequest) SetAuthToken(v string) *GetBashcmdResultRequest {
	s.AuthToken = &v
	return s
}

func (s *GetBashcmdResultRequest) SetTaskId(v string) *GetBashcmdResultRequest {
	s.TaskId = &v
	return s
}

type GetBashcmdResultResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误信息。内容为指令无法下发到机器上的详细原因
	ErrMsg *string `json:"err_msg,omitempty" xml:"err_msg,omitempty"`
	// 执行结束时间
	FinishTime *string `json:"finish_time,omitempty" xml:"finish_time,omitempty"`
	// 执行的结果
	Results []*SingleExecResult `json:"results,omitempty" xml:"results,omitempty" type:"Repeated"`
	// 执行开始时间
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty"`
	// 执行结果状态。取值列表：EXECUTING：执行中；SUCCESS：执行成功；FAILED：执行失败；IGNORED：已忽略；TIME_OUT：已超时
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s GetBashcmdResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBashcmdResultResponse) GoString() string {
	return s.String()
}

func (s *GetBashcmdResultResponse) SetReqMsgId(v string) *GetBashcmdResultResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetBashcmdResultResponse) SetResultCode(v string) *GetBashcmdResultResponse {
	s.ResultCode = &v
	return s
}

func (s *GetBashcmdResultResponse) SetResultMsg(v string) *GetBashcmdResultResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetBashcmdResultResponse) SetErrMsg(v string) *GetBashcmdResultResponse {
	s.ErrMsg = &v
	return s
}

func (s *GetBashcmdResultResponse) SetFinishTime(v string) *GetBashcmdResultResponse {
	s.FinishTime = &v
	return s
}

func (s *GetBashcmdResultResponse) SetResults(v []*SingleExecResult) *GetBashcmdResultResponse {
	s.Results = v
	return s
}

func (s *GetBashcmdResultResponse) SetStartTime(v string) *GetBashcmdResultResponse {
	s.StartTime = &v
	return s
}

func (s *GetBashcmdResultResponse) SetStatus(v string) *GetBashcmdResultResponse {
	s.Status = &v
	return s
}

type CheckCloudconfigBgreleaseRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CheckCloudconfigBgreleaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigBgreleaseRequest) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigBgreleaseRequest) SetAuthToken(v string) *CheckCloudconfigBgreleaseRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckCloudconfigBgreleaseRequest) SetWorkspace(v string) *CheckCloudconfigBgreleaseRequest {
	s.Workspace = &v
	return s
}

type CheckCloudconfigBgreleaseResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否已开通
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
}

func (s CheckCloudconfigBgreleaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigBgreleaseResponse) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigBgreleaseResponse) SetReqMsgId(v string) *CheckCloudconfigBgreleaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckCloudconfigBgreleaseResponse) SetResultCode(v string) *CheckCloudconfigBgreleaseResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckCloudconfigBgreleaseResponse) SetResultMsg(v string) *CheckCloudconfigBgreleaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckCloudconfigBgreleaseResponse) SetEnabled(v bool) *CheckCloudconfigBgreleaseResponse {
	s.Enabled = &v
	return s
}

type CheckCloudconfigBgdeploymentcellRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// require_release
	RequireRelease *bool `json:"require_release,omitempty" xml:"require_release,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CheckCloudconfigBgdeploymentcellRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigBgdeploymentcellRequest) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigBgdeploymentcellRequest) SetAuthToken(v string) *CheckCloudconfigBgdeploymentcellRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckCloudconfigBgdeploymentcellRequest) SetRequireRelease(v bool) *CheckCloudconfigBgdeploymentcellRequest {
	s.RequireRelease = &v
	return s
}

func (s *CheckCloudconfigBgdeploymentcellRequest) SetWorkspace(v string) *CheckCloudconfigBgdeploymentcellRequest {
	s.Workspace = &v
	return s
}

type CheckCloudconfigBgdeploymentcellResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否已开通
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
}

func (s CheckCloudconfigBgdeploymentcellResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigBgdeploymentcellResponse) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigBgdeploymentcellResponse) SetReqMsgId(v string) *CheckCloudconfigBgdeploymentcellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckCloudconfigBgdeploymentcellResponse) SetResultCode(v string) *CheckCloudconfigBgdeploymentcellResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckCloudconfigBgdeploymentcellResponse) SetResultMsg(v string) *CheckCloudconfigBgdeploymentcellResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckCloudconfigBgdeploymentcellResponse) SetEnabled(v bool) *CheckCloudconfigBgdeploymentcellResponse {
	s.Enabled = &v
	return s
}

type CheckCloudconfigAppserviceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CheckCloudconfigAppserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigAppserviceRequest) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigAppserviceRequest) SetAuthToken(v string) *CheckCloudconfigAppserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckCloudconfigAppserviceRequest) SetWorkspace(v string) *CheckCloudconfigAppserviceRequest {
	s.Workspace = &v
	return s
}

type CheckCloudconfigAppserviceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否已开通
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
}

func (s CheckCloudconfigAppserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigAppserviceResponse) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigAppserviceResponse) SetReqMsgId(v string) *CheckCloudconfigAppserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckCloudconfigAppserviceResponse) SetResultCode(v string) *CheckCloudconfigAppserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckCloudconfigAppserviceResponse) SetResultMsg(v string) *CheckCloudconfigAppserviceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckCloudconfigAppserviceResponse) SetEnabled(v bool) *CheckCloudconfigAppserviceResponse {
	s.Enabled = &v
	return s
}

type CheckCloudconfigSharedmwRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CheckCloudconfigSharedmwRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigSharedmwRequest) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigSharedmwRequest) SetAuthToken(v string) *CheckCloudconfigSharedmwRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckCloudconfigSharedmwRequest) SetWorkspace(v string) *CheckCloudconfigSharedmwRequest {
	s.Workspace = &v
	return s
}

type CheckCloudconfigSharedmwResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否已开通
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
}

func (s CheckCloudconfigSharedmwResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigSharedmwResponse) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigSharedmwResponse) SetReqMsgId(v string) *CheckCloudconfigSharedmwResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckCloudconfigSharedmwResponse) SetResultCode(v string) *CheckCloudconfigSharedmwResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckCloudconfigSharedmwResponse) SetResultMsg(v string) *CheckCloudconfigSharedmwResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckCloudconfigSharedmwResponse) SetEnabled(v bool) *CheckCloudconfigSharedmwResponse {
	s.Enabled = &v
	return s
}

type CheckCloudconfigVonereleaseRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CheckCloudconfigVonereleaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigVonereleaseRequest) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigVonereleaseRequest) SetAuthToken(v string) *CheckCloudconfigVonereleaseRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckCloudconfigVonereleaseRequest) SetWorkspace(v string) *CheckCloudconfigVonereleaseRequest {
	s.Workspace = &v
	return s
}

type CheckCloudconfigVonereleaseResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否使用
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
}

func (s CheckCloudconfigVonereleaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigVonereleaseResponse) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigVonereleaseResponse) SetReqMsgId(v string) *CheckCloudconfigVonereleaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckCloudconfigVonereleaseResponse) SetResultCode(v string) *CheckCloudconfigVonereleaseResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckCloudconfigVonereleaseResponse) SetResultMsg(v string) *CheckCloudconfigVonereleaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckCloudconfigVonereleaseResponse) SetEnabled(v bool) *CheckCloudconfigVonereleaseResponse {
	s.Enabled = &v
	return s
}

type CheckCloudconfigVoneappopsRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CheckCloudconfigVoneappopsRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigVoneappopsRequest) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigVoneappopsRequest) SetAuthToken(v string) *CheckCloudconfigVoneappopsRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckCloudconfigVoneappopsRequest) SetWorkspace(v string) *CheckCloudconfigVoneappopsRequest {
	s.Workspace = &v
	return s
}

type CheckCloudconfigVoneappopsResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否使用
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
}

func (s CheckCloudconfigVoneappopsResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigVoneappopsResponse) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigVoneappopsResponse) SetReqMsgId(v string) *CheckCloudconfigVoneappopsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckCloudconfigVoneappopsResponse) SetResultCode(v string) *CheckCloudconfigVoneappopsResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckCloudconfigVoneappopsResponse) SetResultMsg(v string) *CheckCloudconfigVoneappopsResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckCloudconfigVoneappopsResponse) SetEnabled(v bool) *CheckCloudconfigVoneappopsResponse {
	s.Enabled = &v
	return s
}

type CheckCloudconfigOlduiRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CheckCloudconfigOlduiRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigOlduiRequest) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigOlduiRequest) SetAuthToken(v string) *CheckCloudconfigOlduiRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckCloudconfigOlduiRequest) SetWorkspace(v string) *CheckCloudconfigOlduiRequest {
	s.Workspace = &v
	return s
}

type CheckCloudconfigOlduiResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否使用
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
}

func (s CheckCloudconfigOlduiResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigOlduiResponse) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigOlduiResponse) SetReqMsgId(v string) *CheckCloudconfigOlduiResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckCloudconfigOlduiResponse) SetResultCode(v string) *CheckCloudconfigOlduiResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckCloudconfigOlduiResponse) SetResultMsg(v string) *CheckCloudconfigOlduiResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckCloudconfigOlduiResponse) SetEnabled(v bool) *CheckCloudconfigOlduiResponse {
	s.Enabled = &v
	return s
}

type CheckCloudconfigXdclbforbiddenRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CheckCloudconfigXdclbforbiddenRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigXdclbforbiddenRequest) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigXdclbforbiddenRequest) SetAuthToken(v string) *CheckCloudconfigXdclbforbiddenRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckCloudconfigXdclbforbiddenRequest) SetWorkspace(v string) *CheckCloudconfigXdclbforbiddenRequest {
	s.Workspace = &v
	return s
}

type CheckCloudconfigXdclbforbiddenResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否禁用
	Forbidden *bool `json:"forbidden,omitempty" xml:"forbidden,omitempty"`
}

func (s CheckCloudconfigXdclbforbiddenResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudconfigXdclbforbiddenResponse) GoString() string {
	return s.String()
}

func (s *CheckCloudconfigXdclbforbiddenResponse) SetReqMsgId(v string) *CheckCloudconfigXdclbforbiddenResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckCloudconfigXdclbforbiddenResponse) SetResultCode(v string) *CheckCloudconfigXdclbforbiddenResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckCloudconfigXdclbforbiddenResponse) SetResultMsg(v string) *CheckCloudconfigXdclbforbiddenResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckCloudconfigXdclbforbiddenResponse) SetForbidden(v bool) *CheckCloudconfigXdclbforbiddenResponse {
	s.Forbidden = &v
	return s
}

type QueryCloudconfigOpenapiconfigRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryCloudconfigOpenapiconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudconfigOpenapiconfigRequest) GoString() string {
	return s.String()
}

func (s *QueryCloudconfigOpenapiconfigRequest) SetAuthToken(v string) *QueryCloudconfigOpenapiconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCloudconfigOpenapiconfigRequest) SetWorkspace(v string) *QueryCloudconfigOpenapiconfigRequest {
	s.Workspace = &v
	return s
}

type QueryCloudconfigOpenapiconfigResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 配置内容
	Config *string `json:"config,omitempty" xml:"config,omitempty"`
}

func (s QueryCloudconfigOpenapiconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudconfigOpenapiconfigResponse) GoString() string {
	return s.String()
}

func (s *QueryCloudconfigOpenapiconfigResponse) SetReqMsgId(v string) *QueryCloudconfigOpenapiconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCloudconfigOpenapiconfigResponse) SetResultCode(v string) *QueryCloudconfigOpenapiconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCloudconfigOpenapiconfigResponse) SetResultMsg(v string) *QueryCloudconfigOpenapiconfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCloudconfigOpenapiconfigResponse) SetConfig(v string) *QueryCloudconfigOpenapiconfigResponse {
	s.Config = &v
	return s
}

type CountAppsPkgRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用 id 列表
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CountAppsPkgRequest) String() string {
	return tea.Prettify(s)
}

func (s CountAppsPkgRequest) GoString() string {
	return s.String()
}

func (s *CountAppsPkgRequest) SetAuthToken(v string) *CountAppsPkgRequest {
	s.AuthToken = &v
	return s
}

func (s *CountAppsPkgRequest) SetAppIds(v []*string) *CountAppsPkgRequest {
	s.AppIds = v
	return s
}

func (s *CountAppsPkgRequest) SetWorkspace(v string) *CountAppsPkgRequest {
	s.Workspace = &v
	return s
}

type CountAppsPkgResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用包个数，键为应用ID，值为对应包个数
	Data []*Pair `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s CountAppsPkgResponse) String() string {
	return tea.Prettify(s)
}

func (s CountAppsPkgResponse) GoString() string {
	return s.String()
}

func (s *CountAppsPkgResponse) SetReqMsgId(v string) *CountAppsPkgResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CountAppsPkgResponse) SetResultCode(v string) *CountAppsPkgResponse {
	s.ResultCode = &v
	return s
}

func (s *CountAppsPkgResponse) SetResultMsg(v string) *CountAppsPkgResponse {
	s.ResultMsg = &v
	return s
}

func (s *CountAppsPkgResponse) SetData(v []*Pair) *CountAppsPkgResponse {
	s.Data = v
	return s
}

type QueryAppUnitresourcesRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用 id 列表
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryAppUnitresourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppUnitresourcesRequest) GoString() string {
	return s.String()
}

func (s *QueryAppUnitresourcesRequest) SetAuthToken(v string) *QueryAppUnitresourcesRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppUnitresourcesRequest) SetAppIds(v []*string) *QueryAppUnitresourcesRequest {
	s.AppIds = v
	return s
}

func (s *QueryAppUnitresourcesRequest) SetWorkspace(v string) *QueryAppUnitresourcesRequest {
	s.Workspace = &v
	return s
}

type QueryAppUnitresourcesResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 资源统计
	Resources *string `json:"resources,omitempty" xml:"resources,omitempty"`
}

func (s QueryAppUnitresourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppUnitresourcesResponse) GoString() string {
	return s.String()
}

func (s *QueryAppUnitresourcesResponse) SetReqMsgId(v string) *QueryAppUnitresourcesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppUnitresourcesResponse) SetResultCode(v string) *QueryAppUnitresourcesResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppUnitresourcesResponse) SetResultMsg(v string) *QueryAppUnitresourcesResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppUnitresourcesResponse) SetResources(v string) *QueryAppUnitresourcesResponse {
	s.Resources = &v
	return s
}

type QueryOauthTokenRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryOauthTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOauthTokenRequest) GoString() string {
	return s.String()
}

func (s *QueryOauthTokenRequest) SetAuthToken(v string) *QueryOauthTokenRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOauthTokenRequest) SetWorkspace(v string) *QueryOauthTokenRequest {
	s.Workspace = &v
	return s
}

type QueryOauthTokenResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 过期时间
	AccessExpiredTime *string `json:"access_expired_time,omitempty" xml:"access_expired_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// access token
	AccessToken *string `json:"access_token,omitempty" xml:"access_token,omitempty"`
	// 用户 id
	CustomerId *string `json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	// 过期时间
	RefreshExpiredTime *string `json:"refresh_expired_time,omitempty" xml:"refresh_expired_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// refresh token
	RefreshToken *string `json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// 租户名
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// 租户 ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s QueryOauthTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOauthTokenResponse) GoString() string {
	return s.String()
}

func (s *QueryOauthTokenResponse) SetReqMsgId(v string) *QueryOauthTokenResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOauthTokenResponse) SetResultCode(v string) *QueryOauthTokenResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOauthTokenResponse) SetResultMsg(v string) *QueryOauthTokenResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOauthTokenResponse) SetAccessExpiredTime(v string) *QueryOauthTokenResponse {
	s.AccessExpiredTime = &v
	return s
}

func (s *QueryOauthTokenResponse) SetAccessToken(v string) *QueryOauthTokenResponse {
	s.AccessToken = &v
	return s
}

func (s *QueryOauthTokenResponse) SetCustomerId(v string) *QueryOauthTokenResponse {
	s.CustomerId = &v
	return s
}

func (s *QueryOauthTokenResponse) SetRefreshExpiredTime(v string) *QueryOauthTokenResponse {
	s.RefreshExpiredTime = &v
	return s
}

func (s *QueryOauthTokenResponse) SetRefreshToken(v string) *QueryOauthTokenResponse {
	s.RefreshToken = &v
	return s
}

func (s *QueryOauthTokenResponse) SetTenant(v string) *QueryOauthTokenResponse {
	s.Tenant = &v
	return s
}

func (s *QueryOauthTokenResponse) SetTenantId(v string) *QueryOauthTokenResponse {
	s.TenantId = &v
	return s
}

type UpdateOauthTokenRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 过期时间
	AccessExpiredTime *string `json:"access_expired_time,omitempty" xml:"access_expired_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// access token
	AccessToken *string `json:"access_token,omitempty" xml:"access_token,omitempty"`
	// 用户 ID
	CustomerId *string `json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	// 过期时间
	RefreshExpiredTime *string `json:"refresh_expired_time,omitempty" xml:"refresh_expired_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// refresh token
	RefreshToken *string `json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s UpdateOauthTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateOauthTokenRequest) GoString() string {
	return s.String()
}

func (s *UpdateOauthTokenRequest) SetAuthToken(v string) *UpdateOauthTokenRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateOauthTokenRequest) SetAccessExpiredTime(v string) *UpdateOauthTokenRequest {
	s.AccessExpiredTime = &v
	return s
}

func (s *UpdateOauthTokenRequest) SetAccessToken(v string) *UpdateOauthTokenRequest {
	s.AccessToken = &v
	return s
}

func (s *UpdateOauthTokenRequest) SetCustomerId(v string) *UpdateOauthTokenRequest {
	s.CustomerId = &v
	return s
}

func (s *UpdateOauthTokenRequest) SetRefreshExpiredTime(v string) *UpdateOauthTokenRequest {
	s.RefreshExpiredTime = &v
	return s
}

func (s *UpdateOauthTokenRequest) SetRefreshToken(v string) *UpdateOauthTokenRequest {
	s.RefreshToken = &v
	return s
}

func (s *UpdateOauthTokenRequest) SetWorkspace(v string) *UpdateOauthTokenRequest {
	s.Workspace = &v
	return s
}

type UpdateOauthTokenResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateOauthTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateOauthTokenResponse) GoString() string {
	return s.String()
}

func (s *UpdateOauthTokenResponse) SetReqMsgId(v string) *UpdateOauthTokenResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateOauthTokenResponse) SetResultCode(v string) *UpdateOauthTokenResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateOauthTokenResponse) SetResultMsg(v string) *UpdateOauthTokenResponse {
	s.ResultMsg = &v
	return s
}

type DeleteOauthTokenRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s DeleteOauthTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteOauthTokenRequest) GoString() string {
	return s.String()
}

func (s *DeleteOauthTokenRequest) SetAuthToken(v string) *DeleteOauthTokenRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteOauthTokenRequest) SetWorkspace(v string) *DeleteOauthTokenRequest {
	s.Workspace = &v
	return s
}

type DeleteOauthTokenResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteOauthTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteOauthTokenResponse) GoString() string {
	return s.String()
}

func (s *DeleteOauthTokenResponse) SetReqMsgId(v string) *DeleteOauthTokenResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteOauthTokenResponse) SetResultCode(v string) *DeleteOauthTokenResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteOauthTokenResponse) SetResultMsg(v string) *DeleteOauthTokenResponse {
	s.ResultMsg = &v
	return s
}

type QueryBaseinfoDeploymentzonesRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryBaseinfoDeploymentzonesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBaseinfoDeploymentzonesRequest) GoString() string {
	return s.String()
}

func (s *QueryBaseinfoDeploymentzonesRequest) SetAuthToken(v string) *QueryBaseinfoDeploymentzonesRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBaseinfoDeploymentzonesRequest) SetWorkspace(v string) *QueryBaseinfoDeploymentzonesRequest {
	s.Workspace = &v
	return s
}

type QueryBaseinfoDeploymentzonesResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 部署可用区列表
	DeploymentZones []*string `json:"deployment_zones,omitempty" xml:"deployment_zones,omitempty" type:"Repeated"`
}

func (s QueryBaseinfoDeploymentzonesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBaseinfoDeploymentzonesResponse) GoString() string {
	return s.String()
}

func (s *QueryBaseinfoDeploymentzonesResponse) SetReqMsgId(v string) *QueryBaseinfoDeploymentzonesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBaseinfoDeploymentzonesResponse) SetResultCode(v string) *QueryBaseinfoDeploymentzonesResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBaseinfoDeploymentzonesResponse) SetResultMsg(v string) *QueryBaseinfoDeploymentzonesResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBaseinfoDeploymentzonesResponse) SetDeploymentZones(v []*string) *QueryBaseinfoDeploymentzonesResponse {
	s.DeploymentZones = v
	return s
}

type GetBgreleaseArrangementRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetBgreleaseArrangementRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBgreleaseArrangementRequest) GoString() string {
	return s.String()
}

func (s *GetBgreleaseArrangementRequest) SetAuthToken(v string) *GetBgreleaseArrangementRequest {
	s.AuthToken = &v
	return s
}

func (s *GetBgreleaseArrangementRequest) SetArrangementId(v string) *GetBgreleaseArrangementRequest {
	s.ArrangementId = &v
	return s
}

func (s *GetBgreleaseArrangementRequest) SetPlanId(v string) *GetBgreleaseArrangementRequest {
	s.PlanId = &v
	return s
}

func (s *GetBgreleaseArrangementRequest) SetWorkspace(v string) *GetBgreleaseArrangementRequest {
	s.Workspace = &v
	return s
}

type GetBgreleaseArrangementResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 概览内容
	Arrangement *string `json:"arrangement,omitempty" xml:"arrangement,omitempty"`
}

func (s GetBgreleaseArrangementResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBgreleaseArrangementResponse) GoString() string {
	return s.String()
}

func (s *GetBgreleaseArrangementResponse) SetReqMsgId(v string) *GetBgreleaseArrangementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetBgreleaseArrangementResponse) SetResultCode(v string) *GetBgreleaseArrangementResponse {
	s.ResultCode = &v
	return s
}

func (s *GetBgreleaseArrangementResponse) SetResultMsg(v string) *GetBgreleaseArrangementResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetBgreleaseArrangementResponse) SetArrangement(v string) *GetBgreleaseArrangementResponse {
	s.Arrangement = &v
	return s
}

type QueryBgreleaseArrangementRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryBgreleaseArrangementRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBgreleaseArrangementRequest) GoString() string {
	return s.String()
}

func (s *QueryBgreleaseArrangementRequest) SetAuthToken(v string) *QueryBgreleaseArrangementRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBgreleaseArrangementRequest) SetPlanId(v string) *QueryBgreleaseArrangementRequest {
	s.PlanId = &v
	return s
}

func (s *QueryBgreleaseArrangementRequest) SetWorkspace(v string) *QueryBgreleaseArrangementRequest {
	s.Workspace = &v
	return s
}

type QueryBgreleaseArrangementResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 蓝绿发布概览列表
	Arrangements []*string `json:"arrangements,omitempty" xml:"arrangements,omitempty" type:"Repeated"`
}

func (s QueryBgreleaseArrangementResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBgreleaseArrangementResponse) GoString() string {
	return s.String()
}

func (s *QueryBgreleaseArrangementResponse) SetReqMsgId(v string) *QueryBgreleaseArrangementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBgreleaseArrangementResponse) SetResultCode(v string) *QueryBgreleaseArrangementResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBgreleaseArrangementResponse) SetResultMsg(v string) *QueryBgreleaseArrangementResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBgreleaseArrangementResponse) SetArrangements(v []*string) *QueryBgreleaseArrangementResponse {
	s.Arrangements = v
	return s
}

type QueryBgreleaseArrangementprogressRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryBgreleaseArrangementprogressRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBgreleaseArrangementprogressRequest) GoString() string {
	return s.String()
}

func (s *QueryBgreleaseArrangementprogressRequest) SetAuthToken(v string) *QueryBgreleaseArrangementprogressRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBgreleaseArrangementprogressRequest) SetArrangementId(v string) *QueryBgreleaseArrangementprogressRequest {
	s.ArrangementId = &v
	return s
}

func (s *QueryBgreleaseArrangementprogressRequest) SetPlanId(v string) *QueryBgreleaseArrangementprogressRequest {
	s.PlanId = &v
	return s
}

func (s *QueryBgreleaseArrangementprogressRequest) SetWorkspace(v string) *QueryBgreleaseArrangementprogressRequest {
	s.Workspace = &v
	return s
}

type QueryBgreleaseArrangementprogressResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 进度
	Progresses []*string `json:"progresses,omitempty" xml:"progresses,omitempty" type:"Repeated"`
}

func (s QueryBgreleaseArrangementprogressResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBgreleaseArrangementprogressResponse) GoString() string {
	return s.String()
}

func (s *QueryBgreleaseArrangementprogressResponse) SetReqMsgId(v string) *QueryBgreleaseArrangementprogressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBgreleaseArrangementprogressResponse) SetResultCode(v string) *QueryBgreleaseArrangementprogressResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBgreleaseArrangementprogressResponse) SetResultMsg(v string) *QueryBgreleaseArrangementprogressResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBgreleaseArrangementprogressResponse) SetProgresses(v []*string) *QueryBgreleaseArrangementprogressResponse {
	s.Progresses = v
	return s
}

type QueryBgreleaseTaskprogressRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryBgreleaseTaskprogressRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBgreleaseTaskprogressRequest) GoString() string {
	return s.String()
}

func (s *QueryBgreleaseTaskprogressRequest) SetAuthToken(v string) *QueryBgreleaseTaskprogressRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBgreleaseTaskprogressRequest) SetArrangementId(v string) *QueryBgreleaseTaskprogressRequest {
	s.ArrangementId = &v
	return s
}

func (s *QueryBgreleaseTaskprogressRequest) SetPlanId(v string) *QueryBgreleaseTaskprogressRequest {
	s.PlanId = &v
	return s
}

func (s *QueryBgreleaseTaskprogressRequest) SetWorkspace(v string) *QueryBgreleaseTaskprogressRequest {
	s.Workspace = &v
	return s
}

type QueryBgreleaseTaskprogressResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 进度
	Progresses []*string `json:"progresses,omitempty" xml:"progresses,omitempty" type:"Repeated"`
}

func (s QueryBgreleaseTaskprogressResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBgreleaseTaskprogressResponse) GoString() string {
	return s.String()
}

func (s *QueryBgreleaseTaskprogressResponse) SetReqMsgId(v string) *QueryBgreleaseTaskprogressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBgreleaseTaskprogressResponse) SetResultCode(v string) *QueryBgreleaseTaskprogressResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBgreleaseTaskprogressResponse) SetResultMsg(v string) *QueryBgreleaseTaskprogressResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBgreleaseTaskprogressResponse) SetProgresses(v []*string) *QueryBgreleaseTaskprogressResponse {
	s.Progresses = v
	return s
}

type ExecBgreleaseArrangementRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ExecBgreleaseArrangementRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecBgreleaseArrangementRequest) GoString() string {
	return s.String()
}

func (s *ExecBgreleaseArrangementRequest) SetAuthToken(v string) *ExecBgreleaseArrangementRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecBgreleaseArrangementRequest) SetArrangementId(v string) *ExecBgreleaseArrangementRequest {
	s.ArrangementId = &v
	return s
}

func (s *ExecBgreleaseArrangementRequest) SetPlanId(v string) *ExecBgreleaseArrangementRequest {
	s.PlanId = &v
	return s
}

func (s *ExecBgreleaseArrangementRequest) SetWorkspace(v string) *ExecBgreleaseArrangementRequest {
	s.Workspace = &v
	return s
}

type ExecBgreleaseArrangementResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 概览
	Arrangement *string `json:"arrangement,omitempty" xml:"arrangement,omitempty"`
}

func (s ExecBgreleaseArrangementResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecBgreleaseArrangementResponse) GoString() string {
	return s.String()
}

func (s *ExecBgreleaseArrangementResponse) SetReqMsgId(v string) *ExecBgreleaseArrangementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecBgreleaseArrangementResponse) SetResultCode(v string) *ExecBgreleaseArrangementResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecBgreleaseArrangementResponse) SetResultMsg(v string) *ExecBgreleaseArrangementResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecBgreleaseArrangementResponse) SetArrangement(v string) *ExecBgreleaseArrangementResponse {
	s.Arrangement = &v
	return s
}

type ConfirmBgreleaseArrangementRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ConfirmBgreleaseArrangementRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmBgreleaseArrangementRequest) GoString() string {
	return s.String()
}

func (s *ConfirmBgreleaseArrangementRequest) SetAuthToken(v string) *ConfirmBgreleaseArrangementRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmBgreleaseArrangementRequest) SetArrangementId(v string) *ConfirmBgreleaseArrangementRequest {
	s.ArrangementId = &v
	return s
}

func (s *ConfirmBgreleaseArrangementRequest) SetPlanId(v string) *ConfirmBgreleaseArrangementRequest {
	s.PlanId = &v
	return s
}

func (s *ConfirmBgreleaseArrangementRequest) SetWorkspace(v string) *ConfirmBgreleaseArrangementRequest {
	s.Workspace = &v
	return s
}

type ConfirmBgreleaseArrangementResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 概览
	Arrangement *string `json:"arrangement,omitempty" xml:"arrangement,omitempty"`
}

func (s ConfirmBgreleaseArrangementResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmBgreleaseArrangementResponse) GoString() string {
	return s.String()
}

func (s *ConfirmBgreleaseArrangementResponse) SetReqMsgId(v string) *ConfirmBgreleaseArrangementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmBgreleaseArrangementResponse) SetResultCode(v string) *ConfirmBgreleaseArrangementResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmBgreleaseArrangementResponse) SetResultMsg(v string) *ConfirmBgreleaseArrangementResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmBgreleaseArrangementResponse) SetArrangement(v string) *ConfirmBgreleaseArrangementResponse {
	s.Arrangement = &v
	return s
}

type ConfirmBgreleaseArrangementvalidationRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ConfirmBgreleaseArrangementvalidationRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmBgreleaseArrangementvalidationRequest) GoString() string {
	return s.String()
}

func (s *ConfirmBgreleaseArrangementvalidationRequest) SetAuthToken(v string) *ConfirmBgreleaseArrangementvalidationRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmBgreleaseArrangementvalidationRequest) SetArrangementId(v string) *ConfirmBgreleaseArrangementvalidationRequest {
	s.ArrangementId = &v
	return s
}

func (s *ConfirmBgreleaseArrangementvalidationRequest) SetPlanId(v string) *ConfirmBgreleaseArrangementvalidationRequest {
	s.PlanId = &v
	return s
}

func (s *ConfirmBgreleaseArrangementvalidationRequest) SetWorkspace(v string) *ConfirmBgreleaseArrangementvalidationRequest {
	s.Workspace = &v
	return s
}

type ConfirmBgreleaseArrangementvalidationResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 概览
	Arrangement *string `json:"arrangement,omitempty" xml:"arrangement,omitempty"`
}

func (s ConfirmBgreleaseArrangementvalidationResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmBgreleaseArrangementvalidationResponse) GoString() string {
	return s.String()
}

func (s *ConfirmBgreleaseArrangementvalidationResponse) SetReqMsgId(v string) *ConfirmBgreleaseArrangementvalidationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmBgreleaseArrangementvalidationResponse) SetResultCode(v string) *ConfirmBgreleaseArrangementvalidationResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmBgreleaseArrangementvalidationResponse) SetResultMsg(v string) *ConfirmBgreleaseArrangementvalidationResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmBgreleaseArrangementvalidationResponse) SetArrangement(v string) *ConfirmBgreleaseArrangementvalidationResponse {
	s.Arrangement = &v
	return s
}

type RetryBgreleaseArrangementRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 发布单
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RetryBgreleaseArrangementRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryBgreleaseArrangementRequest) GoString() string {
	return s.String()
}

func (s *RetryBgreleaseArrangementRequest) SetAuthToken(v string) *RetryBgreleaseArrangementRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryBgreleaseArrangementRequest) SetArrangementId(v string) *RetryBgreleaseArrangementRequest {
	s.ArrangementId = &v
	return s
}

func (s *RetryBgreleaseArrangementRequest) SetPlanId(v string) *RetryBgreleaseArrangementRequest {
	s.PlanId = &v
	return s
}

func (s *RetryBgreleaseArrangementRequest) SetWorkspace(v string) *RetryBgreleaseArrangementRequest {
	s.Workspace = &v
	return s
}

type RetryBgreleaseArrangementResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 概览
	Arrangement *string `json:"arrangement,omitempty" xml:"arrangement,omitempty"`
}

func (s RetryBgreleaseArrangementResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryBgreleaseArrangementResponse) GoString() string {
	return s.String()
}

func (s *RetryBgreleaseArrangementResponse) SetReqMsgId(v string) *RetryBgreleaseArrangementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryBgreleaseArrangementResponse) SetResultCode(v string) *RetryBgreleaseArrangementResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryBgreleaseArrangementResponse) SetResultMsg(v string) *RetryBgreleaseArrangementResponse {
	s.ResultMsg = &v
	return s
}

func (s *RetryBgreleaseArrangementResponse) SetArrangement(v string) *RetryBgreleaseArrangementResponse {
	s.Arrangement = &v
	return s
}

type RetryBgreleaseTaskRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// retry_info
	RetryInfo *RetryInfo `json:"retry_info,omitempty" xml:"retry_info,omitempty"`
	// 任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RetryBgreleaseTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryBgreleaseTaskRequest) GoString() string {
	return s.String()
}

func (s *RetryBgreleaseTaskRequest) SetAuthToken(v string) *RetryBgreleaseTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryBgreleaseTaskRequest) SetArrangementId(v string) *RetryBgreleaseTaskRequest {
	s.ArrangementId = &v
	return s
}

func (s *RetryBgreleaseTaskRequest) SetPlanId(v string) *RetryBgreleaseTaskRequest {
	s.PlanId = &v
	return s
}

func (s *RetryBgreleaseTaskRequest) SetRetryInfo(v *RetryInfo) *RetryBgreleaseTaskRequest {
	s.RetryInfo = v
	return s
}

func (s *RetryBgreleaseTaskRequest) SetTaskId(v string) *RetryBgreleaseTaskRequest {
	s.TaskId = &v
	return s
}

func (s *RetryBgreleaseTaskRequest) SetWorkspace(v string) *RetryBgreleaseTaskRequest {
	s.Workspace = &v
	return s
}

type RetryBgreleaseTaskResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 概览
	Arrangement *string `json:"arrangement,omitempty" xml:"arrangement,omitempty"`
}

func (s RetryBgreleaseTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryBgreleaseTaskResponse) GoString() string {
	return s.String()
}

func (s *RetryBgreleaseTaskResponse) SetReqMsgId(v string) *RetryBgreleaseTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryBgreleaseTaskResponse) SetResultCode(v string) *RetryBgreleaseTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryBgreleaseTaskResponse) SetResultMsg(v string) *RetryBgreleaseTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *RetryBgreleaseTaskResponse) SetArrangement(v string) *RetryBgreleaseTaskResponse {
	s.Arrangement = &v
	return s
}

type SkipBgreleaseTaskRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// 任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s SkipBgreleaseTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SkipBgreleaseTaskRequest) GoString() string {
	return s.String()
}

func (s *SkipBgreleaseTaskRequest) SetAuthToken(v string) *SkipBgreleaseTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *SkipBgreleaseTaskRequest) SetArrangementId(v string) *SkipBgreleaseTaskRequest {
	s.ArrangementId = &v
	return s
}

func (s *SkipBgreleaseTaskRequest) SetPlanId(v string) *SkipBgreleaseTaskRequest {
	s.PlanId = &v
	return s
}

func (s *SkipBgreleaseTaskRequest) SetTaskId(v string) *SkipBgreleaseTaskRequest {
	s.TaskId = &v
	return s
}

func (s *SkipBgreleaseTaskRequest) SetWorkspace(v string) *SkipBgreleaseTaskRequest {
	s.Workspace = &v
	return s
}

type SkipBgreleaseTaskResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 概览
	Arrangement *string `json:"arrangement,omitempty" xml:"arrangement,omitempty"`
}

func (s SkipBgreleaseTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SkipBgreleaseTaskResponse) GoString() string {
	return s.String()
}

func (s *SkipBgreleaseTaskResponse) SetReqMsgId(v string) *SkipBgreleaseTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SkipBgreleaseTaskResponse) SetResultCode(v string) *SkipBgreleaseTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *SkipBgreleaseTaskResponse) SetResultMsg(v string) *SkipBgreleaseTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *SkipBgreleaseTaskResponse) SetArrangement(v string) *SkipBgreleaseTaskResponse {
	s.Arrangement = &v
	return s
}

type SkipBgreleaseArrangementRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s SkipBgreleaseArrangementRequest) String() string {
	return tea.Prettify(s)
}

func (s SkipBgreleaseArrangementRequest) GoString() string {
	return s.String()
}

func (s *SkipBgreleaseArrangementRequest) SetAuthToken(v string) *SkipBgreleaseArrangementRequest {
	s.AuthToken = &v
	return s
}

func (s *SkipBgreleaseArrangementRequest) SetArrangementId(v string) *SkipBgreleaseArrangementRequest {
	s.ArrangementId = &v
	return s
}

func (s *SkipBgreleaseArrangementRequest) SetPlanId(v string) *SkipBgreleaseArrangementRequest {
	s.PlanId = &v
	return s
}

func (s *SkipBgreleaseArrangementRequest) SetWorkspace(v string) *SkipBgreleaseArrangementRequest {
	s.Workspace = &v
	return s
}

type SkipBgreleaseArrangementResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 概览
	Arrangement *string `json:"arrangement,omitempty" xml:"arrangement,omitempty"`
}

func (s SkipBgreleaseArrangementResponse) String() string {
	return tea.Prettify(s)
}

func (s SkipBgreleaseArrangementResponse) GoString() string {
	return s.String()
}

func (s *SkipBgreleaseArrangementResponse) SetReqMsgId(v string) *SkipBgreleaseArrangementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SkipBgreleaseArrangementResponse) SetResultCode(v string) *SkipBgreleaseArrangementResponse {
	s.ResultCode = &v
	return s
}

func (s *SkipBgreleaseArrangementResponse) SetResultMsg(v string) *SkipBgreleaseArrangementResponse {
	s.ResultMsg = &v
	return s
}

func (s *SkipBgreleaseArrangementResponse) SetArrangement(v string) *SkipBgreleaseArrangementResponse {
	s.Arrangement = &v
	return s
}

type CancelBgreleaseArrangementRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CancelBgreleaseArrangementRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelBgreleaseArrangementRequest) GoString() string {
	return s.String()
}

func (s *CancelBgreleaseArrangementRequest) SetAuthToken(v string) *CancelBgreleaseArrangementRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelBgreleaseArrangementRequest) SetArrangementId(v string) *CancelBgreleaseArrangementRequest {
	s.ArrangementId = &v
	return s
}

func (s *CancelBgreleaseArrangementRequest) SetPlanId(v string) *CancelBgreleaseArrangementRequest {
	s.PlanId = &v
	return s
}

func (s *CancelBgreleaseArrangementRequest) SetWorkspace(v string) *CancelBgreleaseArrangementRequest {
	s.Workspace = &v
	return s
}

type CancelBgreleaseArrangementResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 概览
	Arrangement *string `json:"arrangement,omitempty" xml:"arrangement,omitempty"`
}

func (s CancelBgreleaseArrangementResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelBgreleaseArrangementResponse) GoString() string {
	return s.String()
}

func (s *CancelBgreleaseArrangementResponse) SetReqMsgId(v string) *CancelBgreleaseArrangementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelBgreleaseArrangementResponse) SetResultCode(v string) *CancelBgreleaseArrangementResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelBgreleaseArrangementResponse) SetResultMsg(v string) *CancelBgreleaseArrangementResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelBgreleaseArrangementResponse) SetArrangement(v string) *CancelBgreleaseArrangementResponse {
	s.Arrangement = &v
	return s
}

type RollbackBgreleaseArrangementRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// rollback_info
	RollbackInfo *RollbackInfo `json:"rollback_info,omitempty" xml:"rollback_info,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RollbackBgreleaseArrangementRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackBgreleaseArrangementRequest) GoString() string {
	return s.String()
}

func (s *RollbackBgreleaseArrangementRequest) SetAuthToken(v string) *RollbackBgreleaseArrangementRequest {
	s.AuthToken = &v
	return s
}

func (s *RollbackBgreleaseArrangementRequest) SetArrangementId(v string) *RollbackBgreleaseArrangementRequest {
	s.ArrangementId = &v
	return s
}

func (s *RollbackBgreleaseArrangementRequest) SetPlanId(v string) *RollbackBgreleaseArrangementRequest {
	s.PlanId = &v
	return s
}

func (s *RollbackBgreleaseArrangementRequest) SetRollbackInfo(v *RollbackInfo) *RollbackBgreleaseArrangementRequest {
	s.RollbackInfo = v
	return s
}

func (s *RollbackBgreleaseArrangementRequest) SetWorkspace(v string) *RollbackBgreleaseArrangementRequest {
	s.Workspace = &v
	return s
}

type RollbackBgreleaseArrangementResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 概览
	Arrangement *string `json:"arrangement,omitempty" xml:"arrangement,omitempty"`
}

func (s RollbackBgreleaseArrangementResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackBgreleaseArrangementResponse) GoString() string {
	return s.String()
}

func (s *RollbackBgreleaseArrangementResponse) SetReqMsgId(v string) *RollbackBgreleaseArrangementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RollbackBgreleaseArrangementResponse) SetResultCode(v string) *RollbackBgreleaseArrangementResponse {
	s.ResultCode = &v
	return s
}

func (s *RollbackBgreleaseArrangementResponse) SetResultMsg(v string) *RollbackBgreleaseArrangementResponse {
	s.ResultMsg = &v
	return s
}

func (s *RollbackBgreleaseArrangementResponse) SetArrangement(v string) *RollbackBgreleaseArrangementResponse {
	s.Arrangement = &v
	return s
}

type RetryrollbackBgreleaseArrangementRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// rollback_info
	RollbackInfo *RollbackInfo `json:"rollback_info,omitempty" xml:"rollback_info,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RetryrollbackBgreleaseArrangementRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryrollbackBgreleaseArrangementRequest) GoString() string {
	return s.String()
}

func (s *RetryrollbackBgreleaseArrangementRequest) SetAuthToken(v string) *RetryrollbackBgreleaseArrangementRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryrollbackBgreleaseArrangementRequest) SetArrangementId(v string) *RetryrollbackBgreleaseArrangementRequest {
	s.ArrangementId = &v
	return s
}

func (s *RetryrollbackBgreleaseArrangementRequest) SetPlanId(v string) *RetryrollbackBgreleaseArrangementRequest {
	s.PlanId = &v
	return s
}

func (s *RetryrollbackBgreleaseArrangementRequest) SetRollbackInfo(v *RollbackInfo) *RetryrollbackBgreleaseArrangementRequest {
	s.RollbackInfo = v
	return s
}

func (s *RetryrollbackBgreleaseArrangementRequest) SetWorkspace(v string) *RetryrollbackBgreleaseArrangementRequest {
	s.Workspace = &v
	return s
}

type RetryrollbackBgreleaseArrangementResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 概览
	Arrangement *string `json:"arrangement,omitempty" xml:"arrangement,omitempty"`
}

func (s RetryrollbackBgreleaseArrangementResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryrollbackBgreleaseArrangementResponse) GoString() string {
	return s.String()
}

func (s *RetryrollbackBgreleaseArrangementResponse) SetReqMsgId(v string) *RetryrollbackBgreleaseArrangementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryrollbackBgreleaseArrangementResponse) SetResultCode(v string) *RetryrollbackBgreleaseArrangementResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryrollbackBgreleaseArrangementResponse) SetResultMsg(v string) *RetryrollbackBgreleaseArrangementResponse {
	s.ResultMsg = &v
	return s
}

func (s *RetryrollbackBgreleaseArrangementResponse) SetArrangement(v string) *RetryrollbackBgreleaseArrangementResponse {
	s.Arrangement = &v
	return s
}

type ConfirmrollbackBgreleaseArrangementRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// retry_rollbacked
	RetryRollbacked *bool `json:"retry_rollbacked,omitempty" xml:"retry_rollbacked,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ConfirmrollbackBgreleaseArrangementRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmrollbackBgreleaseArrangementRequest) GoString() string {
	return s.String()
}

func (s *ConfirmrollbackBgreleaseArrangementRequest) SetAuthToken(v string) *ConfirmrollbackBgreleaseArrangementRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmrollbackBgreleaseArrangementRequest) SetArrangementId(v string) *ConfirmrollbackBgreleaseArrangementRequest {
	s.ArrangementId = &v
	return s
}

func (s *ConfirmrollbackBgreleaseArrangementRequest) SetPlanId(v string) *ConfirmrollbackBgreleaseArrangementRequest {
	s.PlanId = &v
	return s
}

func (s *ConfirmrollbackBgreleaseArrangementRequest) SetRetryRollbacked(v bool) *ConfirmrollbackBgreleaseArrangementRequest {
	s.RetryRollbacked = &v
	return s
}

func (s *ConfirmrollbackBgreleaseArrangementRequest) SetWorkspace(v string) *ConfirmrollbackBgreleaseArrangementRequest {
	s.Workspace = &v
	return s
}

type ConfirmrollbackBgreleaseArrangementResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 概览
	Arrangement *string `json:"arrangement,omitempty" xml:"arrangement,omitempty"`
}

func (s ConfirmrollbackBgreleaseArrangementResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmrollbackBgreleaseArrangementResponse) GoString() string {
	return s.String()
}

func (s *ConfirmrollbackBgreleaseArrangementResponse) SetReqMsgId(v string) *ConfirmrollbackBgreleaseArrangementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmrollbackBgreleaseArrangementResponse) SetResultCode(v string) *ConfirmrollbackBgreleaseArrangementResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmrollbackBgreleaseArrangementResponse) SetResultMsg(v string) *ConfirmrollbackBgreleaseArrangementResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmrollbackBgreleaseArrangementResponse) SetArrangement(v string) *ConfirmrollbackBgreleaseArrangementResponse {
	s.Arrangement = &v
	return s
}

type SwitchBgreleaseGraytrafficRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用ID
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// 执行人
	ExecutorId *string `json:"executor_id,omitempty" xml:"executor_id,omitempty"`
	// 执行人
	ExecutorName *string `json:"executor_name,omitempty" xml:"executor_name,omitempty"`
	// 来自阿里云用户
	FromAliyun *bool `json:"from_aliyun,omitempty" xml:"from_aliyun,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// 比率
	Proportion *int64 `json:"proportion,omitempty" xml:"proportion,omitempty"`
	// 目标ID
	TargetId *string `json:"target_id,omitempty" xml:"target_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s SwitchBgreleaseGraytrafficRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchBgreleaseGraytrafficRequest) GoString() string {
	return s.String()
}

func (s *SwitchBgreleaseGraytrafficRequest) SetAuthToken(v string) *SwitchBgreleaseGraytrafficRequest {
	s.AuthToken = &v
	return s
}

func (s *SwitchBgreleaseGraytrafficRequest) SetAppId(v string) *SwitchBgreleaseGraytrafficRequest {
	s.AppId = &v
	return s
}

func (s *SwitchBgreleaseGraytrafficRequest) SetExecutorId(v string) *SwitchBgreleaseGraytrafficRequest {
	s.ExecutorId = &v
	return s
}

func (s *SwitchBgreleaseGraytrafficRequest) SetExecutorName(v string) *SwitchBgreleaseGraytrafficRequest {
	s.ExecutorName = &v
	return s
}

func (s *SwitchBgreleaseGraytrafficRequest) SetFromAliyun(v bool) *SwitchBgreleaseGraytrafficRequest {
	s.FromAliyun = &v
	return s
}

func (s *SwitchBgreleaseGraytrafficRequest) SetPlanId(v string) *SwitchBgreleaseGraytrafficRequest {
	s.PlanId = &v
	return s
}

func (s *SwitchBgreleaseGraytrafficRequest) SetProportion(v int64) *SwitchBgreleaseGraytrafficRequest {
	s.Proportion = &v
	return s
}

func (s *SwitchBgreleaseGraytrafficRequest) SetTargetId(v string) *SwitchBgreleaseGraytrafficRequest {
	s.TargetId = &v
	return s
}

func (s *SwitchBgreleaseGraytrafficRequest) SetWorkspace(v string) *SwitchBgreleaseGraytrafficRequest {
	s.Workspace = &v
	return s
}

type SwitchBgreleaseGraytrafficResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 灰度引流进程ID
	ProcessId *string `json:"process_id,omitempty" xml:"process_id,omitempty"`
}

func (s SwitchBgreleaseGraytrafficResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchBgreleaseGraytrafficResponse) GoString() string {
	return s.String()
}

func (s *SwitchBgreleaseGraytrafficResponse) SetReqMsgId(v string) *SwitchBgreleaseGraytrafficResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SwitchBgreleaseGraytrafficResponse) SetResultCode(v string) *SwitchBgreleaseGraytrafficResponse {
	s.ResultCode = &v
	return s
}

func (s *SwitchBgreleaseGraytrafficResponse) SetResultMsg(v string) *SwitchBgreleaseGraytrafficResponse {
	s.ResultMsg = &v
	return s
}

func (s *SwitchBgreleaseGraytrafficResponse) SetProcessId(v string) *SwitchBgreleaseGraytrafficResponse {
	s.ProcessId = &v
	return s
}

type RollbackBgreleaseGraytrafficRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RollbackBgreleaseGraytrafficRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackBgreleaseGraytrafficRequest) GoString() string {
	return s.String()
}

func (s *RollbackBgreleaseGraytrafficRequest) SetAuthToken(v string) *RollbackBgreleaseGraytrafficRequest {
	s.AuthToken = &v
	return s
}

func (s *RollbackBgreleaseGraytrafficRequest) SetArrangementId(v string) *RollbackBgreleaseGraytrafficRequest {
	s.ArrangementId = &v
	return s
}

func (s *RollbackBgreleaseGraytrafficRequest) SetPlanId(v string) *RollbackBgreleaseGraytrafficRequest {
	s.PlanId = &v
	return s
}

func (s *RollbackBgreleaseGraytrafficRequest) SetWorkspace(v string) *RollbackBgreleaseGraytrafficRequest {
	s.Workspace = &v
	return s
}

type RollbackBgreleaseGraytrafficResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 回滚进程ID
	ProcessId *string `json:"process_id,omitempty" xml:"process_id,omitempty"`
}

func (s RollbackBgreleaseGraytrafficResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackBgreleaseGraytrafficResponse) GoString() string {
	return s.String()
}

func (s *RollbackBgreleaseGraytrafficResponse) SetReqMsgId(v string) *RollbackBgreleaseGraytrafficResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RollbackBgreleaseGraytrafficResponse) SetResultCode(v string) *RollbackBgreleaseGraytrafficResponse {
	s.ResultCode = &v
	return s
}

func (s *RollbackBgreleaseGraytrafficResponse) SetResultMsg(v string) *RollbackBgreleaseGraytrafficResponse {
	s.ResultMsg = &v
	return s
}

func (s *RollbackBgreleaseGraytrafficResponse) SetProcessId(v string) *RollbackBgreleaseGraytrafficResponse {
	s.ProcessId = &v
	return s
}

type QueryBgreleaseGrayprogressRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 概览ID
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryBgreleaseGrayprogressRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBgreleaseGrayprogressRequest) GoString() string {
	return s.String()
}

func (s *QueryBgreleaseGrayprogressRequest) SetAuthToken(v string) *QueryBgreleaseGrayprogressRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBgreleaseGrayprogressRequest) SetArrangementId(v string) *QueryBgreleaseGrayprogressRequest {
	s.ArrangementId = &v
	return s
}

func (s *QueryBgreleaseGrayprogressRequest) SetWorkspace(v string) *QueryBgreleaseGrayprogressRequest {
	s.Workspace = &v
	return s
}

type QueryBgreleaseGrayprogressResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 进度
	Progresses []*string `json:"progresses,omitempty" xml:"progresses,omitempty" type:"Repeated"`
}

func (s QueryBgreleaseGrayprogressResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBgreleaseGrayprogressResponse) GoString() string {
	return s.String()
}

func (s *QueryBgreleaseGrayprogressResponse) SetReqMsgId(v string) *QueryBgreleaseGrayprogressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBgreleaseGrayprogressResponse) SetResultCode(v string) *QueryBgreleaseGrayprogressResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBgreleaseGrayprogressResponse) SetResultMsg(v string) *QueryBgreleaseGrayprogressResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBgreleaseGrayprogressResponse) SetProgresses(v []*string) *QueryBgreleaseGrayprogressResponse {
	s.Progresses = v
	return s
}

type GetGrayProcessRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetGrayProcessRequest) String() string {
	return tea.Prettify(s)
}

func (s GetGrayProcessRequest) GoString() string {
	return s.String()
}

func (s *GetGrayProcessRequest) SetAuthToken(v string) *GetGrayProcessRequest {
	s.AuthToken = &v
	return s
}

func (s *GetGrayProcessRequest) SetId(v string) *GetGrayProcessRequest {
	s.Id = &v
	return s
}

func (s *GetGrayProcessRequest) SetWorkspace(v string) *GetGrayProcessRequest {
	s.Workspace = &v
	return s
}

type GetGrayProcessResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 进程信息
	ProcessDefinition *string `json:"process_definition,omitempty" xml:"process_definition,omitempty"`
}

func (s GetGrayProcessResponse) String() string {
	return tea.Prettify(s)
}

func (s GetGrayProcessResponse) GoString() string {
	return s.String()
}

func (s *GetGrayProcessResponse) SetReqMsgId(v string) *GetGrayProcessResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetGrayProcessResponse) SetResultCode(v string) *GetGrayProcessResponse {
	s.ResultCode = &v
	return s
}

func (s *GetGrayProcessResponse) SetResultMsg(v string) *GetGrayProcessResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetGrayProcessResponse) SetProcessDefinition(v string) *GetGrayProcessResponse {
	s.ProcessDefinition = &v
	return s
}

type QueryGrayProgressRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryGrayProgressRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryGrayProgressRequest) GoString() string {
	return s.String()
}

func (s *QueryGrayProgressRequest) SetAuthToken(v string) *QueryGrayProgressRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryGrayProgressRequest) SetId(v string) *QueryGrayProgressRequest {
	s.Id = &v
	return s
}

func (s *QueryGrayProgressRequest) SetWorkspace(v string) *QueryGrayProgressRequest {
	s.Workspace = &v
	return s
}

type QueryGrayProgressResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 进度
	Progresses *string `json:"progresses,omitempty" xml:"progresses,omitempty"`
}

func (s QueryGrayProgressResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryGrayProgressResponse) GoString() string {
	return s.String()
}

func (s *QueryGrayProgressResponse) SetReqMsgId(v string) *QueryGrayProgressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryGrayProgressResponse) SetResultCode(v string) *QueryGrayProgressResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryGrayProgressResponse) SetResultMsg(v string) *QueryGrayProgressResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryGrayProgressResponse) SetProgresses(v string) *QueryGrayProgressResponse {
	s.Progresses = &v
	return s
}

type ReinitGrayProcessRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ReinitGrayProcessRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitGrayProcessRequest) GoString() string {
	return s.String()
}

func (s *ReinitGrayProcessRequest) SetAuthToken(v string) *ReinitGrayProcessRequest {
	s.AuthToken = &v
	return s
}

func (s *ReinitGrayProcessRequest) SetId(v string) *ReinitGrayProcessRequest {
	s.Id = &v
	return s
}

func (s *ReinitGrayProcessRequest) SetWorkspace(v string) *ReinitGrayProcessRequest {
	s.Workspace = &v
	return s
}

type ReinitGrayProcessResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 进程信息
	ProcessDefinition *string `json:"process_definition,omitempty" xml:"process_definition,omitempty"`
}

func (s ReinitGrayProcessResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitGrayProcessResponse) GoString() string {
	return s.String()
}

func (s *ReinitGrayProcessResponse) SetReqMsgId(v string) *ReinitGrayProcessResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReinitGrayProcessResponse) SetResultCode(v string) *ReinitGrayProcessResponse {
	s.ResultCode = &v
	return s
}

func (s *ReinitGrayProcessResponse) SetResultMsg(v string) *ReinitGrayProcessResponse {
	s.ResultMsg = &v
	return s
}

func (s *ReinitGrayProcessResponse) SetProcessDefinition(v string) *ReinitGrayProcessResponse {
	s.ProcessDefinition = &v
	return s
}

type RetryGrayTaskRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 进程 ID
	ProcessId *string `json:"process_id,omitempty" xml:"process_id,omitempty"`
	// retry_info
	RetryInfo *RetryInfo `json:"retry_info,omitempty" xml:"retry_info,omitempty"`
	// 任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RetryGrayTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryGrayTaskRequest) GoString() string {
	return s.String()
}

func (s *RetryGrayTaskRequest) SetAuthToken(v string) *RetryGrayTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryGrayTaskRequest) SetProcessId(v string) *RetryGrayTaskRequest {
	s.ProcessId = &v
	return s
}

func (s *RetryGrayTaskRequest) SetRetryInfo(v *RetryInfo) *RetryGrayTaskRequest {
	s.RetryInfo = v
	return s
}

func (s *RetryGrayTaskRequest) SetTaskId(v string) *RetryGrayTaskRequest {
	s.TaskId = &v
	return s
}

func (s *RetryGrayTaskRequest) SetWorkspace(v string) *RetryGrayTaskRequest {
	s.Workspace = &v
	return s
}

type RetryGrayTaskResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 进程信息
	ProcessDefinition *string `json:"process_definition,omitempty" xml:"process_definition,omitempty"`
}

func (s RetryGrayTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryGrayTaskResponse) GoString() string {
	return s.String()
}

func (s *RetryGrayTaskResponse) SetReqMsgId(v string) *RetryGrayTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryGrayTaskResponse) SetResultCode(v string) *RetryGrayTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryGrayTaskResponse) SetResultMsg(v string) *RetryGrayTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *RetryGrayTaskResponse) SetProcessDefinition(v string) *RetryGrayTaskResponse {
	s.ProcessDefinition = &v
	return s
}

type SkipGrayTaskRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 进程 ID
	ProcessId *string `json:"process_id,omitempty" xml:"process_id,omitempty"`
	// 任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s SkipGrayTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SkipGrayTaskRequest) GoString() string {
	return s.String()
}

func (s *SkipGrayTaskRequest) SetAuthToken(v string) *SkipGrayTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *SkipGrayTaskRequest) SetProcessId(v string) *SkipGrayTaskRequest {
	s.ProcessId = &v
	return s
}

func (s *SkipGrayTaskRequest) SetTaskId(v string) *SkipGrayTaskRequest {
	s.TaskId = &v
	return s
}

func (s *SkipGrayTaskRequest) SetWorkspace(v string) *SkipGrayTaskRequest {
	s.Workspace = &v
	return s
}

type SkipGrayTaskResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 进程信息
	ProcessDefinition *string `json:"process_definition,omitempty" xml:"process_definition,omitempty"`
}

func (s SkipGrayTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SkipGrayTaskResponse) GoString() string {
	return s.String()
}

func (s *SkipGrayTaskResponse) SetReqMsgId(v string) *SkipGrayTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SkipGrayTaskResponse) SetResultCode(v string) *SkipGrayTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *SkipGrayTaskResponse) SetResultMsg(v string) *SkipGrayTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *SkipGrayTaskResponse) SetProcessDefinition(v string) *SkipGrayTaskResponse {
	s.ProcessDefinition = &v
	return s
}

type QueryMachineRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 当前页
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// 页大小，默认 20
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 父节点ID
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// pd id
	ProcessDefinitionId *string `json:"process_definition_id,omitempty" xml:"process_definition_id,omitempty"`
	// 对应发布服务 ID
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryMachineRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMachineRequest) GoString() string {
	return s.String()
}

func (s *QueryMachineRequest) SetAuthToken(v string) *QueryMachineRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMachineRequest) SetPageNo(v int64) *QueryMachineRequest {
	s.PageNo = &v
	return s
}

func (s *QueryMachineRequest) SetPageSize(v int64) *QueryMachineRequest {
	s.PageSize = &v
	return s
}

func (s *QueryMachineRequest) SetParentId(v string) *QueryMachineRequest {
	s.ParentId = &v
	return s
}

func (s *QueryMachineRequest) SetProcessDefinitionId(v string) *QueryMachineRequest {
	s.ProcessDefinitionId = &v
	return s
}

func (s *QueryMachineRequest) SetServiceId(v string) *QueryMachineRequest {
	s.ServiceId = &v
	return s
}

func (s *QueryMachineRequest) SetWorkspace(v string) *QueryMachineRequest {
	s.Workspace = &v
	return s
}

type QueryMachineResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发布机器信息
	Machines []*string `json:"machines,omitempty" xml:"machines,omitempty" type:"Repeated"`
}

func (s QueryMachineResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMachineResponse) GoString() string {
	return s.String()
}

func (s *QueryMachineResponse) SetReqMsgId(v string) *QueryMachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMachineResponse) SetResultCode(v string) *QueryMachineResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMachineResponse) SetResultMsg(v string) *QueryMachineResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMachineResponse) SetMachines(v []*string) *QueryMachineResponse {
	s.Machines = v
	return s
}

type GetMachineRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布机器 ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetMachineRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMachineRequest) GoString() string {
	return s.String()
}

func (s *GetMachineRequest) SetAuthToken(v string) *GetMachineRequest {
	s.AuthToken = &v
	return s
}

func (s *GetMachineRequest) SetId(v string) *GetMachineRequest {
	s.Id = &v
	return s
}

func (s *GetMachineRequest) SetWorkspace(v string) *GetMachineRequest {
	s.Workspace = &v
	return s
}

type GetMachineResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发布机器信息
	Machine *string `json:"machine,omitempty" xml:"machine,omitempty"`
}

func (s GetMachineResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMachineResponse) GoString() string {
	return s.String()
}

func (s *GetMachineResponse) SetReqMsgId(v string) *GetMachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetMachineResponse) SetResultCode(v string) *GetMachineResponse {
	s.ResultCode = &v
	return s
}

func (s *GetMachineResponse) SetResultMsg(v string) *GetMachineResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetMachineResponse) SetMachine(v string) *GetMachineResponse {
	s.Machine = &v
	return s
}

type QueryMachineProgressRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布机器ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryMachineProgressRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMachineProgressRequest) GoString() string {
	return s.String()
}

func (s *QueryMachineProgressRequest) SetAuthToken(v string) *QueryMachineProgressRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMachineProgressRequest) SetId(v string) *QueryMachineProgressRequest {
	s.Id = &v
	return s
}

func (s *QueryMachineProgressRequest) SetWorkspace(v string) *QueryMachineProgressRequest {
	s.Workspace = &v
	return s
}

type QueryMachineProgressResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 进度
	Progresses []*string `json:"progresses,omitempty" xml:"progresses,omitempty" type:"Repeated"`
}

func (s QueryMachineProgressResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMachineProgressResponse) GoString() string {
	return s.String()
}

func (s *QueryMachineProgressResponse) SetReqMsgId(v string) *QueryMachineProgressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMachineProgressResponse) SetResultCode(v string) *QueryMachineProgressResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMachineProgressResponse) SetResultMsg(v string) *QueryMachineProgressResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMachineProgressResponse) SetProgresses(v []*string) *QueryMachineProgressResponse {
	s.Progresses = v
	return s
}

type RetryMachineRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布机器 ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// retry_info
	RetryInfo *RetryInfo `json:"retry_info,omitempty" xml:"retry_info,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RetryMachineRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryMachineRequest) GoString() string {
	return s.String()
}

func (s *RetryMachineRequest) SetAuthToken(v string) *RetryMachineRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryMachineRequest) SetId(v string) *RetryMachineRequest {
	s.Id = &v
	return s
}

func (s *RetryMachineRequest) SetRetryInfo(v *RetryInfo) *RetryMachineRequest {
	s.RetryInfo = v
	return s
}

func (s *RetryMachineRequest) SetWorkspace(v string) *RetryMachineRequest {
	s.Workspace = &v
	return s
}

type RetryMachineResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发布机器信息
	Machine *string `json:"machine,omitempty" xml:"machine,omitempty"`
}

func (s RetryMachineResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryMachineResponse) GoString() string {
	return s.String()
}

func (s *RetryMachineResponse) SetReqMsgId(v string) *RetryMachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryMachineResponse) SetResultCode(v string) *RetryMachineResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryMachineResponse) SetResultMsg(v string) *RetryMachineResponse {
	s.ResultMsg = &v
	return s
}

func (s *RetryMachineResponse) SetMachine(v string) *RetryMachineResponse {
	s.Machine = &v
	return s
}

type SkipMachineRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 机器ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s SkipMachineRequest) String() string {
	return tea.Prettify(s)
}

func (s SkipMachineRequest) GoString() string {
	return s.String()
}

func (s *SkipMachineRequest) SetAuthToken(v string) *SkipMachineRequest {
	s.AuthToken = &v
	return s
}

func (s *SkipMachineRequest) SetId(v string) *SkipMachineRequest {
	s.Id = &v
	return s
}

func (s *SkipMachineRequest) SetWorkspace(v string) *SkipMachineRequest {
	s.Workspace = &v
	return s
}

type SkipMachineResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 机器信息
	Machine *string `json:"machine,omitempty" xml:"machine,omitempty"`
}

func (s SkipMachineResponse) String() string {
	return tea.Prettify(s)
}

func (s SkipMachineResponse) GoString() string {
	return s.String()
}

func (s *SkipMachineResponse) SetReqMsgId(v string) *SkipMachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SkipMachineResponse) SetResultCode(v string) *SkipMachineResponse {
	s.ResultCode = &v
	return s
}

func (s *SkipMachineResponse) SetResultMsg(v string) *SkipMachineResponse {
	s.ResultMsg = &v
	return s
}

func (s *SkipMachineResponse) SetMachine(v string) *SkipMachineResponse {
	s.Machine = &v
	return s
}

type CancelMachineRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布机器 ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CancelMachineRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelMachineRequest) GoString() string {
	return s.String()
}

func (s *CancelMachineRequest) SetAuthToken(v string) *CancelMachineRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelMachineRequest) SetId(v string) *CancelMachineRequest {
	s.Id = &v
	return s
}

func (s *CancelMachineRequest) SetWorkspace(v string) *CancelMachineRequest {
	s.Workspace = &v
	return s
}

type CancelMachineResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 机器信息
	Machine *string `json:"machine,omitempty" xml:"machine,omitempty"`
}

func (s CancelMachineResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelMachineResponse) GoString() string {
	return s.String()
}

func (s *CancelMachineResponse) SetReqMsgId(v string) *CancelMachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelMachineResponse) SetResultCode(v string) *CancelMachineResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelMachineResponse) SetResultMsg(v string) *CancelMachineResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelMachineResponse) SetMachine(v string) *CancelMachineResponse {
	s.Machine = &v
	return s
}

type ExecMachineRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 机器 ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ExecMachineRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecMachineRequest) GoString() string {
	return s.String()
}

func (s *ExecMachineRequest) SetAuthToken(v string) *ExecMachineRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecMachineRequest) SetId(v string) *ExecMachineRequest {
	s.Id = &v
	return s
}

func (s *ExecMachineRequest) SetWorkspace(v string) *ExecMachineRequest {
	s.Workspace = &v
	return s
}

type ExecMachineResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 机器信息
	Machine *string `json:"machine,omitempty" xml:"machine,omitempty"`
}

func (s ExecMachineResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecMachineResponse) GoString() string {
	return s.String()
}

func (s *ExecMachineResponse) SetReqMsgId(v string) *ExecMachineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecMachineResponse) SetResultCode(v string) *ExecMachineResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecMachineResponse) SetResultMsg(v string) *ExecMachineResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecMachineResponse) SetMachine(v string) *ExecMachineResponse {
	s.Machine = &v
	return s
}

type QueryMachinegroupProgressRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryMachinegroupProgressRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMachinegroupProgressRequest) GoString() string {
	return s.String()
}

func (s *QueryMachinegroupProgressRequest) SetAuthToken(v string) *QueryMachinegroupProgressRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMachinegroupProgressRequest) SetId(v string) *QueryMachinegroupProgressRequest {
	s.Id = &v
	return s
}

func (s *QueryMachinegroupProgressRequest) SetWorkspace(v string) *QueryMachinegroupProgressRequest {
	s.Workspace = &v
	return s
}

type QueryMachinegroupProgressResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 进度
	Progresses []*string `json:"progresses,omitempty" xml:"progresses,omitempty" type:"Repeated"`
}

func (s QueryMachinegroupProgressResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMachinegroupProgressResponse) GoString() string {
	return s.String()
}

func (s *QueryMachinegroupProgressResponse) SetReqMsgId(v string) *QueryMachinegroupProgressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMachinegroupProgressResponse) SetResultCode(v string) *QueryMachinegroupProgressResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMachinegroupProgressResponse) SetResultMsg(v string) *QueryMachinegroupProgressResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMachinegroupProgressResponse) SetProgresses(v []*string) *QueryMachinegroupProgressResponse {
	s.Progresses = v
	return s
}

type RetryMachinegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 分组 ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// retry info
	RetryInfo *RetryInfo `json:"retry_info,omitempty" xml:"retry_info,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RetryMachinegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryMachinegroupRequest) GoString() string {
	return s.String()
}

func (s *RetryMachinegroupRequest) SetAuthToken(v string) *RetryMachinegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryMachinegroupRequest) SetId(v string) *RetryMachinegroupRequest {
	s.Id = &v
	return s
}

func (s *RetryMachinegroupRequest) SetRetryInfo(v *RetryInfo) *RetryMachinegroupRequest {
	s.RetryInfo = v
	return s
}

func (s *RetryMachinegroupRequest) SetWorkspace(v string) *RetryMachinegroupRequest {
	s.Workspace = &v
	return s
}

type RetryMachinegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 机器分组信息
	MachineGroup *string `json:"machine_group,omitempty" xml:"machine_group,omitempty"`
}

func (s RetryMachinegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryMachinegroupResponse) GoString() string {
	return s.String()
}

func (s *RetryMachinegroupResponse) SetReqMsgId(v string) *RetryMachinegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryMachinegroupResponse) SetResultCode(v string) *RetryMachinegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryMachinegroupResponse) SetResultMsg(v string) *RetryMachinegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *RetryMachinegroupResponse) SetMachineGroup(v string) *RetryMachinegroupResponse {
	s.MachineGroup = &v
	return s
}

type SkipMachinegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 分组 ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s SkipMachinegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s SkipMachinegroupRequest) GoString() string {
	return s.String()
}

func (s *SkipMachinegroupRequest) SetAuthToken(v string) *SkipMachinegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *SkipMachinegroupRequest) SetId(v string) *SkipMachinegroupRequest {
	s.Id = &v
	return s
}

func (s *SkipMachinegroupRequest) SetWorkspace(v string) *SkipMachinegroupRequest {
	s.Workspace = &v
	return s
}

type SkipMachinegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分组
	MachineGroup *string `json:"machine_group,omitempty" xml:"machine_group,omitempty"`
}

func (s SkipMachinegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s SkipMachinegroupResponse) GoString() string {
	return s.String()
}

func (s *SkipMachinegroupResponse) SetReqMsgId(v string) *SkipMachinegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SkipMachinegroupResponse) SetResultCode(v string) *SkipMachinegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *SkipMachinegroupResponse) SetResultMsg(v string) *SkipMachinegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *SkipMachinegroupResponse) SetMachineGroup(v string) *SkipMachinegroupResponse {
	s.MachineGroup = &v
	return s
}

type CancelMachinegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 分组 ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CancelMachinegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelMachinegroupRequest) GoString() string {
	return s.String()
}

func (s *CancelMachinegroupRequest) SetAuthToken(v string) *CancelMachinegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelMachinegroupRequest) SetId(v string) *CancelMachinegroupRequest {
	s.Id = &v
	return s
}

func (s *CancelMachinegroupRequest) SetWorkspace(v string) *CancelMachinegroupRequest {
	s.Workspace = &v
	return s
}

type CancelMachinegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 机器分组
	MachineGroup *string `json:"machine_group,omitempty" xml:"machine_group,omitempty"`
}

func (s CancelMachinegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelMachinegroupResponse) GoString() string {
	return s.String()
}

func (s *CancelMachinegroupResponse) SetReqMsgId(v string) *CancelMachinegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelMachinegroupResponse) SetResultCode(v string) *CancelMachinegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelMachinegroupResponse) SetResultMsg(v string) *CancelMachinegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelMachinegroupResponse) SetMachineGroup(v string) *CancelMachinegroupResponse {
	s.MachineGroup = &v
	return s
}

type DeleteMachinegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// recursive
	Recursive *bool `json:"recursive,omitempty" xml:"recursive,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s DeleteMachinegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMachinegroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteMachinegroupRequest) SetAuthToken(v string) *DeleteMachinegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteMachinegroupRequest) SetId(v string) *DeleteMachinegroupRequest {
	s.Id = &v
	return s
}

func (s *DeleteMachinegroupRequest) SetRecursive(v bool) *DeleteMachinegroupRequest {
	s.Recursive = &v
	return s
}

func (s *DeleteMachinegroupRequest) SetWorkspace(v string) *DeleteMachinegroupRequest {
	s.Workspace = &v
	return s
}

type DeleteMachinegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 机器分组
	MachineGroup *string `json:"machine_group,omitempty" xml:"machine_group,omitempty"`
}

func (s DeleteMachinegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMachinegroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteMachinegroupResponse) SetReqMsgId(v string) *DeleteMachinegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteMachinegroupResponse) SetResultCode(v string) *DeleteMachinegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteMachinegroupResponse) SetResultMsg(v string) *DeleteMachinegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteMachinegroupResponse) SetMachineGroup(v string) *DeleteMachinegroupResponse {
	s.MachineGroup = &v
	return s
}

type UpdateMachinegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 分组 ID
	MachineGroupId *string `json:"machine_group_id,omitempty" xml:"machine_group_id,omitempty"`
	// 发布机器 ID
	MachineIds []*string `json:"machine_ids,omitempty" xml:"machine_ids,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s UpdateMachinegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMachinegroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateMachinegroupRequest) SetAuthToken(v string) *UpdateMachinegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMachinegroupRequest) SetMachineGroupId(v string) *UpdateMachinegroupRequest {
	s.MachineGroupId = &v
	return s
}

func (s *UpdateMachinegroupRequest) SetMachineIds(v []*string) *UpdateMachinegroupRequest {
	s.MachineIds = v
	return s
}

func (s *UpdateMachinegroupRequest) SetWorkspace(v string) *UpdateMachinegroupRequest {
	s.Workspace = &v
	return s
}

type UpdateMachinegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 机器分组信息
	MachineGroup *string `json:"machine_group,omitempty" xml:"machine_group,omitempty"`
}

func (s UpdateMachinegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMachinegroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateMachinegroupResponse) SetReqMsgId(v string) *UpdateMachinegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMachinegroupResponse) SetResultCode(v string) *UpdateMachinegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMachinegroupResponse) SetResultMsg(v string) *UpdateMachinegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateMachinegroupResponse) SetMachineGroup(v string) *UpdateMachinegroupResponse {
	s.MachineGroup = &v
	return s
}

type ConfirmMachinegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 分组id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ConfirmMachinegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmMachinegroupRequest) GoString() string {
	return s.String()
}

func (s *ConfirmMachinegroupRequest) SetAuthToken(v string) *ConfirmMachinegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmMachinegroupRequest) SetId(v string) *ConfirmMachinegroupRequest {
	s.Id = &v
	return s
}

func (s *ConfirmMachinegroupRequest) SetWorkspace(v string) *ConfirmMachinegroupRequest {
	s.Workspace = &v
	return s
}

type ConfirmMachinegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分组信息
	MachineGroup *string `json:"machine_group,omitempty" xml:"machine_group,omitempty"`
}

func (s ConfirmMachinegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmMachinegroupResponse) GoString() string {
	return s.String()
}

func (s *ConfirmMachinegroupResponse) SetReqMsgId(v string) *ConfirmMachinegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmMachinegroupResponse) SetResultCode(v string) *ConfirmMachinegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmMachinegroupResponse) SetResultMsg(v string) *ConfirmMachinegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmMachinegroupResponse) SetMachineGroup(v string) *ConfirmMachinegroupResponse {
	s.MachineGroup = &v
	return s
}

type BatchqueryMachinegroupProgressRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 当前页，默认 1
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// 分页大小，默认 20
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 父节点 ID
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// 发布单 ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// 发布进程 ID
	ProcessDefinitionId *string `json:"process_definition_id,omitempty" xml:"process_definition_id,omitempty"`
	// 发布服务 ID
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// 状态
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s BatchqueryMachinegroupProgressRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryMachinegroupProgressRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryMachinegroupProgressRequest) SetAuthToken(v string) *BatchqueryMachinegroupProgressRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryMachinegroupProgressRequest) SetPageNo(v int64) *BatchqueryMachinegroupProgressRequest {
	s.PageNo = &v
	return s
}

func (s *BatchqueryMachinegroupProgressRequest) SetPageSize(v int64) *BatchqueryMachinegroupProgressRequest {
	s.PageSize = &v
	return s
}

func (s *BatchqueryMachinegroupProgressRequest) SetParentId(v string) *BatchqueryMachinegroupProgressRequest {
	s.ParentId = &v
	return s
}

func (s *BatchqueryMachinegroupProgressRequest) SetPlanId(v string) *BatchqueryMachinegroupProgressRequest {
	s.PlanId = &v
	return s
}

func (s *BatchqueryMachinegroupProgressRequest) SetProcessDefinitionId(v string) *BatchqueryMachinegroupProgressRequest {
	s.ProcessDefinitionId = &v
	return s
}

func (s *BatchqueryMachinegroupProgressRequest) SetServiceId(v string) *BatchqueryMachinegroupProgressRequest {
	s.ServiceId = &v
	return s
}

func (s *BatchqueryMachinegroupProgressRequest) SetState(v string) *BatchqueryMachinegroupProgressRequest {
	s.State = &v
	return s
}

func (s *BatchqueryMachinegroupProgressRequest) SetWorkspace(v string) *BatchqueryMachinegroupProgressRequest {
	s.Workspace = &v
	return s
}

type BatchqueryMachinegroupProgressResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 机器分组列表
	MachineGroups []*string `json:"machine_groups,omitempty" xml:"machine_groups,omitempty" type:"Repeated"`
}

func (s BatchqueryMachinegroupProgressResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryMachinegroupProgressResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryMachinegroupProgressResponse) SetReqMsgId(v string) *BatchqueryMachinegroupProgressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryMachinegroupProgressResponse) SetResultCode(v string) *BatchqueryMachinegroupProgressResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryMachinegroupProgressResponse) SetResultMsg(v string) *BatchqueryMachinegroupProgressResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryMachinegroupProgressResponse) SetMachineGroups(v []*string) *BatchqueryMachinegroupProgressResponse {
	s.MachineGroups = v
	return s
}

type ConfirmMachinegroupReserveRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 分组 ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 是否需要预确认分组
	Reserved *bool `json:"reserved,omitempty" xml:"reserved,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ConfirmMachinegroupReserveRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmMachinegroupReserveRequest) GoString() string {
	return s.String()
}

func (s *ConfirmMachinegroupReserveRequest) SetAuthToken(v string) *ConfirmMachinegroupReserveRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmMachinegroupReserveRequest) SetId(v string) *ConfirmMachinegroupReserveRequest {
	s.Id = &v
	return s
}

func (s *ConfirmMachinegroupReserveRequest) SetReserved(v bool) *ConfirmMachinegroupReserveRequest {
	s.Reserved = &v
	return s
}

func (s *ConfirmMachinegroupReserveRequest) SetWorkspace(v string) *ConfirmMachinegroupReserveRequest {
	s.Workspace = &v
	return s
}

type ConfirmMachinegroupReserveResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分组信息
	MachineGroup *string `json:"machine_group,omitempty" xml:"machine_group,omitempty"`
}

func (s ConfirmMachinegroupReserveResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmMachinegroupReserveResponse) GoString() string {
	return s.String()
}

func (s *ConfirmMachinegroupReserveResponse) SetReqMsgId(v string) *ConfirmMachinegroupReserveResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmMachinegroupReserveResponse) SetResultCode(v string) *ConfirmMachinegroupReserveResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmMachinegroupReserveResponse) SetResultMsg(v string) *ConfirmMachinegroupReserveResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmMachinegroupReserveResponse) SetMachineGroup(v string) *ConfirmMachinegroupReserveResponse {
	s.MachineGroup = &v
	return s
}

type UpdateMachinegroupSlbmountweightRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// from_aliyun
	FromAliyun *bool `json:"from_aliyun,omitempty" xml:"from_aliyun,omitempty"`
	// 分组 ID
	MachineGroupId *string `json:"machine_group_id,omitempty" xml:"machine_group_id,omitempty"`
	// 挂载权重信息列表
	SlbMountInfoList []*string `json:"slb_mount_info_list,omitempty" xml:"slb_mount_info_list,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s UpdateMachinegroupSlbmountweightRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMachinegroupSlbmountweightRequest) GoString() string {
	return s.String()
}

func (s *UpdateMachinegroupSlbmountweightRequest) SetAuthToken(v string) *UpdateMachinegroupSlbmountweightRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMachinegroupSlbmountweightRequest) SetFromAliyun(v bool) *UpdateMachinegroupSlbmountweightRequest {
	s.FromAliyun = &v
	return s
}

func (s *UpdateMachinegroupSlbmountweightRequest) SetMachineGroupId(v string) *UpdateMachinegroupSlbmountweightRequest {
	s.MachineGroupId = &v
	return s
}

func (s *UpdateMachinegroupSlbmountweightRequest) SetSlbMountInfoList(v []*string) *UpdateMachinegroupSlbmountweightRequest {
	s.SlbMountInfoList = v
	return s
}

func (s *UpdateMachinegroupSlbmountweightRequest) SetWorkspace(v string) *UpdateMachinegroupSlbmountweightRequest {
	s.Workspace = &v
	return s
}

type UpdateMachinegroupSlbmountweightResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 请求 ID，用于追踪后续结果
	RequestIds []*string `json:"request_ids,omitempty" xml:"request_ids,omitempty" type:"Repeated"`
}

func (s UpdateMachinegroupSlbmountweightResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMachinegroupSlbmountweightResponse) GoString() string {
	return s.String()
}

func (s *UpdateMachinegroupSlbmountweightResponse) SetReqMsgId(v string) *UpdateMachinegroupSlbmountweightResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMachinegroupSlbmountweightResponse) SetResultCode(v string) *UpdateMachinegroupSlbmountweightResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMachinegroupSlbmountweightResponse) SetResultMsg(v string) *UpdateMachinegroupSlbmountweightResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateMachinegroupSlbmountweightResponse) SetRequestIds(v []*string) *UpdateMachinegroupSlbmountweightResponse {
	s.RequestIds = v
	return s
}

type QueryMachinegroupSlbmountprogressRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 分组ID
	MachineGroupId *string `json:"machine_group_id,omitempty" xml:"machine_group_id,omitempty"`
	// 请求 ID 列表
	RequestIds []*string `json:"request_ids,omitempty" xml:"request_ids,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryMachinegroupSlbmountprogressRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMachinegroupSlbmountprogressRequest) GoString() string {
	return s.String()
}

func (s *QueryMachinegroupSlbmountprogressRequest) SetAuthToken(v string) *QueryMachinegroupSlbmountprogressRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMachinegroupSlbmountprogressRequest) SetMachineGroupId(v string) *QueryMachinegroupSlbmountprogressRequest {
	s.MachineGroupId = &v
	return s
}

func (s *QueryMachinegroupSlbmountprogressRequest) SetRequestIds(v []*string) *QueryMachinegroupSlbmountprogressRequest {
	s.RequestIds = v
	return s
}

func (s *QueryMachinegroupSlbmountprogressRequest) SetWorkspace(v string) *QueryMachinegroupSlbmountprogressRequest {
	s.Workspace = &v
	return s
}

type QueryMachinegroupSlbmountprogressResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 执行进度
	ExecutorProgress *string `json:"executor_progress,omitempty" xml:"executor_progress,omitempty"`
}

func (s QueryMachinegroupSlbmountprogressResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMachinegroupSlbmountprogressResponse) GoString() string {
	return s.String()
}

func (s *QueryMachinegroupSlbmountprogressResponse) SetReqMsgId(v string) *QueryMachinegroupSlbmountprogressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMachinegroupSlbmountprogressResponse) SetResultCode(v string) *QueryMachinegroupSlbmountprogressResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMachinegroupSlbmountprogressResponse) SetResultMsg(v string) *QueryMachinegroupSlbmountprogressResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMachinegroupSlbmountprogressResponse) SetExecutorProgress(v string) *QueryMachinegroupSlbmountprogressResponse {
	s.ExecutorProgress = &v
	return s
}

type QueryMachinegroupSlbmountRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 分组 id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryMachinegroupSlbmountRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMachinegroupSlbmountRequest) GoString() string {
	return s.String()
}

func (s *QueryMachinegroupSlbmountRequest) SetAuthToken(v string) *QueryMachinegroupSlbmountRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMachinegroupSlbmountRequest) SetId(v string) *QueryMachinegroupSlbmountRequest {
	s.Id = &v
	return s
}

func (s *QueryMachinegroupSlbmountRequest) SetWorkspace(v string) *QueryMachinegroupSlbmountRequest {
	s.Workspace = &v
	return s
}

type QueryMachinegroupSlbmountResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// SLB 挂载信息
	SlbMountInfoList []*string `json:"slb_mount_info_list,omitempty" xml:"slb_mount_info_list,omitempty" type:"Repeated"`
}

func (s QueryMachinegroupSlbmountResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMachinegroupSlbmountResponse) GoString() string {
	return s.String()
}

func (s *QueryMachinegroupSlbmountResponse) SetReqMsgId(v string) *QueryMachinegroupSlbmountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMachinegroupSlbmountResponse) SetResultCode(v string) *QueryMachinegroupSlbmountResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMachinegroupSlbmountResponse) SetResultMsg(v string) *QueryMachinegroupSlbmountResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMachinegroupSlbmountResponse) SetSlbMountInfoList(v []*string) *QueryMachinegroupSlbmountResponse {
	s.SlbMountInfoList = v
	return s
}

type GetMachinegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 分组 ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 是否带上机器信息，默认 false
	WithMachines *bool `json:"with_machines,omitempty" xml:"with_machines,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetMachinegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMachinegroupRequest) GoString() string {
	return s.String()
}

func (s *GetMachinegroupRequest) SetAuthToken(v string) *GetMachinegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *GetMachinegroupRequest) SetId(v string) *GetMachinegroupRequest {
	s.Id = &v
	return s
}

func (s *GetMachinegroupRequest) SetWithMachines(v bool) *GetMachinegroupRequest {
	s.WithMachines = &v
	return s
}

func (s *GetMachinegroupRequest) SetWorkspace(v string) *GetMachinegroupRequest {
	s.Workspace = &v
	return s
}

type GetMachinegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分组信息
	MachineGroup *string `json:"machine_group,omitempty" xml:"machine_group,omitempty"`
}

func (s GetMachinegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMachinegroupResponse) GoString() string {
	return s.String()
}

func (s *GetMachinegroupResponse) SetReqMsgId(v string) *GetMachinegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetMachinegroupResponse) SetResultCode(v string) *GetMachinegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *GetMachinegroupResponse) SetResultMsg(v string) *GetMachinegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetMachinegroupResponse) SetMachineGroup(v string) *GetMachinegroupResponse {
	s.MachineGroup = &v
	return s
}

type SkipMachinetaskRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 机器 ID
	MachineId *string `json:"machine_id,omitempty" xml:"machine_id,omitempty"`
	// 任务 ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s SkipMachinetaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SkipMachinetaskRequest) GoString() string {
	return s.String()
}

func (s *SkipMachinetaskRequest) SetAuthToken(v string) *SkipMachinetaskRequest {
	s.AuthToken = &v
	return s
}

func (s *SkipMachinetaskRequest) SetMachineId(v string) *SkipMachinetaskRequest {
	s.MachineId = &v
	return s
}

func (s *SkipMachinetaskRequest) SetTaskId(v string) *SkipMachinetaskRequest {
	s.TaskId = &v
	return s
}

func (s *SkipMachinetaskRequest) SetWorkspace(v string) *SkipMachinetaskRequest {
	s.Workspace = &v
	return s
}

type SkipMachinetaskResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 进度
	Progress *string `json:"progress,omitempty" xml:"progress,omitempty"`
}

func (s SkipMachinetaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SkipMachinetaskResponse) GoString() string {
	return s.String()
}

func (s *SkipMachinetaskResponse) SetReqMsgId(v string) *SkipMachinetaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SkipMachinetaskResponse) SetResultCode(v string) *SkipMachinetaskResponse {
	s.ResultCode = &v
	return s
}

func (s *SkipMachinetaskResponse) SetResultMsg(v string) *SkipMachinetaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *SkipMachinetaskResponse) SetProgress(v string) *SkipMachinetaskResponse {
	s.Progress = &v
	return s
}

type RetryMachinetaskRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 机器 ID
	MachineId *string `json:"machine_id,omitempty" xml:"machine_id,omitempty"`
	// retry_info
	RetryInfo *RetryInfo `json:"retry_info,omitempty" xml:"retry_info,omitempty"`
	// 任务 ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RetryMachinetaskRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryMachinetaskRequest) GoString() string {
	return s.String()
}

func (s *RetryMachinetaskRequest) SetAuthToken(v string) *RetryMachinetaskRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryMachinetaskRequest) SetMachineId(v string) *RetryMachinetaskRequest {
	s.MachineId = &v
	return s
}

func (s *RetryMachinetaskRequest) SetRetryInfo(v *RetryInfo) *RetryMachinetaskRequest {
	s.RetryInfo = v
	return s
}

func (s *RetryMachinetaskRequest) SetTaskId(v string) *RetryMachinetaskRequest {
	s.TaskId = &v
	return s
}

func (s *RetryMachinetaskRequest) SetWorkspace(v string) *RetryMachinetaskRequest {
	s.Workspace = &v
	return s
}

type RetryMachinetaskResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 执行进度
	Progress *string `json:"progress,omitempty" xml:"progress,omitempty"`
}

func (s RetryMachinetaskResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryMachinetaskResponse) GoString() string {
	return s.String()
}

func (s *RetryMachinetaskResponse) SetReqMsgId(v string) *RetryMachinetaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryMachinetaskResponse) SetResultCode(v string) *RetryMachinetaskResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryMachinetaskResponse) SetResultMsg(v string) *RetryMachinetaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *RetryMachinetaskResponse) SetProgress(v string) *RetryMachinetaskResponse {
	s.Progress = &v
	return s
}

type QueryMetaCellRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryMetaCellRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMetaCellRequest) GoString() string {
	return s.String()
}

func (s *QueryMetaCellRequest) SetAuthToken(v string) *QueryMetaCellRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMetaCellRequest) SetWorkspace(v string) *QueryMetaCellRequest {
	s.Workspace = &v
	return s
}

type QueryMetaCellResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 部署单元列表
	Cells []*string `json:"cells,omitempty" xml:"cells,omitempty" type:"Repeated"`
}

func (s QueryMetaCellResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMetaCellResponse) GoString() string {
	return s.String()
}

func (s *QueryMetaCellResponse) SetReqMsgId(v string) *QueryMetaCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMetaCellResponse) SetResultCode(v string) *QueryMetaCellResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMetaCellResponse) SetResultMsg(v string) *QueryMetaCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMetaCellResponse) SetCells(v []*string) *QueryMetaCellResponse {
	s.Cells = v
	return s
}

type CreateMetaDeploymentcellRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// deployment_cell
	DeploymentCell *string `json:"deployment_cell,omitempty" xml:"deployment_cell,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CreateMetaDeploymentcellRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaDeploymentcellRequest) GoString() string {
	return s.String()
}

func (s *CreateMetaDeploymentcellRequest) SetAuthToken(v string) *CreateMetaDeploymentcellRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateMetaDeploymentcellRequest) SetDeploymentCell(v string) *CreateMetaDeploymentcellRequest {
	s.DeploymentCell = &v
	return s
}

func (s *CreateMetaDeploymentcellRequest) SetWorkspace(v string) *CreateMetaDeploymentcellRequest {
	s.Workspace = &v
	return s
}

type CreateMetaDeploymentcellResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// deployment cell
	DeploymentCell *string `json:"deployment_cell,omitempty" xml:"deployment_cell,omitempty"`
}

func (s CreateMetaDeploymentcellResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaDeploymentcellResponse) GoString() string {
	return s.String()
}

func (s *CreateMetaDeploymentcellResponse) SetReqMsgId(v string) *CreateMetaDeploymentcellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateMetaDeploymentcellResponse) SetResultCode(v string) *CreateMetaDeploymentcellResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateMetaDeploymentcellResponse) SetResultMsg(v string) *CreateMetaDeploymentcellResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateMetaDeploymentcellResponse) SetDeploymentCell(v string) *CreateMetaDeploymentcellResponse {
	s.DeploymentCell = &v
	return s
}

type UpdateMetaDeploymentcellRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// deployment_cell
	DeploymentCell *string `json:"deployment_cell,omitempty" xml:"deployment_cell,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s UpdateMetaDeploymentcellRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaDeploymentcellRequest) GoString() string {
	return s.String()
}

func (s *UpdateMetaDeploymentcellRequest) SetAuthToken(v string) *UpdateMetaDeploymentcellRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMetaDeploymentcellRequest) SetDeploymentCell(v string) *UpdateMetaDeploymentcellRequest {
	s.DeploymentCell = &v
	return s
}

func (s *UpdateMetaDeploymentcellRequest) SetWorkspace(v string) *UpdateMetaDeploymentcellRequest {
	s.Workspace = &v
	return s
}

type UpdateMetaDeploymentcellResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// deployment cell
	DeploymentCell *string `json:"deployment_cell,omitempty" xml:"deployment_cell,omitempty"`
}

func (s UpdateMetaDeploymentcellResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaDeploymentcellResponse) GoString() string {
	return s.String()
}

func (s *UpdateMetaDeploymentcellResponse) SetReqMsgId(v string) *UpdateMetaDeploymentcellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMetaDeploymentcellResponse) SetResultCode(v string) *UpdateMetaDeploymentcellResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMetaDeploymentcellResponse) SetResultMsg(v string) *UpdateMetaDeploymentcellResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateMetaDeploymentcellResponse) SetDeploymentCell(v string) *UpdateMetaDeploymentcellResponse {
	s.DeploymentCell = &v
	return s
}

type GetMetaDeploymentcellRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
}

func (s GetMetaDeploymentcellRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaDeploymentcellRequest) GoString() string {
	return s.String()
}

func (s *GetMetaDeploymentcellRequest) SetAuthToken(v string) *GetMetaDeploymentcellRequest {
	s.AuthToken = &v
	return s
}

func (s *GetMetaDeploymentcellRequest) SetId(v string) *GetMetaDeploymentcellRequest {
	s.Id = &v
	return s
}

type GetMetaDeploymentcellResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// deployment cell
	DeploymentCell *string `json:"deployment_cell,omitempty" xml:"deployment_cell,omitempty"`
}

func (s GetMetaDeploymentcellResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaDeploymentcellResponse) GoString() string {
	return s.String()
}

func (s *GetMetaDeploymentcellResponse) SetReqMsgId(v string) *GetMetaDeploymentcellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetMetaDeploymentcellResponse) SetResultCode(v string) *GetMetaDeploymentcellResponse {
	s.ResultCode = &v
	return s
}

func (s *GetMetaDeploymentcellResponse) SetResultMsg(v string) *GetMetaDeploymentcellResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetMetaDeploymentcellResponse) SetDeploymentCell(v string) *GetMetaDeploymentcellResponse {
	s.DeploymentCell = &v
	return s
}

type QueryMetaDeploymentcellRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryMetaDeploymentcellRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMetaDeploymentcellRequest) GoString() string {
	return s.String()
}

func (s *QueryMetaDeploymentcellRequest) SetAuthToken(v string) *QueryMetaDeploymentcellRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMetaDeploymentcellRequest) SetIds(v []*string) *QueryMetaDeploymentcellRequest {
	s.Ids = v
	return s
}

func (s *QueryMetaDeploymentcellRequest) SetWorkspace(v string) *QueryMetaDeploymentcellRequest {
	s.Workspace = &v
	return s
}

type QueryMetaDeploymentcellResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// deployment cells
	DeploymentCells []*string `json:"deployment_cells,omitempty" xml:"deployment_cells,omitempty" type:"Repeated"`
}

func (s QueryMetaDeploymentcellResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMetaDeploymentcellResponse) GoString() string {
	return s.String()
}

func (s *QueryMetaDeploymentcellResponse) SetReqMsgId(v string) *QueryMetaDeploymentcellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMetaDeploymentcellResponse) SetResultCode(v string) *QueryMetaDeploymentcellResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMetaDeploymentcellResponse) SetResultMsg(v string) *QueryMetaDeploymentcellResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMetaDeploymentcellResponse) SetDeploymentCells(v []*string) *QueryMetaDeploymentcellResponse {
	s.DeploymentCells = v
	return s
}

type CreateNotificationConfigRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cloud web url
	CloudWebUrl *string `json:"cloud_web_url,omitempty" xml:"cloud_web_url,omitempty"`
	// 是否开启，默认关闭
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// modified_version
	ModifiedVersion *int64 `json:"modified_version,omitempty" xml:"modified_version,omitempty"`
	// 接受者
	Receivers []*string `json:"receivers,omitempty" xml:"receivers,omitempty" type:"Repeated"`
	// 类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CreateNotificationConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNotificationConfigRequest) GoString() string {
	return s.String()
}

func (s *CreateNotificationConfigRequest) SetAuthToken(v string) *CreateNotificationConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateNotificationConfigRequest) SetCloudWebUrl(v string) *CreateNotificationConfigRequest {
	s.CloudWebUrl = &v
	return s
}

func (s *CreateNotificationConfigRequest) SetEnabled(v bool) *CreateNotificationConfigRequest {
	s.Enabled = &v
	return s
}

func (s *CreateNotificationConfigRequest) SetModifiedVersion(v int64) *CreateNotificationConfigRequest {
	s.ModifiedVersion = &v
	return s
}

func (s *CreateNotificationConfigRequest) SetReceivers(v []*string) *CreateNotificationConfigRequest {
	s.Receivers = v
	return s
}

func (s *CreateNotificationConfigRequest) SetType(v string) *CreateNotificationConfigRequest {
	s.Type = &v
	return s
}

func (s *CreateNotificationConfigRequest) SetWorkspace(v string) *CreateNotificationConfigRequest {
	s.Workspace = &v
	return s
}

type CreateNotificationConfigResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// config
	Config *string `json:"config,omitempty" xml:"config,omitempty"`
}

func (s CreateNotificationConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNotificationConfigResponse) GoString() string {
	return s.String()
}

func (s *CreateNotificationConfigResponse) SetReqMsgId(v string) *CreateNotificationConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateNotificationConfigResponse) SetResultCode(v string) *CreateNotificationConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateNotificationConfigResponse) SetResultMsg(v string) *CreateNotificationConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateNotificationConfigResponse) SetConfig(v string) *CreateNotificationConfigResponse {
	s.Config = &v
	return s
}

type UpdateNotificationConfigRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// cloud web url
	CloudWebUrl *string `json:"cloud_web_url,omitempty" xml:"cloud_web_url,omitempty"`
	// 是否开启
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// modified_version
	ModifiedVersion *int64 `json:"modified_version,omitempty" xml:"modified_version,omitempty"`
	// 接受者
	Receivers []*string `json:"receivers,omitempty" xml:"receivers,omitempty" type:"Repeated"`
	// 类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s UpdateNotificationConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateNotificationConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateNotificationConfigRequest) SetAuthToken(v string) *UpdateNotificationConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateNotificationConfigRequest) SetCloudWebUrl(v string) *UpdateNotificationConfigRequest {
	s.CloudWebUrl = &v
	return s
}

func (s *UpdateNotificationConfigRequest) SetEnabled(v bool) *UpdateNotificationConfigRequest {
	s.Enabled = &v
	return s
}

func (s *UpdateNotificationConfigRequest) SetId(v string) *UpdateNotificationConfigRequest {
	s.Id = &v
	return s
}

func (s *UpdateNotificationConfigRequest) SetModifiedVersion(v int64) *UpdateNotificationConfigRequest {
	s.ModifiedVersion = &v
	return s
}

func (s *UpdateNotificationConfigRequest) SetReceivers(v []*string) *UpdateNotificationConfigRequest {
	s.Receivers = v
	return s
}

func (s *UpdateNotificationConfigRequest) SetType(v string) *UpdateNotificationConfigRequest {
	s.Type = &v
	return s
}

func (s *UpdateNotificationConfigRequest) SetWorkspace(v string) *UpdateNotificationConfigRequest {
	s.Workspace = &v
	return s
}

type UpdateNotificationConfigResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// config
	Config *string `json:"config,omitempty" xml:"config,omitempty"`
}

func (s UpdateNotificationConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateNotificationConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateNotificationConfigResponse) SetReqMsgId(v string) *UpdateNotificationConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateNotificationConfigResponse) SetResultCode(v string) *UpdateNotificationConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateNotificationConfigResponse) SetResultMsg(v string) *UpdateNotificationConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateNotificationConfigResponse) SetConfig(v string) *UpdateNotificationConfigResponse {
	s.Config = &v
	return s
}

type QueryNotificationConfigRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryNotificationConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryNotificationConfigRequest) GoString() string {
	return s.String()
}

func (s *QueryNotificationConfigRequest) SetAuthToken(v string) *QueryNotificationConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryNotificationConfigRequest) SetWorkspace(v string) *QueryNotificationConfigRequest {
	s.Workspace = &v
	return s
}

type QueryNotificationConfigResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 通知配置列表
	Configs []*string `json:"configs,omitempty" xml:"configs,omitempty" type:"Repeated"`
}

func (s QueryNotificationConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryNotificationConfigResponse) GoString() string {
	return s.String()
}

func (s *QueryNotificationConfigResponse) SetReqMsgId(v string) *QueryNotificationConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryNotificationConfigResponse) SetResultCode(v string) *QueryNotificationConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryNotificationConfigResponse) SetResultMsg(v string) *QueryNotificationConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryNotificationConfigResponse) SetConfigs(v []*string) *QueryNotificationConfigResponse {
	s.Configs = v
	return s
}

type DeleteNotificationConfigRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s DeleteNotificationConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNotificationConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteNotificationConfigRequest) SetAuthToken(v string) *DeleteNotificationConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteNotificationConfigRequest) SetId(v string) *DeleteNotificationConfigRequest {
	s.Id = &v
	return s
}

func (s *DeleteNotificationConfigRequest) SetWorkspace(v string) *DeleteNotificationConfigRequest {
	s.Workspace = &v
	return s
}

type DeleteNotificationConfigResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteNotificationConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNotificationConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteNotificationConfigResponse) SetReqMsgId(v string) *DeleteNotificationConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteNotificationConfigResponse) SetResultCode(v string) *DeleteNotificationConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteNotificationConfigResponse) SetResultMsg(v string) *DeleteNotificationConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteNotificationConfigResponse) SetSuccess(v bool) *DeleteNotificationConfigResponse {
	s.Success = &v
	return s
}

type QueryOperatorRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 用户 ID
	CustomerId *string `json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	// 当前页
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryOperatorRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOperatorRequest) GoString() string {
	return s.String()
}

func (s *QueryOperatorRequest) SetAuthToken(v string) *QueryOperatorRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOperatorRequest) SetCustomerId(v string) *QueryOperatorRequest {
	s.CustomerId = &v
	return s
}

func (s *QueryOperatorRequest) SetPageNo(v int64) *QueryOperatorRequest {
	s.PageNo = &v
	return s
}

func (s *QueryOperatorRequest) SetPageSize(v int64) *QueryOperatorRequest {
	s.PageSize = &v
	return s
}

func (s *QueryOperatorRequest) SetWorkspace(v string) *QueryOperatorRequest {
	s.Workspace = &v
	return s
}

type QueryOperatorResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 操作人列表
	Operators []*string `json:"operators,omitempty" xml:"operators,omitempty" type:"Repeated"`
}

func (s QueryOperatorResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOperatorResponse) GoString() string {
	return s.String()
}

func (s *QueryOperatorResponse) SetReqMsgId(v string) *QueryOperatorResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOperatorResponse) SetResultCode(v string) *QueryOperatorResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOperatorResponse) SetResultMsg(v string) *QueryOperatorResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOperatorResponse) SetOperators(v []*string) *QueryOperatorResponse {
	s.Operators = v
	return s
}

type RollbackPlanServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 发布单ID
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
	// rollback_info
	RollbackInfo *RollbackInfo `json:"rollback_info,omitempty" xml:"rollback_info,omitempty"`
	// 发布服务
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RollbackPlanServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackPlanServiceRequest) GoString() string {
	return s.String()
}

func (s *RollbackPlanServiceRequest) SetAuthToken(v string) *RollbackPlanServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *RollbackPlanServiceRequest) SetPlanId(v string) *RollbackPlanServiceRequest {
	s.PlanId = &v
	return s
}

func (s *RollbackPlanServiceRequest) SetRollbackInfo(v *RollbackInfo) *RollbackPlanServiceRequest {
	s.RollbackInfo = v
	return s
}

func (s *RollbackPlanServiceRequest) SetService(v string) *RollbackPlanServiceRequest {
	s.Service = &v
	return s
}

func (s *RollbackPlanServiceRequest) SetWorkspace(v string) *RollbackPlanServiceRequest {
	s.Workspace = &v
	return s
}

type RollbackPlanServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发布单信息
	Plan *string `json:"plan,omitempty" xml:"plan,omitempty"`
}

func (s RollbackPlanServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackPlanServiceResponse) GoString() string {
	return s.String()
}

func (s *RollbackPlanServiceResponse) SetReqMsgId(v string) *RollbackPlanServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RollbackPlanServiceResponse) SetResultCode(v string) *RollbackPlanServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *RollbackPlanServiceResponse) SetResultMsg(v string) *RollbackPlanServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *RollbackPlanServiceResponse) SetPlan(v string) *RollbackPlanServiceResponse {
	s.Plan = &v
	return s
}

type CreatePlanRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// from aliyun
	FromAliyun *bool `json:"from_aliyun,omitempty" xml:"from_aliyun,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CreatePlanRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePlanRequest) GoString() string {
	return s.String()
}

func (s *CreatePlanRequest) SetAuthToken(v string) *CreatePlanRequest {
	s.AuthToken = &v
	return s
}

func (s *CreatePlanRequest) SetData(v string) *CreatePlanRequest {
	s.Data = &v
	return s
}

func (s *CreatePlanRequest) SetFromAliyun(v bool) *CreatePlanRequest {
	s.FromAliyun = &v
	return s
}

func (s *CreatePlanRequest) SetWorkspace(v string) *CreatePlanRequest {
	s.Workspace = &v
	return s
}

type CreatePlanResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// plan
	Plan *string `json:"plan,omitempty" xml:"plan,omitempty"`
}

func (s CreatePlanResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePlanResponse) GoString() string {
	return s.String()
}

func (s *CreatePlanResponse) SetReqMsgId(v string) *CreatePlanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreatePlanResponse) SetResultCode(v string) *CreatePlanResponse {
	s.ResultCode = &v
	return s
}

func (s *CreatePlanResponse) SetResultMsg(v string) *CreatePlanResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreatePlanResponse) SetPlan(v string) *CreatePlanResponse {
	s.Plan = &v
	return s
}

type CheckPlanRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// from_aliyun
	FromAliyun *bool `json:"from_aliyun,omitempty" xml:"from_aliyun,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CheckPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckPlanRequest) GoString() string {
	return s.String()
}

func (s *CheckPlanRequest) SetAuthToken(v string) *CheckPlanRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckPlanRequest) SetData(v string) *CheckPlanRequest {
	s.Data = &v
	return s
}

func (s *CheckPlanRequest) SetFromAliyun(v bool) *CheckPlanRequest {
	s.FromAliyun = &v
	return s
}

func (s *CheckPlanRequest) SetWorkspace(v string) *CheckPlanRequest {
	s.Workspace = &v
	return s
}

type CheckPlanResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// error_reasons
	ErrorReasons []*string `json:"error_reasons,omitempty" xml:"error_reasons,omitempty" type:"Repeated"`
	// validation_messages
	ValidationMessages *string `json:"validation_messages,omitempty" xml:"validation_messages,omitempty"`
}

func (s CheckPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckPlanResponse) GoString() string {
	return s.String()
}

func (s *CheckPlanResponse) SetReqMsgId(v string) *CheckPlanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckPlanResponse) SetResultCode(v string) *CheckPlanResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckPlanResponse) SetResultMsg(v string) *CheckPlanResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckPlanResponse) SetData(v string) *CheckPlanResponse {
	s.Data = &v
	return s
}

func (s *CheckPlanResponse) SetErrorReasons(v []*string) *CheckPlanResponse {
	s.ErrorReasons = v
	return s
}

func (s *CheckPlanResponse) SetValidationMessages(v string) *CheckPlanResponse {
	s.ValidationMessages = &v
	return s
}

type CheckPlanOperationRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// from_aliyun
	FromAliyun *bool `json:"from_aliyun,omitempty" xml:"from_aliyun,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CheckPlanOperationRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckPlanOperationRequest) GoString() string {
	return s.String()
}

func (s *CheckPlanOperationRequest) SetAuthToken(v string) *CheckPlanOperationRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckPlanOperationRequest) SetData(v string) *CheckPlanOperationRequest {
	s.Data = &v
	return s
}

func (s *CheckPlanOperationRequest) SetFromAliyun(v bool) *CheckPlanOperationRequest {
	s.FromAliyun = &v
	return s
}

func (s *CheckPlanOperationRequest) SetWorkspace(v string) *CheckPlanOperationRequest {
	s.Workspace = &v
	return s
}

type CheckPlanOperationResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// error_messages
	ErrorReasons []*string `json:"error_reasons,omitempty" xml:"error_reasons,omitempty" type:"Repeated"`
	// validation_messages
	ValidationMessages *string `json:"validation_messages,omitempty" xml:"validation_messages,omitempty"`
}

func (s CheckPlanOperationResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckPlanOperationResponse) GoString() string {
	return s.String()
}

func (s *CheckPlanOperationResponse) SetReqMsgId(v string) *CheckPlanOperationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckPlanOperationResponse) SetResultCode(v string) *CheckPlanOperationResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckPlanOperationResponse) SetResultMsg(v string) *CheckPlanOperationResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckPlanOperationResponse) SetData(v string) *CheckPlanOperationResponse {
	s.Data = &v
	return s
}

func (s *CheckPlanOperationResponse) SetErrorReasons(v []*string) *CheckPlanOperationResponse {
	s.ErrorReasons = v
	return s
}

func (s *CheckPlanOperationResponse) SetValidationMessages(v string) *CheckPlanOperationResponse {
	s.ValidationMessages = &v
	return s
}

type CreatePlanOperationRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// from_aliyun
	FromAliyun *bool `json:"from_aliyun,omitempty" xml:"from_aliyun,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CreatePlanOperationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePlanOperationRequest) GoString() string {
	return s.String()
}

func (s *CreatePlanOperationRequest) SetAuthToken(v string) *CreatePlanOperationRequest {
	s.AuthToken = &v
	return s
}

func (s *CreatePlanOperationRequest) SetData(v string) *CreatePlanOperationRequest {
	s.Data = &v
	return s
}

func (s *CreatePlanOperationRequest) SetFromAliyun(v bool) *CreatePlanOperationRequest {
	s.FromAliyun = &v
	return s
}

func (s *CreatePlanOperationRequest) SetWorkspace(v string) *CreatePlanOperationRequest {
	s.Workspace = &v
	return s
}

type CreatePlanOperationResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ops_plan
	OpsPlan *string `json:"ops_plan,omitempty" xml:"ops_plan,omitempty"`
}

func (s CreatePlanOperationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePlanOperationResponse) GoString() string {
	return s.String()
}

func (s *CreatePlanOperationResponse) SetReqMsgId(v string) *CreatePlanOperationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreatePlanOperationResponse) SetResultCode(v string) *CreatePlanOperationResponse {
	s.ResultCode = &v
	return s
}

func (s *CreatePlanOperationResponse) SetResultMsg(v string) *CreatePlanOperationResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreatePlanOperationResponse) SetOpsPlan(v string) *CreatePlanOperationResponse {
	s.OpsPlan = &v
	return s
}

type CreatePlanAdvancedRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// plan
	OpsPlan *string `json:"ops_plan,omitempty" xml:"ops_plan,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CreatePlanAdvancedRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePlanAdvancedRequest) GoString() string {
	return s.String()
}

func (s *CreatePlanAdvancedRequest) SetAuthToken(v string) *CreatePlanAdvancedRequest {
	s.AuthToken = &v
	return s
}

func (s *CreatePlanAdvancedRequest) SetOpsPlan(v string) *CreatePlanAdvancedRequest {
	s.OpsPlan = &v
	return s
}

func (s *CreatePlanAdvancedRequest) SetWorkspace(v string) *CreatePlanAdvancedRequest {
	s.Workspace = &v
	return s
}

type CreatePlanAdvancedResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ops_plan
	OpsPlan *string `json:"ops_plan,omitempty" xml:"ops_plan,omitempty"`
}

func (s CreatePlanAdvancedResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePlanAdvancedResponse) GoString() string {
	return s.String()
}

func (s *CreatePlanAdvancedResponse) SetReqMsgId(v string) *CreatePlanAdvancedResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreatePlanAdvancedResponse) SetResultCode(v string) *CreatePlanAdvancedResponse {
	s.ResultCode = &v
	return s
}

func (s *CreatePlanAdvancedResponse) SetResultMsg(v string) *CreatePlanAdvancedResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreatePlanAdvancedResponse) SetOpsPlan(v string) *CreatePlanAdvancedResponse {
	s.OpsPlan = &v
	return s
}

type ReinitPlanRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ReinitPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitPlanRequest) GoString() string {
	return s.String()
}

func (s *ReinitPlanRequest) SetAuthToken(v string) *ReinitPlanRequest {
	s.AuthToken = &v
	return s
}

func (s *ReinitPlanRequest) SetId(v string) *ReinitPlanRequest {
	s.Id = &v
	return s
}

func (s *ReinitPlanRequest) SetWorkspace(v string) *ReinitPlanRequest {
	s.Workspace = &v
	return s
}

type ReinitPlanResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ops_plan
	OpsPlan *string `json:"ops_plan,omitempty" xml:"ops_plan,omitempty"`
}

func (s ReinitPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitPlanResponse) GoString() string {
	return s.String()
}

func (s *ReinitPlanResponse) SetReqMsgId(v string) *ReinitPlanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReinitPlanResponse) SetResultCode(v string) *ReinitPlanResponse {
	s.ResultCode = &v
	return s
}

func (s *ReinitPlanResponse) SetResultMsg(v string) *ReinitPlanResponse {
	s.ResultMsg = &v
	return s
}

func (s *ReinitPlanResponse) SetOpsPlan(v string) *ReinitPlanResponse {
	s.OpsPlan = &v
	return s
}

type GetPlanRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPlanRequest) GoString() string {
	return s.String()
}

func (s *GetPlanRequest) SetAuthToken(v string) *GetPlanRequest {
	s.AuthToken = &v
	return s
}

func (s *GetPlanRequest) SetId(v string) *GetPlanRequest {
	s.Id = &v
	return s
}

func (s *GetPlanRequest) SetWorkspace(v string) *GetPlanRequest {
	s.Workspace = &v
	return s
}

type GetPlanResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发布单详情
	OpsPlan *string `json:"ops_plan,omitempty" xml:"ops_plan,omitempty"`
}

func (s GetPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPlanResponse) GoString() string {
	return s.String()
}

func (s *GetPlanResponse) SetReqMsgId(v string) *GetPlanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetPlanResponse) SetResultCode(v string) *GetPlanResponse {
	s.ResultCode = &v
	return s
}

func (s *GetPlanResponse) SetResultMsg(v string) *GetPlanResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetPlanResponse) SetOpsPlan(v string) *GetPlanResponse {
	s.OpsPlan = &v
	return s
}

type GetPlanBasicRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// show_basic
	ShowBasic *bool `json:"show_basic,omitempty" xml:"show_basic,omitempty"`
	// time_series_id
	TimeSeriesId *string `json:"time_series_id,omitempty" xml:"time_series_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetPlanBasicRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPlanBasicRequest) GoString() string {
	return s.String()
}

func (s *GetPlanBasicRequest) SetAuthToken(v string) *GetPlanBasicRequest {
	s.AuthToken = &v
	return s
}

func (s *GetPlanBasicRequest) SetShowBasic(v bool) *GetPlanBasicRequest {
	s.ShowBasic = &v
	return s
}

func (s *GetPlanBasicRequest) SetTimeSeriesId(v string) *GetPlanBasicRequest {
	s.TimeSeriesId = &v
	return s
}

func (s *GetPlanBasicRequest) SetWorkspace(v string) *GetPlanBasicRequest {
	s.Workspace = &v
	return s
}

type GetPlanBasicResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ops_plan
	OpsPlan *string `json:"ops_plan,omitempty" xml:"ops_plan,omitempty"`
}

func (s GetPlanBasicResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPlanBasicResponse) GoString() string {
	return s.String()
}

func (s *GetPlanBasicResponse) SetReqMsgId(v string) *GetPlanBasicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetPlanBasicResponse) SetResultCode(v string) *GetPlanBasicResponse {
	s.ResultCode = &v
	return s
}

func (s *GetPlanBasicResponse) SetResultMsg(v string) *GetPlanBasicResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetPlanBasicResponse) SetOpsPlan(v string) *GetPlanBasicResponse {
	s.OpsPlan = &v
	return s
}

type GetPlanProgressRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetPlanProgressRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPlanProgressRequest) GoString() string {
	return s.String()
}

func (s *GetPlanProgressRequest) SetAuthToken(v string) *GetPlanProgressRequest {
	s.AuthToken = &v
	return s
}

func (s *GetPlanProgressRequest) SetId(v string) *GetPlanProgressRequest {
	s.Id = &v
	return s
}

func (s *GetPlanProgressRequest) SetWorkspace(v string) *GetPlanProgressRequest {
	s.Workspace = &v
	return s
}

type GetPlanProgressResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// progress
	Progress *string `json:"progress,omitempty" xml:"progress,omitempty"`
}

func (s GetPlanProgressResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPlanProgressResponse) GoString() string {
	return s.String()
}

func (s *GetPlanProgressResponse) SetReqMsgId(v string) *GetPlanProgressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetPlanProgressResponse) SetResultCode(v string) *GetPlanProgressResponse {
	s.ResultCode = &v
	return s
}

func (s *GetPlanProgressResponse) SetResultMsg(v string) *GetPlanProgressResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetPlanProgressResponse) SetProgress(v string) *GetPlanProgressResponse {
	s.Progress = &v
	return s
}

type QueryPlanRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// gmtCreateEnd
	GmtCreateEnd *string `json:"gmt_create_end,omitempty" xml:"gmt_create_end,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// gmtCreateStart
	GmtCreateStart *string `json:"gmt_create_start,omitempty" xml:"gmt_create_start,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// initialByTag
	InitialByTag *string `json:"initial_by_tag,omitempty" xml:"initial_by_tag,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// opsModes
	OpsModes []*string `json:"ops_modes,omitempty" xml:"ops_modes,omitempty" type:"Repeated"`
	// ops_types
	OpsTypes []*string `json:"ops_types,omitempty" xml:"ops_types,omitempty" type:"Repeated"`
	// page no
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// page size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// plan_ids
	PlanIds []*string `json:"plan_ids,omitempty" xml:"plan_ids,omitempty" type:"Repeated"`
	// plan_time_serials_id
	PlanTimeSerialsId *string `json:"plan_time_serials_id,omitempty" xml:"plan_time_serials_id,omitempty"`
	// releaseModes
	ReleaseModes []*string `json:"release_modes,omitempty" xml:"release_modes,omitempty" type:"Repeated"`
	// serviceName
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty"`
	// states
	States []*string `json:"states,omitempty" xml:"states,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPlanRequest) GoString() string {
	return s.String()
}

func (s *QueryPlanRequest) SetAuthToken(v string) *QueryPlanRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryPlanRequest) SetGmtCreateEnd(v string) *QueryPlanRequest {
	s.GmtCreateEnd = &v
	return s
}

func (s *QueryPlanRequest) SetGmtCreateStart(v string) *QueryPlanRequest {
	s.GmtCreateStart = &v
	return s
}

func (s *QueryPlanRequest) SetInitialByTag(v string) *QueryPlanRequest {
	s.InitialByTag = &v
	return s
}

func (s *QueryPlanRequest) SetName(v string) *QueryPlanRequest {
	s.Name = &v
	return s
}

func (s *QueryPlanRequest) SetOpsModes(v []*string) *QueryPlanRequest {
	s.OpsModes = v
	return s
}

func (s *QueryPlanRequest) SetOpsTypes(v []*string) *QueryPlanRequest {
	s.OpsTypes = v
	return s
}

func (s *QueryPlanRequest) SetPageNo(v int64) *QueryPlanRequest {
	s.PageNo = &v
	return s
}

func (s *QueryPlanRequest) SetPageSize(v int64) *QueryPlanRequest {
	s.PageSize = &v
	return s
}

func (s *QueryPlanRequest) SetPlanIds(v []*string) *QueryPlanRequest {
	s.PlanIds = v
	return s
}

func (s *QueryPlanRequest) SetPlanTimeSerialsId(v string) *QueryPlanRequest {
	s.PlanTimeSerialsId = &v
	return s
}

func (s *QueryPlanRequest) SetReleaseModes(v []*string) *QueryPlanRequest {
	s.ReleaseModes = v
	return s
}

func (s *QueryPlanRequest) SetServiceName(v string) *QueryPlanRequest {
	s.ServiceName = &v
	return s
}

func (s *QueryPlanRequest) SetStates(v []*string) *QueryPlanRequest {
	s.States = v
	return s
}

func (s *QueryPlanRequest) SetWorkspace(v string) *QueryPlanRequest {
	s.Workspace = &v
	return s
}

type QueryPlanResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 列表
	List []*string `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
	// page_no
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// total_size
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
}

func (s QueryPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPlanResponse) GoString() string {
	return s.String()
}

func (s *QueryPlanResponse) SetReqMsgId(v string) *QueryPlanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryPlanResponse) SetResultCode(v string) *QueryPlanResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryPlanResponse) SetResultMsg(v string) *QueryPlanResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryPlanResponse) SetList(v []*string) *QueryPlanResponse {
	s.List = v
	return s
}

func (s *QueryPlanResponse) SetPageNo(v int64) *QueryPlanResponse {
	s.PageNo = &v
	return s
}

func (s *QueryPlanResponse) SetPageSize(v int64) *QueryPlanResponse {
	s.PageSize = &v
	return s
}

func (s *QueryPlanResponse) SetTotalSize(v int64) *QueryPlanResponse {
	s.TotalSize = &v
	return s
}

type CountPlanStateRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// gmt_create_end
	GmtCreateEnd *string `json:"gmt_create_end,omitempty" xml:"gmt_create_end,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// gmtCreateStart
	GmtCreateStart *string `json:"gmt_create_start,omitempty" xml:"gmt_create_start,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// initial_by_tag
	InitialByTag *string `json:"initial_by_tag,omitempty" xml:"initial_by_tag,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// ops_modes
	OpsModes []*string `json:"ops_modes,omitempty" xml:"ops_modes,omitempty" type:"Repeated"`
	// ops_types
	OpsTypes []*string `json:"ops_types,omitempty" xml:"ops_types,omitempty" type:"Repeated"`
	// page no
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// page size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// plan ids
	PlanIds []*string `json:"plan_ids,omitempty" xml:"plan_ids,omitempty" type:"Repeated"`
	// plan_time_serials_id
	PlanTimeSerialsId *string `json:"plan_time_serials_id,omitempty" xml:"plan_time_serials_id,omitempty"`
	// release_modes
	ReleaseModes []*string `json:"release_modes,omitempty" xml:"release_modes,omitempty" type:"Repeated"`
	// service_name
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty"`
	// states
	States []*string `json:"states,omitempty" xml:"states,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CountPlanStateRequest) String() string {
	return tea.Prettify(s)
}

func (s CountPlanStateRequest) GoString() string {
	return s.String()
}

func (s *CountPlanStateRequest) SetAuthToken(v string) *CountPlanStateRequest {
	s.AuthToken = &v
	return s
}

func (s *CountPlanStateRequest) SetGmtCreateEnd(v string) *CountPlanStateRequest {
	s.GmtCreateEnd = &v
	return s
}

func (s *CountPlanStateRequest) SetGmtCreateStart(v string) *CountPlanStateRequest {
	s.GmtCreateStart = &v
	return s
}

func (s *CountPlanStateRequest) SetInitialByTag(v string) *CountPlanStateRequest {
	s.InitialByTag = &v
	return s
}

func (s *CountPlanStateRequest) SetName(v string) *CountPlanStateRequest {
	s.Name = &v
	return s
}

func (s *CountPlanStateRequest) SetOpsModes(v []*string) *CountPlanStateRequest {
	s.OpsModes = v
	return s
}

func (s *CountPlanStateRequest) SetOpsTypes(v []*string) *CountPlanStateRequest {
	s.OpsTypes = v
	return s
}

func (s *CountPlanStateRequest) SetPageNo(v int64) *CountPlanStateRequest {
	s.PageNo = &v
	return s
}

func (s *CountPlanStateRequest) SetPageSize(v int64) *CountPlanStateRequest {
	s.PageSize = &v
	return s
}

func (s *CountPlanStateRequest) SetPlanIds(v []*string) *CountPlanStateRequest {
	s.PlanIds = v
	return s
}

func (s *CountPlanStateRequest) SetPlanTimeSerialsId(v string) *CountPlanStateRequest {
	s.PlanTimeSerialsId = &v
	return s
}

func (s *CountPlanStateRequest) SetReleaseModes(v []*string) *CountPlanStateRequest {
	s.ReleaseModes = v
	return s
}

func (s *CountPlanStateRequest) SetServiceName(v string) *CountPlanStateRequest {
	s.ServiceName = &v
	return s
}

func (s *CountPlanStateRequest) SetStates(v []*string) *CountPlanStateRequest {
	s.States = v
	return s
}

func (s *CountPlanStateRequest) SetWorkspace(v string) *CountPlanStateRequest {
	s.Workspace = &v
	return s
}

type CountPlanStateResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// state_counts
	StateCounts []*string `json:"state_counts,omitempty" xml:"state_counts,omitempty" type:"Repeated"`
}

func (s CountPlanStateResponse) String() string {
	return tea.Prettify(s)
}

func (s CountPlanStateResponse) GoString() string {
	return s.String()
}

func (s *CountPlanStateResponse) SetReqMsgId(v string) *CountPlanStateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CountPlanStateResponse) SetResultCode(v string) *CountPlanStateResponse {
	s.ResultCode = &v
	return s
}

func (s *CountPlanStateResponse) SetResultMsg(v string) *CountPlanStateResponse {
	s.ResultMsg = &v
	return s
}

func (s *CountPlanStateResponse) SetStateCounts(v []*string) *CountPlanStateResponse {
	s.StateCounts = v
	return s
}

type ExecPlanRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ExecPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecPlanRequest) GoString() string {
	return s.String()
}

func (s *ExecPlanRequest) SetAuthToken(v string) *ExecPlanRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecPlanRequest) SetId(v string) *ExecPlanRequest {
	s.Id = &v
	return s
}

func (s *ExecPlanRequest) SetWorkspace(v string) *ExecPlanRequest {
	s.Workspace = &v
	return s
}

type ExecPlanResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ops_plan
	OpsPlan *string `json:"ops_plan,omitempty" xml:"ops_plan,omitempty"`
}

func (s ExecPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecPlanResponse) GoString() string {
	return s.String()
}

func (s *ExecPlanResponse) SetReqMsgId(v string) *ExecPlanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecPlanResponse) SetResultCode(v string) *ExecPlanResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecPlanResponse) SetResultMsg(v string) *ExecPlanResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecPlanResponse) SetOpsPlan(v string) *ExecPlanResponse {
	s.OpsPlan = &v
	return s
}

type RetryPlanRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RetryPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryPlanRequest) GoString() string {
	return s.String()
}

func (s *RetryPlanRequest) SetAuthToken(v string) *RetryPlanRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryPlanRequest) SetId(v string) *RetryPlanRequest {
	s.Id = &v
	return s
}

func (s *RetryPlanRequest) SetWorkspace(v string) *RetryPlanRequest {
	s.Workspace = &v
	return s
}

type RetryPlanResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ops plan
	OpsPlan *string `json:"ops_plan,omitempty" xml:"ops_plan,omitempty"`
}

func (s RetryPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryPlanResponse) GoString() string {
	return s.String()
}

func (s *RetryPlanResponse) SetReqMsgId(v string) *RetryPlanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryPlanResponse) SetResultCode(v string) *RetryPlanResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryPlanResponse) SetResultMsg(v string) *RetryPlanResponse {
	s.ResultMsg = &v
	return s
}

func (s *RetryPlanResponse) SetOpsPlan(v string) *RetryPlanResponse {
	s.OpsPlan = &v
	return s
}

type CancelPlanRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// reason
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CancelPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelPlanRequest) GoString() string {
	return s.String()
}

func (s *CancelPlanRequest) SetAuthToken(v string) *CancelPlanRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelPlanRequest) SetId(v string) *CancelPlanRequest {
	s.Id = &v
	return s
}

func (s *CancelPlanRequest) SetReason(v string) *CancelPlanRequest {
	s.Reason = &v
	return s
}

func (s *CancelPlanRequest) SetWorkspace(v string) *CancelPlanRequest {
	s.Workspace = &v
	return s
}

type CancelPlanResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ops_plan
	OpsPlan *string `json:"ops_plan,omitempty" xml:"ops_plan,omitempty"`
}

func (s CancelPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelPlanResponse) GoString() string {
	return s.String()
}

func (s *CancelPlanResponse) SetReqMsgId(v string) *CancelPlanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelPlanResponse) SetResultCode(v string) *CancelPlanResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelPlanResponse) SetResultMsg(v string) *CancelPlanResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelPlanResponse) SetOpsPlan(v string) *CancelPlanResponse {
	s.OpsPlan = &v
	return s
}

type RollbackPlanRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// rollback_info
	RollbackInfo *RollbackInfo `json:"rollback_info,omitempty" xml:"rollback_info,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RollbackPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackPlanRequest) GoString() string {
	return s.String()
}

func (s *RollbackPlanRequest) SetAuthToken(v string) *RollbackPlanRequest {
	s.AuthToken = &v
	return s
}

func (s *RollbackPlanRequest) SetId(v string) *RollbackPlanRequest {
	s.Id = &v
	return s
}

func (s *RollbackPlanRequest) SetRollbackInfo(v *RollbackInfo) *RollbackPlanRequest {
	s.RollbackInfo = v
	return s
}

func (s *RollbackPlanRequest) SetWorkspace(v string) *RollbackPlanRequest {
	s.Workspace = &v
	return s
}

type RollbackPlanResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ops_plan
	OpsPlan *string `json:"ops_plan,omitempty" xml:"ops_plan,omitempty"`
}

func (s RollbackPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackPlanResponse) GoString() string {
	return s.String()
}

func (s *RollbackPlanResponse) SetReqMsgId(v string) *RollbackPlanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RollbackPlanResponse) SetResultCode(v string) *RollbackPlanResponse {
	s.ResultCode = &v
	return s
}

func (s *RollbackPlanResponse) SetResultMsg(v string) *RollbackPlanResponse {
	s.ResultMsg = &v
	return s
}

func (s *RollbackPlanResponse) SetOpsPlan(v string) *RollbackPlanResponse {
	s.OpsPlan = &v
	return s
}

type GetTaskSummaryRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetTaskSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTaskSummaryRequest) GoString() string {
	return s.String()
}

func (s *GetTaskSummaryRequest) SetAuthToken(v string) *GetTaskSummaryRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTaskSummaryRequest) SetId(v string) *GetTaskSummaryRequest {
	s.Id = &v
	return s
}

func (s *GetTaskSummaryRequest) SetWorkspace(v string) *GetTaskSummaryRequest {
	s.Workspace = &v
	return s
}

type GetTaskSummaryResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// task
	Task *string `json:"task,omitempty" xml:"task,omitempty"`
}

func (s GetTaskSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTaskSummaryResponse) GoString() string {
	return s.String()
}

func (s *GetTaskSummaryResponse) SetReqMsgId(v string) *GetTaskSummaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTaskSummaryResponse) SetResultCode(v string) *GetTaskSummaryResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTaskSummaryResponse) SetResultMsg(v string) *GetTaskSummaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTaskSummaryResponse) SetTask(v string) *GetTaskSummaryResponse {
	s.Task = &v
	return s
}

type SkipTaskRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s SkipTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SkipTaskRequest) GoString() string {
	return s.String()
}

func (s *SkipTaskRequest) SetAuthToken(v string) *SkipTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *SkipTaskRequest) SetId(v string) *SkipTaskRequest {
	s.Id = &v
	return s
}

func (s *SkipTaskRequest) SetWorkspace(v string) *SkipTaskRequest {
	s.Workspace = &v
	return s
}

type SkipTaskResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// task
	Task *string `json:"task,omitempty" xml:"task,omitempty"`
}

func (s SkipTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SkipTaskResponse) GoString() string {
	return s.String()
}

func (s *SkipTaskResponse) SetReqMsgId(v string) *SkipTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SkipTaskResponse) SetResultCode(v string) *SkipTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *SkipTaskResponse) SetResultMsg(v string) *SkipTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *SkipTaskResponse) SetTask(v string) *SkipTaskResponse {
	s.Task = &v
	return s
}

type RetryTaskRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RetryTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryTaskRequest) GoString() string {
	return s.String()
}

func (s *RetryTaskRequest) SetAuthToken(v string) *RetryTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryTaskRequest) SetId(v string) *RetryTaskRequest {
	s.Id = &v
	return s
}

func (s *RetryTaskRequest) SetWorkspace(v string) *RetryTaskRequest {
	s.Workspace = &v
	return s
}

type RetryTaskResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// task
	Task *string `json:"task,omitempty" xml:"task,omitempty"`
}

func (s RetryTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryTaskResponse) GoString() string {
	return s.String()
}

func (s *RetryTaskResponse) SetReqMsgId(v string) *RetryTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryTaskResponse) SetResultCode(v string) *RetryTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryTaskResponse) SetResultMsg(v string) *RetryTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *RetryTaskResponse) SetTask(v string) *RetryTaskResponse {
	s.Task = &v
	return s
}

type QueryRoleRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// from_aliyun
	FromAliyun *bool `json:"from_aliyun,omitempty" xml:"from_aliyun,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRoleRequest) GoString() string {
	return s.String()
}

func (s *QueryRoleRequest) SetAuthToken(v string) *QueryRoleRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRoleRequest) SetFromAliyun(v bool) *QueryRoleRequest {
	s.FromAliyun = &v
	return s
}

func (s *QueryRoleRequest) SetPageSize(v int64) *QueryRoleRequest {
	s.PageSize = &v
	return s
}

func (s *QueryRoleRequest) SetWorkspace(v string) *QueryRoleRequest {
	s.Workspace = &v
	return s
}

type QueryRoleResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 角色信息
	Roles []*string `json:"roles,omitempty" xml:"roles,omitempty" type:"Repeated"`
}

func (s QueryRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRoleResponse) GoString() string {
	return s.String()
}

func (s *QueryRoleResponse) SetReqMsgId(v string) *QueryRoleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRoleResponse) SetResultCode(v string) *QueryRoleResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRoleResponse) SetResultMsg(v string) *QueryRoleResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRoleResponse) SetRoles(v []*string) *QueryRoleResponse {
	s.Roles = v
	return s
}

type CreateServicegroupcollectionRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// arrangement_id
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// process_definition_id
	ProcessDefinitionId *string `json:"process_definition_id,omitempty" xml:"process_definition_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CreateServicegroupcollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateServicegroupcollectionRequest) GoString() string {
	return s.String()
}

func (s *CreateServicegroupcollectionRequest) SetAuthToken(v string) *CreateServicegroupcollectionRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateServicegroupcollectionRequest) SetArrangementId(v string) *CreateServicegroupcollectionRequest {
	s.ArrangementId = &v
	return s
}

func (s *CreateServicegroupcollectionRequest) SetProcessDefinitionId(v string) *CreateServicegroupcollectionRequest {
	s.ProcessDefinitionId = &v
	return s
}

func (s *CreateServicegroupcollectionRequest) SetWorkspace(v string) *CreateServicegroupcollectionRequest {
	s.Workspace = &v
	return s
}

type CreateServicegroupcollectionResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 集合信息
	Collection *string `json:"collection,omitempty" xml:"collection,omitempty"`
}

func (s CreateServicegroupcollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateServicegroupcollectionResponse) GoString() string {
	return s.String()
}

func (s *CreateServicegroupcollectionResponse) SetReqMsgId(v string) *CreateServicegroupcollectionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateServicegroupcollectionResponse) SetResultCode(v string) *CreateServicegroupcollectionResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateServicegroupcollectionResponse) SetResultMsg(v string) *CreateServicegroupcollectionResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateServicegroupcollectionResponse) SetCollection(v string) *CreateServicegroupcollectionResponse {
	s.Collection = &v
	return s
}

type DeleteServicegroupcollectionRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// arrangement_id
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// process_definition_id
	ProcessDefinitionId *string `json:"process_definition_id,omitempty" xml:"process_definition_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s DeleteServicegroupcollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteServicegroupcollectionRequest) GoString() string {
	return s.String()
}

func (s *DeleteServicegroupcollectionRequest) SetAuthToken(v string) *DeleteServicegroupcollectionRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteServicegroupcollectionRequest) SetArrangementId(v string) *DeleteServicegroupcollectionRequest {
	s.ArrangementId = &v
	return s
}

func (s *DeleteServicegroupcollectionRequest) SetProcessDefinitionId(v string) *DeleteServicegroupcollectionRequest {
	s.ProcessDefinitionId = &v
	return s
}

func (s *DeleteServicegroupcollectionRequest) SetWorkspace(v string) *DeleteServicegroupcollectionRequest {
	s.Workspace = &v
	return s
}

type DeleteServicegroupcollectionResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 集合
	Collections []*string `json:"collections,omitempty" xml:"collections,omitempty" type:"Repeated"`
}

func (s DeleteServicegroupcollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteServicegroupcollectionResponse) GoString() string {
	return s.String()
}

func (s *DeleteServicegroupcollectionResponse) SetReqMsgId(v string) *DeleteServicegroupcollectionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteServicegroupcollectionResponse) SetResultCode(v string) *DeleteServicegroupcollectionResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteServicegroupcollectionResponse) SetResultMsg(v string) *DeleteServicegroupcollectionResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteServicegroupcollectionResponse) SetCollections(v []*string) *DeleteServicegroupcollectionResponse {
	s.Collections = v
	return s
}

type RetryServicegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RetryServicegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryServicegroupRequest) GoString() string {
	return s.String()
}

func (s *RetryServicegroupRequest) SetAuthToken(v string) *RetryServicegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryServicegroupRequest) SetId(v string) *RetryServicegroupRequest {
	s.Id = &v
	return s
}

func (s *RetryServicegroupRequest) SetWorkspace(v string) *RetryServicegroupRequest {
	s.Workspace = &v
	return s
}

type RetryServicegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// group
	Group *string `json:"group,omitempty" xml:"group,omitempty"`
}

func (s RetryServicegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryServicegroupResponse) GoString() string {
	return s.String()
}

func (s *RetryServicegroupResponse) SetReqMsgId(v string) *RetryServicegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryServicegroupResponse) SetResultCode(v string) *RetryServicegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryServicegroupResponse) SetResultMsg(v string) *RetryServicegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *RetryServicegroupResponse) SetGroup(v string) *RetryServicegroupResponse {
	s.Group = &v
	return s
}

type ExecServicegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ExecServicegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecServicegroupRequest) GoString() string {
	return s.String()
}

func (s *ExecServicegroupRequest) SetAuthToken(v string) *ExecServicegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecServicegroupRequest) SetId(v string) *ExecServicegroupRequest {
	s.Id = &v
	return s
}

func (s *ExecServicegroupRequest) SetWorkspace(v string) *ExecServicegroupRequest {
	s.Workspace = &v
	return s
}

type ExecServicegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分组
	Group *string `json:"group,omitempty" xml:"group,omitempty"`
}

func (s ExecServicegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecServicegroupResponse) GoString() string {
	return s.String()
}

func (s *ExecServicegroupResponse) SetReqMsgId(v string) *ExecServicegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecServicegroupResponse) SetResultCode(v string) *ExecServicegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecServicegroupResponse) SetResultMsg(v string) *ExecServicegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecServicegroupResponse) SetGroup(v string) *ExecServicegroupResponse {
	s.Group = &v
	return s
}

type SkipServicegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s SkipServicegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s SkipServicegroupRequest) GoString() string {
	return s.String()
}

func (s *SkipServicegroupRequest) SetAuthToken(v string) *SkipServicegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *SkipServicegroupRequest) SetId(v string) *SkipServicegroupRequest {
	s.Id = &v
	return s
}

func (s *SkipServicegroupRequest) SetWorkspace(v string) *SkipServicegroupRequest {
	s.Workspace = &v
	return s
}

type SkipServicegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分组
	Group *string `json:"group,omitempty" xml:"group,omitempty"`
}

func (s SkipServicegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s SkipServicegroupResponse) GoString() string {
	return s.String()
}

func (s *SkipServicegroupResponse) SetReqMsgId(v string) *SkipServicegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SkipServicegroupResponse) SetResultCode(v string) *SkipServicegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *SkipServicegroupResponse) SetResultMsg(v string) *SkipServicegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *SkipServicegroupResponse) SetGroup(v string) *SkipServicegroupResponse {
	s.Group = &v
	return s
}

type CreateServicegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// append
	Append *bool `json:"append,omitempty" xml:"append,omitempty"`
	// service_group_id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CreateServicegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateServicegroupRequest) GoString() string {
	return s.String()
}

func (s *CreateServicegroupRequest) SetAuthToken(v string) *CreateServicegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateServicegroupRequest) SetAppend(v bool) *CreateServicegroupRequest {
	s.Append = &v
	return s
}

func (s *CreateServicegroupRequest) SetId(v string) *CreateServicegroupRequest {
	s.Id = &v
	return s
}

func (s *CreateServicegroupRequest) SetWorkspace(v string) *CreateServicegroupRequest {
	s.Workspace = &v
	return s
}

type CreateServicegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分组
	Group *string `json:"group,omitempty" xml:"group,omitempty"`
}

func (s CreateServicegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateServicegroupResponse) GoString() string {
	return s.String()
}

func (s *CreateServicegroupResponse) SetReqMsgId(v string) *CreateServicegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateServicegroupResponse) SetResultCode(v string) *CreateServicegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateServicegroupResponse) SetResultMsg(v string) *CreateServicegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateServicegroupResponse) SetGroup(v string) *CreateServicegroupResponse {
	s.Group = &v
	return s
}

type DeleteServicegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s DeleteServicegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteServicegroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteServicegroupRequest) SetAuthToken(v string) *DeleteServicegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteServicegroupRequest) SetId(v string) *DeleteServicegroupRequest {
	s.Id = &v
	return s
}

func (s *DeleteServicegroupRequest) SetWorkspace(v string) *DeleteServicegroupRequest {
	s.Workspace = &v
	return s
}

type DeleteServicegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分组
	Group *string `json:"group,omitempty" xml:"group,omitempty"`
}

func (s DeleteServicegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteServicegroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteServicegroupResponse) SetReqMsgId(v string) *DeleteServicegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteServicegroupResponse) SetResultCode(v string) *DeleteServicegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteServicegroupResponse) SetResultMsg(v string) *DeleteServicegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteServicegroupResponse) SetGroup(v string) *DeleteServicegroupResponse {
	s.Group = &v
	return s
}

type SwitchServicegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// service_group_id
	ServiceGroupId *string `json:"service_group_id,omitempty" xml:"service_group_id,omitempty"`
	// service_id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s SwitchServicegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchServicegroupRequest) GoString() string {
	return s.String()
}

func (s *SwitchServicegroupRequest) SetAuthToken(v string) *SwitchServicegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *SwitchServicegroupRequest) SetServiceGroupId(v string) *SwitchServicegroupRequest {
	s.ServiceGroupId = &v
	return s
}

func (s *SwitchServicegroupRequest) SetServiceId(v string) *SwitchServicegroupRequest {
	s.ServiceId = &v
	return s
}

func (s *SwitchServicegroupRequest) SetWorkspace(v string) *SwitchServicegroupRequest {
	s.Workspace = &v
	return s
}

type SwitchServicegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// groups
	Groups []*string `json:"groups,omitempty" xml:"groups,omitempty" type:"Repeated"`
}

func (s SwitchServicegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchServicegroupResponse) GoString() string {
	return s.String()
}

func (s *SwitchServicegroupResponse) SetReqMsgId(v string) *SwitchServicegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SwitchServicegroupResponse) SetResultCode(v string) *SwitchServicegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *SwitchServicegroupResponse) SetResultMsg(v string) *SwitchServicegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *SwitchServicegroupResponse) SetGroups(v []*string) *SwitchServicegroupResponse {
	s.Groups = v
	return s
}

type GetServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 是否带上机器信息
	WithMachineGroups *bool `json:"with_machine_groups,omitempty" xml:"with_machine_groups,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceRequest) GoString() string {
	return s.String()
}

func (s *GetServiceRequest) SetAuthToken(v string) *GetServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetServiceRequest) SetId(v string) *GetServiceRequest {
	s.Id = &v
	return s
}

func (s *GetServiceRequest) SetWithMachineGroups(v bool) *GetServiceRequest {
	s.WithMachineGroups = &v
	return s
}

func (s *GetServiceRequest) SetWorkspace(v string) *GetServiceRequest {
	s.Workspace = &v
	return s
}

type GetServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// service
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s GetServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceResponse) GoString() string {
	return s.String()
}

func (s *GetServiceResponse) SetReqMsgId(v string) *GetServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetServiceResponse) SetResultCode(v string) *GetServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetServiceResponse) SetResultMsg(v string) *GetServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetServiceResponse) SetService(v string) *GetServiceResponse {
	s.Service = &v
	return s
}

type GetServiceProgressRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetServiceProgressRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceProgressRequest) GoString() string {
	return s.String()
}

func (s *GetServiceProgressRequest) SetAuthToken(v string) *GetServiceProgressRequest {
	s.AuthToken = &v
	return s
}

func (s *GetServiceProgressRequest) SetId(v string) *GetServiceProgressRequest {
	s.Id = &v
	return s
}

func (s *GetServiceProgressRequest) SetWorkspace(v string) *GetServiceProgressRequest {
	s.Workspace = &v
	return s
}

type GetServiceProgressResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 进度
	Progress *string `json:"progress,omitempty" xml:"progress,omitempty"`
}

func (s GetServiceProgressResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceProgressResponse) GoString() string {
	return s.String()
}

func (s *GetServiceProgressResponse) SetReqMsgId(v string) *GetServiceProgressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetServiceProgressResponse) SetResultCode(v string) *GetServiceProgressResponse {
	s.ResultCode = &v
	return s
}

func (s *GetServiceProgressResponse) SetResultMsg(v string) *GetServiceProgressResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetServiceProgressResponse) SetProgress(v string) *GetServiceProgressResponse {
	s.Progress = &v
	return s
}

type QueryServiceProgressRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// depth
	Depth *int64 `json:"depth,omitempty" xml:"depth,omitempty"`
	// gmt_create_end
	GmtCreateEnd *string `json:"gmt_create_end,omitempty" xml:"gmt_create_end,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// gmt_create_start
	GmtCreateStart *string `json:"gmt_create_start,omitempty" xml:"gmt_create_start,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// ops_types
	OpsTypes []*string `json:"ops_types,omitempty" xml:"ops_types,omitempty" type:"Repeated"`
	// page_no
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// process_definition_id
	ProcessDefinitionId *string `json:"process_definition_id,omitempty" xml:"process_definition_id,omitempty"`
	// service_group_collection_id
	ServiceGroupCollectionId *string `json:"service_group_collection_id,omitempty" xml:"service_group_collection_id,omitempty"`
	// service_paas_id
	ServicePaasId *string `json:"service_paas_id,omitempty" xml:"service_paas_id,omitempty"`
	// state
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryServiceProgressRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceProgressRequest) GoString() string {
	return s.String()
}

func (s *QueryServiceProgressRequest) SetAuthToken(v string) *QueryServiceProgressRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryServiceProgressRequest) SetDepth(v int64) *QueryServiceProgressRequest {
	s.Depth = &v
	return s
}

func (s *QueryServiceProgressRequest) SetGmtCreateEnd(v string) *QueryServiceProgressRequest {
	s.GmtCreateEnd = &v
	return s
}

func (s *QueryServiceProgressRequest) SetGmtCreateStart(v string) *QueryServiceProgressRequest {
	s.GmtCreateStart = &v
	return s
}

func (s *QueryServiceProgressRequest) SetIds(v []*string) *QueryServiceProgressRequest {
	s.Ids = v
	return s
}

func (s *QueryServiceProgressRequest) SetName(v string) *QueryServiceProgressRequest {
	s.Name = &v
	return s
}

func (s *QueryServiceProgressRequest) SetOpsTypes(v []*string) *QueryServiceProgressRequest {
	s.OpsTypes = v
	return s
}

func (s *QueryServiceProgressRequest) SetPageNo(v int64) *QueryServiceProgressRequest {
	s.PageNo = &v
	return s
}

func (s *QueryServiceProgressRequest) SetPageSize(v int64) *QueryServiceProgressRequest {
	s.PageSize = &v
	return s
}

func (s *QueryServiceProgressRequest) SetProcessDefinitionId(v string) *QueryServiceProgressRequest {
	s.ProcessDefinitionId = &v
	return s
}

func (s *QueryServiceProgressRequest) SetServiceGroupCollectionId(v string) *QueryServiceProgressRequest {
	s.ServiceGroupCollectionId = &v
	return s
}

func (s *QueryServiceProgressRequest) SetServicePaasId(v string) *QueryServiceProgressRequest {
	s.ServicePaasId = &v
	return s
}

func (s *QueryServiceProgressRequest) SetState(v string) *QueryServiceProgressRequest {
	s.State = &v
	return s
}

func (s *QueryServiceProgressRequest) SetWorkspace(v string) *QueryServiceProgressRequest {
	s.Workspace = &v
	return s
}

type QueryServiceProgressResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// progresses
	Progresses []*string `json:"progresses,omitempty" xml:"progresses,omitempty" type:"Repeated"`
}

func (s QueryServiceProgressResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceProgressResponse) GoString() string {
	return s.String()
}

func (s *QueryServiceProgressResponse) SetReqMsgId(v string) *QueryServiceProgressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryServiceProgressResponse) SetResultCode(v string) *QueryServiceProgressResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryServiceProgressResponse) SetResultMsg(v string) *QueryServiceProgressResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryServiceProgressResponse) SetProgresses(v []*string) *QueryServiceProgressResponse {
	s.Progresses = v
	return s
}

type QueryServiceSlbmountRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// service_id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// slb_id
	SlbId *string `json:"slb_id,omitempty" xml:"slb_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryServiceSlbmountRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceSlbmountRequest) GoString() string {
	return s.String()
}

func (s *QueryServiceSlbmountRequest) SetAuthToken(v string) *QueryServiceSlbmountRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryServiceSlbmountRequest) SetServiceId(v string) *QueryServiceSlbmountRequest {
	s.ServiceId = &v
	return s
}

func (s *QueryServiceSlbmountRequest) SetSlbId(v string) *QueryServiceSlbmountRequest {
	s.SlbId = &v
	return s
}

func (s *QueryServiceSlbmountRequest) SetWorkspace(v string) *QueryServiceSlbmountRequest {
	s.Workspace = &v
	return s
}

type QueryServiceSlbmountResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// mout_info_list
	MountInfoList []*string `json:"mount_info_list,omitempty" xml:"mount_info_list,omitempty" type:"Repeated"`
}

func (s QueryServiceSlbmountResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceSlbmountResponse) GoString() string {
	return s.String()
}

func (s *QueryServiceSlbmountResponse) SetReqMsgId(v string) *QueryServiceSlbmountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryServiceSlbmountResponse) SetResultCode(v string) *QueryServiceSlbmountResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryServiceSlbmountResponse) SetResultMsg(v string) *QueryServiceSlbmountResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryServiceSlbmountResponse) SetMountInfoList(v []*string) *QueryServiceSlbmountResponse {
	s.MountInfoList = v
	return s
}

type BatchqueryServiceSlbmountRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// service_id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// slb_ids
	SlbIds []*string `json:"slb_ids,omitempty" xml:"slb_ids,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s BatchqueryServiceSlbmountRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryServiceSlbmountRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryServiceSlbmountRequest) SetAuthToken(v string) *BatchqueryServiceSlbmountRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryServiceSlbmountRequest) SetServiceId(v string) *BatchqueryServiceSlbmountRequest {
	s.ServiceId = &v
	return s
}

func (s *BatchqueryServiceSlbmountRequest) SetSlbIds(v []*string) *BatchqueryServiceSlbmountRequest {
	s.SlbIds = v
	return s
}

func (s *BatchqueryServiceSlbmountRequest) SetWorkspace(v string) *BatchqueryServiceSlbmountRequest {
	s.Workspace = &v
	return s
}

type BatchqueryServiceSlbmountResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// slb_info_list
	MountInfoList []*string `json:"mount_info_list,omitempty" xml:"mount_info_list,omitempty" type:"Repeated"`
}

func (s BatchqueryServiceSlbmountResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryServiceSlbmountResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryServiceSlbmountResponse) SetReqMsgId(v string) *BatchqueryServiceSlbmountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryServiceSlbmountResponse) SetResultCode(v string) *BatchqueryServiceSlbmountResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryServiceSlbmountResponse) SetResultMsg(v string) *BatchqueryServiceSlbmountResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryServiceSlbmountResponse) SetMountInfoList(v []*string) *BatchqueryServiceSlbmountResponse {
	s.MountInfoList = v
	return s
}

type UpdateServiceSlbmountRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 权重
	MountInfo []*Pair `json:"mount_info,omitempty" xml:"mount_info,omitempty" type:"Repeated"`
	// region_identity
	RegionIdentity *string `json:"region_identity,omitempty" xml:"region_identity,omitempty"`
	// service_id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// slb_id
	SlbId *string `json:"slb_id,omitempty" xml:"slb_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s UpdateServiceSlbmountRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateServiceSlbmountRequest) GoString() string {
	return s.String()
}

func (s *UpdateServiceSlbmountRequest) SetAuthToken(v string) *UpdateServiceSlbmountRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateServiceSlbmountRequest) SetMountInfo(v []*Pair) *UpdateServiceSlbmountRequest {
	s.MountInfo = v
	return s
}

func (s *UpdateServiceSlbmountRequest) SetRegionIdentity(v string) *UpdateServiceSlbmountRequest {
	s.RegionIdentity = &v
	return s
}

func (s *UpdateServiceSlbmountRequest) SetServiceId(v string) *UpdateServiceSlbmountRequest {
	s.ServiceId = &v
	return s
}

func (s *UpdateServiceSlbmountRequest) SetSlbId(v string) *UpdateServiceSlbmountRequest {
	s.SlbId = &v
	return s
}

func (s *UpdateServiceSlbmountRequest) SetWorkspace(v string) *UpdateServiceSlbmountRequest {
	s.Workspace = &v
	return s
}

type UpdateServiceSlbmountResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// process_id
	ProcessId *string `json:"process_id,omitempty" xml:"process_id,omitempty"`
}

func (s UpdateServiceSlbmountResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateServiceSlbmountResponse) GoString() string {
	return s.String()
}

func (s *UpdateServiceSlbmountResponse) SetReqMsgId(v string) *UpdateServiceSlbmountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateServiceSlbmountResponse) SetResultCode(v string) *UpdateServiceSlbmountResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateServiceSlbmountResponse) SetResultMsg(v string) *UpdateServiceSlbmountResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateServiceSlbmountResponse) SetProcessId(v string) *UpdateServiceSlbmountResponse {
	s.ProcessId = &v
	return s
}

type QueryServiceSlbmountprogressRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// process_id
	ProcessId *string `json:"process_id,omitempty" xml:"process_id,omitempty"`
	// region_identity
	RegionIdentity *string `json:"region_identity,omitempty" xml:"region_identity,omitempty"`
	// service_id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryServiceSlbmountprogressRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceSlbmountprogressRequest) GoString() string {
	return s.String()
}

func (s *QueryServiceSlbmountprogressRequest) SetAuthToken(v string) *QueryServiceSlbmountprogressRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryServiceSlbmountprogressRequest) SetProcessId(v string) *QueryServiceSlbmountprogressRequest {
	s.ProcessId = &v
	return s
}

func (s *QueryServiceSlbmountprogressRequest) SetRegionIdentity(v string) *QueryServiceSlbmountprogressRequest {
	s.RegionIdentity = &v
	return s
}

func (s *QueryServiceSlbmountprogressRequest) SetServiceId(v string) *QueryServiceSlbmountprogressRequest {
	s.ServiceId = &v
	return s
}

func (s *QueryServiceSlbmountprogressRequest) SetWorkspace(v string) *QueryServiceSlbmountprogressRequest {
	s.Workspace = &v
	return s
}

type QueryServiceSlbmountprogressResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 执行进度
	Progress *string `json:"progress,omitempty" xml:"progress,omitempty"`
}

func (s QueryServiceSlbmountprogressResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceSlbmountprogressResponse) GoString() string {
	return s.String()
}

func (s *QueryServiceSlbmountprogressResponse) SetReqMsgId(v string) *QueryServiceSlbmountprogressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryServiceSlbmountprogressResponse) SetResultCode(v string) *QueryServiceSlbmountprogressResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryServiceSlbmountprogressResponse) SetResultMsg(v string) *QueryServiceSlbmountprogressResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryServiceSlbmountprogressResponse) SetProgress(v string) *QueryServiceSlbmountprogressResponse {
	s.Progress = &v
	return s
}

type QueryServiceLatestsuccessRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// service_paas_id
	ServicePaasId *string `json:"service_paas_id,omitempty" xml:"service_paas_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryServiceLatestsuccessRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceLatestsuccessRequest) GoString() string {
	return s.String()
}

func (s *QueryServiceLatestsuccessRequest) SetAuthToken(v string) *QueryServiceLatestsuccessRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryServiceLatestsuccessRequest) SetServicePaasId(v string) *QueryServiceLatestsuccessRequest {
	s.ServicePaasId = &v
	return s
}

func (s *QueryServiceLatestsuccessRequest) SetWorkspace(v string) *QueryServiceLatestsuccessRequest {
	s.Workspace = &v
	return s
}

type QueryServiceLatestsuccessResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// service
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s QueryServiceLatestsuccessResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceLatestsuccessResponse) GoString() string {
	return s.String()
}

func (s *QueryServiceLatestsuccessResponse) SetReqMsgId(v string) *QueryServiceLatestsuccessResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryServiceLatestsuccessResponse) SetResultCode(v string) *QueryServiceLatestsuccessResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryServiceLatestsuccessResponse) SetResultMsg(v string) *QueryServiceLatestsuccessResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryServiceLatestsuccessResponse) SetService(v string) *QueryServiceLatestsuccessResponse {
	s.Service = &v
	return s
}

type ReinitServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ReinitServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitServiceRequest) GoString() string {
	return s.String()
}

func (s *ReinitServiceRequest) SetAuthToken(v string) *ReinitServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *ReinitServiceRequest) SetId(v string) *ReinitServiceRequest {
	s.Id = &v
	return s
}

func (s *ReinitServiceRequest) SetWorkspace(v string) *ReinitServiceRequest {
	s.Workspace = &v
	return s
}

type ReinitServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// service
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s ReinitServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitServiceResponse) GoString() string {
	return s.String()
}

func (s *ReinitServiceResponse) SetReqMsgId(v string) *ReinitServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReinitServiceResponse) SetResultCode(v string) *ReinitServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *ReinitServiceResponse) SetResultMsg(v string) *ReinitServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ReinitServiceResponse) SetService(v string) *ReinitServiceResponse {
	s.Service = &v
	return s
}

type ExecServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ExecServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecServiceRequest) GoString() string {
	return s.String()
}

func (s *ExecServiceRequest) SetAuthToken(v string) *ExecServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecServiceRequest) SetId(v string) *ExecServiceRequest {
	s.Id = &v
	return s
}

func (s *ExecServiceRequest) SetWorkspace(v string) *ExecServiceRequest {
	s.Workspace = &v
	return s
}

type ExecServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// service
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s ExecServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecServiceResponse) GoString() string {
	return s.String()
}

func (s *ExecServiceResponse) SetReqMsgId(v string) *ExecServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecServiceResponse) SetResultCode(v string) *ExecServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecServiceResponse) SetResultMsg(v string) *ExecServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecServiceResponse) SetService(v string) *ExecServiceResponse {
	s.Service = &v
	return s
}

type CancelServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// reason
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CancelServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelServiceRequest) GoString() string {
	return s.String()
}

func (s *CancelServiceRequest) SetAuthToken(v string) *CancelServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelServiceRequest) SetId(v string) *CancelServiceRequest {
	s.Id = &v
	return s
}

func (s *CancelServiceRequest) SetReason(v string) *CancelServiceRequest {
	s.Reason = &v
	return s
}

func (s *CancelServiceRequest) SetWorkspace(v string) *CancelServiceRequest {
	s.Workspace = &v
	return s
}

type CancelServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// service
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s CancelServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelServiceResponse) GoString() string {
	return s.String()
}

func (s *CancelServiceResponse) SetReqMsgId(v string) *CancelServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelServiceResponse) SetResultCode(v string) *CancelServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelServiceResponse) SetResultMsg(v string) *CancelServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelServiceResponse) SetService(v string) *CancelServiceResponse {
	s.Service = &v
	return s
}

type SkipServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s SkipServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s SkipServiceRequest) GoString() string {
	return s.String()
}

func (s *SkipServiceRequest) SetAuthToken(v string) *SkipServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *SkipServiceRequest) SetId(v string) *SkipServiceRequest {
	s.Id = &v
	return s
}

func (s *SkipServiceRequest) SetWorkspace(v string) *SkipServiceRequest {
	s.Workspace = &v
	return s
}

type SkipServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// service
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s SkipServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s SkipServiceResponse) GoString() string {
	return s.String()
}

func (s *SkipServiceResponse) SetReqMsgId(v string) *SkipServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SkipServiceResponse) SetResultCode(v string) *SkipServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *SkipServiceResponse) SetResultMsg(v string) *SkipServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *SkipServiceResponse) SetService(v string) *SkipServiceResponse {
	s.Service = &v
	return s
}

type StartServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s StartServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartServiceRequest) GoString() string {
	return s.String()
}

func (s *StartServiceRequest) SetAuthToken(v string) *StartServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *StartServiceRequest) SetId(v string) *StartServiceRequest {
	s.Id = &v
	return s
}

func (s *StartServiceRequest) SetWorkspace(v string) *StartServiceRequest {
	s.Workspace = &v
	return s
}

type StartServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// service
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s StartServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartServiceResponse) GoString() string {
	return s.String()
}

func (s *StartServiceResponse) SetReqMsgId(v string) *StartServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartServiceResponse) SetResultCode(v string) *StartServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *StartServiceResponse) SetResultMsg(v string) *StartServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartServiceResponse) SetService(v string) *StartServiceResponse {
	s.Service = &v
	return s
}

type ConfirmServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ConfirmServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmServiceRequest) GoString() string {
	return s.String()
}

func (s *ConfirmServiceRequest) SetAuthToken(v string) *ConfirmServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmServiceRequest) SetId(v string) *ConfirmServiceRequest {
	s.Id = &v
	return s
}

func (s *ConfirmServiceRequest) SetWorkspace(v string) *ConfirmServiceRequest {
	s.Workspace = &v
	return s
}

type ConfirmServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// service
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s ConfirmServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmServiceResponse) GoString() string {
	return s.String()
}

func (s *ConfirmServiceResponse) SetReqMsgId(v string) *ConfirmServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmServiceResponse) SetResultCode(v string) *ConfirmServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmServiceResponse) SetResultMsg(v string) *ConfirmServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmServiceResponse) SetService(v string) *ConfirmServiceResponse {
	s.Service = &v
	return s
}

type SetServiceMachinegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 分组数
	GroupMount *int64 `json:"group_mount,omitempty" xml:"group_mount,omitempty"`
	// groupStrategyType
	GroupStrategyType *string `json:"group_strategy_type,omitempty" xml:"group_strategy_type,omitempty"`
	// machine_groups
	MachineGroups []*string `json:"machine_groups,omitempty" xml:"machine_groups,omitempty" type:"Repeated"`
	// need_beta
	NeedBeta *bool `json:"need_beta,omitempty" xml:"need_beta,omitempty"`
	// service_id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// use_default_setup
	UseDefaultSetup *bool `json:"use_default_setup,omitempty" xml:"use_default_setup,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s SetServiceMachinegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s SetServiceMachinegroupRequest) GoString() string {
	return s.String()
}

func (s *SetServiceMachinegroupRequest) SetAuthToken(v string) *SetServiceMachinegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *SetServiceMachinegroupRequest) SetGroupMount(v int64) *SetServiceMachinegroupRequest {
	s.GroupMount = &v
	return s
}

func (s *SetServiceMachinegroupRequest) SetGroupStrategyType(v string) *SetServiceMachinegroupRequest {
	s.GroupStrategyType = &v
	return s
}

func (s *SetServiceMachinegroupRequest) SetMachineGroups(v []*string) *SetServiceMachinegroupRequest {
	s.MachineGroups = v
	return s
}

func (s *SetServiceMachinegroupRequest) SetNeedBeta(v bool) *SetServiceMachinegroupRequest {
	s.NeedBeta = &v
	return s
}

func (s *SetServiceMachinegroupRequest) SetServiceId(v string) *SetServiceMachinegroupRequest {
	s.ServiceId = &v
	return s
}

func (s *SetServiceMachinegroupRequest) SetUseDefaultSetup(v bool) *SetServiceMachinegroupRequest {
	s.UseDefaultSetup = &v
	return s
}

func (s *SetServiceMachinegroupRequest) SetWorkspace(v string) *SetServiceMachinegroupRequest {
	s.Workspace = &v
	return s
}

type SetServiceMachinegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// service
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s SetServiceMachinegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s SetServiceMachinegroupResponse) GoString() string {
	return s.String()
}

func (s *SetServiceMachinegroupResponse) SetReqMsgId(v string) *SetServiceMachinegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetServiceMachinegroupResponse) SetResultCode(v string) *SetServiceMachinegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *SetServiceMachinegroupResponse) SetResultMsg(v string) *SetServiceMachinegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *SetServiceMachinegroupResponse) SetService(v string) *SetServiceMachinegroupResponse {
	s.Service = &v
	return s
}

type ReinitServiceMachinegroupRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ReinitServiceMachinegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitServiceMachinegroupRequest) GoString() string {
	return s.String()
}

func (s *ReinitServiceMachinegroupRequest) SetAuthToken(v string) *ReinitServiceMachinegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *ReinitServiceMachinegroupRequest) SetId(v string) *ReinitServiceMachinegroupRequest {
	s.Id = &v
	return s
}

func (s *ReinitServiceMachinegroupRequest) SetWorkspace(v string) *ReinitServiceMachinegroupRequest {
	s.Workspace = &v
	return s
}

type ReinitServiceMachinegroupResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// service
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s ReinitServiceMachinegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitServiceMachinegroupResponse) GoString() string {
	return s.String()
}

func (s *ReinitServiceMachinegroupResponse) SetReqMsgId(v string) *ReinitServiceMachinegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReinitServiceMachinegroupResponse) SetResultCode(v string) *ReinitServiceMachinegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *ReinitServiceMachinegroupResponse) SetResultMsg(v string) *ReinitServiceMachinegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *ReinitServiceMachinegroupResponse) SetService(v string) *ReinitServiceMachinegroupResponse {
	s.Service = &v
	return s
}

type ListServiceRollbackversionRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// limit
	Limit *int64 `json:"limit,omitempty" xml:"limit,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ListServiceRollbackversionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListServiceRollbackversionRequest) GoString() string {
	return s.String()
}

func (s *ListServiceRollbackversionRequest) SetAuthToken(v string) *ListServiceRollbackversionRequest {
	s.AuthToken = &v
	return s
}

func (s *ListServiceRollbackversionRequest) SetId(v string) *ListServiceRollbackversionRequest {
	s.Id = &v
	return s
}

func (s *ListServiceRollbackversionRequest) SetLimit(v int64) *ListServiceRollbackversionRequest {
	s.Limit = &v
	return s
}

func (s *ListServiceRollbackversionRequest) SetWorkspace(v string) *ListServiceRollbackversionRequest {
	s.Workspace = &v
	return s
}

type ListServiceRollbackversionResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// services
	Services []*string `json:"services,omitempty" xml:"services,omitempty" type:"Repeated"`
}

func (s ListServiceRollbackversionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListServiceRollbackversionResponse) GoString() string {
	return s.String()
}

func (s *ListServiceRollbackversionResponse) SetReqMsgId(v string) *ListServiceRollbackversionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListServiceRollbackversionResponse) SetResultCode(v string) *ListServiceRollbackversionResponse {
	s.ResultCode = &v
	return s
}

func (s *ListServiceRollbackversionResponse) SetResultMsg(v string) *ListServiceRollbackversionResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListServiceRollbackversionResponse) SetServices(v []*string) *ListServiceRollbackversionResponse {
	s.Services = v
	return s
}

type QueryServiceRollbackversionRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// depth
	Depth *int64 `json:"depth,omitempty" xml:"depth,omitempty"`
	// gmt_create_end
	GmtCreateEnd *string `json:"gmt_create_end,omitempty" xml:"gmt_create_end,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// gmt_create_start
	GmtCreateStart *string `json:"gmt_create_start,omitempty" xml:"gmt_create_start,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// ops_types
	OpsTypes []*string `json:"ops_types,omitempty" xml:"ops_types,omitempty" type:"Repeated"`
	// page_no
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// process_definition_id
	ProcessDefinitionId *string `json:"process_definition_id,omitempty" xml:"process_definition_id,omitempty"`
	// service_group_collection_id
	ServiceGroupCollectionId *string `json:"service_group_collection_id,omitempty" xml:"service_group_collection_id,omitempty"`
	// service_paas_id
	ServicePaasId *string `json:"service_paas_id,omitempty" xml:"service_paas_id,omitempty"`
	// state
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryServiceRollbackversionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceRollbackversionRequest) GoString() string {
	return s.String()
}

func (s *QueryServiceRollbackversionRequest) SetAuthToken(v string) *QueryServiceRollbackversionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryServiceRollbackversionRequest) SetDepth(v int64) *QueryServiceRollbackversionRequest {
	s.Depth = &v
	return s
}

func (s *QueryServiceRollbackversionRequest) SetGmtCreateEnd(v string) *QueryServiceRollbackversionRequest {
	s.GmtCreateEnd = &v
	return s
}

func (s *QueryServiceRollbackversionRequest) SetGmtCreateStart(v string) *QueryServiceRollbackversionRequest {
	s.GmtCreateStart = &v
	return s
}

func (s *QueryServiceRollbackversionRequest) SetIds(v []*string) *QueryServiceRollbackversionRequest {
	s.Ids = v
	return s
}

func (s *QueryServiceRollbackversionRequest) SetName(v string) *QueryServiceRollbackversionRequest {
	s.Name = &v
	return s
}

func (s *QueryServiceRollbackversionRequest) SetOpsTypes(v []*string) *QueryServiceRollbackversionRequest {
	s.OpsTypes = v
	return s
}

func (s *QueryServiceRollbackversionRequest) SetPageNo(v int64) *QueryServiceRollbackversionRequest {
	s.PageNo = &v
	return s
}

func (s *QueryServiceRollbackversionRequest) SetPageSize(v int64) *QueryServiceRollbackversionRequest {
	s.PageSize = &v
	return s
}

func (s *QueryServiceRollbackversionRequest) SetProcessDefinitionId(v string) *QueryServiceRollbackversionRequest {
	s.ProcessDefinitionId = &v
	return s
}

func (s *QueryServiceRollbackversionRequest) SetServiceGroupCollectionId(v string) *QueryServiceRollbackversionRequest {
	s.ServiceGroupCollectionId = &v
	return s
}

func (s *QueryServiceRollbackversionRequest) SetServicePaasId(v string) *QueryServiceRollbackversionRequest {
	s.ServicePaasId = &v
	return s
}

func (s *QueryServiceRollbackversionRequest) SetState(v string) *QueryServiceRollbackversionRequest {
	s.State = &v
	return s
}

func (s *QueryServiceRollbackversionRequest) SetWorkspace(v string) *QueryServiceRollbackversionRequest {
	s.Workspace = &v
	return s
}

type QueryServiceRollbackversionResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 版本
	Versions []*Pair `json:"versions,omitempty" xml:"versions,omitempty" type:"Repeated"`
}

func (s QueryServiceRollbackversionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceRollbackversionResponse) GoString() string {
	return s.String()
}

func (s *QueryServiceRollbackversionResponse) SetReqMsgId(v string) *QueryServiceRollbackversionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryServiceRollbackversionResponse) SetResultCode(v string) *QueryServiceRollbackversionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryServiceRollbackversionResponse) SetResultMsg(v string) *QueryServiceRollbackversionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryServiceRollbackversionResponse) SetVersions(v []*Pair) *QueryServiceRollbackversionResponse {
	s.Versions = v
	return s
}

type RollbackServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// rollback_info
	RollbackInfo *RollbackInfo `json:"rollback_info,omitempty" xml:"rollback_info,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RollbackServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackServiceRequest) GoString() string {
	return s.String()
}

func (s *RollbackServiceRequest) SetAuthToken(v string) *RollbackServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *RollbackServiceRequest) SetId(v string) *RollbackServiceRequest {
	s.Id = &v
	return s
}

func (s *RollbackServiceRequest) SetRollbackInfo(v *RollbackInfo) *RollbackServiceRequest {
	s.RollbackInfo = v
	return s
}

func (s *RollbackServiceRequest) SetWorkspace(v string) *RollbackServiceRequest {
	s.Workspace = &v
	return s
}

type RollbackServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 回滚信息
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s RollbackServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackServiceResponse) GoString() string {
	return s.String()
}

func (s *RollbackServiceResponse) SetReqMsgId(v string) *RollbackServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RollbackServiceResponse) SetResultCode(v string) *RollbackServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *RollbackServiceResponse) SetResultMsg(v string) *RollbackServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *RollbackServiceResponse) SetService(v string) *RollbackServiceResponse {
	s.Service = &v
	return s
}

type ConfirmrollbackServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// retry_rollbacked
	RetryRollbacked *bool `json:"retry_rollbacked,omitempty" xml:"retry_rollbacked,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s ConfirmrollbackServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmrollbackServiceRequest) GoString() string {
	return s.String()
}

func (s *ConfirmrollbackServiceRequest) SetAuthToken(v string) *ConfirmrollbackServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmrollbackServiceRequest) SetId(v string) *ConfirmrollbackServiceRequest {
	s.Id = &v
	return s
}

func (s *ConfirmrollbackServiceRequest) SetRetryRollbacked(v bool) *ConfirmrollbackServiceRequest {
	s.RetryRollbacked = &v
	return s
}

func (s *ConfirmrollbackServiceRequest) SetWorkspace(v string) *ConfirmrollbackServiceRequest {
	s.Workspace = &v
	return s
}

type ConfirmrollbackServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// service
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s ConfirmrollbackServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmrollbackServiceResponse) GoString() string {
	return s.String()
}

func (s *ConfirmrollbackServiceResponse) SetReqMsgId(v string) *ConfirmrollbackServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmrollbackServiceResponse) SetResultCode(v string) *ConfirmrollbackServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmrollbackServiceResponse) SetResultMsg(v string) *ConfirmrollbackServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmrollbackServiceResponse) SetService(v string) *ConfirmrollbackServiceResponse {
	s.Service = &v
	return s
}

type RetryrollbackServiceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// rollback_info
	RollbackInfo *RollbackInfo `json:"rollback_info,omitempty" xml:"rollback_info,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RetryrollbackServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryrollbackServiceRequest) GoString() string {
	return s.String()
}

func (s *RetryrollbackServiceRequest) SetAuthToken(v string) *RetryrollbackServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryrollbackServiceRequest) SetId(v string) *RetryrollbackServiceRequest {
	s.Id = &v
	return s
}

func (s *RetryrollbackServiceRequest) SetRollbackInfo(v *RollbackInfo) *RetryrollbackServiceRequest {
	s.RollbackInfo = v
	return s
}

func (s *RetryrollbackServiceRequest) SetWorkspace(v string) *RetryrollbackServiceRequest {
	s.Workspace = &v
	return s
}

type RetryrollbackServiceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// service
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s RetryrollbackServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryrollbackServiceResponse) GoString() string {
	return s.String()
}

func (s *RetryrollbackServiceResponse) SetReqMsgId(v string) *RetryrollbackServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryrollbackServiceResponse) SetResultCode(v string) *RetryrollbackServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryrollbackServiceResponse) SetResultMsg(v string) *RetryrollbackServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *RetryrollbackServiceResponse) SetService(v string) *RetryrollbackServiceResponse {
	s.Service = &v
	return s
}

type GetServiceArrangementRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// node_id
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty"`
	// service_id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetServiceArrangementRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceArrangementRequest) GoString() string {
	return s.String()
}

func (s *GetServiceArrangementRequest) SetAuthToken(v string) *GetServiceArrangementRequest {
	s.AuthToken = &v
	return s
}

func (s *GetServiceArrangementRequest) SetNodeId(v string) *GetServiceArrangementRequest {
	s.NodeId = &v
	return s
}

func (s *GetServiceArrangementRequest) SetServiceId(v string) *GetServiceArrangementRequest {
	s.ServiceId = &v
	return s
}

func (s *GetServiceArrangementRequest) SetWorkspace(v string) *GetServiceArrangementRequest {
	s.Workspace = &v
	return s
}

type GetServiceArrangementResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// execution_detail
	ExecutionDetail *string `json:"execution_detail,omitempty" xml:"execution_detail,omitempty"`
}

func (s GetServiceArrangementResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceArrangementResponse) GoString() string {
	return s.String()
}

func (s *GetServiceArrangementResponse) SetReqMsgId(v string) *GetServiceArrangementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetServiceArrangementResponse) SetResultCode(v string) *GetServiceArrangementResponse {
	s.ResultCode = &v
	return s
}

func (s *GetServiceArrangementResponse) SetResultMsg(v string) *GetServiceArrangementResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetServiceArrangementResponse) SetExecutionDetail(v string) *GetServiceArrangementResponse {
	s.ExecutionDetail = &v
	return s
}

type RetryServiceArrangementRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// arrangement_id
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// service_id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s RetryServiceArrangementRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryServiceArrangementRequest) GoString() string {
	return s.String()
}

func (s *RetryServiceArrangementRequest) SetAuthToken(v string) *RetryServiceArrangementRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryServiceArrangementRequest) SetArrangementId(v string) *RetryServiceArrangementRequest {
	s.ArrangementId = &v
	return s
}

func (s *RetryServiceArrangementRequest) SetServiceId(v string) *RetryServiceArrangementRequest {
	s.ServiceId = &v
	return s
}

func (s *RetryServiceArrangementRequest) SetWorkspace(v string) *RetryServiceArrangementRequest {
	s.Workspace = &v
	return s
}

type RetryServiceArrangementResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// service
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s RetryServiceArrangementResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryServiceArrangementResponse) GoString() string {
	return s.String()
}

func (s *RetryServiceArrangementResponse) SetReqMsgId(v string) *RetryServiceArrangementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryServiceArrangementResponse) SetResultCode(v string) *RetryServiceArrangementResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryServiceArrangementResponse) SetResultMsg(v string) *RetryServiceArrangementResponse {
	s.ResultMsg = &v
	return s
}

func (s *RetryServiceArrangementResponse) SetService(v string) *RetryServiceArrangementResponse {
	s.Service = &v
	return s
}

type SkipServiceArrangementRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// arrangement_id
	ArrangementId *string `json:"arrangement_id,omitempty" xml:"arrangement_id,omitempty"`
	// service_id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s SkipServiceArrangementRequest) String() string {
	return tea.Prettify(s)
}

func (s SkipServiceArrangementRequest) GoString() string {
	return s.String()
}

func (s *SkipServiceArrangementRequest) SetAuthToken(v string) *SkipServiceArrangementRequest {
	s.AuthToken = &v
	return s
}

func (s *SkipServiceArrangementRequest) SetArrangementId(v string) *SkipServiceArrangementRequest {
	s.ArrangementId = &v
	return s
}

func (s *SkipServiceArrangementRequest) SetServiceId(v string) *SkipServiceArrangementRequest {
	s.ServiceId = &v
	return s
}

func (s *SkipServiceArrangementRequest) SetWorkspace(v string) *SkipServiceArrangementRequest {
	s.Workspace = &v
	return s
}

type SkipServiceArrangementResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// service
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s SkipServiceArrangementResponse) String() string {
	return tea.Prettify(s)
}

func (s SkipServiceArrangementResponse) GoString() string {
	return s.String()
}

func (s *SkipServiceArrangementResponse) SetReqMsgId(v string) *SkipServiceArrangementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SkipServiceArrangementResponse) SetResultCode(v string) *SkipServiceArrangementResponse {
	s.ResultCode = &v
	return s
}

func (s *SkipServiceArrangementResponse) SetResultMsg(v string) *SkipServiceArrangementResponse {
	s.ResultMsg = &v
	return s
}

func (s *SkipServiceArrangementResponse) SetService(v string) *SkipServiceArrangementResponse {
	s.Service = &v
	return s
}

type QueryOperationlogRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// event
	Event *string `json:"event,omitempty" xml:"event,omitempty"`
	// page_no
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// result
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
	// target_id
	TargetId *string `json:"target_id,omitempty" xml:"target_id,omitempty"`
	// target_type
	TargetType *string `json:"target_type,omitempty" xml:"target_type,omitempty"`
	// user_id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s QueryOperationlogRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOperationlogRequest) GoString() string {
	return s.String()
}

func (s *QueryOperationlogRequest) SetAuthToken(v string) *QueryOperationlogRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOperationlogRequest) SetEvent(v string) *QueryOperationlogRequest {
	s.Event = &v
	return s
}

func (s *QueryOperationlogRequest) SetPageNo(v int64) *QueryOperationlogRequest {
	s.PageNo = &v
	return s
}

func (s *QueryOperationlogRequest) SetPageSize(v int64) *QueryOperationlogRequest {
	s.PageSize = &v
	return s
}

func (s *QueryOperationlogRequest) SetResult(v bool) *QueryOperationlogRequest {
	s.Result = &v
	return s
}

func (s *QueryOperationlogRequest) SetTargetId(v string) *QueryOperationlogRequest {
	s.TargetId = &v
	return s
}

func (s *QueryOperationlogRequest) SetTargetType(v string) *QueryOperationlogRequest {
	s.TargetType = &v
	return s
}

func (s *QueryOperationlogRequest) SetUserId(v string) *QueryOperationlogRequest {
	s.UserId = &v
	return s
}

type QueryOperationlogResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// list
	List []*string `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
	// page_no
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryOperationlogResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOperationlogResponse) GoString() string {
	return s.String()
}

func (s *QueryOperationlogResponse) SetReqMsgId(v string) *QueryOperationlogResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOperationlogResponse) SetResultCode(v string) *QueryOperationlogResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOperationlogResponse) SetResultMsg(v string) *QueryOperationlogResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOperationlogResponse) SetList(v []*string) *QueryOperationlogResponse {
	s.List = v
	return s
}

func (s *QueryOperationlogResponse) SetPageNo(v int64) *QueryOperationlogResponse {
	s.PageNo = &v
	return s
}

func (s *QueryOperationlogResponse) SetPageSize(v int64) *QueryOperationlogResponse {
	s.PageSize = &v
	return s
}

func (s *QueryOperationlogResponse) SetTotalCount(v int64) *QueryOperationlogResponse {
	s.TotalCount = &v
	return s
}

type QueryOperationlogTimelineRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// customer_id
	CustomerId *string `json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	// gmt_from
	GmtFrom *string `json:"gmt_from,omitempty" xml:"gmt_from,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// gmt_to
	GmtTo *string `json:"gmt_to,omitempty" xml:"gmt_to,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}[Z]"`
	// module
	Module *string `json:"module,omitempty" xml:"module,omitempty"`
	// operation_status
	OperationStatus *string `json:"operation_status,omitempty" xml:"operation_status,omitempty"`
	// operation_target
	OperationTarget *string `json:"operation_target,omitempty" xml:"operation_target,omitempty"`
	// operation_type
	OperationType *string `json:"operation_type,omitempty" xml:"operation_type,omitempty"`
	// operator_id
	OperatorId *string `json:"operator_id,omitempty" xml:"operator_id,omitempty"`
	// page_no
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryOperationlogTimelineRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOperationlogTimelineRequest) GoString() string {
	return s.String()
}

func (s *QueryOperationlogTimelineRequest) SetAuthToken(v string) *QueryOperationlogTimelineRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOperationlogTimelineRequest) SetCustomerId(v string) *QueryOperationlogTimelineRequest {
	s.CustomerId = &v
	return s
}

func (s *QueryOperationlogTimelineRequest) SetGmtFrom(v string) *QueryOperationlogTimelineRequest {
	s.GmtFrom = &v
	return s
}

func (s *QueryOperationlogTimelineRequest) SetGmtTo(v string) *QueryOperationlogTimelineRequest {
	s.GmtTo = &v
	return s
}

func (s *QueryOperationlogTimelineRequest) SetModule(v string) *QueryOperationlogTimelineRequest {
	s.Module = &v
	return s
}

func (s *QueryOperationlogTimelineRequest) SetOperationStatus(v string) *QueryOperationlogTimelineRequest {
	s.OperationStatus = &v
	return s
}

func (s *QueryOperationlogTimelineRequest) SetOperationTarget(v string) *QueryOperationlogTimelineRequest {
	s.OperationTarget = &v
	return s
}

func (s *QueryOperationlogTimelineRequest) SetOperationType(v string) *QueryOperationlogTimelineRequest {
	s.OperationType = &v
	return s
}

func (s *QueryOperationlogTimelineRequest) SetOperatorId(v string) *QueryOperationlogTimelineRequest {
	s.OperatorId = &v
	return s
}

func (s *QueryOperationlogTimelineRequest) SetPageNo(v int64) *QueryOperationlogTimelineRequest {
	s.PageNo = &v
	return s
}

func (s *QueryOperationlogTimelineRequest) SetPageSize(v int64) *QueryOperationlogTimelineRequest {
	s.PageSize = &v
	return s
}

func (s *QueryOperationlogTimelineRequest) SetStatus(v string) *QueryOperationlogTimelineRequest {
	s.Status = &v
	return s
}

func (s *QueryOperationlogTimelineRequest) SetWorkspace(v string) *QueryOperationlogTimelineRequest {
	s.Workspace = &v
	return s
}

type QueryOperationlogTimelineResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// list
	List []*string `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
	// page_no
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryOperationlogTimelineResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOperationlogTimelineResponse) GoString() string {
	return s.String()
}

func (s *QueryOperationlogTimelineResponse) SetReqMsgId(v string) *QueryOperationlogTimelineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOperationlogTimelineResponse) SetResultCode(v string) *QueryOperationlogTimelineResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOperationlogTimelineResponse) SetResultMsg(v string) *QueryOperationlogTimelineResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOperationlogTimelineResponse) SetList(v []*string) *QueryOperationlogTimelineResponse {
	s.List = v
	return s
}

func (s *QueryOperationlogTimelineResponse) SetPageNo(v int64) *QueryOperationlogTimelineResponse {
	s.PageNo = &v
	return s
}

func (s *QueryOperationlogTimelineResponse) SetPageSize(v int64) *QueryOperationlogTimelineResponse {
	s.PageSize = &v
	return s
}

func (s *QueryOperationlogTimelineResponse) SetTotalCount(v int64) *QueryOperationlogTimelineResponse {
	s.TotalCount = &v
	return s
}

type GetServiceDetailRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetServiceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceDetailRequest) GoString() string {
	return s.String()
}

func (s *GetServiceDetailRequest) SetAuthToken(v string) *GetServiceDetailRequest {
	s.AuthToken = &v
	return s
}

func (s *GetServiceDetailRequest) SetId(v string) *GetServiceDetailRequest {
	s.Id = &v
	return s
}

func (s *GetServiceDetailRequest) SetWorkspace(v string) *GetServiceDetailRequest {
	s.Workspace = &v
	return s
}

type GetServiceDetailResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// service
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s GetServiceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceDetailResponse) GoString() string {
	return s.String()
}

func (s *GetServiceDetailResponse) SetReqMsgId(v string) *GetServiceDetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetServiceDetailResponse) SetResultCode(v string) *GetServiceDetailResponse {
	s.ResultCode = &v
	return s
}

func (s *GetServiceDetailResponse) SetResultMsg(v string) *GetServiceDetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetServiceDetailResponse) SetService(v string) *GetServiceDetailResponse {
	s.Service = &v
	return s
}

type CreateMetaCellRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// request
	Request *string `json:"request,omitempty" xml:"request,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CreateMetaCellRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaCellRequest) GoString() string {
	return s.String()
}

func (s *CreateMetaCellRequest) SetAuthToken(v string) *CreateMetaCellRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateMetaCellRequest) SetRequest(v string) *CreateMetaCellRequest {
	s.Request = &v
	return s
}

func (s *CreateMetaCellRequest) SetWorkspace(v string) *CreateMetaCellRequest {
	s.Workspace = &v
	return s
}

type CreateMetaCellResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateMetaCellResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaCellResponse) GoString() string {
	return s.String()
}

func (s *CreateMetaCellResponse) SetReqMsgId(v string) *CreateMetaCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateMetaCellResponse) SetResultCode(v string) *CreateMetaCellResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateMetaCellResponse) SetResultMsg(v string) *CreateMetaCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateMetaCellResponse) SetData(v string) *CreateMetaCellResponse {
	s.Data = &v
	return s
}

type UpdateMetaCellRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// request
	Request *string `json:"request,omitempty" xml:"request,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s UpdateMetaCellRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaCellRequest) GoString() string {
	return s.String()
}

func (s *UpdateMetaCellRequest) SetAuthToken(v string) *UpdateMetaCellRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMetaCellRequest) SetRequest(v string) *UpdateMetaCellRequest {
	s.Request = &v
	return s
}

func (s *UpdateMetaCellRequest) SetWorkspace(v string) *UpdateMetaCellRequest {
	s.Workspace = &v
	return s
}

type UpdateMetaCellResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateMetaCellResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaCellResponse) GoString() string {
	return s.String()
}

func (s *UpdateMetaCellResponse) SetReqMsgId(v string) *UpdateMetaCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMetaCellResponse) SetResultCode(v string) *UpdateMetaCellResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMetaCellResponse) SetResultMsg(v string) *UpdateMetaCellResponse {
	s.ResultMsg = &v
	return s
}

type AddMetaMasterzonerelRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// request
	Request *string `json:"request,omitempty" xml:"request,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s AddMetaMasterzonerelRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMetaMasterzonerelRequest) GoString() string {
	return s.String()
}

func (s *AddMetaMasterzonerelRequest) SetAuthToken(v string) *AddMetaMasterzonerelRequest {
	s.AuthToken = &v
	return s
}

func (s *AddMetaMasterzonerelRequest) SetRequest(v string) *AddMetaMasterzonerelRequest {
	s.Request = &v
	return s
}

func (s *AddMetaMasterzonerelRequest) SetWorkspace(v string) *AddMetaMasterzonerelRequest {
	s.Workspace = &v
	return s
}

type AddMetaMasterzonerelResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddMetaMasterzonerelResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMetaMasterzonerelResponse) GoString() string {
	return s.String()
}

func (s *AddMetaMasterzonerelResponse) SetReqMsgId(v string) *AddMetaMasterzonerelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddMetaMasterzonerelResponse) SetResultCode(v string) *AddMetaMasterzonerelResponse {
	s.ResultCode = &v
	return s
}

func (s *AddMetaMasterzonerelResponse) SetResultMsg(v string) *AddMetaMasterzonerelResponse {
	s.ResultMsg = &v
	return s
}

type AssignComputerRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用的完整名称
	ApplicationName *string `json:"application_name,omitempty" xml:"application_name,omitempty"`
	// 是否启用自动运维，默认为**False**
	AutoOps *bool `json:"auto_ops,omitempty" xml:"auto_ops,omitempty"`
	// 计算资源与cell的关系，如果不指定会根据分配的应用、服务实例以及computer的zone信息由系统决定，如果无法决定会导致失败，建议在指定了service_name参数的情形下指定该参数
	ComputerCells []*ComputerCell `json:"computer_cells,omitempty" xml:"computer_cells,omitempty" type:"Repeated"`
	// 计算资源id，可以指定多个
	ComputerIds []*string `json:"computer_ids,omitempty" xml:"computer_ids,omitempty" type:"Repeated"`
	// 是否重新初始化数据磁盘，默认为**False**
	InitDataDisk *bool `json:"init_data_disk,omitempty" xml:"init_data_disk,omitempty"`
	// 是否重新初始化系统磁盘，默认为**False**
	InitSysDisk *bool `json:"init_sys_disk,omitempty" xml:"init_sys_disk,omitempty"`
	// 请求业务id，用于幂等性控制等，需要客户端提供并保证唯一。最大64位单字节字符
	ReqBizId *string `json:"req_biz_id,omitempty" xml:"req_biz_id,omitempty"`
	// 目标服务实例名称
	ServiceName *string `json:"service_name,omitempty" xml:"service_name,omitempty"`
	// 目标工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s AssignComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s AssignComputerRequest) GoString() string {
	return s.String()
}

func (s *AssignComputerRequest) SetAuthToken(v string) *AssignComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *AssignComputerRequest) SetApplicationName(v string) *AssignComputerRequest {
	s.ApplicationName = &v
	return s
}

func (s *AssignComputerRequest) SetAutoOps(v bool) *AssignComputerRequest {
	s.AutoOps = &v
	return s
}

func (s *AssignComputerRequest) SetComputerCells(v []*ComputerCell) *AssignComputerRequest {
	s.ComputerCells = v
	return s
}

func (s *AssignComputerRequest) SetComputerIds(v []*string) *AssignComputerRequest {
	s.ComputerIds = v
	return s
}

func (s *AssignComputerRequest) SetInitDataDisk(v bool) *AssignComputerRequest {
	s.InitDataDisk = &v
	return s
}

func (s *AssignComputerRequest) SetInitSysDisk(v bool) *AssignComputerRequest {
	s.InitSysDisk = &v
	return s
}

func (s *AssignComputerRequest) SetReqBizId(v string) *AssignComputerRequest {
	s.ReqBizId = &v
	return s
}

func (s *AssignComputerRequest) SetServiceName(v string) *AssignComputerRequest {
	s.ServiceName = &v
	return s
}

func (s *AssignComputerRequest) SetWorkspace(v string) *AssignComputerRequest {
	s.Workspace = &v
	return s
}

type AssignComputerResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 请求的id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s AssignComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s AssignComputerResponse) GoString() string {
	return s.String()
}

func (s *AssignComputerResponse) SetReqMsgId(v string) *AssignComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AssignComputerResponse) SetResultCode(v string) *AssignComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *AssignComputerResponse) SetResultMsg(v string) *AssignComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *AssignComputerResponse) SetTaskId(v string) *AssignComputerResponse {
	s.TaskId = &v
	return s
}

type ReleaseComputerRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 计算资源id，可以指定多个
	ComputerIds []*string `json:"computer_ids,omitempty" xml:"computer_ids,omitempty" type:"Repeated"`
	// 请求业务id，用于幂等性控制等，需要客户端提供并保证唯一。最大64位单字节字符
	ReqBizId *string `json:"req_biz_id,omitempty" xml:"req_biz_id,omitempty"`
}

func (s ReleaseComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseComputerRequest) GoString() string {
	return s.String()
}

func (s *ReleaseComputerRequest) SetAuthToken(v string) *ReleaseComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *ReleaseComputerRequest) SetComputerIds(v []*string) *ReleaseComputerRequest {
	s.ComputerIds = v
	return s
}

func (s *ReleaseComputerRequest) SetReqBizId(v string) *ReleaseComputerRequest {
	s.ReqBizId = &v
	return s
}

type ReleaseComputerResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 请求的id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s ReleaseComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseComputerResponse) GoString() string {
	return s.String()
}

func (s *ReleaseComputerResponse) SetReqMsgId(v string) *ReleaseComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReleaseComputerResponse) SetResultCode(v string) *ReleaseComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *ReleaseComputerResponse) SetResultMsg(v string) *ReleaseComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *ReleaseComputerResponse) SetTaskId(v string) *ReleaseComputerResponse {
	s.TaskId = &v
	return s
}

type GetTaskRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 请求的业务号，当`task_id`参数指定时该参数会被忽略
	ReqBizId *string `json:"req_biz_id,omitempty" xml:"req_biz_id,omitempty"`
	// 异步请求的id， 当`req_biz_id`参数指定时可以不指定该参数，如果指定了该参数则忽略`req_biz_id`参数
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s GetTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTaskRequest) GoString() string {
	return s.String()
}

func (s *GetTaskRequest) SetAuthToken(v string) *GetTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTaskRequest) SetReqBizId(v string) *GetTaskRequest {
	s.ReqBizId = &v
	return s
}

func (s *GetTaskRequest) SetTaskId(v string) *GetTaskRequest {
	s.TaskId = &v
	return s
}

type GetTaskResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	//                             异步请求创建的时间和日期。采用UTC时间，按照[ISO8601](https://zh.wikipedia.org/wiki/ISO_8601)标准表示，格式为：`YYYY-MM-DDThh:mm:ssZ`
	//
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty"`
	// 异步请求中任务的执行结果，key为任务操作对象id比如某个资源的id，value为操作结果
	ExecutionResults []*TaskResult `json:"execution_results,omitempty" xml:"execution_results,omitempty" type:"Repeated"`
	// 异步请求唯一标识
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 异步请求业务号
	ReqBizId *string `json:"req_biz_id,omitempty" xml:"req_biz_id,omitempty"`
	// 异步请求状态，取值：
	//                             INIT：初始化中；
	//                             READY：待执行；
	//                             PROCESSING：执行中；
	//                             COMPLETED：执行完成
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s GetTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponse) GoString() string {
	return s.String()
}

func (s *GetTaskResponse) SetReqMsgId(v string) *GetTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTaskResponse) SetResultCode(v string) *GetTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTaskResponse) SetResultMsg(v string) *GetTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTaskResponse) SetCreationTime(v string) *GetTaskResponse {
	s.CreationTime = &v
	return s
}

func (s *GetTaskResponse) SetExecutionResults(v []*TaskResult) *GetTaskResponse {
	s.ExecutionResults = v
	return s
}

func (s *GetTaskResponse) SetId(v string) *GetTaskResponse {
	s.Id = &v
	return s
}

func (s *GetTaskResponse) SetReqBizId(v string) *GetTaskResponse {
	s.ReqBizId = &v
	return s
}

func (s *GetTaskResponse) SetStatus(v string) *GetTaskResponse {
	s.Status = &v
	return s
}

type CreateComputerRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 实例描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 镜像文件ID，启动实例时选择的镜像资源。
	ImageId *string `json:"image_id,omitempty" xml:"image_id,omitempty"`
	// 创建的实例数量。默认为 1 台
	InstanceCount *int64 `json:"instance_count,omitempty" xml:"instance_count,omitempty"`
	// 实例名称前缀。可包含小写字母(a-z)，数字(0-9) 和中划线(-)，以字母开头，中划线不能结尾或连续使用，2 ~ 40 个字符。
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 实例的密码。长度为8至30个字符，必须同时包含大小写英文字母、数字和特殊符号中的三类字符。特殊符号可以是：
	// ()`~!@#^&*-_+=|{}[]:;'<>,.?/
	// 其中，Windows实例不能以斜线号（/）为密码首字符。
	Paasword *string `json:"paasword,omitempty" xml:"paasword,omitempty" maxLength:"30" minLength:"8"`
	// 实例所在地域
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// image 或者 package
	DeployType *string `json:"deploy_type,omitempty" xml:"deploy_type,omitempty"`
	// 新创建实例所属于的安全组ID，同一个安全组内的实例之间可以互相访问。
	SecurityGroupId *string `json:"security_group_id,omitempty" xml:"security_group_id,omitempty"`
	// 实例的资源规格。
	SpecId *string `json:"spec_id,omitempty" xml:"spec_id,omitempty"`
	// 单位 G。系统盘大小，需根据选择的 image 类型决定。
	SystemDiskSize *string `json:"system_disk_size,omitempty" xml:"system_disk_size,omitempty"`
	// 系统盘类型
	SystemDiskType *string `json:"system_disk_type,omitempty" xml:"system_disk_type,omitempty"`
	// VPC类型的实例，需要指定虚拟交换机ID。
	VSwitchId *string `json:"v_switch_id,omitempty" xml:"v_switch_id,omitempty"`
	// 实例所在工作空间
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// 实例所在可用区
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty"`
}

func (s CreateComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateComputerRequest) GoString() string {
	return s.String()
}

func (s *CreateComputerRequest) SetAuthToken(v string) *CreateComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateComputerRequest) SetDescription(v string) *CreateComputerRequest {
	s.Description = &v
	return s
}

func (s *CreateComputerRequest) SetImageId(v string) *CreateComputerRequest {
	s.ImageId = &v
	return s
}

func (s *CreateComputerRequest) SetInstanceCount(v int64) *CreateComputerRequest {
	s.InstanceCount = &v
	return s
}

func (s *CreateComputerRequest) SetName(v string) *CreateComputerRequest {
	s.Name = &v
	return s
}

func (s *CreateComputerRequest) SetPaasword(v string) *CreateComputerRequest {
	s.Paasword = &v
	return s
}

func (s *CreateComputerRequest) SetRegion(v string) *CreateComputerRequest {
	s.Region = &v
	return s
}

func (s *CreateComputerRequest) SetDeployType(v string) *CreateComputerRequest {
	s.DeployType = &v
	return s
}

func (s *CreateComputerRequest) SetSecurityGroupId(v string) *CreateComputerRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateComputerRequest) SetSpecId(v string) *CreateComputerRequest {
	s.SpecId = &v
	return s
}

func (s *CreateComputerRequest) SetSystemDiskSize(v string) *CreateComputerRequest {
	s.SystemDiskSize = &v
	return s
}

func (s *CreateComputerRequest) SetSystemDiskType(v string) *CreateComputerRequest {
	s.SystemDiskType = &v
	return s
}

func (s *CreateComputerRequest) SetVSwitchId(v string) *CreateComputerRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateComputerRequest) SetWorkspace(v string) *CreateComputerRequest {
	s.Workspace = &v
	return s
}

func (s *CreateComputerRequest) SetZone(v string) *CreateComputerRequest {
	s.Zone = &v
	return s
}

type CreateComputerResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 实例 id
	ComputerIds []*string `json:"computer_ids,omitempty" xml:"computer_ids,omitempty" type:"Repeated"`
}

func (s CreateComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateComputerResponse) GoString() string {
	return s.String()
}

func (s *CreateComputerResponse) SetReqMsgId(v string) *CreateComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateComputerResponse) SetResultCode(v string) *CreateComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateComputerResponse) SetResultMsg(v string) *CreateComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateComputerResponse) SetComputerIds(v []*string) *CreateComputerResponse {
	s.ComputerIds = v
	return s
}

type CreateSidecarRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// sidecar描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// sidecar名称
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
}

func (s CreateSidecarRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSidecarRequest) GoString() string {
	return s.String()
}

func (s *CreateSidecarRequest) SetAuthToken(v string) *CreateSidecarRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSidecarRequest) SetDescription(v string) *CreateSidecarRequest {
	s.Description = &v
	return s
}

func (s *CreateSidecarRequest) SetSidecarName(v string) *CreateSidecarRequest {
	s.SidecarName = &v
	return s
}

func (s *CreateSidecarRequest) SetScope(v string) *CreateSidecarRequest {
	s.Scope = &v
	return s
}

func (s *CreateSidecarRequest) SetScopeIdentity(v string) *CreateSidecarRequest {
	s.ScopeIdentity = &v
	return s
}

type CreateSidecarResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSidecarResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSidecarResponse) GoString() string {
	return s.String()
}

func (s *CreateSidecarResponse) SetReqMsgId(v string) *CreateSidecarResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSidecarResponse) SetResultCode(v string) *CreateSidecarResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSidecarResponse) SetResultMsg(v string) *CreateSidecarResponse {
	s.ResultMsg = &v
	return s
}

type ListSidecarRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 分页请求体
	PaginationQuery *PaginationQuery `json:"pagination_query,omitempty" xml:"pagination_query,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识符
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
}

func (s ListSidecarRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSidecarRequest) GoString() string {
	return s.String()
}

func (s *ListSidecarRequest) SetAuthToken(v string) *ListSidecarRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSidecarRequest) SetPaginationQuery(v *PaginationQuery) *ListSidecarRequest {
	s.PaginationQuery = v
	return s
}

func (s *ListSidecarRequest) SetScope(v string) *ListSidecarRequest {
	s.Scope = &v
	return s
}

func (s *ListSidecarRequest) SetScopeIdentity(v string) *ListSidecarRequest {
	s.ScopeIdentity = &v
	return s
}

type ListSidecarResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// sidecar元信息结构体列表
	Sidecars []*Sidecar `json:"sidecars,omitempty" xml:"sidecars,omitempty" type:"Repeated"`
	// 总记录条数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ListSidecarResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSidecarResponse) GoString() string {
	return s.String()
}

func (s *ListSidecarResponse) SetReqMsgId(v string) *ListSidecarResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSidecarResponse) SetResultCode(v string) *ListSidecarResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSidecarResponse) SetResultMsg(v string) *ListSidecarResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSidecarResponse) SetSidecars(v []*Sidecar) *ListSidecarResponse {
	s.Sidecars = v
	return s
}

func (s *ListSidecarResponse) SetTotalCount(v int64) *ListSidecarResponse {
	s.TotalCount = &v
	return s
}

type CreateSidecarVersionRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// sidecar版本描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// release note
	ReleaseNote *string `json:"release_note,omitempty" xml:"release_note,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace_name
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar名称
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty"`
	// sidecar版本号
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty"`
	// 模板内容
	Template *string `json:"template,omitempty" xml:"template,omitempty"`
	// sidecar模板配置
	TemplateConfigs []*SidecarTemplateConfig `json:"template_configs,omitempty" xml:"template_configs,omitempty" type:"Repeated"`
	// sidecar版本类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 版本周期：alpha/beta/release
	VersionPeriod *string `json:"version_period,omitempty" xml:"version_period,omitempty"`
}

func (s CreateSidecarVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSidecarVersionRequest) GoString() string {
	return s.String()
}

func (s *CreateSidecarVersionRequest) SetAuthToken(v string) *CreateSidecarVersionRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSidecarVersionRequest) SetDescription(v string) *CreateSidecarVersionRequest {
	s.Description = &v
	return s
}

func (s *CreateSidecarVersionRequest) SetReleaseNote(v string) *CreateSidecarVersionRequest {
	s.ReleaseNote = &v
	return s
}

func (s *CreateSidecarVersionRequest) SetScope(v string) *CreateSidecarVersionRequest {
	s.Scope = &v
	return s
}

func (s *CreateSidecarVersionRequest) SetScopeIdentity(v string) *CreateSidecarVersionRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *CreateSidecarVersionRequest) SetSidecarName(v string) *CreateSidecarVersionRequest {
	s.SidecarName = &v
	return s
}

func (s *CreateSidecarVersionRequest) SetSidecarVersion(v string) *CreateSidecarVersionRequest {
	s.SidecarVersion = &v
	return s
}

func (s *CreateSidecarVersionRequest) SetTemplate(v string) *CreateSidecarVersionRequest {
	s.Template = &v
	return s
}

func (s *CreateSidecarVersionRequest) SetTemplateConfigs(v []*SidecarTemplateConfig) *CreateSidecarVersionRequest {
	s.TemplateConfigs = v
	return s
}

func (s *CreateSidecarVersionRequest) SetType(v string) *CreateSidecarVersionRequest {
	s.Type = &v
	return s
}

func (s *CreateSidecarVersionRequest) SetVersionPeriod(v string) *CreateSidecarVersionRequest {
	s.VersionPeriod = &v
	return s
}

type CreateSidecarVersionResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSidecarVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSidecarVersionResponse) GoString() string {
	return s.String()
}

func (s *CreateSidecarVersionResponse) SetReqMsgId(v string) *CreateSidecarVersionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSidecarVersionResponse) SetResultCode(v string) *CreateSidecarVersionResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSidecarVersionResponse) SetResultMsg(v string) *CreateSidecarVersionResponse {
	s.ResultMsg = &v
	return s
}

type ListSidecarVersionRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 分页查询请求体
	PaginationQuery *PaginationQuery `json:"pagination_query,omitempty" xml:"pagination_query,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar名称
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty"`
	// sidecar版本号
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty"`
	// 版本状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s ListSidecarVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSidecarVersionRequest) GoString() string {
	return s.String()
}

func (s *ListSidecarVersionRequest) SetAuthToken(v string) *ListSidecarVersionRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSidecarVersionRequest) SetPaginationQuery(v *PaginationQuery) *ListSidecarVersionRequest {
	s.PaginationQuery = v
	return s
}

func (s *ListSidecarVersionRequest) SetScope(v string) *ListSidecarVersionRequest {
	s.Scope = &v
	return s
}

func (s *ListSidecarVersionRequest) SetScopeIdentity(v string) *ListSidecarVersionRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *ListSidecarVersionRequest) SetSidecarName(v string) *ListSidecarVersionRequest {
	s.SidecarName = &v
	return s
}

func (s *ListSidecarVersionRequest) SetSidecarVersion(v string) *ListSidecarVersionRequest {
	s.SidecarVersion = &v
	return s
}

func (s *ListSidecarVersionRequest) SetStatus(v int64) *ListSidecarVersionRequest {
	s.Status = &v
	return s
}

type ListSidecarVersionResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// sidecar发布版本列表
	SidecarReleaseVersions []*SidecarReleaseVersion `json:"sidecar_release_versions,omitempty" xml:"sidecar_release_versions,omitempty" type:"Repeated"`
	// 总记录条数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ListSidecarVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSidecarVersionResponse) GoString() string {
	return s.String()
}

func (s *ListSidecarVersionResponse) SetReqMsgId(v string) *ListSidecarVersionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSidecarVersionResponse) SetResultCode(v string) *ListSidecarVersionResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSidecarVersionResponse) SetResultMsg(v string) *ListSidecarVersionResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSidecarVersionResponse) SetSidecarReleaseVersions(v []*SidecarReleaseVersion) *ListSidecarVersionResponse {
	s.SidecarReleaseVersions = v
	return s
}

func (s *ListSidecarVersionResponse) SetTotalCount(v int64) *ListSidecarVersionResponse {
	s.TotalCount = &v
	return s
}

type GetSidecarVersionRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar版本
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty"`
	// sidecar版本号
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty"`
	// sidecar版本类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s GetSidecarVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSidecarVersionRequest) GoString() string {
	return s.String()
}

func (s *GetSidecarVersionRequest) SetAuthToken(v string) *GetSidecarVersionRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSidecarVersionRequest) SetScope(v string) *GetSidecarVersionRequest {
	s.Scope = &v
	return s
}

func (s *GetSidecarVersionRequest) SetScopeIdentity(v string) *GetSidecarVersionRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *GetSidecarVersionRequest) SetSidecarName(v string) *GetSidecarVersionRequest {
	s.SidecarName = &v
	return s
}

func (s *GetSidecarVersionRequest) SetSidecarVersion(v string) *GetSidecarVersionRequest {
	s.SidecarVersion = &v
	return s
}

func (s *GetSidecarVersionRequest) SetType(v string) *GetSidecarVersionRequest {
	s.Type = &v
	return s
}

type GetSidecarVersionResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// sidecar发布版本
	SidecarReleaseVersion *SidecarReleaseVersion `json:"sidecar_release_version,omitempty" xml:"sidecar_release_version,omitempty"`
}

func (s GetSidecarVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSidecarVersionResponse) GoString() string {
	return s.String()
}

func (s *GetSidecarVersionResponse) SetReqMsgId(v string) *GetSidecarVersionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSidecarVersionResponse) SetResultCode(v string) *GetSidecarVersionResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSidecarVersionResponse) SetResultMsg(v string) *GetSidecarVersionResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSidecarVersionResponse) SetSidecarReleaseVersion(v *SidecarReleaseVersion) *GetSidecarVersionResponse {
	s.SidecarReleaseVersion = v
	return s
}

type CreateSidecarRuleRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 规则描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 规则优先级
	Level *int64 `json:"level,omitempty" xml:"level,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar版本实例id
	SidecarVersionInstanceId *string `json:"sidecar_version_instance_id,omitempty" xml:"sidecar_version_instance_id,omitempty"`
}

func (s CreateSidecarRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSidecarRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateSidecarRuleRequest) SetAuthToken(v string) *CreateSidecarRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSidecarRuleRequest) SetDescription(v string) *CreateSidecarRuleRequest {
	s.Description = &v
	return s
}

func (s *CreateSidecarRuleRequest) SetLevel(v int64) *CreateSidecarRuleRequest {
	s.Level = &v
	return s
}

func (s *CreateSidecarRuleRequest) SetScope(v string) *CreateSidecarRuleRequest {
	s.Scope = &v
	return s
}

func (s *CreateSidecarRuleRequest) SetScopeIdentity(v string) *CreateSidecarRuleRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *CreateSidecarRuleRequest) SetSidecarVersionInstanceId(v string) *CreateSidecarRuleRequest {
	s.SidecarVersionInstanceId = &v
	return s
}

type CreateSidecarRuleResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSidecarRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSidecarRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateSidecarRuleResponse) SetReqMsgId(v string) *CreateSidecarRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSidecarRuleResponse) SetResultCode(v string) *CreateSidecarRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSidecarRuleResponse) SetResultMsg(v string) *CreateSidecarRuleResponse {
	s.ResultMsg = &v
	return s
}

type GetSidecarRuleRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar版本id
	SidecarVersionInstanceId *string `json:"sidecar_version_instance_id,omitempty" xml:"sidecar_version_instance_id,omitempty"`
}

func (s GetSidecarRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSidecarRuleRequest) GoString() string {
	return s.String()
}

func (s *GetSidecarRuleRequest) SetAuthToken(v string) *GetSidecarRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSidecarRuleRequest) SetScope(v string) *GetSidecarRuleRequest {
	s.Scope = &v
	return s
}

func (s *GetSidecarRuleRequest) SetScopeIdentity(v string) *GetSidecarRuleRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *GetSidecarRuleRequest) SetSidecarVersionInstanceId(v string) *GetSidecarRuleRequest {
	s.SidecarVersionInstanceId = &v
	return s
}

type GetSidecarRuleResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// sidecar rule结构体
	SidecarRule *SidecarRule `json:"sidecar_rule,omitempty" xml:"sidecar_rule,omitempty"`
}

func (s GetSidecarRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSidecarRuleResponse) GoString() string {
	return s.String()
}

func (s *GetSidecarRuleResponse) SetReqMsgId(v string) *GetSidecarRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSidecarRuleResponse) SetResultCode(v string) *GetSidecarRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSidecarRuleResponse) SetResultMsg(v string) *GetSidecarRuleResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSidecarRuleResponse) SetSidecarRule(v *SidecarRule) *GetSidecarRuleResponse {
	s.SidecarRule = v
	return s
}

type ListSidecarRuleRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 分页查询
	PaginationQuery *PaginationQuery `json:"pagination_query,omitempty" xml:"pagination_query,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar名称
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty"`
	// 规则状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s ListSidecarRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSidecarRuleRequest) GoString() string {
	return s.String()
}

func (s *ListSidecarRuleRequest) SetAuthToken(v string) *ListSidecarRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSidecarRuleRequest) SetPaginationQuery(v *PaginationQuery) *ListSidecarRuleRequest {
	s.PaginationQuery = v
	return s
}

func (s *ListSidecarRuleRequest) SetScope(v string) *ListSidecarRuleRequest {
	s.Scope = &v
	return s
}

func (s *ListSidecarRuleRequest) SetScopeIdentity(v string) *ListSidecarRuleRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *ListSidecarRuleRequest) SetSidecarName(v string) *ListSidecarRuleRequest {
	s.SidecarName = &v
	return s
}

func (s *ListSidecarRuleRequest) SetStatus(v string) *ListSidecarRuleRequest {
	s.Status = &v
	return s
}

type ListSidecarRuleResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// sidecar规则详情列表
	SidecarRules []*SidecarRule `json:"sidecar_rules,omitempty" xml:"sidecar_rules,omitempty" type:"Repeated"`
	// 总记录条数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ListSidecarRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSidecarRuleResponse) GoString() string {
	return s.String()
}

func (s *ListSidecarRuleResponse) SetReqMsgId(v string) *ListSidecarRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSidecarRuleResponse) SetResultCode(v string) *ListSidecarRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSidecarRuleResponse) SetResultMsg(v string) *ListSidecarRuleResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSidecarRuleResponse) SetSidecarRules(v []*SidecarRule) *ListSidecarRuleResponse {
	s.SidecarRules = v
	return s
}

func (s *ListSidecarRuleResponse) SetTotalCount(v int64) *ListSidecarRuleResponse {
	s.TotalCount = &v
	return s
}

type CreateSidecarInstanceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 规则描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 实例名称
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty"`
	// 环境参数模板
	Params *string `json:"params,omitempty" xml:"params,omitempty"`
	// 自定义规则内容
	Rule *string `json:"rule,omitempty" xml:"rule,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar版本id
	//
	SidecarReleaseVersionId *string `json:"sidecar_release_version_id,omitempty" xml:"sidecar_release_version_id,omitempty"`
	// sidecar环境参数配置
	//
	ParamsConfigs []*SidecarParamsConfig `json:"params_configs,omitempty" xml:"params_configs,omitempty" type:"Repeated"`
}

func (s CreateSidecarInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSidecarInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateSidecarInstanceRequest) SetAuthToken(v string) *CreateSidecarInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSidecarInstanceRequest) SetDescription(v string) *CreateSidecarInstanceRequest {
	s.Description = &v
	return s
}

func (s *CreateSidecarInstanceRequest) SetInstanceName(v string) *CreateSidecarInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateSidecarInstanceRequest) SetParams(v string) *CreateSidecarInstanceRequest {
	s.Params = &v
	return s
}

func (s *CreateSidecarInstanceRequest) SetRule(v string) *CreateSidecarInstanceRequest {
	s.Rule = &v
	return s
}

func (s *CreateSidecarInstanceRequest) SetScope(v string) *CreateSidecarInstanceRequest {
	s.Scope = &v
	return s
}

func (s *CreateSidecarInstanceRequest) SetScopeIdentity(v string) *CreateSidecarInstanceRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *CreateSidecarInstanceRequest) SetSidecarReleaseVersionId(v string) *CreateSidecarInstanceRequest {
	s.SidecarReleaseVersionId = &v
	return s
}

func (s *CreateSidecarInstanceRequest) SetParamsConfigs(v []*SidecarParamsConfig) *CreateSidecarInstanceRequest {
	s.ParamsConfigs = v
	return s
}

type CreateSidecarInstanceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSidecarInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSidecarInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateSidecarInstanceResponse) SetReqMsgId(v string) *CreateSidecarInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSidecarInstanceResponse) SetResultCode(v string) *CreateSidecarInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSidecarInstanceResponse) SetResultMsg(v string) *CreateSidecarInstanceResponse {
	s.ResultMsg = &v
	return s
}

type ListSidecarInstanceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 版本实例名称
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty"`
	// 分页查询
	PaginationQuery *PaginationQuery `json:"pagination_query,omitempty" xml:"pagination_query,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// 版本实例状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s ListSidecarInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSidecarInstanceRequest) GoString() string {
	return s.String()
}

func (s *ListSidecarInstanceRequest) SetAuthToken(v string) *ListSidecarInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSidecarInstanceRequest) SetInstanceName(v string) *ListSidecarInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *ListSidecarInstanceRequest) SetPaginationQuery(v *PaginationQuery) *ListSidecarInstanceRequest {
	s.PaginationQuery = v
	return s
}

func (s *ListSidecarInstanceRequest) SetScope(v string) *ListSidecarInstanceRequest {
	s.Scope = &v
	return s
}

func (s *ListSidecarInstanceRequest) SetScopeIdentity(v string) *ListSidecarInstanceRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *ListSidecarInstanceRequest) SetStatus(v int64) *ListSidecarInstanceRequest {
	s.Status = &v
	return s
}

type ListSidecarInstanceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// sidecar版本实例列表
	SidecarVersionInstances []*SidecarVersionInstance `json:"sidecar_version_instances,omitempty" xml:"sidecar_version_instances,omitempty" type:"Repeated"`
	// 总记录条数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ListSidecarInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSidecarInstanceResponse) GoString() string {
	return s.String()
}

func (s *ListSidecarInstanceResponse) SetReqMsgId(v string) *ListSidecarInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSidecarInstanceResponse) SetResultCode(v string) *ListSidecarInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSidecarInstanceResponse) SetResultMsg(v string) *ListSidecarInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSidecarInstanceResponse) SetSidecarVersionInstances(v []*SidecarVersionInstance) *ListSidecarInstanceResponse {
	s.SidecarVersionInstances = v
	return s
}

func (s *ListSidecarInstanceResponse) SetTotalCount(v int64) *ListSidecarInstanceResponse {
	s.TotalCount = &v
	return s
}

type GetSidecarInstanceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 版本实例名称
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar版本id
	SidecarReleaseVersionId *string `json:"sidecar_release_version_id,omitempty" xml:"sidecar_release_version_id,omitempty"`
}

func (s GetSidecarInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSidecarInstanceRequest) GoString() string {
	return s.String()
}

func (s *GetSidecarInstanceRequest) SetAuthToken(v string) *GetSidecarInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSidecarInstanceRequest) SetInstanceName(v string) *GetSidecarInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *GetSidecarInstanceRequest) SetScope(v string) *GetSidecarInstanceRequest {
	s.Scope = &v
	return s
}

func (s *GetSidecarInstanceRequest) SetScopeIdentity(v string) *GetSidecarInstanceRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *GetSidecarInstanceRequest) SetSidecarReleaseVersionId(v string) *GetSidecarInstanceRequest {
	s.SidecarReleaseVersionId = &v
	return s
}

type GetSidecarInstanceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// sidecar版本实例
	SidecarVersionInstance *SidecarVersionInstance `json:"sidecar_version_instance,omitempty" xml:"sidecar_version_instance,omitempty"`
}

func (s GetSidecarInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSidecarInstanceResponse) GoString() string {
	return s.String()
}

func (s *GetSidecarInstanceResponse) SetReqMsgId(v string) *GetSidecarInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSidecarInstanceResponse) SetResultCode(v string) *GetSidecarInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSidecarInstanceResponse) SetResultMsg(v string) *GetSidecarInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSidecarInstanceResponse) SetSidecarVersionInstance(v *SidecarVersionInstance) *GetSidecarInstanceResponse {
	s.SidecarVersionInstance = v
	return s
}

type GetSidecarRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识符
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar名称
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty"`
}

func (s GetSidecarRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSidecarRequest) GoString() string {
	return s.String()
}

func (s *GetSidecarRequest) SetAuthToken(v string) *GetSidecarRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSidecarRequest) SetScope(v string) *GetSidecarRequest {
	s.Scope = &v
	return s
}

func (s *GetSidecarRequest) SetScopeIdentity(v string) *GetSidecarRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *GetSidecarRequest) SetSidecarName(v string) *GetSidecarRequest {
	s.SidecarName = &v
	return s
}

type GetSidecarResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// sidecar类型
	Sidecar *Sidecar `json:"sidecar,omitempty" xml:"sidecar,omitempty"`
}

func (s GetSidecarResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSidecarResponse) GoString() string {
	return s.String()
}

func (s *GetSidecarResponse) SetReqMsgId(v string) *GetSidecarResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSidecarResponse) SetResultCode(v string) *GetSidecarResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSidecarResponse) SetResultMsg(v string) *GetSidecarResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSidecarResponse) SetSidecar(v *Sidecar) *GetSidecarResponse {
	s.Sidecar = v
	return s
}

type UpdateSidecarRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// sidecar类型描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar名称
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty"`
}

func (s UpdateSidecarRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSidecarRequest) GoString() string {
	return s.String()
}

func (s *UpdateSidecarRequest) SetAuthToken(v string) *UpdateSidecarRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSidecarRequest) SetDescription(v string) *UpdateSidecarRequest {
	s.Description = &v
	return s
}

func (s *UpdateSidecarRequest) SetScope(v string) *UpdateSidecarRequest {
	s.Scope = &v
	return s
}

func (s *UpdateSidecarRequest) SetScopeIdentity(v string) *UpdateSidecarRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *UpdateSidecarRequest) SetSidecarName(v string) *UpdateSidecarRequest {
	s.SidecarName = &v
	return s
}

type UpdateSidecarResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSidecarResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSidecarResponse) GoString() string {
	return s.String()
}

func (s *UpdateSidecarResponse) SetReqMsgId(v string) *UpdateSidecarResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSidecarResponse) SetResultCode(v string) *UpdateSidecarResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSidecarResponse) SetResultMsg(v string) *UpdateSidecarResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSidecarRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// sidecar名称
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
}

func (s DeleteSidecarRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSidecarRequest) GoString() string {
	return s.String()
}

func (s *DeleteSidecarRequest) SetAuthToken(v string) *DeleteSidecarRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSidecarRequest) SetSidecarName(v string) *DeleteSidecarRequest {
	s.SidecarName = &v
	return s
}

func (s *DeleteSidecarRequest) SetScope(v string) *DeleteSidecarRequest {
	s.Scope = &v
	return s
}

func (s *DeleteSidecarRequest) SetScopeIdentity(v string) *DeleteSidecarRequest {
	s.ScopeIdentity = &v
	return s
}

type DeleteSidecarResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSidecarResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSidecarResponse) GoString() string {
	return s.String()
}

func (s *DeleteSidecarResponse) SetReqMsgId(v string) *DeleteSidecarResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSidecarResponse) SetResultCode(v string) *DeleteSidecarResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSidecarResponse) SetResultMsg(v string) *DeleteSidecarResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSidecarVersionRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// sidecar版本描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar名称
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty"`
	// sidecar版本号
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty"`
	// 版本状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// sidecar模板内容
	Template *string `json:"template,omitempty" xml:"template,omitempty"`
	// sidecar模板配置
	TemplateConfigs []*SidecarTemplateConfig `json:"template_configs,omitempty" xml:"template_configs,omitempty" type:"Repeated"`
	// sidecar版本类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 版本周期：alpha/beta/release
	//
	VersionPeriod *string `json:"version_period,omitempty" xml:"version_period,omitempty"`
	// 版本特性
	ReleaseNote *string `json:"release_note,omitempty" xml:"release_note,omitempty"`
}

func (s UpdateSidecarVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSidecarVersionRequest) GoString() string {
	return s.String()
}

func (s *UpdateSidecarVersionRequest) SetAuthToken(v string) *UpdateSidecarVersionRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSidecarVersionRequest) SetDescription(v string) *UpdateSidecarVersionRequest {
	s.Description = &v
	return s
}

func (s *UpdateSidecarVersionRequest) SetScope(v string) *UpdateSidecarVersionRequest {
	s.Scope = &v
	return s
}

func (s *UpdateSidecarVersionRequest) SetScopeIdentity(v string) *UpdateSidecarVersionRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *UpdateSidecarVersionRequest) SetSidecarName(v string) *UpdateSidecarVersionRequest {
	s.SidecarName = &v
	return s
}

func (s *UpdateSidecarVersionRequest) SetSidecarVersion(v string) *UpdateSidecarVersionRequest {
	s.SidecarVersion = &v
	return s
}

func (s *UpdateSidecarVersionRequest) SetStatus(v int64) *UpdateSidecarVersionRequest {
	s.Status = &v
	return s
}

func (s *UpdateSidecarVersionRequest) SetTemplate(v string) *UpdateSidecarVersionRequest {
	s.Template = &v
	return s
}

func (s *UpdateSidecarVersionRequest) SetTemplateConfigs(v []*SidecarTemplateConfig) *UpdateSidecarVersionRequest {
	s.TemplateConfigs = v
	return s
}

func (s *UpdateSidecarVersionRequest) SetType(v string) *UpdateSidecarVersionRequest {
	s.Type = &v
	return s
}

func (s *UpdateSidecarVersionRequest) SetVersionPeriod(v string) *UpdateSidecarVersionRequest {
	s.VersionPeriod = &v
	return s
}

func (s *UpdateSidecarVersionRequest) SetReleaseNote(v string) *UpdateSidecarVersionRequest {
	s.ReleaseNote = &v
	return s
}

type UpdateSidecarVersionResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSidecarVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSidecarVersionResponse) GoString() string {
	return s.String()
}

func (s *UpdateSidecarVersionResponse) SetReqMsgId(v string) *UpdateSidecarVersionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSidecarVersionResponse) SetResultCode(v string) *UpdateSidecarVersionResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSidecarVersionResponse) SetResultMsg(v string) *UpdateSidecarVersionResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSidecarVersionRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar名称
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty"`
	// sidecar版本号
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty"`
	// sidecar版本类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DeleteSidecarVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSidecarVersionRequest) GoString() string {
	return s.String()
}

func (s *DeleteSidecarVersionRequest) SetAuthToken(v string) *DeleteSidecarVersionRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSidecarVersionRequest) SetScope(v string) *DeleteSidecarVersionRequest {
	s.Scope = &v
	return s
}

func (s *DeleteSidecarVersionRequest) SetScopeIdentity(v string) *DeleteSidecarVersionRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *DeleteSidecarVersionRequest) SetSidecarName(v string) *DeleteSidecarVersionRequest {
	s.SidecarName = &v
	return s
}

func (s *DeleteSidecarVersionRequest) SetSidecarVersion(v string) *DeleteSidecarVersionRequest {
	s.SidecarVersion = &v
	return s
}

func (s *DeleteSidecarVersionRequest) SetType(v string) *DeleteSidecarVersionRequest {
	s.Type = &v
	return s
}

type DeleteSidecarVersionResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSidecarVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSidecarVersionResponse) GoString() string {
	return s.String()
}

func (s *DeleteSidecarVersionResponse) SetReqMsgId(v string) *DeleteSidecarVersionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSidecarVersionResponse) SetResultCode(v string) *DeleteSidecarVersionResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSidecarVersionResponse) SetResultMsg(v string) *DeleteSidecarVersionResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSidecarInstanceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 版本实例描述
	//
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 版本实例名称
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty"`
	// 环境模板参数
	Params *string `json:"params,omitempty" xml:"params,omitempty"`
	// 自定义规则内容
	Rule *string `json:"rule,omitempty" xml:"rule,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar版本id
	//
	SidecarReleaseVersionId *string `json:"sidecar_release_version_id,omitempty" xml:"sidecar_release_version_id,omitempty"`
	// sidecar环境参数配置
	ParamsConfigs []*SidecarParamsConfig `json:"params_configs,omitempty" xml:"params_configs,omitempty" type:"Repeated"`
}

func (s UpdateSidecarInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSidecarInstanceRequest) GoString() string {
	return s.String()
}

func (s *UpdateSidecarInstanceRequest) SetAuthToken(v string) *UpdateSidecarInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSidecarInstanceRequest) SetDescription(v string) *UpdateSidecarInstanceRequest {
	s.Description = &v
	return s
}

func (s *UpdateSidecarInstanceRequest) SetInstanceName(v string) *UpdateSidecarInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *UpdateSidecarInstanceRequest) SetParams(v string) *UpdateSidecarInstanceRequest {
	s.Params = &v
	return s
}

func (s *UpdateSidecarInstanceRequest) SetRule(v string) *UpdateSidecarInstanceRequest {
	s.Rule = &v
	return s
}

func (s *UpdateSidecarInstanceRequest) SetScope(v string) *UpdateSidecarInstanceRequest {
	s.Scope = &v
	return s
}

func (s *UpdateSidecarInstanceRequest) SetScopeIdentity(v string) *UpdateSidecarInstanceRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *UpdateSidecarInstanceRequest) SetSidecarReleaseVersionId(v string) *UpdateSidecarInstanceRequest {
	s.SidecarReleaseVersionId = &v
	return s
}

func (s *UpdateSidecarInstanceRequest) SetParamsConfigs(v []*SidecarParamsConfig) *UpdateSidecarInstanceRequest {
	s.ParamsConfigs = v
	return s
}

type UpdateSidecarInstanceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSidecarInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSidecarInstanceResponse) GoString() string {
	return s.String()
}

func (s *UpdateSidecarInstanceResponse) SetReqMsgId(v string) *UpdateSidecarInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSidecarInstanceResponse) SetResultCode(v string) *UpdateSidecarInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSidecarInstanceResponse) SetResultMsg(v string) *UpdateSidecarInstanceResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSidecarInstanceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 版本实例名称
	//
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar版本id
	//
	SidecarReleaseVersionId *string `json:"sidecar_release_version_id,omitempty" xml:"sidecar_release_version_id,omitempty"`
}

func (s DeleteSidecarInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSidecarInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteSidecarInstanceRequest) SetAuthToken(v string) *DeleteSidecarInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSidecarInstanceRequest) SetInstanceName(v string) *DeleteSidecarInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *DeleteSidecarInstanceRequest) SetScope(v string) *DeleteSidecarInstanceRequest {
	s.Scope = &v
	return s
}

func (s *DeleteSidecarInstanceRequest) SetScopeIdentity(v string) *DeleteSidecarInstanceRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *DeleteSidecarInstanceRequest) SetSidecarReleaseVersionId(v string) *DeleteSidecarInstanceRequest {
	s.SidecarReleaseVersionId = &v
	return s
}

type DeleteSidecarInstanceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSidecarInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSidecarInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteSidecarInstanceResponse) SetReqMsgId(v string) *DeleteSidecarInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSidecarInstanceResponse) SetResultCode(v string) *DeleteSidecarInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSidecarInstanceResponse) SetResultMsg(v string) *DeleteSidecarInstanceResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSidecarRuleRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 规则描述
	//
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 规则优先级
	Level *int64 `json:"level,omitempty" xml:"level,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar版本实例id
	SidecarVersionInstanceId *string `json:"sidecar_version_instance_id,omitempty" xml:"sidecar_version_instance_id,omitempty"`
	// 规则状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s UpdateSidecarRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSidecarRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateSidecarRuleRequest) SetAuthToken(v string) *UpdateSidecarRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSidecarRuleRequest) SetDescription(v string) *UpdateSidecarRuleRequest {
	s.Description = &v
	return s
}

func (s *UpdateSidecarRuleRequest) SetLevel(v int64) *UpdateSidecarRuleRequest {
	s.Level = &v
	return s
}

func (s *UpdateSidecarRuleRequest) SetScope(v string) *UpdateSidecarRuleRequest {
	s.Scope = &v
	return s
}

func (s *UpdateSidecarRuleRequest) SetScopeIdentity(v string) *UpdateSidecarRuleRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *UpdateSidecarRuleRequest) SetSidecarVersionInstanceId(v string) *UpdateSidecarRuleRequest {
	s.SidecarVersionInstanceId = &v
	return s
}

func (s *UpdateSidecarRuleRequest) SetStatus(v string) *UpdateSidecarRuleRequest {
	s.Status = &v
	return s
}

type UpdateSidecarRuleResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSidecarRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSidecarRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateSidecarRuleResponse) SetReqMsgId(v string) *UpdateSidecarRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSidecarRuleResponse) SetResultCode(v string) *UpdateSidecarRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSidecarRuleResponse) SetResultMsg(v string) *UpdateSidecarRuleResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSidecarRuleRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar版本实例id
	SidecarVersionInstanceId *string `json:"sidecar_version_instance_id,omitempty" xml:"sidecar_version_instance_id,omitempty"`
}

func (s DeleteSidecarRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSidecarRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteSidecarRuleRequest) SetAuthToken(v string) *DeleteSidecarRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSidecarRuleRequest) SetScope(v string) *DeleteSidecarRuleRequest {
	s.Scope = &v
	return s
}

func (s *DeleteSidecarRuleRequest) SetScopeIdentity(v string) *DeleteSidecarRuleRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *DeleteSidecarRuleRequest) SetSidecarVersionInstanceId(v string) *DeleteSidecarRuleRequest {
	s.SidecarVersionInstanceId = &v
	return s
}

type DeleteSidecarRuleResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSidecarRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSidecarRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteSidecarRuleResponse) SetReqMsgId(v string) *DeleteSidecarRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSidecarRuleResponse) SetResultCode(v string) *DeleteSidecarRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSidecarRuleResponse) SetResultMsg(v string) *DeleteSidecarRuleResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSidecarVersionstatusRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar名称
	SidecarName *string `json:"sidecar_name,omitempty" xml:"sidecar_name,omitempty"`
	// sidecar版本号
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty"`
	// 版本状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 发布、下线、废弃原因
	StatusReason *string `json:"status_reason,omitempty" xml:"status_reason,omitempty"`
	// sidecar版本类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s UpdateSidecarVersionstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSidecarVersionstatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateSidecarVersionstatusRequest) SetAuthToken(v string) *UpdateSidecarVersionstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSidecarVersionstatusRequest) SetScope(v string) *UpdateSidecarVersionstatusRequest {
	s.Scope = &v
	return s
}

func (s *UpdateSidecarVersionstatusRequest) SetScopeIdentity(v string) *UpdateSidecarVersionstatusRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *UpdateSidecarVersionstatusRequest) SetSidecarName(v string) *UpdateSidecarVersionstatusRequest {
	s.SidecarName = &v
	return s
}

func (s *UpdateSidecarVersionstatusRequest) SetSidecarVersion(v string) *UpdateSidecarVersionstatusRequest {
	s.SidecarVersion = &v
	return s
}

func (s *UpdateSidecarVersionstatusRequest) SetStatus(v int64) *UpdateSidecarVersionstatusRequest {
	s.Status = &v
	return s
}

func (s *UpdateSidecarVersionstatusRequest) SetStatusReason(v string) *UpdateSidecarVersionstatusRequest {
	s.StatusReason = &v
	return s
}

func (s *UpdateSidecarVersionstatusRequest) SetType(v string) *UpdateSidecarVersionstatusRequest {
	s.Type = &v
	return s
}

type UpdateSidecarVersionstatusResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSidecarVersionstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSidecarVersionstatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateSidecarVersionstatusResponse) SetReqMsgId(v string) *UpdateSidecarVersionstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSidecarVersionstatusResponse) SetResultCode(v string) *UpdateSidecarVersionstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSidecarVersionstatusResponse) SetResultMsg(v string) *UpdateSidecarVersionstatusResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSidecarInstancestatusRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 版本实例名称
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar版本id
	SidecarReleaseVersionId *string `json:"sidecar_release_version_id,omitempty" xml:"sidecar_release_version_id,omitempty"`
	// 版本实例状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 发布、下线、废弃原因
	StatusReason *string `json:"status_reason,omitempty" xml:"status_reason,omitempty"`
}

func (s UpdateSidecarInstancestatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSidecarInstancestatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateSidecarInstancestatusRequest) SetAuthToken(v string) *UpdateSidecarInstancestatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSidecarInstancestatusRequest) SetInstanceName(v string) *UpdateSidecarInstancestatusRequest {
	s.InstanceName = &v
	return s
}

func (s *UpdateSidecarInstancestatusRequest) SetScope(v string) *UpdateSidecarInstancestatusRequest {
	s.Scope = &v
	return s
}

func (s *UpdateSidecarInstancestatusRequest) SetScopeIdentity(v string) *UpdateSidecarInstancestatusRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *UpdateSidecarInstancestatusRequest) SetSidecarReleaseVersionId(v string) *UpdateSidecarInstancestatusRequest {
	s.SidecarReleaseVersionId = &v
	return s
}

func (s *UpdateSidecarInstancestatusRequest) SetStatus(v int64) *UpdateSidecarInstancestatusRequest {
	s.Status = &v
	return s
}

func (s *UpdateSidecarInstancestatusRequest) SetStatusReason(v string) *UpdateSidecarInstancestatusRequest {
	s.StatusReason = &v
	return s
}

type UpdateSidecarInstancestatusResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSidecarInstancestatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSidecarInstancestatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateSidecarInstancestatusResponse) SetReqMsgId(v string) *UpdateSidecarInstancestatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSidecarInstancestatusResponse) SetResultCode(v string) *UpdateSidecarInstancestatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSidecarInstancestatusResponse) SetResultMsg(v string) *UpdateSidecarInstancestatusResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSidecarRulestatusRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// sidecar生效范围：workspace、workspace_group、region
	//
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// scope对应的唯一标识，例如workspace对应workspace id
	//
	ScopeIdentity *string `json:"scope_identity,omitempty" xml:"scope_identity,omitempty"`
	// sidecar版本实例id
	SidecarVersionInstanceId *string `json:"sidecar_version_instance_id,omitempty" xml:"sidecar_version_instance_id,omitempty"`
	// 规则状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 发布、下线、废弃原因
	StatusReason *string `json:"status_reason,omitempty" xml:"status_reason,omitempty"`
}

func (s UpdateSidecarRulestatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSidecarRulestatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateSidecarRulestatusRequest) SetAuthToken(v string) *UpdateSidecarRulestatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSidecarRulestatusRequest) SetScope(v string) *UpdateSidecarRulestatusRequest {
	s.Scope = &v
	return s
}

func (s *UpdateSidecarRulestatusRequest) SetScopeIdentity(v string) *UpdateSidecarRulestatusRequest {
	s.ScopeIdentity = &v
	return s
}

func (s *UpdateSidecarRulestatusRequest) SetSidecarVersionInstanceId(v string) *UpdateSidecarRulestatusRequest {
	s.SidecarVersionInstanceId = &v
	return s
}

func (s *UpdateSidecarRulestatusRequest) SetStatus(v int64) *UpdateSidecarRulestatusRequest {
	s.Status = &v
	return s
}

func (s *UpdateSidecarRulestatusRequest) SetStatusReason(v string) *UpdateSidecarRulestatusRequest {
	s.StatusReason = &v
	return s
}

type UpdateSidecarRulestatusResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSidecarRulestatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSidecarRulestatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateSidecarRulestatusResponse) SetReqMsgId(v string) *UpdateSidecarRulestatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSidecarRulestatusResponse) SetResultCode(v string) *UpdateSidecarRulestatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSidecarRulestatusResponse) SetResultMsg(v string) *UpdateSidecarRulestatusResponse {
	s.ResultMsg = &v
	return s
}

type CreateAppbaselineSidecarRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// sidecar类型
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// 应用基线适用条件，网商仅能指定workspaceGroups属性，并且只能指定一个workspaceGroup
	Conditions []*SidecarCondition `json:"conditions,omitempty" xml:"conditions,omitempty" type:"Repeated"`
	// 是否开启sidecar
	Enable *bool `json:"enable,omitempty" xml:"enable,omitempty"`
	// sidecar版本号
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty"`
}

func (s CreateAppbaselineSidecarRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAppbaselineSidecarRequest) GoString() string {
	return s.String()
}

func (s *CreateAppbaselineSidecarRequest) SetAuthToken(v string) *CreateAppbaselineSidecarRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAppbaselineSidecarRequest) SetAppName(v string) *CreateAppbaselineSidecarRequest {
	s.AppName = &v
	return s
}

func (s *CreateAppbaselineSidecarRequest) SetCategory(v string) *CreateAppbaselineSidecarRequest {
	s.Category = &v
	return s
}

func (s *CreateAppbaselineSidecarRequest) SetConditions(v []*SidecarCondition) *CreateAppbaselineSidecarRequest {
	s.Conditions = v
	return s
}

func (s *CreateAppbaselineSidecarRequest) SetEnable(v bool) *CreateAppbaselineSidecarRequest {
	s.Enable = &v
	return s
}

func (s *CreateAppbaselineSidecarRequest) SetSidecarVersion(v string) *CreateAppbaselineSidecarRequest {
	s.SidecarVersion = &v
	return s
}

type CreateAppbaselineSidecarResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用基线ID
	AppbaselineId *string `json:"appbaseline_id,omitempty" xml:"appbaseline_id,omitempty"`
}

func (s CreateAppbaselineSidecarResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAppbaselineSidecarResponse) GoString() string {
	return s.String()
}

func (s *CreateAppbaselineSidecarResponse) SetReqMsgId(v string) *CreateAppbaselineSidecarResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAppbaselineSidecarResponse) SetResultCode(v string) *CreateAppbaselineSidecarResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAppbaselineSidecarResponse) SetResultMsg(v string) *CreateAppbaselineSidecarResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAppbaselineSidecarResponse) SetAppbaselineId(v string) *CreateAppbaselineSidecarResponse {
	s.AppbaselineId = &v
	return s
}

type ListAppbaselineSidecarRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// sidecar类型
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// 过滤条件，网商仅能指定workspaceGroups属性
	Condition *SidecarCondition `json:"condition,omitempty" xml:"condition,omitempty"`
	// sidecar版本号
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty"`
}

func (s ListAppbaselineSidecarRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppbaselineSidecarRequest) GoString() string {
	return s.String()
}

func (s *ListAppbaselineSidecarRequest) SetAuthToken(v string) *ListAppbaselineSidecarRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppbaselineSidecarRequest) SetAppName(v string) *ListAppbaselineSidecarRequest {
	s.AppName = &v
	return s
}

func (s *ListAppbaselineSidecarRequest) SetCategory(v string) *ListAppbaselineSidecarRequest {
	s.Category = &v
	return s
}

func (s *ListAppbaselineSidecarRequest) SetCondition(v *SidecarCondition) *ListAppbaselineSidecarRequest {
	s.Condition = v
	return s
}

func (s *ListAppbaselineSidecarRequest) SetSidecarVersion(v string) *ListAppbaselineSidecarRequest {
	s.SidecarVersion = &v
	return s
}

type ListAppbaselineSidecarResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用基线列表
	Appbaselines []*AppBaselineSidecarConfig `json:"appbaselines,omitempty" xml:"appbaselines,omitempty" type:"Repeated"`
}

func (s ListAppbaselineSidecarResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppbaselineSidecarResponse) GoString() string {
	return s.String()
}

func (s *ListAppbaselineSidecarResponse) SetReqMsgId(v string) *ListAppbaselineSidecarResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppbaselineSidecarResponse) SetResultCode(v string) *ListAppbaselineSidecarResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppbaselineSidecarResponse) SetResultMsg(v string) *ListAppbaselineSidecarResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppbaselineSidecarResponse) SetAppbaselines(v []*AppBaselineSidecarConfig) *ListAppbaselineSidecarResponse {
	s.Appbaselines = v
	return s
}

type DeleteAppbaselineSidecarRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用基线ID
	AppbaselineId *string `json:"appbaseline_id,omitempty" xml:"appbaseline_id,omitempty"`
}

func (s DeleteAppbaselineSidecarRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppbaselineSidecarRequest) GoString() string {
	return s.String()
}

func (s *DeleteAppbaselineSidecarRequest) SetAuthToken(v string) *DeleteAppbaselineSidecarRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteAppbaselineSidecarRequest) SetAppbaselineId(v string) *DeleteAppbaselineSidecarRequest {
	s.AppbaselineId = &v
	return s
}

type DeleteAppbaselineSidecarResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteAppbaselineSidecarResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppbaselineSidecarResponse) GoString() string {
	return s.String()
}

func (s *DeleteAppbaselineSidecarResponse) SetReqMsgId(v string) *DeleteAppbaselineSidecarResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteAppbaselineSidecarResponse) SetResultCode(v string) *DeleteAppbaselineSidecarResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteAppbaselineSidecarResponse) SetResultMsg(v string) *DeleteAppbaselineSidecarResponse {
	s.ResultMsg = &v
	return s
}

type UpdateAppbaselineSidecarRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用sidecar基线id
	AppbaselineId *string `json:"appbaseline_id,omitempty" xml:"appbaseline_id,omitempty"`
	// 是否开启sidecar
	Enable *bool `json:"enable,omitempty" xml:"enable,omitempty"`
	// sidecar版本号
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty"`
}

func (s UpdateAppbaselineSidecarRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppbaselineSidecarRequest) GoString() string {
	return s.String()
}

func (s *UpdateAppbaselineSidecarRequest) SetAuthToken(v string) *UpdateAppbaselineSidecarRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateAppbaselineSidecarRequest) SetAppbaselineId(v string) *UpdateAppbaselineSidecarRequest {
	s.AppbaselineId = &v
	return s
}

func (s *UpdateAppbaselineSidecarRequest) SetEnable(v bool) *UpdateAppbaselineSidecarRequest {
	s.Enable = &v
	return s
}

func (s *UpdateAppbaselineSidecarRequest) SetSidecarVersion(v string) *UpdateAppbaselineSidecarRequest {
	s.SidecarVersion = &v
	return s
}

type UpdateAppbaselineSidecarResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateAppbaselineSidecarResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppbaselineSidecarResponse) GoString() string {
	return s.String()
}

func (s *UpdateAppbaselineSidecarResponse) SetReqMsgId(v string) *UpdateAppbaselineSidecarResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateAppbaselineSidecarResponse) SetResultCode(v string) *UpdateAppbaselineSidecarResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateAppbaselineSidecarResponse) SetResultMsg(v string) *UpdateAppbaselineSidecarResponse {
	s.ResultMsg = &v
	return s
}

type SaveAppbaselineSidecarRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// sidecar类型
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// 应用基线适用条件，网商仅能指定workspaceGroups属性，并且只能指定一个workspaceGroup
	Conditions []*SidecarCondition `json:"conditions,omitempty" xml:"conditions,omitempty" type:"Repeated"`
	// 是否开启sidecar
	Enable *bool `json:"enable,omitempty" xml:"enable,omitempty"`
	// sidecar版本号
	SidecarVersion *string `json:"sidecar_version,omitempty" xml:"sidecar_version,omitempty"`
}

func (s SaveAppbaselineSidecarRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveAppbaselineSidecarRequest) GoString() string {
	return s.String()
}

func (s *SaveAppbaselineSidecarRequest) SetAuthToken(v string) *SaveAppbaselineSidecarRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveAppbaselineSidecarRequest) SetAppName(v string) *SaveAppbaselineSidecarRequest {
	s.AppName = &v
	return s
}

func (s *SaveAppbaselineSidecarRequest) SetCategory(v string) *SaveAppbaselineSidecarRequest {
	s.Category = &v
	return s
}

func (s *SaveAppbaselineSidecarRequest) SetConditions(v []*SidecarCondition) *SaveAppbaselineSidecarRequest {
	s.Conditions = v
	return s
}

func (s *SaveAppbaselineSidecarRequest) SetEnable(v bool) *SaveAppbaselineSidecarRequest {
	s.Enable = &v
	return s
}

func (s *SaveAppbaselineSidecarRequest) SetSidecarVersion(v string) *SaveAppbaselineSidecarRequest {
	s.SidecarVersion = &v
	return s
}

type SaveAppbaselineSidecarResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用基线ID
	AppbaselineId *string `json:"appbaseline_id,omitempty" xml:"appbaseline_id,omitempty"`
}

func (s SaveAppbaselineSidecarResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveAppbaselineSidecarResponse) GoString() string {
	return s.String()
}

func (s *SaveAppbaselineSidecarResponse) SetReqMsgId(v string) *SaveAppbaselineSidecarResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveAppbaselineSidecarResponse) SetResultCode(v string) *SaveAppbaselineSidecarResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveAppbaselineSidecarResponse) SetResultMsg(v string) *SaveAppbaselineSidecarResponse {
	s.ResultMsg = &v
	return s
}

func (s *SaveAppbaselineSidecarResponse) SetAppbaselineId(v string) *SaveAppbaselineSidecarResponse {
	s.AppbaselineId = &v
	return s
}

type GetWorkspaceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *GetWorkspaceRequest) SetAuthToken(v string) *GetWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetWorkspaceRequest) SetWorkspace(v string) *GetWorkspaceRequest {
	s.Workspace = &v
	return s
}

type GetWorkspaceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建时间
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// workspace 名称
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace 显示名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 网络类型
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// workspace所在regionId
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// 所属租户名称
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// 最近更新时间
	UpdateTime *string `json:"update_time,omitempty" xml:"update_time,omitempty"`
	// workspace所在zoneId列表
	Zones []*string `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
}

func (s GetWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *GetWorkspaceResponse) SetReqMsgId(v string) *GetWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetWorkspaceResponse) SetResultCode(v string) *GetWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetWorkspaceResponse) SetResultMsg(v string) *GetWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetWorkspaceResponse) SetCreateTime(v string) *GetWorkspaceResponse {
	s.CreateTime = &v
	return s
}

func (s *GetWorkspaceResponse) SetId(v string) *GetWorkspaceResponse {
	s.Id = &v
	return s
}

func (s *GetWorkspaceResponse) SetName(v string) *GetWorkspaceResponse {
	s.Name = &v
	return s
}

func (s *GetWorkspaceResponse) SetNetworkType(v string) *GetWorkspaceResponse {
	s.NetworkType = &v
	return s
}

func (s *GetWorkspaceResponse) SetRegion(v string) *GetWorkspaceResponse {
	s.Region = &v
	return s
}

func (s *GetWorkspaceResponse) SetTenant(v string) *GetWorkspaceResponse {
	s.Tenant = &v
	return s
}

func (s *GetWorkspaceResponse) SetUpdateTime(v string) *GetWorkspaceResponse {
	s.UpdateTime = &v
	return s
}

func (s *GetWorkspaceResponse) SetZones(v []*string) *GetWorkspaceResponse {
	s.Zones = v
	return s
}

type QueryWorkspaceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间状态。输入示例：status.1=CREATED
	Status []*string `json:"status,omitempty" xml:"status,omitempty" type:"Repeated"`
}

func (s QueryWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *QueryWorkspaceRequest) SetAuthToken(v string) *QueryWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryWorkspaceRequest) SetStatus(v []*string) *QueryWorkspaceRequest {
	s.Status = v
	return s
}

type QueryWorkspaceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 此应用下所有计算容器分组运维状态详情
	Groups []*OpsGroup `json:"groups,omitempty" xml:"groups,omitempty" type:"Repeated"`
	// 查询结果，workspace列表
	Workspaces []*Workspace `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s QueryWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *QueryWorkspaceResponse) SetReqMsgId(v string) *QueryWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryWorkspaceResponse) SetResultCode(v string) *QueryWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryWorkspaceResponse) SetResultMsg(v string) *QueryWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryWorkspaceResponse) SetGroups(v []*OpsGroup) *QueryWorkspaceResponse {
	s.Groups = v
	return s
}

func (s *QueryWorkspaceResponse) SetWorkspaces(v []*Workspace) *QueryWorkspaceResponse {
	s.Workspaces = v
	return s
}

type CreateWorkspaceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace 显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// workspace名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 网络类型
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// 地域id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// 机房ID
	ZoneIds []*string `json:"zone_ids,omitempty" xml:"zone_ids,omitempty" type:"Repeated"`
}

func (s CreateWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceRequest) SetAuthToken(v string) *CreateWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateWorkspaceRequest) SetDisplayName(v string) *CreateWorkspaceRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateWorkspaceRequest) SetName(v string) *CreateWorkspaceRequest {
	s.Name = &v
	return s
}

func (s *CreateWorkspaceRequest) SetNetworkType(v string) *CreateWorkspaceRequest {
	s.NetworkType = &v
	return s
}

func (s *CreateWorkspaceRequest) SetRegionId(v string) *CreateWorkspaceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateWorkspaceRequest) SetZoneIds(v []*string) *CreateWorkspaceRequest {
	s.ZoneIds = v
	return s
}

type CreateWorkspaceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspace
	Workspace *Workspace `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CreateWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceResponse) SetReqMsgId(v string) *CreateWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateWorkspaceResponse) SetResultCode(v string) *CreateWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateWorkspaceResponse) SetResultMsg(v string) *CreateWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateWorkspaceResponse) SetWorkspace(v *Workspace) *CreateWorkspaceResponse {
	s.Workspace = v
	return s
}

type ListWorkspaceRequest struct {
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s ListWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *ListWorkspaceRequest) SetAuthToken(v string) *ListWorkspaceRequest {
	s.AuthToken = &v
	return s
}

type ListWorkspaceResponse struct {
	ReqMsgId   *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	ResultMsg  *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspace列表。
	Workspaces []*Workspace `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s ListWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *ListWorkspaceResponse) SetReqMsgId(v string) *ListWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListWorkspaceResponse) SetResultCode(v string) *ListWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *ListWorkspaceResponse) SetResultMsg(v string) *ListWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListWorkspaceResponse) SetWorkspaces(v []*Workspace) *ListWorkspaceResponse {
	s.Workspaces = v
	return s
}

type Client struct {
	Endpoint        *string
	RegionId        *string
	AccessKeyId     *string
	AccessKeySecret *string
	Protocol        *string
	UserAgent       *string
	ReadTimeout     *int
	ConnectTimeout  *int
	HttpProxy       *string
	HttpsProxy      *string
	Socks5Proxy     *string
	Socks5NetWork   *string
	NoProxy         *string
	MaxIdleConns    *int
	SecurityToken   *string
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
func NewClient(config *Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *Config) (_err error) {
	if tea.BoolValue(util.IsUnset(tea.ToMap(config))) {
		_err = tea.NewSDKError(map[string]interface{}{
			"code":    "ParameterMissing",
			"message": "'config' can not be unset",
		})
		return _err
	}

	client.AccessKeyId = config.AccessKeyId
	client.AccessKeySecret = config.AccessKeySecret
	client.SecurityToken = config.SecurityToken
	client.Endpoint = config.Endpoint
	client.Protocol = config.Protocol
	client.UserAgent = config.UserAgent
	client.ReadTimeout = config.ReadTimeout
	client.ConnectTimeout = config.ConnectTimeout
	client.HttpProxy = config.HttpProxy
	client.HttpsProxy = config.HttpsProxy
	client.NoProxy = config.NoProxy
	client.Socks5Proxy = config.Socks5Proxy
	client.Socks5NetWork = config.Socks5NetWork
	client.MaxIdleConns = config.MaxIdleConns
	return nil
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
func (client *Client) DoRequest(version *string, action *string, protocol *string, method *string, pathname *string, request map[string]interface{}, headers map[string]*string, runtime *util.RuntimeOptions) (_result map[string]interface{}, _err error) {
	_err = tea.Validate(runtime)
	if _err != nil {
		return _result, _err
	}
	_runtime := map[string]interface{}{
		"timeouted":      "retry",
		"readTimeout":    tea.IntValue(util.DefaultNumber(runtime.ReadTimeout, client.ReadTimeout)),
		"connectTimeout": tea.IntValue(util.DefaultNumber(runtime.ConnectTimeout, client.ConnectTimeout)),
		"httpProxy":      tea.StringValue(util.DefaultString(runtime.HttpProxy, client.HttpProxy)),
		"httpsProxy":     tea.StringValue(util.DefaultString(runtime.HttpsProxy, client.HttpsProxy)),
		"noProxy":        tea.StringValue(util.DefaultString(runtime.NoProxy, client.NoProxy)),
		"maxIdleConns":   tea.IntValue(util.DefaultNumber(runtime.MaxIdleConns, client.MaxIdleConns)),
		"retry": map[string]interface{}{
			"retryable":   tea.BoolValue(runtime.Autoretry),
			"maxAttempts": tea.IntValue(util.DefaultNumber(runtime.MaxAttempts, tea.Int(3))),
		},
		"backoff": map[string]interface{}{
			"policy": tea.StringValue(util.DefaultString(runtime.BackoffPolicy, tea.String("no"))),
			"period": tea.IntValue(util.DefaultNumber(runtime.BackoffPeriod, tea.Int(1))),
		},
		"ignoreSSL": tea.BoolValue(runtime.IgnoreSSL),
	}

	_resp := make(map[string]interface{})
	for _retryTimes := 0; tea.BoolValue(tea.AllowRetry(_runtime["retry"], tea.Int(_retryTimes))); _retryTimes++ {
		if _retryTimes > 0 {
			_backoffTime := tea.GetBackoffTime(_runtime["backoff"], tea.Int(_retryTimes))
			if tea.IntValue(_backoffTime) > 0 {
				tea.Sleep(_backoffTime)
			}
		}

		_resp, _err = func() (map[string]interface{}, error) {
			request_ := tea.NewRequest()
			request_.Protocol = util.DefaultString(client.Protocol, protocol)
			request_.Method = method
			request_.Pathname = pathname
			request_.Query = map[string]*string{
				"method":           action,
				"version":          version,
				"sign_type":        tea.String("HmacSHA1"),
				"req_time":         antchainutil.GetTimestamp(),
				"req_msg_id":       antchainutil.GetNonce(),
				"access_key":       client.AccessKeyId,
				"base_sdk_version": tea.String("TeaSDK-2.0"),
				"sdk_version":      tea.String("3.2.1"),
			}
			if !tea.BoolValue(util.Empty(client.SecurityToken)) {
				request_.Query["security_token"] = client.SecurityToken
			}

			request_.Headers = tea.Merge(map[string]*string{
				"host":       util.DefaultString(client.Endpoint, tea.String("undefined")),
				"user-agent": util.GetUserAgent(client.UserAgent),
			}, headers)
			tmp := util.AnyifyMapValue(rpcutil.Query(request))
			request_.Body = tea.ToReader(util.ToFormString(tmp))
			request_.Headers["content-type"] = tea.String("application/x-www-form-urlencoded")
			signedParam := tea.Merge(request_.Query,
				rpcutil.Query(request))
			request_.Query["sign"] = antchainutil.GetSignature(signedParam, client.AccessKeySecret)
			response_, _err := tea.DoRequest(request_, _runtime)
			if _err != nil {
				return _result, _err
			}
			raw, _err := util.ReadAsString(response_.Body)
			if _err != nil {
				return _result, _err
			}

			obj := util.ParseJSON(raw)
			res := util.AssertAsMap(obj)
			resp := util.AssertAsMap(res["response"])
			if tea.BoolValue(antchainutil.HasError(raw, client.AccessKeySecret)) {
				_err = tea.NewSDKError(map[string]interface{}{
					"message": resp["result_msg"],
					"data":    resp,
					"code":    resp["result_code"],
				})
				return _result, _err
			}

			_result = resp
			return _result, _err
		}()
		if !tea.BoolValue(tea.Retryable(_err)) {
			break
		}
	}

	return _resp, _err
}

/**
 * Description: 创建一个应用。
 * Summary: 创建应用
 */
func (client *Client) CreateApplication(request *CreateApplicationRequest) (_result *CreateApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateApplicationResponse{}
	_body, _err := client.CreateApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建一个应用。
 * Summary: 创建应用
 */
func (client *Client) CreateApplicationEx(request *CreateApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建一个应用服务实例。
 * Summary: 创建应用服务实例
 */
func (client *Client) CreateApplicationService(request *CreateApplicationServiceRequest) (_result *CreateApplicationServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateApplicationServiceResponse{}
	_body, _err := client.CreateApplicationServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建一个应用服务实例。
 * Summary: 创建应用服务实例
 */
func (client *Client) CreateApplicationServiceEx(request *CreateApplicationServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateApplicationServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateApplicationServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.service.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询是否启用应用服务实例。
 * Summary: 查询是否启用应用服务实例
 */
func (client *Client) EnabledApplicationService(request *EnabledApplicationServiceRequest) (_result *EnabledApplicationServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &EnabledApplicationServiceResponse{}
	_body, _err := client.EnabledApplicationServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询是否启用应用服务实例。
 * Summary: 查询是否启用应用服务实例
 */
func (client *Client) EnabledApplicationServiceEx(request *EnabledApplicationServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *EnabledApplicationServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnabledApplicationServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.service.enabled"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取一个应用详情。
 * Summary: 获取应用
 */
func (client *Client) GetApplication(request *GetApplicationRequest) (_result *GetApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetApplicationResponse{}
	_body, _err := client.GetApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取一个应用详情。
 * Summary: 获取应用
 */
func (client *Client) GetApplicationEx(request *GetApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取一个应用服务详情。
 * Summary: 获取应用服务
 */
func (client *Client) GetApplicationService(request *GetApplicationServiceRequest) (_result *GetApplicationServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetApplicationServiceResponse{}
	_body, _err := client.GetApplicationServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取一个应用服务详情。
 * Summary: 获取应用服务
 */
func (client *Client) GetApplicationServiceEx(request *GetApplicationServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetApplicationServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetApplicationServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.service.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用服务实例列表。
 * Summary: 查询应用服务实例列表
 */
func (client *Client) QueryApplicationService(request *QueryApplicationServiceRequest) (_result *QueryApplicationServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryApplicationServiceResponse{}
	_body, _err := client.QueryApplicationServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用服务实例列表。
 * Summary: 查询应用服务实例列表
 */
func (client *Client) QueryApplicationServiceEx(request *QueryApplicationServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryApplicationServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryApplicationServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.service.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除一个应用服务实例
 * Summary: 删除一个应用服务实例
 */
func (client *Client) DeleteApplicationService(request *DeleteApplicationServiceRequest) (_result *DeleteApplicationServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteApplicationServiceResponse{}
	_body, _err := client.DeleteApplicationServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除一个应用服务实例
 * Summary: 删除一个应用服务实例
 */
func (client *Client) DeleteApplicationServiceEx(request *DeleteApplicationServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteApplicationServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteApplicationServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.service.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取应用发布包详情包括下载地址、校验码等。
 * Summary: 获取应用发布包详情包括下载地址、校验码等。
 */
func (client *Client) GetApplicationPackage(request *GetApplicationPackageRequest) (_result *GetApplicationPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetApplicationPackageResponse{}
	_body, _err := client.GetApplicationPackageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取应用发布包详情包括下载地址、校验码等。
 * Summary: 获取应用发布包详情包括下载地址、校验码等。
 */
func (client *Client) GetApplicationPackageEx(request *GetApplicationPackageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetApplicationPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetApplicationPackageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.package.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用发布包版本详情
 * Summary: 查询应用发布包版本详情
 */
func (client *Client) QueryAppVersion(request *QueryAppVersionRequest) (_result *QueryAppVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppVersionResponse{}
	_body, _err := client.QueryAppVersionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用发布包版本详情
 * Summary: 查询应用发布包版本详情
 */
func (client *Client) QueryAppVersionEx(request *QueryAppVersionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppVersionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.version.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除一个应用。
 * Summary: 删除应用
 */
func (client *Client) DeleteApplication(request *DeleteApplicationRequest) (_result *DeleteApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteApplicationResponse{}
	_body, _err := client.DeleteApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除一个应用。
 * Summary: 删除应用
 */
func (client *Client) DeleteApplicationEx(request *DeleteApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取租户应用列表。
 * Summary: 列出应用
 */
func (client *Client) ListApplication(request *ListApplicationRequest) (_result *ListApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListApplicationResponse{}
	_body, _err := client.ListApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取租户应用列表。
 * Summary: 列出应用
 */
func (client *Client) ListApplicationEx(request *ListApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取租户应用分组列表。
 * Summary: 列出应用分组
 */
func (client *Client) ListAppgroup(request *ListAppgroupRequest) (_result *ListAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppgroupResponse{}
	_body, _err := client.ListAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取租户应用分组列表。
 * Summary: 列出应用分组
 */
func (client *Client) ListAppgroupEx(request *ListAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appgroup.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据指定的查询条件查询属于某个应用计算资源列表。
 * Summary: 查询应用计算资源
 */
func (client *Client) QueryApplicationComputer(request *QueryApplicationComputerRequest) (_result *QueryApplicationComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryApplicationComputerResponse{}
	_body, _err := client.QueryApplicationComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据指定的查询条件查询属于某个应用计算资源列表。
 * Summary: 查询应用计算资源
 */
func (client *Client) QueryApplicationComputerEx(request *QueryApplicationComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryApplicationComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryApplicationComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.computer.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取一个应用的代码库信息。
 * Summary: 获取一个应用的代码库信息
 */
func (client *Client) GetApplicationRepository(request *GetApplicationRepositoryRequest) (_result *GetApplicationRepositoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetApplicationRepositoryResponse{}
	_body, _err := client.GetApplicationRepositoryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取一个应用的代码库信息。
 * Summary: 获取一个应用的代码库信息
 */
func (client *Client) GetApplicationRepositoryEx(request *GetApplicationRepositoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetApplicationRepositoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetApplicationRepositoryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.repository.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据名称查询应用分组信息
 * Summary: 应用分组查询
 */
func (client *Client) QueryAppgroup(request *QueryAppgroupRequest) (_result *QueryAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppgroupResponse{}
	_body, _err := client.QueryAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据名称查询应用分组信息
 * Summary: 应用分组查询
 */
func (client *Client) QueryAppgroupEx(request *QueryAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appgroup.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据条件查询应用等级
 * Summary: 查询应用等级
 */
func (client *Client) QueryApplevel(request *QueryApplevelRequest) (_result *QueryApplevelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryApplevelResponse{}
	_body, _err := client.QueryApplevelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据条件查询应用等级
 * Summary: 查询应用等级
 */
func (client *Client) QueryApplevelEx(request *QueryApplevelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryApplevelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryApplevelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.applevel.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据查询条件查询应用列表。
 * Summary: 查询应用
 */
func (client *Client) QueryApplication(request *QueryApplicationRequest) (_result *QueryApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryApplicationResponse{}
	_body, _err := client.QueryApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据查询条件查询应用列表。
 * Summary: 查询应用
 */
func (client *Client) QueryApplicationEx(request *QueryApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 为一个应用创建一个新版本。调用者需要拥有一个文件交换源，APPMS将从指定的文件交换源中下载应用部署包文件，文件路径与名称由调用者指定。
当应用部署包成功下载完成后，APPMS将为应用创建一个新版本，版本号由调用者指定，并关联此部署包。
 * Summary: 创建应用版本
*/
func (client *Client) CreateAppVersion(request *CreateAppVersionRequest) (_result *CreateAppVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAppVersionResponse{}
	_body, _err := client.CreateAppVersionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 为一个应用创建一个新版本。调用者需要拥有一个文件交换源，APPMS将从指定的文件交换源中下载应用部署包文件，文件路径与名称由调用者指定。
当应用部署包成功下载完成后，APPMS将为应用创建一个新版本，版本号由调用者指定，并关联此部署包。
 * Summary: 创建应用版本
*/
func (client *Client) CreateAppVersionEx(request *CreateAppVersionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAppVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAppVersionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.version.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用增量统计信息
 * Summary: 查询应用增量统计信息
 */
func (client *Client) QueryAppDelta(request *QueryAppDeltaRequest) (_result *QueryAppDeltaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppDeltaResponse{}
	_body, _err := client.QueryAppDeltaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用增量统计信息
 * Summary: 查询应用增量统计信息
 */
func (client *Client) QueryAppDeltaEx(request *QueryAppDeltaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppDeltaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppDeltaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.delta.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据指定的查询条件查询负载均衡资源列表
 * Summary: loadbalancer查询
 */
func (client *Client) QueryApplicationLoadbalancer(request *QueryApplicationLoadbalancerRequest) (_result *QueryApplicationLoadbalancerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryApplicationLoadbalancerResponse{}
	_body, _err := client.QueryApplicationLoadbalancerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据指定的查询条件查询负载均衡资源列表
 * Summary: loadbalancer查询
 */
func (client *Client) QueryApplicationLoadbalancerEx(request *QueryApplicationLoadbalancerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryApplicationLoadbalancerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryApplicationLoadbalancerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.loadbalancer.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据指定的查询条件查询数据库资源列表
 * Summary: database查询
 */
func (client *Client) QueryApplicationDatabase(request *QueryApplicationDatabaseRequest) (_result *QueryApplicationDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryApplicationDatabaseResponse{}
	_body, _err := client.QueryApplicationDatabaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据指定的查询条件查询数据库资源列表
 * Summary: database查询
 */
func (client *Client) QueryApplicationDatabaseEx(request *QueryApplicationDatabaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryApplicationDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryApplicationDatabaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.database.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取上传应用发布包临时签名地址，用于直接向阿里云OSS上传，目前只支持阿里云底座，不支持58底座。注意：该api只能生成上传应用发布包临时签名地址，不会实际上传文件。
 * Summary: 获取上传应用发布包临时签名地址
 */
func (client *Client) UploadApplicationPackage(request *UploadApplicationPackageRequest) (_result *UploadApplicationPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadApplicationPackageResponse{}
	_body, _err := client.UploadApplicationPackageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取上传应用发布包临时签名地址，用于直接向阿里云OSS上传，目前只支持阿里云底座，不支持58底座。注意：该api只能生成上传应用发布包临时签名地址，不会实际上传文件。
 * Summary: 获取上传应用发布包临时签名地址
 */
func (client *Client) UploadApplicationPackageEx(request *UploadApplicationPackageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadApplicationPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadApplicationPackageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.package.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 上传发布包成功后，同步创建对应的发布包版本信息，该接口为同步接口。
调用步骤如下：
调用antcloud.deps.application.package.upload获得上传应用发布包临时签名地址
通过阿里云OSS客户端通过应用发布包临时签名地址完成上传，并获得校验码
调用antcloud.deps.application.version.syncreate同步接口创建应用新版本
 * Summary: 同步创建对应的发布包版本信息
*/
func (client *Client) SyncreateApplicationVersion(request *SyncreateApplicationVersionRequest) (_result *SyncreateApplicationVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SyncreateApplicationVersionResponse{}
	_body, _err := client.SyncreateApplicationVersionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 上传发布包成功后，同步创建对应的发布包版本信息，该接口为同步接口。
调用步骤如下：
调用antcloud.deps.application.package.upload获得上传应用发布包临时签名地址
通过阿里云OSS客户端通过应用发布包临时签名地址完成上传，并获得校验码
调用antcloud.deps.application.version.syncreate同步接口创建应用新版本
 * Summary: 同步创建对应的发布包版本信息
*/
func (client *Client) SyncreateApplicationVersionEx(request *SyncreateApplicationVersionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SyncreateApplicationVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SyncreateApplicationVersionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.version.syncreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取connection
 * Summary: 获取connection
 */
func (client *Client) ListCloudconnectorConnection(request *ListCloudconnectorConnectionRequest) (_result *ListCloudconnectorConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListCloudconnectorConnectionResponse{}
	_body, _err := client.ListCloudconnectorConnectionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取connection
 * Summary: 获取connection
 */
func (client *Client) ListCloudconnectorConnectionEx(request *ListCloudconnectorConnectionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListCloudconnectorConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListCloudconnectorConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cloudconnector.connection.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询技术栈关系
 * Summary: 查询技术栈关系
 */
func (client *Client) QueryAppservicebuildpackrelation(request *QueryAppservicebuildpackrelationRequest) (_result *QueryAppservicebuildpackrelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppservicebuildpackrelationResponse{}
	_body, _err := client.QueryAppservicebuildpackrelationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询技术栈关系
 * Summary: 查询技术栈关系
 */
func (client *Client) QueryAppservicebuildpackrelationEx(request *QueryAppservicebuildpackrelationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppservicebuildpackrelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppservicebuildpackrelationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appservicebuildpackrelation.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新应用关系
 * Summary: 更新应用关系
 */
func (client *Client) UpdateAppservicebuildpackrelation(request *UpdateAppservicebuildpackrelationRequest) (_result *UpdateAppservicebuildpackrelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAppservicebuildpackrelationResponse{}
	_body, _err := client.UpdateAppservicebuildpackrelationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新应用关系
 * Summary: 更新应用关系
 */
func (client *Client) UpdateAppservicebuildpackrelationEx(request *UpdateAppservicebuildpackrelationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAppservicebuildpackrelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateAppservicebuildpackrelationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appservicebuildpackrelation.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询环境变量
 * Summary: 查询环境变量
 */
func (client *Client) QueryAppserviceenvparam(request *QueryAppserviceenvparamRequest) (_result *QueryAppserviceenvparamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppserviceenvparamResponse{}
	_body, _err := client.QueryAppserviceenvparamEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询环境变量
 * Summary: 查询环境变量
 */
func (client *Client) QueryAppserviceenvparamEx(request *QueryAppserviceenvparamRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppserviceenvparamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppserviceenvparamResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appserviceenvparam.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询环境变量
 * Summary: 查询环境变量
 */
func (client *Client) QueryAppserviceenvparamGroupbyappservices(request *QueryAppserviceenvparamGroupbyappservicesRequest) (_result *QueryAppserviceenvparamGroupbyappservicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppserviceenvparamGroupbyappservicesResponse{}
	_body, _err := client.QueryAppserviceenvparamGroupbyappservicesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询环境变量
 * Summary: 查询环境变量
 */
func (client *Client) QueryAppserviceenvparamGroupbyappservicesEx(request *QueryAppserviceenvparamGroupbyappservicesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppserviceenvparamGroupbyappservicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppserviceenvparamGroupbyappservicesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appserviceenvparam.groupbyappservices.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 和修改点比较查询
 * Summary: 和修改点比较查询
 */
func (client *Client) QueryAppserviceenvparamQuerywithdiff(request *QueryAppserviceenvparamQuerywithdiffRequest) (_result *QueryAppserviceenvparamQuerywithdiffResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppserviceenvparamQuerywithdiffResponse{}
	_body, _err := client.QueryAppserviceenvparamQuerywithdiffEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 和修改点比较查询
 * Summary: 和修改点比较查询
 */
func (client *Client) QueryAppserviceenvparamQuerywithdiffEx(request *QueryAppserviceenvparamQuerywithdiffRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppserviceenvparamQuerywithdiffResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppserviceenvparamQuerywithdiffResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appserviceenvparam.querywithdiff.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新参数
 * Summary: 更新参数
 */
func (client *Client) UpdateAppserviceenvparamUpdateparams(request *UpdateAppserviceenvparamUpdateparamsRequest) (_result *UpdateAppserviceenvparamUpdateparamsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAppserviceenvparamUpdateparamsResponse{}
	_body, _err := client.UpdateAppserviceenvparamUpdateparamsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新参数
 * Summary: 更新参数
 */
func (client *Client) UpdateAppserviceenvparamUpdateparamsEx(request *UpdateAppserviceenvparamUpdateparamsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAppserviceenvparamUpdateparamsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateAppserviceenvparamUpdateparamsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appserviceenvparam.updateparams.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据应用查询技术栈关系
 * Summary: 查询技术栈关系
 */
func (client *Client) QueryApptechstackrelation(request *QueryApptechstackrelationRequest) (_result *QueryApptechstackrelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryApptechstackrelationResponse{}
	_body, _err := client.QueryApptechstackrelationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据应用查询技术栈关系
 * Summary: 查询技术栈关系
 */
func (client *Client) QueryApptechstackrelationEx(request *QueryApptechstackrelationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryApptechstackrelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryApptechstackrelationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.apptechstackrelation.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新应用技术栈关系
 * Summary: 更新技术栈关系
 */
func (client *Client) UpdateApptechstackrelation(request *UpdateApptechstackrelationRequest) (_result *UpdateApptechstackrelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateApptechstackrelationResponse{}
	_body, _err := client.UpdateApptechstackrelationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新应用技术栈关系
 * Summary: 更新技术栈关系
 */
func (client *Client) UpdateApptechstackrelationEx(request *UpdateApptechstackrelationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateApptechstackrelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateApptechstackrelationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.apptechstackrelation.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-创建应用
 * Summary: 应用管理-创建应用
 */
func (client *Client) CreateApp(request *CreateAppRequest) (_result *CreateAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAppResponse{}
	_body, _err := client.CreateAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-创建应用
 * Summary: 应用管理-创建应用
 */
func (client *Client) CreateAppEx(request *CreateAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-应用分组创建
 * Summary: 应用管理-应用分组创建
 */
func (client *Client) CreateAppGroup(request *CreateAppGroupRequest) (_result *CreateAppGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAppGroupResponse{}
	_body, _err := client.CreateAppGroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-应用分组创建
 * Summary: 应用管理-应用分组创建
 */
func (client *Client) CreateAppGroupEx(request *CreateAppGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAppGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAppGroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.group.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-获取应用基本信息
 * Summary: 应用管理-获取应用基本信息
 */
func (client *Client) GetApp(request *GetAppRequest) (_result *GetAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppResponse{}
	_body, _err := client.GetAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-获取应用基本信息
 * Summary: 应用管理-获取应用基本信息
 */
func (client *Client) GetAppEx(request *GetAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-查看应用所有应用服务数量
 * Summary: 应用管理-查看应用所有应用服务数量
 */
func (client *Client) CountAppService(request *CountAppServiceRequest) (_result *CountAppServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CountAppServiceResponse{}
	_body, _err := client.CountAppServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-查看应用所有应用服务数量
 * Summary: 应用管理-查看应用所有应用服务数量
 */
func (client *Client) CountAppServiceEx(request *CountAppServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CountAppServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CountAppServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.service.count"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-获取当前应用所有环境中的部署图(经典应用服务)
 * Summary: (废弃)获取应用所有环境的部署图(经典)
 */
func (client *Client) AllAppDeployview(request *AllAppDeployviewRequest) (_result *AllAppDeployviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllAppDeployviewResponse{}
	_body, _err := client.AllAppDeployviewEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-获取当前应用所有环境中的部署图(经典应用服务)
 * Summary: (废弃)获取应用所有环境的部署图(经典)
 */
func (client *Client) AllAppDeployviewEx(request *AllAppDeployviewRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllAppDeployviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllAppDeployviewResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.deployview.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-批量查询应用
 * Summary: 应用管理-批量查询应用
 */
func (client *Client) QueryApp(request *QueryAppRequest) (_result *QueryAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppResponse{}
	_body, _err := client.QueryAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-批量查询应用
 * Summary: 应用管理-批量查询应用
 */
func (client *Client) QueryAppEx(request *QueryAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-获取应用分组
 * Summary: 应用管理-获取单个应用分组
 */
func (client *Client) GetAppGroup(request *GetAppGroupRequest) (_result *GetAppGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppGroupResponse{}
	_body, _err := client.GetAppGroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-获取应用分组
 * Summary: 应用管理-获取单个应用分组
 */
func (client *Client) GetAppGroupEx(request *GetAppGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppGroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.group.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-批量查询应用分组
 * Summary: 应用管理-批量查询应用分组
 */
func (client *Client) QueryAppGroup(request *QueryAppGroupRequest) (_result *QueryAppGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppGroupResponse{}
	_body, _err := client.QueryAppGroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-批量查询应用分组
 * Summary: 应用管理-批量查询应用分组
 */
func (client *Client) QueryAppGroupEx(request *QueryAppGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppGroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.group.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-查询当前应用的所有应用服务
 * Summary: 应用管理-查询当前应用的所有应用服务
 */
func (client *Client) QueryAppService(request *QueryAppServiceRequest) (_result *QueryAppServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppServiceResponse{}
	_body, _err := client.QueryAppServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-查询当前应用的所有应用服务
 * Summary: 应用管理-查询当前应用的所有应用服务
 */
func (client *Client) QueryAppServiceEx(request *QueryAppServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.service.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-用户收藏应用
 * Summary: 应用管理-用户收藏应用
 */
func (client *Client) CreateAppFavourite(request *CreateAppFavouriteRequest) (_result *CreateAppFavouriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAppFavouriteResponse{}
	_body, _err := client.CreateAppFavouriteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-用户收藏应用
 * Summary: 应用管理-用户收藏应用
 */
func (client *Client) CreateAppFavouriteEx(request *CreateAppFavouriteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAppFavouriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAppFavouriteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.favourite.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-用户取消收藏某应用
 * Summary: 应用管理-用户取消收藏某应用
 */
func (client *Client) DeleteAppFavourite(request *DeleteAppFavouriteRequest) (_result *DeleteAppFavouriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteAppFavouriteResponse{}
	_body, _err := client.DeleteAppFavouriteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-用户取消收藏某应用
 * Summary: 应用管理-用户取消收藏某应用
 */
func (client *Client) DeleteAppFavouriteEx(request *DeleteAppFavouriteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteAppFavouriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteAppFavouriteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.favourite.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-更新应用信息
 * Summary: 应用管理-更新应用信息
 */
func (client *Client) UpdateApp(request *UpdateAppRequest) (_result *UpdateAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAppResponse{}
	_body, _err := client.UpdateAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-更新应用信息
 * Summary: 应用管理-更新应用信息
 */
func (client *Client) UpdateAppEx(request *UpdateAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-更新应用分组信息
 * Summary: 应用管理-更新应用分组信息
 */
func (client *Client) UpdateAppGroup(request *UpdateAppGroupRequest) (_result *UpdateAppGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAppGroupResponse{}
	_body, _err := client.UpdateAppGroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-更新应用分组信息
 * Summary: 应用管理-更新应用分组信息
 */
func (client *Client) UpdateAppGroupEx(request *UpdateAppGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAppGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateAppGroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.group.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-列出当前用户收藏的应用
 * Summary: 应用管理-列出当前用户收藏的应用
 */
func (client *Client) ListAppFavourite(request *ListAppFavouriteRequest) (_result *ListAppFavouriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppFavouriteResponse{}
	_body, _err := client.ListAppFavouriteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-列出当前用户收藏的应用
 * Summary: 应用管理-列出当前用户收藏的应用
 */
func (client *Client) ListAppFavouriteEx(request *ListAppFavouriteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppFavouriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppFavouriteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.favourite.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-删除应用
 * Summary: 应用管理-删除应用
 */
func (client *Client) DeleteApp(request *DeleteAppRequest) (_result *DeleteAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteAppResponse{}
	_body, _err := client.DeleteAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-删除应用
 * Summary: 应用管理-删除应用
 */
func (client *Client) DeleteAppEx(request *DeleteAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-删除应用分组
 * Summary: 应用管理-删除应用分组
 */
func (client *Client) DeleteAppGroup(request *DeleteAppGroupRequest) (_result *DeleteAppGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteAppGroupResponse{}
	_body, _err := client.DeleteAppGroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-删除应用分组
 * Summary: 应用管理-删除应用分组
 */
func (client *Client) DeleteAppGroupEx(request *DeleteAppGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteAppGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteAppGroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.group.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-应用维度查询经典应用服务发布单
 * Summary: 应用管理-应用维度查询经典应用服务发布单
 */
func (client *Client) QueryAppPlan(request *QueryAppPlanRequest) (_result *QueryAppPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppPlanResponse{}
	_body, _err := client.QueryAppPlanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-应用维度查询经典应用服务发布单
 * Summary: 应用管理-应用维度查询经典应用服务发布单
 */
func (client *Client) QueryAppPlanEx(request *QueryAppPlanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppPlanResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.plan.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-判断应用分组是否存在。该接口判断应用分组是否存在的范围是租户级别唯一，也就是说不同级别的应用分组名称也不能同名
 * Summary: 应用管理-判断应用分组是否存在
 */
func (client *Client) ExistAppGroup(request *ExistAppGroupRequest) (_result *ExistAppGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExistAppGroupResponse{}
	_body, _err := client.ExistAppGroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-判断应用分组是否存在。该接口判断应用分组是否存在的范围是租户级别唯一，也就是说不同级别的应用分组名称也不能同名
 * Summary: 应用管理-判断应用分组是否存在
 */
func (client *Client) ExistAppGroupEx(request *ExistAppGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExistAppGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExistAppGroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.group.exist"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-当前登录用户信息查询（已废弃，用户信息应该由onex接口返回）
 * Summary: 应用管理-当前登录用户信息查询（已废弃）
 */
func (client *Client) QueryUser(request *QueryUserRequest) (_result *QueryUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUserResponse{}
	_body, _err := client.QueryUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-当前登录用户信息查询（已废弃，用户信息应该由onex接口返回）
 * Summary: 应用管理-当前登录用户信息查询（已废弃）
 */
func (client *Client) QueryUserEx(request *QueryUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.user.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用管理-判断应用是否存在
 * Summary: 应用管理-判断应用是否存在
 */
func (client *Client) ExistApp(request *ExistAppRequest) (_result *ExistAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExistAppResponse{}
	_body, _err := client.ExistAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用管理-判断应用是否存在
 * Summary: 应用管理-判断应用是否存在
 */
func (client *Client) ExistAppEx(request *ExistAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExistAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExistAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.exist"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据应用服务实例查询对应的技术栈信息
 * Summary: 查询技术栈信息
 */
func (client *Client) GetApplicationBuildpack(request *GetApplicationBuildpackRequest) (_result *GetApplicationBuildpackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetApplicationBuildpackResponse{}
	_body, _err := client.GetApplicationBuildpackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据应用服务实例查询对应的技术栈信息
 * Summary: 查询技术栈信息
 */
func (client *Client) GetApplicationBuildpackEx(request *GetApplicationBuildpackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetApplicationBuildpackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetApplicationBuildpackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.buildpack.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定应用的技术栈框架信息
 * Summary: 查询指定应用的技术栈框架信息
 */
func (client *Client) GetApplicationTechstack(request *GetApplicationTechstackRequest) (_result *GetApplicationTechstackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetApplicationTechstackResponse{}
	_body, _err := client.GetApplicationTechstackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定应用的技术栈框架信息
 * Summary: 查询指定应用的技术栈框架信息
 */
func (client *Client) GetApplicationTechstackEx(request *GetApplicationTechstackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetApplicationTechstackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetApplicationTechstackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.application.techstack.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取技术栈信息
 * Summary: 获取技术栈信息
 */
func (client *Client) GetBuildpack(request *GetBuildpackRequest) (_result *GetBuildpackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetBuildpackResponse{}
	_body, _err := client.GetBuildpackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取技术栈信息
 * Summary: 获取技术栈信息
 */
func (client *Client) GetBuildpackEx(request *GetBuildpackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetBuildpackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetBuildpackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 列出系统支持的所有技术栈框架
 * Summary: 列出系统支持的所有技术栈框架
 */
func (client *Client) ListTechstack(request *ListTechstackRequest) (_result *ListTechstackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListTechstackResponse{}
	_body, _err := client.ListTechstackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 列出系统支持的所有技术栈框架
 * Summary: 列出系统支持的所有技术栈框架
 */
func (client *Client) ListTechstackEx(request *ListTechstackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListTechstackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListTechstackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.techstack.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 搜索技术栈
 * Summary: 搜索技术栈
 */
func (client *Client) QueryBuildpack(request *QueryBuildpackRequest) (_result *QueryBuildpackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackResponse{}
	_body, _err := client.QueryBuildpackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 搜索技术栈
 * Summary: 搜索技术栈
 */
func (client *Client) QueryBuildpackEx(request *QueryBuildpackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建一个技术栈
 * Summary: 创建一个技术栈
 */
func (client *Client) CreateBuildpack(request *CreateBuildpackRequest) (_result *CreateBuildpackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBuildpackResponse{}
	_body, _err := client.CreateBuildpackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建一个技术栈
 * Summary: 创建一个技术栈
 */
func (client *Client) CreateBuildpackEx(request *CreateBuildpackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBuildpackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBuildpackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新技术栈包状态
 * Summary: 更新技术栈包状态
 */
func (client *Client) UploadfinishBuildpack(request *UploadfinishBuildpackRequest) (_result *UploadfinishBuildpackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadfinishBuildpackResponse{}
	_body, _err := client.UploadfinishBuildpackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新技术栈包状态
 * Summary: 更新技术栈包状态
 */
func (client *Client) UploadfinishBuildpackEx(request *UploadfinishBuildpackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadfinishBuildpackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadfinishBuildpackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.uploadfinish"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发布一个技术栈
 * Summary: 发布一个技术栈
 */
func (client *Client) PublishBuildpack(request *PublishBuildpackRequest) (_result *PublishBuildpackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PublishBuildpackResponse{}
	_body, _err := client.PublishBuildpackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发布一个技术栈
 * Summary: 发布一个技术栈
 */
func (client *Client) PublishBuildpackEx(request *PublishBuildpackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PublishBuildpackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PublishBuildpackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.publish"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新一个技术栈
 * Summary: 更新一个技术栈
 */
func (client *Client) UpdateBuildpack(request *UpdateBuildpackRequest) (_result *UpdateBuildpackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateBuildpackResponse{}
	_body, _err := client.UpdateBuildpackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新一个技术栈
 * Summary: 更新一个技术栈
 */
func (client *Client) UpdateBuildpackEx(request *UpdateBuildpackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateBuildpackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateBuildpackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据名称查询
 * Summary: 根据名称查询
 */
func (client *Client) QueryBuildpackFindbynames(request *QueryBuildpackFindbynamesRequest) (_result *QueryBuildpackFindbynamesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackFindbynamesResponse{}
	_body, _err := client.QueryBuildpackFindbynamesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据名称查询
 * Summary: 根据名称查询
 */
func (client *Client) QueryBuildpackFindbynamesEx(request *QueryBuildpackFindbynamesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackFindbynamesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackFindbynamesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.findbynames.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 计算
 * Summary: 计算
 */
func (client *Client) CountBuildpack(request *CountBuildpackRequest) (_result *CountBuildpackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CountBuildpackResponse{}
	_body, _err := client.CountBuildpackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 计算
 * Summary: 计算
 */
func (client *Client) CountBuildpackEx(request *CountBuildpackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CountBuildpackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CountBuildpackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.count"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 废弃
 * Summary: 废弃
 */
func (client *Client) DeprecateBuildpack(request *DeprecateBuildpackRequest) (_result *DeprecateBuildpackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeprecateBuildpackResponse{}
	_body, _err := client.DeprecateBuildpackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 废弃
 * Summary: 废弃
 */
func (client *Client) DeprecateBuildpackEx(request *DeprecateBuildpackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeprecateBuildpackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeprecateBuildpackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.deprecate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除
 * Summary: 批量删除
 */
func (client *Client) BatchdeleteBuildpack(request *BatchdeleteBuildpackRequest) (_result *BatchdeleteBuildpackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteBuildpackResponse{}
	_body, _err := client.BatchdeleteBuildpackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除
 * Summary: 批量删除
 */
func (client *Client) BatchdeleteBuildpackEx(request *BatchdeleteBuildpackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteBuildpackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteBuildpackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询是否存在
 * Summary: 查询是否存在
 */
func (client *Client) ExistBuildpack(request *ExistBuildpackRequest) (_result *ExistBuildpackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExistBuildpackResponse{}
	_body, _err := client.ExistBuildpackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询是否存在
 * Summary: 查询是否存在
 */
func (client *Client) ExistBuildpackEx(request *ExistBuildpackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExistBuildpackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExistBuildpackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.exist"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新打包状态
 * Summary: 更新打包状态
 */
func (client *Client) UpdateBuildpackUpdatepackagesstatus(request *UpdateBuildpackUpdatepackagesstatusRequest) (_result *UpdateBuildpackUpdatepackagesstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateBuildpackUpdatepackagesstatusResponse{}
	_body, _err := client.UpdateBuildpackUpdatepackagesstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新打包状态
 * Summary: 更新打包状态
 */
func (client *Client) UpdateBuildpackUpdatepackagesstatusEx(request *UpdateBuildpackUpdatepackagesstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateBuildpackUpdatepackagesstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateBuildpackUpdatepackagesstatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.updatepackagesstatus.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询版本
 * Summary: 查询版本
 */
func (client *Client) QueryBuildpackFindidversionpairsbyversion(request *QueryBuildpackFindidversionpairsbyversionRequest) (_result *QueryBuildpackFindidversionpairsbyversionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackFindidversionpairsbyversionResponse{}
	_body, _err := client.QueryBuildpackFindidversionpairsbyversionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询版本
 * Summary: 查询版本
 */
func (client *Client) QueryBuildpackFindidversionpairsbyversionEx(request *QueryBuildpackFindidversionpairsbyversionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackFindidversionpairsbyversionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackFindidversionpairsbyversionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.findidversionpairsbyversion.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据技术栈分组查询
 * Summary: 根据技术栈分组查询
 */
func (client *Client) QueryBuildpackGroupbytechstack(request *QueryBuildpackGroupbytechstackRequest) (_result *QueryBuildpackGroupbytechstackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackGroupbytechstackResponse{}
	_body, _err := client.QueryBuildpackGroupbytechstackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据技术栈分组查询
 * Summary: 根据技术栈分组查询
 */
func (client *Client) QueryBuildpackGroupbytechstackEx(request *QueryBuildpackGroupbytechstackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackGroupbytechstackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackGroupbytechstackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.groupbytechstack.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询可见技术栈
 * Summary: 查询可见技术栈
 */
func (client *Client) QueryBuildpackFindvisibletechstacks(request *QueryBuildpackFindvisibletechstacksRequest) (_result *QueryBuildpackFindvisibletechstacksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackFindvisibletechstacksResponse{}
	_body, _err := client.QueryBuildpackFindvisibletechstacksEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询可见技术栈
 * Summary: 查询可见技术栈
 */
func (client *Client) QueryBuildpackFindvisibletechstacksEx(request *QueryBuildpackFindvisibletechstacksRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackFindvisibletechstacksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackFindvisibletechstacksResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.findvisibletechstacks.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询可写技术栈
 * Summary: 查询可写技术栈
 */
func (client *Client) QueryBuildpackFindwritabletechstacks(request *QueryBuildpackFindwritabletechstacksRequest) (_result *QueryBuildpackFindwritabletechstacksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackFindwritabletechstacksResponse{}
	_body, _err := client.QueryBuildpackFindwritabletechstacksEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询可写技术栈
 * Summary: 查询可写技术栈
 */
func (client *Client) QueryBuildpackFindwritabletechstacksEx(request *QueryBuildpackFindwritabletechstacksRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackFindwritabletechstacksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackFindwritabletechstacksResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.findwritabletechstacks.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询os通过当前云
 * Summary: 查询os通过当前云
 */
func (client *Client) QueryBuildpackFindosbycurrentcloud(request *QueryBuildpackFindosbycurrentcloudRequest) (_result *QueryBuildpackFindosbycurrentcloudResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackFindosbycurrentcloudResponse{}
	_body, _err := client.QueryBuildpackFindosbycurrentcloudEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询os通过当前云
 * Summary: 查询os通过当前云
 */
func (client *Client) QueryBuildpackFindosbycurrentcloudEx(request *QueryBuildpackFindosbycurrentcloudRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackFindosbycurrentcloudResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackFindosbycurrentcloudResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.findosbycurrentcloud.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过appv1查询buildpack
 * Summary: 查询buildpack
 */
func (client *Client) QueryBuildpackFindbyappsv(request *QueryBuildpackFindbyappsvRequest) (_result *QueryBuildpackFindbyappsvResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackFindbyappsvResponse{}
	_body, _err := client.QueryBuildpackFindbyappsvEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过appv1查询buildpack
 * Summary: 查询buildpack
 */
func (client *Client) QueryBuildpackFindbyappsvEx(request *QueryBuildpackFindbyappsvRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackFindbyappsvResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackFindbyappsvResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.findbyappsv.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过app查询
 * Summary: 通过app查询
 */
func (client *Client) QueryBuildpackFindbyapps(request *QueryBuildpackFindbyappsRequest) (_result *QueryBuildpackFindbyappsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackFindbyappsResponse{}
	_body, _err := client.QueryBuildpackFindbyappsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过app查询
 * Summary: 通过app查询
 */
func (client *Client) QueryBuildpackFindbyappsEx(request *QueryBuildpackFindbyappsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackFindbyappsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackFindbyappsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.findbyapps.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过app服务查询
 * Summary: 通过app服务查询
 */
func (client *Client) QueryBuildpackFindbyappservices(request *QueryBuildpackFindbyappservicesRequest) (_result *QueryBuildpackFindbyappservicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackFindbyappservicesResponse{}
	_body, _err := client.QueryBuildpackFindbyappservicesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过app服务查询
 * Summary: 通过app服务查询
 */
func (client *Client) QueryBuildpackFindbyappservicesEx(request *QueryBuildpackFindbyappservicesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackFindbyappservicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackFindbyappservicesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.findbyappservices.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过appv1查询
 * Summary: 通过appv1查询
 */
func (client *Client) QueryBuildpackFindbyappv(request *QueryBuildpackFindbyappvRequest) (_result *QueryBuildpackFindbyappvResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackFindbyappvResponse{}
	_body, _err := client.QueryBuildpackFindbyappvEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过appv1查询
 * Summary: 通过appv1查询
 */
func (client *Client) QueryBuildpackFindbyappvEx(request *QueryBuildpackFindbyappvRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackFindbyappvResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackFindbyappvResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.findbyappv.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过app查询
 * Summary: 通过app查询
 */
func (client *Client) QueryBuildpackFindbyapp(request *QueryBuildpackFindbyappRequest) (_result *QueryBuildpackFindbyappResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackFindbyappResponse{}
	_body, _err := client.QueryBuildpackFindbyappEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过app查询
 * Summary: 通过app查询
 */
func (client *Client) QueryBuildpackFindbyappEx(request *QueryBuildpackFindbyappRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackFindbyappResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackFindbyappResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.findbyapp.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 生成url
 * Summary: 生成url
 */
func (client *Client) CreateBuildpackGeneratesignurl(request *CreateBuildpackGeneratesignurlRequest) (_result *CreateBuildpackGeneratesignurlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBuildpackGeneratesignurlResponse{}
	_body, _err := client.CreateBuildpackGeneratesignurlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 生成url
 * Summary: 生成url
 */
func (client *Client) CreateBuildpackGeneratesignurlEx(request *CreateBuildpackGeneratesignurlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBuildpackGeneratesignurlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBuildpackGeneratesignurlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.generatesignurl.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询pagessize
 * Summary: 查询pagessize
 */
func (client *Client) QueryBuildpackSumpackagessize(request *QueryBuildpackSumpackagessizeRequest) (_result *QueryBuildpackSumpackagessizeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackSumpackagessizeResponse{}
	_body, _err := client.QueryBuildpackSumpackagessizeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询pagessize
 * Summary: 查询pagessize
 */
func (client *Client) QueryBuildpackSumpackagessizeEx(request *QueryBuildpackSumpackagessizeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackSumpackagessizeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackSumpackagessizeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.sumpackagessize.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询是否supportcode
 * Summary: 查询是否supportcode
 */
func (client *Client) QueryBuildpackSupportcoderepo(request *QueryBuildpackSupportcoderepoRequest) (_result *QueryBuildpackSupportcoderepoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackSupportcoderepoResponse{}
	_body, _err := client.QueryBuildpackSupportcoderepoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询是否supportcode
 * Summary: 查询是否supportcode
 */
func (client *Client) QueryBuildpackSupportcoderepoEx(request *QueryBuildpackSupportcoderepoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackSupportcoderepoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackSupportcoderepoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.supportcoderepo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过可用的app服务id查询Composite信息
 * Summary: 查询Composite信息
 */
func (client *Client) QueryBuildpackFindavailablebyappserviceids(request *QueryBuildpackFindavailablebyappserviceidsRequest) (_result *QueryBuildpackFindavailablebyappserviceidsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackFindavailablebyappserviceidsResponse{}
	_body, _err := client.QueryBuildpackFindavailablebyappserviceidsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过可用的app服务id查询Composite信息
 * Summary: 查询Composite信息
 */
func (client *Client) QueryBuildpackFindavailablebyappserviceidsEx(request *QueryBuildpackFindavailablebyappserviceidsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackFindavailablebyappserviceidsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackFindavailablebyappserviceidsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.findavailablebyappserviceids.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: pageQuery
 * Summary: pageQuery
 */
func (client *Client) QueryBuildpacknew(request *QueryBuildpacknewRequest) (_result *QueryBuildpacknewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpacknewResponse{}
	_body, _err := client.QueryBuildpacknewEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: pageQuery
 * Summary: pageQuery
 */
func (client *Client) QueryBuildpacknewEx(request *QueryBuildpacknewRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpacknewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpacknewResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpacknew.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: buildpacknewget
 * Summary: buildpacknewget
 */
func (client *Client) GetBuildpacknew(request *GetBuildpacknewRequest) (_result *GetBuildpacknewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetBuildpacknewResponse{}
	_body, _err := client.GetBuildpacknewEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: buildpacknewget
 * Summary: buildpacknewget
 */
func (client *Client) GetBuildpacknewEx(request *GetBuildpacknewRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetBuildpacknewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetBuildpacknewResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpacknew.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: update
 * Summary: update
 */
func (client *Client) UpdateBuildpacknewUploadfinish(request *UpdateBuildpacknewUploadfinishRequest) (_result *UpdateBuildpacknewUploadfinishResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateBuildpacknewUploadfinishResponse{}
	_body, _err := client.UpdateBuildpacknewUploadfinishEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: update
 * Summary: update
 */
func (client *Client) UpdateBuildpacknewUploadfinishEx(request *UpdateBuildpacknewUploadfinishRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateBuildpacknewUploadfinishResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateBuildpacknewUploadfinishResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpacknew.uploadfinish.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: update
 * Summary: update
 */
func (client *Client) UpdateBuildpacknew(request *UpdateBuildpacknewRequest) (_result *UpdateBuildpacknewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateBuildpacknewResponse{}
	_body, _err := client.UpdateBuildpacknewEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: update
 * Summary: update
 */
func (client *Client) UpdateBuildpacknewEx(request *UpdateBuildpacknewRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateBuildpacknewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateBuildpacknewResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpacknew.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建技术栈
 * Summary: 创建技术栈
 */
func (client *Client) CreateBuildpacknew(request *CreateBuildpacknewRequest) (_result *CreateBuildpacknewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBuildpacknewResponse{}
	_body, _err := client.CreateBuildpacknewEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建技术栈
 * Summary: 创建技术栈
 */
func (client *Client) CreateBuildpacknewEx(request *CreateBuildpacknewRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBuildpacknewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBuildpacknewResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpacknew.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发布一个技术栈
 * Summary: 发布一个技术栈
 */
func (client *Client) OnlineBuildpack(request *OnlineBuildpackRequest) (_result *OnlineBuildpackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OnlineBuildpackResponse{}
	_body, _err := client.OnlineBuildpackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发布一个技术栈
 * Summary: 发布一个技术栈
 */
func (client *Client) OnlineBuildpackEx(request *OnlineBuildpackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OnlineBuildpackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OnlineBuildpackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.buildpack.online"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建一个全局参数
 * Summary: 创建一个全局参数
 */
func (client *Client) CreateConfigGlobal(request *CreateConfigGlobalRequest) (_result *CreateConfigGlobalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateConfigGlobalResponse{}
	_body, _err := client.CreateConfigGlobalEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建一个全局参数
 * Summary: 创建一个全局参数
 */
func (client *Client) CreateConfigGlobalEx(request *CreateConfigGlobalRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateConfigGlobalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateConfigGlobalResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.global.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除一个全局参数
 * Summary: 删除一个全局参数
 */
func (client *Client) DeleteConfigGlobal(request *DeleteConfigGlobalRequest) (_result *DeleteConfigGlobalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteConfigGlobalResponse{}
	_body, _err := client.DeleteConfigGlobalEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除一个全局参数
 * Summary: 删除一个全局参数
 */
func (client *Client) DeleteConfigGlobalEx(request *DeleteConfigGlobalRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteConfigGlobalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteConfigGlobalResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.global.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新指定的全局参数
 * Summary: 更新指定的全局参数
 */
func (client *Client) UpdateConfigGlobal(request *UpdateConfigGlobalRequest) (_result *UpdateConfigGlobalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateConfigGlobalResponse{}
	_body, _err := client.UpdateConfigGlobalEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新指定的全局参数
 * Summary: 更新指定的全局参数
 */
func (client *Client) UpdateConfigGlobalEx(request *UpdateConfigGlobalRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateConfigGlobalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateConfigGlobalResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.global.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据条件查询符合条件的全局参数
 * Summary: 根据条件查询符合条件的全局参数
 */
func (client *Client) QueryConfigGlobal(request *QueryConfigGlobalRequest) (_result *QueryConfigGlobalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConfigGlobalResponse{}
	_body, _err := client.QueryConfigGlobalEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据条件查询符合条件的全局参数
 * Summary: 根据条件查询符合条件的全局参数
 */
func (client *Client) QueryConfigGlobalEx(request *QueryConfigGlobalRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConfigGlobalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConfigGlobalResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.global.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个全局参数
 * Summary: 获取单个全局参数
 */
func (client *Client) GetConfigGlobal(request *GetConfigGlobalRequest) (_result *GetConfigGlobalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetConfigGlobalResponse{}
	_body, _err := client.GetConfigGlobalEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个全局参数
 * Summary: 获取单个全局参数
 */
func (client *Client) GetConfigGlobalEx(request *GetConfigGlobalRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetConfigGlobalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetConfigGlobalResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.global.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建一个应用参数
 * Summary: 创建一个应用参数
 */
func (client *Client) CreateConfigApp(request *CreateConfigAppRequest) (_result *CreateConfigAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateConfigAppResponse{}
	_body, _err := client.CreateConfigAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建一个应用参数
 * Summary: 创建一个应用参数
 */
func (client *Client) CreateConfigAppEx(request *CreateConfigAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateConfigAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateConfigAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.app.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除一个应用参数
 * Summary: 删除一个应用参数
 */
func (client *Client) DeleteConfigApp(request *DeleteConfigAppRequest) (_result *DeleteConfigAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteConfigAppResponse{}
	_body, _err := client.DeleteConfigAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除一个应用参数
 * Summary: 删除一个应用参数
 */
func (client *Client) DeleteConfigAppEx(request *DeleteConfigAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteConfigAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteConfigAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.app.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新指定的应用参数
 * Summary: 更新指定的应用参数
 */
func (client *Client) UpdateConfigApp(request *UpdateConfigAppRequest) (_result *UpdateConfigAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateConfigAppResponse{}
	_body, _err := client.UpdateConfigAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新指定的应用参数
 * Summary: 更新指定的应用参数
 */
func (client *Client) UpdateConfigAppEx(request *UpdateConfigAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateConfigAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateConfigAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.app.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取指定的应用参数
 * Summary: 获取指定的应用参数
 */
func (client *Client) GetConfigApp(request *GetConfigAppRequest) (_result *GetConfigAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetConfigAppResponse{}
	_body, _err := client.GetConfigAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取指定的应用参数
 * Summary: 获取指定的应用参数
 */
func (client *Client) GetConfigAppEx(request *GetConfigAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetConfigAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetConfigAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.app.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询符合条件的应用参数
 * Summary: 查询符合条件的应用参数
 */
func (client *Client) QueryConfigApp(request *QueryConfigAppRequest) (_result *QueryConfigAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConfigAppResponse{}
	_body, _err := client.QueryConfigAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询符合条件的应用参数
 * Summary: 查询符合条件的应用参数
 */
func (client *Client) QueryConfigAppEx(request *QueryConfigAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConfigAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConfigAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.app.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 保存一个应用参数模板草稿的修改，后端会将 state 置为 DRAFT，不会生成 version（一直为空）；此时该草稿记录可以反复被修改；点击保存时，如果参数模板还没创建（tpl_id 为空），那么后端会创建一个，如果已经存在参数模板草稿，那么更新该参数模板；
 * Summary: 将一个应用参数模板保存为草稿
 */
func (client *Client) SaveConfigTemplate(request *SaveConfigTemplateRequest) (_result *SaveConfigTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveConfigTemplateResponse{}
	_body, _err := client.SaveConfigTemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 保存一个应用参数模板草稿的修改，后端会将 state 置为 DRAFT，不会生成 version（一直为空）；此时该草稿记录可以反复被修改；点击保存时，如果参数模板还没创建（tpl_id 为空），那么后端会创建一个，如果已经存在参数模板草稿，那么更新该参数模板；
 * Summary: 将一个应用参数模板保存为草稿
 */
func (client *Client) SaveConfigTemplateEx(request *SaveConfigTemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveConfigTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveConfigTemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.template.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发布一个应用参数模板，后端会将  state 置为 RELEASE，并且自动生成 version；此时该版本就已经固定，不能修改该条记录；点击发布时，如果之前没创建过参数模板草稿（tpl_id 为空），那么直接调用创建接口，如果当前参数模板是在草稿上发布的，那么调用更新接口，将 state 置为 RELEASE，并自动生成 version；
 * Summary: 发布一个应用参数模板
 */
func (client *Client) CreateConfigTemplate(request *CreateConfigTemplateRequest) (_result *CreateConfigTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateConfigTemplateResponse{}
	_body, _err := client.CreateConfigTemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发布一个应用参数模板，后端会将  state 置为 RELEASE，并且自动生成 version；此时该版本就已经固定，不能修改该条记录；点击发布时，如果之前没创建过参数模板草稿（tpl_id 为空），那么直接调用创建接口，如果当前参数模板是在草稿上发布的，那么调用更新接口，将 state 置为 RELEASE，并自动生成 version；
 * Summary: 发布一个应用参数模板
 */
func (client *Client) CreateConfigTemplateEx(request *CreateConfigTemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateConfigTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateConfigTemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.template.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取某个应用最新版本的应用参数模板
 * Summary: 获取某个应用最新版本的应用参数模板
 */
func (client *Client) PullConfigTemplate(request *PullConfigTemplateRequest) (_result *PullConfigTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PullConfigTemplateResponse{}
	_body, _err := client.PullConfigTemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取某个应用最新版本的应用参数模板
 * Summary: 获取某个应用最新版本的应用参数模板
 */
func (client *Client) PullConfigTemplateEx(request *PullConfigTemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PullConfigTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PullConfigTemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.template.pull"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除一个应用参数模板 草稿，后端判断是否为草稿状态，如果不是，删除失败
 * Summary: 删除一个应用参数模板草稿
 */
func (client *Client) DeleteConfigTemplatedraft(request *DeleteConfigTemplatedraftRequest) (_result *DeleteConfigTemplatedraftResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteConfigTemplatedraftResponse{}
	_body, _err := client.DeleteConfigTemplatedraftEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除一个应用参数模板 草稿，后端判断是否为草稿状态，如果不是，删除失败
 * Summary: 删除一个应用参数模板草稿
 */
func (client *Client) DeleteConfigTemplatedraftEx(request *DeleteConfigTemplatedraftRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteConfigTemplatedraftResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteConfigTemplatedraftResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.templatedraft.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取某个指定的应用参数模板
 * Summary: 获取某个指定的应用参数模板
 */
func (client *Client) GetConfigTemplate(request *GetConfigTemplateRequest) (_result *GetConfigTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetConfigTemplateResponse{}
	_body, _err := client.GetConfigTemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取某个指定的应用参数模板
 * Summary: 获取某个指定的应用参数模板
 */
func (client *Client) GetConfigTemplateEx(request *GetConfigTemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetConfigTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetConfigTemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.template.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询符合条件的应用参数模板
 * Summary: 查询符合条件的应用参数模板
 */
func (client *Client) QueryConfigTemplate(request *QueryConfigTemplateRequest) (_result *QueryConfigTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryConfigTemplateResponse{}
	_body, _err := client.QueryConfigTemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询符合条件的应用参数模板
 * Summary: 查询符合条件的应用参数模板
 */
func (client *Client) QueryConfigTemplateEx(request *QueryConfigTemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryConfigTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConfigTemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.template.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 渲染一个指定的参数列表，包含渲染上下文和待解析的参数，其中 workspace_group_id 和 workspace_id 至少填一个，后端会做校验；
 * Summary: 渲染一个指定的参数列表
 */
func (client *Client) ExecConfigParse(request *ExecConfigParseRequest) (_result *ExecConfigParseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecConfigParseResponse{}
	_body, _err := client.ExecConfigParseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 渲染一个指定的参数列表，包含渲染上下文和待解析的参数，其中 workspace_group_id 和 workspace_id 至少填一个，后端会做校验；
 * Summary: 渲染一个指定的参数列表
 */
func (client *Client) ExecConfigParseEx(request *ExecConfigParseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecConfigParseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecConfigParseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.parse.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量创建全局参数
 * Summary: 批量创建全局参数
 */
func (client *Client) BatchcreateConfigGlobal(request *BatchcreateConfigGlobalRequest) (_result *BatchcreateConfigGlobalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateConfigGlobalResponse{}
	_body, _err := client.BatchcreateConfigGlobalEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量创建全局参数
 * Summary: 批量创建全局参数
 */
func (client *Client) BatchcreateConfigGlobalEx(request *BatchcreateConfigGlobalRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateConfigGlobalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateConfigGlobalResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.global.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量创建应用参数
 * Summary: 批量创建应用参数
 */
func (client *Client) BatchcreateConfigApp(request *BatchcreateConfigAppRequest) (_result *BatchcreateConfigAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateConfigAppResponse{}
	_body, _err := client.BatchcreateConfigAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量创建应用参数
 * Summary: 批量创建应用参数
 */
func (client *Client) BatchcreateConfigAppEx(request *BatchcreateConfigAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateConfigAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateConfigAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.app.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取当前租户下的站点管理员视角的树形结构：区域(region)=>机房(az)
 * Summary: 获取当前租户下的站点管理员视角的树形结构
 */
func (client *Client) GetConfigSitetree(request *GetConfigSitetreeRequest) (_result *GetConfigSitetreeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetConfigSitetreeResponse{}
	_body, _err := client.GetConfigSitetreeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取当前租户下的站点管理员视角的树形结构：区域(region)=>机房(az)
 * Summary: 获取当前租户下的站点管理员视角的树形结构
 */
func (client *Client) GetConfigSitetreeEx(request *GetConfigSitetreeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetConfigSitetreeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetConfigSitetreeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.sitetree.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取当前租户下的租户管理员视角的树形结构：工作空间组(workspaceGroup)=>工作空间(workspace)=>部署单元(cell)
 * Summary: 获取当前租户下的租户管理员视角的树形结构
 */
func (client *Client) GetConfigTenanttree(request *GetConfigTenanttreeRequest) (_result *GetConfigTenanttreeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetConfigTenanttreeResponse{}
	_body, _err := client.GetConfigTenanttreeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取当前租户下的租户管理员视角的树形结构：工作空间组(workspaceGroup)=>工作空间(workspace)=>部署单元(cell)
 * Summary: 获取当前租户下的租户管理员视角的树形结构
 */
func (client *Client) GetConfigTenanttreeEx(request *GetConfigTenanttreeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetConfigTenanttreeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetConfigTenanttreeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.tenanttree.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 检查应用参数是否已存在
 * Summary: 检查应用参数是否已存在
 */
func (client *Client) ExistConfigApp(request *ExistConfigAppRequest) (_result *ExistConfigAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExistConfigAppResponse{}
	_body, _err := client.ExistConfigAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 检查应用参数是否已存在
 * Summary: 检查应用参数是否已存在
 */
func (client *Client) ExistConfigAppEx(request *ExistConfigAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExistConfigAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExistConfigAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.app.exist"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 检查全局参数是否已存在
 * Summary: 检查全局参数是否已存在
 */
func (client *Client) ExistConfigGlobal(request *ExistConfigGlobalRequest) (_result *ExistConfigGlobalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExistConfigGlobalResponse{}
	_body, _err := client.ExistConfigGlobalEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 检查全局参数是否已存在
 * Summary: 检查全局参数是否已存在
 */
func (client *Client) ExistConfigGlobalEx(request *ExistConfigGlobalRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExistConfigGlobalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExistConfigGlobalResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.config.global.exist"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 列出指定租户下所有环境
 * Summary: 列出指定租户下所有环境
 */
func (client *Client) ListWorkspacegroup(request *ListWorkspacegroupRequest) (_result *ListWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListWorkspacegroupResponse{}
	_body, _err := client.ListWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 列出指定租户下所有环境
 * Summary: 列出指定租户下所有环境
 */
func (client *Client) ListWorkspacegroupEx(request *ListWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.workspacegroup.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定环境信息
 * Summary: 查询指定环境信息
 */
func (client *Client) GetWorkspacegroup(request *GetWorkspacegroupRequest) (_result *GetWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkspacegroupResponse{}
	_body, _err := client.GetWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定环境信息
 * Summary: 查询指定环境信息
 */
func (client *Client) GetWorkspacegroupEx(request *GetWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.workspacegroup.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询部署单元列表
 * Summary: 查询部署单元列表
 */
func (client *Client) QueryCell(request *QueryCellRequest) (_result *QueryCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCellResponse{}
	_body, _err := client.QueryCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询部署单元列表
 * Summary: 查询部署单元列表
 */
func (client *Client) QueryCellEx(request *QueryCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cell.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询环境增量统计信息
 * Summary: 查询环境增量统计信息
 */
func (client *Client) QueryWorkspaceDelta(request *QueryWorkspaceDeltaRequest) (_result *QueryWorkspaceDeltaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryWorkspaceDeltaResponse{}
	_body, _err := client.QueryWorkspaceDeltaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询环境增量统计信息
 * Summary: 查询环境增量统计信息
 */
func (client *Client) QueryWorkspaceDeltaEx(request *QueryWorkspaceDeltaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryWorkspaceDeltaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryWorkspaceDeltaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.workspace.delta.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建工作空间组。
 * Summary: 创建工作空间组
 */
func (client *Client) CreateWorkspacegroup(request *CreateWorkspacegroupRequest) (_result *CreateWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateWorkspacegroupResponse{}
	_body, _err := client.CreateWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建工作空间组。
 * Summary: 创建工作空间组
 */
func (client *Client) CreateWorkspacegroupEx(request *CreateWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.workspacegroup.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询环境组详细信息
 * Summary: 查询环境组详细信息
 */
func (client *Client) QueryWorkspacegroup(request *QueryWorkspacegroupRequest) (_result *QueryWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryWorkspacegroupResponse{}
	_body, _err := client.QueryWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询环境组详细信息
 * Summary: 查询环境组详细信息
 */
func (client *Client) QueryWorkspacegroupEx(request *QueryWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.workspacegroup.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除指定工作空间组。
 * Summary: 删除指定工作空间组。
 */
func (client *Client) DeleteWorkspacegroup(request *DeleteWorkspacegroupRequest) (_result *DeleteWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteWorkspacegroupResponse{}
	_body, _err := client.DeleteWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除指定工作空间组。
 * Summary: 删除指定工作空间组。
 */
func (client *Client) DeleteWorkspacegroupEx(request *DeleteWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.workspacegroup.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询workspace信息(V2)。
 * Summary: 查询workspace信息(V2)。
 */
func (client *Client) GetSingleworkspace(request *GetSingleworkspaceRequest) (_result *GetSingleworkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSingleworkspaceResponse{}
	_body, _err := client.GetSingleworkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询workspace信息(V2)。
 * Summary: 查询workspace信息(V2)。
 */
func (client *Client) GetSingleworkspaceEx(request *GetSingleworkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSingleworkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSingleworkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.singleworkspace.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定环境信息。
 * Summary: 查询指定环境信息。
 */
func (client *Client) GetSingleworkspacegroup(request *GetSingleworkspacegroupRequest) (_result *GetSingleworkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSingleworkspacegroupResponse{}
	_body, _err := client.GetSingleworkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定环境信息。
 * Summary: 查询指定环境信息。
 */
func (client *Client) GetSingleworkspacegroupEx(request *GetSingleworkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSingleworkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSingleworkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.singleworkspacegroup.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询部署单元列表。
 * Summary: 查询部署单元列表。
 */
func (client *Client) ListCell(request *ListCellRequest) (_result *ListCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListCellResponse{}
	_body, _err := client.ListCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询部署单元列表。
 * Summary: 查询部署单元列表。
 */
func (client *Client) ListCellEx(request *ListCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cell.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建workspace信息(V2)
 * Summary: 创建workspace信息(V2)
 */
func (client *Client) CreateSingleworkspace(request *CreateSingleworkspaceRequest) (_result *CreateSingleworkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSingleworkspaceResponse{}
	_body, _err := client.CreateSingleworkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建workspace信息(V2)
 * Summary: 创建workspace信息(V2)
 */
func (client *Client) CreateSingleworkspaceEx(request *CreateSingleworkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSingleworkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSingleworkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.singleworkspace.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除workspace信息(V2)
 * Summary: 删除workspace信息(V2)
 */
func (client *Client) DeleteSingleworkspace(request *DeleteSingleworkspaceRequest) (_result *DeleteSingleworkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSingleworkspaceResponse{}
	_body, _err := client.DeleteSingleworkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除workspace信息(V2)
 * Summary: 删除workspace信息(V2)
 */
func (client *Client) DeleteSingleworkspaceEx(request *DeleteSingleworkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSingleworkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSingleworkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.singleworkspace.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建专有网络vpc
 * Summary: 创建专有网络vpc
 */
func (client *Client) CreateVpc(request *CreateVpcRequest) (_result *CreateVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateVpcResponse{}
	_body, _err := client.CreateVpcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建专有网络vpc
 * Summary: 创建专有网络vpc
 */
func (client *Client) CreateVpcEx(request *CreateVpcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateVpcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.vpc.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新workspacegroup。
 * Summary: 更新workspacegroup。
 */
func (client *Client) UpdateWorkspacegroup(request *UpdateWorkspacegroupRequest) (_result *UpdateWorkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateWorkspacegroupResponse{}
	_body, _err := client.UpdateWorkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新workspacegroup。
 * Summary: 更新workspacegroup。
 */
func (client *Client) UpdateWorkspacegroupEx(request *UpdateWorkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateWorkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateWorkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.workspacegroup.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: update workspace meta data
 * Summary: update workspace
 */
func (client *Client) UpdateSingleworkspace(request *UpdateSingleworkspaceRequest) (_result *UpdateSingleworkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSingleworkspaceResponse{}
	_body, _err := client.UpdateSingleworkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: update workspace meta data
 * Summary: update workspace
 */
func (client *Client) UpdateSingleworkspaceEx(request *UpdateSingleworkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSingleworkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSingleworkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.singleworkspace.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: list regions
 * Summary: list regions
 */
func (client *Client) ListRegion(request *ListRegionRequest) (_result *ListRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRegionResponse{}
	_body, _err := client.ListRegionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: list regions
 * Summary: list regions
 */
func (client *Client) ListRegionEx(request *ListRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListRegionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.region.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: zone list
 * Summary: zone list
 */
func (client *Client) ListZone(request *ListZoneRequest) (_result *ListZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListZoneResponse{}
	_body, _err := client.ListZoneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: zone list
 * Summary: zone list
 */
func (client *Client) ListZoneEx(request *ListZoneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListZoneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.zone.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建逻辑单元
 * Summary: 创建逻辑单元
 */
func (client *Client) CreateCellgroup(request *CreateCellgroupRequest) (_result *CreateCellgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCellgroupResponse{}
	_body, _err := client.CreateCellgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建逻辑单元
 * Summary: 创建逻辑单元
 */
func (client *Client) CreateCellgroupEx(request *CreateCellgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCellgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateCellgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cellgroup.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除逻辑单元
 * Summary: 删除逻辑单元
 */
func (client *Client) DeleteCellgroup(request *DeleteCellgroupRequest) (_result *DeleteCellgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteCellgroupResponse{}
	_body, _err := client.DeleteCellgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除逻辑单元
 * Summary: 删除逻辑单元
 */
func (client *Client) DeleteCellgroupEx(request *DeleteCellgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteCellgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteCellgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cellgroup.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询逻辑单元
 * Summary: 查询逻辑单元
 */
func (client *Client) QueryCellgroup(request *QueryCellgroupRequest) (_result *QueryCellgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCellgroupResponse{}
	_body, _err := client.QueryCellgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询逻辑单元
 * Summary: 查询逻辑单元
 */
func (client *Client) QueryCellgroupEx(request *QueryCellgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCellgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCellgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cellgroup.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 配置逻辑单元灾备信息
 * Summary: 配置逻辑单元灾备信息
 */
func (client *Client) UpdateCellgroupDisasterinfo(request *UpdateCellgroupDisasterinfoRequest) (_result *UpdateCellgroupDisasterinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateCellgroupDisasterinfoResponse{}
	_body, _err := client.UpdateCellgroupDisasterinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 配置逻辑单元灾备信息
 * Summary: 配置逻辑单元灾备信息
 */
func (client *Client) UpdateCellgroupDisasterinfoEx(request *UpdateCellgroupDisasterinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateCellgroupDisasterinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateCellgroupDisasterinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cellgroup.disasterinfo.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建部署单元
 * Summary: 创建部署单元
 */
func (client *Client) CreateDeploymentCell(request *CreateDeploymentCellRequest) (_result *CreateDeploymentCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDeploymentCellResponse{}
	_body, _err := client.CreateDeploymentCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建部署单元
 * Summary: 创建部署单元
 */
func (client *Client) CreateDeploymentCellEx(request *CreateDeploymentCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDeploymentCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDeploymentCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.deployment.cell.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除部署单元
 * Summary: 删除部署单元
 */
func (client *Client) DeleteDeploymentCell(request *DeleteDeploymentCellRequest) (_result *DeleteDeploymentCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDeploymentCellResponse{}
	_body, _err := client.DeleteDeploymentCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除部署单元
 * Summary: 删除部署单元
 */
func (client *Client) DeleteDeploymentCellEx(request *DeleteDeploymentCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDeploymentCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDeploymentCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.deployment.cell.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询部署单元
 * Summary: 查询部署单元
 */
func (client *Client) QueryDeploymentCell(request *QueryDeploymentCellRequest) (_result *QueryDeploymentCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDeploymentCellResponse{}
	_body, _err := client.QueryDeploymentCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询部署单元
 * Summary: 查询部署单元
 */
func (client *Client) QueryDeploymentCellEx(request *QueryDeploymentCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDeploymentCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeploymentCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.deployment.cell.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新部署单元
 * Summary: 更新部署单元
 */
func (client *Client) UpdateDeploymentCell(request *UpdateDeploymentCellRequest) (_result *UpdateDeploymentCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDeploymentCellResponse{}
	_body, _err := client.UpdateDeploymentCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新部署单元
 * Summary: 更新部署单元
 */
func (client *Client) UpdateDeploymentCellEx(request *UpdateDeploymentCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDeploymentCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDeploymentCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.deployment.cell.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询部署单基础信息
 * Summary: 批量查询部署单基础信息
 */
func (client *Client) QueryDeployment(request *QueryDeploymentRequest) (_result *QueryDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDeploymentResponse{}
	_body, _err := client.QueryDeploymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询部署单基础信息
 * Summary: 批量查询部署单基础信息
 */
func (client *Client) QueryDeploymentEx(request *QueryDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.deployment.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对一个部署单执行取消操作。
当部署单处于以下状态时可执行取消操作：
INITED：初始化完成
INIT_FAILED：初始化失败
 * Summary: 取消发布
*/
func (client *Client) CancelDeployment(request *CancelDeploymentRequest) (_result *CancelDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelDeploymentResponse{}
	_body, _err := client.CancelDeploymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对一个部署单执行取消操作。
当部署单处于以下状态时可执行取消操作：
INITED：初始化完成
INIT_FAILED：初始化失败
 * Summary: 取消发布
*/
func (client *Client) CancelDeploymentEx(request *CancelDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.deployment.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建一个部署单，以对一组应用（服务）执行一次部署操作。
- 部署依赖示例
假设一个部署单将要部署myapp1、myapp2、myapp3，其中myapp1依赖myapp2、myapp3，则应输入参数：
applications.1.name=myapp1&applications.2.name=myapp2&applications.3.name=myapp3&applications.1.depends.1=myapp2&applications.1.depends.2=myapp3
 * Summary: 创建发布
*/
func (client *Client) CreateDeployment(request *CreateDeploymentRequest) (_result *CreateDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDeploymentResponse{}
	_body, _err := client.CreateDeploymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建一个部署单，以对一组应用（服务）执行一次部署操作。
- 部署依赖示例
假设一个部署单将要部署myapp1、myapp2、myapp3，其中myapp1依赖myapp2、myapp3，则应输入参数：
applications.1.name=myapp1&applications.2.name=myapp2&applications.3.name=myapp3&applications.1.depends.1=myapp2&applications.1.depends.2=myapp3
 * Summary: 创建发布
*/
func (client *Client) CreateDeploymentEx(request *CreateDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.deployment.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询一个已经创建成功的部署操作。
 * Summary: 获取部署
 */
func (client *Client) GetDeployment(request *GetDeploymentRequest) (_result *GetDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetDeploymentResponse{}
	_body, _err := client.GetDeploymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询一个已经创建成功的部署操作。
 * Summary: 获取部署
 */
func (client *Client) GetDeploymentEx(request *GetDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.deployment.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对一个部署操作中所有部署失败的分组进行重试操作。
当部署单处于以下状态时可执行重试操作：
- FAILED：执行失败
 * Summary: 重试部署
*/
func (client *Client) RetryDeployment(request *RetryDeploymentRequest) (_result *RetryDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryDeploymentResponse{}
	_body, _err := client.RetryDeploymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对一个部署操作中所有部署失败的分组进行重试操作。
当部署单处于以下状态时可执行重试操作：
- FAILED：执行失败
 * Summary: 重试部署
*/
func (client *Client) RetryDeploymentEx(request *RetryDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.deployment.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开始执行一个已经创建成功的部署操作。如果此部署单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始部署
 */
func (client *Client) StartDeployment(request *StartDeploymentRequest) (_result *StartDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDeploymentResponse{}
	_body, _err := client.StartDeploymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开始执行一个已经创建成功的部署操作。如果此部署单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始部署
 */
func (client *Client) StartDeploymentEx(request *StartDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.deployment.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询一个部署操作中某个应用（服务）的详情。
 * Summary: 获取部署应用（服务）
 */
func (client *Client) GetDeploymentApplication(request *GetDeploymentApplicationRequest) (_result *GetDeploymentApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetDeploymentApplicationResponse{}
	_body, _err := client.GetDeploymentApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询一个部署操作中某个应用（服务）的详情。
 * Summary: 获取部署应用（服务）
 */
func (client *Client) GetDeploymentApplicationEx(request *GetDeploymentApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetDeploymentApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDeploymentApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.deployment.application.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对一个部署操作中，某个应用（服务）的部署操作执行回滚。执行成功后，将回滚到上次成功部署的版本。一个应用（服务）只可以执行一次回滚操作，即已执行回滚操作的应用无论回滚成功与否都无法再次回滚。
当部署的应用（服务）且应用（服务）对应的部署单处于以下状态时可执行回滚：
- EXECUTING：执行中
- SUCCESS：执行成功
- FAILED：执行失败
 * Summary: 回滚部署
*/
func (client *Client) RollbackDeploymentApplication(request *RollbackDeploymentApplicationRequest) (_result *RollbackDeploymentApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RollbackDeploymentApplicationResponse{}
	_body, _err := client.RollbackDeploymentApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对一个部署操作中，某个应用（服务）的部署操作执行回滚。执行成功后，将回滚到上次成功部署的版本。一个应用（服务）只可以执行一次回滚操作，即已执行回滚操作的应用无论回滚成功与否都无法再次回滚。
当部署的应用（服务）且应用（服务）对应的部署单处于以下状态时可执行回滚：
- EXECUTING：执行中
- SUCCESS：执行成功
- FAILED：执行失败
 * Summary: 回滚部署
*/
func (client *Client) RollbackDeploymentApplicationEx(request *RollbackDeploymentApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RollbackDeploymentApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RollbackDeploymentApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.deployment.application.rollback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重新初始化一个初始化失败的部署单。当部署单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化部署
 */
func (client *Client) ReinitDeployment(request *ReinitDeploymentRequest) (_result *ReinitDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReinitDeploymentResponse{}
	_body, _err := client.ReinitDeploymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重新初始化一个初始化失败的部署单。当部署单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化部署
 */
func (client *Client) ReinitDeploymentEx(request *ReinitDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReinitDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReinitDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.deployment.reinit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据查询条件查询指令模板。
 * Summary: 查询指令模板
 */
func (client *Client) QueryCmdtemplate(request *QueryCmdtemplateRequest) (_result *QueryCmdtemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCmdtemplateResponse{}
	_body, _err := client.QueryCmdtemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据查询条件查询指令模板。
 * Summary: 查询指令模板
 */
func (client *Client) QueryCmdtemplateEx(request *QueryCmdtemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCmdtemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCmdtemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cmdtemplate.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取指令模板详情。
 * Summary: 获取指令模板详情。
 */
func (client *Client) GetCmdtemplate(request *GetCmdtemplateRequest) (_result *GetCmdtemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetCmdtemplateResponse{}
	_body, _err := client.GetCmdtemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取指令模板详情。
 * Summary: 获取指令模板详情。
 */
func (client *Client) GetCmdtemplateEx(request *GetCmdtemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetCmdtemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetCmdtemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cmdtemplate.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 同步执行指令。
 * Summary: 同步执行指令。
 */
func (client *Client) SyncexecuteCmdTask(request *SyncexecuteCmdTaskRequest) (_result *SyncexecuteCmdTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SyncexecuteCmdTaskResponse{}
	_body, _err := client.SyncexecuteCmdTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 同步执行指令。
 * Summary: 同步执行指令。
 */
func (client *Client) SyncexecuteCmdTaskEx(request *SyncexecuteCmdTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SyncexecuteCmdTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SyncexecuteCmdTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cmd.task.syncexecute"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 异步执行指令。
 * Summary: 异步执行指令。
 */
func (client *Client) AsyncexecuteCmdTask(request *AsyncexecuteCmdTaskRequest) (_result *AsyncexecuteCmdTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AsyncexecuteCmdTaskResponse{}
	_body, _err := client.AsyncexecuteCmdTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 异步执行指令。
 * Summary: 异步执行指令。
 */
func (client *Client) AsyncexecuteCmdTaskEx(request *AsyncexecuteCmdTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AsyncexecuteCmdTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AsyncexecuteCmdTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cmd.task.asyncexecute"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询执行指令任务结果。
 * Summary: 查询执行指令任务结果。
 */
func (client *Client) GetCmdTask(request *GetCmdTaskRequest) (_result *GetCmdTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetCmdTaskResponse{}
	_body, _err := client.GetCmdTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询执行指令任务结果。
 * Summary: 查询执行指令任务结果。
 */
func (client *Client) GetCmdTaskEx(request *GetCmdTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetCmdTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetCmdTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cmd.task.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建一个应用运维单，以对一组应用（服务）执行一次运维操作
 * Summary: 创建一个应用（服务）运维单
 */
func (client *Client) CreateAppops(request *CreateAppopsRequest) (_result *CreateAppopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAppopsResponse{}
	_body, _err := client.CreateAppopsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建一个应用运维单，以对一组应用（服务）执行一次运维操作
 * Summary: 创建一个应用（服务）运维单
 */
func (client *Client) CreateAppopsEx(request *CreateAppopsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAppopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAppopsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appops.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询一个已经创建成功的运维操作。
 * Summary: 获取运维单
 */
func (client *Client) GetAppops(request *GetAppopsRequest) (_result *GetAppopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppopsResponse{}
	_body, _err := client.GetAppopsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询一个已经创建成功的运维操作。
 * Summary: 获取运维单
 */
func (client *Client) GetAppopsEx(request *GetAppopsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppopsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appops.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开始执行一个已经创建成功的运维操作。如果此运维单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始运维
 */
func (client *Client) StartAppops(request *StartAppopsRequest) (_result *StartAppopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAppopsResponse{}
	_body, _err := client.StartAppopsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开始执行一个已经创建成功的运维操作。如果此运维单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始运维
 */
func (client *Client) StartAppopsEx(request *StartAppopsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAppopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAppopsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appops.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重新初始化一个初始化失败的运维单。当运维单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化运维
 */
func (client *Client) ReinitAppops(request *ReinitAppopsRequest) (_result *ReinitAppopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReinitAppopsResponse{}
	_body, _err := client.ReinitAppopsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重新初始化一个初始化失败的运维单。当运维单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化运维
 */
func (client *Client) ReinitAppopsEx(request *ReinitAppopsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReinitAppopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReinitAppopsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appops.reinit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对一个运维单执行取消操作。
当运维单处于以下状态时可执行取消操作：
INITED：初始化完成
INIT_FAILED：初始化失败
 * Summary: 取消发布
*/
func (client *Client) CancelAppops(request *CancelAppopsRequest) (_result *CancelAppopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelAppopsResponse{}
	_body, _err := client.CancelAppopsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对一个运维单执行取消操作。
当运维单处于以下状态时可执行取消操作：
INITED：初始化完成
INIT_FAILED：初始化失败
 * Summary: 取消发布
*/
func (client *Client) CancelAppopsEx(request *CancelAppopsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelAppopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelAppopsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appops.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对一个运维操作中所有运维失败的分组进行重试操作。
当运维单处于以下状态时可执行重试操作：
- FAILED：执行失败
 * Summary: 重试运维
*/
func (client *Client) RetryAppops(request *RetryAppopsRequest) (_result *RetryAppopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryAppopsResponse{}
	_body, _err := client.RetryAppopsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对一个运维操作中所有运维失败的分组进行重试操作。
当运维单处于以下状态时可执行重试操作：
- FAILED：执行失败
 * Summary: 重试运维
*/
func (client *Client) RetryAppopsEx(request *RetryAppopsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryAppopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryAppopsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appops.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建一个机器运维单，以对一组或多组机器执行一次运维操作
 * Summary: 创建一个机器运维单
 */
func (client *Client) CreateComputerops(request *CreateComputeropsRequest) (_result *CreateComputeropsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateComputeropsResponse{}
	_body, _err := client.CreateComputeropsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建一个机器运维单，以对一组或多组机器执行一次运维操作
 * Summary: 创建一个机器运维单
 */
func (client *Client) CreateComputeropsEx(request *CreateComputeropsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateComputeropsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateComputeropsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.computerops.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询一个已经创建成功的机器运维操作。
 * Summary: 获取运维单
 */
func (client *Client) GetComputerops(request *GetComputeropsRequest) (_result *GetComputeropsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetComputeropsResponse{}
	_body, _err := client.GetComputeropsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询一个已经创建成功的机器运维操作。
 * Summary: 获取运维单
 */
func (client *Client) GetComputeropsEx(request *GetComputeropsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetComputeropsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetComputeropsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.computerops.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开始执行一个已经创建成功的机器运维操作。如果此运维单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始运维
 */
func (client *Client) StartComputerops(request *StartComputeropsRequest) (_result *StartComputeropsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartComputeropsResponse{}
	_body, _err := client.StartComputeropsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开始执行一个已经创建成功的机器运维操作。如果此运维单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始运维
 */
func (client *Client) StartComputeropsEx(request *StartComputeropsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartComputeropsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartComputeropsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.computerops.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重新初始化一个初始化失败的机器运维单。当运维单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化运维
 */
func (client *Client) ReinitComputerops(request *ReinitComputeropsRequest) (_result *ReinitComputeropsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReinitComputeropsResponse{}
	_body, _err := client.ReinitComputeropsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重新初始化一个初始化失败的机器运维单。当运维单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化运维
 */
func (client *Client) ReinitComputeropsEx(request *ReinitComputeropsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReinitComputeropsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReinitComputeropsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.computerops.reinit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对一个机器运维单执行取消操作。
当运维单处于以下状态时可执行取消操作：
INITED：初始化完成
INIT_FAILED：初始化失败
 * Summary: 取消发布
*/
func (client *Client) CancelComputerops(request *CancelComputeropsRequest) (_result *CancelComputeropsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelComputeropsResponse{}
	_body, _err := client.CancelComputeropsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对一个机器运维单执行取消操作。
当运维单处于以下状态时可执行取消操作：
INITED：初始化完成
INIT_FAILED：初始化失败
 * Summary: 取消发布
*/
func (client *Client) CancelComputeropsEx(request *CancelComputeropsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelComputeropsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelComputeropsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.computerops.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对一个机器运维操作中所有运维失败的分组进行重试操作。
当运维单处于以下状态时可执行重试操作：
- FAILED：执行失败
 * Summary: 重试运维
*/
func (client *Client) RetryComputerops(request *RetryComputeropsRequest) (_result *RetryComputeropsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryComputeropsResponse{}
	_body, _err := client.RetryComputeropsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对一个机器运维操作中所有运维失败的分组进行重试操作。
当运维单处于以下状态时可执行重试操作：
- FAILED：执行失败
 * Summary: 重试运维
*/
func (client *Client) RetryComputeropsEx(request *RetryComputeropsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryComputeropsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryComputeropsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.computerops.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用服务的运维历史。
 * Summary: 查询应用服务的运维历史。
 */
func (client *Client) QueryOpsappsvc(request *QueryOpsappsvcRequest) (_result *QueryOpsappsvcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOpsappsvcResponse{}
	_body, _err := client.QueryOpsappsvcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用服务的运维历史。
 * Summary: 查询应用服务的运维历史。
 */
func (client *Client) QueryOpsappsvcEx(request *QueryOpsappsvcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOpsappsvcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOpsappsvcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.opsappsvc.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 异步执行Bash命令。
 * Summary: 异步执行Bash命令。
 */
func (client *Client) AsyncexecuteBashcmd(request *AsyncexecuteBashcmdRequest) (_result *AsyncexecuteBashcmdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AsyncexecuteBashcmdResponse{}
	_body, _err := client.AsyncexecuteBashcmdEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 异步执行Bash命令。
 * Summary: 异步执行Bash命令。
 */
func (client *Client) AsyncexecuteBashcmdEx(request *AsyncexecuteBashcmdRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AsyncexecuteBashcmdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AsyncexecuteBashcmdResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bashcmd.asyncexecute"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据异步执行bash命令的任务ID查询结果。
 * Summary: 根据异步执行bash命令的任务ID查询结果。
 */
func (client *Client) GetBashcmdResult(request *GetBashcmdResultRequest) (_result *GetBashcmdResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetBashcmdResultResponse{}
	_body, _err := client.GetBashcmdResultEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据异步执行bash命令的任务ID查询结果。
 * Summary: 根据异步执行bash命令的任务ID查询结果。
 */
func (client *Client) GetBashcmdResultEx(request *GetBashcmdResultRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetBashcmdResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetBashcmdResultResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bashcmd.result.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询当前环境是否已开通蓝绿发布
 * Summary: 查询当前环境是否已开通蓝绿发布
 */
func (client *Client) CheckCloudconfigBgrelease(request *CheckCloudconfigBgreleaseRequest) (_result *CheckCloudconfigBgreleaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckCloudconfigBgreleaseResponse{}
	_body, _err := client.CheckCloudconfigBgreleaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询当前环境是否已开通蓝绿发布
 * Summary: 查询当前环境是否已开通蓝绿发布
 */
func (client *Client) CheckCloudconfigBgreleaseEx(request *CheckCloudconfigBgreleaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckCloudconfigBgreleaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckCloudconfigBgreleaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cloudconfig.bgrelease.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询是否已开通蓝绿发布部署单元
 * Summary: 查询是否已开通蓝绿发布部署单元
 */
func (client *Client) CheckCloudconfigBgdeploymentcell(request *CheckCloudconfigBgdeploymentcellRequest) (_result *CheckCloudconfigBgdeploymentcellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckCloudconfigBgdeploymentcellResponse{}
	_body, _err := client.CheckCloudconfigBgdeploymentcellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询是否已开通蓝绿发布部署单元
 * Summary: 查询是否已开通蓝绿发布部署单元
 */
func (client *Client) CheckCloudconfigBgdeploymentcellEx(request *CheckCloudconfigBgdeploymentcellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckCloudconfigBgdeploymentcellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckCloudconfigBgdeploymentcellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cloudconfig.bgdeploymentcell.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询是否已开通应用服务
 * Summary: 查询是否已开通应用服务
 */
func (client *Client) CheckCloudconfigAppservice(request *CheckCloudconfigAppserviceRequest) (_result *CheckCloudconfigAppserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckCloudconfigAppserviceResponse{}
	_body, _err := client.CheckCloudconfigAppserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询是否已开通应用服务
 * Summary: 查询是否已开通应用服务
 */
func (client *Client) CheckCloudconfigAppserviceEx(request *CheckCloudconfigAppserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckCloudconfigAppserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckCloudconfigAppserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cloudconfig.appservice.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询是否已开通共享中间件
 * Summary: 查询是否已开通共享中间件
 */
func (client *Client) CheckCloudconfigSharedmw(request *CheckCloudconfigSharedmwRequest) (_result *CheckCloudconfigSharedmwResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckCloudconfigSharedmwResponse{}
	_body, _err := client.CheckCloudconfigSharedmwEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询是否已开通共享中间件
 * Summary: 查询是否已开通共享中间件
 */
func (client *Client) CheckCloudconfigSharedmwEx(request *CheckCloudconfigSharedmwRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckCloudconfigSharedmwResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckCloudconfigSharedmwResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cloudconfig.sharedmw.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询是否使用 v1 发布策略
 * Summary: 查询是否使用 v1 发布策略
 */
func (client *Client) CheckCloudconfigVonerelease(request *CheckCloudconfigVonereleaseRequest) (_result *CheckCloudconfigVonereleaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckCloudconfigVonereleaseResponse{}
	_body, _err := client.CheckCloudconfigVonereleaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询是否使用 v1 发布策略
 * Summary: 查询是否使用 v1 发布策略
 */
func (client *Client) CheckCloudconfigVonereleaseEx(request *CheckCloudconfigVonereleaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckCloudconfigVonereleaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckCloudconfigVonereleaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cloudconfig.vonerelease.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询是否使用 v1 应用运维策略
 * Summary: 查询是否使用 v1 应用运维策略
 */
func (client *Client) CheckCloudconfigVoneappops(request *CheckCloudconfigVoneappopsRequest) (_result *CheckCloudconfigVoneappopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckCloudconfigVoneappopsResponse{}
	_body, _err := client.CheckCloudconfigVoneappopsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询是否使用 v1 应用运维策略
 * Summary: 查询是否使用 v1 应用运维策略
 */
func (client *Client) CheckCloudconfigVoneappopsEx(request *CheckCloudconfigVoneappopsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckCloudconfigVoneappopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckCloudconfigVoneappopsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cloudconfig.voneappops.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询是否使用老版本界面
 * Summary: 查询是否使用老版本界面
 */
func (client *Client) CheckCloudconfigOldui(request *CheckCloudconfigOlduiRequest) (_result *CheckCloudconfigOlduiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckCloudconfigOlduiResponse{}
	_body, _err := client.CheckCloudconfigOlduiEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询是否使用老版本界面
 * Summary: 查询是否使用老版本界面
 */
func (client *Client) CheckCloudconfigOlduiEx(request *CheckCloudconfigOlduiRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckCloudconfigOlduiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckCloudconfigOlduiResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cloudconfig.oldui.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 是否禁用 XDC LB
 * Summary: 是否禁用 XDC LB
 */
func (client *Client) CheckCloudconfigXdclbforbidden(request *CheckCloudconfigXdclbforbiddenRequest) (_result *CheckCloudconfigXdclbforbiddenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckCloudconfigXdclbforbiddenResponse{}
	_body, _err := client.CheckCloudconfigXdclbforbiddenEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 是否禁用 XDC LB
 * Summary: 是否禁用 XDC LB
 */
func (client *Client) CheckCloudconfigXdclbforbiddenEx(request *CheckCloudconfigXdclbforbiddenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckCloudconfigXdclbforbiddenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckCloudconfigXdclbforbiddenResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cloudconfig.xdclbforbidden.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询 openapi 配置信息
 * Summary: 查询 openapi 配置信息
 */
func (client *Client) QueryCloudconfigOpenapiconfig(request *QueryCloudconfigOpenapiconfigRequest) (_result *QueryCloudconfigOpenapiconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCloudconfigOpenapiconfigResponse{}
	_body, _err := client.QueryCloudconfigOpenapiconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询 openapi 配置信息
 * Summary: 查询 openapi 配置信息
 */
func (client *Client) QueryCloudconfigOpenapiconfigEx(request *QueryCloudconfigOpenapiconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCloudconfigOpenapiconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCloudconfigOpenapiconfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.cloudconfig.openapiconfig.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用包个数
 * Summary: 查询应用包个数
 */
func (client *Client) CountAppsPkg(request *CountAppsPkgRequest) (_result *CountAppsPkgResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CountAppsPkgResponse{}
	_body, _err := client.CountAppsPkgEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用包个数
 * Summary: 查询应用包个数
 */
func (client *Client) CountAppsPkgEx(request *CountAppsPkgRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CountAppsPkgResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CountAppsPkgResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.apps.pkg.count"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询app下的资源统计
 * Summary: 查询app下的资源统计
 */
func (client *Client) QueryAppUnitresources(request *QueryAppUnitresourcesRequest) (_result *QueryAppUnitresourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppUnitresourcesResponse{}
	_body, _err := client.QueryAppUnitresourcesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询app下的资源统计
 * Summary: 查询app下的资源统计
 */
func (client *Client) QueryAppUnitresourcesEx(request *QueryAppUnitresourcesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppUnitresourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppUnitresourcesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.app.unitresources.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询认证 token
 * Summary: 查询认证 token
 */
func (client *Client) QueryOauthToken(request *QueryOauthTokenRequest) (_result *QueryOauthTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOauthTokenResponse{}
	_body, _err := client.QueryOauthTokenEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询认证 token
 * Summary: 查询认证 token
 */
func (client *Client) QueryOauthTokenEx(request *QueryOauthTokenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOauthTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOauthTokenResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.oauth.token.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建或更新 token
 * Summary: 创建或更新 token
 */
func (client *Client) UpdateOauthToken(request *UpdateOauthTokenRequest) (_result *UpdateOauthTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateOauthTokenResponse{}
	_body, _err := client.UpdateOauthTokenEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建或更新 token
 * Summary: 创建或更新 token
 */
func (client *Client) UpdateOauthTokenEx(request *UpdateOauthTokenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateOauthTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateOauthTokenResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.oauth.token.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除 token
 * Summary: 删除 token
 */
func (client *Client) DeleteOauthToken(request *DeleteOauthTokenRequest) (_result *DeleteOauthTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteOauthTokenResponse{}
	_body, _err := client.DeleteOauthTokenEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除 token
 * Summary: 删除 token
 */
func (client *Client) DeleteOauthTokenEx(request *DeleteOauthTokenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteOauthTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteOauthTokenResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.oauth.token.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询 DZ
 * Summary: 查询 DZ
 */
func (client *Client) QueryBaseinfoDeploymentzones(request *QueryBaseinfoDeploymentzonesRequest) (_result *QueryBaseinfoDeploymentzonesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBaseinfoDeploymentzonesResponse{}
	_body, _err := client.QueryBaseinfoDeploymentzonesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询 DZ
 * Summary: 查询 DZ
 */
func (client *Client) QueryBaseinfoDeploymentzonesEx(request *QueryBaseinfoDeploymentzonesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBaseinfoDeploymentzonesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBaseinfoDeploymentzonesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.baseinfo.deploymentzones.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取蓝绿发布概览
 * Summary: 获取蓝绿发布概览
 */
func (client *Client) GetBgreleaseArrangement(request *GetBgreleaseArrangementRequest) (_result *GetBgreleaseArrangementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetBgreleaseArrangementResponse{}
	_body, _err := client.GetBgreleaseArrangementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取蓝绿发布概览
 * Summary: 获取蓝绿发布概览
 */
func (client *Client) GetBgreleaseArrangementEx(request *GetBgreleaseArrangementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetBgreleaseArrangementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetBgreleaseArrangementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.arrangement.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询蓝绿发布概览
 * Summary: 查询蓝绿发布概览
 */
func (client *Client) QueryBgreleaseArrangement(request *QueryBgreleaseArrangementRequest) (_result *QueryBgreleaseArrangementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBgreleaseArrangementResponse{}
	_body, _err := client.QueryBgreleaseArrangementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询蓝绿发布概览
 * Summary: 查询蓝绿发布概览
 */
func (client *Client) QueryBgreleaseArrangementEx(request *QueryBgreleaseArrangementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBgreleaseArrangementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBgreleaseArrangementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.arrangement.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询蓝绿发布进度
 * Summary: 查询蓝绿发布进度
 */
func (client *Client) QueryBgreleaseArrangementprogress(request *QueryBgreleaseArrangementprogressRequest) (_result *QueryBgreleaseArrangementprogressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBgreleaseArrangementprogressResponse{}
	_body, _err := client.QueryBgreleaseArrangementprogressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询蓝绿发布进度
 * Summary: 查询蓝绿发布进度
 */
func (client *Client) QueryBgreleaseArrangementprogressEx(request *QueryBgreleaseArrangementprogressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBgreleaseArrangementprogressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBgreleaseArrangementprogressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.arrangementprogress.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询蓝绿发布任务进度
 * Summary: 查询蓝绿发布任务进度
 */
func (client *Client) QueryBgreleaseTaskprogress(request *QueryBgreleaseTaskprogressRequest) (_result *QueryBgreleaseTaskprogressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBgreleaseTaskprogressResponse{}
	_body, _err := client.QueryBgreleaseTaskprogressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询蓝绿发布任务进度
 * Summary: 查询蓝绿发布任务进度
 */
func (client *Client) QueryBgreleaseTaskprogressEx(request *QueryBgreleaseTaskprogressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBgreleaseTaskprogressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBgreleaseTaskprogressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.taskprogress.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 执行蓝绿发布
 * Summary: 执行蓝绿发布
 */
func (client *Client) ExecBgreleaseArrangement(request *ExecBgreleaseArrangementRequest) (_result *ExecBgreleaseArrangementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecBgreleaseArrangementResponse{}
	_body, _err := client.ExecBgreleaseArrangementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 执行蓝绿发布
 * Summary: 执行蓝绿发布
 */
func (client *Client) ExecBgreleaseArrangementEx(request *ExecBgreleaseArrangementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecBgreleaseArrangementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecBgreleaseArrangementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.arrangement.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 验证确认蓝绿发布
 * Summary: 验证确认蓝绿发布
 */
func (client *Client) ConfirmBgreleaseArrangement(request *ConfirmBgreleaseArrangementRequest) (_result *ConfirmBgreleaseArrangementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmBgreleaseArrangementResponse{}
	_body, _err := client.ConfirmBgreleaseArrangementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 验证确认蓝绿发布
 * Summary: 验证确认蓝绿发布
 */
func (client *Client) ConfirmBgreleaseArrangementEx(request *ConfirmBgreleaseArrangementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmBgreleaseArrangementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmBgreleaseArrangementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.arrangement.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 蓝绿验证确认
 * Summary: 蓝绿验证确认
 */
func (client *Client) ConfirmBgreleaseArrangementvalidation(request *ConfirmBgreleaseArrangementvalidationRequest) (_result *ConfirmBgreleaseArrangementvalidationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmBgreleaseArrangementvalidationResponse{}
	_body, _err := client.ConfirmBgreleaseArrangementvalidationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 蓝绿验证确认
 * Summary: 蓝绿验证确认
 */
func (client *Client) ConfirmBgreleaseArrangementvalidationEx(request *ConfirmBgreleaseArrangementvalidationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmBgreleaseArrangementvalidationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmBgreleaseArrangementvalidationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.arrangementvalidation.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重试蓝绿发布
 * Summary: 重试蓝绿发布
 */
func (client *Client) RetryBgreleaseArrangement(request *RetryBgreleaseArrangementRequest) (_result *RetryBgreleaseArrangementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryBgreleaseArrangementResponse{}
	_body, _err := client.RetryBgreleaseArrangementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重试蓝绿发布
 * Summary: 重试蓝绿发布
 */
func (client *Client) RetryBgreleaseArrangementEx(request *RetryBgreleaseArrangementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryBgreleaseArrangementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryBgreleaseArrangementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.arrangement.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重试蓝绿发布任务
 * Summary: 重试蓝绿发布任务
 */
func (client *Client) RetryBgreleaseTask(request *RetryBgreleaseTaskRequest) (_result *RetryBgreleaseTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryBgreleaseTaskResponse{}
	_body, _err := client.RetryBgreleaseTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重试蓝绿发布任务
 * Summary: 重试蓝绿发布任务
 */
func (client *Client) RetryBgreleaseTaskEx(request *RetryBgreleaseTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryBgreleaseTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryBgreleaseTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.task.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 跳过蓝绿发布任务
 * Summary: 跳过蓝绿发布任务
 */
func (client *Client) SkipBgreleaseTask(request *SkipBgreleaseTaskRequest) (_result *SkipBgreleaseTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SkipBgreleaseTaskResponse{}
	_body, _err := client.SkipBgreleaseTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 跳过蓝绿发布任务
 * Summary: 跳过蓝绿发布任务
 */
func (client *Client) SkipBgreleaseTaskEx(request *SkipBgreleaseTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SkipBgreleaseTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SkipBgreleaseTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.task.skip"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 跳过蓝绿发布
 * Summary: 跳过蓝绿发布
 */
func (client *Client) SkipBgreleaseArrangement(request *SkipBgreleaseArrangementRequest) (_result *SkipBgreleaseArrangementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SkipBgreleaseArrangementResponse{}
	_body, _err := client.SkipBgreleaseArrangementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 跳过蓝绿发布
 * Summary: 跳过蓝绿发布
 */
func (client *Client) SkipBgreleaseArrangementEx(request *SkipBgreleaseArrangementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SkipBgreleaseArrangementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SkipBgreleaseArrangementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.arrangement.skip"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消蓝绿发布
 * Summary: 取消蓝绿发布
 */
func (client *Client) CancelBgreleaseArrangement(request *CancelBgreleaseArrangementRequest) (_result *CancelBgreleaseArrangementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelBgreleaseArrangementResponse{}
	_body, _err := client.CancelBgreleaseArrangementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消蓝绿发布
 * Summary: 取消蓝绿发布
 */
func (client *Client) CancelBgreleaseArrangementEx(request *CancelBgreleaseArrangementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelBgreleaseArrangementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelBgreleaseArrangementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.arrangement.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 回滚蓝绿发布
 * Summary: 回滚蓝绿发布
 */
func (client *Client) RollbackBgreleaseArrangement(request *RollbackBgreleaseArrangementRequest) (_result *RollbackBgreleaseArrangementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RollbackBgreleaseArrangementResponse{}
	_body, _err := client.RollbackBgreleaseArrangementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 回滚蓝绿发布
 * Summary: 回滚蓝绿发布
 */
func (client *Client) RollbackBgreleaseArrangementEx(request *RollbackBgreleaseArrangementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RollbackBgreleaseArrangementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RollbackBgreleaseArrangementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.arrangement.rollback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 蓝绿发布回滚重试
 * Summary: 蓝绿发布回滚重试
 */
func (client *Client) RetryrollbackBgreleaseArrangement(request *RetryrollbackBgreleaseArrangementRequest) (_result *RetryrollbackBgreleaseArrangementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryrollbackBgreleaseArrangementResponse{}
	_body, _err := client.RetryrollbackBgreleaseArrangementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 蓝绿发布回滚重试
 * Summary: 蓝绿发布回滚重试
 */
func (client *Client) RetryrollbackBgreleaseArrangementEx(request *RetryrollbackBgreleaseArrangementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryrollbackBgreleaseArrangementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryrollbackBgreleaseArrangementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.arrangement.retryrollback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 蓝绿发布回滚确认
 * Summary: 蓝绿发布回滚确认
 */
func (client *Client) ConfirmrollbackBgreleaseArrangement(request *ConfirmrollbackBgreleaseArrangementRequest) (_result *ConfirmrollbackBgreleaseArrangementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmrollbackBgreleaseArrangementResponse{}
	_body, _err := client.ConfirmrollbackBgreleaseArrangementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 蓝绿发布回滚确认
 * Summary: 蓝绿发布回滚确认
 */
func (client *Client) ConfirmrollbackBgreleaseArrangementEx(request *ConfirmrollbackBgreleaseArrangementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmrollbackBgreleaseArrangementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmrollbackBgreleaseArrangementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.arrangement.confirmrollback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 蓝绿发布灰度流量迁移
 * Summary: 蓝绿发布灰度流量迁移
 */
func (client *Client) SwitchBgreleaseGraytraffic(request *SwitchBgreleaseGraytrafficRequest) (_result *SwitchBgreleaseGraytrafficResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SwitchBgreleaseGraytrafficResponse{}
	_body, _err := client.SwitchBgreleaseGraytrafficEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 蓝绿发布灰度流量迁移
 * Summary: 蓝绿发布灰度流量迁移
 */
func (client *Client) SwitchBgreleaseGraytrafficEx(request *SwitchBgreleaseGraytrafficRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SwitchBgreleaseGraytrafficResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SwitchBgreleaseGraytrafficResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.graytraffic.switch"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 蓝绿发布灰度流量回滚
 * Summary: 蓝绿发布灰度流量回滚
 */
func (client *Client) RollbackBgreleaseGraytraffic(request *RollbackBgreleaseGraytrafficRequest) (_result *RollbackBgreleaseGraytrafficResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RollbackBgreleaseGraytrafficResponse{}
	_body, _err := client.RollbackBgreleaseGraytrafficEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 蓝绿发布灰度流量回滚
 * Summary: 蓝绿发布灰度流量回滚
 */
func (client *Client) RollbackBgreleaseGraytrafficEx(request *RollbackBgreleaseGraytrafficRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RollbackBgreleaseGraytrafficResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RollbackBgreleaseGraytrafficResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.graytraffic.rollback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询灰度引流进度
 * Summary: 查询灰度引流进度
 */
func (client *Client) QueryBgreleaseGrayprogress(request *QueryBgreleaseGrayprogressRequest) (_result *QueryBgreleaseGrayprogressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBgreleaseGrayprogressResponse{}
	_body, _err := client.QueryBgreleaseGrayprogressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询灰度引流进度
 * Summary: 查询灰度引流进度
 */
func (client *Client) QueryBgreleaseGrayprogressEx(request *QueryBgreleaseGrayprogressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBgreleaseGrayprogressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBgreleaseGrayprogressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.bgrelease.grayprogress.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取灰度引流进度
 * Summary: 获取灰度引流进度
 */
func (client *Client) GetGrayProcess(request *GetGrayProcessRequest) (_result *GetGrayProcessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetGrayProcessResponse{}
	_body, _err := client.GetGrayProcessEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取灰度引流进度
 * Summary: 获取灰度引流进度
 */
func (client *Client) GetGrayProcessEx(request *GetGrayProcessRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetGrayProcessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetGrayProcessResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.gray.process.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询灰度引流进度
 * Summary: 查询灰度引流进度
 */
func (client *Client) QueryGrayProgress(request *QueryGrayProgressRequest) (_result *QueryGrayProgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryGrayProgressResponse{}
	_body, _err := client.QueryGrayProgressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询灰度引流进度
 * Summary: 查询灰度引流进度
 */
func (client *Client) QueryGrayProgressEx(request *QueryGrayProgressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryGrayProgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryGrayProgressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.gray.progress.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重新初始化灰度发布
 * Summary: 重新初始化灰度发布
 */
func (client *Client) ReinitGrayProcess(request *ReinitGrayProcessRequest) (_result *ReinitGrayProcessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReinitGrayProcessResponse{}
	_body, _err := client.ReinitGrayProcessEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重新初始化灰度发布
 * Summary: 重新初始化灰度发布
 */
func (client *Client) ReinitGrayProcessEx(request *ReinitGrayProcessRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReinitGrayProcessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReinitGrayProcessResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.gray.process.reinit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重试灰度发布子任务
 * Summary: 重试灰度发布子任务
 */
func (client *Client) RetryGrayTask(request *RetryGrayTaskRequest) (_result *RetryGrayTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryGrayTaskResponse{}
	_body, _err := client.RetryGrayTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重试灰度发布子任务
 * Summary: 重试灰度发布子任务
 */
func (client *Client) RetryGrayTaskEx(request *RetryGrayTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryGrayTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryGrayTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.gray.task.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 跳过灰度发布子任务
 * Summary: 跳过灰度发布子任务
 */
func (client *Client) SkipGrayTask(request *SkipGrayTaskRequest) (_result *SkipGrayTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SkipGrayTaskResponse{}
	_body, _err := client.SkipGrayTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 跳过灰度发布子任务
 * Summary: 跳过灰度发布子任务
 */
func (client *Client) SkipGrayTaskEx(request *SkipGrayTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SkipGrayTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SkipGrayTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.gray.task.skip"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询发布机器信息
 * Summary: 查询发布机器信息
 */
func (client *Client) QueryMachine(request *QueryMachineRequest) (_result *QueryMachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMachineResponse{}
	_body, _err := client.QueryMachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询发布机器信息
 * Summary: 查询发布机器信息
 */
func (client *Client) QueryMachineEx(request *QueryMachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machine.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取发布机器信息
 * Summary: 获取发布机器信息
 */
func (client *Client) GetMachine(request *GetMachineRequest) (_result *GetMachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetMachineResponse{}
	_body, _err := client.GetMachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取发布机器信息
 * Summary: 获取发布机器信息
 */
func (client *Client) GetMachineEx(request *GetMachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetMachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetMachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machine.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询机器发布进度
 * Summary: 查询机器发布进度
 */
func (client *Client) QueryMachineProgress(request *QueryMachineProgressRequest) (_result *QueryMachineProgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMachineProgressResponse{}
	_body, _err := client.QueryMachineProgressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询机器发布进度
 * Summary: 查询机器发布进度
 */
func (client *Client) QueryMachineProgressEx(request *QueryMachineProgressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMachineProgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMachineProgressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machine.progress.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重试发布机器
 * Summary: 重试发布机器
 */
func (client *Client) RetryMachine(request *RetryMachineRequest) (_result *RetryMachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryMachineResponse{}
	_body, _err := client.RetryMachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重试发布机器
 * Summary: 重试发布机器
 */
func (client *Client) RetryMachineEx(request *RetryMachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryMachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryMachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machine.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 忽略机器发布
 * Summary: 忽略机器发布
 */
func (client *Client) SkipMachine(request *SkipMachineRequest) (_result *SkipMachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SkipMachineResponse{}
	_body, _err := client.SkipMachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 忽略机器发布
 * Summary: 忽略机器发布
 */
func (client *Client) SkipMachineEx(request *SkipMachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SkipMachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SkipMachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machine.skip"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消机器发布
 * Summary: 取消机器发布
 */
func (client *Client) CancelMachine(request *CancelMachineRequest) (_result *CancelMachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelMachineResponse{}
	_body, _err := client.CancelMachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消机器发布
 * Summary: 取消机器发布
 */
func (client *Client) CancelMachineEx(request *CancelMachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelMachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelMachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machine.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 触发执行机器发布
 * Summary: 触发执行机器发布
 */
func (client *Client) ExecMachine(request *ExecMachineRequest) (_result *ExecMachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecMachineResponse{}
	_body, _err := client.ExecMachineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 触发执行机器发布
 * Summary: 触发执行机器发布
 */
func (client *Client) ExecMachineEx(request *ExecMachineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecMachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecMachineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machine.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询机器分组发布进度
 * Summary: 查询机器分组发布进度
 */
func (client *Client) QueryMachinegroupProgress(request *QueryMachinegroupProgressRequest) (_result *QueryMachinegroupProgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMachinegroupProgressResponse{}
	_body, _err := client.QueryMachinegroupProgressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询机器分组发布进度
 * Summary: 查询机器分组发布进度
 */
func (client *Client) QueryMachinegroupProgressEx(request *QueryMachinegroupProgressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMachinegroupProgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMachinegroupProgressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machinegroup.progress.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重试机器分组
 * Summary: 重试机器分组
 */
func (client *Client) RetryMachinegroup(request *RetryMachinegroupRequest) (_result *RetryMachinegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryMachinegroupResponse{}
	_body, _err := client.RetryMachinegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重试机器分组
 * Summary: 重试机器分组
 */
func (client *Client) RetryMachinegroupEx(request *RetryMachinegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryMachinegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryMachinegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machinegroup.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 忽略分组
 * Summary: 忽略分组
 */
func (client *Client) SkipMachinegroup(request *SkipMachinegroupRequest) (_result *SkipMachinegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SkipMachinegroupResponse{}
	_body, _err := client.SkipMachinegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 忽略分组
 * Summary: 忽略分组
 */
func (client *Client) SkipMachinegroupEx(request *SkipMachinegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SkipMachinegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SkipMachinegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machinegroup.skip"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分组取消
 * Summary: 分组取消
 */
func (client *Client) CancelMachinegroup(request *CancelMachinegroupRequest) (_result *CancelMachinegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelMachinegroupResponse{}
	_body, _err := client.CancelMachinegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分组取消
 * Summary: 分组取消
 */
func (client *Client) CancelMachinegroupEx(request *CancelMachinegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelMachinegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelMachinegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machinegroup.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分组删除
 * Summary: 分组删除
 */
func (client *Client) DeleteMachinegroup(request *DeleteMachinegroupRequest) (_result *DeleteMachinegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteMachinegroupResponse{}
	_body, _err := client.DeleteMachinegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分组删除
 * Summary: 分组删除
 */
func (client *Client) DeleteMachinegroupEx(request *DeleteMachinegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteMachinegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteMachinegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machinegroup.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新分组
 * Summary: 更新分组
 */
func (client *Client) UpdateMachinegroup(request *UpdateMachinegroupRequest) (_result *UpdateMachinegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMachinegroupResponse{}
	_body, _err := client.UpdateMachinegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新分组
 * Summary: 更新分组
 */
func (client *Client) UpdateMachinegroupEx(request *UpdateMachinegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMachinegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMachinegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machinegroup.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 机器分组确认
 * Summary: 机器分组确认
 */
func (client *Client) ConfirmMachinegroup(request *ConfirmMachinegroupRequest) (_result *ConfirmMachinegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmMachinegroupResponse{}
	_body, _err := client.ConfirmMachinegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 机器分组确认
 * Summary: 机器分组确认
 */
func (client *Client) ConfirmMachinegroupEx(request *ConfirmMachinegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmMachinegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmMachinegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machinegroup.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 机器分组进度批量查询
 * Summary: 机器分组进度批量查询
 */
func (client *Client) BatchqueryMachinegroupProgress(request *BatchqueryMachinegroupProgressRequest) (_result *BatchqueryMachinegroupProgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryMachinegroupProgressResponse{}
	_body, _err := client.BatchqueryMachinegroupProgressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 机器分组进度批量查询
 * Summary: 机器分组进度批量查询
 */
func (client *Client) BatchqueryMachinegroupProgressEx(request *BatchqueryMachinegroupProgressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryMachinegroupProgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryMachinegroupProgressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machinegroup.progress.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分区预确认
 * Summary: 分区预确认
 */
func (client *Client) ConfirmMachinegroupReserve(request *ConfirmMachinegroupReserveRequest) (_result *ConfirmMachinegroupReserveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmMachinegroupReserveResponse{}
	_body, _err := client.ConfirmMachinegroupReserveEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分区预确认
 * Summary: 分区预确认
 */
func (client *Client) ConfirmMachinegroupReserveEx(request *ConfirmMachinegroupReserveRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmMachinegroupReserveResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmMachinegroupReserveResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machinegroup.reserve.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 修改分组 SLB 权重
 * Summary: 修改分组 SLB 权重
 */
func (client *Client) UpdateMachinegroupSlbmountweight(request *UpdateMachinegroupSlbmountweightRequest) (_result *UpdateMachinegroupSlbmountweightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMachinegroupSlbmountweightResponse{}
	_body, _err := client.UpdateMachinegroupSlbmountweightEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 修改分组 SLB 权重
 * Summary: 修改分组 SLB 权重
 */
func (client *Client) UpdateMachinegroupSlbmountweightEx(request *UpdateMachinegroupSlbmountweightRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMachinegroupSlbmountweightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMachinegroupSlbmountweightResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machinegroup.slbmountweight.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询分组 SLB 挂载进度
 * Summary: 查询分组 SLB 挂载进度
 */
func (client *Client) QueryMachinegroupSlbmountprogress(request *QueryMachinegroupSlbmountprogressRequest) (_result *QueryMachinegroupSlbmountprogressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMachinegroupSlbmountprogressResponse{}
	_body, _err := client.QueryMachinegroupSlbmountprogressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询分组 SLB 挂载进度
 * Summary: 查询分组 SLB 挂载进度
 */
func (client *Client) QueryMachinegroupSlbmountprogressEx(request *QueryMachinegroupSlbmountprogressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMachinegroupSlbmountprogressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMachinegroupSlbmountprogressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machinegroup.slbmountprogress.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询 slb 挂载状态
 * Summary: 查询 slb 挂载状态
 */
func (client *Client) QueryMachinegroupSlbmount(request *QueryMachinegroupSlbmountRequest) (_result *QueryMachinegroupSlbmountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMachinegroupSlbmountResponse{}
	_body, _err := client.QueryMachinegroupSlbmountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询 slb 挂载状态
 * Summary: 查询 slb 挂载状态
 */
func (client *Client) QueryMachinegroupSlbmountEx(request *QueryMachinegroupSlbmountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMachinegroupSlbmountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMachinegroupSlbmountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machinegroup.slbmount.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取分组信息
 * Summary: 获取分组信息
 */
func (client *Client) GetMachinegroup(request *GetMachinegroupRequest) (_result *GetMachinegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetMachinegroupResponse{}
	_body, _err := client.GetMachinegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取分组信息
 * Summary: 获取分组信息
 */
func (client *Client) GetMachinegroupEx(request *GetMachinegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetMachinegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetMachinegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machinegroup.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 忽略分组任务
 * Summary: 忽略分组任务
 */
func (client *Client) SkipMachinetask(request *SkipMachinetaskRequest) (_result *SkipMachinetaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SkipMachinetaskResponse{}
	_body, _err := client.SkipMachinetaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 忽略分组任务
 * Summary: 忽略分组任务
 */
func (client *Client) SkipMachinetaskEx(request *SkipMachinetaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SkipMachinetaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SkipMachinetaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machinetask.skip"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 机器任务重试
 * Summary: 机器任务重试
 */
func (client *Client) RetryMachinetask(request *RetryMachinetaskRequest) (_result *RetryMachinetaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryMachinetaskResponse{}
	_body, _err := client.RetryMachinetaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 机器任务重试
 * Summary: 机器任务重试
 */
func (client *Client) RetryMachinetaskEx(request *RetryMachinetaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryMachinetaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryMachinetaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.machinetask.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询部署单元
 * Summary: 查询部署单元
 */
func (client *Client) QueryMetaCell(request *QueryMetaCellRequest) (_result *QueryMetaCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMetaCellResponse{}
	_body, _err := client.QueryMetaCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询部署单元
 * Summary: 查询部署单元
 */
func (client *Client) QueryMetaCellEx(request *QueryMetaCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMetaCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMetaCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.meta.cell.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建 deployment cell
 * Summary: 创建 deployment cell
 */
func (client *Client) CreateMetaDeploymentcell(request *CreateMetaDeploymentcellRequest) (_result *CreateMetaDeploymentcellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateMetaDeploymentcellResponse{}
	_body, _err := client.CreateMetaDeploymentcellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建 deployment cell
 * Summary: 创建 deployment cell
 */
func (client *Client) CreateMetaDeploymentcellEx(request *CreateMetaDeploymentcellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateMetaDeploymentcellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateMetaDeploymentcellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.meta.deploymentcell.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新 deployment zone
 * Summary: 更新 deployment zone
 */
func (client *Client) UpdateMetaDeploymentcell(request *UpdateMetaDeploymentcellRequest) (_result *UpdateMetaDeploymentcellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMetaDeploymentcellResponse{}
	_body, _err := client.UpdateMetaDeploymentcellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新 deployment zone
 * Summary: 更新 deployment zone
 */
func (client *Client) UpdateMetaDeploymentcellEx(request *UpdateMetaDeploymentcellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMetaDeploymentcellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMetaDeploymentcellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.meta.deploymentcell.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取 deployment cell
 * Summary: 获取 deployment cell
 */
func (client *Client) GetMetaDeploymentcell(request *GetMetaDeploymentcellRequest) (_result *GetMetaDeploymentcellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetMetaDeploymentcellResponse{}
	_body, _err := client.GetMetaDeploymentcellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取 deployment cell
 * Summary: 获取 deployment cell
 */
func (client *Client) GetMetaDeploymentcellEx(request *GetMetaDeploymentcellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetMetaDeploymentcellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetMetaDeploymentcellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.meta.deploymentcell.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量获取 deployment cell
 * Summary: 批量获取 deployment cell
 */
func (client *Client) QueryMetaDeploymentcell(request *QueryMetaDeploymentcellRequest) (_result *QueryMetaDeploymentcellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMetaDeploymentcellResponse{}
	_body, _err := client.QueryMetaDeploymentcellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量获取 deployment cell
 * Summary: 批量获取 deployment cell
 */
func (client *Client) QueryMetaDeploymentcellEx(request *QueryMetaDeploymentcellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMetaDeploymentcellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMetaDeploymentcellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.meta.deploymentcell.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建通知配置
 * Summary: 创建通知配置
 */
func (client *Client) CreateNotificationConfig(request *CreateNotificationConfigRequest) (_result *CreateNotificationConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateNotificationConfigResponse{}
	_body, _err := client.CreateNotificationConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建通知配置
 * Summary: 创建通知配置
 */
func (client *Client) CreateNotificationConfigEx(request *CreateNotificationConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateNotificationConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateNotificationConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.notification.config.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新通知配置
 * Summary: 更新通知配置
 */
func (client *Client) UpdateNotificationConfig(request *UpdateNotificationConfigRequest) (_result *UpdateNotificationConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateNotificationConfigResponse{}
	_body, _err := client.UpdateNotificationConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新通知配置
 * Summary: 更新通知配置
 */
func (client *Client) UpdateNotificationConfigEx(request *UpdateNotificationConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateNotificationConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateNotificationConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.notification.config.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询通知配置
 * Summary: 查询通知配置
 */
func (client *Client) QueryNotificationConfig(request *QueryNotificationConfigRequest) (_result *QueryNotificationConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryNotificationConfigResponse{}
	_body, _err := client.QueryNotificationConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询通知配置
 * Summary: 查询通知配置
 */
func (client *Client) QueryNotificationConfigEx(request *QueryNotificationConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryNotificationConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryNotificationConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.notification.config.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除通知配置
 * Summary: 删除通知配置
 */
func (client *Client) DeleteNotificationConfig(request *DeleteNotificationConfigRequest) (_result *DeleteNotificationConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteNotificationConfigResponse{}
	_body, _err := client.DeleteNotificationConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除通知配置
 * Summary: 删除通知配置
 */
func (client *Client) DeleteNotificationConfigEx(request *DeleteNotificationConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteNotificationConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteNotificationConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.notification.config.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询用户信息
 * Summary: 查询用户信息
 */
func (client *Client) QueryOperator(request *QueryOperatorRequest) (_result *QueryOperatorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOperatorResponse{}
	_body, _err := client.QueryOperatorEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询用户信息
 * Summary: 查询用户信息
 */
func (client *Client) QueryOperatorEx(request *QueryOperatorRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOperatorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOperatorResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.operator.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 回滚
 * Summary: 回滚
 */
func (client *Client) RollbackPlanService(request *RollbackPlanServiceRequest) (_result *RollbackPlanServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RollbackPlanServiceResponse{}
	_body, _err := client.RollbackPlanServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 回滚
 * Summary: 回滚
 */
func (client *Client) RollbackPlanServiceEx(request *RollbackPlanServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RollbackPlanServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RollbackPlanServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.service.rollback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建发布单
 * Summary: 创建发布单
 */
func (client *Client) CreatePlan(request *CreatePlanRequest) (_result *CreatePlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreatePlanResponse{}
	_body, _err := client.CreatePlanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建发布单
 * Summary: 创建发布单
 */
func (client *Client) CreatePlanEx(request *CreatePlanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreatePlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreatePlanResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发布单校验
 * Summary: 发布单校验
 */
func (client *Client) CheckPlan(request *CheckPlanRequest) (_result *CheckPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckPlanResponse{}
	_body, _err := client.CheckPlanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发布单校验
 * Summary: 发布单校验
 */
func (client *Client) CheckPlanEx(request *CheckPlanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckPlanResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 校验运维单请求
 * Summary: 校验运维单请求
 */
func (client *Client) CheckPlanOperation(request *CheckPlanOperationRequest) (_result *CheckPlanOperationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckPlanOperationResponse{}
	_body, _err := client.CheckPlanOperationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 校验运维单请求
 * Summary: 校验运维单请求
 */
func (client *Client) CheckPlanOperationEx(request *CheckPlanOperationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckPlanOperationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckPlanOperationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.operation.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建运维单
 * Summary: 创建运维单
 */
func (client *Client) CreatePlanOperation(request *CreatePlanOperationRequest) (_result *CreatePlanOperationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreatePlanOperationResponse{}
	_body, _err := client.CreatePlanOperationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建运维单
 * Summary: 创建运维单
 */
func (client *Client) CreatePlanOperationEx(request *CreatePlanOperationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreatePlanOperationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreatePlanOperationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.operation.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建发布单
 * Summary: 创建发布单
 */
func (client *Client) CreatePlanAdvanced(request *CreatePlanAdvancedRequest) (_result *CreatePlanAdvancedResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreatePlanAdvancedResponse{}
	_body, _err := client.CreatePlanAdvancedEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建发布单
 * Summary: 创建发布单
 */
func (client *Client) CreatePlanAdvancedEx(request *CreatePlanAdvancedRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreatePlanAdvancedResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreatePlanAdvancedResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.advanced.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重新初始化发布单
 * Summary: 重新初始化发布单
 */
func (client *Client) ReinitPlan(request *ReinitPlanRequest) (_result *ReinitPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReinitPlanResponse{}
	_body, _err := client.ReinitPlanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重新初始化发布单
 * Summary: 重新初始化发布单
 */
func (client *Client) ReinitPlanEx(request *ReinitPlanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReinitPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReinitPlanResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.reinit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取发布单信息
 * Summary: 获取发布单信息
 */
func (client *Client) GetPlan(request *GetPlanRequest) (_result *GetPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetPlanResponse{}
	_body, _err := client.GetPlanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取发布单信息
 * Summary: 获取发布单信息
 */
func (client *Client) GetPlanEx(request *GetPlanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetPlanResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取发布单基本信息
 * Summary: 获取发布单基本信息
 */
func (client *Client) GetPlanBasic(request *GetPlanBasicRequest) (_result *GetPlanBasicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetPlanBasicResponse{}
	_body, _err := client.GetPlanBasicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取发布单基本信息
 * Summary: 获取发布单基本信息
 */
func (client *Client) GetPlanBasicEx(request *GetPlanBasicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetPlanBasicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetPlanBasicResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.basic.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取发布进度
 * Summary: 获取发布进度
 */
func (client *Client) GetPlanProgress(request *GetPlanProgressRequest) (_result *GetPlanProgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetPlanProgressResponse{}
	_body, _err := client.GetPlanProgressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取发布进度
 * Summary: 获取发布进度
 */
func (client *Client) GetPlanProgressEx(request *GetPlanProgressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetPlanProgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetPlanProgressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.progress.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询发布单
 * Summary: 查询发布单
 */
func (client *Client) QueryPlan(request *QueryPlanRequest) (_result *QueryPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryPlanResponse{}
	_body, _err := client.QueryPlanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询发布单
 * Summary: 查询发布单
 */
func (client *Client) QueryPlanEx(request *QueryPlanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryPlanResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发布单状态统计
 * Summary: 发布单状态统计
 */
func (client *Client) CountPlanState(request *CountPlanStateRequest) (_result *CountPlanStateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CountPlanStateResponse{}
	_body, _err := client.CountPlanStateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发布单状态统计
 * Summary: 发布单状态统计
 */
func (client *Client) CountPlanStateEx(request *CountPlanStateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CountPlanStateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CountPlanStateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.state.count"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:  执行
 * Summary:  执行
 */
func (client *Client) ExecPlan(request *ExecPlanRequest) (_result *ExecPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecPlanResponse{}
	_body, _err := client.ExecPlanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:  执行
 * Summary:  执行
 */
func (client *Client) ExecPlanEx(request *ExecPlanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecPlanResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重试
 * Summary: 重试
 */
func (client *Client) RetryPlan(request *RetryPlanRequest) (_result *RetryPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryPlanResponse{}
	_body, _err := client.RetryPlanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重试
 * Summary: 重试
 */
func (client *Client) RetryPlanEx(request *RetryPlanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryPlanResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消发布
 * Summary: 取消发布
 */
func (client *Client) CancelPlan(request *CancelPlanRequest) (_result *CancelPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelPlanResponse{}
	_body, _err := client.CancelPlanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消发布
 * Summary: 取消发布
 */
func (client *Client) CancelPlanEx(request *CancelPlanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelPlanResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 回滚发布单
 * Summary: 回滚发布单
 */
func (client *Client) RollbackPlan(request *RollbackPlanRequest) (_result *RollbackPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RollbackPlanResponse{}
	_body, _err := client.RollbackPlanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 回滚发布单
 * Summary: 回滚发布单
 */
func (client *Client) RollbackPlanEx(request *RollbackPlanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RollbackPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RollbackPlanResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.plan.rollback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取任务详情
 * Summary: 获取任务详情
 */
func (client *Client) GetTaskSummary(request *GetTaskSummaryRequest) (_result *GetTaskSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTaskSummaryResponse{}
	_body, _err := client.GetTaskSummaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取任务详情
 * Summary: 获取任务详情
 */
func (client *Client) GetTaskSummaryEx(request *GetTaskSummaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTaskSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTaskSummaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.task.summary.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 忽略任务
 * Summary: 忽略任务
 */
func (client *Client) SkipTask(request *SkipTaskRequest) (_result *SkipTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SkipTaskResponse{}
	_body, _err := client.SkipTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 忽略任务
 * Summary: 忽略任务
 */
func (client *Client) SkipTaskEx(request *SkipTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SkipTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SkipTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.task.skip"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重试任务
 * Summary: 重试任务
 */
func (client *Client) RetryTask(request *RetryTaskRequest) (_result *RetryTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryTaskResponse{}
	_body, _err := client.RetryTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重试任务
 * Summary: 重试任务
 */
func (client *Client) RetryTaskEx(request *RetryTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.task.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询角色信息
 * Summary: 查询角色信息
 */
func (client *Client) QueryRole(request *QueryRoleRequest) (_result *QueryRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRoleResponse{}
	_body, _err := client.QueryRoleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询角色信息
 * Summary: 查询角色信息
 */
func (client *Client) QueryRoleEx(request *QueryRoleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRoleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.role.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建应用服务分组集合
 * Summary: 创建应用服务分组集合
 */
func (client *Client) CreateServicegroupcollection(request *CreateServicegroupcollectionRequest) (_result *CreateServicegroupcollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateServicegroupcollectionResponse{}
	_body, _err := client.CreateServicegroupcollectionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建应用服务分组集合
 * Summary: 创建应用服务分组集合
 */
func (client *Client) CreateServicegroupcollectionEx(request *CreateServicegroupcollectionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateServicegroupcollectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateServicegroupcollectionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.servicegroupcollection.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 清除应用服务发布分组集合
 * Summary: 清除应用服务发布分组集合
 */
func (client *Client) DeleteServicegroupcollection(request *DeleteServicegroupcollectionRequest) (_result *DeleteServicegroupcollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteServicegroupcollectionResponse{}
	_body, _err := client.DeleteServicegroupcollectionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 清除应用服务发布分组集合
 * Summary: 清除应用服务发布分组集合
 */
func (client *Client) DeleteServicegroupcollectionEx(request *DeleteServicegroupcollectionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteServicegroupcollectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteServicegroupcollectionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.servicegroupcollection.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重试分组
 * Summary: 重试分组
 */
func (client *Client) RetryServicegroup(request *RetryServicegroupRequest) (_result *RetryServicegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryServicegroupResponse{}
	_body, _err := client.RetryServicegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重试分组
 * Summary: 重试分组
 */
func (client *Client) RetryServicegroupEx(request *RetryServicegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryServicegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryServicegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.servicegroup.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 执行发布分组
 * Summary: 执行发布分组
 */
func (client *Client) ExecServicegroup(request *ExecServicegroupRequest) (_result *ExecServicegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecServicegroupResponse{}
	_body, _err := client.ExecServicegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 执行发布分组
 * Summary: 执行发布分组
 */
func (client *Client) ExecServicegroupEx(request *ExecServicegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecServicegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecServicegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.servicegroup.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 忽略分组
 * Summary: 忽略分组
 */
func (client *Client) SkipServicegroup(request *SkipServicegroupRequest) (_result *SkipServicegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SkipServicegroupResponse{}
	_body, _err := client.SkipServicegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 忽略分组
 * Summary: 忽略分组
 */
func (client *Client) SkipServicegroupEx(request *SkipServicegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SkipServicegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SkipServicegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.servicegroup.skip"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建发布分组
 * Summary: 创建发布分组
 */
func (client *Client) CreateServicegroup(request *CreateServicegroupRequest) (_result *CreateServicegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateServicegroupResponse{}
	_body, _err := client.CreateServicegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建发布分组
 * Summary: 创建发布分组
 */
func (client *Client) CreateServicegroupEx(request *CreateServicegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateServicegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateServicegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.servicegroup.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除发布分组
 * Summary: 删除发布分组
 */
func (client *Client) DeleteServicegroup(request *DeleteServicegroupRequest) (_result *DeleteServicegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteServicegroupResponse{}
	_body, _err := client.DeleteServicegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除发布分组
 * Summary: 删除发布分组
 */
func (client *Client) DeleteServicegroupEx(request *DeleteServicegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteServicegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteServicegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.servicegroup.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 转换分组
 * Summary: 转换分组
 */
func (client *Client) SwitchServicegroup(request *SwitchServicegroupRequest) (_result *SwitchServicegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SwitchServicegroupResponse{}
	_body, _err := client.SwitchServicegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 转换分组
 * Summary: 转换分组
 */
func (client *Client) SwitchServicegroupEx(request *SwitchServicegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SwitchServicegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SwitchServicegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.servicegroup.switch"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取发布服务详情
 * Summary: 获取发布服务详情
 */
func (client *Client) GetService(request *GetServiceRequest) (_result *GetServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetServiceResponse{}
	_body, _err := client.GetServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取发布服务详情
 * Summary: 获取发布服务详情
 */
func (client *Client) GetServiceEx(request *GetServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取应用发布信息
 * Summary: 获取应用发布信息
 */
func (client *Client) GetServiceProgress(request *GetServiceProgressRequest) (_result *GetServiceProgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetServiceProgressResponse{}
	_body, _err := client.GetServiceProgressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取应用发布信息
 * Summary: 获取应用发布信息
 */
func (client *Client) GetServiceProgressEx(request *GetServiceProgressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetServiceProgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetServiceProgressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.progress.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询发布进度
 * Summary: 查询发布进度
 */
func (client *Client) QueryServiceProgress(request *QueryServiceProgressRequest) (_result *QueryServiceProgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryServiceProgressResponse{}
	_body, _err := client.QueryServiceProgressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询发布进度
 * Summary: 查询发布进度
 */
func (client *Client) QueryServiceProgressEx(request *QueryServiceProgressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryServiceProgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryServiceProgressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.progress.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询SLB挂载信息
 * Summary: 查询SLB挂载信息
 */
func (client *Client) QueryServiceSlbmount(request *QueryServiceSlbmountRequest) (_result *QueryServiceSlbmountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryServiceSlbmountResponse{}
	_body, _err := client.QueryServiceSlbmountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询SLB挂载信息
 * Summary: 查询SLB挂载信息
 */
func (client *Client) QueryServiceSlbmountEx(request *QueryServiceSlbmountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryServiceSlbmountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryServiceSlbmountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.slbmount.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询 SLB 挂载信息
 * Summary: 批量查询 SLB 挂载信息
 */
func (client *Client) BatchqueryServiceSlbmount(request *BatchqueryServiceSlbmountRequest) (_result *BatchqueryServiceSlbmountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryServiceSlbmountResponse{}
	_body, _err := client.BatchqueryServiceSlbmountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询 SLB 挂载信息
 * Summary: 批量查询 SLB 挂载信息
 */
func (client *Client) BatchqueryServiceSlbmountEx(request *BatchqueryServiceSlbmountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryServiceSlbmountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryServiceSlbmountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.slbmount.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新slb挂载权重
 * Summary: 更新slb挂载权重
 */
func (client *Client) UpdateServiceSlbmount(request *UpdateServiceSlbmountRequest) (_result *UpdateServiceSlbmountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateServiceSlbmountResponse{}
	_body, _err := client.UpdateServiceSlbmountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新slb挂载权重
 * Summary: 更新slb挂载权重
 */
func (client *Client) UpdateServiceSlbmountEx(request *UpdateServiceSlbmountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateServiceSlbmountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateServiceSlbmountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.slbmount.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询挂载进度
 * Summary: 查询挂载进度
 */
func (client *Client) QueryServiceSlbmountprogress(request *QueryServiceSlbmountprogressRequest) (_result *QueryServiceSlbmountprogressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryServiceSlbmountprogressResponse{}
	_body, _err := client.QueryServiceSlbmountprogressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询挂载进度
 * Summary: 查询挂载进度
 */
func (client *Client) QueryServiceSlbmountprogressEx(request *QueryServiceSlbmountprogressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryServiceSlbmountprogressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryServiceSlbmountprogressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.slbmountprogress.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询最近一次发布成功的应用记录
 * Summary: 查询最近一次发布成功的应用记录
 */
func (client *Client) QueryServiceLatestsuccess(request *QueryServiceLatestsuccessRequest) (_result *QueryServiceLatestsuccessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryServiceLatestsuccessResponse{}
	_body, _err := client.QueryServiceLatestsuccessEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询最近一次发布成功的应用记录
 * Summary: 查询最近一次发布成功的应用记录
 */
func (client *Client) QueryServiceLatestsuccessEx(request *QueryServiceLatestsuccessRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryServiceLatestsuccessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryServiceLatestsuccessResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.latestsuccess.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重新初始化
 * Summary: 重新初始化
 */
func (client *Client) ReinitService(request *ReinitServiceRequest) (_result *ReinitServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReinitServiceResponse{}
	_body, _err := client.ReinitServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重新初始化
 * Summary: 重新初始化
 */
func (client *Client) ReinitServiceEx(request *ReinitServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReinitServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReinitServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.reinit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 执行发布单
 * Summary: 执行发布单
 */
func (client *Client) ExecService(request *ExecServiceRequest) (_result *ExecServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecServiceResponse{}
	_body, _err := client.ExecServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 执行发布单
 * Summary: 执行发布单
 */
func (client *Client) ExecServiceEx(request *ExecServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消应用发布
 * Summary: 取消应用发布
 */
func (client *Client) CancelService(request *CancelServiceRequest) (_result *CancelServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelServiceResponse{}
	_body, _err := client.CancelServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消应用发布
 * Summary: 取消应用发布
 */
func (client *Client) CancelServiceEx(request *CancelServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 忽略分组
 * Summary: 忽略分组
 */
func (client *Client) SkipService(request *SkipServiceRequest) (_result *SkipServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SkipServiceResponse{}
	_body, _err := client.SkipServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 忽略分组
 * Summary: 忽略分组
 */
func (client *Client) SkipServiceEx(request *SkipServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SkipServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SkipServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.skip"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 触发服务发布
 * Summary: 触发服务发布
 */
func (client *Client) StartService(request *StartServiceRequest) (_result *StartServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartServiceResponse{}
	_body, _err := client.StartServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 触发服务发布
 * Summary: 触发服务发布
 */
func (client *Client) StartServiceEx(request *StartServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发布确认
 * Summary: 发布确认
 */
func (client *Client) ConfirmService(request *ConfirmServiceRequest) (_result *ConfirmServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmServiceResponse{}
	_body, _err := client.ConfirmServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发布确认
 * Summary: 发布确认
 */
func (client *Client) ConfirmServiceEx(request *ConfirmServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 配置机器分组
 * Summary: 配置机器分组
 */
func (client *Client) SetServiceMachinegroup(request *SetServiceMachinegroupRequest) (_result *SetServiceMachinegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetServiceMachinegroupResponse{}
	_body, _err := client.SetServiceMachinegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 配置机器分组
 * Summary: 配置机器分组
 */
func (client *Client) SetServiceMachinegroupEx(request *SetServiceMachinegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetServiceMachinegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetServiceMachinegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.machinegroup.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重新初始化机器分组
 * Summary: 重新初始化机器分组
 */
func (client *Client) ReinitServiceMachinegroup(request *ReinitServiceMachinegroupRequest) (_result *ReinitServiceMachinegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReinitServiceMachinegroupResponse{}
	_body, _err := client.ReinitServiceMachinegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重新初始化机器分组
 * Summary: 重新初始化机器分组
 */
func (client *Client) ReinitServiceMachinegroupEx(request *ReinitServiceMachinegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReinitServiceMachinegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReinitServiceMachinegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.machinegroup.reinit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询可回滚服务
 * Summary: 查询可回滚服务
 */
func (client *Client) ListServiceRollbackversion(request *ListServiceRollbackversionRequest) (_result *ListServiceRollbackversionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListServiceRollbackversionResponse{}
	_body, _err := client.ListServiceRollbackversionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询可回滚服务
 * Summary: 查询可回滚服务
 */
func (client *Client) ListServiceRollbackversionEx(request *ListServiceRollbackversionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListServiceRollbackversionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListServiceRollbackversionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.rollbackversion.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询可回滚版本
 * Summary: 查询可回滚版本
 */
func (client *Client) QueryServiceRollbackversion(request *QueryServiceRollbackversionRequest) (_result *QueryServiceRollbackversionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryServiceRollbackversionResponse{}
	_body, _err := client.QueryServiceRollbackversionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询可回滚版本
 * Summary: 查询可回滚版本
 */
func (client *Client) QueryServiceRollbackversionEx(request *QueryServiceRollbackversionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryServiceRollbackversionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryServiceRollbackversionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.rollbackversion.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 回滚应用
 * Summary: 回滚应用
 */
func (client *Client) RollbackService(request *RollbackServiceRequest) (_result *RollbackServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RollbackServiceResponse{}
	_body, _err := client.RollbackServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 回滚应用
 * Summary: 回滚应用
 */
func (client *Client) RollbackServiceEx(request *RollbackServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RollbackServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RollbackServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.rollback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 回滚确认
 * Summary: 回滚确认
 */
func (client *Client) ConfirmrollbackService(request *ConfirmrollbackServiceRequest) (_result *ConfirmrollbackServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmrollbackServiceResponse{}
	_body, _err := client.ConfirmrollbackServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 回滚确认
 * Summary: 回滚确认
 */
func (client *Client) ConfirmrollbackServiceEx(request *ConfirmrollbackServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmrollbackServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmrollbackServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.confirmrollback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 回滚重试
 * Summary: 回滚重试
 */
func (client *Client) RetryrollbackService(request *RetryrollbackServiceRequest) (_result *RetryrollbackServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryrollbackServiceResponse{}
	_body, _err := client.RetryrollbackServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 回滚重试
 * Summary: 回滚重试
 */
func (client *Client) RetryrollbackServiceEx(request *RetryrollbackServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryrollbackServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryrollbackServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.retryrollback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取子流程进度
 * Summary: 获取子流程进度
 */
func (client *Client) GetServiceArrangement(request *GetServiceArrangementRequest) (_result *GetServiceArrangementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetServiceArrangementResponse{}
	_body, _err := client.GetServiceArrangementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取子流程进度
 * Summary: 获取子流程进度
 */
func (client *Client) GetServiceArrangementEx(request *GetServiceArrangementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetServiceArrangementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetServiceArrangementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.arrangement.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重试子流程
 * Summary: 重试子流程
 */
func (client *Client) RetryServiceArrangement(request *RetryServiceArrangementRequest) (_result *RetryServiceArrangementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryServiceArrangementResponse{}
	_body, _err := client.RetryServiceArrangementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重试子流程
 * Summary: 重试子流程
 */
func (client *Client) RetryServiceArrangementEx(request *RetryServiceArrangementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryServiceArrangementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryServiceArrangementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.arrangement.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 忽略子流程
 * Summary: 忽略子流程
 */
func (client *Client) SkipServiceArrangement(request *SkipServiceArrangementRequest) (_result *SkipServiceArrangementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SkipServiceArrangementResponse{}
	_body, _err := client.SkipServiceArrangementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 忽略子流程
 * Summary: 忽略子流程
 */
func (client *Client) SkipServiceArrangementEx(request *SkipServiceArrangementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SkipServiceArrangementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SkipServiceArrangementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.arrangement.skip"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: query op log
 * Summary: query op log
 */
func (client *Client) QueryOperationlog(request *QueryOperationlogRequest) (_result *QueryOperationlogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOperationlogResponse{}
	_body, _err := client.QueryOperationlogEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: query op log
 * Summary: query op log
 */
func (client *Client) QueryOperationlogEx(request *QueryOperationlogRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOperationlogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOperationlogResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.operationlog.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: operation time line
 * Summary: operation time line
 */
func (client *Client) QueryOperationlogTimeline(request *QueryOperationlogTimelineRequest) (_result *QueryOperationlogTimelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOperationlogTimelineResponse{}
	_body, _err := client.QueryOperationlogTimelineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: operation time line
 * Summary: operation time line
 */
func (client *Client) QueryOperationlogTimelineEx(request *QueryOperationlogTimelineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOperationlogTimelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOperationlogTimelineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.operationlog.timeline.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取发布应用详情
 * Summary: 获取发布应用详情
 */
func (client *Client) GetServiceDetail(request *GetServiceDetailRequest) (_result *GetServiceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetServiceDetailResponse{}
	_body, _err := client.GetServiceDetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取发布应用详情
 * Summary: 获取发布应用详情
 */
func (client *Client) GetServiceDetailEx(request *GetServiceDetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetServiceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetServiceDetailResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.service.detail.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: create cell
 * Summary: create cell
 */
func (client *Client) CreateMetaCell(request *CreateMetaCellRequest) (_result *CreateMetaCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateMetaCellResponse{}
	_body, _err := client.CreateMetaCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: create cell
 * Summary: create cell
 */
func (client *Client) CreateMetaCellEx(request *CreateMetaCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateMetaCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateMetaCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.meta.cell.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: update cell
 * Summary: update cell
 */
func (client *Client) UpdateMetaCell(request *UpdateMetaCellRequest) (_result *UpdateMetaCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMetaCellResponse{}
	_body, _err := client.UpdateMetaCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: update cell
 * Summary: update cell
 */
func (client *Client) UpdateMetaCellEx(request *UpdateMetaCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMetaCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMetaCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.meta.cell.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 关联 master zone
 * Summary: 关联 master zone
 */
func (client *Client) AddMetaMasterzonerel(request *AddMetaMasterzonerelRequest) (_result *AddMetaMasterzonerelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddMetaMasterzonerelResponse{}
	_body, _err := client.AddMetaMasterzonerelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 关联 master zone
 * Summary: 关联 master zone
 */
func (client *Client) AddMetaMasterzonerelEx(request *AddMetaMasterzonerelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddMetaMasterzonerelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddMetaMasterzonerelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.meta.masterzonerel.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分配指定的一个或者多个计算资源到指定的应用
 * Summary: 分配应用计算资源
 */
func (client *Client) AssignComputer(request *AssignComputerRequest) (_result *AssignComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AssignComputerResponse{}
	_body, _err := client.AssignComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分配指定的一个或者多个计算资源到指定的应用
 * Summary: 分配应用计算资源
 */
func (client *Client) AssignComputerEx(request *AssignComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AssignComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AssignComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.computer.assign"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 从指定应用释放一个或者多个计算资源
 * Summary: 释放应用计算资源
 */
func (client *Client) ReleaseComputer(request *ReleaseComputerRequest) (_result *ReleaseComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReleaseComputerResponse{}
	_body, _err := client.ReleaseComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 从指定应用释放一个或者多个计算资源
 * Summary: 释放应用计算资源
 */
func (client *Client) ReleaseComputerEx(request *ReleaseComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReleaseComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReleaseComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.computer.release"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询异步请求的详情，包括请求状态，请求中的任务执行状态等
 * Summary: 获取异步任务
 */
func (client *Client) GetTask(request *GetTaskRequest) (_result *GetTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTaskResponse{}
	_body, _err := client.GetTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询异步请求的详情，包括请求状态，请求中的任务执行状态等
 * Summary: 获取异步任务
 */
func (client *Client) GetTaskEx(request *GetTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.task.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建 ecs 实例
 * Summary: 创建 ecs 实例
 */
func (client *Client) CreateComputer(request *CreateComputerRequest) (_result *CreateComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateComputerResponse{}
	_body, _err := client.CreateComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建 ecs 实例
 * Summary: 创建 ecs 实例
 */
func (client *Client) CreateComputerEx(request *CreateComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.computer.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建sidecar元数据信息
 * Summary: 创建sidecar元数据信息
 */
func (client *Client) CreateSidecar(request *CreateSidecarRequest) (_result *CreateSidecarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSidecarResponse{}
	_body, _err := client.CreateSidecarEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建sidecar元数据信息
 * Summary: 创建sidecar元数据信息
 */
func (client *Client) CreateSidecarEx(request *CreateSidecarRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSidecarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSidecarResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询sidecar元信息列表
 * Summary: 查询sidecar元信息列表
 */
func (client *Client) ListSidecar(request *ListSidecarRequest) (_result *ListSidecarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSidecarResponse{}
	_body, _err := client.ListSidecarEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询sidecar元信息列表
 * Summary: 查询sidecar元信息列表
 */
func (client *Client) ListSidecarEx(request *ListSidecarRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSidecarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSidecarResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建sidecar模板
 * Summary: 创建sidecar版本
 */
func (client *Client) CreateSidecarVersion(request *CreateSidecarVersionRequest) (_result *CreateSidecarVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSidecarVersionResponse{}
	_body, _err := client.CreateSidecarVersionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建sidecar模板
 * Summary: 创建sidecar版本
 */
func (client *Client) CreateSidecarVersionEx(request *CreateSidecarVersionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSidecarVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSidecarVersionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.version.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询sidecar模板列表
 * Summary: 查询sidecar模板列表
 */
func (client *Client) ListSidecarVersion(request *ListSidecarVersionRequest) (_result *ListSidecarVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSidecarVersionResponse{}
	_body, _err := client.ListSidecarVersionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询sidecar模板列表
 * Summary: 查询sidecar模板列表
 */
func (client *Client) ListSidecarVersionEx(request *ListSidecarVersionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSidecarVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSidecarVersionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.version.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取sidecar版本详情
 * Summary: 获取sidecar版本详情
 */
func (client *Client) GetSidecarVersion(request *GetSidecarVersionRequest) (_result *GetSidecarVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSidecarVersionResponse{}
	_body, _err := client.GetSidecarVersionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取sidecar版本详情
 * Summary: 获取sidecar版本详情
 */
func (client *Client) GetSidecarVersionEx(request *GetSidecarVersionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSidecarVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSidecarVersionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.version.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建sidecar规则
 * Summary: 创建sidecar规则
 */
func (client *Client) CreateSidecarRule(request *CreateSidecarRuleRequest) (_result *CreateSidecarRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSidecarRuleResponse{}
	_body, _err := client.CreateSidecarRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建sidecar规则
 * Summary: 创建sidecar规则
 */
func (client *Client) CreateSidecarRuleEx(request *CreateSidecarRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSidecarRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSidecarRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.rule.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取sidecar单个规则详情
 * Summary: 获取sidecar单个规则详情
 */
func (client *Client) GetSidecarRule(request *GetSidecarRuleRequest) (_result *GetSidecarRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSidecarRuleResponse{}
	_body, _err := client.GetSidecarRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取sidecar单个规则详情
 * Summary: 获取sidecar单个规则详情
 */
func (client *Client) GetSidecarRuleEx(request *GetSidecarRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSidecarRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSidecarRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.rule.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取sidecar规则列表
 * Summary: 获取sidecar规则列表
 */
func (client *Client) ListSidecarRule(request *ListSidecarRuleRequest) (_result *ListSidecarRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSidecarRuleResponse{}
	_body, _err := client.ListSidecarRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取sidecar规则列表
 * Summary: 获取sidecar规则列表
 */
func (client *Client) ListSidecarRuleEx(request *ListSidecarRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSidecarRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSidecarRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.rule.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建sidecar版本实例
 * Summary: 创建sidecar版本实例
 */
func (client *Client) CreateSidecarInstance(request *CreateSidecarInstanceRequest) (_result *CreateSidecarInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSidecarInstanceResponse{}
	_body, _err := client.CreateSidecarInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建sidecar版本实例
 * Summary: 创建sidecar版本实例
 */
func (client *Client) CreateSidecarInstanceEx(request *CreateSidecarInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSidecarInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSidecarInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.instance.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询sidecar版本实例列表
 * Summary: 查询sidecar版本实例列表
 */
func (client *Client) ListSidecarInstance(request *ListSidecarInstanceRequest) (_result *ListSidecarInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSidecarInstanceResponse{}
	_body, _err := client.ListSidecarInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询sidecar版本实例列表
 * Summary: 查询sidecar版本实例列表
 */
func (client *Client) ListSidecarInstanceEx(request *ListSidecarInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSidecarInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSidecarInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.instance.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取sidecar版本实例
 * Summary: 获取sidecar版本实例
 */
func (client *Client) GetSidecarInstance(request *GetSidecarInstanceRequest) (_result *GetSidecarInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSidecarInstanceResponse{}
	_body, _err := client.GetSidecarInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取sidecar版本实例
 * Summary: 获取sidecar版本实例
 */
func (client *Client) GetSidecarInstanceEx(request *GetSidecarInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSidecarInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSidecarInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.instance.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取sidecar类型
 * Summary: 获取sidecar类型
 */
func (client *Client) GetSidecar(request *GetSidecarRequest) (_result *GetSidecarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSidecarResponse{}
	_body, _err := client.GetSidecarEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取sidecar类型
 * Summary: 获取sidecar类型
 */
func (client *Client) GetSidecarEx(request *GetSidecarRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSidecarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSidecarResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新sidecar类型信息
 * Summary: 更新sidecar类型信息
 */
func (client *Client) UpdateSidecar(request *UpdateSidecarRequest) (_result *UpdateSidecarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSidecarResponse{}
	_body, _err := client.UpdateSidecarEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新sidecar类型信息
 * Summary: 更新sidecar类型信息
 */
func (client *Client) UpdateSidecarEx(request *UpdateSidecarRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSidecarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSidecarResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除sidecar类型
 * Summary: 删除sidecar类型
 */
func (client *Client) DeleteSidecar(request *DeleteSidecarRequest) (_result *DeleteSidecarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSidecarResponse{}
	_body, _err := client.DeleteSidecarEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除sidecar类型
 * Summary: 删除sidecar类型
 */
func (client *Client) DeleteSidecarEx(request *DeleteSidecarRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSidecarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSidecarResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新sidecar版本
 * Summary: 更新sidecar版本
 */
func (client *Client) UpdateSidecarVersion(request *UpdateSidecarVersionRequest) (_result *UpdateSidecarVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSidecarVersionResponse{}
	_body, _err := client.UpdateSidecarVersionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新sidecar版本
 * Summary: 更新sidecar版本
 */
func (client *Client) UpdateSidecarVersionEx(request *UpdateSidecarVersionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSidecarVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSidecarVersionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.version.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除sidecar模板
 * Summary: 删除sidecar模板
 */
func (client *Client) DeleteSidecarVersion(request *DeleteSidecarVersionRequest) (_result *DeleteSidecarVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSidecarVersionResponse{}
	_body, _err := client.DeleteSidecarVersionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除sidecar模板
 * Summary: 删除sidecar模板
 */
func (client *Client) DeleteSidecarVersionEx(request *DeleteSidecarVersionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSidecarVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSidecarVersionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.version.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新sidecar版本实例
 * Summary: 更新sidecar版本实例
 */
func (client *Client) UpdateSidecarInstance(request *UpdateSidecarInstanceRequest) (_result *UpdateSidecarInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSidecarInstanceResponse{}
	_body, _err := client.UpdateSidecarInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新sidecar版本实例
 * Summary: 更新sidecar版本实例
 */
func (client *Client) UpdateSidecarInstanceEx(request *UpdateSidecarInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSidecarInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSidecarInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.instance.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除sidecar版本实例
 * Summary: 删除sidecar版本实例
 */
func (client *Client) DeleteSidecarInstance(request *DeleteSidecarInstanceRequest) (_result *DeleteSidecarInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSidecarInstanceResponse{}
	_body, _err := client.DeleteSidecarInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除sidecar版本实例
 * Summary: 删除sidecar版本实例
 */
func (client *Client) DeleteSidecarInstanceEx(request *DeleteSidecarInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSidecarInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSidecarInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.instance.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新sidecar规则
 * Summary: 更新sidecar规则
 */
func (client *Client) UpdateSidecarRule(request *UpdateSidecarRuleRequest) (_result *UpdateSidecarRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSidecarRuleResponse{}
	_body, _err := client.UpdateSidecarRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新sidecar规则
 * Summary: 更新sidecar规则
 */
func (client *Client) UpdateSidecarRuleEx(request *UpdateSidecarRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSidecarRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSidecarRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.rule.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除sidecar规则
 * Summary: 删除sidecar规则
 */
func (client *Client) DeleteSidecarRule(request *DeleteSidecarRuleRequest) (_result *DeleteSidecarRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSidecarRuleResponse{}
	_body, _err := client.DeleteSidecarRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除sidecar规则
 * Summary: 删除sidecar规则
 */
func (client *Client) DeleteSidecarRuleEx(request *DeleteSidecarRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSidecarRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSidecarRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.rule.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新sidecar版本状态
 * Summary: 更新sidecar版本状态
 */
func (client *Client) UpdateSidecarVersionstatus(request *UpdateSidecarVersionstatusRequest) (_result *UpdateSidecarVersionstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSidecarVersionstatusResponse{}
	_body, _err := client.UpdateSidecarVersionstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新sidecar版本状态
 * Summary: 更新sidecar版本状态
 */
func (client *Client) UpdateSidecarVersionstatusEx(request *UpdateSidecarVersionstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSidecarVersionstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSidecarVersionstatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.versionstatus.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新sidecar版本实例状态
 * Summary: 更新sidecar版本实例状态
 */
func (client *Client) UpdateSidecarInstancestatus(request *UpdateSidecarInstancestatusRequest) (_result *UpdateSidecarInstancestatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSidecarInstancestatusResponse{}
	_body, _err := client.UpdateSidecarInstancestatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新sidecar版本实例状态
 * Summary: 更新sidecar版本实例状态
 */
func (client *Client) UpdateSidecarInstancestatusEx(request *UpdateSidecarInstancestatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSidecarInstancestatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSidecarInstancestatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.instancestatus.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新sidecar规则状态
 * Summary: 更新sidecar规则状态
 */
func (client *Client) UpdateSidecarRulestatus(request *UpdateSidecarRulestatusRequest) (_result *UpdateSidecarRulestatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSidecarRulestatusResponse{}
	_body, _err := client.UpdateSidecarRulestatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新sidecar规则状态
 * Summary: 更新sidecar规则状态
 */
func (client *Client) UpdateSidecarRulestatusEx(request *UpdateSidecarRulestatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSidecarRulestatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSidecarRulestatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.sidecar.rulestatus.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建应用sidecar基线
 * Summary: 创建应用sidecar基线
 */
func (client *Client) CreateAppbaselineSidecar(request *CreateAppbaselineSidecarRequest) (_result *CreateAppbaselineSidecarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAppbaselineSidecarResponse{}
	_body, _err := client.CreateAppbaselineSidecarEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建应用sidecar基线
 * Summary: 创建应用sidecar基线
 */
func (client *Client) CreateAppbaselineSidecarEx(request *CreateAppbaselineSidecarRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAppbaselineSidecarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAppbaselineSidecarResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appbaseline.sidecar.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用sidecar基线
 * Summary: 查询应用sidecar基线
 */
func (client *Client) ListAppbaselineSidecar(request *ListAppbaselineSidecarRequest) (_result *ListAppbaselineSidecarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppbaselineSidecarResponse{}
	_body, _err := client.ListAppbaselineSidecarEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用sidecar基线
 * Summary: 查询应用sidecar基线
 */
func (client *Client) ListAppbaselineSidecarEx(request *ListAppbaselineSidecarRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppbaselineSidecarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppbaselineSidecarResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appbaseline.sidecar.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除应用sidecar基线
 * Summary: 删除应用sidecar基线
 */
func (client *Client) DeleteAppbaselineSidecar(request *DeleteAppbaselineSidecarRequest) (_result *DeleteAppbaselineSidecarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteAppbaselineSidecarResponse{}
	_body, _err := client.DeleteAppbaselineSidecarEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除应用sidecar基线
 * Summary: 删除应用sidecar基线
 */
func (client *Client) DeleteAppbaselineSidecarEx(request *DeleteAppbaselineSidecarRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteAppbaselineSidecarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteAppbaselineSidecarResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appbaseline.sidecar.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新应用sidecar基线
 * Summary: 更新应用sidecar基线
 */
func (client *Client) UpdateAppbaselineSidecar(request *UpdateAppbaselineSidecarRequest) (_result *UpdateAppbaselineSidecarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAppbaselineSidecarResponse{}
	_body, _err := client.UpdateAppbaselineSidecarEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新应用sidecar基线
 * Summary: 更新应用sidecar基线
 */
func (client *Client) UpdateAppbaselineSidecarEx(request *UpdateAppbaselineSidecarRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAppbaselineSidecarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateAppbaselineSidecarResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appbaseline.sidecar.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建或更新应用sidecar基线，app_name category conditions更新的时候是主键
 * Summary: 创建或更新应用sidecar基线
 */
func (client *Client) SaveAppbaselineSidecar(request *SaveAppbaselineSidecarRequest) (_result *SaveAppbaselineSidecarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveAppbaselineSidecarResponse{}
	_body, _err := client.SaveAppbaselineSidecarEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建或更新应用sidecar基线，app_name category conditions更新的时候是主键
 * Summary: 创建或更新应用sidecar基线
 */
func (client *Client) SaveAppbaselineSidecarEx(request *SaveAppbaselineSidecarRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveAppbaselineSidecarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveAppbaselineSidecarResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.appbaseline.sidecar.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询workspace详情
 * Summary: 获取workspace
 */
func (client *Client) GetWorkspace(request *GetWorkspaceRequest) (_result *GetWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkspaceResponse{}
	_body, _err := client.GetWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询workspace详情
 * Summary: 获取workspace
 */
func (client *Client) GetWorkspaceEx(request *GetWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.workspace.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询workspace列表，可根据状态过滤。
 * Summary: 查询workspace
 */
func (client *Client) QueryWorkspace(request *QueryWorkspaceRequest) (_result *QueryWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryWorkspaceResponse{}
	_body, _err := client.QueryWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询workspace列表，可根据状态过滤。
 * Summary: 查询workspace
 */
func (client *Client) QueryWorkspaceEx(request *QueryWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.workspace.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建workspace
 * Summary: 创建workspace
 */
func (client *Client) CreateWorkspace(request *CreateWorkspaceRequest) (_result *CreateWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateWorkspaceResponse{}
	_body, _err := client.CreateWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建workspace
 * Summary: 创建workspace
 */
func (client *Client) CreateWorkspaceEx(request *CreateWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.workspace.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询workspace列表2.0。
 * Summary: 查询workspace列表2.0
 */
func (client *Client) ListWorkspace(request *ListWorkspaceRequest) (_result *ListWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListWorkspaceResponse{}
	_body, _err := client.ListWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询workspace列表2.0。
 * Summary: 查询workspace列表2.0
 */
func (client *Client) ListWorkspaceEx(request *ListWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.deps.workspace.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}
