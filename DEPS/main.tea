import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: int64(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: integer(description='长链接最大连接时长',default='5000'),
  maxRequests?: integer(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: integer(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = config.readTimeout;
  @connectTimeout = config.connectTimeout;
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = config.maxIdleConns;
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '3.2.0',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'undefined'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 键值对
model Pair {
  // 键
  key?: string(name='key', example='key'),
  // 值
  value?: string(name='value', example='value'),
}

// 运维策略
model OpsActionPolicy {
  // 运维动作类型
  opsActionType?: string(name='ops_action_type', example='DISABLE_FAULT_ZONE_SLB_TRAFFIC'),
  // 超时时间
  timeout?: long(name='timeout', example=''),
  // 检查间隔
  checkInterval?: long(name='check_interval', example=''),
  // 重试次数
  retryTimes?: long(name='retry_times', example=''),
}

// 灰度流量配置
model GrayTrafficConfig {
  // 灰度流量类型
  grayTrafficType?: string(name='gray_traffic_type', example='COOKIE'),
  // 主机名
  hostname?: string(name='hostname', example='test'),
  // 匹配规则
  matchPatterns?: string(name='match_patterns', example='ss'),
  // 端口号
  port?: long(name='port', example='80'),
  // 比例
  proportion?: string(name='proportion', example='10'),
  // 目标 uri
  targetUri?: string(name='target_uri', example='test-uri'),
}

// 一个部署起来提供服务的应用实例信息
model AppService {
  // 应用名称
  applicationName?: string(name='application_name', example=''),
  // 关联的部署单元
  cellIds?: [ string ](name='cell_ids', example=''),
  // 服务实例描述
  description?: string(name='description', example=''),
  // 用户自定义的扩展属性
  extraInfos?: string(name='extra_infos', example=''),
  // 最近一次执行的运维操作单号
  latestOperationId?: string(name='latest_operation_id', example=''),
  // 最近一次执行的运维操作类型。取值列表：
  //                     DEPLOYMENT：部署操作
  //                 
  latestOperationType?: string(name='latest_operation_type', example=''),
  // 最近成功部署的版本号
  latestVersionNo?: string(name='latest_version_no', example=''),
  // 服务实例名称
  serviceName?: string(name='service_name', example=''),
  // 环境名称
  workspace?: string(name='workspace', example=''),
}

// CloudPlatform
model CloudPlatform {
  // name
  name?: string(name='name', example='name'),
  // host
  host?: string(name='host', example='host'),
  // loginName
  loginName?: string(name='login_name', example='loginName'),
  // password
  password?: string(name='password', example='password'),
}

// 发布概览信息
model ArrangementInfo {
  // 类型
  arrangementType?: string(name='arrangement_type', example='ONLINE_SERVICE'),
  // 环境变量
  envConfig?: [ Pair ](name='env_config', example=''),
  // 发布概览名称
  name?: string(name='name', example='test'),
  // 发布进程ID
  processDefinitionId?: string(name='process_definition_id', example='123'),
  // 环境 ID
  workspaceId?: string(name='workspace_id', example='123'),
  // 策略
  opsActionPolicies?: [ OpsActionPolicy ](name='ops_action_policies', example=''),
}

// 任务执行进度
model TaskExecutionProgress {
  // 任务名
  name?: string(name='name', example='aa'),
  // 显示名
  showName?: string(name='show_name', example='aa'),
  // 业务类型
  businessEntityCode?: string(name='business_entity_code', example='ARRANGEMENT'),
  // 错误代码
  errorCode?: string(name='error_code', example='001'),
  // 状态
  state?: string(name='state', example='FAILED'),
  // 执行次数
  executionCount?: string(name='execution_count', example='1'),
  // 详细信息
  detailMsg?: string(name='detail_msg', example='error'),
  // 开始时间
  startedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='started_time', example='2018-10-10T10:10:00Z'),
  // 结束时间
  finishedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finished_time', example='2018-10-10T10:10:00Z'),
  // 是否可独立执行
  standaloneExecutable?: boolean(name='standalone_executable', example='true, false'),
  // ID
  id?: string(name='id', example='123'),
}

// ResourceGroupExecutionProgress
model ResourceGroupExecutionProgress {
  // finished_time
  finishedTime?: boolean(name='finished_time', example='true, false'),
  // id
  id?: string(name='id', example='id'),
  // paas_id
  paasId?: string(name='paas_id', example='paas_id'),
  // resource_count
  resourceCount?: long(name='resource_count', example=''),
  // resource_states
  resourceStates?: [ Pair ](name='resource_states', example=''),
  // standalone_executable
  standaloneExecutable?: boolean(name='standalone_executable', example='true, false'),
  // started_time
  startedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='started_time', example='2018-10-10T10:10:00Z'),
  // state
  state?: string(name='state', example='state'),
  // refer_key
  referKey?: string(name='refer_key', example='refer_key'),
}

// 一个计算容器上正在执行的任务。
model OpsComputerTask {
  // 任务描述
  description?: string(name='description', example=''),
  // 执行详情。如果任务成功，为执行日志；如果任务失败，为错误信息
  executeDetails?: string(name='execute_details', example=''),
  // 任务结束时间
  finishTime?: string(name='finish_time', example=''),
  // 任务名称
  name?: string(name='name', example=''),
  // 任务开始时间
  startTime?: string(name='start_time', example=''),
  // 任务状态。取值列表：
  //                     EXECUTING：执行中；
  //                     SUCCESS：执行成功；
  //                     FAILED：执行失败
  //                 
  status?: string(name='status', example=''),
}

// 运维操作中的应用（服务）
model OpsApplication {
  // 应用（服务）名称
  name?: string(name='name', example=''),
  // 应用（服务）当前运维状态。取值列表：
  //                     INITING：初始化中；
  //                     INIT_FAILED：初始化失败；
  //                     INITED：初始化完成；
  //                     EXECUTING：执行中；
  //                     SUCCESS：执行成功；
  //                     FAILED：执行失败；
  //                     ROLLBACKED：已回滚；
  //                     CANCELED：已取消
  //                 
  status?: string(name='status', example=''),
  // APPLICATION和APP_SERVICE。设置为APPLICATION表示该实例描述对象为应用; APP_SERVICE表示该实例描述对象为应用服务。
  type?: string(name='type', example='APPLICATION'),
}

// 部署单元视图
model CellView {
  // 扩展部署机房id
  deploymentZoneId?: string(name='deployment_zone_id', example='0000000000000002'),
  // 部署单元描述
  description?: string(name='description', example='description'),
  // 显示名称
  displayName?: string(name='display_name', example='部署单元A'),
  // table id
  id?: string(name='id', example='0000000000000002'),
  // 标识
  identity?: string(name='identity', example='CellA'),
  // master zone id
  masterZoneId?: string(name='master_zone_id', example='master_zone'),
  // 部署单元状态
  status?: string(name='status', example='status'),
  // 工作空间 id
  workspaceId?: string(name='workspace_id', example='workspace'),
  // 工作空间组 id
  workspaceGroupId?: string(name='workspace_group_id', example='workspace_group'),
}

// SLB 执行进度
model SlbExecutionProgress {
  // 进度 ID
  id?: string(name='id', example='123'),
  // 进度名称
  name?: string(name='name', example='aa'),
  // 状态
  state?: string(name='state', example='FAILED'),
  // 挂载权重
  mountWeights?: [ Pair ](name='mount_weights', example=''),
}

// Region
model Region {
  // description
  description?: string(name='description', example='description'),
  // iaasProviderId
  iaasProviderId?: string(name='iaas_provider_id', example='iaasProviderId'),
  // region名称
  id?: string(name='id', example=''),
  // identity
  identity?: string(name='identity', example='identity'),
  // region显示名称
  name?: string(name='name', example=''),
  // networkType
  networkType?: string(name='network_type', example='networkType'),
  // state
  state?: string(name='state', example='state'),
  // utcCreate
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utcModified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // zoneDtos
  zoneDtos?: string(name='zone_dtos', example='zoneDtos'),
  // buildpackId
  buildpackId?: string(name='buildpack_id', example='buildpackId'),
  // fileStatus
  fileStatus?: string(name='file_status', example='fileStatus'),
  // fileLocation
  fileLocation?: string(name='file_location', example='fileLocation'),
  // objectName
  objectName?: string(name='object_name', example='objectName'),
  // fileSize
  fileSize?: long(name='file_size', example=''),
  // readableFileSize
  readableFileSize?: string(name='readable_file_size', example='readableFileSize'),
  // fileChecksum
  fileChecksum?: string(name='file_checksum', example='fileChecksum'),
  // originalFileName
  originalFileName?: string(name='original_file_name', example='originalFileName'),
  // buildpackTenantId
  buildpackTenantId?: string(name='buildpack_tenant_id', example='buildpackTenantId'),
  // fromRegionId
  fromRegionId?: string(name='from_region_id', example='fromRegionId'),
  // creationTime
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time', example='creationTime'),
  // modificationTime
  modificationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time', example='2018-10-10T10:10:00Z'),
}

// 发布应用信息
model ServiceInfo {
  // 应用名
  appName?: string(name='app_name', example='aa'),
  // 部署单元 ID 列表
  cellIds?: [ string ](name='cell_ids', example=''),
  // 默认执行账号
  defaultExecuteAccount?: string(name='default_execute_account', example='123'),
  // 环境变量
  envConfig?: [ Pair ](name='env_config', example=''),
  // 是否可以强制执行
  forceExecutable?: boolean(name='force_executable', example='true, false'),
  // 灰度规则配置
  grayTrafficConfigs?: [ GrayTrafficConfig ](name='gray_traffic_configs', example=''),
  // 分组数
  groupAmount?: long(name='group_amount', example=''),
  // 分组策略
  groupStrategyType?: string(name='group_strategy_type', example='QUICK'),
  // 从缓存安装
  installFromCache?: boolean(name='install_from_cache', example='true, false'),
  // 应用发布名
  name?: string(name='name', example='aa'),
  // 是否需要 beta
  needBeta?: boolean(name='need_beta', example='true, false'),
  // 是否需要灰度
  needGrayTraffic?: boolean(name='need_gray_traffic', example='true, false'),
  // 后置任务列表
  postArrangementInfo?: [ ArrangementInfo ](name='post_arrangement_info', example=''),
  // 前置任务列表
  preArrangementInfo?: [ ArrangementInfo ](name='pre_arrangement_info', example=''),
  // 发布概览
  serviceArrangement?: ArrangementInfo(name='service_arrangement', example=''),
  // 发布应用 ID
  serviceId?: string(name='service_id', example='123'),
  // 静态资源下载链接
  staticResourceDownloadUrl?: string(name='static_resource_download_url', example='test-url'),
  // 静态资源目标文件
  staticResourceTargetFile?: string(name='static_resource_target_file', example='aa'),
  // 类型
  type?: string(name='type', example='VM'),
  // 版本
  version?: string(name='version', example='123'),
  // 环境 ID
  workspaceId?: string(name='workspace_id', example='123'),
  // update_buildpack_version
  updateBuildpackVersion?: string(name='update_buildpack_version', example='update_buildpack_version'),
  // update_buildpack_id
  updateBuildpackId?: string(name='update_buildpack_id', example='update_buildpack_id'),
  // custom_params
  customParams?: string(name='custom_params', example='custom_params'),
}

// 代码提交
model CodeCommit {
  // 作者
  author?: string(name='author', example='author'),
  // 分支
  branch?: string(name='branch', example='branch'),
  // 代码版本
  codeVersion?: string(name='code_version', example='codeVersion'),
  // 时间
  date?: string(name='date', example='date'),
  // id
  id?: string(name='id', example='id'),
  // 消息
  msg?: string(name='msg', example='msg'),
  // 仓库名称
  repoName?: string(name='repo_name', example='仓库名称'),
  // 创建时间
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='utc_create', example='2018-10-10T10:10:00Z'),
  // 修改时间
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='utc_modified', example='2018-10-10T10:10:00Z'),
}

// Cloud
model Cloud {
  // id
  id?: long(name='id', example=''),
  // identity
  identity?: string(name='identity', example='identity'),
  // name
  name?: string(name='name', example='name'),
  // platforms
  platforms?: [ CloudPlatform ](name='platforms', example=''),
}

// 一个正在进行运维操作的计算容器。
model OpsComputer {
  // 计算容器id
  id?: string(name='id', example=''),
  // 计算容器内网ip
  innerIp?: string(name='inner_ip', example=''),
  // 计算容器名称
  name?: string(name='name', example=''),
  // 计算容器当前运维状态。取值列表：
  //                     INITED：初始化完成；
  //                     EXECUTING：执行中；
  //                     SUCCESS：执行成功；
  //                     FAILED：执行失败；
  //                     CANCELED：已取消；
  //                     IGNORED：已忽略
  //                 
  status?: string(name='status', example=''),
  // 计算容器上执行的任务信息。任务信息列表中包含正在执行和执行完成的任务。
  tasks?: [ OpsComputerTask ](name='tasks', example=''),
}

// 数据库资源信息
model DepsDatabase {
  // 服务实例列表
  appServices?: [ AppService ](name='app_services', example=''),
  // 连接地址
  connectionAddress?: string(name='connection_address', example=''),
  // CPU
  cpu?: long(name='cpu', example=''),
  // 数据库类型，取值 MYSQL, OCEANBASE
  engine?: string(name='engine', example=''),
  // 数据库版本，取值 MYSQL5, MYSQL6, MYSQL7, OCEANBASE1_4, 分别对应Mysql5.5, 5.6, 5.7, Ocea
  engineVersion?: string(name='engine_version', example=''),
  // iaaS在创建该资源时为其分配的唯一标示，创建中或创建失败时为空
  iaasId?: string(name='iaas_id', example=''),
  // 资源唯一标识
  id?: string(name='id', example=''),
  // 最大连接数
  maxConnections?: long(name='max_connections', example=''),
  // 最大IOPS
  maxIops?: long(name='max_iops', example=''),
  // 内存大小，单位：MB
  memory?: long(name='memory', example=''),
  // 资源名称
  name?: string(name='name', example='test'),
  // 网络类型，Classic或VPC
  networkType?: string(name='network_type', example='Classic'),
  // 网络连接类型，取值 Internet：外网，Intranet：内网
  netType?: string(name='net_type', example=''),
  // 连接端口
  port?: long(name='port', example=''),
  // 资源所属的地域id
  region?: string(name='region', example=''),
  // 数据库实例规格
  specIaasId?: string(name='spec_iaas_id', example=''),
  // 
  //                     
  //               资源状态，取值 CREATING：正在创建，CREATEFAILED：创建失败，RUNNING: 运行中，REBOOTING: 重启，REBOOT_FAILED: 重启失败，
  //               DELETING：正在删除，DELETED：删除成功，DELETE_FAILED：删除失败，RESOURCE_IMPORTING：资源导入中，RESOURCE_IMPORT_FAILED：资源导入失败，
  //               RESOURCE_REMOVING：资源删除中，RESOURCE_REMOVE_FAILED：资源删除失败，DBINSTANCECLASSCHANGING：修改规格中，
  //               MODIFY_SPEC_FAILED：修改规格失败
  //                 
  status?: string(name='status', example=''),
  // 存储空间GB
  storage?: long(name='storage', example=''),
}

// AppServiceExecutionProgress
model AppServiceExecutionProgress {
  // base_progress
  baseProgress?: ResourceGroupExecutionProgress(name='base_progress', example=''),
  // group_count
  groupCount?: long(name='group_count', example=''),
  // pre_deployment_execution_progresses
  preDeploymentExecutionProgresses?: [ TaskExecutionProgress ](name='pre_deployment_execution_progresses', example=''),
  // post_deployment_execution_progresses
  postDeploymentExecutionProgresses?: [ TaskExecutionProgress ](name='post_deployment_execution_progresses', example=''),
  // group_execution_progresses
  groupExecutionProgresses?: [ ResourceGroupExecutionProgress ](name='group_execution_progresses', example=''),
}

// 计算资源信息
model Computer {
  // 服务实例列表
  appServices?: [ AppService ](name='app_services', example=''),
  // 服务器所属的cell ID
  cellId?: string(name='cell_id', example=''),
  // 类型:POD/DOCKER_VM
  computerType?: string(name='computer_type', example='POD'),
  // CPU核数
  cpu?: long(name='cpu', example=''),
  // 弹性ip地址
  elasticIp?: string(name='elastic_ip', example=''),
  // iaas_id
  iaasId?: string(name='iaas_id', example='i-bp13r5zxxxxxxl2tzuw2'),
  // 计算资源唯一标识
  id?: string(name='id', example=''),
  // 内网ip地址
  innerIp?: string(name='inner_ip', example=''),
  // 内存大小，单位：MB
  memory?: long(name='memory', example=''),
  // 资源名称
  name?: string(name='name', example=''),
  // 公网ip地址
  publicIp?: string(name='public_ip', example=''),
  // 资源所属的地域id
  region?: string(name='region', example=''),
  // 资源状态，取值：
  //                     CREATING：创建中；
  //                     CREATE_FAILED：创建失败；
  //                     CREATED：已创建；
  //                     STARTING：开机中；
  //                     START_FAILED：开机失败；
  //                     UNALLOCATED：待分配；
  //                     INITIALIZING：初始化中；
  //                     INITIALIZE_FAILED：初始化失败；
  //                     OFFLINE：已下线；
  //                     READY：待部署；
  //                     DEPLOYING：部署中；
  //                     DEPLOY_FAILED：部署失败；
  //                     DEPLOYED：已部署；
  //                     RELEASING：释放中；
  //                     RELEASE_FAILED：释放失败；
  //                     STOPPING：关机中；
  //                     STOP_FAILED：关机失败；
  //                     STOPPED：已关机；
  //                     REBOOTING：重启中；
  //                     REBOOT_FAILED：重启失败；
  //                     DISK_INITIALIZING：初始化磁盘中；
  //                     SPEC_CHANGING：变配中；
  //                     LOCKED：被锁定；
  //                     EXPIRED：已过期；
  //                     TO_EXPIR：即将过期；
  //                     DELETING：删除中；
  //                     DELETE_FAILED：删除失败；
  //                     DELETED：删除成功
  //                 
  status?: string(name='status', example=''),
  // 资源所属的可用区id
  zone?: string(name='zone', example=''),
  // 机器是否镜像化
  deployMode?: string(name='deploy_mode', example='package or image'),
}

// SLB 信息
model SLBInfo {
  // 名称
  name?: string(name='name', example='test'),
  // 机器ID
  machineId?: string(name='machine_id', example='123'),
  // 端口
  port?: long(name='port', example=''),
  // paas id
  paasId?: string(name='paas_id', example='123'),
  // iaas id
  iaasId?: string(name='iaas_id', example='123'),
  // 虚拟服务器组 id
  vServerGroupId?: string(name='v_server_group_id', example='123'),
  // 虚拟服务器组名
  vServerGroupName?: string(name='v_server_group_name', example='test'),
  // 计算资源 ID
  computerId?: string(name='computer_id', example='123'),
  // 应用 ID
  appId?: string(name='app_id', example='123'),
  // 应用服务 ID
  appSvcId?: string(name='app_svc_id', example='123'),
  // vip 地址列表
  vipAddresses?: [ string ](name='vip_addresses', example=''),
  // 权重
  weight?: long(name='weight', example=''),
  // 状态
  state?: string(name='state', example='FAILED'),
  // ID
  id?: string(name='id', example='123'),
}

// 挂载权重
model MountWeight {
  // 挂载目标 ID
  mountTargetId?: string(name='mount_target_id', example='123'),
  // 端口
  port?: long(name='port', example=''),
  // 权重
  weight?: long(maximum='100', minimum='0', name='weight', example=''),
}

// 一组执行运维操作的应用（服务），同一个组中的应用（服务）将并行执行操作。
model OpsApplicationGroup {
  // 此运维应用（服务）组中包含的应用（服务）列表
  applications?: [ OpsApplication ](name='applications', example=''),
}

// 一个运维应用（服务）操作链。一个操作链中包含一个顺序的运维应用（服务）组列表，这些运维应用（服务）组将依次串行的执行运维操作。不同的操作链将并行执行。
model OpsApplicationChain {
  // 此运维应用链中包含的应用（服务）组列表
  groups?: [ OpsApplicationGroup ](name='groups', example=''),
}

// UserDTO
model UserDTO {
  // customerId
  customerId?: string(name='customer_id', example='customerId'),
  // name
  name?: string(name='name', example='name'),
  // realName
  realName?: string(name='real_name', example='realName'),
  // type
  type?: string(name='type', example='type'),
  // 用户id
  id?: string(name='id', example='100001'),
  // 登录名称
  loginName?: string(name='login_name', example='aksinspecttest'),
  // 邮箱
  email?: string(name='email', example='123@antgroup.com'),
  // 手机号
  mobile?: string(name='mobile', example='123042324'),
}

// 执行指令的一个参数。
model OpsCmdArg {
  // 指令参数名称
  name?: string(name='name', example=''),
  // 指令参数值
  value?: string(name='value', example=''),
}

// 机器信息
model Machine {
  // 机器名
  name?: string(name='name', example='test'),
  // 所属发布服务id
  serviceId?: string(name='service_id', example='123'),
  // 包版本
  servicePackageVersion?: string(name='service_package_version', example='1.0'),
  // 应用服务分组集合 ID
  serviceGroupCollectionId?: string(name='service_group_collection_id', example='123'),
  // 发布分组 ID
  serviceGroupId?: string(name='service_group_id', example='123'),
  // 概览 ID
  arrangementId?: string(name='arrangement_id', example='123'),
  // 服务类型
  serviceType?: string(name='service_type', example='VM'),
  // paas 服务 ID
  paasServiceId?: string(name='paas_service_id', example='123'),
  // paas 状态
  paasState?: string(name='paas_state', example='ONLINE'),
  // 关联目标 ID
  refTargetId?: string(name='ref_target_id', example='123'),
  // 目标 iaas id
  targetIaasId?: string(name='target_iaas_id', example='123'),
  // 内网 IP
  innerIp?: string(name='inner_ip', example='11.11.11.11'),
  // 公网 IP
  publicIp?: string(name='public_ip', example='11.11.11.11'),
  // 主机名
  hostName?: string(name='host_name', example='test'),
  // 主机域名
  hostDomain?: string(name='host_domain', example='test'),
  // 安全组ID
  securityDomainId?: string(name='security_domain_id', example='123'),
  // 安全组创建人 ID
  securityDomainCreatorId?: string(name='security_domain_creator_id', example='123'),
  // 安全组名
  securityDomainName?: string(name='security_domain_name', example='test'),
  // 默认执行账号
  defaultExecuteAccount?: string(name='default_execute_account', example='test'),
  // 可用区 ID
  zoneId?: string(name='zone_id', example='123'),
  // 部署单元 ID
  cellId?: string(name='cell_id', example='123'),
  // 用户名
  username?: string(name='username', example='test'),
  // 加密密码
  encodedPwd?: string(name='encoded_pwd', example='123'),
  // 加密秘钥
  encodedSecreyKey?: string(name='encoded_secrey_key', example='123'),
  // 公钥
  publicKey?: string(name='public_key', example='123'),
  // star manage ip
  starManagerIp?: string(name='star_manager_ip', example='11.11.11.11'),
  // star manager port
  starManagerPort?: long(name='star_manager_port', example=''),
  // 初始化脚本 url
  scriptUrl?: string(name='script_url', example='test-url'),
  // 特殊初始化脚本 url
  specialScriptUrl?: string(name='special_script_url', example='test-url'),
  // 代理 url
  agentUrl?: string(name='agent_url', example='test-url'),
  // 代理设置 url
  agentSetupUrl?: string(name='agent_setup_url', example='test-url'),
  // 机器初始 url
  machineInitUrl?: string(name='machine_init_url', example='test-url'),
  // 特殊机器初始 url
  specialMachineInitUrl?: string(name='special_machine_init_url', example='test-url'),
  // 控制类型
  controlType?: string(name='control_type', example='test'),
  // 控制对象
  controlTarget?: string(name='control_target', example='test'),
  // 是否需要初始化
  needInitialize?: boolean(name='need_initialize', example='true, false'),
  // SLB 信息
  slbInfoList?: [ SLBInfo ](name='slb_info_list', example=''),
  // 子任务 id 
  taskIds?: [ string ](name='task_ids', example=''),
  // 环境变量
  envConfig?: [ Pair ](name='env_config', example=''),
  // pd id
  processDefinitionId?: string(name='process_definition_id', example='123'),
  // 父节点 id
  parentId?: string(name='parent_id', example='123'),
  // 父节点类型
  parentEntityType?: string(name='parent_entity_type', example='SERVICE'),
  // 流程节点 ID
  nodeId?: string(name='node_id', example='123'),
  // 状态
  state?: string(name='state', example='FAILED'),
  // 开始时间
  startedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='started_time', example='2018-10-10T10:10:00Z'),
  // 结束时间
  finishedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finished_time', example='2018-10-10T10:10:00Z'),
  // 是否可独立执行
  standaloneExecutable?: boolean(name='standalone_executable', example='true, false'),
  // ID
  id?: string(name='id', example='123'),
}

// 执行失败任务节点
model ErrorTaskExecutionNode {
  // 节点 ID
  nodeId?: string(name='node_id', example='123'),
  // 节点名
  nodeName?: string(name='node_name', example='test'),
  // 错误码
  code?: string(name='code', example='001'),
  // 错误信息
  message?: string(name='message', example='rpc error'),
}

// AppManifest
model AppManifest {
  // id
  id?: string(name='id', example='id'),
  // workspaceId
  workspaceId?: string(name='workspace_id', example='workspaceId'),
  // appId
  appId?: string(name='app_id', example='appId'),
  // version
  appVersion?: string(name='app_version', example='version'),
  // name
  name?: string(name='name', example='name'),
  // storeLocation
  storeLocation?: string(name='store_location', example='storeLocation'),
  // location
  location?: string(name='location', example='location'),
  // etag
  etag?: string(name='etag', example='etag'),
  // remark
  remark?: string(name='remark', example='remark'),
  // 代码提交
  codeCommit?: CodeCommit(name='code_commit', example=''),
  // 创建时间
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='utc_create', example='2018-10-10T10:10:00Z'),
  // 修改时间
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='utc_modified', example='2018-10-10T10:10:00Z'),
}

// sidecar环境参数配置
model SidecarParamsConfig {
  // 类型：默认、透明劫持
  type?: string(name='type', example='default'),
  // 环境参数内容
  params?: string(name='params', example='key1=value1'),
}

// 部署单元
model DeployCell {
  // 所属逻辑单元名称[单元化模式特有]
  cellGroup?: string(name='cell_group', example='RZM0'),
  // 所属集群	
  // 
  cluster?: string(name='cluster', example='mayibank-sit'),
  // 蓝绿着色信息[单元化模式特有]
  color?: string(name='color', example='Blue'),
  // 创建时间
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='created_time', example='2018-10-10T10:10:00Z'),
  // cell名称，与name一样，为了兼容已有代码
  displayName?: string(name='display_name', example='RZM0A'),
  // 部署单元标识，创建之后不允许修改
  identity?: string(name='identity', example='RZM0A'),
  // 是否灰度[单元化模式特有]
  isGray?: boolean(name='is_gray', example='true, false'),
  // 部署单元名称，主要用作页面展示
  name?: string(name='name', example='RZM0A'),
  // 压测权重
  pressWeight?: long(name='press_weight', example='50'),
  // 部署单元类型[单元化模式特有]
  type?: string(name='type', example='本地域'),
  // 默认权重[单元化模式特有]
  weight?: long(name='weight', example='5'),
  // 所属工作空间名称
  workspace?: string(name='workspace', example='dev'),
  // 所属机房名称
  zone?: string(name='zone', example='cm10'),
  // cell id
  id?: string(name='id', example='0000000001'),
}

// BuildCommandParams
model BuildCommandParams {
  // buildpackId
  buildpackId?: string(name='buildpack_id', example='buildpackId'),
  // description
  description?: string(name='description', example='description'),
  // key
  key?: string(name='key', example='key'),
  // value
  value?: string(name='value', example='value'),
}

// NotificationReceiver
model NotificationReceiver {
  // config id
  configId?: string(name='config_id', example='123'),
  // receiver
  receiver?: string(name='receiver', example='test'),
  // description
  description?: string(name='description', example='test'),
  // id
  id?: string(name='id', example='123'),
}

// 技术栈包上传地址信息
model UploadEndpoint {
  // 对象存储的access_key_id
  accessKeyId?: string(name='access_key_id', example=''),
  // 上传的目标bucket名称
  bucket?: string(name='bucket', example=''),
  // 加密策略，仅storage_type为SYSTEM_OSS时有效
  encodedPolicy?: string(name='encoded_policy', example=''),
  // 文件失效的日期时间
  expiration?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='expiration', example=''),
  // 对象存储的上传目标文件路径
  filePath?: string(name='file_path', example=''),
  // 上传的目标主机名，仅storage_type为SYSTEM_OSS时有效
  host?: string(name='host', example=''),
  // 地域ID
  regionId?: string(name='region_id', example=''),
  // 签名，仅storage_type为SYSTEM_OSS时有效
  signature?: string(name='signature', example=''),
  // 存储类型，取值如下： SYSTEM_AFS表示AFS存储，SYSTEM_OSS表示OSS存储
  storageType?: string(name='storage_type', example=''),
  // 上传的目标URL
  url?: string(name='url', example=''),
}

// 机房视图
model ZoneView {
  // 显示名称
  displayName?: string(name='display_name', example='杭州A'),
  // table id
  id?: string(name='id', example='01c25937-5703-40dc-8'),
  // 标识
  identity?: string(name='identity', example='cn-hangzhou-a'),
  // 状态
  state?: string(name='state', example='state'),
}

// ServiceInfoGroup
model ServiceInfoGroup {
  // 发布应用列表
  serviceInfoList?: [ ServiceInfo ](name='service_info_list', example=''),
}

// sidecar过滤条件
model SidecarCondition {
  // 支持的workspaceGroup
  workspaceGroups?: string(name='workspace_groups', example='dev 或 dev,pub'),
  // 支持的cell列表
  cells?: string(name='cells', example='gz00a 或gz00a,gz00b'),
}

// BuildpackRegionRelationDetail
model BuildpackRegionRelationDetail {
  // buildpackId
  buildpackId?: string(name='buildpack_id', example='buildpackId'),
  // buildpackTenantId
  buildpackTenantId?: string(name='buildpack_tenant_id', example='buildpackTenantId'),
  // creationTime
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time', example='2018-10-10T10:10:00Z'),
  // fileChecksum
  fileChecksum?: string(name='file_checksum', example='fileChecksum'),
  // fileLocation
  fileLocation?: string(name='file_location', example='fileLocation'),
  // fileSize
  fileSize?: long(name='file_size', example=''),
  // fileStatus
  fileStatus?: string(name='file_status', example='fileStatus'),
  // fromRegionId
  fromRegionId?: string(name='from_region_id', example='fromRegionId'),
  // id
  id?: string(name='id', example='id'),
  // modificationTime
  modificationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time', example='2018-10-10T10:10:00Z'),
  // objectName
  objectName?: string(name='object_name', example='objectName'),
  // originalFileName
  originalFileName?: string(name='original_file_name', example='originalFileName'),
  // readableFileSize
  readableFileSize?: string(name='readable_file_size', example='readableFileSize'),
  // RegionDto
  region?: Region(name='region', example=''),
}

// 逻辑单元灾备信息
model DisasterInfo {
  // 正常容灾状态
  disasterRecoveryState?: string(name='disaster_recovery_state', example='NORMAL'),
  // 同城灾备单元(组)
  localFailoverTarget?: string(name='local_failover_target', example='RZ02'),
  // 压测容灾状态
  pressDisasterRecoveryState?: string(name='press_disaster_recovery_state', example='LDR'),
  // 异地灾备单元(组)
  remoteFailoverTarget?: string(name='remote_failover_target', example='RZ02'),
  // 逻辑单元&部署单元名称
  source?: string(name='source', example='RZ01'),
  // 容灾类型
  type?: string(name='type', example='CELL,CELL_GROUP'),
}

// 应用参数配置管理-某个参数在某个 scope + scope id 中渲染后的值
model ParamVal {
  // 参数渲染后的值
  renderVal?: string(name='render_val', example='apaks'),
  // 某个 scope_id
  scopeId?: string(name='scope_id', example='00000000300402'),
  // scope 类型
  scope?: string(name='scope', example='SITE,REGION,AZ,TENANT,WORKSPACEGROUP,WORKSPACE,CELL'),
}

// BGReleaseExecutionProgress
model BGReleaseExecutionProgress {
  // unit_id
  unitId?: string(name='unit_id', example='unit_id'),
  // unit_type
  unitType?: string(name='unit_type', example='unit_type'),
  // resource_type
  resourceType?: string(name='resource_type', example='resource_type'),
  // traffic_execution_progress_of_service
  trafficExecutionProgressOfService?: [ SlbExecutionProgress ](name='traffic_execution_progress_of_service', example=''),
  // service_execution_progress_group
  serviceExecutionProgressGroup?: [ TaskExecutionProgress ](name='service_execution_progress_group', example=''),
  // rollback_service_execution_progress_group
  rollbackServiceExecutionProgressGroup?: [ TaskExecutionProgress ](name='rollback_service_execution_progress_group', example=''),
  // base_progress
  baseProgress?: ResourceGroupExecutionProgress(name='base_progress', example=''),
}

// 对一个对象执行一条指令的结果。
model SingleExecResult {
  // 执行结果详情。如果成功，为执行日志；如果失败，为错误信息
  executeDetails?: string(name='execute_details', example=''),
  // 执行结束时间
  finishTime?: integer(name='finish_time', example=''),
  // 执行开始时间
  startTime?: integer(name='start_time', example=''),
  // 执行结果状态。取值列表：
  //                     EXECUTING：执行中；
  //                     SUCCESS：执行成功；
  //                     FAILED：执行失败；
  //                     IGNORED：已忽略；
  //                     TIME_OUT：已超时
  //                 
  status?: string(name='status', example=''),
  // 执行对象。比如一台机器的ip 
  target?: string(name='target', example=''),
}

// 虚拟服务器组挂载信息
model VServerGroupMountInfo {
  // iaas id
  iaasId?: string(name='iaas_id', example='123'),
  // 名称
  name?: string(name='name', example='test'),
  // paas id
  paasId?: string(name='paas_id', example='123'),
  // 权重信息
  mountWeights?: [ MountWeight ](name='mount_weights', example=''),
}

// 运维进程
model OpsProcessDefinition {
  // 描述
  description?: string(name='description', example='aa'),
  // 指令名称
  instruction?: string(name='instruction', example='aa'),
  // 进程名
  name?: string(name='name', example='aa'),
  // 运维类型
  opsType?: string(name='ops_type', example='APP_OPERATION'),
  // 发布单ID
  planId?: string(name='plan_id', example='123'),
  // 类型
  type?: string(name='type', example='BASIC_OPS'),
  // 概览信息
  arrangements?: [ ArrangementInfo ](name='arrangements', example=''),
  // 环境变量
  envConfig?: [ Pair ](name='env_config', example=''),
  // 支持的状态转换列表
  supportedTransitions?: [ string ](name='supported_transitions', example=''),
  // 节点ID
  nodeId?: string(name='node_id', example='123'),
  // 状态
  state?: string(name='state', example='FAILED'),
  // 开始时间
  startedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='started_time', example='2018-10-10T10:10:00Z'),
  // 结束时间
  finishedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finished_time', example='2018-10-10T10:10:00Z'),
  // 可独立执行
  standaloneExecutable?: boolean(name='standalone_executable', example='true, false'),
  // ID
  id?: string(name='id', example='123'),
}

// 记录额外信息，核心是一个 Key-Value 对
model Tag {
  // 可读键名
  displayName?: string(name='display_name', example='技术栈'),
  // 键名
  key?: string(name='key', example='techstack'),
  // 映射类型，可选
  type?: string(name='type', example='系统标签'),
  // 键值
  value?: string(name='value', example='Spring Boot'),
}

// Workspace
model Workspace {
  // 创建时间
  createTime?: string(name='create_time', example=''),
  // workspace 显示名称
  displayName?: string(name='display_name', example='生产环境'),
  // workspace 名称
  id?: string(name='id', example=''),
  // 工作空间唯一标识
  identity?: string(name='identity', example='prod'),
  // workspace 名称（等同于唯一标识）
  name?: string(name='name', example='dev'),
  // 网络类型
  networkType?: string(name='network_type', example=''),
  // workspace所在regionId
  region?: string(name='region', example=''),
  // region id
  regionId?: string(name='region_id', example='0000000001'),
  // 所属租户名称
  tenant?: string(name='tenant', example=''),
  // 最近更新时间
  updateTime?: string(name='update_time', example=''),
  // workspace所在zoneIdentity列表
  zones?: [ string ](name='zones', example=''),
  // 工作空间类型
  type?: string(name='type', example='UNIT'),
}

// 应用额外元数据信息
model AppExtraInfo {
  // 应用额外元数据名称
  name?: string(name='name', example='xx'),
  // 元数据类型为 TEXT, USER 类型
  type?: string(name='type', example='元数据类型'),
  // 元数据值
  value?: string(name='value', example='oo'),
}

// 合法的运维状态
model OpsTargetLegalStates {
  // 目标类型
  targetType?: string(name='target_type', example='aa'),
  // 合法状态
  states?: [ string ](name='states', example=''),
}

// sidecar生效范围详情
model SidecarScopeDetail {
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope', example='region'),
  // scope对应的唯一id，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity', example='00012'),
  // scope identity展示名称
  scopeIdentityDisplayName?: string(name='scope_identity_display_name', example='张家口'),
  // scope对应的唯一标识符
  scopeIdentityName?: string(name='scope_identity_name', example='hz_nf'),
}

// 技术栈支持的操作系统
model BuildpackOS {
  // creationTime
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time', example='2018-10-10T10:10:00Z'),
  // 描述
  description?: string(name='description', example='description'),
  // extraInfo
  extraInfo?: string(name='extra_info', example='json'),
  // 全名
  fullName?: string(name='full_name', example='fullName'),
  // id
  id?: long(name='id', example=''),
  // modificationTime
  modificationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time', example='2018-10-10T10:10:00Z'),
  // 名字
  name?: string(name='name', example='name'),
  // 操作系统位数
  osBit?: long(name='os_bit', example='64'),
  // supportedCloudDisplayNames
  supportedCloudDisplayNames?: [ string ](name='supported_cloud_display_names', example=''),
  // supportedCloudNames
  supportedCloudNames?: [ string ](name='supported_cloud_names', example=''),
  // 版本
  version?: string(name='version', example='version'),
  // 操作系统位数，e.g. 32 or 64
  osBitNum?: long(name='os_bit_num', example=''),
}

// AppServiceExecutionProgressWithRollbackInfo
model AppServiceExecutionProgressWithRollbackInfo {
  // progress
  progress?: AppServiceExecutionProgress(name='progress', example=''),
  // rollback_progress
  rollbackProgress?: AppServiceExecutionProgress(name='rollback_progress', example=''),
}

// 工作空间视图
model WorkspaceView {
  // 部署单元列表
  cells?: [ CellView ](name='cells', example=''),
  // 显示名称
  displayName?: string(name='display_name', example='工作空间A'),
  // table id
  id?: string(name='id', example='id'),
  // 标识
  identity?: string(name='identity', example='workspaceA'),
  // 网络类型
  networkType?: string(name='network_type', example='network_type'),
  // workspace所在region名称
  region?: string(name='region', example='region'),
}

// sidecar版本模板配置
model SidecarTemplateConfig {
  // 类型：默认、透明劫持
  type?: string(name='type', example='default'),
  // 模板内容
  template?: string(name='template', example='container:xxxx'),
}

// Cell
model Cell {
  // 部署区域名称
  deploymentZone?: string(name='deployment_zone', example=''),
  // 部署单元描述
  description?: string(name='description', example=''),
  // 部署单元名称
  id?: string(name='id', example=''),
  // 部署单元所属主可用区ID列表
  masterZone?: string(name='master_zone', example=''),
  // 部署单元显示名称
  name?: string(name='name', example=''),
  // 部署单元对应的paas id
  paasId?: string(name='paas_id', example=''),
  // 部署单元状态
  status?: string(name='status', example=''),
  // 租户名称
  tenant?: string(name='tenant', example=''),
  // 部署单元类型[单元化模式特有]。
  type?: string(name='type', example='RZone'),
  // 工作空间名称
  workspace?: string(name='workspace', example=''),
  // 环境名称
  workspaceGroup?: string(name='workspace_group', example=''),
  // 部署单元所属可用区ID列表
  zones?: [ string ](name='zones', example=''),
  // displayName
  displayName?: string(name='display_name', example='displayName'),
  // appendedZoneIds
  appendedZoneIds?: [ string ](name='appended_zone_ids', example=''),
}

// 应用参数配置管理-模板参数定义
model TemplateParamDef {
  // 数据保密级别，L1,L2,L3
  dataLevel?: string(name='data_level', example='L1,L2,L3'),
  // 默认值，表达式解析结果为空时使用
  defaultVal?: string(name='default_val', example='defaultAppName'),
  // 是否已删除
  deleted?: boolean(name='deleted', example='true, false'),
  // 参数描述
  desc?: string(name='desc', example='应用名称'),
  // 参数id
  id?: string(name='id', example='00000000300402'),
  // 参数名
  key?: string(name='key', example='appName'),
  // 版本
  paramVersion?: long(name='param_version', example='1'),
  // 参数值类型，CONST/EXPR
  type?: string(name='type', example='CONST,EXPR'),
  // 参数值，可能是一个常量或者表达式
  value?: string(name='value', example='{{app.cell.name}}'),
  // 创建时间
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='created_time', example='2018-10-10T10:10:00Z'),
  // 修改时间
  modifiedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modified_time', example='2018-10-10T10:10:00Z'),
}

// 技术栈版本的参数
model BuildpackParamTemplate {
  // 技术栈版本的id
  buildpackId?: string(name='buildpack_id', example=''),
  // 技术栈版本参数的默认值
  defaultValue?: string(name='default_value', example=''),
  // 技术栈版本参数的描述
  description?: string(name='description', example=''),
  // id
  id?: string(name='id', example=''),
  // 技术栈版本参数的key
  key?: string(name='key', example=''),
  // 该技术栈版本参数是否是只读的
  readonly?: boolean(name='readonly', example=''),
  // 该技术栈版本参数是否是必须的
  required?: boolean(name='required', example=''),
}

// 一个部署起来提供服务的应用实例信息
model AppServiceEntity {
  // appId
  appId?: string(name='app_id', example='appId'),
  // appName
  appName?: string(name='app_name', example='appName'),
  // buildpackFullVersion
  buildpackFullVersion?: string(name='buildpack_full_version', example='buildpackFullVersion'),
  // 构建包id
  buildpackId?: string(name='buildpack_id', example='buildpackId'),
  // cellIds
  cellIds?: [ string ](name='cell_ids', example='cellIds'),
  // description
  description?: string(name='description', example='description'),
  // 当前应用服务用到的 ecs 资源列表
  ecsList?: [ Computer ](name='ecs_list', example=''),
  // extendProperties
  extendProperties?: string(name='extend_properties', example='extendProperties'),
  // id
  id?: string(name='id', example='id'),
  // isDefault
  isDefault?: boolean(name='is_default', example='true, false'),
  // isService
  isService?: boolean(name='is_service', example='true, false'),
  // lastDeployStatus
  lastDeployStatus?: string(name='last_deploy_status', example='WAITING,EXECUTING,SUCCEED,EXCEPTION'),
  // lastDeployVersion
  lastDeployVersion?: string(name='last_deploy_version', example='lastDeployVersion'),
  // lastOpsOrderId
  lastOpsOrderId?: string(name='last_ops_order_id', example='lastOpsOrderId'),
  // name
  name?: string(name='name', example='name'),
  // ownerId
  ownerId?: string(name='owner_id', example='ownerId'),
  // 当前应用服务使用的 rds 资源列表
  rdsList?: [ DepsDatabase ](name='rds_list', example=''),
  // 当前应用服务使用的 slb 资源列表
  slbList?: [ SLBInfo ](name='slb_list', example=''),
  // techstackId
  techstackId?: long(name='techstack_id', example=''),
  // techstackIdentity
  techstackIdentity?: string(name='techstack_identity', example='techstackIdentity'),
  // techstackName
  techstackName?: string(name='techstack_name', example='techstackName'),
  // 创建时间
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='utc_create', example='2018-10-10T10:10:00Z'),
  // 修改时间
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // 工作空间显示名称
  workspaceDisplayName?: string(name='workspace_display_name', example='预发环境'),
  // workspaceId
  workspaceId?: string(name='workspace_id', example='workspaceId'),
  // 工作空间名称
  workspaceName?: string(name='workspace_name', example='sit'),
  // 负责人登录名称
  ownerLoginName?: string(name='owner_login_name', example='alipayAdmin@alipay.net'),
  // 负责人显示名称
  ownerDisplayName?: string(name='owner_display_name', example='乐乐'),
}

// 技术栈信息
model Techstack {
  // 描述信息
  description?: string(name='description', example='description'),
  // extraInfo
  extraInfo?: string(name='extra_info', example='extraInfo'),
  // 技术栈ID
  id?: string(name='id', example='id'),
  // 标识符
  identity?: string(name='identity', example='identity'),
  // 名称
  name?: string(name='name', example='name'),
  // 作用域
  scope?: string(name='scope', example='scope'),
  // 技术栈状态
  status?: string(name='status', example='status'),
}

// ConnectionStub
model ConnectionStub {
  // id
  id?: long(name='id', example=''),
  // cloud
  cloud?: Cloud(name='cloud', example=''),
  // StubType
  type?: string(name='type', example='PLUG, SOCKET'),
  // tenantName
  tenantName?: string(name='tenant_name', example='tenantName'),
  // tenantId
  tenantId?: string(name='tenant_id', example='tenantId'),
}

// 一个运维操作单元。
model OpsUnit {
  // 单元所属部署区
  cell?: string(name='cell', example=''),
  // 包含在此单元中进行运维操作的计算容器列表
  computers?: [ OpsComputer ](name='computers', example=''),
  // 单元所属地域
  region?: string(name='region', example=''),
  // 单元所属可用区
  zone?: string(name='zone', example=''),
}

// 应用管理-当前应用的依赖关系
model AppDepend {
  // 当前应用名称
  appName?: string(name='app_name', example='aks'),
  // 该应用依赖的所有应用的 id 列表字符串
  dependAppNames?: string(name='depend_app_names', example='acmetaservice,provisioncore'),
  // 应用显示名称
  appDisplayName?: string(name='app_display_name', example='应用容器服务'),
}

// 一个技术栈版本的基本信息
model Buildpack {
  // 可以使用该技术栈版本的租户名称
  availableTenantNames?: [ string ](name='available_tenant_names', example=''),
  // 技术栈版本的编译打包命令
  buildCommand?: string(name='build_command', example=''),
  // 分享给其他租户时留下的联系信息
  contactInfo?: string(name='contact_info', example=''),
  // 当前技术栈版本是否是debug模式
  debugMode?: boolean(name='debug_mode', example=''),
  // 废弃技术栈版本的原因
  depracationNote?: string(name='depracation_note', example=''),
  // 描述
  description?: string(name='description', example=''),
  // 技术栈的版本号
  fullVersion?: string(name='full_version', example=''),
  // 技术栈版本ID
  id?: string(name='id', example=''),
  // 行业标志,I(金区)或者N(非金区)
  industryLabel?: string(name='industry_label', example=''),
  // 主要版本号
  majorVersion?: long(name='major_version', example=''),
  // 次要版本号
  minorVersion?: long(name='minor_version', example=''),
  // 补丁版本号
  patchVersion?: long(name='patch_version', example=''),
  // 发布时间
  publicationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='publication_time', example=''),
  // 技术栈版本是系统系统的还是用户自定义的
  scope?: string(name='scope', example=''),
  // 技术栈版本的状态
  status?: string(name='status', example=''),
}

// TechstackBuildpackCount
model TechstackBuildpackCount {
  // buildpackCount
  buildpackCount?: long(name='buildpack_count', example='buildpackCount'),
  // creation_time
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time', example='2018-10-10T10:10:00Z'),
  // description
  description?: string(name='description', example='description'),
  // extra_info
  extraInfo?: string(name='extra_info', example='extra_info'),
  // id
  id?: string(name='id', example='id'),
  // identity
  identity?: string(name='identity', example='identity'),
  // modification_time
  modificationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time', example='2018-10-10T10:10:00Z'),
  // name
  name?: string(name='name', example='name'),
  // scope
  scope?: string(name='scope', example='scope'),
  // status
  status?: string(name='status', example='status'),
}

// ServiceInfoGroupCollection
model ServiceInfoGroupCollection {
  // service info groups
  serviceInfoGroups?: ServiceInfoGroup(name='service_info_groups', example=''),
}

// NotificationConfig
model NotificationConfig {
  // 接收人列表
  receivers?: [ NotificationReceiver ](name='receivers', example=''),
  // 类型
  notificationType?: string(name='notification_type', example='EMAIL'),
  // 是否开启，默认不开启
  enabled?: boolean(name='enabled', example='true, false'),
  // cloud_web_url
  cloudWebUrl?: string(name='cloud_web_url', example='test-url'),
  // id
  id?: string(name='id', example='123'),
}

// 分页查询
model PaginationQuery {
  // 当前页码
  currentPage?: long(name='current_page', example='1'),
  // 分页大小
  pageSize?: long(name='page_size', example='10'),
  // 模糊搜索
  fuzzyName?: string(name='fuzzy_name', example='mosn'),
}

// AppTechstackRelation
model AppTechstackRelation {
  // appId
  appId?: string(name='app_id', example='appId'),
  // buildpackArch
  buildpackArch?: string(name='buildpack_arch', example='buildpackArch'),
  // creationTime
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time', example='2018-10-10T10:10:00Z'),
  // extraInfo
  extraInfo?: string(name='extra_info', example='extraInfo'),
  // id
  id?: string(name='id', example='id'),
  // modificationTime
  modificationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time', example='2018-10-10T10:10:00Z'),
  // techstackId
  techstackId?: long(name='techstack_id', example='techstackId'),
  // techstackIdentity
  techstackIdentity?: string(name='techstack_identity', example='techstackIdentity'),
  // techstackName
  techstackName?: string(name='techstack_name', example='techstackName'),
}

// <String, Boolean> 映射
model MapStringToBooleanEntity {
  // key
  key?: string(name='key', example='key'),
  // value
  value?: boolean(name='value', example='true, false'),
}

// 蓝绿发布概览
model BGReleaseArrangement {
  // 活跃单元 ID
  activeUnitId?: string(name='active_unit_id', example='123'),
  // 非活跃单元 ID
  deactivatedUnitId?: string(name='deactivated_unit_id', example='123'),
  // 灰度进程ID
  grayTrafficProcessId?: string(name='gray_traffic_process_id', example='123'),
  // 回滚进程ID
  rollbackProcessId?: string(name='rollback_process_id', example='123'),
  // 发布应用信息集合
  serviceInfoCollection?: [ ServiceInfo ](name='service_info_collection', example=''),
  // 类型
  stepType?: string(name='step_type', example='SWITCHOVER_TRAFFIC'),
  // 单元类型
  unitType?: string(name='unit_type', example='ZONE'),
  // 名称
  name?: string(name='name', example='aa'),
  // 类型
  arrangementType?: string(name='arrangement_type', example='ONLINE_SERVICE'),
  // 环境变量
  envConfig?: [ Pair ](name='env_config', example=''),
  // 合法状态列表
  targetsLegalStates?: [ OpsTargetLegalStates ](name='targets_legal_states', example=''),
  // 运维进程ID
  processDefinitionId?: string(name='process_definition_id', example='123'),
  // 父运维进程ID
  parentId?: string(name='parent_id', example='123'),
  // 父进程类型
  parentEntityType?: string(name='parent_entity_type', example='aa'),
  // 支持的转换类型
  supportedTransitions?: [ string ](name='supported_transitions', example='SUCCEED_FORWARD'),
  // 流程节点 ID
  nodeId?: string(name='node_id', example='123'),
  // 状态
  state?: string(name='state', example='FAILED'),
  // 开始时间
  startedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='started_time', example='2018-10-10T10:10:00Z'),
  // 结束时间
  finishedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finished_time', example='2018-10-10T10:10:00Z'),
  // 是否可以独立运行
  standaloneExecutable?: boolean(name='standalone_executable', example='true, false'),
  // ID
  id?: string(name='id', example='123'),
}

// 应用sidecar基线配置
model AppBaselineSidecarConfig {
  // 应用名
  appName?: string(name='app_name', example='minitrans'),
  // sidecar类型
  category?: string(name='category', example='mosn'),
  // 应用基线适用条件，金融云环境仅能指定workspaceGroups属性，并且只能指定一个workspaceGroup
  conditions?: [ SidecarCondition ](name='conditions', example='workspaceGroups=dev'),
  // 是否开启sidecar
  enable?: boolean(name='enable', example='true, false'),
  // sidecar版本号，金融云环境必填
  sidecarVersion?: string(name='sidecar_version', example='sidecar-mosn-wsg-dev-1213121'),
  // 应用基线id
  id?: string(name='id', example='asdfsad-2e2-fsdsadfds'),
}

// StateCount
model StateCount {
  // state
  state?: string(name='state', example='state'),
  // count
  count?: long(name='count', example=''),
}

// 错误原因
model Reason {
  // content
  content?: string(name='content', example='content'),
  // visible
  visible?: boolean(name='visible', example='true, false'),
  // code
  code?: string(name='code', example='code'),
  // placeholder
  placeholder?: string(name='placeholder', example='placeholder'),
  // params
  params?: [ string ](name='params', example=''),
}

// BuildpackCompositeVO
model BuildpackCompositeVO {
  // app_service_count
  appServiceCount?: long(name='app_service_count', example=''),
  // creator
  creator?: UserDTO(name='creator', example=''),
  // origin_type
  originType?: string(name='origin_type', example='origin_type'),
  // publisher
  publisher?: UserDTO(name='publisher', example=''),
  // supported_o_s
  supportedOS?: [ BuildpackOS ](name='supported_o_s', example=''),
  // supported_regions
  supportedRegions?: [ BuildpackRegionRelationDetail ](name='supported_regions', example=''),
  // techstack
  techstack?: Techstack(name='techstack', example=''),
  // id
  id?: string(name='id', example='id'),
  // description
  description?: string(name='description', example='description'),
  // fullVersion
  fullVersion?: string(name='full_version', example='fullVersion'),
}

// 应用分组。
model AppGroup {
  // 应用依赖规划
  appScheme?: [ AppDepend ](name='app_scheme', example=''),
  // 应用分组描述
  description?: string(name='description', example='我是一个应用分组'),
  // 应用分组ID
  id?: string(name='id', example=''),
  // 应用分组名称
  name?: string(name='name', example=''),
  // 应用分组负责人登录名
  ownerLoginName?: string(name='owner_login_name', example=''),
  // 父应用分组ID
  parentId?: string(name='parent_id', example=''),
  // 应用分组层级，从1开始，1代表一级分组，2代表二级分组
  layer?: long(name='layer', example=''),
}

// 发生增量变动的workspace信息
model WorkspaceDeltaInfo {
  // 租户名
  tenant?: string(name='tenant', example='TEST'),
  // 环境名
  workspace?: string(name='workspace', example='test'),
}

// 技术栈的详细信息，包括关联信息
model BuildpackDetail {
  // 使用该技术栈版本的appservice的数量
  appServiceCount?: long(name='app_service_count', example='2'),
  // 可以使用该技术栈版本的租户ID
  availableTenantNames?: [ string ](name='available_tenant_names', example=''),
  // buildCommand
  buildCommand?: string(name='build_command', example='buildCommand'),
  // 分享给其他租户留下的联系信息
  contactInfo?: string(name='contact_info', example=''),
  // createdFrom
  createdFrom?: string(name='created_from', example='createdFrom'),
  // creationChain
  creationChain?: [ string ](name='creation_chain', example=''),
  // creationTime
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time', example='2018-10-10T10:10:00Z'),
  // 当前技术栈版本是否是debug模式
  debugMode?: boolean(name='debug_mode', example=''),
  // 废弃技术栈版本的原因
  depracationNote?: string(name='depracation_note', example=''),
  // 描述
  description?: string(name='description', example=''),
  // extraInfo
  extraInfo?: string(name='extra_info', example='extraInfo'),
  // 技术栈版本号
  fullVersion?: string(name='full_version', example=''),
  // 技术栈版本ID
  id?: string(name='id', example=''),
  // 行业标志,I(金区)或者N(非金区)
  industryLabel?: string(name='industry_label', example=''),
  // 主要版本号
  majorVersion?: long(name='major_version', example=''),
  // 次要版本号
  minorVersion?: long(name='minor_version', example=''),
  // modificationTime
  modificationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time', example='2018-10-10T10:10:00Z'),
  // 原始类型
  originType?: string(name='origin_type', example=''),
  // 补丁版本号
  patchVersion?: long(name='patch_version', example=''),
  // 发布时间
  publicationTime?: string(name='publication_time', example='2019-01-01T20:00:00'),
  // 发布时间，日期格式
  publicationTimeDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='publication_time_date', example='2018-10-10T10:10:00Z'),
  // 技术栈版本提供方所在域
  scope?: string(name='scope', example=''),
  // 技术栈版本的状态
  status?: string(name='status', example=''),
  // 支持的操作系统列表
  supportedOs?: [ BuildpackOS ](name='supported_os', example=''),
  // 支持的地域ID列表
  supportedRegions?: [ string ](name='supported_regions', example=''),
  // 支持的地域列表
  supportedRegionsList?: [ BuildpackRegionRelationDetail ](name='supported_regions_list', example=''),
  // techstack
  techstack?: Techstack(name='techstack', example=''),
  // 关联的 Techstack ID
  techstackId?: long(name='techstack_id', example=''),
  // tenantId
  tenantId?: string(name='tenant_id', example='tenantId'),
}

// 应用参数配置管理-应用参数模板
model AppConfigTemplate {
  // 应用名称
  appName?: string(name='app_name', example='apaks'),
  // 描述
  comment?: string(name='comment', example='应用容器服务'),
  // 应用参数模板 id
  id?: string(name='id', example='00000000300402'),
  // 操作人 id
  operatorId?: string(name='operator_id', example='00000000400301'),
  // 参数定义列表
  params?: [ TemplateParamDef ](name='params', example='[]'),
  // 参数模板发布时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='release_time', example='2018-10-10T10:10:00Z'),
  // 模板状态，DRAFT 草稿，RELEASE 已发布，发布后才会生成 version，否则为空
  state?: string(name='state', example='DRAFT,RELEASE'),
  // 租户 id
  tenantId?: string(name='tenant_id', example='00000000400402'),
  // 模板版本
  tplVersion?: string(name='tpl_version', example='1584434797339.c3ea'),
  // 创建时间
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='created_time', example='2018-10-10T10:10:00Z'),
  // 修改时间
  modifiedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modified_time', example='2018-10-10T10:10:00Z'),
}

// AggregateExecutableProgress
model AggregateExecutableProgress {
  // base_progress
  baseProgress?: ResourceGroupExecutionProgress(name='base_progress', example=''),
  // bg_release_progresses
  bgReleaseProgresses?: [ BGReleaseExecutionProgress ](name='bg_release_progresses', example=''),
  // app_service_progresses
  appServiceProgresses?: [ AppServiceExecutionProgressWithRollbackInfo ](name='app_service_progresses', example=''),
  // common_progresses
  commonProgresses?: [ ResourceGroupExecutionProgress ](name='common_progresses', example=''),
}

// Connection
model Connection {
  // id
  id?: long(name='id', example=''),
  // tenantId
  tenantId?: string(name='tenant_id', example='tenantId'),
  // identity
  identity?: string(name='identity', example='identity'),
  // name
  name?: string(name='name', example='name'),
  // plug
  plug?: ConnectionStub(name='plug', example=''),
  // socket
  socket?: ConnectionStub(name='socket', example='socket'),
  // accessKey
  accessKey?: string(name='access_key', example='accessKey'),
  // accessSecret
  accessSecret?: string(name='access_secret', example='accessSecret'),
  // 创建时间
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='created_time', example='2018-10-10T10:10:00Z'),
  // 修改时间
  modifiedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modified_time', example='2018-10-10T10:10:00Z'),
  // executor
  executor?: string(name='executor', example='executor'),
  // status
  status?: string(name='status', example='NORMAL'),
}

// 部署可用区
model DeploymentZone {
  // id
  id?: string(name='id', example='123'),
  // 名称
  name?: string(name='name', example='xx'),
  // 显示名
  displayName?: string(name='display_name', example='aa'),
  // 描述
  description?: string(name='description', example='aa'),
  // 环境 id
  workspaceId?: string(name='workspace_id', example='123'),
  // 工作空间组 id
  workspaceGroupId?: string(name='workspace_group_id', example='123'),
  // 状态
  status?: string(name='status', example='CREATED'),
  // 主可用区 ID
  masterZoneId?: string(name='master_zone_id', example='123'),
  // 附属可用区 ID
  appendedZoneIds?: [ string ](name='appended_zone_ids', example=''),
  // 包含部署单元
  cells?: [ Cell ](name='cells', example=''),
}

// 应用管理-应用代码库信息
model Repository {
  // 代码库名字
  name?: string(name='name', example='mss-demo'),
  // 代码库类型，svn或者git
  type?: string(name='type', example='svn, git'),
  // 代码库地址
  url?: string(name='url', example='https://git.tech.antfin.com/xxx/xxx'),
  // 代码库负责人登录名称
  ownerLoginName?: string(name='owner_login_name', example='alipayAdmin@alipay.net'),
  // 代码库负责人显示名称
  ownerDisplayName?: string(name='owner_display_name', example='乐乐'),
  // 创建时间
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='created_time', example='2018-10-10T10:10:00Z'),
}

// sidecar信息
// 
model Sidecar {
  // sidecar描述内容
  description?: string(name='description', example='mesh sidecar'),
  // 创建时间
  gmtCreated?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_created', example='2018-10-10T10:10:00Z'),
  // 修改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // sidecar名称
  sidecarName?: string(name='sidecar_name', example='mosn'),
  // scope生效范围详情
  scopeDetail?: SidecarScopeDetail(name='scope_detail', example=''),
}

// 执行进度
model ExecutorProgress {
  // 请求 ID
  requestId?: string(name='request_id', example='123'),
  // 请求 ID 列表
  requestIds?: [ string ](name='request_ids', example=''),
  // 状态
  status?: string(name='status', example='FAILED'),
  // 错误信息
  resultMsg?: string(name='result_msg', example='rpc error'),
}

// BuildpackDetailVO
model BuildpackDetailVO {
  // appServiceCount
  appServiceCount?: long(name='app_service_count', example='111'),
  // availableTenantNames
  availableTenantNames?: [ string ](name='available_tenant_names', example=''),
  // buildpack_params
  buildpackParams?: [ BuildpackParamTemplate ](name='buildpack_params', example=''),
  // buildCommand
  buildCommand?: string(name='build_command', example='buildCommand'),
  // build_commandp_params
  buildCommandParams?: [ BuildCommandParams ](name='build_command_params', example=''),
  // contactInfo
  contactInfo?: string(name='contact_info', example='contactInfo'),
  // createdFrom
  createdFrom?: string(name='created_from', example='createdFrom'),
  // creationChain
  creationChain?: [ string ](name='creation_chain', example=''),
  // creationTime
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time', example='2018-10-10T10:10:00Z'),
  // creator
  creator?: UserDTO(name='creator', example=''),
  // debugMode
  debugMode?: boolean(name='debug_mode', example='true, false'),
  // depracationNote
  depracationNote?: string(name='depracation_note', example='depracationNote'),
  // description
  description?: string(name='description', example='description'),
  // extraInfo
  extraInfo?: string(name='extra_info', example='extraInfo'),
  // fullVersion
  fullVersion?: string(name='full_version', example='fullVersion'),
  // id
  id?: string(name='id', example='id'),
  // industryLabel
  industryLabel?: string(name='industry_label', example='industryLabel'),
  // majorVersion
  majorVersion?: long(name='major_version', example=''),
  // minorVersion
  minorVersion?: long(name='minor_version', example=''),
  // modificationTime
  modificationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time', example='2018-10-10T10:10:00Z'),
  // originType
  originType?: string(name='origin_type', example='originType'),
  // patchVersion
  patchVersion?: long(name='patch_version', example=''),
  // publicationTime
  publicationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='publication_time', example='2018-10-10T10:10:00Z'),
  // publisher
  publisher?: UserDTO(name='publisher', example=''),
  // scope
  scope?: string(name='scope', example='scope'),
  // status
  status?: string(name='status', example='status'),
  // storageUploadEndpoints
  storageUploadEndpoints?: [ UploadEndpoint ](name='storage_upload_endpoints', example=''),
  // supportedOS
  supportedOS?: [ BuildpackOS ](name='supported_o_s', example=''),
  // supportedRegions
  supportedRegions?: [ BuildpackRegionRelationDetail ](name='supported_regions', example=''),
  // techstack
  techstack?: Techstack(name='techstack', example=''),
  // tenantId
  tenantId?: string(name='tenant_id', example='tenantId'),
}

// 应用信息
model Application {
  // 应用部署时依赖的应用名称，只允许取此次调用参数中列出的应用。不允许形成循环依赖。
  depends?: [ string ](name='depends', example=''),
  // 执行部署操作的目标应用名称，应用名称最大60个UTF-8字符
  name?: string(name='name', example=''),
  // 执行部署操作的目标应用服务名称，应用服务名称最大60个UTF-8字符
  serviceName?: string(name='service_name', example=''),
  // 执行部署操作的目标应用版本。如果某个应用未指定版本，则使用最新版本部署。
  version?: string(name='version', example=''),
  // 自定义参数 jsonStr Map<String,List<String>>
  customParamsMap?: string(name='custom_params_map', example='"{"hello":["world"],"key":["val222"]}"'),
}

// OpsTaskExecutionDetail
model OpsTaskExecutionDetail {
  // task_id
  taskId?: string(name='task_id', example='task_id'),
  // request_token
  requestToken?: string(name='request_token', example='request_token'),
  // node_id
  nodeId?: string(name='node_id', example='node_id'),
  // request_id
  requestId?: string(name='request_id', example='request_id'),
  // execution_count
  executionCount?: long(name='execution_count', example=''),
  // executionState
  executionState?: string(name='execution_state', example='executionState'),
  // target_id
  targetId?: string(name='target_id', example='target_id'),
  // error_code
  errorCode?: string(name='error_code', example='error_code'),
  // result_msg
  resultMsg?: string(name='result_msg', example='result_msg'),
  // startedTime
  startedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='started_time', example='2018-10-10T10:10:00Z'),
  // finished_time
  finishedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finished_time', example='2018-10-10T10:10:00Z'),
  // standalone_executable
  standaloneExecutable?: boolean(name='standalone_executable', example='true, false'),
  // id
  id?: string(name='id', example='id'),
}

// 一条指令执行的结果。
model CmdExecResult {
  // 错误信息。内容为指令无法下发到机器上的详细原因
  errMsg?: string(name='err_msg', example=''),
  // 执行结束时间
  finishTime?: integer(name='finish_time', example=''),
  // 执行的结果
  results?: [ SingleExecResult ](name='results', example=''),
  // 执行开始时间
  startTime?: integer(name='start_time', example=''),
  // 执行结果状态。取值列表：
  //                     EXECUTING：执行中；
  //                     SUCCESS：执行成功；
  //                     FAILED：执行失败；
  //                     IGNORED：已忽略；
  //                     TIME_OUT：已超时
  //                 
  status?: string(name='status', example=''),
}

// SLB 挂载信息
model SLBMountInfo {
  // iaas id
  iaasId?: string(name='iaas_id', example='123'),
  // slb id
  id?: string(name='id', example='123'),
  // SLB 名
  name?: string(name='name', example='test'),
  // vip 地址
  vipAddresses?: [ string ](name='vip_addresses', example=''),
  // 挂载权重
  mountWeights?: [ MountWeight ](name='mount_weights', example=''),
  // 虚拟服务器组挂载信息
  vServerGroupMountInfoList?: [ VServerGroupMountInfo ](name='v_server_group_mount_info_list', example=''),
}

// BuildpackParam
model BuildpackParam {
  // default_value
  defaultValue?: string(name='default_value', example='default_value'),
  // key
  key?: string(name='key', example='key'),
  // readonly
  readonly?: boolean(name='readonly', example='true, false'),
  // required
  required?: boolean(name='required', example='true, false'),
  // description
  description?: string(name='description', example='description'),
}

// 应用管理-应用服务计数
model AppServiceCount {
  // 经典容器服务数量
  classicCount?: long(name='classic_count', example=''),
  // 容器应用服务数量
  containerCount?: long(name='container_count', example=''),
  // 无服务器应用服务数
  serverlessCount?: long(name='serverless_count', example=''),
}

// DepracationNotePayload
model DepracationNotePayload {
  // depracationNote
  depracationNote?: string(name='depracation_note', example='depracationNote'),
}

// 应用版本构建和发布包信息
model AppVersion {
  // 所属应用id `内部id对用户无用，不应返回，应使用应用名称`
  appId?: string(name='app_id', example=''),
  // 从源代码构建时标识代码分支，上传新版本时为空 `混淆了应用版本和编译任务；目前没必要返回`
  branch?: string(name='branch', example=''),
  // 应用发布包构建类型:**scm**(源代码构建)，**upload_file**(发布包上传包括本地上传和从某个文件交换源上传) `混淆了应用版本和编译任务；目前没必要返回`
  //                 
  buildType?: string(name='build_type', example=''),
  // 从源代码构建时标识代码版本，上传新版本时为空 `混淆了应用版本和编译任务；目前没必要返回`
  codeVersion?: string(name='code_version', example=''),
  // 版本描述
  description?: string(name='description', example=''),
  // 新版本构建的错误码，成功则为空 `混淆了应用版本和编译任务`
  errorCode?: string(name='error_code', example=''),
  // 新版本构建的错误提示信息，成功则为空 `混淆了应用版本和编译任务`
  errorMsg?: string(name='error_msg', example=''),
  // 构建成功后标识应用发布包的md5
  etag?: string(name='etag', example=''),
  // 应用版本id `内部id对用户无用，不应返回`
  id?: string(name='id', example=''),
  // 应用构建状态:**doing**(进行中),**success**(成功),**failed**(失败)
  status?: string(name='status', example=''),
  // 本次应用发布包构建后台任务的id `混淆了应用版本和构建任务，应使用2个不同的模型`
  taskId?: string(name='task_id', example=''),
  // 创建时间 `命名建议为create_time`
  utcCreate?: string(name='utc_create', example=''),
  // 应用版本号
  version?: string(name='version', example=''),
  // 所属工作空间 `内部id对用户无用，不应返回，应使用workspace unique名称`
  workspaceId?: string(name='workspace_id', example=''),
}

// 一个执行的指令。
model OpsCmd {
  // 执行指令的参数列表
  args?: [ OpsCmdArg ](name='args', example=''),
  // 失败重试的间隔，单位为秒
  retryInterval?: integer(name='retry_interval', example=''),
  // 失败重试次数
  retryTimes?: integer(name='retry_times', example=''),
  // 指令模板ID
  templateId?: string(name='template_id', example=''),
  // 单次执行的超时时间，单位为秒
  timeOut?: integer(name='time_out', example=''),
}

// OpsTask
model OpsTask {
  // parent_group_id
  parentGroupId?: string(name='parent_group_id', example='parent_group_id'),
  // service_id
  serviceId?: string(name='service_id', example='service_id'),
  // arrangement_id
  arrangementId?: string(name='arrangement_id', example='arrangement_id'),
  // action_handler_code
  actionHandlerCode?: string(name='action_handler_code', example='action_handler_code'),
  // max_retry_attempts
  maxRetryAttempts?: long(name='max_retry_attempts', example=''),
  // context
  context?: [ Pair ](name='context', example=''),
  // process_definition_id
  processDefinitionId?: string(name='process_definition_id', example='process_definition_id'),
  // parent_id
  parentId?: string(name='parent_id', example='parent_id'),
  // parent_entity_type
  parentEntityType?: string(name='parent_entity_type', example='parent_entity_type'),
  // state
  state?: string(name='state', example='state'),
  // started_time
  startedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='started_time', example='2018-10-10T10:10:00Z'),
  // finished_time
  finishedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finished_time', example='2018-10-10T10:10:00Z'),
  // standalone_executable
  standaloneExecutable?: boolean(name='standalone_executable', example='true, false'),
  // id
  id?: string(name='id', example='id'),
}

// 应用参数配置管理-某个参数在不同环境中渲染后的值
model RenderParam {
  // 参数名
  key?: string(name='key', example='appName'),
  // 参数值，可能是一个常量或者表达式
  value?: string(name='value', example='{{app.cell.name}}'),
  // 参数值类型，CONST/EXPR
  type?: string(name='type', example='CONST,EXPR'),
  // 参数描述
  desc?: string(name='desc', example='应用名称'),
  // 数据保密级别，L1,L2,L3
  dataLevel?: string(name='data_level', example='L1,L2,L3'),
  // 参数渲染后的值
  renderVals?: [ ParamVal ](name='render_vals', example='[]'),
}

// BuildpackV2Adapter
model BuildpackAdapter {
  // buildpackArch
  buildpackArch?: string(name='buildpack_arch', example='buildpackArch'),
  // fullVersion
  fullVersion?: string(name='full_version', example='fullVersion'),
  // supportedOS
  supportedOS?: [ BuildpackOS ](name='supported_o_s', example=''),
  // supportedRegions
  supportedRegions?: [ BuildpackRegionRelationDetail ](name='supported_regions', example=''),
  // techstack
  techstack?: Techstack(name='techstack', example=''),
}

// AppServiceEnvParam
model AppServiceEnvParam {
  // app_id
  appId?: string(name='app_id', example='app_id'),
  // app_service_id
  appServiceId?: string(name='app_service_id', example='app_service_id'),
  // baseline_buildpack_id
  baselineBuildpackId?: string(name='baseline_buildpack_id', example='baseline_buildpack_id'),
  // creation_time
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time', example='2018-10-10T10:10:00Z'),
  // default_value
  defaultValue?: string(name='default_value', example='default_value'),
  // description
  description?: string(name='description', example='description'),
  // id
  id?: string(name='id', example='id'),
  // key
  key?: string(name='key', example='key'),
  // modification_time
  modificationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time', example=''),
  // original_default_value
  originalDefaultValue?: string(name='original_default_value', example='original_default_value'),
  // original_description
  originalDescription?: string(name='original_description', example='original_description'),
  // original_readonly
  originalReadonly?: string(name='original_readonly', example='original_readonly'),
  // original_required
  originalRequired?: boolean(name='original_required', example='true,false'),
  // readonly
  readonly?: boolean(name='readonly', example='true, false'),
  // required
  required?: boolean(name='required', example='true, false'),
  // status
  status?: string(name='status', example='status'),
  // value
  value?: string(name='value', example='value'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
}

// 角色信息
model Role {
  // id
  id?: string(name='id', example='id'),
  // name
  name?: string(name='name', example='name'),
  // description
  description?: string(name='description', example='description'),
}

// BuildpackAppService
model BuildpackAppService {
  // appId
  appId?: string(name='app_id', example='appId'),
  // appName
  appName?: string(name='app_name', example='appName'),
  // buildpackFullVersion
  buildpackFullVersion?: string(name='buildpack_full_version', example='buildpackFullVersion'),
  // buildpackId
  buildpackId?: string(name='buildpack_id', example='buildpackId'),
  // cellIds
  cellIds?: [ string ](name='cell_ids', example=''),
  // description
  description?: string(name='description', example='description'),
  // extendProperties
  extendProperties?: string(name='extend_properties', example='extendProperties'),
  // id
  id?: string(name='id', example='id'),
  // isDefault
  isDefault?: boolean(name='is_default', example='true, false'),
  // isService
  isService?: boolean(name='is_service', example='true, false'),
  // lastDeployStatus
  lastDeployStatus?: string(name='last_deploy_status', example='lastDeployStatus'),
  // lastDeployVersion
  lastDeployVersion?: string(name='last_deploy_version', example='lastDeployVersion'),
  // lastOpsOrderId
  lastOpsOrderId?: string(name='last_ops_order_id', example='lastOpsOrderId'),
  // name
  name?: string(name='name', example='name'),
  // ownerId
  ownerId?: string(name='owner_id', example='ownerId'),
  // techstackId
  techstackId?: long(name='techstack_id', example=''),
  // techstackIdentity
  techstackIdentity?: string(name='techstack_identity', example='techstackIdentity'),
  // techstackName
  techstackName?: string(name='techstack_name', example='techstackName'),
  // utcCreate
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utcModified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // workspaceId
  workspaceId?: string(name='workspace_id', example='workspaceId'),
}

// 应用管理-当前 workspace 的部署图/拓扑图
model DeployView {
  // 当前 workspace 下的所有应用服务
  workspaceAppServices?: [ AppServiceEntity ](name='workspace_app_services', example=''),
  // workspace 显示名称
  workspaceDisplayName?: string(name='workspace_display_name', example='测试环境'),
  // workspace id
  workspaceId?: string(name='workspace_id', example='00004302401'),
  // workspace 名称
  workspaceName?: string(name='workspace_name', example='58sit'),
}

// sidecar规则
model SidecarRule {
  // sidecar规则描述
  description?: string(name='description', example='张家口预发环境'),
  // 创建时间
  gmtCreated?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_created', example='2018-10-10T10:10:00Z'),
  // 修改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 版本实例名称
  instanceName?: string(name='instance_name', example='mosn_1.0_zjk'),
  // 规则优先级
  level?: long(name='level', example='0'),
  // scope生效范围详情
  scopeDetail?: SidecarScopeDetail(name='scope_detail', example=''),
  // sidecar版本实例id
  sidecarVersionInstanceId?: string(name='sidecar_version_instance_id', example='0012'),
  // 规则状态
  status?: long(name='status', example='1'),
  // 发布、下线、废弃原因
  // 
  statusReason?: string(name='status_reason', example='版本已废弃'),
}

// SupportedRegion
model SupportedRegion {
  // file_size
  fileSize?: long(name='file_size', example=''),
  // file_status
  fileStatus?: string(name='file_status', example='file_status'),
  // original_file_name
  originalFileName?: string(name='original_file_name', example='original_file_name'),
  // region_id
  regionNum?: string(name='region_num', example='region_id'),
}

// 异步任务执行结果。
model TaskResult {
  // 任务执行结果。取值：
  //                     SUCCESSFUL：任务执行成功；
  //                     FAILED：任务执行失败
  //                 
  result?: string(name='result', example=''),
  // 任务目标id，如：一个Computer的id
  targetId?: string(name='target_id', example=''),
}

// 应用参数配置管理-应用参数
model AppParam {
  // 应用名称
  appName?: string(name='app_name', example='apaks'),
  // 创建时间
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='created_time', example='2018-10-10T10:10:00Z'),
  // 数据保密等级
  dataLevel?: string(name='data_level', example='L1,L2,L3'),
  // 参数描述
  desc?: string(name='desc', example='内部域名'),
  // 应用参数 id
  id?: string(name='id', example='00000000380302'),
  // 参数名
  key?: string(name='key', example='inner_domain'),
  // 修改时间
  modifiedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modified_time', example='2018-10-10T10:10:00Z'),
  // 版本
  paramVersion?: long(name='param_version', example='1'),
  // 该参数属于哪个 scope
  scope?: string(name='scope', example='SITE,REGION,AZ,TENANT,WORKSPACEGROUP,WORKSPACE,CELL'),
  // 该参数在该 scope 中的 id
  scopeId?: string(name='scope_id', example='00000000400301'),
  // 租户 id
  tenantId?: string(name='tenant_id', example='00000000420301'),
  // 参数类型
  type?: string(name='type', example='CONST,EXPR'),
  // 参数值
  value?: string(name='value', example='alipay.net'),
}

// sidecar版本实例
model SidecarVersionInstance {
  // 版本实例描述
  description?: string(name='description', example='mosn张家口预发环境实例'),
  // 创建时间
  gmtCreated?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_created', example='2018-10-10T10:10:00Z'),
  // 修改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 版本实例名称
  instanceName?: string(name='instance_name', example='mosn_zjk_pre'),
  // 环境参数模板
  params?: string(name='params', example='"key1=value1" '),
  // sidecar参数配置
  paramsConfigs?: [ SidecarParamsConfig ](name='params_configs', example=''),
  // sidecar版本发布说明
  releaseNote?: string(name='release_note', example='"release note:xxx" '),
  // scope生效范围详情
  scopeDetail?: SidecarScopeDetail(name='scope_detail', example=''),
  // sidecar名称
  sidecarName?: string(name='sidecar_name', example='mosn'),
  // sidecar版本id
  sidecarReleaseVersionId?: string(name='sidecar_release_version_id', example='00123'),
  // sidecar版本号
  sidecarVersion?: string(name='sidecar_version', example='v1.0'),
  // sidecar版本实例id
  sidecarVersionInstanceId?: string(name='sidecar_version_instance_id', example='00012'),
  // 版本实例状态
  status?: long(name='status', example='1'),
  // 发布、下线、废弃原因
  // 
  statusReason?: string(name='status_reason', example='版本已废弃'),
  // sidecar版本模板
  template?: string(name='template', example='"container:xxx"'),
  // sidecar模板配置
  templateConfigs?: [ SidecarTemplateConfig ](name='template_configs', example=''),
}

// 技术栈版本和地域之间的关联
model BuildpackRegionRelation {
  // 技术栈版本的id
  buildpackId?: string(name='buildpack_id', example=''),
  // 技术栈租户ID
  buildpackTenantId?: string(name='buildpack_tenant_id', example=''),
  // 文件的checksum
  fileChecksum?: string(name='file_checksum', example=''),
  // 文件存储地址
  fileLocation?: string(name='file_location', example=''),
  // 文件大小，类似1100
  fileSize?: long(name='file_size', example=''),
  // 文件状态
  fileStatus?: string(name='file_status', example=''),
  // 文件的初始名称
  originalFileName?: string(name='original_file_name', example=''),
  // 文件可读的大小，类似1.1MB
  readableFileSize?: string(name='readable_file_size', example=''),
  // region的ID
  regionId?: string(name='region_id', example=''),
  // region的标识符
  regionIdentity?: string(name='region_identity', example=''),
  // region的名称
  regionName?: string(name='region_name', example=''),
  // 存储类型，取值如下： SYSTEM_AFS表示AFS存储，SYSTEM_OSS表示OSS存储
  storageType?: string(name='storage_type', example=''),
}

// region info
model RegionMeta {
  // region支持的网络类型
  availableNetworkTypes?: [ string ](name='available_network_types', example=''),
  // region display name
  displayName?: string(name='display_name', example='华东1 金融云（杭州）'),
  // region identity
  id?: string(name='id', example='CH-HANGZHOU-FINANCE'),
  // region paas id
  paasId?: string(name='paas_id', example='0000000001'),
  // region iaas id
  regionIaasId?: string(name='region_iaas_id', example='cn-hangzhou'),
  // region包含的所有zone id列表
  zoneIds?: [ string ](name='zone_ids', example=''),
  // region state.
  state?: string(name='state', example='AVAILABLE'),
}

// WorkspaceGroup
model WorkspaceGroup {
  // 环境名称
  id?: string(name='id', example=''),
  // 环境显示名称
  name?: string(name='name', example=''),
  // 环境状态
  status?: string(name='status', example=''),
  // 租户名称
  tenant?: string(name='tenant', example=''),
  // 工作空间名称列表
  workspaces?: [ string ](name='workspaces', example=''),
}

// 聚合任务执行进度
model AggregatedTaskExecutionProgress {
  // 错误节点信息
  errorTaskExecutionNodes?: [ ErrorTaskExecutionNode ](name='error_task_execution_nodes', example=''),
  // 任务执行进度
  taskExecutionProgress?: TaskExecutionProgress(name='task_execution_progress', example=''),
}

// 发布单
model OpsPlan {
  // 是否自动执行
  autoExecution?: boolean(name='auto_execution', example='true, false'),
  // 上下文
  context?: [ Pair ](name='context', example=''),
  // 描述
  description?: string(name='description', example='test'),
  // 是否开启通知
  enableNotification?: boolean(name='enable_notification', example='true, false'),
  // 执行人 ID
  executorId?: string(name='executor_id', example='123'),
  // 执行人
  executorName?: string(name='executor_name', example='test'),
  // 完成时间
  finishedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finished_time', example='2018-10-10T10:10:00Z'),
  // ID
  id?: string(name='id', example='123'),
  // last operator
  lastOperator?: string(name='last_operator', example='aa'),
  // 详情
  messageDetail?: [ Pair ](name='message_detail', example=''),
  // 信息
  messageParams?: string(name='message_params', example='test'),
  // 名称
  name?: string(name='name', example='test'),
  // 类型
  opsType?: string(name='ops_type', example='DEPLOY'),
  // 发布进程
  processDefinitions?: [ OpsProcessDefinition ](name='process_definitions', example=''),
  // release_mode
  releaseMode?: string(name='release_mode', example='发布模式'),
  // 回滚单ID
  rollbackPlanId?: string(name='rollback_plan_id', example='123'),
  // 是否可独立执行
  standaloneExecutable?: boolean(name='standalone_executable', example='true, false'),
  // 开始时间
  startedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='started_time', example='2018-10-10T10:10:00Z'),
  // 状态
  state?: string(name='state', example='FAILED'),
  // 发布单 ID
  timeSeriesId?: string(name='time_series_id', example='123'),
}

// 逻辑单元
model CellGroup {
  // 包含部署单元列表
  cells?: [ DeployCell ](name='cells', example='[{}]'),
  // 机房名称
  datacenter?: string(name='datacenter', example='cm10'),
  // 默认全局域
  defaultGzone?: string(name='default_gzone', example='GZ00'),
  // 逻辑单元灾备信息
  disasterInfo?: [ DisasterInfo ](name='disaster_info', example='[{}]'),
  // 修改时间
  modifiedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modified_time', example='2018-10-10T10:10:00Z'),
  // 逻辑单元名称
  name?: string(name='name', example='RZ01'),
  // 操作人
  operator?: string(name='operator', example='xxx'),
  // 所属地域：CZone Group 必填
  region?: string(name='region', example='cn-hangzhou'),
  // 逻辑单元类型
  type?: string(name='type', example='RZONE'),
}

// AppServiceBuildpackRelation
model AppServiceBuildpackRelation {
  // app_id
  appId?: string(name='app_id', example='app_id'),
  // app_service_id
  appServiceId?: string(name='app_service_id', example='app_service_id'),
  // buildpack_arch
  buildpackArch?: string(name='buildpack_arch', example='buildpack_arch'),
  // buildpack_full_version
  buildpackFullVersion?: string(name='buildpack_full_version', example='buildpack_full_version'),
  // buildpack_id
  buildpackId?: string(name='buildpack_id', example='buildpack_id'),
  // creation_time
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time', example='2018-10-10T10:10:00Z'),
  // extra_info
  extraInfo?: string(name='extra_info', example='extra_info'),
  // id
  id?: string(name='id', example='id'),
  // modification_time
  modificationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time', example='modification_time'),
  // techstack_id
  techstackId?: long(name='techstack_id', example=''),
  // techstack_identity
  techstackIdentity?: string(name='techstack_identity', example='techstack_identity'),
  // techstack_name
  techstackName?: string(name='techstack_name', example='techstack_name'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
}

// 区域视图
model RegionView {
  // 支持的网络类型列表
  availableNetworkTypes?: [ string ](name='available_network_types', example=''),
  // 显示名称
  displayName?: string(name='display_name', example='杭州'),
  // table id
  id?: string(name='id', example='0783f915-6b7a-42d8-9'),
  // 标识
  identity?: string(name='identity', example='cn-zhangzhou'),
  // region包含的所有zone 列表
  zones?: [ ZoneView ](name='zones', example=''),
}

// 计算资源与Cell的关系信息
model ComputerCell {
  // 部署单元唯一标识
  cellId?: string(name='cell_id', example=''),
  // 计算资源唯一标识
  computerId?: string(name='computer_id', example=''),
}

// 一个指令模板。
model CmdTemplate {
  // 指令模板定义的参数名称。比如：./install_env.sh --version 2.2，其中的 --version 就是参数名称
  argNames?: [ string ](name='arg_names', example=''),
  // 指令模板内容，可以为一个简单命令，也可是一个自定义脚本
  content?: string(name='content', example=''),
  // 指令模板创建者，通常为改用户注册蚂蚁金融云的email
  creator?: string(name='creator', example=''),
  // 指令模板描述
  description?: string(name='description', example=''),
  // 在机器上执行该指令的账号，比如：root, admin
  executeAccount?: string(name='execute_account', example=''),
  // 指令模板ID
  id?: string(name='id', example=''),
  // 指令名称
  name?: string(name='name', example=''),
  // 失败重试的间隔，单位为秒
  retryInterval?: integer(name='retry_interval', example=''),
  // 失败重试次数
  retryTimes?: integer(name='retry_times', example=''),
  // 单次执行的超时时间，单位为秒
  timeOut?: integer(name='time_out', example=''),
  // 模板类型。目前取值列表：
  //                     SIMPLE_COMMAND：简单指令类型；
  //                     CUSTOM_SHELL_SCRIPT：用户自定义shell脚本
  type?: string(name='type', example=''),
}

// 一个应用发布包视图
model AppPackageListView {
  // appId
  appId?: string(name='app_id', example='appId'),
  // appName
  appName?: string(name='app_name', example='appName'),
  // packageCount
  packageCount?: long(name='package_count', example=''),
  // buildpackId
  buildpackId?: string(name='buildpack_id', example='buildpackId'),
  // buildpackName
  buildpackName?: string(name='buildpack_name', example='buildpackName'),
  // buildpackVersion
  buildpackVersion?: string(name='buildpack_version', example='buildpackVersion'),
  // appOwnerId
  appOwnerId?: string(name='app_owner_id', example='appOwnerId'),
  // appOwnerName
  appOwnerName?: string(name='app_owner_name', example='appOwnerName'),
  // latestPackage
  latestPackage?: AppManifest(name='latest_package', example=''),
  // appStatus
  appStatus?: string(name='app_status', example='appStatus'),
}

// 重试信息
model RetryInfo {
  // action
  action?: string(name='action', example='action'),
  // check_interval
  checkInterval?: long(name='check_interval', example=''),
  // retry_failed_only
  retryFailedOnly?: boolean(name='retry_failed_only', example='true, false'),
  // retry_times
  retryTimes?: long(name='retry_times', example=''),
  // timeout
  timeout?: long(name='timeout', example=''),
}

// DeploymentCell
model DeploymentCell {
  // name
  name?: string(name='name', example='test'),
  // 部署单元 id
  cellIds?: [ string ](name='cell_ids', example=''),
  // description
  description?: string(name='description', example='description'),
  // id
  id?: string(name='id', example='123'),
}

// 应用信息
model ApplicationInfo {
  // 应用别名
  alias?: string(name='alias', example=''),
  // 应用名称
  applicationName?: string(name='application_name', example=''),
  // 应用额外元数据信息
  appExtraInfos?: [ AppExtraInfo ](name='app_extra_infos', example=''),
  // 应用所属分组名
  appGroupName?: string(name='app_group_name', example=''),
  // 应用等级名称
  appLevel?: string(name='app_level', example=''),
  // 技术栈名称
  buildpackName?: string(name='buildpack_name', example=''),
  // 技术栈版本
  buildpackVersion?: string(name='buildpack_version', example=''),
  // 应用创建时间
  creationTime?: string(name='creation_time', example=''),
  // 应用描述
  description?: string(name='description', example=''),
  // 用户真实名称
  ownerLoginName?: string(name='owner_login_name', example='admin'),
  // 应用负责人登录名
  realOwnerLoginName?: string(name='real_owner_login_name', example='alipayAdmin@alipay.net'),
  // 应用状态。取值列表：
  //                     CREATING：应用创建中；
  //                     CREATED：应用成功创建，可正常使用；
  //                     CREATE_FAILED：应用创建失败；
  //                     DELETING：应用删除中；
  //                     DELETE_FAILED：应用删除失败
  //                 
  status?: string(name='status', example=''),
  // 全局唯一名字
  globalName?: string(name='global_name', example='mybkappa'),
  // 发布模式， package，image，mixed
  deployType?: string(name='deploy_type', example='package'),
}

// 动态查询
model DynamicQuery {
  // 分页规则-currentPage
  currentPage?: long(name='current_page', example=''),
  // 字段过滤
  filter?: string(name='filter', example='字段过滤'),
  // 分页规则-pageSize
  pageSize?: long(name='page_size', example=''),
  // 具体的查询条件字符串
  query?: string(name='query', example='具体的查询条件字符串'),
  // 查询结果的排序规则
  sort?: string(name='sort', example='查询结果的排序规则'),
}

// 应用管理-应用模型
model App {
  // 应用所属分组 id
  appGroupId?: string(name='app_group_id', example='00000000001'),
  // 应用分组名称
  appGroupName?: string(name='app_group_name', example='默认分组'),
  // 技术栈名称
  buildpackName?: string(name='buildpack_name', example='Spring Boot'),
  // 技术栈版本
  buildpackVersion?: string(name='buildpack_version', example='v1.0'),
  // 创建时间
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='created_time', example='2018-10-10T10:10:00Z'),
  // 允许访问公网
  defaultRoute?: boolean(name='default_route', example='true, false'),
  // 应用发布模式，发布包，发布镜像，混合发布。
  // 默认为空 - 表示包发布模式
  deployType?: string(name='deploy_type', example='mixed,image,package'),
  // 应用描述
  description?: string(name='description', example='description'),
  // 显示名称
  displayName?: string(name='display_name', example='应用容器服务'),
  // 域内应用全局唯一名称
  globalName?: string(name='global_name', example='globalappname'),
  // 应用 id
  id?: string(name='id', example='001040301'),
  // 应用名称
  name?: string(name='name', example='aks'),
  // 应用负责人显示名称
  ownerDisplayName?: string(name='owner_display_name', example='乐乐'),
  // 应用负责人登录名称
  ownerLoginName?: string(name='owner_login_name', example='alipayAdmin@alipay.net'),
  // 技术栈id
  stackId?: string(name='stack_id', example='12305'),
  // 应用状态
  status?: string(name='status', example='status'),
  // 应用额外信息（应用标签）
  tags?: [ Tag ](name='tags', example=''),
  // 应用负责人id
  ownerId?: string(name='owner_id', example='100001'),
}

// 应用等级
model AppLevel {
  // 应用等级ID
  id?: string(name='id', example=''),
  // 应用等级名称
  name?: string(name='name', example=''),
  // 应用等级负责人登录名
  ownerLoginName?: string(name='owner_login_name', example=''),
}

// 通过appid查到的buildpack
model BuildpackByAppV {
  // id
  id?: string(name='id', example='id'),
  // name
  name?: string(name='name', example='name'),
  // des
  des?: string(name='des', example='des'),
  // version
  version?: string(name='version', example='version'),
  // deployScriptId
  deployScriptId?: string(name='deploy_script_id', example='deployScriptId'),
  // buildScriptId
  buildScriptId?: string(name='build_script_id', example='buildScriptId'),
  // configId
  configId?: string(name='config_id', example='configId'),
  // componentId
  componentId?: string(name='component_id', example='componentId'),
  // commandId
  commandId?: string(name='command_id', example='commandId'),
  // bgEnable
  bgEnable?: boolean(name='bg_enable', example='true, false'),
  // creator
  creator?: string(name='creator', example='creator'),
  // tenantId
  tenantId?: string(name='tenant_id', example='tenantId'),
  // customerIds
  customerIds?: string(name='customer_ids', example='customerIds'),
  // gmtCreate
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmtModified
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified', example=''),
  // resultMsg
  resultMsg?: string(name='result_msg', example='resultMsg'),
  // utcCreate
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utcModified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='utc_modified', example='2018-10-10T10:10:00Z'),
}

// 应用单元资源统计
model AppUnitResource {
  // 应用 ID
  appId?: string(name='app_id', example='123'),
  // 单元id
  unitId?: string(name='unit_id', example='123'),
  // 机器数
  machineCount?: long(name='machine_count', example=''),
  // 已挂载机器数
  mountedMachineCount?: long(name='mounted_machine_count', example=''),
  // 负载均衡数
  slbCount?: long(name='slb_count', example='123'),
  // 负载均衡权重
  slbWeight?: long(name='slb_weight', example=''),
}

// 工作空间组视图
model WorkspaceGroupView {
  // 显示名称
  displayName?: string(name='display_name', example='LHC开发环境'),
  // table id
  id?: string(name='id', example='135a06b2-9548-492d-b'),
  // 标识
  identity?: string(name='identity', example='lksdev'),
  // 环境状态
  status?: string(name='status', example='status'),
  // 租户id
  tenantId?: string(name='tenant_id', example='tenant'),
  // 工作空间列表
  workspaces?: [ WorkspaceView ](name='workspaces', example=''),
}

// 机器分组
model MachineGroup {
  // 机器名
  name?: string(name='name', example='test'),
  // 所属发布服务 ID
  serviceId?: string(name='service_id', example='123'),
  // 所属发布服务分组 ID
  serviceGroupId?: string(name='service_group_id', example='123'),
  // 发布服务分组集合 ID
  serviceGroupCollectionId?: string(name='service_group_collection_id', example='123'),
  // 概览 ID
  arrangementId?: string(name='arrangement_id', example='123'),
  // 服务类型
  serviceType?: string(name='service_type', example='VM'),
  // paas 服务 ID
  paasServiceId?: string(name='paas_service_id', example='123'),
  // 是否 beta 分组
  needBeta?: boolean(name='need_beta', example='true, false'),
  // 是否需要确认
  needConfirm?: boolean(name='need_confirm', example='true, false'),
  // 是否需要分组预确认
  needReserve?: boolean(name='need_reserve', example='true, false'),
  // 是否需要引流确认
  needConfirmTraffic?: boolean(name='need_confirm_traffic', example='true, false'),
  // 机器信息组
  machines?: [ Machine ](name='machines', example=''),
  // pd id
  processDefinitionId?: string(name='process_definition_id', example='123'),
  // 父节点 ID
  parentId?: string(name='parent_id', example='123'),
  // 父节点类型
  parentEntityType?: string(name='parent_entity_type', example='SERVICE'),
  // 流程节点 ID
  nodeId?: string(name='node_id', example='123'),
  // 状态
  state?: string(name='state', example='FAILED'),
  // 开始时间
  startedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='started_time', example='2018-10-10T10:10:00Z'),
  // 结束时间
  finishedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='finished_time', example='2018-10-10T10:10:00Z'),
  // 是否可以独立执行
  standaloneExecutable?: boolean(name='standalone_executable', example='true, false'),
  // ID
  id?: string(name='id', example='123'),
}

// Zone
model Zone {
  // zone名称
  id?: string(name='id', example=''),
  // zone显示名称
  name?: string(name='name', example=''),
  // zone paas id
  paasId?: string(name='paas_id', example='0000000001'),
  // region identity
  regionId?: string(name='region_id', example='CN-SHANGHAI-FINANCE'),
  // zone state
  state?: string(name='state', example='A'),
  // 机房iaas identity
  iaasId?: string(name='iaas_id', example='cn-hangzhou'),
}

// 一个运维操作组
model OpsGroup {
  // 运维操作组当前状态。取值列表：
  //                     INITED：初始化完成；
  //                     EXECUTING：执行中；
  //                     SUCCESS：执行成功；
  //                     FAILED：执行失败；
  //                     CANCELED：已取消；
  //                     CONFIRM_WAITING：待确认
  //                 
  status?: string(name='status', example=''),
  // 包含在此运维操作组中的运维单元列表
  units?: [ OpsUnit ](name='units', example=''),
}

// 回滚信息
model RollbackInfo {
  // group_amount
  groupAmount?: long(name='group_amount', example=''),
  // group_strategy
  groupStrategy?: string(name='group_strategy', example='group_strategy'),
  // reason
  reason?: string(name='reason', example='reason'),
  // sub_entities
  subEntities?: [ string ](name='sub_entities', example=''),
  // target_id
  targetId?: string(name='target_id', example='target_id'),
  // target_version
  targetVersion?: string(name='target_version', example='target_version'),
  // need_beta_group
  needBetaGroup?: boolean(name='need_beta_group', example='true, false'),
  // env_config
  envConfig?: [ Pair ](name='env_config', example=''),
  // confirm_succeeded_rollback
  confirmSucceededRollback?: boolean(name='confirm_succeeded_rollback', example='true, false'),
  // retry_rollbacked
  retryRollbacked?: boolean(name='retry_rollbacked', example='true, false'),
}

// 应用参数配置管理-全局参数
model GlobalParam {
  // 创建时间
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='created_time', example='2018-10-10T10:10:00Z'),
  // 数据保密等级
  dataLevel?: string(name='data_level', example='L1,L2,L3'),
  // 参数描述
  desc?: string(name='desc', example='内部域名'),
  // 全局参数 id
  id?: string(name='id', example='0000048001'),
  // 参数名
  key?: string(name='key', example='inner_domain'),
  // 修改时间
  modifiedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modified_time', example='2018-10-10T10:10:00Z'),
  // 版本
  paramVersion?: long(name='param_version', example='1'),
  // 该参数属于哪个 scope
  scope?: string(name='scope', example='SITE,REGION,AZ,TENANT,WORKSPACEGROUP,WORKSPACE,CELL'),
  // 该参数在该 scope 中的 id
  scopeId?: string(name='scope_id', example='00000000400301'),
  // 参数值类型
  type?: string(name='type', example='CONST,EXPR'),
  // 参数值
  value?: string(name='value', example='alipay.net'),
}

// 发布单信息
model OpsDeployment {
  // 此部署操作中所有被操作的应用（服务）详情，以操作链的形式体现
  applicationChains?: [ OpsApplicationChain ](name='application_chains', example=''),
  // 部署操作执行者
  executor?: string(name='executor', example=''),
  // 部署单id
  operationId?: string(name='operation_id', example='0000000098'),
  // 
  //                     
  //     部署单状态。取值列表：
  //     INITING：初始化中；
  //     INIT_FAILED：初始化失败；
  //     INITED：初始化完成；
  //     EXECUTING：执行中；
  //     SUCCESS：执行成功；
  //     FAILED：执行失败；
  //     CANCELING：取消中；
  //     CANCELED：已取消
  //                     
  //                 
  status?: string(name='status', example=''),
  // 部署单标题。长度不超过50个UTF-8字符
  title?: string(name='title', example='日常应用运维20150720-v1.0.4'),
}

// 工作空间组详细信息。
model WorkspaceGroupInfo {
  // 创建时间。
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='created_time', example='2018-10-10T10:10:00Z'),
  // 工作空间组显示名称。
  displayName?: string(name='display_name', example='生产环境'),
  // 域名后缀。
  domainSuffix?: string(name='domain_suffix', example='alipay.net'),
  // 工作空间组id。
  id?: string(name='id', example='00000001'),
  // 主工作空间id。
  masterWorkspaceId?: string(name='master_workspace_id', example='00000007'),
  // 主工作空间名称。
  masterWorkspaceIdentity?: string(name='master_workspace_identity', example='dev'),
  // 修改时间。
  modifiedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modified_time', example='2018-10-10T10:10:00Z'),
  // 工作空间组唯一标识。
  name?: string(name='name', example='prod'),
  // 发布模式。
  releaseMode?: string(name='release_mode', example='LDC'),
  // the belonging tenant name.
  tenantName?: string(name='tenant_name', example='ANTCLOUD'),
  // 包含工作空间列表。
  workspaces?: [ Workspace ](name='workspaces', example='[{}]'),
  // workspace name
  identity?: string(name='identity', example='test'),
}

// 负载均衡
model DepsLoadBalancer {
  // 服务实例列表
  appServices?: [ AppService ](name='app_services', example=''),
  // 网络带宽
  bandwidth?: integer(name='bandwidth', example='1'),
  // iaaS在创建该资源时为其分配的唯一标示，创建中或创建失败时为空
  iaasId?: string(name='iaas_id', example=''),
  // 资源唯一标识
  id?: string(name='id', example=''),
  // 公网计费方式
  internetChargeType?: string(name='internet_charge_type', example='PAY_BY_BANDWIDTH'),
  // 资源名称
  name?: string(name='name', example='test'),
  // VIP类型
  networkType?: string(name='network_type', example='Classic'),
  // 资源所属的地域id
  region?: string(name='region', example=''),
  // 
  //                     
  //                     资源所处的状态，资源状态，取值 CREATING：正在创建，CREATE_FAILED：创建失败，DELETING：正在删除，DELETED：删除成功，
  //                     DELETE_FAILED：删除失败，RESOURCE_IMPORTING：资源导入中，RESOURCE_IMPORT_FAILED：资源导入失败，RESOURCE_REMOVING：资源删除中，
  //                     RESOURCE_REMOVE_FAILED：资源删除失败，INACTIVE：未激活，STOPPING：正在停止，STARTING：正在启动，ACTIVE：已激活，LOCKED：已锁定，
  //                     RELEASING：正在释放，UPDATING：正在更新，MOUNTING：正在挂载，UMOUNTING：正在卸载  
  //                 
  status?: string(name='status', example=''),
  // vip地址
  vipAddress?: string(name='vip_address', example='192.168.1.1'),
  // address 类型：INTERNET, INTRANET
  vipAddressType?: string(name='vip_address_type', example='INTERNET'),
  // VIP类型
  vipType?: string(name='vip_type', example='NORMAL_INTERNET'),
  // vpc的id
  vpcId?: string(name='vpc_id', example=''),
  // 资源所属的可用区id
  zone?: string(name='zone', example=''),
}

// sidecar发布版本
model SidecarReleaseVersion {
  // sidecar版本描述
  description?: string(name='description', example='"主站版本"'),
  // 创建时间
  gmtCreated?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_created', example='2018-10-10T10:10:00Z'),
  // 修改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // release note
  releaseNote?: string(name='release_note', example='"版本特性"'),
  // scope生效范围详情
  scopeDetail?: SidecarScopeDetail(name='scope_detail', example=''),
  // sidecar名称
  sidecarName?: string(name='sidecar_name', example='mosn'),
  // sidecar版本id
  sidecarReleaseVersionId?: string(name='sidecar_release_version_id', example='00012'),
  // sidecar版本号
  sidecarVersion?: string(name='sidecar_version', example='v1.0'),
  // 版本状态
  status?: long(name='status', example='1'),
  // 发布、下线、废弃原因
  statusReason?: string(name='status_reason', example='版本已废弃'),
  // sidecar模板内容
  template?: string(name='template', example='"container:xxx"'),
  // sidecar模板配置
  templateConfigs?: [ SidecarTemplateConfig ](name='template_configs', example=''),
  // sidecar版本类型
  type?: string(name='type', example='container'),
  // 版本周期：alpha/beta/release
  versionPeriod?: string(name='version_period', example='alpha'),
}

// Operator
model Operator {
  // id
  id?: string(name='id', example='123'),
  // login_name
  loginName?: string(name='login_name', example='test'),
  // email
  email?: string(name='email', example='test@123.com'),
  // nick_name
  nickName?: string(name='nick_name', example='test'),
}

model CreateApplicationRequest = {
  authToken?: string(name='auth_token'),
  // 应用别称。最大60个UTF-8字符
  alias?: string(name='alias'),
  // 创建的应用名称。最大60个UTF-8字符
  applicationName?: string(name='application_name'),
  // 技术栈架构版本，默认使用BUILDPACK_V1，取值列表：BUILDPACK_V1、BUILDPACK_V2
  buildpackArch?: string(name='buildpack_arch'),
  // 应用使用的技术栈名称
  buildpackName?: string(name='buildpack_name'),
  // 应用使用的技术栈版本
  buildpackVersion?: string(name='buildpack_version'),
  // 应用描述。最大200个UTF-8字符
  description?: string(name='description'),
  // 应用负责人登录名
  ownerLoginName?: string(name='owner_login_name'),
  // 应用发布类型，默认不填入表示包发布，支持 mixed,image,workload
  deployType?: string(name='deploy_type'),
  // 是否允许公网访问
  defaultRoute?: boolean(name='default_route'),
}

model CreateApplicationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建一个应用。
 * Summary: 创建应用
 */
async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createApplicationEx(request, headers, runtime);
}

/**
 * Description: 创建一个应用。
 * Summary: 创建应用
 */
async function createApplicationEx(request: CreateApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateApplicationServiceRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  applicationName?: string(name='application_name'),
  // 应用使用的技术栈版本
  buildpackVersion?: string(name='buildpack_version'),
  // 部署单元paas id列表
  cellIds?: [ string ](name='cell_ids'),
  // 描述
  description?: string(name='description'),
  // 负责人登录名
  ownerLoginName?: string(name='owner_login_name'),
  // 应用服务实例名称
  serviceName?: string(name='service_name'),
  // 租户名称
  tenant?: string(name='tenant'),
  workspace?: string(name='workspace'),
}

model CreateApplicationServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 新建应用服务id
  id?: string(name='id'),
}

/**
 * Description: 创建一个应用服务实例。
 * Summary: 创建应用服务实例
 */
async function createApplicationService(request: CreateApplicationServiceRequest): CreateApplicationServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createApplicationServiceEx(request, headers, runtime);
}

/**
 * Description: 创建一个应用服务实例。
 * Summary: 创建应用服务实例
 */
async function createApplicationServiceEx(request: CreateApplicationServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateApplicationServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.service.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnabledApplicationServiceRequest = {
  authToken?: string(name='auth_token'),
  // 租户名称
  tenant?: string(name='tenant'),
}

model EnabledApplicationServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否启用
  isEnabled?: boolean(name='is_enabled'),
}

/**
 * Description: 查询是否启用应用服务实例。
 * Summary: 查询是否启用应用服务实例
 */
async function enabledApplicationService(request: EnabledApplicationServiceRequest): EnabledApplicationServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enabledApplicationServiceEx(request, headers, runtime);
}

/**
 * Description: 查询是否启用应用服务实例。
 * Summary: 查询是否启用应用服务实例
 */
async function enabledApplicationServiceEx(request: EnabledApplicationServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnabledApplicationServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.service.enabled', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApplicationRequest = {
  authToken?: string(name='auth_token'),
  // 待查询的应用名称。最大60个UTF-8字符
  applicationName?: string(name='application_name'),
  // 查询结果是否返回应用额外元数据信息。默认为 false
  queryExtraInfo?: boolean(name='query_extra_info'),
}

model GetApplicationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用别名
  alias?: string(name='alias'),
  // 应用名称
  applicationName?: string(name='application_name'),
  // 应用额外元数据信息
  appExtraInfos?: [ AppExtraInfo ](name='app_extra_infos'),
  // 应用所属分组名
  appGroupName?: string(name='app_group_name'),
  // 应用等级名称
  appLevel?: string(name='app_level'),
  // 技术栈名称
  buildpackName?: string(name='buildpack_name'),
  // 应用创建时间
  creationTime?: string(name='creation_time'),
  // 应用描述
  description?: string(name='description'),
  // 应用负责人登录名
  ownerLoginName?: string(name='owner_login_name'),
  // 应用状态。取值列表：
  //                             CREATING：应用创建中；
  //                             CREATED：应用成功创建，可正常使用；
  //                             CREATE_FAILED：应用创建失败
  //                         
  status?: string(name='status'),
  // 发布模式， package，image，mixed
  deployType?: string(name='deploy_type'),
  // 全局唯一名字
  globalName?: string(name='global_name'),
}

/**
 * Description: 获取一个应用详情。
 * Summary: 获取应用
 */
async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApplicationEx(request, headers, runtime);
}

/**
 * Description: 获取一个应用详情。
 * Summary: 获取应用
 */
async function getApplicationEx(request: GetApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApplicationServiceRequest = {
  authToken?: string(name='auth_token'),
  // 待查询的应用名称。最大60个UTF-8字符
  applicationName?: string(name='application_name'),
  // 待查询服务实例名称
  serviceName?: string(name='service_name'),
  workspace?: string(name='workspace'),
}

model GetApplicationServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用名称
  applicationName?: string(name='application_name'),
  // 技术栈版本
  buildpackVersion?: string(name='buildpack_version'),
  // 关联的部署单元
  cellIds?: [ string ](name='cell_ids'),
  // 服务实例描述
  description?: string(name='description'),
  // 用户自定义的扩展属性
  extraInfos?: string(name='extra_infos'),
  // 最近一次执行的运维操作单号
  latestOperationId?: string(name='latest_operation_id'),
  // 最近一次执行的运维操作类型。取值列表：
  //                             DEPLOYMENT：部署操作
  //                         
  latestOperationType?: string(name='latest_operation_type'),
  // 最近成功部署的版本号
  latestVersionNo?: string(name='latest_version_no'),
  // 服务实例名称
  serviceName?: string(name='service_name'),
  // 环境名称
  workspace?: string(name='workspace'),
}

/**
 * Description: 获取一个应用服务详情。
 * Summary: 获取应用服务
 */
async function getApplicationService(request: GetApplicationServiceRequest): GetApplicationServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApplicationServiceEx(request, headers, runtime);
}

/**
 * Description: 获取一个应用服务详情。
 * Summary: 获取应用服务
 */
async function getApplicationServiceEx(request: GetApplicationServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApplicationServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.service.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplicationServiceRequest = {
  authToken?: string(name='auth_token'),
  // 待查询的应用名称。最大60个UTF-8字符
  applicationName?: string(name='application_name'),
  // 当前页码，默认为1
  pageNum?: integer(name='page_num'),
  // 分页大小，默认10，最大50
  pageSize?: integer(name='page_size'),
  // 目标环境名称
  workspaces?: [ string ](name='workspaces'),
}

model QueryApplicationServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 当前页码
  pageNum?: integer(name='page_num'),
  // 分页大小
  pageSize?: integer(name='page_size'),
  // 服务实例列表
  services?: [ AppService ](name='services'),
  // 应用总数
  totalCount?: integer(name='total_count'),
}

/**
 * Description: 查询应用服务实例列表。
 * Summary: 查询应用服务实例列表
 */
async function queryApplicationService(request: QueryApplicationServiceRequest): QueryApplicationServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplicationServiceEx(request, headers, runtime);
}

/**
 * Description: 查询应用服务实例列表。
 * Summary: 查询应用服务实例列表
 */
async function queryApplicationServiceEx(request: QueryApplicationServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplicationServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.service.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteApplicationServiceRequest = {
  authToken?: string(name='auth_token'),
  // 待删除的服务实例的应用名称
  applicationName?: string(name='application_name'),
  // 待删除服务实例名称
  serviceName?: string(name='service_name'),
  // 待删除服务实例所在环境名称
  workspace?: string(name='workspace'),
}

model DeleteApplicationServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除一个应用服务实例
 * Summary: 删除一个应用服务实例
 */
async function deleteApplicationService(request: DeleteApplicationServiceRequest): DeleteApplicationServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteApplicationServiceEx(request, headers, runtime);
}

/**
 * Description: 删除一个应用服务实例
 * Summary: 删除一个应用服务实例
 */
async function deleteApplicationServiceEx(request: DeleteApplicationServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteApplicationServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.service.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApplicationPackageRequest = {
  authToken?: string(name='auth_token'),
  // 发布包所属的应用名称。最大60个UTF-8字符
  applicationName?: string(name='application_name'),
  // 版本号。长度不超过50个单字节字符
  versionNo?: string(name='version_no'),
  // 环境
  workspace?: string(name='workspace'),
}

model GetApplicationPackageResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用发布包所属应用名字
  appName?: string(name='app_name'),
  // 应用发布包创建时间
  creationTime?: string(name='creation_time'),
  // 应用发布包下载地址
  downloadUrl?: string(name='download_url'),
  // 应用发布包的校验码
  etag?: string(name='etag'),
  // 应用发布包名称
  name?: string(name='name'),
  // 应用发布包备注
  versionMemo?: string(name='version_memo'),
  // 应用发布包版本
  versionNo?: string(name='version_no'),
  // 应用发布包所属环境
  workspace?: string(name='workspace'),
}

/**
 * Description: 获取应用发布包详情包括下载地址、校验码等。
 * Summary: 获取应用发布包详情包括下载地址、校验码等。
 */
async function getApplicationPackage(request: GetApplicationPackageRequest): GetApplicationPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApplicationPackageEx(request, headers, runtime);
}

/**
 * Description: 获取应用发布包详情包括下载地址、校验码等。
 * Summary: 获取应用发布包详情包括下载地址、校验码等。
 */
async function getApplicationPackageEx(request: GetApplicationPackageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApplicationPackageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.package.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppVersionRequest = {
  authToken?: string(name='auth_token'),
  // 版本构建id
  buildId?: string(name='build_id'),
}

model QueryAppVersionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用发布包详情
  version?: AppVersion(name='version'),
}

/**
 * Description: 查询应用发布包版本详情
 * Summary: 查询应用发布包版本详情
 */
async function queryAppVersion(request: QueryAppVersionRequest): QueryAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppVersionEx(request, headers, runtime);
}

/**
 * Description: 查询应用发布包版本详情
 * Summary: 查询应用发布包版本详情
 */
async function queryAppVersionEx(request: QueryAppVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppVersionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.version.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteApplicationRequest = {
  authToken?: string(name='auth_token'),
  // 目标应用完整名称
  applicationName?: string(name='application_name'),
}

model DeleteApplicationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除一个应用。
 * Summary: 删除应用
 */
async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteApplicationEx(request, headers, runtime);
}

/**
 * Description: 删除一个应用。
 * Summary: 删除应用
 */
async function deleteApplicationEx(request: DeleteApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListApplicationRequest = {
  authToken?: string(name='auth_token'),
  // 当前页码，默认为1
  pageNum?: integer(name='page_num'),
  // 分页大小，默认10
  pageSize?: integer(name='page_size'),
}

model ListApplicationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用名称列表
  applicationNames?: [ string ](name='application_names'),
  // 当前页码
  pageNum?: integer(name='page_num'),
  // 分页大小
  pageSize?: integer(name='page_size'),
  // 应用总数
  totalCount?: integer(name='total_count'),
}

/**
 * Description: 获取租户应用列表。
 * Summary: 列出应用
 */
async function listApplication(request: ListApplicationRequest): ListApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listApplicationEx(request, headers, runtime);
}

/**
 * Description: 获取租户应用列表。
 * Summary: 列出应用
 */
async function listApplicationEx(request: ListApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppgroupRequest = {
  authToken?: string(name='auth_token'),
  // 当前页码，默认为1
  pageNum?: integer(name='page_num'),
  // 分页大小，默认10
  pageSize?: integer(name='page_size'),
}

model ListAppgroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用名称列表
  appGroups?: [ AppGroup ](name='app_groups'),
  // 当前页码
  pageNum?: integer(name='page_num'),
  // 分页大小
  pageSize?: integer(name='page_size'),
  // 应用总数
  totalCount?: integer(name='total_count'),
}

/**
 * Description: 获取租户应用分组列表。
 * Summary: 列出应用分组
 */
async function listAppgroup(request: ListAppgroupRequest): ListAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppgroupEx(request, headers, runtime);
}

/**
 * Description: 获取租户应用分组列表。
 * Summary: 列出应用分组
 */
async function listAppgroupEx(request: ListAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appgroup.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplicationComputerRequest = {
  authToken?: string(name='auth_token'),
  // 目标服务实例名称，填写application时有意义。application不填时，service_name的值会被忽略
  application?: string(name='application'),
  // assign=true代表分配了app/appservice的computer,反之代表没有分配app/appservice的computer
  assign?: boolean(name='assign'),
  // 资源类型
  computerType?: string(name='computer_type'),
  // cpu核数
  cpu?: long(name='cpu'),
  // 内存大小，单位MB
  memory?: long(name='memory'),
  // 资源名称
  name?: string(name='name'),
  // 当前页码，默认为1
  pageNum?: long(name='page_num'),
  // 分页大小，默认10
  pageSize?: long(name='page_size'),
  // 目标服务实例名称
  serviceName?: string(name='service_name'),
  // 资源所处的状态，可指定多个
  statuses?: [ string ](name='statuses'),
  // 目标工作空间名称
  workspace?: string(name='workspace'),
}

model QueryApplicationComputerResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 资源列表
  computers?: [ Computer ](name='computers'),
  // 当前页码
  pageNum?: long(name='page_num'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 资源总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 根据指定的查询条件查询属于某个应用计算资源列表。
 * Summary: 查询应用计算资源
 */
async function queryApplicationComputer(request: QueryApplicationComputerRequest): QueryApplicationComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplicationComputerEx(request, headers, runtime);
}

/**
 * Description: 根据指定的查询条件查询属于某个应用计算资源列表。
 * Summary: 查询应用计算资源
 */
async function queryApplicationComputerEx(request: QueryApplicationComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplicationComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.computer.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApplicationRepositoryRequest = {
  authToken?: string(name='auth_token'),
  // 待查询的应用名称。最大60个UTF-8字符
  applicationName?: string(name='application_name'),
}

model GetApplicationRepositoryResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 代码库信息
  repository?: Repository(name='repository'),
}

/**
 * Description: 获取一个应用的代码库信息。
 * Summary: 获取一个应用的代码库信息
 */
async function getApplicationRepository(request: GetApplicationRepositoryRequest): GetApplicationRepositoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApplicationRepositoryEx(request, headers, runtime);
}

/**
 * Description: 获取一个应用的代码库信息。
 * Summary: 获取一个应用的代码库信息
 */
async function getApplicationRepositoryEx(request: GetApplicationRepositoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApplicationRepositoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.repository.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppgroupRequest = {
  authToken?: string(name='auth_token'),
  // 应用分组名称
  name?: string(name='name'),
  // 当前页码，默认为1
  pageNum?: integer(name='page_num'),
  // 分页大小，默认10
  pageSize?: integer(name='page_size'),
  // 租户名称
  tenant?: string(name='tenant'),
}

model QueryAppgroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用分组列表
  appGroups?: [ AppGroup ](name='app_groups'),
  // 当前页码
  pageNum?: integer(name='page_num'),
  // 分页大小
  pageSize?: integer(name='page_size'),
  // 资源总数
  totalCount?: integer(name='total_count'),
}

/**
 * Description: 根据名称查询应用分组信息
 * Summary: 应用分组查询
 */
async function queryAppgroup(request: QueryAppgroupRequest): QueryAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppgroupEx(request, headers, runtime);
}

/**
 * Description: 根据名称查询应用分组信息
 * Summary: 应用分组查询
 */
async function queryAppgroupEx(request: QueryAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appgroup.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplevelRequest = {
  authToken?: string(name='auth_token'),
  // 应用等级名称
  name?: string(name='name'),
  // 当前页码，默认为1
  pageNum?: integer(name='page_num'),
  // 分页大小，默认10
  pageSize?: integer(name='page_size'),
  // 租户名称
  tenant?: string(name='tenant'),
}

model QueryApplevelResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用等级列表
  appLevels?: [ AppLevel ](name='app_levels'),
  // 当前页码
  pageNum?: integer(name='page_num'),
  // 分页大小
  pageSize?: integer(name='page_size'),
  // 资源总数
  totalCount?: integer(name='total_count'),
}

/**
 * Description: 根据条件查询应用等级
 * Summary: 查询应用等级
 */
async function queryApplevel(request: QueryApplevelRequest): QueryApplevelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplevelEx(request, headers, runtime);
}

/**
 * Description: 根据条件查询应用等级
 * Summary: 查询应用等级
 */
async function queryApplevelEx(request: QueryApplevelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplevelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.applevel.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplicationRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  applicationName?: string(name='application_name'),
  // 应用分组名
  appGroupName?: string(name='app_group_name'),
  // 应用级别
  appLevelName?: string(name='app_level_name'),
  // 登录名
  ownerLoginName?: string(name='owner_login_name'),
  // 当前页码，默认为1
  pageNum?: long(name='page_num'),
  // 分页大小，默认10
  pageSize?: long(name='page_size'),
  // 查询结果是否返回应用额外元数据信息。此字段为 true 时，为保证查询效率，列表大小将强制修改为 10 （若超过）
  queryExtraInfo?: boolean(name='query_extra_info'),
  // 租户名称
  tenant?: string(name='tenant'),
}

model QueryApplicationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用列表
  applications?: [ ApplicationInfo ](name='applications'),
  // 当前页码
  pageNum?: long(name='page_num'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 资源总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 根据查询条件查询应用列表。
 * Summary: 查询应用
 */
async function queryApplication(request: QueryApplicationRequest): QueryApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplicationEx(request, headers, runtime);
}

/**
 * Description: 根据查询条件查询应用列表。
 * Summary: 查询应用
 */
async function queryApplicationEx(request: QueryApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAppVersionRequest = {
  authToken?: string(name='auth_token'),
  // 目标应用完整名称
  applicationName?: string(name='application_name'),
  // 应用部署包文件16字节md5值，以32位十六进制字符表示，不区分大小写。如果提供，APPMS下载应用部署包完成后，将会以此md5值进行校验，检验不通过则认为下载失败
  //                         
  fileMd5?: string(name='file_md5'),
  // 应用部署包文件路径。长度不超过1024个单字节字符
  filePath?: string(maxLength=1024, name='file_path'),
  // 应用部署包文件大小，单位字节。取值范围[1,524288000]，即最大支持500M, 524288000 = 500 x 1024 x 1024
  //                         
  fileSize?: integer(maximum='524288000', minimum='1', name='file_size'),
  // 文件交换源id
  fileSource?: string(name='file_source'),
  // 目标租户名称
  tenant?: string(name='tenant'),
  // 版本备注。长度不超过100个双字节字符
  versionMemo?: string(maxLength=100, name='version_memo'),
  // 版本号。长度不超过50个单字节字符
  versionNo?: string(maxLength=50, name='version_no'),
  // 目标工作空间名称
  workspace?: string(name='workspace'),
}

model CreateAppVersionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 发布包任务id，可用于查询应用发布包生成状态
  buildId?: string(name='build_id'),
}

/**
 * Description: 为一个应用创建一个新版本。调用者需要拥有一个文件交换源，APPMS将从指定的文件交换源中下载应用部署包文件，文件路径与名称由调用者指定。
当应用部署包成功下载完成后，APPMS将为应用创建一个新版本，版本号由调用者指定，并关联此部署包。
 * Summary: 创建应用版本
 */
async function createAppVersion(request: CreateAppVersionRequest): CreateAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAppVersionEx(request, headers, runtime);
}

/**
 * Description: 为一个应用创建一个新版本。调用者需要拥有一个文件交换源，APPMS将从指定的文件交换源中下载应用部署包文件，文件路径与名称由调用者指定。
当应用部署包成功下载完成后，APPMS将为应用创建一个新版本，版本号由调用者指定，并关联此部署包。
 * Summary: 创建应用版本
 */
async function createAppVersionEx(request: CreateAppVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppVersionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.version.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppDeltaRequest = {
  authToken?: string(name='auth_token'),
  // 结束时间点
  endTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
  // 开始时间点
  startTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
}

model QueryAppDeltaResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 发生变化的租户列表
  tenants?: [ string ](name='tenants'),
}

/**
 * Description: 查询应用增量统计信息
 * Summary: 查询应用增量统计信息
 */
async function queryAppDelta(request: QueryAppDeltaRequest): QueryAppDeltaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppDeltaEx(request, headers, runtime);
}

/**
 * Description: 查询应用增量统计信息
 * Summary: 查询应用增量统计信息
 */
async function queryAppDeltaEx(request: QueryAppDeltaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppDeltaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.delta.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplicationLoadbalancerRequest = {
  authToken?: string(name='auth_token'),
  // 目标服务实例名称，填写application时有意义。application不填时，service_name的值会被忽略
  application?: string(name='application'),
  // 资源名称
  name?: string(name='name'),
  // VIP类型
  networkType?: string(name='network_type'),
  // 当前页码，默认为1
  pageNum?: integer(name='page_num'),
  // 分页大小，默认10
  pageSize?: integer(name='page_size'),
  // 目标服务实例名称
  serviceName?: string(name='service_name'),
  // 资源所处的状态，可指定多个
  statuses?: [ string ](name='statuses'),
  // vip地址
  vipAddress?: string(name='vip_address'),
  // address 类型：INTERNET, INTRANET
  vipAddressType?: string(name='vip_address_type'),
  // VIP类型
  vipType?: string(name='vip_type'),
  // vpc的id
  vpcIds?: [ string ](name='vpc_ids'),
  // 目标工作空间名称
  workspace?: string(name='workspace'),
}

model QueryApplicationLoadbalancerResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 负载均衡资源列表
  loadbalancers?: [ DepsLoadBalancer ](name='loadbalancers'),
  // 当前页码
  pageNum?: integer(name='page_num'),
  // 分页大小
  pageSize?: integer(name='page_size'),
  // 应用总数
  totalCount?: integer(name='total_count'),
}

/**
 * Description: 根据指定的查询条件查询负载均衡资源列表
 * Summary: loadbalancer查询
 */
async function queryApplicationLoadbalancer(request: QueryApplicationLoadbalancerRequest): QueryApplicationLoadbalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplicationLoadbalancerEx(request, headers, runtime);
}

/**
 * Description: 根据指定的查询条件查询负载均衡资源列表
 * Summary: loadbalancer查询
 */
async function queryApplicationLoadbalancerEx(request: QueryApplicationLoadbalancerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplicationLoadbalancerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.loadbalancer.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplicationDatabaseRequest = {
  authToken?: string(name='auth_token'),
  // 目标服务实例名称，填写application时有意义。application不填时，service_name的值会被忽略
  application?: string(name='application'),
  // 连接地址
  connectionAddress?: string(name='connection_address'),
  // 资源名称
  name?: string(name='name'),
  // 网络类型，Classic或VPC
  networkType?: string(name='network_type'),
  // 网络连接类型，取值 Internet：外网，Intranet：内网
  netType?: string(name='net_type'),
  // 当前页码，默认为1
  pageNum?: long(name='page_num'),
  // 分页大小，默认10
  pageSize?: long(name='page_size'),
  // 连接端口
  port?: long(name='port'),
  // 目标服务实例名称
  serviceName?: string(name='service_name'),
  // 资源所处的状态，可指定多个
  statuses?: [ string ](name='statuses'),
  // 目标工作空间名称
  workspace?: string(name='workspace'),
}

model QueryApplicationDatabaseResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 资源列表
  databases?: [ DepsDatabase ](name='databases'),
  // 当前页码
  pageNum?: long(name='page_num'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 应用总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 根据指定的查询条件查询数据库资源列表
 * Summary: database查询
 */
async function queryApplicationDatabase(request: QueryApplicationDatabaseRequest): QueryApplicationDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplicationDatabaseEx(request, headers, runtime);
}

/**
 * Description: 根据指定的查询条件查询数据库资源列表
 * Summary: database查询
 */
async function queryApplicationDatabaseEx(request: QueryApplicationDatabaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplicationDatabaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.database.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadApplicationPackageRequest = {
  authToken?: string(name='auth_token'),
  // 目标应用完整名称
  applicationName?: string(name='application_name'),
  // 应用发布包名称。长度不超过100个双字节字符
  packageName?: string(maxLength=100, name='package_name'),
  // 目标租户名称
  tenant?: string(name='tenant'),
  // 版本号。长度不超过50个单字节字符
  versionNo?: string(maxLength=50, name='version_no'),
  // 目标工作空间名称
  workspace?: string(name='workspace'),
}

model UploadApplicationPackageResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 上传oss的bucket名称
  bucketName?: string(name='bucket_name'),
  // 上传应用发布包的授权签名上传地址
  signedUploadUrl?: string(name='signed_upload_url'),
}

/**
 * Description: 获取上传应用发布包临时签名地址，用于直接向阿里云OSS上传，目前只支持阿里云底座，不支持58底座。注意：该api只能生成上传应用发布包临时签名地址，不会实际上传文件。
 * Summary: 获取上传应用发布包临时签名地址
 */
async function uploadApplicationPackage(request: UploadApplicationPackageRequest): UploadApplicationPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadApplicationPackageEx(request, headers, runtime);
}

/**
 * Description: 获取上传应用发布包临时签名地址，用于直接向阿里云OSS上传，目前只支持阿里云底座，不支持58底座。注意：该api只能生成上传应用发布包临时签名地址，不会实际上传文件。
 * Summary: 获取上传应用发布包临时签名地址
 */
async function uploadApplicationPackageEx(request: UploadApplicationPackageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadApplicationPackageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.package.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncreateApplicationVersionRequest = {
  authToken?: string(name='auth_token'),
  // 目标应用完整名称
  applicationName?: string(name='application_name'),
  // 应用部署包文件16字节md5值，以32位十六进制字符表示，不区分大小写。如果提供，将会以此md5值进行校验，检验不通过则认为创建失败
  //                                 
  packageEtag?: string(name='package_etag'),
  // 应用发布包名称。长度不超过100个双字节字符
  packageName?: string(maxLength=100, name='package_name'),
  // 目标租户名称
  tenant?: string(name='tenant'),
  // 应用发布包备注
  versionMemo?: string(name='version_memo'),
  // 版本号。长度不超过50个单字节字符
  versionNo?: string(maxLength=50, name='version_no'),
  // 目标工作空间名称
  workspace?: string(name='workspace'),
}

model SyncreateApplicationVersionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 上传发布包成功后，同步创建对应的发布包版本信息，该接口为同步接口。
调用步骤如下：
调用antcloud.deps.application.package.upload获得上传应用发布包临时签名地址
通过阿里云OSS客户端通过应用发布包临时签名地址完成上传，并获得校验码
调用antcloud.deps.application.version.syncreate同步接口创建应用新版本
 * Summary: 同步创建对应的发布包版本信息
 */
async function syncreateApplicationVersion(request: SyncreateApplicationVersionRequest): SyncreateApplicationVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncreateApplicationVersionEx(request, headers, runtime);
}

/**
 * Description: 上传发布包成功后，同步创建对应的发布包版本信息，该接口为同步接口。
调用步骤如下：
调用antcloud.deps.application.package.upload获得上传应用发布包临时签名地址
通过阿里云OSS客户端通过应用发布包临时签名地址完成上传，并获得校验码
调用antcloud.deps.application.version.syncreate同步接口创建应用新版本
 * Summary: 同步创建对应的发布包版本信息
 */
async function syncreateApplicationVersionEx(request: SyncreateApplicationVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncreateApplicationVersionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.version.syncreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListCloudconnectorConnectionRequest = {
  authToken?: string(name='auth_token'),
}

model ListCloudconnectorConnectionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // List<Connection>
  data?: [ Connection ](name='data'),
  // startIndex
  startIndex?: long(name='start_index'),
  // pageSize
  pageSize?: long(name='page_size'),
  // totalSize
  totalSize?: long(name='total_size'),
  // currentPage
  currentPage?: long(name='current_page'),
}

/**
 * Description: 获取connection
 * Summary: 获取connection
 */
async function listCloudconnectorConnection(request: ListCloudconnectorConnectionRequest): ListCloudconnectorConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listCloudconnectorConnectionEx(request, headers, runtime);
}

/**
 * Description: 获取connection
 * Summary: 获取connection
 */
async function listCloudconnectorConnectionEx(request: ListCloudconnectorConnectionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCloudconnectorConnectionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cloudconnector.connection.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppservicebuildpackrelationRequest = {
  authToken?: string(name='auth_token'),
  // 一组应用服务id
  appserviceIds?: [ string ](name='appservice_ids'),
  // 一组应用id
  // 
  appIds?: [ string ](name='app_ids'),
  // buildpackArch
  buildpackArch?: string(name='buildpack_arch'),
  // buildpackIds
  buildpackIds?: [ string ](name='buildpack_ids'),
  // 当前页
  currentPage?: long(name='current_page'),
  // 是否降序
  descend?: boolean(name='descend'),
  // ids
  ids?: [ string ](name='ids'),
  // 每页个数
  pageSize?: long(name='page_size'),
  // 分类
  sortField?: string(name='sort_field'),
  // 开始索引
  startIndex?: long(name='start_index'),
  // techstackIdentities
  techstackIdentities?: [ string ](name='techstack_identities'),
  // 一组技术栈id
  techstackIds?: [ string ](name='techstack_ids'),
  // workspaceId
  workspaceId?: string(name='workspace_id'),
}

model QueryAppservicebuildpackrelationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // app_service_buildpack_relations
  appServiceBuildpackRelations?: [ AppServiceBuildpackRelation ](name='app_service_buildpack_relations'),
  // current_page
  currentPage?: long(name='current_page'),
  // page_size
  pageSize?: long(name='page_size'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询技术栈关系
 * Summary: 查询技术栈关系
 */
async function queryAppservicebuildpackrelation(request: QueryAppservicebuildpackrelationRequest): QueryAppservicebuildpackrelationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppservicebuildpackrelationEx(request, headers, runtime);
}

/**
 * Description: 查询技术栈关系
 * Summary: 查询技术栈关系
 */
async function queryAppservicebuildpackrelationEx(request: QueryAppservicebuildpackrelationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppservicebuildpackrelationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appservicebuildpackrelation.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAppservicebuildpackrelationRequest = {
  authToken?: string(name='auth_token'),
  // new_app_service
  newAppService?: BuildpackAppService(name='new_app_service'),
  // original_app_service
  originalAppService?: BuildpackAppService(name='original_app_service'),
}

model UpdateAppservicebuildpackrelationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新应用关系
 * Summary: 更新应用关系
 */
async function updateAppservicebuildpackrelation(request: UpdateAppservicebuildpackrelationRequest): UpdateAppservicebuildpackrelationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAppservicebuildpackrelationEx(request, headers, runtime);
}

/**
 * Description: 更新应用关系
 * Summary: 更新应用关系
 */
async function updateAppservicebuildpackrelationEx(request: UpdateAppservicebuildpackrelationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAppservicebuildpackrelationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appservicebuildpackrelation.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppserviceenvparamRequest = {
  authToken?: string(name='auth_token'),
  // appIds
  appIds?: [ string ](name='app_ids'),
  // appServiceIds
  appServiceIds?: [ string ](name='app_service_ids'),
  // buildpackIds
  buildpackIds?: [ string ](name='buildpack_ids'),
  // creationTimeFrom
  creationTimeFrom?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time_from'),
  // creationTimeTo
  creationTimeTo?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time_to'),
  // 当前页
  currentPage?: long(name='current_page'),
  // defaultValue
  defaultValue?: string(name='default_value'),
  // 是否降序
  descend?: boolean(name='descend'),
  // ids
  ids?: [ string ](name='ids'),
  // isProcessed
  isProcessed?: boolean(name='is_processed'),
  // key
  key?: string(name='key'),
  // modificationTimeFrom
  modificationTimeFrom?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time_from'),
  // modificationTimeTo
  modificationTimeTo?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time_to'),
  // 每页个数
  pageSize?: long(name='page_size'),
  // 分类
  sortField?: string(name='sort_field'),
  // 开始索引
  startIndex?: long(name='start_index'),
  // value
  value?: string(name='value'),
  // workspaceId
  workspaceId?: string(name='workspace_id'),
}

model QueryAppserviceenvparamResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // app_service_env_params
  appServiceEnvParams?: [ AppServiceEnvParam ](name='app_service_env_params'),
  // current_page
  currentPage?: long(name='current_page'),
  // page_size
  pageSize?: long(name='page_size'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询环境变量
 * Summary: 查询环境变量
 */
async function queryAppserviceenvparam(request: QueryAppserviceenvparamRequest): QueryAppserviceenvparamResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppserviceenvparamEx(request, headers, runtime);
}

/**
 * Description: 查询环境变量
 * Summary: 查询环境变量
 */
async function queryAppserviceenvparamEx(request: QueryAppserviceenvparamRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppserviceenvparamResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appserviceenvparam.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppserviceenvparamGroupbyappservicesRequest = {
  authToken?: string(name='auth_token'),
  // appServiceIds
  appServiceIds?: [ string ](name='app_service_ids'),
}

model QueryAppserviceenvparamGroupbyappservicesResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 环境变量json字符串
  appServiceEnvParam?: string(name='app_service_env_param'),
}

/**
 * Description: 查询环境变量
 * Summary: 查询环境变量
 */
async function queryAppserviceenvparamGroupbyappservices(request: QueryAppserviceenvparamGroupbyappservicesRequest): QueryAppserviceenvparamGroupbyappservicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppserviceenvparamGroupbyappservicesEx(request, headers, runtime);
}

/**
 * Description: 查询环境变量
 * Summary: 查询环境变量
 */
async function queryAppserviceenvparamGroupbyappservicesEx(request: QueryAppserviceenvparamGroupbyappservicesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppserviceenvparamGroupbyappservicesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appserviceenvparam.groupbyappservices.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppserviceenvparamQuerywithdiffRequest = {
  authToken?: string(name='auth_token'),
  // appServiceId
  appServiceId?: string(name='app_service_id'),
  // buildpackId
  buildpackId?: string(name='buildpack_id'),
}

model QueryAppserviceenvparamQuerywithdiffResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // json字符串
  appServiceEnvParamDiff?: [ AppServiceEnvParam ](name='app_service_env_param_diff'),
}

/**
 * Description: 和修改点比较查询
 * Summary: 和修改点比较查询
 */
async function queryAppserviceenvparamQuerywithdiff(request: QueryAppserviceenvparamQuerywithdiffRequest): QueryAppserviceenvparamQuerywithdiffResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppserviceenvparamQuerywithdiffEx(request, headers, runtime);
}

/**
 * Description: 和修改点比较查询
 * Summary: 和修改点比较查询
 */
async function queryAppserviceenvparamQuerywithdiffEx(request: QueryAppserviceenvparamQuerywithdiffRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppserviceenvparamQuerywithdiffResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appserviceenvparam.querywithdiff.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAppserviceenvparamUpdateparamsRequest = {
  authToken?: string(name='auth_token'),
  // appServiceId
  appServiceId?: string(name='app_service_id'),
  // buildpackId
  buildpackId?: string(name='buildpack_id'),
  // params
  params?: [ AppServiceEnvParam ](name='params'),
}

model UpdateAppserviceenvparamUpdateparamsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // AppServiceEnvParam集合
  appServiceEnvParam?: [ AppServiceEnvParam ](name='app_service_env_param'),
}

/**
 * Description: 更新参数
 * Summary: 更新参数
 */
async function updateAppserviceenvparamUpdateparams(request: UpdateAppserviceenvparamUpdateparamsRequest): UpdateAppserviceenvparamUpdateparamsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAppserviceenvparamUpdateparamsEx(request, headers, runtime);
}

/**
 * Description: 更新参数
 * Summary: 更新参数
 */
async function updateAppserviceenvparamUpdateparamsEx(request: UpdateAppserviceenvparamUpdateparamsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAppserviceenvparamUpdateparamsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appserviceenvparam.updateparams.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApptechstackrelationRequest = {
  authToken?: string(name='auth_token'),
  // 一组应用id
  appIds?: [ string ](name='app_ids'),
  // buildpack_arch
  buildpackArch?: string(name='buildpack_arch'),
  // creation_fime_from
  // 
  creationTimeFrom?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time_from'),
  // creation_time_to
  // 
  creationTimeTo?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time_to'),
  // current_page
  // 
  currentPage?: long(name='current_page'),
  // 是否降序
  descend?: string(name='descend'),
  // ids
  ids?: [ long ](name='ids'),
  // isProcessed
  isProcessed?: boolean(name='is_processed'),
  // modification_time_from
  // 
  modificationTimeFrom?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time_from'),
  // modification_time_to
  // 
  modificationTimeTo?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time_to'),
  // page_size
  // 
  pageSize?: long(name='page_size'),
  // 分类
  sortField?: string(name='sort_field'),
  // start_index
  // 
  startIndex?: long(name='start_index'),
  // techstack_identities
  // 
  techstackIdentities?: string(name='techstack_identities'),
  // techstack_ids
  // 
  techstackIds?: [ long ](name='techstack_ids'),
}

model QueryApptechstackrelationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // app_techstack_relations
  appTechstackRelations?: [ AppTechstackRelation ](name='app_techstack_relations'),
  // current_page
  currentPage?: long(name='current_page'),
  // page_size
  pageSize?: long(name='page_size'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 根据应用查询技术栈关系
 * Summary: 查询技术栈关系
 */
async function queryApptechstackrelation(request: QueryApptechstackrelationRequest): QueryApptechstackrelationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApptechstackrelationEx(request, headers, runtime);
}

/**
 * Description: 根据应用查询技术栈关系
 * Summary: 查询技术栈关系
 */
async function queryApptechstackrelationEx(request: QueryApptechstackrelationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApptechstackrelationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.apptechstackrelation.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateApptechstackrelationRequest = {
  authToken?: string(name='auth_token'),
  // appId
  appId?: string(name='app_id'),
  // buildpackArch
  buildpackArch?: string(name='buildpack_arch'),
  // creationTime
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time'),
  // extraInfo
  extraInfo?: string(name='extra_info'),
  // id
  id?: string(name='id'),
  // modificationTime
  modificationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time'),
  // techstackId
  techstackId?: long(name='techstack_id'),
  // techstackIdentity
  techstackIdentity?: string(name='techstack_identity'),
  // techstackName
  techstackName?: string(name='techstack_name'),
}

model UpdateApptechstackrelationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新应用技术栈关系
 * Summary: 更新技术栈关系
 */
async function updateApptechstackrelation(request: UpdateApptechstackrelationRequest): UpdateApptechstackrelationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateApptechstackrelationEx(request, headers, runtime);
}

/**
 * Description: 更新应用技术栈关系
 * Summary: 更新技术栈关系
 */
async function updateApptechstackrelationEx(request: UpdateApptechstackrelationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApptechstackrelationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.apptechstackrelation.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAppRequest = {
  authToken?: string(name='auth_token'),
  // 应用所属分组，至于应用所属分组的级别需要后端根据分组名称计算出来
  appgroupName?: string(name='appgroup_name'),
  // 应用描述
  description?: string(name='description'),
  // 显示名称
  displayName?: string(name='display_name'),
  // 应用名称
  name?: string(name='name'),
  // 用户登录名
  ownerLoginName?: string(name='owner_login_name'),
  // 技术栈 id
  stackId?: string(name='stack_id'),
  // 应用额外信息（应用标签）
  tags?: [ Tag ](name='tags'),
  // 技术栈版本
  buildpackVersion?: string(name='buildpack_version'),
}

model CreateAppResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 创建的应用 id
  data?: string(name='data'),
}

/**
 * Description: 应用管理-创建应用
 * Summary: 应用管理-创建应用
 */
async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAppEx(request, headers, runtime);
}

/**
 * Description: 应用管理-创建应用
 * Summary: 应用管理-创建应用
 */
async function createAppEx(request: CreateAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAppGroupRequest = {
  authToken?: string(name='auth_token'),
  // 应用依赖规划
  appScheme?: [ AppDepend ](name='app_scheme'),
  // 应用分组描述
  description?: string(name='description'),
  // 应用分组名称，支持中文
  name?: string(name='name'),
  // 应用分组负责人登录名
  ownerLoginName?: string(name='owner_login_name'),
  // 父应用分组 id
  parentId?: string(name='parent_id'),
}

model CreateAppGroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 创建的应用分组名称
  data?: string(name='data'),
}

/**
 * Description: 应用管理-应用分组创建
 * Summary: 应用管理-应用分组创建
 */
async function createAppGroup(request: CreateAppGroupRequest): CreateAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAppGroupEx(request, headers, runtime);
}

/**
 * Description: 应用管理-应用分组创建
 * Summary: 应用管理-应用分组创建
 */
async function createAppGroupEx(request: CreateAppGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppGroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.group.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppRequest = {
  authToken?: string(name='auth_token'),
  // 待查询的应用名称
  name?: string(name='name'),
}

model GetAppResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用基本信息
  data?: App(name='data'),
}

/**
 * Description: 应用管理-获取应用基本信息
 * Summary: 应用管理-获取应用基本信息
 */
async function getApp(request: GetAppRequest): GetAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppEx(request, headers, runtime);
}

/**
 * Description: 应用管理-获取应用基本信息
 * Summary: 应用管理-获取应用基本信息
 */
async function getAppEx(request: GetAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CountAppServiceRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  appName?: string(name='app_name'),
}

model CountAppServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用服务计数
  data?: AppServiceCount(name='data'),
}

/**
 * Description: 应用管理-查看应用所有应用服务数量
 * Summary: 应用管理-查看应用所有应用服务数量
 */
async function countAppService(request: CountAppServiceRequest): CountAppServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return countAppServiceEx(request, headers, runtime);
}

/**
 * Description: 应用管理-查看应用所有应用服务数量
 * Summary: 应用管理-查看应用所有应用服务数量
 */
async function countAppServiceEx(request: CountAppServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountAppServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.service.count', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllAppDeployviewRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  appName?: string(name='app_name'),
}

model AllAppDeployviewResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 所有 workspace 的部署图/拓扑图
  data?: [ DeployView ](name='data'),
}

/**
 * Description: 应用管理-获取当前应用所有环境中的部署图(经典应用服务)
 * Summary: (废弃)获取应用所有环境的部署图(经典)
 */
async function allAppDeployview(request: AllAppDeployviewRequest): AllAppDeployviewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allAppDeployviewEx(request, headers, runtime);
}

/**
 * Description: 应用管理-获取当前应用所有环境中的部署图(经典应用服务)
 * Summary: (废弃)获取应用所有环境的部署图(经典)
 */
async function allAppDeployviewEx(request: AllAppDeployviewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllAppDeployviewResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.deployview.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppRequest = {
  authToken?: string(name='auth_token'),
  // 根据应用分组查询，为空默认查询所有应用分组
  appGroupName?: string(name='app_group_name'),
  // 根据应用名称查询，为空默认查询所有应用
  appName?: string(name='app_name'),
  // 排序规则数组，默认为 UTC_CREATED_DESC，即 根据创建时间降序排序
  orders?: [ string ](name='orders'),
  // 当前页码，从1开始，默认为1
  pageNum?: long(name='page_num'),
  // 分页大小，默认为10
  pageSize?: long(name='page_size'),
  // 查询类型，支持精准查询、模糊查询、前缀模糊查询，这里默认为模糊查询；查询类型针对字段 app_name, app_group_name
  queryType?: string(name='query_type'),
}

model QueryAppResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 查询到的应用列表，包含每个应用的分组信息
  data?: [ App ](name='data'),
  // 当前页
  pageNum?: long(name='page_num'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 记录总数
  total?: long(name='total'),
}

/**
 * Description: 应用管理-批量查询应用
 * Summary: 应用管理-批量查询应用
 */
async function queryApp(request: QueryAppRequest): QueryAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppEx(request, headers, runtime);
}

/**
 * Description: 应用管理-批量查询应用
 * Summary: 应用管理-批量查询应用
 */
async function queryAppEx(request: QueryAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppGroupRequest = {
  authToken?: string(name='auth_token'),
  // 应用分组名称
  name?: string(name='name'),
}

model GetAppGroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用分组
  data?: AppGroup(name='data'),
}

/**
 * Description: 应用管理-获取应用分组
 * Summary: 应用管理-获取单个应用分组
 */
async function getAppGroup(request: GetAppGroupRequest): GetAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppGroupEx(request, headers, runtime);
}

/**
 * Description: 应用管理-获取应用分组
 * Summary: 应用管理-获取单个应用分组
 */
async function getAppGroupEx(request: GetAppGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppGroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.group.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppGroupRequest = {
  authToken?: string(name='auth_token'),
  // 根据应用分组名称查询
  appGroupName?: string(name='app_group_name'),
  // 根据应用分组层级进行筛选
  layer?: long(name='layer'),
  // 排序规则数组，默认为 UTC_CREATED_DESC，即 根据创建时间降序排序
  orders?: [ string ](name='orders'),
  // 根据应用分组负责人登录名查询
  ownerLoginName?: string(name='owner_login_name'),
  // 当前页码，从1开始，默认为1
  pageNum?: long(name='page_num'),
  // 分页大小，默认为10
  pageSize?: long(name='page_size'),
  // 查询类型，支持精准查询、模糊查询、前缀模糊查询，这里默认为模糊查询；查询类型针对字段, app_group_name, owner_login_name
  queryType?: string(name='query_type'),
}

model QueryAppGroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 查询到的应用列表，包含每个应用的分组信息
  data?: [ AppGroup ](name='data'),
  // 当前页
  pageNum?: long(name='page_num'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 记录总数
  total?: long(name='total'),
}

/**
 * Description: 应用管理-批量查询应用分组
 * Summary: 应用管理-批量查询应用分组
 */
async function queryAppGroup(request: QueryAppGroupRequest): QueryAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppGroupEx(request, headers, runtime);
}

/**
 * Description: 应用管理-批量查询应用分组
 * Summary: 应用管理-批量查询应用分组
 */
async function queryAppGroupEx(request: QueryAppGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppGroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.group.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppServiceRequest = {
  authToken?: string(name='auth_token'),
  // 根据应用名称查询，不能为空，不支持一次性查询所有应用
  appName?: string(name='app_name'),
  // 排序规则数组，默认为 UTC_CREATED_DESC，即 根据创建时间降序排序
  orders?: [ string ](name='orders'),
  // 当前页码，从1开始，默认为1
  pageNum?: long(name='page_num'),
  // 分页大小，默认为10
  pageSize?: long(name='page_size'),
  // 工作空间列表
  workspaceIds?: [ string ](name='workspace_ids'),
}

model QueryAppServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用服务实例列表，每个应用服务实例包含 slb、ecs、db 等信息
  data?: [ AppServiceEntity ](name='data'),
  // 当前页码
  pageNum?: long(name='page_num'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 总数
  total?: long(name='total'),
}

/**
 * Description: 应用管理-查询当前应用的所有应用服务
 * Summary: 应用管理-查询当前应用的所有应用服务
 */
async function queryAppService(request: QueryAppServiceRequest): QueryAppServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppServiceEx(request, headers, runtime);
}

/**
 * Description: 应用管理-查询当前应用的所有应用服务
 * Summary: 应用管理-查询当前应用的所有应用服务
 */
async function queryAppServiceEx(request: QueryAppServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.service.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAppFavouriteRequest = {
  authToken?: string(name='auth_token'),
  // 用户要收藏的应用名称
  appName?: string(name='app_name'),
  // 用户登录名
  ownerLoginName?: string(name='owner_login_name'),
}

model CreateAppFavouriteResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 收藏成功的记录id
  data?: string(name='data'),
}

/**
 * Description: 应用管理-用户收藏应用
 * Summary: 应用管理-用户收藏应用
 */
async function createAppFavourite(request: CreateAppFavouriteRequest): CreateAppFavouriteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAppFavouriteEx(request, headers, runtime);
}

/**
 * Description: 应用管理-用户收藏应用
 * Summary: 应用管理-用户收藏应用
 */
async function createAppFavouriteEx(request: CreateAppFavouriteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppFavouriteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.favourite.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteAppFavouriteRequest = {
  authToken?: string(name='auth_token'),
  // 用户要取消收藏的应用名称
  appName?: string(name='app_name'),
  // 用户登录名
  ownerLoginName?: string(name='owner_login_name'),
}

model DeleteAppFavouriteResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否取消收藏成功
  data?: boolean(name='data'),
}

/**
 * Description: 应用管理-用户取消收藏某应用
 * Summary: 应用管理-用户取消收藏某应用
 */
async function deleteAppFavourite(request: DeleteAppFavouriteRequest): DeleteAppFavouriteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteAppFavouriteEx(request, headers, runtime);
}

/**
 * Description: 应用管理-用户取消收藏某应用
 * Summary: 应用管理-用户取消收藏某应用
 */
async function deleteAppFavouriteEx(request: DeleteAppFavouriteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAppFavouriteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.favourite.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAppRequest = {
  authToken?: string(name='auth_token'),
  // 应用所属分组，至于应用所属分组的级别需要后端根据分组名称计算出来
  appgroupName?: string(name='appgroup_name'),
  // 技术栈版本
  buildpackVersion?: string(name='buildpack_version'),
  // 应用描述
  description?: string(name='description'),
  // 显示名称
  displayName?: string(name='display_name'),
  // 应用名称
  name?: string(name='name'),
  // 应用额外信息（应用标签）
  tags?: [ Tag ](name='tags'),
}

model UpdateAppResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否更新成功
  data?: boolean(name='data'),
}

/**
 * Description: 应用管理-更新应用信息
 * Summary: 应用管理-更新应用信息
 */
async function updateApp(request: UpdateAppRequest): UpdateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAppEx(request, headers, runtime);
}

/**
 * Description: 应用管理-更新应用信息
 * Summary: 应用管理-更新应用信息
 */
async function updateAppEx(request: UpdateAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAppGroupRequest = {
  authToken?: string(name='auth_token'),
  // 应用依赖拓扑图
  appScheme?: [ AppDepend ](name='app_scheme'),
  // 应用分组描述
  description?: string(name='description'),
  // 应用分组名称，支持中文
  name?: string(name='name'),
  // 父应用分组 id
  parentId?: string(name='parent_id'),
}

model UpdateAppGroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否更新成功
  data?: boolean(name='data'),
}

/**
 * Description: 应用管理-更新应用分组信息
 * Summary: 应用管理-更新应用分组信息
 */
async function updateAppGroup(request: UpdateAppGroupRequest): UpdateAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAppGroupEx(request, headers, runtime);
}

/**
 * Description: 应用管理-更新应用分组信息
 * Summary: 应用管理-更新应用分组信息
 */
async function updateAppGroupEx(request: UpdateAppGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAppGroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.group.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppFavouriteRequest = {
  authToken?: string(name='auth_token'),
  // 排序规则数组，默认为 UTC_CREATED_DESC，即 根据创建时间降序排序
  orders?: [ string ](name='orders'),
}

model ListAppFavouriteResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 当前用户收藏的所有应用
  data?: [ App ](name='data'),
}

/**
 * Description: 应用管理-列出当前用户收藏的应用
 * Summary: 应用管理-列出当前用户收藏的应用
 */
async function listAppFavourite(request: ListAppFavouriteRequest): ListAppFavouriteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppFavouriteEx(request, headers, runtime);
}

/**
 * Description: 应用管理-列出当前用户收藏的应用
 * Summary: 应用管理-列出当前用户收藏的应用
 */
async function listAppFavouriteEx(request: ListAppFavouriteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppFavouriteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.favourite.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteAppRequest = {
  authToken?: string(name='auth_token'),
  // 要删除的应用名称
  name?: string(name='name'),
}

model DeleteAppResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否删除成功
  data?: boolean(name='data'),
}

/**
 * Description: 应用管理-删除应用
 * Summary: 应用管理-删除应用
 */
async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteAppEx(request, headers, runtime);
}

/**
 * Description: 应用管理-删除应用
 * Summary: 应用管理-删除应用
 */
async function deleteAppEx(request: DeleteAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteAppGroupRequest = {
  authToken?: string(name='auth_token'),
  // 要删除的应用分组名称
  name?: string(name='name'),
}

model DeleteAppGroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否删除成功
  data?: boolean(name='data'),
}

/**
 * Description: 应用管理-删除应用分组
 * Summary: 应用管理-删除应用分组
 */
async function deleteAppGroup(request: DeleteAppGroupRequest): DeleteAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteAppGroupEx(request, headers, runtime);
}

/**
 * Description: 应用管理-删除应用分组
 * Summary: 应用管理-删除应用分组
 */
async function deleteAppGroupEx(request: DeleteAppGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAppGroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.group.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppPlanRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  appName?: string(name='app_name'),
  // 排序规则数组，默认为 UTC_CREATED_DESC，即 根据创建时间降序排序
  orders?: [ string ](name='orders'),
  // 发布单 order_id
  orderId?: string(name='order_id'),
  // 当前页码，从1开始，默认为1
  pageNum?: long(name='page_num'),
  // 分页大小，默认为10
  pageSize?: long(name='page_size'),
  // 状态筛选列表
  stateList?: [ string ](name='state_list'),
  // 工作空间名称
  workspace?: string(name='workspace'),
  // 工作空间 id 列表
  workspaceIds?: [ string ](name='workspace_ids'),
}

model QueryAppPlanResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 查询到的发布单列表
  data?: [ OpsPlan ](name='data'),
  // 当前分页，默认为1
  pageNum?: long(name='page_num'),
  // 分页大小，默认为10
  pageSize?: long(name='page_size'),
  // 查询总数
  total?: long(name='total'),
}

/**
 * Description: 应用管理-应用维度查询经典应用服务发布单
 * Summary: 应用管理-应用维度查询经典应用服务发布单
 */
async function queryAppPlan(request: QueryAppPlanRequest): QueryAppPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppPlanEx(request, headers, runtime);
}

/**
 * Description: 应用管理-应用维度查询经典应用服务发布单
 * Summary: 应用管理-应用维度查询经典应用服务发布单
 */
async function queryAppPlanEx(request: QueryAppPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppPlanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.plan.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExistAppGroupRequest = {
  authToken?: string(name='auth_token'),
  // 应用分组名称
  appgroupName?: string(name='appgroup_name'),
}

model ExistAppGroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否存在
  data?: boolean(name='data'),
}

/**
 * Description: 应用管理-判断应用分组是否存在。该接口判断应用分组是否存在的范围是租户级别唯一，也就是说不同级别的应用分组名称也不能同名
 * Summary: 应用管理-判断应用分组是否存在
 */
async function existAppGroup(request: ExistAppGroupRequest): ExistAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return existAppGroupEx(request, headers, runtime);
}

/**
 * Description: 应用管理-判断应用分组是否存在。该接口判断应用分组是否存在的范围是租户级别唯一，也就是说不同级别的应用分组名称也不能同名
 * Summary: 应用管理-判断应用分组是否存在
 */
async function existAppGroupEx(request: ExistAppGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExistAppGroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.group.exist', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUserRequest = {
  authToken?: string(name='auth_token'),
  // 没传递该参数时，返回当前登录用户信息
  loginName?: string(name='login_name'),
}

model QueryUserResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 用户信息
  data?: UserDTO(name='data'),
}

/**
 * Description: 应用管理-当前登录用户信息查询（已废弃，用户信息应该由onex接口返回）
 * Summary: 应用管理-当前登录用户信息查询（已废弃）
 */
async function queryUser(request: QueryUserRequest): QueryUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUserEx(request, headers, runtime);
}

/**
 * Description: 应用管理-当前登录用户信息查询（已废弃，用户信息应该由onex接口返回）
 * Summary: 应用管理-当前登录用户信息查询（已废弃）
 */
async function queryUserEx(request: QueryUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.user.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExistAppRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  appName?: string(name='app_name'),
}

model ExistAppResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否存在
  data?: boolean(name='data'),
}

/**
 * Description: 应用管理-判断应用是否存在
 * Summary: 应用管理-判断应用是否存在
 */
async function existApp(request: ExistAppRequest): ExistAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return existAppEx(request, headers, runtime);
}

/**
 * Description: 应用管理-判断应用是否存在
 * Summary: 应用管理-判断应用是否存在
 */
async function existAppEx(request: ExistAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExistAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.exist', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApplicationBuildpackRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  applicationName?: string(name='application_name'),
  // 应用服务的名称
  serviceName?: string(name='service_name'),
  // 环境
  workspace?: string(name='workspace'),
}

model GetApplicationBuildpackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 技术栈id
  buildpackId?: string(name='buildpack_id'),
}

/**
 * Description: 根据应用服务实例查询对应的技术栈信息
 * Summary: 查询技术栈信息
 */
async function getApplicationBuildpack(request: GetApplicationBuildpackRequest): GetApplicationBuildpackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApplicationBuildpackEx(request, headers, runtime);
}

/**
 * Description: 根据应用服务实例查询对应的技术栈信息
 * Summary: 查询技术栈信息
 */
async function getApplicationBuildpackEx(request: GetApplicationBuildpackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApplicationBuildpackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.buildpack.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApplicationTechstackRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  applicationName?: string(name='application_name'),
}

model GetApplicationTechstackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 技术栈框架
  techstack?: Techstack(name='techstack'),
}

/**
 * Description: 查询指定应用的技术栈框架信息
 * Summary: 查询指定应用的技术栈框架信息
 */
async function getApplicationTechstack(request: GetApplicationTechstackRequest): GetApplicationTechstackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApplicationTechstackEx(request, headers, runtime);
}

/**
 * Description: 查询指定应用的技术栈框架信息
 * Summary: 查询指定应用的技术栈框架信息
 */
async function getApplicationTechstackEx(request: GetApplicationTechstackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApplicationTechstackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.application.techstack.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetBuildpackRequest = {
  authToken?: string(name='auth_token'),
  // 技术栈版本的ID
  buildpackId?: string(name='buildpack_id'),
}

model GetBuildpackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // buildpackParams
  buildpackParams?: [ BuildpackParamTemplate ](name='buildpack_params'),
  // contactInfo
  contactInfo?: string(name='contact_info'),
  // creatorId
  creatorId?: string(name='creator_id'),
  // debugMode
  debugMode?: boolean(name='debug_mode'),
  // depracationNote
  depracationNote?: string(name='depracation_note'),
  // description
  description?: string(name='description'),
  // fullVersion
  fullVersion?: string(name='full_version'),
  // publicationTime
  publicationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='publication_time'),
  // publisherId
  publisherId?: string(name='publisher_id'),
  // scope
  scope?: string(name='scope'),
  // sharedTenants
  sharedTenants?: [ string ](name='shared_tenants'),
  // status
  status?: string(name='status'),
  // supportedOs
  supportedOs?: [ BuildpackOS ](name='supported_os'),
  // supportedRegions
  supportedRegions?: [ string ](name='supported_regions'),
  // techstackId
  techstackId?: string(name='techstack_id'),
}

/**
 * Description: 获取技术栈信息
 * Summary: 获取技术栈信息
 */
async function getBuildpack(request: GetBuildpackRequest): GetBuildpackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getBuildpackEx(request, headers, runtime);
}

/**
 * Description: 获取技术栈信息
 * Summary: 获取技术栈信息
 */
async function getBuildpackEx(request: GetBuildpackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetBuildpackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListTechstackRequest = {
  authToken?: string(name='auth_token'),
}

model ListTechstackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 技术栈列表
  techstacks?: [ Techstack ](name='techstacks'),
}

/**
 * Description: 列出系统支持的所有技术栈框架
 * Summary: 列出系统支持的所有技术栈框架
 */
async function listTechstack(request: ListTechstackRequest): ListTechstackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listTechstackEx(request, headers, runtime);
}

/**
 * Description: 列出系统支持的所有技术栈框架
 * Summary: 列出系统支持的所有技术栈框架
 */
async function listTechstackEx(request: ListTechstackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTechstackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.techstack.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackRequest = {
  authToken?: string(name='auth_token'),
  // 当前页码
  currentPage?: long(name='current_page'),
  // 技术栈版本号
  fullVersion?: string(name='full_version'),
  // 每页的大小
  pageSize?: long(name='page_size'),
  // 开始时间
  publicationTimeFrom?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='publication_time_from'),
  // 截至时间
  publicationTimeTo?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='publication_time_to'),
  // 技术栈提供方所在域
  scopes?: [ string ](name='scopes'),
  // 技术栈版本状态
  statuses?: [ string ](name='statuses'),
  // 支持的操作系统ID列表
  supportedOsIds?: [ long ](name='supported_os_ids'),
  // 支持的地域名称列表
  supportedRegions?: [ string ](name='supported_regions'),
  // 技术栈ID列表
  techstackIds?: [ long ](name='techstack_ids'),
  // 技术栈名称
  techstackNames?: [ string ](name='techstack_names'),
  // creatorIds
  creatorIds?: [ string ](name='creator_ids'),
}

model QueryBuildpackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 符合条件的技术栈列表
  buildpacks?: [ BuildpackDetail ](name='buildpacks'),
  // 当前页码
  currentPage?: long(name='current_page'),
  // 每页的大小
  pageSize?: long(name='page_size'),
  // 总数量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 搜索技术栈
 * Summary: 搜索技术栈
 */
async function queryBuildpack(request: QueryBuildpackRequest): QueryBuildpackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackEx(request, headers, runtime);
}

/**
 * Description: 搜索技术栈
 * Summary: 搜索技术栈
 */
async function queryBuildpackEx(request: QueryBuildpackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBuildpackRequest = {
  authToken?: string(name='auth_token'),
  // 技术栈所支持的租户名称列表
  availableTenantNames?: [ string ](name='available_tenant_names'),
  // 技术栈的编译打包命令
  buildCommand?: string(name='build_command'),
  // 分享给其他租户时留下的联系信息
  contactInfo?: string(name='contact_info'),
  // 当前技术栈是否是debug模式
  debugMode?: boolean(name='debug_mode'),
  // 描述
  description?: string(name='description'),
  // 环境变量
  envParams?: [ BuildpackParamTemplate ](name='env_params'),
  // 技术栈的版本号
  fullVersion?: string(name='full_version'),
  // 主版本号
  majorVersion?: long(name='major_version'),
  // 次版本号
  minorVersion?: long(name='minor_version'),
  // 补丁版本号
  patchVersion?: long(name='patch_version'),
  // 技术栈的作用域，可以是SYSTEM或者CUSTOM
  scope?: string(name='scope'),
  // 支持的操作系统ID
  supportedOs?: [ long ](name='supported_os'),
  // 技术栈支持的地域信息
  supportedRegions?: [ BuildpackRegionRelation ](name='supported_regions'),
  // 技术栈大类的id
  techstackId?: long(name='techstack_id'),
}

model CreateBuildpackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 创建完成的技术栈ID
  buildpackId?: string(name='buildpack_id'),
  // 技术栈包上传地址信息
  uploadEndpoints?: [ UploadEndpoint ](name='upload_endpoints'),
}

/**
 * Description: 创建一个技术栈
 * Summary: 创建一个技术栈
 */
async function createBuildpack(request: CreateBuildpackRequest): CreateBuildpackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBuildpackEx(request, headers, runtime);
}

/**
 * Description: 创建一个技术栈
 * Summary: 创建一个技术栈
 */
async function createBuildpackEx(request: CreateBuildpackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBuildpackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadfinishBuildpackRequest = {
  authToken?: string(name='auth_token'),
  // 技术栈的ID
  buildpackId?: string(name='buildpack_id'),
  // supportedRegions
  supportedRegions?: [ BuildpackRegionRelation ](name='supported_regions'),
}

model UploadfinishBuildpackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新技术栈包状态
 * Summary: 更新技术栈包状态
 */
async function uploadfinishBuildpack(request: UploadfinishBuildpackRequest): UploadfinishBuildpackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadfinishBuildpackEx(request, headers, runtime);
}

/**
 * Description: 更新技术栈包状态
 * Summary: 更新技术栈包状态
 */
async function uploadfinishBuildpackEx(request: UploadfinishBuildpackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadfinishBuildpackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.uploadfinish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PublishBuildpackRequest = {
  authToken?: string(name='auth_token'),
  // buildpackId
  buildpackId?: string(name='buildpack_id'),
}

model PublishBuildpackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 发布一个技术栈
 * Summary: 发布一个技术栈
 */
async function publishBuildpack(request: PublishBuildpackRequest): PublishBuildpackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return publishBuildpackEx(request, headers, runtime);
}

/**
 * Description: 发布一个技术栈
 * Summary: 发布一个技术栈
 */
async function publishBuildpackEx(request: PublishBuildpackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PublishBuildpackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.publish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateBuildpackRequest = {
  authToken?: string(name='auth_token'),
  // 技术栈的编译打包命令
  buildCommand?: string(name='build_command'),
  // 分享给其他租户时留下的联系信息
  contactInfo?: string(name='contact_info'),
  // 当前技术栈是否是debug模式
  debugMode?: boolean(name='debug_mode'),
  // 描述
  description?: string(name='description'),
  // 环境变量
  envParams?: [ BuildpackParamTemplate ](name='env_params'),
  // 技术栈版本号
  fullVersion?: string(name='full_version'),
  // 技术栈id
  id?: string(name='id'),
  // 支持的操作系统ID
  supportedOs?: [ long ](name='supported_os'),
}

model UpdateBuildpackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新一个技术栈
 * Summary: 更新一个技术栈
 */
async function updateBuildpack(request: UpdateBuildpackRequest): UpdateBuildpackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateBuildpackEx(request, headers, runtime);
}

/**
 * Description: 更新一个技术栈
 * Summary: 更新一个技术栈
 */
async function updateBuildpackEx(request: UpdateBuildpackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateBuildpackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackFindbynamesRequest = {
  authToken?: string(name='auth_token'),
  // techstackNames
  techstackNames?: [ string ](name='techstack_names'),
}

model QueryBuildpackFindbynamesResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // techstack对象的json串
  techstack?: [ Techstack ](name='techstack'),
}

/**
 * Description: 根据名称查询
 * Summary: 根据名称查询
 */
async function queryBuildpackFindbynames(request: QueryBuildpackFindbynamesRequest): QueryBuildpackFindbynamesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackFindbynamesEx(request, headers, runtime);
}

/**
 * Description: 根据名称查询
 * Summary: 根据名称查询
 */
async function queryBuildpackFindbynamesEx(request: QueryBuildpackFindbynamesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackFindbynamesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.findbynames.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CountBuildpackRequest = {
  authToken?: string(name='auth_token'),
  // buildpackId
  buildpackId?: string(name='buildpack_id'),
}

model CountBuildpackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // count值
  count?: long(name='count'),
}

/**
 * Description: 计算
 * Summary: 计算
 */
async function countBuildpack(request: CountBuildpackRequest): CountBuildpackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return countBuildpackEx(request, headers, runtime);
}

/**
 * Description: 计算
 * Summary: 计算
 */
async function countBuildpackEx(request: CountBuildpackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountBuildpackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.count', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeprecateBuildpackRequest = {
  authToken?: string(name='auth_token'),
  // depracationNoteMap
  depracationNoteMap?: DepracationNotePayload(name='depracation_note_map'),
  // ids
  id?: [ string ](name='id'),
}

model DeprecateBuildpackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // result
  result?: long(name='result'),
}

/**
 * Description: 废弃
 * Summary: 废弃
 */
async function deprecateBuildpack(request: DeprecateBuildpackRequest): DeprecateBuildpackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deprecateBuildpackEx(request, headers, runtime);
}

/**
 * Description: 废弃
 * Summary: 废弃
 */
async function deprecateBuildpackEx(request: DeprecateBuildpackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeprecateBuildpackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.deprecate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteBuildpackRequest = {
  authToken?: string(name='auth_token'),
  // ids
  id?: [ string ](name='id'),
}

model BatchdeleteBuildpackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // BuildpackDetailVO
  buildpackDetailVo?: [ BuildpackDetailVO ](name='buildpack_detail_vo'),
}

/**
 * Description: 批量删除
 * Summary: 批量删除
 */
async function batchdeleteBuildpack(request: BatchdeleteBuildpackRequest): BatchdeleteBuildpackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteBuildpackEx(request, headers, runtime);
}

/**
 * Description: 批量删除
 * Summary: 批量删除
 */
async function batchdeleteBuildpackEx(request: BatchdeleteBuildpackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteBuildpackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExistBuildpackRequest = {
  authToken?: string(name='auth_token'),
  // buildpackId
  buildpackId?: string(name='buildpack_id'),
  // fullVersion
  fullVersion?: string(name='full_version'),
  // techstackId
  techstackId?: long(name='techstack_id'),
}

model ExistBuildpackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // result
  result?: boolean(name='result'),
}

/**
 * Description: 查询是否存在
 * Summary: 查询是否存在
 */
async function existBuildpack(request: ExistBuildpackRequest): ExistBuildpackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return existBuildpackEx(request, headers, runtime);
}

/**
 * Description: 查询是否存在
 * Summary: 查询是否存在
 */
async function existBuildpackEx(request: ExistBuildpackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExistBuildpackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.exist', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateBuildpackUpdatepackagesstatusRequest = {
  authToken?: string(name='auth_token'),
  // buildpackId
  id?: string(name='id'),
  // newFileStatus
  newFileStatus?: string(name='new_file_status'),
  // originalFileStatus
  originalFileStatus?: string(name='original_file_status'),
  // regionIds
  regionNum?: [ string ](name='region_num'),
}

model UpdateBuildpackUpdatepackagesstatusResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // result
  result?: long(name='result'),
}

/**
 * Description: 更新打包状态
 * Summary: 更新打包状态
 */
async function updateBuildpackUpdatepackagesstatus(request: UpdateBuildpackUpdatepackagesstatusRequest): UpdateBuildpackUpdatepackagesstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateBuildpackUpdatepackagesstatusEx(request, headers, runtime);
}

/**
 * Description: 更新打包状态
 * Summary: 更新打包状态
 */
async function updateBuildpackUpdatepackagesstatusEx(request: UpdateBuildpackUpdatepackagesstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateBuildpackUpdatepackagesstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.updatepackagesstatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackFindidversionpairsbyversionRequest = {
  authToken?: string(name='auth_token'),
  // fullVersion
  fullVersion?: string(name='full_version'),
  // statuses
  statuses?: [ string ](name='statuses'),
  // techstackId
  techstackId?: long(name='techstack_id'),
}

model QueryBuildpackFindidversionpairsbyversionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // buildpack_composite_v_os
  buildpackCompositeVOs?: [ BuildpackCompositeVO ](name='buildpack_composite_v_os'),
  // current_page
  currentPage?: long(name='current_page'),
  // page_size
  pageSize?: long(name='page_size'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询版本
 * Summary: 查询版本
 */
async function queryBuildpackFindidversionpairsbyversion(request: QueryBuildpackFindidversionpairsbyversionRequest): QueryBuildpackFindidversionpairsbyversionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackFindidversionpairsbyversionEx(request, headers, runtime);
}

/**
 * Description: 查询版本
 * Summary: 查询版本
 */
async function queryBuildpackFindidversionpairsbyversionEx(request: QueryBuildpackFindidversionpairsbyversionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackFindidversionpairsbyversionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.findidversionpairsbyversion.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackGroupbytechstackRequest = {
  authToken?: string(name='auth_token'),
}

model QueryBuildpackGroupbytechstackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // count
  count?: [ TechstackBuildpackCount ](name='count'),
}

/**
 * Description: 根据技术栈分组查询
 * Summary: 根据技术栈分组查询
 */
async function queryBuildpackGroupbytechstack(request: QueryBuildpackGroupbytechstackRequest): QueryBuildpackGroupbytechstackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackGroupbytechstackEx(request, headers, runtime);
}

/**
 * Description: 根据技术栈分组查询
 * Summary: 根据技术栈分组查询
 */
async function queryBuildpackGroupbytechstackEx(request: QueryBuildpackGroupbytechstackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackGroupbytechstackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.groupbytechstack.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackFindvisibletechstacksRequest = {
  authToken?: string(name='auth_token'),
}

model QueryBuildpackFindvisibletechstacksResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // Techstack
  techstack?: [ Techstack ](name='techstack'),
}

/**
 * Description: 查询可见技术栈
 * Summary: 查询可见技术栈
 */
async function queryBuildpackFindvisibletechstacks(request: QueryBuildpackFindvisibletechstacksRequest): QueryBuildpackFindvisibletechstacksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackFindvisibletechstacksEx(request, headers, runtime);
}

/**
 * Description: 查询可见技术栈
 * Summary: 查询可见技术栈
 */
async function queryBuildpackFindvisibletechstacksEx(request: QueryBuildpackFindvisibletechstacksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackFindvisibletechstacksResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.findvisibletechstacks.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackFindwritabletechstacksRequest = {
  authToken?: string(name='auth_token'),
}

model QueryBuildpackFindwritabletechstacksResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // Techstack
  techstack?: [ Techstack ](name='techstack'),
}

/**
 * Description: 查询可写技术栈
 * Summary: 查询可写技术栈
 */
async function queryBuildpackFindwritabletechstacks(request: QueryBuildpackFindwritabletechstacksRequest): QueryBuildpackFindwritabletechstacksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackFindwritabletechstacksEx(request, headers, runtime);
}

/**
 * Description: 查询可写技术栈
 * Summary: 查询可写技术栈
 */
async function queryBuildpackFindwritabletechstacksEx(request: QueryBuildpackFindwritabletechstacksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackFindwritabletechstacksResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.findwritabletechstacks.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackFindosbycurrentcloudRequest = {
  authToken?: string(name='auth_token'),
}

model QueryBuildpackFindosbycurrentcloudResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // BuildpackOS
  buildpackOs?: [ BuildpackOS ](name='buildpack_os'),
}

/**
 * Description: 查询os通过当前云
 * Summary: 查询os通过当前云
 */
async function queryBuildpackFindosbycurrentcloud(request: QueryBuildpackFindosbycurrentcloudRequest): QueryBuildpackFindosbycurrentcloudResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackFindosbycurrentcloudEx(request, headers, runtime);
}

/**
 * Description: 查询os通过当前云
 * Summary: 查询os通过当前云
 */
async function queryBuildpackFindosbycurrentcloudEx(request: QueryBuildpackFindosbycurrentcloudRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackFindosbycurrentcloudResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.findosbycurrentcloud.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackFindbyappsvRequest = {
  authToken?: string(name='auth_token'),
  // appIds
  appIds?: [ string ](name='app_ids'),
  // workspaceId
  workspaceId?: string(name='workspace_id'),
}

model QueryBuildpackFindbyappsvResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 包含Buildpack对象的json串
  buildpack?: string(name='buildpack'),
}

/**
 * Description: 通过appv1查询buildpack
 * Summary: 查询buildpack
 */
async function queryBuildpackFindbyappsv(request: QueryBuildpackFindbyappsvRequest): QueryBuildpackFindbyappsvResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackFindbyappsvEx(request, headers, runtime);
}

/**
 * Description: 通过appv1查询buildpack
 * Summary: 查询buildpack
 */
async function queryBuildpackFindbyappsvEx(request: QueryBuildpackFindbyappsvRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackFindbyappsvResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.findbyappsv.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackFindbyappsRequest = {
  authToken?: string(name='auth_token'),
  // appIds
  appIds?: [ string ](name='app_ids'),
  // workspaceId
  workspaceId?: string(name='workspace_id'),
}

model QueryBuildpackFindbyappsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 包含BuildpackV2Adapter对象的json字符串
  buildpackv2adapter?: string(name='buildpackv2adapter'),
}

/**
 * Description: 通过app查询
 * Summary: 通过app查询
 */
async function queryBuildpackFindbyapps(request: QueryBuildpackFindbyappsRequest): QueryBuildpackFindbyappsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackFindbyappsEx(request, headers, runtime);
}

/**
 * Description: 通过app查询
 * Summary: 通过app查询
 */
async function queryBuildpackFindbyappsEx(request: QueryBuildpackFindbyappsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackFindbyappsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.findbyapps.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackFindbyappservicesRequest = {
  authToken?: string(name='auth_token'),
  // appServiceIds
  appServiceIds?: [ string ](name='app_service_ids'),
}

model QueryBuildpackFindbyappservicesResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 包含BuildpackV2Adapter对象的json串
  buildpackV2Adapter?: string(name='buildpack_v2_adapter'),
}

/**
 * Description: 通过app服务查询
 * Summary: 通过app服务查询
 */
async function queryBuildpackFindbyappservices(request: QueryBuildpackFindbyappservicesRequest): QueryBuildpackFindbyappservicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackFindbyappservicesEx(request, headers, runtime);
}

/**
 * Description: 通过app服务查询
 * Summary: 通过app服务查询
 */
async function queryBuildpackFindbyappservicesEx(request: QueryBuildpackFindbyappservicesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackFindbyappservicesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.findbyappservices.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackFindbyappvRequest = {
  authToken?: string(name='auth_token'),
  // appId
  appId?: string(name='app_id'),
  // workspaceId
  workspaceId?: string(name='workspace_id'),
}

model QueryBuildpackFindbyappvResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // Buildpack
  buildpack?: BuildpackByAppV(name='buildpack'),
}

/**
 * Description: 通过appv1查询
 * Summary: 通过appv1查询
 */
async function queryBuildpackFindbyappv(request: QueryBuildpackFindbyappvRequest): QueryBuildpackFindbyappvResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackFindbyappvEx(request, headers, runtime);
}

/**
 * Description: 通过appv1查询
 * Summary: 通过appv1查询
 */
async function queryBuildpackFindbyappvEx(request: QueryBuildpackFindbyappvRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackFindbyappvResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.findbyappv.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackFindbyappRequest = {
  authToken?: string(name='auth_token'),
  // appId
  appId?: string(name='app_id'),
  // workspaceId
  workspaceId?: string(name='workspace_id'),
}

model QueryBuildpackFindbyappResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // bgEnable
  bgEnable?: boolean(name='bg_enable'),
  // buildpackArch
  buildpackArch?: string(name='buildpack_arch'),
  // buildScriptId
  buildScriptId?: string(name='build_script_id'),
  // commandId
  commandId?: string(name='command_id'),
  // componentId
  componentId?: string(name='component_id'),
  // configId
  configId?: string(name='config_id'),
  // creator
  creator?: string(name='creator'),
  // customerIds
  customerIds?: [ string ](name='customer_ids'),
  // deployScriptId
  deployScriptId?: string(name='deploy_script_id'),
  // des
  des?: string(name='des'),
  // fullVersion
  fullVersion?: string(name='full_version'),
  // gmtCreate
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create'),
  // gmtModified
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified'),
  // id
  id?: string(name='id'),
  // name
  name?: string(name='name'),
  // supportedOS
  supportedOS?: [ BuildpackOS ](name='supported_o_s'),
  // supportedRegions
  supportedRegions?: [ BuildpackRegionRelationDetail ](name='supported_regions'),
  // techstack
  techstack?: Techstack(name='techstack'),
  // tenantId
  tenantId?: string(name='tenant_id'),
  // utcCreate
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='utc_create'),
  // utcModified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='utc_modified'),
  // version
  version?: string(name='version'),
}

/**
 * Description: 通过app查询
 * Summary: 通过app查询
 */
async function queryBuildpackFindbyapp(request: QueryBuildpackFindbyappRequest): QueryBuildpackFindbyappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackFindbyappEx(request, headers, runtime);
}

/**
 * Description: 通过app查询
 * Summary: 通过app查询
 */
async function queryBuildpackFindbyappEx(request: QueryBuildpackFindbyappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackFindbyappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.findbyapp.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBuildpackGeneratesignurlRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // 地域ID
  regionNum?: string(name='region_num'),
}

model CreateBuildpackGeneratesignurlResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // url
  url?: string(name='url'),
}

/**
 * Description: 生成url
 * Summary: 生成url
 */
async function createBuildpackGeneratesignurl(request: CreateBuildpackGeneratesignurlRequest): CreateBuildpackGeneratesignurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBuildpackGeneratesignurlEx(request, headers, runtime);
}

/**
 * Description: 生成url
 * Summary: 生成url
 */
async function createBuildpackGeneratesignurlEx(request: CreateBuildpackGeneratesignurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBuildpackGeneratesignurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.generatesignurl.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackSumpackagessizeRequest = {
  authToken?: string(name='auth_token'),
  // regionIds
  regionIds?: [ string ](name='region_ids'),
}

model QueryBuildpackSumpackagessizeResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // json
  result?: string(name='result'),
}

/**
 * Description: 查询pagessize
 * Summary: 查询pagessize
 */
async function queryBuildpackSumpackagessize(request: QueryBuildpackSumpackagessizeRequest): QueryBuildpackSumpackagessizeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackSumpackagessizeEx(request, headers, runtime);
}

/**
 * Description: 查询pagessize
 * Summary: 查询pagessize
 */
async function queryBuildpackSumpackagessizeEx(request: QueryBuildpackSumpackagessizeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackSumpackagessizeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.sumpackagessize.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackSupportcoderepoRequest = {
  authToken?: string(name='auth_token'),
  // techstackId
  techstackId?: long(name='techstack_id'),
}

model QueryBuildpackSupportcoderepoResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // result
  data?: boolean(name='data'),
}

/**
 * Description: 查询是否supportcode
 * Summary: 查询是否supportcode
 */
async function queryBuildpackSupportcoderepo(request: QueryBuildpackSupportcoderepoRequest): QueryBuildpackSupportcoderepoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackSupportcoderepoEx(request, headers, runtime);
}

/**
 * Description: 查询是否supportcode
 * Summary: 查询是否supportcode
 */
async function queryBuildpackSupportcoderepoEx(request: QueryBuildpackSupportcoderepoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackSupportcoderepoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.supportcoderepo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackFindavailablebyappserviceidsRequest = {
  authToken?: string(name='auth_token'),
  // appServiceIds
  appServiceIds?: [ string ](name='app_service_ids'),
}

model QueryBuildpackFindavailablebyappserviceidsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // json
  result?: string(name='result'),
}

/**
 * Description: 通过可用的app服务id查询Composite信息
 * Summary: 查询Composite信息
 */
async function queryBuildpackFindavailablebyappserviceids(request: QueryBuildpackFindavailablebyappserviceidsRequest): QueryBuildpackFindavailablebyappserviceidsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackFindavailablebyappserviceidsEx(request, headers, runtime);
}

/**
 * Description: 通过可用的app服务id查询Composite信息
 * Summary: 查询Composite信息
 */
async function queryBuildpackFindavailablebyappserviceidsEx(request: QueryBuildpackFindavailablebyappserviceidsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackFindavailablebyappserviceidsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.findavailablebyappserviceids.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpacknewRequest = {
  authToken?: string(name='auth_token'),
  // buildCommand
  buildCommand?: string(name='build_command'),
  // createdFroms
  createdFroms?: [ string ](name='created_froms'),
  // creationTimeFrom
  creationTimeFrom?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time_from'),
  // creationTimeTo
  creationTimeTo?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time_to'),
  // creatorIds
  creatorIds?: [ string ](name='creator_ids'),
  // currentPage
  currentPage?: long(name='current_page'),
  // descend
  descend?: boolean(name='descend'),
  // fullVersion
  fullVersion?: string(name='full_version'),
  // ids
  ids?: [ string ](name='ids'),
  // isProcessed
  isProcessed?: boolean(name='is_processed'),
  // modificationTimeFrom
  modificationTimeFrom?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time_from'),
  // modificationTimeTo
  modificationTimeTo?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time_to'),
  // pageSize
  pageSize?: long(name='page_size'),
  // publicationTimeFrom
  publicationTimeFrom?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='publication_time_from'),
  // publicationTimeTo
  publicationTimeTo?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='publication_time_to'),
  // publisherIds
  publisherIds?: [ string ](name='publisher_ids'),
  // scopes
  scopes?: [ string ](name='scopes'),
  // sortField
  sortField?: string(name='sort_field'),
  // statuses
  statuses?: [ string ](name='statuses'),
  // supportedOsIds
  supportedOsIds?: [ long ](name='supported_os_ids'),
  // supported_region_ids
  supportedRegionIds?: [ string ](name='supported_region_ids'),
  // techstackIds
  techstackIds?: [ long ](name='techstack_ids'),
  // techstackNames
  techstackNames?: [ string ](name='techstack_names'),
}

model QueryBuildpacknewResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // buildpacks
  buildpacks?: [ BuildpackDetail ](name='buildpacks'),
  // currentPage
  currentPage?: long(name='current_page'),
  // pageSize
  pageSize?: long(name='page_size'),
  // totalCount
  totalCount?: long(name='total_count'),
}

/**
 * Description: pageQuery
 * Summary: pageQuery
 */
async function queryBuildpacknew(request: QueryBuildpacknewRequest): QueryBuildpacknewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpacknewEx(request, headers, runtime);
}

/**
 * Description: pageQuery
 * Summary: pageQuery
 */
async function queryBuildpacknewEx(request: QueryBuildpacknewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpacknewResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpacknew.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetBuildpacknewRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
}

model GetBuildpacknewResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // buildpackDetailVO
  buildpackDetailVO?: BuildpackDetailVO(name='buildpack_detail_v_o'),
}

/**
 * Description: buildpacknewget
 * Summary: buildpacknewget
 */
async function getBuildpacknew(request: GetBuildpacknewRequest): GetBuildpacknewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getBuildpacknewEx(request, headers, runtime);
}

/**
 * Description: buildpacknewget
 * Summary: buildpacknewget
 */
async function getBuildpacknewEx(request: GetBuildpacknewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetBuildpacknewResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpacknew.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateBuildpacknewUploadfinishRequest = {
  authToken?: string(name='auth_token'),
  // buildpackId
  buildpackId?: string(name='buildpack_id'),
  // buildpackRegionRelation
  buildpackRegionRelation?: BuildpackRegionRelation(name='buildpack_region_relation'),
}

model UpdateBuildpacknewUploadfinishResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: update
 * Summary: update
 */
async function updateBuildpacknewUploadfinish(request: UpdateBuildpacknewUploadfinishRequest): UpdateBuildpacknewUploadfinishResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateBuildpacknewUploadfinishEx(request, headers, runtime);
}

/**
 * Description: update
 * Summary: update
 */
async function updateBuildpacknewUploadfinishEx(request: UpdateBuildpacknewUploadfinishRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateBuildpacknewUploadfinishResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpacknew.uploadfinish.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateBuildpacknewRequest = {
  authToken?: string(name='auth_token'),
  // available_tenant_names
  availableTenantNames?: [ string ](name='available_tenant_names'),
  // buildpack_id
  buildpackId?: string(name='buildpack_id'),
  // buildpack_params
  buildpackParams?: [ BuildpackParamTemplate ](name='buildpack_params'),
  // contactInfo
  contactInfo?: string(name='contact_info'),
  // description
  description?: string(name='description'),
  // envParams
  envParams?: [ BuildpackParamTemplate ](name='env_params'),
  // fullVersion
  fullVersion?: string(name='full_version'),
  // id
  id?: string(name='id'),
  // scope
  scope?: string(name='scope'),
  // status
  status?: string(name='status'),
  // supportedOs
  supportedOs?: [ long ](name='supported_os'),
  // supported_regions
  supportedRegions?: [ BuildpackRegionRelation ](name='supported_regions'),
  // techstack
  techstack?: Techstack(name='techstack'),
  // techstack_id
  techstackId?: string(name='techstack_id'),
  // BuildCommandParams
  buildCommandParams?: [ BuildCommandParams ](name='build_command_params'),
  // creator
  creator?: UserDTO(name='creator'),
  // publisher
  publisher?: UserDTO(name='publisher'),
  // originType
  originType?: string(name='origin_type'),
  // appServiceCount
  appServiceCount?: long(name='app_service_count'),
  // debugMode
  debugMode?: boolean(name='debug_mode'),
  // majorVersion
  majorVersion?: long(name='major_version'),
  // minorVersion
  minorVersion?: long(name='minor_version'),
  // patchVersion
  patchVersion?: long(name='patch_version'),
  // buildCommand
  buildCommand?: string(name='build_command'),
  // createdFrom
  createdFrom?: string(name='created_from'),
  // publicationTime
  publicationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='publication_time'),
  // creationChain
  creationChain?: [ string ](name='creation_chain'),
  // extraInfo
  extraInfo?: string(name='extra_info'),
  // depracationNote
  depracationNote?: string(name='depracation_note'),
  // industryLabel
  industryLabel?: string(name='industry_label'),
  // creationTime
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='creation_time'),
  // modificationTime
  modificationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modification_time'),
}

model UpdateBuildpacknewResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // buildpack_id
  buildpackId?: string(name='buildpack_id'),
  // upload_endpoints
  uploadEndpoints?: [ UploadEndpoint ](name='upload_endpoints'),
}

/**
 * Description: update
 * Summary: update
 */
async function updateBuildpacknew(request: UpdateBuildpacknewRequest): UpdateBuildpacknewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateBuildpacknewEx(request, headers, runtime);
}

/**
 * Description: update
 * Summary: update
 */
async function updateBuildpacknewEx(request: UpdateBuildpacknewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateBuildpacknewResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpacknew.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBuildpacknewRequest = {
  authToken?: string(name='auth_token'),
  // availableTenantNames
  availableTenantNames?: [ string ](name='available_tenant_names'),
  // buildpackParams
  buildpackParams?: [ BuildpackParamTemplate ](name='buildpack_params'),
  // buildCommand
  buildCommand?: string(name='build_command'),
  // buildCommandParams
  buildCommandParams?: [ BuildCommandParams ](name='build_command_params'),
  // contact_info
  // 
  contactInfo?: string(name='contact_info'),
  // debug_mode
  // 
  debugMode?: boolean(name='debug_mode'),
  // description
  description?: string(name='description'),
  // full_version
  // 
  fullVersion?: string(name='full_version'),
  // major_version
  // 
  majorVersion?: long(name='major_version'),
  // minor_version
  // 
  minorVersion?: long(name='minor_version'),
  // patch_version
  // 
  patchVersion?: long(name='patch_version'),
  // scope
  // 
  scope?: string(name='scope'),
  // StorageUploadEndpoint
  storageUploadEndpoints?: string(name='storage_upload_endpoints'),
  // supported_os
  // 
  supportedOs?: [ long ](name='supported_os'),
  // supported_regions
  // 
  supportedRegions?: [ BuildpackRegionRelation ](name='supported_regions'),
  // techstack_id
  // 
  techstackId?: long(name='techstack_id'),
  // techstack
  techstack?: Techstack(name='techstack'),
  // status
  status?: string(name='status'),
  // id
  id?: string(name='id'),
}

model CreateBuildpacknewResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // buildpack_id
  // 
  buildpackId?: string(name='buildpack_id'),
  // upload_endpoints
  // 
  uploadEndpoints?: [ UploadEndpoint ](name='upload_endpoints'),
}

/**
 * Description: 创建技术栈
 * Summary: 创建技术栈
 */
async function createBuildpacknew(request: CreateBuildpacknewRequest): CreateBuildpacknewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBuildpacknewEx(request, headers, runtime);
}

/**
 * Description: 创建技术栈
 * Summary: 创建技术栈
 */
async function createBuildpacknewEx(request: CreateBuildpacknewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBuildpacknewResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpacknew.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OnlineBuildpackRequest = {
  authToken?: string(name='auth_token'),
  // buildpackId
  id?: [ string ](name='id'),
}

model OnlineBuildpackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 发布一个技术栈
 * Summary: 发布一个技术栈
 */
async function onlineBuildpack(request: OnlineBuildpackRequest): OnlineBuildpackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return onlineBuildpackEx(request, headers, runtime);
}

/**
 * Description: 发布一个技术栈
 * Summary: 发布一个技术栈
 */
async function onlineBuildpackEx(request: OnlineBuildpackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OnlineBuildpackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.buildpack.online', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateConfigGlobalRequest = {
  authToken?: string(name='auth_token'),
  // 数据保密等级
  dataLevel?: string(name='data_level'),
  // 参数描述
  desc?: string(name='desc'),
  // 参数名
  key?: string(name='key'),
  // 参数版本
  paramVersion?: long(name='param_version'),
  // 该参数属于哪个 scope
  scope?: string(name='scope'),
  // 该参数在该 scope 中的 id
  scopeId?: string(name='scope_id'),
  // 参数类型
  type?: string(name='type'),
  // 参数值
  value?: string(name='value'),
}

model CreateConfigGlobalResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 创建的全局参数 id
  globalParamId?: string(name='global_param_id'),
}

/**
 * Description: 创建一个全局参数
 * Summary: 创建一个全局参数
 */
async function createConfigGlobal(request: CreateConfigGlobalRequest): CreateConfigGlobalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createConfigGlobalEx(request, headers, runtime);
}

/**
 * Description: 创建一个全局参数
 * Summary: 创建一个全局参数
 */
async function createConfigGlobalEx(request: CreateConfigGlobalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConfigGlobalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.global.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteConfigGlobalRequest = {
  authToken?: string(name='auth_token'),
  // 要删除的全局参数 id
  globalParamId?: string(name='global_param_id'),
}

model DeleteConfigGlobalResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除一个全局参数
 * Summary: 删除一个全局参数
 */
async function deleteConfigGlobal(request: DeleteConfigGlobalRequest): DeleteConfigGlobalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteConfigGlobalEx(request, headers, runtime);
}

/**
 * Description: 删除一个全局参数
 * Summary: 删除一个全局参数
 */
async function deleteConfigGlobalEx(request: DeleteConfigGlobalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteConfigGlobalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.global.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateConfigGlobalRequest = {
  authToken?: string(name='auth_token'),
  // 数据保密等级
  dataLevel?: string(name='data_level'),
  // 参数描述
  desc?: string(name='desc'),
  // 全局参数 id
  id?: string(name='id'),
  // 参数名
  key?: string(name='key'),
  // 版本
  paramVersion?: long(name='param_version'),
  // 该参数属于哪个 scope
  scope?: string(name='scope'),
  // 该参数在该 scope 中的 id
  scopeId?: string(name='scope_id'),
  // 参数类型
  type?: string(name='type'),
  // 参数值
  value?: string(name='value'),
}

model UpdateConfigGlobalResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新指定的全局参数
 * Summary: 更新指定的全局参数
 */
async function updateConfigGlobal(request: UpdateConfigGlobalRequest): UpdateConfigGlobalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateConfigGlobalEx(request, headers, runtime);
}

/**
 * Description: 更新指定的全局参数
 * Summary: 更新指定的全局参数
 */
async function updateConfigGlobalEx(request: UpdateConfigGlobalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateConfigGlobalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.global.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConfigGlobalRequest = {
  authToken?: string(name='auth_token'),
  // 模板参数保密级别
  dataLevel?: string(name='data_level'),
  // 参数名
  key?: string(name='key'),
  // 排序规则数组，默认为 UTC_MODIFIED_DESC，即 根据修改时间降序排序
  orders?: [ string ](name='orders'),
  // 当前页码，从1开始，默认为1
  pageNum?: long(name='page_num'),
  // 分页大小，默认为10
  pageSize?: long(name='page_size'),
  // 根据参数类型进行查询
  paramType?: string(name='param_type'),
  // 查询类型，支持精准查询、模糊查询、前缀模糊查询，这里默认为模糊查询；查询类型针对字段 key
  queryType?: string(name='query_type'),
  // 该参数属于哪个 scope，可以在多个 scope 中查询
  scopes?: [ string ](name='scopes'),
  // 该参数在该 scope 中的 id
  scopeId?: string(name='scope_id'),
}

model QueryConfigGlobalResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 符合条件的全局参数列表
  data?: [ GlobalParam ](name='data'),
  // 当前页
  pageNum?: long(name='page_num'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 记录总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 根据条件查询符合条件的全局参数
 * Summary: 根据条件查询符合条件的全局参数
 */
async function queryConfigGlobal(request: QueryConfigGlobalRequest): QueryConfigGlobalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConfigGlobalEx(request, headers, runtime);
}

/**
 * Description: 根据条件查询符合条件的全局参数
 * Summary: 根据条件查询符合条件的全局参数
 */
async function queryConfigGlobalEx(request: QueryConfigGlobalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConfigGlobalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.global.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetConfigGlobalRequest = {
  authToken?: string(name='auth_token'),
  // 要获取的全局参数 id
  globalParamId?: string(name='global_param_id'),
}

model GetConfigGlobalResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 获取到的全局参数
  data?: GlobalParam(name='data'),
}

/**
 * Description: 获取单个全局参数
 * Summary: 获取单个全局参数
 */
async function getConfigGlobal(request: GetConfigGlobalRequest): GetConfigGlobalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getConfigGlobalEx(request, headers, runtime);
}

/**
 * Description: 获取单个全局参数
 * Summary: 获取单个全局参数
 */
async function getConfigGlobalEx(request: GetConfigGlobalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetConfigGlobalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.global.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateConfigAppRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  appName?: string(name='app_name'),
  // 数据保密等级
  dataLevel?: string(name='data_level'),
  // 参数描述
  desc?: string(name='desc'),
  // 参数名
  key?: string(name='key'),
  // 版本
  paramVersion?: long(name='param_version'),
  // 该参数属于哪个 scope
  scope?: string(name='scope'),
  // 该参数在该 scope 中的 id
  scopeId?: string(name='scope_id'),
  // 参数类型
  type?: string(name='type'),
  // 参数值
  value?: string(name='value'),
}

model CreateConfigAppResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用参数 id
  appParamId?: string(name='app_param_id'),
}

/**
 * Description: 创建一个应用参数
 * Summary: 创建一个应用参数
 */
async function createConfigApp(request: CreateConfigAppRequest): CreateConfigAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createConfigAppEx(request, headers, runtime);
}

/**
 * Description: 创建一个应用参数
 * Summary: 创建一个应用参数
 */
async function createConfigAppEx(request: CreateConfigAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConfigAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.app.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteConfigAppRequest = {
  authToken?: string(name='auth_token'),
  // 要删除的应用参数 id
  appParamId?: string(name='app_param_id'),
}

model DeleteConfigAppResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除一个应用参数
 * Summary: 删除一个应用参数
 */
async function deleteConfigApp(request: DeleteConfigAppRequest): DeleteConfigAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteConfigAppEx(request, headers, runtime);
}

/**
 * Description: 删除一个应用参数
 * Summary: 删除一个应用参数
 */
async function deleteConfigAppEx(request: DeleteConfigAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteConfigAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.app.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateConfigAppRequest = {
  authToken?: string(name='auth_token'),
  // 数据保密等级
  dataLevel?: string(name='data_level'),
  // 参数描述
  desc?: string(name='desc'),
  // 应用参数 id
  id?: string(name='id'),
  // 参数名
  key?: string(name='key'),
  // 版本
  paramVersion?: long(name='param_version'),
  // 该参数属于哪个 scope
  scope?: string(name='scope'),
  // 该参数在该 scope 中的 id
  scopeId?: string(name='scope_id'),
  // 参数类型
  type?: string(name='type'),
  // 参数值
  value?: string(name='value'),
}

model UpdateConfigAppResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新指定的应用参数
 * Summary: 更新指定的应用参数
 */
async function updateConfigApp(request: UpdateConfigAppRequest): UpdateConfigAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateConfigAppEx(request, headers, runtime);
}

/**
 * Description: 更新指定的应用参数
 * Summary: 更新指定的应用参数
 */
async function updateConfigAppEx(request: UpdateConfigAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateConfigAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.app.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetConfigAppRequest = {
  authToken?: string(name='auth_token'),
  // 应用参数 id
  appParamId?: string(name='app_param_id'),
}

model GetConfigAppResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 获取到的应用参数
  data?: AppParam(name='data'),
}

/**
 * Description: 获取指定的应用参数
 * Summary: 获取指定的应用参数
 */
async function getConfigApp(request: GetConfigAppRequest): GetConfigAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getConfigAppEx(request, headers, runtime);
}

/**
 * Description: 获取指定的应用参数
 * Summary: 获取指定的应用参数
 */
async function getConfigAppEx(request: GetConfigAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetConfigAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.app.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConfigAppRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  appName?: string(name='app_name'),
  // 模板参数保密级别
  dataLevel?: string(name='data_level'),
  // 参数名
  key?: string(name='key'),
  // 排序规则数组，默认为 UTC_CREATED_DESC，即 根创建时间降序排序
  orders?: [ string ](name='orders'),
  // 当前页码，从1开始，默认为1
  pageNum?: long(name='page_num'),
  // 分页大小，默认为10
  pageSize?: long(name='page_size'),
  // 根据参数类型进行查询
  paramType?: string(name='param_type'),
  // 查询类型，支持精准查询、模糊查询、前缀模糊查询，这里默认为模糊查询；查询类型针对字段 app_name, key
  queryType?: string(name='query_type'),
  // 该参数属于哪个 scope ，是个在多个 scope 中查询
  scopes?: [ string ](name='scopes'),
  // 该参数在该 scope 中的 id
  scopeId?: string(name='scope_id'),
}

model QueryConfigAppResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 符合条件的应用参数列表
  data?: [ AppParam ](name='data'),
  // 当前页
  pageNum?: long(name='page_num'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 记录总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询符合条件的应用参数
 * Summary: 查询符合条件的应用参数
 */
async function queryConfigApp(request: QueryConfigAppRequest): QueryConfigAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConfigAppEx(request, headers, runtime);
}

/**
 * Description: 查询符合条件的应用参数
 * Summary: 查询符合条件的应用参数
 */
async function queryConfigAppEx(request: QueryConfigAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConfigAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.app.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveConfigTemplateRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  appName?: string(name='app_name'),
  // 描述
  comment?: string(name='comment'),
  // 参数定义列表
  params?: [ TemplateParamDef ](name='params'),
  // 参数模板 id
  tplId?: string(name='tpl_id'),
}

model SaveConfigTemplateResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用参数模板 id
  tplId?: string(name='tpl_id'),
}

/**
 * Description: 保存一个应用参数模板草稿的修改，后端会将 state 置为 DRAFT，不会生成 version（一直为空）；此时该草稿记录可以反复被修改；点击保存时，如果参数模板还没创建（tpl_id 为空），那么后端会创建一个，如果已经存在参数模板草稿，那么更新该参数模板；
 * Summary: 将一个应用参数模板保存为草稿
 */
async function saveConfigTemplate(request: SaveConfigTemplateRequest): SaveConfigTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveConfigTemplateEx(request, headers, runtime);
}

/**
 * Description: 保存一个应用参数模板草稿的修改，后端会将 state 置为 DRAFT，不会生成 version（一直为空）；此时该草稿记录可以反复被修改；点击保存时，如果参数模板还没创建（tpl_id 为空），那么后端会创建一个，如果已经存在参数模板草稿，那么更新该参数模板；
 * Summary: 将一个应用参数模板保存为草稿
 */
async function saveConfigTemplateEx(request: SaveConfigTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveConfigTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.template.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateConfigTemplateRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  appName?: string(name='app_name'),
  // 描述
  comment?: string(name='comment'),
  // 参数定义列表
  params?: [ TemplateParamDef ](name='params'),
  // 参数模板 id
  tplId?: string(name='tpl_id'),
}

model CreateConfigTemplateResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用参数模板 id
  tplId?: string(name='tpl_id'),
}

/**
 * Description: 发布一个应用参数模板，后端会将  state 置为 RELEASE，并且自动生成 version；此时该版本就已经固定，不能修改该条记录；点击发布时，如果之前没创建过参数模板草稿（tpl_id 为空），那么直接调用创建接口，如果当前参数模板是在草稿上发布的，那么调用更新接口，将 state 置为 RELEASE，并自动生成 version；
 * Summary: 发布一个应用参数模板
 */
async function createConfigTemplate(request: CreateConfigTemplateRequest): CreateConfigTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createConfigTemplateEx(request, headers, runtime);
}

/**
 * Description: 发布一个应用参数模板，后端会将  state 置为 RELEASE，并且自动生成 version；此时该版本就已经固定，不能修改该条记录；点击发布时，如果之前没创建过参数模板草稿（tpl_id 为空），那么直接调用创建接口，如果当前参数模板是在草稿上发布的，那么调用更新接口，将 state 置为 RELEASE，并自动生成 version；
 * Summary: 发布一个应用参数模板
 */
async function createConfigTemplateEx(request: CreateConfigTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConfigTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.template.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PullConfigTemplateRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  appName?: string(name='app_name'),
  // RELEAES：获取最新的、已经发布的参数模板；
  // DRAFT：获取最新的参数模板草稿；
  // 不指定：获取已存在的最新的参数模板，不区分已发布或者草稿态；
  state?: string(name='state'),
}

model PullConfigTemplateResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用参数模板
  data?: AppConfigTemplate(name='data'),
}

/**
 * Description: 获取某个应用最新版本的应用参数模板
 * Summary: 获取某个应用最新版本的应用参数模板
 */
async function pullConfigTemplate(request: PullConfigTemplateRequest): PullConfigTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pullConfigTemplateEx(request, headers, runtime);
}

/**
 * Description: 获取某个应用最新版本的应用参数模板
 * Summary: 获取某个应用最新版本的应用参数模板
 */
async function pullConfigTemplateEx(request: PullConfigTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PullConfigTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.template.pull', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteConfigTemplatedraftRequest = {
  authToken?: string(name='auth_token'),
  // 要删除的应用参数模板 id
  tplId?: string(name='tpl_id'),
}

model DeleteConfigTemplatedraftResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除一个应用参数模板 草稿，后端判断是否为草稿状态，如果不是，删除失败
 * Summary: 删除一个应用参数模板草稿
 */
async function deleteConfigTemplatedraft(request: DeleteConfigTemplatedraftRequest): DeleteConfigTemplatedraftResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteConfigTemplatedraftEx(request, headers, runtime);
}

/**
 * Description: 删除一个应用参数模板 草稿，后端判断是否为草稿状态，如果不是，删除失败
 * Summary: 删除一个应用参数模板草稿
 */
async function deleteConfigTemplatedraftEx(request: DeleteConfigTemplatedraftRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteConfigTemplatedraftResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.templatedraft.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetConfigTemplateRequest = {
  authToken?: string(name='auth_token'),
  // 应用参数模板 id
  tplId?: string(name='tpl_id'),
}

model GetConfigTemplateResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用参数模板
  data?: AppConfigTemplate(name='data'),
}

/**
 * Description: 获取某个指定的应用参数模板
 * Summary: 获取某个指定的应用参数模板
 */
async function getConfigTemplate(request: GetConfigTemplateRequest): GetConfigTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getConfigTemplateEx(request, headers, runtime);
}

/**
 * Description: 获取某个指定的应用参数模板
 * Summary: 获取某个指定的应用参数模板
 */
async function getConfigTemplateEx(request: GetConfigTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetConfigTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.template.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryConfigTemplateRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  appName?: string(name='app_name'),
  // 排序规则数组，默认为 UTC_MODIFIED_DESC，即 根据修改时间降序排序
  orders?: [ string ](name='orders'),
  // 当前页码，从1开始，默认为1
  pageNum?: long(name='page_num'),
  // 分页大小，默认为10
  pageSize?: long(name='page_size'),
  // 查询类型，支持精准查询、模糊查询、前缀模糊查询，这里默认为模糊查询；查询类型针对字段 app_name
  queryType?: string(name='query_type'),
  // 模板状态，DRAFT 草稿，RELEASE 已发布，发布后才会生成 version，否则为空
  state?: string(name='state'),
  // 版本
  tplVersion?: string(name='tpl_version'),
}

model QueryConfigTemplateResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 符合条件的参数配置模板
  data?: [ AppConfigTemplate ](name='data'),
  // 当前页
  pageNum?: long(name='page_num'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 记录总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询符合条件的应用参数模板
 * Summary: 查询符合条件的应用参数模板
 */
async function queryConfigTemplate(request: QueryConfigTemplateRequest): QueryConfigTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryConfigTemplateEx(request, headers, runtime);
}

/**
 * Description: 查询符合条件的应用参数模板
 * Summary: 查询符合条件的应用参数模板
 */
async function queryConfigTemplateEx(request: QueryConfigTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryConfigTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.template.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecConfigParseRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  appName?: string(name='app_name'),
  // 参数定义列表
  params?: [ TemplateParamDef ](name='params'),
  // 工作空间组 id
  workspaceGroupId?: string(name='workspace_group_id'),
  // 工作空间 id
  workspaceId?: string(name='workspace_id'),
}

model ExecConfigParseResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 渲染后的参数列表
  data?: [ RenderParam ](name='data'),
}

/**
 * Description: 渲染一个指定的参数列表，包含渲染上下文和待解析的参数，其中 workspace_group_id 和 workspace_id 至少填一个，后端会做校验；
 * Summary: 渲染一个指定的参数列表
 */
async function execConfigParse(request: ExecConfigParseRequest): ExecConfigParseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execConfigParseEx(request, headers, runtime);
}

/**
 * Description: 渲染一个指定的参数列表，包含渲染上下文和待解析的参数，其中 workspace_group_id 和 workspace_id 至少填一个，后端会做校验；
 * Summary: 渲染一个指定的参数列表
 */
async function execConfigParseEx(request: ExecConfigParseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecConfigParseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.parse.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateConfigGlobalRequest = {
  authToken?: string(name='auth_token'),
  // 要创建的全局参数列表
  items?: [ GlobalParam ](name='items'),
}

model BatchcreateConfigGlobalResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量创建全局参数
 * Summary: 批量创建全局参数
 */
async function batchcreateConfigGlobal(request: BatchcreateConfigGlobalRequest): BatchcreateConfigGlobalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateConfigGlobalEx(request, headers, runtime);
}

/**
 * Description: 批量创建全局参数
 * Summary: 批量创建全局参数
 */
async function batchcreateConfigGlobalEx(request: BatchcreateConfigGlobalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateConfigGlobalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.global.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateConfigAppRequest = {
  authToken?: string(name='auth_token'),
  // 要创建的应用参数列表
  items?: [ AppParam ](name='items'),
}

model BatchcreateConfigAppResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量创建应用参数
 * Summary: 批量创建应用参数
 */
async function batchcreateConfigApp(request: BatchcreateConfigAppRequest): BatchcreateConfigAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateConfigAppEx(request, headers, runtime);
}

/**
 * Description: 批量创建应用参数
 * Summary: 批量创建应用参数
 */
async function batchcreateConfigAppEx(request: BatchcreateConfigAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateConfigAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.app.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetConfigSitetreeRequest = {
  authToken?: string(name='auth_token'),
}

model GetConfigSitetreeResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 当前租户下的所有 region 列表
  data?: [ RegionView ](name='data'),
}

/**
 * Description: 获取当前租户下的站点管理员视角的树形结构：区域(region)=>机房(az)
 * Summary: 获取当前租户下的站点管理员视角的树形结构
 */
async function getConfigSitetree(request: GetConfigSitetreeRequest): GetConfigSitetreeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getConfigSitetreeEx(request, headers, runtime);
}

/**
 * Description: 获取当前租户下的站点管理员视角的树形结构：区域(region)=>机房(az)
 * Summary: 获取当前租户下的站点管理员视角的树形结构
 */
async function getConfigSitetreeEx(request: GetConfigSitetreeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetConfigSitetreeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.sitetree.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetConfigTenanttreeRequest = {
  authToken?: string(name='auth_token'),
}

model GetConfigTenanttreeResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 当前租户下的所有 workspaceGroup 列表
  data?: [ WorkspaceGroupView ](name='data'),
}

/**
 * Description: 获取当前租户下的租户管理员视角的树形结构：工作空间组(workspaceGroup)=>工作空间(workspace)=>部署单元(cell)
 * Summary: 获取当前租户下的租户管理员视角的树形结构
 */
async function getConfigTenanttree(request: GetConfigTenanttreeRequest): GetConfigTenanttreeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getConfigTenanttreeEx(request, headers, runtime);
}

/**
 * Description: 获取当前租户下的租户管理员视角的树形结构：工作空间组(workspaceGroup)=>工作空间(workspace)=>部署单元(cell)
 * Summary: 获取当前租户下的租户管理员视角的树形结构
 */
async function getConfigTenanttreeEx(request: GetConfigTenanttreeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetConfigTenanttreeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.tenanttree.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExistConfigAppRequest = {
  authToken?: string(name='auth_token'),
  // 应用名称
  appName?: string(name='app_name'),
  // 应用参数名称，同一个 appName + scope + scopeId 下不能有同名的应用参数
  key?: string(name='key'),
  // 作用域 id 数组，比如作用域类型（type）是 workspace，那么 scopeId 就是 workspace 的 id
  scopeIds?: [ string ](name='scope_ids'),
  // 作用域类型
  type?: string(name='type'),
}

model ExistConfigAppResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用参数是否已存在的数组，和入参顺序一一对应
  data?: [ boolean ](name='data'),
}

/**
 * Description: 检查应用参数是否已存在
 * Summary: 检查应用参数是否已存在
 */
async function existConfigApp(request: ExistConfigAppRequest): ExistConfigAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return existConfigAppEx(request, headers, runtime);
}

/**
 * Description: 检查应用参数是否已存在
 * Summary: 检查应用参数是否已存在
 */
async function existConfigAppEx(request: ExistConfigAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExistConfigAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.app.exist', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExistConfigGlobalRequest = {
  authToken?: string(name='auth_token'),
  // 全局参数名称，同一个 scope + scopeId 下不能有同名的全局参数
  key?: string(name='key'),
  // 作用域 id 数组，比如作用域类型（type）是 workspace，那么 scopeId 就是 workspace 的 id
  scopeIds?: [ string ](name='scope_ids'),
  // 作用域类型
  type?: string(name='type'),
}

model ExistConfigGlobalResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用参数是否已存在的数组，和入参顺序一一对应
  data?: [ boolean ](name='data'),
}

/**
 * Description: 检查全局参数是否已存在
 * Summary: 检查全局参数是否已存在
 */
async function existConfigGlobal(request: ExistConfigGlobalRequest): ExistConfigGlobalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return existConfigGlobalEx(request, headers, runtime);
}

/**
 * Description: 检查全局参数是否已存在
 * Summary: 检查全局参数是否已存在
 */
async function existConfigGlobalEx(request: ExistConfigGlobalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExistConfigGlobalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.config.global.exist', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListWorkspacegroupRequest = {
  authToken?: string(name='auth_token'),
  // 目标租户名称
  tenant?: string(name='tenant'),
}

model ListWorkspacegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 环境列表
  workspaceGroups?: [ WorkspaceGroup ](name='workspace_groups'),
}

/**
 * Description: 列出指定租户下所有环境
 * Summary: 列出指定租户下所有环境
 */
async function listWorkspacegroup(request: ListWorkspacegroupRequest): ListWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 列出指定租户下所有环境
 * Summary: 列出指定租户下所有环境
 */
async function listWorkspacegroupEx(request: ListWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.workspacegroup.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetWorkspacegroupRequest = {
  authToken?: string(name='auth_token'),
  // 目标租户名称
  tenant?: string(name='tenant'),
  // 目标环境名称
  workspaceGroup?: string(name='workspace_group'),
}

model GetWorkspacegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 环境名称
  id?: string(name='id'),
  // 环境显示名称
  name?: string(name='name'),
  // 环境状态
  status?: string(name='status'),
  // 租户名称
  tenant?: string(name='tenant'),
  // 工作空间名称列表
  workspaces?: [ string ](name='workspaces'),
}

/**
 * Description: 查询指定环境信息
 * Summary: 查询指定环境信息
 */
async function getWorkspacegroup(request: GetWorkspacegroupRequest): GetWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 查询指定环境信息
 * Summary: 查询指定环境信息
 */
async function getWorkspacegroupEx(request: GetWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.workspacegroup.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCellRequest = {
  authToken?: string(name='auth_token'),
  // 目标租户名称
  tenant?: string(name='tenant'),
  // 目标工作空间名称
  workspace?: string(name='workspace'),
  // 目标环境名称
  workspaceGroup?: string(name='workspace_group'),
}

model QueryCellResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 部署单元列表
  cells?: [ Cell ](name='cells'),
}

/**
 * Description: 查询部署单元列表
 * Summary: 查询部署单元列表
 */
async function queryCell(request: QueryCellRequest): QueryCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCellEx(request, headers, runtime);
}

/**
 * Description: 查询部署单元列表
 * Summary: 查询部署单元列表
 */
async function queryCellEx(request: QueryCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cell.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryWorkspaceDeltaRequest = {
  authToken?: string(name='auth_token'),
  // 结束时间点
  endTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
  // 开始时间点
  startTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
}

model QueryWorkspaceDeltaResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 发生变化的workspace列表
  workspaceDeltaInfos?: [ WorkspaceDeltaInfo ](name='workspace_delta_infos'),
}

/**
 * Description: 查询环境增量统计信息
 * Summary: 查询环境增量统计信息
 */
async function queryWorkspaceDelta(request: QueryWorkspaceDeltaRequest): QueryWorkspaceDeltaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryWorkspaceDeltaEx(request, headers, runtime);
}

/**
 * Description: 查询环境增量统计信息
 * Summary: 查询环境增量统计信息
 */
async function queryWorkspaceDeltaEx(request: QueryWorkspaceDeltaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryWorkspaceDeltaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.workspace.delta.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateWorkspacegroupRequest = {
  authToken?: string(name='auth_token'),
  // 工作空间组显示名称。
  displayName?: string(name='display_name'),
  // 域名后缀。
  domainSuffix?: string(name='domain_suffix'),
  // 工作空间组唯一标识。
  name?: string(name='name'),
  // 发布部署模式。
  releaseMode?: string(name='release_mode'),
  // 包含工作空间列表。
  workspaces?: [ string ](name='workspaces'),
}

model CreateWorkspacegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // workspaceGroupName
  data?: string(name='data'),
}

/**
 * Description: 创建工作空间组。
 * Summary: 创建工作空间组
 */
async function createWorkspacegroup(request: CreateWorkspacegroupRequest): CreateWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 创建工作空间组。
 * Summary: 创建工作空间组
 */
async function createWorkspacegroupEx(request: CreateWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.workspacegroup.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryWorkspacegroupRequest = {
  authToken?: string(name='auth_token'),
  // 环境组名称（唯一标识）
  name?: string(name='name'),
}

model QueryWorkspacegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 工作空间组列表。
  workspaceGroups?: [ WorkspaceGroupInfo ](name='workspace_groups'),
}

/**
 * Description: 查询环境组详细信息
 * Summary: 查询环境组详细信息
 */
async function queryWorkspacegroup(request: QueryWorkspacegroupRequest): QueryWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 查询环境组详细信息
 * Summary: 查询环境组详细信息
 */
async function queryWorkspacegroupEx(request: QueryWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.workspacegroup.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteWorkspacegroupRequest = {
  authToken?: string(name='auth_token'),
  // 工作空间组名称(唯一标识)。
  name?: string(name='name'),
}

model DeleteWorkspacegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除指定工作空间组。
 * Summary: 删除指定工作空间组。
 */
async function deleteWorkspacegroup(request: DeleteWorkspacegroupRequest): DeleteWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 删除指定工作空间组。
 * Summary: 删除指定工作空间组。
 */
async function deleteWorkspacegroupEx(request: DeleteWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.workspacegroup.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSingleworkspaceRequest = {
  authToken?: string(name='auth_token'),
  // 所属工作空间唯一标识
  workspace?: string(name='workspace'),
}

model GetSingleworkspaceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 创建时间。
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='created_time'),
  // workspace工作空间的显示名称
  displayName?: string(name='display_name'),
  // workspace名称。
  id?: string(name='id'),
  // 最近修改时间。
  modifiedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='modified_time'),
  // workspace显示名称。
  name?: string(name='name'),
  // 网络类型。
  networkType?: string(name='network_type'),
  // region id
  region?: string(name='region'),
  // 所属租户信息。
  tenant?: string(name='tenant'),
  // 工作空间类型：标准工作空间；单元化工作空间
  type?: string(name='type'),
  // vpc iaas id
  vpcIaasId?: string(name='vpc_iaas_id'),
  // workspace所属环境名称[可能不存在]。
  workspaceGroup?: string(name='workspace_group'),
  // workspace对应的zoneId列表。
  zones?: [ string ](name='zones'),
}

/**
 * Description: 查询workspace信息(V2)。
 * Summary: 查询workspace信息(V2)。
 */
async function getSingleworkspace(request: GetSingleworkspaceRequest): GetSingleworkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSingleworkspaceEx(request, headers, runtime);
}

/**
 * Description: 查询workspace信息(V2)。
 * Summary: 查询workspace信息(V2)。
 */
async function getSingleworkspaceEx(request: GetSingleworkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSingleworkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.singleworkspace.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSingleworkspacegroupRequest = {
  authToken?: string(name='auth_token'),
  // 环境名称。
  name?: string(name='name'),
}

model GetSingleworkspacegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 工作空间组标识。
  identity?: string(name='identity'),
  // 工作空间组显示名称。
  name?: string(name='name'),
  // 部署模式。
  releaseMode?: string(name='release_mode'),
  // 域名后缀。
  domainSuffix?: string(name='domain_suffix'),
  // 包含工作空间名称列表。
  workspaces?: [ string ](name='workspaces'),
}

/**
 * Description: 查询指定环境信息。
 * Summary: 查询指定环境信息。
 */
async function getSingleworkspacegroup(request: GetSingleworkspacegroupRequest): GetSingleworkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSingleworkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 查询指定环境信息。
 * Summary: 查询指定环境信息。
 */
async function getSingleworkspacegroupEx(request: GetSingleworkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSingleworkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.singleworkspacegroup.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListCellRequest = {
  authToken?: string(name='auth_token'),
  // 目标工作空间名称。
  workspace?: string(name='workspace'),
  // 目标环境名称。
  workspaceGroup?: string(name='workspace_group'),
}

model ListCellResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 部署单元列表。
  cells?: [ Cell ](name='cells'),
}

/**
 * Description: 查询部署单元列表。
 * Summary: 查询部署单元列表。
 */
async function listCell(request: ListCellRequest): ListCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listCellEx(request, headers, runtime);
}

/**
 * Description: 查询部署单元列表。
 * Summary: 查询部署单元列表。
 */
async function listCellEx(request: ListCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cell.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSingleworkspaceRequest = {
  authToken?: string(name='auth_token'),
  // workspace 显示名称
  displayName?: string(name='display_name'),
  // workspace 唯一标识符
  name?: string(name='name'),
  // VPC ｜ Classic
  networkType?: string(name='network_type'),
  // 地域
  region?: string(name='region'),
  // 枚举值：
  //   标准工作空间NORMAL;
  //   单元化工作空间UNIT
  type?: string(name='type'),
  // 可用区
  zones?: [ string ](name='zones'),
}

model CreateSingleworkspaceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // workspace id
  workspaceId?: string(name='workspace_id'),
}

/**
 * Description: 创建workspace信息(V2)
 * Summary: 创建workspace信息(V2)
 */
async function createSingleworkspace(request: CreateSingleworkspaceRequest): CreateSingleworkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSingleworkspaceEx(request, headers, runtime);
}

/**
 * Description: 创建workspace信息(V2)
 * Summary: 创建workspace信息(V2)
 */
async function createSingleworkspaceEx(request: CreateSingleworkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSingleworkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.singleworkspace.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSingleworkspaceRequest = {
  authToken?: string(name='auth_token'),
  // workspace id
  workspaceId?: string(name='workspace_id'),
}

model DeleteSingleworkspaceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 删除是否成功
  success?: boolean(name='success'),
}

/**
 * Description: 删除workspace信息(V2)
 * Summary: 删除workspace信息(V2)
 */
async function deleteSingleworkspace(request: DeleteSingleworkspaceRequest): DeleteSingleworkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSingleworkspaceEx(request, headers, runtime);
}

/**
 * Description: 删除workspace信息(V2)
 * Summary: 删除workspace信息(V2)
 */
async function deleteSingleworkspaceEx(request: DeleteSingleworkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSingleworkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.singleworkspace.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateVpcRequest = {
  authToken?: string(name='auth_token'),
  // VPC所在的地域
  regionId?: string(name='region_id'),
  // 租户id
  tenantId?: string(name='tenant_id'),
  // 创建的VPC的ID
  vpcId?: string(name='vpc_id'),
  // 	
  // 所属环境id
  workspaceId?: string(name='workspace_id'),
  // vpc名称
  name?: string(name='name'),
}

model CreateVpcResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // id
  id?: string(name='id'),
}

/**
 * Description: 创建专有网络vpc
 * Summary: 创建专有网络vpc
 */
async function createVpc(request: CreateVpcRequest): CreateVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createVpcEx(request, headers, runtime);
}

/**
 * Description: 创建专有网络vpc
 * Summary: 创建专有网络vpc
 */
async function createVpcEx(request: CreateVpcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateVpcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.vpc.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateWorkspacegroupRequest = {
  authToken?: string(name='auth_token'),
  // 域名后缀。
  domainSuffix?: string(name='domain_suffix'),
  // workspacegroup名称，唯一标识一个环境。
  name?: string(name='name'),
  // workspacegroup显示名称。
  displayName?: string(name='display_name'),
  // 包含工作空间名称。
  workspaces?: [ string ](name='workspaces'),
}

model UpdateWorkspacegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新workspacegroup。
 * Summary: 更新workspacegroup。
 */
async function updateWorkspacegroup(request: UpdateWorkspacegroupRequest): UpdateWorkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateWorkspacegroupEx(request, headers, runtime);
}

/**
 * Description: 更新workspacegroup。
 * Summary: 更新workspacegroup。
 */
async function updateWorkspacegroupEx(request: UpdateWorkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateWorkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.workspacegroup.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSingleworkspaceRequest = {
  authToken?: string(name='auth_token'),
  // workspace 显示名称
  displayName?: string(name='display_name'),
  // VPC ｜ Classic
  networkType?: string(name='network_type'),
  // 地域id
  region?: string(name='region'),
  // 可用区id列表
  zones?: [ string ](name='zones'),
  // 环境唯一标识
  name?: string(name='name'),
}

model UpdateSingleworkspaceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 更新成功或失败
  success?: boolean(name='success'),
}

/**
 * Description: update workspace meta data
 * Summary: update workspace
 */
async function updateSingleworkspace(request: UpdateSingleworkspaceRequest): UpdateSingleworkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSingleworkspaceEx(request, headers, runtime);
}

/**
 * Description: update workspace meta data
 * Summary: update workspace
 */
async function updateSingleworkspaceEx(request: UpdateSingleworkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSingleworkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.singleworkspace.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListRegionRequest = {
  authToken?: string(name='auth_token'),
}

model ListRegionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // region list
  data?: [ RegionMeta ](name='data'),
}

/**
 * Description: list regions
 * Summary: list regions
 */
async function listRegion(request: ListRegionRequest): ListRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listRegionEx(request, headers, runtime);
}

/**
 * Description: list regions
 * Summary: list regions
 */
async function listRegionEx(request: ListRegionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRegionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.region.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListZoneRequest = {
  authToken?: string(name='auth_token'),
  // region identity
  region?: string(name='region'),
}

model ListZoneResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // zone list
  data?: [ Zone ](name='data'),
}

/**
 * Description: zone list
 * Summary: zone list
 */
async function listZone(request: ListZoneRequest): ListZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listZoneEx(request, headers, runtime);
}

/**
 * Description: zone list
 * Summary: zone list
 */
async function listZoneEx(request: ListZoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListZoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.zone.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCellgroupRequest = {
  authToken?: string(name='auth_token'),
  // 所属idc
  datacenter?: string(name='datacenter'),
  // 默认全局域
  defaultGzone?: string(name='default_gzone'),
  // 逻辑单元名称
  name?: string(name='name'),
  // 操作人
  operator?: string(name='operator'),
  // 逻辑单元类型
  type?: string(name='type'),
  // 所属环境组名称
  workspaceGroup?: string(name='workspace_group'),
}

model CreateCellgroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建逻辑单元
 * Summary: 创建逻辑单元
 */
async function createCellgroup(request: CreateCellgroupRequest): CreateCellgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCellgroupEx(request, headers, runtime);
}

/**
 * Description: 创建逻辑单元
 * Summary: 创建逻辑单元
 */
async function createCellgroupEx(request: CreateCellgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCellgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cellgroup.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteCellgroupRequest = {
  authToken?: string(name='auth_token'),
  // 逻辑单元名称
  name?: string(name='name'),
  // 所属环境名称
  workspaceGroup?: string(name='workspace_group'),
}

model DeleteCellgroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除逻辑单元
 * Summary: 删除逻辑单元
 */
async function deleteCellgroup(request: DeleteCellgroupRequest): DeleteCellgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteCellgroupEx(request, headers, runtime);
}

/**
 * Description: 删除逻辑单元
 * Summary: 删除逻辑单元
 */
async function deleteCellgroupEx(request: DeleteCellgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteCellgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cellgroup.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCellgroupRequest = {
  authToken?: string(name='auth_token'),
  // cell group 查询前缀
  namePrefix?: string(name='name_prefix'),
  // 所属环境名称
  workspaceGroup?: string(name='workspace_group'),
  // 逻辑单元名称
  name?: string(name='name'),
}

model QueryCellgroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 逻辑单元信息
  data?: [ CellGroup ](name='data'),
}

/**
 * Description: 查询逻辑单元
 * Summary: 查询逻辑单元
 */
async function queryCellgroup(request: QueryCellgroupRequest): QueryCellgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCellgroupEx(request, headers, runtime);
}

/**
 * Description: 查询逻辑单元
 * Summary: 查询逻辑单元
 */
async function queryCellgroupEx(request: QueryCellgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCellgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cellgroup.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateCellgroupDisasterinfoRequest = {
  authToken?: string(name='auth_token'),
  // 灾备信息
  disasterInfo?: [ DisasterInfo ](name='disaster_info'),
  // 逻辑单元名称
  name?: string(name='name'),
  // 操作人
  operator?: string(name='operator'),
  // 所属环境组名称
  workspaceGroup?: string(name='workspace_group'),
}

model UpdateCellgroupDisasterinfoResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 配置逻辑单元灾备信息
 * Summary: 配置逻辑单元灾备信息
 */
async function updateCellgroupDisasterinfo(request: UpdateCellgroupDisasterinfoRequest): UpdateCellgroupDisasterinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateCellgroupDisasterinfoEx(request, headers, runtime);
}

/**
 * Description: 配置逻辑单元灾备信息
 * Summary: 配置逻辑单元灾备信息
 */
async function updateCellgroupDisasterinfoEx(request: UpdateCellgroupDisasterinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateCellgroupDisasterinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cellgroup.disasterinfo.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDeploymentCellRequest = {
  authToken?: string(name='auth_token'),
  // 所属逻辑单元名称[单元化模式特有]
  // 当type为"RZone"或"CZone"时，为必填项
  cellGroup?: string(name='cell_group'),
  // 蓝绿着色信息[单元化模式特有]
  color?: string(name='color'),
  // 部署单元唯一标识
  identity?: string(name='identity'),
  // 是否灰度[单元化模式特有]
  isGray?: boolean(name='is_gray'),
  // 部署单元名称
  name?: string(name='name'),
  // 部署单元类型:
  // RZone, CZone,GZone,default
  type?: string(name='type'),
  // 权重[单元化模式特有]
  weight?: long(name='weight'),
  // 所属工作空间名称
  workspace?: string(name='workspace'),
  // 所属环境组名称
  workspaceGroup?: string(name='workspace_group'),
  // 所属机房名称
  zone?: string(name='zone'),
}

model CreateDeploymentCellResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建部署单元
 * Summary: 创建部署单元
 */
async function createDeploymentCell(request: CreateDeploymentCellRequest): CreateDeploymentCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDeploymentCellEx(request, headers, runtime);
}

/**
 * Description: 创建部署单元
 * Summary: 创建部署单元
 */
async function createDeploymentCellEx(request: CreateDeploymentCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDeploymentCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.deployment.cell.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDeploymentCellRequest = {
  authToken?: string(name='auth_token'),
  // 部署单元名称
  name?: string(name='name'),
  // 所属工作空间名称
  workspace?: string(name='workspace'),
}

model DeleteDeploymentCellResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除部署单元
 * Summary: 删除部署单元
 */
async function deleteDeploymentCell(request: DeleteDeploymentCellRequest): DeleteDeploymentCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDeploymentCellEx(request, headers, runtime);
}

/**
 * Description: 删除部署单元
 * Summary: 删除部署单元
 */
async function deleteDeploymentCellEx(request: DeleteDeploymentCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDeploymentCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.deployment.cell.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeploymentCellRequest = {
  authToken?: string(name='auth_token'),
  // 部署单元名称
  name?: string(name='name'),
  // 部署单元名称前缀
  namePrefix?: string(name='name_prefix'),
  // 所属工作空间名称
  workspace?: string(name='workspace'),
  // 所属环境组名称
  workspaceGroup?: string(name='workspace_group'),
}

model QueryDeploymentCellResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 部署单元列表
  data?: [ DeployCell ](name='data'),
}

/**
 * Description: 查询部署单元
 * Summary: 查询部署单元
 */
async function queryDeploymentCell(request: QueryDeploymentCellRequest): QueryDeploymentCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeploymentCellEx(request, headers, runtime);
}

/**
 * Description: 查询部署单元
 * Summary: 查询部署单元
 */
async function queryDeploymentCellEx(request: QueryDeploymentCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeploymentCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.deployment.cell.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDeploymentCellRequest = {
  authToken?: string(name='auth_token'),
  // 蓝绿着色信息
  color?: string(name='color'),
  // 是否灰度
  isGray?: boolean(name='is_gray'),
  // 部署单元名称
  name?: string(name='name'),
  // 权重
  weight?: long(name='weight'),
  // 所属工作空间名称
  workspace?: string(name='workspace'),
  // 所属环境组名称
  workspaceGroup?: string(name='workspace_group'),
}

model UpdateDeploymentCellResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新部署单元
 * Summary: 更新部署单元
 */
async function updateDeploymentCell(request: UpdateDeploymentCellRequest): UpdateDeploymentCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDeploymentCellEx(request, headers, runtime);
}

/**
 * Description: 更新部署单元
 * Summary: 更新部署单元
 */
async function updateDeploymentCellEx(request: UpdateDeploymentCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDeploymentCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.deployment.cell.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeploymentRequest = {
  authToken?: string(name='auth_token'),
  // 部署单包含的应用（服务）名称
  applicationName?: string(name='application_name'),
  // 部署单创建日期，采用UTC时间，按照ISO8601标准表示，格式为：YYYY-MM-DDThh:mm:ssZ
  creationTime?: string(name='creation_time'),
  // 部署单id
  operationId?: string(name='operation_id'),
  // 当前页码，默认为1
  pageNum?: integer(name='page_num'),
  // 分页大小，默认10
  pageSize?: integer(name='page_size'),
  // 
  // 部署单状态。取值列表：
  // INITING：初始化中；
  // INIT_FAILED：初始化失败；
  // INITED：初始化完成；
  // EXECUTING：执行中；
  // SUCCESS：执行成功；
  // FAILED：执行失败；
  // CANCELING：取消中；
  // CANCELED：已取消
  //                             
  //                         
  statuses?: [ string ](name='statuses'),
  // 精确部署单标题
  title?: string(name='title'),
}

model QueryDeploymentResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 批量查询部署单结果，以操作链的形式体现
  deployments?: [ OpsDeployment ](name='deployments'),
  // 当前页码
  pageNum?: integer(name='page_num'),
  // 分页大小
  pageSize?: integer(name='page_size'),
  // 发布单总数
  totalCount?: integer(name='total_count'),
}

/**
 * Description: 批量查询部署单基础信息
 * Summary: 批量查询部署单基础信息
 */
async function queryDeployment(request: QueryDeploymentRequest): QueryDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeploymentEx(request, headers, runtime);
}

/**
 * Description: 批量查询部署单基础信息
 * Summary: 批量查询部署单基础信息
 */
async function queryDeploymentEx(request: QueryDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeploymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.deployment.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelDeploymentRequest = {
  authToken?: string(name='auth_token'),
  // 部署单id
  operationId?: string(name='operation_id'),
  // 取消原因。长度不超过100个UTF-8字符
  reason?: string(name='reason'),
}

model CancelDeploymentResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 对一个部署单执行取消操作。
当部署单处于以下状态时可执行取消操作：
INITED：初始化完成
INIT_FAILED：初始化失败
 * Summary: 取消发布
 */
async function cancelDeployment(request: CancelDeploymentRequest): CancelDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelDeploymentEx(request, headers, runtime);
}

/**
 * Description: 对一个部署单执行取消操作。
当部署单处于以下状态时可执行取消操作：
INITED：初始化完成
INIT_FAILED：初始化失败
 * Summary: 取消发布
 */
async function cancelDeploymentEx(request: CancelDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelDeploymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.deployment.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDeploymentRequest = {
  authToken?: string(name='auth_token'),
  // 应用列表
  applications?: [ Application ](name='applications'),
  // 是否启用自动运维，默认为**False**
  autoExecute?: boolean(name='auto_execute'),
  // 部署维度，有两种取值：APPLICATION和APP_SERVICE。设置为APPLICATION，表示在尚未引入应用服务环境中对整个应用都执行部署操作; APP_SERVICE表示在引入应用服务的环境中对应用服务执行部署操作。
  deployDimension?: string(name='deploy_dimension'),
  // 执行部署操作的目标租户
  tenant?: string(name='tenant'),
  // 部署单标题。长度不超过50个UTF-8字符
  title?: string(name='title'),
  // 执行部署操作的目标工作空间
  workspace?: string(name='workspace'),
}

model CreateDeploymentResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 创建完成的部署单id
  operationId?: string(name='operation_id'),
}

/**
 * Description: 创建一个部署单，以对一组应用（服务）执行一次部署操作。
- 部署依赖示例
假设一个部署单将要部署myapp1、myapp2、myapp3，其中myapp1依赖myapp2、myapp3，则应输入参数：
applications.1.name=myapp1&applications.2.name=myapp2&applications.3.name=myapp3&applications.1.depends.1=myapp2&applications.1.depends.2=myapp3
 * Summary: 创建发布
 */
async function createDeployment(request: CreateDeploymentRequest): CreateDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDeploymentEx(request, headers, runtime);
}

/**
 * Description: 创建一个部署单，以对一组应用（服务）执行一次部署操作。
- 部署依赖示例
假设一个部署单将要部署myapp1、myapp2、myapp3，其中myapp1依赖myapp2、myapp3，则应输入参数：
applications.1.name=myapp1&applications.2.name=myapp2&applications.3.name=myapp3&applications.1.depends.1=myapp2&applications.1.depends.2=myapp3
 * Summary: 创建发布
 */
async function createDeploymentEx(request: CreateDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDeploymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.deployment.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDeploymentRequest = {
  authToken?: string(name='auth_token'),
  // 部署单id
  operationId?: string(name='operation_id'),
}

model GetDeploymentResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 此部署操作中所有被操作的应用详情，以操作链的形式体现
  applicationChains?: [ OpsApplicationChain ](name='application_chains'),
  // 部署操作执行者
  executor?: string(name='executor'),
  // 
  //                             
  // 部署单状态。取值列表：
  // INITING：初始化中；
  // INIT_FAILED：初始化失败；
  // INITED：初始化完成；
  // EXECUTING：执行中；
  // SUCCESS：执行成功；
  // FAILED：执行失败；
  // CANCELING：取消中；
  // CANCELED：已取消
  //                             
  //                         
  status?: string(name='status'),
}

/**
 * Description: 查询一个已经创建成功的部署操作。
 * Summary: 获取部署
 */
async function getDeployment(request: GetDeploymentRequest): GetDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDeploymentEx(request, headers, runtime);
}

/**
 * Description: 查询一个已经创建成功的部署操作。
 * Summary: 获取部署
 */
async function getDeploymentEx(request: GetDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeploymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.deployment.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryDeploymentRequest = {
  authToken?: string(name='auth_token'),
  // 部署单id
  operationId?: string(name='operation_id'),
}

model RetryDeploymentResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 对一个部署操作中所有部署失败的分组进行重试操作。
当部署单处于以下状态时可执行重试操作：
- FAILED：执行失败
 * Summary: 重试部署
 */
async function retryDeployment(request: RetryDeploymentRequest): RetryDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryDeploymentEx(request, headers, runtime);
}

/**
 * Description: 对一个部署操作中所有部署失败的分组进行重试操作。
当部署单处于以下状态时可执行重试操作：
- FAILED：执行失败
 * Summary: 重试部署
 */
async function retryDeploymentEx(request: RetryDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryDeploymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.deployment.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDeploymentRequest = {
  authToken?: string(name='auth_token'),
  // 部署单id
  operationId?: string(name='operation_id'),
}

model StartDeploymentResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 开始执行一个已经创建成功的部署操作。如果此部署单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始部署
 */
async function startDeployment(request: StartDeploymentRequest): StartDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDeploymentEx(request, headers, runtime);
}

/**
 * Description: 开始执行一个已经创建成功的部署操作。如果此部署单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始部署
 */
async function startDeploymentEx(request: StartDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDeploymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.deployment.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDeploymentApplicationRequest = {
  authToken?: string(name='auth_token'),
  // 待查询的应用（服务）名称，必须是部署单中包含的应用（服务）
  applicationName?: string(name='application_name'),
  // 部署单id
  operationId?: string(name='operation_id'),
}

model GetDeploymentApplicationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 此应用下所有计算容器分组运维状态详情
  groups?: [ OpsGroup ](name='groups'),
  // 应用（服务）当前运维状态。取值列表：INITING：初始化中；INIT_FAILED：初始化失败；INITED：初始化完成；
  //                             EXECUTING：执行中；SUCCESS：执行成功；FAILED：执行失败
  //                         
  status?: string(name='status'),
}

/**
 * Description: 查询一个部署操作中某个应用（服务）的详情。
 * Summary: 获取部署应用（服务）
 */
async function getDeploymentApplication(request: GetDeploymentApplicationRequest): GetDeploymentApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDeploymentApplicationEx(request, headers, runtime);
}

/**
 * Description: 查询一个部署操作中某个应用（服务）的详情。
 * Summary: 获取部署应用（服务）
 */
async function getDeploymentApplicationEx(request: GetDeploymentApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDeploymentApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.deployment.application.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RollbackDeploymentApplicationRequest = {
  authToken?: string(name='auth_token'),
  // 被回滚的应用（服务）名称，必须是部署单中包含的应用（服务）
  applicationName?: string(name='application_name'),
  // 部署单id
  operationId?: string(name='operation_id'),
  // 回滚原因。长度不超过100个UTF-8字符
  reason?: string(name='reason'),
}

model RollbackDeploymentApplicationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 对一个部署操作中，某个应用（服务）的部署操作执行回滚。执行成功后，将回滚到上次成功部署的版本。一个应用（服务）只可以执行一次回滚操作，即已执行回滚操作的应用无论回滚成功与否都无法再次回滚。
当部署的应用（服务）且应用（服务）对应的部署单处于以下状态时可执行回滚：
- EXECUTING：执行中
- SUCCESS：执行成功
- FAILED：执行失败
 * Summary: 回滚部署
 */
async function rollbackDeploymentApplication(request: RollbackDeploymentApplicationRequest): RollbackDeploymentApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return rollbackDeploymentApplicationEx(request, headers, runtime);
}

/**
 * Description: 对一个部署操作中，某个应用（服务）的部署操作执行回滚。执行成功后，将回滚到上次成功部署的版本。一个应用（服务）只可以执行一次回滚操作，即已执行回滚操作的应用无论回滚成功与否都无法再次回滚。
当部署的应用（服务）且应用（服务）对应的部署单处于以下状态时可执行回滚：
- EXECUTING：执行中
- SUCCESS：执行成功
- FAILED：执行失败
 * Summary: 回滚部署
 */
async function rollbackDeploymentApplicationEx(request: RollbackDeploymentApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RollbackDeploymentApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.deployment.application.rollback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitDeploymentRequest = {
  authToken?: string(name='auth_token'),
  // 部署单id
  operationId?: string(name='operation_id'),
}

model ReinitDeploymentResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 重新初始化一个初始化失败的部署单。当部署单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化部署
 */
async function reinitDeployment(request: ReinitDeploymentRequest): ReinitDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitDeploymentEx(request, headers, runtime);
}

/**
 * Description: 重新初始化一个初始化失败的部署单。当部署单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化部署
 */
async function reinitDeploymentEx(request: ReinitDeploymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitDeploymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.deployment.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCmdtemplateRequest = {
  authToken?: string(name='auth_token'),
  // 指令模板描述信息
  description?: string(name='description'),
  // 指令名称
  name?: string(name='name'),
  // 当前页码，默认为1
  pageNum?: integer(name='page_num'),
  // 分页大小，默认10
  pageSize?: integer(name='page_size'),
}

model QueryCmdtemplateResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 当前页码
  pageNum?: integer(name='page_num'),
  // 分页大小
  pageSize?: integer(name='page_size'),
  // 指令模板ID列表
  templateIds?: [ string ](name='template_ids'),
  // 指令模板总数
  totalCount?: integer(name='total_count'),
}

/**
 * Description: 根据查询条件查询指令模板。
 * Summary: 查询指令模板
 */
async function queryCmdtemplate(request: QueryCmdtemplateRequest): QueryCmdtemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCmdtemplateEx(request, headers, runtime);
}

/**
 * Description: 根据查询条件查询指令模板。
 * Summary: 查询指令模板
 */
async function queryCmdtemplateEx(request: QueryCmdtemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCmdtemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cmdtemplate.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetCmdtemplateRequest = {
  authToken?: string(name='auth_token'),
  // 指令模板ID
  id?: string(name='id'),
}

model GetCmdtemplateResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 指令模板详情
  template?: CmdTemplate(name='template'),
}

/**
 * Description: 获取指令模板详情。
 * Summary: 获取指令模板详情。
 */
async function getCmdtemplate(request: GetCmdtemplateRequest): GetCmdtemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getCmdtemplateEx(request, headers, runtime);
}

/**
 * Description: 获取指令模板详情。
 * Summary: 获取指令模板详情。
 */
async function getCmdtemplateEx(request: GetCmdtemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCmdtemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cmdtemplate.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncexecuteCmdTaskRequest = {
  authToken?: string(name='auth_token'),
  // 执行的指令。示例如下：cmd.template_id=000015678&cmd.args.1.name=--version&cmd.args.1.value=2.2
  cmd?: OpsCmd(name='cmd'),
  // 执行指令的目标机器id列表。n代表第n个应用的名称，n从1开始，最大100。每个应用名称最大60个UTF-8字符。如果要输入多个机器，使用如下形式：computers.1.id=000112367&computers.2.id=000112367
  computers?: [ OpsComputer ](name='computers'),
}

model SyncexecuteCmdTaskResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 指令执行结果详情
  result?: CmdExecResult(name='result'),
}

/**
 * Description: 同步执行指令。
 * Summary: 同步执行指令。
 */
async function syncexecuteCmdTask(request: SyncexecuteCmdTaskRequest): SyncexecuteCmdTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncexecuteCmdTaskEx(request, headers, runtime);
}

/**
 * Description: 同步执行指令。
 * Summary: 同步执行指令。
 */
async function syncexecuteCmdTaskEx(request: SyncexecuteCmdTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncexecuteCmdTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cmd.task.syncexecute', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AsyncexecuteCmdTaskRequest = {
  authToken?: string(name='auth_token'),
  // 执行的指令。示例如下：cmd.template_id=000015678&cmd.args.1.name=--version&cmd.args.1.value=2.2
  cmd?: OpsCmd(name='cmd'),
  // 执行指令的目标机器id列表。n代表第n个应用的名称，n从1开始，最大100。每个应用名称最大60个UTF-8字符。如果要输入多个机器，使用如下形式：computers.1.id=000112367&computers.2.id=000112367
  computers?: [ OpsComputer ](name='computers'),
}

model AsyncexecuteCmdTaskResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 指令执行任务ID，用于查询任务详情
  taskId?: string(name='task_id'),
}

/**
 * Description: 异步执行指令。
 * Summary: 异步执行指令。
 */
async function asyncexecuteCmdTask(request: AsyncexecuteCmdTaskRequest): AsyncexecuteCmdTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return asyncexecuteCmdTaskEx(request, headers, runtime);
}

/**
 * Description: 异步执行指令。
 * Summary: 异步执行指令。
 */
async function asyncexecuteCmdTaskEx(request: AsyncexecuteCmdTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AsyncexecuteCmdTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cmd.task.asyncexecute', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetCmdTaskRequest = {
  authToken?: string(name='auth_token'),
  // 异步指令执行的任务ID
  taskId?: string(name='task_id'),
}

model GetCmdTaskResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 指令执行结果详情
  result?: CmdExecResult(name='result'),
}

/**
 * Description: 查询执行指令任务结果。
 * Summary: 查询执行指令任务结果。
 */
async function getCmdTask(request: GetCmdTaskRequest): GetCmdTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getCmdTaskEx(request, headers, runtime);
}

/**
 * Description: 查询执行指令任务结果。
 * Summary: 查询执行指令任务结果。
 */
async function getCmdTaskEx(request: GetCmdTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCmdTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cmd.task.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAppopsRequest = {
  authToken?: string(name='auth_token'),
  // 执行运维操作的目标应用名称列表。n代表第n个应用的名称，n从1开始，最大100。每个应用名称最大60个UTF-8字符。如果要输入多个应用，使用如下形式：applications.1.name=myapp1&applications.2.name=myapp2
  applications?: [ Application ](name='applications'),
  // 是否启用自动运维，默认为**False**
  autoExecute?: boolean(name='auto_execute'),
  // 执行运维操作的目标机器id列表。n代表第n个应用的名称，n从1开始，最大100。每个应用名称最大60个UTF-8字符。如果要输入多个机器，使用如下形式：computers.1.id=000112367&computers.2.id=000112367
  computers?: [ Computer ](name='computers'),
  // 应用运维的操作类型，取值列表：ONLINE：上线应用，OFFLINE：下线应用，RESTART:重启应用，DEPLOY_STATIC_RESOURCE：部署静态资源。
  //                         部署静态资源需传入 ops_action_params 为("default_execute_account", "resource_download_url", "resource_target_file")
  //                         
  opsAction?: string(name='ops_action'),
  // ops_action 所需要的参数，以JSON格式传入。以 {"param_name": "param_value"} 定义JSON。
  opsActionParams?: string(name='ops_action_params'),
  // 应用运维的维度，有三种取值：APPLICATION、APP_SERVICE和MACHINE。设置为APPLICATION，表示在非应用服务环境下整个应用都执行该应用运维操作；设置为APP_SERVICE，表示在应用服务环境下对应用服务执行运维操作;设置为MACHINE，表示应用下的一台或多台机器执行改应用运维操作。
  opsDimension?: string(name='ops_dimension'),
  // 运维单标题。长度不超过50个UTF-8字符
  title?: string(name='title'),
}

model CreateAppopsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 创建完成的运维单id
  operationId?: string(name='operation_id'),
}

/**
 * Description: 创建一个应用运维单，以对一组应用（服务）执行一次运维操作
 * Summary: 创建一个应用（服务）运维单
 */
async function createAppops(request: CreateAppopsRequest): CreateAppopsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAppopsEx(request, headers, runtime);
}

/**
 * Description: 创建一个应用运维单，以对一组应用（服务）执行一次运维操作
 * Summary: 创建一个应用（服务）运维单
 */
async function createAppopsEx(request: CreateAppopsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppopsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appops.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppopsRequest = {
  authToken?: string(name='auth_token'),
  // 运维单id
  operationId?: string(name='operation_id'),
}

model GetAppopsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 此运维操作中所有被操作的应用详情，以操作链的形式体现
  applicationChains?: [ OpsApplicationChain ](name='application_chains'),
  // 运维操作执行者
  executor?: string(name='executor'),
  // 应用运维的操作类型，取值列表：ONLINE：上线应用，OFFLINE：下线应用，RESTART:重启应用，DEPLOY_STATIC_RESOURCE：部署静态资源
  opsAction?: string(name='ops_action'),
  // 应用运维的维度，有三种取值：APPLICATION、APP_SERVICE和MACHINE。设置为APPLICATION，表示在非应用服务环境下整个应用都执行该应用运维操作；设置为APP_SERVICE，表示在应用服务环境下对应用服务执行运维操作;设置为MACHINE，表示应用下的一台或多台机器执行改应用运维操作。
  opsDimension?: string(name='ops_dimension'),
  // 
  //                             
  // 部署单状态。取值列表：
  // INITING：初始化中；
  // INIT_FAILED：初始化失败；
  // INITED：初始化完成；
  // EXECUTING：执行中；
  // SUCCESS：执行成功；
  // FAILED：执行失败；
  // CANCELING：取消中；
  // CANCELED：已取消
  //                             
  //                         
  status?: string(name='status'),
  // 应用运维单标题
  title?: string(name='title'),
}

/**
 * Description: 查询一个已经创建成功的运维操作。
 * Summary: 获取运维单
 */
async function getAppops(request: GetAppopsRequest): GetAppopsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppopsEx(request, headers, runtime);
}

/**
 * Description: 查询一个已经创建成功的运维操作。
 * Summary: 获取运维单
 */
async function getAppopsEx(request: GetAppopsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppopsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appops.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAppopsRequest = {
  authToken?: string(name='auth_token'),
  // 运维单id
  operationId?: string(name='operation_id'),
}

model StartAppopsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 开始执行一个已经创建成功的运维操作。如果此运维单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始运维
 */
async function startAppops(request: StartAppopsRequest): StartAppopsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAppopsEx(request, headers, runtime);
}

/**
 * Description: 开始执行一个已经创建成功的运维操作。如果此运维单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始运维
 */
async function startAppopsEx(request: StartAppopsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAppopsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appops.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitAppopsRequest = {
  authToken?: string(name='auth_token'),
  // 运维单id
  operationId?: string(name='operation_id'),
}

model ReinitAppopsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 重新初始化一个初始化失败的运维单。当运维单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化运维
 */
async function reinitAppops(request: ReinitAppopsRequest): ReinitAppopsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitAppopsEx(request, headers, runtime);
}

/**
 * Description: 重新初始化一个初始化失败的运维单。当运维单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化运维
 */
async function reinitAppopsEx(request: ReinitAppopsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitAppopsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appops.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelAppopsRequest = {
  authToken?: string(name='auth_token'),
  // 运维单id
  operationId?: string(name='operation_id'),
  // 取消原因。长度不超过100个UTF-8字符
  reason?: string(name='reason'),
}

model CancelAppopsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 对一个运维单执行取消操作。
当运维单处于以下状态时可执行取消操作：
INITED：初始化完成
INIT_FAILED：初始化失败
 * Summary: 取消发布
 */
async function cancelAppops(request: CancelAppopsRequest): CancelAppopsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelAppopsEx(request, headers, runtime);
}

/**
 * Description: 对一个运维单执行取消操作。
当运维单处于以下状态时可执行取消操作：
INITED：初始化完成
INIT_FAILED：初始化失败
 * Summary: 取消发布
 */
async function cancelAppopsEx(request: CancelAppopsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelAppopsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appops.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryAppopsRequest = {
  authToken?: string(name='auth_token'),
  // 运维单id
  operationId?: string(name='operation_id'),
}

model RetryAppopsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 对一个运维操作中所有运维失败的分组进行重试操作。
当运维单处于以下状态时可执行重试操作：
- FAILED：执行失败
 * Summary: 重试运维
 */
async function retryAppops(request: RetryAppopsRequest): RetryAppopsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryAppopsEx(request, headers, runtime);
}

/**
 * Description: 对一个运维操作中所有运维失败的分组进行重试操作。
当运维单处于以下状态时可执行重试操作：
- FAILED：执行失败
 * Summary: 重试运维
 */
async function retryAppopsEx(request: RetryAppopsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryAppopsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appops.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateComputeropsRequest = {
  authToken?: string(name='auth_token'),
  // 执行的指令列表。n代表第n个指令，n从1开始，最大20。示例如下：cmds.1.template_id=000015678&cmds.1.args.1.name=--version&cmds.1.args.1.value=2.2&cmds.2.template_id=000015688
  cmds?: [ OpsCmd ](name='cmds'),
  // 执行运维操作的目标机器id列表。n代表第n个应用的名称，n从1开始，最大100。每个应用名称最大60个UTF-8字符。如果要输入多个机器，使用如下形式：computers.1.id=000112367&computers.2.id=000112367
  computers?: [ Computer ](name='computers'),
  // 运维单标题。长度不超过50个UTF-8字符
  title?: string(name='title'),
}

model CreateComputeropsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 创建完成的运维单id
  operationId?: string(name='operation_id'),
}

/**
 * Description: 创建一个机器运维单，以对一组或多组机器执行一次运维操作
 * Summary: 创建一个机器运维单
 */
async function createComputerops(request: CreateComputeropsRequest): CreateComputeropsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createComputeropsEx(request, headers, runtime);
}

/**
 * Description: 创建一个机器运维单，以对一组或多组机器执行一次运维操作
 * Summary: 创建一个机器运维单
 */
async function createComputeropsEx(request: CreateComputeropsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateComputeropsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.computerops.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetComputeropsRequest = {
  authToken?: string(name='auth_token'),
  // 运维单id
  operationId?: string(name='operation_id'),
}

model GetComputeropsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 运维操作执行者
  executor?: string(name='executor'),
  // 改运维单下所有计算容器分组运维状态详情
  groups?: [ OpsGroup ](name='groups'),
  // 
  //                             
  // 部署单状态。取值列表：
  // INITING：初始化中；
  // INIT_FAILED：初始化失败；
  // INITED：初始化完成；
  // EXECUTING：执行中；
  // SUCCESS：执行成功；
  // FAILED：执行失败；
  // CANCELING：取消中；
  // CANCELED：已取消
  //                             
  //                         
  status?: string(name='status'),
}

/**
 * Description: 查询一个已经创建成功的机器运维操作。
 * Summary: 获取运维单
 */
async function getComputerops(request: GetComputeropsRequest): GetComputeropsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getComputeropsEx(request, headers, runtime);
}

/**
 * Description: 查询一个已经创建成功的机器运维操作。
 * Summary: 获取运维单
 */
async function getComputeropsEx(request: GetComputeropsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetComputeropsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.computerops.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartComputeropsRequest = {
  authToken?: string(name='auth_token'),
  // 运维单id
  operationId?: string(name='operation_id'),
}

model StartComputeropsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 开始执行一个已经创建成功的机器运维操作。如果此运维单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始运维
 */
async function startComputerops(request: StartComputeropsRequest): StartComputeropsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startComputeropsEx(request, headers, runtime);
}

/**
 * Description: 开始执行一个已经创建成功的机器运维操作。如果此运维单已初始化完成且还未开始执行，则开始执行并返回成功，否则返回失败。
 * Summary: 开始运维
 */
async function startComputeropsEx(request: StartComputeropsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartComputeropsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.computerops.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitComputeropsRequest = {
  authToken?: string(name='auth_token'),
  // 运维单id
  operationId?: string(name='operation_id'),
}

model ReinitComputeropsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 重新初始化一个初始化失败的机器运维单。当运维单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化运维
 */
async function reinitComputerops(request: ReinitComputeropsRequest): ReinitComputeropsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitComputeropsEx(request, headers, runtime);
}

/**
 * Description: 重新初始化一个初始化失败的机器运维单。当运维单处于初始化失败状态时方可执行重新初始化操作。
 * Summary: 重新初始化运维
 */
async function reinitComputeropsEx(request: ReinitComputeropsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitComputeropsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.computerops.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelComputeropsRequest = {
  authToken?: string(name='auth_token'),
  // 运维单id
  operationId?: string(name='operation_id'),
  // 取消原因。长度不超过100个UTF-8字符
  reason?: string(name='reason'),
}

model CancelComputeropsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 对一个机器运维单执行取消操作。
当运维单处于以下状态时可执行取消操作：
INITED：初始化完成
INIT_FAILED：初始化失败
 * Summary: 取消发布
 */
async function cancelComputerops(request: CancelComputeropsRequest): CancelComputeropsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelComputeropsEx(request, headers, runtime);
}

/**
 * Description: 对一个机器运维单执行取消操作。
当运维单处于以下状态时可执行取消操作：
INITED：初始化完成
INIT_FAILED：初始化失败
 * Summary: 取消发布
 */
async function cancelComputeropsEx(request: CancelComputeropsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelComputeropsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.computerops.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryComputeropsRequest = {
  authToken?: string(name='auth_token'),
  // 运维单id
  operationId?: string(name='operation_id'),
}

model RetryComputeropsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 对一个机器运维操作中所有运维失败的分组进行重试操作。
当运维单处于以下状态时可执行重试操作：
- FAILED：执行失败
 * Summary: 重试运维
 */
async function retryComputerops(request: RetryComputeropsRequest): RetryComputeropsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryComputeropsEx(request, headers, runtime);
}

/**
 * Description: 对一个机器运维操作中所有运维失败的分组进行重试操作。
当运维单处于以下状态时可执行重试操作：
- FAILED：执行失败
 * Summary: 重试运维
 */
async function retryComputeropsEx(request: RetryComputeropsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryComputeropsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.computerops.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOpsappsvcRequest = {
  authToken?: string(name='auth_token'),
  // 应用的名称
  appName?: string(name='app_name'),
  // 当前页码，默认为1
  pageNum?: integer(name='page_num'),
  // 分页大小，默认10，最大50
  pageSize?: integer(name='page_size'),
  // 应用服务的名称，如果为空，会查询该应用下所有应用服务的运维历史
  serviceName?: string(name='service_name'),
}

model QueryOpsappsvcResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用服务的运维历史
  opsappsvcs?: [ OpsApplication ](name='opsappsvcs'),
  // 当前页码
  pageNum?: integer(name='page_num'),
  // 分页大小
  pageSize?: integer(name='page_size'),
  // 总数
  totalCount?: integer(name='total_count'),
}

/**
 * Description: 查询应用服务的运维历史。
 * Summary: 查询应用服务的运维历史。
 */
async function queryOpsappsvc(request: QueryOpsappsvcRequest): QueryOpsappsvcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOpsappsvcEx(request, headers, runtime);
}

/**
 * Description: 查询应用服务的运维历史。
 * Summary: 查询应用服务的运维历史。
 */
async function queryOpsappsvcEx(request: QueryOpsappsvcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOpsappsvcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.opsappsvc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AsyncexecuteBashcmdRequest = {
  authToken?: string(name='auth_token'),
  // 执行的命令，长度不能超过500个字符
  command?: string(name='command'),
  // 执行指令的目标机器id列表。n代表第n个机器，n从1开始，最大50。如果要输入多个机器，使用如下形式：computers.1.id=000112367&computers.2.id=000112367
  computers?: [ Computer ](name='computers'),
  // 单次执行的超时时间，单位为秒。最大值为1800秒，默认值也为1800秒
  timeOut?: integer(name='time_out'),
  // 机器上执行命令的用户,比如：root,admin
  user?: string(name='user'),
}

model AsyncexecuteBashcmdResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 异步bash命令执行的任务ID
  taskId?: string(name='task_id'),
}

/**
 * Description: 异步执行Bash命令。
 * Summary: 异步执行Bash命令。
 */
async function asyncexecuteBashcmd(request: AsyncexecuteBashcmdRequest): AsyncexecuteBashcmdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return asyncexecuteBashcmdEx(request, headers, runtime);
}

/**
 * Description: 异步执行Bash命令。
 * Summary: 异步执行Bash命令。
 */
async function asyncexecuteBashcmdEx(request: AsyncexecuteBashcmdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AsyncexecuteBashcmdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bashcmd.asyncexecute', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetBashcmdResultRequest = {
  authToken?: string(name='auth_token'),
  // 异步bash指令执行的任务ID
  taskId?: string(name='task_id'),
}

model GetBashcmdResultResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 错误信息。内容为指令无法下发到机器上的详细原因
  errMsg?: string(name='err_msg'),
  // 执行结束时间
  finishTime?: string(name='finish_time'),
  // 执行的结果
  results?: [ SingleExecResult ](name='results'),
  // 执行开始时间
  startTime?: string(name='start_time'),
  // 执行结果状态。取值列表：EXECUTING：执行中；SUCCESS：执行成功；FAILED：执行失败；IGNORED：已忽略；TIME_OUT：已超时
  status?: string(name='status'),
}

/**
 * Description: 根据异步执行bash命令的任务ID查询结果。
 * Summary: 根据异步执行bash命令的任务ID查询结果。
 */
async function getBashcmdResult(request: GetBashcmdResultRequest): GetBashcmdResultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getBashcmdResultEx(request, headers, runtime);
}

/**
 * Description: 根据异步执行bash命令的任务ID查询结果。
 * Summary: 根据异步执行bash命令的任务ID查询结果。
 */
async function getBashcmdResultEx(request: GetBashcmdResultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetBashcmdResultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bashcmd.result.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckCloudconfigBgreleaseRequest = {
  authToken?: string(name='auth_token'),
  // workspace
  workspace?: string(name='workspace'),
}

model CheckCloudconfigBgreleaseResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否已开通
  enabled?: boolean(name='enabled'),
}

/**
 * Description: 查询当前环境是否已开通蓝绿发布
 * Summary: 查询当前环境是否已开通蓝绿发布
 */
async function checkCloudconfigBgrelease(request: CheckCloudconfigBgreleaseRequest): CheckCloudconfigBgreleaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkCloudconfigBgreleaseEx(request, headers, runtime);
}

/**
 * Description: 查询当前环境是否已开通蓝绿发布
 * Summary: 查询当前环境是否已开通蓝绿发布
 */
async function checkCloudconfigBgreleaseEx(request: CheckCloudconfigBgreleaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckCloudconfigBgreleaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cloudconfig.bgrelease.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckCloudconfigBgdeploymentcellRequest = {
  authToken?: string(name='auth_token'),
  // require_release
  requireRelease?: boolean(name='require_release'),
  // workspace
  workspace?: string(name='workspace'),
}

model CheckCloudconfigBgdeploymentcellResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否已开通
  enabled?: boolean(name='enabled'),
}

/**
 * Description: 查询是否已开通蓝绿发布部署单元
 * Summary: 查询是否已开通蓝绿发布部署单元
 */
async function checkCloudconfigBgdeploymentcell(request: CheckCloudconfigBgdeploymentcellRequest): CheckCloudconfigBgdeploymentcellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkCloudconfigBgdeploymentcellEx(request, headers, runtime);
}

/**
 * Description: 查询是否已开通蓝绿发布部署单元
 * Summary: 查询是否已开通蓝绿发布部署单元
 */
async function checkCloudconfigBgdeploymentcellEx(request: CheckCloudconfigBgdeploymentcellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckCloudconfigBgdeploymentcellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cloudconfig.bgdeploymentcell.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckCloudconfigAppserviceRequest = {
  authToken?: string(name='auth_token'),
  // workspace
  workspace?: string(name='workspace'),
}

model CheckCloudconfigAppserviceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否已开通
  enabled?: boolean(name='enabled'),
}

/**
 * Description: 查询是否已开通应用服务
 * Summary: 查询是否已开通应用服务
 */
async function checkCloudconfigAppservice(request: CheckCloudconfigAppserviceRequest): CheckCloudconfigAppserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkCloudconfigAppserviceEx(request, headers, runtime);
}

/**
 * Description: 查询是否已开通应用服务
 * Summary: 查询是否已开通应用服务
 */
async function checkCloudconfigAppserviceEx(request: CheckCloudconfigAppserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckCloudconfigAppserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cloudconfig.appservice.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckCloudconfigSharedmwRequest = {
  authToken?: string(name='auth_token'),
  // workspace
  workspace?: string(name='workspace'),
}

model CheckCloudconfigSharedmwResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否已开通
  enabled?: boolean(name='enabled'),
}

/**
 * Description: 查询是否已开通共享中间件
 * Summary: 查询是否已开通共享中间件
 */
async function checkCloudconfigSharedmw(request: CheckCloudconfigSharedmwRequest): CheckCloudconfigSharedmwResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkCloudconfigSharedmwEx(request, headers, runtime);
}

/**
 * Description: 查询是否已开通共享中间件
 * Summary: 查询是否已开通共享中间件
 */
async function checkCloudconfigSharedmwEx(request: CheckCloudconfigSharedmwRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckCloudconfigSharedmwResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cloudconfig.sharedmw.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckCloudconfigVonereleaseRequest = {
  authToken?: string(name='auth_token'),
  // workspace
  workspace?: string(name='workspace'),
}

model CheckCloudconfigVonereleaseResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否使用
  enabled?: boolean(name='enabled'),
}

/**
 * Description: 查询是否使用 v1 发布策略
 * Summary: 查询是否使用 v1 发布策略
 */
async function checkCloudconfigVonerelease(request: CheckCloudconfigVonereleaseRequest): CheckCloudconfigVonereleaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkCloudconfigVonereleaseEx(request, headers, runtime);
}

/**
 * Description: 查询是否使用 v1 发布策略
 * Summary: 查询是否使用 v1 发布策略
 */
async function checkCloudconfigVonereleaseEx(request: CheckCloudconfigVonereleaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckCloudconfigVonereleaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cloudconfig.vonerelease.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckCloudconfigVoneappopsRequest = {
  authToken?: string(name='auth_token'),
  // workspace
  workspace?: string(name='workspace'),
}

model CheckCloudconfigVoneappopsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否使用
  enabled?: boolean(name='enabled'),
}

/**
 * Description: 查询是否使用 v1 应用运维策略
 * Summary: 查询是否使用 v1 应用运维策略
 */
async function checkCloudconfigVoneappops(request: CheckCloudconfigVoneappopsRequest): CheckCloudconfigVoneappopsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkCloudconfigVoneappopsEx(request, headers, runtime);
}

/**
 * Description: 查询是否使用 v1 应用运维策略
 * Summary: 查询是否使用 v1 应用运维策略
 */
async function checkCloudconfigVoneappopsEx(request: CheckCloudconfigVoneappopsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckCloudconfigVoneappopsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cloudconfig.voneappops.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckCloudconfigOlduiRequest = {
  authToken?: string(name='auth_token'),
  // workspace
  workspace?: string(name='workspace'),
}

model CheckCloudconfigOlduiResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否使用
  enabled?: boolean(name='enabled'),
}

/**
 * Description: 查询是否使用老版本界面
 * Summary: 查询是否使用老版本界面
 */
async function checkCloudconfigOldui(request: CheckCloudconfigOlduiRequest): CheckCloudconfigOlduiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkCloudconfigOlduiEx(request, headers, runtime);
}

/**
 * Description: 查询是否使用老版本界面
 * Summary: 查询是否使用老版本界面
 */
async function checkCloudconfigOlduiEx(request: CheckCloudconfigOlduiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckCloudconfigOlduiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cloudconfig.oldui.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckCloudconfigXdclbforbiddenRequest = {
  authToken?: string(name='auth_token'),
  // workspace
  workspace?: string(name='workspace'),
}

model CheckCloudconfigXdclbforbiddenResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否禁用
  forbidden?: boolean(name='forbidden'),
}

/**
 * Description: 是否禁用 XDC LB
 * Summary: 是否禁用 XDC LB
 */
async function checkCloudconfigXdclbforbidden(request: CheckCloudconfigXdclbforbiddenRequest): CheckCloudconfigXdclbforbiddenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkCloudconfigXdclbforbiddenEx(request, headers, runtime);
}

/**
 * Description: 是否禁用 XDC LB
 * Summary: 是否禁用 XDC LB
 */
async function checkCloudconfigXdclbforbiddenEx(request: CheckCloudconfigXdclbforbiddenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckCloudconfigXdclbforbiddenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cloudconfig.xdclbforbidden.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCloudconfigOpenapiconfigRequest = {
  authToken?: string(name='auth_token'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryCloudconfigOpenapiconfigResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 配置内容
  config?: string(name='config'),
}

/**
 * Description: 查询 openapi 配置信息
 * Summary: 查询 openapi 配置信息
 */
async function queryCloudconfigOpenapiconfig(request: QueryCloudconfigOpenapiconfigRequest): QueryCloudconfigOpenapiconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCloudconfigOpenapiconfigEx(request, headers, runtime);
}

/**
 * Description: 查询 openapi 配置信息
 * Summary: 查询 openapi 配置信息
 */
async function queryCloudconfigOpenapiconfigEx(request: QueryCloudconfigOpenapiconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCloudconfigOpenapiconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.cloudconfig.openapiconfig.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CountAppsPkgRequest = {
  authToken?: string(name='auth_token'),
  // 应用 id 列表
  appIds?: [ string ](name='app_ids'),
  // workspace
  workspace?: string(name='workspace'),
}

model CountAppsPkgResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用包个数，键为应用ID，值为对应包个数
  data?: [ Pair ](name='data'),
}

/**
 * Description: 查询应用包个数
 * Summary: 查询应用包个数
 */
async function countAppsPkg(request: CountAppsPkgRequest): CountAppsPkgResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return countAppsPkgEx(request, headers, runtime);
}

/**
 * Description: 查询应用包个数
 * Summary: 查询应用包个数
 */
async function countAppsPkgEx(request: CountAppsPkgRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountAppsPkgResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.apps.pkg.count', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppUnitresourcesRequest = {
  authToken?: string(name='auth_token'),
  // 应用 id 列表
  appIds?: [ string ](name='app_ids'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryAppUnitresourcesResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 资源统计
  resources?: string(name='resources'),
}

/**
 * Description: 查询app下的资源统计
 * Summary: 查询app下的资源统计
 */
async function queryAppUnitresources(request: QueryAppUnitresourcesRequest): QueryAppUnitresourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppUnitresourcesEx(request, headers, runtime);
}

/**
 * Description: 查询app下的资源统计
 * Summary: 查询app下的资源统计
 */
async function queryAppUnitresourcesEx(request: QueryAppUnitresourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppUnitresourcesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.app.unitresources.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOauthTokenRequest = {
  authToken?: string(name='auth_token'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryOauthTokenResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 过期时间
  accessExpiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='access_expired_time'),
  // access token
  accessToken?: string(name='access_token'),
  // 用户 id
  customerId?: string(name='customer_id'),
  // 过期时间
  refreshExpiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='refresh_expired_time'),
  // refresh token
  refreshToken?: string(name='refresh_token'),
  // 租户名
  tenant?: string(name='tenant'),
  // 租户 ID
  tenantId?: string(name='tenant_id'),
}

/**
 * Description: 查询认证 token
 * Summary: 查询认证 token
 */
async function queryOauthToken(request: QueryOauthTokenRequest): QueryOauthTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOauthTokenEx(request, headers, runtime);
}

/**
 * Description: 查询认证 token
 * Summary: 查询认证 token
 */
async function queryOauthTokenEx(request: QueryOauthTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOauthTokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.oauth.token.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateOauthTokenRequest = {
  authToken?: string(name='auth_token'),
  // 过期时间
  accessExpiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='access_expired_time'),
  // access token
  accessToken?: string(name='access_token'),
  // 用户 ID
  customerId?: string(name='customer_id'),
  // 过期时间
  refreshExpiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='refresh_expired_time'),
  // refresh token
  refreshToken?: string(name='refresh_token'),
  // workspace
  workspace?: string(name='workspace'),
}

model UpdateOauthTokenResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建或更新 token
 * Summary: 创建或更新 token
 */
async function updateOauthToken(request: UpdateOauthTokenRequest): UpdateOauthTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateOauthTokenEx(request, headers, runtime);
}

/**
 * Description: 创建或更新 token
 * Summary: 创建或更新 token
 */
async function updateOauthTokenEx(request: UpdateOauthTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateOauthTokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.oauth.token.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteOauthTokenRequest = {
  authToken?: string(name='auth_token'),
  // workspace
  workspace?: string(name='workspace'),
}

model DeleteOauthTokenResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除 token
 * Summary: 删除 token
 */
async function deleteOauthToken(request: DeleteOauthTokenRequest): DeleteOauthTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteOauthTokenEx(request, headers, runtime);
}

/**
 * Description: 删除 token
 * Summary: 删除 token
 */
async function deleteOauthTokenEx(request: DeleteOauthTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteOauthTokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.oauth.token.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBaseinfoDeploymentzonesRequest = {
  authToken?: string(name='auth_token'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryBaseinfoDeploymentzonesResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 部署可用区列表
  deploymentZones?: [ string ](name='deployment_zones'),
}

/**
 * Description: 查询 DZ
 * Summary: 查询 DZ
 */
async function queryBaseinfoDeploymentzones(request: QueryBaseinfoDeploymentzonesRequest): QueryBaseinfoDeploymentzonesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBaseinfoDeploymentzonesEx(request, headers, runtime);
}

/**
 * Description: 查询 DZ
 * Summary: 查询 DZ
 */
async function queryBaseinfoDeploymentzonesEx(request: QueryBaseinfoDeploymentzonesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBaseinfoDeploymentzonesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.baseinfo.deploymentzones.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetBgreleaseArrangementRequest = {
  authToken?: string(name='auth_token'),
  // 概览ID
  arrangementId?: string(name='arrangement_id'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model GetBgreleaseArrangementResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 概览内容
  arrangement?: string(name='arrangement'),
}

/**
 * Description: 获取蓝绿发布概览
 * Summary: 获取蓝绿发布概览
 */
async function getBgreleaseArrangement(request: GetBgreleaseArrangementRequest): GetBgreleaseArrangementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getBgreleaseArrangementEx(request, headers, runtime);
}

/**
 * Description: 获取蓝绿发布概览
 * Summary: 获取蓝绿发布概览
 */
async function getBgreleaseArrangementEx(request: GetBgreleaseArrangementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetBgreleaseArrangementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.arrangement.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBgreleaseArrangementRequest = {
  authToken?: string(name='auth_token'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryBgreleaseArrangementResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 蓝绿发布概览列表
  arrangements?: [ string ](name='arrangements'),
}

/**
 * Description: 查询蓝绿发布概览
 * Summary: 查询蓝绿发布概览
 */
async function queryBgreleaseArrangement(request: QueryBgreleaseArrangementRequest): QueryBgreleaseArrangementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBgreleaseArrangementEx(request, headers, runtime);
}

/**
 * Description: 查询蓝绿发布概览
 * Summary: 查询蓝绿发布概览
 */
async function queryBgreleaseArrangementEx(request: QueryBgreleaseArrangementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBgreleaseArrangementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.arrangement.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBgreleaseArrangementprogressRequest = {
  authToken?: string(name='auth_token'),
  // 概览ID
  arrangementId?: string(name='arrangement_id'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryBgreleaseArrangementprogressResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 进度
  progresses?: [ string ](name='progresses'),
}

/**
 * Description: 查询蓝绿发布进度
 * Summary: 查询蓝绿发布进度
 */
async function queryBgreleaseArrangementprogress(request: QueryBgreleaseArrangementprogressRequest): QueryBgreleaseArrangementprogressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBgreleaseArrangementprogressEx(request, headers, runtime);
}

/**
 * Description: 查询蓝绿发布进度
 * Summary: 查询蓝绿发布进度
 */
async function queryBgreleaseArrangementprogressEx(request: QueryBgreleaseArrangementprogressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBgreleaseArrangementprogressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.arrangementprogress.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBgreleaseTaskprogressRequest = {
  authToken?: string(name='auth_token'),
  // 概览ID
  arrangementId?: string(name='arrangement_id'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryBgreleaseTaskprogressResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 进度
  progresses?: [ string ](name='progresses'),
}

/**
 * Description: 查询蓝绿发布任务进度
 * Summary: 查询蓝绿发布任务进度
 */
async function queryBgreleaseTaskprogress(request: QueryBgreleaseTaskprogressRequest): QueryBgreleaseTaskprogressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBgreleaseTaskprogressEx(request, headers, runtime);
}

/**
 * Description: 查询蓝绿发布任务进度
 * Summary: 查询蓝绿发布任务进度
 */
async function queryBgreleaseTaskprogressEx(request: QueryBgreleaseTaskprogressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBgreleaseTaskprogressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.taskprogress.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecBgreleaseArrangementRequest = {
  authToken?: string(name='auth_token'),
  // 概览ID
  arrangementId?: string(name='arrangement_id'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model ExecBgreleaseArrangementResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 概览
  arrangement?: string(name='arrangement'),
}

/**
 * Description: 执行蓝绿发布
 * Summary: 执行蓝绿发布
 */
async function execBgreleaseArrangement(request: ExecBgreleaseArrangementRequest): ExecBgreleaseArrangementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execBgreleaseArrangementEx(request, headers, runtime);
}

/**
 * Description: 执行蓝绿发布
 * Summary: 执行蓝绿发布
 */
async function execBgreleaseArrangementEx(request: ExecBgreleaseArrangementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecBgreleaseArrangementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.arrangement.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmBgreleaseArrangementRequest = {
  authToken?: string(name='auth_token'),
  // 概览ID
  arrangementId?: string(name='arrangement_id'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model ConfirmBgreleaseArrangementResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 概览
  arrangement?: string(name='arrangement'),
}

/**
 * Description: 验证确认蓝绿发布
 * Summary: 验证确认蓝绿发布
 */
async function confirmBgreleaseArrangement(request: ConfirmBgreleaseArrangementRequest): ConfirmBgreleaseArrangementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmBgreleaseArrangementEx(request, headers, runtime);
}

/**
 * Description: 验证确认蓝绿发布
 * Summary: 验证确认蓝绿发布
 */
async function confirmBgreleaseArrangementEx(request: ConfirmBgreleaseArrangementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmBgreleaseArrangementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.arrangement.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmBgreleaseArrangementvalidationRequest = {
  authToken?: string(name='auth_token'),
  // 概览ID
  arrangementId?: string(name='arrangement_id'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model ConfirmBgreleaseArrangementvalidationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 概览
  arrangement?: string(name='arrangement'),
}

/**
 * Description: 蓝绿验证确认
 * Summary: 蓝绿验证确认
 */
async function confirmBgreleaseArrangementvalidation(request: ConfirmBgreleaseArrangementvalidationRequest): ConfirmBgreleaseArrangementvalidationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmBgreleaseArrangementvalidationEx(request, headers, runtime);
}

/**
 * Description: 蓝绿验证确认
 * Summary: 蓝绿验证确认
 */
async function confirmBgreleaseArrangementvalidationEx(request: ConfirmBgreleaseArrangementvalidationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmBgreleaseArrangementvalidationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.arrangementvalidation.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryBgreleaseArrangementRequest = {
  authToken?: string(name='auth_token'),
  // 发布概览ID
  arrangementId?: string(name='arrangement_id'),
  // 发布单
  planId?: string(name='plan_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model RetryBgreleaseArrangementResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 概览
  arrangement?: string(name='arrangement'),
}

/**
 * Description: 重试蓝绿发布
 * Summary: 重试蓝绿发布
 */
async function retryBgreleaseArrangement(request: RetryBgreleaseArrangementRequest): RetryBgreleaseArrangementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryBgreleaseArrangementEx(request, headers, runtime);
}

/**
 * Description: 重试蓝绿发布
 * Summary: 重试蓝绿发布
 */
async function retryBgreleaseArrangementEx(request: RetryBgreleaseArrangementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryBgreleaseArrangementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.arrangement.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryBgreleaseTaskRequest = {
  authToken?: string(name='auth_token'),
  // 概览ID
  arrangementId?: string(name='arrangement_id'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // retry_info
  retryInfo?: RetryInfo(name='retry_info'),
  // 任务ID
  taskId?: string(name='task_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model RetryBgreleaseTaskResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 概览
  arrangement?: string(name='arrangement'),
}

/**
 * Description: 重试蓝绿发布任务
 * Summary: 重试蓝绿发布任务
 */
async function retryBgreleaseTask(request: RetryBgreleaseTaskRequest): RetryBgreleaseTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryBgreleaseTaskEx(request, headers, runtime);
}

/**
 * Description: 重试蓝绿发布任务
 * Summary: 重试蓝绿发布任务
 */
async function retryBgreleaseTaskEx(request: RetryBgreleaseTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryBgreleaseTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.task.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SkipBgreleaseTaskRequest = {
  authToken?: string(name='auth_token'),
  // 概览ID
  arrangementId?: string(name='arrangement_id'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // 任务ID
  taskId?: string(name='task_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model SkipBgreleaseTaskResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 概览
  arrangement?: string(name='arrangement'),
}

/**
 * Description: 跳过蓝绿发布任务
 * Summary: 跳过蓝绿发布任务
 */
async function skipBgreleaseTask(request: SkipBgreleaseTaskRequest): SkipBgreleaseTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return skipBgreleaseTaskEx(request, headers, runtime);
}

/**
 * Description: 跳过蓝绿发布任务
 * Summary: 跳过蓝绿发布任务
 */
async function skipBgreleaseTaskEx(request: SkipBgreleaseTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SkipBgreleaseTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.task.skip', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SkipBgreleaseArrangementRequest = {
  authToken?: string(name='auth_token'),
  // 概览ID
  arrangementId?: string(name='arrangement_id'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model SkipBgreleaseArrangementResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 概览
  arrangement?: string(name='arrangement'),
}

/**
 * Description: 跳过蓝绿发布
 * Summary: 跳过蓝绿发布
 */
async function skipBgreleaseArrangement(request: SkipBgreleaseArrangementRequest): SkipBgreleaseArrangementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return skipBgreleaseArrangementEx(request, headers, runtime);
}

/**
 * Description: 跳过蓝绿发布
 * Summary: 跳过蓝绿发布
 */
async function skipBgreleaseArrangementEx(request: SkipBgreleaseArrangementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SkipBgreleaseArrangementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.arrangement.skip', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelBgreleaseArrangementRequest = {
  authToken?: string(name='auth_token'),
  // 概览ID
  arrangementId?: string(name='arrangement_id'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model CancelBgreleaseArrangementResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 概览
  arrangement?: string(name='arrangement'),
}

/**
 * Description: 取消蓝绿发布
 * Summary: 取消蓝绿发布
 */
async function cancelBgreleaseArrangement(request: CancelBgreleaseArrangementRequest): CancelBgreleaseArrangementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelBgreleaseArrangementEx(request, headers, runtime);
}

/**
 * Description: 取消蓝绿发布
 * Summary: 取消蓝绿发布
 */
async function cancelBgreleaseArrangementEx(request: CancelBgreleaseArrangementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelBgreleaseArrangementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.arrangement.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RollbackBgreleaseArrangementRequest = {
  authToken?: string(name='auth_token'),
  // 概览ID
  arrangementId?: string(name='arrangement_id'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // rollback_info
  rollbackInfo?: RollbackInfo(name='rollback_info'),
  // workspace
  workspace?: string(name='workspace'),
}

model RollbackBgreleaseArrangementResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 概览
  arrangement?: string(name='arrangement'),
}

/**
 * Description: 回滚蓝绿发布
 * Summary: 回滚蓝绿发布
 */
async function rollbackBgreleaseArrangement(request: RollbackBgreleaseArrangementRequest): RollbackBgreleaseArrangementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return rollbackBgreleaseArrangementEx(request, headers, runtime);
}

/**
 * Description: 回滚蓝绿发布
 * Summary: 回滚蓝绿发布
 */
async function rollbackBgreleaseArrangementEx(request: RollbackBgreleaseArrangementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RollbackBgreleaseArrangementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.arrangement.rollback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryrollbackBgreleaseArrangementRequest = {
  authToken?: string(name='auth_token'),
  // 概览ID
  arrangementId?: string(name='arrangement_id'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // rollback_info
  rollbackInfo?: RollbackInfo(name='rollback_info'),
  // workspace
  workspace?: string(name='workspace'),
}

model RetryrollbackBgreleaseArrangementResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 概览
  arrangement?: string(name='arrangement'),
}

/**
 * Description: 蓝绿发布回滚重试
 * Summary: 蓝绿发布回滚重试
 */
async function retryrollbackBgreleaseArrangement(request: RetryrollbackBgreleaseArrangementRequest): RetryrollbackBgreleaseArrangementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryrollbackBgreleaseArrangementEx(request, headers, runtime);
}

/**
 * Description: 蓝绿发布回滚重试
 * Summary: 蓝绿发布回滚重试
 */
async function retryrollbackBgreleaseArrangementEx(request: RetryrollbackBgreleaseArrangementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryrollbackBgreleaseArrangementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.arrangement.retryrollback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmrollbackBgreleaseArrangementRequest = {
  authToken?: string(name='auth_token'),
  // 概览ID
  arrangementId?: string(name='arrangement_id'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // retry_rollbacked
  retryRollbacked?: boolean(name='retry_rollbacked'),
  // workspace
  workspace?: string(name='workspace'),
}

model ConfirmrollbackBgreleaseArrangementResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 概览
  arrangement?: string(name='arrangement'),
}

/**
 * Description: 蓝绿发布回滚确认
 * Summary: 蓝绿发布回滚确认
 */
async function confirmrollbackBgreleaseArrangement(request: ConfirmrollbackBgreleaseArrangementRequest): ConfirmrollbackBgreleaseArrangementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmrollbackBgreleaseArrangementEx(request, headers, runtime);
}

/**
 * Description: 蓝绿发布回滚确认
 * Summary: 蓝绿发布回滚确认
 */
async function confirmrollbackBgreleaseArrangementEx(request: ConfirmrollbackBgreleaseArrangementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmrollbackBgreleaseArrangementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.arrangement.confirmrollback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SwitchBgreleaseGraytrafficRequest = {
  authToken?: string(name='auth_token'),
  // 应用ID
  appId?: string(name='app_id'),
  // 执行人
  executorId?: string(name='executor_id'),
  // 执行人
  executorName?: string(name='executor_name'),
  // 来自阿里云用户
  fromAliyun?: boolean(name='from_aliyun'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // 比率
  proportion?: long(name='proportion'),
  // 目标ID
  targetId?: string(name='target_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model SwitchBgreleaseGraytrafficResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 灰度引流进程ID
  processId?: string(name='process_id'),
}

/**
 * Description: 蓝绿发布灰度流量迁移
 * Summary: 蓝绿发布灰度流量迁移
 */
async function switchBgreleaseGraytraffic(request: SwitchBgreleaseGraytrafficRequest): SwitchBgreleaseGraytrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return switchBgreleaseGraytrafficEx(request, headers, runtime);
}

/**
 * Description: 蓝绿发布灰度流量迁移
 * Summary: 蓝绿发布灰度流量迁移
 */
async function switchBgreleaseGraytrafficEx(request: SwitchBgreleaseGraytrafficRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SwitchBgreleaseGraytrafficResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.graytraffic.switch', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RollbackBgreleaseGraytrafficRequest = {
  authToken?: string(name='auth_token'),
  // 概览ID
  arrangementId?: string(name='arrangement_id'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model RollbackBgreleaseGraytrafficResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 回滚进程ID
  processId?: string(name='process_id'),
}

/**
 * Description: 蓝绿发布灰度流量回滚
 * Summary: 蓝绿发布灰度流量回滚
 */
async function rollbackBgreleaseGraytraffic(request: RollbackBgreleaseGraytrafficRequest): RollbackBgreleaseGraytrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return rollbackBgreleaseGraytrafficEx(request, headers, runtime);
}

/**
 * Description: 蓝绿发布灰度流量回滚
 * Summary: 蓝绿发布灰度流量回滚
 */
async function rollbackBgreleaseGraytrafficEx(request: RollbackBgreleaseGraytrafficRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RollbackBgreleaseGraytrafficResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.graytraffic.rollback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBgreleaseGrayprogressRequest = {
  authToken?: string(name='auth_token'),
  // 概览ID
  arrangementId?: string(name='arrangement_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryBgreleaseGrayprogressResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 进度
  progresses?: [ string ](name='progresses'),
}

/**
 * Description: 查询灰度引流进度
 * Summary: 查询灰度引流进度
 */
async function queryBgreleaseGrayprogress(request: QueryBgreleaseGrayprogressRequest): QueryBgreleaseGrayprogressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBgreleaseGrayprogressEx(request, headers, runtime);
}

/**
 * Description: 查询灰度引流进度
 * Summary: 查询灰度引流进度
 */
async function queryBgreleaseGrayprogressEx(request: QueryBgreleaseGrayprogressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBgreleaseGrayprogressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.bgrelease.grayprogress.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetGrayProcessRequest = {
  authToken?: string(name='auth_token'),
  // ID
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model GetGrayProcessResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 进程信息
  processDefinition?: string(name='process_definition'),
}

/**
 * Description: 获取灰度引流进度
 * Summary: 获取灰度引流进度
 */
async function getGrayProcess(request: GetGrayProcessRequest): GetGrayProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getGrayProcessEx(request, headers, runtime);
}

/**
 * Description: 获取灰度引流进度
 * Summary: 获取灰度引流进度
 */
async function getGrayProcessEx(request: GetGrayProcessRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetGrayProcessResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.gray.process.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGrayProgressRequest = {
  authToken?: string(name='auth_token'),
  // ID
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryGrayProgressResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 进度
  progresses?: string(name='progresses'),
}

/**
 * Description: 查询灰度引流进度
 * Summary: 查询灰度引流进度
 */
async function queryGrayProgress(request: QueryGrayProgressRequest): QueryGrayProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGrayProgressEx(request, headers, runtime);
}

/**
 * Description: 查询灰度引流进度
 * Summary: 查询灰度引流进度
 */
async function queryGrayProgressEx(request: QueryGrayProgressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGrayProgressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.gray.progress.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitGrayProcessRequest = {
  authToken?: string(name='auth_token'),
  // ID
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model ReinitGrayProcessResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 进程信息
  processDefinition?: string(name='process_definition'),
}

/**
 * Description: 重新初始化灰度发布
 * Summary: 重新初始化灰度发布
 */
async function reinitGrayProcess(request: ReinitGrayProcessRequest): ReinitGrayProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitGrayProcessEx(request, headers, runtime);
}

/**
 * Description: 重新初始化灰度发布
 * Summary: 重新初始化灰度发布
 */
async function reinitGrayProcessEx(request: ReinitGrayProcessRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitGrayProcessResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.gray.process.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryGrayTaskRequest = {
  authToken?: string(name='auth_token'),
  // 进程 ID
  processId?: string(name='process_id'),
  // retry_info
  retryInfo?: RetryInfo(name='retry_info'),
  // 任务ID
  taskId?: string(name='task_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model RetryGrayTaskResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 进程信息
  processDefinition?: string(name='process_definition'),
}

/**
 * Description: 重试灰度发布子任务
 * Summary: 重试灰度发布子任务
 */
async function retryGrayTask(request: RetryGrayTaskRequest): RetryGrayTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryGrayTaskEx(request, headers, runtime);
}

/**
 * Description: 重试灰度发布子任务
 * Summary: 重试灰度发布子任务
 */
async function retryGrayTaskEx(request: RetryGrayTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryGrayTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.gray.task.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SkipGrayTaskRequest = {
  authToken?: string(name='auth_token'),
  // 进程 ID
  processId?: string(name='process_id'),
  // 任务ID
  taskId?: string(name='task_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model SkipGrayTaskResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 进程信息
  processDefinition?: string(name='process_definition'),
}

/**
 * Description: 跳过灰度发布子任务
 * Summary: 跳过灰度发布子任务
 */
async function skipGrayTask(request: SkipGrayTaskRequest): SkipGrayTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return skipGrayTaskEx(request, headers, runtime);
}

/**
 * Description: 跳过灰度发布子任务
 * Summary: 跳过灰度发布子任务
 */
async function skipGrayTaskEx(request: SkipGrayTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SkipGrayTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.gray.task.skip', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMachineRequest = {
  authToken?: string(name='auth_token'),
  // 当前页
  pageNo?: long(name='page_no'),
  // 页大小，默认 20
  pageSize?: long(name='page_size'),
  // 父节点ID
  parentId?: string(name='parent_id'),
  // pd id
  processDefinitionId?: string(name='process_definition_id'),
  // 对应发布服务 ID
  serviceId?: string(name='service_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryMachineResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 发布机器信息
  machines?: [ string ](name='machines'),
}

/**
 * Description: 查询发布机器信息
 * Summary: 查询发布机器信息
 */
async function queryMachine(request: QueryMachineRequest): QueryMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMachineEx(request, headers, runtime);
}

/**
 * Description: 查询发布机器信息
 * Summary: 查询发布机器信息
 */
async function queryMachineEx(request: QueryMachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machine.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetMachineRequest = {
  authToken?: string(name='auth_token'),
  // 发布机器 ID
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model GetMachineResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 发布机器信息
  machine?: string(name='machine'),
}

/**
 * Description: 获取发布机器信息
 * Summary: 获取发布机器信息
 */
async function getMachine(request: GetMachineRequest): GetMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getMachineEx(request, headers, runtime);
}

/**
 * Description: 获取发布机器信息
 * Summary: 获取发布机器信息
 */
async function getMachineEx(request: GetMachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machine.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMachineProgressRequest = {
  authToken?: string(name='auth_token'),
  // 发布机器ID
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryMachineProgressResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 进度
  progresses?: [ string ](name='progresses'),
}

/**
 * Description: 查询机器发布进度
 * Summary: 查询机器发布进度
 */
async function queryMachineProgress(request: QueryMachineProgressRequest): QueryMachineProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMachineProgressEx(request, headers, runtime);
}

/**
 * Description: 查询机器发布进度
 * Summary: 查询机器发布进度
 */
async function queryMachineProgressEx(request: QueryMachineProgressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMachineProgressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machine.progress.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryMachineRequest = {
  authToken?: string(name='auth_token'),
  // 发布机器 ID
  id?: string(name='id'),
  // retry_info
  retryInfo?: RetryInfo(name='retry_info'),
  // workspace
  workspace?: string(name='workspace'),
}

model RetryMachineResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 发布机器信息
  machine?: string(name='machine'),
}

/**
 * Description: 重试发布机器
 * Summary: 重试发布机器
 */
async function retryMachine(request: RetryMachineRequest): RetryMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryMachineEx(request, headers, runtime);
}

/**
 * Description: 重试发布机器
 * Summary: 重试发布机器
 */
async function retryMachineEx(request: RetryMachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryMachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machine.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SkipMachineRequest = {
  authToken?: string(name='auth_token'),
  // 机器ID
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model SkipMachineResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 机器信息
  machine?: string(name='machine'),
}

/**
 * Description: 忽略机器发布
 * Summary: 忽略机器发布
 */
async function skipMachine(request: SkipMachineRequest): SkipMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return skipMachineEx(request, headers, runtime);
}

/**
 * Description: 忽略机器发布
 * Summary: 忽略机器发布
 */
async function skipMachineEx(request: SkipMachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SkipMachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machine.skip', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelMachineRequest = {
  authToken?: string(name='auth_token'),
  // 发布机器 ID
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model CancelMachineResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 机器信息
  machine?: string(name='machine'),
}

/**
 * Description: 取消机器发布
 * Summary: 取消机器发布
 */
async function cancelMachine(request: CancelMachineRequest): CancelMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelMachineEx(request, headers, runtime);
}

/**
 * Description: 取消机器发布
 * Summary: 取消机器发布
 */
async function cancelMachineEx(request: CancelMachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelMachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machine.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecMachineRequest = {
  authToken?: string(name='auth_token'),
  // 机器 ID
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model ExecMachineResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 机器信息
  machine?: string(name='machine'),
}

/**
 * Description: 触发执行机器发布
 * Summary: 触发执行机器发布
 */
async function execMachine(request: ExecMachineRequest): ExecMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execMachineEx(request, headers, runtime);
}

/**
 * Description: 触发执行机器发布
 * Summary: 触发执行机器发布
 */
async function execMachineEx(request: ExecMachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecMachineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machine.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMachinegroupProgressRequest = {
  authToken?: string(name='auth_token'),
  // ID
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryMachinegroupProgressResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 进度
  progresses?: [ string ](name='progresses'),
}

/**
 * Description: 查询机器分组发布进度
 * Summary: 查询机器分组发布进度
 */
async function queryMachinegroupProgress(request: QueryMachinegroupProgressRequest): QueryMachinegroupProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMachinegroupProgressEx(request, headers, runtime);
}

/**
 * Description: 查询机器分组发布进度
 * Summary: 查询机器分组发布进度
 */
async function queryMachinegroupProgressEx(request: QueryMachinegroupProgressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMachinegroupProgressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machinegroup.progress.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryMachinegroupRequest = {
  authToken?: string(name='auth_token'),
  // 分组 ID
  id?: string(name='id'),
  // retry info
  retryInfo?: RetryInfo(name='retry_info'),
  // workspace
  workspace?: string(name='workspace'),
}

model RetryMachinegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 机器分组信息
  machineGroup?: string(name='machine_group'),
}

/**
 * Description: 重试机器分组
 * Summary: 重试机器分组
 */
async function retryMachinegroup(request: RetryMachinegroupRequest): RetryMachinegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryMachinegroupEx(request, headers, runtime);
}

/**
 * Description: 重试机器分组
 * Summary: 重试机器分组
 */
async function retryMachinegroupEx(request: RetryMachinegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryMachinegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machinegroup.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SkipMachinegroupRequest = {
  authToken?: string(name='auth_token'),
  // 分组 ID
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model SkipMachinegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 分组
  machineGroup?: string(name='machine_group'),
}

/**
 * Description: 忽略分组
 * Summary: 忽略分组
 */
async function skipMachinegroup(request: SkipMachinegroupRequest): SkipMachinegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return skipMachinegroupEx(request, headers, runtime);
}

/**
 * Description: 忽略分组
 * Summary: 忽略分组
 */
async function skipMachinegroupEx(request: SkipMachinegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SkipMachinegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machinegroup.skip', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelMachinegroupRequest = {
  authToken?: string(name='auth_token'),
  // 分组 ID
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model CancelMachinegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 机器分组
  machineGroup?: string(name='machine_group'),
}

/**
 * Description: 分组取消
 * Summary: 分组取消
 */
async function cancelMachinegroup(request: CancelMachinegroupRequest): CancelMachinegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelMachinegroupEx(request, headers, runtime);
}

/**
 * Description: 分组取消
 * Summary: 分组取消
 */
async function cancelMachinegroupEx(request: CancelMachinegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelMachinegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machinegroup.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteMachinegroupRequest = {
  authToken?: string(name='auth_token'),
  // ID
  id?: string(name='id'),
  // recursive
  recursive?: boolean(name='recursive'),
  // workspace
  workspace?: string(name='workspace'),
}

model DeleteMachinegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 机器分组
  machineGroup?: string(name='machine_group'),
}

/**
 * Description: 分组删除
 * Summary: 分组删除
 */
async function deleteMachinegroup(request: DeleteMachinegroupRequest): DeleteMachinegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteMachinegroupEx(request, headers, runtime);
}

/**
 * Description: 分组删除
 * Summary: 分组删除
 */
async function deleteMachinegroupEx(request: DeleteMachinegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMachinegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machinegroup.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMachinegroupRequest = {
  authToken?: string(name='auth_token'),
  // 分组 ID
  machineGroupId?: string(name='machine_group_id'),
  // 发布机器 ID
  machineIds?: [ string ](name='machine_ids'),
  // workspace
  workspace?: string(name='workspace'),
}

model UpdateMachinegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 机器分组信息
  machineGroup?: string(name='machine_group'),
}

/**
 * Description: 更新分组
 * Summary: 更新分组
 */
async function updateMachinegroup(request: UpdateMachinegroupRequest): UpdateMachinegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMachinegroupEx(request, headers, runtime);
}

/**
 * Description: 更新分组
 * Summary: 更新分组
 */
async function updateMachinegroupEx(request: UpdateMachinegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMachinegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machinegroup.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmMachinegroupRequest = {
  authToken?: string(name='auth_token'),
  // 分组id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model ConfirmMachinegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 分组信息
  machineGroup?: string(name='machine_group'),
}

/**
 * Description: 机器分组确认
 * Summary: 机器分组确认
 */
async function confirmMachinegroup(request: ConfirmMachinegroupRequest): ConfirmMachinegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmMachinegroupEx(request, headers, runtime);
}

/**
 * Description: 机器分组确认
 * Summary: 机器分组确认
 */
async function confirmMachinegroupEx(request: ConfirmMachinegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmMachinegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machinegroup.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryMachinegroupProgressRequest = {
  authToken?: string(name='auth_token'),
  // 当前页，默认 1
  pageNo?: long(name='page_no'),
  // 分页大小，默认 20
  pageSize?: long(name='page_size'),
  // 父节点 ID
  parentId?: string(name='parent_id'),
  // 发布单 ID
  planId?: string(name='plan_id'),
  // 发布进程 ID
  processDefinitionId?: string(name='process_definition_id'),
  // 发布服务 ID
  serviceId?: string(name='service_id'),
  // 状态
  state?: string(name='state'),
  // workspace
  workspace?: string(name='workspace'),
}

model BatchqueryMachinegroupProgressResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 机器分组列表
  machineGroups?: [ string ](name='machine_groups'),
}

/**
 * Description: 机器分组进度批量查询
 * Summary: 机器分组进度批量查询
 */
async function batchqueryMachinegroupProgress(request: BatchqueryMachinegroupProgressRequest): BatchqueryMachinegroupProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryMachinegroupProgressEx(request, headers, runtime);
}

/**
 * Description: 机器分组进度批量查询
 * Summary: 机器分组进度批量查询
 */
async function batchqueryMachinegroupProgressEx(request: BatchqueryMachinegroupProgressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryMachinegroupProgressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machinegroup.progress.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmMachinegroupReserveRequest = {
  authToken?: string(name='auth_token'),
  // 分组 ID
  id?: string(name='id'),
  // 是否需要预确认分组
  reserved?: boolean(name='reserved'),
  // workspace
  workspace?: string(name='workspace'),
}

model ConfirmMachinegroupReserveResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 分组信息
  machineGroup?: string(name='machine_group'),
}

/**
 * Description: 分区预确认
 * Summary: 分区预确认
 */
async function confirmMachinegroupReserve(request: ConfirmMachinegroupReserveRequest): ConfirmMachinegroupReserveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmMachinegroupReserveEx(request, headers, runtime);
}

/**
 * Description: 分区预确认
 * Summary: 分区预确认
 */
async function confirmMachinegroupReserveEx(request: ConfirmMachinegroupReserveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmMachinegroupReserveResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machinegroup.reserve.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMachinegroupSlbmountweightRequest = {
  authToken?: string(name='auth_token'),
  // from_aliyun
  fromAliyun?: boolean(name='from_aliyun'),
  // 分组 ID
  machineGroupId?: string(name='machine_group_id'),
  // 挂载权重信息列表
  slbMountInfoList?: [ string ](name='slb_mount_info_list'),
  // workspace
  workspace?: string(name='workspace'),
}

model UpdateMachinegroupSlbmountweightResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 请求 ID，用于追踪后续结果
  requestIds?: [ string ](name='request_ids'),
}

/**
 * Description: 修改分组 SLB 权重
 * Summary: 修改分组 SLB 权重
 */
async function updateMachinegroupSlbmountweight(request: UpdateMachinegroupSlbmountweightRequest): UpdateMachinegroupSlbmountweightResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMachinegroupSlbmountweightEx(request, headers, runtime);
}

/**
 * Description: 修改分组 SLB 权重
 * Summary: 修改分组 SLB 权重
 */
async function updateMachinegroupSlbmountweightEx(request: UpdateMachinegroupSlbmountweightRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMachinegroupSlbmountweightResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machinegroup.slbmountweight.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMachinegroupSlbmountprogressRequest = {
  authToken?: string(name='auth_token'),
  // 分组ID
  machineGroupId?: string(name='machine_group_id'),
  // 请求 ID 列表
  requestIds?: [ string ](name='request_ids'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryMachinegroupSlbmountprogressResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 执行进度
  executorProgress?: string(name='executor_progress'),
}

/**
 * Description: 查询分组 SLB 挂载进度
 * Summary: 查询分组 SLB 挂载进度
 */
async function queryMachinegroupSlbmountprogress(request: QueryMachinegroupSlbmountprogressRequest): QueryMachinegroupSlbmountprogressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMachinegroupSlbmountprogressEx(request, headers, runtime);
}

/**
 * Description: 查询分组 SLB 挂载进度
 * Summary: 查询分组 SLB 挂载进度
 */
async function queryMachinegroupSlbmountprogressEx(request: QueryMachinegroupSlbmountprogressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMachinegroupSlbmountprogressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machinegroup.slbmountprogress.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMachinegroupSlbmountRequest = {
  authToken?: string(name='auth_token'),
  // 分组 id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryMachinegroupSlbmountResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // SLB 挂载信息
  slbMountInfoList?: [ string ](name='slb_mount_info_list'),
}

/**
 * Description: 查询 slb 挂载状态
 * Summary: 查询 slb 挂载状态
 */
async function queryMachinegroupSlbmount(request: QueryMachinegroupSlbmountRequest): QueryMachinegroupSlbmountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMachinegroupSlbmountEx(request, headers, runtime);
}

/**
 * Description: 查询 slb 挂载状态
 * Summary: 查询 slb 挂载状态
 */
async function queryMachinegroupSlbmountEx(request: QueryMachinegroupSlbmountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMachinegroupSlbmountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machinegroup.slbmount.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetMachinegroupRequest = {
  authToken?: string(name='auth_token'),
  // 分组 ID
  id?: string(name='id'),
  // 是否带上机器信息，默认 false
  withMachines?: boolean(name='with_machines'),
  // workspace
  workspace?: string(name='workspace'),
}

model GetMachinegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 分组信息
  machineGroup?: string(name='machine_group'),
}

/**
 * Description: 获取分组信息
 * Summary: 获取分组信息
 */
async function getMachinegroup(request: GetMachinegroupRequest): GetMachinegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getMachinegroupEx(request, headers, runtime);
}

/**
 * Description: 获取分组信息
 * Summary: 获取分组信息
 */
async function getMachinegroupEx(request: GetMachinegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMachinegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machinegroup.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SkipMachinetaskRequest = {
  authToken?: string(name='auth_token'),
  // 机器 ID
  machineId?: string(name='machine_id'),
  // 任务 ID
  taskId?: string(name='task_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model SkipMachinetaskResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 进度
  progress?: string(name='progress'),
}

/**
 * Description: 忽略分组任务
 * Summary: 忽略分组任务
 */
async function skipMachinetask(request: SkipMachinetaskRequest): SkipMachinetaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return skipMachinetaskEx(request, headers, runtime);
}

/**
 * Description: 忽略分组任务
 * Summary: 忽略分组任务
 */
async function skipMachinetaskEx(request: SkipMachinetaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SkipMachinetaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machinetask.skip', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryMachinetaskRequest = {
  authToken?: string(name='auth_token'),
  // 机器 ID
  machineId?: string(name='machine_id'),
  // retry_info
  retryInfo?: RetryInfo(name='retry_info'),
  // 任务 ID
  taskId?: string(name='task_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model RetryMachinetaskResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 执行进度
  progress?: string(name='progress'),
}

/**
 * Description: 机器任务重试
 * Summary: 机器任务重试
 */
async function retryMachinetask(request: RetryMachinetaskRequest): RetryMachinetaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryMachinetaskEx(request, headers, runtime);
}

/**
 * Description: 机器任务重试
 * Summary: 机器任务重试
 */
async function retryMachinetaskEx(request: RetryMachinetaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryMachinetaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.machinetask.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMetaCellRequest = {
  authToken?: string(name='auth_token'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryMetaCellResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 部署单元列表
  cells?: [ string ](name='cells'),
}

/**
 * Description: 查询部署单元
 * Summary: 查询部署单元
 */
async function queryMetaCell(request: QueryMetaCellRequest): QueryMetaCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMetaCellEx(request, headers, runtime);
}

/**
 * Description: 查询部署单元
 * Summary: 查询部署单元
 */
async function queryMetaCellEx(request: QueryMetaCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMetaCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.meta.cell.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateMetaDeploymentcellRequest = {
  authToken?: string(name='auth_token'),
  // deployment_cell
  deploymentCell?: string(name='deployment_cell'),
  // workspace
  workspace?: string(name='workspace'),
}

model CreateMetaDeploymentcellResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // deployment cell
  deploymentCell?: string(name='deployment_cell'),
}

/**
 * Description: 创建 deployment cell
 * Summary: 创建 deployment cell
 */
async function createMetaDeploymentcell(request: CreateMetaDeploymentcellRequest): CreateMetaDeploymentcellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createMetaDeploymentcellEx(request, headers, runtime);
}

/**
 * Description: 创建 deployment cell
 * Summary: 创建 deployment cell
 */
async function createMetaDeploymentcellEx(request: CreateMetaDeploymentcellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMetaDeploymentcellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.meta.deploymentcell.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMetaDeploymentcellRequest = {
  authToken?: string(name='auth_token'),
  // deployment_cell
  deploymentCell?: string(name='deployment_cell'),
  // workspace
  workspace?: string(name='workspace'),
}

model UpdateMetaDeploymentcellResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // deployment cell
  deploymentCell?: string(name='deployment_cell'),
}

/**
 * Description: 更新 deployment zone
 * Summary: 更新 deployment zone
 */
async function updateMetaDeploymentcell(request: UpdateMetaDeploymentcellRequest): UpdateMetaDeploymentcellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMetaDeploymentcellEx(request, headers, runtime);
}

/**
 * Description: 更新 deployment zone
 * Summary: 更新 deployment zone
 */
async function updateMetaDeploymentcellEx(request: UpdateMetaDeploymentcellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMetaDeploymentcellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.meta.deploymentcell.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetMetaDeploymentcellRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
}

model GetMetaDeploymentcellResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // deployment cell
  deploymentCell?: string(name='deployment_cell'),
}

/**
 * Description: 获取 deployment cell
 * Summary: 获取 deployment cell
 */
async function getMetaDeploymentcell(request: GetMetaDeploymentcellRequest): GetMetaDeploymentcellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getMetaDeploymentcellEx(request, headers, runtime);
}

/**
 * Description: 获取 deployment cell
 * Summary: 获取 deployment cell
 */
async function getMetaDeploymentcellEx(request: GetMetaDeploymentcellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMetaDeploymentcellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.meta.deploymentcell.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMetaDeploymentcellRequest = {
  authToken?: string(name='auth_token'),
  // ids
  ids?: [ string ](name='ids'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryMetaDeploymentcellResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // deployment cells
  deploymentCells?: [ string ](name='deployment_cells'),
}

/**
 * Description: 批量获取 deployment cell
 * Summary: 批量获取 deployment cell
 */
async function queryMetaDeploymentcell(request: QueryMetaDeploymentcellRequest): QueryMetaDeploymentcellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMetaDeploymentcellEx(request, headers, runtime);
}

/**
 * Description: 批量获取 deployment cell
 * Summary: 批量获取 deployment cell
 */
async function queryMetaDeploymentcellEx(request: QueryMetaDeploymentcellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMetaDeploymentcellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.meta.deploymentcell.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateNotificationConfigRequest = {
  authToken?: string(name='auth_token'),
  // cloud web url
  cloudWebUrl?: string(name='cloud_web_url'),
  // 是否开启，默认关闭
  enabled?: boolean(name='enabled'),
  // modified_version
  modifiedVersion?: long(name='modified_version'),
  // 接受者
  receivers?: [ string ](name='receivers'),
  // 类型
  type?: string(name='type'),
  // workspace
  workspace?: string(name='workspace'),
}

model CreateNotificationConfigResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // config
  config?: string(name='config'),
}

/**
 * Description: 创建通知配置
 * Summary: 创建通知配置
 */
async function createNotificationConfig(request: CreateNotificationConfigRequest): CreateNotificationConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createNotificationConfigEx(request, headers, runtime);
}

/**
 * Description: 创建通知配置
 * Summary: 创建通知配置
 */
async function createNotificationConfigEx(request: CreateNotificationConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateNotificationConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.notification.config.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateNotificationConfigRequest = {
  authToken?: string(name='auth_token'),
  // cloud web url
  cloudWebUrl?: string(name='cloud_web_url'),
  // 是否开启
  enabled?: boolean(name='enabled'),
  // id
  id?: string(name='id'),
  // modified_version
  modifiedVersion?: long(name='modified_version'),
  // 接受者
  receivers?: [ string ](name='receivers'),
  // 类型
  type?: string(name='type'),
  // workspace
  workspace?: string(name='workspace'),
}

model UpdateNotificationConfigResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // config
  config?: string(name='config'),
}

/**
 * Description: 更新通知配置
 * Summary: 更新通知配置
 */
async function updateNotificationConfig(request: UpdateNotificationConfigRequest): UpdateNotificationConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateNotificationConfigEx(request, headers, runtime);
}

/**
 * Description: 更新通知配置
 * Summary: 更新通知配置
 */
async function updateNotificationConfigEx(request: UpdateNotificationConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateNotificationConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.notification.config.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNotificationConfigRequest = {
  authToken?: string(name='auth_token'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryNotificationConfigResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 通知配置列表
  configs?: [ string ](name='configs'),
}

/**
 * Description: 查询通知配置
 * Summary: 查询通知配置
 */
async function queryNotificationConfig(request: QueryNotificationConfigRequest): QueryNotificationConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNotificationConfigEx(request, headers, runtime);
}

/**
 * Description: 查询通知配置
 * Summary: 查询通知配置
 */
async function queryNotificationConfigEx(request: QueryNotificationConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNotificationConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.notification.config.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteNotificationConfigRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model DeleteNotificationConfigResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 成功
  success?: boolean(name='success'),
}

/**
 * Description: 删除通知配置
 * Summary: 删除通知配置
 */
async function deleteNotificationConfig(request: DeleteNotificationConfigRequest): DeleteNotificationConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteNotificationConfigEx(request, headers, runtime);
}

/**
 * Description: 删除通知配置
 * Summary: 删除通知配置
 */
async function deleteNotificationConfigEx(request: DeleteNotificationConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteNotificationConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.notification.config.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOperatorRequest = {
  authToken?: string(name='auth_token'),
  // 用户 ID
  customerId?: string(name='customer_id'),
  // 当前页
  pageNo?: long(name='page_no'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryOperatorResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 操作人列表
  operators?: [ string ](name='operators'),
}

/**
 * Description: 查询用户信息
 * Summary: 查询用户信息
 */
async function queryOperator(request: QueryOperatorRequest): QueryOperatorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOperatorEx(request, headers, runtime);
}

/**
 * Description: 查询用户信息
 * Summary: 查询用户信息
 */
async function queryOperatorEx(request: QueryOperatorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOperatorResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.operator.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RollbackPlanServiceRequest = {
  authToken?: string(name='auth_token'),
  // 发布单ID
  planId?: string(name='plan_id'),
  // rollback_info
  rollbackInfo?: RollbackInfo(name='rollback_info'),
  // 发布服务
  service?: string(name='service'),
  // workspace
  workspace?: string(name='workspace'),
}

model RollbackPlanServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 发布单信息
  plan?: string(name='plan'),
}

/**
 * Description: 回滚
 * Summary: 回滚
 */
async function rollbackPlanService(request: RollbackPlanServiceRequest): RollbackPlanServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return rollbackPlanServiceEx(request, headers, runtime);
}

/**
 * Description: 回滚
 * Summary: 回滚
 */
async function rollbackPlanServiceEx(request: RollbackPlanServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RollbackPlanServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.service.rollback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreatePlanRequest = {
  authToken?: string(name='auth_token'),
  // data
  data?: string(name='data'),
  // from aliyun
  fromAliyun?: boolean(name='from_aliyun'),
  // workspace
  workspace?: string(name='workspace'),
}

model CreatePlanResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // plan
  plan?: string(name='plan'),
}

/**
 * Description: 创建发布单
 * Summary: 创建发布单
 */
async function createPlan(request: CreatePlanRequest): CreatePlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createPlanEx(request, headers, runtime);
}

/**
 * Description: 创建发布单
 * Summary: 创建发布单
 */
async function createPlanEx(request: CreatePlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePlanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckPlanRequest = {
  authToken?: string(name='auth_token'),
  // data
  data?: string(name='data'),
  // from_aliyun
  fromAliyun?: boolean(name='from_aliyun'),
  // workspace
  workspace?: string(name='workspace'),
}

model CheckPlanResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
  // error_reasons
  errorReasons?: [ string ](name='error_reasons'),
  // validation_messages
  validationMessages?: string(name='validation_messages'),
}

/**
 * Description: 发布单校验
 * Summary: 发布单校验
 */
async function checkPlan(request: CheckPlanRequest): CheckPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkPlanEx(request, headers, runtime);
}

/**
 * Description: 发布单校验
 * Summary: 发布单校验
 */
async function checkPlanEx(request: CheckPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckPlanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckPlanOperationRequest = {
  authToken?: string(name='auth_token'),
  // data
  data?: string(name='data'),
  // from_aliyun
  fromAliyun?: boolean(name='from_aliyun'),
  // workspace
  workspace?: string(name='workspace'),
}

model CheckPlanOperationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
  // error_messages
  errorReasons?: [ string ](name='error_reasons'),
  // validation_messages
  validationMessages?: string(name='validation_messages'),
}

/**
 * Description: 校验运维单请求
 * Summary: 校验运维单请求
 */
async function checkPlanOperation(request: CheckPlanOperationRequest): CheckPlanOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkPlanOperationEx(request, headers, runtime);
}

/**
 * Description: 校验运维单请求
 * Summary: 校验运维单请求
 */
async function checkPlanOperationEx(request: CheckPlanOperationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckPlanOperationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.operation.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreatePlanOperationRequest = {
  authToken?: string(name='auth_token'),
  // data
  data?: string(name='data'),
  // from_aliyun
  fromAliyun?: boolean(name='from_aliyun'),
  // workspace
  workspace?: string(name='workspace'),
}

model CreatePlanOperationResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // ops_plan
  opsPlan?: string(name='ops_plan'),
}

/**
 * Description: 创建运维单
 * Summary: 创建运维单
 */
async function createPlanOperation(request: CreatePlanOperationRequest): CreatePlanOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createPlanOperationEx(request, headers, runtime);
}

/**
 * Description: 创建运维单
 * Summary: 创建运维单
 */
async function createPlanOperationEx(request: CreatePlanOperationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePlanOperationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.operation.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreatePlanAdvancedRequest = {
  authToken?: string(name='auth_token'),
  // plan
  opsPlan?: string(name='ops_plan'),
  // workspace
  workspace?: string(name='workspace'),
}

model CreatePlanAdvancedResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // ops_plan
  opsPlan?: string(name='ops_plan'),
}

/**
 * Description: 创建发布单
 * Summary: 创建发布单
 */
async function createPlanAdvanced(request: CreatePlanAdvancedRequest): CreatePlanAdvancedResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createPlanAdvancedEx(request, headers, runtime);
}

/**
 * Description: 创建发布单
 * Summary: 创建发布单
 */
async function createPlanAdvancedEx(request: CreatePlanAdvancedRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePlanAdvancedResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.advanced.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitPlanRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model ReinitPlanResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // ops_plan
  opsPlan?: string(name='ops_plan'),
}

/**
 * Description: 重新初始化发布单
 * Summary: 重新初始化发布单
 */
async function reinitPlan(request: ReinitPlanRequest): ReinitPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitPlanEx(request, headers, runtime);
}

/**
 * Description: 重新初始化发布单
 * Summary: 重新初始化发布单
 */
async function reinitPlanEx(request: ReinitPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitPlanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetPlanRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model GetPlanResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 发布单详情
  opsPlan?: string(name='ops_plan'),
}

/**
 * Description: 获取发布单信息
 * Summary: 获取发布单信息
 */
async function getPlan(request: GetPlanRequest): GetPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getPlanEx(request, headers, runtime);
}

/**
 * Description: 获取发布单信息
 * Summary: 获取发布单信息
 */
async function getPlanEx(request: GetPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPlanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetPlanBasicRequest = {
  authToken?: string(name='auth_token'),
  // show_basic
  showBasic?: boolean(name='show_basic'),
  // time_series_id
  timeSeriesId?: string(name='time_series_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model GetPlanBasicResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // ops_plan
  opsPlan?: string(name='ops_plan'),
}

/**
 * Description: 获取发布单基本信息
 * Summary: 获取发布单基本信息
 */
async function getPlanBasic(request: GetPlanBasicRequest): GetPlanBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getPlanBasicEx(request, headers, runtime);
}

/**
 * Description: 获取发布单基本信息
 * Summary: 获取发布单基本信息
 */
async function getPlanBasicEx(request: GetPlanBasicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPlanBasicResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.basic.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetPlanProgressRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model GetPlanProgressResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // progress
  progress?: string(name='progress'),
}

/**
 * Description: 获取发布进度
 * Summary: 获取发布进度
 */
async function getPlanProgress(request: GetPlanProgressRequest): GetPlanProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getPlanProgressEx(request, headers, runtime);
}

/**
 * Description: 获取发布进度
 * Summary: 获取发布进度
 */
async function getPlanProgressEx(request: GetPlanProgressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPlanProgressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.progress.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPlanRequest = {
  authToken?: string(name='auth_token'),
  // gmtCreateEnd
  gmtCreateEnd?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create_end'),
  // gmtCreateStart
  gmtCreateStart?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create_start'),
  // initialByTag
  initialByTag?: string(name='initial_by_tag'),
  // name
  name?: string(name='name'),
  // opsModes
  opsModes?: [ string ](name='ops_modes'),
  // ops_types
  opsTypes?: [ string ](name='ops_types'),
  // page no
  pageNo?: long(name='page_no'),
  // page size
  pageSize?: long(name='page_size'),
  // plan_ids
  planIds?: [ string ](name='plan_ids'),
  // plan_time_serials_id
  planTimeSerialsId?: string(name='plan_time_serials_id'),
  // releaseModes
  releaseModes?: [ string ](name='release_modes'),
  // serviceName
  serviceName?: string(name='service_name'),
  // states
  states?: [ string ](name='states'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryPlanResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 列表
  list?: [ string ](name='list'),
  // page_no
  pageNo?: long(name='page_no'),
  // page_size
  pageSize?: long(name='page_size'),
  // total_size
  totalSize?: long(name='total_size'),
}

/**
 * Description: 查询发布单
 * Summary: 查询发布单
 */
async function queryPlan(request: QueryPlanRequest): QueryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPlanEx(request, headers, runtime);
}

/**
 * Description: 查询发布单
 * Summary: 查询发布单
 */
async function queryPlanEx(request: QueryPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPlanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CountPlanStateRequest = {
  authToken?: string(name='auth_token'),
  // gmt_create_end
  gmtCreateEnd?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create_end'),
  // gmtCreateStart
  gmtCreateStart?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create_start'),
  // initial_by_tag
  initialByTag?: string(name='initial_by_tag'),
  // name
  name?: string(name='name'),
  // ops_modes
  opsModes?: [ string ](name='ops_modes'),
  // ops_types
  opsTypes?: [ string ](name='ops_types'),
  // page no
  pageNo?: long(name='page_no'),
  // page size
  pageSize?: long(name='page_size'),
  // plan ids
  planIds?: [ string ](name='plan_ids'),
  // plan_time_serials_id
  planTimeSerialsId?: string(name='plan_time_serials_id'),
  // release_modes
  releaseModes?: [ string ](name='release_modes'),
  // service_name
  serviceName?: string(name='service_name'),
  // states
  states?: [ string ](name='states'),
  // workspace
  workspace?: string(name='workspace'),
}

model CountPlanStateResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // state_counts
  stateCounts?: [ string ](name='state_counts'),
}

/**
 * Description: 发布单状态统计
 * Summary: 发布单状态统计
 */
async function countPlanState(request: CountPlanStateRequest): CountPlanStateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return countPlanStateEx(request, headers, runtime);
}

/**
 * Description: 发布单状态统计
 * Summary: 发布单状态统计
 */
async function countPlanStateEx(request: CountPlanStateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountPlanStateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.state.count', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecPlanRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model ExecPlanResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // ops_plan
  opsPlan?: string(name='ops_plan'),
}

/**
 * Description:  执行
 * Summary:  执行
 */
async function execPlan(request: ExecPlanRequest): ExecPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execPlanEx(request, headers, runtime);
}

/**
 * Description:  执行
 * Summary:  执行
 */
async function execPlanEx(request: ExecPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecPlanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryPlanRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model RetryPlanResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // ops plan
  opsPlan?: string(name='ops_plan'),
}

/**
 * Description: 重试
 * Summary: 重试
 */
async function retryPlan(request: RetryPlanRequest): RetryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryPlanEx(request, headers, runtime);
}

/**
 * Description: 重试
 * Summary: 重试
 */
async function retryPlanEx(request: RetryPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryPlanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelPlanRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // reason
  reason?: string(name='reason'),
  // workspace
  workspace?: string(name='workspace'),
}

model CancelPlanResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // ops_plan
  opsPlan?: string(name='ops_plan'),
}

/**
 * Description: 取消发布
 * Summary: 取消发布
 */
async function cancelPlan(request: CancelPlanRequest): CancelPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelPlanEx(request, headers, runtime);
}

/**
 * Description: 取消发布
 * Summary: 取消发布
 */
async function cancelPlanEx(request: CancelPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelPlanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RollbackPlanRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // rollback_info
  rollbackInfo?: RollbackInfo(name='rollback_info'),
  // workspace
  workspace?: string(name='workspace'),
}

model RollbackPlanResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // ops_plan
  opsPlan?: string(name='ops_plan'),
}

/**
 * Description: 回滚发布单
 * Summary: 回滚发布单
 */
async function rollbackPlan(request: RollbackPlanRequest): RollbackPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return rollbackPlanEx(request, headers, runtime);
}

/**
 * Description: 回滚发布单
 * Summary: 回滚发布单
 */
async function rollbackPlanEx(request: RollbackPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RollbackPlanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.plan.rollback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTaskSummaryRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model GetTaskSummaryResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // task
  task?: string(name='task'),
}

/**
 * Description: 获取任务详情
 * Summary: 获取任务详情
 */
async function getTaskSummary(request: GetTaskSummaryRequest): GetTaskSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTaskSummaryEx(request, headers, runtime);
}

/**
 * Description: 获取任务详情
 * Summary: 获取任务详情
 */
async function getTaskSummaryEx(request: GetTaskSummaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTaskSummaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.task.summary.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SkipTaskRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model SkipTaskResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // task
  task?: string(name='task'),
}

/**
 * Description: 忽略任务
 * Summary: 忽略任务
 */
async function skipTask(request: SkipTaskRequest): SkipTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return skipTaskEx(request, headers, runtime);
}

/**
 * Description: 忽略任务
 * Summary: 忽略任务
 */
async function skipTaskEx(request: SkipTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SkipTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.task.skip', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryTaskRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model RetryTaskResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // task
  task?: string(name='task'),
}

/**
 * Description: 重试任务
 * Summary: 重试任务
 */
async function retryTask(request: RetryTaskRequest): RetryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryTaskEx(request, headers, runtime);
}

/**
 * Description: 重试任务
 * Summary: 重试任务
 */
async function retryTaskEx(request: RetryTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.task.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRoleRequest = {
  authToken?: string(name='auth_token'),
  // from_aliyun
  fromAliyun?: boolean(name='from_aliyun'),
  // page_size
  pageSize?: long(name='page_size'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryRoleResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 角色信息
  roles?: [ string ](name='roles'),
}

/**
 * Description: 查询角色信息
 * Summary: 查询角色信息
 */
async function queryRole(request: QueryRoleRequest): QueryRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRoleEx(request, headers, runtime);
}

/**
 * Description: 查询角色信息
 * Summary: 查询角色信息
 */
async function queryRoleEx(request: QueryRoleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRoleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.role.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateServicegroupcollectionRequest = {
  authToken?: string(name='auth_token'),
  // arrangement_id
  arrangementId?: string(name='arrangement_id'),
  // process_definition_id
  processDefinitionId?: string(name='process_definition_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model CreateServicegroupcollectionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 集合信息
  collection?: string(name='collection'),
}

/**
 * Description: 创建应用服务分组集合
 * Summary: 创建应用服务分组集合
 */
async function createServicegroupcollection(request: CreateServicegroupcollectionRequest): CreateServicegroupcollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createServicegroupcollectionEx(request, headers, runtime);
}

/**
 * Description: 创建应用服务分组集合
 * Summary: 创建应用服务分组集合
 */
async function createServicegroupcollectionEx(request: CreateServicegroupcollectionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateServicegroupcollectionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.servicegroupcollection.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteServicegroupcollectionRequest = {
  authToken?: string(name='auth_token'),
  // arrangement_id
  arrangementId?: string(name='arrangement_id'),
  // process_definition_id
  processDefinitionId?: string(name='process_definition_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model DeleteServicegroupcollectionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 集合
  collections?: [ string ](name='collections'),
}

/**
 * Description: 清除应用服务发布分组集合
 * Summary: 清除应用服务发布分组集合
 */
async function deleteServicegroupcollection(request: DeleteServicegroupcollectionRequest): DeleteServicegroupcollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteServicegroupcollectionEx(request, headers, runtime);
}

/**
 * Description: 清除应用服务发布分组集合
 * Summary: 清除应用服务发布分组集合
 */
async function deleteServicegroupcollectionEx(request: DeleteServicegroupcollectionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteServicegroupcollectionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.servicegroupcollection.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryServicegroupRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model RetryServicegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // group
  group?: string(name='group'),
}

/**
 * Description: 重试分组
 * Summary: 重试分组
 */
async function retryServicegroup(request: RetryServicegroupRequest): RetryServicegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryServicegroupEx(request, headers, runtime);
}

/**
 * Description: 重试分组
 * Summary: 重试分组
 */
async function retryServicegroupEx(request: RetryServicegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryServicegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.servicegroup.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecServicegroupRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model ExecServicegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 分组
  group?: string(name='group'),
}

/**
 * Description: 执行发布分组
 * Summary: 执行发布分组
 */
async function execServicegroup(request: ExecServicegroupRequest): ExecServicegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execServicegroupEx(request, headers, runtime);
}

/**
 * Description: 执行发布分组
 * Summary: 执行发布分组
 */
async function execServicegroupEx(request: ExecServicegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecServicegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.servicegroup.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SkipServicegroupRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model SkipServicegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 分组
  group?: string(name='group'),
}

/**
 * Description: 忽略分组
 * Summary: 忽略分组
 */
async function skipServicegroup(request: SkipServicegroupRequest): SkipServicegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return skipServicegroupEx(request, headers, runtime);
}

/**
 * Description: 忽略分组
 * Summary: 忽略分组
 */
async function skipServicegroupEx(request: SkipServicegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SkipServicegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.servicegroup.skip', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateServicegroupRequest = {
  authToken?: string(name='auth_token'),
  // append
  append?: boolean(name='append'),
  // service_group_id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model CreateServicegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 分组
  group?: string(name='group'),
}

/**
 * Description: 创建发布分组
 * Summary: 创建发布分组
 */
async function createServicegroup(request: CreateServicegroupRequest): CreateServicegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createServicegroupEx(request, headers, runtime);
}

/**
 * Description: 创建发布分组
 * Summary: 创建发布分组
 */
async function createServicegroupEx(request: CreateServicegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateServicegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.servicegroup.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteServicegroupRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model DeleteServicegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 分组
  group?: string(name='group'),
}

/**
 * Description: 删除发布分组
 * Summary: 删除发布分组
 */
async function deleteServicegroup(request: DeleteServicegroupRequest): DeleteServicegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteServicegroupEx(request, headers, runtime);
}

/**
 * Description: 删除发布分组
 * Summary: 删除发布分组
 */
async function deleteServicegroupEx(request: DeleteServicegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteServicegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.servicegroup.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SwitchServicegroupRequest = {
  authToken?: string(name='auth_token'),
  // service_group_id
  serviceGroupId?: string(name='service_group_id'),
  // service_id
  serviceId?: string(name='service_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model SwitchServicegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // groups
  groups?: [ string ](name='groups'),
}

/**
 * Description: 转换分组
 * Summary: 转换分组
 */
async function switchServicegroup(request: SwitchServicegroupRequest): SwitchServicegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return switchServicegroupEx(request, headers, runtime);
}

/**
 * Description: 转换分组
 * Summary: 转换分组
 */
async function switchServicegroupEx(request: SwitchServicegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SwitchServicegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.servicegroup.switch', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetServiceRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // 是否带上机器信息
  withMachineGroups?: boolean(name='with_machine_groups'),
  // workspace
  workspace?: string(name='workspace'),
}

model GetServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // service
  service?: string(name='service'),
}

/**
 * Description: 获取发布服务详情
 * Summary: 获取发布服务详情
 */
async function getService(request: GetServiceRequest): GetServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getServiceEx(request, headers, runtime);
}

/**
 * Description: 获取发布服务详情
 * Summary: 获取发布服务详情
 */
async function getServiceEx(request: GetServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetServiceProgressRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model GetServiceProgressResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 进度
  progress?: string(name='progress'),
}

/**
 * Description: 获取应用发布信息
 * Summary: 获取应用发布信息
 */
async function getServiceProgress(request: GetServiceProgressRequest): GetServiceProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getServiceProgressEx(request, headers, runtime);
}

/**
 * Description: 获取应用发布信息
 * Summary: 获取应用发布信息
 */
async function getServiceProgressEx(request: GetServiceProgressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetServiceProgressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.progress.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryServiceProgressRequest = {
  authToken?: string(name='auth_token'),
  // depth
  depth?: long(name='depth'),
  // gmt_create_end
  gmtCreateEnd?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create_end'),
  // gmt_create_start
  gmtCreateStart?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create_start'),
  // ids
  ids?: [ string ](name='ids'),
  // name
  name?: string(name='name'),
  // ops_types
  opsTypes?: [ string ](name='ops_types'),
  // page_no
  pageNo?: long(name='page_no'),
  // page_size
  pageSize?: long(name='page_size'),
  // process_definition_id
  processDefinitionId?: string(name='process_definition_id'),
  // service_group_collection_id
  serviceGroupCollectionId?: string(name='service_group_collection_id'),
  // service_paas_id
  servicePaasId?: string(name='service_paas_id'),
  // state
  state?: string(name='state'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryServiceProgressResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // progresses
  progresses?: [ string ](name='progresses'),
}

/**
 * Description: 查询发布进度
 * Summary: 查询发布进度
 */
async function queryServiceProgress(request: QueryServiceProgressRequest): QueryServiceProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryServiceProgressEx(request, headers, runtime);
}

/**
 * Description: 查询发布进度
 * Summary: 查询发布进度
 */
async function queryServiceProgressEx(request: QueryServiceProgressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryServiceProgressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.progress.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryServiceSlbmountRequest = {
  authToken?: string(name='auth_token'),
  // service_id
  serviceId?: string(name='service_id'),
  // slb_id
  slbId?: string(name='slb_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryServiceSlbmountResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // mout_info_list
  mountInfoList?: [ string ](name='mount_info_list'),
}

/**
 * Description: 查询SLB挂载信息
 * Summary: 查询SLB挂载信息
 */
async function queryServiceSlbmount(request: QueryServiceSlbmountRequest): QueryServiceSlbmountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryServiceSlbmountEx(request, headers, runtime);
}

/**
 * Description: 查询SLB挂载信息
 * Summary: 查询SLB挂载信息
 */
async function queryServiceSlbmountEx(request: QueryServiceSlbmountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryServiceSlbmountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.slbmount.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryServiceSlbmountRequest = {
  authToken?: string(name='auth_token'),
  // service_id
  serviceId?: string(name='service_id'),
  // slb_ids
  slbIds?: [ string ](name='slb_ids'),
  // workspace
  workspace?: string(name='workspace'),
}

model BatchqueryServiceSlbmountResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // slb_info_list
  mountInfoList?: [ string ](name='mount_info_list'),
}

/**
 * Description: 批量查询 SLB 挂载信息
 * Summary: 批量查询 SLB 挂载信息
 */
async function batchqueryServiceSlbmount(request: BatchqueryServiceSlbmountRequest): BatchqueryServiceSlbmountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryServiceSlbmountEx(request, headers, runtime);
}

/**
 * Description: 批量查询 SLB 挂载信息
 * Summary: 批量查询 SLB 挂载信息
 */
async function batchqueryServiceSlbmountEx(request: BatchqueryServiceSlbmountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryServiceSlbmountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.slbmount.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateServiceSlbmountRequest = {
  authToken?: string(name='auth_token'),
  // 权重
  mountInfo?: [ Pair ](name='mount_info'),
  // region_identity
  regionIdentity?: string(name='region_identity'),
  // service_id
  serviceId?: string(name='service_id'),
  // slb_id
  slbId?: string(name='slb_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model UpdateServiceSlbmountResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // process_id
  processId?: string(name='process_id'),
}

/**
 * Description: 更新slb挂载权重
 * Summary: 更新slb挂载权重
 */
async function updateServiceSlbmount(request: UpdateServiceSlbmountRequest): UpdateServiceSlbmountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateServiceSlbmountEx(request, headers, runtime);
}

/**
 * Description: 更新slb挂载权重
 * Summary: 更新slb挂载权重
 */
async function updateServiceSlbmountEx(request: UpdateServiceSlbmountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateServiceSlbmountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.slbmount.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryServiceSlbmountprogressRequest = {
  authToken?: string(name='auth_token'),
  // process_id
  processId?: string(name='process_id'),
  // region_identity
  regionIdentity?: string(name='region_identity'),
  // service_id
  serviceId?: string(name='service_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryServiceSlbmountprogressResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 执行进度
  progress?: string(name='progress'),
}

/**
 * Description: 查询挂载进度
 * Summary: 查询挂载进度
 */
async function queryServiceSlbmountprogress(request: QueryServiceSlbmountprogressRequest): QueryServiceSlbmountprogressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryServiceSlbmountprogressEx(request, headers, runtime);
}

/**
 * Description: 查询挂载进度
 * Summary: 查询挂载进度
 */
async function queryServiceSlbmountprogressEx(request: QueryServiceSlbmountprogressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryServiceSlbmountprogressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.slbmountprogress.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryServiceLatestsuccessRequest = {
  authToken?: string(name='auth_token'),
  // service_paas_id
  servicePaasId?: string(name='service_paas_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryServiceLatestsuccessResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // service
  service?: string(name='service'),
}

/**
 * Description: 查询最近一次发布成功的应用记录
 * Summary: 查询最近一次发布成功的应用记录
 */
async function queryServiceLatestsuccess(request: QueryServiceLatestsuccessRequest): QueryServiceLatestsuccessResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryServiceLatestsuccessEx(request, headers, runtime);
}

/**
 * Description: 查询最近一次发布成功的应用记录
 * Summary: 查询最近一次发布成功的应用记录
 */
async function queryServiceLatestsuccessEx(request: QueryServiceLatestsuccessRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryServiceLatestsuccessResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.latestsuccess.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitServiceRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model ReinitServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // service
  service?: string(name='service'),
}

/**
 * Description: 重新初始化
 * Summary: 重新初始化
 */
async function reinitService(request: ReinitServiceRequest): ReinitServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitServiceEx(request, headers, runtime);
}

/**
 * Description: 重新初始化
 * Summary: 重新初始化
 */
async function reinitServiceEx(request: ReinitServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecServiceRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model ExecServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // service
  service?: string(name='service'),
}

/**
 * Description: 执行发布单
 * Summary: 执行发布单
 */
async function execService(request: ExecServiceRequest): ExecServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execServiceEx(request, headers, runtime);
}

/**
 * Description: 执行发布单
 * Summary: 执行发布单
 */
async function execServiceEx(request: ExecServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelServiceRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // reason
  reason?: string(name='reason'),
  // workspace
  workspace?: string(name='workspace'),
}

model CancelServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // service
  service?: string(name='service'),
}

/**
 * Description: 取消应用发布
 * Summary: 取消应用发布
 */
async function cancelService(request: CancelServiceRequest): CancelServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelServiceEx(request, headers, runtime);
}

/**
 * Description: 取消应用发布
 * Summary: 取消应用发布
 */
async function cancelServiceEx(request: CancelServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SkipServiceRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model SkipServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // service
  service?: string(name='service'),
}

/**
 * Description: 忽略分组
 * Summary: 忽略分组
 */
async function skipService(request: SkipServiceRequest): SkipServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return skipServiceEx(request, headers, runtime);
}

/**
 * Description: 忽略分组
 * Summary: 忽略分组
 */
async function skipServiceEx(request: SkipServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SkipServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.skip', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartServiceRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model StartServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // service
  service?: string(name='service'),
}

/**
 * Description: 触发服务发布
 * Summary: 触发服务发布
 */
async function startService(request: StartServiceRequest): StartServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startServiceEx(request, headers, runtime);
}

/**
 * Description: 触发服务发布
 * Summary: 触发服务发布
 */
async function startServiceEx(request: StartServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmServiceRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model ConfirmServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // service
  service?: string(name='service'),
}

/**
 * Description: 发布确认
 * Summary: 发布确认
 */
async function confirmService(request: ConfirmServiceRequest): ConfirmServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmServiceEx(request, headers, runtime);
}

/**
 * Description: 发布确认
 * Summary: 发布确认
 */
async function confirmServiceEx(request: ConfirmServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetServiceMachinegroupRequest = {
  authToken?: string(name='auth_token'),
  // 分组数
  groupMount?: long(name='group_mount'),
  // groupStrategyType
  groupStrategyType?: string(name='group_strategy_type'),
  // machine_groups
  machineGroups?: [ string ](name='machine_groups'),
  // need_beta
  needBeta?: boolean(name='need_beta'),
  // service_id
  serviceId?: string(name='service_id'),
  // use_default_setup
  useDefaultSetup?: boolean(name='use_default_setup'),
  // workspace
  workspace?: string(name='workspace'),
}

model SetServiceMachinegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // service
  service?: string(name='service'),
}

/**
 * Description: 配置机器分组
 * Summary: 配置机器分组
 */
async function setServiceMachinegroup(request: SetServiceMachinegroupRequest): SetServiceMachinegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setServiceMachinegroupEx(request, headers, runtime);
}

/**
 * Description: 配置机器分组
 * Summary: 配置机器分组
 */
async function setServiceMachinegroupEx(request: SetServiceMachinegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetServiceMachinegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.machinegroup.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitServiceMachinegroupRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model ReinitServiceMachinegroupResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // service
  service?: string(name='service'),
}

/**
 * Description: 重新初始化机器分组
 * Summary: 重新初始化机器分组
 */
async function reinitServiceMachinegroup(request: ReinitServiceMachinegroupRequest): ReinitServiceMachinegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitServiceMachinegroupEx(request, headers, runtime);
}

/**
 * Description: 重新初始化机器分组
 * Summary: 重新初始化机器分组
 */
async function reinitServiceMachinegroupEx(request: ReinitServiceMachinegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitServiceMachinegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.machinegroup.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListServiceRollbackversionRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // limit
  limit?: long(name='limit'),
  // workspace
  workspace?: string(name='workspace'),
}

model ListServiceRollbackversionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // services
  services?: [ string ](name='services'),
}

/**
 * Description: 查询可回滚服务
 * Summary: 查询可回滚服务
 */
async function listServiceRollbackversion(request: ListServiceRollbackversionRequest): ListServiceRollbackversionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listServiceRollbackversionEx(request, headers, runtime);
}

/**
 * Description: 查询可回滚服务
 * Summary: 查询可回滚服务
 */
async function listServiceRollbackversionEx(request: ListServiceRollbackversionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListServiceRollbackversionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.rollbackversion.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryServiceRollbackversionRequest = {
  authToken?: string(name='auth_token'),
  // depth
  depth?: long(name='depth'),
  // gmt_create_end
  gmtCreateEnd?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create_end'),
  // gmt_create_start
  gmtCreateStart?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create_start'),
  // ids
  ids?: [ string ](name='ids'),
  // name
  name?: string(name='name'),
  // ops_types
  opsTypes?: [ string ](name='ops_types'),
  // page_no
  pageNo?: long(name='page_no'),
  // page_size
  pageSize?: long(name='page_size'),
  // process_definition_id
  processDefinitionId?: string(name='process_definition_id'),
  // service_group_collection_id
  serviceGroupCollectionId?: string(name='service_group_collection_id'),
  // service_paas_id
  servicePaasId?: string(name='service_paas_id'),
  // state
  state?: string(name='state'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryServiceRollbackversionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 版本
  versions?: [ Pair ](name='versions'),
}

/**
 * Description: 查询可回滚版本
 * Summary: 查询可回滚版本
 */
async function queryServiceRollbackversion(request: QueryServiceRollbackversionRequest): QueryServiceRollbackversionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryServiceRollbackversionEx(request, headers, runtime);
}

/**
 * Description: 查询可回滚版本
 * Summary: 查询可回滚版本
 */
async function queryServiceRollbackversionEx(request: QueryServiceRollbackversionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryServiceRollbackversionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.rollbackversion.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RollbackServiceRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // rollback_info
  rollbackInfo?: RollbackInfo(name='rollback_info'),
  // workspace
  workspace?: string(name='workspace'),
}

model RollbackServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 回滚信息
  service?: string(name='service'),
}

/**
 * Description: 回滚应用
 * Summary: 回滚应用
 */
async function rollbackService(request: RollbackServiceRequest): RollbackServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return rollbackServiceEx(request, headers, runtime);
}

/**
 * Description: 回滚应用
 * Summary: 回滚应用
 */
async function rollbackServiceEx(request: RollbackServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RollbackServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.rollback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmrollbackServiceRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // retry_rollbacked
  retryRollbacked?: boolean(name='retry_rollbacked'),
  // workspace
  workspace?: string(name='workspace'),
}

model ConfirmrollbackServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // service
  service?: string(name='service'),
}

/**
 * Description: 回滚确认
 * Summary: 回滚确认
 */
async function confirmrollbackService(request: ConfirmrollbackServiceRequest): ConfirmrollbackServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmrollbackServiceEx(request, headers, runtime);
}

/**
 * Description: 回滚确认
 * Summary: 回滚确认
 */
async function confirmrollbackServiceEx(request: ConfirmrollbackServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmrollbackServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.confirmrollback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryrollbackServiceRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // rollback_info
  rollbackInfo?: RollbackInfo(name='rollback_info'),
  // workspace
  workspace?: string(name='workspace'),
}

model RetryrollbackServiceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // service
  service?: string(name='service'),
}

/**
 * Description: 回滚重试
 * Summary: 回滚重试
 */
async function retryrollbackService(request: RetryrollbackServiceRequest): RetryrollbackServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryrollbackServiceEx(request, headers, runtime);
}

/**
 * Description: 回滚重试
 * Summary: 回滚重试
 */
async function retryrollbackServiceEx(request: RetryrollbackServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryrollbackServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.retryrollback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetServiceArrangementRequest = {
  authToken?: string(name='auth_token'),
  // node_id
  nodeId?: string(name='node_id'),
  // service_id
  serviceId?: string(name='service_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model GetServiceArrangementResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // execution_detail
  executionDetail?: string(name='execution_detail'),
}

/**
 * Description: 获取子流程进度
 * Summary: 获取子流程进度
 */
async function getServiceArrangement(request: GetServiceArrangementRequest): GetServiceArrangementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getServiceArrangementEx(request, headers, runtime);
}

/**
 * Description: 获取子流程进度
 * Summary: 获取子流程进度
 */
async function getServiceArrangementEx(request: GetServiceArrangementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetServiceArrangementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.arrangement.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryServiceArrangementRequest = {
  authToken?: string(name='auth_token'),
  // arrangement_id
  arrangementId?: string(name='arrangement_id'),
  // service_id
  serviceId?: string(name='service_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model RetryServiceArrangementResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // service
  service?: string(name='service'),
}

/**
 * Description: 重试子流程
 * Summary: 重试子流程
 */
async function retryServiceArrangement(request: RetryServiceArrangementRequest): RetryServiceArrangementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryServiceArrangementEx(request, headers, runtime);
}

/**
 * Description: 重试子流程
 * Summary: 重试子流程
 */
async function retryServiceArrangementEx(request: RetryServiceArrangementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryServiceArrangementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.arrangement.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SkipServiceArrangementRequest = {
  authToken?: string(name='auth_token'),
  // arrangement_id
  arrangementId?: string(name='arrangement_id'),
  // service_id
  serviceId?: string(name='service_id'),
  // workspace
  workspace?: string(name='workspace'),
}

model SkipServiceArrangementResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // service
  service?: string(name='service'),
}

/**
 * Description: 忽略子流程
 * Summary: 忽略子流程
 */
async function skipServiceArrangement(request: SkipServiceArrangementRequest): SkipServiceArrangementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return skipServiceArrangementEx(request, headers, runtime);
}

/**
 * Description: 忽略子流程
 * Summary: 忽略子流程
 */
async function skipServiceArrangementEx(request: SkipServiceArrangementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SkipServiceArrangementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.arrangement.skip', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOperationlogRequest = {
  authToken?: string(name='auth_token'),
  // event
  event?: string(name='event'),
  // page_no
  pageNo?: long(name='page_no'),
  // page_size
  pageSize?: long(name='page_size'),
  // result
  result?: boolean(name='result'),
  // target_id
  targetId?: string(name='target_id'),
  // target_type
  targetType?: string(name='target_type'),
  // user_id
  userId?: string(name='user_id'),
}

model QueryOperationlogResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // list
  list?: [ string ](name='list'),
  // page_no
  pageNo?: long(name='page_no'),
  // page_size
  pageSize?: long(name='page_size'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: query op log
 * Summary: query op log
 */
async function queryOperationlog(request: QueryOperationlogRequest): QueryOperationlogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOperationlogEx(request, headers, runtime);
}

/**
 * Description: query op log
 * Summary: query op log
 */
async function queryOperationlogEx(request: QueryOperationlogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOperationlogResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.operationlog.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOperationlogTimelineRequest = {
  authToken?: string(name='auth_token'),
  // customer_id
  customerId?: string(name='customer_id'),
  // gmt_from
  gmtFrom?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_from'),
  // gmt_to
  gmtTo?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_to'),
  // module
  module?: string(name='module'),
  // operation_status
  operationStatus?: string(name='operation_status'),
  // operation_target
  operationTarget?: string(name='operation_target'),
  // operation_type
  operationType?: string(name='operation_type'),
  // operator_id
  operatorId?: string(name='operator_id'),
  // page_no
  pageNo?: long(name='page_no'),
  // page_size
  pageSize?: long(name='page_size'),
  // status
  status?: string(name='status'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryOperationlogTimelineResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // list
  list?: [ string ](name='list'),
  // page_no
  pageNo?: long(name='page_no'),
  // page_size
  pageSize?: long(name='page_size'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: operation time line
 * Summary: operation time line
 */
async function queryOperationlogTimeline(request: QueryOperationlogTimelineRequest): QueryOperationlogTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOperationlogTimelineEx(request, headers, runtime);
}

/**
 * Description: operation time line
 * Summary: operation time line
 */
async function queryOperationlogTimelineEx(request: QueryOperationlogTimelineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOperationlogTimelineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.operationlog.timeline.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetServiceDetailRequest = {
  authToken?: string(name='auth_token'),
  // id
  id?: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model GetServiceDetailResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // service
  service?: string(name='service'),
}

/**
 * Description: 获取发布应用详情
 * Summary: 获取发布应用详情
 */
async function getServiceDetail(request: GetServiceDetailRequest): GetServiceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getServiceDetailEx(request, headers, runtime);
}

/**
 * Description: 获取发布应用详情
 * Summary: 获取发布应用详情
 */
async function getServiceDetailEx(request: GetServiceDetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetServiceDetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.service.detail.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateMetaCellRequest = {
  authToken?: string(name='auth_token'),
  // request
  request?: string(name='request'),
  // workspace
  workspace?: string(name='workspace'),
}

model CreateMetaCellResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
}

/**
 * Description: create cell
 * Summary: create cell
 */
async function createMetaCell(request: CreateMetaCellRequest): CreateMetaCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createMetaCellEx(request, headers, runtime);
}

/**
 * Description: create cell
 * Summary: create cell
 */
async function createMetaCellEx(request: CreateMetaCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMetaCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.meta.cell.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMetaCellRequest = {
  authToken?: string(name='auth_token'),
  // request
  request?: string(name='request'),
  // workspace
  workspace?: string(name='workspace'),
}

model UpdateMetaCellResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: update cell
 * Summary: update cell
 */
async function updateMetaCell(request: UpdateMetaCellRequest): UpdateMetaCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMetaCellEx(request, headers, runtime);
}

/**
 * Description: update cell
 * Summary: update cell
 */
async function updateMetaCellEx(request: UpdateMetaCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMetaCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.meta.cell.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddMetaMasterzonerelRequest = {
  authToken?: string(name='auth_token'),
  // request
  request?: string(name='request'),
  // workspace
  workspace?: string(name='workspace'),
}

model AddMetaMasterzonerelResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 关联 master zone
 * Summary: 关联 master zone
 */
async function addMetaMasterzonerel(request: AddMetaMasterzonerelRequest): AddMetaMasterzonerelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addMetaMasterzonerelEx(request, headers, runtime);
}

/**
 * Description: 关联 master zone
 * Summary: 关联 master zone
 */
async function addMetaMasterzonerelEx(request: AddMetaMasterzonerelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddMetaMasterzonerelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.meta.masterzonerel.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AssignComputerRequest = {
  authToken?: string(name='auth_token'),
  // 应用的完整名称
  applicationName?: string(name='application_name'),
  // 是否启用自动运维，默认为**False**
  autoOps?: boolean(name='auto_ops'),
  // 计算资源与cell的关系，如果不指定会根据分配的应用、服务实例以及computer的zone信息由系统决定，如果无法决定会导致失败，建议在指定了service_name参数的情形下指定该参数
  computerCells?: [ ComputerCell ](name='computer_cells'),
  // 计算资源id，可以指定多个
  computerIds?: [ string ](name='computer_ids'),
  // 是否重新初始化数据磁盘，默认为**False**
  initDataDisk?: boolean(name='init_data_disk'),
  // 是否重新初始化系统磁盘，默认为**False**
  initSysDisk?: boolean(name='init_sys_disk'),
  // 请求业务id，用于幂等性控制等，需要客户端提供并保证唯一。最大64位单字节字符
  reqBizId?: string(name='req_biz_id'),
  // 目标服务实例名称
  serviceName?: string(name='service_name'),
  // 目标工作空间名称
  workspace?: string(name='workspace'),
}

model AssignComputerResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 请求的id
  taskId?: string(name='task_id'),
}

/**
 * Description: 分配指定的一个或者多个计算资源到指定的应用
 * Summary: 分配应用计算资源
 */
async function assignComputer(request: AssignComputerRequest): AssignComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return assignComputerEx(request, headers, runtime);
}

/**
 * Description: 分配指定的一个或者多个计算资源到指定的应用
 * Summary: 分配应用计算资源
 */
async function assignComputerEx(request: AssignComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AssignComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.computer.assign', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReleaseComputerRequest = {
  authToken?: string(name='auth_token'),
  // 计算资源id，可以指定多个
  computerIds?: [ string ](name='computer_ids'),
  // 请求业务id，用于幂等性控制等，需要客户端提供并保证唯一。最大64位单字节字符
  reqBizId?: string(name='req_biz_id'),
}

model ReleaseComputerResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 请求的id
  taskId?: string(name='task_id'),
}

/**
 * Description: 从指定应用释放一个或者多个计算资源
 * Summary: 释放应用计算资源
 */
async function releaseComputer(request: ReleaseComputerRequest): ReleaseComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return releaseComputerEx(request, headers, runtime);
}

/**
 * Description: 从指定应用释放一个或者多个计算资源
 * Summary: 释放应用计算资源
 */
async function releaseComputerEx(request: ReleaseComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReleaseComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.computer.release', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTaskRequest = {
  authToken?: string(name='auth_token'),
  // 请求的业务号，当`task_id`参数指定时该参数会被忽略
  reqBizId?: string(name='req_biz_id'),
  // 异步请求的id， 当`req_biz_id`参数指定时可以不指定该参数，如果指定了该参数则忽略`req_biz_id`参数
  taskId?: string(name='task_id'),
}

model GetTaskResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 
  //                             异步请求创建的时间和日期。采用UTC时间，按照[ISO8601](https://zh.wikipedia.org/wiki/ISO_8601)标准表示，格式为：`YYYY-MM-DDThh:mm:ssZ`
  //                         
  creationTime?: string(name='creation_time'),
  // 异步请求中任务的执行结果，key为任务操作对象id比如某个资源的id，value为操作结果
  executionResults?: [ TaskResult ](name='execution_results'),
  // 异步请求唯一标识
  id?: string(name='id'),
  // 异步请求业务号
  reqBizId?: string(name='req_biz_id'),
  // 异步请求状态，取值：
  //                             INIT：初始化中；
  //                             READY：待执行；
  //                             PROCESSING：执行中；
  //                             COMPLETED：执行完成
  //                         
  status?: string(name='status'),
}

/**
 * Description: 查询异步请求的详情，包括请求状态，请求中的任务执行状态等
 * Summary: 获取异步任务
 */
async function getTask(request: GetTaskRequest): GetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTaskEx(request, headers, runtime);
}

/**
 * Description: 查询异步请求的详情，包括请求状态，请求中的任务执行状态等
 * Summary: 获取异步任务
 */
async function getTaskEx(request: GetTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.task.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateComputerRequest = {
  authToken?: string(name='auth_token'),
  // 实例描述
  description?: string(name='description'),
  // 镜像文件ID，启动实例时选择的镜像资源。
  imageId?: string(name='image_id'),
  // 创建的实例数量。默认为 1 台
  instanceCount?: long(name='instance_count'),
  // 实例名称前缀。可包含小写字母(a-z)，数字(0-9) 和中划线(-)，以字母开头，中划线不能结尾或连续使用，2 ~ 40 个字符。
  name?: string(name='name'),
  // 实例的密码。长度为8至30个字符，必须同时包含大小写英文字母、数字和特殊符号中的三类字符。特殊符号可以是：
  // ()`~!@#^&*-_+=|{}[]:;'<>,.?/
  // 其中，Windows实例不能以斜线号（/）为密码首字符。
  paasword?: string(maxLength=30, minLength=8, name='paasword'),
  // 实例所在地域
  region?: string(name='region'),
  // image 或者 package
  deployType?: string(name='deploy_type'),
  // 新创建实例所属于的安全组ID，同一个安全组内的实例之间可以互相访问。
  securityGroupId?: string(name='security_group_id'),
  // 实例的资源规格。
  specId?: string(name='spec_id'),
  // 单位 G。系统盘大小，需根据选择的 image 类型决定。
  systemDiskSize?: string(name='system_disk_size'),
  // 系统盘类型
  systemDiskType?: string(name='system_disk_type'),
  // VPC类型的实例，需要指定虚拟交换机ID。
  vSwitchId?: string(name='v_switch_id'),
  // 实例所在工作空间
  workspace?: string(name='workspace'),
  // 实例所在可用区
  zone?: string(name='zone'),
}

model CreateComputerResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 实例 id
  computerIds?: [ string ](name='computer_ids'),
}

/**
 * Description: 创建 ecs 实例
 * Summary: 创建 ecs 实例
 */
async function createComputer(request: CreateComputerRequest): CreateComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createComputerEx(request, headers, runtime);
}

/**
 * Description: 创建 ecs 实例
 * Summary: 创建 ecs 实例
 */
async function createComputerEx(request: CreateComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.computer.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSidecarRequest = {
  authToken?: string(name='auth_token'),
  // sidecar描述
  description?: string(name='description'),
  // sidecar名称
  sidecarName?: string(name='sidecar_name'),
  // sidecar生效范围：workspace、workspace_group、region
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id
  scopeIdentity?: string(name='scope_identity'),
}

model CreateSidecarResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建sidecar元数据信息
 * Summary: 创建sidecar元数据信息
 */
async function createSidecar(request: CreateSidecarRequest): CreateSidecarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSidecarEx(request, headers, runtime);
}

/**
 * Description: 创建sidecar元数据信息
 * Summary: 创建sidecar元数据信息
 */
async function createSidecarEx(request: CreateSidecarRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSidecarResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSidecarRequest = {
  authToken?: string(name='auth_token'),
  // 分页请求体
  paginationQuery?: PaginationQuery(name='pagination_query'),
  // sidecar生效范围：workspace、workspace_group、region
  scope?: string(name='scope'),
  // scope对应的唯一标识符
  scopeIdentity?: string(name='scope_identity'),
}

model ListSidecarResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // sidecar元信息结构体列表
  sidecars?: [ Sidecar ](name='sidecars'),
  // 总记录条数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询sidecar元信息列表
 * Summary: 查询sidecar元信息列表
 */
async function listSidecar(request: ListSidecarRequest): ListSidecarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSidecarEx(request, headers, runtime);
}

/**
 * Description: 查询sidecar元信息列表
 * Summary: 查询sidecar元信息列表
 */
async function listSidecarEx(request: ListSidecarRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSidecarResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSidecarVersionRequest = {
  authToken?: string(name='auth_token'),
  // sidecar版本描述
  description?: string(name='description'),
  // release note
  releaseNote?: string(name='release_note'),
  // sidecar生效范围：workspace、workspace_group、region
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace_name
  scopeIdentity?: string(name='scope_identity'),
  // sidecar名称
  sidecarName?: string(name='sidecar_name'),
  // sidecar版本号
  sidecarVersion?: string(name='sidecar_version'),
  // 模板内容
  template?: string(name='template'),
  // sidecar模板配置
  templateConfigs?: [ SidecarTemplateConfig ](name='template_configs'),
  // sidecar版本类型
  type?: string(name='type'),
  // 版本周期：alpha/beta/release
  versionPeriod?: string(name='version_period'),
}

model CreateSidecarVersionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建sidecar模板
 * Summary: 创建sidecar版本
 */
async function createSidecarVersion(request: CreateSidecarVersionRequest): CreateSidecarVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSidecarVersionEx(request, headers, runtime);
}

/**
 * Description: 创建sidecar模板
 * Summary: 创建sidecar版本
 */
async function createSidecarVersionEx(request: CreateSidecarVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSidecarVersionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.version.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSidecarVersionRequest = {
  authToken?: string(name='auth_token'),
  // 分页查询请求体
  paginationQuery?: PaginationQuery(name='pagination_query'),
  // sidecar生效范围：workspace、workspace_group、region
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id
  scopeIdentity?: string(name='scope_identity'),
  // sidecar名称
  sidecarName?: string(name='sidecar_name'),
  // sidecar版本号
  sidecarVersion?: string(name='sidecar_version'),
  // 版本状态
  status?: long(name='status'),
}

model ListSidecarVersionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // sidecar发布版本列表
  sidecarReleaseVersions?: [ SidecarReleaseVersion ](name='sidecar_release_versions'),
  // 总记录条数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询sidecar模板列表
 * Summary: 查询sidecar模板列表
 */
async function listSidecarVersion(request: ListSidecarVersionRequest): ListSidecarVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSidecarVersionEx(request, headers, runtime);
}

/**
 * Description: 查询sidecar模板列表
 * Summary: 查询sidecar模板列表
 */
async function listSidecarVersionEx(request: ListSidecarVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSidecarVersionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.version.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSidecarVersionRequest = {
  authToken?: string(name='auth_token'),
  // sidecar生效范围：workspace、workspace_group、region
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id
  scopeIdentity?: string(name='scope_identity'),
  // sidecar版本
  sidecarName?: string(name='sidecar_name'),
  // sidecar版本号
  sidecarVersion?: string(name='sidecar_version'),
  // sidecar版本类型
  type?: string(name='type'),
}

model GetSidecarVersionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // sidecar发布版本
  sidecarReleaseVersion?: SidecarReleaseVersion(name='sidecar_release_version'),
}

/**
 * Description: 获取sidecar版本详情
 * Summary: 获取sidecar版本详情
 */
async function getSidecarVersion(request: GetSidecarVersionRequest): GetSidecarVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSidecarVersionEx(request, headers, runtime);
}

/**
 * Description: 获取sidecar版本详情
 * Summary: 获取sidecar版本详情
 */
async function getSidecarVersionEx(request: GetSidecarVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSidecarVersionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.version.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSidecarRuleRequest = {
  authToken?: string(name='auth_token'),
  // 规则描述
  description?: string(name='description'),
  // 规则优先级
  level?: long(name='level'),
  // sidecar生效范围：workspace、workspace_group、region
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
  // sidecar版本实例id
  sidecarVersionInstanceId?: string(name='sidecar_version_instance_id'),
}

model CreateSidecarRuleResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建sidecar规则
 * Summary: 创建sidecar规则
 */
async function createSidecarRule(request: CreateSidecarRuleRequest): CreateSidecarRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSidecarRuleEx(request, headers, runtime);
}

/**
 * Description: 创建sidecar规则
 * Summary: 创建sidecar规则
 */
async function createSidecarRuleEx(request: CreateSidecarRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSidecarRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.rule.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSidecarRuleRequest = {
  authToken?: string(name='auth_token'),
  // sidecar生效范围：workspace、workspace_group、region
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
  // sidecar版本id
  sidecarVersionInstanceId?: string(name='sidecar_version_instance_id'),
}

model GetSidecarRuleResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // sidecar rule结构体
  sidecarRule?: SidecarRule(name='sidecar_rule'),
}

/**
 * Description: 获取sidecar单个规则详情
 * Summary: 获取sidecar单个规则详情
 */
async function getSidecarRule(request: GetSidecarRuleRequest): GetSidecarRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSidecarRuleEx(request, headers, runtime);
}

/**
 * Description: 获取sidecar单个规则详情
 * Summary: 获取sidecar单个规则详情
 */
async function getSidecarRuleEx(request: GetSidecarRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSidecarRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.rule.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSidecarRuleRequest = {
  authToken?: string(name='auth_token'),
  // 分页查询
  paginationQuery?: PaginationQuery(name='pagination_query'),
  // sidecar生效范围：workspace、workspace_group、region
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
  // sidecar名称
  sidecarName?: string(name='sidecar_name'),
  // 规则状态
  status?: string(name='status'),
}

model ListSidecarRuleResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // sidecar规则详情列表
  sidecarRules?: [ SidecarRule ](name='sidecar_rules'),
  // 总记录条数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 获取sidecar规则列表
 * Summary: 获取sidecar规则列表
 */
async function listSidecarRule(request: ListSidecarRuleRequest): ListSidecarRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSidecarRuleEx(request, headers, runtime);
}

/**
 * Description: 获取sidecar规则列表
 * Summary: 获取sidecar规则列表
 */
async function listSidecarRuleEx(request: ListSidecarRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSidecarRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.rule.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSidecarInstanceRequest = {
  authToken?: string(name='auth_token'),
  // 规则描述
  description?: string(name='description'),
  // 实例名称
  instanceName?: string(name='instance_name'),
  // 环境参数模板
  params?: string(name='params'),
  // 自定义规则内容
  rule?: string(name='rule'),
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
  // sidecar版本id	
  // 
  sidecarReleaseVersionId?: string(name='sidecar_release_version_id'),
  // sidecar环境参数配置	
  // 
  paramsConfigs?: [ SidecarParamsConfig ](name='params_configs'),
}

model CreateSidecarInstanceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建sidecar版本实例
 * Summary: 创建sidecar版本实例
 */
async function createSidecarInstance(request: CreateSidecarInstanceRequest): CreateSidecarInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSidecarInstanceEx(request, headers, runtime);
}

/**
 * Description: 创建sidecar版本实例
 * Summary: 创建sidecar版本实例
 */
async function createSidecarInstanceEx(request: CreateSidecarInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSidecarInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.instance.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSidecarInstanceRequest = {
  authToken?: string(name='auth_token'),
  // 版本实例名称
  instanceName?: string(name='instance_name'),
  // 分页查询
  paginationQuery?: PaginationQuery(name='pagination_query'),
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
  // 版本实例状态
  status?: long(name='status'),
}

model ListSidecarInstanceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // sidecar版本实例列表
  sidecarVersionInstances?: [ SidecarVersionInstance ](name='sidecar_version_instances'),
  // 总记录条数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询sidecar版本实例列表
 * Summary: 查询sidecar版本实例列表
 */
async function listSidecarInstance(request: ListSidecarInstanceRequest): ListSidecarInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSidecarInstanceEx(request, headers, runtime);
}

/**
 * Description: 查询sidecar版本实例列表
 * Summary: 查询sidecar版本实例列表
 */
async function listSidecarInstanceEx(request: ListSidecarInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSidecarInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.instance.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSidecarInstanceRequest = {
  authToken?: string(name='auth_token'),
  // 版本实例名称
  instanceName?: string(name='instance_name'),
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
  // sidecar版本id
  sidecarReleaseVersionId?: string(name='sidecar_release_version_id'),
}

model GetSidecarInstanceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // sidecar版本实例
  sidecarVersionInstance?: SidecarVersionInstance(name='sidecar_version_instance'),
}

/**
 * Description: 获取sidecar版本实例
 * Summary: 获取sidecar版本实例
 */
async function getSidecarInstance(request: GetSidecarInstanceRequest): GetSidecarInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSidecarInstanceEx(request, headers, runtime);
}

/**
 * Description: 获取sidecar版本实例
 * Summary: 获取sidecar版本实例
 */
async function getSidecarInstanceEx(request: GetSidecarInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSidecarInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.instance.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSidecarRequest = {
  authToken?: string(name='auth_token'),
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope'),
  // scope对应的唯一标识符
  scopeIdentity?: string(name='scope_identity'),
  // sidecar名称
  sidecarName?: string(name='sidecar_name'),
}

model GetSidecarResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // sidecar类型
  sidecar?: Sidecar(name='sidecar'),
}

/**
 * Description: 获取sidecar类型
 * Summary: 获取sidecar类型
 */
async function getSidecar(request: GetSidecarRequest): GetSidecarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSidecarEx(request, headers, runtime);
}

/**
 * Description: 获取sidecar类型
 * Summary: 获取sidecar类型
 */
async function getSidecarEx(request: GetSidecarRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSidecarResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSidecarRequest = {
  authToken?: string(name='auth_token'),
  // sidecar类型描述
  description?: string(name='description'),
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
  // sidecar名称
  sidecarName?: string(name='sidecar_name'),
}

model UpdateSidecarResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新sidecar类型信息
 * Summary: 更新sidecar类型信息
 */
async function updateSidecar(request: UpdateSidecarRequest): UpdateSidecarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSidecarEx(request, headers, runtime);
}

/**
 * Description: 更新sidecar类型信息
 * Summary: 更新sidecar类型信息
 */
async function updateSidecarEx(request: UpdateSidecarRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSidecarResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSidecarRequest = {
  authToken?: string(name='auth_token'),
  // sidecar名称
  sidecarName?: string(name='sidecar_name'),
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
}

model DeleteSidecarResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除sidecar类型
 * Summary: 删除sidecar类型
 */
async function deleteSidecar(request: DeleteSidecarRequest): DeleteSidecarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSidecarEx(request, headers, runtime);
}

/**
 * Description: 删除sidecar类型
 * Summary: 删除sidecar类型
 */
async function deleteSidecarEx(request: DeleteSidecarRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSidecarResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSidecarVersionRequest = {
  authToken?: string(name='auth_token'),
  // sidecar版本描述
  description?: string(name='description'),
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id
  scopeIdentity?: string(name='scope_identity'),
  // sidecar名称
  sidecarName?: string(name='sidecar_name'),
  // sidecar版本号
  sidecarVersion?: string(name='sidecar_version'),
  // 版本状态
  status?: long(name='status'),
  // sidecar模板内容
  template?: string(name='template'),
  // sidecar模板配置
  templateConfigs?: [ SidecarTemplateConfig ](name='template_configs'),
  // sidecar版本类型
  type?: string(name='type'),
  // 版本周期：alpha/beta/release
  // 
  versionPeriod?: string(name='version_period'),
  // 版本特性
  releaseNote?: string(name='release_note'),
}

model UpdateSidecarVersionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新sidecar版本
 * Summary: 更新sidecar版本
 */
async function updateSidecarVersion(request: UpdateSidecarVersionRequest): UpdateSidecarVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSidecarVersionEx(request, headers, runtime);
}

/**
 * Description: 更新sidecar版本
 * Summary: 更新sidecar版本
 */
async function updateSidecarVersionEx(request: UpdateSidecarVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSidecarVersionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.version.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSidecarVersionRequest = {
  authToken?: string(name='auth_token'),
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
  // sidecar名称
  sidecarName?: string(name='sidecar_name'),
  // sidecar版本号
  sidecarVersion?: string(name='sidecar_version'),
  // sidecar版本类型
  type?: string(name='type'),
}

model DeleteSidecarVersionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除sidecar模板
 * Summary: 删除sidecar模板
 */
async function deleteSidecarVersion(request: DeleteSidecarVersionRequest): DeleteSidecarVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSidecarVersionEx(request, headers, runtime);
}

/**
 * Description: 删除sidecar模板
 * Summary: 删除sidecar模板
 */
async function deleteSidecarVersionEx(request: DeleteSidecarVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSidecarVersionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.version.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSidecarInstanceRequest = {
  authToken?: string(name='auth_token'),
  // 版本实例描述	
  // 
  description?: string(name='description'),
  // 版本实例名称
  instanceName?: string(name='instance_name'),
  // 环境模板参数
  params?: string(name='params'),
  // 自定义规则内容
  rule?: string(name='rule'),
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
  // sidecar版本id	
  // 
  sidecarReleaseVersionId?: string(name='sidecar_release_version_id'),
  // sidecar环境参数配置
  paramsConfigs?: [ SidecarParamsConfig ](name='params_configs'),
}

model UpdateSidecarInstanceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新sidecar版本实例
 * Summary: 更新sidecar版本实例
 */
async function updateSidecarInstance(request: UpdateSidecarInstanceRequest): UpdateSidecarInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSidecarInstanceEx(request, headers, runtime);
}

/**
 * Description: 更新sidecar版本实例
 * Summary: 更新sidecar版本实例
 */
async function updateSidecarInstanceEx(request: UpdateSidecarInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSidecarInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.instance.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSidecarInstanceRequest = {
  authToken?: string(name='auth_token'),
  // 版本实例名称	
  // 
  instanceName?: string(name='instance_name'),
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
  // sidecar版本id	
  // 
  sidecarReleaseVersionId?: string(name='sidecar_release_version_id'),
}

model DeleteSidecarInstanceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除sidecar版本实例
 * Summary: 删除sidecar版本实例
 */
async function deleteSidecarInstance(request: DeleteSidecarInstanceRequest): DeleteSidecarInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSidecarInstanceEx(request, headers, runtime);
}

/**
 * Description: 删除sidecar版本实例
 * Summary: 删除sidecar版本实例
 */
async function deleteSidecarInstanceEx(request: DeleteSidecarInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSidecarInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.instance.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSidecarRuleRequest = {
  authToken?: string(name='auth_token'),
  // 规则描述	
  // 
  description?: string(name='description'),
  // 规则优先级
  level?: long(name='level'),
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
  // sidecar版本实例id
  sidecarVersionInstanceId?: string(name='sidecar_version_instance_id'),
  // 规则状态
  status?: string(name='status'),
}

model UpdateSidecarRuleResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新sidecar规则
 * Summary: 更新sidecar规则
 */
async function updateSidecarRule(request: UpdateSidecarRuleRequest): UpdateSidecarRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSidecarRuleEx(request, headers, runtime);
}

/**
 * Description: 更新sidecar规则
 * Summary: 更新sidecar规则
 */
async function updateSidecarRuleEx(request: UpdateSidecarRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSidecarRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.rule.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSidecarRuleRequest = {
  authToken?: string(name='auth_token'),
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
  // sidecar版本实例id
  sidecarVersionInstanceId?: string(name='sidecar_version_instance_id'),
}

model DeleteSidecarRuleResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除sidecar规则
 * Summary: 删除sidecar规则
 */
async function deleteSidecarRule(request: DeleteSidecarRuleRequest): DeleteSidecarRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSidecarRuleEx(request, headers, runtime);
}

/**
 * Description: 删除sidecar规则
 * Summary: 删除sidecar规则
 */
async function deleteSidecarRuleEx(request: DeleteSidecarRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSidecarRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.rule.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSidecarVersionstatusRequest = {
  authToken?: string(name='auth_token'),
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
  // sidecar名称
  sidecarName?: string(name='sidecar_name'),
  // sidecar版本号
  sidecarVersion?: string(name='sidecar_version'),
  // 版本状态
  status?: long(name='status'),
  // 发布、下线、废弃原因
  statusReason?: string(name='status_reason'),
  // sidecar版本类型
  type?: string(name='type'),
}

model UpdateSidecarVersionstatusResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新sidecar版本状态
 * Summary: 更新sidecar版本状态
 */
async function updateSidecarVersionstatus(request: UpdateSidecarVersionstatusRequest): UpdateSidecarVersionstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSidecarVersionstatusEx(request, headers, runtime);
}

/**
 * Description: 更新sidecar版本状态
 * Summary: 更新sidecar版本状态
 */
async function updateSidecarVersionstatusEx(request: UpdateSidecarVersionstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSidecarVersionstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.versionstatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSidecarInstancestatusRequest = {
  authToken?: string(name='auth_token'),
  // 版本实例名称
  instanceName?: string(name='instance_name'),
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
  // sidecar版本id
  sidecarReleaseVersionId?: string(name='sidecar_release_version_id'),
  // 版本实例状态
  status?: long(name='status'),
  // 发布、下线、废弃原因
  statusReason?: string(name='status_reason'),
}

model UpdateSidecarInstancestatusResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新sidecar版本实例状态
 * Summary: 更新sidecar版本实例状态
 */
async function updateSidecarInstancestatus(request: UpdateSidecarInstancestatusRequest): UpdateSidecarInstancestatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSidecarInstancestatusEx(request, headers, runtime);
}

/**
 * Description: 更新sidecar版本实例状态
 * Summary: 更新sidecar版本实例状态
 */
async function updateSidecarInstancestatusEx(request: UpdateSidecarInstancestatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSidecarInstancestatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.instancestatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSidecarRulestatusRequest = {
  authToken?: string(name='auth_token'),
  // sidecar生效范围：workspace、workspace_group、region	
  // 
  scope?: string(name='scope'),
  // scope对应的唯一标识，例如workspace对应workspace id	
  // 
  scopeIdentity?: string(name='scope_identity'),
  // sidecar版本实例id
  sidecarVersionInstanceId?: string(name='sidecar_version_instance_id'),
  // 规则状态
  status?: long(name='status'),
  // 发布、下线、废弃原因
  statusReason?: string(name='status_reason'),
}

model UpdateSidecarRulestatusResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新sidecar规则状态
 * Summary: 更新sidecar规则状态
 */
async function updateSidecarRulestatus(request: UpdateSidecarRulestatusRequest): UpdateSidecarRulestatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSidecarRulestatusEx(request, headers, runtime);
}

/**
 * Description: 更新sidecar规则状态
 * Summary: 更新sidecar规则状态
 */
async function updateSidecarRulestatusEx(request: UpdateSidecarRulestatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSidecarRulestatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.sidecar.rulestatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAppbaselineSidecarRequest = {
  authToken?: string(name='auth_token'),
  // 应用名
  appName?: string(name='app_name'),
  // sidecar类型
  category?: string(name='category'),
  // 应用基线适用条件，网商仅能指定workspaceGroups属性，并且只能指定一个workspaceGroup
  conditions?: [ SidecarCondition ](name='conditions'),
  // 是否开启sidecar
  enable?: boolean(name='enable'),
  // sidecar版本号
  sidecarVersion?: string(name='sidecar_version'),
}

model CreateAppbaselineSidecarResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用基线ID
  appbaselineId?: string(name='appbaseline_id'),
}

/**
 * Description: 创建应用sidecar基线
 * Summary: 创建应用sidecar基线
 */
async function createAppbaselineSidecar(request: CreateAppbaselineSidecarRequest): CreateAppbaselineSidecarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAppbaselineSidecarEx(request, headers, runtime);
}

/**
 * Description: 创建应用sidecar基线
 * Summary: 创建应用sidecar基线
 */
async function createAppbaselineSidecarEx(request: CreateAppbaselineSidecarRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppbaselineSidecarResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appbaseline.sidecar.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppbaselineSidecarRequest = {
  authToken?: string(name='auth_token'),
  // 应用名
  appName?: string(name='app_name'),
  // sidecar类型
  category?: string(name='category'),
  // 过滤条件，网商仅能指定workspaceGroups属性
  condition?: SidecarCondition(name='condition'),
  // sidecar版本号
  sidecarVersion?: string(name='sidecar_version'),
}

model ListAppbaselineSidecarResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用基线列表
  appbaselines?: [ AppBaselineSidecarConfig ](name='appbaselines'),
}

/**
 * Description: 查询应用sidecar基线
 * Summary: 查询应用sidecar基线
 */
async function listAppbaselineSidecar(request: ListAppbaselineSidecarRequest): ListAppbaselineSidecarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppbaselineSidecarEx(request, headers, runtime);
}

/**
 * Description: 查询应用sidecar基线
 * Summary: 查询应用sidecar基线
 */
async function listAppbaselineSidecarEx(request: ListAppbaselineSidecarRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppbaselineSidecarResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appbaseline.sidecar.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteAppbaselineSidecarRequest = {
  authToken?: string(name='auth_token'),
  // 应用基线ID
  appbaselineId?: string(name='appbaseline_id'),
}

model DeleteAppbaselineSidecarResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除应用sidecar基线
 * Summary: 删除应用sidecar基线
 */
async function deleteAppbaselineSidecar(request: DeleteAppbaselineSidecarRequest): DeleteAppbaselineSidecarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteAppbaselineSidecarEx(request, headers, runtime);
}

/**
 * Description: 删除应用sidecar基线
 * Summary: 删除应用sidecar基线
 */
async function deleteAppbaselineSidecarEx(request: DeleteAppbaselineSidecarRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAppbaselineSidecarResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appbaseline.sidecar.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAppbaselineSidecarRequest = {
  authToken?: string(name='auth_token'),
  // 应用sidecar基线id
  appbaselineId?: string(name='appbaseline_id'),
  // 是否开启sidecar
  enable?: boolean(name='enable'),
  // sidecar版本号
  sidecarVersion?: string(name='sidecar_version'),
}

model UpdateAppbaselineSidecarResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新应用sidecar基线
 * Summary: 更新应用sidecar基线
 */
async function updateAppbaselineSidecar(request: UpdateAppbaselineSidecarRequest): UpdateAppbaselineSidecarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAppbaselineSidecarEx(request, headers, runtime);
}

/**
 * Description: 更新应用sidecar基线
 * Summary: 更新应用sidecar基线
 */
async function updateAppbaselineSidecarEx(request: UpdateAppbaselineSidecarRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAppbaselineSidecarResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appbaseline.sidecar.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveAppbaselineSidecarRequest = {
  authToken?: string(name='auth_token'),
  // 应用名
  appName?: string(name='app_name'),
  // sidecar类型
  category?: string(name='category'),
  // 应用基线适用条件，网商仅能指定workspaceGroups属性，并且只能指定一个workspaceGroup
  conditions?: [ SidecarCondition ](name='conditions'),
  // 是否开启sidecar
  enable?: boolean(name='enable'),
  // sidecar版本号
  sidecarVersion?: string(name='sidecar_version'),
}

model SaveAppbaselineSidecarResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 应用基线ID
  appbaselineId?: string(name='appbaseline_id'),
}

/**
 * Description: 创建或更新应用sidecar基线，app_name category conditions更新的时候是主键
 * Summary: 创建或更新应用sidecar基线
 */
async function saveAppbaselineSidecar(request: SaveAppbaselineSidecarRequest): SaveAppbaselineSidecarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveAppbaselineSidecarEx(request, headers, runtime);
}

/**
 * Description: 创建或更新应用sidecar基线，app_name category conditions更新的时候是主键
 * Summary: 创建或更新应用sidecar基线
 */
async function saveAppbaselineSidecarEx(request: SaveAppbaselineSidecarRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveAppbaselineSidecarResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.appbaseline.sidecar.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetWorkspaceRequest = {
  authToken?: string(name='auth_token'),
  // 所属工作空间名称
  workspace?: string(name='workspace'),
}

model GetWorkspaceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 创建时间
  createTime?: string(name='create_time'),
  // workspace 名称
  id?: string(name='id'),
  // workspace 显示名称
  name?: string(name='name'),
  // 网络类型
  networkType?: string(name='network_type'),
  // workspace所在regionId
  region?: string(name='region'),
  // 所属租户名称
  tenant?: string(name='tenant'),
  // 最近更新时间
  updateTime?: string(name='update_time'),
  // workspace所在zoneId列表
  zones?: [ string ](name='zones'),
}

/**
 * Description: 查询workspace详情
 * Summary: 获取workspace
 */
async function getWorkspace(request: GetWorkspaceRequest): GetWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 查询workspace详情
 * Summary: 获取workspace
 */
async function getWorkspaceEx(request: GetWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.workspace.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryWorkspaceRequest = {
  authToken?: string(name='auth_token'),
  // 工作空间状态。输入示例：status.1=CREATED
  status?: [ string ](name='status'),
}

model QueryWorkspaceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 此应用下所有计算容器分组运维状态详情
  groups?: [ OpsGroup ](name='groups'),
  // 查询结果，workspace列表
  workspaces?: [ Workspace ](name='workspaces'),
}

/**
 * Description: 查询workspace列表，可根据状态过滤。
 * Summary: 查询workspace
 */
async function queryWorkspace(request: QueryWorkspaceRequest): QueryWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 查询workspace列表，可根据状态过滤。
 * Summary: 查询workspace
 */
async function queryWorkspaceEx(request: QueryWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.workspace.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateWorkspaceRequest = {
  authToken?: string(name='auth_token'),
  // workspace 显示名称
  displayName?: string(name='display_name'),
  // workspace名称
  name?: string(name='name'),
  // 网络类型
  networkType?: string(name='network_type'),
  // 地域id
  regionId?: string(name='region_id'),
  // 机房ID
  zoneIds?: [ string ](name='zone_ids'),
}

model CreateWorkspaceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // workspace
  workspace?: Workspace(name='workspace'),
}

/**
 * Description: 创建workspace
 * Summary: 创建workspace
 */
async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 创建workspace
 * Summary: 创建workspace
 */
async function createWorkspaceEx(request: CreateWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.workspace.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListWorkspaceRequest = {
  authToken?: string(name='auth_token'),
}

model ListWorkspaceResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // workspace列表。
  workspaces?: [ Workspace ](name='workspaces'),
}

/**
 * Description: 查询workspace列表2.0。
 * Summary: 查询workspace列表2.0
 */
async function listWorkspace(request: ListWorkspaceRequest): ListWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 查询workspace列表2.0。
 * Summary: 查询workspace列表2.0
 */
async function listWorkspaceEx(request: ListWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.deps.workspace.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

